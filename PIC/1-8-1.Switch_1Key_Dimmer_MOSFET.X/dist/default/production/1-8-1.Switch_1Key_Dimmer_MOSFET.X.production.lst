

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Feb 04 16:06:51 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text144,local,class=CODE,merge=1,delta=2
   164                           	dabs	1,0x7E,2
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0191                     	;# 
   218  0191                     	;# 
   219  0192                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020D                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0213                     	;# 
   245  0214                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0298                     	;# 
   259  0298                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0FE4                     	;# 
   266  0FE5                     	;# 
   267  0FE6                     	;# 
   268  0FE7                     	;# 
   269  0FE8                     	;# 
   270  0FE9                     	;# 
   271  0FEA                     	;# 
   272  0FEB                     	;# 
   273  0FED                     	;# 
   274  0FEE                     	;# 
   275  0FEF                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  011D                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0197                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020D                     	;# 
   349  0210                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0197                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020D                     	;# 
   460  0210                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  008C                     	;# 
   526  008D                     	;# 
   527  008E                     	;# 
   528  0090                     	;# 
   529  0091                     	;# 
   530  0092                     	;# 
   531  0095                     	;# 
   532  0096                     	;# 
   533  0097                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  011D                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0197                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019D                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  020D                     	;# 
   571  0210                     	;# 
   572  0211                     	;# 
   573  0211                     	;# 
   574  0212                     	;# 
   575  0212                     	;# 
   576  0213                     	;# 
   577  0213                     	;# 
   578  0214                     	;# 
   579  0214                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0216                     	;# 
   584  0216                     	;# 
   585  0217                     	;# 
   586  0217                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  0394                     	;# 
   596  0395                     	;# 
   597  0396                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0090                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0099                     	;# 
   646  009A                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009C                     	;# 
   650  009D                     	;# 
   651  009E                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  011D                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020D                     	;# 
   682  0210                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  008C                     	;# 
   748  008D                     	;# 
   749  008E                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  011D                     	;# 
   769  018C                     	;# 
   770  018D                     	;# 
   771  018E                     	;# 
   772  0191                     	;# 
   773  0191                     	;# 
   774  0192                     	;# 
   775  0193                     	;# 
   776  0193                     	;# 
   777  0194                     	;# 
   778  0195                     	;# 
   779  0196                     	;# 
   780  0197                     	;# 
   781  0199                     	;# 
   782  019A                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019C                     	;# 
   788  019C                     	;# 
   789  019D                     	;# 
   790  019E                     	;# 
   791  019F                     	;# 
   792  020D                     	;# 
   793  0210                     	;# 
   794  0211                     	;# 
   795  0211                     	;# 
   796  0212                     	;# 
   797  0212                     	;# 
   798  0213                     	;# 
   799  0213                     	;# 
   800  0214                     	;# 
   801  0214                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0216                     	;# 
   807  0217                     	;# 
   808  0217                     	;# 
   809  0291                     	;# 
   810  0291                     	;# 
   811  0292                     	;# 
   812  0293                     	;# 
   813  0298                     	;# 
   814  0298                     	;# 
   815  0299                     	;# 
   816  029A                     	;# 
   817  0394                     	;# 
   818  0395                     	;# 
   819  0396                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0015                     	;# 
   850  0016                     	;# 
   851  0016                     	;# 
   852  0017                     	;# 
   853  0018                     	;# 
   854  0019                     	;# 
   855  001A                     	;# 
   856  001B                     	;# 
   857  001C                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  0090                     	;# 
   862  0091                     	;# 
   863  0092                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0116                     	;# 
   878  0117                     	;# 
   879  011D                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0191                     	;# 
   884  0191                     	;# 
   885  0192                     	;# 
   886  0193                     	;# 
   887  0193                     	;# 
   888  0194                     	;# 
   889  0195                     	;# 
   890  0196                     	;# 
   891  0197                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020D                     	;# 
   904  0210                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  0394                     	;# 
   929  0395                     	;# 
   930  0396                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0090                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0197                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020D                     	;# 
  1015  0210                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0298                     	;# 
  1036  0298                     	;# 
  1037  0299                     	;# 
  1038  029A                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000D                     	;# 
  1067  000E                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  008C                     	;# 
  1081  008D                     	;# 
  1082  008E                     	;# 
  1083  0090                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0116                     	;# 
  1100  0117                     	;# 
  1101  011D                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020D                     	;# 
  1126  0210                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  0394                     	;# 
  1151  0395                     	;# 
  1152  0396                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  008E                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  011D                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  018E                     	;# 
  1216  0191                     	;# 
  1217  0191                     	;# 
  1218  0192                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0197                     	;# 
  1225  0199                     	;# 
  1226  019A                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019E                     	;# 
  1235  019F                     	;# 
  1236  020D                     	;# 
  1237  0210                     	;# 
  1238  0211                     	;# 
  1239  0211                     	;# 
  1240  0212                     	;# 
  1241  0212                     	;# 
  1242  0213                     	;# 
  1243  0213                     	;# 
  1244  0214                     	;# 
  1245  0214                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0216                     	;# 
  1251  0217                     	;# 
  1252  0217                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0298                     	;# 
  1258  0298                     	;# 
  1259  0299                     	;# 
  1260  029A                     	;# 
  1261  0394                     	;# 
  1262  0395                     	;# 
  1263  0396                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0010                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0197                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019C                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020D                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  0394                     	;# 
  1373  0395                     	;# 
  1374  0396                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  0010                     	;# 
  1402  0011                     	;# 
  1403  0012                     	;# 
  1404  0015                     	;# 
  1405  0016                     	;# 
  1406  0016                     	;# 
  1407  0017                     	;# 
  1408  0018                     	;# 
  1409  0019                     	;# 
  1410  001A                     	;# 
  1411  001B                     	;# 
  1412  001C                     	;# 
  1413  008C                     	;# 
  1414  008D                     	;# 
  1415  008E                     	;# 
  1416  0090                     	;# 
  1417  0091                     	;# 
  1418  0092                     	;# 
  1419  0095                     	;# 
  1420  0096                     	;# 
  1421  0097                     	;# 
  1422  0099                     	;# 
  1423  009A                     	;# 
  1424  009B                     	;# 
  1425  009B                     	;# 
  1426  009C                     	;# 
  1427  009D                     	;# 
  1428  009E                     	;# 
  1429  010C                     	;# 
  1430  010D                     	;# 
  1431  010E                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  011D                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0197                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019C                     	;# 
  1454  019C                     	;# 
  1455  019D                     	;# 
  1456  019E                     	;# 
  1457  019F                     	;# 
  1458  020D                     	;# 
  1459  0210                     	;# 
  1460  0211                     	;# 
  1461  0211                     	;# 
  1462  0212                     	;# 
  1463  0212                     	;# 
  1464  0213                     	;# 
  1465  0213                     	;# 
  1466  0214                     	;# 
  1467  0214                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0216                     	;# 
  1472  0216                     	;# 
  1473  0217                     	;# 
  1474  0217                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0FE4                     	;# 
  1487  0FE5                     	;# 
  1488  0FE6                     	;# 
  1489  0FE7                     	;# 
  1490  0FE8                     	;# 
  1491  0FE9                     	;# 
  1492  0FEA                     	;# 
  1493  0FEB                     	;# 
  1494  0FED                     	;# 
  1495  0FEE                     	;# 
  1496  0FEF                     	;# 
  1497  0000                     	;# 
  1498  0001                     	;# 
  1499  0002                     	;# 
  1500  0003                     	;# 
  1501  0004                     	;# 
  1502  0005                     	;# 
  1503  0006                     	;# 
  1504  0007                     	;# 
  1505  0008                     	;# 
  1506  0009                     	;# 
  1507  000A                     	;# 
  1508  000B                     	;# 
  1509  000C                     	;# 
  1510  000D                     	;# 
  1511  000E                     	;# 
  1512  0010                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0090                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020D                     	;# 
  1570  0210                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0010                     	;# 
  1624  0011                     	;# 
  1625  0012                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0194                     	;# 
  1666  0195                     	;# 
  1667  0196                     	;# 
  1668  0197                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0216                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0217                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0298                     	;# 
  1702  0298                     	;# 
  1703  0299                     	;# 
  1704  029A                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008D                     	;# 
  1748  008E                     	;# 
  1749  0090                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0095                     	;# 
  1753  0096                     	;# 
  1754  0097                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  010C                     	;# 
  1763  010D                     	;# 
  1764  010E                     	;# 
  1765  0116                     	;# 
  1766  0117                     	;# 
  1767  011D                     	;# 
  1768  018C                     	;# 
  1769  018D                     	;# 
  1770  018E                     	;# 
  1771  0191                     	;# 
  1772  0191                     	;# 
  1773  0192                     	;# 
  1774  0193                     	;# 
  1775  0193                     	;# 
  1776  0194                     	;# 
  1777  0195                     	;# 
  1778  0196                     	;# 
  1779  0197                     	;# 
  1780  0199                     	;# 
  1781  019A                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019C                     	;# 
  1787  019C                     	;# 
  1788  019D                     	;# 
  1789  019E                     	;# 
  1790  019F                     	;# 
  1791  020D                     	;# 
  1792  0210                     	;# 
  1793  0211                     	;# 
  1794  0211                     	;# 
  1795  0212                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0213                     	;# 
  1799  0214                     	;# 
  1800  0214                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0216                     	;# 
  1805  0216                     	;# 
  1806  0217                     	;# 
  1807  0217                     	;# 
  1808  0291                     	;# 
  1809  0291                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  0FE4                     	;# 
  1820  0FE5                     	;# 
  1821  0FE6                     	;# 
  1822  0FE7                     	;# 
  1823  0FE8                     	;# 
  1824  0FE9                     	;# 
  1825  0FEA                     	;# 
  1826  0FEB                     	;# 
  1827  0FED                     	;# 
  1828  0FEE                     	;# 
  1829  0FEF                     	;# 
  1830  0000                     	;# 
  1831  0001                     	;# 
  1832  0002                     	;# 
  1833  0003                     	;# 
  1834  0004                     	;# 
  1835  0005                     	;# 
  1836  0006                     	;# 
  1837  0007                     	;# 
  1838  0008                     	;# 
  1839  0009                     	;# 
  1840  000A                     	;# 
  1841  000B                     	;# 
  1842  000C                     	;# 
  1843  000D                     	;# 
  1844  000E                     	;# 
  1845  0010                     	;# 
  1846  0011                     	;# 
  1847  0012                     	;# 
  1848  0015                     	;# 
  1849  0016                     	;# 
  1850  0016                     	;# 
  1851  0017                     	;# 
  1852  0018                     	;# 
  1853  0019                     	;# 
  1854  001A                     	;# 
  1855  001B                     	;# 
  1856  001C                     	;# 
  1857  008C                     	;# 
  1858  008D                     	;# 
  1859  008E                     	;# 
  1860  0090                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0095                     	;# 
  1864  0096                     	;# 
  1865  0097                     	;# 
  1866  0099                     	;# 
  1867  009A                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  010C                     	;# 
  1874  010D                     	;# 
  1875  010E                     	;# 
  1876  0116                     	;# 
  1877  0117                     	;# 
  1878  011D                     	;# 
  1879  018C                     	;# 
  1880  018D                     	;# 
  1881  018E                     	;# 
  1882  0191                     	;# 
  1883  0191                     	;# 
  1884  0192                     	;# 
  1885  0193                     	;# 
  1886  0193                     	;# 
  1887  0194                     	;# 
  1888  0195                     	;# 
  1889  0196                     	;# 
  1890  0197                     	;# 
  1891  0199                     	;# 
  1892  019A                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020D                     	;# 
  1903  0210                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0291                     	;# 
  1920  0291                     	;# 
  1921  0292                     	;# 
  1922  0293                     	;# 
  1923  0298                     	;# 
  1924  0298                     	;# 
  1925  0299                     	;# 
  1926  029A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  0FE4                     	;# 
  1931  0FE5                     	;# 
  1932  0FE6                     	;# 
  1933  0FE7                     	;# 
  1934  0FE8                     	;# 
  1935  0FE9                     	;# 
  1936  0FEA                     	;# 
  1937  0FEB                     	;# 
  1938  0FED                     	;# 
  1939  0FEE                     	;# 
  1940  0FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0095                     	;# 
  1975  0096                     	;# 
  1976  0097                     	;# 
  1977  0099                     	;# 
  1978  009A                     	;# 
  1979  009B                     	;# 
  1980  009B                     	;# 
  1981  009C                     	;# 
  1982  009D                     	;# 
  1983  009E                     	;# 
  1984  010C                     	;# 
  1985  010D                     	;# 
  1986  010E                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  011D                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0191                     	;# 
  1994  0191                     	;# 
  1995  0192                     	;# 
  1996  0193                     	;# 
  1997  0193                     	;# 
  1998  0194                     	;# 
  1999  0195                     	;# 
  2000  0196                     	;# 
  2001  0197                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019F                     	;# 
  2013  020D                     	;# 
  2014  0210                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052  0000                     	;# 
  2053  0001                     	;# 
  2054  0002                     	;# 
  2055  0003                     	;# 
  2056  0004                     	;# 
  2057  0005                     	;# 
  2058  0006                     	;# 
  2059  0007                     	;# 
  2060  0008                     	;# 
  2061  0009                     	;# 
  2062  000A                     	;# 
  2063  000B                     	;# 
  2064  000C                     	;# 
  2065  000D                     	;# 
  2066  000E                     	;# 
  2067  0010                     	;# 
  2068  0011                     	;# 
  2069  0012                     	;# 
  2070  0015                     	;# 
  2071  0016                     	;# 
  2072  0016                     	;# 
  2073  0017                     	;# 
  2074  0018                     	;# 
  2075  0019                     	;# 
  2076  001A                     	;# 
  2077  001B                     	;# 
  2078  001C                     	;# 
  2079  008C                     	;# 
  2080  008D                     	;# 
  2081  008E                     	;# 
  2082  0090                     	;# 
  2083  0091                     	;# 
  2084  0092                     	;# 
  2085  0095                     	;# 
  2086  0096                     	;# 
  2087  0097                     	;# 
  2088  0099                     	;# 
  2089  009A                     	;# 
  2090  009B                     	;# 
  2091  009B                     	;# 
  2092  009C                     	;# 
  2093  009D                     	;# 
  2094  009E                     	;# 
  2095  010C                     	;# 
  2096  010D                     	;# 
  2097  010E                     	;# 
  2098  0116                     	;# 
  2099  0117                     	;# 
  2100  011D                     	;# 
  2101  018C                     	;# 
  2102  018D                     	;# 
  2103  018E                     	;# 
  2104  0191                     	;# 
  2105  0191                     	;# 
  2106  0192                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0197                     	;# 
  2113  0199                     	;# 
  2114  019A                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019C                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020D                     	;# 
  2125  0210                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0298                     	;# 
  2146  0298                     	;# 
  2147  0299                     	;# 
  2148  029A                     	;# 
  2149  0394                     	;# 
  2150  0395                     	;# 
  2151  0396                     	;# 
  2152  0FE4                     	;# 
  2153  0FE5                     	;# 
  2154  0FE6                     	;# 
  2155  0FE7                     	;# 
  2156  0FE8                     	;# 
  2157  0FE9                     	;# 
  2158  0FEA                     	;# 
  2159  0FEB                     	;# 
  2160  0FED                     	;# 
  2161  0FEE                     	;# 
  2162  0FEF                     	;# 
  2163                           
  2164                           	psect	idataBANK4
  2165  103B                     __pidataBANK4:	
  2166                           
  2167                           ;initializer for __product
  2168  103B  3463               	retlw	99
  2169  103C  3402               	retlw	2
  2170  103D  3400               	retlw	0
  2171  103E  3400               	retlw	0
  2172  103F  3400               	retlw	0
  2173  1040  3400               	retlw	0
  2174  1041  3400               	retlw	0
  2175  1042  3400               	retlw	0
  2176  1043  3400               	retlw	0
  2177  1044  3400               	retlw	0
  2178  1045  3400               	retlw	0
  2179  1046  3400               	retlw	0
  2180  1047  34FF               	retlw	255
  2181  1048  34FF               	retlw	255
  2182  1049  34FF               	retlw	255
  2183  104A  3400               	retlw	0
  2184  104B  3400               	retlw	0
  2185  104C  3400               	retlw	0
  2186  104D  3400               	retlw	0
  2187  104E  3400               	retlw	0
  2188  104F  3400               	retlw	0
  2189  1050  3400               	retlw	0
  2190  1051  3400               	retlw	0
  2191  1052  3400               	retlw	0
  2192  1053  3400               	retlw	0
  2193  1054  3400               	retlw	0
  2194  1055  3400               	retlw	0
  2195  1056  3400               	retlw	0
  2196  1057  3400               	retlw	0
  2197  1058  3400               	retlw	0
  2198  1059  3400               	retlw	0
  2199  105A  3400               	retlw	0
  2200                           
  2201                           	psect	stringtext
  2202  1800                     __pstringtext:	
  2203  1800                     _CC2500_registers_address:	
  2204  1800  3403               	retlw	3
  2205  1801  3416               	retlw	22
  2206  1802  3417               	retlw	23
  2207  1803  341E               	retlw	30
  2208  1804  341F               	retlw	31
  2209  1805  3420               	retlw	32
  2210  1806  342A               	retlw	42
  2211  1807  342B               	retlw	43
  2212  1808  340B               	retlw	11
  2213  1809  340C               	retlw	12
  2214  180A  340D               	retlw	13
  2215  180B  340E               	retlw	14
  2216  180C  340F               	retlw	15
  2217  180D  3410               	retlw	16
  2218  180E  3411               	retlw	17
  2219  180F  3412               	retlw	18
  2220  1810  3413               	retlw	19
  2221  1811  3414               	retlw	20
  2222  1812  340A               	retlw	10
  2223  1813  3415               	retlw	21
  2224  1814  3421               	retlw	33
  2225  1815  3422               	retlw	34
  2226  1816  3418               	retlw	24
  2227  1817  3419               	retlw	25
  2228  1818  341A               	retlw	26
  2229  1819  341B               	retlw	27
  2230  181A  341C               	retlw	28
  2231  181B  341D               	retlw	29
  2232  181C  3423               	retlw	35
  2233  181D  3424               	retlw	36
  2234  181E  3425               	retlw	37
  2235  181F  3426               	retlw	38
  2236  1820  3429               	retlw	41
  2237  1821  342C               	retlw	44
  2238  1822  342D               	retlw	45
  2239  1823  342E               	retlw	46
  2240  1824  3400               	retlw	0
  2241  1825  3401               	retlw	1
  2242  1826  3402               	retlw	2
  2243  1827  3407               	retlw	7
  2244  1828  3408               	retlw	8
  2245  1829  3409               	retlw	9
  2246  182A  3406               	retlw	6
  2247  182B  3404               	retlw	4
  2248  182C  3405               	retlw	5
  2249  182D  3427               	retlw	39
  2250  182E  3428               	retlw	40
  2251  182F                     __end_of_CC2500_registers_address:	
  2252  182F                     _CC2500_rfSettings:	
  2253  182F  3407               	retlw	7
  2254  1830  3407               	retlw	7
  2255  1831  3430               	retlw	48
  2256  1832  3487               	retlw	135
  2257  1833  346B               	retlw	107
  2258  1834  34F8               	retlw	248
  2259  1835  347F               	retlw	127
  2260  1836  343F               	retlw	63
  2261  1837  3409               	retlw	9
  2262  1838  3400               	retlw	0
  2263  1839  345C               	retlw	92
  2264  183A  34A7               	retlw	167
  2265  183B  3462               	retlw	98
  2266  183C  3486               	retlw	134
  2267  183D  3483               	retlw	131
  2268  183E  3403               	retlw	3
  2269  183F  3422               	retlw	34
  2270  1840  34F8               	retlw	248
  2271  1841  3400               	retlw	0
  2272  1842  3444               	retlw	68
  2273  1843  34B6               	retlw	182
  2274  1844  3410               	retlw	16
  2275  1845  3418               	retlw	24
  2276  1846  341D               	retlw	29
  2277  1847  341C               	retlw	28
  2278  1848  34C7               	retlw	199
  2279  1849  3400               	retlw	0
  2280  184A  34B2               	retlw	178
  2281  184B  34EA               	retlw	234
  2282  184C  340A               	retlw	10
  2283  184D  3400               	retlw	0
  2284  184E  3411               	retlw	17
  2285  184F  3459               	retlw	89
  2286  1850  3488               	retlw	136
  2287  1851  3431               	retlw	49
  2288  1852  340B               	retlw	11
  2289  1853  342F               	retlw	47
  2290  1854  342E               	retlw	46
  2291  1855  3406               	retlw	6
  2292  1856  3404               	retlw	4
  2293  1857  3405               	retlw	5
  2294  1858  3400               	retlw	0
  2295  1859  3430               	retlw	48
  2296  185A  34D3               	retlw	211
  2297  185B  3491               	retlw	145
  2298  185C  3441               	retlw	65
  2299  185D  3400               	retlw	0
  2300  185E                     __end_of_CC2500_rfSettings:	
  2301  185E                     _CC2500_patable_vaule:	
  2302  185E  34FE               	retlw	254
  2303  185F  34FE               	retlw	254
  2304  1860  34FE               	retlw	254
  2305  1861  34FE               	retlw	254
  2306  1862  34FE               	retlw	254
  2307  1863  34FE               	retlw	254
  2308  1864  34FE               	retlw	254
  2309  1865  34FE               	retlw	254
  2310  1866                     __end_of_CC2500_patable_vaule:	
  2311                           
  2312                           	psect	nvBANK1
  2313  00ED                     __pnvBANK1:	
  2314  00ED                     _product:	
  2315  00ED                     	ds	1
  2316  000C                     _PORTA	set	12
  2317  000D                     _PORTB	set	13
  2318  000E                     _PORTC	set	14
  2319  0018                     _T1CON	set	24
  2320  0017                     _TMR1H	set	23
  2321  0016                     _TMR1L	set	22
  2322  005F                     _GIE	set	95
  2323  005B                     _IOCIE	set	91
  2324  0058                     _IOCIF	set	88
  2325  005E                     _PEIE	set	94
  2326  0060                     _RA0	set	96
  2327  0064                     _RA4	set	100
  2328  0066                     _RA6	set	102
  2329  0067                     _RA7	set	103
  2330  0068                     _RB0	set	104
  2331  0069                     _RB1	set	105
  2332  006A                     _RB2	set	106
  2333  006B                     _RB3	set	107
  2334  006D                     _RB5	set	109
  2335  0070                     _RC0	set	112
  2336  0071                     _RC1	set	113
  2337  0073                     _RC3	set	115
  2338  0074                     _RC4	set	116
  2339  0075                     _RC5	set	117
  2340  0088                     _TMR1IF	set	136
  2341  009D                     _ADCON0	set	157
  2342  009E                     _ADCON1	set	158
  2343  009C                     _ADRESH	set	156
  2344  009B                     _ADRESL	set	155
  2345  0099                     _OSCCON	set	153
  2346  008C                     _TRISA	set	140
  2347  008D                     _TRISB	set	141
  2348  008E                     _TRISC	set	142
  2349  0097                     _WDTCON	set	151
  2350  04E9                     _GO_nDONE	set	1257
  2351  0488                     _TMR1IE	set	1160
  2352  0117                     _FVRCON	set	279
  2353  010C                     _LATA	set	268
  2354  010D                     _LATB	set	269
  2355  010E                     _LATC	set	270
  2356  018C                     _ANSELA	set	396
  2357  018D                     _ANSELB	set	397
  2358  018E                     _ANSELC	set	398
  2359  0192                     _PMADRH	set	402
  2360  0191                     _PMADRL	set	401
  2361  0196                     _PMCON2	set	406
  2362  0194                     _PMDATH	set	404
  2363  0193                     _PMDATL	set	403
  2364  0CAE                     _CFGS	set	3246
  2365  0CAC                     _FREE	set	3244
  2366  0CAD                     _LWLO	set	3245
  2367  0CA8                     _RD	set	3240
  2368  0CA9                     _WR	set	3241
  2369  0CAA                     _WREN	set	3242
  2370  020D                     _WPUB	set	525
  2371  0396                     _IOCBF	set	918
  2372  0395                     _IOCBN	set	917
  2373  0394                     _IOCBP	set	916
  2374  1CB2                     _IOCBF2	set	7346
  2375                           
  2376                           ; #config settings
  2377  0000                     
  2378                           	psect	cinit
  2379  0022                     start_initialization:	
  2380  0022                     __initialization:	
  2381                           
  2382                           ; Clear objects allocated to BITBANK0
  2383  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK1
  2386  0023  30A0               	movlw	low __pbssBANK1
  2387  0024  0084               	movwf	4
  2388  0025  3000               	movlw	high __pbssBANK1
  2389  0026  0085               	movwf	5
  2390  0027  3045               	movlw	69
  2391  0028  319B  2394  3180   	fcall	clear_ram0
  2392                           
  2393                           ; Clear objects allocated to BANK2
  2394  002B  3020               	movlw	low __pbssBANK2
  2395  002C  0084               	movwf	4
  2396  002D  3001               	movlw	high __pbssBANK2
  2397  002E  0085               	movwf	5
  2398  002F  304D               	movlw	77
  2399  0030  319B  2394  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK3
  2402  0033  30A0               	movlw	low __pbssBANK3
  2403  0034  0084               	movwf	4
  2404  0035  3001               	movlw	high __pbssBANK3
  2405  0036  0085               	movwf	5
  2406  0037  304C               	movlw	76
  2407  0038  319B  2394  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Initialize objects allocated to BANK4
  2410  003B  303B               	movlw	low __pidataBANK4
  2411  003C  0084               	movwf	4
  2412  003D  3090               	movlw	(high __pidataBANK4)| (0+128)
  2413  003E  0085               	movwf	5
  2414  003F  3020               	movlw	low __pdataBANK4
  2415  0040  0086               	movwf	6
  2416  0041  3002               	movlw	high __pdataBANK4
  2417  0042  0087               	movwf	7
  2418  0043  3020               	movlw	32
  2419  0044  319B  238E         	fcall	init_ram
  2420  0046                     end_of_initialization:	
  2421                           ;End of C runtime variable initialization code
  2422                           
  2423  0046                     __end_of__initialization:	
  2424  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2425  0047  0020               	movlb	0
  2426  0048  3195  2D4F         	ljmp	_main	;jump to C main() function
  2427                           
  2428                           	psect	bitbssBANK0
  2429  0370                     __pbitbssBANK0:	
  2430  0370                     _Receive_OK:	
  2431  0370                     	ds	1
  2432  0371                     _Transceive_OK:	
  2433  0371                     	ds	1
  2434                           
  2435                           	psect	bssBANK1
  2436  00A0                     __pbssBANK1:	
  2437  00A0                     _RF1:	
  2438  00A0                     	ds	14
  2439  00AE                     _Buz1:	
  2440  00AE                     	ds	12
  2441  00BA                     _DimmerIntr1:	
  2442  00BA                     	ds	12
  2443  00C6                     _Timer1:	
  2444  00C6                     	ds	3
  2445  00C9                     _WDT:	
  2446  00C9                     	ds	2
  2447  00CB                     _CRC:	
  2448  00CB                     	ds	1
  2449  00CC                     _Cmd:	
  2450  00CC                     	ds	1
  2451  00CD                     _DelayOff:	
  2452  00CD                     	ds	1
  2453  00CE                     _DimmerIntr:	
  2454  00CE                     	ds	1
  2455  00CF                     _DimmerLights:	
  2456  00CF                     	ds	1
  2457  00D0                     _LED:	
  2458  00D0                     	ds	1
  2459  00D1                     _Light:	
  2460  00D1                     	ds	1
  2461  00D2                     _RSSI:	
  2462  00D2                     	ds	1
  2463  00D3                     _Rx_Length:	
  2464  00D3                     	ds	1
  2465  00D4                     _SPI0Buffer:	
  2466  00D4                     	ds	1
  2467  00D5                     _Sw:	
  2468  00D5                     	ds	1
  2469  00D6                     _SwDetect:	
  2470  00D6                     	ds	1
  2471  00D7                     _Tx_Length:	
  2472  00D7                     	ds	1
  2473  00D8                     _r_address:	
  2474  00D8                     	ds	1
  2475  00D9                     _r_data:	
  2476  00D9                     	ds	1
  2477  00DA                     _s_data:	
  2478  00DA                     	ds	1
  2479  00DB                     _Temp:	
  2480  00DB                     	ds	10
  2481                           
  2482                           	psect	bssBANK2
  2483  0120                     __pbssBANK2:	
  2484  0120                     _myMain:	
  2485  0120                     	ds	13
  2486  012D                     _Dimmer:	
  2487  012D                     	ds	5
  2488  0132                     _RF_Count:	
  2489  0132                     	ds	2
  2490  0134                     _Load:	
  2491  0134                     	ds	40
  2492  015C                     _DimmerLights1:	
  2493  015C                     	ds	8
  2494  0164                     _DlySw1:	
  2495  0164                     	ds	5
  2496  0169                     _VarErrLED:	
  2497  0169                     	ds	4
  2498                           
  2499                           	psect	bssBANK3
  2500  01A0                     __pbssBANK3:	
  2501  01A0                     _RF_Data:	
  2502  01A0                     	ds	30
  2503  01BE                     _Memory:	
  2504  01BE                     	ds	37
  2505  01E3                     _Sw1:	
  2506  01E3                     	ds	9
  2507                           
  2508                           	psect	dataBANK4
  2509  0220                     __pdataBANK4:	
  2510  0220                     __product:	
  2511  0220                     	ds	32
  2512                           
  2513                           	psect	clrtext
  2514  1B94                     clear_ram0:	
  2515                           ;	Called with FSR0 containing the base address, and
  2516                           ;	WREG with the size to clear
  2517                           
  2518  1B94  0064               	clrwdt	;clear the watchdog before getting into this loop
  2519  1B95                     clrloop0:	
  2520  1B95  0180               	clrf	0	;clear RAM location pointed to by FSR
  2521  1B96  3101               	addfsr 0,1
  2522  1B97  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2523  1B98  2B95               	goto	clrloop0	;have we reached the end yet?
  2524  1B99  3400               	retlw	0	;all done for this memory range, return
  2525                           
  2526                           	psect	inittext
  2527  1B8E                     init_ram:	
  2528  1B8E  00FE               	movwf	126
  2529  1B8F                     initloop:	
  2530  1B8F  0012               	moviw fsr0++
  2531  1B90  001E               	movwi fsr1++
  2532  1B91  0BFE               	decfsz	126,f
  2533  1B92  2B8F               	goto	initloop
  2534  1B93  3400               	retlw	0
  2535                           
  2536                           	psect	cstackBANK3
  2537  01EC                     __pcstackBANK3:	
  2538  01EC                     ?_main:	
  2539  01EC                     main@argc:	
  2540                           ; 2 bytes @ 0x0
  2541                           
  2542                           
  2543                           ; 2 bytes @ 0x0
  2544  01EC                     	ds	2
  2545  01EE                     main@argv:	
  2546                           
  2547                           ; 2 bytes @ 0x2
  2548  01EE                     	ds	2
  2549                           
  2550                           	psect	cstackBANK1
  2551  00E5                     __pcstackBANK1:	
  2552  00E5                     ?_setDimmerLights_OnOff:	
  2553  00E5                     ??_setRFSW_Control:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  00E5                     setDimmerLights_OnOff@command:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  00E5                     setDimmerLights_Dimming@value:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  00E5                     setTemp_Main@error:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x0
  2567  00E5                     	ds	1
  2568  00E6                     ??_setDimmerLights_OnOff:	
  2569  00E6                     setDimmerLights_Dimming@lights:	
  2570                           ; 0 bytes @ 0x1
  2571                           
  2572  00E6                     setTemp_Main@TempGO:	
  2573                           ; 1 bytes @ 0x1
  2574                           
  2575  00E6                     setRFSW_Control@status:	
  2576                           ; 1 bytes @ 0x1
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x1
  2580  00E6                     	ds	1
  2581  00E7                     setRFSW_Control@sw:	
  2582  00E7                     setTemp_Main@SafeValue:	
  2583                           ; 1 bytes @ 0x2
  2584                           
  2585                           
  2586                           ; 2 bytes @ 0x2
  2587  00E7                     	ds	1
  2588  00E8                     ??_getRxData:	
  2589  00E8                     setDimmerLights_OnOff@lights:	
  2590                           ; 0 bytes @ 0x3
  2591                           
  2592                           
  2593                           ; 1 bytes @ 0x3
  2594  00E8                     	ds	1
  2595  00E9                     setDimmerLights_Main@lights:	
  2596  00E9                     getRxData@error:	
  2597                           ; 1 bytes @ 0x4
  2598                           
  2599  00E9                     setTemp_Main@DangerValue:	
  2600                           ; 1 bytes @ 0x4
  2601                           
  2602                           
  2603                           ; 2 bytes @ 0x4
  2604  00E9                     	ds	1
  2605  00EA                     ??_setRF_Main:	
  2606                           
  2607                           ; 0 bytes @ 0x5
  2608  00EA                     	ds	1
  2609  00EB                     setRF_Main@error:	
  2610  00EB                     setTemp_Main@AD:	
  2611                           ; 1 bytes @ 0x6
  2612                           
  2613                           
  2614                           ; 2 bytes @ 0x6
  2615  00EB                     	ds	2
  2616                           
  2617                           	psect	cstackCOMMON
  2618  0070                     __pcstackCOMMON:	
  2619  0070                     ?_CC2500_WriteCommand:	
  2620  0070                     ?_RF_Timeout_Counter:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setRF_TimeoutCleared:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_WriteByte:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ReadStatus:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_ReadByte:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_PowerRST:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_InitSetREG:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_InitPATable:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_ClearTXFIFO:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_ClearRXFIFO:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_FrequencyCabr:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_SIDLEMode:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DlyOff_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DlyOff_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_SwOn:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_SwOff:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_Line:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setTxData:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setRF_TransceiveGO:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setMemory_Modify:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setLED_Initialization:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setLED_Main:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Fosc_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IO_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_TMR1_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_ADC_Set:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_Set:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_WDT_Set:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_TMR1_ISR:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_IOC_ISR:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Timeout_Counter:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_set_TimeoutCleared:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Write:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Flash_Memory_Modify:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_WDT_Clearing:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_myMain_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Temp_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Load_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Switch_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_RF_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_getLoad_AD:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_getTemp_AD:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_my_MainTimer:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_Temp_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Load_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_Switch_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_RF_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Exception_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setLoad_AH_AL_Restore:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setTemp_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setTemp_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_Initialization:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setRF_Main:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_RF_RxDisable:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_getRxData:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setLog_Code:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setControl_Lights_Table:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setRFSW_Control:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setRFSW_AdjControl:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setSw_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setSw_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_Buzzer_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_Buzzer_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_CC2500_TxData:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_CC2500_RxData:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_CC2500_PowerOnInitial:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DelayOffPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DelayOff_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DelayOff_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerIntr_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_SelectPointer:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_DimmerLights_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_DimmingOn:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_DimmerLights_TMR_1:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ??_DimmerLights_TMR_1:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_DimmerLights_IOC_1:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LedPointSelect:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_LED_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Mcu_Initialization:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_ISR:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Unlock:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Flash_Memory_Erasing:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_setRF_Learn:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_Status:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getLoad_OK:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_All_Error_Status:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_All_LightsStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getDimmerLights_Allow_Condition:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDimmerLights_PercentToValue:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getCmd_Status:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getDimmerLights_ValueToPercent:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_Flash_Memory_Read:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getAll_Sw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getRF_KeyStatus:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getSw_KeyStatus:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDelayOff_GO:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerIntr_DimmingValue:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_Line:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmer_LoadGO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_Load_Status:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getMain_Lights_Count:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?___lbdiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     setDimmerLights_Initialization@lights:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     getDimmerLights_Allow_Condition@lights:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     getSw_KeyStatus@sw:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ___lbdiv@divisor:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x0
  2973  0070                     	ds	1
  2974  0071                     ??___lbdiv:	
  2975  0071                     DimmerLights_TMR_1@count:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978                           
  2979                           ; 1 bytes @ 0x1
  2980  0071                     	ds	1
  2981  0072                     ??_TMR1_ISR:	
  2982  0072                     ___lbdiv@dividend:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985                           
  2986                           ; 1 bytes @ 0x2
  2987  0072                     	ds	1
  2988  0073                     ___lbdiv@counter:	
  2989                           
  2990                           ; 1 bytes @ 0x3
  2991  0073                     	ds	1
  2992  0074                     ___lbdiv@quotient:	
  2993                           
  2994                           ; 1 bytes @ 0x4
  2995  0074                     	ds	1
  2996  0075                     ?_Division:	
  2997  0075                     Division@num:	
  2998                           ; 1 bytes @ 0x5
  2999                           
  3000                           
  3001                           ; 1 bytes @ 0x5
  3002  0075                     	ds	1
  3003  0076                     ??_Division:	
  3004                           
  3005                           ; 0 bytes @ 0x6
  3006  0076                     	ds	2
  3007  0078                     Division@value:	
  3008                           
  3009                           ; 1 bytes @ 0x8
  3010  0078                     	ds	1
  3011  0079                     Division@result:	
  3012                           
  3013                           ; 1 bytes @ 0x9
  3014  0079                     	ds	1
  3015  007A                     ??_DimmerLights_IOC_1:	
  3016                           
  3017                           ; 0 bytes @ 0xA
  3018  007A                     	ds	2
  3019  007C                     DimmerLights_IOC_1@count:	
  3020                           
  3021                           ; 1 bytes @ 0xC
  3022  007C                     	ds	1
  3023  007D                     DimmerLights_IOC_1@dimming:	
  3024                           
  3025                           ; 1 bytes @ 0xD
  3026  007D                     	ds	1
  3027  007E                     ??_IOC_ISR:	
  3028                           
  3029                           	psect	cstackBANK0
  3030  0020                     __pcstackBANK0:	
  3031                           ; 0 bytes @ 0xE
  3032                           
  3033  0020                     ??_ISR:	
  3034                           
  3035                           ; 0 bytes @ 0x0
  3036  0020                     	ds	1
  3037  0021                     ??_RF_Timeout_Counter:	
  3038  0021                     ??_setRF_TimeoutCleared:	
  3039                           ; 0 bytes @ 0x1
  3040                           
  3041  0021                     ??_CC2500_WriteByte:	
  3042                           ; 0 bytes @ 0x1
  3043                           
  3044  0021                     ??_CC2500_ReadByte:	
  3045                           ; 0 bytes @ 0x1
  3046                           
  3047  0021                     ?_DelayTime_1us:	
  3048                           ; 0 bytes @ 0x1
  3049                           
  3050  0021                     ??_setDimmerLights_Initialization:	
  3051                           ; 0 bytes @ 0x1
  3052                           
  3053  0021                     ??_getLoad_OK:	
  3054                           ; 0 bytes @ 0x1
  3055                           
  3056  0021                     ??_getMain_All_Error_Status:	
  3057                           ; 0 bytes @ 0x1
  3058                           
  3059  0021                     ??_getMain_All_LightsStatus:	
  3060                           ; 0 bytes @ 0x1
  3061                           
  3062  0021                     ??_setDimmerLights_Line:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0021                     ??_getCmd_Status:	
  3066                           ; 0 bytes @ 0x1
  3067                           
  3068  0021                     ?_setCmd_Status:	
  3069                           ; 0 bytes @ 0x1
  3070                           
  3071  0021                     ??_setTxData:	
  3072                           ; 0 bytes @ 0x1
  3073                           
  3074  0021                     ??_setRF_TransceiveGO:	
  3075                           ; 0 bytes @ 0x1
  3076                           
  3077  0021                     ??_setMemory_Modify:	
  3078                           ; 0 bytes @ 0x1
  3079                           
  3080  0021                     ??_Fosc_Set:	
  3081                           ; 0 bytes @ 0x1
  3082                           
  3083  0021                     ??_IO_Set:	
  3084                           ; 0 bytes @ 0x1
  3085                           
  3086  0021                     ??_TMR1_Set:	
  3087                           ; 0 bytes @ 0x1
  3088                           
  3089  0021                     ??_ADC_Set:	
  3090                           ; 0 bytes @ 0x1
  3091                           
  3092  0021                     ??_IOC_Set:	
  3093                           ; 0 bytes @ 0x1
  3094                           
  3095  0021                     ??_WDT_Set:	
  3096                           ; 0 bytes @ 0x1
  3097                           
  3098  0021                     ??_Timeout_Counter:	
  3099                           ; 0 bytes @ 0x1
  3100                           
  3101  0021                     ??_set_TimeoutCleared:	
  3102                           ; 0 bytes @ 0x1
  3103                           
  3104  0021                     ??_Flash_Memory_Read:	
  3105                           ; 0 bytes @ 0x1
  3106                           
  3107  0021                     ?_setMemory_Data:	
  3108                           ; 0 bytes @ 0x1
  3109                           
  3110  0021                     ??_Flash_Memory_Write:	
  3111                           ; 0 bytes @ 0x1
  3112                           
  3113  0021                     ??_getAll_Sw_KeyStatus:	
  3114                           ; 0 bytes @ 0x1
  3115                           
  3116  0021                     ??_WDT_Clearing:	
  3117                           ; 0 bytes @ 0x1
  3118                           
  3119  0021                     ??_myMain_Initialization:	
  3120                           ; 0 bytes @ 0x1
  3121                           
  3122  0021                     ??_Temp_Initialization:	
  3123                           ; 0 bytes @ 0x1
  3124                           
  3125  0021                     ??_setLoad_AH_AL_Restore:	
  3126                           ; 0 bytes @ 0x1
  3127                           
  3128  0021                     ??_setTemp_Initialization:	
  3129                           ; 0 bytes @ 0x1
  3130                           
  3131  0021                     ??_setRF_Initialization:	
  3132                           ; 0 bytes @ 0x1
  3133                           
  3134  0021                     ??_getRF_KeyStatus:	
  3135                           ; 0 bytes @ 0x1
  3136                           
  3137  0021                     ??_getSw_KeyStatus:	
  3138                           ; 0 bytes @ 0x1
  3139                           
  3140  0021                     ??_Buzzer_Initialization:	
  3141                           ; 0 bytes @ 0x1
  3142                           
  3143  0021                     ??_Buzzer_Main:	
  3144                           ; 0 bytes @ 0x1
  3145                           
  3146  0021                     ??_DelayOffPointSelect:	
  3147                           ; 0 bytes @ 0x1
  3148                           
  3149  0021                     ??_DimmerIntr_Initialization:	
  3150                           ; 0 bytes @ 0x1
  3151                           
  3152  0021                     ?_setDimmerIntr_ControlStatus:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ??_getDimmerIntr_DimmingValue:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ?_setDimmerIntr_Dimming_RF:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     ??_DimmerLights_SelectPointer:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     ??_getDimmerLights_Line:	
  3171                           ; 0 bytes @ 0x1
  3172                           
  3173  0021                     ??_getDimmer_LoadGO:	
  3174                           ; 0 bytes @ 0x1
  3175                           
  3176  0021                     ??_getDimmer_Load_Status:	
  3177                           ; 0 bytes @ 0x1
  3178                           
  3179  0021                     ??_LedPointSelect:	
  3180                           ; 0 bytes @ 0x1
  3181                           
  3182  0021                     ??_Flash_Memory_Unlock:	
  3183                           ; 0 bytes @ 0x1
  3184                           
  3185  0021                     ??_Flash_Memory_Erasing:	
  3186                           ; 0 bytes @ 0x1
  3187                           
  3188  0021                     ??_setMemory_LoopSave:	
  3189                           ; 0 bytes @ 0x1
  3190                           
  3191  0021                     ??_WDT_Main:	
  3192                           ; 0 bytes @ 0x1
  3193                           
  3194  0021                     ??_getMain_Lights_Count:	
  3195                           ; 0 bytes @ 0x1
  3196                           
  3197  0021                     ??_setRF_Learn:	
  3198                           ; 0 bytes @ 0x1
  3199                           
  3200  0021                     ??_TouchPower:	
  3201                           ; 0 bytes @ 0x1
  3202                           
  3203  0021                     ??_SwPointSelect:	
  3204                           ; 0 bytes @ 0x1
  3205                           
  3206  0021                     ?___bmul:	
  3207                           ; 0 bytes @ 0x1
  3208                           
  3209  0021                     ?_getBuz_GO:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     ?_getAD:	
  3213                           ; 2 bytes @ 0x1
  3214                           
  3215  0021                     ?___wmul:	
  3216                           ; 2 bytes @ 0x1
  3217                           
  3218  0021                     ?___awdiv:	
  3219                           ; 2 bytes @ 0x1
  3220                           
  3221  0021                     ?___lwdiv:	
  3222                           ; 2 bytes @ 0x1
  3223                           
  3224  0021                     ?___ftpack:	
  3225                           ; 2 bytes @ 0x1
  3226                           
  3227  0021                     setDimmerIntr_ControlStatus@command:	
  3228                           ; 3 bytes @ 0x1
  3229                           
  3230  0021                     setDimmerIntr_Dimming_Sw@command:	
  3231                           ; 1 bytes @ 0x1
  3232                           
  3233  0021                     setDimmerIntr_Dimming_RF@command:	
  3234                           ; 1 bytes @ 0x1
  3235                           
  3236  0021                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3237                           ; 1 bytes @ 0x1
  3238                           
  3239  0021                     setDimmerLights_Line@lights:	
  3240                           ; 1 bytes @ 0x1
  3241                           
  3242  0021                     getDimmerLights_Line@line:	
  3243                           ; 1 bytes @ 0x1
  3244                           
  3245  0021                     getDimmer_LoadGO@loadgo:	
  3246                           ; 1 bytes @ 0x1
  3247                           
  3248  0021                     getDimmer_Load_Status@status:	
  3249                           ; 1 bytes @ 0x1
  3250                           
  3251  0021                     getAD@adcon1:	
  3252                           ; 1 bytes @ 0x1
  3253                           
  3254  0021                     setMemory_Data@data:	
  3255                           ; 1 bytes @ 0x1
  3256                           
  3257  0021                     getMain_All_LightsStatus@status:	
  3258                           ; 1 bytes @ 0x1
  3259                           
  3260  0021                     getMain_Lights_Count@count:	
  3261                           ; 1 bytes @ 0x1
  3262                           
  3263  0021                     setCmd_Status@cmd:	
  3264                           ; 1 bytes @ 0x1
  3265                           
  3266  0021                     getCmd_Status@number:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     getLoad_OK@ok:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272  0021                     ___bmul@multiplicand:	
  3273                           ; 1 bytes @ 0x1
  3274                           
  3275  0021                     DelayTime_1us@count:	
  3276                           ; 1 bytes @ 0x1
  3277                           
  3278  0021                     ___wmul@multiplier:	
  3279                           ; 2 bytes @ 0x1
  3280                           
  3281  0021                     ___awdiv@divisor:	
  3282                           ; 2 bytes @ 0x1
  3283                           
  3284  0021                     ___lwdiv@divisor:	
  3285                           ; 2 bytes @ 0x1
  3286                           
  3287  0021                     ___ftpack@arg:	
  3288                           ; 2 bytes @ 0x1
  3289                           
  3290                           
  3291                           ; 3 bytes @ 0x1
  3292  0021                     	ds	1
  3293  0022                     ??_getDimmerLights_Allow_Condition:	
  3294  0022                     ??_setCmd_Status:	
  3295                           ; 0 bytes @ 0x2
  3296                           
  3297  0022                     ??_setMemory_Data:	
  3298                           ; 0 bytes @ 0x2
  3299                           
  3300  0022                     ??_RF_Initialization:	
  3301                           ; 0 bytes @ 0x2
  3302                           
  3303  0022                     ??_setDimmerIntr_ControlStatus:	
  3304                           ; 0 bytes @ 0x2
  3305                           
  3306  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3307                           ; 0 bytes @ 0x2
  3308                           
  3309  0022                     ??_setDimmerIntr_Dimming_RF:	
  3310                           ; 0 bytes @ 0x2
  3311                           
  3312  0022                     ??_DimmerLights_Initialization:	
  3313                           ; 0 bytes @ 0x2
  3314                           
  3315  0022                     ??_Mcu_Initialization:	
  3316                           ; 0 bytes @ 0x2
  3317                           
  3318  0022                     ??___bmul:	
  3319                           ; 0 bytes @ 0x2
  3320                           
  3321  0022                     CC2500_WriteByte@loop_a:	
  3322                           ; 0 bytes @ 0x2
  3323                           
  3324  0022                     CC2500_ReadByte@loop_b:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0022                     DelayOffPointSelect@sw:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0022                     getDimmerIntr_DimmingValue@lights:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333  0022                     DimmerLights_SelectPointer@lights:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336  0022                     LedPointSelect@led:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339  0022                     Flash_Memory_Read@i:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0022                     Flash_Memory_Write@i:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0022                     setMemory_Modify@command:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0022                     setMemory_LoopSave@command:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0022                     getMain_Lights_Count@status1:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354  0022                     getCmd_Status@cmd:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357  0022                     setLoad_AH_AL_Restore@i:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0022                     setRF_Learn@command:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0022                     getRF_KeyStatus@key:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0022                     setRF_TransceiveGO@command:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0022                     SwPointSelect@sw:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0022                     getSw_KeyStatus@status:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0022                     getAll_Sw_KeyStatus@status:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0022                     _getMain_All_Error_Status$3552:	
  3379                           ; 1 bytes @ 0x2
  3380                           
  3381                           
  3382                           ; 2 bytes @ 0x2
  3383  0022                     	ds	1
  3384  0023                     ??_CC2500_WriteCommand:	
  3385  0023                     ??_CC2500_ReadStatus:	
  3386                           ; 0 bytes @ 0x3
  3387                           
  3388  0023                     ??_DelayTime_1us:	
  3389                           ; 0 bytes @ 0x3
  3390                           
  3391  0023                     ?_CC2500_WriteREG:	
  3392                           ; 0 bytes @ 0x3
  3393                           
  3394  0023                     ??_DlyOff_Initialization:	
  3395                           ; 0 bytes @ 0x3
  3396                           
  3397  0023                     ??_getDimmerLights_Status:	
  3398                           ; 0 bytes @ 0x3
  3399                           
  3400  0023                     ??_setDimmerLights_SwOff:	
  3401                           ; 0 bytes @ 0x3
  3402                           
  3403  0023                     ?_setLED:	
  3404                           ; 0 bytes @ 0x3
  3405                           
  3406  0023                     ??_setLED_Main:	
  3407                           ; 0 bytes @ 0x3
  3408                           
  3409  0023                     ??_Load_Initialization:	
  3410                           ; 0 bytes @ 0x3
  3411                           
  3412  0023                     ??_getBuz_GO:	
  3413                           ; 0 bytes @ 0x3
  3414                           
  3415  0023                     ??_getDelayOff_GO:	
  3416                           ; 0 bytes @ 0x3
  3417                           
  3418  0023                     ??_setDimmerLights_DimmingOn:	
  3419                           ; 0 bytes @ 0x3
  3420                           
  3421  0023                     ?_setDimmerLights_DimmingRun:	
  3422                           ; 0 bytes @ 0x3
  3423                           
  3424  0023                     CC2500_WriteREG@value:	
  3425                           ; 0 bytes @ 0x3
  3426                           
  3427  0023                     DlyOff_Initialization@sw:	
  3428                           ; 1 bytes @ 0x3
  3429                           
  3430  0023                     getDelayOff_GO@sw:	
  3431                           ; 1 bytes @ 0x3
  3432                           
  3433  0023                     setDimmerIntr_ControlStatus@lights:	
  3434                           ; 1 bytes @ 0x3
  3435                           
  3436  0023                     getDimmerIntr_DimmingValue@value:	
  3437                           ; 1 bytes @ 0x3
  3438                           
  3439  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3440                           ; 1 bytes @ 0x3
  3441                           
  3442  0023                     setDimmerIntr_Dimming_RF@lights:	
  3443                           ; 1 bytes @ 0x3
  3444                           
  3445  0023                     setDimmerLights_SwOff@sw:	
  3446                           ; 1 bytes @ 0x3
  3447                           
  3448  0023                     setDimmerLights_DimmingOn@sw:	
  3449                           ; 1 bytes @ 0x3
  3450                           
  3451  0023                     getDimmerLights_Allow_Condition@allow:	
  3452                           ; 1 bytes @ 0x3
  3453                           
  3454  0023                     getDimmerLights_Status@lights:	
  3455                           ; 1 bytes @ 0x3
  3456                           
  3457  0023                     setDimmerLights_DimmingRun@command:	
  3458                           ; 1 bytes @ 0x3
  3459                           
  3460  0023                     setLED@command:	
  3461                           ; 1 bytes @ 0x3
  3462                           
  3463  0023                     Flash_Memory_Read@address:	
  3464                           ; 1 bytes @ 0x3
  3465                           
  3466  0023                     setMemory_Data@address:	
  3467                           ; 1 bytes @ 0x3
  3468                           
  3469  0023                     setCmd_Status@number:	
  3470                           ; 1 bytes @ 0x3
  3471                           
  3472  0023                     _getRF_KeyStatus$5307:	
  3473                           ; 1 bytes @ 0x3
  3474                           
  3475  0023                     _getSw_KeyStatus$6336:	
  3476                           ; 1 bytes @ 0x3
  3477                           
  3478  0023                     _getAll_Sw_KeyStatus$6339:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     ___bmul@product:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     DelayTime_1us@i:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     ___wmul@multiplicand:	
  3488                           ; 2 bytes @ 0x3
  3489                           
  3490  0023                     ___awdiv@dividend:	
  3491                           ; 2 bytes @ 0x3
  3492                           
  3493  0023                     ___lwdiv@dividend:	
  3494                           ; 2 bytes @ 0x3
  3495                           
  3496                           
  3497                           ; 2 bytes @ 0x3
  3498  0023                     	ds	1
  3499  0024                     ??_CC2500_WriteREG:	
  3500  0024                     ??_setLED:	
  3501                           ; 0 bytes @ 0x4
  3502                           
  3503  0024                     ??_DelayOff_Initialization:	
  3504                           ; 0 bytes @ 0x4
  3505                           
  3506  0024                     ??_setDimmerLights_DimmingRun:	
  3507                           ; 0 bytes @ 0x4
  3508                           
  3509  0024                     ??_getAD:	
  3510                           ; 0 bytes @ 0x4
  3511                           
  3512  0024                     CC2500_WriteCommand@command:	
  3513                           ; 0 bytes @ 0x4
  3514                           
  3515  0024                     CC2500_ReadStatus@status_addr:	
  3516                           ; 1 bytes @ 0x4
  3517                           
  3518  0024                     getDelayOff_GO@go:	
  3519                           ; 1 bytes @ 0x4
  3520                           
  3521  0024                     _getDimmerLights_Allow_Condition$2229:	
  3522                           ; 1 bytes @ 0x4
  3523                           
  3524  0024                     getDimmerLights_Status@status:	
  3525                           ; 1 bytes @ 0x4
  3526                           
  3527  0024                     setLED@led:	
  3528                           ; 1 bytes @ 0x4
  3529                           
  3530  0024                     getAD@adcon0:	
  3531                           ; 1 bytes @ 0x4
  3532                           
  3533  0024                     Flash_Memory_Read@ret:	
  3534                           ; 1 bytes @ 0x4
  3535                           
  3536  0024                     ___bmul@multiplier:	
  3537                           ; 1 bytes @ 0x4
  3538                           
  3539  0024                     ___ftpack@exp:	
  3540                           ; 1 bytes @ 0x4
  3541                           
  3542  0024                     _getMain_All_Error_Status$3553:	
  3543                           ; 1 bytes @ 0x4
  3544                           
  3545                           
  3546                           ; 2 bytes @ 0x4
  3547  0024                     	ds	1
  3548  0025                     ??_CC2500_ClearTXFIFO:	
  3549  0025                     ??_CC2500_ClearRXFIFO:	
  3550                           ; 0 bytes @ 0x5
  3551                           
  3552  0025                     ??_CC2500_SIDLEMode:	
  3553                           ; 0 bytes @ 0x5
  3554                           
  3555  0025                     ??_setLED_Initialization:	
  3556                           ; 0 bytes @ 0x5
  3557                           
  3558  0025                     ??_Flash_Memory_Modify:	
  3559                           ; 0 bytes @ 0x5
  3560                           
  3561  0025                     ??_getLoad_AD:	
  3562                           ; 0 bytes @ 0x5
  3563                           
  3564  0025                     ??_getTemp_AD:	
  3565                           ; 0 bytes @ 0x5
  3566                           
  3567  0025                     ??_RF_RxDisable:	
  3568                           ; 0 bytes @ 0x5
  3569                           
  3570  0025                     ??_setSw_Initialization:	
  3571                           ; 0 bytes @ 0x5
  3572                           
  3573  0025                     ??_CC2500_TxData:	
  3574                           ; 0 bytes @ 0x5
  3575                           
  3576  0025                     ??_CC2500_RxData:	
  3577                           ; 0 bytes @ 0x5
  3578                           
  3579  0025                     ??___wmul:	
  3580                           ; 0 bytes @ 0x5
  3581                           
  3582  0025                     ??___awdiv:	
  3583                           ; 0 bytes @ 0x5
  3584                           
  3585  0025                     ??___lwdiv:	
  3586                           ; 0 bytes @ 0x5
  3587                           
  3588  0025                     CC2500_WriteREG@w_addr:	
  3589                           ; 0 bytes @ 0x5
  3590                           
  3591  0025                     setDimmerLights_DimmingRun@lights:	
  3592                           ; 1 bytes @ 0x5
  3593                           
  3594  0025                     setLED_Initialization@led:	
  3595                           ; 1 bytes @ 0x5
  3596                           
  3597  0025                     setLED_Main@led:	
  3598                           ; 1 bytes @ 0x5
  3599                           
  3600  0025                     setSw_Initialization@sw:	
  3601                           ; 1 bytes @ 0x5
  3602                           
  3603  0025                     ___ftpack@sign:	
  3604                           ; 1 bytes @ 0x5
  3605                           
  3606  0025                     getBuz_GO@i:	
  3607                           ; 1 bytes @ 0x5
  3608                           
  3609  0025                     DelayTime_1us@j:	
  3610                           ; 2 bytes @ 0x5
  3611                           
  3612  0025                     ___wmul@product:	
  3613                           ; 2 bytes @ 0x5
  3614                           
  3615                           
  3616                           ; 2 bytes @ 0x5
  3617  0025                     	ds	1
  3618  0026                     ??_CC2500_InitSetREG:	
  3619  0026                     ??_CC2500_InitPATable:	
  3620                           ; 0 bytes @ 0x6
  3621                           
  3622  0026                     ??_Switch_Initialization:	
  3623                           ; 0 bytes @ 0x6
  3624                           
  3625  0026                     ??___ftpack:	
  3626                           ; 0 bytes @ 0x6
  3627                           
  3628  0026                     ??_LED_Initialization:	
  3629                           ; 0 bytes @ 0x6
  3630                           
  3631  0026                     ??_LED_Main:	
  3632                           ; 0 bytes @ 0x6
  3633                           
  3634  0026                     CC2500_TxData@loop_e:	
  3635                           ; 0 bytes @ 0x6
  3636                           
  3637  0026                     CC2500_RxData@loop_f:	
  3638                           ; 1 bytes @ 0x6
  3639                           
  3640  0026                     Flash_Memory_Modify@i:	
  3641                           ; 1 bytes @ 0x6
  3642                           
  3643  0026                     getMain_All_Error_Status@command:	
  3644                           ; 1 bytes @ 0x6
  3645                           
  3646  0026                     getTemp_AD@channel:	
  3647                           ; 1 bytes @ 0x6
  3648                           
  3649  0026                     ___awdiv@counter:	
  3650                           ; 1 bytes @ 0x6
  3651                           
  3652  0026                     ___lwdiv@quotient:	
  3653                           ; 1 bytes @ 0x6
  3654                           
  3655                           
  3656                           ; 2 bytes @ 0x6
  3657  0026                     	ds	1
  3658  0027                     ??_CC2500_PowerRST:	
  3659  0027                     ??_CC2500_FrequencyCabr:	
  3660                           ; 0 bytes @ 0x7
  3661                           
  3662  0027                     ??_Flash_Memory_Main:	
  3663                           ; 0 bytes @ 0x7
  3664                           
  3665  0027                     CC2500_InitSetREG@temp1:	
  3666                           ; 0 bytes @ 0x7
  3667                           
  3668  0027                     CC2500_InitPATable@temp:	
  3669                           ; 1 bytes @ 0x7
  3670                           
  3671  0027                     getMain_All_Error_Status@status:	
  3672                           ; 1 bytes @ 0x7
  3673                           
  3674  0027                     getLoad_AD@channel:	
  3675                           ; 1 bytes @ 0x7
  3676                           
  3677  0027                     ___awdiv@sign:	
  3678                           ; 1 bytes @ 0x7
  3679                           
  3680  0027                     getTemp_AD@ADRES:	
  3681                           ; 1 bytes @ 0x7
  3682                           
  3683                           
  3684                           ; 2 bytes @ 0x7
  3685  0027                     	ds	1
  3686  0028                     CC2500_InitSetREG@temp2:	
  3687  0028                     CC2500_InitPATable@loop_d:	
  3688                           ; 1 bytes @ 0x8
  3689                           
  3690  0028                     Flash_Memory_Main@key_Status:	
  3691                           ; 1 bytes @ 0x8
  3692                           
  3693  0028                     getLoad_AD@k:	
  3694                           ; 1 bytes @ 0x8
  3695                           
  3696  0028                     ___lwdiv@counter:	
  3697                           ; 1 bytes @ 0x8
  3698                           
  3699  0028                     ___awdiv@quotient:	
  3700                           ; 1 bytes @ 0x8
  3701                           
  3702                           
  3703                           ; 2 bytes @ 0x8
  3704  0028                     	ds	1
  3705  0029                     ??_Load_Main:	
  3706  0029                     ?___awtoft:	
  3707                           ; 0 bytes @ 0x9
  3708                           
  3709  0029                     CC2500_InitSetREG@loop_c:	
  3710                           ; 3 bytes @ 0x9
  3711                           
  3712  0029                     _Flash_Memory_Main$3098:	
  3713                           ; 1 bytes @ 0x9
  3714                           
  3715  0029                     getLoad_AD@j:	
  3716                           ; 1 bytes @ 0x9
  3717                           
  3718  0029                     ___awtoft@c:	
  3719                           ; 1 bytes @ 0x9
  3720                           
  3721                           
  3722                           ; 2 bytes @ 0x9
  3723  0029                     	ds	1
  3724  002A                     ?_setBuz:	
  3725  002A                     ??_CC2500_PowerOnInitial:	
  3726                           ; 0 bytes @ 0xA
  3727                           
  3728  002A                     setBuz@time:	
  3729                           ; 0 bytes @ 0xA
  3730                           
  3731  002A                     getLoad_AD@ADRES:	
  3732                           ; 2 bytes @ 0xA
  3733                           
  3734                           
  3735                           ; 2 bytes @ 0xA
  3736  002A                     	ds	1
  3737  002B                     Load_Main@error:	
  3738                           
  3739                           ; 1 bytes @ 0xB
  3740  002B                     	ds	1
  3741  002C                     ??_setBuz:	
  3742  002C                     ??___awtoft:	
  3743                           ; 0 bytes @ 0xC
  3744                           
  3745  002C                     getLoad_AD@i:	
  3746                           ; 0 bytes @ 0xC
  3747                           
  3748  002C                     _Load_Main$3921:	
  3749                           ; 1 bytes @ 0xC
  3750                           
  3751                           
  3752                           ; 2 bytes @ 0xC
  3753  002C                     	ds	1
  3754  002D                     setBuz@count:	
  3755                           
  3756                           ; 1 bytes @ 0xD
  3757  002D                     	ds	1
  3758  002E                     ??_setDimmerLights_SwOn:	
  3759  002E                     ??_my_MainTimer:	
  3760                           ; 0 bytes @ 0xE
  3761                           
  3762  002E                     ??_Exception_Main:	
  3763                           ; 0 bytes @ 0xE
  3764                           
  3765  002E                     setDimmerLights_SwOn@sw:	
  3766                           ; 0 bytes @ 0xE
  3767                           
  3768  002E                     Load_Main@ErrorCountValue:	
  3769                           ; 1 bytes @ 0xE
  3770                           
  3771  002E                     ___awtoft@sign:	
  3772                           ; 1 bytes @ 0xE
  3773                           
  3774                           
  3775                           ; 1 bytes @ 0xE
  3776  002E                     	ds	1
  3777  002F                     ?___ftdiv:	
  3778  002F                     ?___ftmul:	
  3779                           ; 3 bytes @ 0xF
  3780                           
  3781  002F                     setDimmerLights_SwOn@idle:	
  3782                           ; 3 bytes @ 0xF
  3783                           
  3784  002F                     Exception_Main@status:	
  3785                           ; 1 bytes @ 0xF
  3786                           
  3787  002F                     Load_Main@Load_RunStatus:	
  3788                           ; 1 bytes @ 0xF
  3789                           
  3790  002F                     ___ftdiv@f2:	
  3791                           ; 1 bytes @ 0xF
  3792                           
  3793  002F                     ___ftmul@f1:	
  3794                           ; 3 bytes @ 0xF
  3795                           
  3796                           
  3797                           ; 3 bytes @ 0xF
  3798  002F                     	ds	1
  3799  0030                     ??_setSw_Main:	
  3800  0030                     Exception_Main@count:	
  3801                           ; 0 bytes @ 0x10
  3802                           
  3803  0030                     Load_Main@LightsCount:	
  3804                           ; 1 bytes @ 0x10
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x10
  3808  0030                     	ds	1
  3809  0031                     Exception_Main@error:	
  3810  0031                     Load_Main@i:	
  3811                           ; 1 bytes @ 0x11
  3812                           
  3813                           
  3814                           ; 2 bytes @ 0x11
  3815  0031                     	ds	1
  3816  0032                     setSw_Main@sw:	
  3817  0032                     Exception_Main@i:	
  3818                           ; 1 bytes @ 0x12
  3819                           
  3820  0032                     ___ftdiv@f1:	
  3821                           ; 2 bytes @ 0x12
  3822                           
  3823  0032                     ___ftmul@f2:	
  3824                           ; 3 bytes @ 0x12
  3825                           
  3826                           
  3827                           ; 3 bytes @ 0x12
  3828  0032                     	ds	1
  3829  0033                     ??_Switch_Main:	
  3830                           
  3831                           ; 0 bytes @ 0x13
  3832  0033                     	ds	1
  3833  0034                     Exception_Main@i_3564:	
  3834                           
  3835                           ; 2 bytes @ 0x14
  3836  0034                     	ds	1
  3837  0035                     ??___ftdiv:	
  3838  0035                     ??___ftmul:	
  3839                           ; 0 bytes @ 0x15
  3840                           
  3841                           
  3842                           ; 0 bytes @ 0x15
  3843  0035                     	ds	1
  3844  0036                     Exception_Main@lights:	
  3845                           
  3846                           ; 1 bytes @ 0x16
  3847  0036                     	ds	3
  3848  0039                     ___ftdiv@cntr:	
  3849  0039                     ___ftmul@exp:	
  3850                           ; 1 bytes @ 0x19
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x19
  3854  0039                     	ds	1
  3855  003A                     ___ftdiv@f3:	
  3856  003A                     ___ftmul@f3_as_product:	
  3857                           ; 3 bytes @ 0x1A
  3858                           
  3859                           
  3860                           ; 3 bytes @ 0x1A
  3861  003A                     	ds	3
  3862  003D                     ___ftdiv@exp:	
  3863  003D                     ___ftmul@cntr:	
  3864                           ; 1 bytes @ 0x1D
  3865                           
  3866                           
  3867                           ; 1 bytes @ 0x1D
  3868  003D                     	ds	1
  3869  003E                     ___ftdiv@sign:	
  3870  003E                     ___ftmul@sign:	
  3871                           ; 1 bytes @ 0x1E
  3872                           
  3873                           
  3874                           ; 1 bytes @ 0x1E
  3875  003E                     	ds	1
  3876  003F                     ?___ftneg:	
  3877  003F                     ___ftneg@f1:	
  3878                           ; 3 bytes @ 0x1F
  3879                           
  3880                           
  3881                           ; 3 bytes @ 0x1F
  3882  003F                     	ds	3
  3883  0042                     ??___ftneg:	
  3884  0042                     ?___ftadd:	
  3885                           ; 0 bytes @ 0x22
  3886                           
  3887  0042                     ___ftadd@f1:	
  3888                           ; 3 bytes @ 0x22
  3889                           
  3890                           
  3891                           ; 3 bytes @ 0x22
  3892  0042                     	ds	3
  3893  0045                     ___ftadd@f2:	
  3894                           
  3895                           ; 3 bytes @ 0x25
  3896  0045                     	ds	3
  3897  0048                     ??___ftadd:	
  3898                           
  3899                           ; 0 bytes @ 0x28
  3900  0048                     	ds	4
  3901  004C                     ___ftadd@sign:	
  3902                           
  3903                           ; 1 bytes @ 0x2C
  3904  004C                     	ds	1
  3905  004D                     ___ftadd@exp2:	
  3906                           
  3907                           ; 1 bytes @ 0x2D
  3908  004D                     	ds	1
  3909  004E                     ___ftadd@exp1:	
  3910                           
  3911                           ; 1 bytes @ 0x2E
  3912  004E                     	ds	1
  3913  004F                     ?___fttol:	
  3914  004F                     ___fttol@f1:	
  3915                           ; 4 bytes @ 0x2F
  3916                           
  3917                           
  3918                           ; 3 bytes @ 0x2F
  3919  004F                     	ds	4
  3920  0053                     ??___fttol:	
  3921                           
  3922                           ; 0 bytes @ 0x33
  3923  0053                     	ds	4
  3924  0057                     ___fttol@sign1:	
  3925                           
  3926                           ; 1 bytes @ 0x37
  3927  0057                     	ds	1
  3928  0058                     ___fttol@lval:	
  3929                           
  3930                           ; 4 bytes @ 0x38
  3931  0058                     	ds	4
  3932  005C                     ___fttol@exp1:	
  3933                           
  3934                           ; 1 bytes @ 0x3C
  3935  005C                     	ds	1
  3936  005D                     ??_getDimmerLights_PercentToValue:	
  3937  005D                     ??_getDimmerLights_ValueToPercent:	
  3938                           ; 0 bytes @ 0x3D
  3939                           
  3940                           
  3941                           ; 0 bytes @ 0x3D
  3942  005D                     	ds	2
  3943  005F                     getDimmerLights_PercentToValue@value:	
  3944  005F                     getDimmerLights_ValueToPercent@value:	
  3945                           ; 1 bytes @ 0x3F
  3946                           
  3947                           
  3948                           ; 1 bytes @ 0x3F
  3949  005F                     	ds	1
  3950  0060                     getDimmerLights_PercentToValue@i:	
  3951  0060                     getDimmerLights_ValueToPercent@i:	
  3952                           ; 3 bytes @ 0x40
  3953                           
  3954                           
  3955                           ; 3 bytes @ 0x40
  3956  0060                     	ds	3
  3957  0063                     ?_setProductData:	
  3958  0063                     ?_setDimmerIntr_DimmingValue:	
  3959                           ; 0 bytes @ 0x43
  3960                           
  3961  0063                     ?_setDimmerIntr_MaxmumValue:	
  3962                           ; 0 bytes @ 0x43
  3963                           
  3964  0063                     ??_Flash_Memory_Initialization:	
  3965                           ; 0 bytes @ 0x43
  3966                           
  3967  0063                     setDimmerIntr_DimmingValue@value:	
  3968                           ; 0 bytes @ 0x43
  3969                           
  3970  0063                     setDimmerIntr_MaxmumValue@value:	
  3971                           ; 1 bytes @ 0x43
  3972                           
  3973  0063                     setProductData@value:	
  3974                           ; 1 bytes @ 0x43
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x43
  3978  0063                     	ds	1
  3979  0064                     ??_setProductData:	
  3980  0064                     ??_setDimmerIntr_DimmingValue:	
  3981                           ; 0 bytes @ 0x44
  3982                           
  3983  0064                     ??_setDimmerIntr_MaxmumValue:	
  3984                           ; 0 bytes @ 0x44
  3985                           
  3986  0064                     Flash_Memory_Initialization@i:	
  3987                           ; 0 bytes @ 0x44
  3988                           
  3989                           
  3990                           ; 1 bytes @ 0x44
  3991  0064                     	ds	1
  3992  0065                     setDimmerIntr_DimmingValue@lights:	
  3993  0065                     setDimmerIntr_MaxmumValue@lights:	
  3994                           ; 1 bytes @ 0x45
  3995                           
  3996  0065                     setProductData@address:	
  3997                           ; 1 bytes @ 0x45
  3998                           
  3999                           
  4000                           ; 1 bytes @ 0x45
  4001  0065                     	ds	1
  4002  0066                     ??_DlyOff_Main:	
  4003  0066                     ?_setRF_DimmerLights:	
  4004                           ; 0 bytes @ 0x46
  4005                           
  4006  0066                     ??_setTemp_Main:	
  4007                           ; 0 bytes @ 0x46
  4008                           
  4009  0066                     ??_setLog_Code:	
  4010                           ; 0 bytes @ 0x46
  4011                           
  4012  0066                     ??_setRFSW_AdjControl:	
  4013                           ; 0 bytes @ 0x46
  4014                           
  4015  0066                     ?_setDelayOff_GO:	
  4016                           ; 0 bytes @ 0x46
  4017                           
  4018  0066                     setDelayOff_GO@command:	
  4019                           ; 0 bytes @ 0x46
  4020                           
  4021  0066                     setRF_DimmerLights@on:	
  4022                           ; 1 bytes @ 0x46
  4023                           
  4024                           
  4025                           ; 1 bytes @ 0x46
  4026  0066                     	ds	1
  4027  0067                     ??_setRF_DimmerLights:	
  4028  0067                     ??_Temp_Main:	
  4029                           ; 0 bytes @ 0x47
  4030                           
  4031  0067                     setDelayOff_GO@value:	
  4032                           ; 0 bytes @ 0x47
  4033                           
  4034                           
  4035                           ; 1 bytes @ 0x47
  4036  0067                     	ds	1
  4037  0068                     ??_setDelayOff_GO:	
  4038  0068                     DlyOff_Main@sw:	
  4039                           ; 0 bytes @ 0x48
  4040                           
  4041  0068                     setRFSW_AdjControl@status:	
  4042                           ; 1 bytes @ 0x48
  4043                           
  4044                           
  4045                           ; 1 bytes @ 0x48
  4046  0068                     	ds	1
  4047  0069                     ??_DelayOff_Main:	
  4048  0069                     setRFSW_AdjControl@sw:	
  4049                           ; 0 bytes @ 0x49
  4050                           
  4051  0069                     setRF_DimmerLights@status:	
  4052                           ; 1 bytes @ 0x49
  4053                           
  4054                           
  4055                           ; 1 bytes @ 0x49
  4056  0069                     	ds	1
  4057  006A                     setDelayOff_GO@i:	
  4058  006A                     setRF_DimmerLights@lights:	
  4059                           ; 1 bytes @ 0x4A
  4060                           
  4061                           
  4062                           ; 1 bytes @ 0x4A
  4063  006A                     	ds	1
  4064  006B                     ?_setDimmerLights_Dimming:	
  4065  006B                     setDelayOff_GO@j:	
  4066                           ; 0 bytes @ 0x4B
  4067                           
  4068  006B                     setDimmerLights_Dimming@status:	
  4069                           ; 1 bytes @ 0x4B
  4070                           
  4071                           
  4072                           ; 1 bytes @ 0x4B
  4073  006B                     	ds	1
  4074  006C                     ??_setDimmerLights_Dimming:	
  4075  006C                     setDelayOff_GO@k:	
  4076                           ; 0 bytes @ 0x4C
  4077                           
  4078                           
  4079                           ; 1 bytes @ 0x4C
  4080  006C                     	ds	1
  4081  006D                     setDelayOff_GO@sw:	
  4082                           
  4083                           ; 1 bytes @ 0x4D
  4084  006D                     	ds	1
  4085  006E                     ??_setDimmerLights_Main:	
  4086  006E                     ??_RF_Main:	
  4087                           ; 0 bytes @ 0x4E
  4088                           
  4089  006E                     ??_setControl_Lights_Table:	
  4090                           ; 0 bytes @ 0x4E
  4091                           
  4092  006E                     ??_DimmerLights_Main:	
  4093                           ; 0 bytes @ 0x4E
  4094                           
  4095  006E                     ??_main:	
  4096                           ; 0 bytes @ 0x4E
  4097                           
  4098                           
  4099                           	psect	maintext
  4100  154F                     __pmaintext:	
  4101                           ; 0 bytes @ 0x4E
  4102 ;;
  4103 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4104 ;;
  4105 ;; *************** function _main *****************
  4106 ;; Defined at:
  4107 ;;		line 7 in file "../src/Main_B1.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  argc            2    0[BANK3 ] int 
  4110 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  2    0[BANK3 ] int 
  4115 ;; Registers used:
  4116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 17F/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4122 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4126 ;;Total ram usage:        4 bytes
  4127 ;; Hardware stack levels required when called:   13
  4128 ;; This function calls:
  4129 ;;		_Buzzer_Initialization
  4130 ;;		_Buzzer_Main
  4131 ;;		_CC2500_PowerOnInitial
  4132 ;;		_DelayOff_Initialization
  4133 ;;		_DelayOff_Main
  4134 ;;		_DimmerLights_Initialization
  4135 ;;		_DimmerLights_Main
  4136 ;;		_Exception_Main
  4137 ;;		_Flash_Memory_Initialization
  4138 ;;		_Flash_Memory_Main
  4139 ;;		_LED_Initialization
  4140 ;;		_LED_Main
  4141 ;;		_Load_Initialization
  4142 ;;		_Load_Main
  4143 ;;		_Mcu_Initialization
  4144 ;;		_RF_Initialization
  4145 ;;		_RF_Main
  4146 ;;		_Switch_Initialization
  4147 ;;		_Switch_Main
  4148 ;;		_Temp_Initialization
  4149 ;;		_Temp_Main
  4150 ;;		_WDT_Main
  4151 ;;		_getLoad_AD
  4152 ;;		_getTemp_AD
  4153 ;;		_myMain_Initialization
  4154 ;;		_my_MainTimer
  4155 ;; This function is called by:
  4156 ;;		Startup code after reset
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _main
  4162  154F                     _main:	
  4163                           
  4164                           ;Main_B1.c: 8: myMain_Initialization();
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4168  154F  319D  25FF  3195   	fcall	_myMain_Initialization
  4169                           
  4170                           ;Main_B1.c: 9: Mcu_Initialization();
  4171  1552  319D  258F  3195   	fcall	_Mcu_Initialization
  4172                           
  4173                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4174  1555  3184  2476  3195   	fcall	_Flash_Memory_Initialization
  4175                           
  4176                           ;Main_B1.c: 11: LED_Initialization();
  4177  1558  319B  2363  3195   	fcall	_LED_Initialization
  4178                           
  4179                           ;Main_B1.c: 12: Buzzer_Initialization();
  4180  155B  319B  234C  3195   	fcall	_Buzzer_Initialization
  4181                           
  4182                           ;Main_B1.c: 14: ;;
  4183                           ;Main_B1.c: 15: Temp_Initialization();
  4184  155E  319B  2358  3195   	fcall	_Temp_Initialization
  4185                           
  4186                           ;Main_B1.c: 16: Load_Initialization();
  4187  1561  319B  234F  3195   	fcall	_Load_Initialization
  4188                           
  4189                           ;Main_B1.c: 17: ;;
  4190                           ;Main_B1.c: 18: DelayOff_Initialization();
  4191  1564  319B  235B  3195   	fcall	_DelayOff_Initialization
  4192                           
  4193                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4194  1567  319B  239A  3195   	fcall	_DimmerLights_Initialization
  4195                           
  4196                           ;Main_B1.c: 21: ;;
  4197                           ;Main_B1.c: 22: ;;
  4198                           ;Main_B1.c: 23: ;;
  4199                           ;Main_B1.c: 24: Switch_Initialization();
  4200  156A  319B  237F  3195   	fcall	_Switch_Initialization
  4201                           
  4202                           ;Main_B1.c: 25: RF_Initialization();
  4203  156D  319B  2352  3195   	fcall	_RF_Initialization
  4204                           
  4205                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4206  1570  319E  263B  3195   	fcall	_CC2500_PowerOnInitial
  4207  1573                     l9599:	
  4208                           ;Main_B1.c: 27: ;;
  4209                           ;Main_B1.c: 28: ;;
  4210                           ;Main_B1.c: 30: while (1) {
  4211                           
  4212                           
  4213                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4214  1573  0022               	movlb	2	; select bank2
  4215  1574  1C20               	btfss	_myMain^(0+256),0
  4216  1575  2D7E               	goto	l9603
  4217                           
  4218                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4219  1576  3005               	movlw	5
  4220  1577  318A  22BA  3195   	fcall	_getLoad_AD
  4221                           
  4222                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4223  157A  3009               	movlw	9
  4224  157B  3193  2350  3195   	fcall	_getTemp_AD
  4225  157E                     l9603:	
  4226                           
  4227                           ;Main_B1.c: 57: }
  4228                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4229  157E  0021               	movlb	1	; select bank1
  4230  157F  1C46               	btfss	_Timer1^(0+128),0
  4231  1580  2D73               	goto	l9599
  4232                           
  4233                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4234  1581  1046               	bcf	_Timer1^(0+128),0
  4235                           
  4236                           ;Main_B1.c: 96: my_MainTimer();
  4237  1582  3193  2313  3195   	fcall	_my_MainTimer
  4238                           
  4239                           ;Main_B1.c: 97: WDT_Main();
  4240  1585  319D  25A1  3195   	fcall	_WDT_Main
  4241                           
  4242                           ;Main_B1.c: 98: ;;
  4243                           ;Main_B1.c: 99: ;;
  4244                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4245  1588  0022               	movlb	2	; select bank2
  4246  1589  1C20               	btfss	_myMain^(0+256),0
  4247  158A  2D73               	goto	l9599
  4248                           
  4249                           ;Main_B1.c: 101: Flash_Memory_Main();
  4250  158B  3193  2390  3195   	fcall	_Flash_Memory_Main
  4251                           
  4252                           ;Main_B1.c: 103: LED_Main();
  4253  158E  319B  2367  3195   	fcall	_LED_Main
  4254                           
  4255                           ;Main_B1.c: 104: Buzzer_Main();
  4256  1591  3194  2458  3195   	fcall	_Buzzer_Main
  4257                           
  4258                           ;Main_B1.c: 106: ;;
  4259                           ;Main_B1.c: 107: Temp_Main();
  4260  1594  3187  27FD  3195   	fcall	_Temp_Main
  4261                           
  4262                           ;Main_B1.c: 108: Load_Main();
  4263  1597  3180  204A  3195   	fcall	_Load_Main
  4264                           
  4265                           ;Main_B1.c: 109: ;;
  4266                           ;Main_B1.c: 111: ;;
  4267                           ;Main_B1.c: 112: DimmerLights_Main();
  4268  159A  319F  278B  3195   	fcall	_DimmerLights_Main
  4269                           
  4270                           ;Main_B1.c: 113: Switch_Main();
  4271  159D  319B  23A8  3195   	fcall	_Switch_Main
  4272                           
  4273                           ;Main_B1.c: 114: ;;
  4274                           ;Main_B1.c: 115: ;;
  4275                           ;Main_B1.c: 117: RF_Main();
  4276  15A0  319B  2355  3195   	fcall	_RF_Main
  4277                           
  4278                           ;Main_B1.c: 118: DelayOff_Main();
  4279  15A3  319B  235F  3195   	fcall	_DelayOff_Main
  4280                           
  4281                           ;Main_B1.c: 119: ;;
  4282                           ;Main_B1.c: 120: ;;
  4283                           ;Main_B1.c: 121: Exception_Main();
  4284  15A6  3186  2640  3195   	fcall	_Exception_Main
  4285  15A9  2D73               	goto	l9599
  4286  15AA                     __end_of_main:	
  4287                           ;Main_B1.c: 128: }
  4288                           ;Main_B1.c: 129: }
  4289                           ;Main_B1.c: 163: }
  4290                           ;Main_B1.c: 164: return (0);
  4291                           ;	Return value of _main is never used
  4292                           
  4293                           
  4294                           	psect	text1
  4295  1313                     __ptext1:	
  4296 ;; *************** function _my_MainTimer *****************
  4297 ;; Defined at:
  4298 ;;		line 185 in file "../src/Main_B1.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;		None               void
  4305 ;; Registers used:
  4306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;Total ram usage:        1 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    7
  4319 ;; This function calls:
  4320 ;;		_setBuz
  4321 ;; This function is called by:
  4322 ;;		_main
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _my_MainTimer
  4328  1313                     _my_MainTimer:	
  4329                           
  4330                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4334  1313  0022               	movlb	2	; select bank2
  4335  1314  1820               	btfsc	_myMain^(0+256),0
  4336  1315  2B2D               	goto	l9335
  4337                           
  4338                           ;Main_B1.c: 188: myMain.PowerCount++;
  4339  1316  3001               	movlw	1
  4340  1317  0020               	movlb	0	; select bank0
  4341  1318  00AE               	movwf	??_my_MainTimer
  4342  1319  082E               	movf	??_my_MainTimer,w
  4343  131A  0022               	movlb	2	; select bank2
  4344  131B  07A1               	addwf	(_myMain^(0+256)+1),f
  4345                           
  4346                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4347  131C  0821               	movf	(_myMain^(0+256)+1),w
  4348  131D  3A4B               	xorlw	75
  4349  131E  1D03               	skipz
  4350  131F  0008               	return
  4351                           
  4352                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4353  1320  01A1               	clrf	(_myMain^(0+256)+1)
  4354                           
  4355                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4356  1321  1420               	bsf	_myMain^(0+256),0
  4357                           
  4358                           ;Main_B1.c: 196: setBuz(3, 50);
  4359  1322  3032               	movlw	50
  4360  1323  0020               	movlb	0	; select bank0
  4361  1324  00AA               	movwf	setBuz@time
  4362  1325  3000               	movlw	0
  4363  1326  00AB               	movwf	setBuz@time+1
  4364  1327  3003               	movlw	3
  4365  1328  3194  24F6         	fcall	_setBuz
  4366                           
  4367                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4368  132A  0022               	movlb	2	; select bank2
  4369  132B  1620               	bsf	_myMain^(0+256),4
  4370                           
  4371                           ;Main_B1.c: 206: }
  4372                           ;Main_B1.c: 207: } else {
  4373  132C  0008               	return
  4374  132D                     l9335:	
  4375                           
  4376                           ;Main_B1.c: 208: myMain.PowerCount++;
  4377  132D  3001               	movlw	1
  4378  132E  0020               	movlb	0	; select bank0
  4379  132F  00AE               	movwf	??_my_MainTimer
  4380  1330  082E               	movf	??_my_MainTimer,w
  4381  1331  0022               	movlb	2	; select bank2
  4382  1332  07A1               	addwf	(_myMain^(0+256)+1),f
  4383                           
  4384                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4385  1333  0821               	movf	(_myMain^(0+256)+1),w
  4386  1334  3A32               	xorlw	50
  4387  1335  1903               	btfsc	3,2
  4388                           
  4389                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4390  1336  01A1               	clrf	(_myMain^(0+256)+1)
  4391                           
  4392                           ;Main_B1.c: 226: }
  4393                           ;Main_B1.c: 228: myMain.Count1++;
  4394  1337  3001               	movlw	1
  4395  1338  07A4               	addwf	(_myMain^(0+256)+4),f
  4396  1339  3000               	movlw	0
  4397  133A  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4398                           
  4399                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4400  133B  3004               	movlw	4
  4401  133C  3E20               	addlw	_myMain& (0+255)
  4402  133D  0086               	movwf	6
  4403  133E  3001               	movlw	1	; select bank2/3
  4404  133F  0087               	movwf	7
  4405  1340  3F40               	moviw [0]fsr1
  4406  1341  3A32               	xorlw	50
  4407  1342  1D03               	skipz
  4408  1343  2B46               	goto	u10545
  4409  1344  3F41               	moviw [1]fsr1
  4410  1345  3A00               	xorlw	0
  4411  1346                     u10545:	
  4412  1346  1D03               	skipz
  4413  1347  0008               	return
  4414                           
  4415                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4416  1348  01A4               	clrf	(_myMain^(0+256)+4)
  4417  1349  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4418                           
  4419                           ;Main_B1.c: 242: if (myMain.Flag) {
  4420  134A  1CA0               	btfss	_myMain^(0+256),1
  4421  134B  2B4E               	goto	l1437
  4422                           
  4423                           ;Main_B1.c: 243: myMain.Flag = 0;
  4424  134C  10A0               	bcf	_myMain^(0+256),1
  4425                           
  4426                           ;Main_B1.c: 252: } else {
  4427  134D  0008               	return
  4428  134E                     l1437:	
  4429                           
  4430                           ;Main_B1.c: 253: myMain.Flag = 1;
  4431  134E  14A0               	bsf	_myMain^(0+256),1
  4432  134F  0008               	return
  4433  1350                     __end_of_my_MainTimer:	
  4434                           
  4435                           	psect	text2
  4436  1DFF                     __ptext2:	
  4437 ;; *************** function _myMain_Initialization *****************
  4438 ;; Defined at:
  4439 ;;		line 170 in file "../src/Main_B1.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;		None
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;		None               void
  4446 ;; Registers used:
  4447 ;;		wreg, fsr1l, fsr1h
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4457 ;;Total ram usage:        1 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    5
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_main
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           
  4468                           ;psect for function _myMain_Initialization
  4469  1DFF                     _myMain_Initialization:	
  4470                           
  4471                           ;Main_B1.c: 173: product = &_product;
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4475  1DFF  3020               	movlw	__product& (0+255)
  4476  1E00  0020               	movlb	0	; select bank0
  4477  1E01  00A1               	movwf	??_myMain_Initialization
  4478  1E02  0821               	movf	??_myMain_Initialization,w
  4479  1E03  0021               	movlb	1	; select bank1
  4480  1E04  00ED               	movwf	_product^(0+128)
  4481                           
  4482                           ;Main_B1.c: 174: product->Data[20] = 209;
  4483  1E05  30D1               	movlw	209
  4484  1E06  0020               	movlb	0	; select bank0
  4485  1E07  00A1               	movwf	??_myMain_Initialization
  4486  1E08  0021               	movlb	1	; select bank1
  4487  1E09  086D               	movf	_product^(0+128),w
  4488  1E0A  3E14               	addlw	20
  4489  1E0B  0086               	movwf	6
  4490  1E0C  3002               	movlw	2	; select bank4/5
  4491  1E0D  0087               	movwf	7
  4492  1E0E  0020               	movlb	0	; select bank0
  4493  1E0F  0821               	movf	??_myMain_Initialization,w
  4494  1E10  0081               	movwf	1
  4495  1E11  0008               	return
  4496  1E12                     __end_of_myMain_Initialization:	
  4497                           
  4498                           	psect	text3
  4499  1350                     __ptext3:	
  4500 ;; *************** function _getTemp_AD *****************
  4501 ;; Defined at:
  4502 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  channel         1    wreg     unsigned char 
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;  channel         1    6[BANK0 ] unsigned char 
  4507 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;		None               void
  4510 ;; Registers used:
  4511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;Total ram usage:        4 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:    7
  4524 ;; This function calls:
  4525 ;;		_getAD
  4526 ;; This function is called by:
  4527 ;;		_main
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           
  4532                           ;psect for function _getTemp_AD
  4533  1350                     _getTemp_AD:	
  4534                           
  4535                           ;incstack = 0
  4536                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4537                           ;getTemp_AD@channel stored from wreg
  4538  1350  0020               	movlb	0	; select bank0
  4539  1351  00A6               	movwf	getTemp_AD@channel
  4540                           
  4541                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4542  1352  01A7               	clrf	getTemp_AD@ADRES
  4543  1353  01A8               	clrf	getTemp_AD@ADRES+1
  4544                           
  4545                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4546  1354  0021               	movlb	1	; select bank1
  4547  1355  1D5B               	btfss	_Temp^(0+128),2
  4548  1356  2B80               	goto	l7813
  4549                           
  4550                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4551  1357  30F0               	movlw	240
  4552  1358  0020               	movlb	0	; select bank0
  4553  1359  00A5               	movwf	??_getTemp_AD
  4554  135A  0825               	movf	??_getTemp_AD,w
  4555  135B  00A1               	movwf	getAD@adcon1
  4556  135C  0826               	movf	getTemp_AD@channel,w
  4557  135D  3190  207C  3193   	fcall	_getAD
  4558  1360  0020               	movlb	0	; select bank0
  4559  1361  0822               	movf	?_getAD+1,w
  4560  1362  01A8               	clrf	getTemp_AD@ADRES+1
  4561  1363  07A8               	addwf	getTemp_AD@ADRES+1,f
  4562  1364  0821               	movf	?_getAD,w
  4563  1365  01A7               	clrf	getTemp_AD@ADRES
  4564  1366  07A7               	addwf	getTemp_AD@ADRES,f
  4565                           
  4566                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4567  1367  0828               	movf	getTemp_AD@ADRES+1,w
  4568  1368  0427               	iorwf	getTemp_AD@ADRES,w
  4569  1369  1903               	skipnz
  4570  136A  2B80               	goto	l7813
  4571                           
  4572                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4573  136B  0828               	movf	getTemp_AD@ADRES+1,w
  4574  136C  0021               	movlb	1	; select bank1
  4575  136D  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4576  136E  1D03               	skipz
  4577  136F  2B74               	goto	u7835
  4578  1370  0020               	movlb	0	; select bank0
  4579  1371  0827               	movf	getTemp_AD@ADRES,w
  4580  1372  0021               	movlb	1	; select bank1
  4581  1373  0263               	subwf	(_Temp^(0+128)+8),w
  4582  1374                     u7835:	
  4583  1374  1803               	skipnc
  4584  1375  2B80               	goto	l7813
  4585                           
  4586                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4587  1376  0020               	movlb	0	; select bank0
  4588  1377  0828               	movf	getTemp_AD@ADRES+1,w
  4589  1378  0021               	movlb	1	; select bank1
  4590  1379  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4591  137A  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4592  137B  0020               	movlb	0	; select bank0
  4593  137C  0827               	movf	getTemp_AD@ADRES,w
  4594  137D  0021               	movlb	1	; select bank1
  4595  137E  01E3               	clrf	(_Temp^(0+128)+8)
  4596  137F  07E3               	addwf	(_Temp^(0+128)+8),f
  4597  1380                     l7813:	
  4598                           
  4599                           ;OverTemperature_B1.c: 32: }
  4600                           ;OverTemperature_B1.c: 33: }
  4601                           ;OverTemperature_B1.c: 34: }
  4602                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4603  1380  30F0               	movlw	240
  4604  1381  0020               	movlb	0	; select bank0
  4605  1382  00A5               	movwf	??_getTemp_AD
  4606  1383  0825               	movf	??_getTemp_AD,w
  4607  1384  00A1               	movwf	getAD@adcon1
  4608  1385  0826               	movf	getTemp_AD@channel,w
  4609  1386  3190  207C         	fcall	_getAD
  4610  1388  0020               	movlb	0	; select bank0
  4611  1389  0822               	movf	?_getAD+1,w
  4612  138A  01A8               	clrf	getTemp_AD@ADRES+1
  4613  138B  07A8               	addwf	getTemp_AD@ADRES+1,f
  4614  138C  0821               	movf	?_getAD,w
  4615  138D  01A7               	clrf	getTemp_AD@ADRES
  4616  138E  07A7               	addwf	getTemp_AD@ADRES,f
  4617  138F  0008               	return
  4618  1390                     __end_of_getTemp_AD:	
  4619                           
  4620                           	psect	text4
  4621  0ABA                     __ptext4:	
  4622 ;; *************** function _getLoad_AD *****************
  4623 ;; Defined at:
  4624 ;;		line 15 in file "../src/OverLoad_B1.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  channel         1    wreg     unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  channel         1    7[BANK0 ] unsigned char 
  4629 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4630 ;;  i               1   12[BANK0 ] unsigned char 
  4631 ;;  j               1    9[BANK0 ] unsigned char 
  4632 ;;  k               1    8[BANK0 ] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;		None               void
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4643 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;Total ram usage:        8 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    7
  4649 ;; This function calls:
  4650 ;;		_getAD
  4651 ;; This function is called by:
  4652 ;;		_main
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _getLoad_AD
  4658  0ABA                     _getLoad_AD:	
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4662                           ;getLoad_AD@channel stored from wreg
  4663  0ABA  0020               	movlb	0	; select bank0
  4664  0ABB  00A7               	movwf	getLoad_AD@channel
  4665                           
  4666                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4667  0ABC  01AC               	clrf	getLoad_AD@i
  4668  0ABD  01A9               	clrf	getLoad_AD@j
  4669  0ABE  01A8               	clrf	getLoad_AD@k
  4670                           
  4671                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4672  0ABF  01AA               	clrf	getLoad_AD@ADRES
  4673  0AC0  01AB               	clrf	getLoad_AD@ADRES+1
  4674                           
  4675                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4676  0AC1  0022               	movlb	2	; select bank2
  4677  0AC2  1E34               	btfss	_Load^(0+256),4
  4678  0AC3  0008               	return
  4679                           
  4680                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4681  0AC4  30F3               	movlw	243
  4682  0AC5  0020               	movlb	0	; select bank0
  4683  0AC6  00A5               	movwf	??_getLoad_AD
  4684  0AC7  0825               	movf	??_getLoad_AD,w
  4685  0AC8  00A1               	movwf	getAD@adcon1
  4686  0AC9  0827               	movf	getLoad_AD@channel,w
  4687  0ACA  3190  207C  318A   	fcall	_getAD
  4688  0ACD  0020               	movlb	0	; select bank0
  4689  0ACE  0822               	movf	?_getAD+1,w
  4690  0ACF  01AB               	clrf	getLoad_AD@ADRES+1
  4691  0AD0  07AB               	addwf	getLoad_AD@ADRES+1,f
  4692  0AD1  0821               	movf	?_getAD,w
  4693  0AD2  01AA               	clrf	getLoad_AD@ADRES
  4694  0AD3  07AA               	addwf	getLoad_AD@ADRES,f
  4695                           
  4696                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4697  0AD4  01AC               	clrf	getLoad_AD@i
  4698  0AD5  3004               	movlw	4
  4699  0AD6  022C               	subwf	getLoad_AD@i,w
  4700  0AD7  1803               	btfsc	3,0
  4701  0AD8  2B00               	goto	l7781
  4702  0AD9                     l7769:	
  4703                           
  4704                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4705  0AD9  352C               	lslf	getLoad_AD@i,w
  4706  0ADA  3E3F               	addlw	(_Load+11)& (0+255)
  4707  0ADB  0086               	movwf	6
  4708  0ADC  3001               	movlw	1	; select bank2/3
  4709  0ADD  0087               	movwf	7
  4710  0ADE  3F40               	moviw [0]fsr1
  4711  0ADF  00A5               	movwf	??_getLoad_AD
  4712  0AE0  3F41               	moviw [1]fsr1
  4713  0AE1  00A6               	movwf	??_getLoad_AD+1
  4714  0AE2  082B               	movf	getLoad_AD@ADRES+1,w
  4715  0AE3  0226               	subwf	??_getLoad_AD+1,w
  4716  0AE4  1D03               	skipz
  4717  0AE5  2AE8               	goto	u7735
  4718  0AE6  082A               	movf	getLoad_AD@ADRES,w
  4719  0AE7  0225               	subwf	??_getLoad_AD,w
  4720  0AE8                     u7735:	
  4721  0AE8  1803               	skipnc
  4722  0AE9  2AF8               	goto	l7777
  4723  0AEA  08A9               	movf	getLoad_AD@j,f
  4724  0AEB  1D03               	skipz
  4725  0AEC  2AF8               	goto	l7777
  4726                           
  4727                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4728  0AED  352C               	lslf	getLoad_AD@i,w
  4729  0AEE  3E3F               	addlw	(_Load+11)& (0+255)
  4730  0AEF  0086               	movwf	6
  4731  0AF0  3001               	movlw	1	; select bank2/3
  4732  0AF1  0087               	movwf	7
  4733  0AF2  082A               	movf	getLoad_AD@ADRES,w
  4734  0AF3  3FC0               	movwi [0]fsr1
  4735  0AF4  082B               	movf	getLoad_AD@ADRES+1,w
  4736  0AF5  3FC1               	movwi [1]fsr1
  4737                           
  4738                           ;OverLoad_B1.c: 24: j = 1;
  4739  0AF6  01A9               	clrf	getLoad_AD@j
  4740  0AF7  0AA9               	incf	getLoad_AD@j,f
  4741  0AF8                     l7777:	
  4742  0AF8  3001               	movlw	1
  4743  0AF9  00A5               	movwf	??_getLoad_AD
  4744  0AFA  0825               	movf	??_getLoad_AD,w
  4745  0AFB  07AC               	addwf	getLoad_AD@i,f
  4746  0AFC  3004               	movlw	4
  4747  0AFD  022C               	subwf	getLoad_AD@i,w
  4748  0AFE  1C03               	skipc
  4749  0AFF  2AD9               	goto	l7769
  4750  0B00                     l7781:	
  4751                           
  4752                           ;OverLoad_B1.c: 25: }
  4753                           ;OverLoad_B1.c: 26: }
  4754                           ;OverLoad_B1.c: 27: if (j == 0) {
  4755  0B00  08A9               	movf	getLoad_AD@j,f
  4756  0B01  1D03               	skipz
  4757  0B02  0008               	return
  4758                           
  4759                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4760  0B03  01AC               	clrf	getLoad_AD@i
  4761  0B04                     L1:	
  4762  0B04  3004               	movlw	4
  4763  0B05  022C               	subwf	getLoad_AD@i,w
  4764  0B06  1803               	btfsc	3,0
  4765  0B07  0008               	return
  4766                           
  4767                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4768  0B08  352C               	lslf	getLoad_AD@i,w
  4769  0B09  3E49               	addlw	(_Load+21)& (0+255)
  4770  0B0A  0086               	movwf	6
  4771  0B0B  3001               	movlw	1	; select bank2/3
  4772  0B0C  0087               	movwf	7
  4773  0B0D  3F40               	moviw [0]fsr1
  4774  0B0E  00A5               	movwf	??_getLoad_AD
  4775  0B0F  3F41               	moviw [1]fsr1
  4776  0B10  00A6               	movwf	??_getLoad_AD+1
  4777  0B11  0826               	movf	??_getLoad_AD+1,w
  4778  0B12  022B               	subwf	getLoad_AD@ADRES+1,w
  4779  0B13  1D03               	skipz
  4780  0B14  2B17               	goto	u7785
  4781  0B15  0825               	movf	??_getLoad_AD,w
  4782  0B16  022A               	subwf	getLoad_AD@ADRES,w
  4783  0B17                     u7785:	
  4784  0B17  1803               	skipnc
  4785  0B18  2B27               	goto	l7797
  4786  0B19  08A8               	movf	getLoad_AD@k,f
  4787  0B1A  1D03               	skipz
  4788  0B1B  2B27               	goto	l7797
  4789                           
  4790                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4791  0B1C  352C               	lslf	getLoad_AD@i,w
  4792  0B1D  3E49               	addlw	(_Load+21)& (0+255)
  4793  0B1E  0086               	movwf	6
  4794  0B1F  3001               	movlw	1	; select bank2/3
  4795  0B20  0087               	movwf	7
  4796  0B21  082A               	movf	getLoad_AD@ADRES,w
  4797  0B22  3FC0               	movwi [0]fsr1
  4798  0B23  082B               	movf	getLoad_AD@ADRES+1,w
  4799  0B24  3FC1               	movwi [1]fsr1
  4800                           
  4801                           ;OverLoad_B1.c: 31: k = 1;
  4802  0B25  01A8               	clrf	getLoad_AD@k
  4803  0B26  0AA8               	incf	getLoad_AD@k,f
  4804  0B27                     l7797:	
  4805  0B27  3001               	movlw	1
  4806  0B28  00A5               	movwf	??_getLoad_AD
  4807  0B29  0825               	movf	??_getLoad_AD,w
  4808  0B2A  07AC               	addwf	getLoad_AD@i,f
  4809  0B2B  2B04               	goto	L1
  4810  0B2C                     __end_of_getLoad_AD:	
  4811                           
  4812                           	psect	text5
  4813  107C                     __ptext5:	
  4814 ;; *************** function _getAD *****************
  4815 ;; Defined at:
  4816 ;;		line 459 in file "../src/MCU_B1.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  adcon0          1    wreg     unsigned char 
  4819 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  2    1[BANK0 ] int 
  4824 ;; Registers used:
  4825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4831 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;Total ram usage:        4 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    6
  4838 ;; This function calls:
  4839 ;;		_Timeout_Counter
  4840 ;;		_set_TimeoutCleared
  4841 ;; This function is called by:
  4842 ;;		_getLoad_AD
  4843 ;;		_getTemp_AD
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _getAD
  4849  107C                     _getAD:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4853                           ;getAD@adcon0 stored from wreg
  4854  107C  0020               	movlb	0	; select bank0
  4855  107D  00A4               	movwf	getAD@adcon0
  4856                           
  4857                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4858  107E  0824               	movf	getAD@adcon0,w
  4859  107F  0021               	movlb	1	; select bank1
  4860  1080  009D               	movwf	29	;volatile
  4861                           
  4862                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4863  1081  0020               	movlb	0	; select bank0
  4864  1082  0821               	movf	getAD@adcon1,w
  4865  1083  0021               	movlb	1	; select bank1
  4866  1084  009E               	movwf	30	;volatile
  4867                           
  4868                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4869  1085  149D               	bsf	29,1	;volatile
  4870                           
  4871                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4872  1086  288A               	goto	l7243
  4873  1087                     l7241:	
  4874                           
  4875                           ;MCU_B1.c: 464: Timeout_Counter();
  4876  1087  319E  2691  3190   	fcall	_Timeout_Counter
  4877  108A                     l7243:	
  4878  108A  0021               	movlb	1	; select bank1
  4879  108B  1C9D               	btfss	29,1	;volatile
  4880  108C  2890               	goto	l7247
  4881  108D  0022               	movlb	2	; select bank2
  4882  108E  1D2A               	btfss	(_myMain^(0+256)+10),2
  4883  108F  2887               	goto	l7241
  4884  1090                     l7247:	
  4885                           
  4886                           ;MCU_B1.c: 465: };
  4887                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4888  1090  319B  2383         	fcall	_set_TimeoutCleared
  4889                           
  4890                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4891  1092  0021               	movlb	1	; select bank1
  4892  1093  081C               	movf	28,w	;volatile
  4893  1094  0020               	movlb	0	; select bank0
  4894  1095  01A2               	clrf	?_getAD+1
  4895  1096  07A2               	addwf	?_getAD+1,f
  4896  1097  0021               	movlb	1	; select bank1
  4897  1098  081B               	movf	27,w	;volatile
  4898  1099  0020               	movlb	0	; select bank0
  4899  109A  01A1               	clrf	?_getAD
  4900  109B  07A1               	addwf	?_getAD,f
  4901  109C  0008               	return
  4902  109D                     __end_of_getAD:	
  4903                           
  4904                           	psect	text6
  4905  1DA1                     __ptext6:	
  4906 ;; *************** function _WDT_Main *****************
  4907 ;; Defined at:
  4908 ;;		line 1107 in file "../src/MCU_B1.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;		None               void
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;Total ram usage:        1 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    6
  4929 ;; This function calls:
  4930 ;;		_WDT_Clearing
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _WDT_Main
  4938  1DA1                     _WDT_Main:	
  4939                           
  4940                           ;MCU_B1.c: 1108: if (WDT.Enable == 1) {
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4944  1DA1  0021               	movlb	1	; select bank1
  4945  1DA2  1C49               	btfss	_WDT^(0+128),0
  4946  1DA3  0008               	return
  4947                           
  4948                           ;MCU_B1.c: 1109: if (WDT.Timer-- > 0) {
  4949  1DA4  3001               	movlw	1
  4950  1DA5  02CA               	subwf	(_WDT^(0+128)+1),f
  4951  1DA6  084A               	movf	(_WDT^(0+128)+1),w
  4952  1DA7  3AFF               	xorlw	255
  4953  1DA8  1903               	skipnz
  4954  1DA9  0008               	return
  4955                           
  4956                           ;MCU_B1.c: 1110: WDT.Timer = 100;
  4957  1DAA  3064               	movlw	100
  4958  1DAB  0020               	movlb	0	; select bank0
  4959  1DAC  00A1               	movwf	??_WDT_Main
  4960  1DAD  0821               	movf	??_WDT_Main,w
  4961  1DAE  0021               	movlb	1	; select bank1
  4962  1DAF  00CA               	movwf	(_WDT^(0+128)+1)
  4963                           
  4964                           ;MCU_B1.c: 1111: WDT_Clearing();
  4965  1DB0  3180  2002         	fcall	_WDT_Clearing
  4966  1DB2  0008               	return
  4967  1DB3                     __end_of_WDT_Main:	
  4968                           
  4969                           	psect	text7
  4970  0002                     __ptext7:	
  4971 ;; *************** function _WDT_Clearing *****************
  4972 ;; Defined at:
  4973 ;;		line 1117 in file "../src/MCU_B1.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;		None
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		None
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;Total ram usage:        0 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    5
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_WDT_Main
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _WDT_Clearing
  5003  0002                     _WDT_Clearing:	
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _WDT_Clearing: []
  5007  0002  0064               	clrwdt	;# 
  5008  0003  0008               	return
  5009  0004                     __end_of_WDT_Clearing:	
  5010                           
  5011                           	psect	text8
  5012  07FD                     __ptext8:	
  5013 ;; *************** function _Temp_Main *****************
  5014 ;; Defined at:
  5015 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;		None
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;		None
  5020 ;; Return value:  Size  Location     Type
  5021 ;;		None               void
  5022 ;; Registers used:
  5023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;Total ram usage:        0 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    8
  5036 ;; This function calls:
  5037 ;;		_setTemp_Main
  5038 ;; This function is called by:
  5039 ;;		_main
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _Temp_Main
  5045  07FD                     _Temp_Main:	
  5046                           
  5047                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5051  07FD  318D  25E1         	fcall	_setTemp_Main
  5052  07FF  0008               	return
  5053  0800                     __end_of_Temp_Main:	
  5054                           
  5055                           	psect	text9
  5056  0DE1                     __ptext9:	
  5057 ;; *************** function _setTemp_Main *****************
  5058 ;; Defined at:
  5059 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  AD              2    6[BANK1 ] unsigned int 
  5064 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5065 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5066 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5067 ;;  error           1    0[BANK1 ] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;		None               void
  5070 ;; Registers used:
  5071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;Total ram usage:        9 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    7
  5084 ;; This function calls:
  5085 ;;		_getMain_All_Error_Status
  5086 ;;		_getMain_All_LightsStatus
  5087 ;;		_setBuz
  5088 ;;		_setProductData
  5089 ;; This function is called by:
  5090 ;;		_Temp_Main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _setTemp_Main
  5096  0DE1                     _setTemp_Main:	
  5097                           
  5098                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5099                           
  5100                           ;incstack = 0
  5101                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5102  0DE1  3000               	movlw	0
  5103  0DE2  3191  2161  318D   	fcall	_getMain_All_Error_Status
  5104  0DE5  0020               	movlb	0	; select bank0
  5105  0DE6  00E6               	movwf	??_setTemp_Main
  5106  0DE7  0866               	movf	??_setTemp_Main,w
  5107  0DE8  0021               	movlb	1	; select bank1
  5108  0DE9  00E5               	movwf	setTemp_Main@error^(0+128)
  5109                           
  5110                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5111  0DEA  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5112  0DEB  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5113  0DEC  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5114  0DED  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5115                           
  5116                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5117  0DEE  319B  23E2  318D   	fcall	_getMain_All_LightsStatus
  5118  0DF1  0020               	movlb	0	; select bank0
  5119  0DF2  00E6               	movwf	??_setTemp_Main
  5120  0DF3  0866               	movf	??_setTemp_Main,w
  5121  0DF4  0021               	movlb	1	; select bank1
  5122  0DF5  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5123                           
  5124                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5125  0DF6  1C5B               	btfss	_Temp^(0+128),0
  5126  0DF7  2E8B               	goto	l1776
  5127                           
  5128                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5129  0DF8  195B               	btfsc	_Temp^(0+128),2
  5130  0DF9  2E14               	goto	l9013
  5131                           
  5132                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5133  0DFA  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5134  0DFB  3A01               	xorlw	1
  5135  0DFC  1D03               	skipz
  5136  0DFD  2E00               	goto	l1782
  5137  0DFE  1CDB               	btfss	_Temp^(0+128),1
  5138  0DFF  2E02               	goto	l9005
  5139  0E00                     l1782:	
  5140  0E00  1CDB               	btfss	_Temp^(0+128),1
  5141  0E01  2E11               	goto	l9011
  5142  0E02                     l9005:	
  5143                           
  5144                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5145  0E02  3001               	movlw	1
  5146  0E03  07DC               	addwf	(_Temp^(0+128)+1),f
  5147  0E04  3000               	movlw	0
  5148  0E05  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5149                           
  5150                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5151  0E06  3000               	movlw	0
  5152  0E07  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5153  0E08  30FA               	movlw	250
  5154  0E09  1903               	skipnz
  5155  0E0A  025C               	subwf	(_Temp^(0+128)+1),w
  5156  0E0B  1C03               	skipc
  5157  0E0C  0008               	return
  5158                           
  5159                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5160  0E0D  01DC               	clrf	(_Temp^(0+128)+1)
  5161  0E0E  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5162                           
  5163                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5164  0E0F  155B               	bsf	_Temp^(0+128),2
  5165                           
  5166                           ;OverTemperature_B1.c: 83: }
  5167                           ;OverTemperature_B1.c: 84: } else {
  5168  0E10  0008               	return
  5169  0E11                     l9011:	
  5170                           
  5171                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5172  0E11  01DC               	clrf	(_Temp^(0+128)+1)
  5173  0E12  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5174                           
  5175                           ;OverTemperature_B1.c: 86: }
  5176                           ;OverTemperature_B1.c: 87: } else {
  5177  0E13  0008               	return
  5178  0E14                     l9013:	
  5179                           
  5180                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5181  0E14  3001               	movlw	1
  5182  0E15  07DC               	addwf	(_Temp^(0+128)+1),f
  5183  0E16  3000               	movlw	0
  5184  0E17  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5185                           
  5186                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5187  0E18  3000               	movlw	0
  5188  0E19  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5189  0E1A  3005               	movlw	5
  5190  0E1B  1903               	skipnz
  5191  0E1C  025C               	subwf	(_Temp^(0+128)+1),w
  5192  0E1D  1C03               	skipc
  5193  0E1E  0008               	return
  5194                           
  5195                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5196  0E1F  01DC               	clrf	(_Temp^(0+128)+1)
  5197  0E20  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5198                           
  5199                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5200  0E21  3008               	movlw	8
  5201  0E22  3EDB               	addlw	_Temp& (0+255)
  5202  0E23  0086               	movwf	6
  5203  0E24  0187               	clrf	7
  5204  0E25  0016               	moviw fsr1++
  5205  0E26  0401               	iorwf	1,w
  5206  0E27  1903               	skipnz
  5207  0E28  2E83               	goto	l1787
  5208                           
  5209                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5210  0E29  115B               	bcf	_Temp^(0+128),2
  5211                           
  5212                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5213  0E2A  0864               	movf	((_Temp+1)^(0+128)+8),w
  5214  0E2B  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5215  0E2C  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5216  0E2D  0863               	movf	(_Temp^(0+128)+8),w
  5217  0E2E  01EB               	clrf	setTemp_Main@AD^(0+128)
  5218  0E2F  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5219                           
  5220                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5221  0E30  3090               	movlw	144
  5222  0E31  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5223  0E32  3001               	movlw	1
  5224  0E33  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5225                           
  5226                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5227  0E34  3059               	movlw	89
  5228  0E35  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5229  0E36  3001               	movlw	1
  5230  0E37  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5231                           
  5232                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5233  0E38  1CDB               	btfss	_Temp^(0+128),1
  5234  0E39  2E5A               	goto	l9043
  5235                           
  5236                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5237  0E3A  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5238  0E3B  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5239  0E3C  1D03               	skipz
  5240  0E3D  2E40               	goto	u10035
  5241  0E3E  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5242  0E3F  026B               	subwf	setTemp_Main@AD^(0+128),w
  5243  0E40                     u10035:	
  5244  0E40  1C03               	skipc
  5245  0E41  2E58               	goto	l9041
  5246                           
  5247                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5248  0E42  3001               	movlw	1
  5249  0E43  0020               	movlb	0	; select bank0
  5250  0E44  00E6               	movwf	??_setTemp_Main
  5251  0E45  0866               	movf	??_setTemp_Main,w
  5252  0E46  0021               	movlb	1	; select bank1
  5253  0E47  07DE               	addwf	(_Temp^(0+128)+3),f
  5254                           
  5255                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5256  0E48  3003               	movlw	3
  5257  0E49  025E               	subwf	(_Temp^(0+128)+3),w
  5258  0E4A  1C03               	skipc
  5259  0E4B  2E70               	goto	l9055
  5260                           
  5261                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5262  0E4C  01DE               	clrf	(_Temp^(0+128)+3)
  5263                           
  5264                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5265  0E4D  10DB               	bcf	_Temp^(0+128),1
  5266                           
  5267                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5268  0E4E  3064               	movlw	100
  5269  0E4F  0020               	movlb	0	; select bank0
  5270  0E50  00AA               	movwf	setBuz@time
  5271  0E51  3000               	movlw	0
  5272  0E52  00AB               	movwf	setBuz@time+1
  5273  0E53  3002               	movlw	2
  5274  0E54  3194  24F6  318D   	fcall	_setBuz
  5275                           
  5276                           ;OverTemperature_B1.c: 126: }
  5277                           ;OverTemperature_B1.c: 127: } else {
  5278  0E57  2E70               	goto	l9055
  5279  0E58                     l9041:	
  5280                           
  5281                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5282  0E58  0021               	movlb	1	; select bank1
  5283  0E59  2E6F               	goto	l9053
  5284  0E5A                     l9043:	
  5285                           ;OverTemperature_B1.c: 129: }
  5286                           ;OverTemperature_B1.c: 130: } else {
  5287                           
  5288                           
  5289                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5290  0E5A  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5291  0E5B  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5292  0E5C  1D03               	skipz
  5293  0E5D  2E60               	goto	u10055
  5294  0E5E  086B               	movf	setTemp_Main@AD^(0+128),w
  5295  0E5F  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5296  0E60                     u10055:	
  5297  0E60  1C03               	skipc
  5298  0E61  2E6F               	goto	l9053
  5299                           
  5300                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5301  0E62  3001               	movlw	1
  5302  0E63  0020               	movlb	0	; select bank0
  5303  0E64  00E6               	movwf	??_setTemp_Main
  5304  0E65  0866               	movf	??_setTemp_Main,w
  5305  0E66  0021               	movlb	1	; select bank1
  5306  0E67  07DE               	addwf	(_Temp^(0+128)+3),f
  5307                           
  5308                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5309  0E68  3003               	movlw	3
  5310  0E69  025E               	subwf	(_Temp^(0+128)+3),w
  5311  0E6A  1C03               	skipc
  5312  0E6B  2E70               	goto	l9055
  5313                           
  5314                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5315  0E6C  01DE               	clrf	(_Temp^(0+128)+3)
  5316                           
  5317                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5318  0E6D  14DB               	bsf	_Temp^(0+128),1
  5319                           
  5320                           ;OverTemperature_B1.c: 136: }
  5321                           ;OverTemperature_B1.c: 137: } else {
  5322  0E6E  2E70               	goto	l9055
  5323  0E6F                     l9053:	
  5324                           
  5325                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5326  0E6F  01DE               	clrf	(_Temp^(0+128)+3)
  5327  0E70                     l9055:	
  5328                           
  5329                           ;OverTemperature_B1.c: 139: }
  5330                           ;OverTemperature_B1.c: 140: }
  5331                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5332  0E70  0021               	movlb	1	; select bank1
  5333  0E71  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5334  0E72  0020               	movlb	0	; select bank0
  5335  0E73  00E6               	movwf	??_setTemp_Main
  5336  0E74  0866               	movf	??_setTemp_Main,w
  5337  0E75  00E3               	movwf	setProductData@value
  5338  0E76  3018               	movlw	24
  5339  0E77  319C  243B  318D   	fcall	_setProductData
  5340                           
  5341                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5342  0E7A  0021               	movlb	1	; select bank1
  5343  0E7B  086B               	movf	setTemp_Main@AD^(0+128),w
  5344  0E7C  0020               	movlb	0	; select bank0
  5345  0E7D  00E6               	movwf	??_setTemp_Main
  5346  0E7E  0866               	movf	??_setTemp_Main,w
  5347  0E7F  00E3               	movwf	setProductData@value
  5348  0E80  3019               	movlw	25
  5349  0E81  319C  243B         	fcall	_setProductData
  5350  0E83                     l1787:	
  5351                           
  5352                           ;OverTemperature_B1.c: 158: }
  5353                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5354  0E83  0021               	movlb	1	; select bank1
  5355  0E84  01DF               	clrf	(_Temp^(0+128)+4)
  5356  0E85  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5357                           
  5358                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5359  0E86  01E1               	clrf	(_Temp^(0+128)+6)
  5360  0E87  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5361                           
  5362                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5363  0E88  01E3               	clrf	(_Temp^(0+128)+8)
  5364  0E89  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5365                           
  5366                           ;OverTemperature_B1.c: 162: }
  5367                           ;OverTemperature_B1.c: 163: }
  5368                           ;OverTemperature_B1.c: 166: } else {
  5369  0E8A  0008               	return
  5370  0E8B                     l1776:	
  5371                           
  5372                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5373  0E8B  0022               	movlb	2	; select bank2
  5374  0E8C  1C20               	btfss	_myMain^(0+256),0
  5375  0E8D  0008               	return
  5376                           
  5377                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5378  0E8E  0021               	movlb	1	; select bank1
  5379  0E8F  145B               	bsf	_Temp^(0+128),0
  5380  0E90  0008               	return
  5381  0E91                     __end_of_setTemp_Main:	
  5382                           
  5383                           	psect	text10
  5384  1B58                     __ptext10:	
  5385 ;; *************** function _Temp_Initialization *****************
  5386 ;; Defined at:
  5387 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;		None
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;		None               void
  5394 ;; Registers used:
  5395 ;;		status,2, status,0, pclath, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;Total ram usage:        0 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    6
  5408 ;; This function calls:
  5409 ;;		_setTemp_Initialization
  5410 ;; This function is called by:
  5411 ;;		_main
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           
  5416                           ;psect for function _Temp_Initialization
  5417  1B58                     _Temp_Initialization:	
  5418                           
  5419                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5420                           
  5421                           ;incstack = 0
  5422                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5423  1B58  319B  234B         	fcall	_setTemp_Initialization
  5424  1B5A  0008               	return
  5425  1B5B                     __end_of_Temp_Initialization:	
  5426                           
  5427                           	psect	text11
  5428  1B4B                     __ptext11:	
  5429 ;; *************** function _setTemp_Initialization *****************
  5430 ;; Defined at:
  5431 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;		None               void
  5438 ;; Registers used:
  5439 ;;		None
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    5
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_Temp_Initialization
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _setTemp_Initialization
  5461  1B4B                     _setTemp_Initialization:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _setTemp_Initialization: []
  5465  1B4B  0008               	return
  5466  1B4C                     __end_of_setTemp_Initialization:	
  5467                           
  5468                           	psect	text12
  5469  1BA8                     __ptext12:	
  5470 ;; *************** function _Switch_Main *****************
  5471 ;; Defined at:
  5472 ;;		line 76 in file "../src/Switch_B1.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;		None
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;Total ram usage:        0 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    9
  5493 ;; This function calls:
  5494 ;;		_TouchPower
  5495 ;;		_setSw_Main
  5496 ;; This function is called by:
  5497 ;;		_main
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           
  5502                           ;psect for function _Switch_Main
  5503  1BA8                     _Switch_Main:	
  5504                           
  5505                           ;Switch_B1.c: 79: setSw_Main(1);
  5506                           
  5507                           ;incstack = 0
  5508                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5509  1BA8  3001               	movlw	1
  5510  1BA9  3181  21FA  319B   	fcall	_setSw_Main
  5511                           
  5512                           ;Switch_B1.c: 91: TouchPower();
  5513  1BAC  319E  2650         	fcall	_TouchPower
  5514  1BAE  0008               	return
  5515  1BAF                     __end_of_Switch_Main:	
  5516                           
  5517                           	psect	text13
  5518  01FA                     __ptext13:	
  5519 ;; *************** function _setSw_Main *****************
  5520 ;; Defined at:
  5521 ;;		line 117 in file "../src/Switch_B1.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  sw              1    wreg     unsigned char 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;  sw              1   18[BANK0 ] unsigned char 
  5526 ;; Return value:  Size  Location     Type
  5527 ;;		None               void
  5528 ;; Registers used:
  5529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;Total ram usage:        3 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    8
  5542 ;; This function calls:
  5543 ;;		_SwPointSelect
  5544 ;;		_getMain_All_Error_Status
  5545 ;;		_getSw_KeyStatus
  5546 ;;		_setBuz
  5547 ;;		_setDimmerLights_DimmingOn
  5548 ;;		_setDimmerLights_SwOff
  5549 ;;		_setDimmerLights_SwOn
  5550 ;;		_setRF_Learn
  5551 ;; This function is called by:
  5552 ;;		_Switch_Main
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _setSw_Main
  5558  01FA                     _setSw_Main:	
  5559                           
  5560                           ;incstack = 0
  5561                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5562                           ;setSw_Main@sw stored from wreg
  5563  01FA  0020               	movlb	0	; select bank0
  5564  01FB  00B2               	movwf	setSw_Main@sw
  5565                           
  5566                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5567  01FC  0832               	movf	setSw_Main@sw,w
  5568  01FD  319C  249B  3181   	fcall	_SwPointSelect
  5569                           
  5570                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5571  0200  0021               	movlb	1	; select bank1
  5572  0201  0855               	movf	_Sw^(0+128),w
  5573  0202  0086               	movwf	6
  5574  0203  3001               	movlw	1	; select bank2/3
  5575  0204  0087               	movwf	7
  5576  0205  1C01               	btfss	1,0
  5577  0206  2B76               	goto	l2486
  5578                           
  5579                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5580  0207  3000               	movlw	0
  5581  0208  3191  2161  3181   	fcall	_getMain_All_Error_Status
  5582  020B  3800               	iorlw	0
  5583  020C  1D03               	skipz
  5584  020D  2A2C               	goto	l9149
  5585                           
  5586                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5587  020E  0021               	movlb	1	; select bank1
  5588  020F  0A55               	incf	_Sw^(0+128),w
  5589  0210  0086               	movwf	6
  5590  0211  3001               	movlw	1	; select bank2/3
  5591  0212  0087               	movwf	7
  5592  0213  1081               	bcf	1,1
  5593                           
  5594                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5595  0214  0020               	movlb	0	; select bank0
  5596  0215  0832               	movf	setSw_Main@sw,w
  5597  0216  319D  2548  3181   	fcall	_getSw_KeyStatus
  5598  0219  3A01               	xorlw	1
  5599  021A  3000               	movlw	0
  5600  021B  1903               	skipnz
  5601  021C  3001               	movlw	1
  5602  021D  0020               	movlb	0	; select bank0
  5603  021E  00B0               	movwf	??_setSw_Main
  5604  021F  0021               	movlb	1	; select bank1
  5605  0220  0855               	movf	_Sw^(0+128),w
  5606  0221  0086               	movwf	6
  5607  0222  3001               	movlw	1	; select bank2/3
  5608  0223  0087               	movwf	7
  5609  0224  0020               	movlb	0	; select bank0
  5610  0225  0DB0               	rlf	??_setSw_Main,f
  5611  0226  0801               	movf	1,w
  5612  0227  0630               	xorwf	??_setSw_Main,w
  5613  0228  39FD               	andlw	-3
  5614  0229  0630               	xorwf	??_setSw_Main,w
  5615  022A  0081               	movwf	1
  5616                           
  5617                           ;Switch_B1.c: 124: } else {
  5618  022B  2A42               	goto	l2488
  5619  022C                     l9149:	
  5620                           
  5621                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5622  022C  0021               	movlb	1	; select bank1
  5623  022D  0A55               	incf	_Sw^(0+128),w
  5624  022E  0086               	movwf	6
  5625  022F  3001               	movlw	1	; select bank2/3
  5626  0230  0087               	movwf	7
  5627  0231  1881               	btfsc	1,1
  5628  0232  2A42               	goto	l2488
  5629                           
  5630                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5631  0233  0A55               	incf	_Sw^(0+128),w
  5632  0234  0086               	movwf	6
  5633  0235  3001               	movlw	1	; select bank2/3
  5634  0236  0087               	movwf	7
  5635  0237  1481               	bsf	1,1
  5636                           
  5637                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5638  0238  0855               	movf	_Sw^(0+128),w
  5639  0239  0086               	movwf	6
  5640  023A  3001               	movlw	1	; select bank2/3
  5641  023B  0087               	movwf	7
  5642  023C  1081               	bcf	1,1
  5643                           
  5644                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5645  023D  0855               	movf	_Sw^(0+128),w
  5646  023E  0086               	movwf	6
  5647  023F  3001               	movlw	1	; select bank2/3
  5648  0240  0087               	movwf	7
  5649  0241  1501               	bsf	1,2
  5650  0242                     l2488:	
  5651                           
  5652                           ;Switch_B1.c: 130: }
  5653                           ;Switch_B1.c: 131: }
  5654                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5655  0242  0021               	movlb	1	; select bank1
  5656  0243  0855               	movf	_Sw^(0+128),w
  5657  0244  0086               	movwf	6
  5658  0245  3001               	movlw	1	; select bank2/3
  5659  0246  0087               	movwf	7
  5660  0247  1C81               	btfss	1,1
  5661  0248  2B1E               	goto	l9199
  5662                           
  5663                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5664  0249  0855               	movf	_Sw^(0+128),w
  5665  024A  0086               	movwf	6
  5666  024B  3001               	movlw	1	; select bank2/3
  5667  024C  0087               	movwf	7
  5668  024D  1901               	btfsc	1,2
  5669  024E  2A75               	goto	l9165
  5670                           
  5671                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5672  024F  3001               	movlw	1
  5673  0250  0020               	movlb	0	; select bank0
  5674  0251  00B0               	movwf	??_setSw_Main
  5675  0252  0021               	movlb	1	; select bank1
  5676  0253  0855               	movf	_Sw^(0+128),w
  5677  0254  3E02               	addlw	2
  5678  0255  0086               	movwf	6
  5679  0256  3001               	movlw	1	; select bank2/3
  5680  0257  0087               	movwf	7
  5681  0258  0020               	movlb	0	; select bank0
  5682  0259  0830               	movf	??_setSw_Main,w
  5683  025A  0781               	addwf	1,f
  5684                           
  5685                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5686  025B  0021               	movlb	1	; select bank1
  5687  025C  0855               	movf	_Sw^(0+128),w
  5688  025D  3E02               	addlw	2
  5689  025E  0086               	movwf	6
  5690  025F  3001               	movlw	1	; select bank2/3
  5691  0260  0087               	movwf	7
  5692  0261  3003               	movlw	3
  5693  0262  0201               	subwf	1,w
  5694  0263  1C03               	skipc
  5695  0264  0008               	return
  5696                           
  5697                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5698  0265  0855               	movf	_Sw^(0+128),w
  5699  0266  3E02               	addlw	2
  5700  0267  0086               	movwf	6
  5701  0268  3001               	movlw	1	; select bank2/3
  5702  0269  0087               	movwf	7
  5703  026A  0181               	clrf	1
  5704                           
  5705                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5706  026B  0855               	movf	_Sw^(0+128),w
  5707  026C  0086               	movwf	6
  5708  026D  3001               	movlw	1	; select bank2/3
  5709  026E  0087               	movwf	7
  5710  026F  1501               	bsf	1,2
  5711                           
  5712                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5713  0270  0020               	movlb	0	; select bank0
  5714  0271  0832               	movf	setSw_Main@sw,w
  5715  0272  3191  21C8         	fcall	_setDimmerLights_SwOn
  5716                           
  5717                           ;Switch_B1.c: 146: }
  5718                           ;Switch_B1.c: 147: } else {
  5719  0274  0008               	return
  5720  0275                     l9165:	
  5721                           
  5722                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5723  0275  0021               	movlb	1	; select bank1
  5724  0276  0855               	movf	_Sw^(0+128),w
  5725  0277  0086               	movwf	6
  5726  0278  3001               	movlw	1	; select bank2/3
  5727  0279  0087               	movwf	7
  5728  027A  1981               	btfsc	1,3
  5729  027B  2AAA               	goto	l9175
  5730                           
  5731                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5732  027C  0855               	movf	_Sw^(0+128),w
  5733  027D  3E03               	addlw	3
  5734  027E  0086               	movwf	6
  5735  027F  3001               	movlw	1	; select bank2/3
  5736  0280  0087               	movwf	7
  5737  0281  3001               	movlw	1
  5738  0282  0781               	addwf	1,f
  5739  0283  3141               	addfsr 1,1
  5740  0284  1803               	skipnc
  5741  0285  0A81               	incf	1,f
  5742                           
  5743                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5744  0286  0855               	movf	_Sw^(0+128),w
  5745  0287  3E03               	addlw	3
  5746  0288  0086               	movwf	6
  5747  0289  3001               	movlw	1	; select bank2/3
  5748  028A  0087               	movwf	7
  5749  028B  3F40               	moviw [0]fsr1
  5750  028C  0020               	movlb	0	; select bank0
  5751  028D  00B0               	movwf	??_setSw_Main
  5752  028E  3F41               	moviw [1]fsr1
  5753  028F  00B1               	movwf	??_setSw_Main+1
  5754  0290  3000               	movlw	0
  5755  0291  0231               	subwf	??_setSw_Main+1,w
  5756  0292  304B               	movlw	75
  5757  0293  1903               	skipnz
  5758  0294  0230               	subwf	??_setSw_Main,w
  5759  0295  1C03               	skipc
  5760  0296  0008               	return
  5761                           
  5762                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5763  0297  0021               	movlb	1	; select bank1
  5764  0298  0855               	movf	_Sw^(0+128),w
  5765  0299  3E03               	addlw	3
  5766  029A  0086               	movwf	6
  5767  029B  3001               	movlw	1	; select bank2/3
  5768  029C  0087               	movwf	7
  5769  029D  3000               	movlw	0
  5770  029E  3FC0               	movwi [0]fsr1
  5771  029F  3FC1               	movwi [1]fsr1
  5772                           
  5773                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5774  02A0  0855               	movf	_Sw^(0+128),w
  5775  02A1  0086               	movwf	6
  5776  02A2  3001               	movlw	1	; select bank2/3
  5777  02A3  0087               	movwf	7
  5778  02A4  1581               	bsf	1,3
  5779                           
  5780                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5781  02A5  0020               	movlb	0	; select bank0
  5782  02A6  0832               	movf	setSw_Main@sw,w
  5783  02A7  3191  210A         	fcall	_setDimmerLights_DimmingOn
  5784                           
  5785                           ;Switch_B1.c: 161: }
  5786                           ;Switch_B1.c: 162: } else {
  5787  02A9  0008               	return
  5788  02AA                     l9175:	
  5789                           
  5790                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5791  02AA  0021               	movlb	1	; select bank1
  5792  02AB  0855               	movf	_Sw^(0+128),w
  5793  02AC  0086               	movwf	6
  5794  02AD  3001               	movlw	1	; select bank2/3
  5795  02AE  0087               	movwf	7
  5796  02AF  1A01               	btfsc	1,4
  5797  02B0  2AEA               	goto	l9189
  5798                           
  5799                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5800  02B1  0855               	movf	_Sw^(0+128),w
  5801  02B2  3E05               	addlw	5
  5802  02B3  0086               	movwf	6
  5803  02B4  3001               	movlw	1	; select bank2/3
  5804  02B5  0087               	movwf	7
  5805  02B6  3001               	movlw	1
  5806  02B7  0781               	addwf	1,f
  5807  02B8  3141               	addfsr 1,1
  5808  02B9  1803               	skipnc
  5809  02BA  0A81               	incf	1,f
  5810                           
  5811                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5812  02BB  0855               	movf	_Sw^(0+128),w
  5813  02BC  3E05               	addlw	5
  5814  02BD  0086               	movwf	6
  5815  02BE  3001               	movlw	1	; select bank2/3
  5816  02BF  0087               	movwf	7
  5817  02C0  3F40               	moviw [0]fsr1
  5818  02C1  0020               	movlb	0	; select bank0
  5819  02C2  00B0               	movwf	??_setSw_Main
  5820  02C3  3F41               	moviw [1]fsr1
  5821  02C4  00B1               	movwf	??_setSw_Main+1
  5822  02C5  3000               	movlw	0
  5823  02C6  0231               	subwf	??_setSw_Main+1,w
  5824  02C7  304B               	movlw	75
  5825  02C8  1903               	skipnz
  5826  02C9  0230               	subwf	??_setSw_Main,w
  5827  02CA  1C03               	skipc
  5828  02CB  0008               	return
  5829                           
  5830                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5831  02CC  0021               	movlb	1	; select bank1
  5832  02CD  0855               	movf	_Sw^(0+128),w
  5833  02CE  3E05               	addlw	5
  5834  02CF  0086               	movwf	6
  5835  02D0  3001               	movlw	1	; select bank2/3
  5836  02D1  0087               	movwf	7
  5837  02D2  3000               	movlw	0
  5838  02D3  3FC0               	movwi [0]fsr1
  5839  02D4  3FC1               	movwi [1]fsr1
  5840                           
  5841                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5842  02D5  0855               	movf	_Sw^(0+128),w
  5843  02D6  0086               	movwf	6
  5844  02D7  3001               	movlw	1	; select bank2/3
  5845  02D8  0087               	movwf	7
  5846  02D9  1601               	bsf	1,4
  5847                           
  5848                           ;Switch_B1.c: 171: setRF_Learn(1);
  5849  02DA  3001               	movlw	1
  5850  02DB  319E  2612  3181   	fcall	_setRF_Learn
  5851                           
  5852                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5853  02DE  0022               	movlb	2	; select bank2
  5854  02DF  1EA0               	btfss	_myMain^(0+256),5
  5855  02E0  0008               	return
  5856                           
  5857                           ;Switch_B1.c: 173: setBuz(2, 100);
  5858  02E1  3064               	movlw	100
  5859  02E2  0020               	movlb	0	; select bank0
  5860  02E3  00AA               	movwf	setBuz@time
  5861  02E4  3000               	movlw	0
  5862  02E5  00AB               	movwf	setBuz@time+1
  5863  02E6  3002               	movlw	2
  5864  02E7  3194  24F6         	fcall	_setBuz
  5865                           
  5866                           ;Switch_B1.c: 174: }
  5867                           ;Switch_B1.c: 178: }
  5868                           ;Switch_B1.c: 179: } else {
  5869  02E9  0008               	return
  5870  02EA                     l9189:	
  5871                           
  5872                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5873  02EA  0021               	movlb	1	; select bank1
  5874  02EB  0855               	movf	_Sw^(0+128),w
  5875  02EC  0086               	movwf	6
  5876  02ED  3001               	movlw	1	; select bank2/3
  5877  02EE  0087               	movwf	7
  5878  02EF  1A81               	btfsc	1,5
  5879  02F0  0008               	return
  5880                           
  5881                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5882  02F1  0855               	movf	_Sw^(0+128),w
  5883  02F2  3E07               	addlw	7
  5884  02F3  0086               	movwf	6
  5885  02F4  3001               	movlw	1	; select bank2/3
  5886  02F5  0087               	movwf	7
  5887  02F6  3001               	movlw	1
  5888  02F7  0781               	addwf	1,f
  5889  02F8  3141               	addfsr 1,1
  5890  02F9  1803               	skipnc
  5891  02FA  0A81               	incf	1,f
  5892                           
  5893                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5894  02FB  0855               	movf	_Sw^(0+128),w
  5895  02FC  3E07               	addlw	7
  5896  02FD  0086               	movwf	6
  5897  02FE  3001               	movlw	1	; select bank2/3
  5898  02FF  0087               	movwf	7
  5899  0300  3F40               	moviw [0]fsr1
  5900  0301  0020               	movlb	0	; select bank0
  5901  0302  00B0               	movwf	??_setSw_Main
  5902  0303  3F41               	moviw [1]fsr1
  5903  0304  00B1               	movwf	??_setSw_Main+1
  5904  0305  3000               	movlw	0
  5905  0306  0231               	subwf	??_setSw_Main+1,w
  5906  0307  3096               	movlw	150
  5907  0308  1903               	skipnz
  5908  0309  0230               	subwf	??_setSw_Main,w
  5909  030A  1C03               	skipc
  5910  030B  0008               	return
  5911                           
  5912                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5913  030C  0021               	movlb	1	; select bank1
  5914  030D  0855               	movf	_Sw^(0+128),w
  5915  030E  3E07               	addlw	7
  5916  030F  0086               	movwf	6
  5917  0310  3001               	movlw	1	; select bank2/3
  5918  0311  0087               	movwf	7
  5919  0312  3000               	movlw	0
  5920  0313  3FC0               	movwi [0]fsr1
  5921  0314  3FC1               	movwi [1]fsr1
  5922                           
  5923                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5924  0315  0855               	movf	_Sw^(0+128),w
  5925  0316  0086               	movwf	6
  5926  0317  3001               	movlw	1	; select bank2/3
  5927  0318  0087               	movwf	7
  5928  0319  1681               	bsf	1,5
  5929                           
  5930                           ;Switch_B1.c: 187: setRF_Learn(0);
  5931  031A  3000               	movlw	0
  5932  031B  319E  2612         	fcall	_setRF_Learn
  5933                           
  5934                           ;Switch_B1.c: 190: }
  5935                           ;Switch_B1.c: 191: }
  5936                           ;Switch_B1.c: 192: }
  5937                           ;Switch_B1.c: 194: }
  5938                           ;Switch_B1.c: 195: }
  5939                           ;Switch_B1.c: 196: } else {
  5940  031D  0008               	return
  5941  031E                     l9199:	
  5942                           
  5943                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5944  031E  0021               	movlb	1	; select bank1
  5945  031F  0855               	movf	_Sw^(0+128),w
  5946  0320  0086               	movwf	6
  5947  0321  3001               	movlw	1	; select bank2/3
  5948  0322  0087               	movwf	7
  5949  0323  1D01               	btfss	1,2
  5950  0324  0008               	return
  5951                           
  5952                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5953  0325  3001               	movlw	1
  5954  0326  0020               	movlb	0	; select bank0
  5955  0327  00B0               	movwf	??_setSw_Main
  5956  0328  0021               	movlb	1	; select bank1
  5957  0329  0855               	movf	_Sw^(0+128),w
  5958  032A  3E02               	addlw	2
  5959  032B  0086               	movwf	6
  5960  032C  3001               	movlw	1	; select bank2/3
  5961  032D  0087               	movwf	7
  5962  032E  0020               	movlb	0	; select bank0
  5963  032F  0830               	movf	??_setSw_Main,w
  5964  0330  0781               	addwf	1,f
  5965                           
  5966                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5967  0331  0021               	movlb	1	; select bank1
  5968  0332  0855               	movf	_Sw^(0+128),w
  5969  0333  3E02               	addlw	2
  5970  0334  0086               	movwf	6
  5971  0335  3001               	movlw	1	; select bank2/3
  5972  0336  0087               	movwf	7
  5973  0337  3003               	movlw	3
  5974  0338  0201               	subwf	1,w
  5975  0339  1C03               	skipc
  5976  033A  0008               	return
  5977                           
  5978                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5979  033B  0855               	movf	_Sw^(0+128),w
  5980  033C  3E02               	addlw	2
  5981  033D  0086               	movwf	6
  5982  033E  3001               	movlw	1	; select bank2/3
  5983  033F  0087               	movwf	7
  5984  0340  0181               	clrf	1
  5985                           
  5986                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5987  0341  0855               	movf	_Sw^(0+128),w
  5988  0342  0086               	movwf	6
  5989  0343  3001               	movlw	1	; select bank2/3
  5990  0344  0087               	movwf	7
  5991  0345  1101               	bcf	1,2
  5992                           
  5993                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5994  0346  0855               	movf	_Sw^(0+128),w
  5995  0347  3E03               	addlw	3
  5996  0348  0086               	movwf	6
  5997  0349  3001               	movlw	1	; select bank2/3
  5998  034A  0087               	movwf	7
  5999  034B  3000               	movlw	0
  6000  034C  3FC0               	movwi [0]fsr1
  6001  034D  3FC1               	movwi [1]fsr1
  6002                           
  6003                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6004  034E  0855               	movf	_Sw^(0+128),w
  6005  034F  0086               	movwf	6
  6006  0350  3001               	movlw	1	; select bank2/3
  6007  0351  0087               	movwf	7
  6008  0352  1181               	bcf	1,3
  6009                           
  6010                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6011  0353  0855               	movf	_Sw^(0+128),w
  6012  0354  0086               	movwf	6
  6013  0355  3001               	movlw	1	; select bank2/3
  6014  0356  0087               	movwf	7
  6015  0357  1201               	bcf	1,4
  6016                           
  6017                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6018  0358  0855               	movf	_Sw^(0+128),w
  6019  0359  0086               	movwf	6
  6020  035A  3001               	movlw	1	; select bank2/3
  6021  035B  0087               	movwf	7
  6022  035C  1281               	bcf	1,5
  6023                           
  6024                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6025  035D  0855               	movf	_Sw^(0+128),w
  6026  035E  3E05               	addlw	5
  6027  035F  0086               	movwf	6
  6028  0360  3001               	movlw	1	; select bank2/3
  6029  0361  0087               	movwf	7
  6030  0362  3000               	movlw	0
  6031  0363  3FC0               	movwi [0]fsr1
  6032  0364  3FC1               	movwi [1]fsr1
  6033                           
  6034                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6035  0365  0855               	movf	_Sw^(0+128),w
  6036  0366  3E07               	addlw	7
  6037  0367  0086               	movwf	6
  6038  0368  3001               	movlw	1	; select bank2/3
  6039  0369  0087               	movwf	7
  6040  036A  3000               	movlw	0
  6041  036B  3FC0               	movwi [0]fsr1
  6042  036C  3FC1               	movwi [1]fsr1
  6043                           
  6044                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6045  036D  0020               	movlb	0	; select bank0
  6046  036E  0832               	movf	setSw_Main@sw,w
  6047  036F  3192  22A1  3181   	fcall	_setDimmerLights_SwOff
  6048                           
  6049                           ;Switch_B1.c: 219: setRF_Learn(0);
  6050  0372  3000               	movlw	0
  6051  0373  319E  2612         	fcall	_setRF_Learn
  6052                           
  6053                           ;Switch_B1.c: 221: }
  6054                           ;Switch_B1.c: 222: }
  6055                           ;Switch_B1.c: 223: }
  6056                           ;Switch_B1.c: 224: } else {
  6057  0375  0008               	return
  6058  0376                     l2486:	
  6059                           
  6060                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6061  0376  0022               	movlb	2	; select bank2
  6062  0377  1C20               	btfss	_myMain^(0+256),0
  6063  0378  0008               	return
  6064                           
  6065                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6066  0379  0021               	movlb	1	; select bank1
  6067  037A  0855               	movf	_Sw^(0+128),w
  6068  037B  0086               	movwf	6
  6069  037C  3001               	movlw	1	; select bank2/3
  6070  037D  0087               	movwf	7
  6071  037E  1401               	bsf	1,0
  6072  037F  0008               	return
  6073  0380                     __end_of_setSw_Main:	
  6074                           
  6075                           	psect	text14
  6076  1E12                     __ptext14:	
  6077 ;; *************** function _setRF_Learn *****************
  6078 ;; Defined at:
  6079 ;;		line 33 in file "../src/RF_Control_B1.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  command         1    wreg     unsigned char 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  command         1    2[BANK0 ] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;Total ram usage:        2 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    5
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_setSw_Main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _setRF_Learn
  6109  1E12                     _setRF_Learn:	
  6110                           
  6111                           ;incstack = 0
  6112                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6113                           ;setRF_Learn@command stored from wreg
  6114  1E12  0020               	movlb	0	; select bank0
  6115  1E13  00A2               	movwf	setRF_Learn@command
  6116                           
  6117                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6118  1E14  0822               	movf	setRF_Learn@command,w
  6119  1E15  3A01               	xorlw	1
  6120  1E16  3000               	movlw	0
  6121  1E17  1903               	skipnz
  6122  1E18  3001               	movlw	1
  6123  1E19  00A1               	movwf	??_setRF_Learn
  6124  1E1A  0EA1               	swapf	??_setRF_Learn,f
  6125  1E1B  0DA1               	rlf	??_setRF_Learn,f
  6126  1E1C  0DA1               	rlf	??_setRF_Learn,f
  6127  1E1D  0021               	movlb	1	; select bank1
  6128  1E1E  0820               	movf	_RF1^(0+128),w
  6129  1E1F  0020               	movlb	0	; select bank0
  6130  1E20  0621               	xorwf	??_setRF_Learn,w
  6131  1E21  39BF               	andlw	-65
  6132  1E22  0621               	xorwf	??_setRF_Learn,w
  6133  1E23  0021               	movlb	1	; select bank1
  6134  1E24  00A0               	movwf	_RF1^(0+128)
  6135  1E25  0008               	return
  6136  1E26                     __end_of_setRF_Learn:	
  6137                           
  6138                           	psect	text15
  6139  110A                     __ptext15:	
  6140 ;; *************** function _setDimmerLights_DimmingOn *****************
  6141 ;; Defined at:
  6142 ;;		line 715 in file "../src/Dimmer_B1.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  sw              1    wreg     unsigned char 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  sw              1    3[BANK0 ] unsigned char 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;		None               void
  6149 ;; Registers used:
  6150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;Total ram usage:        1 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    6
  6163 ;; This function calls:
  6164 ;;		_DimmerLights_SelectPointer
  6165 ;; This function is called by:
  6166 ;;		_setSw_Main
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function _setDimmerLights_DimmingOn
  6172  110A                     _setDimmerLights_DimmingOn:	
  6173                           
  6174                           ;incstack = 0
  6175                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6176                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6177  110A  0020               	movlb	0	; select bank0
  6178  110B  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6179                           
  6180                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6181  110C  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6182  110D  319C  242F  3191   	fcall	_DimmerLights_SelectPointer
  6183                           
  6184                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6185  1110  0021               	movlb	1	; select bank1
  6186  1111  084F               	movf	_DimmerLights^(0+128),w
  6187  1112  0086               	movwf	6
  6188  1113  3001               	movlw	1	; select bank2/3
  6189  1114  0087               	movwf	7
  6190  1115  1881               	btfsc	1,1
  6191  1116  0008               	return
  6192                           
  6193                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6194  1117  084F               	movf	_DimmerLights^(0+128),w
  6195  1118  0086               	movwf	6
  6196  1119  3001               	movlw	1	; select bank2/3
  6197  111A  0087               	movwf	7
  6198  111B  1C01               	btfss	1,0
  6199  111C  0008               	return
  6200                           
  6201                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6202  111D  0A4F               	incf	_DimmerLights^(0+128),w
  6203  111E  0086               	movwf	6
  6204  111F  3001               	movlw	1	; select bank2/3
  6205  1120  0087               	movwf	7
  6206  1121  1401               	bsf	1,0
  6207                           
  6208                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6209  1122  084F               	movf	_DimmerLights^(0+128),w
  6210  1123  0086               	movwf	6
  6211  1124  3001               	movlw	1	; select bank2/3
  6212  1125  0087               	movwf	7
  6213  1126  1581               	bsf	1,3
  6214                           
  6215                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6216  1127  084F               	movf	_DimmerLights^(0+128),w
  6217  1128  0086               	movwf	6
  6218  1129  3001               	movlw	1	; select bank2/3
  6219  112A  0087               	movwf	7
  6220  112B  1601               	bsf	1,4
  6221                           
  6222                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6223  112C  084F               	movf	_DimmerLights^(0+128),w
  6224  112D  0086               	movwf	6
  6225  112E  3001               	movlw	1	; select bank2/3
  6226  112F  0087               	movwf	7
  6227  1130  1681               	bsf	1,5
  6228  1131  0008               	return
  6229  1132                     __end_of_setDimmerLights_DimmingOn:	
  6230                           
  6231                           	psect	text16
  6232  1D48                     __ptext16:	
  6233 ;; *************** function _getSw_KeyStatus *****************
  6234 ;; Defined at:
  6235 ;;		line 237 in file "../src/Switch_B1.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  sw              1    wreg     unsigned char 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;  sw              1    0[COMMON] unsigned char 
  6240 ;;  status          1    2[BANK0 ] unsigned char 
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      unsigned char 
  6243 ;; Registers used:
  6244 ;;		wreg, status,2
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;Total ram usage:        3 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    5
  6257 ;; This function calls:
  6258 ;;		Nothing
  6259 ;; This function is called by:
  6260 ;;		_setSw_Main
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           
  6265                           ;psect for function _getSw_KeyStatus
  6266  1D48                     _getSw_KeyStatus:	
  6267                           
  6268                           ;Switch_B1.c: 238: char status = 0;
  6269                           
  6270                           ;incstack = 0
  6271                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6272  1D48  0020               	movlb	0	; select bank0
  6273  1D49  01A2               	clrf	getSw_KeyStatus@status
  6274                           
  6275                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6276  1D4A  01A3               	clrf	_getSw_KeyStatus$6336
  6277  1D4B  0AA3               	incf	_getSw_KeyStatus$6336,f
  6278  1D4C  1F0C               	btfss	12,6	;volatile
  6279  1D4D  1A0C               	btfsc	12,4	;volatile
  6280  1D4E  2D53               	goto	l6963
  6281  1D4F  1C0C               	btfss	12,0	;volatile
  6282  1D50  1B8C               	btfsc	12,7	;volatile
  6283  1D51  2D53               	goto	l6963
  6284  1D52  01A3               	clrf	_getSw_KeyStatus$6336
  6285  1D53                     l6963:	
  6286  1D53  0823               	movf	_getSw_KeyStatus$6336,w
  6287  1D54  00A1               	movwf	??_getSw_KeyStatus
  6288  1D55  0821               	movf	??_getSw_KeyStatus,w
  6289  1D56  00A2               	movwf	getSw_KeyStatus@status
  6290                           
  6291                           ;Switch_B1.c: 275: return status;
  6292  1D57  0822               	movf	getSw_KeyStatus@status,w
  6293  1D58  0008               	return
  6294  1D59                     __end_of_getSw_KeyStatus:	
  6295                           
  6296                           	psect	text17
  6297  1C9B                     __ptext17:	
  6298 ;; *************** function _SwPointSelect *****************
  6299 ;; Defined at:
  6300 ;;		line 25 in file "../src/Switch_B1.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  sw              1    wreg     unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  sw              1    2[BANK0 ] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        2 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    5
  6321 ;; This function calls:
  6322 ;;		Nothing
  6323 ;; This function is called by:
  6324 ;;		_setSw_Main
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _SwPointSelect
  6330  1C9B                     _SwPointSelect:	
  6331                           
  6332                           ;incstack = 0
  6333                           ; Regs used in _SwPointSelect: [wreg]
  6334                           ;SwPointSelect@sw stored from wreg
  6335  1C9B  0020               	movlb	0	; select bank0
  6336  1C9C  00A2               	movwf	SwPointSelect@sw
  6337                           
  6338                           ;Switch_B1.c: 28: if (sw == 1) {
  6339  1C9D  0822               	movf	SwPointSelect@sw,w
  6340  1C9E  3A01               	xorlw	1
  6341  1C9F  1D03               	skipz
  6342  1CA0  0008               	return
  6343                           
  6344                           ;Switch_B1.c: 29: Sw = &Sw1;
  6345  1CA1  30E3               	movlw	_Sw1& (0+255)
  6346  1CA2  00A1               	movwf	??_SwPointSelect
  6347  1CA3  0821               	movf	??_SwPointSelect,w
  6348  1CA4  0021               	movlb	1	; select bank1
  6349  1CA5  00D5               	movwf	_Sw^(0+128)
  6350  1CA6  0008               	return
  6351  1CA7                     __end_of_SwPointSelect:	
  6352                           
  6353                           	psect	text18
  6354  1E50                     __ptext18:	
  6355 ;; *************** function _TouchPower *****************
  6356 ;; Defined at:
  6357 ;;		line 10 in file "../src/Switch_B1.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;		None               void
  6364 ;; Registers used:
  6365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    6
  6378 ;; This function calls:
  6379 ;;		_Timeout_Counter
  6380 ;;		_set_TimeoutCleared
  6381 ;; This function is called by:
  6382 ;;		_Switch_Main
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function _TouchPower
  6388  1E50                     _TouchPower:	
  6389                           
  6390                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6394  1E50  0022               	movlb	2	; select bank2
  6395  1E51  1C20               	btfss	_myMain^(0+256),0
  6396  1E52  0008               	return
  6397                           
  6398                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6399  1E53  0020               	movlb	0	; select bank0
  6400  1E54  180D               	btfsc	13,0	;volatile
  6401  1E55  0008               	return
  6402  1E56  2E5C               	goto	l7477
  6403  1E57                     l2466:	
  6404                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6405                           
  6406                           
  6407                           ;Switch_B1.c: 14: RB0 = 1;
  6408  1E57  0020               	movlb	0	; select bank0
  6409  1E58  140D               	bsf	13,0	;volatile
  6410                           
  6411                           ;Switch_B1.c: 15: Timeout_Counter();
  6412  1E59  319E  2691  319E   	fcall	_Timeout_Counter
  6413  1E5C                     l7477:	
  6414  1E5C  0020               	movlb	0	; select bank0
  6415  1E5D  180D               	btfsc	13,0	;volatile
  6416  1E5E  2E62               	goto	l7481
  6417  1E5F  0022               	movlb	2	; select bank2
  6418  1E60  1D2A               	btfss	(_myMain^(0+256)+10),2
  6419  1E61  2E57               	goto	l2466
  6420  1E62                     l7481:	
  6421                           
  6422                           ;Switch_B1.c: 16: }
  6423                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6424  1E62  319B  2383         	fcall	_set_TimeoutCleared
  6425  1E64  0008               	return
  6426  1E65                     __end_of_TouchPower:	
  6427                           
  6428                           	psect	text19
  6429  1B83                     __ptext19:	
  6430 ;; *************** function _set_TimeoutCleared *****************
  6431 ;; Defined at:
  6432 ;;		line 281 in file "../src/Main_B1.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;		None               void
  6439 ;; Registers used:
  6440 ;;		status,2
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;Total ram usage:        0 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    5
  6453 ;; This function calls:
  6454 ;;		Nothing
  6455 ;; This function is called by:
  6456 ;;		_getAD
  6457 ;;		_TouchPower
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _set_TimeoutCleared
  6463  1B83                     _set_TimeoutCleared:	
  6464                           
  6465                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _set_TimeoutCleared: [status,2]
  6469  1B83  0022               	movlb	2	; select bank2
  6470  1B84  112A               	bcf	(_myMain^(0+256)+10),2
  6471                           
  6472                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6473  1B85  01AB               	clrf	(_myMain^(0+256)+11)
  6474  1B86  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6475  1B87  0008               	return
  6476  1B88                     __end_of_set_TimeoutCleared:	
  6477                           
  6478                           	psect	text20
  6479  1E91                     __ptext20:	
  6480 ;; *************** function _Timeout_Counter *****************
  6481 ;; Defined at:
  6482 ;;		line 272 in file "../src/Main_B1.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;		None               void
  6489 ;; Registers used:
  6490 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;Total ram usage:        0 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    5
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_getAD
  6507 ;;		_TouchPower
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           
  6512                           ;psect for function _Timeout_Counter
  6513  1E91                     _Timeout_Counter:	
  6514                           
  6515                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6516                           
  6517                           ;incstack = 0
  6518                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6519  1E91  3001               	movlw	1
  6520  1E92  0022               	movlb	2	; select bank2
  6521  1E93  07AB               	addwf	(_myMain^(0+256)+11),f
  6522  1E94  3000               	movlw	0
  6523  1E95  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6524                           
  6525                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6526  1E96  300B               	movlw	11
  6527  1E97  3E20               	addlw	_myMain& (0+255)
  6528  1E98  0086               	movwf	6
  6529  1E99  3001               	movlw	1	; select bank2/3
  6530  1E9A  0087               	movwf	7
  6531  1E9B  3F40               	moviw [0]fsr1
  6532  1E9C  3AA8               	xorlw	168
  6533  1E9D  1D03               	skipz
  6534  1E9E  2EA1               	goto	u6075
  6535  1E9F  3F41               	moviw [1]fsr1
  6536  1EA0  3A61               	xorlw	97
  6537  1EA1                     u6075:	
  6538  1EA1  1D03               	skipz
  6539  1EA2  0008               	return
  6540                           
  6541                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6542  1EA3  01AB               	clrf	(_myMain^(0+256)+11)
  6543  1EA4  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6544                           
  6545                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6546  1EA5  152A               	bsf	(_myMain^(0+256)+10),2
  6547  1EA6  0008               	return
  6548  1EA7                     __end_of_Timeout_Counter:	
  6549                           
  6550                           	psect	text21
  6551  1B7F                     __ptext21:	
  6552 ;; *************** function _Switch_Initialization *****************
  6553 ;; Defined at:
  6554 ;;		line 46 in file "../src/Switch_B1.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    8
  6575 ;; This function calls:
  6576 ;;		_setSw_Initialization
  6577 ;; This function is called by:
  6578 ;;		_main
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function _Switch_Initialization
  6584  1B7F                     _Switch_Initialization:	
  6585                           
  6586                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6590  1B7F  3001               	movlw	1
  6591  1B80  319C  24D2         	fcall	_setSw_Initialization
  6592  1B82  0008               	return
  6593  1B83                     __end_of_Switch_Initialization:	
  6594                           
  6595                           	psect	text22
  6596  1CD2                     __ptext22:	
  6597 ;; *************** function _setSw_Initialization *****************
  6598 ;; Defined at:
  6599 ;;		line 66 in file "../src/Switch_B1.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  sw              1    wreg     unsigned char 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  sw              1    5[BANK0 ] unsigned char 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;Total ram usage:        1 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    7
  6620 ;; This function calls:
  6621 ;;		_setLED
  6622 ;; This function is called by:
  6623 ;;		_Switch_Initialization
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _setSw_Initialization
  6629  1CD2                     _setSw_Initialization:	
  6630                           
  6631                           ;incstack = 0
  6632                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6633                           ;setSw_Initialization@sw stored from wreg
  6634  1CD2  0020               	movlb	0	; select bank0
  6635  1CD3  00A5               	movwf	setSw_Initialization@sw
  6636                           
  6637                           ;Switch_B1.c: 68: setLED(sw, 1);
  6638  1CD4  01A3               	clrf	setLED@command
  6639  1CD5  0AA3               	incf	setLED@command,f
  6640  1CD6  0825               	movf	setSw_Initialization@sw,w
  6641  1CD7  3192  22DA  319C   	fcall	_setLED
  6642                           
  6643                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6644  1CDA  0020               	movlb	0	; select bank0
  6645  1CDB  01A3               	clrf	setLED@command
  6646  1CDC  0AA3               	incf	setLED@command,f
  6647  1CDD  0825               	movf	setSw_Initialization@sw,w
  6648  1CDE  3E01               	addlw	1
  6649  1CDF  3192  22DA         	fcall	_setLED
  6650  1CE1  0008               	return
  6651  1CE2                     __end_of_setSw_Initialization:	
  6652                           
  6653                           	psect	text23
  6654  1B55                     __ptext23:	
  6655 ;; *************** function _RF_Main *****************
  6656 ;; Defined at:
  6657 ;;		line 26 in file "../src/RF_Control_B1.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;		None
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;		None               void
  6664 ;; Registers used:
  6665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;Total ram usage:        0 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:   12
  6678 ;; This function calls:
  6679 ;;		_setRF_Main
  6680 ;; This function is called by:
  6681 ;;		_main
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _RF_Main
  6687  1B55                     _RF_Main:	
  6688                           
  6689                           ;RF_Control_B1.c: 28: setRF_Main();
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6693  1B55  3185  2569         	fcall	_setRF_Main
  6694  1B57  0008               	return
  6695  1B58                     __end_of_RF_Main:	
  6696                           
  6697                           	psect	text24
  6698  0569                     __ptext24:	
  6699 ;; *************** function _setRF_Main *****************
  6700 ;; Defined at:
  6701 ;;		line 53 in file "../src/RF_Control_B1.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;		None
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;  error           1    6[BANK1 ] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        2 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:   11
  6722 ;; This function calls:
  6723 ;;		_CC2500_PowerOnInitial
  6724 ;;		_CC2500_RxData
  6725 ;;		_CC2500_TxData
  6726 ;;		_CC2500_WriteCommand
  6727 ;;		_RF_RxDisable
  6728 ;;		___lwdiv
  6729 ;;		_getBuz_GO
  6730 ;;		_getRF_KeyStatus
  6731 ;;		_getRxData
  6732 ;; This function is called by:
  6733 ;;		_RF_Main
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function _setRF_Main
  6739  0569                     _setRF_Main:	
  6740                           
  6741                           ;RF_Control_B1.c: 54: char error = 0;
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6745  0569  0021               	movlb	1	; select bank1
  6746  056A  01EB               	clrf	setRF_Main@error^(0+128)
  6747                           
  6748                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6749  056B  1C20               	btfss	_RF1^(0+128),0
  6750  056C  2E3A               	goto	l2108
  6751                           
  6752                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6753  056D  319D  2526  3185   	fcall	_getBuz_GO
  6754  0570  0020               	movlb	0	; select bank0
  6755  0571  0822               	movf	?_getBuz_GO+1,w
  6756  0572  0421               	iorwf	?_getBuz_GO,w
  6757  0573  1D03               	skipz
  6758  0574  2E1B               	goto	l9117
  6759                           
  6760                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6761  0575  319D  2537  3185   	fcall	_getRF_KeyStatus
  6762  0578  3A01               	xorlw	1
  6763  0579  3000               	movlw	0
  6764  057A  1903               	skipnz
  6765  057B  3001               	movlw	1
  6766  057C  0021               	movlb	1	; select bank1
  6767  057D  00EA               	movwf	??_setRF_Main^(0+128)
  6768  057E  0CEA               	rrf	??_setRF_Main^(0+128),f
  6769  057F  0CEA               	rrf	??_setRF_Main^(0+128),f
  6770  0580  0820               	movf	_RF1^(0+128),w
  6771  0581  066A               	xorwf	??_setRF_Main^(0+128),w
  6772  0582  397F               	andlw	-129
  6773  0583  066A               	xorwf	??_setRF_Main^(0+128),w
  6774  0584  00A0               	movwf	_RF1^(0+128)
  6775                           
  6776                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6777  0585  1FA0               	btfss	_RF1^(0+128),7
  6778  0586  2D89               	goto	l2112
  6779  0587  1F20               	btfss	_RF1^(0+128),6
  6780  0588  2E1B               	goto	l9117
  6781  0589                     l2112:	
  6782                           
  6783                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6784  0589  1D20               	btfss	_RF1^(0+128),2
  6785  058A  2DDA               	goto	l2113
  6786                           
  6787                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6788  058B  1B20               	btfsc	_RF1^(0+128),6
  6789  058C  2DD5               	goto	l9089
  6790                           
  6791                           ;RF_Control_B1.c: 68: RF1.Count++;
  6792  058D  3001               	movlw	1
  6793  058E  07A2               	addwf	(_RF1^(0+128)+2),f
  6794  058F  3000               	movlw	0
  6795  0590  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6796                           
  6797                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6798  0591  3014               	movlw	20
  6799  0592  0020               	movlb	0	; select bank0
  6800  0593  00A1               	movwf	___lwdiv@divisor
  6801  0594  3000               	movlw	0
  6802  0595  00A2               	movwf	___lwdiv@divisor+1
  6803  0596  0021               	movlb	1	; select bank1
  6804  0597  0828               	movf	((_RF1+1)^(0+128)+7),w
  6805  0598  0020               	movlb	0	; select bank0
  6806  0599  01A4               	clrf	___lwdiv@dividend+1
  6807  059A  07A4               	addwf	___lwdiv@dividend+1,f
  6808  059B  0021               	movlb	1	; select bank1
  6809  059C  0827               	movf	(_RF1^(0+128)+7),w
  6810  059D  0020               	movlb	0	; select bank0
  6811  059E  01A3               	clrf	___lwdiv@dividend
  6812  059F  07A3               	addwf	___lwdiv@dividend,f
  6813  05A0  3192  226A  3185   	fcall	___lwdiv
  6814  05A3  0020               	movlb	0	; select bank0
  6815  05A4  0822               	movf	?___lwdiv+1,w
  6816  05A5  0021               	movlb	1	; select bank1
  6817  05A6  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6818  05A7  1D03               	skipz
  6819  05A8  2DAD               	goto	u10145
  6820  05A9  0020               	movlb	0	; select bank0
  6821  05AA  0821               	movf	?___lwdiv,w
  6822  05AB  0021               	movlb	1	; select bank1
  6823  05AC  0222               	subwf	(_RF1^(0+128)+2),w
  6824  05AD                     u10145:	
  6825  05AD  1C03               	skipc
  6826  05AE  2E1B               	goto	l9117
  6827                           
  6828                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6829  05AF  3014               	movlw	20
  6830  05B0  0020               	movlb	0	; select bank0
  6831  05B1  00A1               	movwf	___lwdiv@divisor
  6832  05B2  3000               	movlw	0
  6833  05B3  00A2               	movwf	___lwdiv@divisor+1
  6834  05B4  0021               	movlb	1	; select bank1
  6835  05B5  0828               	movf	((_RF1+1)^(0+128)+7),w
  6836  05B6  0020               	movlb	0	; select bank0
  6837  05B7  01A4               	clrf	___lwdiv@dividend+1
  6838  05B8  07A4               	addwf	___lwdiv@dividend+1,f
  6839  05B9  0021               	movlb	1	; select bank1
  6840  05BA  0827               	movf	(_RF1^(0+128)+7),w
  6841  05BB  0020               	movlb	0	; select bank0
  6842  05BC  01A3               	clrf	___lwdiv@dividend
  6843  05BD  07A3               	addwf	___lwdiv@dividend,f
  6844  05BE  3192  226A  3185   	fcall	___lwdiv
  6845  05C1  0020               	movlb	0	; select bank0
  6846  05C2  0822               	movf	?___lwdiv+1,w
  6847  05C3  0021               	movlb	1	; select bank1
  6848  05C4  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6849  05C5  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6850  05C6  0020               	movlb	0	; select bank0
  6851  05C7  0821               	movf	?___lwdiv,w
  6852  05C8  0021               	movlb	1	; select bank1
  6853  05C9  01A2               	clrf	(_RF1^(0+128)+2)
  6854  05CA  07A2               	addwf	(_RF1^(0+128)+2),f
  6855                           
  6856                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6857  05CB  1120               	bcf	_RF1^(0+128),2
  6858                           
  6859                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6860  05CC  01AA               	clrf	(_RF1^(0+128)+10)
  6861  05CD  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6862                           
  6863                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6864  05CE  319C  24C3  3185   	fcall	_RF_RxDisable
  6865                           
  6866                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6867  05D1  3188  208C  3185   	fcall	_CC2500_TxData
  6868                           
  6869                           ;RF_Control_B1.c: 77: }
  6870                           ;RF_Control_B1.c: 78: } else {
  6871  05D4  2E1B               	goto	l9117
  6872  05D5                     l9089:	
  6873                           
  6874                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6875  05D5  0021               	movlb	1	; select bank1
  6876  05D6  01A2               	clrf	(_RF1^(0+128)+2)
  6877  05D7  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6878                           
  6879                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6880  05D8  1120               	bcf	_RF1^(0+128),2
  6881                           
  6882                           ;RF_Control_B1.c: 81: }
  6883                           ;RF_Control_B1.c: 82: } else {
  6884  05D9  2E1B               	goto	l9117
  6885  05DA                     l2113:	
  6886                           
  6887                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6888  05DA  1DA0               	btfss	_RF1^(0+128),3
  6889  05DB  2DE9               	goto	l9103
  6890                           
  6891                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6892  05DC  3188  20F9  3185   	fcall	_CC2500_RxData
  6893                           
  6894                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6895  05DF  0021               	movlb	1	; select bank1
  6896  05E0  1CA0               	btfss	_RF1^(0+128),1
  6897  05E1  2E1B               	goto	l9117
  6898                           
  6899                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6900  05E2  10A0               	bcf	_RF1^(0+128),1
  6901                           
  6902                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6903  05E3  01AA               	clrf	(_RF1^(0+128)+10)
  6904  05E4  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6905                           
  6906                           ;RF_Control_B1.c: 97: getRxData();
  6907  05E5  318A  2248  3185   	fcall	_getRxData
  6908                           
  6909                           ;RF_Control_B1.c: 100: }
  6910                           ;RF_Control_B1.c: 101: } else {
  6911  05E8  2E1B               	goto	l9117
  6912  05E9                     l9103:	
  6913                           
  6914                           ;RF_Control_B1.c: 102: RF1.Count++;
  6915  05E9  3001               	movlw	1
  6916  05EA  0021               	movlb	1	; select bank1
  6917  05EB  07A2               	addwf	(_RF1^(0+128)+2),f
  6918  05EC  3000               	movlw	0
  6919  05ED  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6920                           
  6921                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6922  05EE  3014               	movlw	20
  6923  05EF  0020               	movlb	0	; select bank0
  6924  05F0  00A1               	movwf	___lwdiv@divisor
  6925  05F1  3000               	movlw	0
  6926  05F2  00A2               	movwf	___lwdiv@divisor+1
  6927  05F3  0021               	movlb	1	; select bank1
  6928  05F4  0828               	movf	((_RF1+1)^(0+128)+7),w
  6929  05F5  0020               	movlb	0	; select bank0
  6930  05F6  01A4               	clrf	___lwdiv@dividend+1
  6931  05F7  07A4               	addwf	___lwdiv@dividend+1,f
  6932  05F8  0021               	movlb	1	; select bank1
  6933  05F9  0827               	movf	(_RF1^(0+128)+7),w
  6934  05FA  0020               	movlb	0	; select bank0
  6935  05FB  01A3               	clrf	___lwdiv@dividend
  6936  05FC  07A3               	addwf	___lwdiv@dividend,f
  6937  05FD  3192  226A  3185   	fcall	___lwdiv
  6938  0600  0020               	movlb	0	; select bank0
  6939  0601  0822               	movf	?___lwdiv+1,w
  6940  0602  0021               	movlb	1	; select bank1
  6941  0603  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6942  0604  1D03               	skipz
  6943  0605  2E0A               	goto	u10175
  6944  0606  0020               	movlb	0	; select bank0
  6945  0607  0821               	movf	?___lwdiv,w
  6946  0608  0021               	movlb	1	; select bank1
  6947  0609  0222               	subwf	(_RF1^(0+128)+2),w
  6948  060A                     u10175:	
  6949  060A  1C03               	skipc
  6950  060B  2E1B               	goto	l9117
  6951                           
  6952                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6953  060C  01A2               	clrf	(_RF1^(0+128)+2)
  6954  060D  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6955                           
  6956                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6957  060E  15A0               	bsf	_RF1^(0+128),3
  6958                           
  6959                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6960  060F  3036               	movlw	54
  6961  0610  319F  2756  3185   	fcall	_CC2500_WriteCommand
  6962                           
  6963                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6964  0613  303A               	movlw	58
  6965  0614  319F  2756  3185   	fcall	_CC2500_WriteCommand
  6966                           
  6967                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6968  0617  3034               	movlw	52
  6969  0618  319F  2756  3185   	fcall	_CC2500_WriteCommand
  6970  061B                     l9117:	
  6971                           
  6972                           ;RF_Control_B1.c: 111: }
  6973                           ;RF_Control_B1.c: 112: }
  6974                           ;RF_Control_B1.c: 113: }
  6975                           ;RF_Control_B1.c: 114: }
  6976                           ;RF_Control_B1.c: 115: }
  6977                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6978  061B  3001               	movlw	1
  6979  061C  0021               	movlb	1	; select bank1
  6980  061D  07AA               	addwf	(_RF1^(0+128)+10),f
  6981  061E  3000               	movlw	0
  6982  061F  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6983                           
  6984                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6985  0620  300B               	movlw	11
  6986  0621  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6987  0622  30B9               	movlw	185
  6988  0623  1903               	skipnz
  6989  0624  022A               	subwf	(_RF1^(0+128)+10),w
  6990  0625  1C03               	skipc
  6991  0626  2E33               	goto	l9131
  6992                           
  6993                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6994  0627  01AA               	clrf	(_RF1^(0+128)+10)
  6995  0628  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6996                           
  6997                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6998  0629  11A0               	bcf	_RF1^(0+128),3
  6999                           
  7000                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7001  062A  10A0               	bcf	_RF1^(0+128),1
  7002                           
  7003                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7004  062B  3036               	movlw	54
  7005  062C  319F  2756  3185   	fcall	_CC2500_WriteCommand
  7006                           
  7007                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7008  062F  303A               	movlw	58
  7009  0630  319F  2756  3185   	fcall	_CC2500_WriteCommand
  7010  0633                     l9131:	
  7011                           
  7012                           ;RF_Control_B1.c: 125: }
  7013                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7014  0633  0021               	movlb	1	; select bank1
  7015  0634  1F21               	btfss	(_RF1^(0+128)+1),6
  7016  0635  0008               	return
  7017                           
  7018                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7019  0636  1321               	bcf	(_RF1^(0+128)+1),6
  7020                           
  7021                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7022  0637  319E  263B         	fcall	_CC2500_PowerOnInitial
  7023                           
  7024                           ;RF_Control_B1.c: 130: }
  7025                           ;RF_Control_B1.c: 132: } else {
  7026  0639  0008               	return
  7027  063A                     l2108:	
  7028                           
  7029                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7030  063A  0022               	movlb	2	; select bank2
  7031  063B  1C20               	btfss	_myMain^(0+256),0
  7032  063C  0008               	return
  7033                           
  7034                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7035  063D  0021               	movlb	1	; select bank1
  7036  063E  1420               	bsf	_RF1^(0+128),0
  7037  063F  0008               	return
  7038  0640                     __end_of_setRF_Main:	
  7039                           
  7040                           	psect	text25
  7041  0A48                     __ptext25:	
  7042 ;; *************** function _getRxData *****************
  7043 ;; Defined at:
  7044 ;;		line 227 in file "../src/RF_Control_B1.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;  error           1    4[BANK1 ] unsigned char 
  7049 ;; Return value:  Size  Location     Type
  7050 ;;		None               void
  7051 ;; Registers used:
  7052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;Total ram usage:        2 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:   10
  7065 ;; This function calls:
  7066 ;;		_getMain_All_Error_Status
  7067 ;;		_setControl_Lights_Table
  7068 ;;		_setLog_Code
  7069 ;;		_setTxData
  7070 ;; This function is called by:
  7071 ;;		_setRF_Main
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           
  7076                           ;psect for function _getRxData
  7077  0A48                     _getRxData:	
  7078                           
  7079                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7080                           
  7081                           ;incstack = 0
  7082                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7083  0A48  0023               	movlb	3	; select bank3
  7084  0A49  0820               	movf	_RF_Data^(0+384),w
  7085  0A4A  3AAA               	xorlw	170
  7086  0A4B  1D03               	skipz
  7087  0A4C  2A5E               	goto	l8903
  7088  0A4D  0821               	movf	(_RF_Data^(0+384)+1),w
  7089  0A4E  3A01               	xorlw	1
  7090  0A4F  1D03               	skipz
  7091  0A50  2A5E               	goto	l8903
  7092                           
  7093                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7094  0A51  3055               	movlw	85
  7095  0A52  0021               	movlb	1	; select bank1
  7096  0A53  00E8               	movwf	??_getRxData^(0+128)
  7097  0A54  086D               	movf	_product^(0+128),w
  7098  0A55  3E02               	addlw	2
  7099  0A56  0086               	movwf	6
  7100  0A57  3002               	movlw	2	; select bank4/5
  7101  0A58  0087               	movwf	7
  7102  0A59  0868               	movf	??_getRxData^(0+128),w
  7103  0A5A  0081               	movwf	1
  7104                           
  7105                           ;RF_Control_B1.c: 231: setTxData();
  7106  0A5B  318F  2745         	fcall	_setTxData
  7107                           
  7108                           ;RF_Control_B1.c: 235: } else {
  7109  0A5D  0008               	return
  7110  0A5E                     l8903:	
  7111                           
  7112                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7113  0A5E  3000               	movlw	0
  7114  0A5F  3191  2161  318A   	fcall	_getMain_All_Error_Status
  7115  0A62  0021               	movlb	1	; select bank1
  7116  0A63  00E8               	movwf	??_getRxData^(0+128)
  7117  0A64  0868               	movf	??_getRxData^(0+128),w
  7118  0A65  00E9               	movwf	getRxData@error^(0+128)
  7119                           
  7120                           ;RF_Control_B1.c: 237: if (error == 0) {
  7121  0A66  08E9               	movf	getRxData@error^(0+128),f
  7122  0A67  1D03               	skipz
  7123  0A68  2AB8               	goto	l2153
  7124                           
  7125                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7126  0A69  1F20               	btfss	_RF1^(0+128),6
  7127  0A6A  2A76               	goto	l8915
  7128                           
  7129                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7130  0A6B  0023               	movlb	3	; select bank3
  7131  0A6C  08A0               	movf	_RF_Data^(0+384),f
  7132  0A6D  1D03               	skipz
  7133  0A6E  0008               	return
  7134  0A6F  0821               	movf	(_RF_Data^(0+384)+1),w
  7135  0A70  3A64               	xorlw	100
  7136  0A71  1D03               	skipz
  7137  0A72  0008               	return
  7138                           
  7139                           ;RF_Control_B1.c: 241: setLog_Code();
  7140  0A73  3191  2194         	fcall	_setLog_Code
  7141                           
  7142                           ;RF_Control_B1.c: 242: }
  7143                           ;RF_Control_B1.c: 243: } else {
  7144  0A75  0008               	return
  7145  0A76                     l8915:	
  7146                           
  7147                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7148  0A76  0023               	movlb	3	; select bank3
  7149  0A77  0834               	movf	(_RF_Data^(0+384)+20),w
  7150  0A78  3AD1               	xorlw	209
  7151  0A79  1903               	skipnz
  7152  0A7A  2A7F               	goto	l8919
  7153  0A7B  0834               	movf	(_RF_Data^(0+384)+20),w
  7154  0A7C  3A0A               	xorlw	10
  7155  0A7D  1D03               	skipz
  7156  0A7E  0008               	return
  7157  0A7F                     l8919:	
  7158                           
  7159                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7160  0A7F  08A0               	movf	_RF_Data^(0+384),f
  7161  0A80  1D03               	skipz
  7162  0A81  0008               	return
  7163  0A82  0821               	movf	(_RF_Data^(0+384)+1),w
  7164  0A83  3A02               	xorlw	2
  7165  0A84  1D03               	skipz
  7166  0A85  0008               	return
  7167                           
  7168                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7169  0A86  082C               	movf	(_RF_Data^(0+384)+12),w
  7170  0A87  3AFF               	xorlw	255
  7171  0A88  1D03               	skipz
  7172  0A89  2A94               	goto	l8931
  7173  0A8A  082D               	movf	(_RF_Data^(0+384)+13),w
  7174  0A8B  3AFF               	xorlw	255
  7175  0A8C  1D03               	skipz
  7176  0A8D  2A94               	goto	l8931
  7177  0A8E  082E               	movf	(_RF_Data^(0+384)+14),w
  7178  0A8F  3AFF               	xorlw	255
  7179  0A90  1D03               	skipz
  7180  0A91  2A94               	goto	l8931
  7181                           
  7182                           ;RF_Control_B1.c: 249: __nop();
  7183  0A92  0000               	nop
  7184                           
  7185                           ;RF_Control_B1.c: 250: } else {
  7186  0A93  0008               	return
  7187  0A94                     l8931:	
  7188                           
  7189                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7190  0A94  0021               	movlb	1	; select bank1
  7191  0A95  086D               	movf	_product^(0+128),w
  7192  0A96  3E0C               	addlw	12
  7193  0A97  0086               	movwf	6
  7194  0A98  3002               	movlw	2	; select bank4/5
  7195  0A99  0087               	movwf	7
  7196  0A9A  0023               	movlb	3	; select bank3
  7197  0A9B  082C               	movf	(_RF_Data^(0+384)+12),w
  7198  0A9C  0601               	xorwf	1,w
  7199  0A9D  1D03               	skipz
  7200  0A9E  0008               	return
  7201  0A9F  0021               	movlb	1	; select bank1
  7202  0AA0  086D               	movf	_product^(0+128),w
  7203  0AA1  3E0D               	addlw	13
  7204  0AA2  0086               	movwf	6
  7205  0AA3  3002               	movlw	2	; select bank4/5
  7206  0AA4  0087               	movwf	7
  7207  0AA5  0023               	movlb	3	; select bank3
  7208  0AA6  082D               	movf	(_RF_Data^(0+384)+13),w
  7209  0AA7  0601               	xorwf	1,w
  7210  0AA8  1D03               	skipz
  7211  0AA9  0008               	return
  7212  0AAA  0021               	movlb	1	; select bank1
  7213  0AAB  086D               	movf	_product^(0+128),w
  7214  0AAC  3E0E               	addlw	14
  7215  0AAD  0086               	movwf	6
  7216  0AAE  3002               	movlw	2	; select bank4/5
  7217  0AAF  0087               	movwf	7
  7218  0AB0  0023               	movlb	3	; select bank3
  7219  0AB1  082E               	movf	(_RF_Data^(0+384)+14),w
  7220  0AB2  0601               	xorwf	1,w
  7221  0AB3  1D03               	skipz
  7222  0AB4  0008               	return
  7223                           
  7224                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7225  0AB5  3189  21D6         	fcall	_setControl_Lights_Table
  7226                           
  7227                           ;RF_Control_B1.c: 253: }
  7228                           ;RF_Control_B1.c: 254: }
  7229                           ;RF_Control_B1.c: 256: }
  7230                           ;RF_Control_B1.c: 267: }
  7231                           ;RF_Control_B1.c: 268: }
  7232                           ;RF_Control_B1.c: 269: } else {
  7233  0AB7  0008               	return
  7234  0AB8                     l2153:	
  7235                           
  7236                           ;RF_Control_B1.c: 270: __nop();
  7237  0AB8  0000               	nop
  7238  0AB9  0008               	return
  7239  0ABA                     __end_of_getRxData:	
  7240                           
  7241                           	psect	text26
  7242  1194                     __ptext26:	
  7243 ;; *************** function _setLog_Code *****************
  7244 ;; Defined at:
  7245 ;;		line 276 in file "../src/RF_Control_B1.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;		None
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;		None
  7250 ;; Return value:  Size  Location     Type
  7251 ;;		None               void
  7252 ;; Registers used:
  7253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;Total ram usage:        1 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    7
  7266 ;; This function calls:
  7267 ;;		_setBuz
  7268 ;;		_setMemory_LoopSave
  7269 ;;		_setMemory_Modify
  7270 ;;		_setProductData
  7271 ;; This function is called by:
  7272 ;;		_getRxData
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function _setLog_Code
  7278  1194                     _setLog_Code:	
  7279                           
  7280                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7281                           
  7282                           ;incstack = 0
  7283                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7284  1194  0021               	movlb	1	; select bank1
  7285  1195  1320               	bcf	_RF1^(0+128),6
  7286                           
  7287                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7288  1196  0023               	movlb	3	; select bank3
  7289  1197  082C               	movf	(_RF_Data^(0+384)+12),w
  7290  1198  0020               	movlb	0	; select bank0
  7291  1199  00E6               	movwf	??_setLog_Code
  7292  119A  0866               	movf	??_setLog_Code,w
  7293  119B  00E3               	movwf	setProductData@value
  7294  119C  300C               	movlw	12
  7295  119D  319C  243B  3191   	fcall	_setProductData
  7296                           
  7297                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7298  11A0  0023               	movlb	3	; select bank3
  7299  11A1  082D               	movf	(_RF_Data^(0+384)+13),w
  7300  11A2  0020               	movlb	0	; select bank0
  7301  11A3  00E6               	movwf	??_setLog_Code
  7302  11A4  0866               	movf	??_setLog_Code,w
  7303  11A5  00E3               	movwf	setProductData@value
  7304  11A6  300D               	movlw	13
  7305  11A7  319C  243B  3191   	fcall	_setProductData
  7306                           
  7307                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7308  11AA  0023               	movlb	3	; select bank3
  7309  11AB  082E               	movf	(_RF_Data^(0+384)+14),w
  7310  11AC  0020               	movlb	0	; select bank0
  7311  11AD  00E6               	movwf	??_setLog_Code
  7312  11AE  0866               	movf	??_setLog_Code,w
  7313  11AF  00E3               	movwf	setProductData@value
  7314  11B0  300E               	movlw	14
  7315  11B1  319C  243B  3191   	fcall	_setProductData
  7316                           
  7317                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7318  11B4  3064               	movlw	100
  7319  11B5  0020               	movlb	0	; select bank0
  7320  11B6  00AA               	movwf	setBuz@time
  7321  11B7  3000               	movlw	0
  7322  11B8  00AB               	movwf	setBuz@time+1
  7323  11B9  3001               	movlw	1
  7324  11BA  3194  24F6  3191   	fcall	_setBuz
  7325                           
  7326                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7327  11BD  0022               	movlb	2	; select bank2
  7328  11BE  1EA0               	btfss	_myMain^(0+256),5
  7329  11BF  29C4               	goto	l2168
  7330                           
  7331                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7332  11C0  3001               	movlw	1
  7333  11C1  319D  25EC  3191   	fcall	_setMemory_LoopSave
  7334  11C4                     l2168:	
  7335                           
  7336                           ;RF_Control_B1.c: 284: }
  7337                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7338  11C4  3001               	movlw	1
  7339  11C5  319D  25B3         	fcall	_setMemory_Modify
  7340  11C7  0008               	return
  7341  11C8                     __end_of_setLog_Code:	
  7342                           
  7343                           	psect	text27
  7344  1DEC                     __ptext27:	
  7345 ;; *************** function _setMemory_LoopSave *****************
  7346 ;; Defined at:
  7347 ;;		line 1080 in file "../src/MCU_B1.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  command         1    wreg     unsigned char 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  command         1    2[BANK0 ] unsigned char 
  7352 ;; Return value:  Size  Location     Type
  7353 ;;		None               void
  7354 ;; Registers used:
  7355 ;;		wreg, status,2, status,0
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;Total ram usage:        2 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; Hardware stack levels required when called:    5
  7368 ;; This function calls:
  7369 ;;		Nothing
  7370 ;; This function is called by:
  7371 ;;		_setLog_Code
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _setMemory_LoopSave
  7377  1DEC                     _setMemory_LoopSave:	
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7381                           ;setMemory_LoopSave@command stored from wreg
  7382  1DEC  0020               	movlb	0	; select bank0
  7383  1DED  00A2               	movwf	setMemory_LoopSave@command
  7384                           
  7385                           ;MCU_B1.c: 1081: Memory.LoopSave = command == 1 ? 1 : 0;
  7386  1DEE  0822               	movf	setMemory_LoopSave@command,w
  7387  1DEF  3A01               	xorlw	1
  7388  1DF0  3000               	movlw	0
  7389  1DF1  1903               	skipnz
  7390  1DF2  3001               	movlw	1
  7391  1DF3  00A1               	movwf	??_setMemory_LoopSave
  7392  1DF4  0DA1               	rlf	??_setMemory_LoopSave,f
  7393  1DF5  0DA1               	rlf	??_setMemory_LoopSave,f
  7394  1DF6  0023               	movlb	3	; select bank3
  7395  1DF7  0862               	movf	(_Memory^(0+384)+36),w
  7396  1DF8  0020               	movlb	0	; select bank0
  7397  1DF9  0621               	xorwf	??_setMemory_LoopSave,w
  7398  1DFA  39FB               	andlw	-5
  7399  1DFB  0621               	xorwf	??_setMemory_LoopSave,w
  7400  1DFC  0023               	movlb	3	; select bank3
  7401  1DFD  00E2               	movwf	(_Memory^(0+384)+36)
  7402  1DFE  0008               	return
  7403  1DFF                     __end_of_setMemory_LoopSave:	
  7404                           
  7405                           	psect	text28
  7406  09D6                     __ptext28:	
  7407 ;; *************** function _setControl_Lights_Table *****************
  7408 ;; Defined at:
  7409 ;;		line 289 in file "../src/RF_Control_B1.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;		None
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;Total ram usage:        0 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    9
  7430 ;; This function calls:
  7431 ;;		_getDimmerLights_Status
  7432 ;;		_getMain_All_LightsStatus
  7433 ;;		_setCmd_Status
  7434 ;;		_setDimmerLights_SwOff
  7435 ;;		_setDimmerLights_SwOn
  7436 ;;		_setProductData
  7437 ;;		_setRFSW_AdjControl
  7438 ;;		_setRFSW_Control
  7439 ;;		_setTxData
  7440 ;; This function is called by:
  7441 ;;		_getRxData
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _setControl_Lights_Table
  7447  09D6                     _setControl_Lights_Table:	
  7448                           
  7449                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7450                           
  7451                           ;incstack = 0
  7452                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7453  09D6  2A38               	goto	l8823
  7454  09D7                     l8805:	
  7455                           ;RF_Control_B1.c: 292: case 0x00:
  7456                           
  7457                           
  7458                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7459  09D7  319B  23E2  3189   	fcall	_getMain_All_LightsStatus
  7460  09DA  3A01               	xorlw	1
  7461  09DB  1D03               	skipz
  7462  09DC  29F3               	goto	l8813
  7463                           
  7464                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7465  09DD  3001               	movlw	1
  7466  09DE  319C  24E2  3189   	fcall	_getDimmerLights_Status
  7467  09E1  3A01               	xorlw	1
  7468  09E2  1D03               	skipz
  7469  09E3  29EC               	goto	l8811
  7470                           
  7471                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7472  09E4  3001               	movlw	1
  7473  09E5  3191  21C8  3189   	fcall	_setDimmerLights_SwOn
  7474                           
  7475                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7476  09E8  3001               	movlw	1
  7477  09E9  3192  22A1  3189   	fcall	_setDimmerLights_SwOff
  7478  09EC                     l8811:	
  7479                           
  7480                           ;RF_Control_B1.c: 299: }
  7481                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7482  09EC  0020               	movlb	0	; select bank0
  7483  09ED  01A1               	clrf	setCmd_Status@cmd
  7484  09EE  0AA1               	incf	setCmd_Status@cmd,f
  7485  09EF  3001               	movlw	1
  7486  09F0  319E  26F0         	fcall	_setCmd_Status
  7487                           
  7488                           ;RF_Control_B1.c: 315: } else {
  7489  09F2  0008               	return
  7490  09F3                     l8813:	
  7491                           
  7492                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7493  09F3  0020               	movlb	0	; select bank0
  7494  09F4  01E3               	clrf	setProductData@value
  7495  09F5  3009               	movlw	9
  7496  09F6  319C  243B  3189   	fcall	_setProductData
  7497                           
  7498                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7499  09F9  0020               	movlb	0	; select bank0
  7500  09FA  01E3               	clrf	setProductData@value
  7501  09FB  300B               	movlw	11
  7502  09FC  319C  243B  3189   	fcall	_setProductData
  7503                           
  7504                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7505  09FF  0020               	movlb	0	; select bank0
  7506  0A00  01E3               	clrf	setProductData@value
  7507  0A01  300F               	movlw	15
  7508  0A02  319C  243B  3189   	fcall	_setProductData
  7509                           
  7510                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7511  0A05  0020               	movlb	0	; select bank0
  7512  0A06  01E3               	clrf	setProductData@value
  7513  0A07  3011               	movlw	17
  7514  0A08  319C  243B  3189   	fcall	_setProductData
  7515                           
  7516                           ;RF_Control_B1.c: 320: setTxData();
  7517  0A0B  318F  2745         	fcall	_setTxData
  7518                           
  7519                           ;RF_Control_B1.c: 321: }
  7520                           ;RF_Control_B1.c: 322: break;
  7521  0A0D  0008               	return
  7522  0A0E                     l8815:	
  7523                           ;RF_Control_B1.c: 324: case 0x20:
  7524                           
  7525                           
  7526                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7527  0A0E  0020               	movlb	0	; select bank0
  7528  0A0F  01E3               	clrf	setProductData@value
  7529  0A10  3009               	movlw	9
  7530  0A11  319C  243B  3189   	fcall	_setProductData
  7531                           
  7532                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7533  0A14  0020               	movlb	0	; select bank0
  7534  0A15  01E3               	clrf	setProductData@value
  7535  0A16  300B               	movlw	11
  7536  0A17  319C  243B  3189   	fcall	_setProductData
  7537                           
  7538                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7539  0A1A  0021               	movlb	1	; select bank1
  7540  0A1B  086D               	movf	_product^(0+128),w
  7541  0A1C  0086               	movwf	6
  7542  0A1D  3002               	movlw	2	; select bank4/5
  7543  0A1E  0087               	movwf	7
  7544  0A1F  3002               	movlw	2	; select bank4/5
  7545  0A20  3F4F               	moviw [15]fsr1
  7546  0A21  0020               	movlb	0	; select bank0
  7547  0A22  00E3               	movwf	setProductData@value
  7548  0A23  300F               	movlw	15
  7549  0A24  319C  243B  3189   	fcall	_setProductData
  7550                           
  7551                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7552  0A27  0020               	movlb	0	; select bank0
  7553  0A28  01E3               	clrf	setProductData@value
  7554  0A29  3011               	movlw	17
  7555  0A2A  319C  243B  3189   	fcall	_setProductData
  7556                           
  7557                           ;RF_Control_B1.c: 329: setTxData();
  7558  0A2D  318F  2745         	fcall	_setTxData
  7559                           
  7560                           ;RF_Control_B1.c: 330: break;
  7561  0A2F  0008               	return
  7562  0A30                     l8817:	
  7563                           ;RF_Control_B1.c: 333: case 0x01:
  7564                           
  7565                           
  7566                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7567  0A30  3001               	movlw	1
  7568  0A31  3193  23D1         	fcall	_setRFSW_Control
  7569                           
  7570                           ;RF_Control_B1.c: 335: break;
  7571  0A33  0008               	return
  7572  0A34                     l8819:	
  7573                           ;RF_Control_B1.c: 339: case 0x11:
  7574                           
  7575                           
  7576                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7577  0A34  3001               	movlw	1
  7578  0A35  318B  23A5         	fcall	_setRFSW_AdjControl
  7579                           
  7580                           ;RF_Control_B1.c: 370: }
  7581                           
  7582                           ;RF_Control_B1.c: 341: break;
  7583  0A37  0008               	return
  7584  0A38                     l8823:	
  7585  0A38  0023               	movlb	3	; select bank3
  7586  0A39  082F               	movf	(_RF_Data^(0+384)+15),w
  7587                           
  7588                           ; Switch size 1, requested type "space"
  7589                           ; Number of cases is 4, Range of values is 0 to 32
  7590                           ; switch strategies available:
  7591                           ; Name         Instructions Cycles
  7592                           ; simple_byte           13     7 (average)
  7593                           ; direct_byte           72     6 (fixed)
  7594                           ; jumptable            260     6 (fixed)
  7595                           ;	Chosen strategy is simple_byte
  7596  0A3A  3A00               	xorlw	0	; case 0
  7597  0A3B  1903               	skipnz
  7598  0A3C  29D7               	goto	l8805
  7599  0A3D  3A01               	xorlw	1	; case 1
  7600  0A3E  1903               	skipnz
  7601  0A3F  2A30               	goto	l8817
  7602  0A40  3A10               	xorlw	16	; case 17
  7603  0A41  1903               	skipnz
  7604  0A42  2A34               	goto	l8819
  7605  0A43  3A31               	xorlw	49	; case 32
  7606  0A44  1903               	skipnz
  7607  0A45  2A0E               	goto	l8815
  7608  0A46  2A47               	goto	l2181
  7609  0A47                     l2181:	
  7610  0A47  0008               	return
  7611  0A48                     __end_of_setControl_Lights_Table:	
  7612                           
  7613                           	psect	text29
  7614  13D1                     __ptext29:	
  7615 ;; *************** function _setRFSW_Control *****************
  7616 ;; Defined at:
  7617 ;;		line 378 in file "../src/RF_Control_B1.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  sw              1    wreg     unsigned char 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  sw              1    2[BANK1 ] unsigned char 
  7622 ;;  status          1    1[BANK1 ] unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;		None               void
  7625 ;; Registers used:
  7626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;Total ram usage:        3 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    8
  7639 ;; This function calls:
  7640 ;;		_getDimmerLights_Status
  7641 ;;		_setBuz
  7642 ;;		_setDelayOff_GO
  7643 ;;		_setDimmerLights_SwOff
  7644 ;;		_setDimmerLights_SwOn
  7645 ;;		_setRF_DimmerLights
  7646 ;;		_setTxData
  7647 ;; This function is called by:
  7648 ;;		_setControl_Lights_Table
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           
  7653                           ;psect for function _setRFSW_Control
  7654  13D1                     _setRFSW_Control:	
  7655                           
  7656                           ;incstack = 0
  7657                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7658                           ;setRFSW_Control@sw stored from wreg
  7659  13D1  0021               	movlb	1	; select bank1
  7660  13D2  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7661                           
  7662                           ;RF_Control_B1.c: 379: char status = 0;
  7663  13D3  01E6               	clrf	setRFSW_Control@status^(0+128)
  7664                           
  7665                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7666  13D4  0023               	movlb	3	; select bank3
  7667  13D5  0830               	movf	(_RF_Data^(0+384)+16),w
  7668  13D6  3A80               	xorlw	128
  7669  13D7  1D03               	skipz
  7670  13D8  2C07               	goto	l8709
  7671                           
  7672                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7673  13D9  0020               	movlb	0	; select bank0
  7674  13DA  01E6               	clrf	setDelayOff_GO@command
  7675  13DB  0AE6               	incf	setDelayOff_GO@command,f
  7676  13DC  0023               	movlb	3	; select bank3
  7677  13DD  0831               	movf	(_RF_Data^(0+384)+17),w
  7678  13DE  0021               	movlb	1	; select bank1
  7679  13DF  00E5               	movwf	??_setRFSW_Control^(0+128)
  7680  13E0  0865               	movf	??_setRFSW_Control^(0+128),w
  7681  13E1  0020               	movlb	0	; select bank0
  7682  13E2  00E7               	movwf	setDelayOff_GO@value
  7683  13E3  0021               	movlb	1	; select bank1
  7684  13E4  0867               	movf	setRFSW_Control@sw^(0+128),w
  7685  13E5  318C  24AC  3193   	fcall	_setDelayOff_GO
  7686                           
  7687                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7688  13E8  0021               	movlb	1	; select bank1
  7689  13E9  0867               	movf	setRFSW_Control@sw^(0+128),w
  7690  13EA  319C  24E2  3193   	fcall	_getDimmerLights_Status
  7691  13ED  3A01               	xorlw	1
  7692  13EE  1D03               	skipz
  7693  13EF  2C07               	goto	l8709
  7694                           
  7695                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7696  13F0  3064               	movlw	100
  7697  13F1  0020               	movlb	0	; select bank0
  7698  13F2  00AA               	movwf	setBuz@time
  7699  13F3  3000               	movlw	0
  7700  13F4  00AB               	movwf	setBuz@time+1
  7701  13F5  3001               	movlw	1
  7702  13F6  3194  24F6  3193   	fcall	_setBuz
  7703                           
  7704                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7705  13F9  0020               	movlb	0	; select bank0
  7706  13FA  01E6               	clrf	setRF_DimmerLights@on
  7707  13FB  0AE6               	incf	setRF_DimmerLights@on,f
  7708  13FC  0021               	movlb	1	; select bank1
  7709  13FD  0867               	movf	setRFSW_Control@sw^(0+128),w
  7710  13FE  3196  26CE  3193   	fcall	_setRF_DimmerLights
  7711                           
  7712                           ;RF_Control_B1.c: 386: setTxData();
  7713  1401  318F  2745  3193   	fcall	_setTxData
  7714                           
  7715                           ;RF_Control_B1.c: 387: status = 1;
  7716  1404  0021               	movlb	1	; select bank1
  7717  1405  01E6               	clrf	setRFSW_Control@status^(0+128)
  7718  1406  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7719  1407                     l8709:	
  7720                           
  7721                           ;RF_Control_B1.c: 388: }
  7722                           ;RF_Control_B1.c: 389: }
  7723                           ;RF_Control_B1.c: 391: if (status == 0) {
  7724  1407  0021               	movlb	1	; select bank1
  7725  1408  08E6               	movf	setRFSW_Control@status^(0+128),f
  7726  1409  1D03               	skipz
  7727  140A  0008               	return
  7728                           
  7729                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7730  140B  0867               	movf	setRFSW_Control@sw^(0+128),w
  7731  140C  3191  21C8  3193   	fcall	_setDimmerLights_SwOn
  7732                           
  7733                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7734  140F  0021               	movlb	1	; select bank1
  7735  1410  0867               	movf	setRFSW_Control@sw^(0+128),w
  7736  1411  3192  22A1         	fcall	_setDimmerLights_SwOff
  7737  1413  0008               	return
  7738  1414                     __end_of_setRFSW_Control:	
  7739                           
  7740                           	psect	text30
  7741  0BA5                     __ptext30:	
  7742 ;; *************** function _setRFSW_AdjControl *****************
  7743 ;; Defined at:
  7744 ;;		line 400 in file "../src/RF_Control_B1.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  sw              1    wreg     unsigned char 
  7747 ;; Auto vars:     Size  Location     Type
  7748 ;;  sw              1   73[BANK0 ] unsigned char 
  7749 ;;  status          1   72[BANK0 ] unsigned char 
  7750 ;; Return value:  Size  Location     Type
  7751 ;;		None               void
  7752 ;; Registers used:
  7753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;Total ram usage:        4 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; Hardware stack levels required when called:    8
  7766 ;; This function calls:
  7767 ;;		_getDimmerLights_PercentToValue
  7768 ;;		_getDimmerLights_Status
  7769 ;;		_setDimmerIntr_Dimming_RF
  7770 ;;		_setDimmerIntr_MaxmumValue
  7771 ;;		_setDimmerLights_DimmingRun
  7772 ;;		_setDimmerLights_SwOff
  7773 ;;		_setDimmerLights_SwOn
  7774 ;;		_setMemory_Modify
  7775 ;;		_setProductData
  7776 ;;		_setTxData
  7777 ;; This function is called by:
  7778 ;;		_setControl_Lights_Table
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function _setRFSW_AdjControl
  7784  0BA5                     _setRFSW_AdjControl:	
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7788                           ;setRFSW_AdjControl@sw stored from wreg
  7789  0BA5  0020               	movlb	0	; select bank0
  7790  0BA6  00E9               	movwf	setRFSW_AdjControl@sw
  7791                           
  7792                           ;RF_Control_B1.c: 401: char status = 0;
  7793  0BA7  01E8               	clrf	setRFSW_AdjControl@status
  7794                           
  7795                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7796  0BA8  0869               	movf	setRFSW_AdjControl@sw,w
  7797  0BA9  319C  24E2  318B   	fcall	_getDimmerLights_Status
  7798  0BAC  0020               	movlb	0	; select bank0
  7799  0BAD  00E6               	movwf	??_setRFSW_AdjControl
  7800  0BAE  0866               	movf	??_setRFSW_AdjControl,w
  7801  0BAF  00E8               	movwf	setRFSW_AdjControl@status
  7802                           
  7803                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7804  0BB0  3065               	movlw	101
  7805  0BB1  0023               	movlb	3	; select bank3
  7806  0BB2  0229               	subwf	(_RF_Data^(0+384)+9),w
  7807  0BB3  1C03               	skipc
  7808  0BB4  2BBC               	goto	l8721
  7809                           
  7810                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7811  0BB5  3064               	movlw	100
  7812  0BB6  0020               	movlb	0	; select bank0
  7813  0BB7  00E6               	movwf	??_setRFSW_AdjControl
  7814  0BB8  0866               	movf	??_setRFSW_AdjControl,w
  7815  0BB9  0023               	movlb	3	; select bank3
  7816  0BBA  00A9               	movwf	(_RF_Data^(0+384)+9)
  7817                           
  7818                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7819  0BBB  2BC1               	goto	l8725
  7820  0BBC                     l8721:	
  7821  0BBC  08A9               	movf	(_RF_Data^(0+384)+9),f
  7822  0BBD  1D03               	skipz
  7823  0BBE  2BC1               	goto	l8725
  7824                           
  7825                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7826  0BBF  01A9               	clrf	(_RF_Data^(0+384)+9)
  7827  0BC0  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7828  0BC1                     l8725:	
  7829                           
  7830                           ;RF_Control_B1.c: 409: }
  7831                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7832  0BC1  0829               	movf	(_RF_Data^(0+384)+9),w
  7833  0BC2  0020               	movlb	0	; select bank0
  7834  0BC3  00E6               	movwf	??_setRFSW_AdjControl
  7835  0BC4  0866               	movf	??_setRFSW_AdjControl,w
  7836  0BC5  00E3               	movwf	setProductData@value
  7837  0BC6  3009               	movlw	9
  7838  0BC7  319C  243B  318B   	fcall	_setProductData
  7839                           
  7840                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7841  0BCA  0020               	movlb	0	; select bank0
  7842  0BCB  0869               	movf	setRFSW_AdjControl@sw,w
  7843  0BCC  00E6               	movwf	??_setRFSW_AdjControl
  7844  0BCD  0866               	movf	??_setRFSW_AdjControl,w
  7845  0BCE  00E3               	movwf	setProductData@value
  7846  0BCF  300B               	movlw	11
  7847  0BD0  319C  243B  318B   	fcall	_setProductData
  7848                           
  7849                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7850  0BD3  0020               	movlb	0	; select bank0
  7851  0BD4  0869               	movf	setRFSW_AdjControl@sw,w
  7852  0BD5  3E1A               	addlw	26
  7853  0BD6  0021               	movlb	1	; select bank1
  7854  0BD7  076D               	addwf	_product^(0+128),w
  7855  0BD8  0020               	movlb	0	; select bank0
  7856  0BD9  00E6               	movwf	??_setRFSW_AdjControl
  7857  0BDA  0866               	movf	??_setRFSW_AdjControl,w
  7858  0BDB  0086               	movwf	6
  7859  0BDC  3002               	movlw	2	; select bank4/5
  7860  0BDD  0087               	movwf	7
  7861  0BDE  0801               	movf	1,w
  7862  0BDF  00E7               	movwf	??_setRFSW_AdjControl+1
  7863  0BE0  0867               	movf	??_setRFSW_AdjControl+1,w
  7864  0BE1  00E3               	movwf	setProductData@value
  7865  0BE2  3011               	movlw	17
  7866  0BE3  319C  243B  318B   	fcall	_setProductData
  7867                           
  7868                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7869  0BE6  0023               	movlb	3	; select bank3
  7870  0BE7  0829               	movf	(_RF_Data^(0+384)+9),w
  7871  0BE8  0020               	movlb	0	; select bank0
  7872  0BE9  00E6               	movwf	??_setRFSW_AdjControl
  7873  0BEA  0866               	movf	??_setRFSW_AdjControl,w
  7874  0BEB  00E3               	movwf	setProductData@value
  7875  0BEC  0869               	movf	setRFSW_AdjControl@sw,w
  7876  0BED  3E14               	addlw	20
  7877  0BEE  319C  243B  318B   	fcall	_setProductData
  7878                           
  7879                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7880  0BF1  3001               	movlw	1
  7881  0BF2  319D  25B3  318B   	fcall	_setMemory_Modify
  7882                           
  7883                           ;RF_Control_B1.c: 425: if (status == 1) {
  7884  0BF5  0020               	movlb	0	; select bank0
  7885  0BF6  0868               	movf	setRFSW_AdjControl@status,w
  7886  0BF7  3A01               	xorlw	1
  7887  0BF8  1D03               	skipz
  7888  0BF9  2C11               	goto	l8735
  7889                           
  7890                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7891  0BFA  0023               	movlb	3	; select bank3
  7892  0BFB  0829               	movf	(_RF_Data^(0+384)+9),w
  7893  0BFC  3197  2733  318B   	fcall	_getDimmerLights_PercentToValue
  7894  0BFF  0020               	movlb	0	; select bank0
  7895  0C00  00E6               	movwf	??_setRFSW_AdjControl
  7896  0C01  0866               	movf	??_setRFSW_AdjControl,w
  7897  0C02  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  7898  0C03  0869               	movf	setRFSW_AdjControl@sw,w
  7899  0C04  319C  2447  318B   	fcall	_setDimmerIntr_MaxmumValue
  7900                           
  7901                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7902  0C07  0020               	movlb	0	; select bank0
  7903  0C08  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  7904  0C09  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  7905  0C0A  0869               	movf	setRFSW_AdjControl@sw,w
  7906  0C0B  319E  26BF  318B   	fcall	_setDimmerIntr_Dimming_RF
  7907                           
  7908                           ;RF_Control_B1.c: 428: setTxData();
  7909  0C0E  318F  2745         	fcall	_setTxData
  7910                           
  7911                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7912  0C10  0008               	return
  7913  0C11                     l8735:	
  7914  0C11  0020               	movlb	0	; select bank0
  7915  0C12  08E8               	movf	setRFSW_AdjControl@status,f
  7916  0C13  1D03               	skipz
  7917  0C14  0008               	return
  7918                           
  7919                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7920  0C15  01A3               	clrf	setDimmerLights_DimmingRun@command
  7921  0C16  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  7922  0C17  0869               	movf	setRFSW_AdjControl@sw,w
  7923  0C18  319F  2770  318B   	fcall	_setDimmerLights_DimmingRun
  7924                           
  7925                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7926  0C1B  0020               	movlb	0	; select bank0
  7927  0C1C  0869               	movf	setRFSW_AdjControl@sw,w
  7928  0C1D  3191  21C8  318B   	fcall	_setDimmerLights_SwOn
  7929                           
  7930                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7931  0C20  0020               	movlb	0	; select bank0
  7932  0C21  0869               	movf	setRFSW_AdjControl@sw,w
  7933  0C22  3192  22A1         	fcall	_setDimmerLights_SwOff
  7934  0C24  0008               	return
  7935  0C25                     __end_of_setRFSW_AdjControl:	
  7936                           
  7937                           	psect	text31
  7938  1F70                     __ptext31:	
  7939 ;; *************** function _setDimmerLights_DimmingRun *****************
  7940 ;; Defined at:
  7941 ;;		line 1030 in file "../src/Dimmer_B1.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;  lights          1    wreg     unsigned char 
  7944 ;;  command         1    3[BANK0 ] unsigned char 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  lights          1    5[BANK0 ] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;		None               void
  7949 ;; Registers used:
  7950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7956 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;Total ram usage:        3 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    6
  7963 ;; This function calls:
  7964 ;;		_DimmerLights_SelectPointer
  7965 ;; This function is called by:
  7966 ;;		_setRFSW_AdjControl
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _setDimmerLights_DimmingRun
  7972  1F70                     _setDimmerLights_DimmingRun:	
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7976                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7977  1F70  0020               	movlb	0	; select bank0
  7978  1F71  00A5               	movwf	setDimmerLights_DimmingRun@lights
  7979                           
  7980                           ;Dimmer_B1.c: 1031: DimmerLights_SelectPointer(lights);
  7981  1F72  0825               	movf	setDimmerLights_DimmingRun@lights,w
  7982  1F73  319C  242F         	fcall	_DimmerLights_SelectPointer
  7983                           
  7984                           ;Dimmer_B1.c: 1032: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7985  1F75  0020               	movlb	0	; select bank0
  7986  1F76  0823               	movf	setDimmerLights_DimmingRun@command,w
  7987  1F77  3A01               	xorlw	1
  7988  1F78  3000               	movlw	0
  7989  1F79  1903               	skipnz
  7990  1F7A  3001               	movlw	1
  7991  1F7B  00A4               	movwf	??_setDimmerLights_DimmingRun
  7992  1F7C  0021               	movlb	1	; select bank1
  7993  1F7D  0A4F               	incf	_DimmerLights^(0+128),w
  7994  1F7E  0086               	movwf	6
  7995  1F7F  3001               	movlw	1	; select bank2/3
  7996  1F80  0087               	movwf	7
  7997  1F81  0020               	movlb	0	; select bank0
  7998  1F82  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  7999  1F83  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8000  1F84  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8001  1F85  0801               	movf	1,w
  8002  1F86  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8003  1F87  39BF               	andlw	-65
  8004  1F88  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8005  1F89  0081               	movwf	1
  8006  1F8A  0008               	return
  8007  1F8B                     __end_of_setDimmerLights_DimmingRun:	
  8008                           
  8009                           	psect	text32
  8010  1D37                     __ptext32:	
  8011 ;; *************** function _getRF_KeyStatus *****************
  8012 ;; Defined at:
  8013 ;;		line 166 in file "../src/RF_Control_B1.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;		None
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  key             1    2[BANK0 ] unsigned char 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      unsigned char 
  8020 ;; Registers used:
  8021 ;;		wreg, status,2
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;Total ram usage:        3 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    5
  8034 ;; This function calls:
  8035 ;;		Nothing
  8036 ;; This function is called by:
  8037 ;;		_setRF_Main
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _getRF_KeyStatus
  8043  1D37                     _getRF_KeyStatus:	
  8044                           
  8045                           ;RF_Control_B1.c: 167: char key = 0;
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8049  1D37  0020               	movlb	0	; select bank0
  8050  1D38  01A2               	clrf	getRF_KeyStatus@key
  8051                           
  8052                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8053  1D39  01A3               	clrf	_getRF_KeyStatus$5307
  8054  1D3A  0AA3               	incf	_getRF_KeyStatus$5307,f
  8055  1D3B  1F0C               	btfss	12,6	;volatile
  8056  1D3C  1A0C               	btfsc	12,4	;volatile
  8057  1D3D  2D42               	goto	l6889
  8058  1D3E  1C0C               	btfss	12,0	;volatile
  8059  1D3F  1B8C               	btfsc	12,7	;volatile
  8060  1D40  2D42               	goto	l6889
  8061  1D41  01A3               	clrf	_getRF_KeyStatus$5307
  8062  1D42                     l6889:	
  8063  1D42  0823               	movf	_getRF_KeyStatus$5307,w
  8064  1D43  00A1               	movwf	??_getRF_KeyStatus
  8065  1D44  0821               	movf	??_getRF_KeyStatus,w
  8066  1D45  00A2               	movwf	getRF_KeyStatus@key
  8067                           
  8068                           ;RF_Control_B1.c: 179: return key;
  8069  1D46  0822               	movf	getRF_KeyStatus@key,w
  8070  1D47  0008               	return
  8071  1D48                     __end_of_getRF_KeyStatus:	
  8072                           
  8073                           	psect	text33
  8074  1D26                     __ptext33:	
  8075 ;; *************** function _getBuz_GO *****************
  8076 ;; Defined at:
  8077 ;;		line 82 in file "../src/Buzzer_B1.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  i               2    5[BANK0 ] int 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  2    1[BANK0 ] int 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8091 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;Total ram usage:        6 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    5
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_setRF_Main
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function _getBuz_GO
  8107  1D26                     _getBuz_GO:	
  8108                           
  8109                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8110                           
  8111                           ;incstack = 0
  8112                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8113  1D26  0021               	movlb	1	; select bank1
  8114  1D27  0C2E               	rrf	_Buz1^(0+128),w
  8115  1D28  3901               	andlw	1
  8116  1D29  0020               	movlb	0	; select bank0
  8117  1D2A  00A3               	movwf	??_getBuz_GO
  8118  1D2B  01A4               	clrf	??_getBuz_GO+1
  8119  1D2C  0823               	movf	??_getBuz_GO,w
  8120  1D2D  00A5               	movwf	getBuz_GO@i
  8121  1D2E  0824               	movf	??_getBuz_GO+1,w
  8122  1D2F  00A6               	movwf	getBuz_GO@i+1
  8123                           
  8124                           ;Buzzer_B1.c: 84: return i;
  8125  1D30  0826               	movf	getBuz_GO@i+1,w
  8126  1D31  01A2               	clrf	?_getBuz_GO+1
  8127  1D32  07A2               	addwf	?_getBuz_GO+1,f
  8128  1D33  0825               	movf	getBuz_GO@i,w
  8129  1D34  01A1               	clrf	?_getBuz_GO
  8130  1D35  07A1               	addwf	?_getBuz_GO,f
  8131  1D36  0008               	return
  8132  1D37                     __end_of_getBuz_GO:	
  8133                           
  8134                           	psect	text34
  8135  1CC3                     __ptext34:	
  8136 ;; *************** function _RF_RxDisable *****************
  8137 ;; Defined at:
  8138 ;;		line 154 in file "../src/RF_Control_B1.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;		None
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;		None               void
  8145 ;; Registers used:
  8146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;Total ram usage:        0 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    7
  8159 ;; This function calls:
  8160 ;;		_CC2500_WriteCommand
  8161 ;; This function is called by:
  8162 ;;		_setRF_Main
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function _RF_RxDisable
  8168  1CC3                     _RF_RxDisable:	
  8169                           
  8170                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8171                           
  8172                           ;incstack = 0
  8173                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8174  1CC3  0021               	movlb	1	; select bank1
  8175  1CC4  18A0               	btfsc	_RF1^(0+128),1
  8176  1CC5  2CC8               	goto	l2138
  8177  1CC6  1DA0               	btfss	_RF1^(0+128),3
  8178  1CC7  0008               	return
  8179  1CC8                     l2138:	
  8180                           
  8181                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8182  1CC8  11A0               	bcf	_RF1^(0+128),3
  8183                           
  8184                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8185  1CC9  10A0               	bcf	_RF1^(0+128),1
  8186                           
  8187                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8188  1CCA  3036               	movlw	54
  8189  1CCB  319F  2756  319C   	fcall	_CC2500_WriteCommand
  8190                           
  8191                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8192  1CCE  303A               	movlw	58
  8193  1CCF  319F  2756         	fcall	_CC2500_WriteCommand
  8194  1CD1  0008               	return
  8195  1CD2                     __end_of_RF_RxDisable:	
  8196                           
  8197                           	psect	text35
  8198  088C                     __ptext35:	
  8199 ;; *************** function _CC2500_TxData *****************
  8200 ;; Defined at:
  8201 ;;		line 32 in file "../src/CC2500_B1.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;		None
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;		None               void
  8208 ;; Registers used:
  8209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;Total ram usage:        2 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    7
  8222 ;; This function calls:
  8223 ;;		_CC2500_WriteByte
  8224 ;;		_CC2500_WriteCommand
  8225 ;;		_RF_Timeout_Counter
  8226 ;;		_setRF_TimeoutCleared
  8227 ;; This function is called by:
  8228 ;;		_setRF_Main
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _CC2500_TxData
  8234  088C                     _CC2500_TxData:	
  8235                           
  8236                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8237                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8241  088C  3036               	movlw	54
  8242  088D  319F  2756  3188   	fcall	_CC2500_WriteCommand
  8243                           
  8244                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8245  0890  303B               	movlw	59
  8246  0891  319F  2756  3188   	fcall	_CC2500_WriteCommand
  8247                           
  8248                           ;CC2500_B1.c: 38: RC0 = 0;
  8249  0894  0020               	movlb	0	; select bank0
  8250  0895  100E               	bcf	14,0	;volatile
  8251                           
  8252                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8253  0896  307F               	movlw	127
  8254  0897  00A5               	movwf	??_CC2500_TxData
  8255  0898  0825               	movf	??_CC2500_TxData,w
  8256  0899  0021               	movlb	1	; select bank1
  8257  089A  00D4               	movwf	_SPI0Buffer^(0+128)
  8258                           
  8259                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8260  089B  289F               	goto	l6595
  8261  089C                     l6593:	
  8262                           
  8263                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8264  089C  319E  2626  3188   	fcall	_RF_Timeout_Counter
  8265  089F                     l6595:	
  8266  089F  0020               	movlb	0	; select bank0
  8267  08A0  1E8E               	btfss	14,5	;volatile
  8268  08A1  28A5               	goto	l6599
  8269  08A2  0021               	movlb	1	; select bank1
  8270  08A3  1F21               	btfss	(_RF1^(0+128)+1),6
  8271  08A4  289C               	goto	l6593
  8272  08A5                     l6599:	
  8273                           
  8274                           ;CC2500_B1.c: 42: };
  8275                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8276  08A5  319B  236F  3188   	fcall	_setRF_TimeoutCleared
  8277                           
  8278                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8279  08A8  319F  2709  3188   	fcall	_CC2500_WriteByte
  8280                           
  8281                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8282  08AB  0021               	movlb	1	; select bank1
  8283  08AC  0857               	movf	_Tx_Length^(0+128),w
  8284  08AD  0020               	movlb	0	; select bank0
  8285  08AE  00A5               	movwf	??_CC2500_TxData
  8286  08AF  0825               	movf	??_CC2500_TxData,w
  8287  08B0  0021               	movlb	1	; select bank1
  8288  08B1  00D4               	movwf	_SPI0Buffer^(0+128)
  8289                           
  8290                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8291  08B2  319F  2709  3188   	fcall	_CC2500_WriteByte
  8292                           
  8293                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8294  08B5  0020               	movlb	0	; select bank0
  8295  08B6  01A6               	clrf	CC2500_TxData@loop_e
  8296  08B7                     l6613:	
  8297  08B7  0021               	movlb	1	; select bank1
  8298  08B8  0857               	movf	_Tx_Length^(0+128),w
  8299  08B9  0020               	movlb	0	; select bank0
  8300  08BA  0226               	subwf	CC2500_TxData@loop_e,w
  8301  08BB  1803               	btfsc	3,0
  8302  08BC  28D0               	goto	l235
  8303                           
  8304                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8305  08BD  0826               	movf	CC2500_TxData@loop_e,w
  8306  08BE  3EA0               	addlw	_RF_Data& (0+255)
  8307  08BF  0086               	movwf	6
  8308  08C0  3001               	movlw	1	; select bank3/4
  8309  08C1  0087               	movwf	7
  8310  08C2  0801               	movf	1,w
  8311  08C3  00A5               	movwf	??_CC2500_TxData
  8312  08C4  0825               	movf	??_CC2500_TxData,w
  8313  08C5  0021               	movlb	1	; select bank1
  8314  08C6  00D4               	movwf	_SPI0Buffer^(0+128)
  8315                           
  8316                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8317  08C7  319F  2709  3188   	fcall	_CC2500_WriteByte
  8318  08CA  3001               	movlw	1
  8319  08CB  0020               	movlb	0	; select bank0
  8320  08CC  00A5               	movwf	??_CC2500_TxData
  8321  08CD  0825               	movf	??_CC2500_TxData,w
  8322  08CE  07A6               	addwf	CC2500_TxData@loop_e,f
  8323  08CF  28B7               	goto	l6613
  8324  08D0                     l235:	
  8325                           
  8326                           ;CC2500_B1.c: 51: }
  8327                           ;CC2500_B1.c: 52: RC0 = 1;
  8328  08D0  140E               	bsf	14,0	;volatile
  8329                           
  8330                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8331  08D1  3035               	movlw	53
  8332  08D2  319F  2756  3188   	fcall	_CC2500_WriteCommand
  8333                           
  8334                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8335  08D5  28D9               	goto	l6619
  8336  08D6                     l6617:	
  8337                           
  8338                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8339  08D6  319E  2626  3188   	fcall	_RF_Timeout_Counter
  8340  08D9                     l6619:	
  8341  08D9  0020               	movlb	0	; select bank0
  8342  08DA  188E               	btfsc	14,1	;volatile
  8343  08DB  28DF               	goto	l6623
  8344  08DC  0021               	movlb	1	; select bank1
  8345  08DD  1F21               	btfss	(_RF1^(0+128)+1),6
  8346  08DE  28D6               	goto	l6617
  8347  08DF                     l6623:	
  8348                           
  8349                           ;CC2500_B1.c: 56: };
  8350                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8351  08DF  319B  236F  3188   	fcall	_setRF_TimeoutCleared
  8352                           
  8353                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8354  08E2  28E6               	goto	l6627
  8355  08E3                     l6625:	
  8356                           
  8357                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8358  08E3  319E  2626  3188   	fcall	_RF_Timeout_Counter
  8359  08E6                     l6627:	
  8360  08E6  0020               	movlb	0	; select bank0
  8361  08E7  1C8E               	btfss	14,1	;volatile
  8362  08E8  28EC               	goto	l6631
  8363  08E9  0021               	movlb	1	; select bank1
  8364  08EA  1F21               	btfss	(_RF1^(0+128)+1),6
  8365  08EB  28E3               	goto	l6625
  8366  08EC                     l6631:	
  8367                           
  8368                           ;CC2500_B1.c: 61: };
  8369                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8370  08EC  319B  236F  3188   	fcall	_setRF_TimeoutCleared
  8371                           
  8372                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8373  08EF  3036               	movlw	54
  8374  08F0  319F  2756  3188   	fcall	_CC2500_WriteCommand
  8375                           
  8376                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8377  08F3  303B               	movlw	59
  8378  08F4  319F  2756         	fcall	_CC2500_WriteCommand
  8379                           
  8380                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8381  08F6  0020               	movlb	0	; select bank0
  8382  08F7  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8383  08F8  0008               	return
  8384  08F9                     __end_of_CC2500_TxData:	
  8385                           
  8386                           	psect	text36
  8387  08F9                     __ptext36:	
  8388 ;; *************** function _CC2500_RxData *****************
  8389 ;; Defined at:
  8390 ;;		line 73 in file "../src/CC2500_B1.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;		None
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;		None               void
  8397 ;; Registers used:
  8398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;Total ram usage:        2 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; Hardware stack levels required when called:    7
  8411 ;; This function calls:
  8412 ;;		_CC2500_ReadByte
  8413 ;;		_CC2500_ReadStatus
  8414 ;;		_CC2500_WriteByte
  8415 ;;		_CC2500_WriteCommand
  8416 ;;		_RF_Timeout_Counter
  8417 ;;		_setRF_TimeoutCleared
  8418 ;; This function is called by:
  8419 ;;		_setRF_Main
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function _CC2500_RxData
  8425  08F9                     _CC2500_RxData:	
  8426                           
  8427                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8428                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8432  08F9  0020               	movlb	0	; select bank0
  8433  08FA  188E               	btfsc	14,1	;volatile
  8434  08FB  0008               	return
  8435                           
  8436                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8437  08FC  303B               	movlw	59
  8438  08FD  3190  20BF  3188   	fcall	_CC2500_ReadStatus
  8439                           
  8440                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8441  0900  0021               	movlb	1	; select bank1
  8442  0901  085A               	movf	_s_data^(0+128),w
  8443  0902  1903               	btfsc	3,2
  8444  0903  0008               	return
  8445                           
  8446                           ;CC2500_B1.c: 90: RC0 = 0;
  8447  0904  0020               	movlb	0	; select bank0
  8448  0905  100E               	bcf	14,0	;volatile
  8449                           
  8450                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8451  0906  30FF               	movlw	255
  8452  0907  00A5               	movwf	??_CC2500_RxData
  8453  0908  0825               	movf	??_CC2500_RxData,w
  8454  0909  0021               	movlb	1	; select bank1
  8455  090A  00D4               	movwf	_SPI0Buffer^(0+128)
  8456                           
  8457                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8458  090B  290F               	goto	l6651
  8459  090C                     l6649:	
  8460                           
  8461                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8462  090C  319E  2626  3188   	fcall	_RF_Timeout_Counter
  8463  090F                     l6651:	
  8464  090F  0020               	movlb	0	; select bank0
  8465  0910  1E8E               	btfss	14,5	;volatile
  8466  0911  2915               	goto	l6655
  8467  0912  0021               	movlb	1	; select bank1
  8468  0913  1F21               	btfss	(_RF1^(0+128)+1),6
  8469  0914  290C               	goto	l6649
  8470  0915                     l6655:	
  8471                           
  8472                           ;CC2500_B1.c: 95: };
  8473                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8474  0915  319B  236F  3188   	fcall	_setRF_TimeoutCleared
  8475                           
  8476                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8477  0918  319F  2709  3188   	fcall	_CC2500_WriteByte
  8478                           
  8479                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8480  091B  319F  27A7  3188   	fcall	_CC2500_ReadByte
  8481                           
  8482                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8483  091E  0021               	movlb	1	; select bank1
  8484  091F  0854               	movf	_SPI0Buffer^(0+128),w
  8485  0920  0020               	movlb	0	; select bank0
  8486  0921  00A5               	movwf	??_CC2500_RxData
  8487  0922  0825               	movf	??_CC2500_RxData,w
  8488  0923  0021               	movlb	1	; select bank1
  8489  0924  00D3               	movwf	_Rx_Length^(0+128)
  8490                           
  8491                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8492  0925  0020               	movlb	0	; select bank0
  8493  0926  01A6               	clrf	CC2500_RxData@loop_f
  8494  0927                     l6671:	
  8495  0927  0021               	movlb	1	; select bank1
  8496  0928  0853               	movf	_Rx_Length^(0+128),w
  8497  0929  0020               	movlb	0	; select bank0
  8498  092A  0226               	subwf	CC2500_RxData@loop_f,w
  8499  092B  1803               	btfsc	3,0
  8500  092C  2940               	goto	l6673
  8501                           
  8502                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8503  092D  319F  27A7  3188   	fcall	_CC2500_ReadByte
  8504                           
  8505                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8506  0930  0021               	movlb	1	; select bank1
  8507  0931  0854               	movf	_SPI0Buffer^(0+128),w
  8508  0932  0020               	movlb	0	; select bank0
  8509  0933  00A5               	movwf	??_CC2500_RxData
  8510  0934  0826               	movf	CC2500_RxData@loop_f,w
  8511  0935  3EA0               	addlw	_RF_Data& (0+255)
  8512  0936  0086               	movwf	6
  8513  0937  3001               	movlw	1	; select bank3/4
  8514  0938  0087               	movwf	7
  8515  0939  0825               	movf	??_CC2500_RxData,w
  8516  093A  0081               	movwf	1
  8517  093B  3001               	movlw	1
  8518  093C  00A5               	movwf	??_CC2500_RxData
  8519  093D  0825               	movf	??_CC2500_RxData,w
  8520  093E  07A6               	addwf	CC2500_RxData@loop_f,f
  8521  093F  2927               	goto	l6671
  8522  0940                     l6673:	
  8523                           
  8524                           ;CC2500_B1.c: 104: }
  8525                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8526  0940  319F  27A7  3188   	fcall	_CC2500_ReadByte
  8527                           
  8528                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8529  0943  0021               	movlb	1	; select bank1
  8530  0944  0854               	movf	_SPI0Buffer^(0+128),w
  8531  0945  0020               	movlb	0	; select bank0
  8532  0946  00A5               	movwf	??_CC2500_RxData
  8533  0947  0825               	movf	??_CC2500_RxData,w
  8534  0948  0021               	movlb	1	; select bank1
  8535  0949  00D2               	movwf	_RSSI^(0+128)
  8536                           
  8537                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8538  094A  319F  27A7  3188   	fcall	_CC2500_ReadByte
  8539                           
  8540                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8541  094D  0021               	movlb	1	; select bank1
  8542  094E  0854               	movf	_SPI0Buffer^(0+128),w
  8543  094F  0020               	movlb	0	; select bank0
  8544  0950  00A5               	movwf	??_CC2500_RxData
  8545  0951  0825               	movf	??_CC2500_RxData,w
  8546  0952  0021               	movlb	1	; select bank1
  8547  0953  00CB               	movwf	_CRC^(0+128)
  8548                           
  8549                           ;CC2500_B1.c: 109: RC0 = 1;
  8550  0954  0020               	movlb	0	; select bank0
  8551  0955  140E               	bsf	14,0	;volatile
  8552                           
  8553                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8554  0956  0021               	movlb	1	; select bank1
  8555  0957  1FCB               	btfss	_CRC^(0+128),7
  8556  0958  295B               	goto	l259
  8557                           
  8558                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8559  0959  0020               	movlb	0	; select bank0
  8560  095A  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8561  095B                     l259:	
  8562                           
  8563                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8564  095B  0021               	movlb	1	; select bank1
  8565  095C  11A0               	bcf	_RF1^(0+128),3
  8566                           
  8567                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8568  095D  14A0               	bsf	_RF1^(0+128),1
  8569                           
  8570                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8571  095E  3036               	movlw	54
  8572  095F  319F  2756  3188   	fcall	_CC2500_WriteCommand
  8573                           
  8574                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8575  0962  303A               	movlw	58
  8576  0963  319F  2756         	fcall	_CC2500_WriteCommand
  8577  0965  0021               	movlb	1	; select bank1
  8578  0966  0008               	return
  8579  0967                     __end_of_CC2500_RxData:	
  8580                           
  8581                           	psect	text37
  8582  10BF                     __ptext37:	
  8583 ;; *************** function _CC2500_ReadStatus *****************
  8584 ;; Defined at:
  8585 ;;		line 308 in file "../src/CC2500_B1.c"
  8586 ;; Parameters:    Size  Location     Type
  8587 ;;  status_addr     1    wreg     unsigned char 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;		None               void
  8592 ;; Registers used:
  8593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;Total ram usage:        2 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    6
  8606 ;; This function calls:
  8607 ;;		_CC2500_ReadByte
  8608 ;;		_CC2500_WriteByte
  8609 ;;		_RF_Timeout_Counter
  8610 ;;		_setRF_TimeoutCleared
  8611 ;; This function is called by:
  8612 ;;		_CC2500_RxData
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           
  8617                           ;psect for function _CC2500_ReadStatus
  8618  10BF                     _CC2500_ReadStatus:	
  8619                           
  8620                           ;incstack = 0
  8621                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8622                           ;CC2500_ReadStatus@status_addr stored from wreg
  8623  10BF  0020               	movlb	0	; select bank0
  8624  10C0  00A4               	movwf	CC2500_ReadStatus@status_addr
  8625                           
  8626                           ;CC2500_B1.c: 309: RC0 = 0;
  8627  10C1  100E               	bcf	14,0	;volatile
  8628                           
  8629                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8630  10C2  0824               	movf	CC2500_ReadStatus@status_addr,w
  8631  10C3  3EC0               	addlw	192
  8632  10C4  00A3               	movwf	??_CC2500_ReadStatus
  8633  10C5  0823               	movf	??_CC2500_ReadStatus,w
  8634  10C6  0021               	movlb	1	; select bank1
  8635  10C7  00D4               	movwf	_SPI0Buffer^(0+128)
  8636                           
  8637                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8638  10C8  28CC               	goto	l6317
  8639  10C9                     l6315:	
  8640                           
  8641                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8642  10C9  319E  2626  3190   	fcall	_RF_Timeout_Counter
  8643  10CC                     l6317:	
  8644  10CC  0020               	movlb	0	; select bank0
  8645  10CD  1E8E               	btfss	14,5	;volatile
  8646  10CE  28D2               	goto	l6321
  8647  10CF  0021               	movlb	1	; select bank1
  8648  10D0  1F21               	btfss	(_RF1^(0+128)+1),6
  8649  10D1  28C9               	goto	l6315
  8650  10D2                     l6321:	
  8651                           
  8652                           ;CC2500_B1.c: 314: };
  8653                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8654  10D2  319B  236F  3190   	fcall	_setRF_TimeoutCleared
  8655                           
  8656                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8657  10D5  319F  2709  3190   	fcall	_CC2500_WriteByte
  8658                           
  8659                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8660  10D8  319F  27A7         	fcall	_CC2500_ReadByte
  8661                           
  8662                           ;CC2500_B1.c: 319: RC0 = 1;
  8663  10DA  0020               	movlb	0	; select bank0
  8664  10DB  140E               	bsf	14,0	;volatile
  8665                           
  8666                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8667  10DC  0021               	movlb	1	; select bank1
  8668  10DD  0854               	movf	_SPI0Buffer^(0+128),w
  8669  10DE  0020               	movlb	0	; select bank0
  8670  10DF  00A3               	movwf	??_CC2500_ReadStatus
  8671  10E0  0823               	movf	??_CC2500_ReadStatus,w
  8672  10E1  0021               	movlb	1	; select bank1
  8673  10E2  00DA               	movwf	_s_data^(0+128)
  8674  10E3  0008               	return
  8675  10E4                     __end_of_CC2500_ReadStatus:	
  8676                           
  8677                           	psect	text38
  8678  1FA7                     __ptext38:	
  8679 ;; *************** function _CC2500_ReadByte *****************
  8680 ;; Defined at:
  8681 ;;		line 242 in file "../src/CC2500_B1.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;		None
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8686 ;; Return value:  Size  Location     Type
  8687 ;;		None               void
  8688 ;; Registers used:
  8689 ;;		wreg, status,2, status,0
  8690 ;; Tracked objects:
  8691 ;;		On entry : 0/0
  8692 ;;		On exit  : 0/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;Total ram usage:        2 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    5
  8702 ;; This function calls:
  8703 ;;		Nothing
  8704 ;; This function is called by:
  8705 ;;		_CC2500_RxData
  8706 ;;		_CC2500_ReadStatus
  8707 ;;		_CC2500_ReadREG
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           
  8712                           ;psect for function _CC2500_ReadByte
  8713  1FA7                     _CC2500_ReadByte:	
  8714                           
  8715                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8716                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8720  1FA7  0020               	movlb	0	; select bank0
  8721  1FA8  01A2               	clrf	CC2500_ReadByte@loop_b
  8722  1FA9                     L2:	
  8723  1FA9  3008               	movlw	8
  8724  1FAA  0222               	subwf	CC2500_ReadByte@loop_b,w
  8725  1FAB  1803               	btfsc	3,0
  8726  1FAC  0008               	return
  8727                           
  8728                           ;CC2500_B1.c: 245: RC3 = 1;
  8729  1FAD  158E               	bsf	14,3	;volatile
  8730                           
  8731                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8732  1FAE  1003               	clrc
  8733  1FAF  0021               	movlb	1	; select bank1
  8734  1FB0  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8735                           
  8736                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8737  1FB1  0020               	movlb	0	; select bank0
  8738  1FB2  1E8E               	btfss	14,5	;volatile
  8739  1FB3  2FB7               	goto	l6211
  8740                           
  8741                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8742  1FB4  0021               	movlb	1	; select bank1
  8743  1FB5  1454               	bsf	_SPI0Buffer^(0+128),0
  8744  1FB6  2FBD               	goto	l6213
  8745  1FB7                     l6211:	
  8746                           
  8747                           ;CC2500_B1.c: 249: else
  8748                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8749  1FB7  30FE               	movlw	254
  8750  1FB8  0020               	movlb	0	; select bank0
  8751  1FB9  00A1               	movwf	??_CC2500_ReadByte
  8752  1FBA  0821               	movf	??_CC2500_ReadByte,w
  8753  1FBB  0021               	movlb	1	; select bank1
  8754  1FBC  05D4               	andwf	_SPI0Buffer^(0+128),f
  8755  1FBD                     l6213:	
  8756                           
  8757                           ;CC2500_B1.c: 251: RC3 = 0;
  8758  1FBD  0020               	movlb	0	; select bank0
  8759  1FBE  118E               	bcf	14,3	;volatile
  8760  1FBF  3001               	movlw	1
  8761  1FC0  00A1               	movwf	??_CC2500_ReadByte
  8762  1FC1  0821               	movf	??_CC2500_ReadByte,w
  8763  1FC2  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8764  1FC3  2FA9               	goto	L2
  8765  1FC4                     __end_of_CC2500_ReadByte:	
  8766                           
  8767                           	psect	text39
  8768  1E3B                     __ptext39:	
  8769 ;; *************** function _CC2500_PowerOnInitial *****************
  8770 ;; Defined at:
  8771 ;;		line 126 in file "../src/CC2500_B1.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;		None
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;		None
  8776 ;; Return value:  Size  Location     Type
  8777 ;;		None               void
  8778 ;; Registers used:
  8779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;Total ram usage:        0 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    8
  8792 ;; This function calls:
  8793 ;;		_CC2500_ClearRXFIFO
  8794 ;;		_CC2500_ClearTXFIFO
  8795 ;;		_CC2500_FrequencyCabr
  8796 ;;		_CC2500_InitPATable
  8797 ;;		_CC2500_InitSetREG
  8798 ;;		_CC2500_PowerRST
  8799 ;;		_CC2500_SIDLEMode
  8800 ;; This function is called by:
  8801 ;;		_main
  8802 ;;		_setRF_Main
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           
  8807                           ;psect for function _CC2500_PowerOnInitial
  8808  1E3B                     _CC2500_PowerOnInitial:	
  8809                           
  8810                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8811                           
  8812                           ;incstack = 0
  8813                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8814  1E3B  3194  2414  319E   	fcall	_CC2500_PowerRST
  8815                           
  8816                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8817  1E3E  3187  27D3  319E   	fcall	_CC2500_InitSetREG
  8818                           
  8819                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8820  1E41  3190  201C  319E   	fcall	_CC2500_InitPATable
  8821                           
  8822                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8823  1E44  319B  2377  319E   	fcall	_CC2500_ClearTXFIFO
  8824                           
  8825                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8826  1E47  319B  2373  319E   	fcall	_CC2500_ClearRXFIFO
  8827                           
  8828                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8829  1E4A  319C  248F  319E   	fcall	_CC2500_FrequencyCabr
  8830                           
  8831                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8832  1E4D  319B  237B         	fcall	_CC2500_SIDLEMode
  8833  1E4F  0008               	return
  8834  1E50                     __end_of_CC2500_PowerOnInitial:	
  8835                           
  8836                           	psect	text40
  8837  1B7B                     __ptext40:	
  8838 ;; *************** function _CC2500_SIDLEMode *****************
  8839 ;; Defined at:
  8840 ;;		line 216 in file "../src/CC2500_B1.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;		None
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;		None
  8845 ;; Return value:  Size  Location     Type
  8846 ;;		None               void
  8847 ;; Registers used:
  8848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;Total ram usage:        0 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    7
  8861 ;; This function calls:
  8862 ;;		_CC2500_WriteCommand
  8863 ;; This function is called by:
  8864 ;;		_CC2500_PowerOnInitial
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           
  8869                           ;psect for function _CC2500_SIDLEMode
  8870  1B7B                     _CC2500_SIDLEMode:	
  8871                           
  8872                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8873                           
  8874                           ;incstack = 0
  8875                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8876  1B7B  3036               	movlw	54
  8877  1B7C  319F  2756         	fcall	_CC2500_WriteCommand
  8878  1B7E  0008               	return
  8879  1B7F                     __end_of_CC2500_SIDLEMode:	
  8880                           
  8881                           	psect	text41
  8882  1414                     __ptext41:	
  8883 ;; *************** function _CC2500_PowerRST *****************
  8884 ;; Defined at:
  8885 ;;		line 139 in file "../src/CC2500_B1.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;		None
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;		None
  8890 ;; Return value:  Size  Location     Type
  8891 ;;		None               void
  8892 ;; Registers used:
  8893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;Total ram usage:        1 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:    6
  8906 ;; This function calls:
  8907 ;;		_CC2500_WriteByte
  8908 ;;		_DelayTime_1us
  8909 ;;		_RF_Timeout_Counter
  8910 ;;		_setRF_TimeoutCleared
  8911 ;; This function is called by:
  8912 ;;		_CC2500_PowerOnInitial
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           
  8917                           ;psect for function _CC2500_PowerRST
  8918  1414                     _CC2500_PowerRST:	
  8919                           
  8920                           ;CC2500_B1.c: 140: RC3 = 0;
  8921                           
  8922                           ;incstack = 0
  8923                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8924  1414  0020               	movlb	0	; select bank0
  8925  1415  118E               	bcf	14,3	;volatile
  8926                           
  8927                           ;CC2500_B1.c: 141: RC4 = 0;
  8928  1416  120E               	bcf	14,4	;volatile
  8929                           
  8930                           ;CC2500_B1.c: 142: RC0 = 1;
  8931  1417  140E               	bsf	14,0	;volatile
  8932                           
  8933                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8934  1418  300A               	movlw	10
  8935  1419  00A1               	movwf	DelayTime_1us@count
  8936  141A  3000               	movlw	0
  8937  141B  00A2               	movwf	DelayTime_1us@count+1
  8938  141C  3190  20E4  3194   	fcall	_DelayTime_1us
  8939                           
  8940                           ;CC2500_B1.c: 144: RC0 = 0;
  8941  141F  0020               	movlb	0	; select bank0
  8942  1420  100E               	bcf	14,0	;volatile
  8943                           
  8944                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8945  1421  300A               	movlw	10
  8946  1422  00A1               	movwf	DelayTime_1us@count
  8947  1423  3000               	movlw	0
  8948  1424  00A2               	movwf	DelayTime_1us@count+1
  8949  1425  3190  20E4  3194   	fcall	_DelayTime_1us
  8950                           
  8951                           ;CC2500_B1.c: 146: RC0 = 1;
  8952  1428  0020               	movlb	0	; select bank0
  8953  1429  140E               	bsf	14,0	;volatile
  8954                           
  8955                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8956  142A  3028               	movlw	40
  8957  142B  00A1               	movwf	DelayTime_1us@count
  8958  142C  3000               	movlw	0
  8959  142D  00A2               	movwf	DelayTime_1us@count+1
  8960  142E  3190  20E4  3194   	fcall	_DelayTime_1us
  8961                           
  8962                           ;CC2500_B1.c: 148: RC0 = 0;
  8963  1431  0020               	movlb	0	; select bank0
  8964  1432  100E               	bcf	14,0	;volatile
  8965                           
  8966                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8967  1433  3030               	movlw	48
  8968  1434  00A7               	movwf	??_CC2500_PowerRST
  8969  1435  0827               	movf	??_CC2500_PowerRST,w
  8970  1436  0021               	movlb	1	; select bank1
  8971  1437  00D4               	movwf	_SPI0Buffer^(0+128)
  8972                           
  8973                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8974  1438  2C3C               	goto	l6345
  8975  1439                     l6343:	
  8976                           
  8977                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8978  1439  319E  2626  3194   	fcall	_RF_Timeout_Counter
  8979  143C                     l6345:	
  8980  143C  0020               	movlb	0	; select bank0
  8981  143D  1E8E               	btfss	14,5	;volatile
  8982  143E  2C42               	goto	l6349
  8983  143F  0021               	movlb	1	; select bank1
  8984  1440  1F21               	btfss	(_RF1^(0+128)+1),6
  8985  1441  2C39               	goto	l6343
  8986  1442                     l6349:	
  8987                           
  8988                           ;CC2500_B1.c: 152: };
  8989                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8990  1442  319B  236F  3194   	fcall	_setRF_TimeoutCleared
  8991                           
  8992                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8993  1445  319F  2709  3194   	fcall	_CC2500_WriteByte
  8994                           
  8995                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8996  1448  2C4C               	goto	l6355
  8997  1449                     l6353:	
  8998                           
  8999                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9000  1449  319E  2626  3194   	fcall	_RF_Timeout_Counter
  9001  144C                     l6355:	
  9002  144C  0020               	movlb	0	; select bank0
  9003  144D  1E8E               	btfss	14,5	;volatile
  9004  144E  2C52               	goto	l6359
  9005  144F  0021               	movlb	1	; select bank1
  9006  1450  1F21               	btfss	(_RF1^(0+128)+1),6
  9007  1451  2C49               	goto	l6353
  9008  1452                     l6359:	
  9009                           
  9010                           ;CC2500_B1.c: 157: };
  9011                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9012  1452  319B  236F         	fcall	_setRF_TimeoutCleared
  9013                           
  9014                           ;CC2500_B1.c: 159: RC4 = 0;
  9015  1454  0020               	movlb	0	; select bank0
  9016  1455  120E               	bcf	14,4	;volatile
  9017                           
  9018                           ;CC2500_B1.c: 160: RC0 = 1;
  9019  1456  140E               	bsf	14,0	;volatile
  9020  1457  0008               	return
  9021  1458                     __end_of_CC2500_PowerRST:	
  9022                           
  9023                           	psect	text42
  9024  07D3                     __ptext42:	
  9025 ;; *************** function _CC2500_InitSetREG *****************
  9026 ;; Defined at:
  9027 ;;		line 166 in file "../src/CC2500_B1.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;		None
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9032 ;;  temp2           1    8[BANK0 ] unsigned char 
  9033 ;;  temp1           1    7[BANK0 ] unsigned char 
  9034 ;; Return value:  Size  Location     Type
  9035 ;;		None               void
  9036 ;; Registers used:
  9037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;Total ram usage:        4 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    7
  9050 ;; This function calls:
  9051 ;;		_CC2500_WriteREG
  9052 ;; This function is called by:
  9053 ;;		_CC2500_PowerOnInitial
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           
  9058                           ;psect for function _CC2500_InitSetREG
  9059  07D3                     _CC2500_InitSetREG:	
  9060                           
  9061                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9062                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9063                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9067  07D3  0020               	movlb	0	; select bank0
  9068  07D4  01A9               	clrf	CC2500_InitSetREG@loop_c
  9069  07D5                     L3:	
  9070  07D5  302F               	movlw	47
  9071  07D6  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9072  07D7  1803               	btfsc	3,0
  9073  07D8  0008               	return
  9074                           
  9075                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9076  07D9  0829               	movf	CC2500_InitSetREG@loop_c,w
  9077  07DA  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9078  07DB  0084               	movwf	4
  9079  07DC  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9080  07DD  1803               	skipnc
  9081  07DE  3E01               	addlw	1
  9082  07DF  0085               	movwf	5
  9083  07E0  0800               	movf	0,w	;code access
  9084  07E1  00A6               	movwf	??_CC2500_InitSetREG
  9085  07E2  0826               	movf	??_CC2500_InitSetREG,w
  9086  07E3  00A7               	movwf	CC2500_InitSetREG@temp1
  9087                           
  9088                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9089  07E4  0829               	movf	CC2500_InitSetREG@loop_c,w
  9090  07E5  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9091  07E6  0084               	movwf	4
  9092  07E7  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9093  07E8  1803               	skipnc
  9094  07E9  3E01               	addlw	1
  9095  07EA  0085               	movwf	5
  9096  07EB  0800               	movf	0,w	;code access
  9097  07EC  00A6               	movwf	??_CC2500_InitSetREG
  9098  07ED  0826               	movf	??_CC2500_InitSetREG,w
  9099  07EE  00A8               	movwf	CC2500_InitSetREG@temp2
  9100                           
  9101                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9102  07EF  0828               	movf	CC2500_InitSetREG@temp2,w
  9103  07F0  00A6               	movwf	??_CC2500_InitSetREG
  9104  07F1  0826               	movf	??_CC2500_InitSetREG,w
  9105  07F2  00A3               	movwf	CC2500_WriteREG@value
  9106  07F3  0827               	movf	CC2500_InitSetREG@temp1,w
  9107  07F4  3188  2000  3187   	fcall	_CC2500_WriteREG
  9108  07F7  3001               	movlw	1
  9109  07F8  0020               	movlb	0	; select bank0
  9110  07F9  00A6               	movwf	??_CC2500_InitSetREG
  9111  07FA  0826               	movf	??_CC2500_InitSetREG,w
  9112  07FB  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9113  07FC  2FD5               	goto	L3
  9114  07FD                     __end_of_CC2500_InitSetREG:	
  9115                           
  9116                           	psect	text43
  9117  101C                     __ptext43:	
  9118 ;; *************** function _CC2500_InitPATable *****************
  9119 ;; Defined at:
  9120 ;;		line 181 in file "../src/CC2500_B1.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;		None
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9125 ;;  temp            1    7[BANK0 ] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;		None               void
  9128 ;; Registers used:
  9129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;Total ram usage:        3 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    7
  9142 ;; This function calls:
  9143 ;;		_CC2500_WriteREG
  9144 ;; This function is called by:
  9145 ;;		_CC2500_PowerOnInitial
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _CC2500_InitPATable
  9151  101C                     _CC2500_InitPATable:	
  9152                           
  9153                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9154                           ;CC2500_B1.c: 183: unsigned char temp;
  9155                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9156                           
  9157                           ;incstack = 0
  9158                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9159  101C  0020               	movlb	0	; select bank0
  9160  101D  01A8               	clrf	CC2500_InitPATable@loop_d
  9161  101E                     L4:	
  9162  101E  3008               	movlw	8
  9163  101F  0228               	subwf	CC2500_InitPATable@loop_d,w
  9164  1020  1803               	btfsc	3,0
  9165  1021  0008               	return
  9166                           
  9167                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9168  1022  0828               	movf	CC2500_InitPATable@loop_d,w
  9169  1023  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9170  1024  0084               	movwf	4
  9171  1025  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9172  1026  1803               	skipnc
  9173  1027  3E01               	addlw	1
  9174  1028  0085               	movwf	5
  9175  1029  0800               	movf	0,w	;code access
  9176  102A  00A6               	movwf	??_CC2500_InitPATable
  9177  102B  0826               	movf	??_CC2500_InitPATable,w
  9178  102C  00A7               	movwf	CC2500_InitPATable@temp
  9179                           
  9180                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9181  102D  0827               	movf	CC2500_InitPATable@temp,w
  9182  102E  00A6               	movwf	??_CC2500_InitPATable
  9183  102F  0826               	movf	??_CC2500_InitPATable,w
  9184  1030  00A3               	movwf	CC2500_WriteREG@value
  9185  1031  303E               	movlw	62
  9186  1032  3188  2000  3190   	fcall	_CC2500_WriteREG
  9187  1035  3001               	movlw	1
  9188  1036  0020               	movlb	0	; select bank0
  9189  1037  00A6               	movwf	??_CC2500_InitPATable
  9190  1038  0826               	movf	??_CC2500_InitPATable,w
  9191  1039  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9192  103A  281E               	goto	L4
  9193  103B                     __end_of_CC2500_InitPATable:	
  9194                           
  9195                           	psect	text44
  9196  0800                     __ptext44:	
  9197 ;; *************** function _CC2500_WriteREG *****************
  9198 ;; Defined at:
  9199 ;;		line 258 in file "../src/CC2500_B1.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  w_addr          1    wreg     unsigned char 
  9202 ;;  value           1    3[BANK0 ] unsigned char 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        3 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    6
  9221 ;; This function calls:
  9222 ;;		_CC2500_WriteByte
  9223 ;;		_RF_Timeout_Counter
  9224 ;;		_setRF_TimeoutCleared
  9225 ;; This function is called by:
  9226 ;;		_CC2500_InitSetREG
  9227 ;;		_CC2500_InitPATable
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _CC2500_WriteREG
  9233  0800                     _CC2500_WriteREG:	
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9237                           ;CC2500_WriteREG@w_addr stored from wreg
  9238  0800  0020               	movlb	0	; select bank0
  9239  0801  00A5               	movwf	CC2500_WriteREG@w_addr
  9240                           
  9241                           ;CC2500_B1.c: 259: RC0 = 0;
  9242  0802  100E               	bcf	14,0	;volatile
  9243                           
  9244                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9245  0803  0825               	movf	CC2500_WriteREG@w_addr,w
  9246  0804  00A4               	movwf	??_CC2500_WriteREG
  9247  0805  0824               	movf	??_CC2500_WriteREG,w
  9248  0806  0021               	movlb	1	; select bank1
  9249  0807  00D4               	movwf	_SPI0Buffer^(0+128)
  9250                           
  9251                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9252  0808  280C               	goto	l6235
  9253  0809                     l6233:	
  9254                           
  9255                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9256  0809  319E  2626  3188   	fcall	_RF_Timeout_Counter
  9257  080C                     l6235:	
  9258  080C  0020               	movlb	0	; select bank0
  9259  080D  1E8E               	btfss	14,5	;volatile
  9260  080E  2812               	goto	l6239
  9261  080F  0021               	movlb	1	; select bank1
  9262  0810  1F21               	btfss	(_RF1^(0+128)+1),6
  9263  0811  2809               	goto	l6233
  9264  0812                     l6239:	
  9265                           
  9266                           ;CC2500_B1.c: 263: };
  9267                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9268  0812  319B  236F  3188   	fcall	_setRF_TimeoutCleared
  9269                           
  9270                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9271  0815  319F  2709  3188   	fcall	_CC2500_WriteByte
  9272                           
  9273                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9274  0818  0020               	movlb	0	; select bank0
  9275  0819  0823               	movf	CC2500_WriteREG@value,w
  9276  081A  00A4               	movwf	??_CC2500_WriteREG
  9277  081B  0824               	movf	??_CC2500_WriteREG,w
  9278  081C  0021               	movlb	1	; select bank1
  9279  081D  00D4               	movwf	_SPI0Buffer^(0+128)
  9280                           
  9281                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9282  081E  319F  2709         	fcall	_CC2500_WriteByte
  9283                           
  9284                           ;CC2500_B1.c: 269: RC0 = 1;
  9285  0820  0020               	movlb	0	; select bank0
  9286  0821  140E               	bsf	14,0	;volatile
  9287  0822  0008               	return
  9288  0823                     __end_of_CC2500_WriteREG:	
  9289                           
  9290                           	psect	text45
  9291  1C8F                     __ptext45:	
  9292 ;; *************** function _CC2500_FrequencyCabr *****************
  9293 ;; Defined at:
  9294 ;;		line 208 in file "../src/CC2500_B1.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;		None
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;		None
  9299 ;; Return value:  Size  Location     Type
  9300 ;;		None               void
  9301 ;; Registers used:
  9302 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;Total ram usage:        0 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; Hardware stack levels required when called:    7
  9315 ;; This function calls:
  9316 ;;		_CC2500_WriteCommand
  9317 ;;		_DelayTime_1us
  9318 ;; This function is called by:
  9319 ;;		_CC2500_PowerOnInitial
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function _CC2500_FrequencyCabr
  9325  1C8F                     _CC2500_FrequencyCabr:	
  9326                           
  9327                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9328                           
  9329                           ;incstack = 0
  9330                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9331  1C8F  3033               	movlw	51
  9332  1C90  319F  2756  319C   	fcall	_CC2500_WriteCommand
  9333                           
  9334                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9335  1C93  30E8               	movlw	232
  9336  1C94  0020               	movlb	0	; select bank0
  9337  1C95  00A1               	movwf	DelayTime_1us@count
  9338  1C96  3003               	movlw	3
  9339  1C97  00A2               	movwf	DelayTime_1us@count+1
  9340  1C98  3190  20E4         	fcall	_DelayTime_1us
  9341  1C9A  0008               	return
  9342  1C9B                     __end_of_CC2500_FrequencyCabr:	
  9343                           
  9344                           	psect	text46
  9345  10E4                     __ptext46:	
  9346 ;; *************** function _DelayTime_1us *****************
  9347 ;; Defined at:
  9348 ;;		line 327 in file "../src/CC2500_B1.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  count           2    1[BANK0 ] int 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;  j               2    5[BANK0 ] unsigned int 
  9353 ;;  i               2    3[BANK0 ] unsigned int 
  9354 ;; Return value:  Size  Location     Type
  9355 ;;		None               void
  9356 ;; Registers used:
  9357 ;;		wreg, status,2
  9358 ;; Tracked objects:
  9359 ;;		On entry : 0/0
  9360 ;;		On exit  : 0/0
  9361 ;;		Unchanged: 0/0
  9362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;Total ram usage:        6 bytes
  9368 ;; Hardware stack levels used:    1
  9369 ;; Hardware stack levels required when called:    5
  9370 ;; This function calls:
  9371 ;;		Nothing
  9372 ;; This function is called by:
  9373 ;;		_CC2500_PowerRST
  9374 ;;		_CC2500_FrequencyCabr
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           
  9379                           ;psect for function _DelayTime_1us
  9380  10E4                     _DelayTime_1us:	
  9381                           
  9382                           ;CC2500_B1.c: 328: unsigned int i, j;
  9383                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9384                           
  9385                           ;incstack = 0
  9386                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9387  10E4  3001               	movlw	1
  9388  10E5  0020               	movlb	0	; select bank0
  9389  10E6  00A3               	movwf	DelayTime_1us@i
  9390  10E7  3000               	movlw	0
  9391  10E8  00A4               	movwf	DelayTime_1us@i+1
  9392  10E9                     l347:	
  9393  10E9  0822               	movf	DelayTime_1us@count+1,w
  9394  10EA  0224               	subwf	DelayTime_1us@i+1,w
  9395  10EB  1D03               	skipz
  9396  10EC  28EF               	goto	u5345
  9397  10ED  0821               	movf	DelayTime_1us@count,w
  9398  10EE  0223               	subwf	DelayTime_1us@i,w
  9399  10EF                     u5345:	
  9400  10EF  1803               	btfsc	3,0
  9401  10F0  0008               	return
  9402                           
  9403                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9404  10F1  01A5               	clrf	DelayTime_1us@j
  9405  10F2  01A6               	clrf	DelayTime_1us@j+1
  9406  10F3  3000               	movlw	0
  9407  10F4  0226               	subwf	DelayTime_1us@j+1,w
  9408  10F5  3002               	movlw	2
  9409  10F6  1903               	skipnz
  9410  10F7  0225               	subwf	DelayTime_1us@j,w
  9411  10F8  1803               	btfsc	3,0
  9412  10F9  2905               	goto	l6227
  9413  10FA                     l6225:	
  9414  10FA  3001               	movlw	1
  9415  10FB  07A5               	addwf	DelayTime_1us@j,f
  9416  10FC  3000               	movlw	0
  9417  10FD  3DA6               	addwfc	DelayTime_1us@j+1,f
  9418  10FE  3000               	movlw	0
  9419  10FF  0226               	subwf	DelayTime_1us@j+1,w
  9420  1100  3002               	movlw	2
  9421  1101  1903               	skipnz
  9422  1102  0225               	subwf	DelayTime_1us@j,w
  9423  1103  1C03               	skipc
  9424  1104  28FA               	goto	l6225
  9425  1105                     l6227:	
  9426  1105  3001               	movlw	1
  9427  1106  07A3               	addwf	DelayTime_1us@i,f
  9428  1107  3000               	movlw	0
  9429  1108  3DA4               	addwfc	DelayTime_1us@i+1,f
  9430  1109  28E9               	goto	l347
  9431  110A                     __end_of_DelayTime_1us:	
  9432                           
  9433                           	psect	text47
  9434  1B77                     __ptext47:	
  9435 ;; *************** function _CC2500_ClearTXFIFO *****************
  9436 ;; Defined at:
  9437 ;;		line 194 in file "../src/CC2500_B1.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;		None
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;		None
  9442 ;; Return value:  Size  Location     Type
  9443 ;;		None               void
  9444 ;; Registers used:
  9445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:        0 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    7
  9458 ;; This function calls:
  9459 ;;		_CC2500_WriteCommand
  9460 ;; This function is called by:
  9461 ;;		_CC2500_PowerOnInitial
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function _CC2500_ClearTXFIFO
  9467  1B77                     _CC2500_ClearTXFIFO:	
  9468                           
  9469                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9473  1B77  303B               	movlw	59
  9474  1B78  319F  2756         	fcall	_CC2500_WriteCommand
  9475  1B7A  0008               	return
  9476  1B7B                     __end_of_CC2500_ClearTXFIFO:	
  9477                           
  9478                           	psect	text48
  9479  1B73                     __ptext48:	
  9480 ;; *************** function _CC2500_ClearRXFIFO *****************
  9481 ;; Defined at:
  9482 ;;		line 201 in file "../src/CC2500_B1.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    7
  9503 ;; This function calls:
  9504 ;;		_CC2500_WriteCommand
  9505 ;; This function is called by:
  9506 ;;		_CC2500_PowerOnInitial
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _CC2500_ClearRXFIFO
  9512  1B73                     _CC2500_ClearRXFIFO:	
  9513                           
  9514                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9518  1B73  303A               	movlw	58
  9519  1B74  319F  2756         	fcall	_CC2500_WriteCommand
  9520  1B76  0008               	return
  9521  1B77                     __end_of_CC2500_ClearRXFIFO:	
  9522                           
  9523                           	psect	text49
  9524  1F56                     __ptext49:	
  9525 ;; *************** function _CC2500_WriteCommand *****************
  9526 ;; Defined at:
  9527 ;;		line 292 in file "../src/CC2500_B1.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;  command         1    wreg     unsigned char 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  command         1    4[BANK0 ] unsigned char 
  9532 ;; Return value:  Size  Location     Type
  9533 ;;		None               void
  9534 ;; Registers used:
  9535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : 0/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;Total ram usage:        2 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    6
  9548 ;; This function calls:
  9549 ;;		_CC2500_WriteByte
  9550 ;;		_RF_Timeout_Counter
  9551 ;;		_setRF_TimeoutCleared
  9552 ;; This function is called by:
  9553 ;;		_CC2500_TxData
  9554 ;;		_CC2500_RxData
  9555 ;;		_CC2500_ClearTXFIFO
  9556 ;;		_CC2500_ClearRXFIFO
  9557 ;;		_CC2500_FrequencyCabr
  9558 ;;		_CC2500_SIDLEMode
  9559 ;;		_setRF_Main
  9560 ;;		_RF_RxDisable
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _CC2500_WriteCommand
  9566  1F56                     _CC2500_WriteCommand:	
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9570                           ;CC2500_WriteCommand@command stored from wreg
  9571  1F56  0020               	movlb	0	; select bank0
  9572  1F57  00A4               	movwf	CC2500_WriteCommand@command
  9573                           
  9574                           ;CC2500_B1.c: 293: RC0 = 0;
  9575  1F58  100E               	bcf	14,0	;volatile
  9576                           
  9577                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9578  1F59  0824               	movf	CC2500_WriteCommand@command,w
  9579  1F5A  00A3               	movwf	??_CC2500_WriteCommand
  9580  1F5B  0823               	movf	??_CC2500_WriteCommand,w
  9581  1F5C  0021               	movlb	1	; select bank1
  9582  1F5D  00D4               	movwf	_SPI0Buffer^(0+128)
  9583                           
  9584                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9585  1F5E  2F62               	goto	l6189
  9586  1F5F                     l6187:	
  9587                           
  9588                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9589  1F5F  319E  2626  319F   	fcall	_RF_Timeout_Counter
  9590  1F62                     l6189:	
  9591  1F62  0020               	movlb	0	; select bank0
  9592  1F63  1E8E               	btfss	14,5	;volatile
  9593  1F64  2F68               	goto	l6193
  9594  1F65  0021               	movlb	1	; select bank1
  9595  1F66  1F21               	btfss	(_RF1^(0+128)+1),6
  9596  1F67  2F5F               	goto	l6187
  9597  1F68                     l6193:	
  9598                           
  9599                           ;CC2500_B1.c: 298: };
  9600                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9601  1F68  319B  236F  319F   	fcall	_setRF_TimeoutCleared
  9602                           
  9603                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9604  1F6B  319F  2709         	fcall	_CC2500_WriteByte
  9605                           
  9606                           ;CC2500_B1.c: 302: RC0 = 1;
  9607  1F6D  0020               	movlb	0	; select bank0
  9608  1F6E  140E               	bsf	14,0	;volatile
  9609  1F6F  0008               	return
  9610  1F70                     __end_of_CC2500_WriteCommand:	
  9611                           
  9612                           	psect	text50
  9613  1B6F                     __ptext50:	
  9614 ;; *************** function _setRF_TimeoutCleared *****************
  9615 ;; Defined at:
  9616 ;;		line 149 in file "../src/RF_Control_B1.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;		None               void
  9623 ;; Registers used:
  9624 ;;		status,2
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        0 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    5
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_CC2500_TxData
  9641 ;;		_CC2500_RxData
  9642 ;;		_CC2500_PowerRST
  9643 ;;		_CC2500_WriteREG
  9644 ;;		_CC2500_WriteCommand
  9645 ;;		_CC2500_ReadStatus
  9646 ;;		_CC2500_ReadREG
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _setRF_TimeoutCleared
  9652  1B6F                     _setRF_TimeoutCleared:	
  9653                           
  9654                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9658  1B6F  0021               	movlb	1	; select bank1
  9659  1B70  01AC               	clrf	(_RF1^(0+128)+12)
  9660  1B71  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9661  1B72  0008               	return
  9662  1B73                     __end_of_setRF_TimeoutCleared:	
  9663                           
  9664                           	psect	text51
  9665  1E26                     __ptext51:	
  9666 ;; *************** function _RF_Timeout_Counter *****************
  9667 ;; Defined at:
  9668 ;;		line 141 in file "../src/RF_Control_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    5
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_CC2500_TxData
  9693 ;;		_CC2500_RxData
  9694 ;;		_CC2500_PowerRST
  9695 ;;		_CC2500_WriteREG
  9696 ;;		_CC2500_WriteCommand
  9697 ;;		_CC2500_ReadStatus
  9698 ;;		_CC2500_ReadREG
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function _RF_Timeout_Counter
  9704  1E26                     _RF_Timeout_Counter:	
  9705                           
  9706                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9710  1E26  3001               	movlw	1
  9711  1E27  0021               	movlb	1	; select bank1
  9712  1E28  07AC               	addwf	(_RF1^(0+128)+12),f
  9713  1E29  3000               	movlw	0
  9714  1E2A  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9715                           
  9716                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9717  1E2B  300C               	movlw	12
  9718  1E2C  3EA0               	addlw	_RF1& (0+255)
  9719  1E2D  0086               	movwf	6
  9720  1E2E  0187               	clrf	7
  9721  1E2F  3F40               	moviw [0]fsr1
  9722  1E30  3AA8               	xorlw	168
  9723  1E31  1D03               	skipz
  9724  1E32  2E35               	goto	u5075
  9725  1E33  3F41               	moviw [1]fsr1
  9726  1E34  3A61               	xorlw	97
  9727  1E35                     u5075:	
  9728  1E35  1D03               	skipz
  9729  1E36  0008               	return
  9730                           
  9731                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9732  1E37  01AC               	clrf	(_RF1^(0+128)+12)
  9733  1E38  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9734                           
  9735                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9736  1E39  1721               	bsf	(_RF1^(0+128)+1),6
  9737  1E3A  0008               	return
  9738  1E3B                     __end_of_RF_Timeout_Counter:	
  9739                           
  9740                           	psect	text52
  9741  1F09                     __ptext52:	
  9742 ;; *************** function _CC2500_WriteByte *****************
  9743 ;; Defined at:
  9744 ;;		line 226 in file "../src/CC2500_B1.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;		None
  9747 ;; Auto vars:     Size  Location     Type
  9748 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9749 ;; Return value:  Size  Location     Type
  9750 ;;		None               void
  9751 ;; Registers used:
  9752 ;;		wreg, status,2, status,0
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:        2 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    5
  9765 ;; This function calls:
  9766 ;;		Nothing
  9767 ;; This function is called by:
  9768 ;;		_CC2500_TxData
  9769 ;;		_CC2500_RxData
  9770 ;;		_CC2500_PowerRST
  9771 ;;		_CC2500_WriteREG
  9772 ;;		_CC2500_WriteCommand
  9773 ;;		_CC2500_ReadStatus
  9774 ;;		_CC2500_ReadREG
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _CC2500_WriteByte
  9780  1F09                     _CC2500_WriteByte:	
  9781                           
  9782                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9783                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9784                           
  9785                           ;incstack = 0
  9786                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9787  1F09  0020               	movlb	0	; select bank0
  9788  1F0A  01A2               	clrf	CC2500_WriteByte@loop_a
  9789  1F0B                     L5:	
  9790  1F0B  3008               	movlw	8
  9791  1F0C  0222               	subwf	CC2500_WriteByte@loop_a,w
  9792  1F0D  1803               	btfsc	3,0
  9793  1F0E  0008               	return
  9794                           
  9795                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9796  1F0F  0021               	movlb	1	; select bank1
  9797  1F10  1FD4               	btfss	_SPI0Buffer^(0+128),7
  9798  1F11  2F15               	goto	l303
  9799                           
  9800                           ;CC2500_B1.c: 230: RC4 = 1;
  9801  1F12  0020               	movlb	0	; select bank0
  9802  1F13  160E               	bsf	14,4	;volatile
  9803  1F14  2F17               	goto	l304
  9804  1F15                     l303:	
  9805                           
  9806                           ;CC2500_B1.c: 231: else
  9807                           ;CC2500_B1.c: 232: RC4 = 0;
  9808  1F15  0020               	movlb	0	; select bank0
  9809  1F16  120E               	bcf	14,4	;volatile
  9810  1F17                     l304:	
  9811                           
  9812                           ;CC2500_B1.c: 233: RC3 = 1;
  9813  1F17  158E               	bsf	14,3	;volatile
  9814                           
  9815                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9816  1F18  1003               	clrc
  9817  1F19  0021               	movlb	1	; select bank1
  9818  1F1A  0DD4               	rlf	_SPI0Buffer^(0+128),f
  9819                           
  9820                           ;CC2500_B1.c: 235: RC3 = 0;
  9821  1F1B  0020               	movlb	0	; select bank0
  9822  1F1C  118E               	bcf	14,3	;volatile
  9823  1F1D  3001               	movlw	1
  9824  1F1E  00A1               	movwf	??_CC2500_WriteByte
  9825  1F1F  0821               	movf	??_CC2500_WriteByte,w
  9826  1F20  07A2               	addwf	CC2500_WriteByte@loop_a,f
  9827  1F21  2F0B               	goto	L5
  9828  1F22                     __end_of_CC2500_WriteByte:	
  9829                           
  9830                           	psect	text53
  9831  1B52                     __ptext53:	
  9832 ;; *************** function _RF_Initialization *****************
  9833 ;; Defined at:
  9834 ;;		line 9 in file "../src/RF_Control_B1.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;		None               void
  9841 ;; Registers used:
  9842 ;;		wreg, status,2, status,0, pclath, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    6
  9855 ;; This function calls:
  9856 ;;		_setRF_Initialization
  9857 ;; This function is called by:
  9858 ;;		_main
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           
  9863                           ;psect for function _RF_Initialization
  9864  1B52                     _RF_Initialization:	
  9865                           
  9866                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9867                           
  9868                           ;incstack = 0
  9869                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9870  1B52  319C  2418         	fcall	_setRF_Initialization
  9871  1B54  0008               	return
  9872  1B55                     __end_of_RF_Initialization:	
  9873                           
  9874                           	psect	text54
  9875  1C18                     __ptext54:	
  9876 ;; *************** function _setRF_Initialization *****************
  9877 ;; Defined at:
  9878 ;;		line 17 in file "../src/RF_Control_B1.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;		None
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;		None
  9883 ;; Return value:  Size  Location     Type
  9884 ;;		None               void
  9885 ;; Registers used:
  9886 ;;		wreg
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;Total ram usage:        1 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    5
  9899 ;; This function calls:
  9900 ;;		Nothing
  9901 ;; This function is called by:
  9902 ;;		_RF_Initialization
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function _setRF_Initialization
  9908  1C18                     _setRF_Initialization:	
  9909                           
  9910                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in _setRF_Initialization: [wreg]
  9914  1C18  3015               	movlw	21
  9915  1C19  0020               	movlb	0	; select bank0
  9916  1C1A  00A1               	movwf	??_setRF_Initialization
  9917  1C1B  0821               	movf	??_setRF_Initialization,w
  9918  1C1C  0021               	movlb	1	; select bank1
  9919  1C1D  00D7               	movwf	_Tx_Length^(0+128)
  9920                           
  9921                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9922  1C1E  30C8               	movlw	200
  9923  1C1F  00A7               	movwf	(_RF1^(0+128)+7)
  9924  1C20  3000               	movlw	0
  9925  1C21  00A8               	movwf	(_RF1^(0+128)+8)
  9926  1C22  0008               	return
  9927  1C23                     __end_of_setRF_Initialization:	
  9928                           
  9929                           	psect	text55
  9930  1D8F                     __ptext55:	
  9931 ;; *************** function _Mcu_Initialization *****************
  9932 ;; Defined at:
  9933 ;;		line 30 in file "../src/MCU_B1.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;		None
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;		None
  9938 ;; Return value:  Size  Location     Type
  9939 ;;		None               void
  9940 ;; Registers used:
  9941 ;;		wreg, status,2, status,0, pclath, cstack
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;Total ram usage:        0 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    6
  9954 ;; This function calls:
  9955 ;;		_ADC_Set
  9956 ;;		_Fosc_Set
  9957 ;;		_IOC_Set
  9958 ;;		_IO_Set
  9959 ;;		_TMR1_Set
  9960 ;;		_WDT_Set
  9961 ;; This function is called by:
  9962 ;;		_main
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function _Mcu_Initialization
  9968  1D8F                     _Mcu_Initialization:	
  9969                           
  9970                           ;MCU_B1.c: 32: Fosc_Set();
  9971                           
  9972                           ;incstack = 0
  9973                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9974  1D8F  319B  236B  319D   	fcall	_Fosc_Set
  9975                           
  9976                           ;MCU_B1.c: 34: IO_Set();
  9977  1D92  319F  273C  319D   	fcall	_IO_Set
  9978                           
  9979                           ;MCU_B1.c: 36: ;;
  9980                           ;MCU_B1.c: 38: TMR1_Set();
  9981  1D95  319C  2483  319D   	fcall	_TMR1_Set
  9982                           
  9983                           ;MCU_B1.c: 40: ADC_Set();
  9984  1D98  319B  23A1  319D   	fcall	_ADC_Set
  9985                           
  9986                           ;MCU_B1.c: 42: ;;
  9987                           ;MCU_B1.c: 44: ;;
  9988                           ;MCU_B1.c: 46: IOC_Set();
  9989  1D9B  319C  2402  319D   	fcall	_IOC_Set
  9990                           
  9991                           ;MCU_B1.c: 48: ;;
  9992                           ;MCU_B1.c: 50: ;;
  9993                           ;MCU_B1.c: 52: WDT_Set();
  9994  1D9E  319C  240D         	fcall	_WDT_Set
  9995  1DA0  0008               	return
  9996  1DA1                     __end_of_Mcu_Initialization:	
  9997                           
  9998                           	psect	text56
  9999  1C0D                     __ptext56:	
 10000 ;; *************** function _WDT_Set *****************
 10001 ;; Defined at:
 10002 ;;		line 1093 in file "../src/MCU_B1.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;		None
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;		None
 10007 ;; Return value:  Size  Location     Type
 10008 ;;		None               void
 10009 ;; Registers used:
 10010 ;;		wreg
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;Total ram usage:        1 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    5
 10023 ;; This function calls:
 10024 ;;		Nothing
 10025 ;; This function is called by:
 10026 ;;		_Mcu_Initialization
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _WDT_Set
 10032  1C0D                     _WDT_Set:	
 10033                           
 10034                           ;MCU_B1.c: 1100: WDTCON = 0b00010111;;
 10035                           
 10036                           ;incstack = 0
 10037                           ; Regs used in _WDT_Set: [wreg]
 10038  1C0D  3017               	movlw	23
 10039  1C0E  0021               	movlb	1	; select bank1
 10040  1C0F  0097               	movwf	23	;volatile
 10041                           
 10042                           ;MCU_B1.c: 1102: WDT.Enable = 1;
 10043  1C10  1449               	bsf	_WDT^(0+128),0
 10044                           
 10045                           ;MCU_B1.c: 1103: WDT.Timer = 10;
 10046  1C11  300A               	movlw	10
 10047  1C12  0020               	movlb	0	; select bank0
 10048  1C13  00A1               	movwf	??_WDT_Set
 10049  1C14  0821               	movf	??_WDT_Set,w
 10050  1C15  0021               	movlb	1	; select bank1
 10051  1C16  00CA               	movwf	(_WDT^(0+128)+1)
 10052  1C17  0008               	return
 10053  1C18                     __end_of_WDT_Set:	
 10054                           
 10055                           	psect	text57
 10056  1C83                     __ptext57:	
 10057 ;; *************** function _TMR1_Set *****************
 10058 ;; Defined at:
 10059 ;;		line 226 in file "../src/MCU_B1.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;		None
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;		None
 10064 ;; Return value:  Size  Location     Type
 10065 ;;		None               void
 10066 ;; Registers used:
 10067 ;;		wreg
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;Total ram usage:        0 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    5
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_Mcu_Initialization
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           
 10088                           ;psect for function _TMR1_Set
 10089  1C83                     _TMR1_Set:	
 10090                           
 10091                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10092                           
 10093                           ;incstack = 0
 10094                           ; Regs used in _TMR1_Set: [wreg]
 10095  1C83  3041               	movlw	65
 10096  1C84  0020               	movlb	0	; select bank0
 10097  1C85  0098               	movwf	24	;volatile
 10098                           
 10099                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10100  1C86  30FA               	movlw	250
 10101  1C87  0097               	movwf	23	;volatile
 10102                           
 10103                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10104  1C88  3038               	movlw	56
 10105  1C89  0096               	movwf	22	;volatile
 10106                           
 10107                           ;MCU_B1.c: 230: TMR1IE = 1;
 10108  1C8A  0021               	movlb	1	; select bank1
 10109  1C8B  1411               	bsf	17,0	;volatile
 10110                           
 10111                           ;MCU_B1.c: 231: PEIE = 1;
 10112  1C8C  170B               	bsf	11,6	;volatile
 10113                           
 10114                           ;MCU_B1.c: 232: GIE = 1;
 10115  1C8D  178B               	bsf	11,7	;volatile
 10116  1C8E  0008               	return
 10117  1C8F                     __end_of_TMR1_Set:	
 10118                           
 10119                           	psect	text58
 10120  1F3C                     __ptext58:	
 10121 ;; *************** function _IO_Set *****************
 10122 ;; Defined at:
 10123 ;;		line 60 in file "../src/MCU_B1.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;		None
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;		None               void
 10130 ;; Registers used:
 10131 ;;		wreg, status,2
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;Total ram usage:        0 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    5
 10144 ;; This function calls:
 10145 ;;		Nothing
 10146 ;; This function is called by:
 10147 ;;		_Mcu_Initialization
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           
 10152                           ;psect for function _IO_Set
 10153  1F3C                     _IO_Set:	
 10154                           
 10155                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10156                           
 10157                           ;incstack = 0
 10158                           ; Regs used in _IO_Set: [wreg+status,2]
 10159  1F3C  30F7               	movlw	247
 10160  1F3D  0021               	movlb	1	; select bank1
 10161  1F3E  008C               	movwf	12	;volatile
 10162                           
 10163                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10164  1F3F  3004               	movlw	4
 10165  1F40  008D               	movwf	13	;volatile
 10166                           
 10167                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10168  1F41  3026               	movlw	38
 10169  1F42  008E               	movwf	14	;volatile
 10170                           
 10171                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10172  1F43  0022               	movlb	2	; select bank2
 10173  1F44  018C               	clrf	12	;volatile
 10174                           
 10175                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10176  1F45  018D               	clrf	13	;volatile
 10177                           
 10178                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10179  1F46  018E               	clrf	14	;volatile
 10180                           
 10181                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10182  1F47  300E               	movlw	14
 10183  1F48  0023               	movlb	3	; select bank3
 10184  1F49  008C               	movwf	12	;volatile
 10185                           
 10186                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10187  1F4A  018D               	clrf	13	;volatile
 10188                           
 10189                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10190  1F4B  018E               	clrf	14	;volatile
 10191                           
 10192                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10193  1F4C  30F7               	movlw	247
 10194  1F4D  0020               	movlb	0	; select bank0
 10195  1F4E  008C               	movwf	12	;volatile
 10196                           
 10197                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10198  1F4F  3004               	movlw	4
 10199  1F50  008D               	movwf	13	;volatile
 10200                           
 10201                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10202  1F51  3026               	movlw	38
 10203  1F52  008E               	movwf	14	;volatile
 10204                           
 10205                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10206  1F53  0024               	movlb	4	; select bank4
 10207  1F54  018D               	clrf	13	;volatile
 10208  1F55  0008               	return
 10209  1F56                     __end_of_IO_Set:	
 10210                           
 10211                           	psect	text59
 10212  1C02                     __ptext59:	
 10213 ;; *************** function _IOC_Set *****************
 10214 ;; Defined at:
 10215 ;;		line 379 in file "../src/MCU_B1.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;		None
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;		None
 10220 ;; Return value:  Size  Location     Type
 10221 ;;		None               void
 10222 ;; Registers used:
 10223 ;;		wreg, status,2
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;Total ram usage:        0 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    5
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_Mcu_Initialization
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           
 10244                           ;psect for function _IOC_Set
 10245  1C02                     _IOC_Set:	
 10246                           
 10247                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10248                           
 10249                           ;incstack = 0
 10250                           ; Regs used in _IOC_Set: [wreg+status,2]
 10251  1C02  3004               	movlw	4
 10252  1C03  0027               	movlb	7	; select bank7
 10253  1C04  0094               	movwf	20	;volatile
 10254                           
 10255                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10256  1C05  3004               	movlw	4
 10257  1C06  0095               	movwf	21	;volatile
 10258                           
 10259                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10260  1C07  0196               	clrf	22	;volatile
 10261                           
 10262                           ;MCU_B1.c: 386: IOCIE = 1;
 10263  1C08  158B               	bsf	11,3	;volatile
 10264                           
 10265                           ;MCU_B1.c: 387: IOCIF = 0;
 10266  1C09  100B               	bcf	11,0	;volatile
 10267                           
 10268                           ;MCU_B1.c: 388: PEIE = 1;
 10269  1C0A  170B               	bsf	11,6	;volatile
 10270                           
 10271                           ;MCU_B1.c: 389: GIE = 1;
 10272  1C0B  178B               	bsf	11,7	;volatile
 10273  1C0C  0008               	return
 10274  1C0D                     __end_of_IOC_Set:	
 10275                           
 10276                           	psect	text60
 10277  1B6B                     __ptext60:	
 10278 ;; *************** function _Fosc_Set *****************
 10279 ;; Defined at:
 10280 ;;		line 56 in file "../src/MCU_B1.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;		None
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;		None
 10285 ;; Return value:  Size  Location     Type
 10286 ;;		None               void
 10287 ;; Registers used:
 10288 ;;		wreg
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;Total ram usage:        0 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    5
 10301 ;; This function calls:
 10302 ;;		Nothing
 10303 ;; This function is called by:
 10304 ;;		_Mcu_Initialization
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function _Fosc_Set
 10310  1B6B                     _Fosc_Set:	
 10311                           
 10312                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _Fosc_Set: [wreg]
 10316  1B6B  3078               	movlw	120
 10317  1B6C  0021               	movlb	1	; select bank1
 10318  1B6D  0099               	movwf	25	;volatile
 10319  1B6E  0008               	return
 10320  1B6F                     __end_of_Fosc_Set:	
 10321                           
 10322                           	psect	text61
 10323  1BA1                     __ptext61:	
 10324 ;; *************** function _ADC_Set *****************
 10325 ;; Defined at:
 10326 ;;		line 425 in file "../src/MCU_B1.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;		None               void
 10333 ;; Registers used:
 10334 ;;		wreg
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_Mcu_Initialization
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _ADC_Set
 10356  1BA1                     _ADC_Set:	
 10357                           
 10358                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _ADC_Set: [wreg]
 10362  1BA1  30F3               	movlw	243
 10363  1BA2  0021               	movlb	1	; select bank1
 10364  1BA3  009E               	movwf	30	;volatile
 10365                           
 10366                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10367  1BA4  30C1               	movlw	193
 10368  1BA5  0022               	movlb	2	; select bank2
 10369  1BA6  0097               	movwf	23	;volatile
 10370  1BA7  0008               	return
 10371  1BA8                     __end_of_ADC_Set:	
 10372                           
 10373                           	psect	text62
 10374  004A                     __ptext62:	
 10375 ;; *************** function _Load_Main *****************
 10376 ;; Defined at:
 10377 ;;		line 39 in file "../src/OverLoad_B1.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  i               2   17[BANK0 ] int 
 10382 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10383 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10384 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10385 ;;  error           1   11[BANK0 ] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;		None               void
 10388 ;; Registers used:
 10389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;Total ram usage:       10 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    6
 10402 ;; This function calls:
 10403 ;;		___lwdiv
 10404 ;;		___wmul
 10405 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10406 ;;		_getDimmer_LoadGO
 10407 ;;		_getDimmer_Load_Status
 10408 ;;		_getMain_All_Error_Status
 10409 ;;		_getMain_All_LightsStatus
 10410 ;;		_getMain_Lights_Count
 10411 ;;		_setLoad_AH_AL_Restore
 10412 ;; This function is called by:
 10413 ;;		_main
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function _Load_Main
 10419  004A                     _Load_Main:	
 10420                           
 10421                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10422                           
 10423                           ;incstack = 0
 10424                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10425  004A  3000               	movlw	0
 10426  004B  3191  2161  3180   	fcall	_getMain_All_Error_Status
 10427  004E  0020               	movlb	0	; select bank0
 10428  004F  00A9               	movwf	??_Load_Main
 10429  0050  0829               	movf	??_Load_Main,w
 10430  0051  00AB               	movwf	Load_Main@error
 10431                           
 10432                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10433  0052  01AF               	clrf	Load_Main@Load_RunStatus
 10434  0053  01AE               	clrf	Load_Main@ErrorCountValue
 10435  0054  01B0               	clrf	Load_Main@LightsCount
 10436                           
 10437                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10438  0055  0022               	movlb	2	; select bank2
 10439  0056  1C34               	btfss	_Load^(0+256),0
 10440  0057  29F6               	goto	l1614
 10441                           
 10442                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10443  0058  319B  23E2  3180   	fcall	_getMain_All_LightsStatus
 10444  005B  3800               	iorlw	0
 10445  005C  1D03               	skipz
 10446  005D  2860               	goto	l9367
 10447                           
 10448                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10449  005E  0022               	movlb	2	; select bank2
 10450  005F  2881               	goto	l9385
 10451  0060                     l9367:	
 10452                           ;OverLoad_B1.c: 46: } else {
 10453                           
 10454                           
 10455                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10456  0060  0020               	movlb	0	; select bank0
 10457  0061  08AB               	movf	Load_Main@error,f
 10458  0062  1D03               	skipz
 10459  0063  287E               	goto	l1617
 10460  0064  319D  25D9  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10461  0067  3800               	iorlw	0
 10462  0068  1D03               	skipz
 10463  0069  287E               	goto	l1617
 10464                           
 10465                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10466  006A  0022               	movlb	2	; select bank2
 10467  006B  14B4               	bsf	_Load^(0+256),1
 10468                           
 10469                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10470  006C  319B  23B7  3180   	fcall	_getDimmer_LoadGO
 10471  006F  3A01               	xorlw	1
 10472  0070  1D03               	skipz
 10473  0071  2879               	goto	l1618
 10474                           
 10475                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10476  0072  0022               	movlb	2	; select bank2
 10477  0073  1DB4               	btfss	_Load^(0+256),3
 10478  0074  1BB4               	btfsc	_Load^(0+256),7
 10479  0075  2882               	goto	l1616
 10480                           
 10481                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10482  0076  15B4               	bsf	_Load^(0+256),3
 10483                           
 10484                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10485  0077  01D9               	clrf	(_Load^(0+256)+37)
 10486                           
 10487                           ;OverLoad_B1.c: 56: }
 10488                           ;OverLoad_B1.c: 57: } else {
 10489  0078  2882               	goto	l1616
 10490  0079                     l1618:	
 10491                           
 10492                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10493  0079  0022               	movlb	2	; select bank2
 10494  007A  1FB4               	btfss	_Load^(0+256),7
 10495  007B  2882               	goto	l1616
 10496                           
 10497                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10498  007C  13B4               	bcf	_Load^(0+256),7
 10499                           
 10500                           ;OverLoad_B1.c: 60: }
 10501                           ;OverLoad_B1.c: 61: }
 10502                           ;OverLoad_B1.c: 62: } else {
 10503  007D  2882               	goto	l1616
 10504  007E                     l1617:	
 10505                           
 10506                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10507  007E  0022               	movlb	2	; select bank2
 10508  007F  1CB4               	btfss	_Load^(0+256),1
 10509  0080  2882               	goto	l1616
 10510  0081                     l9385:	
 10511                           
 10512                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10513  0081  10B4               	bcf	_Load^(0+256),1
 10514  0082                     l1616:	
 10515                           
 10516                           ;OverLoad_B1.c: 65: }
 10517                           ;OverLoad_B1.c: 66: }
 10518                           ;OverLoad_B1.c: 88: }
 10519                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10520  0082  1CB4               	btfss	_Load^(0+256),1
 10521  0083  29D2               	goto	l1624
 10522                           
 10523                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10524  0084  1534               	bsf	_Load^(0+256),2
 10525                           
 10526                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10527  0085  1E34               	btfss	_Load^(0+256),4
 10528  0086  29D0               	goto	l1625
 10529                           
 10530                           ;OverLoad_B1.c: 95: Load.Time++;
 10531  0087  3001               	movlw	1
 10532  0088  07B5               	addwf	(_Load^(0+256)+1),f
 10533  0089  3000               	movlw	0
 10534  008A  3DB6               	addwfc	((_Load+1)^(0+256)+1),f
 10535                           
 10536                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10537  008B  3000               	movlw	0
 10538  008C  0236               	subwf	((_Load+1)^(0+256)+1),w
 10539  008D  3002               	movlw	2
 10540  008E  1903               	skipnz
 10541  008F  0235               	subwf	(_Load^(0+256)+1),w
 10542  0090  1C03               	skipc
 10543  0091  0008               	return
 10544                           
 10545                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10546  0092  01B5               	clrf	(_Load^(0+256)+1)
 10547  0093  01B6               	clrf	((_Load+1)^(0+256)+1)
 10548                           
 10549                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10550  0094  1234               	bcf	_Load^(0+256),4
 10551                           
 10552                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10553  0095  3001               	movlw	1
 10554  0096  0020               	movlb	0	; select bank0
 10555  0097  00B1               	movwf	Load_Main@i
 10556  0098  3000               	movlw	0
 10557  0099  00B2               	movwf	Load_Main@i+1
 10558  009A  0832               	movf	Load_Main@i+1,w
 10559  009B  3A80               	xorlw	128
 10560  009C  00A9               	movwf	??_Load_Main
 10561  009D  3080               	movlw	128
 10562  009E  0229               	subwf	??_Load_Main,w
 10563  009F  1D03               	skipz
 10564  00A0  28A3               	goto	u10685
 10565  00A1  3004               	movlw	4
 10566  00A2  0231               	subwf	Load_Main@i,w
 10567  00A3                     u10685:	
 10568  00A3  1803               	btfsc	3,0
 10569  00A4  28D7               	goto	l9407
 10570  00A5                     l9401:	
 10571                           
 10572                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10573  00A5  0020               	movlb	0	; select bank0
 10574  00A6  3531               	lslf	Load_Main@i,w
 10575  00A7  3E3F               	addlw	(_Load+11)& (0+255)
 10576  00A8  0086               	movwf	6
 10577  00A9  3001               	movlw	1	; select bank2/3
 10578  00AA  0087               	movwf	7
 10579  00AB  3F40               	moviw [0]fsr1
 10580  00AC  00A9               	movwf	??_Load_Main
 10581  00AD  3F41               	moviw [1]fsr1
 10582  00AE  00AA               	movwf	??_Load_Main+1
 10583  00AF  0829               	movf	??_Load_Main,w
 10584  00B0  0022               	movlb	2	; select bank2
 10585  00B1  07B9               	addwf	(_Load^(0+256)+5),f
 10586  00B2  0020               	movlb	0	; select bank0
 10587  00B3  082A               	movf	??_Load_Main+1,w
 10588  00B4  0022               	movlb	2	; select bank2
 10589  00B5  3DBA               	addwfc	((_Load+1)^(0+256)+5),f
 10590                           
 10591                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10592  00B6  0020               	movlb	0	; select bank0
 10593  00B7  3531               	lslf	Load_Main@i,w
 10594  00B8  3E49               	addlw	(_Load+21)& (0+255)
 10595  00B9  0086               	movwf	6
 10596  00BA  3001               	movlw	1	; select bank2/3
 10597  00BB  0087               	movwf	7
 10598  00BC  3F40               	moviw [0]fsr1
 10599  00BD  00A9               	movwf	??_Load_Main
 10600  00BE  3F41               	moviw [1]fsr1
 10601  00BF  00AA               	movwf	??_Load_Main+1
 10602  00C0  0829               	movf	??_Load_Main,w
 10603  00C1  0022               	movlb	2	; select bank2
 10604  00C2  07BB               	addwf	(_Load^(0+256)+7),f
 10605  00C3  0020               	movlb	0	; select bank0
 10606  00C4  082A               	movf	??_Load_Main+1,w
 10607  00C5  0022               	movlb	2	; select bank2
 10608  00C6  3DBC               	addwfc	((_Load+1)^(0+256)+7),f
 10609  00C7  3001               	movlw	1
 10610  00C8  0020               	movlb	0	; select bank0
 10611  00C9  07B1               	addwf	Load_Main@i,f
 10612  00CA  3000               	movlw	0
 10613  00CB  3DB2               	addwfc	Load_Main@i+1,f
 10614  00CC  0832               	movf	Load_Main@i+1,w
 10615  00CD  3A80               	xorlw	128
 10616  00CE  00A9               	movwf	??_Load_Main
 10617  00CF  3080               	movlw	128
 10618  00D0  0229               	subwf	??_Load_Main,w
 10619  00D1  1D03               	skipz
 10620  00D2  28D5               	goto	u10695
 10621  00D3  3004               	movlw	4
 10622  00D4  0231               	subwf	Load_Main@i,w
 10623  00D5                     u10695:	
 10624  00D5  1C03               	skipc
 10625  00D6  28A5               	goto	l9401
 10626  00D7                     l9407:	
 10627                           
 10628                           ;OverLoad_B1.c: 103: }
 10629                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10630  00D7  3003               	movlw	3
 10631  00D8  0020               	movlb	0	; select bank0
 10632  00D9  00A1               	movwf	___lwdiv@divisor
 10633  00DA  3000               	movlw	0
 10634  00DB  00A2               	movwf	___lwdiv@divisor+1
 10635  00DC  0022               	movlb	2	; select bank2
 10636  00DD  083A               	movf	((_Load+1)^(0+256)+5),w
 10637  00DE  0020               	movlb	0	; select bank0
 10638  00DF  01A4               	clrf	___lwdiv@dividend+1
 10639  00E0  07A4               	addwf	___lwdiv@dividend+1,f
 10640  00E1  0022               	movlb	2	; select bank2
 10641  00E2  0839               	movf	(_Load^(0+256)+5),w
 10642  00E3  0020               	movlb	0	; select bank0
 10643  00E4  01A3               	clrf	___lwdiv@dividend
 10644  00E5  07A3               	addwf	___lwdiv@dividend,f
 10645  00E6  3192  226A  3180   	fcall	___lwdiv
 10646  00E9  0020               	movlb	0	; select bank0
 10647  00EA  0822               	movf	?___lwdiv+1,w
 10648  00EB  0022               	movlb	2	; select bank2
 10649  00EC  01BA               	clrf	((_Load+1)^(0+256)+5)
 10650  00ED  07BA               	addwf	((_Load+1)^(0+256)+5),f
 10651  00EE  0020               	movlb	0	; select bank0
 10652  00EF  0821               	movf	?___lwdiv,w
 10653  00F0  0022               	movlb	2	; select bank2
 10654  00F1  01B9               	clrf	(_Load^(0+256)+5)
 10655  00F2  07B9               	addwf	(_Load^(0+256)+5),f
 10656                           
 10657                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10658  00F3  3003               	movlw	3
 10659  00F4  0020               	movlb	0	; select bank0
 10660  00F5  00A1               	movwf	___lwdiv@divisor
 10661  00F6  3000               	movlw	0
 10662  00F7  00A2               	movwf	___lwdiv@divisor+1
 10663  00F8  0022               	movlb	2	; select bank2
 10664  00F9  083C               	movf	((_Load+1)^(0+256)+7),w
 10665  00FA  0020               	movlb	0	; select bank0
 10666  00FB  01A4               	clrf	___lwdiv@dividend+1
 10667  00FC  07A4               	addwf	___lwdiv@dividend+1,f
 10668  00FD  0022               	movlb	2	; select bank2
 10669  00FE  083B               	movf	(_Load^(0+256)+7),w
 10670  00FF  0020               	movlb	0	; select bank0
 10671  0100  01A3               	clrf	___lwdiv@dividend
 10672  0101  07A3               	addwf	___lwdiv@dividend,f
 10673  0102  3192  226A  3180   	fcall	___lwdiv
 10674  0105  0020               	movlb	0	; select bank0
 10675  0106  0822               	movf	?___lwdiv+1,w
 10676  0107  0022               	movlb	2	; select bank2
 10677  0108  01BC               	clrf	((_Load+1)^(0+256)+7)
 10678  0109  07BC               	addwf	((_Load+1)^(0+256)+7),f
 10679  010A  0020               	movlb	0	; select bank0
 10680  010B  0821               	movf	?___lwdiv,w
 10681  010C  0022               	movlb	2	; select bank2
 10682  010D  01BB               	clrf	(_Load^(0+256)+7)
 10683  010E  07BB               	addwf	(_Load^(0+256)+7),f
 10684                           
 10685                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10686  010F  3190  2000  3180   	fcall	_setLoad_AH_AL_Restore
 10687                           
 10688                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10689  0112  0022               	movlb	2	; select bank2
 10690  0113  083C               	movf	((_Load+1)^(0+256)+7),w
 10691  0114  023A               	subwf	((_Load+1)^(0+256)+5),w
 10692  0115  1D03               	skipz
 10693  0116  2919               	goto	u10705
 10694  0117  083B               	movf	(_Load^(0+256)+7),w
 10695  0118  0239               	subwf	(_Load^(0+256)+5),w
 10696  0119                     u10705:	
 10697  0119  1C03               	skipc
 10698  011A  0008               	return
 10699                           
 10700                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10701  011B  3005               	movlw	5
 10702  011C  3E34               	addlw	_Load& (0+255)
 10703  011D  0086               	movwf	6
 10704  011E  3001               	movlw	1	; select bank2/3
 10705  011F  0087               	movwf	7
 10706  0120  093B               	comf	(_Load^(0+256)+7),w
 10707  0121  0020               	movlb	0	; select bank0
 10708  0122  00A9               	movwf	??_Load_Main
 10709  0123  0022               	movlb	2	; select bank2
 10710  0124  093C               	comf	((_Load+1)^(0+256)+7),w
 10711  0125  0020               	movlb	0	; select bank0
 10712  0126  00AA               	movwf	??_Load_Main+1
 10713  0127  0AA9               	incf	??_Load_Main,f
 10714  0128  1903               	skipnz
 10715  0129  0AAA               	incf	??_Load_Main+1,f
 10716  012A  3F40               	moviw [0]fsr1
 10717  012B  0729               	addwf	??_Load_Main,w
 10718  012C  0022               	movlb	2	; select bank2
 10719  012D  00D3               	movwf	(_Load^(0+256)+31)
 10720  012E  3F41               	moviw [1]fsr1
 10721  012F  0020               	movlb	0	; select bank0
 10722  0130  3D2A               	addwfc	??_Load_Main+1,w
 10723  0131  0022               	movlb	2	; select bank2
 10724  0132  00D4               	movwf	(_Load^(0+256)+32)
 10725                           
 10726                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10727  0133  01B9               	clrf	(_Load^(0+256)+5)
 10728  0134  01BA               	clrf	((_Load+1)^(0+256)+5)
 10729                           
 10730                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10731  0135  01BB               	clrf	(_Load^(0+256)+7)
 10732  0136  01BC               	clrf	((_Load+1)^(0+256)+7)
 10733                           
 10734                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10735  0137  1DB4               	btfss	_Load^(0+256),3
 10736  0138  2992               	goto	l9447
 10737                           
 10738                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10739  0139  3002               	movlw	2
 10740  013A  0259               	subwf	(_Load^(0+256)+37),w
 10741  013B  1803               	skipnc
 10742  013C  2992               	goto	l9447
 10743                           
 10744                           ;OverLoad_B1.c: 115: Load.Count++;
 10745  013D  3001               	movlw	1
 10746  013E  0020               	movlb	0	; select bank0
 10747  013F  00A9               	movwf	??_Load_Main
 10748  0140  0829               	movf	??_Load_Main,w
 10749  0141  0022               	movlb	2	; select bank2
 10750  0142  07D9               	addwf	(_Load^(0+256)+37),f
 10751                           
 10752                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10753  0143  319B  23BF  3180   	fcall	_getDimmer_Load_Status
 10754  0146  0020               	movlb	0	; select bank0
 10755  0147  00A9               	movwf	??_Load_Main
 10756  0148  0829               	movf	??_Load_Main,w
 10757  0149  00AF               	movwf	Load_Main@Load_RunStatus
 10758                           
 10759                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10760  014A  319B  23F7  3180   	fcall	_getMain_Lights_Count
 10761  014D  0020               	movlb	0	; select bank0
 10762  014E  00A9               	movwf	??_Load_Main
 10763  014F  0829               	movf	??_Load_Main,w
 10764  0150  00B0               	movwf	Load_Main@LightsCount
 10765                           
 10766                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10767  0151  0022               	movlb	2	; select bank2
 10768  0152  0859               	movf	(_Load^(0+256)+37),w
 10769  0153  3A01               	xorlw	1
 10770  0154  1D03               	skipz
 10771  0155  295A               	goto	l9433
 10772                           
 10773                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10774  0156  3074               	movlw	116
 10775  0157  00D7               	movwf	(_Load^(0+256)+35)
 10776  0158  3004               	movlw	4
 10777  0159  2967               	goto	L6
 10778  015A                     l9433:	
 10779                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10780                           
 10781  015A  0859               	movf	(_Load^(0+256)+37),w
 10782  015B  3A02               	xorlw	2
 10783  015C  1D03               	skipz
 10784  015D  2992               	goto	l9447
 10785                           
 10786                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10787  015E  0020               	movlb	0	; select bank0
 10788  015F  0830               	movf	Load_Main@LightsCount,w
 10789  0160  3A01               	xorlw	1
 10790  0161  1D03               	skipz
 10791  0162  2969               	goto	l9439
 10792                           
 10793                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10794  0163  305B               	movlw	91
 10795  0164  0022               	movlb	2	; select bank2
 10796  0165  00D7               	movwf	(_Load^(0+256)+35)
 10797  0166  3000               	movlw	0
 10798  0167                     L6:	
 10799  0167  00D8               	movwf	(_Load^(0+256)+36)
 10800                           
 10801                           ;OverLoad_B1.c: 130: } else {
 10802  0168  2992               	goto	l9447
 10803  0169                     l9439:	
 10804                           
 10805                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10806  0169  0020               	movlb	0	; select bank0
 10807  016A  08AF               	movf	Load_Main@Load_RunStatus,f
 10808  016B  1D03               	skipz
 10809  016C  2986               	goto	l9443
 10810                           
 10811                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10812  016D  0830               	movf	Load_Main@LightsCount,w
 10813  016E  00A9               	movwf	??_Load_Main
 10814  016F  01AA               	clrf	??_Load_Main+1
 10815  0170  0829               	movf	??_Load_Main,w
 10816  0171  00A1               	movwf	___wmul@multiplier
 10817  0172  082A               	movf	??_Load_Main+1,w
 10818  0173  00A2               	movwf	___wmul@multiplier+1
 10819  0174  305B               	movlw	91
 10820  0175  00A3               	movwf	___wmul@multiplicand
 10821  0176  3000               	movlw	0
 10822  0177  00A4               	movwf	___wmul@multiplicand+1
 10823  0178  319F  27E2  3180   	fcall	___wmul
 10824  017B  0020               	movlb	0	; select bank0
 10825  017C  0822               	movf	?___wmul+1,w
 10826  017D  0022               	movlb	2	; select bank2
 10827  017E  01D8               	clrf	((_Load+1)^(0+256)+35)
 10828  017F  07D8               	addwf	((_Load+1)^(0+256)+35),f
 10829  0180  0020               	movlb	0	; select bank0
 10830  0181  0821               	movf	?___wmul,w
 10831  0182  0022               	movlb	2	; select bank2
 10832  0183  01D7               	clrf	(_Load^(0+256)+35)
 10833  0184  07D7               	addwf	(_Load^(0+256)+35),f
 10834                           
 10835                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10836  0185  2992               	goto	l9447
 10837  0186                     l9443:	
 10838  0186  0020               	movlb	0	; select bank0
 10839  0187  082F               	movf	Load_Main@Load_RunStatus,w
 10840  0188  3A01               	xorlw	1
 10841  0189  1D03               	skipz
 10842  018A  2992               	goto	l9447
 10843                           
 10844                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10845  018B  0022               	movlb	2	; select bank2
 10846  018C  083D               	movf	(_Load^(0+256)+9),w
 10847  018D  3E5B               	addlw	91
 10848  018E  00D7               	movwf	(_Load^(0+256)+35)
 10849  018F  3000               	movlw	0
 10850  0190  3D3E               	addwfc	((_Load+1)^(0+256)+9),w
 10851  0191  00D8               	movwf	((_Load+1)^(0+256)+35)
 10852  0192                     l9447:	
 10853                           
 10854                           ;OverLoad_B1.c: 135: }
 10855                           ;OverLoad_B1.c: 136: }
 10856                           ;OverLoad_B1.c: 137: }
 10857                           ;OverLoad_B1.c: 138: }
 10858                           ;OverLoad_B1.c: 139: }
 10859                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10860  0192  0022               	movlb	2	; select bank2
 10861  0193  0858               	movf	((_Load+1)^(0+256)+35),w
 10862  0194  0254               	subwf	((_Load+1)^(0+256)+31),w
 10863  0195  1D03               	skipz
 10864  0196  2999               	goto	u10785
 10865  0197  0857               	movf	(_Load^(0+256)+35),w
 10866  0198  0253               	subwf	(_Load^(0+256)+31),w
 10867  0199                     u10785:	
 10868  0199  1C03               	skipc
 10869  019A  29B8               	goto	l9463
 10870                           
 10871                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10872  019B  0020               	movlb	0	; select bank0
 10873  019C  0830               	movf	Load_Main@LightsCount,w
 10874  019D  3A01               	xorlw	1
 10875  019E  1903               	skipnz
 10876  019F  29A2               	goto	l9453
 10877  01A0  3003               	movlw	3
 10878  01A1  29A3               	goto	L7
 10879  01A2                     l9453:	
 10880  01A2  3002               	movlw	2
 10881  01A3                     L7:	
 10882  01A3  00AC               	movwf	_Load_Main$3921
 10883  01A4  3000               	movlw	0
 10884  01A5  00AD               	movwf	_Load_Main$3921+1
 10885  01A6  082C               	movf	_Load_Main$3921,w
 10886  01A7  00A9               	movwf	??_Load_Main
 10887  01A8  0829               	movf	??_Load_Main,w
 10888  01A9  00AE               	movwf	Load_Main@ErrorCountValue
 10889                           
 10890                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10891  01AA  3001               	movlw	1
 10892  01AB  00A9               	movwf	??_Load_Main
 10893  01AC  0829               	movf	??_Load_Main,w
 10894  01AD  0022               	movlb	2	; select bank2
 10895  01AE  07DA               	addwf	(_Load^(0+256)+38),f
 10896                           
 10897                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10898  01AF  085A               	movf	(_Load^(0+256)+38),w
 10899  01B0  0020               	movlb	0	; select bank0
 10900  01B1  022E               	subwf	Load_Main@ErrorCountValue,w
 10901  01B2  1803               	skipnc
 10902  01B3  0008               	return
 10903                           
 10904                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10905  01B4  0022               	movlb	2	; select bank2
 10906  01B5  01DA               	clrf	(_Load^(0+256)+38)
 10907                           
 10908                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10909  01B6  16B4               	bsf	_Load^(0+256),5
 10910                           
 10911                           ;OverLoad_B1.c: 168: }
 10912                           ;OverLoad_B1.c: 169: } else {
 10913  01B7  0008               	return
 10914  01B8                     l9463:	
 10915                           
 10916                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10917  01B8  01DA               	clrf	(_Load^(0+256)+38)
 10918                           
 10919                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10920  01B9  1DB4               	btfss	_Load^(0+256),3
 10921  01BA  0008               	return
 10922                           
 10923                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10924  01BB  3001               	movlw	1
 10925  01BC  0020               	movlb	0	; select bank0
 10926  01BD  00A9               	movwf	??_Load_Main
 10927  01BE  0829               	movf	??_Load_Main,w
 10928  01BF  0022               	movlb	2	; select bank2
 10929  01C0  07DB               	addwf	(_Load^(0+256)+39),f
 10930                           
 10931                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10932  01C1  3003               	movlw	3
 10933  01C2  025B               	subwf	(_Load^(0+256)+39),w
 10934  01C3  1C03               	skipc
 10935  01C4  0008               	return
 10936                           
 10937                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10938  01C5  01DB               	clrf	(_Load^(0+256)+39)
 10939                           
 10940                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10941  01C6  17B4               	bsf	_Load^(0+256),7
 10942                           
 10943                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10944  01C7  11B4               	bcf	_Load^(0+256),3
 10945                           
 10946                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10947  01C8  01D9               	clrf	(_Load^(0+256)+37)
 10948                           
 10949                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10950  01C9  0854               	movf	((_Load+1)^(0+256)+31),w
 10951  01CA  01BE               	clrf	((_Load+1)^(0+256)+9)
 10952  01CB  07BE               	addwf	((_Load+1)^(0+256)+9),f
 10953  01CC  0853               	movf	(_Load^(0+256)+31),w
 10954  01CD  01BD               	clrf	(_Load^(0+256)+9)
 10955  01CE  07BD               	addwf	(_Load^(0+256)+9),f
 10956                           
 10957                           ;OverLoad_B1.c: 182: }
 10958                           ;OverLoad_B1.c: 183: }
 10959                           ;OverLoad_B1.c: 206: }
 10960                           ;OverLoad_B1.c: 207: }
 10961                           ;OverLoad_B1.c: 208: }
 10962                           ;OverLoad_B1.c: 209: } else {
 10963  01CF  0008               	return
 10964  01D0                     l1625:	
 10965                           
 10966                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10967  01D0  1634               	bsf	_Load^(0+256),4
 10968                           
 10969                           ;OverLoad_B1.c: 211: }
 10970                           ;OverLoad_B1.c: 212: } else {
 10971  01D1  0008               	return
 10972  01D2                     l1624:	
 10973                           
 10974                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10975  01D2  1D34               	btfss	_Load^(0+256),2
 10976  01D3  29E5               	goto	l9499
 10977                           
 10978                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10979  01D4  1134               	bcf	_Load^(0+256),2
 10980                           
 10981                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10982  01D5  1234               	bcf	_Load^(0+256),4
 10983                           
 10984                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10985  01D6  01B5               	clrf	(_Load^(0+256)+1)
 10986  01D7  01B6               	clrf	((_Load+1)^(0+256)+1)
 10987                           
 10988                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10989  01D8  3190  2000  3180   	fcall	_setLoad_AH_AL_Restore
 10990                           
 10991                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10992  01DB  0022               	movlb	2	; select bank2
 10993  01DC  01DA               	clrf	(_Load^(0+256)+38)
 10994                           
 10995                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 10996  01DD  01DB               	clrf	(_Load^(0+256)+39)
 10997                           
 10998                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 10999  01DE  01B9               	clrf	(_Load^(0+256)+5)
 11000  01DF  01BA               	clrf	((_Load+1)^(0+256)+5)
 11001                           
 11002                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11003  01E0  01BB               	clrf	(_Load^(0+256)+7)
 11004  01E1  01BC               	clrf	((_Load+1)^(0+256)+7)
 11005                           
 11006                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11007  01E2  11B4               	bcf	_Load^(0+256),3
 11008                           
 11009                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11010  01E3  01D9               	clrf	(_Load^(0+256)+37)
 11011                           
 11012                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11013  01E4  13B4               	bcf	_Load^(0+256),7
 11014  01E5                     l9499:	
 11015                           
 11016                           ;OverLoad_B1.c: 255: }
 11017                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11018  01E5  1EB4               	btfss	_Load^(0+256),5
 11019  01E6  0008               	return
 11020                           
 11021                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11022  01E7  3001               	movlw	1
 11023  01E8  07B7               	addwf	(_Load^(0+256)+3),f
 11024  01E9  3000               	movlw	0
 11025  01EA  3DB8               	addwfc	((_Load+1)^(0+256)+3),f
 11026                           
 11027                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11028  01EB  3001               	movlw	1
 11029  01EC  0238               	subwf	((_Load+1)^(0+256)+3),w
 11030  01ED  30F4               	movlw	244
 11031  01EE  1903               	skipnz
 11032  01EF  0237               	subwf	(_Load^(0+256)+3),w
 11033  01F0  1C03               	skipc
 11034  01F1  0008               	return
 11035                           
 11036                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11037  01F2  01B7               	clrf	(_Load^(0+256)+3)
 11038  01F3  01B8               	clrf	((_Load+1)^(0+256)+3)
 11039                           
 11040                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11041  01F4  12B4               	bcf	_Load^(0+256),5
 11042                           
 11043                           ;OverLoad_B1.c: 261: }
 11044                           ;OverLoad_B1.c: 262: }
 11045                           ;OverLoad_B1.c: 263: }
 11046                           ;OverLoad_B1.c: 264: } else {
 11047  01F5  0008               	return
 11048  01F6                     l1614:	
 11049                           
 11050                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11051  01F6  1C20               	btfss	_myMain^(0+256),0
 11052  01F7  0008               	return
 11053                           
 11054                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11055  01F8  1434               	bsf	_Load^(0+256),0
 11056  01F9  0008               	return
 11057  01FA                     __end_of_Load_Main:	
 11058                           
 11059                           	psect	text63
 11060  1BF7                     __ptext63:	
 11061 ;; *************** function _getMain_Lights_Count *****************
 11062 ;; Defined at:
 11063 ;;		line 459 in file "../src/Main_B1.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;  status1         1    2[BANK0 ] unsigned char 
 11068 ;;  count           1    1[BANK0 ] unsigned char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      unsigned char 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;Total ram usage:        2 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    5
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_Load_Main
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _getMain_Lights_Count
 11094  1BF7                     _getMain_Lights_Count:	
 11095                           
 11096                           ;Main_B1.c: 460: char count = 0;
 11097                           
 11098                           ;incstack = 0
 11099                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11100  1BF7  0020               	movlb	0	; select bank0
 11101  1BF8  01A1               	clrf	getMain_Lights_Count@count
 11102                           
 11103                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11104  1BF9  3000               	movlw	0
 11105  1BFA  0021               	movlb	1	; select bank1
 11106  1BFB  19BA               	btfsc	_DimmerIntr1^(0+128),3
 11107  1BFC  3001               	movlw	1
 11108  1BFD  0020               	movlb	0	; select bank0
 11109  1BFE  00A2               	movwf	getMain_Lights_Count@status1
 11110                           
 11111                           ;Main_B1.c: 487: return count = status1;
 11112  1BFF  0822               	movf	getMain_Lights_Count@status1,w
 11113  1C00  00A1               	movwf	getMain_Lights_Count@count
 11114  1C01  0008               	return
 11115  1C02                     __end_of_getMain_Lights_Count:	
 11116                           
 11117                           	psect	text64
 11118  1BBF                     __ptext64:	
 11119 ;; *************** function _getDimmer_Load_Status *****************
 11120 ;; Defined at:
 11121 ;;		line 1102 in file "../src/Dimmer_B1.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;		None
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;  status          1    1[BANK0 ] unsigned char 
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      unsigned char 
 11128 ;; Registers used:
 11129 ;;		wreg, status,2
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;Total ram usage:        1 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    5
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_Load_Main
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           
 11150                           ;psect for function _getDimmer_Load_Status
 11151  1BBF                     _getDimmer_Load_Status:	
 11152                           
 11153                           ;Dimmer_B1.c: 1103: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11154                           
 11155                           ;incstack = 0
 11156                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11157  1BBF  3000               	movlw	0
 11158  1BC0  0022               	movlb	2	; select bank2
 11159  1BC1  192D               	btfsc	_Dimmer^(0+256),2
 11160  1BC2  3001               	movlw	1
 11161  1BC3  0020               	movlb	0	; select bank0
 11162  1BC4  00A1               	movwf	getDimmer_Load_Status@status
 11163                           
 11164                           ;Dimmer_B1.c: 1104: return status;
 11165  1BC5  0821               	movf	getDimmer_Load_Status@status,w
 11166  1BC6  0008               	return
 11167  1BC7                     __end_of_getDimmer_Load_Status:	
 11168                           
 11169                           	psect	text65
 11170  1BB7                     __ptext65:	
 11171 ;; *************** function _getDimmer_LoadGO *****************
 11172 ;; Defined at:
 11173 ;;		line 1096 in file "../src/Dimmer_B1.c"
 11174 ;; Parameters:    Size  Location     Type
 11175 ;;		None
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  1    wreg      unsigned char 
 11180 ;; Registers used:
 11181 ;;		wreg, status,2
 11182 ;; Tracked objects:
 11183 ;;		On entry : 0/0
 11184 ;;		On exit  : 0/0
 11185 ;;		Unchanged: 0/0
 11186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;Total ram usage:        1 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; Hardware stack levels required when called:    5
 11194 ;; This function calls:
 11195 ;;		Nothing
 11196 ;; This function is called by:
 11197 ;;		_Load_Main
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           
 11202                           ;psect for function _getDimmer_LoadGO
 11203  1BB7                     _getDimmer_LoadGO:	
 11204                           
 11205                           ;Dimmer_B1.c: 1097: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11206                           
 11207                           ;incstack = 0
 11208                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11209  1BB7  3000               	movlw	0
 11210  1BB8  0022               	movlb	2	; select bank2
 11211  1BB9  18AD               	btfsc	_Dimmer^(0+256),1
 11212  1BBA  3001               	movlw	1
 11213  1BBB  0020               	movlb	0	; select bank0
 11214  1BBC  00A1               	movwf	getDimmer_LoadGO@loadgo
 11215                           
 11216                           ;Dimmer_B1.c: 1098: return loadgo;
 11217  1BBD  0821               	movf	getDimmer_LoadGO@loadgo,w
 11218  1BBE  0008               	return
 11219  1BBF                     __end_of_getDimmer_LoadGO:	
 11220                           
 11221                           	psect	text66
 11222  1DD9                     __ptext66:	
 11223 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11224 ;; Defined at:
 11225 ;;		line 242 in file "../src/Dimmer_B1.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;		None
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;  status          1    1[BANK0 ] unsigned char 
 11230 ;; Return value:  Size  Location     Type
 11231 ;;                  1    wreg      unsigned char 
 11232 ;; Registers used:
 11233 ;;		wreg, status,2, status,0
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;Total ram usage:        1 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    5
 11246 ;; This function calls:
 11247 ;;		Nothing
 11248 ;; This function is called by:
 11249 ;;		_Load_Main
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           
 11254                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11255  1DD9                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11256                           
 11257                           ;Dimmer_B1.c: 243: char status = 0;
 11258                           
 11259                           ;incstack = 0
 11260                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11261  1DD9  0020               	movlb	0	; select bank0
 11262  1DDA  01A1               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11263                           
 11264                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11265  1DDB  3000               	movlw	0
 11266  1DDC  0021               	movlb	1	; select bank1
 11267  1DDD  1A3A               	btfsc	_DimmerIntr1^(0+128),4
 11268  1DDE  3001               	movlw	1
 11269  1DDF  0020               	movlb	0	; select bank0
 11270  1DE0  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11271                           
 11272                           ;Dimmer_B1.c: 258: if (status == 0) {
 11273  1DE1  08A1               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11274  1DE2  1D03               	skipz
 11275  1DE3  2DEA               	goto	l7029
 11276                           
 11277                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11278  1DE4  3000               	movlw	0
 11279  1DE5  0021               	movlb	1	; select bank1
 11280  1DE6  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 11281  1DE7  3001               	movlw	1
 11282  1DE8  0020               	movlb	0	; select bank0
 11283  1DE9  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11284  1DEA                     l7029:	
 11285                           
 11286                           ;Dimmer_B1.c: 270: }
 11287                           ;Dimmer_B1.c: 272: return status;
 11288  1DEA  0821               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11289  1DEB  0008               	return
 11290  1DEC                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11291                           
 11292                           	psect	text67
 11293  1FE2                     __ptext67:	
 11294 ;; *************** function ___wmul *****************
 11295 ;; Defined at:
 11296 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11299 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  product         2    5[BANK0 ] unsigned int 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;                  2    1[BANK0 ] unsigned int 
 11304 ;; Registers used:
 11305 ;;		wreg, status,2, status,0
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11311 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;Total ram usage:        6 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    5
 11318 ;; This function calls:
 11319 ;;		Nothing
 11320 ;; This function is called by:
 11321 ;;		_Load_Main
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function ___wmul
 11327  1FE2                     ___wmul:	
 11328                           
 11329                           ;incstack = 0
 11330                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11331  1FE2  0020               	movlb	0	; select bank0
 11332  1FE3  01A5               	clrf	___wmul@product
 11333  1FE4  01A6               	clrf	___wmul@product+1
 11334  1FE5                     l7575:	
 11335  1FE5  1C21               	btfss	___wmul@multiplier,0
 11336  1FE6  2FEB               	goto	l2670
 11337  1FE7  0823               	movf	___wmul@multiplicand,w
 11338  1FE8  07A5               	addwf	___wmul@product,f
 11339  1FE9  0824               	movf	___wmul@multiplicand+1,w
 11340  1FEA  3DA6               	addwfc	___wmul@product+1,f
 11341  1FEB                     l2670:	
 11342  1FEB  3001               	movlw	1
 11343  1FEC                     u7435:	
 11344  1FEC  35A3               	lslf	___wmul@multiplicand,f
 11345  1FED  0DA4               	rlf	___wmul@multiplicand+1,f
 11346  1FEE  0B89               	decfsz	9,f
 11347  1FEF  2FEC               	goto	u7435
 11348  1FF0  3001               	movlw	1
 11349  1FF1                     u7445:	
 11350  1FF1  36A2               	lsrf	___wmul@multiplier+1,f
 11351  1FF2  0CA1               	rrf	___wmul@multiplier,f
 11352  1FF3  0B89               	decfsz	9,f
 11353  1FF4  2FF1               	goto	u7445
 11354  1FF5  0822               	movf	___wmul@multiplier+1,w
 11355  1FF6  0421               	iorwf	___wmul@multiplier,w
 11356  1FF7  1D03               	skipz
 11357  1FF8  2FE5               	goto	l7575
 11358  1FF9  0826               	movf	___wmul@product+1,w
 11359  1FFA  01A2               	clrf	?___wmul+1
 11360  1FFB  07A2               	addwf	?___wmul+1,f
 11361  1FFC  0825               	movf	___wmul@product,w
 11362  1FFD  01A1               	clrf	?___wmul
 11363  1FFE  07A1               	addwf	?___wmul,f
 11364  1FFF  0008               	return
 11365  2000                     __end_of___wmul:	
 11366                           
 11367                           	psect	text68
 11368  126A                     __ptext68:	
 11369 ;; *************** function ___lwdiv *****************
 11370 ;; Defined at:
 11371 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11372 ;; Parameters:    Size  Location     Type
 11373 ;;  divisor         2    1[BANK0 ] unsigned int 
 11374 ;;  dividend        2    3[BANK0 ] unsigned int 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  quotient        2    6[BANK0 ] unsigned int 
 11377 ;;  counter         1    8[BANK0 ] unsigned char 
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  2    1[BANK0 ] unsigned int 
 11380 ;; Registers used:
 11381 ;;		wreg, status,2, status,0
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11387 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;Total ram usage:        8 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    5
 11394 ;; This function calls:
 11395 ;;		Nothing
 11396 ;; This function is called by:
 11397 ;;		_Load_Main
 11398 ;;		_setRF_Main
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           
 11403                           ;psect for function ___lwdiv
 11404  126A                     ___lwdiv:	
 11405                           
 11406                           ;incstack = 0
 11407                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11408  126A  0020               	movlb	0	; select bank0
 11409  126B  01A6               	clrf	___lwdiv@quotient
 11410  126C  01A7               	clrf	___lwdiv@quotient+1
 11411  126D  0822               	movf	___lwdiv@divisor+1,w
 11412  126E  0421               	iorwf	___lwdiv@divisor,w
 11413  126F  1903               	skipnz
 11414  1270  2A9A               	goto	l6991
 11415  1271  01A8               	clrf	___lwdiv@counter
 11416  1272  0AA8               	incf	___lwdiv@counter,f
 11417  1273                     l6979:	
 11418  1273  1BA2               	btfsc	___lwdiv@divisor+1,7
 11419  1274  2A7F               	goto	l6981
 11420  1275  3001               	movlw	1
 11421  1276                     u6385:	
 11422  1276  35A1               	lslf	___lwdiv@divisor,f
 11423  1277  0DA2               	rlf	___lwdiv@divisor+1,f
 11424  1278  0B89               	decfsz	9,f
 11425  1279  2A76               	goto	u6385
 11426  127A  3001               	movlw	1
 11427  127B  00A5               	movwf	??___lwdiv
 11428  127C  0825               	movf	??___lwdiv,w
 11429  127D  07A8               	addwf	___lwdiv@counter,f
 11430  127E  2A73               	goto	l6979
 11431  127F                     l6981:	
 11432  127F  3001               	movlw	1
 11433  1280                     u6405:	
 11434  1280  35A6               	lslf	___lwdiv@quotient,f
 11435  1281  0DA7               	rlf	___lwdiv@quotient+1,f
 11436  1282  0B89               	decfsz	9,f
 11437  1283  2A80               	goto	u6405
 11438  1284  0822               	movf	___lwdiv@divisor+1,w
 11439  1285  0224               	subwf	___lwdiv@dividend+1,w
 11440  1286  1D03               	skipz
 11441  1287  2A8A               	goto	u6415
 11442  1288  0821               	movf	___lwdiv@divisor,w
 11443  1289  0223               	subwf	___lwdiv@dividend,w
 11444  128A                     u6415:	
 11445  128A  1C03               	skipc
 11446  128B  2A91               	goto	l6987
 11447  128C  0821               	movf	___lwdiv@divisor,w
 11448  128D  02A3               	subwf	___lwdiv@dividend,f
 11449  128E  0822               	movf	___lwdiv@divisor+1,w
 11450  128F  3BA4               	subwfb	___lwdiv@dividend+1,f
 11451  1290  1426               	bsf	___lwdiv@quotient,0
 11452  1291                     l6987:	
 11453  1291  3001               	movlw	1
 11454  1292                     u6425:	
 11455  1292  36A2               	lsrf	___lwdiv@divisor+1,f
 11456  1293  0CA1               	rrf	___lwdiv@divisor,f
 11457  1294  0B89               	decfsz	9,f
 11458  1295  2A92               	goto	u6425
 11459  1296  3001               	movlw	1
 11460  1297  02A8               	subwf	___lwdiv@counter,f
 11461  1298  1D03               	btfss	3,2
 11462  1299  2A7F               	goto	l6981
 11463  129A                     l6991:	
 11464  129A  0827               	movf	___lwdiv@quotient+1,w
 11465  129B  01A2               	clrf	?___lwdiv+1
 11466  129C  07A2               	addwf	?___lwdiv+1,f
 11467  129D  0826               	movf	___lwdiv@quotient,w
 11468  129E  01A1               	clrf	?___lwdiv
 11469  129F  07A1               	addwf	?___lwdiv,f
 11470  12A0  0008               	return
 11471  12A1                     __end_of___lwdiv:	
 11472                           
 11473                           	psect	text69
 11474  1B4F                     __ptext69:	
 11475 ;; *************** function _Load_Initialization *****************
 11476 ;; Defined at:
 11477 ;;		line 9 in file "../src/OverLoad_B1.c"
 11478 ;; Parameters:    Size  Location     Type
 11479 ;;		None
 11480 ;; Auto vars:     Size  Location     Type
 11481 ;;		None
 11482 ;; Return value:  Size  Location     Type
 11483 ;;		None               void
 11484 ;; Registers used:
 11485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;Total ram usage:        0 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; Hardware stack levels required when called:    6
 11498 ;; This function calls:
 11499 ;;		_setLoad_AH_AL_Restore
 11500 ;; This function is called by:
 11501 ;;		_main
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function _Load_Initialization
 11507  1B4F                     _Load_Initialization:	
 11508                           
 11509                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11510                           
 11511                           ;incstack = 0
 11512                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11513  1B4F  3190  2000         	fcall	_setLoad_AH_AL_Restore
 11514  1B51  0008               	return
 11515  1B52                     __end_of_Load_Initialization:	
 11516                           
 11517                           	psect	text70
 11518  1000                     __ptext70:	
 11519 ;; *************** function _setLoad_AH_AL_Restore *****************
 11520 ;; Defined at:
 11521 ;;		line 292 in file "../src/OverLoad_B1.c"
 11522 ;; Parameters:    Size  Location     Type
 11523 ;;		None
 11524 ;; Auto vars:     Size  Location     Type
 11525 ;;  i               1    2[BANK0 ] unsigned char 
 11526 ;; Return value:  Size  Location     Type
 11527 ;;		None               void
 11528 ;; Registers used:
 11529 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11530 ;; Tracked objects:
 11531 ;;		On entry : 0/0
 11532 ;;		On exit  : 0/0
 11533 ;;		Unchanged: 0/0
 11534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;Total ram usage:        2 bytes
 11540 ;; Hardware stack levels used:    1
 11541 ;; Hardware stack levels required when called:    5
 11542 ;; This function calls:
 11543 ;;		Nothing
 11544 ;; This function is called by:
 11545 ;;		_Load_Initialization
 11546 ;;		_Load_Main
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           
 11551                           ;psect for function _setLoad_AH_AL_Restore
 11552  1000                     _setLoad_AH_AL_Restore:	
 11553                           
 11554                           ;OverLoad_B1.c: 293: char i;
 11555                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11556                           
 11557                           ;incstack = 0
 11558                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11559  1000  0020               	movlb	0	; select bank0
 11560  1001  01A2               	clrf	setLoad_AH_AL_Restore@i
 11561  1002                     L8:	
 11562  1002  3005               	movlw	5
 11563  1003  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11564  1004  1803               	btfsc	3,0
 11565  1005  0008               	return
 11566                           
 11567                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11568  1006  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11569  1007  3E3F               	addlw	(_Load+11)& (0+255)
 11570  1008  0086               	movwf	6
 11571  1009  3001               	movlw	1	; select bank2/3
 11572  100A  0087               	movwf	7
 11573  100B  3000               	movlw	0
 11574  100C  3FC0               	movwi [0]fsr1
 11575  100D  3FC1               	movwi [1]fsr1
 11576                           
 11577                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11578  100E  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11579  100F  3E49               	addlw	(_Load+21)& (0+255)
 11580  1010  0086               	movwf	6
 11581  1011  3001               	movlw	1	; select bank2/3
 11582  1012  0087               	movwf	7
 11583  1013  30FF               	movlw	255
 11584  1014  3FC0               	movwi [0]fsr1
 11585  1015  30FF               	movlw	255
 11586  1016  3FC1               	movwi [1]fsr1
 11587  1017  3001               	movlw	1
 11588  1018  00A1               	movwf	??_setLoad_AH_AL_Restore
 11589  1019  0821               	movf	??_setLoad_AH_AL_Restore,w
 11590  101A  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11591  101B  2802               	goto	L8
 11592  101C                     __end_of_setLoad_AH_AL_Restore:	
 11593                           
 11594                           	psect	text71
 11595  1B67                     __ptext71:	
 11596 ;; *************** function _LED_Main *****************
 11597 ;; Defined at:
 11598 ;;		line 47 in file "../src/LED_B1.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;		None
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;		None
 11603 ;; Return value:  Size  Location     Type
 11604 ;;		None               void
 11605 ;; Registers used:
 11606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;Total ram usage:        0 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    7
 11619 ;; This function calls:
 11620 ;;		_setLED_Main
 11621 ;; This function is called by:
 11622 ;;		_main
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _LED_Main
 11628  1B67                     _LED_Main:	
 11629                           
 11630                           ;LED_B1.c: 67: setLED_Main(99);
 11631                           
 11632                           ;incstack = 0
 11633                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11634  1B67  3063               	movlw	99
 11635  1B68  3191  21FD         	fcall	_setLED_Main
 11636  1B6A  0008               	return
 11637  1B6B                     __end_of_LED_Main:	
 11638                           
 11639                           	psect	text72
 11640  11FD                     __ptext72:	
 11641 ;; *************** function _setLED_Main *****************
 11642 ;; Defined at:
 11643 ;;		line 229 in file "../src/LED_B1.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;  led             1    wreg     unsigned char 
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;  led             1    5[BANK0 ] unsigned char 
 11648 ;; Return value:  Size  Location     Type
 11649 ;;		None               void
 11650 ;; Registers used:
 11651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11652 ;; Tracked objects:
 11653 ;;		On entry : 0/0
 11654 ;;		On exit  : 0/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;Total ram usage:        3 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    6
 11664 ;; This function calls:
 11665 ;;		_LedPointSelect
 11666 ;; This function is called by:
 11667 ;;		_LED_Main
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _setLED_Main
 11673  11FD                     _setLED_Main:	
 11674                           
 11675                           ;incstack = 0
 11676                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11677                           ;setLED_Main@led stored from wreg
 11678  11FD  0020               	movlb	0	; select bank0
 11679  11FE  00A5               	movwf	setLED_Main@led
 11680                           
 11681                           ;LED_B1.c: 230: LedPointSelect(led);
 11682  11FF  0825               	movf	setLED_Main@led,w
 11683  1200  319C  245F  3191   	fcall	_LedPointSelect
 11684                           
 11685                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11686  1203  0021               	movlb	1	; select bank1
 11687  1204  0850               	movf	_LED^(0+128),w
 11688  1205  0086               	movwf	6
 11689  1206  3001               	movlw	1	; select bank2/3
 11690  1207  0087               	movwf	7
 11691  1208  1C81               	btfss	1,1
 11692  1209  0008               	return
 11693                           
 11694                           ;LED_B1.c: 232: LED->Time++;
 11695  120A  0A50               	incf	_LED^(0+128),w
 11696  120B  0086               	movwf	6
 11697  120C  3001               	movlw	1	; select bank2/3
 11698  120D  0087               	movwf	7
 11699  120E  3001               	movlw	1
 11700  120F  0781               	addwf	1,f
 11701  1210  3141               	addfsr 1,1
 11702  1211  1803               	skipnc
 11703  1212  0A81               	incf	1,f
 11704                           
 11705                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11706  1213  0A50               	incf	_LED^(0+128),w
 11707  1214  0086               	movwf	6
 11708  1215  3001               	movlw	1	; select bank2/3
 11709  1216  0087               	movwf	7
 11710  1217  3F40               	moviw [0]fsr1
 11711  1218  0020               	movlb	0	; select bank0
 11712  1219  00A3               	movwf	??_setLED_Main
 11713  121A  3F41               	moviw [1]fsr1
 11714  121B  00A4               	movwf	??_setLED_Main+1
 11715  121C  3000               	movlw	0
 11716  121D  0224               	subwf	??_setLED_Main+1,w
 11717  121E  3019               	movlw	25
 11718  121F  1903               	skipnz
 11719  1220  0223               	subwf	??_setLED_Main,w
 11720  1221  1C03               	skipc
 11721  1222  0008               	return
 11722                           
 11723                           ;LED_B1.c: 234: LED->Time = 0;
 11724  1223  0021               	movlb	1	; select bank1
 11725  1224  0A50               	incf	_LED^(0+128),w
 11726  1225  0086               	movwf	6
 11727  1226  3001               	movlw	1	; select bank2/3
 11728  1227  0087               	movwf	7
 11729  1228  3000               	movlw	0
 11730  1229  3FC0               	movwi [0]fsr1
 11731  122A  3FC1               	movwi [1]fsr1
 11732                           
 11733                           ;LED_B1.c: 252: if (led == 99) {
 11734  122B  0020               	movlb	0	; select bank0
 11735  122C  0825               	movf	setLED_Main@led,w
 11736  122D  3A63               	xorlw	99
 11737  122E  1D03               	skipz
 11738  122F  0008               	return
 11739                           
 11740                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11741  1230  3020               	movlw	32
 11742  1231  068D               	xorwf	13,f
 11743  1232  0008               	return
 11744  1233                     __end_of_setLED_Main:	
 11745                           
 11746                           	psect	text73
 11747  1B63                     __ptext73:	
 11748 ;; *************** function _LED_Initialization *****************
 11749 ;; Defined at:
 11750 ;;		line 31 in file "../src/LED_B1.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;		None
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;		None
 11755 ;; Return value:  Size  Location     Type
 11756 ;;		None               void
 11757 ;; Registers used:
 11758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11759 ;; Tracked objects:
 11760 ;;		On entry : 0/0
 11761 ;;		On exit  : 0/0
 11762 ;;		Unchanged: 0/0
 11763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;Total ram usage:        0 bytes
 11769 ;; Hardware stack levels used:    1
 11770 ;; Hardware stack levels required when called:    8
 11771 ;; This function calls:
 11772 ;;		_setLED_Initialization
 11773 ;; This function is called by:
 11774 ;;		_main
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           
 11779                           ;psect for function _LED_Initialization
 11780  1B63                     _LED_Initialization:	
 11781                           
 11782                           ;LED_B1.c: 42: setLED_Initialization(99);
 11783                           
 11784                           ;incstack = 0
 11785                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11786  1B63  3063               	movlw	99
 11787  1B64  319D  257D         	fcall	_setLED_Initialization
 11788  1B66  0008               	return
 11789  1B67                     __end_of_LED_Initialization:	
 11790                           
 11791                           	psect	text74
 11792  1D7D                     __ptext74:	
 11793 ;; *************** function _setLED_Initialization *****************
 11794 ;; Defined at:
 11795 ;;		line 74 in file "../src/LED_B1.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;  led             1    wreg     unsigned char 
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  led             1    5[BANK0 ] unsigned char 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;		None               void
 11802 ;; Registers used:
 11803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;Total ram usage:        1 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; Hardware stack levels required when called:    7
 11816 ;; This function calls:
 11817 ;;		_LedPointSelect
 11818 ;;		_setLED
 11819 ;; This function is called by:
 11820 ;;		_LED_Initialization
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           
 11825                           ;psect for function _setLED_Initialization
 11826  1D7D                     _setLED_Initialization:	
 11827                           
 11828                           ;incstack = 0
 11829                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11830                           ;setLED_Initialization@led stored from wreg
 11831  1D7D  0020               	movlb	0	; select bank0
 11832  1D7E  00A5               	movwf	setLED_Initialization@led
 11833                           
 11834                           ;LED_B1.c: 75: LedPointSelect(led);
 11835  1D7F  0825               	movf	setLED_Initialization@led,w
 11836  1D80  319C  245F  319D   	fcall	_LedPointSelect
 11837                           
 11838                           ;LED_B1.c: 76: LED->Enable = 1;
 11839  1D83  0021               	movlb	1	; select bank1
 11840  1D84  0850               	movf	_LED^(0+128),w
 11841  1D85  0086               	movwf	6
 11842  1D86  3001               	movlw	1	; select bank2/3
 11843  1D87  0087               	movwf	7
 11844  1D88  1401               	bsf	1,0
 11845                           
 11846                           ;LED_B1.c: 77: setLED(led, 0);
 11847  1D89  0020               	movlb	0	; select bank0
 11848  1D8A  01A3               	clrf	setLED@command
 11849  1D8B  0825               	movf	setLED_Initialization@led,w
 11850  1D8C  3192  22DA         	fcall	_setLED
 11851  1D8E  0008               	return
 11852  1D8F                     __end_of_setLED_Initialization:	
 11853                           
 11854                           	psect	text75
 11855  1390                     __ptext75:	
 11856 ;; *************** function _Flash_Memory_Main *****************
 11857 ;; Defined at:
 11858 ;;		line 971 in file "../src/MCU_B1.c"
 11859 ;; Parameters:    Size  Location     Type
 11860 ;;		None
 11861 ;; Auto vars:     Size  Location     Type
 11862 ;;  key_Status      1    8[BANK0 ] unsigned char 
 11863 ;; Return value:  Size  Location     Type
 11864 ;;		None               void
 11865 ;; Registers used:
 11866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11867 ;; Tracked objects:
 11868 ;;		On entry : 0/0
 11869 ;;		On exit  : 0/0
 11870 ;;		Unchanged: 0/0
 11871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;Total ram usage:        3 bytes
 11877 ;; Hardware stack levels used:    1
 11878 ;; Hardware stack levels required when called:    8
 11879 ;; This function calls:
 11880 ;;		_Flash_Memory_Modify
 11881 ;;		_getAll_Sw_KeyStatus
 11882 ;;		_getMain_All_LightsStatus
 11883 ;; This function is called by:
 11884 ;;		_main
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _Flash_Memory_Main
 11890  1390                     _Flash_Memory_Main:	
 11891                           
 11892                           ;MCU_B1.c: 972: char key_Status = 0;
 11893                           
 11894                           ;incstack = 0
 11895                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11896  1390  0020               	movlb	0	; select bank0
 11897  1391  01A8               	clrf	Flash_Memory_Main@key_Status
 11898                           
 11899                           ;MCU_B1.c: 974: key_Status = getAll_Sw_KeyStatus();
 11900  1392  319D  2515  3193   	fcall	_getAll_Sw_KeyStatus
 11901  1395  0020               	movlb	0	; select bank0
 11902  1396  00A7               	movwf	??_Flash_Memory_Main
 11903  1397  0827               	movf	??_Flash_Memory_Main,w
 11904  1398  00A8               	movwf	Flash_Memory_Main@key_Status
 11905                           
 11906                           ;MCU_B1.c: 976: if (Memory.Modify == 1) {
 11907  1399  0023               	movlb	3	; select bank3
 11908  139A  1C62               	btfss	(_Memory^(0+384)+36),0
 11909  139B  0008               	return
 11910                           
 11911                           ;MCU_B1.c: 977: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11912  139C  0020               	movlb	0	; select bank0
 11913  139D  01A9               	clrf	_Flash_Memory_Main$3098
 11914  139E  319B  23E2  3193   	fcall	_getMain_All_LightsStatus
 11915  13A1  3800               	iorlw	0
 11916  13A2  1D03               	skipz
 11917  13A3  2BAA               	goto	l9299
 11918  13A4  0020               	movlb	0	; select bank0
 11919  13A5  08A8               	movf	Flash_Memory_Main@key_Status,f
 11920  13A6  1D03               	skipz
 11921  13A7  2BAA               	goto	l9299
 11922  13A8  01A9               	clrf	_Flash_Memory_Main$3098
 11923  13A9  0AA9               	incf	_Flash_Memory_Main$3098,f
 11924  13AA                     l9299:	
 11925  13AA  0020               	movlb	0	; select bank0
 11926  13AB  0829               	movf	_Flash_Memory_Main$3098,w
 11927  13AC  0023               	movlb	3	; select bank3
 11928  13AD  10E2               	bcf	(_Memory^(0+384)+36),1
 11929  13AE  1D03               	skipz
 11930  13AF  14E2               	bsf	(_Memory^(0+384)+36),1
 11931                           
 11932                           ;MCU_B1.c: 978: if (Memory.GO == 1) {
 11933  13B0  1CE2               	btfss	(_Memory^(0+384)+36),1
 11934  13B1  2BCB               	goto	l1237
 11935                           
 11936                           ;MCU_B1.c: 979: Memory.Runtime = 1;
 11937  13B2  15E2               	bsf	(_Memory^(0+384)+36),3
 11938                           
 11939                           ;MCU_B1.c: 980: Memory.Time++;
 11940  13B3  3001               	movlw	1
 11941  13B4  07E0               	addwf	(_Memory^(0+384)+34),f
 11942  13B5  3000               	movlw	0
 11943  13B6  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11944                           
 11945                           ;MCU_B1.c: 981: if (Memory.Time == (200 / 20)) {
 11946  13B7  3022               	movlw	34
 11947  13B8  3EBE               	addlw	_Memory& (0+255)
 11948  13B9  0086               	movwf	6
 11949  13BA  3001               	movlw	1	; select bank3/4
 11950  13BB  0087               	movwf	7
 11951  13BC  3F40               	moviw [0]fsr1
 11952  13BD  3A0A               	xorlw	10
 11953  13BE  1D03               	skipz
 11954  13BF  2BC2               	goto	u10495
 11955  13C0  3F41               	moviw [1]fsr1
 11956  13C1  3A00               	xorlw	0
 11957  13C2                     u10495:	
 11958  13C2  1D03               	skipz
 11959  13C3  0008               	return
 11960                           
 11961                           ;MCU_B1.c: 982: Memory.Time = 0;
 11962  13C4  01E0               	clrf	(_Memory^(0+384)+34)
 11963  13C5  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11964                           
 11965                           ;MCU_B1.c: 983: Memory.Modify = 0;
 11966  13C6  1062               	bcf	(_Memory^(0+384)+36),0
 11967                           
 11968                           ;MCU_B1.c: 984: Memory.GO = 0;
 11969  13C7  10E2               	bcf	(_Memory^(0+384)+36),1
 11970                           
 11971                           ;MCU_B1.c: 985: Flash_Memory_Modify();
 11972  13C8  318B  232C         	fcall	_Flash_Memory_Modify
 11973                           
 11974                           ;MCU_B1.c: 986: }
 11975                           ;MCU_B1.c: 987: } else {
 11976  13CA  0008               	return
 11977  13CB                     l1237:	
 11978                           
 11979                           ;MCU_B1.c: 988: if (Memory.Runtime == 1) {
 11980  13CB  1DE2               	btfss	(_Memory^(0+384)+36),3
 11981  13CC  0008               	return
 11982                           
 11983                           ;MCU_B1.c: 989: Memory.Runtime = 0;
 11984  13CD  11E2               	bcf	(_Memory^(0+384)+36),3
 11985                           
 11986                           ;MCU_B1.c: 990: Memory.Time = 0;
 11987  13CE  01E0               	clrf	(_Memory^(0+384)+34)
 11988  13CF  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11989  13D0  0008               	return
 11990  13D1                     __end_of_Flash_Memory_Main:	
 11991                           
 11992                           	psect	text76
 11993  1D15                     __ptext76:	
 11994 ;; *************** function _getAll_Sw_KeyStatus *****************
 11995 ;; Defined at:
 11996 ;;		line 278 in file "../src/Switch_B1.c"
 11997 ;; Parameters:    Size  Location     Type
 11998 ;;		None
 11999 ;; Auto vars:     Size  Location     Type
 12000 ;;  status          1    2[BANK0 ] unsigned char 
 12001 ;; Return value:  Size  Location     Type
 12002 ;;                  1    wreg      unsigned char 
 12003 ;; Registers used:
 12004 ;;		wreg, status,2
 12005 ;; Tracked objects:
 12006 ;;		On entry : 0/0
 12007 ;;		On exit  : 0/0
 12008 ;;		Unchanged: 0/0
 12009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;Total ram usage:        3 bytes
 12015 ;; Hardware stack levels used:    1
 12016 ;; Hardware stack levels required when called:    5
 12017 ;; This function calls:
 12018 ;;		Nothing
 12019 ;; This function is called by:
 12020 ;;		_Flash_Memory_Main
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           
 12025                           ;psect for function _getAll_Sw_KeyStatus
 12026  1D15                     _getAll_Sw_KeyStatus:	
 12027                           
 12028                           ;Switch_B1.c: 279: char status = 0;
 12029                           
 12030                           ;incstack = 0
 12031                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12032  1D15  0020               	movlb	0	; select bank0
 12033  1D16  01A2               	clrf	getAll_Sw_KeyStatus@status
 12034                           
 12035                           ;Switch_B1.c: 302: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12036  1D17  01A3               	clrf	_getAll_Sw_KeyStatus$6339
 12037  1D18  0AA3               	incf	_getAll_Sw_KeyStatus$6339,f
 12038  1D19  1F0C               	btfss	12,6	;volatile
 12039  1D1A  1A0C               	btfsc	12,4	;volatile
 12040  1D1B  2D20               	goto	l7267
 12041  1D1C  1C0C               	btfss	12,0	;volatile
 12042  1D1D  1B8C               	btfsc	12,7	;volatile
 12043  1D1E  2D20               	goto	l7267
 12044  1D1F  01A3               	clrf	_getAll_Sw_KeyStatus$6339
 12045  1D20                     l7267:	
 12046  1D20  0823               	movf	_getAll_Sw_KeyStatus$6339,w
 12047  1D21  00A1               	movwf	??_getAll_Sw_KeyStatus
 12048  1D22  0821               	movf	??_getAll_Sw_KeyStatus,w
 12049  1D23  00A2               	movwf	getAll_Sw_KeyStatus@status
 12050                           
 12051                           ;Switch_B1.c: 306: return status;
 12052  1D24  0822               	movf	getAll_Sw_KeyStatus@status,w
 12053  1D25  0008               	return
 12054  1D26                     __end_of_getAll_Sw_KeyStatus:	
 12055                           
 12056                           	psect	text77
 12057  0B2C                     __ptext77:	
 12058 ;; *************** function _Flash_Memory_Modify *****************
 12059 ;; Defined at:
 12060 ;;		line 1048 in file "../src/MCU_B1.c"
 12061 ;; Parameters:    Size  Location     Type
 12062 ;;		None
 12063 ;; Auto vars:     Size  Location     Type
 12064 ;;  i               1    6[BANK0 ] unsigned char 
 12065 ;; Return value:  Size  Location     Type
 12066 ;;		None               void
 12067 ;; Registers used:
 12068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12069 ;; Tracked objects:
 12070 ;;		On entry : 0/0
 12071 ;;		On exit  : 0/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;Total ram usage:        2 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; Hardware stack levels required when called:    7
 12081 ;; This function calls:
 12082 ;;		_Flash_Memory_Erasing
 12083 ;;		_Flash_Memory_Read
 12084 ;;		_Flash_Memory_Write
 12085 ;;		_setMemory_Data
 12086 ;; This function is called by:
 12087 ;;		_Flash_Memory_Main
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           
 12092                           ;psect for function _Flash_Memory_Modify
 12093  0B2C                     _Flash_Memory_Modify:	
 12094                           
 12095                           ;MCU_B1.c: 1049: char i = 0;
 12096                           
 12097                           ;incstack = 0
 12098                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12099  0B2C  0020               	movlb	0	; select bank0
 12100  0B2D  01A6               	clrf	Flash_Memory_Modify@i
 12101                           
 12102                           ;MCU_B1.c: 1050: for (i = 0; i < 32; i++) {
 12103  0B2E  01A6               	clrf	Flash_Memory_Modify@i
 12104  0B2F  3020               	movlw	32
 12105  0B30  0226               	subwf	Flash_Memory_Modify@i,w
 12106  0B31  1803               	btfsc	3,0
 12107  0B32  2B48               	goto	l7285
 12108  0B33                     l7279:	
 12109                           
 12110                           ;MCU_B1.c: 1051: Memory.Data[i] = Flash_Memory_Read(i);
 12111  0B33  0826               	movf	Flash_Memory_Modify@i,w
 12112  0B34  319F  2722  318B   	fcall	_Flash_Memory_Read
 12113  0B37  0020               	movlb	0	; select bank0
 12114  0B38  00A5               	movwf	??_Flash_Memory_Modify
 12115  0B39  0826               	movf	Flash_Memory_Modify@i,w
 12116  0B3A  3EBE               	addlw	_Memory& (0+255)
 12117  0B3B  0086               	movwf	6
 12118  0B3C  3001               	movlw	1	; select bank3/4
 12119  0B3D  0087               	movwf	7
 12120  0B3E  0825               	movf	??_Flash_Memory_Modify,w
 12121  0B3F  0081               	movwf	1
 12122  0B40  3001               	movlw	1
 12123  0B41  00A5               	movwf	??_Flash_Memory_Modify
 12124  0B42  0825               	movf	??_Flash_Memory_Modify,w
 12125  0B43  07A6               	addwf	Flash_Memory_Modify@i,f
 12126  0B44  3020               	movlw	32
 12127  0B45  0226               	subwf	Flash_Memory_Modify@i,w
 12128  0B46  1C03               	skipc
 12129  0B47  2B33               	goto	l7279
 12130  0B48                     l7285:	
 12131                           
 12132                           ;MCU_B1.c: 1052: }
 12133                           ;MCU_B1.c: 1053: setMemory_Data(0, product->Data[12]);
 12134  0B48  0021               	movlb	1	; select bank1
 12135  0B49  086D               	movf	_product^(0+128),w
 12136  0B4A  0086               	movwf	6
 12137  0B4B  3002               	movlw	2	; select bank4/5
 12138  0B4C  0087               	movwf	7
 12139  0B4D  3002               	movlw	2	; select bank4/5
 12140  0B4E  3F4C               	moviw [12]fsr1
 12141  0B4F  0020               	movlb	0	; select bank0
 12142  0B50  00A1               	movwf	setMemory_Data@data
 12143  0B51  3000               	movlw	0
 12144  0B52  319C  246B  318B   	fcall	_setMemory_Data
 12145                           
 12146                           ;MCU_B1.c: 1054: setMemory_Data(1, product->Data[13]);
 12147  0B55  0021               	movlb	1	; select bank1
 12148  0B56  086D               	movf	_product^(0+128),w
 12149  0B57  0086               	movwf	6
 12150  0B58  3002               	movlw	2	; select bank4/5
 12151  0B59  0087               	movwf	7
 12152  0B5A  3002               	movlw	2	; select bank4/5
 12153  0B5B  3F4D               	moviw [13]fsr1
 12154  0B5C  0020               	movlb	0	; select bank0
 12155  0B5D  00A1               	movwf	setMemory_Data@data
 12156  0B5E  3001               	movlw	1
 12157  0B5F  319C  246B  318B   	fcall	_setMemory_Data
 12158                           
 12159                           ;MCU_B1.c: 1055: setMemory_Data(2, product->Data[14]);
 12160  0B62  0021               	movlb	1	; select bank1
 12161  0B63  086D               	movf	_product^(0+128),w
 12162  0B64  0086               	movwf	6
 12163  0B65  3002               	movlw	2	; select bank4/5
 12164  0B66  0087               	movwf	7
 12165  0B67  3002               	movlw	2	; select bank4/5
 12166  0B68  3F4E               	moviw [14]fsr1
 12167  0B69  0020               	movlb	0	; select bank0
 12168  0B6A  00A1               	movwf	setMemory_Data@data
 12169  0B6B  3002               	movlw	2
 12170  0B6C  319C  246B  318B   	fcall	_setMemory_Data
 12171                           
 12172                           ;MCU_B1.c: 1057: setMemory_Data(3, product->Data[21]);
 12173  0B6F  0021               	movlb	1	; select bank1
 12174  0B70  086D               	movf	_product^(0+128),w
 12175  0B71  0086               	movwf	6
 12176  0B72  3002               	movlw	2	; select bank4/5
 12177  0B73  0087               	movwf	7
 12178  0B74  3002               	movlw	2	; select bank4/5
 12179  0B75  3F55               	moviw [21]fsr1
 12180  0B76  0020               	movlb	0	; select bank0
 12181  0B77  00A1               	movwf	setMemory_Data@data
 12182  0B78  3003               	movlw	3
 12183  0B79  319C  246B  318B   	fcall	_setMemory_Data
 12184                           
 12185                           ;MCU_B1.c: 1058: setMemory_Data(4, product->Data[22]);
 12186  0B7C  0021               	movlb	1	; select bank1
 12187  0B7D  086D               	movf	_product^(0+128),w
 12188  0B7E  0086               	movwf	6
 12189  0B7F  3002               	movlw	2	; select bank4/5
 12190  0B80  0087               	movwf	7
 12191  0B81  3002               	movlw	2	; select bank4/5
 12192  0B82  3F56               	moviw [22]fsr1
 12193  0B83  0020               	movlb	0	; select bank0
 12194  0B84  00A1               	movwf	setMemory_Data@data
 12195  0B85  3004               	movlw	4
 12196  0B86  319C  246B  318B   	fcall	_setMemory_Data
 12197                           
 12198                           ;MCU_B1.c: 1059: setMemory_Data(5, product->Data[23]);
 12199  0B89  0021               	movlb	1	; select bank1
 12200  0B8A  086D               	movf	_product^(0+128),w
 12201  0B8B  0086               	movwf	6
 12202  0B8C  3002               	movlw	2	; select bank4/5
 12203  0B8D  0087               	movwf	7
 12204  0B8E  3002               	movlw	2	; select bank4/5
 12205  0B8F  3F57               	moviw [23]fsr1
 12206  0B90  0020               	movlb	0	; select bank0
 12207  0B91  00A1               	movwf	setMemory_Data@data
 12208  0B92  3005               	movlw	5
 12209  0B93  319C  246B  318B   	fcall	_setMemory_Data
 12210                           
 12211                           ;MCU_B1.c: 1061: if (Memory.LoopSave == 1) {
 12212  0B96  0023               	movlb	3	; select bank3
 12213  0B97  1D62               	btfss	(_Memory^(0+384)+36),2
 12214  0B98  2B9D               	goto	l1260
 12215                           
 12216                           ;MCU_B1.c: 1062: Memory.LoopSave = 0;
 12217  0B99  1162               	bcf	(_Memory^(0+384)+36),2
 12218                           
 12219                           ;MCU_B1.c: 1063: myMain.FirstOpen = 0;
 12220  0B9A  0022               	movlb	2	; select bank2
 12221  0B9B  11A0               	bcf	_myMain^(0+256),3
 12222                           
 12223                           ;MCU_B1.c: 1064: myMain.First = 0;
 12224  0B9C  12A0               	bcf	_myMain^(0+256),5
 12225  0B9D                     l1260:	
 12226                           
 12227                           ;MCU_B1.c: 1066: }
 12228                           ;MCU_B1.c: 1067: GIE = 0;
 12229  0B9D  138B               	bcf	11,7	;volatile
 12230                           
 12231                           ;MCU_B1.c: 1068: Flash_Memory_Erasing();
 12232  0B9E  319C  2477  318B   	fcall	_Flash_Memory_Erasing
 12233                           
 12234                           ;MCU_B1.c: 1069: Flash_Memory_Write();
 12235  0BA1  3191  2132         	fcall	_Flash_Memory_Write
 12236                           
 12237                           ;MCU_B1.c: 1070: GIE = 1;
 12238  0BA3  178B               	bsf	11,7	;volatile
 12239  0BA4  0008               	return
 12240  0BA5                     __end_of_Flash_Memory_Modify:	
 12241                           
 12242                           	psect	text78
 12243  1C77                     __ptext78:	
 12244 ;; *************** function _Flash_Memory_Erasing *****************
 12245 ;; Defined at:
 12246 ;;		line 1037 in file "../src/MCU_B1.c"
 12247 ;; Parameters:    Size  Location     Type
 12248 ;;		None
 12249 ;; Auto vars:     Size  Location     Type
 12250 ;;		None
 12251 ;; Return value:  Size  Location     Type
 12252 ;;		None               void
 12253 ;; Registers used:
 12254 ;;		wreg, status,2, status,0, pclath, cstack
 12255 ;; Tracked objects:
 12256 ;;		On entry : 0/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;Total ram usage:        0 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; Hardware stack levels required when called:    6
 12267 ;; This function calls:
 12268 ;;		_Flash_Memory_Unlock
 12269 ;; This function is called by:
 12270 ;;		_Flash_Memory_Modify
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           
 12275                           ;psect for function _Flash_Memory_Erasing
 12276  1C77                     _Flash_Memory_Erasing:	
 12277                           
 12278                           ;MCU_B1.c: 1038: CFGS = 0;
 12279                           
 12280                           ;incstack = 0
 12281                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12282  1C77  0023               	movlb	3	; select bank3
 12283  1C78  1315               	bcf	21,6	;volatile
 12284                           
 12285                           ;MCU_B1.c: 1039: PMADRH = 0x30;
 12286  1C79  3030               	movlw	48
 12287  1C7A  0092               	movwf	18	;volatile
 12288                           
 12289                           ;MCU_B1.c: 1040: PMADRL = 0x00;
 12290  1C7B  0191               	clrf	17	;volatile
 12291                           
 12292                           ;MCU_B1.c: 1041: FREE = 1;
 12293  1C7C  1615               	bsf	21,4	;volatile
 12294                           
 12295                           ;MCU_B1.c: 1042: WREN = 1;
 12296  1C7D  1515               	bsf	21,2	;volatile
 12297                           
 12298                           ;MCU_B1.c: 1043: Flash_Memory_Unlock();
 12299  1C7E  319B  23D9         	fcall	_Flash_Memory_Unlock
 12300                           
 12301                           ;MCU_B1.c: 1044: WREN = 0;
 12302  1C80  0023               	movlb	3	; select bank3
 12303  1C81  1115               	bcf	21,2	;volatile
 12304  1C82  0008               	return
 12305  1C83                     __end_of_Flash_Memory_Erasing:	
 12306                           
 12307                           	psect	text79
 12308  0476                     __ptext79:	
 12309 ;; *************** function _Flash_Memory_Initialization *****************
 12310 ;; Defined at:
 12311 ;;		line 930 in file "../src/MCU_B1.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;		None
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;  i               1   68[BANK0 ] unsigned char 
 12316 ;; Return value:  Size  Location     Type
 12317 ;;		None               void
 12318 ;; Registers used:
 12319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;Total ram usage:        2 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:    8
 12332 ;; This function calls:
 12333 ;;		_Flash_Memory_Read
 12334 ;;		_Flash_Memory_Write
 12335 ;;		_getDimmerLights_ValueToPercent
 12336 ;;		_setMemory_Data
 12337 ;; This function is called by:
 12338 ;;		_main
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           
 12343                           ;psect for function _Flash_Memory_Initialization
 12344  0476                     _Flash_Memory_Initialization:	
 12345                           
 12346                           ;MCU_B1.c: 931: char i = 0;
 12347                           
 12348                           ;incstack = 0
 12349                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12350  0476  0020               	movlb	0	; select bank0
 12351  0477  01E4               	clrf	Flash_Memory_Initialization@i
 12352                           
 12353                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12354  0478  301F               	movlw	31
 12355  0479  319F  2722  3184   	fcall	_Flash_Memory_Read
 12356  047C  3AAA               	xorlw	170
 12357  047D  1D03               	skipz
 12358  047E  2CF9               	goto	l9253
 12359                           
 12360                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12361  047F  3000               	movlw	0
 12362  0480  319F  2722  3184   	fcall	_Flash_Memory_Read
 12363  0483  0020               	movlb	0	; select bank0
 12364  0484  00E3               	movwf	??_Flash_Memory_Initialization
 12365  0485  0021               	movlb	1	; select bank1
 12366  0486  086D               	movf	_product^(0+128),w
 12367  0487  3E0C               	addlw	12
 12368  0488  0086               	movwf	6
 12369  0489  3002               	movlw	2	; select bank4/5
 12370  048A  0087               	movwf	7
 12371  048B  0020               	movlb	0	; select bank0
 12372  048C  0863               	movf	??_Flash_Memory_Initialization,w
 12373  048D  0081               	movwf	1
 12374                           
 12375                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12376  048E  3001               	movlw	1
 12377  048F  319F  2722  3184   	fcall	_Flash_Memory_Read
 12378  0492  0020               	movlb	0	; select bank0
 12379  0493  00E3               	movwf	??_Flash_Memory_Initialization
 12380  0494  0021               	movlb	1	; select bank1
 12381  0495  086D               	movf	_product^(0+128),w
 12382  0496  3E0D               	addlw	13
 12383  0497  0086               	movwf	6
 12384  0498  3002               	movlw	2	; select bank4/5
 12385  0499  0087               	movwf	7
 12386  049A  0020               	movlb	0	; select bank0
 12387  049B  0863               	movf	??_Flash_Memory_Initialization,w
 12388  049C  0081               	movwf	1
 12389                           
 12390                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12391  049D  3002               	movlw	2
 12392  049E  319F  2722  3184   	fcall	_Flash_Memory_Read
 12393  04A1  0020               	movlb	0	; select bank0
 12394  04A2  00E3               	movwf	??_Flash_Memory_Initialization
 12395  04A3  0021               	movlb	1	; select bank1
 12396  04A4  086D               	movf	_product^(0+128),w
 12397  04A5  3E0E               	addlw	14
 12398  04A6  0086               	movwf	6
 12399  04A7  3002               	movlw	2	; select bank4/5
 12400  04A8  0087               	movwf	7
 12401  04A9  0020               	movlb	0	; select bank0
 12402  04AA  0863               	movf	??_Flash_Memory_Initialization,w
 12403  04AB  0081               	movwf	1
 12404                           
 12405                           ;MCU_B1.c: 937: product->Data[21] = Flash_Memory_Read(3);
 12406  04AC  3003               	movlw	3
 12407  04AD  319F  2722  3184   	fcall	_Flash_Memory_Read
 12408  04B0  0020               	movlb	0	; select bank0
 12409  04B1  00E3               	movwf	??_Flash_Memory_Initialization
 12410  04B2  0021               	movlb	1	; select bank1
 12411  04B3  086D               	movf	_product^(0+128),w
 12412  04B4  3E15               	addlw	21
 12413  04B5  0086               	movwf	6
 12414  04B6  3002               	movlw	2	; select bank4/5
 12415  04B7  0087               	movwf	7
 12416  04B8  0020               	movlb	0	; select bank0
 12417  04B9  0863               	movf	??_Flash_Memory_Initialization,w
 12418  04BA  0081               	movwf	1
 12419                           
 12420                           ;MCU_B1.c: 938: product->Data[22] = Flash_Memory_Read(4);
 12421  04BB  3004               	movlw	4
 12422  04BC  319F  2722  3184   	fcall	_Flash_Memory_Read
 12423  04BF  0020               	movlb	0	; select bank0
 12424  04C0  00E3               	movwf	??_Flash_Memory_Initialization
 12425  04C1  0021               	movlb	1	; select bank1
 12426  04C2  086D               	movf	_product^(0+128),w
 12427  04C3  3E16               	addlw	22
 12428  04C4  0086               	movwf	6
 12429  04C5  3002               	movlw	2	; select bank4/5
 12430  04C6  0087               	movwf	7
 12431  04C7  0020               	movlb	0	; select bank0
 12432  04C8  0863               	movf	??_Flash_Memory_Initialization,w
 12433  04C9  0081               	movwf	1
 12434                           
 12435                           ;MCU_B1.c: 939: product->Data[23] = Flash_Memory_Read(5);
 12436  04CA  3005               	movlw	5
 12437  04CB  319F  2722  3184   	fcall	_Flash_Memory_Read
 12438  04CE  0020               	movlb	0	; select bank0
 12439  04CF  00E3               	movwf	??_Flash_Memory_Initialization
 12440  04D0  0021               	movlb	1	; select bank1
 12441  04D1  086D               	movf	_product^(0+128),w
 12442  04D2  3E17               	addlw	23
 12443  04D3  0086               	movwf	6
 12444  04D4  3002               	movlw	2	; select bank4/5
 12445  04D5  0087               	movwf	7
 12446  04D6  0020               	movlb	0	; select bank0
 12447  04D7  0863               	movf	??_Flash_Memory_Initialization,w
 12448  04D8  0081               	movwf	1
 12449                           
 12450                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12451  04D9  0021               	movlb	1	; select bank1
 12452  04DA  086D               	movf	_product^(0+128),w
 12453  04DB  3E0C               	addlw	12
 12454  04DC  0086               	movwf	6
 12455  04DD  3002               	movlw	2	; select bank4/5
 12456  04DE  0087               	movwf	7
 12457  04DF  0801               	movf	1,w
 12458  04E0  3AFF               	xorlw	255
 12459  04E1  1D03               	skipz
 12460  04E2  0008               	return
 12461  04E3  086D               	movf	_product^(0+128),w
 12462  04E4  3E0D               	addlw	13
 12463  04E5  0086               	movwf	6
 12464  04E6  3002               	movlw	2	; select bank4/5
 12465  04E7  0087               	movwf	7
 12466  04E8  0801               	movf	1,w
 12467  04E9  3AFF               	xorlw	255
 12468  04EA  1D03               	skipz
 12469  04EB  0008               	return
 12470  04EC  086D               	movf	_product^(0+128),w
 12471  04ED  3E0E               	addlw	14
 12472  04EE  0086               	movwf	6
 12473  04EF  3002               	movlw	2	; select bank4/5
 12474  04F0  0087               	movwf	7
 12475  04F1  0801               	movf	1,w
 12476  04F2  3AFF               	xorlw	255
 12477  04F3  1D03               	skipz
 12478  04F4  0008               	return
 12479                           
 12480                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12481  04F5  0022               	movlb	2	; select bank2
 12482  04F6  15A0               	bsf	_myMain^(0+256),3
 12483                           
 12484                           ;MCU_B1.c: 948: myMain.First = 1;
 12485  04F7  16A0               	bsf	_myMain^(0+256),5
 12486                           
 12487                           ;MCU_B1.c: 949: }
 12488                           ;MCU_B1.c: 950: } else {
 12489  04F8  0008               	return
 12490  04F9                     l9253:	
 12491                           
 12492                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(60*0.78)));
 12493  04F9  302E               	movlw	46
 12494  04FA  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12495  04FD  0020               	movlb	0	; select bank0
 12496  04FE  00E3               	movwf	??_Flash_Memory_Initialization
 12497  04FF  0863               	movf	??_Flash_Memory_Initialization,w
 12498  0500  00E4               	movwf	Flash_Memory_Initialization@i
 12499                           
 12500                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12501  0501  30FF               	movlw	255
 12502  0502  00E3               	movwf	??_Flash_Memory_Initialization
 12503  0503  0863               	movf	??_Flash_Memory_Initialization,w
 12504  0504  00A1               	movwf	setMemory_Data@data
 12505  0505  3000               	movlw	0
 12506  0506  319C  246B  3184   	fcall	_setMemory_Data
 12507                           
 12508                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12509  0509  30FF               	movlw	255
 12510  050A  0020               	movlb	0	; select bank0
 12511  050B  00E3               	movwf	??_Flash_Memory_Initialization
 12512  050C  0863               	movf	??_Flash_Memory_Initialization,w
 12513  050D  00A1               	movwf	setMemory_Data@data
 12514  050E  3001               	movlw	1
 12515  050F  319C  246B  3184   	fcall	_setMemory_Data
 12516                           
 12517                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12518  0512  30FF               	movlw	255
 12519  0513  0020               	movlb	0	; select bank0
 12520  0514  00E3               	movwf	??_Flash_Memory_Initialization
 12521  0515  0863               	movf	??_Flash_Memory_Initialization,w
 12522  0516  00A1               	movwf	setMemory_Data@data
 12523  0517  3002               	movlw	2
 12524  0518  319C  246B  3184   	fcall	_setMemory_Data
 12525                           
 12526                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12527  051B  30FF               	movlw	255
 12528  051C  0020               	movlb	0	; select bank0
 12529  051D  00E3               	movwf	??_Flash_Memory_Initialization
 12530  051E  0863               	movf	??_Flash_Memory_Initialization,w
 12531  051F  00A1               	movwf	setMemory_Data@data
 12532  0520  3003               	movlw	3
 12533  0521  319C  246B  3184   	fcall	_setMemory_Data
 12534                           
 12535                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12536  0524  30FF               	movlw	255
 12537  0525  0020               	movlb	0	; select bank0
 12538  0526  00E3               	movwf	??_Flash_Memory_Initialization
 12539  0527  0863               	movf	??_Flash_Memory_Initialization,w
 12540  0528  00A1               	movwf	setMemory_Data@data
 12541  0529  3004               	movlw	4
 12542  052A  319C  246B  3184   	fcall	_setMemory_Data
 12543                           
 12544                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12545  052D  30FF               	movlw	255
 12546  052E  0020               	movlb	0	; select bank0
 12547  052F  00E3               	movwf	??_Flash_Memory_Initialization
 12548  0530  0863               	movf	??_Flash_Memory_Initialization,w
 12549  0531  00A1               	movwf	setMemory_Data@data
 12550  0532  3005               	movlw	5
 12551  0533  319C  246B  3184   	fcall	_setMemory_Data
 12552                           
 12553                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12554  0536  30AA               	movlw	170
 12555  0537  0020               	movlb	0	; select bank0
 12556  0538  00E3               	movwf	??_Flash_Memory_Initialization
 12557  0539  0863               	movf	??_Flash_Memory_Initialization,w
 12558  053A  00A1               	movwf	setMemory_Data@data
 12559  053B  301F               	movlw	31
 12560  053C  319C  246B  3184   	fcall	_setMemory_Data
 12561                           
 12562                           ;MCU_B1.c: 959: product->Data[21] = i;
 12563  053F  0020               	movlb	0	; select bank0
 12564  0540  0864               	movf	Flash_Memory_Initialization@i,w
 12565  0541  00E3               	movwf	??_Flash_Memory_Initialization
 12566  0542  0021               	movlb	1	; select bank1
 12567  0543  086D               	movf	_product^(0+128),w
 12568  0544  3E15               	addlw	21
 12569  0545  0086               	movwf	6
 12570  0546  3002               	movlw	2	; select bank4/5
 12571  0547  0087               	movwf	7
 12572  0548  0020               	movlb	0	; select bank0
 12573  0549  0863               	movf	??_Flash_Memory_Initialization,w
 12574  054A  0081               	movwf	1
 12575                           
 12576                           ;MCU_B1.c: 960: product->Data[22] = i;
 12577  054B  0864               	movf	Flash_Memory_Initialization@i,w
 12578  054C  00E3               	movwf	??_Flash_Memory_Initialization
 12579  054D  0021               	movlb	1	; select bank1
 12580  054E  086D               	movf	_product^(0+128),w
 12581  054F  3E16               	addlw	22
 12582  0550  0086               	movwf	6
 12583  0551  3002               	movlw	2	; select bank4/5
 12584  0552  0087               	movwf	7
 12585  0553  0020               	movlb	0	; select bank0
 12586  0554  0863               	movf	??_Flash_Memory_Initialization,w
 12587  0555  0081               	movwf	1
 12588                           
 12589                           ;MCU_B1.c: 961: product->Data[23] = i;
 12590  0556  0864               	movf	Flash_Memory_Initialization@i,w
 12591  0557  00E3               	movwf	??_Flash_Memory_Initialization
 12592  0558  0021               	movlb	1	; select bank1
 12593  0559  086D               	movf	_product^(0+128),w
 12594  055A  3E17               	addlw	23
 12595  055B  0086               	movwf	6
 12596  055C  3002               	movlw	2	; select bank4/5
 12597  055D  0087               	movwf	7
 12598  055E  0020               	movlb	0	; select bank0
 12599  055F  0863               	movf	??_Flash_Memory_Initialization,w
 12600  0560  0081               	movwf	1
 12601                           
 12602                           ;MCU_B1.c: 962: GIE = 0;
 12603  0561  138B               	bcf	11,7	;volatile
 12604                           
 12605                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12606  0562  3191  2132         	fcall	_Flash_Memory_Write
 12607                           
 12608                           ;MCU_B1.c: 964: GIE = 1;
 12609  0564  178B               	bsf	11,7	;volatile
 12610                           
 12611                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12612  0565  0022               	movlb	2	; select bank2
 12613  0566  15A0               	bsf	_myMain^(0+256),3
 12614                           
 12615                           ;MCU_B1.c: 966: myMain.First = 1;
 12616  0567  16A0               	bsf	_myMain^(0+256),5
 12617  0568  0008               	return
 12618  0569                     __end_of_Flash_Memory_Initialization:	
 12619                           
 12620                           	psect	text80
 12621  1C6B                     __ptext80:	
 12622 ;; *************** function _setMemory_Data *****************
 12623 ;; Defined at:
 12624 ;;		line 1085 in file "../src/MCU_B1.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;  address         1    wreg     unsigned char 
 12627 ;;  data            1    1[BANK0 ] unsigned char 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  address         1    3[BANK0 ] unsigned char 
 12630 ;; Return value:  Size  Location     Type
 12631 ;;		None               void
 12632 ;; Registers used:
 12633 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12634 ;; Tracked objects:
 12635 ;;		On entry : 0/0
 12636 ;;		On exit  : 0/0
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12639 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;Total ram usage:        3 bytes
 12644 ;; Hardware stack levels used:    1
 12645 ;; Hardware stack levels required when called:    5
 12646 ;; This function calls:
 12647 ;;		Nothing
 12648 ;; This function is called by:
 12649 ;;		_Flash_Memory_Initialization
 12650 ;;		_Flash_Memory_Modify
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _setMemory_Data
 12656  1C6B                     _setMemory_Data:	
 12657                           
 12658                           ;incstack = 0
 12659                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12660                           ;setMemory_Data@address stored from wreg
 12661  1C6B  0020               	movlb	0	; select bank0
 12662  1C6C  00A3               	movwf	setMemory_Data@address
 12663                           
 12664                           ;MCU_B1.c: 1086: Memory.Data[address] = data;
 12665  1C6D  0821               	movf	setMemory_Data@data,w
 12666  1C6E  00A2               	movwf	??_setMemory_Data
 12667  1C6F  0823               	movf	setMemory_Data@address,w
 12668  1C70  3EBE               	addlw	_Memory& (0+255)
 12669  1C71  0086               	movwf	6
 12670  1C72  3001               	movlw	1	; select bank3/4
 12671  1C73  0087               	movwf	7
 12672  1C74  0822               	movf	??_setMemory_Data,w
 12673  1C75  0081               	movwf	1
 12674  1C76  0008               	return
 12675  1C77                     __end_of_setMemory_Data:	
 12676                           
 12677                           	psect	text81
 12678  1132                     __ptext81:	
 12679 ;; *************** function _Flash_Memory_Write *****************
 12680 ;; Defined at:
 12681 ;;		line 1018 in file "../src/MCU_B1.c"
 12682 ;; Parameters:    Size  Location     Type
 12683 ;;		None
 12684 ;; Auto vars:     Size  Location     Type
 12685 ;;  i               1    2[BANK0 ] unsigned char 
 12686 ;; Return value:  Size  Location     Type
 12687 ;;		None               void
 12688 ;; Registers used:
 12689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12690 ;; Tracked objects:
 12691 ;;		On entry : 0/0
 12692 ;;		On exit  : 0/0
 12693 ;;		Unchanged: 0/0
 12694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;Total ram usage:        2 bytes
 12700 ;; Hardware stack levels used:    1
 12701 ;; Hardware stack levels required when called:    6
 12702 ;; This function calls:
 12703 ;;		_Flash_Memory_Unlock
 12704 ;; This function is called by:
 12705 ;;		_Flash_Memory_Initialization
 12706 ;;		_Flash_Memory_Modify
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           
 12711                           ;psect for function _Flash_Memory_Write
 12712  1132                     _Flash_Memory_Write:	
 12713                           
 12714                           ;MCU_B1.c: 1019: char i = 0;
 12715                           
 12716                           ;incstack = 0
 12717                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12718  1132  0020               	movlb	0	; select bank0
 12719  1133  01A2               	clrf	Flash_Memory_Write@i
 12720                           
 12721                           ;MCU_B1.c: 1020: CFGS = 0;
 12722  1134  0023               	movlb	3	; select bank3
 12723  1135  1315               	bcf	21,6	;volatile
 12724                           
 12725                           ;MCU_B1.c: 1021: PMADRH = 0x30;
 12726  1136  3030               	movlw	48
 12727  1137  0092               	movwf	18	;volatile
 12728                           
 12729                           ;MCU_B1.c: 1022: PMDATH = 0;
 12730  1138  0194               	clrf	20	;volatile
 12731                           
 12732                           ;MCU_B1.c: 1023: FREE = 0;
 12733  1139  1215               	bcf	21,4	;volatile
 12734                           
 12735                           ;MCU_B1.c: 1024: LWLO = 1;
 12736  113A  1695               	bsf	21,5	;volatile
 12737                           
 12738                           ;MCU_B1.c: 1025: WREN = 1;
 12739  113B  1515               	bsf	21,2	;volatile
 12740                           
 12741                           ;MCU_B1.c: 1026: for (i = 0; i < 32; i++) {
 12742  113C  0020               	movlb	0	; select bank0
 12743  113D  01A2               	clrf	Flash_Memory_Write@i
 12744  113E  3020               	movlw	32
 12745  113F  0222               	subwf	Flash_Memory_Write@i,w
 12746  1140  1803               	btfsc	3,0
 12747  1141  295A               	goto	l1251
 12748  1142                     l6845:	
 12749                           
 12750                           ;MCU_B1.c: 1027: PMADRL = i;
 12751  1142  0822               	movf	Flash_Memory_Write@i,w
 12752  1143  0023               	movlb	3	; select bank3
 12753  1144  0091               	movwf	17	;volatile
 12754                           
 12755                           ;MCU_B1.c: 1028: PMDATL = Memory.Data[i];
 12756  1145  0020               	movlb	0	; select bank0
 12757  1146  0822               	movf	Flash_Memory_Write@i,w
 12758  1147  3EBE               	addlw	_Memory& (0+255)
 12759  1148  0086               	movwf	6
 12760  1149  3001               	movlw	1	; select bank3/4
 12761  114A  0087               	movwf	7
 12762  114B  0801               	movf	1,w
 12763  114C  0023               	movlb	3	; select bank3
 12764  114D  0093               	movwf	19	;volatile
 12765                           
 12766                           ;MCU_B1.c: 1029: Flash_Memory_Unlock();
 12767  114E  319B  23D9  3191   	fcall	_Flash_Memory_Unlock
 12768  1151  3001               	movlw	1
 12769  1152  0020               	movlb	0	; select bank0
 12770  1153  00A1               	movwf	??_Flash_Memory_Write
 12771  1154  0821               	movf	??_Flash_Memory_Write,w
 12772  1155  07A2               	addwf	Flash_Memory_Write@i,f
 12773  1156  3020               	movlw	32
 12774  1157  0222               	subwf	Flash_Memory_Write@i,w
 12775  1158  1C03               	skipc
 12776  1159  2942               	goto	l6845
 12777  115A                     l1251:	
 12778                           
 12779                           ;MCU_B1.c: 1030: }
 12780                           ;MCU_B1.c: 1031: LWLO = 0;
 12781  115A  0023               	movlb	3	; select bank3
 12782  115B  1295               	bcf	21,5	;volatile
 12783                           
 12784                           ;MCU_B1.c: 1032: Flash_Memory_Unlock();
 12785  115C  319B  23D9         	fcall	_Flash_Memory_Unlock
 12786                           
 12787                           ;MCU_B1.c: 1033: WREN = 0;
 12788  115E  0023               	movlb	3	; select bank3
 12789  115F  1115               	bcf	21,2	;volatile
 12790  1160  0008               	return
 12791  1161                     __end_of_Flash_Memory_Write:	
 12792                           
 12793                           	psect	text82
 12794  1BD9                     __ptext82:	
 12795 ;; *************** function _Flash_Memory_Unlock *****************
 12796 ;; Defined at:
 12797 ;;		line 997 in file "../src/MCU_B1.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;		None
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;		None
 12802 ;; Return value:  Size  Location     Type
 12803 ;;		None               void
 12804 ;; Registers used:
 12805 ;;		wreg
 12806 ;; Tracked objects:
 12807 ;;		On entry : 0/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;Total ram usage:        0 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; Hardware stack levels required when called:    5
 12818 ;; This function calls:
 12819 ;;		Nothing
 12820 ;; This function is called by:
 12821 ;;		_Flash_Memory_Write
 12822 ;;		_Flash_Memory_Erasing
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function _Flash_Memory_Unlock
 12828  1BD9                     _Flash_Memory_Unlock:	
 12829                           
 12830                           ;MCU_B1.c: 998: PMCON2 = 0x55;
 12831                           
 12832                           ;incstack = 0
 12833                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12834  1BD9  3055               	movlw	85
 12835  1BDA  0023               	movlb	3	; select bank3
 12836  1BDB  0096               	movwf	22	;volatile
 12837                           
 12838                           ;MCU_B1.c: 999: PMCON2 = 0xaa;
 12839  1BDC  30AA               	movlw	170
 12840  1BDD  0096               	movwf	22	;volatile
 12841                           
 12842                           ;MCU_B1.c: 1000: WR = 1;
 12843  1BDE  1495               	bsf	21,1	;volatile
 12844                           
 12845                           ;MCU_B1.c: 1001: __nop();
 12846  1BDF  0000               	nop
 12847                           
 12848                           ;MCU_B1.c: 1002: __nop();
 12849  1BE0  0000               	nop
 12850  1BE1  0008               	return
 12851  1BE2                     __end_of_Flash_Memory_Unlock:	
 12852                           
 12853                           	psect	text83
 12854  1F22                     __ptext83:	
 12855 ;; *************** function _Flash_Memory_Read *****************
 12856 ;; Defined at:
 12857 ;;		line 1006 in file "../src/MCU_B1.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  address         1    wreg     unsigned char 
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;  address         1    3[BANK0 ] unsigned char 
 12862 ;;  ret             1    4[BANK0 ] unsigned char 
 12863 ;;  i               1    2[BANK0 ] unsigned char 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  1    wreg      unsigned char 
 12866 ;; Registers used:
 12867 ;;		wreg, status,2
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        4 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    5
 12880 ;; This function calls:
 12881 ;;		Nothing
 12882 ;; This function is called by:
 12883 ;;		_Flash_Memory_Initialization
 12884 ;;		_Flash_Memory_Modify
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           
 12889                           ;psect for function _Flash_Memory_Read
 12890  1F22                     _Flash_Memory_Read:	
 12891                           
 12892                           ;incstack = 0
 12893                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12894                           ;Flash_Memory_Read@address stored from wreg
 12895  1F22  0020               	movlb	0	; select bank0
 12896  1F23  00A3               	movwf	Flash_Memory_Read@address
 12897                           
 12898                           ;MCU_B1.c: 1007: char i = 0, ret = 0;
 12899  1F24  01A2               	clrf	Flash_Memory_Read@i
 12900  1F25  01A4               	clrf	Flash_Memory_Read@ret
 12901                           
 12902                           ;MCU_B1.c: 1008: PMADRH = 0x30;
 12903  1F26  3030               	movlw	48
 12904  1F27  0023               	movlb	3	; select bank3
 12905  1F28  0092               	movwf	18	;volatile
 12906                           
 12907                           ;MCU_B1.c: 1009: PMADRL = address;
 12908  1F29  0020               	movlb	0	; select bank0
 12909  1F2A  0823               	movf	Flash_Memory_Read@address,w
 12910  1F2B  0023               	movlb	3	; select bank3
 12911  1F2C  0091               	movwf	17	;volatile
 12912                           
 12913                           ;MCU_B1.c: 1010: CFGS = 0;
 12914  1F2D  1315               	bcf	21,6	;volatile
 12915                           
 12916                           ;MCU_B1.c: 1011: RD = 1;
 12917  1F2E  1415               	bsf	21,0	;volatile
 12918                           
 12919                           ;MCU_B1.c: 1012: i = PMDATH;
 12920  1F2F  0814               	movf	20,w	;volatile
 12921  1F30  0020               	movlb	0	; select bank0
 12922  1F31  00A1               	movwf	??_Flash_Memory_Read
 12923  1F32  0821               	movf	??_Flash_Memory_Read,w
 12924  1F33  00A2               	movwf	Flash_Memory_Read@i
 12925                           
 12926                           ;MCU_B1.c: 1013: ret = PMDATL;
 12927  1F34  0023               	movlb	3	; select bank3
 12928  1F35  0813               	movf	19,w	;volatile
 12929  1F36  0020               	movlb	0	; select bank0
 12930  1F37  00A1               	movwf	??_Flash_Memory_Read
 12931  1F38  0821               	movf	??_Flash_Memory_Read,w
 12932  1F39  00A4               	movwf	Flash_Memory_Read@ret
 12933                           
 12934                           ;MCU_B1.c: 1014: return ret;
 12935  1F3A  0824               	movf	Flash_Memory_Read@ret,w
 12936  1F3B  0008               	return
 12937  1F3C                     __end_of_Flash_Memory_Read:	
 12938                           
 12939                           	psect	text84
 12940  0640                     __ptext84:	
 12941 ;; *************** function _Exception_Main *****************
 12942 ;; Defined at:
 12943 ;;		line 499 in file "../src/Main_B1.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;		None
 12946 ;; Auto vars:     Size  Location     Type
 12947 ;;  i               2   20[BANK0 ] int 
 12948 ;;  i               2   18[BANK0 ] int 
 12949 ;;  lights          1   22[BANK0 ] unsigned char 
 12950 ;;  error           1   17[BANK0 ] unsigned char 
 12951 ;;  count           1   16[BANK0 ] unsigned char 
 12952 ;;  status          1   15[BANK0 ] unsigned char 
 12953 ;; Return value:  Size  Location     Type
 12954 ;;		None               void
 12955 ;; Registers used:
 12956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;Total ram usage:        9 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; Hardware stack levels required when called:    7
 12969 ;; This function calls:
 12970 ;;		_getDimmerLights_Line
 12971 ;;		_getDimmerLights_Status
 12972 ;;		_getMain_All_Error_Status
 12973 ;;		_getMain_All_LightsStatus
 12974 ;;		_setBuz
 12975 ;;		_setDimmerLights_SwOff
 12976 ;;		_setLED
 12977 ;; This function is called by:
 12978 ;;		_main
 12979 ;; This function uses a non-reentrant model
 12980 ;;
 12981                           
 12982                           
 12983                           ;psect for function _Exception_Main
 12984  0640                     _Exception_Main:	
 12985                           
 12986                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12987                           
 12988                           ;incstack = 0
 12989                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12990  0640  3000               	movlw	0
 12991  0641  3191  2161  3186   	fcall	_getMain_All_Error_Status
 12992  0644  0020               	movlb	0	; select bank0
 12993  0645  00AE               	movwf	??_Exception_Main
 12994  0646  082E               	movf	??_Exception_Main,w
 12995  0647  00B1               	movwf	Exception_Main@error
 12996                           
 12997                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12998  0648  01B6               	clrf	Exception_Main@lights
 12999  0649  01B0               	clrf	Exception_Main@count
 13000  064A  0AB0               	incf	Exception_Main@count,f
 13001                           
 13002                           ;Main_B1.c: 502: char status = 0;
 13003  064B  01AF               	clrf	Exception_Main@status
 13004                           
 13005                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13006  064C  0022               	movlb	2	; select bank2
 13007  064D  1DAA               	btfss	(_myMain^(0+256)+10),3
 13008  064E  2E5E               	goto	l9529
 13009                           
 13010                           ;Main_B1.c: 505: if (error == 0) {
 13011  064F  0020               	movlb	0	; select bank0
 13012  0650  08B1               	movf	Exception_Main@error,f
 13013  0651  1D03               	skipz
 13014  0652  0008               	return
 13015                           
 13016                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13017  0653  0022               	movlb	2	; select bank2
 13018  0654  11AA               	bcf	(_myMain^(0+256)+10),3
 13019                           
 13020                           ;Main_B1.c: 509: setLED(99, 10);
 13021  0655  300A               	movlw	10
 13022  0656  0020               	movlb	0	; select bank0
 13023  0657  00AE               	movwf	??_Exception_Main
 13024  0658  082E               	movf	??_Exception_Main,w
 13025  0659  00A3               	movwf	setLED@command
 13026  065A  3063               	movlw	99
 13027  065B  3192  22DA         	fcall	_setLED
 13028                           
 13029                           ;Main_B1.c: 522: }
 13030                           ;Main_B1.c: 523: } else {
 13031  065D  0008               	return
 13032  065E                     l9529:	
 13033                           
 13034                           ;Main_B1.c: 524: if (error != 0) {
 13035  065E  0020               	movlb	0	; select bank0
 13036  065F  0831               	movf	Exception_Main@error,w
 13037  0660  1903               	btfsc	3,2
 13038  0661  0008               	return
 13039                           
 13040                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13041  0662  0022               	movlb	2	; select bank2
 13042  0663  15AA               	bsf	(_myMain^(0+256)+10),3
 13043                           
 13044                           ;Main_B1.c: 527: setLED(99, 11);
 13045  0664  300B               	movlw	11
 13046  0665  0020               	movlb	0	; select bank0
 13047  0666  00AE               	movwf	??_Exception_Main
 13048  0667  082E               	movf	??_Exception_Main,w
 13049  0668  00A3               	movwf	setLED@command
 13050  0669  3063               	movlw	99
 13051  066A  3192  22DA  3186   	fcall	_setLED
 13052                           
 13053                           ;Main_B1.c: 538: switch (error) {
 13054  066D  2F0A               	goto	l9577
 13055  066E                     l9535:	
 13056                           ;Main_B1.c: 539: case 2:
 13057                           
 13058                           
 13059                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13060  066E  319B  23E2  3186   	fcall	_getMain_All_LightsStatus
 13061  0671  3A01               	xorlw	1
 13062  0672  1D03               	skipz
 13063  0673  2E7D               	goto	l9539
 13064                           
 13065                           ;Main_B1.c: 547: setBuz(10, 300);
 13066  0674  302C               	movlw	44
 13067  0675  0020               	movlb	0	; select bank0
 13068  0676  00AA               	movwf	setBuz@time
 13069  0677  3001               	movlw	1
 13070  0678  00AB               	movwf	setBuz@time+1
 13071  0679  300A               	movlw	10
 13072  067A  3194  24F6  3186   	fcall	_setBuz
 13073  067D                     l9539:	
 13074                           
 13075                           ;Main_B1.c: 548: }
 13076                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13077  067D  0020               	movlb	0	; select bank0
 13078  067E  01B2               	clrf	Exception_Main@i
 13079  067F  01B3               	clrf	Exception_Main@i+1
 13080  0680                     l9549:	
 13081  0680  0833               	movf	Exception_Main@i+1,w
 13082  0681  3A80               	xorlw	128
 13083  0682  00AE               	movwf	??_Exception_Main
 13084  0683  3080               	movlw	128
 13085  0684  022E               	subwf	??_Exception_Main,w
 13086  0685  1D03               	skipz
 13087  0686  2E89               	goto	u10925
 13088  0687  0830               	movf	Exception_Main@count,w
 13089  0688  0232               	subwf	Exception_Main@i,w
 13090  0689                     u10925:	
 13091  0689  1803               	btfsc	3,0
 13092  068A  2EAB               	goto	u10920
 13093                           
 13094                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13095  068B  0020               	movlb	0	; select bank0
 13096  068C  0832               	movf	Exception_Main@i,w
 13097  068D  3E01               	addlw	1
 13098  068E  319C  24E2  3186   	fcall	_getDimmerLights_Status
 13099  0691  3A01               	xorlw	1
 13100  0692  1D03               	skipz
 13101  0693  2EA5               	goto	l9547
 13102                           
 13103                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13104  0694  0021               	movlb	1	; select bank1
 13105  0695  084F               	movf	_DimmerLights^(0+128),w
 13106  0696  0086               	movwf	6
 13107  0697  3001               	movlw	1	; select bank2/3
 13108  0698  0087               	movwf	7
 13109  0699  1401               	bsf	1,0
 13110                           
 13111                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13112  069A  0A4F               	incf	_DimmerLights^(0+128),w
 13113  069B  0086               	movwf	6
 13114  069C  3001               	movlw	1	; select bank2/3
 13115  069D  0087               	movwf	7
 13116  069E  1001               	bcf	1,0
 13117                           
 13118                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13119  069F  0020               	movlb	0	; select bank0
 13120  06A0  0832               	movf	Exception_Main@i,w
 13121  06A1  3E01               	addlw	1
 13122  06A2  3192  22A1  3186   	fcall	_setDimmerLights_SwOff
 13123  06A5                     l9547:	
 13124  06A5  3001               	movlw	1
 13125  06A6  0020               	movlb	0	; select bank0
 13126  06A7  07B2               	addwf	Exception_Main@i,f
 13127  06A8  3000               	movlw	0
 13128  06A9  3DB3               	addwfc	Exception_Main@i+1,f
 13129  06AA  2E80               	goto	l9549
 13130  06AB                     u10920:	
 13131  06AB  0020               	movlb	0	; select bank0
 13132  06AC  0008               	return
 13133  06AD                     l9551:	
 13134                           ;Main_B1.c: 561: case 3:
 13135                           
 13136                           ;Main_B1.c: 556: }
 13137                           ;Main_B1.c: 557: }
 13138                           ;Main_B1.c: 560: break;
 13139                           
 13140                           
 13141                           ;Main_B1.c: 563: setBuz(5, 300);
 13142  06AD  302C               	movlw	44
 13143  06AE  0020               	movlb	0	; select bank0
 13144  06AF  00AA               	movwf	setBuz@time
 13145  06B0  3001               	movlw	1
 13146  06B1  00AB               	movwf	setBuz@time+1
 13147  06B2  3005               	movlw	5
 13148  06B3  3194  24F6  3186   	fcall	_setBuz
 13149                           
 13150                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13151  06B6  319B  23EC  3186   	fcall	_getDimmerLights_Line
 13152  06B9  0020               	movlb	0	; select bank0
 13153  06BA  00AE               	movwf	??_Exception_Main
 13154  06BB  082E               	movf	??_Exception_Main,w
 13155  06BC  00B6               	movwf	Exception_Main@lights
 13156                           
 13157                           ;Main_B1.c: 565: if (lights == 0) {
 13158  06BD  08B6               	movf	Exception_Main@lights,f
 13159  06BE  1D03               	skipz
 13160  06BF  2EEF               	goto	l9569
 13161                           
 13162                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13163  06C0  01B4               	clrf	Exception_Main@i_3564
 13164  06C1  01B5               	clrf	Exception_Main@i_3564+1
 13165  06C2                     l9567:	
 13166  06C2  0835               	movf	Exception_Main@i_3564+1,w
 13167  06C3  3A80               	xorlw	128
 13168  06C4  00AE               	movwf	??_Exception_Main
 13169  06C5  3080               	movlw	128
 13170  06C6  022E               	subwf	??_Exception_Main,w
 13171  06C7  1D03               	skipz
 13172  06C8  2ECB               	goto	u10955
 13173  06C9  0830               	movf	Exception_Main@count,w
 13174  06CA  0234               	subwf	Exception_Main@i_3564,w
 13175  06CB                     u10955:	
 13176  06CB  1803               	btfsc	3,0
 13177  06CC  2EED               	goto	u10950
 13178                           
 13179                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13180  06CD  0020               	movlb	0	; select bank0
 13181  06CE  0834               	movf	Exception_Main@i_3564,w
 13182  06CF  3E01               	addlw	1
 13183  06D0  319C  24E2  3186   	fcall	_getDimmerLights_Status
 13184  06D3  3A01               	xorlw	1
 13185  06D4  1D03               	skipz
 13186  06D5  2EE7               	goto	l9565
 13187                           
 13188                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13189  06D6  0021               	movlb	1	; select bank1
 13190  06D7  084F               	movf	_DimmerLights^(0+128),w
 13191  06D8  0086               	movwf	6
 13192  06D9  3001               	movlw	1	; select bank2/3
 13193  06DA  0087               	movwf	7
 13194  06DB  1401               	bsf	1,0
 13195                           
 13196                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13197  06DC  0A4F               	incf	_DimmerLights^(0+128),w
 13198  06DD  0086               	movwf	6
 13199  06DE  3001               	movlw	1	; select bank2/3
 13200  06DF  0087               	movwf	7
 13201  06E0  1001               	bcf	1,0
 13202                           
 13203                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13204  06E1  0020               	movlb	0	; select bank0
 13205  06E2  0834               	movf	Exception_Main@i_3564,w
 13206  06E3  3E01               	addlw	1
 13207  06E4  3192  22A1  3186   	fcall	_setDimmerLights_SwOff
 13208  06E7                     l9565:	
 13209  06E7  3001               	movlw	1
 13210  06E8  0020               	movlb	0	; select bank0
 13211  06E9  07B4               	addwf	Exception_Main@i_3564,f
 13212  06EA  3000               	movlw	0
 13213  06EB  3DB5               	addwfc	Exception_Main@i_3564+1,f
 13214  06EC  2EC2               	goto	l9567
 13215  06ED                     u10950:	
 13216  06ED  0020               	movlb	0	; select bank0
 13217  06EE  0008               	return
 13218  06EF                     l9569:	
 13219                           ;Main_B1.c: 573: }
 13220                           ;Main_B1.c: 574: }
 13221                           ;Main_B1.c: 575: } else {
 13222                           
 13223                           
 13224                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13225  06EF  0020               	movlb	0	; select bank0
 13226  06F0  0836               	movf	Exception_Main@lights,w
 13227  06F1  319C  24E2  3186   	fcall	_getDimmerLights_Status
 13228  06F4  3A01               	xorlw	1
 13229  06F5  1903               	btfsc	3,2
 13230  06F6  2EF9               	goto	l9571
 13231  06F7  0020               	movlb	0	; select bank0
 13232  06F8  0008               	return
 13233  06F9                     l9571:	
 13234                           
 13235                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13236  06F9  0021               	movlb	1	; select bank1
 13237  06FA  084F               	movf	_DimmerLights^(0+128),w
 13238  06FB  0086               	movwf	6
 13239  06FC  3001               	movlw	1	; select bank2/3
 13240  06FD  0087               	movwf	7
 13241  06FE  1401               	bsf	1,0
 13242                           
 13243                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13244  06FF  0A4F               	incf	_DimmerLights^(0+128),w
 13245  0700  0086               	movwf	6
 13246  0701  3001               	movlw	1	; select bank2/3
 13247  0702  0087               	movwf	7
 13248  0703  1001               	bcf	1,0
 13249                           
 13250                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13251  0704  0020               	movlb	0	; select bank0
 13252  0705  0836               	movf	Exception_Main@lights,w
 13253  0706  3192  22A1         	fcall	_setDimmerLights_SwOff
 13254  0708  0020               	movlb	0	; select bank0
 13255  0709  0008               	return
 13256  070A                     l9577:	
 13257                           ;Main_B1.c: 586: }
 13258                           
 13259                           ;Main_B1.c: 582: }
 13260                           ;Main_B1.c: 583: }
 13261                           ;Main_B1.c: 585: break;
 13262                           
 13263  070A  0020               	movlb	0	; select bank0
 13264  070B  0831               	movf	Exception_Main@error,w
 13265                           
 13266                           ; Switch size 1, requested type "space"
 13267                           ; Number of cases is 2, Range of values is 2 to 3
 13268                           ; switch strategies available:
 13269                           ; Name         Instructions Cycles
 13270                           ; simple_byte            7     4 (average)
 13271                           ; direct_byte           13     9 (fixed)
 13272                           ; jumptable            263     9 (fixed)
 13273                           ;	Chosen strategy is simple_byte
 13274  070C  3A02               	xorlw	2	; case 2
 13275  070D  1903               	skipnz
 13276  070E  2E6E               	goto	l9535
 13277  070F  3A01               	xorlw	1	; case 3
 13278  0710  1903               	skipnz
 13279  0711  2EAD               	goto	l9551
 13280  0712  2F14               	goto	l1492
 13281  0713  0008               	return
 13282  0714                     l1492:	
 13283  0714  0008               	return
 13284  0715                     __end_of_Exception_Main:	
 13285                           
 13286                           	psect	text85
 13287  1BEC                     __ptext85:	
 13288 ;; *************** function _getDimmerLights_Line *****************
 13289 ;; Defined at:
 13290 ;;		line 996 in file "../src/Dimmer_B1.c"
 13291 ;; Parameters:    Size  Location     Type
 13292 ;;		None
 13293 ;; Auto vars:     Size  Location     Type
 13294 ;;  line            1    1[BANK0 ] unsigned char 
 13295 ;; Return value:  Size  Location     Type
 13296 ;;                  1    wreg      unsigned char 
 13297 ;; Registers used:
 13298 ;;		wreg, status,2
 13299 ;; Tracked objects:
 13300 ;;		On entry : 0/0
 13301 ;;		On exit  : 0/0
 13302 ;;		Unchanged: 0/0
 13303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;Total ram usage:        1 bytes
 13309 ;; Hardware stack levels used:    1
 13310 ;; Hardware stack levels required when called:    5
 13311 ;; This function calls:
 13312 ;;		Nothing
 13313 ;; This function is called by:
 13314 ;;		_Exception_Main
 13315 ;; This function uses a non-reentrant model
 13316 ;;
 13317                           
 13318                           
 13319                           ;psect for function _getDimmerLights_Line
 13320  1BEC                     _getDimmerLights_Line:	
 13321                           
 13322                           ;Dimmer_B1.c: 997: char line = 0;
 13323                           
 13324                           ;incstack = 0
 13325                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13326  1BEC  0020               	movlb	0	; select bank0
 13327  1BED  01A1               	clrf	getDimmerLights_Line@line
 13328                           
 13329                           ;Dimmer_B1.c: 999: if (DimmerLights1.Line == 1) {
 13330  1BEE  0022               	movlb	2	; select bank2
 13331  1BEF  1CDD               	btfss	(_DimmerLights1^(0+256)+1),1
 13332  1BF0  2BF4               	goto	l7067
 13333                           
 13334                           ;Dimmer_B1.c: 1000: line = 1;
 13335  1BF1  0020               	movlb	0	; select bank0
 13336  1BF2  01A1               	clrf	getDimmerLights_Line@line
 13337  1BF3  0AA1               	incf	getDimmerLights_Line@line,f
 13338  1BF4                     l7067:	
 13339                           
 13340                           ;Dimmer_B1.c: 1001: }
 13341                           ;Dimmer_B1.c: 1013: return line;
 13342  1BF4  0020               	movlb	0	; select bank0
 13343  1BF5  0821               	movf	getDimmerLights_Line@line,w
 13344  1BF6  0008               	return
 13345  1BF7                     __end_of_getDimmerLights_Line:	
 13346                           
 13347                           	psect	text86
 13348  1F8B                     __ptext86:	
 13349 ;; *************** function _DimmerLights_Main *****************
 13350 ;; Defined at:
 13351 ;;		line 736 in file "../src/Dimmer_B1.c"
 13352 ;; Parameters:    Size  Location     Type
 13353 ;;		None
 13354 ;; Auto vars:     Size  Location     Type
 13355 ;;		None
 13356 ;; Return value:  Size  Location     Type
 13357 ;;		None               void
 13358 ;; Registers used:
 13359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13360 ;; Tracked objects:
 13361 ;;		On entry : 0/0
 13362 ;;		On exit  : 0/0
 13363 ;;		Unchanged: 0/0
 13364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;Total ram usage:        0 bytes
 13370 ;; Hardware stack levels used:    1
 13371 ;; Hardware stack levels required when called:   10
 13372 ;; This function calls:
 13373 ;;		_getLoad_OK
 13374 ;;		_getMain_All_Error_Status
 13375 ;;		_getMain_All_LightsStatus
 13376 ;;		_setDimmerLights_Main
 13377 ;; This function is called by:
 13378 ;;		_main
 13379 ;; This function uses a non-reentrant model
 13380 ;;
 13381                           
 13382                           
 13383                           ;psect for function _DimmerLights_Main
 13384  1F8B                     _DimmerLights_Main:	
 13385                           
 13386                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13390  1F8B  0022               	movlb	2	; select bank2
 13391  1F8C  1CAD               	btfss	_Dimmer^(0+256),1
 13392  1F8D  2FA3               	goto	l9237
 13393                           
 13394                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13395  1F8E  319B  23AF  319F   	fcall	_getLoad_OK
 13396  1F91  3A01               	xorlw	1
 13397  1F92  1903               	skipnz
 13398  1F93  2FA1               	goto	l754
 13399  1F94  3000               	movlw	0
 13400  1F95  3191  2161  319F   	fcall	_getMain_All_Error_Status
 13401  1F98  3800               	iorlw	0
 13402  1F99  1D03               	skipz
 13403  1F9A  2FA1               	goto	l754
 13404  1F9B  319B  23E2  319F   	fcall	_getMain_All_LightsStatus
 13405  1F9E  3800               	iorlw	0
 13406  1F9F  1D03               	skipz
 13407  1FA0  2FA3               	goto	l9237
 13408  1FA1                     l754:	
 13409                           
 13410                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13411  1FA1  0022               	movlb	2	; select bank2
 13412  1FA2  10AD               	bcf	_Dimmer^(0+256),1
 13413  1FA3                     l9237:	
 13414                           
 13415                           ;Dimmer_B1.c: 742: }
 13416                           ;Dimmer_B1.c: 743: }
 13417                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13418  1FA3  3001               	movlw	1
 13419  1FA4  3197  2798         	fcall	_setDimmerLights_Main
 13420  1FA6  0008               	return
 13421  1FA7                     __end_of_DimmerLights_Main:	
 13422                           
 13423                           	psect	text87
 13424  1798                     __ptext87:	
 13425 ;; *************** function _setDimmerLights_Main *****************
 13426 ;; Defined at:
 13427 ;;		line 765 in file "../src/Dimmer_B1.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;  lights          1    wreg     unsigned char 
 13430 ;; Auto vars:     Size  Location     Type
 13431 ;;  lights          1    4[BANK1 ] unsigned char 
 13432 ;; Return value:  Size  Location     Type
 13433 ;;		None               void
 13434 ;; Registers used:
 13435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13436 ;; Tracked objects:
 13437 ;;		On entry : 0/0
 13438 ;;		On exit  : 0/0
 13439 ;;		Unchanged: 0/0
 13440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13444 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;Total ram usage:        1 bytes
 13446 ;; Hardware stack levels used:    1
 13447 ;; Hardware stack levels required when called:    9
 13448 ;; This function calls:
 13449 ;;		_DimmerLights_SelectPointer
 13450 ;;		_getDimmerLights_Allow_Condition
 13451 ;;		_getMain_All_LightsStatus
 13452 ;;		_setDimmerLights_Dimming
 13453 ;;		_setDimmerLights_OnOff
 13454 ;; This function is called by:
 13455 ;;		_DimmerLights_Main
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           
 13460                           ;psect for function _setDimmerLights_Main
 13461  1798                     _setDimmerLights_Main:	
 13462                           
 13463                           ;incstack = 0
 13464                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13465                           ;setDimmerLights_Main@lights stored from wreg
 13466  1798  0021               	movlb	1	; select bank1
 13467  1799  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13468                           
 13469                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13470  179A  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13471  179B  319C  242F  3197   	fcall	_DimmerLights_SelectPointer
 13472                           
 13473                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13474  179E  0021               	movlb	1	; select bank1
 13475  179F  084F               	movf	_DimmerLights^(0+128),w
 13476  17A0  0086               	movwf	6
 13477  17A1  3001               	movlw	1	; select bank2/3
 13478  17A2  0087               	movwf	7
 13479  17A3  1C81               	btfss	1,1
 13480  17A4  2FC4               	goto	l8973
 13481                           
 13482                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13483  17A5  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13484  17A6  319E  2665  3197   	fcall	_getDimmerLights_Allow_Condition
 13485  17A9  3800               	iorlw	0
 13486  17AA  1D03               	skipz
 13487  17AB  0008               	return
 13488                           
 13489                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13490  17AC  0021               	movlb	1	; select bank1
 13491  17AD  084F               	movf	_DimmerLights^(0+128),w
 13492  17AE  0086               	movwf	6
 13493  17AF  3001               	movlw	1	; select bank2/3
 13494  17B0  0087               	movwf	7
 13495  17B1  1081               	bcf	1,1
 13496                           
 13497                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13498  17B2  084F               	movf	_DimmerLights^(0+128),w
 13499  17B3  0086               	movwf	6
 13500  17B4  3001               	movlw	1	; select bank2/3
 13501  17B5  0087               	movwf	7
 13502  17B6  1D01               	btfss	1,2
 13503  17B7  2FBE               	goto	l8971
 13504                           
 13505                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13506  17B8  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13507  17B9  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13508  17BA  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13509  17BB  3187  2715         	fcall	_setDimmerLights_OnOff
 13510                           
 13511                           ;Dimmer_B1.c: 773: } else {
 13512  17BD  0008               	return
 13513  17BE                     l8971:	
 13514                           
 13515                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13516  17BE  0021               	movlb	1	; select bank1
 13517  17BF  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13518  17C0  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13519  17C1  3187  2715         	fcall	_setDimmerLights_OnOff
 13520                           
 13521                           ;Dimmer_B1.c: 775: }
 13522                           ;Dimmer_B1.c: 776: }
 13523                           ;Dimmer_B1.c: 777: } else {
 13524  17C3  0008               	return
 13525  17C4                     l8973:	
 13526                           
 13527                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13528  17C4  319B  23E2  3197   	fcall	_getMain_All_LightsStatus
 13529  17C7  3A01               	xorlw	1
 13530  17C8  1D03               	skipz
 13531  17C9  2FF3               	goto	l8985
 13532                           
 13533                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13534  17CA  0021               	movlb	1	; select bank1
 13535  17CB  084F               	movf	_DimmerLights^(0+128),w
 13536  17CC  0086               	movwf	6
 13537  17CD  3001               	movlw	1	; select bank2/3
 13538  17CE  0087               	movwf	7
 13539  17CF  1E01               	btfss	1,4
 13540  17D0  0008               	return
 13541                           
 13542                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13543  17D1  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13544  17D2  319E  2665  3197   	fcall	_getDimmerLights_Allow_Condition
 13545  17D5  3800               	iorlw	0
 13546  17D6  1D03               	skipz
 13547  17D7  0008               	return
 13548                           
 13549                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13550  17D8  0021               	movlb	1	; select bank1
 13551  17D9  084F               	movf	_DimmerLights^(0+128),w
 13552  17DA  0086               	movwf	6
 13553  17DB  3001               	movlw	1	; select bank2/3
 13554  17DC  0087               	movwf	7
 13555  17DD  1201               	bcf	1,4
 13556                           
 13557                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13558  17DE  084F               	movf	_DimmerLights^(0+128),w
 13559  17DF  0086               	movwf	6
 13560  17E0  3001               	movlw	1	; select bank2/3
 13561  17E1  0087               	movwf	7
 13562  17E2  1E81               	btfss	1,5
 13563  17E3  2FEC               	goto	l8983
 13564                           
 13565                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13566  17E4  0020               	movlb	0	; select bank0
 13567  17E5  01EB               	clrf	setDimmerLights_Dimming@status
 13568  17E6  0AEB               	incf	setDimmerLights_Dimming@status,f
 13569  17E7  0021               	movlb	1	; select bank1
 13570  17E8  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13571  17E9  3195  25AA         	fcall	_setDimmerLights_Dimming
 13572                           
 13573                           ;Dimmer_B1.c: 784: } else {
 13574  17EB  0008               	return
 13575  17EC                     l8983:	
 13576                           
 13577                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13578  17EC  0020               	movlb	0	; select bank0
 13579  17ED  01EB               	clrf	setDimmerLights_Dimming@status
 13580  17EE  0021               	movlb	1	; select bank1
 13581  17EF  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13582  17F0  3195  25AA         	fcall	_setDimmerLights_Dimming
 13583                           
 13584                           ;Dimmer_B1.c: 786: }
 13585                           ;Dimmer_B1.c: 787: }
 13586                           ;Dimmer_B1.c: 788: }
 13587                           ;Dimmer_B1.c: 789: } else {
 13588  17F2  0008               	return
 13589  17F3                     l8985:	
 13590                           
 13591                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13592  17F3  0021               	movlb	1	; select bank1
 13593  17F4  084F               	movf	_DimmerLights^(0+128),w
 13594  17F5  0086               	movwf	6
 13595  17F6  3001               	movlw	1	; select bank2/3
 13596  17F7  0087               	movwf	7
 13597  17F8  1E01               	btfss	1,4
 13598  17F9  0008               	return
 13599                           
 13600                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13601  17FA  084F               	movf	_DimmerLights^(0+128),w
 13602  17FB  0086               	movwf	6
 13603  17FC  3001               	movlw	1	; select bank2/3
 13604  17FD  0087               	movwf	7
 13605  17FE  1201               	bcf	1,4
 13606  17FF  0008               	return
 13607  1800                     __end_of_setDimmerLights_Main:	
 13608                           
 13609                           	psect	text88
 13610  0715                     __ptext88:	
 13611 ;; *************** function _setDimmerLights_OnOff *****************
 13612 ;; Defined at:
 13613 ;;		line 799 in file "../src/Dimmer_B1.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;  lights          1    wreg     unsigned char 
 13616 ;;  command         1    0[BANK1 ] unsigned char 
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  lights          1    3[BANK1 ] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;		None               void
 13621 ;; Registers used:
 13622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13628 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;Total ram usage:        4 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    8
 13635 ;; This function calls:
 13636 ;;		_getCmd_Status
 13637 ;;		_getDelayOff_GO
 13638 ;;		_getDimmerLights_PercentToValue
 13639 ;;		_getMain_All_LightsStatus
 13640 ;;		_setCmd_Status
 13641 ;;		_setDelayOff_GO
 13642 ;;		_setDimmerIntr_ControlStatus
 13643 ;;		_setDimmerIntr_DimmingValue
 13644 ;;		_setDimmerIntr_Dimming_RF
 13645 ;;		_setDimmerIntr_MaxmumValue
 13646 ;;		_setDimmerLights_Line
 13647 ;;		_setLED
 13648 ;;		_setProductData
 13649 ;;		_setRF_DimmerLights
 13650 ;;		_setTxData
 13651 ;; This function is called by:
 13652 ;;		_setDimmerLights_Main
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           
 13657                           ;psect for function _setDimmerLights_OnOff
 13658  0715                     _setDimmerLights_OnOff:	
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13662                           ;setDimmerLights_OnOff@lights stored from wreg
 13663  0715  0021               	movlb	1	; select bank1
 13664  0716  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13665                           
 13666                           ;Dimmer_B1.c: 801: if (command == 1) {
 13667  0717  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13668  0718  3A01               	xorlw	1
 13669  0719  1D03               	skipz
 13670  071A  2F73               	goto	l8843
 13671                           
 13672                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13673  071B  0020               	movlb	0	; select bank0
 13674  071C  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13675  071D  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13676  071E  0021               	movlb	1	; select bank1
 13677  071F  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13678  0720  319E  26A7  3187   	fcall	_setDimmerIntr_ControlStatus
 13679                           
 13680                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13681  0723  0022               	movlb	2	; select bank2
 13682  0724  152D               	bsf	_Dimmer^(0+256),2
 13683                           
 13684                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13685  0725  0021               	movlb	1	; select bank1
 13686  0726  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13687  0727  319C  24F3  3187   	fcall	_setDimmerLights_Line
 13688                           
 13689                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13690  072A  0020               	movlb	0	; select bank0
 13691  072B  01A3               	clrf	setLED@command
 13692  072C  0021               	movlb	1	; select bank1
 13693  072D  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13694  072E  3192  22DA  3187   	fcall	_setLED
 13695                           
 13696                           ;Dimmer_B1.c: 813: ;;
 13697                           ;Dimmer_B1.c: 831: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13698  0731  0021               	movlb	1	; select bank1
 13699  0732  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13700  0733  3E14               	addlw	20
 13701  0734  076D               	addwf	_product^(0+128),w
 13702  0735  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13703  0736  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13704  0737  0086               	movwf	6
 13705  0738  3002               	movlw	2	; select bank4/5
 13706  0739  0087               	movwf	7
 13707  073A  0801               	movf	1,w
 13708  073B  3197  2733  3187   	fcall	_getDimmerLights_PercentToValue
 13709  073E  0021               	movlb	1	; select bank1
 13710  073F  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13711  0740  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13712  0741  0020               	movlb	0	; select bank0
 13713  0742  00E3               	movwf	setDimmerIntr_DimmingValue@value
 13714  0743  0021               	movlb	1	; select bank1
 13715  0744  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13716  0745  319C  2453  3187   	fcall	_setDimmerIntr_DimmingValue
 13717                           
 13718                           ;Dimmer_B1.c: 834: if (DimmerLights->DimmingRun == 1) {
 13719  0748  0021               	movlb	1	; select bank1
 13720  0749  0A4F               	incf	_DimmerLights^(0+128),w
 13721  074A  0086               	movwf	6
 13722  074B  3001               	movlw	1	; select bank2/3
 13723  074C  0087               	movwf	7
 13724  074D  1F01               	btfss	1,6
 13725  074E  2FA3               	goto	l8857
 13726                           
 13727                           ;Dimmer_B1.c: 835: DimmerLights->DimmingRun = 0;
 13728  074F  0A4F               	incf	_DimmerLights^(0+128),w
 13729  0750  0086               	movwf	6
 13730  0751  3001               	movlw	1	; select bank2/3
 13731  0752  0087               	movwf	7
 13732  0753  1301               	bcf	1,6
 13733                           
 13734                           ;Dimmer_B1.c: 836: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13735  0754  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13736  0755  3E14               	addlw	20
 13737  0756  076D               	addwf	_product^(0+128),w
 13738  0757  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13739  0758  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13740  0759  0086               	movwf	6
 13741  075A  3002               	movlw	2	; select bank4/5
 13742  075B  0087               	movwf	7
 13743  075C  0801               	movf	1,w
 13744  075D  3197  2733  3187   	fcall	_getDimmerLights_PercentToValue
 13745  0760  0021               	movlb	1	; select bank1
 13746  0761  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13747  0762  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13748  0763  0020               	movlb	0	; select bank0
 13749  0764  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13750  0765  0021               	movlb	1	; select bank1
 13751  0766  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13752  0767  319C  2447  3187   	fcall	_setDimmerIntr_MaxmumValue
 13753                           
 13754                           ;Dimmer_B1.c: 837: setDimmerIntr_Dimming_RF(lights, 1);
 13755  076A  0020               	movlb	0	; select bank0
 13756  076B  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13757  076C  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13758  076D  0021               	movlb	1	; select bank1
 13759  076E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13760  076F  319E  26BF  3187   	fcall	_setDimmerIntr_Dimming_RF
 13761                           
 13762                           ;Dimmer_B1.c: 841: }
 13763                           ;Dimmer_B1.c: 846: } else if (command == 0) {
 13764                           
 13765                           ;Dimmer_B1.c: 838: } else {
 13766  0772  2FA3               	goto	l8857
 13767  0773                     l8843:	
 13768  0773  0021               	movlb	1	; select bank1
 13769  0774  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13770  0775  1D03               	skipz
 13771  0776  2FA3               	goto	l8857
 13772                           
 13773                           ;Dimmer_B1.c: 847: setDimmerIntr_ControlStatus(lights, 0);
 13774  0777  0020               	movlb	0	; select bank0
 13775  0778  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13776  0779  0021               	movlb	1	; select bank1
 13777  077A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13778  077B  319E  26A7  3187   	fcall	_setDimmerIntr_ControlStatus
 13779                           
 13780                           ;Dimmer_B1.c: 849: Dimmer.Load_Status = 0;
 13781  077E  0022               	movlb	2	; select bank2
 13782  077F  112D               	bcf	_Dimmer^(0+256),2
 13783                           
 13784                           ;Dimmer_B1.c: 850: setDimmerLights_Line(0);
 13785  0780  3000               	movlw	0
 13786  0781  319C  24F3  3187   	fcall	_setDimmerLights_Line
 13787                           
 13788                           ;Dimmer_B1.c: 854: if (getDelayOff_GO(lights) == 1) {
 13789  0784  0021               	movlb	1	; select bank1
 13790  0785  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13791  0786  319D  2504  3187   	fcall	_getDelayOff_GO
 13792  0789  3A01               	xorlw	1
 13793  078A  1D03               	skipz
 13794  078B  2F94               	goto	l778
 13795                           
 13796                           ;Dimmer_B1.c: 855: setDelayOff_GO(lights, 0, 0);
 13797  078C  0020               	movlb	0	; select bank0
 13798  078D  01E6               	clrf	setDelayOff_GO@command
 13799  078E  01E7               	clrf	setDelayOff_GO@value
 13800  078F  0021               	movlb	1	; select bank1
 13801  0790  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13802  0791  318C  24AC  3187   	fcall	_setDelayOff_GO
 13803  0794                     l778:	
 13804                           
 13805                           ;Dimmer_B1.c: 856: }
 13806                           ;Dimmer_B1.c: 861: setLED(lights, 1);
 13807  0794  0020               	movlb	0	; select bank0
 13808  0795  01A3               	clrf	setLED@command
 13809  0796  0AA3               	incf	setLED@command,f
 13810  0797  0021               	movlb	1	; select bank1
 13811  0798  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13812  0799  3192  22DA  3187   	fcall	_setLED
 13813                           
 13814                           ;Dimmer_B1.c: 862: ;;
 13815                           ;Dimmer_B1.c: 866: if (lights == 1) {
 13816  079C  0021               	movlb	1	; select bank1
 13817  079D  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13818  079E  3A01               	xorlw	1
 13819  079F  1D03               	skipz
 13820  07A0  2FA3               	goto	l8857
 13821                           
 13822                           ;Dimmer_B1.c: 867: RB1 = 0;
 13823  07A1  0020               	movlb	0	; select bank0
 13824  07A2  108D               	bcf	13,1	;volatile
 13825  07A3                     l8857:	
 13826                           
 13827                           ;Dimmer_B1.c: 869: }
 13828                           ;Dimmer_B1.c: 880: }
 13829                           ;Dimmer_B1.c: 883: setRF_DimmerLights(lights, command);
 13830  07A3  0021               	movlb	1	; select bank1
 13831  07A4  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13832  07A5  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13833  07A6  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13834  07A7  0020               	movlb	0	; select bank0
 13835  07A8  00E6               	movwf	setRF_DimmerLights@on
 13836  07A9  0021               	movlb	1	; select bank1
 13837  07AA  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13838  07AB  3196  26CE  3187   	fcall	_setRF_DimmerLights
 13839                           
 13840                           ;Dimmer_B1.c: 885: if (getCmd_Status(1) == 1) {
 13841  07AE  3001               	movlw	1
 13842  07AF  319D  2559  3187   	fcall	_getCmd_Status
 13843  07B2  3A01               	xorlw	1
 13844  07B3  1D03               	skipz
 13845  07B4  2FD0               	goto	l8871
 13846                           
 13847                           ;Dimmer_B1.c: 886: if (getMain_All_LightsStatus() == 0) {
 13848  07B5  319B  23E2  3187   	fcall	_getMain_All_LightsStatus
 13849  07B8  3800               	iorlw	0
 13850  07B9  1D03               	skipz
 13851  07BA  0008               	return
 13852                           
 13853                           ;Dimmer_B1.c: 887: setCmd_Status(1, 0);
 13854  07BB  0020               	movlb	0	; select bank0
 13855  07BC  01A1               	clrf	setCmd_Status@cmd
 13856  07BD  3001               	movlw	1
 13857  07BE  319E  26F0  3187   	fcall	_setCmd_Status
 13858                           
 13859                           ;Dimmer_B1.c: 888: setProductData(11, 0);
 13860  07C1  0020               	movlb	0	; select bank0
 13861  07C2  01E3               	clrf	setProductData@value
 13862  07C3  300B               	movlw	11
 13863  07C4  319C  243B  3187   	fcall	_setProductData
 13864                           
 13865                           ;Dimmer_B1.c: 889: setProductData(17, 0);
 13866  07C7  0020               	movlb	0	; select bank0
 13867  07C8  01E3               	clrf	setProductData@value
 13868  07C9  3011               	movlw	17
 13869  07CA  319C  243B  3187   	fcall	_setProductData
 13870                           
 13871                           ;Dimmer_B1.c: 890: setTxData();
 13872  07CD  318F  2745         	fcall	_setTxData
 13873                           
 13874                           ;Dimmer_B1.c: 891: }
 13875                           ;Dimmer_B1.c: 892: } else {
 13876  07CF  0008               	return
 13877  07D0                     l8871:	
 13878                           
 13879                           ;Dimmer_B1.c: 893: setTxData();
 13880  07D0  318F  2745         	fcall	_setTxData
 13881  07D2  0008               	return
 13882  07D3                     __end_of_setDimmerLights_OnOff:	
 13883                           
 13884                           	psect	text89
 13885  12DA                     __ptext89:	
 13886 ;; *************** function _setLED *****************
 13887 ;; Defined at:
 13888 ;;		line 81 in file "../src/LED_B1.c"
 13889 ;; Parameters:    Size  Location     Type
 13890 ;;  led             1    wreg     unsigned char 
 13891 ;;  command         1    3[BANK0 ] unsigned char 
 13892 ;; Auto vars:     Size  Location     Type
 13893 ;;  led             1    4[BANK0 ] unsigned char 
 13894 ;; Return value:  Size  Location     Type
 13895 ;;		None               void
 13896 ;; Registers used:
 13897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13898 ;; Tracked objects:
 13899 ;;		On entry : 0/0
 13900 ;;		On exit  : 0/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13903 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;Total ram usage:        2 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; Hardware stack levels required when called:    6
 13910 ;; This function calls:
 13911 ;;		_LedPointSelect
 13912 ;; This function is called by:
 13913 ;;		_setDimmerLights_OnOff
 13914 ;;		_setLED_Initialization
 13915 ;;		_Exception_Main
 13916 ;;		_setSw_Initialization
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           
 13921                           ;psect for function _setLED
 13922  12DA                     _setLED:	
 13923                           
 13924                           ;incstack = 0
 13925                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13926                           ;setLED@led stored from wreg
 13927  12DA  0020               	movlb	0	; select bank0
 13928  12DB  00A4               	movwf	setLED@led
 13929                           
 13930                           ;LED_B1.c: 82: LedPointSelect(led);
 13931  12DC  0824               	movf	setLED@led,w
 13932  12DD  319C  245F  3192   	fcall	_LedPointSelect
 13933                           
 13934                           ;LED_B1.c: 83: if (command == 0) {
 13935  12E0  0020               	movlb	0	; select bank0
 13936  12E1  08A3               	movf	setLED@command,f
 13937  12E2  1D03               	skipz
 13938  12E3  2AE9               	goto	l6477
 13939                           
 13940                           ;LED_B1.c: 112: if (led == 99) {
 13941  12E4  0824               	movf	setLED@led,w
 13942  12E5  3A63               	xorlw	99
 13943  12E6  1D03               	skipz
 13944  12E7  2AE9               	goto	l6477
 13945                           
 13946                           ;LED_B1.c: 116: RB5 = 1;
 13947  12E8  168D               	bsf	13,5	;volatile
 13948  12E9                     l6477:	
 13949                           
 13950                           ;LED_B1.c: 118: }
 13951                           ;LED_B1.c: 120: }
 13952                           ;LED_B1.c: 121: if (command == 1) {
 13953  12E9  0823               	movf	setLED@command,w
 13954  12EA  3A01               	xorlw	1
 13955  12EB  1D03               	skipz
 13956  12EC  2AF2               	goto	l6483
 13957                           
 13958                           ;LED_B1.c: 150: if (led == 99) {
 13959  12ED  0824               	movf	setLED@led,w
 13960  12EE  3A63               	xorlw	99
 13961  12EF  1D03               	skipz
 13962  12F0  2AF2               	goto	l6483
 13963                           
 13964                           ;LED_B1.c: 154: RB5 = 0;
 13965  12F1  128D               	bcf	13,5	;volatile
 13966  12F2                     l6483:	
 13967                           
 13968                           ;LED_B1.c: 156: }
 13969                           ;LED_B1.c: 158: }
 13970                           ;LED_B1.c: 159: if (command == 10) {
 13971  12F2  0823               	movf	setLED@command,w
 13972  12F3  3A0A               	xorlw	10
 13973  12F4  1D03               	skipz
 13974  12F5  2B08               	goto	l6491
 13975                           
 13976                           ;LED_B1.c: 160: LED->GO = 0;
 13977  12F6  0021               	movlb	1	; select bank1
 13978  12F7  0850               	movf	_LED^(0+128),w
 13979  12F8  0086               	movwf	6
 13980  12F9  3001               	movlw	1	; select bank2/3
 13981  12FA  0087               	movwf	7
 13982  12FB  1081               	bcf	1,1
 13983                           
 13984                           ;LED_B1.c: 161: LED->Time = 0;
 13985  12FC  0A50               	incf	_LED^(0+128),w
 13986  12FD  0086               	movwf	6
 13987  12FE  3001               	movlw	1	; select bank2/3
 13988  12FF  0087               	movwf	7
 13989  1300  3000               	movlw	0
 13990  1301  3FC0               	movwi [0]fsr1
 13991  1302  3FC1               	movwi [1]fsr1
 13992                           
 13993                           ;LED_B1.c: 190: if (led == 99) {
 13994  1303  0020               	movlb	0	; select bank0
 13995  1304  0824               	movf	setLED@led,w
 13996  1305  3A63               	xorlw	99
 13997  1306  1903               	btfsc	3,2
 13998                           
 13999                           ;LED_B1.c: 194: RB5 = 1;
 14000  1307  168D               	bsf	13,5	;volatile
 14001  1308                     l6491:	
 14002                           
 14003                           ;LED_B1.c: 196: }
 14004                           ;LED_B1.c: 198: }
 14005                           ;LED_B1.c: 199: if (command == 11) {
 14006  1308  0823               	movf	setLED@command,w
 14007  1309  3A0B               	xorlw	11
 14008  130A  1D03               	skipz
 14009  130B  0008               	return
 14010                           
 14011                           ;LED_B1.c: 200: LED->GO = 1;
 14012  130C  0021               	movlb	1	; select bank1
 14013  130D  0850               	movf	_LED^(0+128),w
 14014  130E  0086               	movwf	6
 14015  130F  3001               	movlw	1	; select bank2/3
 14016  1310  0087               	movwf	7
 14017  1311  1481               	bsf	1,1
 14018  1312  0008               	return
 14019  1313                     __end_of_setLED:	
 14020                           
 14021                           	psect	text90
 14022  1C5F                     __ptext90:	
 14023 ;; *************** function _LedPointSelect *****************
 14024 ;; Defined at:
 14025 ;;		line 7 in file "../src/LED_B1.c"
 14026 ;; Parameters:    Size  Location     Type
 14027 ;;  led             1    wreg     unsigned char 
 14028 ;; Auto vars:     Size  Location     Type
 14029 ;;  led             1    2[BANK0 ] unsigned char 
 14030 ;; Return value:  Size  Location     Type
 14031 ;;		None               void
 14032 ;; Registers used:
 14033 ;;		wreg
 14034 ;; Tracked objects:
 14035 ;;		On entry : 0/0
 14036 ;;		On exit  : 0/0
 14037 ;;		Unchanged: 0/0
 14038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;Total ram usage:        2 bytes
 14044 ;; Hardware stack levels used:    1
 14045 ;; Hardware stack levels required when called:    5
 14046 ;; This function calls:
 14047 ;;		Nothing
 14048 ;; This function is called by:
 14049 ;;		_setLED_Initialization
 14050 ;;		_setLED
 14051 ;;		_setLED_Main
 14052 ;; This function uses a non-reentrant model
 14053 ;;
 14054                           
 14055                           
 14056                           ;psect for function _LedPointSelect
 14057  1C5F                     _LedPointSelect:	
 14058                           
 14059                           ;incstack = 0
 14060                           ; Regs used in _LedPointSelect: [wreg]
 14061                           ;LedPointSelect@led stored from wreg
 14062  1C5F  0020               	movlb	0	; select bank0
 14063  1C60  00A2               	movwf	LedPointSelect@led
 14064                           
 14065                           ;LED_B1.c: 24: if (led == 99) {
 14066  1C61  0822               	movf	LedPointSelect@led,w
 14067  1C62  3A63               	xorlw	99
 14068  1C63  1D03               	skipz
 14069  1C64  0008               	return
 14070                           
 14071                           ;LED_B1.c: 25: LED = &VarErrLED;
 14072  1C65  3069               	movlw	_VarErrLED& (0+255)
 14073  1C66  00A1               	movwf	??_LedPointSelect
 14074  1C67  0821               	movf	??_LedPointSelect,w
 14075  1C68  0021               	movlb	1	; select bank1
 14076  1C69  00D0               	movwf	_LED^(0+128)
 14077  1C6A  0008               	return
 14078  1C6B                     __end_of_LedPointSelect:	
 14079                           
 14080                           	psect	text91
 14081  1EBF                     __ptext91:	
 14082 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14083 ;; Defined at:
 14084 ;;		line 184 in file "../src/Dimmer_B1.c"
 14085 ;; Parameters:    Size  Location     Type
 14086 ;;  lights          1    wreg     unsigned char 
 14087 ;;  command         1    1[BANK0 ] unsigned char 
 14088 ;; Auto vars:     Size  Location     Type
 14089 ;;  lights          1    3[BANK0 ] unsigned char 
 14090 ;; Return value:  Size  Location     Type
 14091 ;;		None               void
 14092 ;; Registers used:
 14093 ;;		wreg, status,2, status,0
 14094 ;; Tracked objects:
 14095 ;;		On entry : 0/0
 14096 ;;		On exit  : 0/0
 14097 ;;		Unchanged: 0/0
 14098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14099 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;Total ram usage:        3 bytes
 14104 ;; Hardware stack levels used:    1
 14105 ;; Hardware stack levels required when called:    5
 14106 ;; This function calls:
 14107 ;;		Nothing
 14108 ;; This function is called by:
 14109 ;;		_setDimmerLights_OnOff
 14110 ;;		_setRFSW_AdjControl
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           
 14115                           ;psect for function _setDimmerIntr_Dimming_RF
 14116  1EBF                     _setDimmerIntr_Dimming_RF:	
 14117                           
 14118                           ;incstack = 0
 14119                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14120                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14121  1EBF  0020               	movlb	0	; select bank0
 14122  1EC0  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14123                           
 14124                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14125  1EC1  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14126  1EC2  3A01               	xorlw	1
 14127  1EC3  1D03               	skipz
 14128  1EC4  0008               	return
 14129                           
 14130                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14131  1EC5  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14132  1EC6  3A01               	xorlw	1
 14133  1EC7  3000               	movlw	0
 14134  1EC8  1903               	skipnz
 14135  1EC9  3001               	movlw	1
 14136  1ECA  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14137  1ECB  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14138  1ECC  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14139  1ECD  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14140  1ECE  0021               	movlb	1	; select bank1
 14141  1ECF  083A               	movf	_DimmerIntr1^(0+128),w
 14142  1ED0  0020               	movlb	0	; select bank0
 14143  1ED1  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14144  1ED2  39BF               	andlw	-65
 14145  1ED3  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14146  1ED4  0021               	movlb	1	; select bank1
 14147  1ED5  00BA               	movwf	_DimmerIntr1^(0+128)
 14148  1ED6  0008               	return
 14149  1ED7                     __end_of_setDimmerIntr_Dimming_RF:	
 14150                           
 14151                           	psect	text92
 14152  1C53                     __ptext92:	
 14153 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14154 ;; Defined at:
 14155 ;;		line 49 in file "../src/Dimmer_B1.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;  lights          1    wreg     unsigned char 
 14158 ;;  value           1   67[BANK0 ] unsigned char 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  lights          1   69[BANK0 ] unsigned char 
 14161 ;; Return value:  Size  Location     Type
 14162 ;;		None               void
 14163 ;; Registers used:
 14164 ;;		wreg
 14165 ;; Tracked objects:
 14166 ;;		On entry : 0/0
 14167 ;;		On exit  : 0/0
 14168 ;;		Unchanged: 0/0
 14169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14170 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;Total ram usage:        3 bytes
 14175 ;; Hardware stack levels used:    1
 14176 ;; Hardware stack levels required when called:    5
 14177 ;; This function calls:
 14178 ;;		Nothing
 14179 ;; This function is called by:
 14180 ;;		_setDimmerLights_OnOff
 14181 ;; This function uses a non-reentrant model
 14182 ;;
 14183                           
 14184                           
 14185                           ;psect for function _setDimmerIntr_DimmingValue
 14186  1C53                     _setDimmerIntr_DimmingValue:	
 14187                           
 14188                           ;incstack = 0
 14189                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14190                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14191  1C53  0020               	movlb	0	; select bank0
 14192  1C54  00E5               	movwf	setDimmerIntr_DimmingValue@lights
 14193                           
 14194                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14195  1C55  0865               	movf	setDimmerIntr_DimmingValue@lights,w
 14196  1C56  3A01               	xorlw	1
 14197  1C57  1D03               	skipz
 14198  1C58  0008               	return
 14199                           
 14200                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14201  1C59  0863               	movf	setDimmerIntr_DimmingValue@value,w
 14202  1C5A  00E4               	movwf	??_setDimmerIntr_DimmingValue
 14203  1C5B  0864               	movf	??_setDimmerIntr_DimmingValue,w
 14204  1C5C  0021               	movlb	1	; select bank1
 14205  1C5D  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 14206  1C5E  0008               	return
 14207  1C5F                     __end_of_setDimmerIntr_DimmingValue:	
 14208                           
 14209                           	psect	text93
 14210  1EA7                     __ptext93:	
 14211 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14212 ;; Defined at:
 14213 ;;		line 31 in file "../src/Dimmer_B1.c"
 14214 ;; Parameters:    Size  Location     Type
 14215 ;;  lights          1    wreg     unsigned char 
 14216 ;;  command         1    1[BANK0 ] unsigned char 
 14217 ;; Auto vars:     Size  Location     Type
 14218 ;;  lights          1    3[BANK0 ] unsigned char 
 14219 ;; Return value:  Size  Location     Type
 14220 ;;		None               void
 14221 ;; Registers used:
 14222 ;;		wreg, status,2, status,0
 14223 ;; Tracked objects:
 14224 ;;		On entry : 0/0
 14225 ;;		On exit  : 0/0
 14226 ;;		Unchanged: 0/0
 14227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14228 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;Total ram usage:        3 bytes
 14233 ;; Hardware stack levels used:    1
 14234 ;; Hardware stack levels required when called:    5
 14235 ;; This function calls:
 14236 ;;		Nothing
 14237 ;; This function is called by:
 14238 ;;		_setDimmerLights_OnOff
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           
 14243                           ;psect for function _setDimmerIntr_ControlStatus
 14244  1EA7                     _setDimmerIntr_ControlStatus:	
 14245                           
 14246                           ;incstack = 0
 14247                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14248                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14249  1EA7  0020               	movlb	0	; select bank0
 14250  1EA8  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14251                           
 14252                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14253  1EA9  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14254  1EAA  3A01               	xorlw	1
 14255  1EAB  1D03               	skipz
 14256  1EAC  0008               	return
 14257                           
 14258                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14259  1EAD  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14260  1EAE  3A01               	xorlw	1
 14261  1EAF  3000               	movlw	0
 14262  1EB0  1903               	skipnz
 14263  1EB1  3001               	movlw	1
 14264  1EB2  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14265  1EB3  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14266  1EB4  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14267  1EB5  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14268  1EB6  0021               	movlb	1	; select bank1
 14269  1EB7  083A               	movf	_DimmerIntr1^(0+128),w
 14270  1EB8  0020               	movlb	0	; select bank0
 14271  1EB9  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14272  1EBA  39F7               	andlw	-9
 14273  1EBB  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14274  1EBC  0021               	movlb	1	; select bank1
 14275  1EBD  00BA               	movwf	_DimmerIntr1^(0+128)
 14276  1EBE  0008               	return
 14277  1EBF                     __end_of_setDimmerIntr_ControlStatus:	
 14278                           
 14279                           	psect	text94
 14280  0CAC                     __ptext94:	
 14281 ;; *************** function _setDelayOff_GO *****************
 14282 ;; Defined at:
 14283 ;;		line 87 in file "../src/DelayOff_B1.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  sw              1    wreg     unsigned char 
 14286 ;;  command         1   70[BANK0 ] unsigned char 
 14287 ;;  value           1   71[BANK0 ] unsigned char 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;  sw              1   77[BANK0 ] unsigned char 
 14290 ;;  k               1   76[BANK0 ] unsigned char 
 14291 ;;  j               1   75[BANK0 ] unsigned char 
 14292 ;;  i               1   74[BANK0 ] unsigned char 
 14293 ;; Return value:  Size  Location     Type
 14294 ;;		None               void
 14295 ;; Registers used:
 14296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;Total ram usage:        8 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; Hardware stack levels required when called:    6
 14309 ;; This function calls:
 14310 ;;		_DelayOffPointSelect
 14311 ;;		___bmul
 14312 ;;		_setProductData
 14313 ;; This function is called by:
 14314 ;;		_setDimmerLights_OnOff
 14315 ;;		_setRFSW_Control
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           
 14320                           ;psect for function _setDelayOff_GO
 14321  0CAC                     _setDelayOff_GO:	
 14322                           
 14323                           ;incstack = 0
 14324                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14325                           ;setDelayOff_GO@sw stored from wreg
 14326  0CAC  0020               	movlb	0	; select bank0
 14327  0CAD  00ED               	movwf	setDelayOff_GO@sw
 14328                           
 14329                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14330  0CAE  086D               	movf	setDelayOff_GO@sw,w
 14331  0CAF  319C  2423  318C   	fcall	_DelayOffPointSelect
 14332                           
 14333                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14334  0CB2  0020               	movlb	0	; select bank0
 14335  0CB3  0866               	movf	setDelayOff_GO@command,w
 14336  0CB4  3A01               	xorlw	1
 14337  0CB5  3000               	movlw	0
 14338  0CB6  1903               	skipnz
 14339  0CB7  3001               	movlw	1
 14340  0CB8  00E8               	movwf	??_setDelayOff_GO
 14341  0CB9  0021               	movlb	1	; select bank1
 14342  0CBA  084D               	movf	_DelayOff^(0+128),w
 14343  0CBB  0086               	movwf	6
 14344  0CBC  3001               	movlw	1	; select bank2/3
 14345  0CBD  0087               	movwf	7
 14346  0CBE  0020               	movlb	0	; select bank0
 14347  0CBF  0DE8               	rlf	??_setDelayOff_GO,f
 14348  0CC0  0801               	movf	1,w
 14349  0CC1  0668               	xorwf	??_setDelayOff_GO,w
 14350  0CC2  39FD               	andlw	-3
 14351  0CC3  0668               	xorwf	??_setDelayOff_GO,w
 14352  0CC4  0081               	movwf	1
 14353                           
 14354                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14355  0CC5  0021               	movlb	1	; select bank1
 14356  0CC6  084D               	movf	_DelayOff^(0+128),w
 14357  0CC7  3E02               	addlw	2
 14358  0CC8  0086               	movwf	6
 14359  0CC9  3001               	movlw	1	; select bank2/3
 14360  0CCA  0087               	movwf	7
 14361  0CCB  3000               	movlw	0
 14362  0CCC  3FC0               	movwi [0]fsr1
 14363  0CCD  3FC1               	movwi [1]fsr1
 14364                           
 14365                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14366  0CCE  084D               	movf	_DelayOff^(0+128),w
 14367  0CCF  3E04               	addlw	4
 14368  0CD0  0086               	movwf	6
 14369  0CD1  3001               	movlw	1	; select bank2/3
 14370  0CD2  0087               	movwf	7
 14371  0CD3  0181               	clrf	1
 14372                           
 14373                           ;DelayOff_B1.c: 94: if (command == 1) {
 14374  0CD4  0020               	movlb	0	; select bank0
 14375  0CD5  0866               	movf	setDelayOff_GO@command,w
 14376  0CD6  3A01               	xorlw	1
 14377  0CD7  1D03               	skipz
 14378  0CD8  2D2E               	goto	l8607
 14379                           
 14380                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14381  0CD9  3005               	movlw	5
 14382  0CDA  00E8               	movwf	??_setDelayOff_GO
 14383  0CDB  0868               	movf	??_setDelayOff_GO,w
 14384  0CDC  00EA               	movwf	setDelayOff_GO@i
 14385  0CDD  01EB               	clrf	setDelayOff_GO@j
 14386  0CDE  01EC               	clrf	setDelayOff_GO@k
 14387                           
 14388                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14389  0CDF  300F               	movlw	15
 14390  0CE0  0567               	andwf	setDelayOff_GO@value,w
 14391  0CE1  00E8               	movwf	??_setDelayOff_GO
 14392  0CE2  0868               	movf	??_setDelayOff_GO,w
 14393  0CE3  3A05               	xorlw	5
 14394  0CE4  1903               	skipnz
 14395  0CE5  2CEA               	goto	l8593
 14396  0CE6  0867               	movf	setDelayOff_GO@value,w
 14397  0CE7  390F               	andlw	15
 14398  0CE8  1D03               	btfss	3,2
 14399  0CE9  2D1A               	goto	l8603
 14400  0CEA                     l8593:	
 14401  0CEA  3031               	movlw	49
 14402  0CEB  0267               	subwf	setDelayOff_GO@value,w
 14403  0CEC  1803               	skipnc
 14404  0CED  2D1A               	goto	l8603
 14405                           
 14406                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14407  0CEE  0867               	movf	setDelayOff_GO@value,w
 14408  0CEF  390F               	andlw	15
 14409  0CF0  00E8               	movwf	??_setDelayOff_GO
 14410  0CF1  0868               	movf	??_setDelayOff_GO,w
 14411  0CF2  00EB               	movwf	setDelayOff_GO@j
 14412                           
 14413                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14414  0CF3  0867               	movf	setDelayOff_GO@value,w
 14415  0CF4  00E8               	movwf	??_setDelayOff_GO
 14416  0CF5  3004               	movlw	4
 14417  0CF6                     u9315:	
 14418  0CF6  36E8               	lsrf	??_setDelayOff_GO,f
 14419  0CF7  0B89               	decfsz	9,f
 14420  0CF8  2CF6               	goto	u9315
 14421  0CF9  0868               	movf	??_setDelayOff_GO,w
 14422  0CFA  390F               	andlw	15
 14423  0CFB  00E9               	movwf	??_setDelayOff_GO+1
 14424  0CFC  0869               	movf	??_setDelayOff_GO+1,w
 14425  0CFD  00EC               	movwf	setDelayOff_GO@k
 14426                           
 14427                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14428  0CFE  300A               	movlw	10
 14429  0CFF  00E8               	movwf	??_setDelayOff_GO
 14430  0D00  0868               	movf	??_setDelayOff_GO,w
 14431  0D01  00A1               	movwf	___bmul@multiplicand
 14432  0D02  086C               	movf	setDelayOff_GO@k,w
 14433  0D03  319D  256B  318C   	fcall	___bmul
 14434  0D06  0020               	movlb	0	; select bank0
 14435  0D07  076B               	addwf	setDelayOff_GO@j,w
 14436  0D08  00E9               	movwf	??_setDelayOff_GO+1
 14437  0D09  0021               	movlb	1	; select bank1
 14438  0D0A  0A4D               	incf	_DelayOff^(0+128),w
 14439  0D0B  0086               	movwf	6
 14440  0D0C  3001               	movlw	1	; select bank2/3
 14441  0D0D  0087               	movwf	7
 14442  0D0E  0020               	movlb	0	; select bank0
 14443  0D0F  0869               	movf	??_setDelayOff_GO+1,w
 14444  0D10  0081               	movwf	1
 14445                           
 14446                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14447  0D11  0867               	movf	setDelayOff_GO@value,w
 14448  0D12  00E8               	movwf	??_setDelayOff_GO
 14449  0D13  0868               	movf	??_setDelayOff_GO,w
 14450  0D14  00E3               	movwf	setProductData@value
 14451  0D15  086D               	movf	setDelayOff_GO@sw,w
 14452  0D16  3E1A               	addlw	26
 14453  0D17  319C  243B         	fcall	_setProductData
 14454                           
 14455                           ;DelayOff_B1.c: 103: } else {
 14456  0D19  0008               	return
 14457  0D1A                     l8603:	
 14458                           
 14459                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14460  0D1A  3005               	movlw	5
 14461  0D1B  0020               	movlb	0	; select bank0
 14462  0D1C  00E8               	movwf	??_setDelayOff_GO
 14463  0D1D  0021               	movlb	1	; select bank1
 14464  0D1E  0A4D               	incf	_DelayOff^(0+128),w
 14465  0D1F  0086               	movwf	6
 14466  0D20  3001               	movlw	1	; select bank2/3
 14467  0D21  0087               	movwf	7
 14468  0D22  0020               	movlb	0	; select bank0
 14469  0D23  0868               	movf	??_setDelayOff_GO,w
 14470  0D24  0081               	movwf	1
 14471                           
 14472                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14473  0D25  3005               	movlw	5
 14474  0D26  00E8               	movwf	??_setDelayOff_GO
 14475  0D27  0868               	movf	??_setDelayOff_GO,w
 14476  0D28  00E3               	movwf	setProductData@value
 14477  0D29  086D               	movf	setDelayOff_GO@sw,w
 14478  0D2A  3E1A               	addlw	26
 14479  0D2B  319C  243B         	fcall	_setProductData
 14480                           
 14481                           ;DelayOff_B1.c: 106: }
 14482                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14483  0D2D  0008               	return
 14484  0D2E                     l8607:	
 14485  0D2E  0020               	movlb	0	; select bank0
 14486  0D2F  08E6               	movf	setDelayOff_GO@command,f
 14487  0D30  1D03               	skipz
 14488  0D31  0008               	return
 14489                           
 14490                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14491  0D32  01E3               	clrf	setProductData@value
 14492  0D33  086D               	movf	setDelayOff_GO@sw,w
 14493  0D34  3E1A               	addlw	26
 14494  0D35  319C  243B         	fcall	_setProductData
 14495  0D37  0008               	return
 14496  0D38                     __end_of_setDelayOff_GO:	
 14497                           
 14498                           	psect	text95
 14499  1D6B                     __ptext95:	
 14500 ;; *************** function ___bmul *****************
 14501 ;; Defined at:
 14502 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;  multiplier      1    wreg     unsigned char 
 14505 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14508 ;;  product         1    3[BANK0 ] unsigned char 
 14509 ;; Return value:  Size  Location     Type
 14510 ;;                  1    wreg      unsigned char 
 14511 ;; Registers used:
 14512 ;;		wreg, status,2, status,0
 14513 ;; Tracked objects:
 14514 ;;		On entry : 0/0
 14515 ;;		On exit  : 0/0
 14516 ;;		Unchanged: 0/0
 14517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14518 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14522 ;;Total ram usage:        4 bytes
 14523 ;; Hardware stack levels used:    1
 14524 ;; Hardware stack levels required when called:    5
 14525 ;; This function calls:
 14526 ;;		Nothing
 14527 ;; This function is called by:
 14528 ;;		_setDelayOff_GO
 14529 ;;		_DelayTimejudge
 14530 ;; This function uses a non-reentrant model
 14531 ;;
 14532                           
 14533                           
 14534                           ;psect for function ___bmul
 14535  1D6B                     ___bmul:	
 14536                           
 14537                           ;incstack = 0
 14538                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14539                           ;___bmul@multiplier stored from wreg
 14540  1D6B  0020               	movlb	0	; select bank0
 14541  1D6C  00A4               	movwf	___bmul@multiplier
 14542  1D6D  01A3               	clrf	___bmul@product
 14543  1D6E                     l5757:	
 14544  1D6E  1C24               	btfss	___bmul@multiplier,0
 14545  1D6F  2D74               	goto	l5761
 14546  1D70  0821               	movf	___bmul@multiplicand,w
 14547  1D71  00A2               	movwf	??___bmul
 14548  1D72  0822               	movf	??___bmul,w
 14549  1D73  07A3               	addwf	___bmul@product,f
 14550  1D74                     l5761:	
 14551  1D74  1003               	clrc
 14552  1D75  0DA1               	rlf	___bmul@multiplicand,f
 14553  1D76  1003               	clrc
 14554  1D77  0CA4               	rrf	___bmul@multiplier,f
 14555  1D78  08A4               	movf	___bmul@multiplier,f
 14556  1D79  1D03               	skipz
 14557  1D7A  2D6E               	goto	l5757
 14558  1D7B  0823               	movf	___bmul@product,w
 14559  1D7C  0008               	return
 14560  1D7D                     __end_of___bmul:	
 14561                           
 14562                           	psect	text96
 14563  1EF0                     __ptext96:	
 14564 ;; *************** function _setCmd_Status *****************
 14565 ;; Defined at:
 14566 ;;		line 651 in file "../src/Main_B1.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;  number          1    wreg     unsigned char 
 14569 ;;  cmd             1    1[BANK0 ] unsigned char 
 14570 ;; Auto vars:     Size  Location     Type
 14571 ;;  number          1    3[BANK0 ] unsigned char 
 14572 ;; Return value:  Size  Location     Type
 14573 ;;		None               void
 14574 ;; Registers used:
 14575 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14576 ;; Tracked objects:
 14577 ;;		On entry : 0/0
 14578 ;;		On exit  : 0/0
 14579 ;;		Unchanged: 0/0
 14580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;Total ram usage:        3 bytes
 14586 ;; Hardware stack levels used:    1
 14587 ;; Hardware stack levels required when called:    5
 14588 ;; This function calls:
 14589 ;;		Nothing
 14590 ;; This function is called by:
 14591 ;;		_setDimmerLights_OnOff
 14592 ;;		_setControl_Lights_Table
 14593 ;; This function uses a non-reentrant model
 14594 ;;
 14595                           
 14596                           
 14597                           ;psect for function _setCmd_Status
 14598  1EF0                     _setCmd_Status:	
 14599                           
 14600                           ;incstack = 0
 14601                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14602                           ;setCmd_Status@number stored from wreg
 14603  1EF0  0020               	movlb	0	; select bank0
 14604  1EF1  00A3               	movwf	setCmd_Status@number
 14605                           
 14606                           ;Main_B1.c: 652: switch (number) {
 14607  1EF2  2F02               	goto	l6259
 14608  1EF3                     l6255:	
 14609                           ;Main_B1.c: 653: case 1:
 14610                           
 14611                           
 14612                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14613  1EF3  0821               	movf	setCmd_Status@cmd,w
 14614  1EF4  3A01               	xorlw	1
 14615  1EF5  3000               	movlw	0
 14616  1EF6  1903               	skipnz
 14617  1EF7  3001               	movlw	1
 14618  1EF8  00A2               	movwf	??_setCmd_Status
 14619  1EF9  0021               	movlb	1	; select bank1
 14620  1EFA  084C               	movf	_Cmd^(0+128),w
 14621  1EFB  0020               	movlb	0	; select bank0
 14622  1EFC  0622               	xorwf	??_setCmd_Status,w
 14623  1EFD  39FE               	andlw	-2
 14624  1EFE  0622               	xorwf	??_setCmd_Status,w
 14625  1EFF  0021               	movlb	1	; select bank1
 14626  1F00  00CC               	movwf	_Cmd^(0+128)
 14627                           
 14628                           ;Main_B1.c: 656: }
 14629                           
 14630                           ;Main_B1.c: 655: break;
 14631  1F01  0008               	return
 14632  1F02                     l6259:	
 14633  1F02  0020               	movlb	0	; select bank0
 14634  1F03  0823               	movf	setCmd_Status@number,w
 14635                           
 14636                           ; Switch size 1, requested type "space"
 14637                           ; Number of cases is 1, Range of values is 1 to 1
 14638                           ; switch strategies available:
 14639                           ; Name         Instructions Cycles
 14640                           ; simple_byte            4     3 (average)
 14641                           ; direct_byte           11     9 (fixed)
 14642                           ; jumptable            263     9 (fixed)
 14643                           ;	Chosen strategy is simple_byte
 14644  1F04  3A01               	xorlw	1	; case 1
 14645  1F05  1903               	skipnz
 14646  1F06  2EF3               	goto	l6255
 14647  1F07  2F08               	goto	l1501
 14648  1F08                     l1501:	
 14649  1F08  0008               	return
 14650  1F09                     __end_of_setCmd_Status:	
 14651                           
 14652                           	psect	text97
 14653  1BE2                     __ptext97:	
 14654 ;; *************** function _getMain_All_LightsStatus *****************
 14655 ;; Defined at:
 14656 ;;		line 373 in file "../src/Main_B1.c"
 14657 ;; Parameters:    Size  Location     Type
 14658 ;;		None
 14659 ;; Auto vars:     Size  Location     Type
 14660 ;;  status          1    1[BANK0 ] unsigned char 
 14661 ;; Return value:  Size  Location     Type
 14662 ;;                  1    wreg      unsigned char 
 14663 ;; Registers used:
 14664 ;;		wreg, status,2
 14665 ;; Tracked objects:
 14666 ;;		On entry : 0/0
 14667 ;;		On exit  : 0/0
 14668 ;;		Unchanged: 0/0
 14669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;Total ram usage:        1 bytes
 14675 ;; Hardware stack levels used:    1
 14676 ;; Hardware stack levels required when called:    5
 14677 ;; This function calls:
 14678 ;;		Nothing
 14679 ;; This function is called by:
 14680 ;;		_DimmerLights_Main
 14681 ;;		_setDimmerLights_Main
 14682 ;;		_setDimmerLights_OnOff
 14683 ;;		_Flash_Memory_Main
 14684 ;;		_Exception_Main
 14685 ;;		_Load_Main
 14686 ;;		_setTemp_Main
 14687 ;;		_setControl_Lights_Table
 14688 ;; This function uses a non-reentrant model
 14689 ;;
 14690                           
 14691                           
 14692                           ;psect for function _getMain_All_LightsStatus
 14693  1BE2                     _getMain_All_LightsStatus:	
 14694                           
 14695                           ;Main_B1.c: 374: char status = 0;
 14696                           
 14697                           ;incstack = 0
 14698                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14699  1BE2  0020               	movlb	0	; select bank0
 14700  1BE3  01A1               	clrf	getMain_All_LightsStatus@status
 14701                           
 14702                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14703  1BE4  3000               	movlw	0
 14704  1BE5  0022               	movlb	2	; select bank2
 14705  1BE6  185D               	btfsc	(_DimmerLights1^(0+256)+1),0
 14706  1BE7  3001               	movlw	1
 14707  1BE8  0020               	movlb	0	; select bank0
 14708  1BE9  00A1               	movwf	getMain_All_LightsStatus@status
 14709                           
 14710                           ;Main_B1.c: 420: return status;
 14711  1BEA  0821               	movf	getMain_All_LightsStatus@status,w
 14712  1BEB  0008               	return
 14713  1BEC                     __end_of_getMain_All_LightsStatus:	
 14714                           
 14715                           	psect	text98
 14716  1733                     __ptext98:	
 14717 ;; *************** function _getDimmerLights_PercentToValue *****************
 14718 ;; Defined at:
 14719 ;;		line 1057 in file "../src/Dimmer_B1.c"
 14720 ;; Parameters:    Size  Location     Type
 14721 ;;  value           1    wreg     unsigned char 
 14722 ;; Auto vars:     Size  Location     Type
 14723 ;;  value           1   63[BANK0 ] unsigned char 
 14724 ;;  i               3   64[BANK0 ] float 
 14725 ;; Return value:  Size  Location     Type
 14726 ;;                  1    wreg      unsigned char 
 14727 ;; Registers used:
 14728 ;;		wreg, status,2, status,0, pclath, cstack
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14737 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14738 ;;Total ram usage:        6 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    7
 14741 ;; This function calls:
 14742 ;;		___awtoft
 14743 ;;		___ftadd
 14744 ;;		___ftdiv
 14745 ;;		___ftmul
 14746 ;;		___ftneg
 14747 ;;		___fttol
 14748 ;; This function is called by:
 14749 ;;		_setDimmerLights_OnOff
 14750 ;;		_setRFSW_AdjControl
 14751 ;; This function uses a non-reentrant model
 14752 ;;
 14753                           
 14754                           
 14755                           ;psect for function _getDimmerLights_PercentToValue
 14756  1733                     _getDimmerLights_PercentToValue:	
 14757                           
 14758                           ;incstack = 0
 14759                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14760                           ;getDimmerLights_PercentToValue@value stored from wreg
 14761  1733  0020               	movlb	0	; select bank0
 14762  1734  00DF               	movwf	getDimmerLights_PercentToValue@value
 14763                           
 14764                           ;Dimmer_B1.c: 1065: float i = ((char)(60*0.78)) - ((char)(5*0.78));
 14765  1735  3000               	movlw	0
 14766  1736  00E0               	movwf	getDimmerLights_PercentToValue@i
 14767  1737  302C               	movlw	44
 14768  1738  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 14769  1739  3042               	movlw	66
 14770  173A  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 14771                           
 14772                           ;Dimmer_B1.c: 1066: i /= 100;
 14773  173B  3000               	movlw	0
 14774  173C  00AF               	movwf	___ftdiv@f2
 14775  173D  30C8               	movlw	200
 14776  173E  00B0               	movwf	___ftdiv@f2+1
 14777  173F  3042               	movlw	66
 14778  1740  00B1               	movwf	___ftdiv@f2+2
 14779  1741  0860               	movf	getDimmerLights_PercentToValue@i,w
 14780  1742  00B2               	movwf	___ftdiv@f1
 14781  1743  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 14782  1744  00B3               	movwf	___ftdiv@f1+1
 14783  1745  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 14784  1746  00B4               	movwf	___ftdiv@f1+2
 14785  1747  318D  2538  3197   	fcall	___ftdiv
 14786  174A  0020               	movlb	0	; select bank0
 14787  174B  082F               	movf	?___ftdiv,w
 14788  174C  00E0               	movwf	getDimmerLights_PercentToValue@i
 14789  174D  0830               	movf	?___ftdiv+1,w
 14790  174E  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 14791  174F  0831               	movf	?___ftdiv+2,w
 14792  1750  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 14793                           
 14794                           ;Dimmer_B1.c: 1068: return (char) (((char)(60*0.78)) - ((100 - value) * i));
 14795  1751  085F               	movf	getDimmerLights_PercentToValue@value,w
 14796  1752  00DD               	movwf	??_getDimmerLights_PercentToValue
 14797  1753  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 14798  1754  09DD               	comf	??_getDimmerLights_PercentToValue,f
 14799  1755  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 14800  1756  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 14801  1757  1903               	skipnz
 14802  1758  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 14803  1759  085D               	movf	??_getDimmerLights_PercentToValue,w
 14804  175A  3E64               	addlw	100
 14805  175B  00A9               	movwf	___awtoft@c
 14806  175C  3000               	movlw	0
 14807  175D  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14808  175E  00AA               	movwf	___awtoft@c+1
 14809  175F  3190  209D  3197   	fcall	___awtoft
 14810  1762  0020               	movlb	0	; select bank0
 14811  1763  0829               	movf	?___awtoft,w
 14812  1764  00B2               	movwf	___ftmul@f2
 14813  1765  082A               	movf	?___awtoft+1,w
 14814  1766  00B3               	movwf	___ftmul@f2+1
 14815  1767  082B               	movf	?___awtoft+2,w
 14816  1768  00B4               	movwf	___ftmul@f2+2
 14817  1769  0860               	movf	getDimmerLights_PercentToValue@i,w
 14818  176A  00AF               	movwf	___ftmul@f1
 14819  176B  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 14820  176C  00B0               	movwf	___ftmul@f1+1
 14821  176D  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 14822  176E  00B1               	movwf	___ftmul@f1+2
 14823  176F  318E  2691  3197   	fcall	___ftmul
 14824  1772  0020               	movlb	0	; select bank0
 14825  1773  082F               	movf	?___ftmul,w
 14826  1774  00BF               	movwf	___ftneg@f1
 14827  1775  0830               	movf	?___ftmul+1,w
 14828  1776  00C0               	movwf	___ftneg@f1+1
 14829  1777  0831               	movf	?___ftmul+2,w
 14830  1778  00C1               	movwf	___ftneg@f1+2
 14831  1779  319B  23D0  3197   	fcall	___ftneg
 14832  177C  0020               	movlb	0	; select bank0
 14833  177D  083F               	movf	?___ftneg,w
 14834  177E  00C5               	movwf	___ftadd@f2
 14835  177F  0840               	movf	?___ftneg+1,w
 14836  1780  00C6               	movwf	___ftadd@f2+1
 14837  1781  0841               	movf	?___ftneg+2,w
 14838  1782  00C7               	movwf	___ftadd@f2+2
 14839  1783  3000               	movlw	0
 14840  1784  00C2               	movwf	___ftadd@f1
 14841  1785  3038               	movlw	56
 14842  1786  00C3               	movwf	___ftadd@f1+1
 14843  1787  3042               	movlw	66
 14844  1788  00C4               	movwf	___ftadd@f1+2
 14845  1789  3183  2380  3197   	fcall	___ftadd
 14846  178C  0020               	movlb	0	; select bank0
 14847  178D  0842               	movf	?___ftadd,w
 14848  178E  00CF               	movwf	___fttol@f1
 14849  178F  0843               	movf	?___ftadd+1,w
 14850  1790  00D0               	movwf	___fttol@f1+1
 14851  1791  0844               	movf	?___ftadd+2,w
 14852  1792  00D1               	movwf	___fttol@f1+2
 14853  1793  318C  2425         	fcall	___fttol
 14854  1795  0020               	movlb	0	; select bank0
 14855  1796  084F               	movf	?___fttol,w
 14856  1797  0008               	return
 14857  1798                     __end_of_getDimmerLights_PercentToValue:	
 14858                           
 14859                           	psect	text99
 14860  0E91                     __ptext99:	
 14861 ;; *************** function ___ftmul *****************
 14862 ;; Defined at:
 14863 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14864 ;; Parameters:    Size  Location     Type
 14865 ;;  f1              3   15[BANK0 ] float 
 14866 ;;  f2              3   18[BANK0 ] float 
 14867 ;; Auto vars:     Size  Location     Type
 14868 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 14869 ;;  sign            1   30[BANK0 ] unsigned char 
 14870 ;;  cntr            1   29[BANK0 ] unsigned char 
 14871 ;;  exp             1   25[BANK0 ] unsigned char 
 14872 ;; Return value:  Size  Location     Type
 14873 ;;                  3   15[BANK0 ] float 
 14874 ;; Registers used:
 14875 ;;		wreg, status,2, status,0, pclath, cstack
 14876 ;; Tracked objects:
 14877 ;;		On entry : 0/0
 14878 ;;		On exit  : 0/0
 14879 ;;		Unchanged: 0/0
 14880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14881 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14882 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14883 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;Total ram usage:       16 bytes
 14886 ;; Hardware stack levels used:    1
 14887 ;; Hardware stack levels required when called:    6
 14888 ;; This function calls:
 14889 ;;		___ftpack
 14890 ;; This function is called by:
 14891 ;;		_getDimmerLights_PercentToValue
 14892 ;; This function uses a non-reentrant model
 14893 ;;
 14894                           
 14895                           
 14896                           ;psect for function ___ftmul
 14897  0E91                     ___ftmul:	
 14898                           
 14899                           ;incstack = 0
 14900                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14901  0E91  0020               	movlb	0	; select bank0
 14902  0E92  082F               	movf	___ftmul@f1,w
 14903  0E93  00B5               	movwf	??___ftmul
 14904  0E94  0830               	movf	___ftmul@f1+1,w
 14905  0E95  00B6               	movwf	??___ftmul+1
 14906  0E96  0831               	movf	___ftmul@f1+2,w
 14907  0E97  00B7               	movwf	??___ftmul+2
 14908  0E98  1003               	clrc
 14909  0E99  0D36               	rlf	??___ftmul+1,w
 14910  0E9A  0D37               	rlf	??___ftmul+2,w
 14911  0E9B  00B8               	movwf	??___ftmul+3
 14912  0E9C  0838               	movf	??___ftmul+3,w
 14913  0E9D  00B9               	movwf	___ftmul@exp
 14914  0E9E  08B9               	movf	___ftmul@exp,f
 14915  0E9F  1D03               	skipz
 14916  0EA0  2EA8               	goto	l8463
 14917  0EA1  3000               	movlw	0
 14918  0EA2  00AF               	movwf	?___ftmul
 14919  0EA3  3000               	movlw	0
 14920  0EA4  00B0               	movwf	?___ftmul+1
 14921  0EA5  3000               	movlw	0
 14922  0EA6  00B1               	movwf	?___ftmul+2
 14923  0EA7  0008               	return
 14924  0EA8                     l8463:	
 14925  0EA8  0832               	movf	___ftmul@f2,w
 14926  0EA9  00B5               	movwf	??___ftmul
 14927  0EAA  0833               	movf	___ftmul@f2+1,w
 14928  0EAB  00B6               	movwf	??___ftmul+1
 14929  0EAC  0834               	movf	___ftmul@f2+2,w
 14930  0EAD  00B7               	movwf	??___ftmul+2
 14931  0EAE  1003               	clrc
 14932  0EAF  0D36               	rlf	??___ftmul+1,w
 14933  0EB0  0D37               	rlf	??___ftmul+2,w
 14934  0EB1  00B8               	movwf	??___ftmul+3
 14935  0EB2  0838               	movf	??___ftmul+3,w
 14936  0EB3  00BE               	movwf	___ftmul@sign
 14937  0EB4  08BE               	movf	___ftmul@sign,f
 14938  0EB5  1D03               	skipz
 14939  0EB6  2EBE               	goto	l8469
 14940  0EB7  3000               	movlw	0
 14941  0EB8  00AF               	movwf	?___ftmul
 14942  0EB9  3000               	movlw	0
 14943  0EBA  00B0               	movwf	?___ftmul+1
 14944  0EBB  3000               	movlw	0
 14945  0EBC  00B1               	movwf	?___ftmul+2
 14946  0EBD  0008               	return
 14947  0EBE                     l8469:	
 14948  0EBE  083E               	movf	___ftmul@sign,w
 14949  0EBF  3E7B               	addlw	123
 14950  0EC0  00B5               	movwf	??___ftmul
 14951  0EC1  0835               	movf	??___ftmul,w
 14952  0EC2  07B9               	addwf	___ftmul@exp,f
 14953  0EC3  082F               	movf	___ftmul@f1,w
 14954  0EC4  00B5               	movwf	??___ftmul
 14955  0EC5  0830               	movf	___ftmul@f1+1,w
 14956  0EC6  00B6               	movwf	??___ftmul+1
 14957  0EC7  0831               	movf	___ftmul@f1+2,w
 14958  0EC8  00B7               	movwf	??___ftmul+2
 14959  0EC9  3010               	movlw	16
 14960  0ECA                     u9045:	
 14961  0ECA  36B7               	lsrf	??___ftmul+2,f
 14962  0ECB  0CB6               	rrf	??___ftmul+1,f
 14963  0ECC  0CB5               	rrf	??___ftmul,f
 14964  0ECD  0B89               	decfsz	9,f
 14965  0ECE  2ECA               	goto	u9045
 14966  0ECF  0835               	movf	??___ftmul,w
 14967  0ED0  00B8               	movwf	??___ftmul+3
 14968  0ED1  0838               	movf	??___ftmul+3,w
 14969  0ED2  00BE               	movwf	___ftmul@sign
 14970  0ED3  0832               	movf	___ftmul@f2,w
 14971  0ED4  00B5               	movwf	??___ftmul
 14972  0ED5  0833               	movf	___ftmul@f2+1,w
 14973  0ED6  00B6               	movwf	??___ftmul+1
 14974  0ED7  0834               	movf	___ftmul@f2+2,w
 14975  0ED8  00B7               	movwf	??___ftmul+2
 14976  0ED9  3010               	movlw	16
 14977  0EDA                     u9055:	
 14978  0EDA  36B7               	lsrf	??___ftmul+2,f
 14979  0EDB  0CB6               	rrf	??___ftmul+1,f
 14980  0EDC  0CB5               	rrf	??___ftmul,f
 14981  0EDD  0B89               	decfsz	9,f
 14982  0EDE  2EDA               	goto	u9055
 14983  0EDF  0835               	movf	??___ftmul,w
 14984  0EE0  00B8               	movwf	??___ftmul+3
 14985  0EE1  0838               	movf	??___ftmul+3,w
 14986  0EE2  06BE               	xorwf	___ftmul@sign,f
 14987  0EE3  3080               	movlw	128
 14988  0EE4  00B5               	movwf	??___ftmul
 14989  0EE5  0835               	movf	??___ftmul,w
 14990  0EE6  05BE               	andwf	___ftmul@sign,f
 14991  0EE7  17B0               	bsf	___ftmul@f1+1,7
 14992  0EE8  17B3               	bsf	___ftmul@f2+1,7
 14993  0EE9  30FF               	movlw	255
 14994  0EEA  05B2               	andwf	___ftmul@f2,f
 14995  0EEB  30FF               	movlw	255
 14996  0EEC  05B3               	andwf	___ftmul@f2+1,f
 14997  0EED  3000               	movlw	0
 14998  0EEE  05B4               	andwf	___ftmul@f2+2,f
 14999  0EEF  3000               	movlw	0
 15000  0EF0  00BA               	movwf	___ftmul@f3_as_product
 15001  0EF1  3000               	movlw	0
 15002  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 15003  0EF3  3000               	movlw	0
 15004  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 15005  0EF5  3007               	movlw	7
 15006  0EF6  00B5               	movwf	??___ftmul
 15007  0EF7  0835               	movf	??___ftmul,w
 15008  0EF8  00BD               	movwf	___ftmul@cntr
 15009  0EF9                     l8481:	
 15010  0EF9  1C2F               	btfss	___ftmul@f1,0
 15011  0EFA  2F01               	goto	l8485
 15012  0EFB  0832               	movf	___ftmul@f2,w
 15013  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 15014  0EFD  0833               	movf	___ftmul@f2+1,w
 15015  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15016  0EFF  0834               	movf	___ftmul@f2+2,w
 15017  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15018  0F01                     l8485:	
 15019  0F01  3001               	movlw	1
 15020  0F02                     u9075:	
 15021  0F02  36B1               	lsrf	___ftmul@f1+2,f
 15022  0F03  0CB0               	rrf	___ftmul@f1+1,f
 15023  0F04  0CAF               	rrf	___ftmul@f1,f
 15024  0F05  0B89               	decfsz	9,f
 15025  0F06  2F02               	goto	u9075
 15026  0F07  3001               	movlw	1
 15027  0F08                     u9085:	
 15028  0F08  35B2               	lslf	___ftmul@f2,f
 15029  0F09  0DB3               	rlf	___ftmul@f2+1,f
 15030  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 15031  0F0B  0B89               	decfsz	9,f
 15032  0F0C  2F08               	goto	u9085
 15033  0F0D  3001               	movlw	1
 15034  0F0E  02BD               	subwf	___ftmul@cntr,f
 15035  0F0F  1D03               	btfss	3,2
 15036  0F10  2EF9               	goto	l8481
 15037  0F11  3009               	movlw	9
 15038  0F12  00B5               	movwf	??___ftmul
 15039  0F13  0835               	movf	??___ftmul,w
 15040  0F14  00BD               	movwf	___ftmul@cntr
 15041  0F15                     l8493:	
 15042  0F15  1C2F               	btfss	___ftmul@f1,0
 15043  0F16  2F1D               	goto	l8497
 15044  0F17  0832               	movf	___ftmul@f2,w
 15045  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 15046  0F19  0833               	movf	___ftmul@f2+1,w
 15047  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15048  0F1B  0834               	movf	___ftmul@f2+2,w
 15049  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15050  0F1D                     l8497:	
 15051  0F1D  3001               	movlw	1
 15052  0F1E                     u9115:	
 15053  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 15054  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 15055  0F20  0CAF               	rrf	___ftmul@f1,f
 15056  0F21  0B89               	decfsz	9,f
 15057  0F22  2F1E               	goto	u9115
 15058  0F23  3001               	movlw	1
 15059  0F24                     u9125:	
 15060  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 15061  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 15062  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 15063  0F27  0B89               	decfsz	9,f
 15064  0F28  2F24               	goto	u9125
 15065  0F29  3001               	movlw	1
 15066  0F2A  02BD               	subwf	___ftmul@cntr,f
 15067  0F2B  1D03               	btfss	3,2
 15068  0F2C  2F15               	goto	l8493
 15069  0F2D  083A               	movf	___ftmul@f3_as_product,w
 15070  0F2E  00A1               	movwf	___ftpack@arg
 15071  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 15072  0F30  00A2               	movwf	___ftpack@arg+1
 15073  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 15074  0F32  00A3               	movwf	___ftpack@arg+2
 15075  0F33  0839               	movf	___ftmul@exp,w
 15076  0F34  00B5               	movwf	??___ftmul
 15077  0F35  0835               	movf	??___ftmul,w
 15078  0F36  00A4               	movwf	___ftpack@exp
 15079  0F37  083E               	movf	___ftmul@sign,w
 15080  0F38  00B6               	movwf	??___ftmul+1
 15081  0F39  0836               	movf	??___ftmul+1,w
 15082  0F3A  00A5               	movwf	___ftpack@sign
 15083  0F3B  3196  2608         	fcall	___ftpack
 15084  0F3D  0020               	movlb	0	; select bank0
 15085  0F3E  0821               	movf	?___ftpack,w
 15086  0F3F  00AF               	movwf	?___ftmul
 15087  0F40  0822               	movf	?___ftpack+1,w
 15088  0F41  00B0               	movwf	?___ftmul+1
 15089  0F42  0823               	movf	?___ftpack+2,w
 15090  0F43  00B1               	movwf	?___ftmul+2
 15091  0F44  0008               	return
 15092  0F45                     __end_of___ftmul:	
 15093                           
 15094                           	psect	text100
 15095  1D04                     __ptext100:	
 15096 ;; *************** function _getDelayOff_GO *****************
 15097 ;; Defined at:
 15098 ;;		line 114 in file "../src/DelayOff_B1.c"
 15099 ;; Parameters:    Size  Location     Type
 15100 ;;  sw              1    wreg     unsigned char 
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;  sw              1    3[BANK0 ] unsigned char 
 15103 ;;  go              1    4[BANK0 ] unsigned char 
 15104 ;; Return value:  Size  Location     Type
 15105 ;;                  1    wreg      unsigned char 
 15106 ;; Registers used:
 15107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15108 ;; Tracked objects:
 15109 ;;		On entry : 0/0
 15110 ;;		On exit  : 0/0
 15111 ;;		Unchanged: 0/0
 15112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15114 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15117 ;;Total ram usage:        2 bytes
 15118 ;; Hardware stack levels used:    1
 15119 ;; Hardware stack levels required when called:    6
 15120 ;; This function calls:
 15121 ;;		_DelayOffPointSelect
 15122 ;; This function is called by:
 15123 ;;		_setDimmerLights_OnOff
 15124 ;; This function uses a non-reentrant model
 15125 ;;
 15126                           
 15127                           
 15128                           ;psect for function _getDelayOff_GO
 15129  1D04                     _getDelayOff_GO:	
 15130                           
 15131                           ;incstack = 0
 15132                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15133                           ;getDelayOff_GO@sw stored from wreg
 15134  1D04  0020               	movlb	0	; select bank0
 15135  1D05  00A3               	movwf	getDelayOff_GO@sw
 15136                           
 15137                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15138  1D06  0823               	movf	getDelayOff_GO@sw,w
 15139  1D07  319C  2423         	fcall	_DelayOffPointSelect
 15140                           
 15141                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15142  1D09  0021               	movlb	1	; select bank1
 15143  1D0A  084D               	movf	_DelayOff^(0+128),w
 15144  1D0B  0086               	movwf	6
 15145  1D0C  3001               	movlw	1	; select bank2/3
 15146  1D0D  0087               	movwf	7
 15147  1D0E  3000               	movlw	0
 15148  1D0F  1881               	btfsc	1,1
 15149  1D10  3001               	movlw	1
 15150  1D11  0020               	movlb	0	; select bank0
 15151  1D12  00A4               	movwf	getDelayOff_GO@go
 15152                           
 15153                           ;DelayOff_B1.c: 117: return go;
 15154  1D13  0824               	movf	getDelayOff_GO@go,w
 15155  1D14  0008               	return
 15156  1D15                     __end_of_getDelayOff_GO:	
 15157                           
 15158                           	psect	text101
 15159  1D59                     __ptext101:	
 15160 ;; *************** function _getCmd_Status *****************
 15161 ;; Defined at:
 15162 ;;		line 659 in file "../src/Main_B1.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;  number          1    wreg     unsigned char 
 15165 ;; Auto vars:     Size  Location     Type
 15166 ;;  number          1    1[BANK0 ] unsigned char 
 15167 ;;  cmd             1    2[BANK0 ] unsigned char 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      unsigned char 
 15170 ;; Registers used:
 15171 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        2 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    5
 15184 ;; This function calls:
 15185 ;;		Nothing
 15186 ;; This function is called by:
 15187 ;;		_setDimmerLights_OnOff
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _getCmd_Status
 15193  1D59                     _getCmd_Status:	
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15197                           ;getCmd_Status@number stored from wreg
 15198  1D59  0020               	movlb	0	; select bank0
 15199  1D5A  00A1               	movwf	getCmd_Status@number
 15200                           
 15201                           ;Main_B1.c: 660: char cmd = 0;
 15202  1D5B  01A2               	clrf	getCmd_Status@cmd
 15203                           
 15204                           ;Main_B1.c: 661: switch (number) {
 15205  1D5C  2D64               	goto	l6501
 15206  1D5D                     l6497:	
 15207                           ;Main_B1.c: 662: case 1:
 15208                           
 15209                           
 15210                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15211  1D5D  3000               	movlw	0
 15212  1D5E  0021               	movlb	1	; select bank1
 15213  1D5F  184C               	btfsc	_Cmd^(0+128),0
 15214  1D60  3001               	movlw	1
 15215  1D61  0020               	movlb	0	; select bank0
 15216  1D62  00A2               	movwf	getCmd_Status@cmd
 15217                           
 15218                           ;Main_B1.c: 665: }
 15219                           
 15220                           ;Main_B1.c: 664: break;
 15221  1D63  2D69               	goto	l6503
 15222  1D64                     l6501:	
 15223  1D64  0821               	movf	getCmd_Status@number,w
 15224                           
 15225                           ; Switch size 1, requested type "space"
 15226                           ; Number of cases is 1, Range of values is 1 to 1
 15227                           ; switch strategies available:
 15228                           ; Name         Instructions Cycles
 15229                           ; simple_byte            4     3 (average)
 15230                           ; direct_byte           11     9 (fixed)
 15231                           ; jumptable            263     9 (fixed)
 15232                           ;	Chosen strategy is simple_byte
 15233  1D65  3A01               	xorlw	1	; case 1
 15234  1D66  1903               	skipnz
 15235  1D67  2D5D               	goto	l6497
 15236  1D68  2D69               	goto	l6503
 15237  1D69                     l6503:	
 15238                           
 15239                           ;Main_B1.c: 666: return cmd;
 15240  1D69  0822               	movf	getCmd_Status@cmd,w
 15241  1D6A  0008               	return
 15242  1D6B                     __end_of_getCmd_Status:	
 15243                           
 15244                           	psect	text102
 15245  15AA                     __ptext102:	
 15246 ;; *************** function _setDimmerLights_Dimming *****************
 15247 ;; Defined at:
 15248 ;;		line 899 in file "../src/Dimmer_B1.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;  lights          1    wreg     unsigned char 
 15251 ;;  status          1   75[BANK0 ] unsigned char 
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  lights          1    1[BANK1 ] unsigned char 
 15254 ;;  value           1    0[BANK1 ] unsigned char 
 15255 ;; Return value:  Size  Location     Type
 15256 ;;		None               void
 15257 ;; Registers used:
 15258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;Total ram usage:        4 bytes
 15269 ;; Hardware stack levels used:    1
 15270 ;; Hardware stack levels required when called:    8
 15271 ;; This function calls:
 15272 ;;		_getDimmerIntr_DimmingValue
 15273 ;;		_getDimmerLights_ValueToPercent
 15274 ;;		_setBuz
 15275 ;;		_setDimmerIntr_Dimming_Sw
 15276 ;;		_setDimmerIntr_MaxmumValue
 15277 ;;		_setDimmerLights_Line
 15278 ;;		_setMemory_Modify
 15279 ;;		_setProductData
 15280 ;;		_setRF_DimmerLights
 15281 ;;		_setRF_TransceiveGO
 15282 ;;		_setTxData
 15283 ;; This function is called by:
 15284 ;;		_setDimmerLights_Main
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           
 15289                           ;psect for function _setDimmerLights_Dimming
 15290  15AA                     _setDimmerLights_Dimming:	
 15291                           
 15292                           ;incstack = 0
 15293                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15294                           ;setDimmerLights_Dimming@lights stored from wreg
 15295  15AA  0021               	movlb	1	; select bank1
 15296  15AB  00E6               	movwf	setDimmerLights_Dimming@lights^(0+128)
 15297                           
 15298                           ;Dimmer_B1.c: 900: if (status == 1) {
 15299  15AC  0020               	movlb	0	; select bank0
 15300  15AD  086B               	movf	setDimmerLights_Dimming@status,w
 15301  15AE  3A01               	xorlw	1
 15302  15AF  1D03               	skipz
 15303  15B0  2DC5               	goto	l8877
 15304                           
 15305                           ;Dimmer_B1.c: 901: setDimmerIntr_Dimming_Sw(lights, 1);
 15306  15B1  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15307  15B2  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15308  15B3  0021               	movlb	1	; select bank1
 15309  15B4  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15310  15B5  319E  267B  3195   	fcall	_setDimmerIntr_Dimming_Sw
 15311                           
 15312                           ;Dimmer_B1.c: 904: setRF_TransceiveGO(0);
 15313  15B8  3000               	movlw	0
 15314  15B9  319D  25C6  3195   	fcall	_setRF_TransceiveGO
 15315                           
 15316                           ;Dimmer_B1.c: 906: setBuz(1, 100);
 15317  15BC  3064               	movlw	100
 15318  15BD  0020               	movlb	0	; select bank0
 15319  15BE  00AA               	movwf	setBuz@time
 15320  15BF  3000               	movlw	0
 15321  15C0  00AB               	movwf	setBuz@time+1
 15322  15C1  3001               	movlw	1
 15323  15C2  3194  24F6         	fcall	_setBuz
 15324                           
 15325                           ;Dimmer_B1.c: 907: } else if (status == 0) {
 15326  15C4  0008               	return
 15327  15C5                     l8877:	
 15328  15C5  0020               	movlb	0	; select bank0
 15329  15C6  08EB               	movf	setDimmerLights_Dimming@status,f
 15330  15C7  1D03               	skipz
 15331  15C8  0008               	return
 15332                           
 15333                           ;Dimmer_B1.c: 908: setDimmerIntr_Dimming_Sw(lights, 0);
 15334  15C9  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15335  15CA  0021               	movlb	1	; select bank1
 15336  15CB  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15337  15CC  319E  267B  3195   	fcall	_setDimmerIntr_Dimming_Sw
 15338                           
 15339                           ;Dimmer_B1.c: 911: Dimmer.Load_Status = 0;
 15340  15CF  0022               	movlb	2	; select bank2
 15341  15D0  112D               	bcf	_Dimmer^(0+256),2
 15342                           
 15343                           ;Dimmer_B1.c: 912: setDimmerLights_Line(lights);
 15344  15D1  0021               	movlb	1	; select bank1
 15345  15D2  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15346  15D3  319C  24F3  3195   	fcall	_setDimmerLights_Line
 15347                           
 15348                           ;Dimmer_B1.c: 914: char value = getDimmerIntr_DimmingValue(lights);
 15349  15D6  0021               	movlb	1	; select bank1
 15350  15D7  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15351  15D8  319C  24B4  3195   	fcall	_getDimmerIntr_DimmingValue
 15352  15DB  0020               	movlb	0	; select bank0
 15353  15DC  00EC               	movwf	??_setDimmerLights_Dimming
 15354  15DD  086C               	movf	??_setDimmerLights_Dimming,w
 15355  15DE  0021               	movlb	1	; select bank1
 15356  15DF  00E5               	movwf	setDimmerLights_Dimming@value^(0+128)
 15357                           
 15358                           ;Dimmer_B1.c: 915: setDimmerIntr_MaxmumValue(lights, value);
 15359  15E0  0865               	movf	setDimmerLights_Dimming@value^(0+128),w
 15360  15E1  0020               	movlb	0	; select bank0
 15361  15E2  00EC               	movwf	??_setDimmerLights_Dimming
 15362  15E3  086C               	movf	??_setDimmerLights_Dimming,w
 15363  15E4  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15364  15E5  0021               	movlb	1	; select bank1
 15365  15E6  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15366  15E7  319C  2447  3195   	fcall	_setDimmerIntr_MaxmumValue
 15367                           
 15368                           ;Dimmer_B1.c: 916: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15369  15EA  0021               	movlb	1	; select bank1
 15370  15EB  0865               	movf	setDimmerLights_Dimming@value^(0+128),w
 15371  15EC  3196  2669  3195   	fcall	_getDimmerLights_ValueToPercent
 15372  15EF  0020               	movlb	0	; select bank0
 15373  15F0  00EC               	movwf	??_setDimmerLights_Dimming
 15374  15F1  086C               	movf	??_setDimmerLights_Dimming,w
 15375  15F2  00E3               	movwf	setProductData@value
 15376  15F3  0021               	movlb	1	; select bank1
 15377  15F4  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15378  15F5  3E14               	addlw	20
 15379  15F6  319C  243B  3195   	fcall	_setProductData
 15380                           
 15381                           ;Dimmer_B1.c: 923: setMemory_Modify(1);
 15382  15F9  3001               	movlw	1
 15383  15FA  319D  25B3  3195   	fcall	_setMemory_Modify
 15384                           
 15385                           ;Dimmer_B1.c: 927: setRF_DimmerLights(lights, 1);
 15386  15FD  0020               	movlb	0	; select bank0
 15387  15FE  01E6               	clrf	setRF_DimmerLights@on
 15388  15FF  0AE6               	incf	setRF_DimmerLights@on,f
 15389  1600  0021               	movlb	1	; select bank1
 15390  1601  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15391  1602  3196  26CE  3195   	fcall	_setRF_DimmerLights
 15392                           
 15393                           ;Dimmer_B1.c: 928: setTxData();
 15394  1605  318F  2745         	fcall	_setTxData
 15395  1607  0008               	return
 15396  1608                     __end_of_setDimmerLights_Dimming:	
 15397                           
 15398                           	psect	text103
 15399  0F45                     __ptext103:	
 15400 ;; *************** function _setTxData *****************
 15401 ;; Defined at:
 15402 ;;		line 183 in file "../src/RF_Control_B1.c"
 15403 ;; Parameters:    Size  Location     Type
 15404 ;;		None
 15405 ;; Auto vars:     Size  Location     Type
 15406 ;;  i               1    0        unsigned char 
 15407 ;; Return value:  Size  Location     Type
 15408 ;;		None               void
 15409 ;; Registers used:
 15410 ;;		wreg, fsr1l, fsr1h, status,2
 15411 ;; Tracked objects:
 15412 ;;		On entry : 0/0
 15413 ;;		On exit  : 0/0
 15414 ;;		Unchanged: 0/0
 15415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;Total ram usage:        1 bytes
 15421 ;; Hardware stack levels used:    1
 15422 ;; Hardware stack levels required when called:    5
 15423 ;; This function calls:
 15424 ;;		Nothing
 15425 ;; This function is called by:
 15426 ;;		_setDimmerLights_OnOff
 15427 ;;		_setDimmerLights_Dimming
 15428 ;;		_getRxData
 15429 ;;		_setControl_Lights_Table
 15430 ;;		_setRFSW_Control
 15431 ;;		_setRFSW_AdjControl
 15432 ;; This function uses a non-reentrant model
 15433 ;;
 15434                           
 15435                           
 15436                           ;psect for function _setTxData
 15437  0F45                     _setTxData:	
 15438                           
 15439                           ;RF_Control_B1.c: 184: char i;
 15440                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15441                           
 15442                           ;incstack = 0
 15443                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15444  0F45  0021               	movlb	1	; select bank1
 15445  0F46  1C20               	btfss	_RF1^(0+128),0
 15446  0F47  0008               	return
 15447                           
 15448                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15449  0F48  1520               	bsf	_RF1^(0+128),2
 15450                           
 15451                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15452  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15453  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15454                           
 15455                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15456  0F4B  3063               	movlw	99
 15457  0F4C  0020               	movlb	0	; select bank0
 15458  0F4D  00A1               	movwf	??_setTxData
 15459  0F4E  0821               	movf	??_setTxData,w
 15460  0F4F  0023               	movlb	3	; select bank3
 15461  0F50  00A0               	movwf	_RF_Data^(0+384)
 15462                           
 15463                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15464  0F51  3002               	movlw	2
 15465  0F52  0020               	movlb	0	; select bank0
 15466  0F53  00A1               	movwf	??_setTxData
 15467  0F54  0821               	movf	??_setTxData,w
 15468  0F55  0023               	movlb	3	; select bank3
 15469  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15470                           
 15471                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15472  0F57  0021               	movlb	1	; select bank1
 15473  0F58  086D               	movf	_product^(0+128),w
 15474  0F59  0086               	movwf	6
 15475  0F5A  3002               	movlw	2	; select bank4/5
 15476  0F5B  0087               	movwf	7
 15477  0F5C  3002               	movlw	2	; select bank4/5
 15478  0F5D  3F42               	moviw [2]fsr1
 15479  0F5E  0023               	movlb	3	; select bank3
 15480  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15481                           
 15482                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15483  0F60  0021               	movlb	1	; select bank1
 15484  0F61  086D               	movf	_product^(0+128),w
 15485  0F62  0086               	movwf	6
 15486  0F63  3002               	movlw	2	; select bank4/5
 15487  0F64  0087               	movwf	7
 15488  0F65  3002               	movlw	2	; select bank4/5
 15489  0F66  3F43               	moviw [3]fsr1
 15490  0F67  0023               	movlb	3	; select bank3
 15491  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15492                           
 15493                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15494  0F69  0021               	movlb	1	; select bank1
 15495  0F6A  086D               	movf	_product^(0+128),w
 15496  0F6B  0086               	movwf	6
 15497  0F6C  3002               	movlw	2	; select bank4/5
 15498  0F6D  0087               	movwf	7
 15499  0F6E  3002               	movlw	2	; select bank4/5
 15500  0F6F  3F44               	moviw [4]fsr1
 15501  0F70  0023               	movlb	3	; select bank3
 15502  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15503                           
 15504                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15505  0F72  0021               	movlb	1	; select bank1
 15506  0F73  086D               	movf	_product^(0+128),w
 15507  0F74  0086               	movwf	6
 15508  0F75  3002               	movlw	2	; select bank4/5
 15509  0F76  0087               	movwf	7
 15510  0F77  3002               	movlw	2	; select bank4/5
 15511  0F78  3F45               	moviw [5]fsr1
 15512  0F79  0023               	movlb	3	; select bank3
 15513  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15514                           
 15515                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15516  0F7B  0021               	movlb	1	; select bank1
 15517  0F7C  086D               	movf	_product^(0+128),w
 15518  0F7D  0086               	movwf	6
 15519  0F7E  3002               	movlw	2	; select bank4/5
 15520  0F7F  0087               	movwf	7
 15521  0F80  3002               	movlw	2	; select bank4/5
 15522  0F81  3F46               	moviw [6]fsr1
 15523  0F82  0023               	movlb	3	; select bank3
 15524  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15525                           
 15526                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15527  0F84  0021               	movlb	1	; select bank1
 15528  0F85  086D               	movf	_product^(0+128),w
 15529  0F86  0086               	movwf	6
 15530  0F87  3002               	movlw	2	; select bank4/5
 15531  0F88  0087               	movwf	7
 15532  0F89  3002               	movlw	2	; select bank4/5
 15533  0F8A  3F47               	moviw [7]fsr1
 15534  0F8B  0023               	movlb	3	; select bank3
 15535  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15536                           
 15537                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15538  0F8D  0021               	movlb	1	; select bank1
 15539  0F8E  086D               	movf	_product^(0+128),w
 15540  0F8F  0086               	movwf	6
 15541  0F90  3002               	movlw	2	; select bank4/5
 15542  0F91  0087               	movwf	7
 15543  0F92  3002               	movlw	2	; select bank4/5
 15544  0F93  3F48               	moviw [8]fsr1
 15545  0F94  0023               	movlb	3	; select bank3
 15546  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15547                           
 15548                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15549  0F96  0021               	movlb	1	; select bank1
 15550  0F97  086D               	movf	_product^(0+128),w
 15551  0F98  0086               	movwf	6
 15552  0F99  3002               	movlw	2	; select bank4/5
 15553  0F9A  0087               	movwf	7
 15554  0F9B  3002               	movlw	2	; select bank4/5
 15555  0F9C  3F49               	moviw [9]fsr1
 15556  0F9D  0023               	movlb	3	; select bank3
 15557  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15558                           
 15559                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15560  0F9F  0021               	movlb	1	; select bank1
 15561  0FA0  086D               	movf	_product^(0+128),w
 15562  0FA1  0086               	movwf	6
 15563  0FA2  3002               	movlw	2	; select bank4/5
 15564  0FA3  0087               	movwf	7
 15565  0FA4  3002               	movlw	2	; select bank4/5
 15566  0FA5  3F4A               	moviw [10]fsr1
 15567  0FA6  0023               	movlb	3	; select bank3
 15568  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15569                           
 15570                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15571  0FA8  0021               	movlb	1	; select bank1
 15572  0FA9  086D               	movf	_product^(0+128),w
 15573  0FAA  0086               	movwf	6
 15574  0FAB  3002               	movlw	2	; select bank4/5
 15575  0FAC  0087               	movwf	7
 15576  0FAD  3002               	movlw	2	; select bank4/5
 15577  0FAE  3F4B               	moviw [11]fsr1
 15578  0FAF  0023               	movlb	3	; select bank3
 15579  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15580                           
 15581                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15582  0FB1  0021               	movlb	1	; select bank1
 15583  0FB2  086D               	movf	_product^(0+128),w
 15584  0FB3  0086               	movwf	6
 15585  0FB4  3002               	movlw	2	; select bank4/5
 15586  0FB5  0087               	movwf	7
 15587  0FB6  3002               	movlw	2	; select bank4/5
 15588  0FB7  3F4C               	moviw [12]fsr1
 15589  0FB8  0023               	movlb	3	; select bank3
 15590  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15591                           
 15592                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15593  0FBA  0021               	movlb	1	; select bank1
 15594  0FBB  086D               	movf	_product^(0+128),w
 15595  0FBC  0086               	movwf	6
 15596  0FBD  3002               	movlw	2	; select bank4/5
 15597  0FBE  0087               	movwf	7
 15598  0FBF  3002               	movlw	2	; select bank4/5
 15599  0FC0  3F4D               	moviw [13]fsr1
 15600  0FC1  0023               	movlb	3	; select bank3
 15601  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15602                           
 15603                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15604  0FC3  0021               	movlb	1	; select bank1
 15605  0FC4  086D               	movf	_product^(0+128),w
 15606  0FC5  0086               	movwf	6
 15607  0FC6  3002               	movlw	2	; select bank4/5
 15608  0FC7  0087               	movwf	7
 15609  0FC8  3002               	movlw	2	; select bank4/5
 15610  0FC9  3F4E               	moviw [14]fsr1
 15611  0FCA  0023               	movlb	3	; select bank3
 15612  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15613                           
 15614                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15615  0FCC  0021               	movlb	1	; select bank1
 15616  0FCD  086D               	movf	_product^(0+128),w
 15617  0FCE  0086               	movwf	6
 15618  0FCF  3002               	movlw	2	; select bank4/5
 15619  0FD0  0087               	movwf	7
 15620  0FD1  3002               	movlw	2	; select bank4/5
 15621  0FD2  3F4F               	moviw [15]fsr1
 15622  0FD3  0023               	movlb	3	; select bank3
 15623  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15624                           
 15625                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15626  0FD5  0021               	movlb	1	; select bank1
 15627  0FD6  086D               	movf	_product^(0+128),w
 15628  0FD7  0086               	movwf	6
 15629  0FD8  3002               	movlw	2	; select bank4/5
 15630  0FD9  0087               	movwf	7
 15631  0FDA  3002               	movlw	2	; select bank4/5
 15632  0FDB  3F50               	moviw [16]fsr1
 15633  0FDC  0023               	movlb	3	; select bank3
 15634  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15635                           
 15636                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15637  0FDE  0021               	movlb	1	; select bank1
 15638  0FDF  086D               	movf	_product^(0+128),w
 15639  0FE0  0086               	movwf	6
 15640  0FE1  3002               	movlw	2	; select bank4/5
 15641  0FE2  0087               	movwf	7
 15642  0FE3  3002               	movlw	2	; select bank4/5
 15643  0FE4  3F51               	moviw [17]fsr1
 15644  0FE5  0023               	movlb	3	; select bank3
 15645  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15646                           
 15647                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15648  0FE7  0021               	movlb	1	; select bank1
 15649  0FE8  086D               	movf	_product^(0+128),w
 15650  0FE9  0086               	movwf	6
 15651  0FEA  3002               	movlw	2	; select bank4/5
 15652  0FEB  0087               	movwf	7
 15653  0FEC  3002               	movlw	2	; select bank4/5
 15654  0FED  3F52               	moviw [18]fsr1
 15655  0FEE  0023               	movlb	3	; select bank3
 15656  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15657                           
 15658                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15659  0FF0  0021               	movlb	1	; select bank1
 15660  0FF1  086D               	movf	_product^(0+128),w
 15661  0FF2  0086               	movwf	6
 15662  0FF3  3002               	movlw	2	; select bank4/5
 15663  0FF4  0087               	movwf	7
 15664  0FF5  3002               	movlw	2	; select bank4/5
 15665  0FF6  3F53               	moviw [19]fsr1
 15666  0FF7  0023               	movlb	3	; select bank3
 15667  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15668                           
 15669                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15670  0FF9  30D1               	movlw	209
 15671  0FFA  0020               	movlb	0	; select bank0
 15672  0FFB  00A1               	movwf	??_setTxData
 15673  0FFC  0821               	movf	??_setTxData,w
 15674  0FFD  0023               	movlb	3	; select bank3
 15675  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15676  0FFF  0008               	return
 15677  1000                     __end_of_setTxData:	
 15678                           
 15679                           	psect	text104
 15680  1DC6                     __ptext104:	
 15681 ;; *************** function _setRF_TransceiveGO *****************
 15682 ;; Defined at:
 15683 ;;		line 470 in file "../src/RF_Control_B1.c"
 15684 ;; Parameters:    Size  Location     Type
 15685 ;;  command         1    wreg     unsigned char 
 15686 ;; Auto vars:     Size  Location     Type
 15687 ;;  command         1    2[BANK0 ] unsigned char 
 15688 ;; Return value:  Size  Location     Type
 15689 ;;		None               void
 15690 ;; Registers used:
 15691 ;;		wreg, status,2, status,0
 15692 ;; Tracked objects:
 15693 ;;		On entry : 0/0
 15694 ;;		On exit  : 0/0
 15695 ;;		Unchanged: 0/0
 15696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;Total ram usage:        2 bytes
 15702 ;; Hardware stack levels used:    1
 15703 ;; Hardware stack levels required when called:    5
 15704 ;; This function calls:
 15705 ;;		Nothing
 15706 ;; This function is called by:
 15707 ;;		_setDimmerLights_Dimming
 15708 ;; This function uses a non-reentrant model
 15709 ;;
 15710                           
 15711                           
 15712                           ;psect for function _setRF_TransceiveGO
 15713  1DC6                     _setRF_TransceiveGO:	
 15714                           
 15715                           ;incstack = 0
 15716                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15717                           ;setRF_TransceiveGO@command stored from wreg
 15718  1DC6  0020               	movlb	0	; select bank0
 15719  1DC7  00A2               	movwf	setRF_TransceiveGO@command
 15720                           
 15721                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15722  1DC8  0822               	movf	setRF_TransceiveGO@command,w
 15723  1DC9  3A01               	xorlw	1
 15724  1DCA  3000               	movlw	0
 15725  1DCB  1903               	skipnz
 15726  1DCC  3001               	movlw	1
 15727  1DCD  00A1               	movwf	??_setRF_TransceiveGO
 15728  1DCE  0DA1               	rlf	??_setRF_TransceiveGO,f
 15729  1DCF  0DA1               	rlf	??_setRF_TransceiveGO,f
 15730  1DD0  0021               	movlb	1	; select bank1
 15731  1DD1  0820               	movf	_RF1^(0+128),w
 15732  1DD2  0020               	movlb	0	; select bank0
 15733  1DD3  0621               	xorwf	??_setRF_TransceiveGO,w
 15734  1DD4  39FB               	andlw	-5
 15735  1DD5  0621               	xorwf	??_setRF_TransceiveGO,w
 15736  1DD6  0021               	movlb	1	; select bank1
 15737  1DD7  00A0               	movwf	_RF1^(0+128)
 15738  1DD8  0008               	return
 15739  1DD9                     __end_of_setRF_TransceiveGO:	
 15740                           
 15741                           	psect	text105
 15742  16CE                     __ptext105:	
 15743 ;; *************** function _setRF_DimmerLights *****************
 15744 ;; Defined at:
 15745 ;;		line 455 in file "../src/RF_Control_B1.c"
 15746 ;; Parameters:    Size  Location     Type
 15747 ;;  lights          1    wreg     unsigned char 
 15748 ;;  on              1   70[BANK0 ] unsigned char 
 15749 ;; Auto vars:     Size  Location     Type
 15750 ;;  lights          1   74[BANK0 ] unsigned char 
 15751 ;;  status          1   73[BANK0 ] unsigned char 
 15752 ;; Return value:  Size  Location     Type
 15753 ;;		None               void
 15754 ;; Registers used:
 15755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15756 ;; Tracked objects:
 15757 ;;		On entry : 0/0
 15758 ;;		On exit  : 0/0
 15759 ;;		Unchanged: 0/0
 15760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15761 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;Total ram usage:        5 bytes
 15766 ;; Hardware stack levels used:    1
 15767 ;; Hardware stack levels required when called:    6
 15768 ;; This function calls:
 15769 ;;		_setProductData
 15770 ;; This function is called by:
 15771 ;;		_setDimmerLights_OnOff
 15772 ;;		_setDimmerLights_Dimming
 15773 ;;		_setRFSW_Control
 15774 ;; This function uses a non-reentrant model
 15775 ;;
 15776                           
 15777                           
 15778                           ;psect for function _setRF_DimmerLights
 15779  16CE                     _setRF_DimmerLights:	
 15780                           
 15781                           ;incstack = 0
 15782                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15783                           ;setRF_DimmerLights@lights stored from wreg
 15784  16CE  0020               	movlb	0	; select bank0
 15785  16CF  00EA               	movwf	setRF_DimmerLights@lights
 15786                           
 15787                           ;RF_Control_B1.c: 456: char status = 1;
 15788  16D0  01E9               	clrf	setRF_DimmerLights@status
 15789  16D1  0AE9               	incf	setRF_DimmerLights@status,f
 15790                           
 15791                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15792  16D2  086A               	movf	setRF_DimmerLights@lights,w
 15793  16D3  3EFF               	addlw	-1
 15794  16D4  0A89               	incf	9,f
 15795  16D5  2ED8               	goto	u9340
 15796  16D6                     u9345:	
 15797  16D6  1003               	clrc
 15798  16D7  0DE9               	rlf	setRF_DimmerLights@status,f
 15799  16D8                     u9340:	
 15800  16D8  3EFF               	addlw	-1
 15801  16D9  1D03               	skipz
 15802  16DA  2ED6               	goto	u9345
 15803                           
 15804                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15805  16DB  086A               	movf	setRF_DimmerLights@lights,w
 15806  16DC  00E7               	movwf	??_setRF_DimmerLights
 15807  16DD  0867               	movf	??_setRF_DimmerLights,w
 15808  16DE  00E3               	movwf	setProductData@value
 15809  16DF  300B               	movlw	11
 15810  16E0  319C  243B  3196   	fcall	_setProductData
 15811                           
 15812                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15813  16E3  0020               	movlb	0	; select bank0
 15814  16E4  086A               	movf	setRF_DimmerLights@lights,w
 15815  16E5  3E1A               	addlw	26
 15816  16E6  0021               	movlb	1	; select bank1
 15817  16E7  076D               	addwf	_product^(0+128),w
 15818  16E8  0020               	movlb	0	; select bank0
 15819  16E9  00E7               	movwf	??_setRF_DimmerLights
 15820  16EA  0867               	movf	??_setRF_DimmerLights,w
 15821  16EB  0086               	movwf	6
 15822  16EC  3002               	movlw	2	; select bank4/5
 15823  16ED  0087               	movwf	7
 15824  16EE  0801               	movf	1,w
 15825  16EF  00E8               	movwf	??_setRF_DimmerLights+1
 15826  16F0  0868               	movf	??_setRF_DimmerLights+1,w
 15827  16F1  00E3               	movwf	setProductData@value
 15828  16F2  3011               	movlw	17
 15829  16F3  319C  243B  3196   	fcall	_setProductData
 15830                           
 15831                           ;RF_Control_B1.c: 460: if (on == 1) {
 15832  16F6  0020               	movlb	0	; select bank0
 15833  16F7  0866               	movf	setRF_DimmerLights@on,w
 15834  16F8  3A01               	xorlw	1
 15835  16F9  1D03               	skipz
 15836  16FA  2F1D               	goto	l8635
 15837                           
 15838                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15839  16FB  086A               	movf	setRF_DimmerLights@lights,w
 15840  16FC  3E14               	addlw	20
 15841  16FD  0021               	movlb	1	; select bank1
 15842  16FE  076D               	addwf	_product^(0+128),w
 15843  16FF  0020               	movlb	0	; select bank0
 15844  1700  00E7               	movwf	??_setRF_DimmerLights
 15845  1701  0867               	movf	??_setRF_DimmerLights,w
 15846  1702  0086               	movwf	6
 15847  1703  3002               	movlw	2	; select bank4/5
 15848  1704  0087               	movwf	7
 15849  1705  0801               	movf	1,w
 15850  1706  00E8               	movwf	??_setRF_DimmerLights+1
 15851  1707  0868               	movf	??_setRF_DimmerLights+1,w
 15852  1708  00E3               	movwf	setProductData@value
 15853  1709  3009               	movlw	9
 15854  170A  319C  243B  3196   	fcall	_setProductData
 15855                           
 15856                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15857  170D  0021               	movlb	1	; select bank1
 15858  170E  086D               	movf	_product^(0+128),w
 15859  170F  3E0F               	addlw	15
 15860  1710  0086               	movwf	6
 15861  1711  3002               	movlw	2	; select bank4/5
 15862  1712  0087               	movwf	7
 15863  1713  0801               	movf	1,w
 15864  1714  0020               	movlb	0	; select bank0
 15865  1715  0469               	iorwf	setRF_DimmerLights@status,w
 15866  1716  00E7               	movwf	??_setRF_DimmerLights
 15867  1717  0867               	movf	??_setRF_DimmerLights,w
 15868  1718  00E3               	movwf	setProductData@value
 15869  1719  300F               	movlw	15
 15870  171A  319C  243B         	fcall	_setProductData
 15871                           
 15872                           ;RF_Control_B1.c: 463: } else {
 15873  171C  0008               	return
 15874  171D                     l8635:	
 15875                           
 15876                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15877  171D  0020               	movlb	0	; select bank0
 15878  171E  01E3               	clrf	setProductData@value
 15879  171F  3009               	movlw	9
 15880  1720  319C  243B  3196   	fcall	_setProductData
 15881                           
 15882                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15883  1723  0021               	movlb	1	; select bank1
 15884  1724  086D               	movf	_product^(0+128),w
 15885  1725  3E0F               	addlw	15
 15886  1726  0086               	movwf	6
 15887  1727  3002               	movlw	2	; select bank4/5
 15888  1728  0087               	movwf	7
 15889  1729  0020               	movlb	0	; select bank0
 15890  172A  0969               	comf	setRF_DimmerLights@status,w
 15891  172B  0501               	andwf	1,w
 15892  172C  00E7               	movwf	??_setRF_DimmerLights
 15893  172D  0867               	movf	??_setRF_DimmerLights,w
 15894  172E  00E3               	movwf	setProductData@value
 15895  172F  300F               	movlw	15
 15896  1730  319C  243B         	fcall	_setProductData
 15897  1732  0008               	return
 15898  1733                     __end_of_setRF_DimmerLights:	
 15899                           
 15900                           	psect	text106
 15901  1DB3                     __ptext106:	
 15902 ;; *************** function _setMemory_Modify *****************
 15903 ;; Defined at:
 15904 ;;		line 1074 in file "../src/MCU_B1.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;  command         1    wreg     unsigned char 
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;  command         1    2[BANK0 ] unsigned char 
 15909 ;; Return value:  Size  Location     Type
 15910 ;;		None               void
 15911 ;; Registers used:
 15912 ;;		wreg, status,2, status,0
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;Total ram usage:        2 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    5
 15925 ;; This function calls:
 15926 ;;		Nothing
 15927 ;; This function is called by:
 15928 ;;		_setDimmerLights_Dimming
 15929 ;;		_setLog_Code
 15930 ;;		_setRFSW_AdjControl
 15931 ;; This function uses a non-reentrant model
 15932 ;;
 15933                           
 15934                           
 15935                           ;psect for function _setMemory_Modify
 15936  1DB3                     _setMemory_Modify:	
 15937                           
 15938                           ;incstack = 0
 15939                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 15940                           ;setMemory_Modify@command stored from wreg
 15941  1DB3  0020               	movlb	0	; select bank0
 15942  1DB4  00A2               	movwf	setMemory_Modify@command
 15943                           
 15944                           ;MCU_B1.c: 1075: Memory.Modify = command == 1 ? 1 : 0;
 15945  1DB5  0822               	movf	setMemory_Modify@command,w
 15946  1DB6  3A01               	xorlw	1
 15947  1DB7  3000               	movlw	0
 15948  1DB8  1903               	skipnz
 15949  1DB9  3001               	movlw	1
 15950  1DBA  00A1               	movwf	??_setMemory_Modify
 15951  1DBB  0023               	movlb	3	; select bank3
 15952  1DBC  0862               	movf	(_Memory^(0+384)+36),w
 15953  1DBD  0020               	movlb	0	; select bank0
 15954  1DBE  0621               	xorwf	??_setMemory_Modify,w
 15955  1DBF  39FE               	andlw	-2
 15956  1DC0  0621               	xorwf	??_setMemory_Modify,w
 15957  1DC1  0023               	movlb	3	; select bank3
 15958  1DC2  00E2               	movwf	(_Memory^(0+384)+36)
 15959                           
 15960                           ;MCU_B1.c: 1076: Memory.Time = 0;
 15961  1DC3  01E0               	clrf	(_Memory^(0+384)+34)
 15962  1DC4  01E1               	clrf	((_Memory+1)^(0+384)+34)
 15963  1DC5  0008               	return
 15964  1DC6                     __end_of_setMemory_Modify:	
 15965                           
 15966                           	psect	text107
 15967  1CF3                     __ptext107:	
 15968 ;; *************** function _setDimmerLights_Line *****************
 15969 ;; Defined at:
 15970 ;;		line 973 in file "../src/Dimmer_B1.c"
 15971 ;; Parameters:    Size  Location     Type
 15972 ;;  lights          1    wreg     unsigned char 
 15973 ;; Auto vars:     Size  Location     Type
 15974 ;;  lights          1    1[BANK0 ] unsigned char 
 15975 ;; Return value:  Size  Location     Type
 15976 ;;		None               void
 15977 ;; Registers used:
 15978 ;;		wreg
 15979 ;; Tracked objects:
 15980 ;;		On entry : 0/0
 15981 ;;		On exit  : 0/0
 15982 ;;		Unchanged: 0/0
 15983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;Total ram usage:        1 bytes
 15989 ;; Hardware stack levels used:    1
 15990 ;; Hardware stack levels required when called:    5
 15991 ;; This function calls:
 15992 ;;		Nothing
 15993 ;; This function is called by:
 15994 ;;		_setDimmerLights_OnOff
 15995 ;;		_setDimmerLights_Dimming
 15996 ;; This function uses a non-reentrant model
 15997 ;;
 15998                           
 15999                           
 16000                           ;psect for function _setDimmerLights_Line
 16001  1CF3                     _setDimmerLights_Line:	
 16002                           
 16003                           ;incstack = 0
 16004                           ; Regs used in _setDimmerLights_Line: [wreg]
 16005                           ;setDimmerLights_Line@lights stored from wreg
 16006  1CF3  0020               	movlb	0	; select bank0
 16007  1CF4  00A1               	movwf	setDimmerLights_Line@lights
 16008                           
 16009                           ;Dimmer_B1.c: 974: Dimmer.LoadGO = 1;
 16010  1CF5  0022               	movlb	2	; select bank2
 16011  1CF6  14AD               	bsf	_Dimmer^(0+256),1
 16012                           
 16013                           ;Dimmer_B1.c: 976: DimmerLights1.Line = 0;
 16014  1CF7  10DD               	bcf	(_DimmerLights1^(0+256)+1),1
 16015                           
 16016                           ;Dimmer_B1.c: 977: if (lights == 1 && lights != 0) {
 16017  1CF8  0020               	movlb	0	; select bank0
 16018  1CF9  0821               	movf	setDimmerLights_Line@lights,w
 16019  1CFA  3A01               	xorlw	1
 16020  1CFB  1D03               	skipz
 16021  1CFC  0008               	return
 16022  1CFD  0821               	movf	setDimmerLights_Line@lights,w
 16023  1CFE  1903               	btfsc	3,2
 16024  1CFF  0008               	return
 16025                           
 16026                           ;Dimmer_B1.c: 978: DimmerLights1.Line = 1;
 16027  1D00  0022               	movlb	2	; select bank2
 16028  1D01  14DD               	bsf	(_DimmerLights1^(0+256)+1),1
 16029  1D02  0020               	movlb	0	; select bank0
 16030  1D03  0008               	return
 16031  1D04                     __end_of_setDimmerLights_Line:	
 16032                           
 16033                           	psect	text108
 16034  1C47                     __ptext108:	
 16035 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16036 ;; Defined at:
 16037 ;;		line 89 in file "../src/Dimmer_B1.c"
 16038 ;; Parameters:    Size  Location     Type
 16039 ;;  lights          1    wreg     unsigned char 
 16040 ;;  value           1   67[BANK0 ] unsigned char 
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;  lights          1   69[BANK0 ] unsigned char 
 16043 ;; Return value:  Size  Location     Type
 16044 ;;		None               void
 16045 ;; Registers used:
 16046 ;;		wreg
 16047 ;; Tracked objects:
 16048 ;;		On entry : 0/0
 16049 ;;		On exit  : 0/0
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16052 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;Total ram usage:        3 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; Hardware stack levels required when called:    5
 16059 ;; This function calls:
 16060 ;;		Nothing
 16061 ;; This function is called by:
 16062 ;;		_setDimmerLights_OnOff
 16063 ;;		_setDimmerLights_Dimming
 16064 ;;		_setRFSW_AdjControl
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _setDimmerIntr_MaxmumValue
 16070  1C47                     _setDimmerIntr_MaxmumValue:	
 16071                           
 16072                           ;incstack = 0
 16073                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16074                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16075  1C47  0020               	movlb	0	; select bank0
 16076  1C48  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 16077                           
 16078                           ;Dimmer_B1.c: 91: if (lights == 1) {
 16079  1C49  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16080  1C4A  3A01               	xorlw	1
 16081  1C4B  1D03               	skipz
 16082  1C4C  0008               	return
 16083                           
 16084                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 16085  1C4D  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16086  1C4E  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16087  1C4F  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16088  1C50  0021               	movlb	1	; select bank1
 16089  1C51  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 16090  1C52  0008               	return
 16091  1C53                     __end_of_setDimmerIntr_MaxmumValue:	
 16092                           
 16093                           	psect	text109
 16094  1E7B                     __ptext109:	
 16095 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16096 ;; Defined at:
 16097 ;;		line 166 in file "../src/Dimmer_B1.c"
 16098 ;; Parameters:    Size  Location     Type
 16099 ;;  lights          1    wreg     unsigned char 
 16100 ;;  command         1    1[BANK0 ] unsigned char 
 16101 ;; Auto vars:     Size  Location     Type
 16102 ;;  lights          1    3[BANK0 ] unsigned char 
 16103 ;; Return value:  Size  Location     Type
 16104 ;;		None               void
 16105 ;; Registers used:
 16106 ;;		wreg, status,2, status,0
 16107 ;; Tracked objects:
 16108 ;;		On entry : 0/0
 16109 ;;		On exit  : 0/0
 16110 ;;		Unchanged: 0/0
 16111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16112 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;Total ram usage:        3 bytes
 16117 ;; Hardware stack levels used:    1
 16118 ;; Hardware stack levels required when called:    5
 16119 ;; This function calls:
 16120 ;;		Nothing
 16121 ;; This function is called by:
 16122 ;;		_setDimmerLights_Dimming
 16123 ;; This function uses a non-reentrant model
 16124 ;;
 16125                           
 16126                           
 16127                           ;psect for function _setDimmerIntr_Dimming_Sw
 16128  1E7B                     _setDimmerIntr_Dimming_Sw:	
 16129                           
 16130                           ;incstack = 0
 16131                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16132                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16133  1E7B  0020               	movlb	0	; select bank0
 16134  1E7C  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 16135                           
 16136                           ;Dimmer_B1.c: 168: if (lights == 1) {
 16137  1E7D  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16138  1E7E  3A01               	xorlw	1
 16139  1E7F  1D03               	skipz
 16140  1E80  0008               	return
 16141                           
 16142                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16143  1E81  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16144  1E82  3A01               	xorlw	1
 16145  1E83  3000               	movlw	0
 16146  1E84  1903               	skipnz
 16147  1E85  3001               	movlw	1
 16148  1E86  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16149  1E87  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16150  1E88  0021               	movlb	1	; select bank1
 16151  1E89  083A               	movf	_DimmerIntr1^(0+128),w
 16152  1E8A  0020               	movlb	0	; select bank0
 16153  1E8B  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16154  1E8C  39EF               	andlw	-17
 16155  1E8D  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16156  1E8E  0021               	movlb	1	; select bank1
 16157  1E8F  00BA               	movwf	_DimmerIntr1^(0+128)
 16158  1E90  0008               	return
 16159  1E91                     __end_of_setDimmerIntr_Dimming_Sw:	
 16160                           
 16161                           	psect	text110
 16162  1669                     __ptext110:	
 16163 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16164 ;; Defined at:
 16165 ;;		line 1073 in file "../src/Dimmer_B1.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;  value           1    wreg     unsigned char 
 16168 ;; Auto vars:     Size  Location     Type
 16169 ;;  value           1   63[BANK0 ] unsigned char 
 16170 ;;  i               3   64[BANK0 ] float 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;                  1    wreg      unsigned char 
 16173 ;; Registers used:
 16174 ;;		wreg, status,2, status,0, pclath, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;Total ram usage:        6 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    7
 16187 ;; This function calls:
 16188 ;;		___awtoft
 16189 ;;		___ftadd
 16190 ;;		___ftdiv
 16191 ;;		___ftneg
 16192 ;;		___fttol
 16193 ;; This function is called by:
 16194 ;;		_setDimmerLights_Dimming
 16195 ;;		_Flash_Memory_Initialization
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           
 16200                           ;psect for function _getDimmerLights_ValueToPercent
 16201  1669                     _getDimmerLights_ValueToPercent:	
 16202                           
 16203                           ;incstack = 0
 16204                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16205                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16206  1669  0020               	movlb	0	; select bank0
 16207  166A  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16208                           
 16209                           ;Dimmer_B1.c: 1081: float i = ((char)(60*0.78)) - ((char)(5*0.78));
 16210  166B  3000               	movlw	0
 16211  166C  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16212  166D  302C               	movlw	44
 16213  166E  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16214  166F  3042               	movlw	66
 16215  1670  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16216                           
 16217                           ;Dimmer_B1.c: 1082: i /= 100;
 16218  1671  3000               	movlw	0
 16219  1672  00AF               	movwf	___ftdiv@f2
 16220  1673  30C8               	movlw	200
 16221  1674  00B0               	movwf	___ftdiv@f2+1
 16222  1675  3042               	movlw	66
 16223  1676  00B1               	movwf	___ftdiv@f2+2
 16224  1677  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16225  1678  00B2               	movwf	___ftdiv@f1
 16226  1679  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16227  167A  00B3               	movwf	___ftdiv@f1+1
 16228  167B  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16229  167C  00B4               	movwf	___ftdiv@f1+2
 16230  167D  318D  2538  3196   	fcall	___ftdiv
 16231  1680  0020               	movlb	0	; select bank0
 16232  1681  082F               	movf	?___ftdiv,w
 16233  1682  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16234  1683  0830               	movf	?___ftdiv+1,w
 16235  1684  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16236  1685  0831               	movf	?___ftdiv+2,w
 16237  1686  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16238                           
 16239                           ;Dimmer_B1.c: 1084: return (char) (100 - ((((char)(60*0.78)) - value) / i));
 16240  1687  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16241  1688  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16242  1689  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16243  168A  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16244  168B  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16245  168C  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16246  168D  1903               	skipnz
 16247  168E  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16248  168F  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16249  1690  3E2E               	addlw	46
 16250  1691  00A9               	movwf	___awtoft@c
 16251  1692  3000               	movlw	0
 16252  1693  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16253  1694  00AA               	movwf	___awtoft@c+1
 16254  1695  3190  209D  3196   	fcall	___awtoft
 16255  1698  0020               	movlb	0	; select bank0
 16256  1699  0829               	movf	?___awtoft,w
 16257  169A  00B2               	movwf	___ftdiv@f1
 16258  169B  082A               	movf	?___awtoft+1,w
 16259  169C  00B3               	movwf	___ftdiv@f1+1
 16260  169D  082B               	movf	?___awtoft+2,w
 16261  169E  00B4               	movwf	___ftdiv@f1+2
 16262  169F  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16263  16A0  00AF               	movwf	___ftdiv@f2
 16264  16A1  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16265  16A2  00B0               	movwf	___ftdiv@f2+1
 16266  16A3  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16267  16A4  00B1               	movwf	___ftdiv@f2+2
 16268  16A5  318D  2538  3196   	fcall	___ftdiv
 16269  16A8  0020               	movlb	0	; select bank0
 16270  16A9  082F               	movf	?___ftdiv,w
 16271  16AA  00BF               	movwf	___ftneg@f1
 16272  16AB  0830               	movf	?___ftdiv+1,w
 16273  16AC  00C0               	movwf	___ftneg@f1+1
 16274  16AD  0831               	movf	?___ftdiv+2,w
 16275  16AE  00C1               	movwf	___ftneg@f1+2
 16276  16AF  319B  23D0  3196   	fcall	___ftneg
 16277  16B2  0020               	movlb	0	; select bank0
 16278  16B3  083F               	movf	?___ftneg,w
 16279  16B4  00C5               	movwf	___ftadd@f2
 16280  16B5  0840               	movf	?___ftneg+1,w
 16281  16B6  00C6               	movwf	___ftadd@f2+1
 16282  16B7  0841               	movf	?___ftneg+2,w
 16283  16B8  00C7               	movwf	___ftadd@f2+2
 16284  16B9  3000               	movlw	0
 16285  16BA  00C2               	movwf	___ftadd@f1
 16286  16BB  30C8               	movlw	200
 16287  16BC  00C3               	movwf	___ftadd@f1+1
 16288  16BD  3042               	movlw	66
 16289  16BE  00C4               	movwf	___ftadd@f1+2
 16290  16BF  3183  2380  3196   	fcall	___ftadd
 16291  16C2  0020               	movlb	0	; select bank0
 16292  16C3  0842               	movf	?___ftadd,w
 16293  16C4  00CF               	movwf	___fttol@f1
 16294  16C5  0843               	movf	?___ftadd+1,w
 16295  16C6  00D0               	movwf	___fttol@f1+1
 16296  16C7  0844               	movf	?___ftadd+2,w
 16297  16C8  00D1               	movwf	___fttol@f1+2
 16298  16C9  318C  2425         	fcall	___fttol
 16299  16CB  0020               	movlb	0	; select bank0
 16300  16CC  084F               	movf	?___fttol,w
 16301  16CD  0008               	return
 16302  16CE                     __end_of_getDimmerLights_ValueToPercent:	
 16303                           
 16304                           	psect	text111
 16305  0C25                     __ptext111:	
 16306 ;; *************** function ___fttol *****************
 16307 ;; Defined at:
 16308 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;  f1              3   47[BANK0 ] float 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  lval            4   56[BANK0 ] unsigned long 
 16313 ;;  exp1            1   60[BANK0 ] unsigned char 
 16314 ;;  sign1           1   55[BANK0 ] unsigned char 
 16315 ;; Return value:  Size  Location     Type
 16316 ;;                  4   47[BANK0 ] long 
 16317 ;; Registers used:
 16318 ;;		wreg, status,2, status,0
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;Total ram usage:       14 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:    5
 16331 ;; This function calls:
 16332 ;;		Nothing
 16333 ;; This function is called by:
 16334 ;;		_getDimmerLights_PercentToValue
 16335 ;;		_getDimmerLights_ValueToPercent
 16336 ;; This function uses a non-reentrant model
 16337 ;;
 16338                           
 16339                           
 16340                           ;psect for function ___fttol
 16341  0C25                     ___fttol:	
 16342                           
 16343                           ;incstack = 0
 16344                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16345  0C25  0020               	movlb	0	; select bank0
 16346  0C26  084F               	movf	___fttol@f1,w
 16347  0C27  00D3               	movwf	??___fttol
 16348  0C28  0850               	movf	___fttol@f1+1,w
 16349  0C29  00D4               	movwf	??___fttol+1
 16350  0C2A  0851               	movf	___fttol@f1+2,w
 16351  0C2B  00D5               	movwf	??___fttol+2
 16352  0C2C  1003               	clrc
 16353  0C2D  0D54               	rlf	??___fttol+1,w
 16354  0C2E  0D55               	rlf	??___fttol+2,w
 16355  0C2F  00D6               	movwf	??___fttol+3
 16356  0C30  0856               	movf	??___fttol+3,w
 16357  0C31  00DC               	movwf	___fttol@exp1
 16358  0C32  08DC               	movf	___fttol@exp1,f
 16359  0C33  1D03               	skipz
 16360  0C34  2C3E               	goto	l8521
 16361  0C35  3000               	movlw	0
 16362  0C36  00D2               	movwf	?___fttol+3
 16363  0C37  3000               	movlw	0
 16364  0C38  00D1               	movwf	?___fttol+2
 16365  0C39  3000               	movlw	0
 16366  0C3A  00D0               	movwf	?___fttol+1
 16367  0C3B  3000               	movlw	0
 16368  0C3C  00CF               	movwf	?___fttol
 16369  0C3D  0008               	return
 16370  0C3E                     l8521:	
 16371  0C3E  084F               	movf	___fttol@f1,w
 16372  0C3F  00D3               	movwf	??___fttol
 16373  0C40  0850               	movf	___fttol@f1+1,w
 16374  0C41  00D4               	movwf	??___fttol+1
 16375  0C42  0851               	movf	___fttol@f1+2,w
 16376  0C43  00D5               	movwf	??___fttol+2
 16377  0C44  3017               	movlw	23
 16378  0C45                     u9165:	
 16379  0C45  36D5               	lsrf	??___fttol+2,f
 16380  0C46  0CD4               	rrf	??___fttol+1,f
 16381  0C47  0CD3               	rrf	??___fttol,f
 16382  0C48  0B89               	decfsz	9,f
 16383  0C49  2C45               	goto	u9165
 16384  0C4A  0853               	movf	??___fttol,w
 16385  0C4B  00D6               	movwf	??___fttol+3
 16386  0C4C  0856               	movf	??___fttol+3,w
 16387  0C4D  00D7               	movwf	___fttol@sign1
 16388  0C4E  17D0               	bsf	___fttol@f1+1,7
 16389  0C4F  30FF               	movlw	255
 16390  0C50  05CF               	andwf	___fttol@f1,f
 16391  0C51  30FF               	movlw	255
 16392  0C52  05D0               	andwf	___fttol@f1+1,f
 16393  0C53  3000               	movlw	0
 16394  0C54  05D1               	andwf	___fttol@f1+2,f
 16395  0C55  084F               	movf	___fttol@f1,w
 16396  0C56  00D8               	movwf	___fttol@lval
 16397  0C57  0850               	movf	___fttol@f1+1,w
 16398  0C58  00D9               	movwf	___fttol@lval+1
 16399  0C59  0851               	movf	___fttol@f1+2,w
 16400  0C5A  00DA               	movwf	___fttol@lval+2
 16401  0C5B  01DB               	clrf	___fttol@lval+3
 16402  0C5C  308E               	movlw	142
 16403  0C5D  02DC               	subwf	___fttol@exp1,f
 16404  0C5E  1FDC               	btfss	___fttol@exp1,7
 16405  0C5F  2C7C               	goto	l8541
 16406  0C60  085C               	movf	___fttol@exp1,w
 16407  0C61  3A80               	xorlw	128
 16408  0C62  3E8F               	addlw	143
 16409  0C63  1803               	skipnc
 16410  0C64  2C6E               	goto	l8539
 16411  0C65  3000               	movlw	0
 16412  0C66  00D2               	movwf	?___fttol+3
 16413  0C67  3000               	movlw	0
 16414  0C68  00D1               	movwf	?___fttol+2
 16415  0C69  3000               	movlw	0
 16416  0C6A  00D0               	movwf	?___fttol+1
 16417  0C6B  3000               	movlw	0
 16418  0C6C  00CF               	movwf	?___fttol
 16419  0C6D  0008               	return
 16420  0C6E                     l8539:	
 16421  0C6E  3001               	movlw	1
 16422  0C6F                     u9195:	
 16423  0C6F  36DB               	lsrf	___fttol@lval+3,f
 16424  0C70  0CDA               	rrf	___fttol@lval+2,f
 16425  0C71  0CD9               	rrf	___fttol@lval+1,f
 16426  0C72  0CD8               	rrf	___fttol@lval,f
 16427  0C73  0B89               	decfsz	9,f
 16428  0C74  2C6F               	goto	u9195
 16429  0C75  3001               	movlw	1
 16430  0C76  00D3               	movwf	??___fttol
 16431  0C77  0853               	movf	??___fttol,w
 16432  0C78  07DC               	addwf	___fttol@exp1,f
 16433  0C79  1903               	btfsc	3,2
 16434  0C7A  2C95               	goto	l8551
 16435  0C7B  2C6E               	goto	l8539
 16436  0C7C                     l8541:	
 16437  0C7C  3018               	movlw	24
 16438  0C7D  025C               	subwf	___fttol@exp1,w
 16439  0C7E  1C03               	skipc
 16440  0C7F  2C92               	goto	l8549
 16441  0C80  3000               	movlw	0
 16442  0C81  00D2               	movwf	?___fttol+3
 16443  0C82  3000               	movlw	0
 16444  0C83  00D1               	movwf	?___fttol+2
 16445  0C84  3000               	movlw	0
 16446  0C85  00D0               	movwf	?___fttol+1
 16447  0C86  3000               	movlw	0
 16448  0C87  00CF               	movwf	?___fttol
 16449  0C88  0008               	return
 16450  0C89                     l8547:	
 16451  0C89  3001               	movlw	1
 16452  0C8A                     u9225:	
 16453  0C8A  35D8               	lslf	___fttol@lval,f
 16454  0C8B  0DD9               	rlf	___fttol@lval+1,f
 16455  0C8C  0DDA               	rlf	___fttol@lval+2,f
 16456  0C8D  0DDB               	rlf	___fttol@lval+3,f
 16457  0C8E  0B89               	decfsz	9,f
 16458  0C8F  2C8A               	goto	u9225
 16459  0C90  3001               	movlw	1
 16460  0C91  02DC               	subwf	___fttol@exp1,f
 16461  0C92                     l8549:	
 16462  0C92  08DC               	movf	___fttol@exp1,f
 16463  0C93  1D03               	skipz
 16464  0C94  2C89               	goto	l8547
 16465  0C95                     l8551:	
 16466  0C95  0857               	movf	___fttol@sign1,w
 16467  0C96  1903               	btfsc	3,2
 16468  0C97  2CA3               	goto	l8555
 16469  0C98  09D8               	comf	___fttol@lval,f
 16470  0C99  09D9               	comf	___fttol@lval+1,f
 16471  0C9A  09DA               	comf	___fttol@lval+2,f
 16472  0C9B  09DB               	comf	___fttol@lval+3,f
 16473  0C9C  0AD8               	incf	___fttol@lval,f
 16474  0C9D  1903               	skipnz
 16475  0C9E  0AD9               	incf	___fttol@lval+1,f
 16476  0C9F  1903               	skipnz
 16477  0CA0  0ADA               	incf	___fttol@lval+2,f
 16478  0CA1  1903               	skipnz
 16479  0CA2  0ADB               	incf	___fttol@lval+3,f
 16480  0CA3                     l8555:	
 16481  0CA3  085B               	movf	___fttol@lval+3,w
 16482  0CA4  00D2               	movwf	?___fttol+3
 16483  0CA5  085A               	movf	___fttol@lval+2,w
 16484  0CA6  00D1               	movwf	?___fttol+2
 16485  0CA7  0859               	movf	___fttol@lval+1,w
 16486  0CA8  00D0               	movwf	?___fttol+1
 16487  0CA9  0858               	movf	___fttol@lval,w
 16488  0CAA  00CF               	movwf	?___fttol
 16489  0CAB  0008               	return
 16490  0CAC                     __end_of___fttol:	
 16491                           
 16492                           	psect	text112
 16493  1BD0                     __ptext112:	
 16494 ;; *************** function ___ftneg *****************
 16495 ;; Defined at:
 16496 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16497 ;; Parameters:    Size  Location     Type
 16498 ;;  f1              3   31[BANK0 ] float 
 16499 ;; Auto vars:     Size  Location     Type
 16500 ;;		None
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  3   31[BANK0 ] float 
 16503 ;; Registers used:
 16504 ;;		wreg
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16510 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;Total ram usage:        3 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; Hardware stack levels required when called:    5
 16517 ;; This function calls:
 16518 ;;		Nothing
 16519 ;; This function is called by:
 16520 ;;		_getDimmerLights_PercentToValue
 16521 ;;		_getDimmerLights_ValueToPercent
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           
 16526                           ;psect for function ___ftneg
 16527  1BD0                     ___ftneg:	
 16528                           
 16529                           ;incstack = 0
 16530                           ; Regs used in ___ftneg: [wreg]
 16531  1BD0  0020               	movlb	0	; select bank0
 16532  1BD1  0841               	movf	___ftneg@f1+2,w
 16533  1BD2  0440               	iorwf	___ftneg@f1+1,w
 16534  1BD3  043F               	iorwf	___ftneg@f1,w
 16535  1BD4  1903               	skipnz
 16536  1BD5  0008               	return
 16537  1BD6  3080               	movlw	128
 16538  1BD7  06C1               	xorwf	___ftneg@f1+2,f
 16539  1BD8  0008               	return
 16540  1BD9                     __end_of___ftneg:	
 16541                           
 16542                           	psect	text113
 16543  0D38                     __ptext113:	
 16544 ;; *************** function ___ftdiv *****************
 16545 ;; Defined at:
 16546 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;  f2              3   15[BANK0 ] float 
 16549 ;;  f1              3   18[BANK0 ] float 
 16550 ;; Auto vars:     Size  Location     Type
 16551 ;;  f3              3   26[BANK0 ] float 
 16552 ;;  sign            1   30[BANK0 ] unsigned char 
 16553 ;;  exp             1   29[BANK0 ] unsigned char 
 16554 ;;  cntr            1   25[BANK0 ] unsigned char 
 16555 ;; Return value:  Size  Location     Type
 16556 ;;                  3   15[BANK0 ] float 
 16557 ;; Registers used:
 16558 ;;		wreg, status,2, status,0, pclath, cstack
 16559 ;; Tracked objects:
 16560 ;;		On entry : 0/0
 16561 ;;		On exit  : 0/0
 16562 ;;		Unchanged: 0/0
 16563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16564 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;Total ram usage:       16 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; Hardware stack levels required when called:    6
 16571 ;; This function calls:
 16572 ;;		___ftpack
 16573 ;; This function is called by:
 16574 ;;		_getDimmerLights_PercentToValue
 16575 ;;		_getDimmerLights_ValueToPercent
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           
 16580                           ;psect for function ___ftdiv
 16581  0D38                     ___ftdiv:	
 16582                           
 16583                           ;incstack = 0
 16584                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16585  0D38  0020               	movlb	0	; select bank0
 16586  0D39  0832               	movf	___ftdiv@f1,w
 16587  0D3A  00B5               	movwf	??___ftdiv
 16588  0D3B  0833               	movf	___ftdiv@f1+1,w
 16589  0D3C  00B6               	movwf	??___ftdiv+1
 16590  0D3D  0834               	movf	___ftdiv@f1+2,w
 16591  0D3E  00B7               	movwf	??___ftdiv+2
 16592  0D3F  1003               	clrc
 16593  0D40  0D36               	rlf	??___ftdiv+1,w
 16594  0D41  0D37               	rlf	??___ftdiv+2,w
 16595  0D42  00B8               	movwf	??___ftdiv+3
 16596  0D43  0838               	movf	??___ftdiv+3,w
 16597  0D44  00BD               	movwf	___ftdiv@exp
 16598  0D45  08BD               	movf	___ftdiv@exp,f
 16599  0D46  1D03               	skipz
 16600  0D47  2D4F               	goto	l8421
 16601  0D48  3000               	movlw	0
 16602  0D49  00AF               	movwf	?___ftdiv
 16603  0D4A  3000               	movlw	0
 16604  0D4B  00B0               	movwf	?___ftdiv+1
 16605  0D4C  3000               	movlw	0
 16606  0D4D  00B1               	movwf	?___ftdiv+2
 16607  0D4E  0008               	return
 16608  0D4F                     l8421:	
 16609  0D4F  082F               	movf	___ftdiv@f2,w
 16610  0D50  00B5               	movwf	??___ftdiv
 16611  0D51  0830               	movf	___ftdiv@f2+1,w
 16612  0D52  00B6               	movwf	??___ftdiv+1
 16613  0D53  0831               	movf	___ftdiv@f2+2,w
 16614  0D54  00B7               	movwf	??___ftdiv+2
 16615  0D55  1003               	clrc
 16616  0D56  0D36               	rlf	??___ftdiv+1,w
 16617  0D57  0D37               	rlf	??___ftdiv+2,w
 16618  0D58  00B8               	movwf	??___ftdiv+3
 16619  0D59  0838               	movf	??___ftdiv+3,w
 16620  0D5A  00BE               	movwf	___ftdiv@sign
 16621  0D5B  08BE               	movf	___ftdiv@sign,f
 16622  0D5C  1D03               	skipz
 16623  0D5D  2D65               	goto	l8427
 16624  0D5E  3000               	movlw	0
 16625  0D5F  00AF               	movwf	?___ftdiv
 16626  0D60  3000               	movlw	0
 16627  0D61  00B0               	movwf	?___ftdiv+1
 16628  0D62  3000               	movlw	0
 16629  0D63  00B1               	movwf	?___ftdiv+2
 16630  0D64  0008               	return
 16631  0D65                     l8427:	
 16632  0D65  3000               	movlw	0
 16633  0D66  00BA               	movwf	___ftdiv@f3
 16634  0D67  3000               	movlw	0
 16635  0D68  00BB               	movwf	___ftdiv@f3+1
 16636  0D69  3000               	movlw	0
 16637  0D6A  00BC               	movwf	___ftdiv@f3+2
 16638  0D6B  3089               	movlw	137
 16639  0D6C  073E               	addwf	___ftdiv@sign,w
 16640  0D6D  00B5               	movwf	??___ftdiv
 16641  0D6E  0835               	movf	??___ftdiv,w
 16642  0D6F  02BD               	subwf	___ftdiv@exp,f
 16643  0D70  0832               	movf	___ftdiv@f1,w
 16644  0D71  00B5               	movwf	??___ftdiv
 16645  0D72  0833               	movf	___ftdiv@f1+1,w
 16646  0D73  00B6               	movwf	??___ftdiv+1
 16647  0D74  0834               	movf	___ftdiv@f1+2,w
 16648  0D75  00B7               	movwf	??___ftdiv+2
 16649  0D76  3010               	movlw	16
 16650  0D77                     u8965:	
 16651  0D77  36B7               	lsrf	??___ftdiv+2,f
 16652  0D78  0CB6               	rrf	??___ftdiv+1,f
 16653  0D79  0CB5               	rrf	??___ftdiv,f
 16654  0D7A  0B89               	decfsz	9,f
 16655  0D7B  2D77               	goto	u8965
 16656  0D7C  0835               	movf	??___ftdiv,w
 16657  0D7D  00B8               	movwf	??___ftdiv+3
 16658  0D7E  0838               	movf	??___ftdiv+3,w
 16659  0D7F  00BE               	movwf	___ftdiv@sign
 16660  0D80  082F               	movf	___ftdiv@f2,w
 16661  0D81  00B5               	movwf	??___ftdiv
 16662  0D82  0830               	movf	___ftdiv@f2+1,w
 16663  0D83  00B6               	movwf	??___ftdiv+1
 16664  0D84  0831               	movf	___ftdiv@f2+2,w
 16665  0D85  00B7               	movwf	??___ftdiv+2
 16666  0D86  3010               	movlw	16
 16667  0D87                     u8975:	
 16668  0D87  36B7               	lsrf	??___ftdiv+2,f
 16669  0D88  0CB6               	rrf	??___ftdiv+1,f
 16670  0D89  0CB5               	rrf	??___ftdiv,f
 16671  0D8A  0B89               	decfsz	9,f
 16672  0D8B  2D87               	goto	u8975
 16673  0D8C  0835               	movf	??___ftdiv,w
 16674  0D8D  00B8               	movwf	??___ftdiv+3
 16675  0D8E  0838               	movf	??___ftdiv+3,w
 16676  0D8F  06BE               	xorwf	___ftdiv@sign,f
 16677  0D90  3080               	movlw	128
 16678  0D91  00B5               	movwf	??___ftdiv
 16679  0D92  0835               	movf	??___ftdiv,w
 16680  0D93  05BE               	andwf	___ftdiv@sign,f
 16681  0D94  17B3               	bsf	___ftdiv@f1+1,7
 16682  0D95  30FF               	movlw	255
 16683  0D96  05B2               	andwf	___ftdiv@f1,f
 16684  0D97  30FF               	movlw	255
 16685  0D98  05B3               	andwf	___ftdiv@f1+1,f
 16686  0D99  3000               	movlw	0
 16687  0D9A  05B4               	andwf	___ftdiv@f1+2,f
 16688  0D9B  17B0               	bsf	___ftdiv@f2+1,7
 16689  0D9C  30FF               	movlw	255
 16690  0D9D  05AF               	andwf	___ftdiv@f2,f
 16691  0D9E  30FF               	movlw	255
 16692  0D9F  05B0               	andwf	___ftdiv@f2+1,f
 16693  0DA0  3000               	movlw	0
 16694  0DA1  05B1               	andwf	___ftdiv@f2+2,f
 16695  0DA2  3018               	movlw	24
 16696  0DA3  00B5               	movwf	??___ftdiv
 16697  0DA4  0835               	movf	??___ftdiv,w
 16698  0DA5  00B9               	movwf	___ftdiv@cntr
 16699  0DA6                     l8441:	
 16700  0DA6  3001               	movlw	1
 16701  0DA7                     u8985:	
 16702  0DA7  35BA               	lslf	___ftdiv@f3,f
 16703  0DA8  0DBB               	rlf	___ftdiv@f3+1,f
 16704  0DA9  0DBC               	rlf	___ftdiv@f3+2,f
 16705  0DAA  0B89               	decfsz	9,f
 16706  0DAB  2DA7               	goto	u8985
 16707  0DAC  0831               	movf	___ftdiv@f2+2,w
 16708  0DAD  0234               	subwf	___ftdiv@f1+2,w
 16709  0DAE  1D03               	skipz
 16710  0DAF  2DB6               	goto	u8995
 16711  0DB0  0830               	movf	___ftdiv@f2+1,w
 16712  0DB1  0233               	subwf	___ftdiv@f1+1,w
 16713  0DB2  1D03               	skipz
 16714  0DB3  2DB6               	goto	u8995
 16715  0DB4  082F               	movf	___ftdiv@f2,w
 16716  0DB5  0232               	subwf	___ftdiv@f1,w
 16717  0DB6                     u8995:	
 16718  0DB6  1C03               	skipc
 16719  0DB7  2DBF               	goto	l8449
 16720  0DB8  082F               	movf	___ftdiv@f2,w
 16721  0DB9  02B2               	subwf	___ftdiv@f1,f
 16722  0DBA  0830               	movf	___ftdiv@f2+1,w
 16723  0DBB  3BB3               	subwfb	___ftdiv@f1+1,f
 16724  0DBC  0831               	movf	___ftdiv@f2+2,w
 16725  0DBD  3BB4               	subwfb	___ftdiv@f1+2,f
 16726  0DBE  143A               	bsf	___ftdiv@f3,0
 16727  0DBF                     l8449:	
 16728  0DBF  3001               	movlw	1
 16729  0DC0                     u9005:	
 16730  0DC0  35B2               	lslf	___ftdiv@f1,f
 16731  0DC1  0DB3               	rlf	___ftdiv@f1+1,f
 16732  0DC2  0DB4               	rlf	___ftdiv@f1+2,f
 16733  0DC3  0B89               	decfsz	9,f
 16734  0DC4  2DC0               	goto	u9005
 16735  0DC5  3001               	movlw	1
 16736  0DC6  02B9               	subwf	___ftdiv@cntr,f
 16737  0DC7  1D03               	btfss	3,2
 16738  0DC8  2DA6               	goto	l8441
 16739  0DC9  083A               	movf	___ftdiv@f3,w
 16740  0DCA  00A1               	movwf	___ftpack@arg
 16741  0DCB  083B               	movf	___ftdiv@f3+1,w
 16742  0DCC  00A2               	movwf	___ftpack@arg+1
 16743  0DCD  083C               	movf	___ftdiv@f3+2,w
 16744  0DCE  00A3               	movwf	___ftpack@arg+2
 16745  0DCF  083D               	movf	___ftdiv@exp,w
 16746  0DD0  00B5               	movwf	??___ftdiv
 16747  0DD1  0835               	movf	??___ftdiv,w
 16748  0DD2  00A4               	movwf	___ftpack@exp
 16749  0DD3  083E               	movf	___ftdiv@sign,w
 16750  0DD4  00B6               	movwf	??___ftdiv+1
 16751  0DD5  0836               	movf	??___ftdiv+1,w
 16752  0DD6  00A5               	movwf	___ftpack@sign
 16753  0DD7  3196  2608         	fcall	___ftpack
 16754  0DD9  0020               	movlb	0	; select bank0
 16755  0DDA  0821               	movf	?___ftpack,w
 16756  0DDB  00AF               	movwf	?___ftdiv
 16757  0DDC  0822               	movf	?___ftpack+1,w
 16758  0DDD  00B0               	movwf	?___ftdiv+1
 16759  0DDE  0823               	movf	?___ftpack+2,w
 16760  0DDF  00B1               	movwf	?___ftdiv+2
 16761  0DE0  0008               	return
 16762  0DE1                     __end_of___ftdiv:	
 16763                           
 16764                           	psect	text114
 16765  0380                     __ptext114:	
 16766 ;; *************** function ___ftadd *****************
 16767 ;; Defined at:
 16768 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16769 ;; Parameters:    Size  Location     Type
 16770 ;;  f1              3   34[BANK0 ] float 
 16771 ;;  f2              3   37[BANK0 ] float 
 16772 ;; Auto vars:     Size  Location     Type
 16773 ;;  exp1            1   46[BANK0 ] unsigned char 
 16774 ;;  exp2            1   45[BANK0 ] unsigned char 
 16775 ;;  sign            1   44[BANK0 ] unsigned char 
 16776 ;; Return value:  Size  Location     Type
 16777 ;;                  3   34[BANK0 ] float 
 16778 ;; Registers used:
 16779 ;;		wreg, status,2, status,0, pclath, cstack
 16780 ;; Tracked objects:
 16781 ;;		On entry : 0/0
 16782 ;;		On exit  : 0/0
 16783 ;;		Unchanged: 0/0
 16784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16785 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;Total ram usage:       13 bytes
 16790 ;; Hardware stack levels used:    1
 16791 ;; Hardware stack levels required when called:    6
 16792 ;; This function calls:
 16793 ;;		___ftpack
 16794 ;; This function is called by:
 16795 ;;		_getDimmerLights_PercentToValue
 16796 ;;		_getDimmerLights_ValueToPercent
 16797 ;; This function uses a non-reentrant model
 16798 ;;
 16799                           
 16800                           
 16801                           ;psect for function ___ftadd
 16802  0380                     ___ftadd:	
 16803                           
 16804                           ;incstack = 0
 16805                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16806  0380  0020               	movlb	0	; select bank0
 16807  0381  0842               	movf	___ftadd@f1,w
 16808  0382  00C8               	movwf	??___ftadd
 16809  0383  0843               	movf	___ftadd@f1+1,w
 16810  0384  00C9               	movwf	??___ftadd+1
 16811  0385  0844               	movf	___ftadd@f1+2,w
 16812  0386  00CA               	movwf	??___ftadd+2
 16813  0387  1003               	clrc
 16814  0388  0D49               	rlf	??___ftadd+1,w
 16815  0389  0D4A               	rlf	??___ftadd+2,w
 16816  038A  00CB               	movwf	??___ftadd+3
 16817  038B  084B               	movf	??___ftadd+3,w
 16818  038C  00CE               	movwf	___ftadd@exp1
 16819  038D  0845               	movf	___ftadd@f2,w
 16820  038E  00C8               	movwf	??___ftadd
 16821  038F  0846               	movf	___ftadd@f2+1,w
 16822  0390  00C9               	movwf	??___ftadd+1
 16823  0391  0847               	movf	___ftadd@f2+2,w
 16824  0392  00CA               	movwf	??___ftadd+2
 16825  0393  1003               	clrc
 16826  0394  0D49               	rlf	??___ftadd+1,w
 16827  0395  0D4A               	rlf	??___ftadd+2,w
 16828  0396  00CB               	movwf	??___ftadd+3
 16829  0397  084B               	movf	??___ftadd+3,w
 16830  0398  00CD               	movwf	___ftadd@exp2
 16831  0399  084E               	movf	___ftadd@exp1,w
 16832  039A  1903               	btfsc	3,2
 16833  039B  2BA8               	goto	l8351
 16834  039C  084D               	movf	___ftadd@exp2,w
 16835  039D  024E               	subwf	___ftadd@exp1,w
 16836  039E  1803               	skipnc
 16837  039F  2BAF               	goto	l8355
 16838  03A0  034E               	decf	___ftadd@exp1,w
 16839  03A1  3AFF               	xorlw	255
 16840  03A2  074D               	addwf	___ftadd@exp2,w
 16841  03A3  00C8               	movwf	??___ftadd
 16842  03A4  3019               	movlw	25
 16843  03A5  0248               	subwf	??___ftadd,w
 16844  03A6  1C03               	skipc
 16845  03A7  2BAF               	goto	l8355
 16846  03A8                     l8351:	
 16847  03A8  0845               	movf	___ftadd@f2,w
 16848  03A9  00C2               	movwf	?___ftadd
 16849  03AA  0846               	movf	___ftadd@f2+1,w
 16850  03AB  00C3               	movwf	?___ftadd+1
 16851  03AC  0847               	movf	___ftadd@f2+2,w
 16852  03AD  00C4               	movwf	?___ftadd+2
 16853  03AE  0008               	return
 16854  03AF                     l8355:	
 16855  03AF  084D               	movf	___ftadd@exp2,w
 16856  03B0  1903               	btfsc	3,2
 16857  03B1  0008               	return
 16858  03B2  084E               	movf	___ftadd@exp1,w
 16859  03B3  024D               	subwf	___ftadd@exp2,w
 16860  03B4  1803               	skipnc
 16861  03B5  2BBE               	goto	l8361
 16862  03B6  034D               	decf	___ftadd@exp2,w
 16863  03B7  3AFF               	xorlw	255
 16864  03B8  074E               	addwf	___ftadd@exp1,w
 16865  03B9  00C8               	movwf	??___ftadd
 16866  03BA  3019               	movlw	25
 16867  03BB  0248               	subwf	??___ftadd,w
 16868  03BC  1803               	btfsc	3,0
 16869  03BD  0008               	return
 16870  03BE                     l8361:	
 16871  03BE  3006               	movlw	6
 16872  03BF  00C8               	movwf	??___ftadd
 16873  03C0  0848               	movf	??___ftadd,w
 16874  03C1  00CC               	movwf	___ftadd@sign
 16875  03C2  1BC4               	btfsc	___ftadd@f1+2,7
 16876  03C3  17CC               	bsf	___ftadd@sign,7
 16877  03C4  1BC7               	btfsc	___ftadd@f2+2,7
 16878  03C5  174C               	bsf	___ftadd@sign,6
 16879  03C6  17C3               	bsf	___ftadd@f1+1,7
 16880  03C7  30FF               	movlw	255
 16881  03C8  05C2               	andwf	___ftadd@f1,f
 16882  03C9  30FF               	movlw	255
 16883  03CA  05C3               	andwf	___ftadd@f1+1,f
 16884  03CB  3000               	movlw	0
 16885  03CC  05C4               	andwf	___ftadd@f1+2,f
 16886  03CD  17C6               	bsf	___ftadd@f2+1,7
 16887  03CE  30FF               	movlw	255
 16888  03CF  05C5               	andwf	___ftadd@f2,f
 16889  03D0  30FF               	movlw	255
 16890  03D1  05C6               	andwf	___ftadd@f2+1,f
 16891  03D2  3000               	movlw	0
 16892  03D3  05C7               	andwf	___ftadd@f2+2,f
 16893  03D4  084D               	movf	___ftadd@exp2,w
 16894  03D5  024E               	subwf	___ftadd@exp1,w
 16895  03D6  1803               	skipnc
 16896  03D7  2BFA               	goto	l8383
 16897  03D8                     l8373:	
 16898  03D8  3001               	movlw	1
 16899  03D9                     u8805:	
 16900  03D9  35C5               	lslf	___ftadd@f2,f
 16901  03DA  0DC6               	rlf	___ftadd@f2+1,f
 16902  03DB  0DC7               	rlf	___ftadd@f2+2,f
 16903  03DC  0B89               	decfsz	9,f
 16904  03DD  2BD9               	goto	u8805
 16905  03DE  3001               	movlw	1
 16906  03DF  02CD               	subwf	___ftadd@exp2,f
 16907  03E0  084D               	movf	___ftadd@exp2,w
 16908  03E1  064E               	xorwf	___ftadd@exp1,w
 16909  03E2  1903               	skipnz
 16910  03E3  2BF5               	goto	l8381
 16911  03E4  3001               	movlw	1
 16912  03E5  02CC               	subwf	___ftadd@sign,f
 16913  03E6  084C               	movf	___ftadd@sign,w
 16914  03E7  3907               	andlw	7
 16915  03E8  1903               	btfsc	3,2
 16916  03E9  2BF5               	goto	l8381
 16917  03EA  2BD8               	goto	l8373
 16918  03EB                     l8379:	
 16919  03EB  3001               	movlw	1
 16920  03EC                     u8835:	
 16921  03EC  36C4               	lsrf	___ftadd@f1+2,f
 16922  03ED  0CC3               	rrf	___ftadd@f1+1,f
 16923  03EE  0CC2               	rrf	___ftadd@f1,f
 16924  03EF  0B89               	decfsz	9,f
 16925  03F0  2BEC               	goto	u8835
 16926  03F1  3001               	movlw	1
 16927  03F2  00C8               	movwf	??___ftadd
 16928  03F3  0848               	movf	??___ftadd,w
 16929  03F4  07CE               	addwf	___ftadd@exp1,f
 16930  03F5                     l8381:	
 16931  03F5  084E               	movf	___ftadd@exp1,w
 16932  03F6  064D               	xorwf	___ftadd@exp2,w
 16933  03F7  1903               	btfsc	3,2
 16934  03F8  2C1F               	goto	l2860
 16935  03F9  2BEB               	goto	l8379
 16936  03FA                     l8383:	
 16937  03FA  084E               	movf	___ftadd@exp1,w
 16938  03FB  024D               	subwf	___ftadd@exp2,w
 16939  03FC  1803               	skipnc
 16940  03FD  2C1F               	goto	l2860
 16941  03FE                     l8385:	
 16942  03FE  3001               	movlw	1
 16943  03FF                     u8865:	
 16944  03FF  35C2               	lslf	___ftadd@f1,f
 16945  0400  0DC3               	rlf	___ftadd@f1+1,f
 16946  0401  0DC4               	rlf	___ftadd@f1+2,f
 16947  0402  0B89               	decfsz	9,f
 16948  0403  2BFF               	goto	u8865
 16949  0404  3001               	movlw	1
 16950  0405  02CE               	subwf	___ftadd@exp1,f
 16951  0406  084D               	movf	___ftadd@exp2,w
 16952  0407  064E               	xorwf	___ftadd@exp1,w
 16953  0408  1903               	skipnz
 16954  0409  2C1B               	goto	l8393
 16955  040A  3001               	movlw	1
 16956  040B  02CC               	subwf	___ftadd@sign,f
 16957  040C  084C               	movf	___ftadd@sign,w
 16958  040D  3907               	andlw	7
 16959  040E  1903               	btfsc	3,2
 16960  040F  2C1B               	goto	l8393
 16961  0410  2BFE               	goto	l8385
 16962  0411                     l8391:	
 16963  0411  3001               	movlw	1
 16964  0412                     u8895:	
 16965  0412  36C7               	lsrf	___ftadd@f2+2,f
 16966  0413  0CC6               	rrf	___ftadd@f2+1,f
 16967  0414  0CC5               	rrf	___ftadd@f2,f
 16968  0415  0B89               	decfsz	9,f
 16969  0416  2C12               	goto	u8895
 16970  0417  3001               	movlw	1
 16971  0418  00C8               	movwf	??___ftadd
 16972  0419  0848               	movf	??___ftadd,w
 16973  041A  07CD               	addwf	___ftadd@exp2,f
 16974  041B                     l8393:	
 16975  041B  084E               	movf	___ftadd@exp1,w
 16976  041C  064D               	xorwf	___ftadd@exp2,w
 16977  041D  1D03               	skipz
 16978  041E  2C11               	goto	l8391
 16979  041F                     l2860:	
 16980  041F  1FCC               	btfss	___ftadd@sign,7
 16981  0420  2C31               	goto	l8397
 16982  0421  30FF               	movlw	255
 16983  0422  06C2               	xorwf	___ftadd@f1,f
 16984  0423  30FF               	movlw	255
 16985  0424  06C3               	xorwf	___ftadd@f1+1,f
 16986  0425  30FF               	movlw	255
 16987  0426  06C4               	xorwf	___ftadd@f1+2,f
 16988  0427  3001               	movlw	1
 16989  0428  07C2               	addwf	___ftadd@f1,f
 16990  0429  3000               	movlw	0
 16991  042A  1803               	skipnc
 16992  042B  3001               	movlw	1
 16993  042C  07C3               	addwf	___ftadd@f1+1,f
 16994  042D  3000               	movlw	0
 16995  042E  1803               	skipnc
 16996  042F  3001               	movlw	1
 16997  0430  07C4               	addwf	___ftadd@f1+2,f
 16998  0431                     l8397:	
 16999  0431  1F4C               	btfss	___ftadd@sign,6
 17000  0432  2C43               	goto	l8401
 17001  0433  30FF               	movlw	255
 17002  0434  06C5               	xorwf	___ftadd@f2,f
 17003  0435  30FF               	movlw	255
 17004  0436  06C6               	xorwf	___ftadd@f2+1,f
 17005  0437  30FF               	movlw	255
 17006  0438  06C7               	xorwf	___ftadd@f2+2,f
 17007  0439  3001               	movlw	1
 17008  043A  07C5               	addwf	___ftadd@f2,f
 17009  043B  3000               	movlw	0
 17010  043C  1803               	skipnc
 17011  043D  3001               	movlw	1
 17012  043E  07C6               	addwf	___ftadd@f2+1,f
 17013  043F  3000               	movlw	0
 17014  0440  1803               	skipnc
 17015  0441  3001               	movlw	1
 17016  0442  07C7               	addwf	___ftadd@f2+2,f
 17017  0443                     l8401:	
 17018  0443  01CC               	clrf	___ftadd@sign
 17019  0444  0842               	movf	___ftadd@f1,w
 17020  0445  07C5               	addwf	___ftadd@f2,f
 17021  0446  0843               	movf	___ftadd@f1+1,w
 17022  0447  3DC6               	addwfc	___ftadd@f2+1,f
 17023  0448  0844               	movf	___ftadd@f1+2,w
 17024  0449  3DC7               	addwfc	___ftadd@f2+2,f
 17025  044A  1FC7               	btfss	___ftadd@f2+2,7
 17026  044B  2C5E               	goto	l8411
 17027  044C  30FF               	movlw	255
 17028  044D  06C5               	xorwf	___ftadd@f2,f
 17029  044E  30FF               	movlw	255
 17030  044F  06C6               	xorwf	___ftadd@f2+1,f
 17031  0450  30FF               	movlw	255
 17032  0451  06C7               	xorwf	___ftadd@f2+2,f
 17033  0452  3001               	movlw	1
 17034  0453  07C5               	addwf	___ftadd@f2,f
 17035  0454  3000               	movlw	0
 17036  0455  1803               	skipnc
 17037  0456  3001               	movlw	1
 17038  0457  07C6               	addwf	___ftadd@f2+1,f
 17039  0458  3000               	movlw	0
 17040  0459  1803               	skipnc
 17041  045A  3001               	movlw	1
 17042  045B  07C7               	addwf	___ftadd@f2+2,f
 17043  045C  01CC               	clrf	___ftadd@sign
 17044  045D  0ACC               	incf	___ftadd@sign,f
 17045  045E                     l8411:	
 17046  045E  0845               	movf	___ftadd@f2,w
 17047  045F  00A1               	movwf	___ftpack@arg
 17048  0460  0846               	movf	___ftadd@f2+1,w
 17049  0461  00A2               	movwf	___ftpack@arg+1
 17050  0462  0847               	movf	___ftadd@f2+2,w
 17051  0463  00A3               	movwf	___ftpack@arg+2
 17052  0464  084E               	movf	___ftadd@exp1,w
 17053  0465  00C8               	movwf	??___ftadd
 17054  0466  0848               	movf	??___ftadd,w
 17055  0467  00A4               	movwf	___ftpack@exp
 17056  0468  084C               	movf	___ftadd@sign,w
 17057  0469  00C9               	movwf	??___ftadd+1
 17058  046A  0849               	movf	??___ftadd+1,w
 17059  046B  00A5               	movwf	___ftpack@sign
 17060  046C  3196  2608         	fcall	___ftpack
 17061  046E  0020               	movlb	0	; select bank0
 17062  046F  0821               	movf	?___ftpack,w
 17063  0470  00C2               	movwf	?___ftadd
 17064  0471  0822               	movf	?___ftpack+1,w
 17065  0472  00C3               	movwf	?___ftadd+1
 17066  0473  0823               	movf	?___ftpack+2,w
 17067  0474  00C4               	movwf	?___ftadd+2
 17068  0475  0008               	return
 17069  0476                     __end_of___ftadd:	
 17070                           
 17071                           	psect	text115
 17072  109D                     __ptext115:	
 17073 ;; *************** function ___awtoft *****************
 17074 ;; Defined at:
 17075 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17076 ;; Parameters:    Size  Location     Type
 17077 ;;  c               2    9[BANK0 ] int 
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;  sign            1   14[BANK0 ] unsigned char 
 17080 ;; Return value:  Size  Location     Type
 17081 ;;                  3    9[BANK0 ] float 
 17082 ;; Registers used:
 17083 ;;		wreg, status,2, status,0, pclath, cstack
 17084 ;; Tracked objects:
 17085 ;;		On entry : 0/0
 17086 ;;		On exit  : 0/0
 17087 ;;		Unchanged: 0/0
 17088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17093 ;;Total ram usage:        6 bytes
 17094 ;; Hardware stack levels used:    1
 17095 ;; Hardware stack levels required when called:    6
 17096 ;; This function calls:
 17097 ;;		___ftpack
 17098 ;; This function is called by:
 17099 ;;		_getDimmerLights_PercentToValue
 17100 ;;		_getDimmerLights_ValueToPercent
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           
 17105                           ;psect for function ___awtoft
 17106  109D                     ___awtoft:	
 17107                           
 17108                           ;incstack = 0
 17109                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17110  109D  0020               	movlb	0	; select bank0
 17111  109E  01AE               	clrf	___awtoft@sign
 17112  109F  1FAA               	btfss	___awtoft@c+1,7
 17113  10A0  28A8               	goto	l8339
 17114  10A1  09A9               	comf	___awtoft@c,f
 17115  10A2  09AA               	comf	___awtoft@c+1,f
 17116  10A3  0AA9               	incf	___awtoft@c,f
 17117  10A4  1903               	skipnz
 17118  10A5  0AAA               	incf	___awtoft@c+1,f
 17119  10A6  01AE               	clrf	___awtoft@sign
 17120  10A7  0AAE               	incf	___awtoft@sign,f
 17121  10A8                     l8339:	
 17122  10A8  0829               	movf	___awtoft@c,w
 17123  10A9  00A1               	movwf	___ftpack@arg
 17124  10AA  082A               	movf	___awtoft@c+1,w
 17125  10AB  00A2               	movwf	___ftpack@arg+1
 17126  10AC  01A3               	clrf	___ftpack@arg+2
 17127  10AD  308E               	movlw	142
 17128  10AE  00AC               	movwf	??___awtoft
 17129  10AF  082C               	movf	??___awtoft,w
 17130  10B0  00A4               	movwf	___ftpack@exp
 17131  10B1  082E               	movf	___awtoft@sign,w
 17132  10B2  00AD               	movwf	??___awtoft+1
 17133  10B3  082D               	movf	??___awtoft+1,w
 17134  10B4  00A5               	movwf	___ftpack@sign
 17135  10B5  3196  2608         	fcall	___ftpack
 17136  10B7  0020               	movlb	0	; select bank0
 17137  10B8  0821               	movf	?___ftpack,w
 17138  10B9  00A9               	movwf	?___awtoft
 17139  10BA  0822               	movf	?___ftpack+1,w
 17140  10BB  00AA               	movwf	?___awtoft+1
 17141  10BC  0823               	movf	?___ftpack+2,w
 17142  10BD  00AB               	movwf	?___awtoft+2
 17143  10BE  0008               	return
 17144  10BF                     __end_of___awtoft:	
 17145                           
 17146                           	psect	text116
 17147  1608                     __ptext116:	
 17148 ;; *************** function ___ftpack *****************
 17149 ;; Defined at:
 17150 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;  arg             3    1[BANK0 ] unsigned um
 17153 ;;  exp             1    4[BANK0 ] unsigned char 
 17154 ;;  sign            1    5[BANK0 ] unsigned char 
 17155 ;; Auto vars:     Size  Location     Type
 17156 ;;		None
 17157 ;; Return value:  Size  Location     Type
 17158 ;;                  3    1[BANK0 ] float 
 17159 ;; Registers used:
 17160 ;;		wreg, status,2, status,0
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17166 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;Total ram usage:        8 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; Hardware stack levels required when called:    5
 17173 ;; This function calls:
 17174 ;;		Nothing
 17175 ;; This function is called by:
 17176 ;;		___awtoft
 17177 ;;		___ftadd
 17178 ;;		___ftdiv
 17179 ;;		___ftmul
 17180 ;; This function uses a non-reentrant model
 17181 ;;
 17182                           
 17183                           
 17184                           ;psect for function ___ftpack
 17185  1608                     ___ftpack:	
 17186                           
 17187                           ;incstack = 0
 17188                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17189  1608  0020               	movlb	0	; select bank0
 17190  1609  0824               	movf	___ftpack@exp,w
 17191  160A  1903               	btfsc	3,2
 17192  160B  2E11               	goto	l8231
 17193  160C  0823               	movf	___ftpack@arg+2,w
 17194  160D  0422               	iorwf	___ftpack@arg+1,w
 17195  160E  0421               	iorwf	___ftpack@arg,w
 17196  160F  1D03               	skipz
 17197  1610  2E22               	goto	l8237
 17198  1611                     l8231:	
 17199  1611  3000               	movlw	0
 17200  1612  00A1               	movwf	?___ftpack
 17201  1613  3000               	movlw	0
 17202  1614  00A2               	movwf	?___ftpack+1
 17203  1615  3000               	movlw	0
 17204  1616  00A3               	movwf	?___ftpack+2
 17205  1617  0008               	return
 17206  1618                     l8235:	
 17207  1618  3001               	movlw	1
 17208  1619  00A6               	movwf	??___ftpack
 17209  161A  0826               	movf	??___ftpack,w
 17210  161B  07A4               	addwf	___ftpack@exp,f
 17211  161C  3001               	movlw	1
 17212  161D                     u8475:	
 17213  161D  36A3               	lsrf	___ftpack@arg+2,f
 17214  161E  0CA2               	rrf	___ftpack@arg+1,f
 17215  161F  0CA1               	rrf	___ftpack@arg,f
 17216  1620  0B89               	decfsz	9,f
 17217  1621  2E1D               	goto	u8475
 17218  1622                     l8237:	
 17219  1622  30FE               	movlw	254
 17220  1623  0523               	andwf	___ftpack@arg+2,w
 17221  1624  1903               	btfsc	3,2
 17222  1625  2E3B               	goto	l2831
 17223  1626  2E18               	goto	l8235
 17224  1627                     l8239:	
 17225  1627  3001               	movlw	1
 17226  1628  00A6               	movwf	??___ftpack
 17227  1629  0826               	movf	??___ftpack,w
 17228  162A  07A4               	addwf	___ftpack@exp,f
 17229  162B  3001               	movlw	1
 17230  162C  07A1               	addwf	___ftpack@arg,f
 17231  162D  3000               	movlw	0
 17232  162E  1803               	skipnc
 17233  162F  3001               	movlw	1
 17234  1630  07A2               	addwf	___ftpack@arg+1,f
 17235  1631  3000               	movlw	0
 17236  1632  1803               	skipnc
 17237  1633  3001               	movlw	1
 17238  1634  07A3               	addwf	___ftpack@arg+2,f
 17239  1635  3001               	movlw	1
 17240  1636                     u8495:	
 17241  1636  36A3               	lsrf	___ftpack@arg+2,f
 17242  1637  0CA2               	rrf	___ftpack@arg+1,f
 17243  1638  0CA1               	rrf	___ftpack@arg,f
 17244  1639  0B89               	decfsz	9,f
 17245  163A  2E36               	goto	u8495
 17246  163B                     l2831:	
 17247  163B  30FF               	movlw	255
 17248  163C  0523               	andwf	___ftpack@arg+2,w
 17249  163D  1903               	btfsc	3,2
 17250  163E  2E48               	goto	l8247
 17251  163F  2E27               	goto	l8239
 17252  1640                     l8245:	
 17253  1640  3001               	movlw	1
 17254  1641  02A4               	subwf	___ftpack@exp,f
 17255  1642  3001               	movlw	1
 17256  1643                     u8515:	
 17257  1643  35A1               	lslf	___ftpack@arg,f
 17258  1644  0DA2               	rlf	___ftpack@arg+1,f
 17259  1645  0DA3               	rlf	___ftpack@arg+2,f
 17260  1646  0B89               	decfsz	9,f
 17261  1647  2E43               	goto	u8515
 17262  1648                     l8247:	
 17263  1648  1FA2               	btfss	___ftpack@arg+1,7
 17264  1649  2E40               	goto	l8245
 17265  164A  1824               	btfsc	___ftpack@exp,0
 17266  164B  2E52               	goto	l2837
 17267  164C  30FF               	movlw	255
 17268  164D  05A1               	andwf	___ftpack@arg,f
 17269  164E  307F               	movlw	127
 17270  164F  05A2               	andwf	___ftpack@arg+1,f
 17271  1650  30FF               	movlw	255
 17272  1651  05A3               	andwf	___ftpack@arg+2,f
 17273  1652                     l2837:	
 17274  1652  1003               	clrc
 17275  1653  0CA4               	rrf	___ftpack@exp,f
 17276  1654  0824               	movf	___ftpack@exp,w
 17277  1655  00A6               	movwf	??___ftpack
 17278  1656  01A7               	clrf	??___ftpack+1
 17279  1657  01A8               	clrf	??___ftpack+2
 17280  1658  3010               	movlw	16
 17281  1659                     u8545:	
 17282  1659  35A6               	lslf	??___ftpack,f
 17283  165A  0DA7               	rlf	??___ftpack+1,f
 17284  165B  0DA8               	rlf	??___ftpack+2,f
 17285  165C  0B89               	decfsz	9,f
 17286  165D  2E59               	goto	u8545
 17287  165E  0826               	movf	??___ftpack,w
 17288  165F  04A1               	iorwf	___ftpack@arg,f
 17289  1660  0827               	movf	??___ftpack+1,w
 17290  1661  04A2               	iorwf	___ftpack@arg+1,f
 17291  1662  0828               	movf	??___ftpack+2,w
 17292  1663  04A3               	iorwf	___ftpack@arg+2,f
 17293  1664  0825               	movf	___ftpack@sign,w
 17294  1665  1903               	btfsc	3,2
 17295  1666  0008               	return
 17296  1667  17A3               	bsf	___ftpack@arg+2,7
 17297  1668  0008               	return
 17298  1669                     __end_of___ftpack:	
 17299                           
 17300                           	psect	text117
 17301  1CB4                     __ptext117:	
 17302 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17303 ;; Defined at:
 17304 ;;		line 67 in file "../src/Dimmer_B1.c"
 17305 ;; Parameters:    Size  Location     Type
 17306 ;;  lights          1    wreg     unsigned char 
 17307 ;; Auto vars:     Size  Location     Type
 17308 ;;  lights          1    2[BANK0 ] unsigned char 
 17309 ;;  value           1    3[BANK0 ] unsigned char 
 17310 ;; Return value:  Size  Location     Type
 17311 ;;                  1    wreg      unsigned char 
 17312 ;; Registers used:
 17313 ;;		wreg, status,2
 17314 ;; Tracked objects:
 17315 ;;		On entry : 0/0
 17316 ;;		On exit  : 0/0
 17317 ;;		Unchanged: 0/0
 17318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;Total ram usage:        3 bytes
 17324 ;; Hardware stack levels used:    1
 17325 ;; Hardware stack levels required when called:    5
 17326 ;; This function calls:
 17327 ;;		Nothing
 17328 ;; This function is called by:
 17329 ;;		_setDimmerLights_Dimming
 17330 ;; This function uses a non-reentrant model
 17331 ;;
 17332                           
 17333                           
 17334                           ;psect for function _getDimmerIntr_DimmingValue
 17335  1CB4                     _getDimmerIntr_DimmingValue:	
 17336                           
 17337                           ;incstack = 0
 17338                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17339                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17340  1CB4  0020               	movlb	0	; select bank0
 17341  1CB5  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 17342                           
 17343                           ;Dimmer_B1.c: 68: char value = 0;
 17344  1CB6  01A3               	clrf	getDimmerIntr_DimmingValue@value
 17345                           
 17346                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17347  1CB7  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 17348  1CB8  3A01               	xorlw	1
 17349  1CB9  1D03               	skipz
 17350  1CBA  2CC1               	goto	l685
 17351                           
 17352                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17353  1CBB  0021               	movlb	1	; select bank1
 17354  1CBC  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 17355  1CBD  0020               	movlb	0	; select bank0
 17356  1CBE  00A1               	movwf	??_getDimmerIntr_DimmingValue
 17357  1CBF  0821               	movf	??_getDimmerIntr_DimmingValue,w
 17358  1CC0  00A3               	movwf	getDimmerIntr_DimmingValue@value
 17359  1CC1                     l685:	
 17360                           
 17361                           ;Dimmer_B1.c: 72: }
 17362                           ;Dimmer_B1.c: 84: return value;
 17363  1CC1  0823               	movf	getDimmerIntr_DimmingValue@value,w
 17364  1CC2  0008               	return
 17365  1CC3                     __end_of_getDimmerIntr_DimmingValue:	
 17366                           
 17367                           	psect	text118
 17368  1E65                     __ptext118:	
 17369 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17370 ;; Defined at:
 17371 ;;		line 934 in file "../src/Dimmer_B1.c"
 17372 ;; Parameters:    Size  Location     Type
 17373 ;;  lights          1    wreg     unsigned char 
 17374 ;; Auto vars:     Size  Location     Type
 17375 ;;  lights          1    0[COMMON] unsigned char 
 17376 ;;  allow           1    3[BANK0 ] unsigned char 
 17377 ;; Return value:  Size  Location     Type
 17378 ;;                  1    wreg      unsigned char 
 17379 ;; Registers used:
 17380 ;;		wreg, status,2, pclath, cstack
 17381 ;; Tracked objects:
 17382 ;;		On entry : 0/0
 17383 ;;		On exit  : 0/0
 17384 ;;		Unchanged: 0/0
 17385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17387 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;Total ram usage:        3 bytes
 17391 ;; Hardware stack levels used:    1
 17392 ;; Hardware stack levels required when called:    6
 17393 ;; This function calls:
 17394 ;;		_getLoad_OK
 17395 ;; This function is called by:
 17396 ;;		_setDimmerLights_Main
 17397 ;; This function uses a non-reentrant model
 17398 ;;
 17399                           
 17400                           
 17401                           ;psect for function _getDimmerLights_Allow_Condition
 17402  1E65                     _getDimmerLights_Allow_Condition:	
 17403                           
 17404                           ;Dimmer_B1.c: 935: char allow = 0;
 17405                           
 17406                           ;incstack = 0
 17407                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17408  1E65  0020               	movlb	0	; select bank0
 17409  1E66  01A3               	clrf	getDimmerLights_Allow_Condition@allow
 17410                           
 17411                           ;Dimmer_B1.c: 941: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17412  1E67  01A4               	clrf	_getDimmerLights_Allow_Condition$2229
 17413  1E68  0AA4               	incf	_getDimmerLights_Allow_Condition$2229,f
 17414  1E69  319B  23AF  319E   	fcall	_getLoad_OK
 17415  1E6C  3800               	iorlw	0
 17416  1E6D  1D03               	skipz
 17417  1E6E  2E74               	goto	l6711
 17418  1E6F  0022               	movlb	2	; select bank2
 17419  1E70  18AD               	btfsc	_Dimmer^(0+256),1
 17420  1E71  2E74               	goto	l6711
 17421  1E72  0020               	movlb	0	; select bank0
 17422  1E73  01A4               	clrf	_getDimmerLights_Allow_Condition$2229
 17423  1E74                     l6711:	
 17424  1E74  0020               	movlb	0	; select bank0
 17425  1E75  0824               	movf	_getDimmerLights_Allow_Condition$2229,w
 17426  1E76  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17427  1E77  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17428  1E78  00A3               	movwf	getDimmerLights_Allow_Condition@allow
 17429                           
 17430                           ;Dimmer_B1.c: 968: return allow;
 17431  1E79  0823               	movf	getDimmerLights_Allow_Condition@allow,w
 17432  1E7A  0008               	return
 17433  1E7B                     __end_of_getDimmerLights_Allow_Condition:	
 17434                           
 17435                           	psect	text119
 17436  1BAF                     __ptext119:	
 17437 ;; *************** function _getLoad_OK *****************
 17438 ;; Defined at:
 17439 ;;		line 272 in file "../src/OverLoad_B1.c"
 17440 ;; Parameters:    Size  Location     Type
 17441 ;;		None
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;  ok              1    1[BANK0 ] unsigned char 
 17444 ;; Return value:  Size  Location     Type
 17445 ;;                  1    wreg      unsigned char 
 17446 ;; Registers used:
 17447 ;;		wreg, status,2
 17448 ;; Tracked objects:
 17449 ;;		On entry : 0/0
 17450 ;;		On exit  : 0/0
 17451 ;;		Unchanged: 0/0
 17452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17456 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17457 ;;Total ram usage:        1 bytes
 17458 ;; Hardware stack levels used:    1
 17459 ;; Hardware stack levels required when called:    5
 17460 ;; This function calls:
 17461 ;;		Nothing
 17462 ;; This function is called by:
 17463 ;;		_DimmerLights_Main
 17464 ;;		_getDimmerLights_Allow_Condition
 17465 ;; This function uses a non-reentrant model
 17466 ;;
 17467                           
 17468                           
 17469                           ;psect for function _getLoad_OK
 17470  1BAF                     _getLoad_OK:	
 17471                           
 17472                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17473                           
 17474                           ;incstack = 0
 17475                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17476  1BAF  3000               	movlw	0
 17477  1BB0  0022               	movlb	2	; select bank2
 17478  1BB1  1BB4               	btfsc	_Load^(0+256),7
 17479  1BB2  3001               	movlw	1
 17480  1BB3  0020               	movlb	0	; select bank0
 17481  1BB4  00A1               	movwf	getLoad_OK@ok
 17482                           
 17483                           ;OverLoad_B1.c: 274: return ok;
 17484  1BB5  0821               	movf	getLoad_OK@ok,w
 17485  1BB6  0008               	return
 17486  1BB7                     __end_of_getLoad_OK:	
 17487                           
 17488                           	psect	text120
 17489  1161                     __ptext120:	
 17490 ;; *************** function _getMain_All_Error_Status *****************
 17491 ;; Defined at:
 17492 ;;		line 424 in file "../src/Main_B1.c"
 17493 ;; Parameters:    Size  Location     Type
 17494 ;;  command         1    wreg     unsigned char 
 17495 ;; Auto vars:     Size  Location     Type
 17496 ;;  command         1    6[BANK0 ] unsigned char 
 17497 ;;  status          1    7[BANK0 ] unsigned char 
 17498 ;; Return value:  Size  Location     Type
 17499 ;;                  1    wreg      unsigned char 
 17500 ;; Registers used:
 17501 ;;		wreg, status,2, status,0
 17502 ;; Tracked objects:
 17503 ;;		On entry : 0/0
 17504 ;;		On exit  : 0/0
 17505 ;;		Unchanged: 0/0
 17506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;Total ram usage:        7 bytes
 17512 ;; Hardware stack levels used:    1
 17513 ;; Hardware stack levels required when called:    5
 17514 ;; This function calls:
 17515 ;;		Nothing
 17516 ;; This function is called by:
 17517 ;;		_DimmerLights_Main
 17518 ;;		_Exception_Main
 17519 ;;		_Load_Main
 17520 ;;		_setTemp_Main
 17521 ;;		_getRxData
 17522 ;;		_setSw_Main
 17523 ;; This function uses a non-reentrant model
 17524 ;;
 17525                           
 17526                           
 17527                           ;psect for function _getMain_All_Error_Status
 17528  1161                     _getMain_All_Error_Status:	
 17529                           
 17530                           ;incstack = 0
 17531                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17532                           ;getMain_All_Error_Status@command stored from wreg
 17533  1161  0020               	movlb	0	; select bank0
 17534  1162  00A6               	movwf	getMain_All_Error_Status@command
 17535                           
 17536                           ;Main_B1.c: 425: char status = 0;
 17537  1163  01A7               	clrf	getMain_All_Error_Status@status
 17538                           
 17539                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17540  1164  08A7               	movf	getMain_All_Error_Status@status,f
 17541  1165  1D03               	skipz
 17542  1166  297B               	goto	l8763
 17543  1167  0826               	movf	getMain_All_Error_Status@command,w
 17544  1168  3A02               	xorlw	2
 17545  1169  1903               	skipnz
 17546  116A  297B               	goto	l8763
 17547                           
 17548                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17549  116B  0021               	movlb	1	; select bank1
 17550  116C  18DB               	btfsc	_Temp^(0+128),1
 17551  116D  2972               	goto	l8761
 17552  116E  0020               	movlb	0	; select bank0
 17553  116F  01A2               	clrf	_getMain_All_Error_Status$3552
 17554  1170  01A3               	clrf	_getMain_All_Error_Status$3552+1
 17555  1171  2977               	goto	l1460
 17556  1172                     l8761:	
 17557  1172  3002               	movlw	2
 17558  1173  0020               	movlb	0	; select bank0
 17559  1174  00A2               	movwf	_getMain_All_Error_Status$3552
 17560  1175  3000               	movlw	0
 17561  1176  00A3               	movwf	_getMain_All_Error_Status$3552+1
 17562  1177                     l1460:	
 17563  1177  0822               	movf	_getMain_All_Error_Status$3552,w
 17564  1178  00A1               	movwf	??_getMain_All_Error_Status
 17565  1179  0821               	movf	??_getMain_All_Error_Status,w
 17566  117A  00A7               	movwf	getMain_All_Error_Status@status
 17567  117B                     l8763:	
 17568                           
 17569                           ;Main_B1.c: 438: }
 17570                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17571  117B  08A7               	movf	getMain_All_Error_Status@status,f
 17572  117C  1D03               	skipz
 17573  117D  2992               	goto	l1461
 17574  117E  0826               	movf	getMain_All_Error_Status@command,w
 17575  117F  3A03               	xorlw	3
 17576  1180  1903               	skipnz
 17577  1181  2992               	goto	l1461
 17578                           
 17579                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17580  1182  0022               	movlb	2	; select bank2
 17581  1183  1AB4               	btfsc	_Load^(0+256),5
 17582  1184  2989               	goto	l8771
 17583  1185  0020               	movlb	0	; select bank0
 17584  1186  01A4               	clrf	_getMain_All_Error_Status$3553
 17585  1187  01A5               	clrf	_getMain_All_Error_Status$3553+1
 17586  1188  298E               	goto	l1465
 17587  1189                     l8771:	
 17588  1189  3003               	movlw	3
 17589  118A  0020               	movlb	0	; select bank0
 17590  118B  00A4               	movwf	_getMain_All_Error_Status$3553
 17591  118C  3000               	movlw	0
 17592  118D  00A5               	movwf	_getMain_All_Error_Status$3553+1
 17593  118E                     l1465:	
 17594  118E  0824               	movf	_getMain_All_Error_Status$3553,w
 17595  118F  00A1               	movwf	??_getMain_All_Error_Status
 17596  1190  0821               	movf	??_getMain_All_Error_Status,w
 17597  1191  00A7               	movwf	getMain_All_Error_Status@status
 17598  1192                     l1461:	
 17599                           
 17600                           ;Main_B1.c: 445: }
 17601                           ;Main_B1.c: 455: return status;
 17602  1192  0827               	movf	getMain_All_Error_Status@status,w
 17603  1193  0008               	return
 17604  1194                     __end_of_getMain_All_Error_Status:	
 17605                           
 17606                           	psect	text121
 17607  1B9A                     __ptext121:	
 17608 ;; *************** function _DimmerLights_Initialization *****************
 17609 ;; Defined at:
 17610 ;;		line 597 in file "../src/Dimmer_B1.c"
 17611 ;; Parameters:    Size  Location     Type
 17612 ;;		None
 17613 ;; Auto vars:     Size  Location     Type
 17614 ;;		None
 17615 ;; Return value:  Size  Location     Type
 17616 ;;		None               void
 17617 ;; Registers used:
 17618 ;;		wreg, status,2, status,0, pclath, cstack
 17619 ;; Tracked objects:
 17620 ;;		On entry : 0/0
 17621 ;;		On exit  : 0/0
 17622 ;;		Unchanged: 0/0
 17623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;Total ram usage:        0 bytes
 17629 ;; Hardware stack levels used:    1
 17630 ;; Hardware stack levels required when called:    6
 17631 ;; This function calls:
 17632 ;;		_DimmerIntr_Initialization
 17633 ;;		_setDimmerLights_Initialization
 17634 ;; This function is called by:
 17635 ;;		_main
 17636 ;; This function uses a non-reentrant model
 17637 ;;
 17638                           
 17639                           
 17640                           ;psect for function _DimmerLights_Initialization
 17641  1B9A                     _DimmerLights_Initialization:	
 17642                           
 17643                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17644                           
 17645                           ;incstack = 0
 17646                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17647  1B9A  3001               	movlw	1
 17648  1B9B  319B  234A  319B   	fcall	_setDimmerLights_Initialization
 17649                           
 17650                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17651  1B9E  319E  26D7         	fcall	_DimmerIntr_Initialization
 17652  1BA0  0008               	return
 17653  1BA1                     __end_of_DimmerLights_Initialization:	
 17654                           
 17655                           	psect	text122
 17656  1B4A                     __ptext122:	
 17657 ;; *************** function _setDimmerLights_Initialization *****************
 17658 ;; Defined at:
 17659 ;;		line 613 in file "../src/Dimmer_B1.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;  lights          1    wreg     unsigned char 
 17662 ;; Auto vars:     Size  Location     Type
 17663 ;;  lights          1    0[COMMON] unsigned char 
 17664 ;; Return value:  Size  Location     Type
 17665 ;;		None               void
 17666 ;; Registers used:
 17667 ;;		wreg
 17668 ;; Tracked objects:
 17669 ;;		On entry : 0/0
 17670 ;;		On exit  : 0/0
 17671 ;;		Unchanged: 0/0
 17672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17677 ;;Total ram usage:        0 bytes
 17678 ;; Hardware stack levels used:    1
 17679 ;; Hardware stack levels required when called:    5
 17680 ;; This function calls:
 17681 ;;		Nothing
 17682 ;; This function is called by:
 17683 ;;		_DimmerLights_Initialization
 17684 ;; This function uses a non-reentrant model
 17685 ;;
 17686                           
 17687                           
 17688                           ;psect for function _setDimmerLights_Initialization
 17689  1B4A                     _setDimmerLights_Initialization:	
 17690                           
 17691                           ;incstack = 0
 17692                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17693  1B4A  0008               	return
 17694  1B4B                     __end_of_setDimmerLights_Initialization:	
 17695                           
 17696                           	psect	text123
 17697  1ED7                     __ptext123:	
 17698 ;; *************** function _DimmerIntr_Initialization *****************
 17699 ;; Defined at:
 17700 ;;		line 7 in file "../src/Dimmer_B1.c"
 17701 ;; Parameters:    Size  Location     Type
 17702 ;;		None
 17703 ;; Auto vars:     Size  Location     Type
 17704 ;;		None
 17705 ;; Return value:  Size  Location     Type
 17706 ;;		None               void
 17707 ;; Registers used:
 17708 ;;		wreg
 17709 ;; Tracked objects:
 17710 ;;		On entry : 0/0
 17711 ;;		On exit  : 0/0
 17712 ;;		Unchanged: 0/0
 17713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;Total ram usage:        1 bytes
 17719 ;; Hardware stack levels used:    1
 17720 ;; Hardware stack levels required when called:    5
 17721 ;; This function calls:
 17722 ;;		Nothing
 17723 ;; This function is called by:
 17724 ;;		_DimmerLights_Initialization
 17725 ;; This function uses a non-reentrant model
 17726 ;;
 17727                           
 17728                           
 17729                           ;psect for function _DimmerIntr_Initialization
 17730  1ED7                     _DimmerIntr_Initialization:	
 17731                           
 17732                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17733                           
 17734                           ;incstack = 0
 17735                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17736  1ED7  3007               	movlw	7
 17737  1ED8  0020               	movlb	0	; select bank0
 17738  1ED9  00A1               	movwf	??_DimmerIntr_Initialization
 17739  1EDA  0821               	movf	??_DimmerIntr_Initialization,w
 17740  1EDB  0021               	movlb	1	; select bank1
 17741  1EDC  00BE               	movwf	(_DimmerIntr1^(0+128)+4)
 17742                           
 17743                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(60*0.78));
 17744  1EDD  302E               	movlw	46
 17745  1EDE  0020               	movlb	0	; select bank0
 17746  1EDF  00A1               	movwf	??_DimmerIntr_Initialization
 17747  1EE0  0821               	movf	??_DimmerIntr_Initialization,w
 17748  1EE1  0021               	movlb	1	; select bank1
 17749  1EE2  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 17750                           
 17751                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.78));
 17752  1EE3  3003               	movlw	3
 17753  1EE4  0020               	movlb	0	; select bank0
 17754  1EE5  00A1               	movwf	??_DimmerIntr_Initialization
 17755  1EE6  0821               	movf	??_DimmerIntr_Initialization,w
 17756  1EE7  0021               	movlb	1	; select bank1
 17757  1EE8  00C1               	movwf	(_DimmerIntr1^(0+128)+7)
 17758                           
 17759                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(60*0.78));
 17760  1EE9  302E               	movlw	46
 17761  1EEA  0020               	movlb	0	; select bank0
 17762  1EEB  00A1               	movwf	??_DimmerIntr_Initialization
 17763  1EEC  0821               	movf	??_DimmerIntr_Initialization,w
 17764  1EED  0021               	movlb	1	; select bank1
 17765  1EEE  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 17766  1EEF  0008               	return
 17767  1EF0                     __end_of_DimmerIntr_Initialization:	
 17768                           
 17769                           	psect	text124
 17770  1B5F                     __ptext124:	
 17771 ;; *************** function _DelayOff_Main *****************
 17772 ;; Defined at:
 17773 ;;		line 41 in file "../src/DelayOff_B1.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;		None
 17776 ;; Auto vars:     Size  Location     Type
 17777 ;;		None
 17778 ;; Return value:  Size  Location     Type
 17779 ;;		None               void
 17780 ;; Registers used:
 17781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17782 ;; Tracked objects:
 17783 ;;		On entry : 0/0
 17784 ;;		On exit  : 0/0
 17785 ;;		Unchanged: 0/0
 17786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;Total ram usage:        0 bytes
 17792 ;; Hardware stack levels used:    1
 17793 ;; Hardware stack levels required when called:    9
 17794 ;; This function calls:
 17795 ;;		_DlyOff_Main
 17796 ;; This function is called by:
 17797 ;;		_main
 17798 ;; This function uses a non-reentrant model
 17799 ;;
 17800                           
 17801                           
 17802                           ;psect for function _DelayOff_Main
 17803  1B5F                     _DelayOff_Main:	
 17804                           
 17805                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17806                           
 17807                           ;incstack = 0
 17808                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17809  1B5F  3001               	movlw	1
 17810  1B60  3189  2167         	fcall	_DlyOff_Main
 17811  1B62  0008               	return
 17812  1B63                     __end_of_DelayOff_Main:	
 17813                           
 17814                           	psect	text125
 17815  0967                     __ptext125:	
 17816 ;; *************** function _DlyOff_Main *****************
 17817 ;; Defined at:
 17818 ;;		line 61 in file "../src/DelayOff_B1.c"
 17819 ;; Parameters:    Size  Location     Type
 17820 ;;  sw              1    wreg     unsigned char 
 17821 ;; Auto vars:     Size  Location     Type
 17822 ;;  sw              1   72[BANK0 ] unsigned char 
 17823 ;; Return value:  Size  Location     Type
 17824 ;;		None               void
 17825 ;; Registers used:
 17826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17827 ;; Tracked objects:
 17828 ;;		On entry : 0/0
 17829 ;;		On exit  : 0/0
 17830 ;;		Unchanged: 0/0
 17831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;Total ram usage:        3 bytes
 17837 ;; Hardware stack levels used:    1
 17838 ;; Hardware stack levels required when called:    8
 17839 ;; This function calls:
 17840 ;;		_DelayOffPointSelect
 17841 ;;		_getDimmerLights_Status
 17842 ;;		_setDimmerLights_SwOff
 17843 ;;		_setDimmerLights_SwOn
 17844 ;;		_setProductData
 17845 ;; This function is called by:
 17846 ;;		_DelayOff_Main
 17847 ;; This function uses a non-reentrant model
 17848 ;;
 17849                           
 17850                           
 17851                           ;psect for function _DlyOff_Main
 17852  0967                     _DlyOff_Main:	
 17853                           
 17854                           ;incstack = 0
 17855                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17856                           ;DlyOff_Main@sw stored from wreg
 17857  0967  0020               	movlb	0	; select bank0
 17858  0968  00E8               	movwf	DlyOff_Main@sw
 17859                           
 17860                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17861  0969  0868               	movf	DlyOff_Main@sw,w
 17862  096A  319C  2423  3189   	fcall	_DelayOffPointSelect
 17863                           
 17864                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17865  096D  0021               	movlb	1	; select bank1
 17866  096E  084D               	movf	_DelayOff^(0+128),w
 17867  096F  0086               	movwf	6
 17868  0970  3001               	movlw	1	; select bank2/3
 17869  0971  0087               	movwf	7
 17870  0972  1C81               	btfss	1,1
 17871  0973  0008               	return
 17872                           
 17873                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17874  0974  084D               	movf	_DelayOff^(0+128),w
 17875  0975  3E02               	addlw	2
 17876  0976  0086               	movwf	6
 17877  0977  3001               	movlw	1	; select bank2/3
 17878  0978  0087               	movwf	7
 17879  0979  3001               	movlw	1
 17880  097A  0781               	addwf	1,f
 17881  097B  3141               	addfsr 1,1
 17882  097C  1803               	skipnc
 17883  097D  0A81               	incf	1,f
 17884                           
 17885                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17886  097E  084D               	movf	_DelayOff^(0+128),w
 17887  097F  3E02               	addlw	2
 17888  0980  0086               	movwf	6
 17889  0981  3001               	movlw	1	; select bank2/3
 17890  0982  0087               	movwf	7
 17891  0983  3F40               	moviw [0]fsr1
 17892  0984  0020               	movlb	0	; select bank0
 17893  0985  00E6               	movwf	??_DlyOff_Main
 17894  0986  3F41               	moviw [1]fsr1
 17895  0987  00E7               	movwf	??_DlyOff_Main+1
 17896  0988  300B               	movlw	11
 17897  0989  0267               	subwf	??_DlyOff_Main+1,w
 17898  098A  30B8               	movlw	184
 17899  098B  1903               	skipnz
 17900  098C  0266               	subwf	??_DlyOff_Main,w
 17901  098D  1C03               	skipc
 17902  098E  0008               	return
 17903                           
 17904                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17905  098F  0021               	movlb	1	; select bank1
 17906  0990  084D               	movf	_DelayOff^(0+128),w
 17907  0991  3E02               	addlw	2
 17908  0992  0086               	movwf	6
 17909  0993  3001               	movlw	1	; select bank2/3
 17910  0994  0087               	movwf	7
 17911  0995  3000               	movlw	0
 17912  0996  3FC0               	movwi [0]fsr1
 17913  0997  3FC1               	movwi [1]fsr1
 17914                           
 17915                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17916  0998  3001               	movlw	1
 17917  0999  0020               	movlb	0	; select bank0
 17918  099A  00E6               	movwf	??_DlyOff_Main
 17919  099B  0021               	movlb	1	; select bank1
 17920  099C  084D               	movf	_DelayOff^(0+128),w
 17921  099D  3E04               	addlw	4
 17922  099E  0086               	movwf	6
 17923  099F  3001               	movlw	1	; select bank2/3
 17924  09A0  0087               	movwf	7
 17925  09A1  0020               	movlb	0	; select bank0
 17926  09A2  0866               	movf	??_DlyOff_Main,w
 17927  09A3  0781               	addwf	1,f
 17928                           
 17929                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17930  09A4  0021               	movlb	1	; select bank1
 17931  09A5  084D               	movf	_DelayOff^(0+128),w
 17932  09A6  3E04               	addlw	4
 17933  09A7  0086               	movwf	6
 17934  09A8  3001               	movlw	1	; select bank2/3
 17935  09A9  0087               	movwf	7
 17936  09AA  0A4D               	incf	_DelayOff^(0+128),w
 17937  09AB  0084               	movwf	4
 17938  09AC  3001               	movlw	1	; select bank2/3
 17939  09AD  0085               	movwf	5
 17940  09AE  0800               	movf	0,w
 17941  09AF  0201               	subwf	1,w
 17942  09B0  1C03               	skipc
 17943  09B1  0008               	return
 17944                           
 17945                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17946  09B2  084D               	movf	_DelayOff^(0+128),w
 17947  09B3  3E04               	addlw	4
 17948  09B4  0086               	movwf	6
 17949  09B5  3001               	movlw	1	; select bank2/3
 17950  09B6  0087               	movwf	7
 17951  09B7  0181               	clrf	1
 17952                           
 17953                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17954  09B8  084D               	movf	_DelayOff^(0+128),w
 17955  09B9  0086               	movwf	6
 17956  09BA  3001               	movlw	1	; select bank2/3
 17957  09BB  0087               	movwf	7
 17958  09BC  1081               	bcf	1,1
 17959                           
 17960                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17961  09BD  0020               	movlb	0	; select bank0
 17962  09BE  0868               	movf	DlyOff_Main@sw,w
 17963  09BF  319C  24E2  3189   	fcall	_getDimmerLights_Status
 17964  09C2  3A01               	xorlw	1
 17965  09C3  1D03               	skipz
 17966  09C4  29CF               	goto	l531
 17967                           
 17968                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17969  09C5  0020               	movlb	0	; select bank0
 17970  09C6  0868               	movf	DlyOff_Main@sw,w
 17971  09C7  3191  21C8  3189   	fcall	_setDimmerLights_SwOn
 17972                           
 17973                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17974  09CA  0020               	movlb	0	; select bank0
 17975  09CB  0868               	movf	DlyOff_Main@sw,w
 17976  09CC  3192  22A1  3189   	fcall	_setDimmerLights_SwOff
 17977  09CF                     l531:	
 17978                           
 17979                           ;DelayOff_B1.c: 78: }
 17980                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17981  09CF  0020               	movlb	0	; select bank0
 17982  09D0  01E3               	clrf	setProductData@value
 17983  09D1  0868               	movf	DlyOff_Main@sw,w
 17984  09D2  3E1A               	addlw	26
 17985  09D3  319C  243B         	fcall	_setProductData
 17986  09D5  0008               	return
 17987  09D6                     __end_of_DlyOff_Main:	
 17988                           
 17989                           	psect	text126
 17990  1C3B                     __ptext126:	
 17991 ;; *************** function _setProductData *****************
 17992 ;; Defined at:
 17993 ;;		line 645 in file "../src/Main_B1.c"
 17994 ;; Parameters:    Size  Location     Type
 17995 ;;  address         1    wreg     unsigned char 
 17996 ;;  value           1   67[BANK0 ] unsigned char 
 17997 ;; Auto vars:     Size  Location     Type
 17998 ;;  address         1   69[BANK0 ] unsigned char 
 17999 ;; Return value:  Size  Location     Type
 18000 ;;		None               void
 18001 ;; Registers used:
 18002 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18003 ;; Tracked objects:
 18004 ;;		On entry : 0/0
 18005 ;;		On exit  : 0/0
 18006 ;;		Unchanged: 0/0
 18007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18008 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;Total ram usage:        3 bytes
 18013 ;; Hardware stack levels used:    1
 18014 ;; Hardware stack levels required when called:    5
 18015 ;; This function calls:
 18016 ;;		Nothing
 18017 ;; This function is called by:
 18018 ;;		_DlyOff_Main
 18019 ;;		_setDelayOff_GO
 18020 ;;		_setDimmerLights_OnOff
 18021 ;;		_setDimmerLights_Dimming
 18022 ;;		_setTemp_Main
 18023 ;;		_setLog_Code
 18024 ;;		_setControl_Lights_Table
 18025 ;;		_setRFSW_AdjControl
 18026 ;;		_setRF_DimmerLights
 18027 ;; This function uses a non-reentrant model
 18028 ;;
 18029                           
 18030                           
 18031                           ;psect for function _setProductData
 18032  1C3B                     _setProductData:	
 18033                           
 18034                           ;incstack = 0
 18035                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18036                           ;setProductData@address stored from wreg
 18037  1C3B  0020               	movlb	0	; select bank0
 18038  1C3C  00E5               	movwf	setProductData@address
 18039                           
 18040                           ;Main_B1.c: 646: _product.Data[address] = value;
 18041  1C3D  0863               	movf	setProductData@value,w
 18042  1C3E  00E4               	movwf	??_setProductData
 18043  1C3F  0865               	movf	setProductData@address,w
 18044  1C40  3E20               	addlw	__product& (0+255)
 18045  1C41  0086               	movwf	6
 18046  1C42  3002               	movlw	2	; select bank4/5
 18047  1C43  0087               	movwf	7
 18048  1C44  0864               	movf	??_setProductData,w
 18049  1C45  0081               	movwf	1
 18050  1C46  0008               	return
 18051  1C47                     __end_of_setProductData:	
 18052                           
 18053                           	psect	text127
 18054  11C8                     __ptext127:	
 18055 ;; *************** function _setDimmerLights_SwOn *****************
 18056 ;; Defined at:
 18057 ;;		line 653 in file "../src/Dimmer_B1.c"
 18058 ;; Parameters:    Size  Location     Type
 18059 ;;  sw              1    wreg     unsigned char 
 18060 ;; Auto vars:     Size  Location     Type
 18061 ;;  sw              1   14[BANK0 ] unsigned char 
 18062 ;;  idle            1   15[BANK0 ] unsigned char 
 18063 ;; Return value:  Size  Location     Type
 18064 ;;		None               void
 18065 ;; Registers used:
 18066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18067 ;; Tracked objects:
 18068 ;;		On entry : 0/0
 18069 ;;		On exit  : 0/0
 18070 ;;		Unchanged: 0/0
 18071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;Total ram usage:        2 bytes
 18077 ;; Hardware stack levels used:    1
 18078 ;; Hardware stack levels required when called:    7
 18079 ;; This function calls:
 18080 ;;		_DimmerLights_SelectPointer
 18081 ;;		_setBuz
 18082 ;; This function is called by:
 18083 ;;		_DlyOff_Main
 18084 ;;		_setControl_Lights_Table
 18085 ;;		_setRFSW_Control
 18086 ;;		_setRFSW_AdjControl
 18087 ;;		_setSw_Main
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           
 18092                           ;psect for function _setDimmerLights_SwOn
 18093  11C8                     _setDimmerLights_SwOn:	
 18094                           
 18095                           ;incstack = 0
 18096                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18097                           ;setDimmerLights_SwOn@sw stored from wreg
 18098  11C8  0020               	movlb	0	; select bank0
 18099  11C9  00AE               	movwf	setDimmerLights_SwOn@sw
 18100                           
 18101                           ;Dimmer_B1.c: 654: char idle = 0;
 18102  11CA  01AF               	clrf	setDimmerLights_SwOn@idle
 18103                           
 18104                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 18105  11CB  082E               	movf	setDimmerLights_SwOn@sw,w
 18106  11CC  319C  242F  3191   	fcall	_DimmerLights_SelectPointer
 18107                           
 18108                           ;Dimmer_B1.c: 680: if (idle == 0) {
 18109  11CF  0020               	movlb	0	; select bank0
 18110  11D0  08AF               	movf	setDimmerLights_SwOn@idle,f
 18111  11D1  1D03               	skipz
 18112  11D2  0008               	return
 18113                           
 18114                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 18115  11D3  0021               	movlb	1	; select bank1
 18116  11D4  084F               	movf	_DimmerLights^(0+128),w
 18117  11D5  0086               	movwf	6
 18118  11D6  3001               	movlw	1	; select bank2/3
 18119  11D7  0087               	movwf	7
 18120  11D8  1401               	bsf	1,0
 18121                           
 18122                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 18123  11D9  0A4F               	incf	_DimmerLights^(0+128),w
 18124  11DA  0086               	movwf	6
 18125  11DB  3001               	movlw	1	; select bank2/3
 18126  11DC  0087               	movwf	7
 18127  11DD  1801               	btfsc	1,0
 18128  11DE  29EF               	goto	l8569
 18129                           
 18130                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 18131  11DF  0A4F               	incf	_DimmerLights^(0+128),w
 18132  11E0  0086               	movwf	6
 18133  11E1  3001               	movlw	1	; select bank2/3
 18134  11E2  0087               	movwf	7
 18135  11E3  1401               	bsf	1,0
 18136                           
 18137                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 18138  11E4  084F               	movf	_DimmerLights^(0+128),w
 18139  11E5  0086               	movwf	6
 18140  11E6  3001               	movlw	1	; select bank2/3
 18141  11E7  0087               	movwf	7
 18142  11E8  1481               	bsf	1,1
 18143                           
 18144                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18145  11E9  084F               	movf	_DimmerLights^(0+128),w
 18146  11EA  0086               	movwf	6
 18147  11EB  3001               	movlw	1	; select bank2/3
 18148  11EC  0087               	movwf	7
 18149  11ED  1501               	bsf	1,2
 18150                           
 18151                           ;Dimmer_B1.c: 686: } else {
 18152  11EE  29F4               	goto	l8571
 18153  11EF                     l8569:	
 18154                           
 18155                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18156  11EF  0A4F               	incf	_DimmerLights^(0+128),w
 18157  11F0  0086               	movwf	6
 18158  11F1  3001               	movlw	1	; select bank2/3
 18159  11F2  0087               	movwf	7
 18160  11F3  1001               	bcf	1,0
 18161  11F4                     l8571:	
 18162                           
 18163                           ;Dimmer_B1.c: 688: }
 18164                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18165  11F4  3064               	movlw	100
 18166  11F5  0020               	movlb	0	; select bank0
 18167  11F6  00AA               	movwf	setBuz@time
 18168  11F7  3000               	movlw	0
 18169  11F8  00AB               	movwf	setBuz@time+1
 18170  11F9  3001               	movlw	1
 18171  11FA  3194  24F6         	fcall	_setBuz
 18172  11FC  0008               	return
 18173  11FD                     __end_of_setDimmerLights_SwOn:	
 18174                           
 18175                           	psect	text128
 18176  14F6                     __ptext128:	
 18177 ;; *************** function _setBuz *****************
 18178 ;; Defined at:
 18179 ;;		line 22 in file "../src/Buzzer_B1.c"
 18180 ;; Parameters:    Size  Location     Type
 18181 ;;  count           1    wreg     unsigned char 
 18182 ;;  time            2   10[BANK0 ] int 
 18183 ;; Auto vars:     Size  Location     Type
 18184 ;;  count           1   13[BANK0 ] unsigned char 
 18185 ;; Return value:  Size  Location     Type
 18186 ;;		None               void
 18187 ;; Registers used:
 18188 ;;		wreg, status,2, status,0, pclath, cstack
 18189 ;; Tracked objects:
 18190 ;;		On entry : 0/0
 18191 ;;		On exit  : 0/0
 18192 ;;		Unchanged: 0/0
 18193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18197 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18198 ;;Total ram usage:        4 bytes
 18199 ;; Hardware stack levels used:    1
 18200 ;; Hardware stack levels required when called:    6
 18201 ;; This function calls:
 18202 ;;		___awdiv
 18203 ;; This function is called by:
 18204 ;;		_setDimmerLights_SwOn
 18205 ;;		_setDimmerLights_Dimming
 18206 ;;		_my_MainTimer
 18207 ;;		_Exception_Main
 18208 ;;		_setTemp_Main
 18209 ;;		_setLog_Code
 18210 ;;		_setRFSW_Control
 18211 ;;		_setSw_Main
 18212 ;; This function uses a non-reentrant model
 18213 ;;
 18214                           
 18215                           
 18216                           ;psect for function _setBuz
 18217  14F6                     _setBuz:	
 18218                           
 18219                           ;incstack = 0
 18220                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18221                           ;setBuz@count stored from wreg
 18222  14F6  0020               	movlb	0	; select bank0
 18223  14F7  00AD               	movwf	setBuz@count
 18224                           
 18225                           ;Buzzer_B1.c: 23: time /= 20;
 18226  14F8  3014               	movlw	20
 18227  14F9  00A1               	movwf	___awdiv@divisor
 18228  14FA  3000               	movlw	0
 18229  14FB  00A2               	movwf	___awdiv@divisor+1
 18230  14FC  082B               	movf	setBuz@time+1,w
 18231  14FD  01A4               	clrf	___awdiv@dividend+1
 18232  14FE  07A4               	addwf	___awdiv@dividend+1,f
 18233  14FF  082A               	movf	setBuz@time,w
 18234  1500  01A3               	clrf	___awdiv@dividend
 18235  1501  07A3               	addwf	___awdiv@dividend,f
 18236  1502  3194  24A2  3194   	fcall	___awdiv
 18237  1505  0020               	movlb	0	; select bank0
 18238  1506  0822               	movf	?___awdiv+1,w
 18239  1507  01AB               	clrf	setBuz@time+1
 18240  1508  07AB               	addwf	setBuz@time+1,f
 18241  1509  0821               	movf	?___awdiv,w
 18242  150A  01AA               	clrf	setBuz@time
 18243  150B  07AA               	addwf	setBuz@time,f
 18244                           
 18245                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18246  150C  0021               	movlb	1	; select bank1
 18247  150D  1C2E               	btfss	_Buz1^(0+128),0
 18248  150E  0008               	return
 18249                           
 18250                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18251  150F  18AE               	btfsc	_Buz1^(0+128),1
 18252  1510  2D27               	goto	l86
 18253                           
 18254                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18255  1511  14AE               	bsf	_Buz1^(0+128),1
 18256                           
 18257                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18258  1512  01AF               	clrf	(_Buz1^(0+128)+1)
 18259  1513  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18260                           
 18261                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18262  1514  0020               	movlb	0	; select bank0
 18263  1515  082D               	movf	setBuz@count,w
 18264  1516  00AC               	movwf	??_setBuz
 18265  1517  082C               	movf	??_setBuz,w
 18266  1518  0021               	movlb	1	; select bank1
 18267  1519  00B1               	movwf	(_Buz1^(0+128)+3)
 18268                           
 18269                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18270  151A  0020               	movlb	0	; select bank0
 18271  151B  082B               	movf	setBuz@time+1,w
 18272  151C  0021               	movlb	1	; select bank1
 18273  151D  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18274  151E  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18275  151F  0020               	movlb	0	; select bank0
 18276  1520  082A               	movf	setBuz@time,w
 18277  1521  0021               	movlb	1	; select bank1
 18278  1522  01B4               	clrf	(_Buz1^(0+128)+6)
 18279  1523  07B4               	addwf	(_Buz1^(0+128)+6),f
 18280                           
 18281                           ;Buzzer_B1.c: 30: RB3 = 1;
 18282  1524  0020               	movlb	0	; select bank0
 18283  1525  158D               	bsf	13,3	;volatile
 18284                           
 18285                           ;Buzzer_B1.c: 31: } else {
 18286  1526  0008               	return
 18287  1527                     l86:	
 18288                           
 18289                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18290  1527  19AE               	btfsc	_Buz1^(0+128),3
 18291  1528  2D3B               	goto	l88
 18292                           
 18293                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18294  1529  15AE               	bsf	_Buz1^(0+128),3
 18295                           
 18296                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18297  152A  0020               	movlb	0	; select bank0
 18298  152B  082D               	movf	setBuz@count,w
 18299  152C  00AC               	movwf	??_setBuz
 18300  152D  082C               	movf	??_setBuz,w
 18301  152E  0021               	movlb	1	; select bank1
 18302  152F  00B2               	movwf	(_Buz1^(0+128)+4)
 18303                           
 18304                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18305  1530  0020               	movlb	0	; select bank0
 18306  1531  082B               	movf	setBuz@time+1,w
 18307  1532  0021               	movlb	1	; select bank1
 18308  1533  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18309  1534  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18310  1535  0020               	movlb	0	; select bank0
 18311  1536  082A               	movf	setBuz@time,w
 18312  1537  0021               	movlb	1	; select bank1
 18313  1538  01B6               	clrf	(_Buz1^(0+128)+8)
 18314  1539  07B6               	addwf	(_Buz1^(0+128)+8),f
 18315                           
 18316                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18317  153A  0008               	return
 18318  153B                     l88:	
 18319  153B  1A2E               	btfsc	_Buz1^(0+128),4
 18320  153C  0008               	return
 18321                           
 18322                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18323  153D  162E               	bsf	_Buz1^(0+128),4
 18324                           
 18325                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18326  153E  0020               	movlb	0	; select bank0
 18327  153F  082D               	movf	setBuz@count,w
 18328  1540  00AC               	movwf	??_setBuz
 18329  1541  082C               	movf	??_setBuz,w
 18330  1542  0021               	movlb	1	; select bank1
 18331  1543  00B3               	movwf	(_Buz1^(0+128)+5)
 18332                           
 18333                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18334  1544  0020               	movlb	0	; select bank0
 18335  1545  082B               	movf	setBuz@time+1,w
 18336  1546  0021               	movlb	1	; select bank1
 18337  1547  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18338  1548  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18339  1549  0020               	movlb	0	; select bank0
 18340  154A  082A               	movf	setBuz@time,w
 18341  154B  0021               	movlb	1	; select bank1
 18342  154C  01B8               	clrf	(_Buz1^(0+128)+10)
 18343  154D  07B8               	addwf	(_Buz1^(0+128)+10),f
 18344  154E  0008               	return
 18345  154F                     __end_of_setBuz:	
 18346                           
 18347                           	psect	text129
 18348  14A2                     __ptext129:	
 18349 ;; *************** function ___awdiv *****************
 18350 ;; Defined at:
 18351 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18352 ;; Parameters:    Size  Location     Type
 18353 ;;  divisor         2    1[BANK0 ] int 
 18354 ;;  dividend        2    3[BANK0 ] int 
 18355 ;; Auto vars:     Size  Location     Type
 18356 ;;  quotient        2    8[BANK0 ] int 
 18357 ;;  sign            1    7[BANK0 ] unsigned char 
 18358 ;;  counter         1    6[BANK0 ] unsigned char 
 18359 ;; Return value:  Size  Location     Type
 18360 ;;                  2    1[BANK0 ] int 
 18361 ;; Registers used:
 18362 ;;		wreg, status,2, status,0
 18363 ;; Tracked objects:
 18364 ;;		On entry : 0/0
 18365 ;;		On exit  : 0/0
 18366 ;;		Unchanged: 0/0
 18367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18368 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18369 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18371 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18372 ;;Total ram usage:        9 bytes
 18373 ;; Hardware stack levels used:    1
 18374 ;; Hardware stack levels required when called:    5
 18375 ;; This function calls:
 18376 ;;		Nothing
 18377 ;; This function is called by:
 18378 ;;		_setBuz
 18379 ;; This function uses a non-reentrant model
 18380 ;;
 18381                           
 18382                           
 18383                           ;psect for function ___awdiv
 18384  14A2                     ___awdiv:	
 18385                           
 18386                           ;incstack = 0
 18387                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18388  14A2  0020               	movlb	0	; select bank0
 18389  14A3  01A7               	clrf	___awdiv@sign
 18390  14A4  1FA2               	btfss	___awdiv@divisor+1,7
 18391  14A5  2CAD               	goto	l8265
 18392  14A6  09A1               	comf	___awdiv@divisor,f
 18393  14A7  09A2               	comf	___awdiv@divisor+1,f
 18394  14A8  0AA1               	incf	___awdiv@divisor,f
 18395  14A9  1903               	skipnz
 18396  14AA  0AA2               	incf	___awdiv@divisor+1,f
 18397  14AB  01A7               	clrf	___awdiv@sign
 18398  14AC  0AA7               	incf	___awdiv@sign,f
 18399  14AD                     l8265:	
 18400  14AD  1FA4               	btfss	___awdiv@dividend+1,7
 18401  14AE  2CB8               	goto	l8271
 18402  14AF  09A3               	comf	___awdiv@dividend,f
 18403  14B0  09A4               	comf	___awdiv@dividend+1,f
 18404  14B1  0AA3               	incf	___awdiv@dividend,f
 18405  14B2  1903               	skipnz
 18406  14B3  0AA4               	incf	___awdiv@dividend+1,f
 18407  14B4  3001               	movlw	1
 18408  14B5  00A5               	movwf	??___awdiv
 18409  14B6  0825               	movf	??___awdiv,w
 18410  14B7  06A7               	xorwf	___awdiv@sign,f
 18411  14B8                     l8271:	
 18412  14B8  01A8               	clrf	___awdiv@quotient
 18413  14B9  01A9               	clrf	___awdiv@quotient+1
 18414  14BA  0822               	movf	___awdiv@divisor+1,w
 18415  14BB  0421               	iorwf	___awdiv@divisor,w
 18416  14BC  1903               	skipnz
 18417  14BD  2CE7               	goto	l8293
 18418  14BE  01A6               	clrf	___awdiv@counter
 18419  14BF  0AA6               	incf	___awdiv@counter,f
 18420  14C0                     l8281:	
 18421  14C0  1BA2               	btfsc	___awdiv@divisor+1,7
 18422  14C1  2CCC               	goto	l8283
 18423  14C2  3001               	movlw	1
 18424  14C3                     u8595:	
 18425  14C3  35A1               	lslf	___awdiv@divisor,f
 18426  14C4  0DA2               	rlf	___awdiv@divisor+1,f
 18427  14C5  0B89               	decfsz	9,f
 18428  14C6  2CC3               	goto	u8595
 18429  14C7  3001               	movlw	1
 18430  14C8  00A5               	movwf	??___awdiv
 18431  14C9  0825               	movf	??___awdiv,w
 18432  14CA  07A6               	addwf	___awdiv@counter,f
 18433  14CB  2CC0               	goto	l8281
 18434  14CC                     l8283:	
 18435  14CC  3001               	movlw	1
 18436  14CD                     u8615:	
 18437  14CD  35A8               	lslf	___awdiv@quotient,f
 18438  14CE  0DA9               	rlf	___awdiv@quotient+1,f
 18439  14CF  0B89               	decfsz	9,f
 18440  14D0  2CCD               	goto	u8615
 18441  14D1  0822               	movf	___awdiv@divisor+1,w
 18442  14D2  0224               	subwf	___awdiv@dividend+1,w
 18443  14D3  1D03               	skipz
 18444  14D4  2CD7               	goto	u8625
 18445  14D5  0821               	movf	___awdiv@divisor,w
 18446  14D6  0223               	subwf	___awdiv@dividend,w
 18447  14D7                     u8625:	
 18448  14D7  1C03               	skipc
 18449  14D8  2CDE               	goto	l8289
 18450  14D9  0821               	movf	___awdiv@divisor,w
 18451  14DA  02A3               	subwf	___awdiv@dividend,f
 18452  14DB  0822               	movf	___awdiv@divisor+1,w
 18453  14DC  3BA4               	subwfb	___awdiv@dividend+1,f
 18454  14DD  1428               	bsf	___awdiv@quotient,0
 18455  14DE                     l8289:	
 18456  14DE  3001               	movlw	1
 18457  14DF                     u8635:	
 18458  14DF  36A2               	lsrf	___awdiv@divisor+1,f
 18459  14E0  0CA1               	rrf	___awdiv@divisor,f
 18460  14E1  0B89               	decfsz	9,f
 18461  14E2  2CDF               	goto	u8635
 18462  14E3  3001               	movlw	1
 18463  14E4  02A6               	subwf	___awdiv@counter,f
 18464  14E5  1D03               	btfss	3,2
 18465  14E6  2CCC               	goto	l8283
 18466  14E7                     l8293:	
 18467  14E7  0827               	movf	___awdiv@sign,w
 18468  14E8  1903               	btfsc	3,2
 18469  14E9  2CEF               	goto	l8297
 18470  14EA  09A8               	comf	___awdiv@quotient,f
 18471  14EB  09A9               	comf	___awdiv@quotient+1,f
 18472  14EC  0AA8               	incf	___awdiv@quotient,f
 18473  14ED  1903               	skipnz
 18474  14EE  0AA9               	incf	___awdiv@quotient+1,f
 18475  14EF                     l8297:	
 18476  14EF  0829               	movf	___awdiv@quotient+1,w
 18477  14F0  01A2               	clrf	?___awdiv+1
 18478  14F1  07A2               	addwf	?___awdiv+1,f
 18479  14F2  0828               	movf	___awdiv@quotient,w
 18480  14F3  01A1               	clrf	?___awdiv
 18481  14F4  07A1               	addwf	?___awdiv,f
 18482  14F5  0008               	return
 18483  14F6                     __end_of___awdiv:	
 18484                           
 18485                           	psect	text130
 18486  12A1                     __ptext130:	
 18487 ;; *************** function _setDimmerLights_SwOff *****************
 18488 ;; Defined at:
 18489 ;;		line 694 in file "../src/Dimmer_B1.c"
 18490 ;; Parameters:    Size  Location     Type
 18491 ;;  sw              1    wreg     unsigned char 
 18492 ;; Auto vars:     Size  Location     Type
 18493 ;;  sw              1    3[BANK0 ] unsigned char 
 18494 ;; Return value:  Size  Location     Type
 18495 ;;		None               void
 18496 ;; Registers used:
 18497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18498 ;; Tracked objects:
 18499 ;;		On entry : 0/0
 18500 ;;		On exit  : 0/0
 18501 ;;		Unchanged: 0/0
 18502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;Total ram usage:        1 bytes
 18508 ;; Hardware stack levels used:    1
 18509 ;; Hardware stack levels required when called:    6
 18510 ;; This function calls:
 18511 ;;		_DimmerLights_SelectPointer
 18512 ;; This function is called by:
 18513 ;;		_DlyOff_Main
 18514 ;;		_Exception_Main
 18515 ;;		_setControl_Lights_Table
 18516 ;;		_setRFSW_Control
 18517 ;;		_setRFSW_AdjControl
 18518 ;;		_setSw_Main
 18519 ;; This function uses a non-reentrant model
 18520 ;;
 18521                           
 18522                           
 18523                           ;psect for function _setDimmerLights_SwOff
 18524  12A1                     _setDimmerLights_SwOff:	
 18525                           
 18526                           ;incstack = 0
 18527                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18528                           ;setDimmerLights_SwOff@sw stored from wreg
 18529  12A1  0020               	movlb	0	; select bank0
 18530  12A2  00A3               	movwf	setDimmerLights_SwOff@sw
 18531                           
 18532                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18533  12A3  0823               	movf	setDimmerLights_SwOff@sw,w
 18534  12A4  319C  242F  3192   	fcall	_DimmerLights_SelectPointer
 18535                           
 18536                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18537  12A7  0021               	movlb	1	; select bank1
 18538  12A8  084F               	movf	_DimmerLights^(0+128),w
 18539  12A9  0086               	movwf	6
 18540  12AA  3001               	movlw	1	; select bank2/3
 18541  12AB  0087               	movwf	7
 18542  12AC  1C01               	btfss	1,0
 18543  12AD  0008               	return
 18544                           
 18545                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18546  12AE  084F               	movf	_DimmerLights^(0+128),w
 18547  12AF  0086               	movwf	6
 18548  12B0  3001               	movlw	1	; select bank2/3
 18549  12B1  0087               	movwf	7
 18550  12B2  1001               	bcf	1,0
 18551                           
 18552                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18553  12B3  0A4F               	incf	_DimmerLights^(0+128),w
 18554  12B4  0086               	movwf	6
 18555  12B5  3001               	movlw	1	; select bank2/3
 18556  12B6  0087               	movwf	7
 18557  12B7  1C01               	btfss	1,0
 18558  12B8  2ACF               	goto	l6057
 18559                           
 18560                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18561  12B9  084F               	movf	_DimmerLights^(0+128),w
 18562  12BA  0086               	movwf	6
 18563  12BB  3001               	movlw	1	; select bank2/3
 18564  12BC  0087               	movwf	7
 18565  12BD  1D81               	btfss	1,3
 18566  12BE  0008               	return
 18567                           
 18568                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18569  12BF  084F               	movf	_DimmerLights^(0+128),w
 18570  12C0  0086               	movwf	6
 18571  12C1  3001               	movlw	1	; select bank2/3
 18572  12C2  0087               	movwf	7
 18573  12C3  1181               	bcf	1,3
 18574                           
 18575                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18576  12C4  084F               	movf	_DimmerLights^(0+128),w
 18577  12C5  0086               	movwf	6
 18578  12C6  3001               	movlw	1	; select bank2/3
 18579  12C7  0087               	movwf	7
 18580  12C8  1601               	bsf	1,4
 18581                           
 18582                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18583  12C9  084F               	movf	_DimmerLights^(0+128),w
 18584  12CA  0086               	movwf	6
 18585  12CB  3001               	movlw	1	; select bank2/3
 18586  12CC  0087               	movwf	7
 18587  12CD  1281               	bcf	1,5
 18588                           
 18589                           ;Dimmer_B1.c: 705: }
 18590                           ;Dimmer_B1.c: 706: } else {
 18591  12CE  0008               	return
 18592  12CF                     l6057:	
 18593                           
 18594                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18595  12CF  084F               	movf	_DimmerLights^(0+128),w
 18596  12D0  0086               	movwf	6
 18597  12D1  3001               	movlw	1	; select bank2/3
 18598  12D2  0087               	movwf	7
 18599  12D3  1481               	bsf	1,1
 18600                           
 18601                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18602  12D4  084F               	movf	_DimmerLights^(0+128),w
 18603  12D5  0086               	movwf	6
 18604  12D6  3001               	movlw	1	; select bank2/3
 18605  12D7  0087               	movwf	7
 18606  12D8  1101               	bcf	1,2
 18607  12D9  0008               	return
 18608  12DA                     __end_of_setDimmerLights_SwOff:	
 18609                           
 18610                           	psect	text131
 18611  1CE2                     __ptext131:	
 18612 ;; *************** function _getDimmerLights_Status *****************
 18613 ;; Defined at:
 18614 ;;		line 1024 in file "../src/Dimmer_B1.c"
 18615 ;; Parameters:    Size  Location     Type
 18616 ;;  lights          1    wreg     unsigned char 
 18617 ;; Auto vars:     Size  Location     Type
 18618 ;;  lights          1    3[BANK0 ] unsigned char 
 18619 ;;  status          1    4[BANK0 ] unsigned char 
 18620 ;; Return value:  Size  Location     Type
 18621 ;;                  1    wreg      unsigned char 
 18622 ;; Registers used:
 18623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18624 ;; Tracked objects:
 18625 ;;		On entry : 0/0
 18626 ;;		On exit  : 0/0
 18627 ;;		Unchanged: 0/0
 18628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18630 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;Total ram usage:        2 bytes
 18634 ;; Hardware stack levels used:    1
 18635 ;; Hardware stack levels required when called:    6
 18636 ;; This function calls:
 18637 ;;		_DimmerLights_SelectPointer
 18638 ;; This function is called by:
 18639 ;;		_DlyOff_Main
 18640 ;;		_Exception_Main
 18641 ;;		_setControl_Lights_Table
 18642 ;;		_setRFSW_Control
 18643 ;;		_setRFSW_AdjControl
 18644 ;; This function uses a non-reentrant model
 18645 ;;
 18646                           
 18647                           
 18648                           ;psect for function _getDimmerLights_Status
 18649  1CE2                     _getDimmerLights_Status:	
 18650                           
 18651                           ;incstack = 0
 18652                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18653                           ;getDimmerLights_Status@lights stored from wreg
 18654  1CE2  0020               	movlb	0	; select bank0
 18655  1CE3  00A3               	movwf	getDimmerLights_Status@lights
 18656                           
 18657                           ;Dimmer_B1.c: 1025: DimmerLights_SelectPointer(lights);
 18658  1CE4  0823               	movf	getDimmerLights_Status@lights,w
 18659  1CE5  319C  242F         	fcall	_DimmerLights_SelectPointer
 18660                           
 18661                           ;Dimmer_B1.c: 1026: char status = DimmerLights->Status == 1 ? 1 : 0;
 18662  1CE7  0021               	movlb	1	; select bank1
 18663  1CE8  0A4F               	incf	_DimmerLights^(0+128),w
 18664  1CE9  0086               	movwf	6
 18665  1CEA  3001               	movlw	1	; select bank2/3
 18666  1CEB  0087               	movwf	7
 18667  1CEC  3000               	movlw	0
 18668  1CED  1801               	btfsc	1,0
 18669  1CEE  3001               	movlw	1
 18670  1CEF  0020               	movlb	0	; select bank0
 18671  1CF0  00A4               	movwf	getDimmerLights_Status@status
 18672                           
 18673                           ;Dimmer_B1.c: 1027: return status;
 18674  1CF1  0824               	movf	getDimmerLights_Status@status,w
 18675  1CF2  0008               	return
 18676  1CF3                     __end_of_getDimmerLights_Status:	
 18677                           
 18678                           	psect	text132
 18679  1C2F                     __ptext132:	
 18680 ;; *************** function _DimmerLights_SelectPointer *****************
 18681 ;; Defined at:
 18682 ;;		line 576 in file "../src/Dimmer_B1.c"
 18683 ;; Parameters:    Size  Location     Type
 18684 ;;  lights          1    wreg     unsigned char 
 18685 ;; Auto vars:     Size  Location     Type
 18686 ;;  lights          1    2[BANK0 ] unsigned char 
 18687 ;; Return value:  Size  Location     Type
 18688 ;;		None               void
 18689 ;; Registers used:
 18690 ;;		wreg
 18691 ;; Tracked objects:
 18692 ;;		On entry : 0/0
 18693 ;;		On exit  : 0/0
 18694 ;;		Unchanged: 0/0
 18695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18700 ;;Total ram usage:        2 bytes
 18701 ;; Hardware stack levels used:    1
 18702 ;; Hardware stack levels required when called:    5
 18703 ;; This function calls:
 18704 ;;		Nothing
 18705 ;; This function is called by:
 18706 ;;		_setDimmerLights_SwOn
 18707 ;;		_setDimmerLights_SwOff
 18708 ;;		_setDimmerLights_DimmingOn
 18709 ;;		_setDimmerLights_Main
 18710 ;;		_getDimmerLights_Status
 18711 ;;		_setDimmerLights_DimmingRun
 18712 ;;		_setDimmerLights_Status
 18713 ;; This function uses a non-reentrant model
 18714 ;;
 18715                           
 18716                           
 18717                           ;psect for function _DimmerLights_SelectPointer
 18718  1C2F                     _DimmerLights_SelectPointer:	
 18719                           
 18720                           ;incstack = 0
 18721                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18722                           ;DimmerLights_SelectPointer@lights stored from wreg
 18723  1C2F  0020               	movlb	0	; select bank0
 18724  1C30  00A2               	movwf	DimmerLights_SelectPointer@lights
 18725                           
 18726                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18727  1C31  0822               	movf	DimmerLights_SelectPointer@lights,w
 18728  1C32  3A01               	xorlw	1
 18729  1C33  1D03               	skipz
 18730  1C34  0008               	return
 18731                           
 18732                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18733  1C35  305C               	movlw	_DimmerLights1& (0+255)
 18734  1C36  00A1               	movwf	??_DimmerLights_SelectPointer
 18735  1C37  0821               	movf	??_DimmerLights_SelectPointer,w
 18736  1C38  0021               	movlb	1	; select bank1
 18737  1C39  00CF               	movwf	_DimmerLights^(0+128)
 18738  1C3A  0008               	return
 18739  1C3B                     __end_of_DimmerLights_SelectPointer:	
 18740                           
 18741                           	psect	text133
 18742  1B5B                     __ptext133:	
 18743 ;; *************** function _DelayOff_Initialization *****************
 18744 ;; Defined at:
 18745 ;;		line 26 in file "../src/DelayOff_B1.c"
 18746 ;; Parameters:    Size  Location     Type
 18747 ;;		None
 18748 ;; Auto vars:     Size  Location     Type
 18749 ;;		None
 18750 ;; Return value:  Size  Location     Type
 18751 ;;		None               void
 18752 ;; Registers used:
 18753 ;;		wreg, status,2, status,0, pclath, cstack
 18754 ;; Tracked objects:
 18755 ;;		On entry : 0/0
 18756 ;;		On exit  : 0/0
 18757 ;;		Unchanged: 0/0
 18758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18763 ;;Total ram usage:        0 bytes
 18764 ;; Hardware stack levels used:    1
 18765 ;; Hardware stack levels required when called:    7
 18766 ;; This function calls:
 18767 ;;		_DlyOff_Initialization
 18768 ;; This function is called by:
 18769 ;;		_main
 18770 ;; This function uses a non-reentrant model
 18771 ;;
 18772                           
 18773                           
 18774                           ;psect for function _DelayOff_Initialization
 18775  1B5B                     _DelayOff_Initialization:	
 18776                           
 18777                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18778                           
 18779                           ;incstack = 0
 18780                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18781  1B5B  3001               	movlw	1
 18782  1B5C  319B  2388         	fcall	_DlyOff_Initialization
 18783  1B5E  0008               	return
 18784  1B5F                     __end_of_DelayOff_Initialization:	
 18785                           
 18786                           	psect	text134
 18787  1B88                     __ptext134:	
 18788 ;; *************** function _DlyOff_Initialization *****************
 18789 ;; Defined at:
 18790 ;;		line 56 in file "../src/DelayOff_B1.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;  sw              1    wreg     unsigned char 
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;  sw              1    3[BANK0 ] unsigned char 
 18795 ;; Return value:  Size  Location     Type
 18796 ;;		None               void
 18797 ;; Registers used:
 18798 ;;		wreg, status,2, status,0, pclath, cstack
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 0/0
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;Total ram usage:        1 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    6
 18811 ;; This function calls:
 18812 ;;		_DelayOffPointSelect
 18813 ;; This function is called by:
 18814 ;;		_DelayOff_Initialization
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           
 18819                           ;psect for function _DlyOff_Initialization
 18820  1B88                     _DlyOff_Initialization:	
 18821                           
 18822                           ;incstack = 0
 18823                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18824                           ;DlyOff_Initialization@sw stored from wreg
 18825  1B88  0020               	movlb	0	; select bank0
 18826  1B89  00A3               	movwf	DlyOff_Initialization@sw
 18827                           
 18828                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18829  1B8A  0823               	movf	DlyOff_Initialization@sw,w
 18830  1B8B  319C  2423         	fcall	_DelayOffPointSelect
 18831  1B8D  0008               	return
 18832  1B8E                     __end_of_DlyOff_Initialization:	
 18833                           
 18834                           	psect	text135
 18835  1C23                     __ptext135:	
 18836 ;; *************** function _DelayOffPointSelect *****************
 18837 ;; Defined at:
 18838 ;;		line 7 in file "../src/DelayOff_B1.c"
 18839 ;; Parameters:    Size  Location     Type
 18840 ;;  sw              1    wreg     unsigned char 
 18841 ;; Auto vars:     Size  Location     Type
 18842 ;;  sw              1    2[BANK0 ] unsigned char 
 18843 ;; Return value:  Size  Location     Type
 18844 ;;		None               void
 18845 ;; Registers used:
 18846 ;;		wreg
 18847 ;; Tracked objects:
 18848 ;;		On entry : 0/0
 18849 ;;		On exit  : 0/0
 18850 ;;		Unchanged: 0/0
 18851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;Total ram usage:        2 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:    5
 18859 ;; This function calls:
 18860 ;;		Nothing
 18861 ;; This function is called by:
 18862 ;;		_DlyOff_Initialization
 18863 ;;		_DlyOff_Main
 18864 ;;		_setDelayOff_GO
 18865 ;;		_getDelayOff_GO
 18866 ;; This function uses a non-reentrant model
 18867 ;;
 18868                           
 18869                           
 18870                           ;psect for function _DelayOffPointSelect
 18871  1C23                     _DelayOffPointSelect:	
 18872                           
 18873                           ;incstack = 0
 18874                           ; Regs used in _DelayOffPointSelect: [wreg]
 18875                           ;DelayOffPointSelect@sw stored from wreg
 18876  1C23  0020               	movlb	0	; select bank0
 18877  1C24  00A2               	movwf	DelayOffPointSelect@sw
 18878                           
 18879                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18880  1C25  0822               	movf	DelayOffPointSelect@sw,w
 18881  1C26  3A01               	xorlw	1
 18882  1C27  1D03               	skipz
 18883  1C28  0008               	return
 18884                           
 18885                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18886  1C29  3064               	movlw	_DlySw1& (0+255)
 18887  1C2A  00A1               	movwf	??_DelayOffPointSelect
 18888  1C2B  0821               	movf	??_DelayOffPointSelect,w
 18889  1C2C  0021               	movlb	1	; select bank1
 18890  1C2D  00CD               	movwf	_DelayOff^(0+128)
 18891  1C2E  0008               	return
 18892  1C2F                     __end_of_DelayOffPointSelect:	
 18893                           
 18894                           	psect	text136
 18895  1458                     __ptext136:	
 18896 ;; *************** function _Buzzer_Main *****************
 18897 ;; Defined at:
 18898 ;;		line 46 in file "../src/Buzzer_B1.c"
 18899 ;; Parameters:    Size  Location     Type
 18900 ;;		None
 18901 ;; Auto vars:     Size  Location     Type
 18902 ;;		None
 18903 ;; Return value:  Size  Location     Type
 18904 ;;		None               void
 18905 ;; Registers used:
 18906 ;;		wreg, status,2, status,0
 18907 ;; Tracked objects:
 18908 ;;		On entry : 0/0
 18909 ;;		On exit  : 0/0
 18910 ;;		Unchanged: 0/0
 18911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;Total ram usage:        1 bytes
 18917 ;; Hardware stack levels used:    1
 18918 ;; Hardware stack levels required when called:    5
 18919 ;; This function calls:
 18920 ;;		Nothing
 18921 ;; This function is called by:
 18922 ;;		_main
 18923 ;; This function uses a non-reentrant model
 18924 ;;
 18925                           
 18926                           
 18927                           ;psect for function _Buzzer_Main
 18928  1458                     _Buzzer_Main:	
 18929                           
 18930                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18931                           
 18932                           ;incstack = 0
 18933                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18934  1458  0021               	movlb	1	; select bank1
 18935  1459  1CAE               	btfss	_Buz1^(0+128),1
 18936  145A  0008               	return
 18937                           
 18938                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18939  145B  3001               	movlw	1
 18940  145C  07AF               	addwf	(_Buz1^(0+128)+1),f
 18941  145D  3000               	movlw	0
 18942  145E  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18943                           
 18944                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18945  145F  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18946  1460  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18947  1461  1D03               	skipz
 18948  1462  2C65               	goto	u7475
 18949  1463  0834               	movf	(_Buz1^(0+128)+6),w
 18950  1464  022F               	subwf	(_Buz1^(0+128)+1),w
 18951  1465                     u7475:	
 18952  1465  1C03               	skipc
 18953  1466  0008               	return
 18954                           
 18955                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18956  1467  01AF               	clrf	(_Buz1^(0+128)+1)
 18957  1468  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18958                           
 18959                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18960  1469  12AE               	bcf	_Buz1^(0+128),5
 18961  146A  0020               	movlb	0	; select bank0
 18962  146B  1D8D               	btfss	13,3	;volatile
 18963  146C  2C6F               	goto	l7595
 18964  146D  0021               	movlb	1	; select bank1
 18965  146E  16AE               	bsf	_Buz1^(0+128),5
 18966  146F                     l7595:	
 18967                           
 18968                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18969  146F  0021               	movlb	1	; select bank1
 18970  1470  1AAE               	btfsc	_Buz1^(0+128),5
 18971  1471  2C9B               	goto	l96
 18972                           
 18973                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18974  1472  08B1               	movf	(_Buz1^(0+128)+3),f
 18975  1473  1D03               	skipz
 18976  1474  2C97               	goto	l97
 18977                           
 18978                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18979  1475  1DAE               	btfss	_Buz1^(0+128),3
 18980  1476  2C85               	goto	l98
 18981                           
 18982                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18983  1477  11AE               	bcf	_Buz1^(0+128),3
 18984                           
 18985                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18986  1478  0832               	movf	(_Buz1^(0+128)+4),w
 18987  1479  0020               	movlb	0	; select bank0
 18988  147A  00A1               	movwf	??_Buzzer_Main
 18989  147B  0821               	movf	??_Buzzer_Main,w
 18990  147C  0021               	movlb	1	; select bank1
 18991  147D  00B1               	movwf	(_Buz1^(0+128)+3)
 18992                           
 18993                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18994  147E  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18995  147F  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18996  1480  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18997  1481  0836               	movf	(_Buz1^(0+128)+8),w
 18998  1482  01B4               	clrf	(_Buz1^(0+128)+6)
 18999  1483  07B4               	addwf	(_Buz1^(0+128)+6),f
 19000                           
 19001                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19002  1484  0008               	return
 19003  1485                     l98:	
 19004  1485  1E2E               	btfss	_Buz1^(0+128),4
 19005  1486  2C95               	goto	l100
 19006                           
 19007                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19008  1487  122E               	bcf	_Buz1^(0+128),4
 19009                           
 19010                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19011  1488  0833               	movf	(_Buz1^(0+128)+5),w
 19012  1489  0020               	movlb	0	; select bank0
 19013  148A  00A1               	movwf	??_Buzzer_Main
 19014  148B  0821               	movf	??_Buzzer_Main,w
 19015  148C  0021               	movlb	1	; select bank1
 19016  148D  00B1               	movwf	(_Buz1^(0+128)+3)
 19017                           
 19018                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19019  148E  0839               	movf	((_Buz1+1)^(0+128)+10),w
 19020  148F  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19021  1490  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19022  1491  0838               	movf	(_Buz1^(0+128)+10),w
 19023  1492  01B4               	clrf	(_Buz1^(0+128)+6)
 19024  1493  07B4               	addwf	(_Buz1^(0+128)+6),f
 19025                           
 19026                           ;Buzzer_B1.c: 62: } else {
 19027  1494  0008               	return
 19028  1495                     l100:	
 19029                           
 19030                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19031  1495  10AE               	bcf	_Buz1^(0+128),1
 19032                           
 19033                           ;Buzzer_B1.c: 64: }
 19034                           ;Buzzer_B1.c: 65: } else {
 19035  1496  0008               	return
 19036  1497                     l97:	
 19037                           
 19038                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19039  1497  16AE               	bsf	_Buz1^(0+128),5
 19040                           
 19041                           ;Buzzer_B1.c: 68: RB3 = 1;
 19042  1498  0020               	movlb	0	; select bank0
 19043  1499  158D               	bsf	13,3	;volatile
 19044                           
 19045                           ;Buzzer_B1.c: 69: }
 19046                           ;Buzzer_B1.c: 70: } else {
 19047  149A  0008               	return
 19048  149B                     l96:	
 19049                           
 19050                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19051  149B  12AE               	bcf	_Buz1^(0+128),5
 19052                           
 19053                           ;Buzzer_B1.c: 73: RB3 = 0;
 19054  149C  0020               	movlb	0	; select bank0
 19055  149D  118D               	bcf	13,3	;volatile
 19056                           
 19057                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19058  149E  3001               	movlw	1
 19059  149F  0021               	movlb	1	; select bank1
 19060  14A0  02B1               	subwf	(_Buz1^(0+128)+3),f
 19061  14A1  0008               	return
 19062  14A2                     __end_of_Buzzer_Main:	
 19063                           
 19064                           	psect	text137
 19065  1B4C                     __ptext137:	
 19066 ;; *************** function _Buzzer_Initialization *****************
 19067 ;; Defined at:
 19068 ;;		line 11 in file "../src/Buzzer_B1.c"
 19069 ;; Parameters:    Size  Location     Type
 19070 ;;		None
 19071 ;; Auto vars:     Size  Location     Type
 19072 ;;		None
 19073 ;; Return value:  Size  Location     Type
 19074 ;;		None               void
 19075 ;; Registers used:
 19076 ;;		None
 19077 ;; Tracked objects:
 19078 ;;		On entry : 0/0
 19079 ;;		On exit  : 0/0
 19080 ;;		Unchanged: 0/0
 19081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;Total ram usage:        0 bytes
 19087 ;; Hardware stack levels used:    1
 19088 ;; Hardware stack levels required when called:    5
 19089 ;; This function calls:
 19090 ;;		Nothing
 19091 ;; This function is called by:
 19092 ;;		_main
 19093 ;; This function uses a non-reentrant model
 19094 ;;
 19095                           
 19096                           
 19097                           ;psect for function _Buzzer_Initialization
 19098  1B4C                     _Buzzer_Initialization:	
 19099                           
 19100                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19101                           
 19102                           ;incstack = 0
 19103                           ; Regs used in _Buzzer_Initialization: []
 19104  1B4C  0021               	movlb	1	; select bank1
 19105  1B4D  142E               	bsf	_Buz1^(0+128),0
 19106  1B4E  0008               	return
 19107  1B4F                     __end_of_Buzzer_Initialization:	
 19108                           
 19109                           	psect	intentry
 19110  0004                     __pintentry:	
 19111 ;; *************** function _ISR *****************
 19112 ;; Defined at:
 19113 ;;		line 116 in file "../src/MCU_B1.c"
 19114 ;; Parameters:    Size  Location     Type
 19115 ;;		None
 19116 ;; Auto vars:     Size  Location     Type
 19117 ;;		None
 19118 ;; Return value:  Size  Location     Type
 19119 ;;		None               void
 19120 ;; Registers used:
 19121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19122 ;; Tracked objects:
 19123 ;;		On entry : 0/0
 19124 ;;		On exit  : 0/0
 19125 ;;		Unchanged: 0/0
 19126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19131 ;;Total ram usage:        1 bytes
 19132 ;; Hardware stack levels used:    1
 19133 ;; Hardware stack levels required when called:    4
 19134 ;; This function calls:
 19135 ;;		_IOC_ISR
 19136 ;;		_TMR1_ISR
 19137 ;; This function is called by:
 19138 ;;		Interrupt level 1
 19139 ;; This function uses a non-reentrant model
 19140 ;;
 19141                           
 19142  0004                     _ISR:	
 19143                           
 19144                           ;incstack = 0
 19145                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19146  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19147  0005  3180               	pagesel	$
 19148  0006  0020               	movlb	0	; select bank0
 19149  0007  087F               	movf	127,w
 19150  0008  00A0               	movwf	??_ISR
 19151                           
 19152                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19153  0009  0021               	movlb	1	; select bank1
 19154  000A  1C11               	btfss	17,0	;volatile
 19155  000B  2813               	goto	i1l1197
 19156  000C  0020               	movlb	0	; select bank0
 19157  000D  1C11               	btfss	17,0	;volatile
 19158  000E  2813               	goto	i1l1197
 19159                           
 19160                           ;MCU_B1.c: 126: TMR1_ISR();
 19161  000F  319F  27C4  3180   	fcall	_TMR1_ISR
 19162                           
 19163                           ;MCU_B1.c: 127: }
 19164  0012  281B               	goto	i1l1200
 19165  0013                     i1l1197:	
 19166                           
 19167                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19168  0013  198B               	btfsc	11,3	;volatile
 19169  0014  1C0B               	btfss	11,0	;volatile
 19170  0015  281B               	goto	i1l1200
 19171  0016  0027               	movlb	7	; select bank7
 19172  0017  1D16               	btfss	22,2	;volatile
 19173  0018  281B               	goto	i1l1200
 19174                           
 19175                           ;MCU_B1.c: 139: IOC_ISR();
 19176  0019  319B  23C7         	fcall	_IOC_ISR
 19177  001B                     i1l1200:	
 19178                           ;MCU_B1.c: 140: }
 19179                           ;MCU_B1.c: 148: return;
 19180                           
 19181  001B  0020               	movlb	0	; select bank0
 19182  001C  0820               	movf	??_ISR,w
 19183  001D  00FF               	movwf	127
 19184  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19185  001F  0009               	retfie
 19186  0020                     __end_of_ISR:	
 19187                           
 19188                           	psect	text139
 19189  1FC4                     __ptext139:	
 19190 ;; *************** function _TMR1_ISR *****************
 19191 ;; Defined at:
 19192 ;;		line 236 in file "../src/MCU_B1.c"
 19193 ;; Parameters:    Size  Location     Type
 19194 ;;		None
 19195 ;; Auto vars:     Size  Location     Type
 19196 ;;		None
 19197 ;; Return value:  Size  Location     Type
 19198 ;;		None               void
 19199 ;; Registers used:
 19200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19201 ;; Tracked objects:
 19202 ;;		On entry : 0/0
 19203 ;;		On exit  : 0/0
 19204 ;;		Unchanged: 0/0
 19205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19210 ;;Total ram usage:        0 bytes
 19211 ;; Hardware stack levels used:    1
 19212 ;; Hardware stack levels required when called:    1
 19213 ;; This function calls:
 19214 ;;		_DimmerLights_TMR_1
 19215 ;; This function is called by:
 19216 ;;		_ISR
 19217 ;; This function uses a non-reentrant model
 19218 ;;
 19219                           
 19220                           
 19221                           ;psect for function _TMR1_ISR
 19222  1FC4                     _TMR1_ISR:	
 19223                           
 19224                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19225                           
 19226                           ;incstack = 0
 19227                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19228  1FC4  30FA               	movlw	250
 19229  1FC5  0020               	movlb	0	; select bank0
 19230  1FC6  0097               	movwf	23	;volatile
 19231                           
 19232                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19233  1FC7  3038               	movlw	56
 19234  1FC8  0096               	movwf	22	;volatile
 19235                           
 19236                           ;MCU_B1.c: 240: TMR1IF = 0;
 19237  1FC9  1011               	bcf	17,0	;volatile
 19238                           
 19239                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19240  1FCA  3188  2023  319F   	fcall	_DimmerLights_TMR_1
 19241                           
 19242                           ;MCU_B1.c: 271: Timer1.Count++;
 19243  1FCD  3001               	movlw	1
 19244  1FCE  0021               	movlb	1	; select bank1
 19245  1FCF  07C7               	addwf	(_Timer1^(0+128)+1),f
 19246  1FD0  3000               	movlw	0
 19247  1FD1  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 19248                           
 19249                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19250  1FD2  3001               	movlw	1
 19251  1FD3  3EC6               	addlw	_Timer1& (0+255)
 19252  1FD4  0086               	movwf	6
 19253  1FD5  0187               	clrf	7
 19254  1FD6  3F40               	moviw [0]fsr1
 19255  1FD7  3AC8               	xorlw	200
 19256  1FD8  1D03               	skipz
 19257  1FD9  2FDC               	goto	u757_25
 19258  1FDA  3F41               	moviw [1]fsr1
 19259  1FDB  3A00               	xorlw	0
 19260  1FDC                     u757_25:	
 19261  1FDC  1D03               	skipz
 19262  1FDD  0008               	return
 19263                           
 19264                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19265  1FDE  01C7               	clrf	(_Timer1^(0+128)+1)
 19266  1FDF  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 19267                           
 19268                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19269  1FE0  1446               	bsf	_Timer1^(0+128),0
 19270  1FE1  0008               	return
 19271  1FE2                     __end_of_TMR1_ISR:	
 19272                           
 19273                           	psect	text140
 19274  0823                     __ptext140:	
 19275 ;; *************** function _DimmerLights_TMR_1 *****************
 19276 ;; Defined at:
 19277 ;;		line 1331 in file "../src/Dimmer_B1.c"
 19278 ;; Parameters:    Size  Location     Type
 19279 ;;		None
 19280 ;; Auto vars:     Size  Location     Type
 19281 ;;  count           1    1[COMMON] unsigned char 
 19282 ;; Return value:  Size  Location     Type
 19283 ;;		None               void
 19284 ;; Registers used:
 19285 ;;		wreg, status,2, status,0
 19286 ;; Tracked objects:
 19287 ;;		On entry : 0/0
 19288 ;;		On exit  : 0/0
 19289 ;;		Unchanged: 0/0
 19290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19294 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19295 ;;Total ram usage:        2 bytes
 19296 ;; Hardware stack levels used:    1
 19297 ;; This function calls:
 19298 ;;		Nothing
 19299 ;; This function is called by:
 19300 ;;		_TMR1_ISR
 19301 ;; This function uses a non-reentrant model
 19302 ;;
 19303                           
 19304                           
 19305                           ;psect for function _DimmerLights_TMR_1
 19306  0823                     _DimmerLights_TMR_1:	
 19307                           
 19308                           ;Dimmer_B1.c: 1332: char count = 78;
 19309                           
 19310                           ;incstack = 0
 19311                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19312  0823  304E               	movlw	78
 19313  0824  00F0               	movwf	??_DimmerLights_TMR_1
 19314  0825  0870               	movf	??_DimmerLights_TMR_1,w
 19315  0826  00F1               	movwf	DimmerLights_TMR_1@count
 19316                           
 19317                           ;Dimmer_B1.c: 1345: if (DimmerIntr1.Start == 1) {
 19318  0827  0021               	movlb	1	; select bank1
 19319  0828  1D3A               	btfss	_DimmerIntr1^(0+128),2
 19320  0829  2834               	goto	i1l7095
 19321                           
 19322                           ;Dimmer_B1.c: 1346: DimmerIntr1.Count++;
 19323  082A  3001               	movlw	1
 19324  082B  00F0               	movwf	??_DimmerLights_TMR_1
 19325  082C  0870               	movf	??_DimmerLights_TMR_1,w
 19326  082D  07BC               	addwf	(_DimmerIntr1^(0+128)+2),f
 19327                           
 19328                           ;Dimmer_B1.c: 1347: if (DimmerIntr1.Count >= count) {
 19329  082E  0871               	movf	DimmerLights_TMR_1@count,w
 19330  082F  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19331  0830  1C03               	skipc
 19332  0831  2834               	goto	i1l7095
 19333                           
 19334                           ;Dimmer_B1.c: 1348: DimmerIntr1.Count = 0;
 19335  0832  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19336                           
 19337                           ;Dimmer_B1.c: 1349: DimmerIntr1.Start = 0;
 19338  0833  113A               	bcf	_DimmerIntr1^(0+128),2
 19339  0834                     i1l7095:	
 19340                           
 19341                           ;Dimmer_B1.c: 1351: }
 19342                           ;Dimmer_B1.c: 1352: }
 19343                           ;Dimmer_B1.c: 1356: if (DimmerIntr1.Count == 7) {
 19344  0834  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19345  0835  3A07               	xorlw	7
 19346  0836  1903               	btfsc	3,2
 19347                           
 19348                           ;Dimmer_B1.c: 1359: if (DimmerIntr1.ControlStatus == 1) {
 19349  0837  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19350  0838  283B               	goto	i1l7101
 19351                           
 19352                           ;Dimmer_B1.c: 1360: RB1 = 1;
 19353  0839  0020               	movlb	0	; select bank0
 19354  083A  148D               	bsf	13,1	;volatile
 19355  083B                     i1l7101:	
 19356                           
 19357                           ;Dimmer_B1.c: 1362: }
 19358                           ;Dimmer_B1.c: 1363: }
 19359                           ;Dimmer_B1.c: 1367: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19360  083B  0021               	movlb	1	; select bank1
 19361  083C  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19362  083D  0643               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19363  083E  1903               	btfsc	3,2
 19364                           
 19365                           ;Dimmer_B1.c: 1370: if (DimmerIntr1.ControlStatus == 1) {
 19366  083F  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19367  0840  2843               	goto	i1l7107
 19368                           
 19369                           ;Dimmer_B1.c: 1371: RB1 = 0;
 19370  0841  0020               	movlb	0	; select bank0
 19371  0842  108D               	bcf	13,1	;volatile
 19372  0843                     i1l7107:	
 19373                           
 19374                           ;Dimmer_B1.c: 1373: }
 19375                           ;Dimmer_B1.c: 1374: }
 19376                           ;Dimmer_B1.c: 1378: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19377  0843  0021               	movlb	1	; select bank1
 19378  0844  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19379  0845  0644               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19380  0846  1903               	btfsc	3,2
 19381                           
 19382                           ;Dimmer_B1.c: 1381: if (DimmerIntr1.ControlStatus == 1) {
 19383  0847  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19384  0848  284B               	goto	i1l7113
 19385                           
 19386                           ;Dimmer_B1.c: 1382: RB1 = 1;
 19387  0849  0020               	movlb	0	; select bank0
 19388  084A  148D               	bsf	13,1	;volatile
 19389  084B                     i1l7113:	
 19390                           
 19391                           ;Dimmer_B1.c: 1384: }
 19392                           ;Dimmer_B1.c: 1385: }
 19393                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19394  084B  0021               	movlb	1	; select bank1
 19395  084C  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19396  084D  0645               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19397  084E  1903               	btfsc	3,2
 19398                           
 19399                           ;Dimmer_B1.c: 1404: if (DimmerIntr1.ControlStatus == 1) {
 19400  084F  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19401  0850  2853               	goto	i1l843
 19402                           
 19403                           ;Dimmer_B1.c: 1405: RB1 = 0;
 19404  0851  0020               	movlb	0	; select bank0
 19405  0852  108D               	bcf	13,1	;volatile
 19406  0853                     i1l843:	
 19407                           
 19408                           ;Dimmer_B1.c: 1407: }
 19409                           ;Dimmer_B1.c: 1408: }
 19410                           ;Dimmer_B1.c: 1411: if (DimmerIntr1.Tune == 1) {
 19411  0853  0021               	movlb	1	; select bank1
 19412  0854  1CBA               	btfss	_DimmerIntr1^(0+128),1
 19413  0855  0008               	return
 19414                           
 19415                           ;Dimmer_B1.c: 1412: DimmerIntr1.Tune = 0;
 19416  0856  10BA               	bcf	_DimmerIntr1^(0+128),1
 19417                           
 19418                           ;Dimmer_B1.c: 1413: DimmerIntr1.TuneTime++;
 19419  0857  3001               	movlw	1
 19420  0858  00F0               	movwf	??_DimmerLights_TMR_1
 19421  0859  0870               	movf	??_DimmerLights_TMR_1,w
 19422  085A  07BD               	addwf	(_DimmerIntr1^(0+128)+3),f
 19423                           
 19424                           ;Dimmer_B1.c: 1414: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19425  085B  083E               	movf	(_DimmerIntr1^(0+128)+4),w
 19426  085C  023D               	subwf	(_DimmerIntr1^(0+128)+3),w
 19427  085D  1C03               	skipc
 19428  085E  0008               	return
 19429                           
 19430                           ;Dimmer_B1.c: 1415: DimmerIntr1.TuneTime = 0;
 19431  085F  01BD               	clrf	(_DimmerIntr1^(0+128)+3)
 19432                           
 19433                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Dimming_Sw == 1) {
 19434  0860  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19435  0861  2878               	goto	i1l847
 19436                           
 19437                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.Dimming_Status == 0) {
 19438  0862  1ABA               	btfsc	_DimmerIntr1^(0+128),5
 19439  0863  286F               	goto	i1l7135
 19440                           
 19441                           ;Dimmer_B1.c: 1418: if (DimmerIntr1.DimmingValue < ((char)(60*0.78))) {
 19442  0864  302E               	movlw	46
 19443  0865  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19444  0866  1803               	skipnc
 19445  0867  286D               	goto	i1l849
 19446                           
 19447                           ;Dimmer_B1.c: 1419: DimmerIntr1.DimmingValue++;
 19448  0868  3001               	movlw	1
 19449  0869  00F0               	movwf	??_DimmerLights_TMR_1
 19450  086A  0870               	movf	??_DimmerLights_TMR_1,w
 19451  086B  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19452                           
 19453                           ;Dimmer_B1.c: 1420: } else {
 19454  086C  0008               	return
 19455  086D                     i1l849:	
 19456                           
 19457                           ;Dimmer_B1.c: 1421: DimmerIntr1.Dimming_Status = 1;
 19458  086D  16BA               	bsf	_DimmerIntr1^(0+128),5
 19459                           
 19460                           ;Dimmer_B1.c: 1422: }
 19461                           ;Dimmer_B1.c: 1423: } else {
 19462  086E  0008               	return
 19463  086F                     i1l7135:	
 19464                           
 19465                           ;Dimmer_B1.c: 1424: if (DimmerIntr1.DimmingValue > ((char)(5*0.78))) {
 19466  086F  3004               	movlw	4
 19467  0870  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19468  0871  1C03               	skipc
 19469  0872  2876               	goto	i1l852
 19470                           
 19471                           ;Dimmer_B1.c: 1425: DimmerIntr1.DimmingValue--;
 19472  0873  3001               	movlw	1
 19473  0874  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19474                           
 19475                           ;Dimmer_B1.c: 1426: } else {
 19476  0875  0008               	return
 19477  0876                     i1l852:	
 19478                           
 19479                           ;Dimmer_B1.c: 1427: DimmerIntr1.Dimming_Status = 0;
 19480  0876  12BA               	bcf	_DimmerIntr1^(0+128),5
 19481                           
 19482                           ;Dimmer_B1.c: 1428: }
 19483                           ;Dimmer_B1.c: 1429: }
 19484                           ;Dimmer_B1.c: 1430: } else if (DimmerIntr1.Dimming_RF == 1) {
 19485  0877  0008               	return
 19486  0878                     i1l847:	
 19487  0878  1F3A               	btfss	_DimmerIntr1^(0+128),6
 19488  0879  0008               	return
 19489                           
 19490                           ;Dimmer_B1.c: 1431: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19491  087A  0840               	movf	(_DimmerIntr1^(0+128)+6),w
 19492  087B  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19493  087C  1803               	skipnc
 19494  087D  2883               	goto	i1l7143
 19495                           
 19496                           ;Dimmer_B1.c: 1432: DimmerIntr1.DimmingValue++;
 19497  087E  3001               	movlw	1
 19498  087F  00F0               	movwf	??_DimmerLights_TMR_1
 19499  0880  0870               	movf	??_DimmerLights_TMR_1,w
 19500  0881  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19501                           
 19502                           ;Dimmer_B1.c: 1433: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19503  0882  0008               	return
 19504  0883                     i1l7143:	
 19505  0883  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19506  0884  0240               	subwf	(_DimmerIntr1^(0+128)+6),w
 19507  0885  1803               	skipnc
 19508  0886  288A               	goto	i1l858
 19509                           
 19510                           ;Dimmer_B1.c: 1434: DimmerIntr1.DimmingValue--;
 19511  0887  3001               	movlw	1
 19512  0888  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19513                           
 19514                           ;Dimmer_B1.c: 1435: } else {
 19515  0889  0008               	return
 19516  088A                     i1l858:	
 19517                           
 19518                           ;Dimmer_B1.c: 1436: DimmerIntr1.Dimming_RF = 0;
 19519  088A  133A               	bcf	_DimmerIntr1^(0+128),6
 19520  088B  0008               	return
 19521  088C                     __end_of_DimmerLights_TMR_1:	
 19522                           
 19523                           	psect	text141
 19524  1BC7                     __ptext141:	
 19525 ;; *************** function _IOC_ISR *****************
 19526 ;; Defined at:
 19527 ;;		line 394 in file "../src/MCU_B1.c"
 19528 ;; Parameters:    Size  Location     Type
 19529 ;;		None
 19530 ;; Auto vars:     Size  Location     Type
 19531 ;;		None
 19532 ;; Return value:  Size  Location     Type
 19533 ;;		None               void
 19534 ;; Registers used:
 19535 ;;		wreg, status,2, status,0, pclath, cstack
 19536 ;; Tracked objects:
 19537 ;;		On entry : 0/0
 19538 ;;		On exit  : 0/0
 19539 ;;		Unchanged: 0/0
 19540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19545 ;;Total ram usage:        0 bytes
 19546 ;; Hardware stack levels used:    1
 19547 ;; Hardware stack levels required when called:    3
 19548 ;; This function calls:
 19549 ;;		_DimmerLights_IOC_1
 19550 ;; This function is called by:
 19551 ;;		_ISR
 19552 ;; This function uses a non-reentrant model
 19553 ;;
 19554                           
 19555                           
 19556                           ;psect for function _IOC_ISR
 19557  1BC7                     _IOC_ISR:	
 19558                           
 19559                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19560                           
 19561                           ;incstack = 0
 19562                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19563  1BC7  0027               	movlb	7	; select bank7
 19564  1BC8  1116               	bcf	22,2	;volatile
 19565                           
 19566                           ;MCU_B1.c: 396: IOCIF = 0;
 19567  1BC9  100B               	bcf	11,0	;volatile
 19568                           
 19569                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19570  1BCA  0022               	movlb	2	; select bank2
 19571  1BCB  1C20               	btfss	_myMain^(0+256),0
 19572  1BCC  0008               	return
 19573                           
 19574                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19575  1BCD  3192  2233         	fcall	_DimmerLights_IOC_1
 19576  1BCF  0008               	return
 19577  1BD0                     __end_of_IOC_ISR:	
 19578                           
 19579                           	psect	text142
 19580  1233                     __ptext142:	
 19581 ;; *************** function _DimmerLights_IOC_1 *****************
 19582 ;; Defined at:
 19583 ;;		line 1443 in file "../src/Dimmer_B1.c"
 19584 ;; Parameters:    Size  Location     Type
 19585 ;;		None
 19586 ;; Auto vars:     Size  Location     Type
 19587 ;;  dimming         1   13[COMMON] unsigned char 
 19588 ;;  count           1   12[COMMON] unsigned char 
 19589 ;; Return value:  Size  Location     Type
 19590 ;;		None               void
 19591 ;; Registers used:
 19592 ;;		wreg, status,2, status,0, pclath, cstack
 19593 ;; Tracked objects:
 19594 ;;		On entry : 0/0
 19595 ;;		On exit  : 0/0
 19596 ;;		Unchanged: 0/0
 19597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19601 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19602 ;;Total ram usage:        4 bytes
 19603 ;; Hardware stack levels used:    1
 19604 ;; Hardware stack levels required when called:    2
 19605 ;; This function calls:
 19606 ;;		_Division
 19607 ;; This function is called by:
 19608 ;;		_IOC_ISR
 19609 ;; This function uses a non-reentrant model
 19610 ;;
 19611                           
 19612                           
 19613                           ;psect for function _DimmerLights_IOC_1
 19614  1233                     _DimmerLights_IOC_1:	
 19615                           
 19616                           ;Dimmer_B1.c: 1457: if (DimmerIntr1.Start == 0) {
 19617                           
 19618                           ;incstack = 0
 19619                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19620  1233  0021               	movlb	1	; select bank1
 19621  1234  193A               	btfsc	_DimmerIntr1^(0+128),2
 19622  1235  0008               	return
 19623                           
 19624                           ;Dimmer_B1.c: 1458: if (RB2 != DimmerIntr1.Status) {
 19625  1236  0E3B               	swapf	(_DimmerIntr1^(0+128)+1),w
 19626  1237  0C89               	rrf	9,f
 19627  1238  3901               	andlw	1
 19628  1239  00FA               	movwf	??_DimmerLights_IOC_1
 19629  123A  3000               	movlw	0
 19630  123B  0020               	movlb	0	; select bank0
 19631  123C  190D               	btfsc	13,2	;volatile
 19632  123D  3001               	movlw	1
 19633  123E  067A               	xorwf	??_DimmerLights_IOC_1,w
 19634  123F  1903               	skipnz
 19635  1240  0008               	return
 19636                           
 19637                           ;Dimmer_B1.c: 1459: DimmerIntr1.Start = 1;
 19638  1241  0021               	movlb	1	; select bank1
 19639  1242  153A               	bsf	_DimmerIntr1^(0+128),2
 19640                           
 19641                           ;Dimmer_B1.c: 1460: DimmerIntr1.Count = 0;
 19642  1243  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19643                           
 19644                           ;Dimmer_B1.c: 1461: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19645  1244  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19646  1245  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 19647                           
 19648                           ;Dimmer_B1.c: 1462: DimmerIntr1.Tune = 1;
 19649  1246  14BA               	bsf	_DimmerIntr1^(0+128),1
 19650                           
 19651                           ;Dimmer_B1.c: 1463: }
 19652                           ;Dimmer_B1.c: 1464: char count = 78;
 19653  1247  304E               	movlw	78
 19654  1248  00FA               	movwf	??_DimmerLights_IOC_1
 19655  1249  087A               	movf	??_DimmerLights_IOC_1,w
 19656  124A  00FC               	movwf	DimmerLights_IOC_1@count
 19657                           
 19658                           ;Dimmer_B1.c: 1465: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19659  124B  3002               	movlw	2
 19660  124C  00FA               	movwf	??_DimmerLights_IOC_1
 19661  124D  087A               	movf	??_DimmerLights_IOC_1,w
 19662  124E  00F5               	movwf	Division@num
 19663  124F  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19664  1250  319C  24A7         	fcall	_Division
 19665  1252  00FB               	movwf	??_DimmerLights_IOC_1+1
 19666  1253  087B               	movf	??_DimmerLights_IOC_1+1,w
 19667  1254  00FD               	movwf	DimmerLights_IOC_1@dimming
 19668                           
 19669                           ;Dimmer_B1.c: 1466: DimmerIntr1.TuneValue2 = 7 + dimming;
 19670  1255  087D               	movf	DimmerLights_IOC_1@dimming,w
 19671  1256  3E07               	addlw	7
 19672  1257  00FA               	movwf	??_DimmerLights_IOC_1
 19673  1258  087A               	movf	??_DimmerLights_IOC_1,w
 19674  1259  0021               	movlb	1	; select bank1
 19675  125A  00C3               	movwf	(_DimmerIntr1^(0+128)+9)
 19676                           
 19677                           ;Dimmer_B1.c: 1467: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (7 + 7))
      +                           - DimmerIntr1.DimmingValue);
 19678  125B  033F               	decf	(_DimmerIntr1^(0+128)+5),w
 19679  125C  3AFF               	xorlw	255
 19680  125D  0743               	addwf	(_DimmerIntr1^(0+128)+9),w
 19681  125E  077C               	addwf	DimmerLights_IOC_1@count,w
 19682  125F  3EF2               	addlw	242
 19683  1260  00FA               	movwf	??_DimmerLights_IOC_1
 19684  1261  087A               	movf	??_DimmerLights_IOC_1,w
 19685  1262  00C4               	movwf	(_DimmerIntr1^(0+128)+10)
 19686                           
 19687                           ;Dimmer_B1.c: 1468: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 19688  1263  0844               	movf	(_DimmerIntr1^(0+128)+10),w
 19689  1264  077D               	addwf	DimmerLights_IOC_1@dimming,w
 19690  1265  00FA               	movwf	??_DimmerLights_IOC_1
 19691  1266  087A               	movf	??_DimmerLights_IOC_1,w
 19692  1267  00C5               	movwf	(_DimmerIntr1^(0+128)+11)
 19693                           
 19694                           ;Dimmer_B1.c: 1472: DimmerIntr1.Status = 0;
 19695  1268  12BB               	bcf	(_DimmerIntr1^(0+128)+1),5
 19696  1269  0008               	return
 19697  126A                     __end_of_DimmerLights_IOC_1:	
 19698                           
 19699                           	psect	text143
 19700  1CA7                     __ptext143:	
 19701 ;; *************** function _Division *****************
 19702 ;; Defined at:
 19703 ;;		line 1326 in file "../src/Dimmer_B1.c"
 19704 ;; Parameters:    Size  Location     Type
 19705 ;;  value           1    wreg     unsigned char 
 19706 ;;  num             1    5[COMMON] unsigned char 
 19707 ;; Auto vars:     Size  Location     Type
 19708 ;;  value           1    8[COMMON] unsigned char 
 19709 ;;  result          1    9[COMMON] unsigned char 
 19710 ;; Return value:  Size  Location     Type
 19711 ;;                  1    wreg      unsigned char 
 19712 ;; Registers used:
 19713 ;;		wreg, status,2, status,0, pclath, cstack
 19714 ;; Tracked objects:
 19715 ;;		On entry : 0/0
 19716 ;;		On exit  : 0/0
 19717 ;;		Unchanged: 0/0
 19718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19719 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19722 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19723 ;;Total ram usage:        5 bytes
 19724 ;; Hardware stack levels used:    1
 19725 ;; Hardware stack levels required when called:    1
 19726 ;; This function calls:
 19727 ;;		___lbdiv
 19728 ;; This function is called by:
 19729 ;;		_DimmerLights_IOC_1
 19730 ;; This function uses a non-reentrant model
 19731 ;;
 19732                           
 19733                           
 19734                           ;psect for function _Division
 19735  1CA7                     _Division:	
 19736                           
 19737                           ;incstack = 0
 19738                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19739                           ;Division@value stored from wreg
 19740  1CA7  00F8               	movwf	Division@value
 19741                           
 19742                           ;Dimmer_B1.c: 1327: char result = (char) (value / num);
 19743  1CA8  0875               	movf	Division@num,w
 19744  1CA9  00F6               	movwf	??_Division
 19745  1CAA  0876               	movf	??_Division,w
 19746  1CAB  00F0               	movwf	___lbdiv@divisor
 19747  1CAC  0878               	movf	Division@value,w
 19748  1CAD  3190  205B         	fcall	___lbdiv
 19749  1CAF  00F7               	movwf	??_Division+1
 19750  1CB0  0877               	movf	??_Division+1,w
 19751  1CB1  00F9               	movwf	Division@result
 19752                           
 19753                           ;Dimmer_B1.c: 1328: return result;
 19754  1CB2  0879               	movf	Division@result,w
 19755  1CB3  0008               	return
 19756  1CB4                     __end_of_Division:	
 19757                           
 19758                           	psect	text144
 19759  105B                     __ptext144:	
 19760 ;; *************** function ___lbdiv *****************
 19761 ;; Defined at:
 19762 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19763 ;; Parameters:    Size  Location     Type
 19764 ;;  dividend        1    wreg     unsigned char 
 19765 ;;  divisor         1    0[COMMON] unsigned char 
 19766 ;; Auto vars:     Size  Location     Type
 19767 ;;  dividend        1    2[COMMON] unsigned char 
 19768 ;;  quotient        1    4[COMMON] unsigned char 
 19769 ;;  counter         1    3[COMMON] unsigned char 
 19770 ;; Return value:  Size  Location     Type
 19771 ;;                  1    wreg      unsigned char 
 19772 ;; Registers used:
 19773 ;;		wreg, status,2, status,0
 19774 ;; Tracked objects:
 19775 ;;		On entry : 0/0
 19776 ;;		On exit  : 0/0
 19777 ;;		Unchanged: 0/0
 19778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19779 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19780 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19782 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19783 ;;Total ram usage:        5 bytes
 19784 ;; Hardware stack levels used:    1
 19785 ;; This function calls:
 19786 ;;		Nothing
 19787 ;; This function is called by:
 19788 ;;		_Division
 19789 ;; This function uses a non-reentrant model
 19790 ;;
 19791                           
 19792                           
 19793                           ;psect for function ___lbdiv
 19794  105B                     ___lbdiv:	
 19795                           
 19796                           ;incstack = 0
 19797                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19798                           ;___lbdiv@dividend stored from wreg
 19799  105B  00F2               	movwf	___lbdiv@dividend
 19800  105C  01F4               	clrf	___lbdiv@quotient
 19801  105D  0870               	movf	___lbdiv@divisor,w
 19802  105E  1903               	btfsc	3,2
 19803  105F  287A               	goto	i1l6579
 19804  1060  01F3               	clrf	___lbdiv@counter
 19805  1061  0AF3               	incf	___lbdiv@counter,f
 19806  1062                     i1l6567:	
 19807  1062  1BF0               	btfsc	___lbdiv@divisor,7
 19808  1063  286B               	goto	i1l6569
 19809  1064  1003               	clrc
 19810  1065  0DF0               	rlf	___lbdiv@divisor,f
 19811  1066  3001               	movlw	1
 19812  1067  00F1               	movwf	??___lbdiv
 19813  1068  0871               	movf	??___lbdiv,w
 19814  1069  07F3               	addwf	___lbdiv@counter,f
 19815  106A  2862               	goto	i1l6567
 19816  106B                     i1l6569:	
 19817  106B  1003               	clrc
 19818  106C  0DF4               	rlf	___lbdiv@quotient,f
 19819  106D  0870               	movf	___lbdiv@divisor,w
 19820  106E  0272               	subwf	___lbdiv@dividend,w
 19821  106F  1C03               	skipc
 19822  1070  2875               	goto	L9
 19823  1071  0870               	movf	___lbdiv@divisor,w
 19824  1072  02F2               	subwf	___lbdiv@dividend,f
 19825  1073  1474               	bsf	___lbdiv@quotient,0
 19826  1074  1003               	clrc
 19827  1075                     L9:	
 19828  1075  0CF0               	rrf	___lbdiv@divisor,f
 19829  1076  3001               	movlw	1
 19830  1077  02F3               	subwf	___lbdiv@counter,f
 19831  1078  1D03               	btfss	3,2
 19832  1079  286B               	goto	i1l6569
 19833  107A                     i1l6579:	
 19834  107A  0874               	movf	___lbdiv@quotient,w
 19835  107B  0008               	return
 19836  107C                     __end_of___lbdiv:	
 19837  007E                     btemp	set	126	;btemp
 19838  007E                     pic14e$flags	set	126
 19839  007E                     wtemp	set	126
 19840  007E                     wtemp0	set	126
 19841  0080                     wtemp1	set	128
 19842  0082                     wtemp2	set	130
 19843  0084                     wtemp3	set	132
 19844  0086                     wtemp4	set	134
 19845  0088                     wtemp5	set	136
 19846  007F                     wtemp6	set	127
 19847  007E                     ttemp	set	126
 19848  007E                     ttemp0	set	126
 19849  0081                     ttemp1	set	129
 19850  0084                     ttemp2	set	132
 19851  0087                     ttemp3	set	135
 19852  007F                     ttemp4	set	127
 19853  007E                     ltemp	set	126
 19854  007E                     ltemp0	set	126
 19855  0082                     ltemp1	set	130
 19856  0086                     ltemp2	set	134
 19857  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      77
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  153079
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5504
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5504
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4278
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4278
                                             16 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   51033
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   51033
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47314
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5044
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41998
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12095
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24455
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1590
                                              7 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1431
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   15556
                                             67 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1201
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3501
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57205
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   56907
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32347
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             67 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4370
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24213
                                             75 BANK0      2     1      1
                                              0 BANK1      2     2      0
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             67 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              2 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5366
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5366
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             67 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1896
                                             14 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     498
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      23
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     475
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     475
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     168      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     168      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Feb 04 16:06:51 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1F09  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l86 1527                                        l96 149B  
                                      l88 153B                                        l97 1497  
                                      l98 1485                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 0823                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1BEC                    __end_of_setDelayOff_GO 0D38  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1798  
                    _setDimmerLights_Line 1CF3                              ___ftadd@sign 004C  
                                     l100 1495                                       l303 1F15  
                                     l304 1F17                                       l235 08D0  
                    _setDimmerLights_SwOn 11C8                                       l531 09CF  
                                     l347 10E9                                       l259 095B  
                                     l754 1FA1                                       l685 1CC1  
                                     l778 0794                                       _GIE 005F  
                                     _CRC 00CB                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D0                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C9  
                                     _Cmd 00CC              getDimmerLights_Status@lights 0023  
                                     _Sw1 01E3                ??_setDimmerIntr_Dimming_RF 0022  
              ??_setDimmerIntr_Dimming_Sw 0022           setDimmerIntr_Dimming_RF@command 0021  
                __end_of_CC2500_WriteByte 1F22                     _Buzzer_Initialization 1B4C  
                         __end_of_ADC_Set 1BA8                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0024  
     __end_of_setDimmerIntr_ControlStatus 1EBF               _setDimmerIntr_ControlStatus 1EA7  
                       ??_getSw_KeyStatus 0021                                      ?_ISR 0070  
                            ___ftdiv@cntr 0039                           __end_of_IOC_ISR 1BD0  
                   _setDimmerLights_OnOff 0715          setDimmerLights_DimmingRun@lights 0025  
                              Load_Main@i 0031                              ___ftdiv@sign 003E  
                                    l2112 0589                                      l2113 05DA  
                                    l1251 115A                                      l1260 0B9D  
                                    l2108 063A                                      l1501 1F08  
                                    l1237 13CB                                      l2153 0AB8  
                                    l2138 1CC8                                      l1460 1177  
                                    l1461 1192                                      l2181 0A47  
                                    l1437 134E                                      l1614 01F6  
                                    l1624 01D2                                      l1616 0082  
                                    l2168 11C4                                      l1465 118E  
                                    l1625 01D0                                      l1617 007E  
                                    l1618 0079                                      l1492 0714  
                         __end_of_IOC_Set 1C0D                                      l2466 1E57  
                                    l2670 1FEB                                      l2486 0376  
                                    l1782 0E00                                      l2831 163B  
                          _Load_Main$3921 002C                                      l2488 0242  
                                    l1776 0E8B                                      l6211 1FB7  
                                    l1787 0E83                                      l2860 041F  
                                    l2837 1652                                      l6213 1FBD  
                                    l6057 12CF                                      l6225 10FA  
                                    l6233 0809                                      l6321 10D2  
                                    l6227 1105                                      l6235 080C  
                                    l6315 10C9                                      l6501 1D64  
                                    l7029 1DEA                                      l6317 10CC  
                                    l6503 1D69                                      l6255 1EF3  
                                    l6239 0812                                      l6343 1439  
                                    l6193 1F68                                      l6353 1449  
                                    l6345 143C                                      l7241 1087  
                                    l6259 1F02                                      l7067 1BF4  
                                    l6187 1F5F                                      l6355 144C  
                                    l9011 0E11                                      l7243 108A  
                   _setDimmerLights_SwOff 12A1                                      l6189 1F62  
                                    l6349 1442                                      l6613 08B7  
                                    l9005 0E02                                      l9013 0E14  
                                    l6711 1E74                                      l8231 1611  
                                    l6359 1452                                      l6631 08EC  
                                    l6623 08DF                                      l9103 05E9  
                                    l7247 1090                                      l8401 0443  
                                    l5761 1D74                                      l6625 08E3  
                                    l6617 08D6                                      l9041 0E58  
                                    l8235 1618                                      l8411 045E  
                                    l6491 1308                                      l6483 12F2  
                                    l7267 1D20                                      l6651 090F  
                                    l6627 08E6                                      l6619 08D9  
                                    l9131 0633                                      l9043 0E5A  
                                    l8245 1640                                      l8237 1622  
                                    l8421 0D4F                                      l5757 1D6E  
                                    l6477 12E9                                      l7285 0B48  
                                    l9117 061B                                      l9053 0E6F  
                                    l8271 14B8                                      l8247 1648  
                                    l8239 1627                                      l8351 03A8  
                                    l7279 0B33                                      l6671 0927  
                                    l6655 0915                                      l9055 0E70  
                                    l8281 14C0                                      l8265 14AD  
                                    l8361 03BE                                      l8441 0DA6  
                                    l8521 0C3E                                      l6497 1D5D  
                                    l9401 00A5                                      l6673 0940  
                                    l6649 090C                                      l6593 089C  
                                    l7481 1E62                                      l8283 14CC  
                                    l8339 10A8                                      l8355 03AF  
                                    l8427 0D65                                      l8603 0D1A  
                                    l6595 089F                                      l8293 14E7  
                                    l8381 03F5                                      l8373 03D8  
                                    l8541 0C7C                                      l9237 1FA3  
                                    l6845 1142                                      l9253 04F9  
                                    l7477 1E5C                                      l9165 0275  
                                    l9149 022C                                      l7813 1380  
                                    l8391 0411                                      l8383 03FA  
                                    l8551 0C95                                      l8463 0EA8  
                                    l8607 0D2E                                      l7575 1FE5  
                                    l9407 00D7                                      l6599 08A5  
                                    l9175 02AA                                      l9335 132D  
                                    l8297 14EF                                      l8289 14DE  
                                    l8393 041B                                      l8385 03FE  
                                    l8449 0DBF                                      l8481 0EF9  
                                    l9433 015A                                      l8721 0BBC  
                                    l9089 05D5                                      l7595 146F  
                                    l8571 11F4                                      l8379 03EB  
                                    l8555 0CA3                                      l8547 0C89  
                                    l8539 0C6E                                      l8635 171D  
                                    l9443 0186                                      l8811 09EC  
                                    l6963 1D53                                      l9603 157E  
                                    l8397 0431                                      l8549 0C92  
                                    l8493 0F15                                      l8485 0F01  
                                    l8469 0EBE                                      l6981 127F  
                                    l9453 01A2                                      l8725 0BC1  
                                    l8709 1407                                      l8813 09F3  
                                    l8805 09D7                                      l9189 02EA  
                                    l7781 0B00                     _myMain_Initialization 1DFF  
                                    l9551 06AD                                      l9535 066E  
                                    l6991 129A                                      l9463 01B8  
                                    l9439 0169                                      l9447 0192  
                                    l9367 0060                                      l8735 0C11  
                                    l8815 0A0E                                      l8823 0A38  
                                    l8903 0A5E                                      l9199 031E  
                                    l8569 11EF                                      l8761 1172  
                                    l8497 0F1D                                      l8593 0CEA  
                                    l9529 065E                                      l9385 0081  
                                    l6889 1D42                                      l8817 0A30  
                                    l7777 0AF8                                      l7769 0AD9  
                                    l8771 1189                                      l8763 117B  
                                    l8843 0773                                      l9571 06F9  
                                    l9547 06A5                                      l9539 067D  
                                    l9299 13AA                                      l6987 1291  
                                    l6979 1273                                      l8819 0A34  
                                    l8931 0A94                                      l8915 0A76  
                                    l9565 06E7                                      l9549 0680  
                                    l7797 0B27                                      l8871 07D0  
                                    l9567 06C2                                      l8919 0A7F  
                                    l8857 07A3                                      l9569 06EF  
                                    l9577 070A                                      _CFGS 0CAE  
                                    l8971 17BE                                      l9499 01E5  
                                    l8877 15C5                                      l8973 17C4  
                                    l8983 17EC                                      l9599 1573  
                            __CFG_WDTE$ON 0000                                      l8985 17F3  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5075 1E35                                      _PEIE 005E  
                                    u5345 10EF                                      u6075 1EA1  
                                    u6405 1280                                      u6415 128A  
                                    u6425 1292                                      u9005 0DC0  
                                    u6385 1276                                      u9115 0F1E  
                                    u7435 1FEC                                      u9125 0F24  
                                    u9045 0ECA                                      u7445 1FF1  
                                    u9055 0EDA                                      u9225 0C8A  
                                    u7475 1465                                      u8515 1643  
                                    u9075 0F02                                      u9315 0CF6  
                                    u9340 16D8                                      u9165 0C45  
                                    u9085 0F08                                      u8615 14CD  
                                    u7735 0AE8                                      u8625 14D7  
                                    u8545 1659                                      u9345 16D6  
                                    u8635 14DF                                      u8475 161D  
                                    u9195 0C6F                                      u7835 1374  
                                    u8805 03D9                                      u8495 1636  
                                    u7785 0B17                                      u8595 14C3  
                                    u8835 03EC                                      u8865 03FF  
                                    _LWLO 0CAD                                      u8965 0D77  
                                    u8895 0412                                      u8975 0D87  
                                    u8985 0DA7                                      u8995 0DB6  
                                    _RSSI 00D2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1F8B  
              _setDimmerLights_DimmingRun 1F70                                      _Buz1 00AE  
                                    _Load 0134                                      _Temp 00DB  
                                    _main 154F                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 09D6                           __end_of_RF_Main 1B58  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1C18                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0C25                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2229 0024  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 1E7B  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1E65  
                  _getDimmerLights_Status 1CE2                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 1B6B                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CE                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01EC  
                         __end_of___awdiv 14F6                           __end_of___lbdiv 107C  
                         __end_of___ftadd 0476                           __end_of___ftdiv 0DE1  
                         __end_of___ftneg 1BD9                                     u10035 0E40  
                                   u10055 0E60                                     u10145 05AD  
                         __end_of___ftmul 0F45                                     u10175 060A  
                         ___awdiv@divisor 0021                                     _T1CON 0018  
                                   u10705 0119                                     u10545 1346  
                         __end_of___fttol 0CAC                                     u10495 13C2  
                                   u10920 06AB                                     u10925 0689  
                                   u10685 00A3                                     u10950 06ED  
                                   u10695 00D5                                     u10785 0199  
                                   u10955 06CB                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 12A1                                     i1l843 0853  
                                   i1l852 0876                                     i1l847 0878  
                                   i1l849 086D                                     i1l858 088A  
                         ___awdiv@counter 0026             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0022                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1EA7                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 16CE   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1669                                     _Light 00D1  
                        __end_of_TMR1_ISR 1FE2                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C8F  
                                   _getAD 107C                             ___awtoft@sign 002E  
                           ___ftpack@sign 0025               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0021                          __end_of_WDT_Main 1DB3  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0026  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1C02  
                      Flash_Memory_Read@i 0022                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1D8F  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 1D15                        _setRF_DimmerLights 16CE  
                         ___lbdiv@divisor 0070               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0073  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 00E5  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0021  
             ??_setDimmerLights_DimmingOn 0023                        ??_CC2500_SIDLEMode 0025  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1CB4  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 15AA  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1B6F  
          getMain_All_LightsStatus@status 0021                        ??_setMemory_Modify 0021  
            setDimmerLights_OnOff@command 00E5                            _Exception_Main 0640  
                        ?_CC2500_WriteREG 0023                                 ??_ADC_Set 0021  
                    _setSw_Initialization 1CD2                                    ??_main 006E  
                           ___fttol@sign1 0057                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0063  
            ??_DimmerLights_SelectPointer 0021                   _setControl_Lights_Table 09D6  
                          _setMemory_Data 1C6B                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0023                                _Receive_OK 0370  
      setDimmerIntr_ControlStatus@command 0021                   _setDimmerLights_Dimming 15AA  
                               ??_IOC_ISR 007E                                 ??_IOC_Set 0021  
                             _DimmerIntr1 00BA                  _getMain_All_LightsStatus 1BE2  
                __size_of_setRFSW_Control 0043                        _RF_Timeout_Counter 1E26  
                 ??_Switch_Initialization 0026                    ?_setDimmerLights_OnOff 00E5  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0021  
                       ??_getRF_KeyStatus 0021                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0967                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006E                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0023  
                   _getDimmer_Load_Status 1BBF                                 ??_WDT_Set 0021  
                        __end_of___awtoft 10BF                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1669                  _getMain_All_Error_Status 1161  
                                  _IOCBF2 1CB2                                    i1l1200 001B  
                                  i1l1197 0013                                    i1l7101 083B  
                                  i1l7113 084B                                    i1l7107 0843  
                                  i1l7143 0883                                    i1l7135 086F  
                                  i1l7095 0834                                    i1l6567 1062  
                                  i1l6569 106B                                    i1l6579 107A  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0023  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B0  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  u757_25 1FDC                                    _IO_Set 1F3C  
                                  _WDTCON 0097                      Exception_Main@i_3564 0034  
                      DelayTime_1us@count 0021            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0064             __end_of_CC2500_PowerOnInitial 1E50  
                                  _Dimmer 012D                                    _DlySw1 0164  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1D6B  
              __end_of_Mcu_Initialization 1DA1                       __end_of_Buzzer_Main 14A2  
                                  _Memory 01BE                                    _Timer1 00C6  
                                  ___bmul 1D6B                    __end_of_Exception_Main 0715  
                    Exception_Main@lights 0036                                    ___wmul 1FE2  
                               ??___awdiv 0025                                 ??___lbdiv 0071  
                               ??___ftadd 0048              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0035                                 ??___ftneg 0042  
                               ??___ftmul 0035                                 ??___fttol 0053  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0021  
                               ??___lwdiv 0025                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0021                                    _r_data 00D9  
                    Exception_Main@status 002F   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1DEC  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0021  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1DD9  
                                  _s_data 00DA                    ??_setDimmerLights_SwOn 002E  
                                  _setLED 12DA                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0021                    __end_of_setMemory_Data 1C77  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0028  
                                  _setBuz 14F6                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0030               __end_of_Load_Initialization 1B52  
        ??_setDimmerLights_Initialization 0021           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0021          __end_of_setDimmerIntr_Dimming_RF 1ED7  
                 DimmerLights_TMR_1@count 0071          __end_of_setDimmerIntr_Dimming_Sw 1E91  
                   ___ftmul@f3_as_product 003A                 _setDimmerLights_DimmingOn 110A  
                Flash_Memory_Read@address 0023                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DFF               getMain_Lights_Count@status1 0022  
             __size_of_DimmerLights_IOC_1 0037                     __end_of_SwPointSelect 1CA7  
             __size_of_DimmerLights_TMR_1 0069              __size_of_Flash_Memory_Modify 0079  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0021  
                      setTemp_Main@TempGO 00E6                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0022              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E50               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0026          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 0046           setDimmerIntr_DimmingValue@value 0063  
         getDimmerIntr_DimmingValue@value 0023                                 ?_LED_Main 0070  
                              ___ftadd@f1 0042                                ___ftadd@f2 0045  
                    _getRF_KeyStatus$5307 0023                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0032                                ___ftdiv@f2 002F  
                              ___ftdiv@f3 003A                                ___ftneg@f1 003F  
                              ___awtoft@c 0029                       ___bmul@multiplicand 0021  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002F  
                              ___ftmul@f2 0032                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004F                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 103B  
                           __end_of_getAD 109D                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0022  
               setMemory_LoopSave@command 0022                        _LED_Initialization 1B63  
                         _getSw_KeyStatus 1D48                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0022                           ?_setMemory_Data 0021  
        ??_getDimmerLights_PercentToValue 005D           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006C             ??_Flash_Memory_Initialization 0063  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1BF7  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FA  
       setDimmerIntr_ControlStatus@lights 0023                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C47                __end_of_set_TimeoutCleared 1B88  
         setDimmerIntr_MaxmumValue@lights 0065                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C3B                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0024  
                     _Temp_Initialization 1B58                        ??_CC2500_WriteByte 0021  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1458  
                       ??_setRFSW_Control 00E5               ?_setDimmerLights_DimmingRun 0023  
                       __end_of_Temp_Main 0800                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002E                                ??_LED_Main 0026  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B5B  
                           ??_Switch_Main 0033                            DelayTime_1us@i 0023  
                          DelayTime_1us@j 0025                      ??_LED_Initialization 0026  
                            _DimmerLights 00CF                         LedPointSelect@led 0022  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0021                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002D  
                 ?_getDimmerLights_Status 0070                                __pmaintext 154F  
                          _getDelayOff_GO 1D04                       _CC2500_WriteCommand 1F56  
                    ?_Temp_Initialization 0070                                   ?___bmul 0021  
                        ??_setDelayOff_GO 0068         __end_of_DimmerIntr_Initialization 1EF0  
           ??_DimmerLights_Initialization 0022                                   ?___wmul 0021  
                              ??_TMR1_ISR 0072                             ?_setTemp_Main 0070  
                              _getLoad_AD 0ABA                                ??_TMR1_Set 0021  
                              __pintentry 0004                    ??_setSw_Initialization 0025  
                              _getLoad_OK 1BAF                        __size_of_setTxData 00BB  
                                 ?_setLED 0023                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1BA1  
                                 ?_setBuz 002A                                 ?___awtoft 0029  
                               ?___ftpack 0021                                _getTemp_AD 1350  
      __end_of_DimmerLights_SelectPointer 1C3B                _DimmerLights_SelectPointer 1C2F  
                              ??_WDT_Main 0021              __end_of_setRF_Initialization 1C23  
                      _setRFSW_AdjControl 0BA5                    __end_of_setProductData 1C47  
           setDimmerLights_Dimming@lights 00E6                                   _IOC_ISR 1BC7  
                                 _IOC_Set 1C02                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006B     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1390  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1F22  
                  __size_of_CC2500_RxData 006E                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1B55                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 1C0D           __end_of_setControl_Lights_Table 0A48  
                         setRF_Main@error 00EB                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0021                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1608                   ??_setLoad_AH_AL_Restore 0021  
                     getCmd_Status@number 0021              __end_of_CC2500_FrequencyCabr 1C9B  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0023  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1D37                 ?_setDimmerIntr_Dimming_RF 0021  
                     ??_Flash_Memory_Main 0027                 ?_setDimmerIntr_Dimming_Sw 0021  
                     ??_Flash_Memory_Read 0021                    __end_of_getDelayOff_GO 1D15  
          __end_of_getDimmerLights_Status 1CF3                         __end_of_getRxData 0ABA  
                 __end_of_getSw_KeyStatus 1D59                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0021                      ??_setRFSW_AdjControl 0066  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0063                                   ___awdiv 14A2  
                                 ___lbdiv 105B                                   ___ftadd 0380  
                                 ___ftdiv 0D38                                   ___ftneg 1BD0  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0C25                       __end_of_Switch_Main 1BAF  
                                 ___lwdiv 126A                ??_getMain_All_LightsStatus 0021  
                 ??_Buzzer_Initialization 0021                           _getRF_KeyStatus 1D37  
                              ??___awtoft 002C                                ??___ftpack 0026  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0069  
                         __size_of_setBuz 0059                                   __ptext1 1313  
                                 __ptext2 1DFF                                   __ptext3 1350  
                                 __ptext4 0ABA                                   __ptext5 107C  
                                 __ptext6 1DA1                                   __ptext7 0002  
                                 __ptext8 07FD                                   __ptext9 0DE1  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0021                   ??_setDimmerLights_OnOff 00E6  
                         ?_setProductData 0063                 __end_of_Flash_Memory_Main 13D1  
               __end_of_Flash_Memory_Read 1F3C                   ??_setDimmerLights_SwOff 0023  
                              _setRF_Main 0569                   ??_myMain_Initialization 0021  
                           _DelayOff_Main 1B5F                         _DimmerLights_Main 1F8B  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0023  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1B8E  
              __end_of_CC2500_ClearRXFIFO 1B77                  ??_setTemp_Initialization 0021  
              __end_of_CC2500_ClearTXFIFO 1B7B                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00ED  
                          _LedPointSelect 1C5F                 getAll_Sw_KeyStatus@status 0022  
                         getTemp_AD@ADRES 0027                       _DelayOffPointSelect 1C23  
                                 clrloop0 1B95            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B83                      end_of_initialization 0046  
               ??_DelayOff_Initialization 0024                         _CC2500_InitSetREG 07D3  
                           _DelayTime_1us 10E4                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 1161        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B8E                __end_of_setRF_TransceiveGO 1DD9  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006E  
                    Flash_Memory_Read@ret 0024                                   initloop 1B8F  
                              _setSw_Main 01FA                     CC2500_ReadByte@loop_b 0022  
                  setDimmerLights_SwOn@sw 002E                         _CC2500_ReadStatus 10BF  
                    Flash_Memory_Modify@i 0026                     _setLED_Initialization 1D7D  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0025  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 08F9                             _CC2500_TxData 088C  
                     ??_CC2500_InitSetREG 0026             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0B2C  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0021                              __pstringtext 1800  
                           _setCmd_Status 1EF0                       _Flash_Memory_Unlock 1BD9  
                     ??_CC2500_ReadStatus 0023                   CC2500_InitSetREG@loop_c 0029  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0025                   setTemp_Main@DangerValue 00E9  
                  setSw_Initialization@sw 0025                 __end_of_DimmerLights_Main 1FA7  
                      _Mcu_Initialization 1D8F                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B73                      __end_of_my_MainTimer 1350  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C6B                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002E          setDimmerIntr_DimmingValue@lights 0065  
        getDimmerIntr_DimmingValue@lights 0022                 __end_of_CC2500_InitSetREG 07FD  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0021  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 10E4                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0023           getMain_All_Error_Status@command 0026  
                             ___ftdiv@exp 003D         __end_of_setDimmerLights_DimmingOn 1132  
                        ??_Exception_Main 002E                            __end_of_IO_Set 1F56  
                    _setRF_Initialization 1C18                        _setMemory_LoopSave 1DEC  
                             _Switch_Main 1BA8                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1D48  
                        ??_setMemory_Data 0022                               ___ftmul@exp 0039  
                   _CC2500_PowerOnInitial 1E3B               ??_DimmerIntr_Initialization 0021  
                    ??_Mcu_Initialization 0022               __end_of_getAll_Sw_KeyStatus 1D26  
                   ??_DelayOffPointSelect 0021                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0021                 DimmerLights_IOC_1@dimming 007D  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D7D  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0066  
                          __end_of___wmul 2000                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001E  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0022  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0068  
                          __end_of_setLED 1313                             __pbitbssBANK0 0370  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 154F                __end_of_DimmerLights_IOC_1 126A  
                    _CC2500_FrequencyCabr 1C8F                   ??_getDimmer_Load_Status 0021  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 13D1  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 088C  
                     start_initialization 0022                           ?_LedPointSelect 0070  
                               _Load_Main 004A                               __end_of_ISR 0020  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1BB7  
                   ??_Flash_Memory_Modify 0025              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0021                __end_of_CC2500_InitPATable 103B  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0021  
                   ??_Flash_Memory_Unlock 0021                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0025    __end_of_getDimmerLights_PercentToValue 1798  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1733  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005F                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B83         __end_of_setDimmerIntr_MaxmumValue 1C53  
                                ??_IO_Set 0021                  __size_of_Timeout_Counter 0016  
                               _VarErrLED 0169                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 07FD                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0021                                 _Rx_Length 00D3  
                   setProductData@address 0065                       Exception_Main@count 0030  
                     Exception_Main@error 0031                                  ??___bmul 0022  
                                ??___wmul 0025                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1BEC                                 _Tx_Length 00D7  
                             __pdataBANK4 0220                                  ??_setLED 0024  
                                ?_ADC_Set 0070                                  ??_setBuz 002C  
                         ??_DelayOff_Main 0069                         ??_CC2500_ReadByte 0021  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1194  
                        _CC2500_SIDLEMode 1B7B                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0021                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0023                             ??_setLED_Main 0023  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002F                                 ___latbits 0003  
                        _setMemory_Modify 1DB3                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E5  
               setRF_TransceiveGO@command 0022                             __pcstackBANK3 01EC  
                    ??_set_TimeoutCleared 0021                 _DimmerIntr_Initialization 1ED7  
                         ??_DelayTime_1us 0023                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0068                         ??_CC2500_PowerRST 0027  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0022                              ??_TouchPower 0021  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0063               setDimmerLights_DimmingOn@sw 0023  
                       ??_CC2500_WriteREG 0024                             ??_setRF_Learn 0021  
                           _DimmerLights1 015C                     CC2500_WriteREG@w_addr 0025  
                   setDelayOff_GO@command 0066            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0025             __end_of_setLoad_AH_AL_Restore 101C  
                setRFSW_AdjControl@status 0068                           ??_CC2500_TxData 0025  
                               __pnvBANK1 00ED                            getRxData@error 00E9  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1B6F  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0032  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D7  
                        ___lwdiv@dividend 0023                     DelayOffPointSelect@sw 0022  
                           _getCmd_Status 1D59                                setBuz@time 002A  
                         ??_setCmd_Status 0022                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002B                    _setTemp_Initialization 1B4B  
                               _getBuz_GO 1D26                  ?_setDimmerLights_Dimming 006B  
     __end_of_Flash_Memory_Initialization 0569               _Flash_Memory_Initialization 0476  
                                ?___awdiv 0021                                 __ptext100 1D04  
                               __ptext101 1D59                                  ?___lbdiv 0070  
                               __ptext110 1669                                 __ptext102 15AA  
                               __ptext111 0C25                                 __ptext103 0F45  
                               __ptext120 1161                                 __ptext112 1BD0  
                               __ptext104 1DC6                                 __ptext121 1B9A  
                               __ptext113 0D38                                 __ptext105 16CE  
                               __ptext130 12A1                                 __ptext122 1B4A  
                               __ptext114 0380                                 __ptext106 1DB3  
                               __ptext131 1CE2                                 __ptext123 1ED7  
                               __ptext115 109D                                 __ptext107 1CF3  
                               __ptext140 0823                                 __ptext132 1C2F  
                               __ptext124 1B5F                                 __ptext116 1608  
                               __ptext108 1C47                                 __ptext141 1BC7  
                               __ptext133 1B5B                                 __ptext125 0967  
                               __ptext117 1CB4                                 __ptext109 1E7B  
                                ?___ftadd 0042                                 __ptext142 1233  
                               __ptext134 1B88                                 __ptext126 1C3B  
                               __ptext118 1E65                                 __ptext143 1CA7  
                               __ptext135 1C23                                 __ptext127 11C8  
                               __ptext119 1BAF                                 __ptext144 105B  
                               __ptext136 1458                                 __ptext128 14F6  
                               __ptext137 1B4C                                 __ptext129 14A2  
                               __ptext139 1FC4                                 _getRxData 0A48  
                                ?___ftdiv 002F                                  ?___ftneg 003F  
                                ?___ftmul 002F                                  ?___fttol 004F  
                   __size_of_my_MainTimer 003D                                  ?___lwdiv 0021  
                 __end_of_setRFSW_Control 1414                          ??_setProductData 0064  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1B4F                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1E65  
                     __size_of_setSw_Main 0186              CC2500_ReadStatus@status_addr 0024  
      __end_of_getDimmerIntr_DimmingValue 1CC3              ??_setDimmerIntr_DimmingValue 0064  
              _getDimmerIntr_DimmingValue 1CB4                    CC2500_WriteByte@loop_a 0022  
          __size_of_setDimmerLights_OnOff 00BE                                 _r_address 00D8  
           __end_of_setDimmerLights_OnOff 07D3            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 12DA  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1E12  
                          __size_of_getAD 0021                          ___lwdiv@quotient 0026  
                           _SwPointSelect 1C9B                       __end_of_setLED_Main 1233  
                        ??_getDelayOff_GO 0023                    ??_setRF_Initialization 0021  
             __end_of_Temp_Initialization 1B5B                         _CC2500_rfSettings 182F  
                          ___wmul@product 0025                                  _LED_Main 1B67  
                         SwPointSelect@sw 0022                                 clear_ram0 1B94  
                CC2500_InitPATable@loop_d 0028                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1313                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1BA1               _DimmerLights_Initialization 1B9A  
                  _Flash_Memory_Main$3098 0029                        _CC2500_ClearRXFIFO 1B73  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1B77  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E26                         ??_Timeout_Counter 0021  
                              ?_getBuz_GO 0021                  setRF_DimmerLights@status 0069  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1132  
                              ?_getRxData 0070                              ??_getLoad_AD 0025  
                                _TMR1_ISR 1FC4                    CC2500_InitSetREG@temp1 0027  
                  CC2500_InitSetREG@temp2 0028                              ??_getLoad_OK 0021  
                                _TMR1_Set 1C83                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1DC6  
                                _RF_Count 0132                      __end_of_RF_RxDisable 1CD2  
                            ??_getTemp_AD 0025               __end_of_CC2500_WriteCommand 1F70  
                  ??_CC2500_FrequencyCabr 0027                                  _WDT_Main 1DA1  
                 DlyOff_Initialization@sw 0023                     getSw_KeyStatus@status 0022  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0021  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CD                              setSw_Main@sw 0032  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0027                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1C83                            ?_SwPointSelect 0070  
                             getAD@adcon0 0024                               getAD@adcon1 0021  
                          setLED_Main@led 0025                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 11C8                     _DlyOff_Initialization 1B88  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0025  
                                _Division 1CA7                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0025                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1EBF  
             setDimmerLights_OnOff@lights 00E8                  _setDimmerIntr_Dimming_Sw 1E7B  
                                _Fosc_Set 1B6B                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 00E6                        __end_of_getLoad_AD 0B2C  
                      __end_of_getLoad_OK 1BB7                     _Switch_Initialization 1B7F  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0021  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 1390                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1F09  
                       getLoad_AD@channel 0027       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0021              Flash_Memory_Initialization@i 0064  
                                _SwDetect 00D6                               ??_Temp_Main 0067  
                        getCmd_Status@cmd 0022                          setCmd_Status@cmd 0021  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$3552 0022  
           _getMain_All_Error_Status$3553 0024                  __end_of_getDimmer_LoadGO 1BBF  
                     _Load_Initialization 1B4F          ??_getDimmerLights_ValueToPercent 005D  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0024  
                            _setTemp_Main 0DE1                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002F                                  ___awtoft 109D  
                        ??_LedPointSelect 0021                                  ___ftpack 1608  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0021  
                       getTemp_AD@channel 0026                              ??_setRF_Main 00EA  
                    CC2500_WriteREG@value 0023                               _setLED_Main 11FD  
              __end_of_setRF_DimmerLights 1733            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0024  
                        getDelayOff_GO@sw 0023             __end_of_getDimmer_Load_Status 1BC7  
                        setDelayOff_GO@sw 006D                           ___lwdiv@divisor 0021  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0028  
                                __ptext10 1B58                                  __ptext11 1B4B  
                                __ptext20 1E91                                  __ptext12 1BA8  
                                __ptext21 1B7F                                  __ptext13 01FA  
                                __ptext30 0BA5                                  __ptext22 1CD2  
                                __ptext14 1E12                                  __ptext31 1F70  
                                __ptext23 1B55                                  __ptext15 110A  
                                __ptext40 1B7B                                  __ptext32 1D37  
                                __ptext24 0569                                  __ptext16 1D48  
                                __ptext41 1414                                  __ptext33 1D26  
                                __ptext25 0A48                                  __ptext17 1C9B  
                                __ptext50 1B6F                                  __ptext42 07D3  
                                __ptext34 1CC3                                  __ptext26 1194  
                                __ptext18 1E50                                  __ptext51 1E26  
                                __ptext43 101C                                  __ptext35 088C  
                                __ptext27 1DEC                                  __ptext19 1B83  
                                __ptext60 1B6B                                  __ptext52 1F09  
                                __ptext44 0800                                  __ptext36 08F9  
                                __ptext28 09D6                                  __ptext61 1BA1  
                                __ptext53 1B52                                  __ptext45 1C8F  
                                __ptext37 10BF                                  __ptext29 13D1  
                                __ptext70 1000                                  __ptext62 004A  
                                __ptext54 1C18                                  __ptext46 10E4  
                                __ptext38 1FA7                                  __ptext71 1B67  
                                __ptext63 1BF7                                  __ptext55 1D8F  
                                __ptext47 1B77                                  __ptext39 1E3B  
                                __ptext80 1C6B                                  __ptext72 11FD  
                                __ptext64 1BBF                                  __ptext56 1C0D  
                                __ptext48 1B73                                  __ptext81 1132  
                                __ptext73 1B63                                  __ptext65 1BB7  
                                __ptext57 1C83                                  __ptext49 1F56  
                                __ptext90 1C5F                                  __ptext82 1BD9  
                                __ptext74 1D7D                                  __ptext66 1DD9  
                                __ptext58 1F3C                                  __ptext91 1EBF  
                                __ptext83 1F22                                  __ptext75 1390  
                                __ptext67 1FE2                                  __ptext59 1C02  
                                __ptext92 1C53                                  __ptext84 0640  
                                __ptext76 1D15                                  __ptext68 126A  
                                __ptext93 1EA7                                  __ptext85 1BEC  
                                __ptext77 0B2C                                  __ptext69 1B4F  
                                __ptext94 0CAC                                  __ptext86 1F8B  
                                __ptext78 1C77                                  __ptext95 1D6B  
                                __ptext87 1798                                  __ptext79 0476  
                                __ptext96 1EF0                                  __ptext88 0715  
                                __ptext97 1BE2                                  __ptext89 12DA  
                                __ptext98 1733                                  __ptext99 0E91  
                                __product 0220                   ??_setLED_Initialization 0025  
                ??_getDimmerLights_Status 0023              __end_of_getDimmerLights_Line 1BF7  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D04  
                      _DimmerLights_IOC_1 1233              __end_of_setDimmerLights_SwOn 11FD  
                            ??_setSw_Main 0030                    ??_setRF_TimeoutCleared 0021  
            ??_setDimmerLights_DimmingRun 0024                             setLED@command 0023  
                           __size_of_main 005B                               _setRF_Learn 1E12  
      __size_of_DimmerIntr_Initialization 0019                           ??_getCmd_Status 0021  
                      _DimmerLights_TMR_1 0823                  __end_of_CC2500_SIDLEMode 1B7F  
              setDimmerLights_Main@lights 00E9               __end_of_DelayOffPointSelect 1C2F  
              CC2500_WriteCommand@command 0024                           _CC2500_ReadByte 1FA7  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 101C  
                __end_of_setMemory_Modify 1DC6                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 0640                               ??_getBuz_GO 0023  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E8  
                            getLoad_OK@ok 0021                __end_of_RF_Timeout_Counter 1E3B  
             Flash_Memory_Main@key_Status 0028                  _getAll_Sw_KeyStatus$6339 0023  
                                main@argc 01EC                                  main@argv 01EE  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6336 0023  
     getDimmerLights_ValueToPercent@value 005F                           _CC2500_PowerRST 1414  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 00E5  
      __end_of_setDimmerIntr_DimmingValue 1C5F                _setDimmerIntr_DimmingValue 1C53  
             __end_of_Flash_Memory_Modify 0BA5              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1194               __end_of_Flash_Memory_Unlock 1BE2  
                         ??_SwPointSelect 0021                           _CC2500_WriteREG 0800  
                      __end_of_setSw_Main 0380                     ??_Load_Initialization 0023  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 0060  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 0371  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0021                setDimmerLights_Line@lights 0021  
                 setDimmerLights_SwOff@sw 0023               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0026  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 006A  
                         setDelayOff_GO@j 006B                           setDelayOff_GO@k 006C  
                 ??_CC2500_PowerOnInitial 002A                     setTemp_Main@SafeValue 00E7  
  __end_of_setDimmerLights_Initialization 1B4B   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B4A                ?_setDimmerIntr_MaxmumValue 0063  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0021  
                  CC2500_InitPATable@temp 0027                           getLoad_AD@ADRES 002A  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B52  
                             getLoad_AD@i 002C                               getLoad_AD@j 0029  
                             getLoad_AD@k 0028                      _Flash_Memory_Erasing 1C77  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D4  
                 __size_of_Exception_Main 00D5                             Division@value 0078  
         __end_of_DelayOff_Initialization 1B5F                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B63                       ??_RF_Initialization 0022  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAC  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0072  
        __size_of_setDimmerLights_Dimming 005E               getDimmer_Load_Status@status 0021  
    __size_of_Flash_Memory_Initialization 00F3               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0066                     setMemory_Data@address 0023  
                   __end_of_DelayTime_1us 110A                   __end_of_CC2500_ReadByte 1FC4  
            __end_of_setSw_Initialization 1CE2                           _Timeout_Counter 1E91  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 0060  
                            _RF_RxDisable 1CC3                __end_of_LED_Initialization 1B67  
          __end_of_setTemp_Initialization 1B4C                               Division@num 0075  
                 setMemory_Modify@command 0022                   DimmerLights_IOC_1@count 007C  
               __end_of_RF_Initialization 1B55                     __end_of_CC2500_RxData 0967  
                   __end_of_CC2500_TxData 08F9                     _setLoad_AH_AL_Restore 1000  
                 __end_of_CC2500_PowerRST 1458  
