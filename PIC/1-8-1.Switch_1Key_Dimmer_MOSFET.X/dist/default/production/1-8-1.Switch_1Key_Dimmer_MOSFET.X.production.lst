

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 16 16:12:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	intentry,global,class=CODE,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,delta=2
   172                           	dabs	1,0x7E,2
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020D                     	;# 
   246  0210                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  029A                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0090                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  0116                     	;# 
   331  0117                     	;# 
   332  011D                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0194                     	;# 
   342  0195                     	;# 
   343  0196                     	;# 
   344  0197                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019C                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020D                     	;# 
   357  0210                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  0394                     	;# 
   382  0395                     	;# 
   383  0396                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0116                     	;# 
   442  0117                     	;# 
   443  011D                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0197                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020D                     	;# 
   468  0210                     	;# 
   469  0211                     	;# 
   470  0211                     	;# 
   471  0212                     	;# 
   472  0212                     	;# 
   473  0213                     	;# 
   474  0213                     	;# 
   475  0214                     	;# 
   476  0214                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0216                     	;# 
   481  0216                     	;# 
   482  0217                     	;# 
   483  0217                     	;# 
   484  0291                     	;# 
   485  0291                     	;# 
   486  0292                     	;# 
   487  0293                     	;# 
   488  0298                     	;# 
   489  0298                     	;# 
   490  0299                     	;# 
   491  029A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0FE4                     	;# 
   496  0FE5                     	;# 
   497  0FE6                     	;# 
   498  0FE7                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEF                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0008                     	;# 
   515  0009                     	;# 
   516  000A                     	;# 
   517  000B                     	;# 
   518  000C                     	;# 
   519  000D                     	;# 
   520  000E                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  010C                     	;# 
   550  010D                     	;# 
   551  010E                     	;# 
   552  0116                     	;# 
   553  0117                     	;# 
   554  011D                     	;# 
   555  018C                     	;# 
   556  018D                     	;# 
   557  018E                     	;# 
   558  0191                     	;# 
   559  0191                     	;# 
   560  0192                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0194                     	;# 
   564  0195                     	;# 
   565  0196                     	;# 
   566  0197                     	;# 
   567  0199                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020D                     	;# 
   579  0210                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0291                     	;# 
   596  0291                     	;# 
   597  0292                     	;# 
   598  0293                     	;# 
   599  0298                     	;# 
   600  0298                     	;# 
   601  0299                     	;# 
   602  029A                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000D                     	;# 
   631  000E                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0090                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  011D                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019C                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020D                     	;# 
   690  0210                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  0010                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  008E                     	;# 
   758  0090                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0197                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019C                     	;# 
   797  019D                     	;# 
   798  019E                     	;# 
   799  019F                     	;# 
   800  020D                     	;# 
   801  0210                     	;# 
   802  0211                     	;# 
   803  0211                     	;# 
   804  0212                     	;# 
   805  0212                     	;# 
   806  0213                     	;# 
   807  0213                     	;# 
   808  0214                     	;# 
   809  0214                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0217                     	;# 
   817  0291                     	;# 
   818  0291                     	;# 
   819  0292                     	;# 
   820  0293                     	;# 
   821  0298                     	;# 
   822  0298                     	;# 
   823  0299                     	;# 
   824  029A                     	;# 
   825  0394                     	;# 
   826  0395                     	;# 
   827  0396                     	;# 
   828  0FE4                     	;# 
   829  0FE5                     	;# 
   830  0FE6                     	;# 
   831  0FE7                     	;# 
   832  0FE8                     	;# 
   833  0FE9                     	;# 
   834  0FEA                     	;# 
   835  0FEB                     	;# 
   836  0FED                     	;# 
   837  0FEE                     	;# 
   838  0FEF                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0008                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0016                     	;# 
   860  0017                     	;# 
   861  0018                     	;# 
   862  0019                     	;# 
   863  001A                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  008C                     	;# 
   867  008D                     	;# 
   868  008E                     	;# 
   869  0090                     	;# 
   870  0091                     	;# 
   871  0092                     	;# 
   872  0095                     	;# 
   873  0096                     	;# 
   874  0097                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  010C                     	;# 
   883  010D                     	;# 
   884  010E                     	;# 
   885  0116                     	;# 
   886  0117                     	;# 
   887  011D                     	;# 
   888  018C                     	;# 
   889  018D                     	;# 
   890  018E                     	;# 
   891  0191                     	;# 
   892  0191                     	;# 
   893  0192                     	;# 
   894  0193                     	;# 
   895  0193                     	;# 
   896  0194                     	;# 
   897  0195                     	;# 
   898  0196                     	;# 
   899  0197                     	;# 
   900  0199                     	;# 
   901  019A                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019D                     	;# 
   909  019E                     	;# 
   910  019F                     	;# 
   911  020D                     	;# 
   912  0210                     	;# 
   913  0211                     	;# 
   914  0211                     	;# 
   915  0212                     	;# 
   916  0212                     	;# 
   917  0213                     	;# 
   918  0213                     	;# 
   919  0214                     	;# 
   920  0214                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0216                     	;# 
   925  0216                     	;# 
   926  0217                     	;# 
   927  0217                     	;# 
   928  0291                     	;# 
   929  0291                     	;# 
   930  0292                     	;# 
   931  0293                     	;# 
   932  0298                     	;# 
   933  0298                     	;# 
   934  0299                     	;# 
   935  029A                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE9                     	;# 
   945  0FEA                     	;# 
   946  0FEB                     	;# 
   947  0FED                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000D                     	;# 
   964  000E                     	;# 
   965  0010                     	;# 
   966  0011                     	;# 
   967  0012                     	;# 
   968  0015                     	;# 
   969  0016                     	;# 
   970  0016                     	;# 
   971  0017                     	;# 
   972  0018                     	;# 
   973  0019                     	;# 
   974  001A                     	;# 
   975  001B                     	;# 
   976  001C                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0090                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0095                     	;# 
   984  0096                     	;# 
   985  0097                     	;# 
   986  0099                     	;# 
   987  009A                     	;# 
   988  009B                     	;# 
   989  009B                     	;# 
   990  009C                     	;# 
   991  009D                     	;# 
   992  009E                     	;# 
   993  010C                     	;# 
   994  010D                     	;# 
   995  010E                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0197                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020D                     	;# 
  1023  0210                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0291                     	;# 
  1040  0291                     	;# 
  1041  0292                     	;# 
  1042  0293                     	;# 
  1043  0298                     	;# 
  1044  0298                     	;# 
  1045  0299                     	;# 
  1046  029A                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  0FE4                     	;# 
  1051  0FE5                     	;# 
  1052  0FE6                     	;# 
  1053  0FE7                     	;# 
  1054  0FE8                     	;# 
  1055  0FE9                     	;# 
  1056  0FEA                     	;# 
  1057  0FEB                     	;# 
  1058  0FED                     	;# 
  1059  0FEE                     	;# 
  1060  0FEF                     	;# 
  1061  0000                     	;# 
  1062  0001                     	;# 
  1063  0002                     	;# 
  1064  0003                     	;# 
  1065  0004                     	;# 
  1066  0005                     	;# 
  1067  0006                     	;# 
  1068  0007                     	;# 
  1069  0008                     	;# 
  1070  0009                     	;# 
  1071  000A                     	;# 
  1072  000B                     	;# 
  1073  000C                     	;# 
  1074  000D                     	;# 
  1075  000E                     	;# 
  1076  0010                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0097                     	;# 
  1097  0099                     	;# 
  1098  009A                     	;# 
  1099  009B                     	;# 
  1100  009B                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009E                     	;# 
  1104  010C                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  0116                     	;# 
  1108  0117                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  018E                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0197                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020D                     	;# 
  1134  0210                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  0394                     	;# 
  1159  0395                     	;# 
  1160  0396                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  0010                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0015                     	;# 
  1191  0016                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  008C                     	;# 
  1200  008D                     	;# 
  1201  008E                     	;# 
  1202  0090                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010D                     	;# 
  1217  010E                     	;# 
  1218  0116                     	;# 
  1219  0117                     	;# 
  1220  011D                     	;# 
  1221  018C                     	;# 
  1222  018D                     	;# 
  1223  018E                     	;# 
  1224  0191                     	;# 
  1225  0191                     	;# 
  1226  0192                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0197                     	;# 
  1233  0199                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019C                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020D                     	;# 
  1245  0210                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0298                     	;# 
  1266  0298                     	;# 
  1267  0299                     	;# 
  1268  029A                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0FE4                     	;# 
  1273  0FE5                     	;# 
  1274  0FE6                     	;# 
  1275  0FE7                     	;# 
  1276  0FE8                     	;# 
  1277  0FE9                     	;# 
  1278  0FEA                     	;# 
  1279  0FEB                     	;# 
  1280  0FED                     	;# 
  1281  0FEE                     	;# 
  1282  0FEF                     	;# 
  1283  0000                     	;# 
  1284  0001                     	;# 
  1285  0002                     	;# 
  1286  0003                     	;# 
  1287  0004                     	;# 
  1288  0005                     	;# 
  1289  0006                     	;# 
  1290  0007                     	;# 
  1291  0008                     	;# 
  1292  0009                     	;# 
  1293  000A                     	;# 
  1294  000B                     	;# 
  1295  000C                     	;# 
  1296  000D                     	;# 
  1297  000E                     	;# 
  1298  0010                     	;# 
  1299  0011                     	;# 
  1300  0012                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0090                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0095                     	;# 
  1317  0096                     	;# 
  1318  0097                     	;# 
  1319  0099                     	;# 
  1320  009A                     	;# 
  1321  009B                     	;# 
  1322  009B                     	;# 
  1323  009C                     	;# 
  1324  009D                     	;# 
  1325  009E                     	;# 
  1326  010C                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  011D                     	;# 
  1332  018C                     	;# 
  1333  018D                     	;# 
  1334  018E                     	;# 
  1335  0191                     	;# 
  1336  0191                     	;# 
  1337  0192                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0194                     	;# 
  1341  0195                     	;# 
  1342  0196                     	;# 
  1343  0197                     	;# 
  1344  0199                     	;# 
  1345  019A                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020D                     	;# 
  1356  0210                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0212                     	;# 
  1361  0213                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0214                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0216                     	;# 
  1369  0216                     	;# 
  1370  0217                     	;# 
  1371  0217                     	;# 
  1372  0291                     	;# 
  1373  0291                     	;# 
  1374  0292                     	;# 
  1375  0293                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  0394                     	;# 
  1381  0395                     	;# 
  1382  0396                     	;# 
  1383  0FE4                     	;# 
  1384  0FE5                     	;# 
  1385  0FE6                     	;# 
  1386  0FE7                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEF                     	;# 
  1394  0000                     	;# 
  1395  0001                     	;# 
  1396  0002                     	;# 
  1397  0003                     	;# 
  1398  0004                     	;# 
  1399  0005                     	;# 
  1400  0006                     	;# 
  1401  0007                     	;# 
  1402  0008                     	;# 
  1403  0009                     	;# 
  1404  000A                     	;# 
  1405  000B                     	;# 
  1406  000C                     	;# 
  1407  000D                     	;# 
  1408  000E                     	;# 
  1409  0010                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008D                     	;# 
  1423  008E                     	;# 
  1424  0090                     	;# 
  1425  0091                     	;# 
  1426  0092                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  010C                     	;# 
  1438  010D                     	;# 
  1439  010E                     	;# 
  1440  0116                     	;# 
  1441  0117                     	;# 
  1442  011D                     	;# 
  1443  018C                     	;# 
  1444  018D                     	;# 
  1445  018E                     	;# 
  1446  0191                     	;# 
  1447  0191                     	;# 
  1448  0192                     	;# 
  1449  0193                     	;# 
  1450  0193                     	;# 
  1451  0194                     	;# 
  1452  0195                     	;# 
  1453  0196                     	;# 
  1454  0197                     	;# 
  1455  0199                     	;# 
  1456  019A                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019C                     	;# 
  1463  019D                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  020D                     	;# 
  1467  0210                     	;# 
  1468  0211                     	;# 
  1469  0211                     	;# 
  1470  0212                     	;# 
  1471  0212                     	;# 
  1472  0213                     	;# 
  1473  0213                     	;# 
  1474  0214                     	;# 
  1475  0214                     	;# 
  1476  0215                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0216                     	;# 
  1480  0216                     	;# 
  1481  0217                     	;# 
  1482  0217                     	;# 
  1483  0291                     	;# 
  1484  0291                     	;# 
  1485  0292                     	;# 
  1486  0293                     	;# 
  1487  0298                     	;# 
  1488  0298                     	;# 
  1489  0299                     	;# 
  1490  029A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000D                     	;# 
  1519  000E                     	;# 
  1520  0010                     	;# 
  1521  0011                     	;# 
  1522  0012                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008D                     	;# 
  1534  008E                     	;# 
  1535  0090                     	;# 
  1536  0091                     	;# 
  1537  0092                     	;# 
  1538  0095                     	;# 
  1539  0096                     	;# 
  1540  0097                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  010C                     	;# 
  1549  010D                     	;# 
  1550  010E                     	;# 
  1551  0116                     	;# 
  1552  0117                     	;# 
  1553  011D                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0194                     	;# 
  1563  0195                     	;# 
  1564  0196                     	;# 
  1565  0197                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020D                     	;# 
  1578  0210                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0298                     	;# 
  1599  0298                     	;# 
  1600  0299                     	;# 
  1601  029A                     	;# 
  1602  0394                     	;# 
  1603  0395                     	;# 
  1604  0396                     	;# 
  1605  0FE4                     	;# 
  1606  0FE5                     	;# 
  1607  0FE6                     	;# 
  1608  0FE7                     	;# 
  1609  0FE8                     	;# 
  1610  0FE9                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;# 
  1616  0000                     	;# 
  1617  0001                     	;# 
  1618  0002                     	;# 
  1619  0003                     	;# 
  1620  0004                     	;# 
  1621  0005                     	;# 
  1622  0006                     	;# 
  1623  0007                     	;# 
  1624  0008                     	;# 
  1625  0009                     	;# 
  1626  000A                     	;# 
  1627  000B                     	;# 
  1628  000C                     	;# 
  1629  000D                     	;# 
  1630  000E                     	;# 
  1631  0010                     	;# 
  1632  0011                     	;# 
  1633  0012                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008D                     	;# 
  1645  008E                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0092                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  0116                     	;# 
  1663  0117                     	;# 
  1664  011D                     	;# 
  1665  018C                     	;# 
  1666  018D                     	;# 
  1667  018E                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0197                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0291                     	;# 
  1706  0291                     	;# 
  1707  0292                     	;# 
  1708  0293                     	;# 
  1709  0298                     	;# 
  1710  0298                     	;# 
  1711  0299                     	;# 
  1712  029A                     	;# 
  1713  0394                     	;# 
  1714  0395                     	;# 
  1715  0396                     	;# 
  1716  0FE4                     	;# 
  1717  0FE5                     	;# 
  1718  0FE6                     	;# 
  1719  0FE7                     	;# 
  1720  0FE8                     	;# 
  1721  0FE9                     	;# 
  1722  0FEA                     	;# 
  1723  0FEB                     	;# 
  1724  0FED                     	;# 
  1725  0FEE                     	;# 
  1726  0FEF                     	;# 
  1727  0000                     	;# 
  1728  0001                     	;# 
  1729  0002                     	;# 
  1730  0003                     	;# 
  1731  0004                     	;# 
  1732  0005                     	;# 
  1733  0006                     	;# 
  1734  0007                     	;# 
  1735  0008                     	;# 
  1736  0009                     	;# 
  1737  000A                     	;# 
  1738  000B                     	;# 
  1739  000C                     	;# 
  1740  000D                     	;# 
  1741  000E                     	;# 
  1742  0010                     	;# 
  1743  0011                     	;# 
  1744  0012                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  008C                     	;# 
  1755  008D                     	;# 
  1756  008E                     	;# 
  1757  0090                     	;# 
  1758  0091                     	;# 
  1759  0092                     	;# 
  1760  0095                     	;# 
  1761  0096                     	;# 
  1762  0097                     	;# 
  1763  0099                     	;# 
  1764  009A                     	;# 
  1765  009B                     	;# 
  1766  009B                     	;# 
  1767  009C                     	;# 
  1768  009D                     	;# 
  1769  009E                     	;# 
  1770  010C                     	;# 
  1771  010D                     	;# 
  1772  010E                     	;# 
  1773  0116                     	;# 
  1774  0117                     	;# 
  1775  011D                     	;# 
  1776  018C                     	;# 
  1777  018D                     	;# 
  1778  018E                     	;# 
  1779  0191                     	;# 
  1780  0191                     	;# 
  1781  0192                     	;# 
  1782  0193                     	;# 
  1783  0193                     	;# 
  1784  0194                     	;# 
  1785  0195                     	;# 
  1786  0196                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  019A                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019C                     	;# 
  1795  019C                     	;# 
  1796  019D                     	;# 
  1797  019E                     	;# 
  1798  019F                     	;# 
  1799  020D                     	;# 
  1800  0210                     	;# 
  1801  0211                     	;# 
  1802  0211                     	;# 
  1803  0212                     	;# 
  1804  0212                     	;# 
  1805  0213                     	;# 
  1806  0213                     	;# 
  1807  0214                     	;# 
  1808  0214                     	;# 
  1809  0215                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0216                     	;# 
  1813  0216                     	;# 
  1814  0217                     	;# 
  1815  0217                     	;# 
  1816  0291                     	;# 
  1817  0291                     	;# 
  1818  0292                     	;# 
  1819  0293                     	;# 
  1820  0298                     	;# 
  1821  0298                     	;# 
  1822  0299                     	;# 
  1823  029A                     	;# 
  1824  0394                     	;# 
  1825  0395                     	;# 
  1826  0396                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0010                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0015                     	;# 
  1857  0016                     	;# 
  1858  0016                     	;# 
  1859  0017                     	;# 
  1860  0018                     	;# 
  1861  0019                     	;# 
  1862  001A                     	;# 
  1863  001B                     	;# 
  1864  001C                     	;# 
  1865  008C                     	;# 
  1866  008D                     	;# 
  1867  008E                     	;# 
  1868  0090                     	;# 
  1869  0091                     	;# 
  1870  0092                     	;# 
  1871  0095                     	;# 
  1872  0096                     	;# 
  1873  0097                     	;# 
  1874  0099                     	;# 
  1875  009A                     	;# 
  1876  009B                     	;# 
  1877  009B                     	;# 
  1878  009C                     	;# 
  1879  009D                     	;# 
  1880  009E                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  011D                     	;# 
  1887  018C                     	;# 
  1888  018D                     	;# 
  1889  018E                     	;# 
  1890  0191                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0197                     	;# 
  1899  0199                     	;# 
  1900  019A                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019C                     	;# 
  1906  019C                     	;# 
  1907  019D                     	;# 
  1908  019E                     	;# 
  1909  019F                     	;# 
  1910  020D                     	;# 
  1911  0210                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0298                     	;# 
  1932  0298                     	;# 
  1933  0299                     	;# 
  1934  029A                     	;# 
  1935  0394                     	;# 
  1936  0395                     	;# 
  1937  0396                     	;# 
  1938  0FE4                     	;# 
  1939  0FE5                     	;# 
  1940  0FE6                     	;# 
  1941  0FE7                     	;# 
  1942  0FE8                     	;# 
  1943  0FE9                     	;# 
  1944  0FEA                     	;# 
  1945  0FEB                     	;# 
  1946  0FED                     	;# 
  1947  0FEE                     	;# 
  1948  0FEF                     	;# 
  1949  0000                     	;# 
  1950  0001                     	;# 
  1951  0002                     	;# 
  1952  0003                     	;# 
  1953  0004                     	;# 
  1954  0005                     	;# 
  1955  0006                     	;# 
  1956  0007                     	;# 
  1957  0008                     	;# 
  1958  0009                     	;# 
  1959  000A                     	;# 
  1960  000B                     	;# 
  1961  000C                     	;# 
  1962  000D                     	;# 
  1963  000E                     	;# 
  1964  0010                     	;# 
  1965  0011                     	;# 
  1966  0012                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  001A                     	;# 
  1974  001B                     	;# 
  1975  001C                     	;# 
  1976  008C                     	;# 
  1977  008D                     	;# 
  1978  008E                     	;# 
  1979  0090                     	;# 
  1980  0091                     	;# 
  1981  0092                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0097                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  010C                     	;# 
  1993  010D                     	;# 
  1994  010E                     	;# 
  1995  0116                     	;# 
  1996  0117                     	;# 
  1997  011D                     	;# 
  1998  018C                     	;# 
  1999  018D                     	;# 
  2000  018E                     	;# 
  2001  0191                     	;# 
  2002  0191                     	;# 
  2003  0192                     	;# 
  2004  0193                     	;# 
  2005  0193                     	;# 
  2006  0194                     	;# 
  2007  0195                     	;# 
  2008  0196                     	;# 
  2009  0197                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019C                     	;# 
  2017  019C                     	;# 
  2018  019D                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  020D                     	;# 
  2022  0210                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0291                     	;# 
  2039  0291                     	;# 
  2040  0292                     	;# 
  2041  0293                     	;# 
  2042  0298                     	;# 
  2043  0298                     	;# 
  2044  0299                     	;# 
  2045  029A                     	;# 
  2046  0394                     	;# 
  2047  0395                     	;# 
  2048  0396                     	;# 
  2049  0FE4                     	;# 
  2050  0FE5                     	;# 
  2051  0FE6                     	;# 
  2052  0FE7                     	;# 
  2053  0FE8                     	;# 
  2054  0FE9                     	;# 
  2055  0FEA                     	;# 
  2056  0FEB                     	;# 
  2057  0FED                     	;# 
  2058  0FEE                     	;# 
  2059  0FEF                     	;# 
  2060  0000                     	;# 
  2061  0001                     	;# 
  2062  0002                     	;# 
  2063  0003                     	;# 
  2064  0004                     	;# 
  2065  0005                     	;# 
  2066  0006                     	;# 
  2067  0007                     	;# 
  2068  0008                     	;# 
  2069  0009                     	;# 
  2070  000A                     	;# 
  2071  000B                     	;# 
  2072  000C                     	;# 
  2073  000D                     	;# 
  2074  000E                     	;# 
  2075  0010                     	;# 
  2076  0011                     	;# 
  2077  0012                     	;# 
  2078  0015                     	;# 
  2079  0016                     	;# 
  2080  0016                     	;# 
  2081  0017                     	;# 
  2082  0018                     	;# 
  2083  0019                     	;# 
  2084  001A                     	;# 
  2085  001B                     	;# 
  2086  001C                     	;# 
  2087  008C                     	;# 
  2088  008D                     	;# 
  2089  008E                     	;# 
  2090  0090                     	;# 
  2091  0091                     	;# 
  2092  0092                     	;# 
  2093  0095                     	;# 
  2094  0096                     	;# 
  2095  0097                     	;# 
  2096  0099                     	;# 
  2097  009A                     	;# 
  2098  009B                     	;# 
  2099  009B                     	;# 
  2100  009C                     	;# 
  2101  009D                     	;# 
  2102  009E                     	;# 
  2103  010C                     	;# 
  2104  010D                     	;# 
  2105  010E                     	;# 
  2106  0116                     	;# 
  2107  0117                     	;# 
  2108  011D                     	;# 
  2109  018C                     	;# 
  2110  018D                     	;# 
  2111  018E                     	;# 
  2112  0191                     	;# 
  2113  0191                     	;# 
  2114  0192                     	;# 
  2115  0193                     	;# 
  2116  0193                     	;# 
  2117  0194                     	;# 
  2118  0195                     	;# 
  2119  0196                     	;# 
  2120  0197                     	;# 
  2121  0199                     	;# 
  2122  019A                     	;# 
  2123  019B                     	;# 
  2124  019B                     	;# 
  2125  019B                     	;# 
  2126  019B                     	;# 
  2127  019C                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020D                     	;# 
  2133  0210                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0291                     	;# 
  2150  0291                     	;# 
  2151  0292                     	;# 
  2152  0293                     	;# 
  2153  0298                     	;# 
  2154  0298                     	;# 
  2155  0299                     	;# 
  2156  029A                     	;# 
  2157  0394                     	;# 
  2158  0395                     	;# 
  2159  0396                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171                           
  2172                           	psect	idataBANK3
  2173  1EE5                     __pidataBANK3:	
  2174                           
  2175                           ;initializer for __product
  2176  1EE5  3463               	retlw	99
  2177  1EE6  3402               	retlw	2
  2178  1EE7  3400               	retlw	0
  2179  1EE8  3400               	retlw	0
  2180  1EE9  3400               	retlw	0
  2181  1EEA  3400               	retlw	0
  2182  1EEB  3400               	retlw	0
  2183  1EEC  3400               	retlw	0
  2184  1EED  3400               	retlw	0
  2185  1EEE  3400               	retlw	0
  2186  1EEF  3400               	retlw	0
  2187  1EF0  3400               	retlw	0
  2188  1EF1  34FF               	retlw	255
  2189  1EF2  34FF               	retlw	255
  2190  1EF3  34FF               	retlw	255
  2191  1EF4  3400               	retlw	0
  2192  1EF5  3400               	retlw	0
  2193  1EF6  3400               	retlw	0
  2194  1EF7  3400               	retlw	0
  2195  1EF8  3400               	retlw	0
  2196  1EF9  3400               	retlw	0
  2197  1EFA  3400               	retlw	0
  2198  1EFB  3400               	retlw	0
  2199  1EFC  3400               	retlw	0
  2200  1EFD  3400               	retlw	0
  2201  1EFE  3400               	retlw	0
  2202  1EFF  3400               	retlw	0
  2203  1F00  3400               	retlw	0
  2204  1F01  3400               	retlw	0
  2205  1F02  3400               	retlw	0
  2206  1F03  3400               	retlw	0
  2207  1F04  3400               	retlw	0
  2208                           
  2209                           	psect	stringtext
  2210  1800                     __pstringtext:	
  2211  1800                     _CC2500_registers_address:	
  2212  1800  3403               	retlw	3
  2213  1801  3416               	retlw	22
  2214  1802  3417               	retlw	23
  2215  1803  341E               	retlw	30
  2216  1804  341F               	retlw	31
  2217  1805  3420               	retlw	32
  2218  1806  342A               	retlw	42
  2219  1807  342B               	retlw	43
  2220  1808  340B               	retlw	11
  2221  1809  340C               	retlw	12
  2222  180A  340D               	retlw	13
  2223  180B  340E               	retlw	14
  2224  180C  340F               	retlw	15
  2225  180D  3410               	retlw	16
  2226  180E  3411               	retlw	17
  2227  180F  3412               	retlw	18
  2228  1810  3413               	retlw	19
  2229  1811  3414               	retlw	20
  2230  1812  340A               	retlw	10
  2231  1813  3415               	retlw	21
  2232  1814  3421               	retlw	33
  2233  1815  3422               	retlw	34
  2234  1816  3418               	retlw	24
  2235  1817  3419               	retlw	25
  2236  1818  341A               	retlw	26
  2237  1819  341B               	retlw	27
  2238  181A  341C               	retlw	28
  2239  181B  341D               	retlw	29
  2240  181C  3423               	retlw	35
  2241  181D  3424               	retlw	36
  2242  181E  3425               	retlw	37
  2243  181F  3426               	retlw	38
  2244  1820  3429               	retlw	41
  2245  1821  342C               	retlw	44
  2246  1822  342D               	retlw	45
  2247  1823  342E               	retlw	46
  2248  1824  3400               	retlw	0
  2249  1825  3401               	retlw	1
  2250  1826  3402               	retlw	2
  2251  1827  3407               	retlw	7
  2252  1828  3408               	retlw	8
  2253  1829  3409               	retlw	9
  2254  182A  3406               	retlw	6
  2255  182B  3404               	retlw	4
  2256  182C  3405               	retlw	5
  2257  182D  3427               	retlw	39
  2258  182E  3428               	retlw	40
  2259  182F                     __end_of_CC2500_registers_address:	
  2260  182F                     _CC2500_rfSettings:	
  2261  182F  3407               	retlw	7
  2262  1830  3407               	retlw	7
  2263  1831  3430               	retlw	48
  2264  1832  3487               	retlw	135
  2265  1833  346B               	retlw	107
  2266  1834  34F8               	retlw	248
  2267  1835  347F               	retlw	127
  2268  1836  343F               	retlw	63
  2269  1837  3409               	retlw	9
  2270  1838  3400               	retlw	0
  2271  1839  345C               	retlw	92
  2272  183A  34A7               	retlw	167
  2273  183B  3462               	retlw	98
  2274  183C  3486               	retlw	134
  2275  183D  3483               	retlw	131
  2276  183E  3403               	retlw	3
  2277  183F  3422               	retlw	34
  2278  1840  34F8               	retlw	248
  2279  1841  3400               	retlw	0
  2280  1842  3444               	retlw	68
  2281  1843  34B6               	retlw	182
  2282  1844  3410               	retlw	16
  2283  1845  3418               	retlw	24
  2284  1846  341D               	retlw	29
  2285  1847  341C               	retlw	28
  2286  1848  34C7               	retlw	199
  2287  1849  3400               	retlw	0
  2288  184A  34B2               	retlw	178
  2289  184B  34EA               	retlw	234
  2290  184C  340A               	retlw	10
  2291  184D  3400               	retlw	0
  2292  184E  3411               	retlw	17
  2293  184F  3459               	retlw	89
  2294  1850  3488               	retlw	136
  2295  1851  3431               	retlw	49
  2296  1852  340B               	retlw	11
  2297  1853  342F               	retlw	47
  2298  1854  342E               	retlw	46
  2299  1855  3406               	retlw	6
  2300  1856  3404               	retlw	4
  2301  1857  3405               	retlw	5
  2302  1858  3400               	retlw	0
  2303  1859  3430               	retlw	48
  2304  185A  34D3               	retlw	211
  2305  185B  3491               	retlw	145
  2306  185C  3441               	retlw	65
  2307  185D  3400               	retlw	0
  2308  185E                     __end_of_CC2500_rfSettings:	
  2309  185E                     _CC2500_patable_vaule:	
  2310  185E  34FE               	retlw	254
  2311  185F  34FE               	retlw	254
  2312  1860  34FE               	retlw	254
  2313  1861  34FE               	retlw	254
  2314  1862  34FE               	retlw	254
  2315  1863  34FE               	retlw	254
  2316  1864  34FE               	retlw	254
  2317  1865  34FE               	retlw	254
  2318  1866                     __end_of_CC2500_patable_vaule:	
  2319                           
  2320                           	psect	nvBANK1
  2321  00EE                     __pnvBANK1:	
  2322  00EE                     _product:	
  2323  00EE                     	ds	1
  2324  000C                     _PORTA	set	12
  2325  000D                     _PORTB	set	13
  2326  000E                     _PORTC	set	14
  2327  0018                     _T1CON	set	24
  2328  0017                     _TMR1H	set	23
  2329  0016                     _TMR1L	set	22
  2330  005F                     _GIE	set	95
  2331  005B                     _IOCIE	set	91
  2332  0058                     _IOCIF	set	88
  2333  005E                     _PEIE	set	94
  2334  0060                     _RA0	set	96
  2335  0064                     _RA4	set	100
  2336  0066                     _RA6	set	102
  2337  0067                     _RA7	set	103
  2338  0068                     _RB0	set	104
  2339  0069                     _RB1	set	105
  2340  006A                     _RB2	set	106
  2341  006B                     _RB3	set	107
  2342  006D                     _RB5	set	109
  2343  0070                     _RC0	set	112
  2344  0071                     _RC1	set	113
  2345  0073                     _RC3	set	115
  2346  0074                     _RC4	set	116
  2347  0075                     _RC5	set	117
  2348  0088                     _TMR1IF	set	136
  2349  009D                     _ADCON0	set	157
  2350  009E                     _ADCON1	set	158
  2351  009C                     _ADRESH	set	156
  2352  009B                     _ADRESL	set	155
  2353  0099                     _OSCCON	set	153
  2354  008C                     _TRISA	set	140
  2355  008D                     _TRISB	set	141
  2356  008E                     _TRISC	set	142
  2357  0097                     _WDTCON	set	151
  2358  04E9                     _GO_nDONE	set	1257
  2359  0488                     _TMR1IE	set	1160
  2360  0117                     _FVRCON	set	279
  2361  010C                     _LATA	set	268
  2362  010D                     _LATB	set	269
  2363  010E                     _LATC	set	270
  2364  018C                     _ANSELA	set	396
  2365  018D                     _ANSELB	set	397
  2366  018E                     _ANSELC	set	398
  2367  0192                     _PMADRH	set	402
  2368  0191                     _PMADRL	set	401
  2369  0196                     _PMCON2	set	406
  2370  0194                     _PMDATH	set	404
  2371  0193                     _PMDATL	set	403
  2372  0CAE                     _CFGS	set	3246
  2373  0CAC                     _FREE	set	3244
  2374  0CAD                     _LWLO	set	3245
  2375  0CA8                     _RD	set	3240
  2376  0CA9                     _WR	set	3241
  2377  0CAA                     _WREN	set	3242
  2378  020D                     _WPUB	set	525
  2379  0396                     _IOCBF	set	918
  2380  0395                     _IOCBN	set	917
  2381  0394                     _IOCBP	set	916
  2382  1CB2                     _IOCBF2	set	7346
  2383                           
  2384                           ; #config settings
  2385  0000                     
  2386                           	psect	cinit
  2387  0021                     start_initialization:	
  2388  0021                     __initialization:	
  2389                           
  2390                           ; Clear objects allocated to BITCOMMON
  2391  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BITBANK1
  2394  0022  0021               	movlb	1	; select bank1
  2395  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2396                           
  2397                           ; Clear objects allocated to BANK1
  2398  0024  30A0               	movlw	low __pbssBANK1
  2399  0025  0084               	movwf	4
  2400  0026  3000               	movlw	high __pbssBANK1
  2401  0027  0085               	movwf	5
  2402  0028  3045               	movlw	69
  2403  0029  319A  220A  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK2
  2406  002C  3020               	movlw	low __pbssBANK2
  2407  002D  0084               	movwf	4
  2408  002E  3001               	movlw	high __pbssBANK2
  2409  002F  0085               	movwf	5
  2410  0030  304D               	movlw	77
  2411  0031  319A  220A  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK3
  2414  0034  30A0               	movlw	low __pbssBANK3
  2415  0035  0084               	movwf	4
  2416  0036  3001               	movlw	high __pbssBANK3
  2417  0037  0085               	movwf	5
  2418  0038  302C               	movlw	44
  2419  0039  319A  220A  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Clear objects allocated to BANK4
  2422  003C  3020               	movlw	low __pbssBANK4
  2423  003D  0084               	movwf	4
  2424  003E  3002               	movlw	high __pbssBANK4
  2425  003F  0085               	movwf	5
  2426  0040  3025               	movlw	37
  2427  0041  319A  220A  3180   	fcall	clear_ram0
  2428                           
  2429                           ; Initialize objects allocated to BANK3
  2430  0044  30E5               	movlw	low __pidataBANK3
  2431  0045  0084               	movwf	4
  2432  0046  309E               	movlw	(high __pidataBANK3)| (0+128)
  2433  0047  0085               	movwf	5
  2434  0048  30CC               	movlw	low __pdataBANK3
  2435  0049  0086               	movwf	6
  2436  004A  3001               	movlw	high __pdataBANK3
  2437  004B  0087               	movwf	7
  2438  004C  3020               	movlw	32
  2439  004D  319A  2204         	fcall	init_ram
  2440  004F                     end_of_initialization:	
  2441                           ;End of C runtime variable initialization code
  2442                           
  2443  004F                     __end_of__initialization:	
  2444  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2445  0050  0020               	movlb	0
  2446  0051  3194  2C87         	ljmp	_main	;jump to C main() function
  2447                           
  2448                           	psect	bitbssCOMMON
  2449  03E8                     __pbitbssCOMMON:	
  2450  03E8                     _Transceive_OK:	
  2451  03E8                     	ds	1
  2452                           
  2453                           	psect	bitbssBANK1
  2454  0778                     __pbitbssBANK1:	
  2455  0778                     _Receive_OK:	
  2456  0778                     	ds	1
  2457                           
  2458                           	psect	bssBANK1
  2459  00A0                     __pbssBANK1:	
  2460  00A0                     _RF1:	
  2461  00A0                     	ds	15
  2462  00AF                     _myMain:	
  2463  00AF                     	ds	13
  2464  00BC                     _DimmerIntr1:	
  2465  00BC                     	ds	12
  2466  00C8                     _CRC:	
  2467  00C8                     	ds	1
  2468  00C9                     _Cmd:	
  2469  00C9                     	ds	1
  2470  00CA                     _DelayOff:	
  2471  00CA                     	ds	1
  2472  00CB                     _DimmerIntr:	
  2473  00CB                     	ds	1
  2474  00CC                     _DimmerLights:	
  2475  00CC                     	ds	1
  2476  00CD                     _LED:	
  2477  00CD                     	ds	1
  2478  00CE                     _RSSI:	
  2479  00CE                     	ds	1
  2480  00CF                     _Rx_Length:	
  2481  00CF                     	ds	1
  2482  00D0                     _SPI0Buffer:	
  2483  00D0                     	ds	1
  2484  00D1                     _Sw:	
  2485  00D1                     	ds	1
  2486  00D2                     _SwDetect:	
  2487  00D2                     	ds	1
  2488  00D3                     _Tx_Length:	
  2489  00D3                     	ds	1
  2490  00D4                     _r_address:	
  2491  00D4                     	ds	1
  2492  00D5                     _r_data:	
  2493  00D5                     	ds	1
  2494  00D6                     _s_data:	
  2495  00D6                     	ds	1
  2496  00D7                     _Temp:	
  2497  00D7                     	ds	14
  2498                           
  2499                           	psect	bssBANK2
  2500  0120                     __pbssBANK2:	
  2501  0120                     _Buz1:	
  2502  0120                     	ds	12
  2503  012C                     _Dimmer:	
  2504  012C                     	ds	5
  2505  0131                     _Timer1:	
  2506  0131                     	ds	3
  2507  0134                     _RF_Count:	
  2508  0134                     	ds	2
  2509  0136                     _WDT:	
  2510  0136                     	ds	2
  2511  0138                     _Light:	
  2512  0138                     	ds	1
  2513  0139                     _Load:	
  2514  0139                     	ds	40
  2515  0161                     _DimmerLights1:	
  2516  0161                     	ds	8
  2517  0169                     _VarErrLED:	
  2518  0169                     	ds	4
  2519                           
  2520                           	psect	bssBANK3
  2521  01A0                     __pbssBANK3:	
  2522  01A0                     _RF_Data:	
  2523  01A0                     	ds	30
  2524  01BE                     _Sw1:	
  2525  01BE                     	ds	9
  2526  01C7                     _DlySw1:	
  2527  01C7                     	ds	5
  2528                           
  2529                           	psect	dataBANK3
  2530  01CC                     __pdataBANK3:	
  2531  01CC                     __product:	
  2532  01CC                     	ds	32
  2533                           
  2534                           	psect	bssBANK4
  2535  0220                     __pbssBANK4:	
  2536  0220                     _Memory:	
  2537  0220                     	ds	37
  2538                           
  2539                           	psect	clrtext
  2540  1A0A                     clear_ram0:	
  2541                           ;	Called with FSR0 containing the base address, and
  2542                           ;	WREG with the size to clear
  2543                           
  2544  1A0A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2545  1A0B                     clrloop0:	
  2546  1A0B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2547  1A0C  3101               	addfsr 0,1
  2548  1A0D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2549  1A0E  2A0B               	goto	clrloop0	;have we reached the end yet?
  2550  1A0F  3400               	retlw	0	;all done for this memory range, return
  2551                           
  2552                           	psect	inittext
  2553  1A04                     init_ram:	
  2554  1A04  00FE               	movwf	126
  2555  1A05                     initloop:	
  2556  1A05  0012               	moviw fsr0++
  2557  1A06  001E               	movwi fsr1++
  2558  1A07  0BFE               	decfsz	126,f
  2559  1A08  2A05               	goto	initloop
  2560  1A09  3400               	retlw	0
  2561                           
  2562                           	psect	cstackBANK1
  2563  00E5                     __pcstackBANK1:	
  2564  00E5                     setDimmerLights_OnOff@lights:	
  2565  00E5                     setRFSW_Control@status:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568                           
  2569                           ; 1 bytes @ 0x0
  2570  00E5                     	ds	1
  2571  00E6                     setDimmerLights_Main@lights:	
  2572  00E6                     setRFSW_Control@rfDimming:	
  2573                           ; 1 bytes @ 0x1
  2574                           
  2575                           
  2576                           ; 1 bytes @ 0x1
  2577  00E6                     	ds	1
  2578  00E7                     setRFSW_Control@sw:	
  2579                           
  2580                           ; 1 bytes @ 0x2
  2581  00E7                     	ds	1
  2582  00E8                     ??_setRF_Main:	
  2583                           
  2584                           ; 0 bytes @ 0x3
  2585  00E8                     	ds	1
  2586  00E9                     setRF_Main@error:	
  2587                           
  2588                           ; 1 bytes @ 0x4
  2589  00E9                     	ds	1
  2590  00EA                     ?_main:	
  2591  00EA                     main@argc:	
  2592                           ; 2 bytes @ 0x5
  2593                           
  2594                           
  2595                           ; 2 bytes @ 0x5
  2596  00EA                     	ds	2
  2597  00EC                     main@argv:	
  2598                           
  2599                           ; 2 bytes @ 0x7
  2600  00EC                     	ds	2
  2601                           
  2602                           	psect	cstackCOMMON
  2603  0070                     __pcstackCOMMON:	
  2604  0070                     ?_CC2500_WriteCommand:	
  2605  0070                     ?_RF_Timeout_Counter:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setRF_TimeoutCleared:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_WriteByte:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_ReadStatus:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_ReadByte:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_PowerRST:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_InitSetREG:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_InitPATable:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ClearTXFIFO:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_ClearRXFIFO:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_FrequencyCabr:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_SIDLEMode:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DlyOff_Initialization:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_DlyOff_Main:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_SwOn:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_SwOff:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setMemory_Modify:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_DimmerLights_DimmingFunction:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_Line:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_DimmingClose:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setTxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setRF_TransceiveGO:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setLED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setLED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_Fosc_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IO_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_TMR1_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_ADC_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_WDT_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_TMR1_ISR:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_ISR:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Timeout_Counter:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_set_TimeoutCleared:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Write:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Modify:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Clearing:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_myMain_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Temp_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Load_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Switch_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_RF_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getLoad_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_getTemp_AD:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_my_MainTimer:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Temp_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Load_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Switch_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Exception_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setLoad_AH_AL_Restore:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setTemp_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setTemp_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setOverTemp_ADV_Restore:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRF_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRF_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_RF_RxDisable:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_getRxData:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setLog_Code:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setControl_Lights_Table:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setRFSW_Control:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setRFSW_AdjControl:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setRF_AdjControl:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setSw_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setSw_Main:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_Buzzer_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_Buzzer_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_CC2500_TxData:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_CC2500_RxData:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_CC2500_PowerOnInitial:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DelayOffPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DelayOff_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DelayOff_Main:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerIntr_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_SelectPointer:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_Initialization:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_DimmingOn:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerLights_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_TMR_1:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ??_DimmerLights_TMR_1:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_DimmerLights_IOC_1:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LedPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Main:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Mcu_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_ISR:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_LoopSave:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_WDT_Main:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_setRF_Learn:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_TouchPower:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_SwPointSelect:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_getDimmerLights_Status:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_ValueToPercent:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_PercentToValue:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getLoad_OK:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_All_Error_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_LightsStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDimmerLights_Allow_Condition:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getCmd_Status:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_Flash_Memory_Read:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getAll_Sw_KeyStatus:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getRF_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getSw_KeyStatus:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDelayOff_GO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerIntr_DimmingValue:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_Line:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmer_LoadGO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_Load_Status:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getMain_Lights_Count:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?i1___lbdiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     setDimmerLights_Initialization@lights:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     getDimmerLights_Allow_Condition@lights:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     getSw_KeyStatus@sw:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     i1___lbdiv@divisor:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x0
  2973  0070                     	ds	1
  2974  0071                     ??_TMR1_ISR:	
  2975  0071                     ??i1___lbdiv:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978                           
  2979                           ; 0 bytes @ 0x1
  2980  0071                     	ds	1
  2981  0072                     i1___lbdiv@dividend:	
  2982                           
  2983                           ; 1 bytes @ 0x2
  2984  0072                     	ds	1
  2985  0073                     i1___lbdiv@counter:	
  2986                           
  2987                           ; 1 bytes @ 0x3
  2988  0073                     	ds	1
  2989  0074                     i1___lbdiv@quotient:	
  2990                           
  2991                           ; 1 bytes @ 0x4
  2992  0074                     	ds	1
  2993  0075                     ?i1_Division:	
  2994  0075                     i1Division@num:	
  2995                           ; 1 bytes @ 0x5
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x5
  2999  0075                     	ds	1
  3000  0076                     ??i1_Division:	
  3001                           
  3002                           ; 0 bytes @ 0x6
  3003  0076                     	ds	2
  3004  0078                     i1Division@value:	
  3005                           
  3006                           ; 1 bytes @ 0x8
  3007  0078                     	ds	1
  3008  0079                     i1Division@result:	
  3009                           
  3010                           ; 1 bytes @ 0x9
  3011  0079                     	ds	1
  3012  007A                     ??_DimmerLights_IOC_1:	
  3013                           
  3014                           ; 0 bytes @ 0xA
  3015  007A                     	ds	2
  3016  007C                     ??_IOC_ISR:	
  3017  007C                     ??_ISR:	
  3018                           ; 0 bytes @ 0xC
  3019                           
  3020                           
  3021                           ; 0 bytes @ 0xC
  3022  007C                     	ds	1
  3023                           
  3024                           	psect	cstackBANK0
  3025  0020                     __pcstackBANK0:	
  3026  0020                     ??_RF_Timeout_Counter:	
  3027  0020                     ??_setRF_TimeoutCleared:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_CC2500_WriteByte:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_CC2500_ReadByte:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ?_DelayTime_1us:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_setMemory_Modify:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_setDimmerLights_Initialization:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getLoad_OK:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_getMain_All_Error_Status:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_getMain_All_LightsStatus:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_DimmerLights_DimmingFunction:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_setDimmerLights_Line:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_getCmd_Status:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ?_setCmd_Status:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setTxData:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_setRF_TransceiveGO:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_Fosc_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_IO_Set:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_TMR1_Set:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_ADC_Set:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_IOC_Set:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_WDT_Set:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_Timeout_Counter:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_set_TimeoutCleared:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_Flash_Memory_Read:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ?_setMemory_Data:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_Flash_Memory_Write:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_getAll_Sw_KeyStatus:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_WDT_Clearing:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_myMain_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_Temp_Initialization:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_setLoad_AH_AL_Restore:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_setTemp_Initialization:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_setOverTemp_ADV_Restore:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_setRF_Initialization:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_getRF_KeyStatus:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_getSw_KeyStatus:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_Buzzer_Initialization:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_Buzzer_Main:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ??_DelayOffPointSelect:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_setDimmerIntr_ControlStatus:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getDimmerIntr_DimmingValue:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmerIntr_Dimming_Sw:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ?_setDimmerIntr_Dimming_RF:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_DimmerLights_SelectPointer:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_getDimmerLights_Line:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_getDimmer_LoadGO:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_getDimmer_Load_Status:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_LedPointSelect:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_Flash_Memory_Unlock:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_Flash_Memory_Erasing:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ??_setMemory_LoopSave:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ??_WDT_Main:	
  3187                           ; 0 bytes @ 0x0
  3188                           
  3189  0020                     ??_getMain_Lights_Count:	
  3190                           ; 0 bytes @ 0x0
  3191                           
  3192  0020                     ??_setRF_Learn:	
  3193                           ; 0 bytes @ 0x0
  3194                           
  3195  0020                     ??_TouchPower:	
  3196                           ; 0 bytes @ 0x0
  3197                           
  3198  0020                     ??_SwPointSelect:	
  3199                           ; 0 bytes @ 0x0
  3200                           
  3201  0020                     ?___bmul:	
  3202                           ; 0 bytes @ 0x0
  3203                           
  3204  0020                     ?___lbdiv:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0020                     ?_getBuz_GO:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0020                     ?_getAD:	
  3211                           ; 2 bytes @ 0x0
  3212                           
  3213  0020                     ?___wmul:	
  3214                           ; 2 bytes @ 0x0
  3215                           
  3216  0020                     ?___awdiv:	
  3217                           ; 2 bytes @ 0x0
  3218                           
  3219  0020                     ?___lwdiv:	
  3220                           ; 2 bytes @ 0x0
  3221                           
  3222  0020                     ?___ftpack:	
  3223                           ; 2 bytes @ 0x0
  3224                           
  3225  0020                     setDimmerIntr_ControlStatus@command:	
  3226                           ; 3 bytes @ 0x0
  3227                           
  3228  0020                     setDimmerIntr_Dimming_Sw@command:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     getDimmerIntr_Dimming_Sw@lights:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     setDimmerIntr_Dimming_RF@command:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     setDimmerLights_Line@lights:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     getDimmerLights_Line@line:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getDimmer_LoadGO@loadgo:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     getDimmer_Load_Status@status:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     getAD@adcon1:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     setMemory_Data@data:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0020                     getMain_All_LightsStatus@status:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0020                     getMain_Lights_Count@count:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0020                     setCmd_Status@cmd:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0020                     getCmd_Status@number:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0020                     getLoad_OK@ok:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0020                     ___bmul@multiplicand:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0020                     ___lbdiv@divisor:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0020                     DelayTime_1us@count:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0020                     ___wmul@multiplier:	
  3283                           ; 2 bytes @ 0x0
  3284                           
  3285  0020                     ___awdiv@divisor:	
  3286                           ; 2 bytes @ 0x0
  3287                           
  3288  0020                     ___lwdiv@divisor:	
  3289                           ; 2 bytes @ 0x0
  3290                           
  3291  0020                     ___ftpack@arg:	
  3292                           ; 2 bytes @ 0x0
  3293                           
  3294                           
  3295                           ; 3 bytes @ 0x0
  3296  0020                     	ds	1
  3297  0021                     ??_getDimmerLights_Allow_Condition:	
  3298  0021                     ??_setCmd_Status:	
  3299                           ; 0 bytes @ 0x1
  3300                           
  3301  0021                     ??_setMemory_Data:	
  3302                           ; 0 bytes @ 0x1
  3303                           
  3304  0021                     ??_RF_Initialization:	
  3305                           ; 0 bytes @ 0x1
  3306                           
  3307  0021                     ??_setDimmerIntr_ControlStatus:	
  3308                           ; 0 bytes @ 0x1
  3309                           
  3310  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3311                           ; 0 bytes @ 0x1
  3312                           
  3313  0021                     ??_setDimmerIntr_Dimming_RF:	
  3314                           ; 0 bytes @ 0x1
  3315                           
  3316  0021                     ??_Mcu_Initialization:	
  3317                           ; 0 bytes @ 0x1
  3318                           
  3319  0021                     ??___bmul:	
  3320                           ; 0 bytes @ 0x1
  3321                           
  3322  0021                     ??___lbdiv:	
  3323                           ; 0 bytes @ 0x1
  3324                           
  3325  0021                     CC2500_WriteByte@loop_a:	
  3326                           ; 0 bytes @ 0x1
  3327                           
  3328  0021                     CC2500_ReadByte@loop_b:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     DelayOffPointSelect@sw:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     getDimmerIntr_DimmingValue@lights:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getDimmerIntr_Dimming_Sw@status:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     DimmerLights_SelectPointer@lights:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     DimmerLights_DimmingFunction@lights:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     LedPointSelect@led:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     Flash_Memory_Read@i:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     Flash_Memory_Write@i:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     setMemory_Modify@command:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     setMemory_LoopSave@command:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361  0021                     getMain_Lights_Count@status1:	
  3362                           ; 1 bytes @ 0x1
  3363                           
  3364  0021                     getCmd_Status@cmd:	
  3365                           ; 1 bytes @ 0x1
  3366                           
  3367  0021                     setLoad_AH_AL_Restore@i:	
  3368                           ; 1 bytes @ 0x1
  3369                           
  3370  0021                     setRF_Learn@command:	
  3371                           ; 1 bytes @ 0x1
  3372                           
  3373  0021                     getRF_KeyStatus@key:	
  3374                           ; 1 bytes @ 0x1
  3375                           
  3376  0021                     setRF_TransceiveGO@command:	
  3377                           ; 1 bytes @ 0x1
  3378                           
  3379  0021                     SwPointSelect@sw:	
  3380                           ; 1 bytes @ 0x1
  3381                           
  3382  0021                     getSw_KeyStatus@status:	
  3383                           ; 1 bytes @ 0x1
  3384                           
  3385  0021                     getAll_Sw_KeyStatus@status:	
  3386                           ; 1 bytes @ 0x1
  3387                           
  3388  0021                     _getMain_All_Error_Status$3625:	
  3389                           ; 1 bytes @ 0x1
  3390                           
  3391  0021                     setOverTemp_ADV_Restore@i:	
  3392                           ; 2 bytes @ 0x1
  3393                           
  3394                           
  3395                           ; 2 bytes @ 0x1
  3396  0021                     	ds	1
  3397  0022                     ??_CC2500_WriteCommand:	
  3398  0022                     ??_CC2500_ReadStatus:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_DelayTime_1us:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     ?_CC2500_WriteREG:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     ??_DlyOff_Initialization:	
  3408                           ; 0 bytes @ 0x2
  3409                           
  3410  0022                     ??_getDimmerLights_Status:	
  3411                           ; 0 bytes @ 0x2
  3412                           
  3413  0022                     ??_setDimmerLights_SwOff:	
  3414                           ; 0 bytes @ 0x2
  3415                           
  3416  0022                     ?_setLED:	
  3417                           ; 0 bytes @ 0x2
  3418                           
  3419  0022                     ??_setLED_Main:	
  3420                           ; 0 bytes @ 0x2
  3421                           
  3422  0022                     ??_Load_Initialization:	
  3423                           ; 0 bytes @ 0x2
  3424                           
  3425  0022                     ??_getBuz_GO:	
  3426                           ; 0 bytes @ 0x2
  3427                           
  3428  0022                     ??_getDelayOff_GO:	
  3429                           ; 0 bytes @ 0x2
  3430                           
  3431  0022                     ??_setDimmerLights_DimmingOn:	
  3432                           ; 0 bytes @ 0x2
  3433                           
  3434  0022                     ?_setDimmerLights_DimmingRun:	
  3435                           ; 0 bytes @ 0x2
  3436                           
  3437  0022                     CC2500_WriteREG@value:	
  3438                           ; 0 bytes @ 0x2
  3439                           
  3440  0022                     DlyOff_Initialization@sw:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     getDelayOff_GO@sw:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     setDimmerIntr_ControlStatus@lights:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     getDimmerIntr_DimmingValue@value:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     setDimmerIntr_Dimming_RF@lights:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     setDimmerLights_DimmingOn@sw:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     getDimmerLights_Allow_Condition@allow:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     getDimmerLights_Status@lights:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     setDimmerLights_DimmingRun@command:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     setLED@command:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     Flash_Memory_Read@address:	
  3474                           ; 1 bytes @ 0x2
  3475                           
  3476  0022                     setMemory_Data@address:	
  3477                           ; 1 bytes @ 0x2
  3478                           
  3479  0022                     setCmd_Status@number:	
  3480                           ; 1 bytes @ 0x2
  3481                           
  3482  0022                     _getRF_KeyStatus$5424:	
  3483                           ; 1 bytes @ 0x2
  3484                           
  3485  0022                     _getSw_KeyStatus$6480:	
  3486                           ; 1 bytes @ 0x2
  3487                           
  3488  0022                     _getAll_Sw_KeyStatus$6483:	
  3489                           ; 1 bytes @ 0x2
  3490                           
  3491  0022                     ___bmul@product:	
  3492                           ; 1 bytes @ 0x2
  3493                           
  3494  0022                     ___lbdiv@dividend:	
  3495                           ; 1 bytes @ 0x2
  3496                           
  3497  0022                     DelayTime_1us@i:	
  3498                           ; 1 bytes @ 0x2
  3499                           
  3500  0022                     ___wmul@multiplicand:	
  3501                           ; 2 bytes @ 0x2
  3502                           
  3503  0022                     ___awdiv@dividend:	
  3504                           ; 2 bytes @ 0x2
  3505                           
  3506  0022                     ___lwdiv@dividend:	
  3507                           ; 2 bytes @ 0x2
  3508                           
  3509                           
  3510                           ; 2 bytes @ 0x2
  3511  0022                     	ds	1
  3512  0023                     ??_CC2500_WriteREG:	
  3513  0023                     ??_setLED:	
  3514                           ; 0 bytes @ 0x3
  3515                           
  3516  0023                     ??_setDimmerLights_DimmingClose:	
  3517                           ; 0 bytes @ 0x3
  3518                           
  3519  0023                     ??_DelayOff_Initialization:	
  3520                           ; 0 bytes @ 0x3
  3521                           
  3522  0023                     ??_setDimmerLights_DimmingRun:	
  3523                           ; 0 bytes @ 0x3
  3524                           
  3525  0023                     ??_getAD:	
  3526                           ; 0 bytes @ 0x3
  3527                           
  3528  0023                     CC2500_WriteCommand@command:	
  3529                           ; 0 bytes @ 0x3
  3530                           
  3531  0023                     CC2500_ReadStatus@status_addr:	
  3532                           ; 1 bytes @ 0x3
  3533                           
  3534  0023                     getDelayOff_GO@go:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537  0023                     setDimmerLights_SwOff@dimmingStatus:	
  3538                           ; 1 bytes @ 0x3
  3539                           
  3540  0023                     _getDimmerLights_Allow_Condition$2294:	
  3541                           ; 1 bytes @ 0x3
  3542                           
  3543  0023                     getDimmerLights_Status@status:	
  3544                           ; 1 bytes @ 0x3
  3545                           
  3546  0023                     setLED@led:	
  3547                           ; 1 bytes @ 0x3
  3548                           
  3549  0023                     getAD@adcon0:	
  3550                           ; 1 bytes @ 0x3
  3551                           
  3552  0023                     Flash_Memory_Read@ret:	
  3553                           ; 1 bytes @ 0x3
  3554                           
  3555  0023                     ___bmul@multiplier:	
  3556                           ; 1 bytes @ 0x3
  3557                           
  3558  0023                     ___ftpack@exp:	
  3559                           ; 1 bytes @ 0x3
  3560                           
  3561  0023                     ___lbdiv@counter:	
  3562                           ; 1 bytes @ 0x3
  3563                           
  3564  0023                     _getMain_All_Error_Status$3626:	
  3565                           ; 1 bytes @ 0x3
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x3
  3569  0023                     	ds	1
  3570  0024                     ??_CC2500_ClearTXFIFO:	
  3571  0024                     ??_CC2500_ClearRXFIFO:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??_CC2500_SIDLEMode:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??_setLED_Initialization:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??_Flash_Memory_Modify:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     ??_getLoad_AD:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     ??_getTemp_AD:	
  3587                           ; 0 bytes @ 0x4
  3588                           
  3589  0024                     ??_RF_RxDisable:	
  3590                           ; 0 bytes @ 0x4
  3591                           
  3592  0024                     ??_setRF_AdjControl:	
  3593                           ; 0 bytes @ 0x4
  3594                           
  3595  0024                     ??_setSw_Initialization:	
  3596                           ; 0 bytes @ 0x4
  3597                           
  3598  0024                     ??_CC2500_TxData:	
  3599                           ; 0 bytes @ 0x4
  3600                           
  3601  0024                     ??_CC2500_RxData:	
  3602                           ; 0 bytes @ 0x4
  3603                           
  3604  0024                     ??_Flash_Memory_Initialization:	
  3605                           ; 0 bytes @ 0x4
  3606                           
  3607  0024                     ??___wmul:	
  3608                           ; 0 bytes @ 0x4
  3609                           
  3610  0024                     ??___awdiv:	
  3611                           ; 0 bytes @ 0x4
  3612                           
  3613  0024                     ??___lwdiv:	
  3614                           ; 0 bytes @ 0x4
  3615                           
  3616  0024                     CC2500_WriteREG@w_addr:	
  3617                           ; 0 bytes @ 0x4
  3618                           
  3619  0024                     setDimmerLights_SwOff@sw:	
  3620                           ; 1 bytes @ 0x4
  3621                           
  3622  0024                     setDimmerLights_DimmingRun@lights:	
  3623                           ; 1 bytes @ 0x4
  3624                           
  3625  0024                     setLED_Initialization@led:	
  3626                           ; 1 bytes @ 0x4
  3627                           
  3628  0024                     setLED_Main@led:	
  3629                           ; 1 bytes @ 0x4
  3630                           
  3631  0024                     setSw_Initialization@sw:	
  3632                           ; 1 bytes @ 0x4
  3633                           
  3634  0024                     ___ftpack@sign:	
  3635                           ; 1 bytes @ 0x4
  3636                           
  3637  0024                     ___lbdiv@quotient:	
  3638                           ; 1 bytes @ 0x4
  3639                           
  3640  0024                     getBuz_GO@i:	
  3641                           ; 1 bytes @ 0x4
  3642                           
  3643  0024                     DelayTime_1us@j:	
  3644                           ; 2 bytes @ 0x4
  3645                           
  3646  0024                     ___wmul@product:	
  3647                           ; 2 bytes @ 0x4
  3648                           
  3649                           
  3650                           ; 2 bytes @ 0x4
  3651  0024                     	ds	1
  3652  0025                     ??_CC2500_InitSetREG:	
  3653  0025                     ??_CC2500_InitPATable:	
  3654                           ; 0 bytes @ 0x5
  3655                           
  3656  0025                     ??_Switch_Initialization:	
  3657                           ; 0 bytes @ 0x5
  3658                           
  3659  0025                     ??___ftpack:	
  3660                           ; 0 bytes @ 0x5
  3661                           
  3662  0025                     ??_LED_Initialization:	
  3663                           ; 0 bytes @ 0x5
  3664                           
  3665  0025                     ??_LED_Main:	
  3666                           ; 0 bytes @ 0x5
  3667                           
  3668  0025                     ?_Division:	
  3669                           ; 0 bytes @ 0x5
  3670                           
  3671  0025                     CC2500_TxData@loop_e:	
  3672                           ; 1 bytes @ 0x5
  3673                           
  3674  0025                     CC2500_RxData@loop_f:	
  3675                           ; 1 bytes @ 0x5
  3676                           
  3677  0025                     Division@num:	
  3678                           ; 1 bytes @ 0x5
  3679                           
  3680  0025                     Flash_Memory_Initialization@value:	
  3681                           ; 1 bytes @ 0x5
  3682                           
  3683  0025                     Flash_Memory_Modify@i:	
  3684                           ; 1 bytes @ 0x5
  3685                           
  3686  0025                     getMain_All_Error_Status@command:	
  3687                           ; 1 bytes @ 0x5
  3688                           
  3689  0025                     getTemp_AD@channel:	
  3690                           ; 1 bytes @ 0x5
  3691                           
  3692  0025                     setRF_AdjControl@status:	
  3693                           ; 1 bytes @ 0x5
  3694                           
  3695  0025                     ___awdiv@counter:	
  3696                           ; 1 bytes @ 0x5
  3697                           
  3698  0025                     ___lwdiv@quotient:	
  3699                           ; 1 bytes @ 0x5
  3700                           
  3701                           
  3702                           ; 2 bytes @ 0x5
  3703  0025                     	ds	1
  3704  0026                     ??_CC2500_PowerRST:	
  3705  0026                     ??_CC2500_FrequencyCabr:	
  3706                           ; 0 bytes @ 0x6
  3707                           
  3708  0026                     ??_Division:	
  3709                           ; 0 bytes @ 0x6
  3710                           
  3711  0026                     ??_Flash_Memory_Main:	
  3712                           ; 0 bytes @ 0x6
  3713                           
  3714  0026                     CC2500_InitSetREG@temp1:	
  3715                           ; 0 bytes @ 0x6
  3716                           
  3717  0026                     CC2500_InitPATable@temp:	
  3718                           ; 1 bytes @ 0x6
  3719                           
  3720  0026                     getMain_All_Error_Status@status:	
  3721                           ; 1 bytes @ 0x6
  3722                           
  3723  0026                     getLoad_AD@channel:	
  3724                           ; 1 bytes @ 0x6
  3725                           
  3726  0026                     setRF_AdjControl@dimmingStatus:	
  3727                           ; 1 bytes @ 0x6
  3728                           
  3729  0026                     ___awdiv@sign:	
  3730                           ; 1 bytes @ 0x6
  3731                           
  3732  0026                     getTemp_AD@ADRES:	
  3733                           ; 1 bytes @ 0x6
  3734                           
  3735                           
  3736                           ; 2 bytes @ 0x6
  3737  0026                     	ds	1
  3738  0027                     CC2500_InitSetREG@temp2:	
  3739  0027                     CC2500_InitPATable@loop_d:	
  3740                           ; 1 bytes @ 0x7
  3741                           
  3742  0027                     Flash_Memory_Main@key_Status:	
  3743                           ; 1 bytes @ 0x7
  3744                           
  3745  0027                     getLoad_AD@k:	
  3746                           ; 1 bytes @ 0x7
  3747                           
  3748  0027                     setRF_AdjControl@sw:	
  3749                           ; 1 bytes @ 0x7
  3750                           
  3751  0027                     ___lwdiv@counter:	
  3752                           ; 1 bytes @ 0x7
  3753                           
  3754  0027                     ___awdiv@quotient:	
  3755                           ; 1 bytes @ 0x7
  3756                           
  3757                           
  3758                           ; 2 bytes @ 0x7
  3759  0027                     	ds	1
  3760  0028                     ??_Load_Main:	
  3761  0028                     ?___awtoft:	
  3762                           ; 0 bytes @ 0x8
  3763                           
  3764  0028                     CC2500_InitSetREG@loop_c:	
  3765                           ; 3 bytes @ 0x8
  3766                           
  3767  0028                     Division@value:	
  3768                           ; 1 bytes @ 0x8
  3769                           
  3770  0028                     _Flash_Memory_Main$3165:	
  3771                           ; 1 bytes @ 0x8
  3772                           
  3773  0028                     getLoad_AD@j:	
  3774                           ; 1 bytes @ 0x8
  3775                           
  3776  0028                     ___awtoft@c:	
  3777                           ; 1 bytes @ 0x8
  3778                           
  3779                           
  3780                           ; 2 bytes @ 0x8
  3781  0028                     	ds	1
  3782  0029                     ?_setBuz:	
  3783  0029                     ??_CC2500_PowerOnInitial:	
  3784                           ; 0 bytes @ 0x9
  3785                           
  3786  0029                     Division@result:	
  3787                           ; 0 bytes @ 0x9
  3788                           
  3789  0029                     setBuz@time:	
  3790                           ; 1 bytes @ 0x9
  3791                           
  3792  0029                     getLoad_AD@ADRES:	
  3793                           ; 2 bytes @ 0x9
  3794                           
  3795                           
  3796                           ; 2 bytes @ 0x9
  3797  0029                     	ds	1
  3798  002A                     _Load_Main$4000:	
  3799                           
  3800                           ; 2 bytes @ 0xA
  3801  002A                     	ds	1
  3802  002B                     ??_setBuz:	
  3803  002B                     ??___awtoft:	
  3804                           ; 0 bytes @ 0xB
  3805                           
  3806  002B                     getLoad_AD@i:	
  3807                           ; 0 bytes @ 0xB
  3808                           
  3809                           
  3810                           ; 1 bytes @ 0xB
  3811  002B                     	ds	1
  3812  002C                     setBuz@count:	
  3813  002C                     Load_Main@error:	
  3814                           ; 1 bytes @ 0xC
  3815                           
  3816                           
  3817                           ; 1 bytes @ 0xC
  3818  002C                     	ds	1
  3819  002D                     ??_setDimmerLights_SwOn:	
  3820  002D                     ??_my_MainTimer:	
  3821                           ; 0 bytes @ 0xD
  3822                           
  3823  002D                     ??_Exception_Main:	
  3824                           ; 0 bytes @ 0xD
  3825                           
  3826  002D                     Load_Main@ErrorCountValue:	
  3827                           ; 0 bytes @ 0xD
  3828                           
  3829  002D                     ___awtoft@sign:	
  3830                           ; 1 bytes @ 0xD
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0xD
  3834  002D                     	ds	1
  3835  002E                     ?___ftdiv:	
  3836  002E                     ?___ftmul:	
  3837                           ; 3 bytes @ 0xE
  3838                           
  3839  002E                     setDimmerLights_SwOn@idle:	
  3840                           ; 3 bytes @ 0xE
  3841                           
  3842  002E                     Exception_Main@status:	
  3843                           ; 1 bytes @ 0xE
  3844                           
  3845  002E                     Load_Main@Load_RunStatus:	
  3846                           ; 1 bytes @ 0xE
  3847                           
  3848  002E                     ___ftdiv@f2:	
  3849                           ; 1 bytes @ 0xE
  3850                           
  3851  002E                     ___ftmul@f1:	
  3852                           ; 3 bytes @ 0xE
  3853                           
  3854                           
  3855                           ; 3 bytes @ 0xE
  3856  002E                     	ds	1
  3857  002F                     setDimmerLights_SwOn@dimmingStatus:	
  3858  002F                     Exception_Main@count:	
  3859                           ; 1 bytes @ 0xF
  3860                           
  3861  002F                     Load_Main@LightsCount:	
  3862                           ; 1 bytes @ 0xF
  3863                           
  3864                           
  3865                           ; 1 bytes @ 0xF
  3866  002F                     	ds	1
  3867  0030                     setDimmerLights_SwOn@sw:	
  3868  0030                     Exception_Main@i:	
  3869                           ; 1 bytes @ 0x10
  3870                           
  3871  0030                     Load_Main@i:	
  3872                           ; 2 bytes @ 0x10
  3873                           
  3874                           
  3875                           ; 2 bytes @ 0x10
  3876  0030                     	ds	1
  3877  0031                     ??_setSw_Main:	
  3878  0031                     ___ftdiv@f1:	
  3879                           ; 0 bytes @ 0x11
  3880                           
  3881  0031                     ___ftmul@f2:	
  3882                           ; 3 bytes @ 0x11
  3883                           
  3884                           
  3885                           ; 3 bytes @ 0x11
  3886  0031                     	ds	1
  3887  0032                     Exception_Main@i_3637:	
  3888                           
  3889                           ; 2 bytes @ 0x12
  3890  0032                     	ds	1
  3891  0033                     setSw_Main@sw:	
  3892                           
  3893                           ; 1 bytes @ 0x13
  3894  0033                     	ds	1
  3895  0034                     ??_Switch_Main:	
  3896  0034                     ??___ftdiv:	
  3897                           ; 0 bytes @ 0x14
  3898                           
  3899  0034                     ??___ftmul:	
  3900                           ; 0 bytes @ 0x14
  3901                           
  3902  0034                     Exception_Main@error:	
  3903                           ; 0 bytes @ 0x14
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x14
  3907  0034                     	ds	1
  3908  0035                     Exception_Main@lights:	
  3909                           
  3910                           ; 1 bytes @ 0x15
  3911  0035                     	ds	3
  3912  0038                     ___ftdiv@cntr:	
  3913  0038                     ___ftmul@exp:	
  3914                           ; 1 bytes @ 0x18
  3915                           
  3916                           
  3917                           ; 1 bytes @ 0x18
  3918  0038                     	ds	1
  3919  0039                     ___ftdiv@f3:	
  3920  0039                     ___ftmul@f3_as_product:	
  3921                           ; 3 bytes @ 0x19
  3922                           
  3923                           
  3924                           ; 3 bytes @ 0x19
  3925  0039                     	ds	3
  3926  003C                     ___ftdiv@exp:	
  3927  003C                     ___ftmul@cntr:	
  3928                           ; 1 bytes @ 0x1C
  3929                           
  3930                           
  3931                           ; 1 bytes @ 0x1C
  3932  003C                     	ds	1
  3933  003D                     ___ftdiv@sign:	
  3934  003D                     ___ftmul@sign:	
  3935                           ; 1 bytes @ 0x1D
  3936                           
  3937                           
  3938                           ; 1 bytes @ 0x1D
  3939  003D                     	ds	1
  3940  003E                     ?___ftneg:	
  3941  003E                     ___ftneg@f1:	
  3942                           ; 3 bytes @ 0x1E
  3943                           
  3944                           
  3945                           ; 3 bytes @ 0x1E
  3946  003E                     	ds	3
  3947  0041                     ??___ftneg:	
  3948  0041                     ?___ftadd:	
  3949                           ; 0 bytes @ 0x21
  3950                           
  3951  0041                     ___ftadd@f1:	
  3952                           ; 3 bytes @ 0x21
  3953                           
  3954                           
  3955                           ; 3 bytes @ 0x21
  3956  0041                     	ds	3
  3957  0044                     ___ftadd@f2:	
  3958                           
  3959                           ; 3 bytes @ 0x24
  3960  0044                     	ds	3
  3961  0047                     ??___ftadd:	
  3962                           
  3963                           ; 0 bytes @ 0x27
  3964  0047                     	ds	4
  3965  004B                     ___ftadd@sign:	
  3966                           
  3967                           ; 1 bytes @ 0x2B
  3968  004B                     	ds	1
  3969  004C                     ___ftadd@exp2:	
  3970                           
  3971                           ; 1 bytes @ 0x2C
  3972  004C                     	ds	1
  3973  004D                     ___ftadd@exp1:	
  3974                           
  3975                           ; 1 bytes @ 0x2D
  3976  004D                     	ds	1
  3977  004E                     ?___fttol:	
  3978  004E                     ___fttol@f1:	
  3979                           ; 4 bytes @ 0x2E
  3980                           
  3981                           
  3982                           ; 3 bytes @ 0x2E
  3983  004E                     	ds	4
  3984  0052                     ??___fttol:	
  3985                           
  3986                           ; 0 bytes @ 0x32
  3987  0052                     	ds	4
  3988  0056                     ___fttol@sign1:	
  3989                           
  3990                           ; 1 bytes @ 0x36
  3991  0056                     	ds	1
  3992  0057                     ___fttol@lval:	
  3993                           
  3994                           ; 4 bytes @ 0x37
  3995  0057                     	ds	4
  3996  005B                     ___fttol@exp1:	
  3997                           
  3998                           ; 1 bytes @ 0x3B
  3999  005B                     	ds	1
  4000  005C                     ??_getDimmerLights_ValueToPercent:	
  4001  005C                     ??_getDimmerLights_PercentToValue:	
  4002                           ; 0 bytes @ 0x3C
  4003                           
  4004                           
  4005                           ; 0 bytes @ 0x3C
  4006  005C                     	ds	2
  4007  005E                     getDimmerLights_PercentToValue@value:	
  4008  005E                     getDimmerLights_ValueToPercent@value:	
  4009                           ; 1 bytes @ 0x3E
  4010                           
  4011                           
  4012                           ; 1 bytes @ 0x3E
  4013  005E                     	ds	1
  4014  005F                     getDimmerLights_PercentToValue@i:	
  4015  005F                     getDimmerLights_ValueToPercent@i:	
  4016                           ; 3 bytes @ 0x3F
  4017                           
  4018                           
  4019                           ; 3 bytes @ 0x3F
  4020  005F                     	ds	3
  4021  0062                     ?_setProductData:	
  4022  0062                     ??_DimmerIntr_Initialization:	
  4023                           ; 0 bytes @ 0x42
  4024                           
  4025  0062                     ?_setDimmerIntr_DimmingValue:	
  4026                           ; 0 bytes @ 0x42
  4027                           
  4028  0062                     ?_setDimmerIntr_MaxmumValue:	
  4029                           ; 0 bytes @ 0x42
  4030                           
  4031  0062                     setDimmerIntr_DimmingValue@value:	
  4032                           ; 0 bytes @ 0x42
  4033                           
  4034  0062                     setDimmerIntr_MaxmumValue@value:	
  4035                           ; 1 bytes @ 0x42
  4036                           
  4037  0062                     setProductData@value:	
  4038                           ; 1 bytes @ 0x42
  4039                           
  4040                           
  4041                           ; 1 bytes @ 0x42
  4042  0062                     	ds	1
  4043  0063                     ??_setProductData:	
  4044  0063                     ??_setDimmerIntr_DimmingValue:	
  4045                           ; 0 bytes @ 0x43
  4046                           
  4047  0063                     ??_setDimmerIntr_MaxmumValue:	
  4048                           ; 0 bytes @ 0x43
  4049                           
  4050                           
  4051                           ; 0 bytes @ 0x43
  4052  0063                     	ds	1
  4053  0064                     ??_DimmerLights_Initialization:	
  4054  0064                     setDimmerIntr_DimmingValue@lights:	
  4055                           ; 0 bytes @ 0x44
  4056                           
  4057  0064                     setDimmerIntr_MaxmumValue@lights:	
  4058                           ; 1 bytes @ 0x44
  4059                           
  4060  0064                     setProductData@address:	
  4061                           ; 1 bytes @ 0x44
  4062                           
  4063                           
  4064                           ; 1 bytes @ 0x44
  4065  0064                     	ds	1
  4066  0065                     ??_DlyOff_Main:	
  4067  0065                     ?_setRF_DimmerLights:	
  4068                           ; 0 bytes @ 0x45
  4069                           
  4070  0065                     ??_setTemp_Main:	
  4071                           ; 0 bytes @ 0x45
  4072                           
  4073  0065                     ??_setLog_Code:	
  4074                           ; 0 bytes @ 0x45
  4075                           
  4076  0065                     ??_setRFSW_AdjControl:	
  4077                           ; 0 bytes @ 0x45
  4078                           
  4079  0065                     ?_setDelayOff_GO:	
  4080                           ; 0 bytes @ 0x45
  4081                           
  4082  0065                     setDelayOff_GO@command:	
  4083                           ; 0 bytes @ 0x45
  4084                           
  4085  0065                     setRF_DimmerLights@on:	
  4086                           ; 1 bytes @ 0x45
  4087                           
  4088                           
  4089                           ; 1 bytes @ 0x45
  4090  0065                     	ds	1
  4091  0066                     ??_setRF_DimmerLights:	
  4092  0066                     setDelayOff_GO@value:	
  4093                           ; 0 bytes @ 0x46
  4094                           
  4095                           
  4096                           ; 1 bytes @ 0x46
  4097  0066                     	ds	1
  4098  0067                     ??_setDelayOff_GO:	
  4099  0067                     DlyOff_Main@sw:	
  4100                           ; 0 bytes @ 0x47
  4101                           
  4102  0067                     setTemp_Main@error:	
  4103                           ; 1 bytes @ 0x47
  4104                           
  4105  0067                     setRFSW_AdjControl@status:	
  4106                           ; 1 bytes @ 0x47
  4107                           
  4108                           
  4109                           ; 1 bytes @ 0x47
  4110  0067                     	ds	1
  4111  0068                     ??_DelayOff_Main:	
  4112  0068                     setRFSW_AdjControl@sw:	
  4113                           ; 0 bytes @ 0x48
  4114                           
  4115  0068                     setRF_DimmerLights@status:	
  4116                           ; 1 bytes @ 0x48
  4117                           
  4118  0068                     setTemp_Main@SafeValue:	
  4119                           ; 1 bytes @ 0x48
  4120                           
  4121                           
  4122                           ; 2 bytes @ 0x48
  4123  0068                     	ds	1
  4124  0069                     setDelayOff_GO@i:	
  4125  0069                     setRF_DimmerLights@lights:	
  4126                           ; 1 bytes @ 0x49
  4127                           
  4128                           
  4129                           ; 1 bytes @ 0x49
  4130  0069                     	ds	1
  4131  006A                     ?_setDimmerLights_Dimming:	
  4132  006A                     setDelayOff_GO@j:	
  4133                           ; 0 bytes @ 0x4A
  4134                           
  4135  006A                     setDimmerLights_Dimming@status:	
  4136                           ; 1 bytes @ 0x4A
  4137                           
  4138  006A                     setTemp_Main@DangerValue:	
  4139                           ; 1 bytes @ 0x4A
  4140                           
  4141                           
  4142                           ; 2 bytes @ 0x4A
  4143  006A                     	ds	1
  4144  006B                     ??_setDimmerLights_Dimming:	
  4145  006B                     setDelayOff_GO@k:	
  4146                           ; 0 bytes @ 0x4B
  4147                           
  4148                           
  4149                           ; 1 bytes @ 0x4B
  4150  006B                     	ds	1
  4151  006C                     setDelayOff_GO@sw:	
  4152  006C                     setDimmerLights_Dimming@value:	
  4153                           ; 1 bytes @ 0x4C
  4154                           
  4155  006C                     setTemp_Main@TempGO:	
  4156                           ; 1 bytes @ 0x4C
  4157                           
  4158                           
  4159                           ; 1 bytes @ 0x4C
  4160  006C                     	ds	1
  4161  006D                     ?_setDimmerLights_OnOff:	
  4162  006D                     ??_setRFSW_Control:	
  4163                           ; 0 bytes @ 0x4D
  4164                           
  4165  006D                     setDimmerLights_OnOff@command:	
  4166                           ; 0 bytes @ 0x4D
  4167                           
  4168  006D                     setDimmerLights_Dimming@lights:	
  4169                           ; 1 bytes @ 0x4D
  4170                           
  4171  006D                     setTemp_Main@AD:	
  4172                           ; 1 bytes @ 0x4D
  4173                           
  4174                           
  4175                           ; 2 bytes @ 0x4D
  4176  006D                     	ds	1
  4177  006E                     ??_setDimmerLights_OnOff:	
  4178  006E                     ??_getRxData:	
  4179                           ; 0 bytes @ 0x4E
  4180                           
  4181  006E                     ??_setControl_Lights_Table:	
  4182                           ; 0 bytes @ 0x4E
  4183                           
  4184                           
  4185                           ; 0 bytes @ 0x4E
  4186  006E                     	ds	1
  4187  006F                     ??_Temp_Main:	
  4188  006F                     getRxData@error:	
  4189                           ; 0 bytes @ 0x4F
  4190                           
  4191                           
  4192                           ; 1 bytes @ 0x4F
  4193  006F                     	ds	1
  4194  0070                     ??_setDimmerLights_Main:	
  4195  0070                     ??_RF_Main:	
  4196                           ; 0 bytes @ 0x50
  4197                           
  4198  0070                     ??_DimmerLights_Main:	
  4199                           ; 0 bytes @ 0x50
  4200                           
  4201  0070                     ??_main:	
  4202                           ; 0 bytes @ 0x50
  4203                           
  4204                           
  4205                           	psect	maintext
  4206  1487                     __pmaintext:	
  4207                           ; 0 bytes @ 0x50
  4208 ;;
  4209 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4210 ;;
  4211 ;; *************** function _main *****************
  4212 ;; Defined at:
  4213 ;;		line 7 in file "../src/Main_B1.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  argc            2    5[BANK1 ] int 
  4216 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  2    5[BANK1 ] int 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 17F/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4228 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;Total ram usage:        4 bytes
  4233 ;; Hardware stack levels required when called:   13
  4234 ;; This function calls:
  4235 ;;		_Buzzer_Initialization
  4236 ;;		_Buzzer_Main
  4237 ;;		_CC2500_PowerOnInitial
  4238 ;;		_DelayOff_Initialization
  4239 ;;		_DelayOff_Main
  4240 ;;		_DimmerLights_Initialization
  4241 ;;		_DimmerLights_Main
  4242 ;;		_Exception_Main
  4243 ;;		_Flash_Memory_Initialization
  4244 ;;		_Flash_Memory_Main
  4245 ;;		_LED_Initialization
  4246 ;;		_LED_Main
  4247 ;;		_Load_Initialization
  4248 ;;		_Load_Main
  4249 ;;		_Mcu_Initialization
  4250 ;;		_RF_Initialization
  4251 ;;		_RF_Main
  4252 ;;		_Switch_Initialization
  4253 ;;		_Switch_Main
  4254 ;;		_Temp_Initialization
  4255 ;;		_Temp_Main
  4256 ;;		_WDT_Main
  4257 ;;		_getLoad_AD
  4258 ;;		_getTemp_AD
  4259 ;;		_myMain_Initialization
  4260 ;;		_my_MainTimer
  4261 ;; This function is called by:
  4262 ;;		Startup code after reset
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _main
  4268  1487                     _main:	
  4269                           
  4270                           ;Main_B1.c: 8: myMain_Initialization();
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4274  1487  319C  2483  3194   	fcall	_myMain_Initialization
  4275                           
  4276                           ;Main_B1.c: 9: Mcu_Initialization();
  4277  148A  319C  2413  3194   	fcall	_Mcu_Initialization
  4278                           
  4279                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4280  148D  3186  26FC  3194   	fcall	_Flash_Memory_Initialization
  4281                           
  4282                           ;Main_B1.c: 11: LED_Initialization();
  4283  1490  3199  21D3  3194   	fcall	_LED_Initialization
  4284                           
  4285                           ;Main_B1.c: 12: Buzzer_Initialization();
  4286  1493  3199  21B9  3194   	fcall	_Buzzer_Initialization
  4287                           
  4288                           ;Main_B1.c: 14: ;;
  4289                           ;Main_B1.c: 15: Temp_Initialization();
  4290  1496  3199  21C5  3194   	fcall	_Temp_Initialization
  4291                           
  4292                           ;Main_B1.c: 16: Load_Initialization();
  4293  1499  3199  21BC  3194   	fcall	_Load_Initialization
  4294                           
  4295                           ;Main_B1.c: 17: ;;
  4296                           ;Main_B1.c: 18: DelayOff_Initialization();
  4297  149C  3199  21CB  3194   	fcall	_DelayOff_Initialization
  4298                           
  4299                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4300  149F  319A  2210  3194   	fcall	_DimmerLights_Initialization
  4301                           
  4302                           ;Main_B1.c: 21: ;;
  4303                           ;Main_B1.c: 22: ;;
  4304                           ;Main_B1.c: 23: ;;
  4305                           ;Main_B1.c: 24: Switch_Initialization();
  4306  14A2  3199  21EF  3194   	fcall	_Switch_Initialization
  4307                           
  4308                           ;Main_B1.c: 25: RF_Initialization();
  4309  14A5  3199  21BF  3194   	fcall	_RF_Initialization
  4310                           
  4311                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4312  14A8  319C  24BF  3194   	fcall	_CC2500_PowerOnInitial
  4313  14AB                     l8997:	
  4314                           ;Main_B1.c: 27: ;;
  4315                           ;Main_B1.c: 28: ;;
  4316                           ;Main_B1.c: 30: while (1) {
  4317                           
  4318                           
  4319                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4320  14AB  0021               	movlb	1	; select bank1
  4321  14AC  1C2F               	btfss	_myMain^(0+128),0
  4322  14AD  2CB6               	goto	l9001
  4323                           
  4324                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4325  14AE  3005               	movlw	5
  4326  14AF  3189  2191  3194   	fcall	_getLoad_AD
  4327                           
  4328                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4329  14B2  3009               	movlw	9
  4330  14B3  318C  2495  3194   	fcall	_getTemp_AD
  4331  14B6                     l9001:	
  4332                           
  4333                           ;Main_B1.c: 57: }
  4334                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4335  14B6  0022               	movlb	2	; select bank2
  4336  14B7  1C31               	btfss	_Timer1^(0+256),0
  4337  14B8  2CAB               	goto	l8997
  4338                           
  4339                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4340  14B9  1031               	bcf	_Timer1^(0+256),0
  4341                           
  4342                           ;Main_B1.c: 96: my_MainTimer();
  4343  14BA  3191  21AF  3194   	fcall	_my_MainTimer
  4344                           
  4345                           ;Main_B1.c: 97: WDT_Main();
  4346  14BD  319C  2425  3194   	fcall	_WDT_Main
  4347                           
  4348                           ;Main_B1.c: 98: ;;
  4349                           ;Main_B1.c: 99: ;;
  4350                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4351  14C0  0021               	movlb	1	; select bank1
  4352  14C1  1C2F               	btfss	_myMain^(0+128),0
  4353  14C2  2CAB               	goto	l8997
  4354                           
  4355                           ;Main_B1.c: 101: Flash_Memory_Main();
  4356  14C3  3192  2228  3194   	fcall	_Flash_Memory_Main
  4357                           
  4358                           ;Main_B1.c: 103: LED_Main();
  4359  14C6  3199  21D7  3194   	fcall	_LED_Main
  4360                           
  4361                           ;Main_B1.c: 104: Buzzer_Main();
  4362  14C9  3188  2001  3194   	fcall	_Buzzer_Main
  4363                           
  4364                           ;Main_B1.c: 106: ;;
  4365                           ;Main_B1.c: 107: Temp_Main();
  4366  14CC  3199  21C8  3194   	fcall	_Temp_Main
  4367                           
  4368                           ;Main_B1.c: 108: Load_Main();
  4369  14CF  3180  2053  3194   	fcall	_Load_Main
  4370                           
  4371                           ;Main_B1.c: 109: ;;
  4372                           ;Main_B1.c: 111: ;;
  4373                           ;Main_B1.c: 112: DimmerLights_Main();
  4374  14D2  319E  26A5  3194   	fcall	_DimmerLights_Main
  4375                           
  4376                           ;Main_B1.c: 113: Switch_Main();
  4377  14D5  319A  221E  3194   	fcall	_Switch_Main
  4378                           
  4379                           ;Main_B1.c: 114: ;;
  4380                           ;Main_B1.c: 115: ;;
  4381                           ;Main_B1.c: 117: RF_Main();
  4382  14D8  3199  21C2  3194   	fcall	_RF_Main
  4383                           
  4384                           ;Main_B1.c: 118: DelayOff_Main();
  4385  14DB  3199  21CF  3194   	fcall	_DelayOff_Main
  4386                           
  4387                           ;Main_B1.c: 119: ;;
  4388                           ;Main_B1.c: 120: ;;
  4389                           ;Main_B1.c: 121: Exception_Main();
  4390  14DE  3185  2554  3194   	fcall	_Exception_Main
  4391  14E1  2CAB               	goto	l8997
  4392  14E2                     __end_of_main:	
  4393                           ;Main_B1.c: 128: }
  4394                           ;Main_B1.c: 129: }
  4395                           ;Main_B1.c: 163: }
  4396                           ;Main_B1.c: 164: return (0);
  4397                           ;	Return value of _main is never used
  4398                           
  4399                           
  4400                           	psect	text1
  4401  11AF                     __ptext1:	
  4402 ;; *************** function _my_MainTimer *****************
  4403 ;; Defined at:
  4404 ;;		line 185 in file "../src/Main_B1.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;		None               void
  4411 ;; Registers used:
  4412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;Total ram usage:        1 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    7
  4425 ;; This function calls:
  4426 ;;		_setBuz
  4427 ;; This function is called by:
  4428 ;;		_main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _my_MainTimer
  4434  11AF                     _my_MainTimer:	
  4435                           
  4436                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4440  11AF  0021               	movlb	1	; select bank1
  4441  11B0  182F               	btfsc	_myMain^(0+128),0
  4442  11B1  29C9               	goto	l8189
  4443                           
  4444                           ;Main_B1.c: 188: myMain.PowerCount++;
  4445  11B2  3001               	movlw	1
  4446  11B3  0020               	movlb	0	; select bank0
  4447  11B4  00AD               	movwf	??_my_MainTimer
  4448  11B5  082D               	movf	??_my_MainTimer,w
  4449  11B6  0021               	movlb	1	; select bank1
  4450  11B7  07B0               	addwf	(_myMain^(0+128)+1),f
  4451                           
  4452                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4453  11B8  0830               	movf	(_myMain^(0+128)+1),w
  4454  11B9  3A4B               	xorlw	75
  4455  11BA  1D03               	skipz
  4456  11BB  0008               	return
  4457                           
  4458                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4459  11BC  01B0               	clrf	(_myMain^(0+128)+1)
  4460                           
  4461                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4462  11BD  142F               	bsf	_myMain^(0+128),0
  4463                           
  4464                           ;Main_B1.c: 196: setBuz(3, 50);
  4465  11BE  3032               	movlw	50
  4466  11BF  0020               	movlb	0	; select bank0
  4467  11C0  00A9               	movwf	setBuz@time
  4468  11C1  3000               	movlw	0
  4469  11C2  00AA               	movwf	setBuz@time+1
  4470  11C3  3003               	movlw	3
  4471  11C4  3194  242E         	fcall	_setBuz
  4472                           
  4473                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4474  11C6  0021               	movlb	1	; select bank1
  4475  11C7  162F               	bsf	_myMain^(0+128),4
  4476                           
  4477                           ;Main_B1.c: 206: }
  4478                           ;Main_B1.c: 207: } else {
  4479  11C8  0008               	return
  4480  11C9                     l8189:	
  4481                           
  4482                           ;Main_B1.c: 208: myMain.PowerCount++;
  4483  11C9  3001               	movlw	1
  4484  11CA  0020               	movlb	0	; select bank0
  4485  11CB  00AD               	movwf	??_my_MainTimer
  4486  11CC  082D               	movf	??_my_MainTimer,w
  4487  11CD  0021               	movlb	1	; select bank1
  4488  11CE  07B0               	addwf	(_myMain^(0+128)+1),f
  4489                           
  4490                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4491  11CF  0830               	movf	(_myMain^(0+128)+1),w
  4492  11D0  3A32               	xorlw	50
  4493  11D1  1903               	btfsc	3,2
  4494                           
  4495                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4496  11D2  01B0               	clrf	(_myMain^(0+128)+1)
  4497                           
  4498                           ;Main_B1.c: 226: }
  4499                           ;Main_B1.c: 228: myMain.Count1++;
  4500  11D3  3001               	movlw	1
  4501  11D4  07B3               	addwf	(_myMain^(0+128)+4),f
  4502  11D5  3000               	movlw	0
  4503  11D6  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4504                           
  4505                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4506  11D7  3004               	movlw	4
  4507  11D8  3EAF               	addlw	_myMain& (0+255)
  4508  11D9  0086               	movwf	6
  4509  11DA  0187               	clrf	7
  4510  11DB  3F40               	moviw [0]fsr1
  4511  11DC  3A32               	xorlw	50
  4512  11DD  1D03               	skipz
  4513  11DE  29E1               	goto	u8315
  4514  11DF  3F41               	moviw [1]fsr1
  4515  11E0  3A00               	xorlw	0
  4516  11E1                     u8315:	
  4517  11E1  1D03               	skipz
  4518  11E2  0008               	return
  4519                           
  4520                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4521  11E3  01B3               	clrf	(_myMain^(0+128)+4)
  4522  11E4  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4523                           
  4524                           ;Main_B1.c: 242: if (myMain.Flag) {
  4525  11E5  1CAF               	btfss	_myMain^(0+128),1
  4526  11E6  29E9               	goto	l1463
  4527                           
  4528                           ;Main_B1.c: 243: myMain.Flag = 0;
  4529  11E7  10AF               	bcf	_myMain^(0+128),1
  4530                           
  4531                           ;Main_B1.c: 252: } else {
  4532  11E8  0008               	return
  4533  11E9                     l1463:	
  4534                           
  4535                           ;Main_B1.c: 253: myMain.Flag = 1;
  4536  11E9  14AF               	bsf	_myMain^(0+128),1
  4537  11EA  0008               	return
  4538  11EB                     __end_of_my_MainTimer:	
  4539                           
  4540                           	psect	text2
  4541  1C83                     __ptext2:	
  4542 ;; *************** function _myMain_Initialization *****************
  4543 ;; Defined at:
  4544 ;;		line 170 in file "../src/Main_B1.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, fsr1l, fsr1h
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;Total ram usage:        1 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    5
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_main
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           
  4573                           ;psect for function _myMain_Initialization
  4574  1C83                     _myMain_Initialization:	
  4575                           
  4576                           ;Main_B1.c: 173: product = &_product;
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4580  1C83  30CC               	movlw	__product& (0+255)
  4581  1C84  0020               	movlb	0	; select bank0
  4582  1C85  00A0               	movwf	??_myMain_Initialization
  4583  1C86  0820               	movf	??_myMain_Initialization,w
  4584  1C87  0021               	movlb	1	; select bank1
  4585  1C88  00EE               	movwf	_product^(0+128)
  4586                           
  4587                           ;Main_B1.c: 174: product->Data[20] = 209;
  4588  1C89  30D1               	movlw	209
  4589  1C8A  0020               	movlb	0	; select bank0
  4590  1C8B  00A0               	movwf	??_myMain_Initialization
  4591  1C8C  0021               	movlb	1	; select bank1
  4592  1C8D  086E               	movf	_product^(0+128),w
  4593  1C8E  3E14               	addlw	20
  4594  1C8F  0086               	movwf	6
  4595  1C90  3001               	movlw	1	; select bank2/3
  4596  1C91  0087               	movwf	7
  4597  1C92  0020               	movlb	0	; select bank0
  4598  1C93  0820               	movf	??_myMain_Initialization,w
  4599  1C94  0081               	movwf	1
  4600  1C95  0008               	return
  4601  1C96                     __end_of_myMain_Initialization:	
  4602                           
  4603                           	psect	text3
  4604  0C95                     __ptext3:	
  4605 ;; *************** function _getTemp_AD *****************
  4606 ;; Defined at:
  4607 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  channel         1    wreg     unsigned char 
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  channel         1    5[BANK0 ] unsigned char 
  4612 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;		None               void
  4615 ;; Registers used:
  4616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;Total ram usage:        4 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    7
  4629 ;; This function calls:
  4630 ;;		_getAD
  4631 ;; This function is called by:
  4632 ;;		_main
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           
  4637                           ;psect for function _getTemp_AD
  4638  0C95                     _getTemp_AD:	
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4642                           ;getTemp_AD@channel stored from wreg
  4643  0C95  0020               	movlb	0	; select bank0
  4644  0C96  00A5               	movwf	getTemp_AD@channel
  4645                           
  4646                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4647  0C97  01A6               	clrf	getTemp_AD@ADRES
  4648  0C98  01A7               	clrf	getTemp_AD@ADRES+1
  4649                           
  4650                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4651  0C99  0021               	movlb	1	; select bank1
  4652  0C9A  1D57               	btfss	_Temp^(0+128),2
  4653  0C9B  0008               	return
  4654                           
  4655                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4656  0C9C  30F0               	movlw	240
  4657  0C9D  0020               	movlb	0	; select bank0
  4658  0C9E  00A4               	movwf	??_getTemp_AD
  4659  0C9F  0824               	movf	??_getTemp_AD,w
  4660  0CA0  00A0               	movwf	getAD@adcon1
  4661  0CA1  0825               	movf	getTemp_AD@channel,w
  4662  0CA2  319E  26C5  318C   	fcall	_getAD
  4663  0CA5  0020               	movlb	0	; select bank0
  4664  0CA6  0821               	movf	?_getAD+1,w
  4665  0CA7  01A7               	clrf	getTemp_AD@ADRES+1
  4666  0CA8  07A7               	addwf	getTemp_AD@ADRES+1,f
  4667  0CA9  0820               	movf	?_getAD,w
  4668  0CAA  01A6               	clrf	getTemp_AD@ADRES
  4669  0CAB  07A6               	addwf	getTemp_AD@ADRES,f
  4670                           
  4671                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4672  0CAC  0827               	movf	getTemp_AD@ADRES+1,w
  4673  0CAD  0426               	iorwf	getTemp_AD@ADRES,w
  4674  0CAE  1903               	skipnz
  4675  0CAF  0008               	return
  4676                           
  4677                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4678  0CB0  0827               	movf	getTemp_AD@ADRES+1,w
  4679  0CB1  0021               	movlb	1	; select bank1
  4680  0CB2  025C               	subwf	((_Temp+1)^(0+128)+4),w
  4681  0CB3  1D03               	skipz
  4682  0CB4  2CB9               	goto	u8235
  4683  0CB5  0020               	movlb	0	; select bank0
  4684  0CB6  0826               	movf	getTemp_AD@ADRES,w
  4685  0CB7  0021               	movlb	1	; select bank1
  4686  0CB8  025B               	subwf	(_Temp^(0+128)+4),w
  4687  0CB9                     u8235:	
  4688  0CB9  1803               	skipnc
  4689  0CBA  2CC6               	goto	l8159
  4690                           
  4691                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4692  0CBB  0020               	movlb	0	; select bank0
  4693  0CBC  0827               	movf	getTemp_AD@ADRES+1,w
  4694  0CBD  0021               	movlb	1	; select bank1
  4695  0CBE  01DC               	clrf	((_Temp+1)^(0+128)+4)
  4696  0CBF  07DC               	addwf	((_Temp+1)^(0+128)+4),f
  4697  0CC0  0020               	movlb	0	; select bank0
  4698  0CC1  0826               	movf	getTemp_AD@ADRES,w
  4699  0CC2  0021               	movlb	1	; select bank1
  4700  0CC3  01DB               	clrf	(_Temp^(0+128)+4)
  4701  0CC4  07DB               	addwf	(_Temp^(0+128)+4),f
  4702                           
  4703                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4704  0CC5  0008               	return
  4705  0CC6                     l8159:	
  4706  0CC6  0020               	movlb	0	; select bank0
  4707  0CC7  0827               	movf	getTemp_AD@ADRES+1,w
  4708  0CC8  0021               	movlb	1	; select bank1
  4709  0CC9  025E               	subwf	((_Temp+1)^(0+128)+6),w
  4710  0CCA  1D03               	skipz
  4711  0CCB  2CD0               	goto	u8245
  4712  0CCC  0020               	movlb	0	; select bank0
  4713  0CCD  0826               	movf	getTemp_AD@ADRES,w
  4714  0CCE  0021               	movlb	1	; select bank1
  4715  0CCF  025D               	subwf	(_Temp^(0+128)+6),w
  4716  0CD0                     u8245:	
  4717  0CD0  1803               	skipnc
  4718  0CD1  2CDD               	goto	l8163
  4719                           
  4720                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4721  0CD2  0020               	movlb	0	; select bank0
  4722  0CD3  0827               	movf	getTemp_AD@ADRES+1,w
  4723  0CD4  0021               	movlb	1	; select bank1
  4724  0CD5  01DE               	clrf	((_Temp+1)^(0+128)+6)
  4725  0CD6  07DE               	addwf	((_Temp+1)^(0+128)+6),f
  4726  0CD7  0020               	movlb	0	; select bank0
  4727  0CD8  0826               	movf	getTemp_AD@ADRES,w
  4728  0CD9  0021               	movlb	1	; select bank1
  4729  0CDA  01DD               	clrf	(_Temp^(0+128)+6)
  4730  0CDB  07DD               	addwf	(_Temp^(0+128)+6),f
  4731                           
  4732                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4733  0CDC  0008               	return
  4734  0CDD                     l8163:	
  4735  0CDD  0020               	movlb	0	; select bank0
  4736  0CDE  0827               	movf	getTemp_AD@ADRES+1,w
  4737  0CDF  0021               	movlb	1	; select bank1
  4738  0CE0  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4739  0CE1  1D03               	skipz
  4740  0CE2  2CE7               	goto	u8255
  4741  0CE3  0020               	movlb	0	; select bank0
  4742  0CE4  0826               	movf	getTemp_AD@ADRES,w
  4743  0CE5  0021               	movlb	1	; select bank1
  4744  0CE6  025F               	subwf	(_Temp^(0+128)+8),w
  4745  0CE7                     u8255:	
  4746  0CE7  1803               	skipnc
  4747  0CE8  2CF4               	goto	l8167
  4748                           
  4749                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4750  0CE9  0020               	movlb	0	; select bank0
  4751  0CEA  0827               	movf	getTemp_AD@ADRES+1,w
  4752  0CEB  0021               	movlb	1	; select bank1
  4753  0CEC  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4754  0CED  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4755  0CEE  0020               	movlb	0	; select bank0
  4756  0CEF  0826               	movf	getTemp_AD@ADRES,w
  4757  0CF0  0021               	movlb	1	; select bank1
  4758  0CF1  01DF               	clrf	(_Temp^(0+128)+8)
  4759  0CF2  07DF               	addwf	(_Temp^(0+128)+8),f
  4760                           
  4761                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4762  0CF3  0008               	return
  4763  0CF4                     l8167:	
  4764  0CF4  0020               	movlb	0	; select bank0
  4765  0CF5  0827               	movf	getTemp_AD@ADRES+1,w
  4766  0CF6  0021               	movlb	1	; select bank1
  4767  0CF7  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4768  0CF8  1D03               	skipz
  4769  0CF9  2CFE               	goto	u8265
  4770  0CFA  0020               	movlb	0	; select bank0
  4771  0CFB  0826               	movf	getTemp_AD@ADRES,w
  4772  0CFC  0021               	movlb	1	; select bank1
  4773  0CFD  0261               	subwf	(_Temp^(0+128)+10),w
  4774  0CFE                     u8265:	
  4775  0CFE  1803               	skipnc
  4776  0CFF  2D0B               	goto	l8171
  4777                           
  4778                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4779  0D00  0020               	movlb	0	; select bank0
  4780  0D01  0827               	movf	getTemp_AD@ADRES+1,w
  4781  0D02  0021               	movlb	1	; select bank1
  4782  0D03  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4783  0D04  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4784  0D05  0020               	movlb	0	; select bank0
  4785  0D06  0826               	movf	getTemp_AD@ADRES,w
  4786  0D07  0021               	movlb	1	; select bank1
  4787  0D08  01E1               	clrf	(_Temp^(0+128)+10)
  4788  0D09  07E1               	addwf	(_Temp^(0+128)+10),f
  4789                           
  4790                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4791  0D0A  0008               	return
  4792  0D0B                     l8171:	
  4793  0D0B  0020               	movlb	0	; select bank0
  4794  0D0C  0827               	movf	getTemp_AD@ADRES+1,w
  4795  0D0D  0021               	movlb	1	; select bank1
  4796  0D0E  0264               	subwf	((_Temp+1)^(0+128)+12),w
  4797  0D0F  1D03               	skipz
  4798  0D10  2D15               	goto	u8275
  4799  0D11  0020               	movlb	0	; select bank0
  4800  0D12  0826               	movf	getTemp_AD@ADRES,w
  4801  0D13  0021               	movlb	1	; select bank1
  4802  0D14  0263               	subwf	(_Temp^(0+128)+12),w
  4803  0D15                     u8275:	
  4804  0D15  1803               	skipnc
  4805  0D16  0008               	return
  4806                           
  4807                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4808  0D17  0020               	movlb	0	; select bank0
  4809  0D18  0827               	movf	getTemp_AD@ADRES+1,w
  4810  0D19  0021               	movlb	1	; select bank1
  4811  0D1A  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4812  0D1B  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4813  0D1C  0020               	movlb	0	; select bank0
  4814  0D1D  0826               	movf	getTemp_AD@ADRES,w
  4815  0D1E  0021               	movlb	1	; select bank1
  4816  0D1F  01E3               	clrf	(_Temp^(0+128)+12)
  4817  0D20  07E3               	addwf	(_Temp^(0+128)+12),f
  4818  0D21  0008               	return
  4819  0D22                     __end_of_getTemp_AD:	
  4820                           
  4821                           	psect	text4
  4822  0991                     __ptext4:	
  4823 ;; *************** function _getLoad_AD *****************
  4824 ;; Defined at:
  4825 ;;		line 16 in file "../src/OverLoad_B1.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  channel         1    wreg     unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  channel         1    6[BANK0 ] unsigned char 
  4830 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4831 ;;  i               1   11[BANK0 ] unsigned char 
  4832 ;;  j               1    8[BANK0 ] unsigned char 
  4833 ;;  k               1    7[BANK0 ] unsigned char 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;		None               void
  4836 ;; Registers used:
  4837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;Total ram usage:        8 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    7
  4850 ;; This function calls:
  4851 ;;		_getAD
  4852 ;; This function is called by:
  4853 ;;		_main
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           
  4858                           ;psect for function _getLoad_AD
  4859  0991                     _getLoad_AD:	
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4863                           ;getLoad_AD@channel stored from wreg
  4864  0991  0020               	movlb	0	; select bank0
  4865  0992  00A6               	movwf	getLoad_AD@channel
  4866                           
  4867                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4868  0993  01AB               	clrf	getLoad_AD@i
  4869  0994  01A8               	clrf	getLoad_AD@j
  4870  0995  01A7               	clrf	getLoad_AD@k
  4871                           
  4872                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4873  0996  01A9               	clrf	getLoad_AD@ADRES
  4874  0997  01AA               	clrf	getLoad_AD@ADRES+1
  4875                           
  4876                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4877  0998  0022               	movlb	2	; select bank2
  4878  0999  1E39               	btfss	_Load^(0+256),4
  4879  099A  0008               	return
  4880                           
  4881                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4882  099B  30F3               	movlw	243
  4883  099C  0020               	movlb	0	; select bank0
  4884  099D  00A4               	movwf	??_getLoad_AD
  4885  099E  0824               	movf	??_getLoad_AD,w
  4886  099F  00A0               	movwf	getAD@adcon1
  4887  09A0  0826               	movf	getLoad_AD@channel,w
  4888  09A1  319E  26C5  3189   	fcall	_getAD
  4889  09A4  0020               	movlb	0	; select bank0
  4890  09A5  0821               	movf	?_getAD+1,w
  4891  09A6  01AA               	clrf	getLoad_AD@ADRES+1
  4892  09A7  07AA               	addwf	getLoad_AD@ADRES+1,f
  4893  09A8  0820               	movf	?_getAD,w
  4894  09A9  01A9               	clrf	getLoad_AD@ADRES
  4895  09AA  07A9               	addwf	getLoad_AD@ADRES,f
  4896                           
  4897                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4898  09AB  01AB               	clrf	getLoad_AD@i
  4899  09AC  3004               	movlw	4
  4900  09AD  022B               	subwf	getLoad_AD@i,w
  4901  09AE  1803               	btfsc	3,0
  4902  09AF  29D7               	goto	l8127
  4903  09B0                     l8115:	
  4904                           
  4905                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4906  09B0  352B               	lslf	getLoad_AD@i,w
  4907  09B1  3E44               	addlw	(_Load+11)& (0+255)
  4908  09B2  0086               	movwf	6
  4909  09B3  3001               	movlw	1	; select bank2/3
  4910  09B4  0087               	movwf	7
  4911  09B5  3F40               	moviw [0]fsr1
  4912  09B6  00A4               	movwf	??_getLoad_AD
  4913  09B7  3F41               	moviw [1]fsr1
  4914  09B8  00A5               	movwf	??_getLoad_AD+1
  4915  09B9  082A               	movf	getLoad_AD@ADRES+1,w
  4916  09BA  0225               	subwf	??_getLoad_AD+1,w
  4917  09BB  1D03               	skipz
  4918  09BC  29BF               	goto	u8135
  4919  09BD  0829               	movf	getLoad_AD@ADRES,w
  4920  09BE  0224               	subwf	??_getLoad_AD,w
  4921  09BF                     u8135:	
  4922  09BF  1803               	skipnc
  4923  09C0  29CF               	goto	l8123
  4924  09C1  08A8               	movf	getLoad_AD@j,f
  4925  09C2  1D03               	skipz
  4926  09C3  29CF               	goto	l8123
  4927                           
  4928                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4929  09C4  352B               	lslf	getLoad_AD@i,w
  4930  09C5  3E44               	addlw	(_Load+11)& (0+255)
  4931  09C6  0086               	movwf	6
  4932  09C7  3001               	movlw	1	; select bank2/3
  4933  09C8  0087               	movwf	7
  4934  09C9  0829               	movf	getLoad_AD@ADRES,w
  4935  09CA  3FC0               	movwi [0]fsr1
  4936  09CB  082A               	movf	getLoad_AD@ADRES+1,w
  4937  09CC  3FC1               	movwi [1]fsr1
  4938                           
  4939                           ;OverLoad_B1.c: 25: j = 1;
  4940  09CD  01A8               	clrf	getLoad_AD@j
  4941  09CE  0AA8               	incf	getLoad_AD@j,f
  4942  09CF                     l8123:	
  4943  09CF  3001               	movlw	1
  4944  09D0  00A4               	movwf	??_getLoad_AD
  4945  09D1  0824               	movf	??_getLoad_AD,w
  4946  09D2  07AB               	addwf	getLoad_AD@i,f
  4947  09D3  3004               	movlw	4
  4948  09D4  022B               	subwf	getLoad_AD@i,w
  4949  09D5  1C03               	skipc
  4950  09D6  29B0               	goto	l8115
  4951  09D7                     l8127:	
  4952                           
  4953                           ;OverLoad_B1.c: 26: }
  4954                           ;OverLoad_B1.c: 27: }
  4955                           ;OverLoad_B1.c: 28: if (j == 0) {
  4956  09D7  08A8               	movf	getLoad_AD@j,f
  4957  09D8  1D03               	skipz
  4958  09D9  0008               	return
  4959                           
  4960                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4961  09DA  01AB               	clrf	getLoad_AD@i
  4962  09DB                     L1:	
  4963  09DB  3004               	movlw	4
  4964  09DC  022B               	subwf	getLoad_AD@i,w
  4965  09DD  1803               	btfsc	3,0
  4966  09DE  0008               	return
  4967                           
  4968                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4969  09DF  352B               	lslf	getLoad_AD@i,w
  4970  09E0  3E4E               	addlw	(_Load+21)& (0+255)
  4971  09E1  0086               	movwf	6
  4972  09E2  3001               	movlw	1	; select bank2/3
  4973  09E3  0087               	movwf	7
  4974  09E4  3F40               	moviw [0]fsr1
  4975  09E5  00A4               	movwf	??_getLoad_AD
  4976  09E6  3F41               	moviw [1]fsr1
  4977  09E7  00A5               	movwf	??_getLoad_AD+1
  4978  09E8  0825               	movf	??_getLoad_AD+1,w
  4979  09E9  022A               	subwf	getLoad_AD@ADRES+1,w
  4980  09EA  1D03               	skipz
  4981  09EB  29EE               	goto	u8185
  4982  09EC  0824               	movf	??_getLoad_AD,w
  4983  09ED  0229               	subwf	getLoad_AD@ADRES,w
  4984  09EE                     u8185:	
  4985  09EE  1803               	skipnc
  4986  09EF  29FE               	goto	l8143
  4987  09F0  08A7               	movf	getLoad_AD@k,f
  4988  09F1  1D03               	skipz
  4989  09F2  29FE               	goto	l8143
  4990                           
  4991                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4992  09F3  352B               	lslf	getLoad_AD@i,w
  4993  09F4  3E4E               	addlw	(_Load+21)& (0+255)
  4994  09F5  0086               	movwf	6
  4995  09F6  3001               	movlw	1	; select bank2/3
  4996  09F7  0087               	movwf	7
  4997  09F8  0829               	movf	getLoad_AD@ADRES,w
  4998  09F9  3FC0               	movwi [0]fsr1
  4999  09FA  082A               	movf	getLoad_AD@ADRES+1,w
  5000  09FB  3FC1               	movwi [1]fsr1
  5001                           
  5002                           ;OverLoad_B1.c: 32: k = 1;
  5003  09FC  01A7               	clrf	getLoad_AD@k
  5004  09FD  0AA7               	incf	getLoad_AD@k,f
  5005  09FE                     l8143:	
  5006  09FE  3001               	movlw	1
  5007  09FF  00A4               	movwf	??_getLoad_AD
  5008  0A00  0824               	movf	??_getLoad_AD,w
  5009  0A01  07AB               	addwf	getLoad_AD@i,f
  5010  0A02  29DB               	goto	L1
  5011  0A03                     __end_of_getLoad_AD:	
  5012                           
  5013                           	psect	text5
  5014  1EC5                     __ptext5:	
  5015 ;; *************** function _getAD *****************
  5016 ;; Defined at:
  5017 ;;		line 461 in file "../src/MCU_B1.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  adcon0          1    wreg     unsigned char 
  5020 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2    0[BANK0 ] int 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5032 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;Total ram usage:        4 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    6
  5039 ;; This function calls:
  5040 ;;		_Timeout_Counter
  5041 ;;		_set_TimeoutCleared
  5042 ;; This function is called by:
  5043 ;;		_getLoad_AD
  5044 ;;		_getTemp_AD
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _getAD
  5050  1EC5                     _getAD:	
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5054                           ;getAD@adcon0 stored from wreg
  5055  1EC5  0020               	movlb	0	; select bank0
  5056  1EC6  00A3               	movwf	getAD@adcon0
  5057                           
  5058                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5059  1EC7  0823               	movf	getAD@adcon0,w
  5060  1EC8  0021               	movlb	1	; select bank1
  5061  1EC9  009D               	movwf	29	;volatile
  5062                           
  5063                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5064  1ECA  0020               	movlb	0	; select bank0
  5065  1ECB  0820               	movf	getAD@adcon1,w
  5066  1ECC  0021               	movlb	1	; select bank1
  5067  1ECD  009E               	movwf	30	;volatile
  5068                           
  5069                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5070  1ECE  149D               	bsf	29,1	;volatile
  5071                           
  5072                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5073  1ECF  2ED3               	goto	l7591
  5074  1ED0                     l7589:	
  5075                           
  5076                           ;MCU_B1.c: 466: Timeout_Counter();
  5077  1ED0  319C  24D4  319E   	fcall	_Timeout_Counter
  5078  1ED3                     l7591:	
  5079  1ED3  0021               	movlb	1	; select bank1
  5080  1ED4  1C9D               	btfss	29,1	;volatile
  5081  1ED5  2ED8               	goto	l7595
  5082  1ED6  1D39               	btfss	(_myMain^(0+128)+10),2
  5083  1ED7  2ED0               	goto	l7589
  5084  1ED8                     l7595:	
  5085                           
  5086                           ;MCU_B1.c: 467: };
  5087                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5088  1ED8  3199  21F3         	fcall	_set_TimeoutCleared
  5089                           
  5090                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5091  1EDA  0021               	movlb	1	; select bank1
  5092  1EDB  081C               	movf	28,w	;volatile
  5093  1EDC  0020               	movlb	0	; select bank0
  5094  1EDD  01A1               	clrf	?_getAD+1
  5095  1EDE  07A1               	addwf	?_getAD+1,f
  5096  1EDF  0021               	movlb	1	; select bank1
  5097  1EE0  081B               	movf	27,w	;volatile
  5098  1EE1  0020               	movlb	0	; select bank0
  5099  1EE2  01A0               	clrf	?_getAD
  5100  1EE3  07A0               	addwf	?_getAD,f
  5101  1EE4  0008               	return
  5102  1EE5                     __end_of_getAD:	
  5103                           
  5104                           	psect	text6
  5105  1C25                     __ptext6:	
  5106 ;; *************** function _WDT_Main *****************
  5107 ;; Defined at:
  5108 ;;		line 1116 in file "../src/MCU_B1.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;		None
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;		None
  5113 ;; Return value:  Size  Location     Type
  5114 ;;		None               void
  5115 ;; Registers used:
  5116 ;;		wreg, status,2, status,0, pclath, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;Total ram usage:        1 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    6
  5129 ;; This function calls:
  5130 ;;		_WDT_Clearing
  5131 ;; This function is called by:
  5132 ;;		_main
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           
  5137                           ;psect for function _WDT_Main
  5138  1C25                     _WDT_Main:	
  5139                           
  5140                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5144  1C25  0022               	movlb	2	; select bank2
  5145  1C26  1C36               	btfss	_WDT^(0+256),0
  5146  1C27  0008               	return
  5147                           
  5148                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5149  1C28  3001               	movlw	1
  5150  1C29  02B7               	subwf	(_WDT^(0+256)+1),f
  5151  1C2A  0837               	movf	(_WDT^(0+256)+1),w
  5152  1C2B  3AFF               	xorlw	255
  5153  1C2C  1903               	skipnz
  5154  1C2D  0008               	return
  5155                           
  5156                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5157  1C2E  3064               	movlw	100
  5158  1C2F  0020               	movlb	0	; select bank0
  5159  1C30  00A0               	movwf	??_WDT_Main
  5160  1C31  0820               	movf	??_WDT_Main,w
  5161  1C32  0022               	movlb	2	; select bank2
  5162  1C33  00B7               	movwf	(_WDT^(0+256)+1)
  5163                           
  5164                           ;MCU_B1.c: 1120: WDT_Clearing();
  5165  1C34  3180  2002         	fcall	_WDT_Clearing
  5166  1C36  0008               	return
  5167  1C37                     __end_of_WDT_Main:	
  5168                           
  5169                           	psect	text7
  5170  0002                     __ptext7:	
  5171 ;; *************** function _WDT_Clearing *****************
  5172 ;; Defined at:
  5173 ;;		line 1126 in file "../src/MCU_B1.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;		None               void
  5180 ;; Registers used:
  5181 ;;		None
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;Total ram usage:        0 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    5
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_WDT_Main
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function _WDT_Clearing
  5203  0002                     _WDT_Clearing:	
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in _WDT_Clearing: []
  5207  0002  0064               	clrwdt	;# 
  5208  0003  0008               	return
  5209  0004                     __end_of_WDT_Clearing:	
  5210                           
  5211                           	psect	text8
  5212  19C8                     __ptext8:	
  5213 ;; *************** function _Temp_Main *****************
  5214 ;; Defined at:
  5215 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;		None
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;		None               void
  5222 ;; Registers used:
  5223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;Total ram usage:        0 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    8
  5236 ;; This function calls:
  5237 ;;		_setTemp_Main
  5238 ;; This function is called by:
  5239 ;;		_main
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           
  5244                           ;psect for function _Temp_Main
  5245  19C8                     _Temp_Main:	
  5246                           
  5247                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5251  19C8  3186  2629         	fcall	_setTemp_Main
  5252  19CA  0008               	return
  5253  19CB                     __end_of_Temp_Main:	
  5254                           
  5255                           	psect	text9
  5256  0629                     __ptext9:	
  5257 ;; *************** function _setTemp_Main *****************
  5258 ;; Defined at:
  5259 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;		None
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  AD              2   77[BANK0 ] int 
  5264 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5265 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5266 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5267 ;;  error           1   71[BANK0 ] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;		None               void
  5270 ;; Registers used:
  5271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;Total ram usage:       10 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    7
  5284 ;; This function calls:
  5285 ;;		___lwdiv
  5286 ;;		_getMain_All_Error_Status
  5287 ;;		_getMain_All_LightsStatus
  5288 ;;		_setBuz
  5289 ;;		_setOverTemp_ADV_Restore
  5290 ;;		_setProductData
  5291 ;; This function is called by:
  5292 ;;		_Temp_Main
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _setTemp_Main
  5298  0629                     _setTemp_Main:	
  5299                           
  5300                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5304  0629  3000               	movlw	0
  5305  062A  3190  206A  3186   	fcall	_getMain_All_Error_Status
  5306  062D  0020               	movlb	0	; select bank0
  5307  062E  00E5               	movwf	??_setTemp_Main
  5308  062F  0865               	movf	??_setTemp_Main,w
  5309  0630  00E7               	movwf	setTemp_Main@error
  5310                           
  5311                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5312  0631  01E8               	clrf	setTemp_Main@SafeValue
  5313  0632  01E9               	clrf	setTemp_Main@SafeValue+1
  5314  0633  01EA               	clrf	setTemp_Main@DangerValue
  5315  0634  01EB               	clrf	setTemp_Main@DangerValue+1
  5316                           
  5317                           ;OverTemperature_B1.c: 75: int AD = 0;
  5318  0635  01ED               	clrf	setTemp_Main@AD
  5319  0636  01EE               	clrf	setTemp_Main@AD+1
  5320                           
  5321                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5322  0637  319A  2258  3186   	fcall	_getMain_All_LightsStatus
  5323  063A  0020               	movlb	0	; select bank0
  5324  063B  00E5               	movwf	??_setTemp_Main
  5325  063C  0865               	movf	??_setTemp_Main,w
  5326  063D  00EC               	movwf	setTemp_Main@TempGO
  5327                           
  5328                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5329  063E  0021               	movlb	1	; select bank1
  5330  063F  1C57               	btfss	_Temp^(0+128),0
  5331  0640  2EF8               	goto	l1812
  5332                           
  5333                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5334  0641  1957               	btfsc	_Temp^(0+128),2
  5335  0642  2E60               	goto	l7697
  5336                           
  5337                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5338  0643  0020               	movlb	0	; select bank0
  5339  0644  086C               	movf	setTemp_Main@TempGO,w
  5340  0645  3A01               	xorlw	1
  5341  0646  1D03               	skipz
  5342  0647  2E4B               	goto	l1818
  5343  0648  0021               	movlb	1	; select bank1
  5344  0649  1CD7               	btfss	_Temp^(0+128),1
  5345  064A  2E4E               	goto	l7689
  5346  064B                     l1818:	
  5347  064B  0021               	movlb	1	; select bank1
  5348  064C  1CD7               	btfss	_Temp^(0+128),1
  5349  064D  2E5D               	goto	l7695
  5350  064E                     l7689:	
  5351                           
  5352                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5353  064E  3001               	movlw	1
  5354  064F  07D8               	addwf	(_Temp^(0+128)+1),f
  5355  0650  3000               	movlw	0
  5356  0651  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5357                           
  5358                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5359  0652  3000               	movlw	0
  5360  0653  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5361  0654  30FA               	movlw	250
  5362  0655  1903               	skipnz
  5363  0656  0258               	subwf	(_Temp^(0+128)+1),w
  5364  0657  1C03               	skipc
  5365  0658  0008               	return
  5366                           
  5367                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5368  0659  01D8               	clrf	(_Temp^(0+128)+1)
  5369  065A  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5370                           
  5371                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5372  065B  1557               	bsf	_Temp^(0+128),2
  5373                           
  5374                           ;OverTemperature_B1.c: 92: }
  5375                           ;OverTemperature_B1.c: 93: } else {
  5376  065C  0008               	return
  5377  065D                     l7695:	
  5378                           
  5379                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5380  065D  01D8               	clrf	(_Temp^(0+128)+1)
  5381  065E  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5382                           
  5383                           ;OverTemperature_B1.c: 95: }
  5384                           ;OverTemperature_B1.c: 96: } else {
  5385  065F  0008               	return
  5386  0660                     l7697:	
  5387                           
  5388                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5389  0660  3001               	movlw	1
  5390  0661  07D8               	addwf	(_Temp^(0+128)+1),f
  5391  0662  3000               	movlw	0
  5392  0663  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5393                           
  5394                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5395  0664  3000               	movlw	0
  5396  0665  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5397  0666  3005               	movlw	5
  5398  0667  1903               	skipnz
  5399  0668  0258               	subwf	(_Temp^(0+128)+1),w
  5400  0669  1C03               	skipc
  5401  066A  0008               	return
  5402                           
  5403                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5404  066B  01D8               	clrf	(_Temp^(0+128)+1)
  5405  066C  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5406                           
  5407                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5408  066D  3003               	movlw	3
  5409  066E  0020               	movlb	0	; select bank0
  5410  066F  00A0               	movwf	___lwdiv@divisor
  5411  0670  3000               	movlw	0
  5412  0671  00A1               	movwf	___lwdiv@divisor+1
  5413  0672  300A               	movlw	10
  5414  0673  3ED7               	addlw	_Temp& (0+255)
  5415  0674  0086               	movwf	6
  5416  0675  0187               	clrf	7
  5417  0676  3008               	movlw	8
  5418  0677  3ED7               	addlw	_Temp& (0+255)
  5419  0678  0084               	movwf	4
  5420  0679  0185               	clrf	5
  5421  067A  3F00               	moviw [0]fsr0
  5422  067B  0021               	movlb	1	; select bank1
  5423  067C  075D               	addwf	(_Temp^(0+128)+6),w
  5424  067D  0020               	movlb	0	; select bank0
  5425  067E  00E5               	movwf	??_setTemp_Main
  5426  067F  3F01               	moviw [1]fsr0
  5427  0680  0021               	movlb	1	; select bank1
  5428  0681  3D5E               	addwfc	((_Temp+1)^(0+128)+6),w
  5429  0682  0020               	movlb	0	; select bank0
  5430  0683  00E6               	movwf	??_setTemp_Main+1
  5431  0684  3F40               	moviw [0]fsr1
  5432  0685  0765               	addwf	??_setTemp_Main,w
  5433  0686  00A2               	movwf	___lwdiv@dividend
  5434  0687  3F41               	moviw [1]fsr1
  5435  0688  3D66               	addwfc	??_setTemp_Main+1,w
  5436  0689  00A3               	movwf	___lwdiv@dividend+1
  5437  068A  3191  2107  3186   	fcall	___lwdiv
  5438  068D  0020               	movlb	0	; select bank0
  5439  068E  0821               	movf	?___lwdiv+1,w
  5440  068F  01EE               	clrf	setTemp_Main@AD+1
  5441  0690  07EE               	addwf	setTemp_Main@AD+1,f
  5442  0691  0820               	movf	?___lwdiv,w
  5443  0692  01ED               	clrf	setTemp_Main@AD
  5444  0693  07ED               	addwf	setTemp_Main@AD,f
  5445                           
  5446                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5447  0694  319D  25F5  3186   	fcall	_setOverTemp_ADV_Restore
  5448                           
  5449                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5450  0697  0020               	movlb	0	; select bank0
  5451  0698  086E               	movf	setTemp_Main@AD+1,w
  5452  0699  3A80               	xorlw	128
  5453  069A  00E5               	movwf	??_setTemp_Main
  5454  069B  3080               	movlw	128
  5455  069C  0265               	subwf	??_setTemp_Main,w
  5456  069D  1D03               	skipz
  5457  069E  2EA1               	goto	u7425
  5458  069F  3001               	movlw	1
  5459  06A0  026D               	subwf	setTemp_Main@AD,w
  5460  06A1                     u7425:	
  5461  06A1  1C03               	skipc
  5462  06A2  0008               	return
  5463                           
  5464                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5465  06A3  0021               	movlb	1	; select bank1
  5466  06A4  1157               	bcf	_Temp^(0+128),2
  5467                           
  5468                           ;OverTemperature_B1.c: 123: SafeValue = 0x205;
  5469  06A5  3005               	movlw	5
  5470  06A6  0020               	movlb	0	; select bank0
  5471  06A7  00E8               	movwf	setTemp_Main@SafeValue
  5472  06A8  3002               	movlw	2
  5473  06A9  00E9               	movwf	setTemp_Main@SafeValue+1
  5474                           
  5475                           ;OverTemperature_B1.c: 124: DangerValue = 0x1ba;
  5476  06AA  30BA               	movlw	186
  5477  06AB  00EA               	movwf	setTemp_Main@DangerValue
  5478  06AC  3001               	movlw	1
  5479  06AD  00EB               	movwf	setTemp_Main@DangerValue+1
  5480                           
  5481                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5482  06AE  0021               	movlb	1	; select bank1
  5483  06AF  1CD7               	btfss	_Temp^(0+128),1
  5484  06B0  2ECF               	goto	l7727
  5485                           
  5486                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5487  06B1  0020               	movlb	0	; select bank0
  5488  06B2  0869               	movf	setTemp_Main@SafeValue+1,w
  5489  06B3  026E               	subwf	setTemp_Main@AD+1,w
  5490  06B4  1D03               	skipz
  5491  06B5  2EB8               	goto	u7445
  5492  06B6  0868               	movf	setTemp_Main@SafeValue,w
  5493  06B7  026D               	subwf	setTemp_Main@AD,w
  5494  06B8                     u7445:	
  5495  06B8  1C03               	skipc
  5496  06B9  2EE4               	goto	l7737
  5497                           
  5498                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5499  06BA  3001               	movlw	1
  5500  06BB  00E5               	movwf	??_setTemp_Main
  5501  06BC  0865               	movf	??_setTemp_Main,w
  5502  06BD  0021               	movlb	1	; select bank1
  5503  06BE  07DA               	addwf	(_Temp^(0+128)+3),f
  5504                           
  5505                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5506  06BF  3003               	movlw	3
  5507  06C0  025A               	subwf	(_Temp^(0+128)+3),w
  5508  06C1  1C03               	skipc
  5509  06C2  2EE6               	goto	l7739
  5510                           
  5511                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5512  06C3  01DA               	clrf	(_Temp^(0+128)+3)
  5513                           
  5514                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5515  06C4  10D7               	bcf	_Temp^(0+128),1
  5516                           
  5517                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5518  06C5  3064               	movlw	100
  5519  06C6  0020               	movlb	0	; select bank0
  5520  06C7  00A9               	movwf	setBuz@time
  5521  06C8  3000               	movlw	0
  5522  06C9  00AA               	movwf	setBuz@time+1
  5523  06CA  3002               	movlw	2
  5524  06CB  3194  242E  3186   	fcall	_setBuz
  5525                           
  5526                           ;OverTemperature_B1.c: 137: }
  5527                           ;OverTemperature_B1.c: 138: } else {
  5528  06CE  2EE6               	goto	l7739
  5529  06CF                     l7727:	
  5530                           ;OverTemperature_B1.c: 140: }
  5531                           ;OverTemperature_B1.c: 141: } else {
  5532                           
  5533                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5534                           
  5535                           
  5536                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5537  06CF  0020               	movlb	0	; select bank0
  5538  06D0  086E               	movf	setTemp_Main@AD+1,w
  5539  06D1  026B               	subwf	setTemp_Main@DangerValue+1,w
  5540  06D2  1D03               	skipz
  5541  06D3  2ED6               	goto	u7465
  5542  06D4  086D               	movf	setTemp_Main@AD,w
  5543  06D5  026A               	subwf	setTemp_Main@DangerValue,w
  5544  06D6                     u7465:	
  5545  06D6  1C03               	skipc
  5546  06D7  2EE4               	goto	l7737
  5547                           
  5548                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5549  06D8  3001               	movlw	1
  5550  06D9  00E5               	movwf	??_setTemp_Main
  5551  06DA  0865               	movf	??_setTemp_Main,w
  5552  06DB  0021               	movlb	1	; select bank1
  5553  06DC  07DA               	addwf	(_Temp^(0+128)+3),f
  5554                           
  5555                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5556  06DD  3003               	movlw	3
  5557  06DE  025A               	subwf	(_Temp^(0+128)+3),w
  5558  06DF  1C03               	skipc
  5559  06E0  2EE6               	goto	l7739
  5560                           
  5561                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5562  06E1  01DA               	clrf	(_Temp^(0+128)+3)
  5563                           
  5564                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5565  06E2  14D7               	bsf	_Temp^(0+128),1
  5566                           
  5567                           ;OverTemperature_B1.c: 147: }
  5568                           ;OverTemperature_B1.c: 148: } else {
  5569  06E3  2EE6               	goto	l7739
  5570  06E4                     l7737:	
  5571                           
  5572                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5573  06E4  0021               	movlb	1	; select bank1
  5574  06E5  01DA               	clrf	(_Temp^(0+128)+3)
  5575  06E6                     l7739:	
  5576                           
  5577                           ;OverTemperature_B1.c: 150: }
  5578                           ;OverTemperature_B1.c: 151: }
  5579                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5580  06E6  0020               	movlb	0	; select bank0
  5581  06E7  086E               	movf	setTemp_Main@AD+1,w
  5582  06E8  00E5               	movwf	??_setTemp_Main
  5583  06E9  0865               	movf	??_setTemp_Main,w
  5584  06EA  00E2               	movwf	setProductData@value
  5585  06EB  3018               	movlw	24
  5586  06EC  319A  22A6  3186   	fcall	_setProductData
  5587                           
  5588                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5589  06EF  0020               	movlb	0	; select bank0
  5590  06F0  086D               	movf	setTemp_Main@AD,w
  5591  06F1  00E5               	movwf	??_setTemp_Main
  5592  06F2  0865               	movf	??_setTemp_Main,w
  5593  06F3  00E2               	movwf	setProductData@value
  5594  06F4  3019               	movlw	25
  5595  06F5  319A  22A6         	fcall	_setProductData
  5596                           
  5597                           ;OverTemperature_B1.c: 169: }
  5598                           ;OverTemperature_B1.c: 170: }
  5599                           ;OverTemperature_B1.c: 171: }
  5600                           ;OverTemperature_B1.c: 174: } else {
  5601  06F7  0008               	return
  5602  06F8                     l1812:	
  5603                           
  5604                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5605  06F8  1C2F               	btfss	_myMain^(0+128),0
  5606  06F9  0008               	return
  5607                           
  5608                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5609  06FA  1457               	bsf	_Temp^(0+128),0
  5610  06FB  0008               	return
  5611  06FC                     __end_of_setTemp_Main:	
  5612                           
  5613                           	psect	text10
  5614  1DF5                     __ptext10:	
  5615 ;; *************** function _setOverTemp_ADV_Restore *****************
  5616 ;; Defined at:
  5617 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  i               2    1[BANK0 ] int 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;		None               void
  5624 ;; Registers used:
  5625 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:        3 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    5
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_setTemp_Main
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _setOverTemp_ADV_Restore
  5647  1DF5                     _setOverTemp_ADV_Restore:	
  5648                           
  5649                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5650                           
  5651                           ;incstack = 0
  5652                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5653  1DF5  0020               	movlb	0	; select bank0
  5654  1DF6  01A1               	clrf	setOverTemp_ADV_Restore@i
  5655  1DF7  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5656  1DF8                     L2:	
  5657  1DF8  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5658  1DF9  3A80               	xorlw	128
  5659  1DFA  00A0               	movwf	??_setOverTemp_ADV_Restore
  5660  1DFB  3080               	movlw	128
  5661  1DFC  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5662  1DFD  1D03               	skipz
  5663  1DFE  2E01               	goto	u6435
  5664  1DFF  3005               	movlw	5
  5665  1E00  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5666  1E01                     u6435:	
  5667  1E01  1803               	btfsc	3,0
  5668  1E02  0008               	return
  5669                           
  5670                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5671  1E03  0020               	movlb	0	; select bank0
  5672  1E04  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5673  1E05  3EDB               	addlw	(_Temp+4)& (0+255)
  5674  1E06  0086               	movwf	6
  5675  1E07  0187               	clrf	7
  5676  1E08  3000               	movlw	0
  5677  1E09  3FC0               	movwi [0]fsr1
  5678  1E0A  3FC1               	movwi [1]fsr1
  5679  1E0B  3001               	movlw	1
  5680  1E0C  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5681  1E0D  3000               	movlw	0
  5682  1E0E  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5683  1E0F  2DF8               	goto	L2
  5684  1E10                     __end_of_setOverTemp_ADV_Restore:	
  5685                           
  5686                           	psect	text11
  5687  19C5                     __ptext11:	
  5688 ;; *************** function _Temp_Initialization *****************
  5689 ;; Defined at:
  5690 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;		None               void
  5697 ;; Registers used:
  5698 ;;		status,2, status,0, pclath, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:        0 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    6
  5711 ;; This function calls:
  5712 ;;		_setTemp_Initialization
  5713 ;; This function is called by:
  5714 ;;		_main
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _Temp_Initialization
  5720  19C5                     _Temp_Initialization:	
  5721                           
  5722                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5726  19C5  3188  2000         	fcall	_setTemp_Initialization
  5727  19C7  0008               	return
  5728  19C8                     __end_of_Temp_Initialization:	
  5729                           
  5730                           	psect	text12
  5731  0800                     __ptext12:	
  5732 ;; *************** function _setTemp_Initialization *****************
  5733 ;; Defined at:
  5734 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;		None               void
  5741 ;; Registers used:
  5742 ;;		None
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5752 ;;Total ram usage:        0 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    5
  5755 ;; This function calls:
  5756 ;;		Nothing
  5757 ;; This function is called by:
  5758 ;;		_Temp_Initialization
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _setTemp_Initialization
  5764  0800                     _setTemp_Initialization:	
  5765                           
  5766                           ;incstack = 0
  5767                           ; Regs used in _setTemp_Initialization: []
  5768  0800  0008               	return
  5769  0801                     __end_of_setTemp_Initialization:	
  5770                           
  5771                           	psect	text13
  5772  1A1E                     __ptext13:	
  5773 ;; *************** function _Switch_Main *****************
  5774 ;; Defined at:
  5775 ;;		line 76 in file "../src/Switch_B1.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;		None               void
  5782 ;; Registers used:
  5783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    9
  5796 ;; This function calls:
  5797 ;;		_TouchPower
  5798 ;;		_setSw_Main
  5799 ;; This function is called by:
  5800 ;;		_main
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           
  5805                           ;psect for function _Switch_Main
  5806  1A1E                     _Switch_Main:	
  5807                           
  5808                           ;Switch_B1.c: 79: setSw_Main(1);
  5809                           
  5810                           ;incstack = 0
  5811                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5812  1A1E  3001               	movlw	1
  5813  1A1F  3182  2205  319A   	fcall	_setSw_Main
  5814                           
  5815                           ;Switch_B1.c: 91: TouchPower();
  5816  1A22  319C  24E9         	fcall	_TouchPower
  5817  1A24  0008               	return
  5818  1A25                     __end_of_Switch_Main:	
  5819                           
  5820                           	psect	text14
  5821  0205                     __ptext14:	
  5822 ;; *************** function _setSw_Main *****************
  5823 ;; Defined at:
  5824 ;;		line 117 in file "../src/Switch_B1.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  sw              1    wreg     unsigned char 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  sw              1   19[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;		None               void
  5831 ;; Registers used:
  5832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:        3 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    8
  5845 ;; This function calls:
  5846 ;;		_SwPointSelect
  5847 ;;		_getMain_All_Error_Status
  5848 ;;		_getSw_KeyStatus
  5849 ;;		_setBuz
  5850 ;;		_setDimmerLights_DimmingOn
  5851 ;;		_setDimmerLights_SwOff
  5852 ;;		_setDimmerLights_SwOn
  5853 ;;		_setRF_Learn
  5854 ;; This function is called by:
  5855 ;;		_Switch_Main
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           
  5860                           ;psect for function _setSw_Main
  5861  0205                     _setSw_Main:	
  5862                           
  5863                           ;incstack = 0
  5864                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5865                           ;setSw_Main@sw stored from wreg
  5866  0205  0020               	movlb	0	; select bank0
  5867  0206  00B3               	movwf	setSw_Main@sw
  5868                           
  5869                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5870  0207  0833               	movf	setSw_Main@sw,w
  5871  0208  319B  2312  3182   	fcall	_SwPointSelect
  5872                           
  5873                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5874  020B  0021               	movlb	1	; select bank1
  5875  020C  0851               	movf	_Sw^(0+128),w
  5876  020D  0086               	movwf	6
  5877  020E  3001               	movlw	1	; select bank2/3
  5878  020F  0087               	movwf	7
  5879  0210  1C01               	btfss	1,0
  5880  0211  2B81               	goto	l2546
  5881                           
  5882                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5883  0212  3000               	movlw	0
  5884  0213  3190  206A  3182   	fcall	_getMain_All_Error_Status
  5885  0216  3800               	iorlw	0
  5886  0217  1D03               	skipz
  5887  0218  2A37               	goto	l7851
  5888                           
  5889                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5890  0219  0021               	movlb	1	; select bank1
  5891  021A  0A51               	incf	_Sw^(0+128),w
  5892  021B  0086               	movwf	6
  5893  021C  3001               	movlw	1	; select bank2/3
  5894  021D  0087               	movwf	7
  5895  021E  1081               	bcf	1,1
  5896                           
  5897                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5898  021F  0020               	movlb	0	; select bank0
  5899  0220  0833               	movf	setSw_Main@sw,w
  5900  0221  3190  2000  3182   	fcall	_getSw_KeyStatus
  5901  0224  3A01               	xorlw	1
  5902  0225  3000               	movlw	0
  5903  0226  1903               	skipnz
  5904  0227  3001               	movlw	1
  5905  0228  0020               	movlb	0	; select bank0
  5906  0229  00B1               	movwf	??_setSw_Main
  5907  022A  0021               	movlb	1	; select bank1
  5908  022B  0851               	movf	_Sw^(0+128),w
  5909  022C  0086               	movwf	6
  5910  022D  3001               	movlw	1	; select bank2/3
  5911  022E  0087               	movwf	7
  5912  022F  0020               	movlb	0	; select bank0
  5913  0230  0DB1               	rlf	??_setSw_Main,f
  5914  0231  0801               	movf	1,w
  5915  0232  0631               	xorwf	??_setSw_Main,w
  5916  0233  39FD               	andlw	-3
  5917  0234  0631               	xorwf	??_setSw_Main,w
  5918  0235  0081               	movwf	1
  5919                           
  5920                           ;Switch_B1.c: 124: } else {
  5921  0236  2A4D               	goto	l2548
  5922  0237                     l7851:	
  5923                           
  5924                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5925  0237  0021               	movlb	1	; select bank1
  5926  0238  0A51               	incf	_Sw^(0+128),w
  5927  0239  0086               	movwf	6
  5928  023A  3001               	movlw	1	; select bank2/3
  5929  023B  0087               	movwf	7
  5930  023C  1881               	btfsc	1,1
  5931  023D  2A4D               	goto	l2548
  5932                           
  5933                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5934  023E  0A51               	incf	_Sw^(0+128),w
  5935  023F  0086               	movwf	6
  5936  0240  3001               	movlw	1	; select bank2/3
  5937  0241  0087               	movwf	7
  5938  0242  1481               	bsf	1,1
  5939                           
  5940                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5941  0243  0851               	movf	_Sw^(0+128),w
  5942  0244  0086               	movwf	6
  5943  0245  3001               	movlw	1	; select bank2/3
  5944  0246  0087               	movwf	7
  5945  0247  1081               	bcf	1,1
  5946                           
  5947                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5948  0248  0851               	movf	_Sw^(0+128),w
  5949  0249  0086               	movwf	6
  5950  024A  3001               	movlw	1	; select bank2/3
  5951  024B  0087               	movwf	7
  5952  024C  1501               	bsf	1,2
  5953  024D                     l2548:	
  5954                           
  5955                           ;Switch_B1.c: 130: }
  5956                           ;Switch_B1.c: 131: }
  5957                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5958  024D  0021               	movlb	1	; select bank1
  5959  024E  0851               	movf	_Sw^(0+128),w
  5960  024F  0086               	movwf	6
  5961  0250  3001               	movlw	1	; select bank2/3
  5962  0251  0087               	movwf	7
  5963  0252  1C81               	btfss	1,1
  5964  0253  2B29               	goto	l7901
  5965                           
  5966                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5967  0254  0851               	movf	_Sw^(0+128),w
  5968  0255  0086               	movwf	6
  5969  0256  3001               	movlw	1	; select bank2/3
  5970  0257  0087               	movwf	7
  5971  0258  1901               	btfsc	1,2
  5972  0259  2A80               	goto	l7867
  5973                           
  5974                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5975  025A  3001               	movlw	1
  5976  025B  0020               	movlb	0	; select bank0
  5977  025C  00B1               	movwf	??_setSw_Main
  5978  025D  0021               	movlb	1	; select bank1
  5979  025E  0851               	movf	_Sw^(0+128),w
  5980  025F  3E02               	addlw	2
  5981  0260  0086               	movwf	6
  5982  0261  3001               	movlw	1	; select bank2/3
  5983  0262  0087               	movwf	7
  5984  0263  0020               	movlb	0	; select bank0
  5985  0264  0831               	movf	??_setSw_Main,w
  5986  0265  0781               	addwf	1,f
  5987                           
  5988                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5989  0266  0021               	movlb	1	; select bank1
  5990  0267  0851               	movf	_Sw^(0+128),w
  5991  0268  3E02               	addlw	2
  5992  0269  0086               	movwf	6
  5993  026A  3001               	movlw	1	; select bank2/3
  5994  026B  0087               	movwf	7
  5995  026C  3003               	movlw	3
  5996  026D  0201               	subwf	1,w
  5997  026E  1C03               	skipc
  5998  026F  0008               	return
  5999                           
  6000                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  6001  0270  0851               	movf	_Sw^(0+128),w
  6002  0271  3E02               	addlw	2
  6003  0272  0086               	movwf	6
  6004  0273  3001               	movlw	1	; select bank2/3
  6005  0274  0087               	movwf	7
  6006  0275  0181               	clrf	1
  6007                           
  6008                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6009  0276  0851               	movf	_Sw^(0+128),w
  6010  0277  0086               	movwf	6
  6011  0278  3001               	movlw	1	; select bank2/3
  6012  0279  0087               	movwf	7
  6013  027A  1501               	bsf	1,2
  6014                           
  6015                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6016  027B  0020               	movlb	0	; select bank0
  6017  027C  0833               	movf	setSw_Main@sw,w
  6018  027D  3193  2339         	fcall	_setDimmerLights_SwOn
  6019                           
  6020                           ;Switch_B1.c: 147: }
  6021                           ;Switch_B1.c: 148: } else {
  6022  027F  0008               	return
  6023  0280                     l7867:	
  6024                           
  6025                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6026  0280  0021               	movlb	1	; select bank1
  6027  0281  0851               	movf	_Sw^(0+128),w
  6028  0282  0086               	movwf	6
  6029  0283  3001               	movlw	1	; select bank2/3
  6030  0284  0087               	movwf	7
  6031  0285  1981               	btfsc	1,3
  6032  0286  2AB5               	goto	l7877
  6033                           
  6034                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6035  0287  0851               	movf	_Sw^(0+128),w
  6036  0288  3E03               	addlw	3
  6037  0289  0086               	movwf	6
  6038  028A  3001               	movlw	1	; select bank2/3
  6039  028B  0087               	movwf	7
  6040  028C  3001               	movlw	1
  6041  028D  0781               	addwf	1,f
  6042  028E  3141               	addfsr 1,1
  6043  028F  1803               	skipnc
  6044  0290  0A81               	incf	1,f
  6045                           
  6046                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6047  0291  0851               	movf	_Sw^(0+128),w
  6048  0292  3E03               	addlw	3
  6049  0293  0086               	movwf	6
  6050  0294  3001               	movlw	1	; select bank2/3
  6051  0295  0087               	movwf	7
  6052  0296  3F40               	moviw [0]fsr1
  6053  0297  0020               	movlb	0	; select bank0
  6054  0298  00B1               	movwf	??_setSw_Main
  6055  0299  3F41               	moviw [1]fsr1
  6056  029A  00B2               	movwf	??_setSw_Main+1
  6057  029B  3000               	movlw	0
  6058  029C  0232               	subwf	??_setSw_Main+1,w
  6059  029D  304B               	movlw	75
  6060  029E  1903               	skipnz
  6061  029F  0231               	subwf	??_setSw_Main,w
  6062  02A0  1C03               	skipc
  6063  02A1  0008               	return
  6064                           
  6065                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6066  02A2  0021               	movlb	1	; select bank1
  6067  02A3  0851               	movf	_Sw^(0+128),w
  6068  02A4  3E03               	addlw	3
  6069  02A5  0086               	movwf	6
  6070  02A6  3001               	movlw	1	; select bank2/3
  6071  02A7  0087               	movwf	7
  6072  02A8  3000               	movlw	0
  6073  02A9  3FC0               	movwi [0]fsr1
  6074  02AA  3FC1               	movwi [1]fsr1
  6075                           
  6076                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6077  02AB  0851               	movf	_Sw^(0+128),w
  6078  02AC  0086               	movwf	6
  6079  02AD  3001               	movlw	1	; select bank2/3
  6080  02AE  0087               	movwf	7
  6081  02AF  1581               	bsf	1,3
  6082                           
  6083                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6084  02B0  0020               	movlb	0	; select bank0
  6085  02B1  0833               	movf	setSw_Main@sw,w
  6086  02B2  319F  27D8         	fcall	_setDimmerLights_DimmingOn
  6087                           
  6088                           ;Switch_B1.c: 162: }
  6089                           ;Switch_B1.c: 163: } else {
  6090  02B4  0008               	return
  6091  02B5                     l7877:	
  6092                           
  6093                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6094  02B5  0021               	movlb	1	; select bank1
  6095  02B6  0851               	movf	_Sw^(0+128),w
  6096  02B7  0086               	movwf	6
  6097  02B8  3001               	movlw	1	; select bank2/3
  6098  02B9  0087               	movwf	7
  6099  02BA  1A01               	btfsc	1,4
  6100  02BB  2AF5               	goto	l7891
  6101                           
  6102                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6103  02BC  0851               	movf	_Sw^(0+128),w
  6104  02BD  3E05               	addlw	5
  6105  02BE  0086               	movwf	6
  6106  02BF  3001               	movlw	1	; select bank2/3
  6107  02C0  0087               	movwf	7
  6108  02C1  3001               	movlw	1
  6109  02C2  0781               	addwf	1,f
  6110  02C3  3141               	addfsr 1,1
  6111  02C4  1803               	skipnc
  6112  02C5  0A81               	incf	1,f
  6113                           
  6114                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6115  02C6  0851               	movf	_Sw^(0+128),w
  6116  02C7  3E05               	addlw	5
  6117  02C8  0086               	movwf	6
  6118  02C9  3001               	movlw	1	; select bank2/3
  6119  02CA  0087               	movwf	7
  6120  02CB  3F40               	moviw [0]fsr1
  6121  02CC  0020               	movlb	0	; select bank0
  6122  02CD  00B1               	movwf	??_setSw_Main
  6123  02CE  3F41               	moviw [1]fsr1
  6124  02CF  00B2               	movwf	??_setSw_Main+1
  6125  02D0  3000               	movlw	0
  6126  02D1  0232               	subwf	??_setSw_Main+1,w
  6127  02D2  304B               	movlw	75
  6128  02D3  1903               	skipnz
  6129  02D4  0231               	subwf	??_setSw_Main,w
  6130  02D5  1C03               	skipc
  6131  02D6  0008               	return
  6132                           
  6133                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6134  02D7  0021               	movlb	1	; select bank1
  6135  02D8  0851               	movf	_Sw^(0+128),w
  6136  02D9  3E05               	addlw	5
  6137  02DA  0086               	movwf	6
  6138  02DB  3001               	movlw	1	; select bank2/3
  6139  02DC  0087               	movwf	7
  6140  02DD  3000               	movlw	0
  6141  02DE  3FC0               	movwi [0]fsr1
  6142  02DF  3FC1               	movwi [1]fsr1
  6143                           
  6144                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6145  02E0  0851               	movf	_Sw^(0+128),w
  6146  02E1  0086               	movwf	6
  6147  02E2  3001               	movlw	1	; select bank2/3
  6148  02E3  0087               	movwf	7
  6149  02E4  1601               	bsf	1,4
  6150                           
  6151                           ;Switch_B1.c: 172: setRF_Learn(1);
  6152  02E5  3001               	movlw	1
  6153  02E6  319C  2496  3182   	fcall	_setRF_Learn
  6154                           
  6155                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6156  02E9  0021               	movlb	1	; select bank1
  6157  02EA  1EAF               	btfss	_myMain^(0+128),5
  6158  02EB  0008               	return
  6159                           
  6160                           ;Switch_B1.c: 174: setBuz(2, 100);
  6161  02EC  3064               	movlw	100
  6162  02ED  0020               	movlb	0	; select bank0
  6163  02EE  00A9               	movwf	setBuz@time
  6164  02EF  3000               	movlw	0
  6165  02F0  00AA               	movwf	setBuz@time+1
  6166  02F1  3002               	movlw	2
  6167  02F2  3194  242E         	fcall	_setBuz
  6168                           
  6169                           ;Switch_B1.c: 175: }
  6170                           ;Switch_B1.c: 179: }
  6171                           ;Switch_B1.c: 180: } else {
  6172  02F4  0008               	return
  6173  02F5                     l7891:	
  6174                           
  6175                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6176  02F5  0021               	movlb	1	; select bank1
  6177  02F6  0851               	movf	_Sw^(0+128),w
  6178  02F7  0086               	movwf	6
  6179  02F8  3001               	movlw	1	; select bank2/3
  6180  02F9  0087               	movwf	7
  6181  02FA  1A81               	btfsc	1,5
  6182  02FB  0008               	return
  6183                           
  6184                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6185  02FC  0851               	movf	_Sw^(0+128),w
  6186  02FD  3E07               	addlw	7
  6187  02FE  0086               	movwf	6
  6188  02FF  3001               	movlw	1	; select bank2/3
  6189  0300  0087               	movwf	7
  6190  0301  3001               	movlw	1
  6191  0302  0781               	addwf	1,f
  6192  0303  3141               	addfsr 1,1
  6193  0304  1803               	skipnc
  6194  0305  0A81               	incf	1,f
  6195                           
  6196                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6197  0306  0851               	movf	_Sw^(0+128),w
  6198  0307  3E07               	addlw	7
  6199  0308  0086               	movwf	6
  6200  0309  3001               	movlw	1	; select bank2/3
  6201  030A  0087               	movwf	7
  6202  030B  3F40               	moviw [0]fsr1
  6203  030C  0020               	movlb	0	; select bank0
  6204  030D  00B1               	movwf	??_setSw_Main
  6205  030E  3F41               	moviw [1]fsr1
  6206  030F  00B2               	movwf	??_setSw_Main+1
  6207  0310  3000               	movlw	0
  6208  0311  0232               	subwf	??_setSw_Main+1,w
  6209  0312  3096               	movlw	150
  6210  0313  1903               	skipnz
  6211  0314  0231               	subwf	??_setSw_Main,w
  6212  0315  1C03               	skipc
  6213  0316  0008               	return
  6214                           
  6215                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6216  0317  0021               	movlb	1	; select bank1
  6217  0318  0851               	movf	_Sw^(0+128),w
  6218  0319  3E07               	addlw	7
  6219  031A  0086               	movwf	6
  6220  031B  3001               	movlw	1	; select bank2/3
  6221  031C  0087               	movwf	7
  6222  031D  3000               	movlw	0
  6223  031E  3FC0               	movwi [0]fsr1
  6224  031F  3FC1               	movwi [1]fsr1
  6225                           
  6226                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6227  0320  0851               	movf	_Sw^(0+128),w
  6228  0321  0086               	movwf	6
  6229  0322  3001               	movlw	1	; select bank2/3
  6230  0323  0087               	movwf	7
  6231  0324  1681               	bsf	1,5
  6232                           
  6233                           ;Switch_B1.c: 188: setRF_Learn(0);
  6234  0325  3000               	movlw	0
  6235  0326  319C  2496         	fcall	_setRF_Learn
  6236                           
  6237                           ;Switch_B1.c: 191: }
  6238                           ;Switch_B1.c: 192: }
  6239                           ;Switch_B1.c: 193: }
  6240                           ;Switch_B1.c: 195: }
  6241                           ;Switch_B1.c: 196: }
  6242                           ;Switch_B1.c: 197: } else {
  6243  0328  0008               	return
  6244  0329                     l7901:	
  6245                           
  6246                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6247  0329  0021               	movlb	1	; select bank1
  6248  032A  0851               	movf	_Sw^(0+128),w
  6249  032B  0086               	movwf	6
  6250  032C  3001               	movlw	1	; select bank2/3
  6251  032D  0087               	movwf	7
  6252  032E  1D01               	btfss	1,2
  6253  032F  0008               	return
  6254                           
  6255                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6256  0330  3001               	movlw	1
  6257  0331  0020               	movlb	0	; select bank0
  6258  0332  00B1               	movwf	??_setSw_Main
  6259  0333  0021               	movlb	1	; select bank1
  6260  0334  0851               	movf	_Sw^(0+128),w
  6261  0335  3E02               	addlw	2
  6262  0336  0086               	movwf	6
  6263  0337  3001               	movlw	1	; select bank2/3
  6264  0338  0087               	movwf	7
  6265  0339  0020               	movlb	0	; select bank0
  6266  033A  0831               	movf	??_setSw_Main,w
  6267  033B  0781               	addwf	1,f
  6268                           
  6269                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (60 / 20)) {
  6270  033C  0021               	movlb	1	; select bank1
  6271  033D  0851               	movf	_Sw^(0+128),w
  6272  033E  3E02               	addlw	2
  6273  033F  0086               	movwf	6
  6274  0340  3001               	movlw	1	; select bank2/3
  6275  0341  0087               	movwf	7
  6276  0342  3003               	movlw	3
  6277  0343  0201               	subwf	1,w
  6278  0344  1C03               	skipc
  6279  0345  0008               	return
  6280                           
  6281                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6282  0346  0851               	movf	_Sw^(0+128),w
  6283  0347  3E02               	addlw	2
  6284  0348  0086               	movwf	6
  6285  0349  3001               	movlw	1	; select bank2/3
  6286  034A  0087               	movwf	7
  6287  034B  0181               	clrf	1
  6288                           
  6289                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6290  034C  0851               	movf	_Sw^(0+128),w
  6291  034D  0086               	movwf	6
  6292  034E  3001               	movlw	1	; select bank2/3
  6293  034F  0087               	movwf	7
  6294  0350  1101               	bcf	1,2
  6295                           
  6296                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6297  0351  0851               	movf	_Sw^(0+128),w
  6298  0352  3E03               	addlw	3
  6299  0353  0086               	movwf	6
  6300  0354  3001               	movlw	1	; select bank2/3
  6301  0355  0087               	movwf	7
  6302  0356  3000               	movlw	0
  6303  0357  3FC0               	movwi [0]fsr1
  6304  0358  3FC1               	movwi [1]fsr1
  6305                           
  6306                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6307  0359  0851               	movf	_Sw^(0+128),w
  6308  035A  0086               	movwf	6
  6309  035B  3001               	movlw	1	; select bank2/3
  6310  035C  0087               	movwf	7
  6311  035D  1181               	bcf	1,3
  6312                           
  6313                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6314  035E  0851               	movf	_Sw^(0+128),w
  6315  035F  0086               	movwf	6
  6316  0360  3001               	movlw	1	; select bank2/3
  6317  0361  0087               	movwf	7
  6318  0362  1201               	bcf	1,4
  6319                           
  6320                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6321  0363  0851               	movf	_Sw^(0+128),w
  6322  0364  0086               	movwf	6
  6323  0365  3001               	movlw	1	; select bank2/3
  6324  0366  0087               	movwf	7
  6325  0367  1281               	bcf	1,5
  6326                           
  6327                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6328  0368  0851               	movf	_Sw^(0+128),w
  6329  0369  3E05               	addlw	5
  6330  036A  0086               	movwf	6
  6331  036B  3001               	movlw	1	; select bank2/3
  6332  036C  0087               	movwf	7
  6333  036D  3000               	movlw	0
  6334  036E  3FC0               	movwi [0]fsr1
  6335  036F  3FC1               	movwi [1]fsr1
  6336                           
  6337                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6338  0370  0851               	movf	_Sw^(0+128),w
  6339  0371  3E07               	addlw	7
  6340  0372  0086               	movwf	6
  6341  0373  3001               	movlw	1	; select bank2/3
  6342  0374  0087               	movwf	7
  6343  0375  3000               	movlw	0
  6344  0376  3FC0               	movwi [0]fsr1
  6345  0377  3FC1               	movwi [1]fsr1
  6346                           
  6347                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6348  0378  0020               	movlb	0	; select bank0
  6349  0379  0833               	movf	setSw_Main@sw,w
  6350  037A  3192  22AD  3182   	fcall	_setDimmerLights_SwOff
  6351                           
  6352                           ;Switch_B1.c: 220: setRF_Learn(0);
  6353  037D  3000               	movlw	0
  6354  037E  319C  2496         	fcall	_setRF_Learn
  6355                           
  6356                           ;Switch_B1.c: 222: }
  6357                           ;Switch_B1.c: 223: }
  6358                           ;Switch_B1.c: 224: }
  6359                           ;Switch_B1.c: 225: } else {
  6360  0380  0008               	return
  6361  0381                     l2546:	
  6362                           
  6363                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6364  0381  1C2F               	btfss	_myMain^(0+128),0
  6365  0382  0008               	return
  6366                           
  6367                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6368  0383  0851               	movf	_Sw^(0+128),w
  6369  0384  0086               	movwf	6
  6370  0385  3001               	movlw	1	; select bank2/3
  6371  0386  0087               	movwf	7
  6372  0387  1401               	bsf	1,0
  6373  0388  0008               	return
  6374  0389                     __end_of_setSw_Main:	
  6375                           
  6376                           	psect	text15
  6377  1C96                     __ptext15:	
  6378 ;; *************** function _setRF_Learn *****************
  6379 ;; Defined at:
  6380 ;;		line 33 in file "../src/RF_Control_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  command         1    wreg     unsigned char 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  command         1    1[BANK0 ] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        2 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    5
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_setSw_Main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _setRF_Learn
  6410  1C96                     _setRF_Learn:	
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6414                           ;setRF_Learn@command stored from wreg
  6415  1C96  0020               	movlb	0	; select bank0
  6416  1C97  00A1               	movwf	setRF_Learn@command
  6417                           
  6418                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6419  1C98  0821               	movf	setRF_Learn@command,w
  6420  1C99  3A01               	xorlw	1
  6421  1C9A  3000               	movlw	0
  6422  1C9B  1903               	skipnz
  6423  1C9C  3001               	movlw	1
  6424  1C9D  00A0               	movwf	??_setRF_Learn
  6425  1C9E  0EA0               	swapf	??_setRF_Learn,f
  6426  1C9F  0DA0               	rlf	??_setRF_Learn,f
  6427  1CA0  0DA0               	rlf	??_setRF_Learn,f
  6428  1CA1  0021               	movlb	1	; select bank1
  6429  1CA2  0820               	movf	_RF1^(0+128),w
  6430  1CA3  0020               	movlb	0	; select bank0
  6431  1CA4  0620               	xorwf	??_setRF_Learn,w
  6432  1CA5  39BF               	andlw	-65
  6433  1CA6  0620               	xorwf	??_setRF_Learn,w
  6434  1CA7  0021               	movlb	1	; select bank1
  6435  1CA8  00A0               	movwf	_RF1^(0+128)
  6436  1CA9  0008               	return
  6437  1CAA                     __end_of_setRF_Learn:	
  6438                           
  6439                           	psect	text16
  6440  1FD8                     __ptext16:	
  6441 ;; *************** function _setDimmerLights_DimmingOn *****************
  6442 ;; Defined at:
  6443 ;;		line 811 in file "../src/Dimmer_B1.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  sw              1    wreg     unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  sw              1    2[BANK0 ] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        1 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    6
  6464 ;; This function calls:
  6465 ;;		_DimmerLights_SelectPointer
  6466 ;; This function is called by:
  6467 ;;		_setSw_Main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _setDimmerLights_DimmingOn
  6473  1FD8                     _setDimmerLights_DimmingOn:	
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6477                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6478  1FD8  0020               	movlb	0	; select bank0
  6479  1FD9  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6480                           
  6481                           ;Dimmer_B1.c: 817: DimmerLights_SelectPointer(sw);
  6482  1FDA  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6483  1FDB  319A  229A  319F   	fcall	_DimmerLights_SelectPointer
  6484                           
  6485                           ;Dimmer_B1.c: 818: if (DimmerLights->Trigger == 0) {
  6486  1FDE  0021               	movlb	1	; select bank1
  6487  1FDF  084C               	movf	_DimmerLights^(0+128),w
  6488  1FE0  0086               	movwf	6
  6489  1FE1  3001               	movlw	1	; select bank2/3
  6490  1FE2  0087               	movwf	7
  6491  1FE3  1881               	btfsc	1,1
  6492  1FE4  0008               	return
  6493                           
  6494                           ;Dimmer_B1.c: 819: if (DimmerLights->SwFlag == 1) {
  6495  1FE5  084C               	movf	_DimmerLights^(0+128),w
  6496  1FE6  0086               	movwf	6
  6497  1FE7  3001               	movlw	1	; select bank2/3
  6498  1FE8  0087               	movwf	7
  6499  1FE9  1C01               	btfss	1,0
  6500  1FEA  0008               	return
  6501                           
  6502                           ;Dimmer_B1.c: 820: DimmerLights->Status = 1;
  6503  1FEB  0A4C               	incf	_DimmerLights^(0+128),w
  6504  1FEC  0086               	movwf	6
  6505  1FED  3001               	movlw	1	; select bank2/3
  6506  1FEE  0087               	movwf	7
  6507  1FEF  1401               	bsf	1,0
  6508                           
  6509                           ;Dimmer_B1.c: 822: DimmerLights->DimmingSwFlag = 1;
  6510  1FF0  084C               	movf	_DimmerLights^(0+128),w
  6511  1FF1  0086               	movwf	6
  6512  1FF2  3001               	movlw	1	; select bank2/3
  6513  1FF3  0087               	movwf	7
  6514  1FF4  1581               	bsf	1,3
  6515                           
  6516                           ;Dimmer_B1.c: 823: DimmerLights->DimmingTrigger = 1;
  6517  1FF5  084C               	movf	_DimmerLights^(0+128),w
  6518  1FF6  0086               	movwf	6
  6519  1FF7  3001               	movlw	1	; select bank2/3
  6520  1FF8  0087               	movwf	7
  6521  1FF9  1601               	bsf	1,4
  6522                           
  6523                           ;Dimmer_B1.c: 824: DimmerLights->DimmingSwitch = 1;
  6524  1FFA  084C               	movf	_DimmerLights^(0+128),w
  6525  1FFB  0086               	movwf	6
  6526  1FFC  3001               	movlw	1	; select bank2/3
  6527  1FFD  0087               	movwf	7
  6528  1FFE  1681               	bsf	1,5
  6529  1FFF  0008               	return
  6530  2000                     __end_of_setDimmerLights_DimmingOn:	
  6531                           
  6532                           	psect	text17
  6533  1000                     __ptext17:	
  6534 ;; *************** function _getSw_KeyStatus *****************
  6535 ;; Defined at:
  6536 ;;		line 238 in file "../src/Switch_B1.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  sw              1    wreg     unsigned char 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  sw              1    0[COMMON] unsigned char 
  6541 ;;  status          1    1[BANK0 ] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      unsigned char 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;Total ram usage:        3 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    5
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_setSw_Main
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _getSw_KeyStatus
  6567  1000                     _getSw_KeyStatus:	
  6568                           
  6569                           ;Switch_B1.c: 239: char status = 0;
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6573  1000  0020               	movlb	0	; select bank0
  6574  1001  01A1               	clrf	getSw_KeyStatus@status
  6575                           
  6576                           ;Switch_B1.c: 272: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6577  1002  01A2               	clrf	_getSw_KeyStatus$6480
  6578  1003  0AA2               	incf	_getSw_KeyStatus$6480,f
  6579  1004  1F0C               	btfss	12,6	;volatile
  6580  1005  1A0C               	btfsc	12,4	;volatile
  6581  1006  280B               	goto	l7271
  6582  1007  1C0C               	btfss	12,0	;volatile
  6583  1008  1B8C               	btfsc	12,7	;volatile
  6584  1009  280B               	goto	l7271
  6585  100A  01A2               	clrf	_getSw_KeyStatus$6480
  6586  100B                     l7271:	
  6587  100B  0822               	movf	_getSw_KeyStatus$6480,w
  6588  100C  00A0               	movwf	??_getSw_KeyStatus
  6589  100D  0820               	movf	??_getSw_KeyStatus,w
  6590  100E  00A1               	movwf	getSw_KeyStatus@status
  6591                           
  6592                           ;Switch_B1.c: 276: return status;
  6593  100F  0821               	movf	getSw_KeyStatus@status,w
  6594  1010  0008               	return
  6595  1011                     __end_of_getSw_KeyStatus:	
  6596                           
  6597                           	psect	text18
  6598  1B12                     __ptext18:	
  6599 ;; *************** function _SwPointSelect *****************
  6600 ;; Defined at:
  6601 ;;		line 25 in file "../src/Switch_B1.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  sw              1    wreg     unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  sw              1    1[BANK0 ] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;Total ram usage:        2 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    5
  6622 ;; This function calls:
  6623 ;;		Nothing
  6624 ;; This function is called by:
  6625 ;;		_setSw_Main
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           
  6630                           ;psect for function _SwPointSelect
  6631  1B12                     _SwPointSelect:	
  6632                           
  6633                           ;incstack = 0
  6634                           ; Regs used in _SwPointSelect: [wreg]
  6635                           ;SwPointSelect@sw stored from wreg
  6636  1B12  0020               	movlb	0	; select bank0
  6637  1B13  00A1               	movwf	SwPointSelect@sw
  6638                           
  6639                           ;Switch_B1.c: 28: if (sw == 1) {
  6640  1B14  0821               	movf	SwPointSelect@sw,w
  6641  1B15  3A01               	xorlw	1
  6642  1B16  1D03               	skipz
  6643  1B17  0008               	return
  6644                           
  6645                           ;Switch_B1.c: 29: Sw = &Sw1;
  6646  1B18  30BE               	movlw	_Sw1& (0+255)
  6647  1B19  00A0               	movwf	??_SwPointSelect
  6648  1B1A  0820               	movf	??_SwPointSelect,w
  6649  1B1B  0021               	movlb	1	; select bank1
  6650  1B1C  00D1               	movwf	_Sw^(0+128)
  6651  1B1D  0008               	return
  6652  1B1E                     __end_of_SwPointSelect:	
  6653                           
  6654                           	psect	text19
  6655  1CE9                     __ptext19:	
  6656 ;; *************** function _TouchPower *****************
  6657 ;; Defined at:
  6658 ;;		line 10 in file "../src/Switch_B1.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        0 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    6
  6679 ;; This function calls:
  6680 ;;		_Timeout_Counter
  6681 ;;		_set_TimeoutCleared
  6682 ;; This function is called by:
  6683 ;;		_Switch_Main
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _TouchPower
  6689  1CE9                     _TouchPower:	
  6690                           
  6691                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6695  1CE9  0021               	movlb	1	; select bank1
  6696  1CEA  1C2F               	btfss	_myMain^(0+128),0
  6697  1CEB  0008               	return
  6698                           
  6699                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6700  1CEC  0020               	movlb	0	; select bank0
  6701  1CED  180D               	btfsc	13,0	;volatile
  6702  1CEE  0008               	return
  6703  1CEF  2CF5               	goto	l7833
  6704  1CF0                     l2526:	
  6705                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6706                           
  6707                           
  6708                           ;Switch_B1.c: 14: RB0 = 1;
  6709  1CF0  0020               	movlb	0	; select bank0
  6710  1CF1  140D               	bsf	13,0	;volatile
  6711                           
  6712                           ;Switch_B1.c: 15: Timeout_Counter();
  6713  1CF2  319C  24D4  319C   	fcall	_Timeout_Counter
  6714  1CF5                     l7833:	
  6715  1CF5  0020               	movlb	0	; select bank0
  6716  1CF6  180D               	btfsc	13,0	;volatile
  6717  1CF7  2CFB               	goto	l7837
  6718  1CF8  0021               	movlb	1	; select bank1
  6719  1CF9  1D39               	btfss	(_myMain^(0+128)+10),2
  6720  1CFA  2CF0               	goto	l2526
  6721  1CFB                     l7837:	
  6722                           
  6723                           ;Switch_B1.c: 16: }
  6724                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6725  1CFB  3199  21F3         	fcall	_set_TimeoutCleared
  6726  1CFD  0008               	return
  6727  1CFE                     __end_of_TouchPower:	
  6728                           
  6729                           	psect	text20
  6730  19F3                     __ptext20:	
  6731 ;; *************** function _set_TimeoutCleared *****************
  6732 ;; Defined at:
  6733 ;;		line 281 in file "../src/Main_B1.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;		None               void
  6740 ;; Registers used:
  6741 ;;		status,2
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    5
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_getAD
  6758 ;;		_TouchPower
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           
  6763                           ;psect for function _set_TimeoutCleared
  6764  19F3                     _set_TimeoutCleared:	
  6765                           
  6766                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in _set_TimeoutCleared: [status,2]
  6770  19F3  0021               	movlb	1	; select bank1
  6771  19F4  1139               	bcf	(_myMain^(0+128)+10),2
  6772                           
  6773                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6774  19F5  01BA               	clrf	(_myMain^(0+128)+11)
  6775  19F6  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6776  19F7  0008               	return
  6777  19F8                     __end_of_set_TimeoutCleared:	
  6778                           
  6779                           	psect	text21
  6780  1CD4                     __ptext21:	
  6781 ;; *************** function _Timeout_Counter *****************
  6782 ;; Defined at:
  6783 ;;		line 272 in file "../src/Main_B1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    5
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		_getAD
  6808 ;;		_TouchPower
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _Timeout_Counter
  6814  1CD4                     _Timeout_Counter:	
  6815                           
  6816                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6820  1CD4  3001               	movlw	1
  6821  1CD5  0021               	movlb	1	; select bank1
  6822  1CD6  07BA               	addwf	(_myMain^(0+128)+11),f
  6823  1CD7  3000               	movlw	0
  6824  1CD8  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6825                           
  6826                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6827  1CD9  300B               	movlw	11
  6828  1CDA  3EAF               	addlw	_myMain& (0+255)
  6829  1CDB  0086               	movwf	6
  6830  1CDC  0187               	clrf	7
  6831  1CDD  3F40               	moviw [0]fsr1
  6832  1CDE  3AA8               	xorlw	168
  6833  1CDF  1D03               	skipz
  6834  1CE0  2CE3               	goto	u6405
  6835  1CE1  3F41               	moviw [1]fsr1
  6836  1CE2  3A61               	xorlw	97
  6837  1CE3                     u6405:	
  6838  1CE3  1D03               	skipz
  6839  1CE4  0008               	return
  6840                           
  6841                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6842  1CE5  01BA               	clrf	(_myMain^(0+128)+11)
  6843  1CE6  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6844                           
  6845                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6846  1CE7  1539               	bsf	(_myMain^(0+128)+10),2
  6847  1CE8  0008               	return
  6848  1CE9                     __end_of_Timeout_Counter:	
  6849                           
  6850                           	psect	text22
  6851  19EF                     __ptext22:	
  6852 ;; *************** function _Switch_Initialization *****************
  6853 ;; Defined at:
  6854 ;;		line 46 in file "../src/Switch_B1.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;		None
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;		None
  6859 ;; Return value:  Size  Location     Type
  6860 ;;		None               void
  6861 ;; Registers used:
  6862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;Total ram usage:        0 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    8
  6875 ;; This function calls:
  6876 ;;		_setSw_Initialization
  6877 ;; This function is called by:
  6878 ;;		_main
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _Switch_Initialization
  6884  19EF                     _Switch_Initialization:	
  6885                           
  6886                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6890  19EF  3001               	movlw	1
  6891  19F0  319B  2367         	fcall	_setSw_Initialization
  6892  19F2  0008               	return
  6893  19F3                     __end_of_Switch_Initialization:	
  6894                           
  6895                           	psect	text23
  6896  1B67                     __ptext23:	
  6897 ;; *************** function _setSw_Initialization *****************
  6898 ;; Defined at:
  6899 ;;		line 66 in file "../src/Switch_B1.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;  sw              1    wreg     unsigned char 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  sw              1    4[BANK0 ] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;		None               void
  6906 ;; Registers used:
  6907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;Total ram usage:        1 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    7
  6920 ;; This function calls:
  6921 ;;		_setLED
  6922 ;; This function is called by:
  6923 ;;		_Switch_Initialization
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           
  6928                           ;psect for function _setSw_Initialization
  6929  1B67                     _setSw_Initialization:	
  6930                           
  6931                           ;incstack = 0
  6932                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6933                           ;setSw_Initialization@sw stored from wreg
  6934  1B67  0020               	movlb	0	; select bank0
  6935  1B68  00A4               	movwf	setSw_Initialization@sw
  6936                           
  6937                           ;Switch_B1.c: 68: setLED(sw, 1);
  6938  1B69  01A2               	clrf	setLED@command
  6939  1B6A  0AA2               	incf	setLED@command,f
  6940  1B6B  0824               	movf	setSw_Initialization@sw,w
  6941  1B6C  3191  2176  319B   	fcall	_setLED
  6942                           
  6943                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6944  1B6F  0020               	movlb	0	; select bank0
  6945  1B70  01A2               	clrf	setLED@command
  6946  1B71  0AA2               	incf	setLED@command,f
  6947  1B72  0824               	movf	setSw_Initialization@sw,w
  6948  1B73  3E01               	addlw	1
  6949  1B74  3191  2176         	fcall	_setLED
  6950  1B76  0008               	return
  6951  1B77                     __end_of_setSw_Initialization:	
  6952                           
  6953                           	psect	text24
  6954  19C2                     __ptext24:	
  6955 ;; *************** function _RF_Main *****************
  6956 ;; Defined at:
  6957 ;;		line 26 in file "../src/RF_Control_B1.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;		None
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;		None
  6962 ;; Return value:  Size  Location     Type
  6963 ;;		None               void
  6964 ;; Registers used:
  6965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;Total ram usage:        0 bytes
  6976 ;; Hardware stack levels used:    1
  6977 ;; Hardware stack levels required when called:   12
  6978 ;; This function calls:
  6979 ;;		_setRF_Main
  6980 ;; This function is called by:
  6981 ;;		_main
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           
  6986                           ;psect for function _RF_Main
  6987  19C2                     _RF_Main:	
  6988                           
  6989                           ;RF_Control_B1.c: 28: setRF_Main();
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6993  19C2  3184  247F         	fcall	_setRF_Main
  6994  19C4  0008               	return
  6995  19C5                     __end_of_RF_Main:	
  6996                           
  6997                           	psect	text25
  6998  047F                     __ptext25:	
  6999 ;; *************** function _setRF_Main *****************
  7000 ;; Defined at:
  7001 ;;		line 53 in file "../src/RF_Control_B1.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  error           1    4[BANK1 ] unsigned char 
  7006 ;; Return value:  Size  Location     Type
  7007 ;;		None               void
  7008 ;; Registers used:
  7009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;Total ram usage:        2 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:   11
  7022 ;; This function calls:
  7023 ;;		_CC2500_PowerOnInitial
  7024 ;;		_CC2500_RxData
  7025 ;;		_CC2500_TxData
  7026 ;;		_CC2500_WriteCommand
  7027 ;;		_RF_RxDisable
  7028 ;;		___lwdiv
  7029 ;;		_getBuz_GO
  7030 ;;		_getRF_KeyStatus
  7031 ;;		_getRxData
  7032 ;; This function is called by:
  7033 ;;		_RF_Main
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _setRF_Main
  7039  047F                     _setRF_Main:	
  7040                           
  7041                           ;RF_Control_B1.c: 54: char error = 0;
  7042                           
  7043                           ;incstack = 0
  7044                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7045  047F  0021               	movlb	1	; select bank1
  7046  0480  01E9               	clrf	setRF_Main@error^(0+128)
  7047                           
  7048                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7049  0481  1C20               	btfss	_RF1^(0+128),0
  7050  0482  2D50               	goto	l2155
  7051                           
  7052                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7053  0483  319B  23BB  3184   	fcall	_getBuz_GO
  7054  0486  0020               	movlb	0	; select bank0
  7055  0487  0821               	movf	?_getBuz_GO+1,w
  7056  0488  0420               	iorwf	?_getBuz_GO,w
  7057  0489  1D03               	skipz
  7058  048A  2D31               	goto	l8933
  7059                           
  7060                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7061  048B  319B  23CC  3184   	fcall	_getRF_KeyStatus
  7062  048E  3A01               	xorlw	1
  7063  048F  3000               	movlw	0
  7064  0490  1903               	skipnz
  7065  0491  3001               	movlw	1
  7066  0492  0021               	movlb	1	; select bank1
  7067  0493  00E8               	movwf	??_setRF_Main^(0+128)
  7068  0494  0CE8               	rrf	??_setRF_Main^(0+128),f
  7069  0495  0CE8               	rrf	??_setRF_Main^(0+128),f
  7070  0496  0820               	movf	_RF1^(0+128),w
  7071  0497  0668               	xorwf	??_setRF_Main^(0+128),w
  7072  0498  397F               	andlw	-129
  7073  0499  0668               	xorwf	??_setRF_Main^(0+128),w
  7074  049A  00A0               	movwf	_RF1^(0+128)
  7075                           
  7076                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7077  049B  1FA0               	btfss	_RF1^(0+128),7
  7078  049C  2C9F               	goto	l2159
  7079  049D  1F20               	btfss	_RF1^(0+128),6
  7080  049E  2D31               	goto	l8933
  7081  049F                     l2159:	
  7082                           
  7083                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7084  049F  1D20               	btfss	_RF1^(0+128),2
  7085  04A0  2CF0               	goto	l2160
  7086                           
  7087                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7088  04A1  1B20               	btfsc	_RF1^(0+128),6
  7089  04A2  2CEB               	goto	l8905
  7090                           
  7091                           ;RF_Control_B1.c: 68: RF1.Count++;
  7092  04A3  3001               	movlw	1
  7093  04A4  07A3               	addwf	(_RF1^(0+128)+3),f
  7094  04A5  3000               	movlw	0
  7095  04A6  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7096                           
  7097                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7098  04A7  3014               	movlw	20
  7099  04A8  0020               	movlb	0	; select bank0
  7100  04A9  00A0               	movwf	___lwdiv@divisor
  7101  04AA  3000               	movlw	0
  7102  04AB  00A1               	movwf	___lwdiv@divisor+1
  7103  04AC  0021               	movlb	1	; select bank1
  7104  04AD  0829               	movf	((_RF1+1)^(0+128)+8),w
  7105  04AE  0020               	movlb	0	; select bank0
  7106  04AF  01A3               	clrf	___lwdiv@dividend+1
  7107  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  7108  04B1  0021               	movlb	1	; select bank1
  7109  04B2  0828               	movf	(_RF1^(0+128)+8),w
  7110  04B3  0020               	movlb	0	; select bank0
  7111  04B4  01A2               	clrf	___lwdiv@dividend
  7112  04B5  07A2               	addwf	___lwdiv@dividend,f
  7113  04B6  3191  2107  3184   	fcall	___lwdiv
  7114  04B9  0020               	movlb	0	; select bank0
  7115  04BA  0821               	movf	?___lwdiv+1,w
  7116  04BB  0021               	movlb	1	; select bank1
  7117  04BC  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7118  04BD  1D03               	skipz
  7119  04BE  2CC3               	goto	u9315
  7120  04BF  0020               	movlb	0	; select bank0
  7121  04C0  0820               	movf	?___lwdiv,w
  7122  04C1  0021               	movlb	1	; select bank1
  7123  04C2  0223               	subwf	(_RF1^(0+128)+3),w
  7124  04C3                     u9315:	
  7125  04C3  1C03               	skipc
  7126  04C4  2D31               	goto	l8933
  7127                           
  7128                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7129  04C5  3014               	movlw	20
  7130  04C6  0020               	movlb	0	; select bank0
  7131  04C7  00A0               	movwf	___lwdiv@divisor
  7132  04C8  3000               	movlw	0
  7133  04C9  00A1               	movwf	___lwdiv@divisor+1
  7134  04CA  0021               	movlb	1	; select bank1
  7135  04CB  0829               	movf	((_RF1+1)^(0+128)+8),w
  7136  04CC  0020               	movlb	0	; select bank0
  7137  04CD  01A3               	clrf	___lwdiv@dividend+1
  7138  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  7139  04CF  0021               	movlb	1	; select bank1
  7140  04D0  0828               	movf	(_RF1^(0+128)+8),w
  7141  04D1  0020               	movlb	0	; select bank0
  7142  04D2  01A2               	clrf	___lwdiv@dividend
  7143  04D3  07A2               	addwf	___lwdiv@dividend,f
  7144  04D4  3191  2107  3184   	fcall	___lwdiv
  7145  04D7  0020               	movlb	0	; select bank0
  7146  04D8  0821               	movf	?___lwdiv+1,w
  7147  04D9  0021               	movlb	1	; select bank1
  7148  04DA  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7149  04DB  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7150  04DC  0020               	movlb	0	; select bank0
  7151  04DD  0820               	movf	?___lwdiv,w
  7152  04DE  0021               	movlb	1	; select bank1
  7153  04DF  01A3               	clrf	(_RF1^(0+128)+3)
  7154  04E0  07A3               	addwf	(_RF1^(0+128)+3),f
  7155                           
  7156                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7157  04E1  1120               	bcf	_RF1^(0+128),2
  7158                           
  7159                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7160  04E2  01AB               	clrf	(_RF1^(0+128)+11)
  7161  04E3  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7162                           
  7163                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7164  04E4  319B  2358  3184   	fcall	_RF_RxDisable
  7165                           
  7166                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7167  04E7  3188  20B6  3184   	fcall	_CC2500_TxData
  7168                           
  7169                           ;RF_Control_B1.c: 77: }
  7170                           ;RF_Control_B1.c: 78: } else {
  7171  04EA  2D31               	goto	l8933
  7172  04EB                     l8905:	
  7173                           
  7174                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7175  04EB  0021               	movlb	1	; select bank1
  7176  04EC  01A3               	clrf	(_RF1^(0+128)+3)
  7177  04ED  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7178                           
  7179                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7180  04EE  1120               	bcf	_RF1^(0+128),2
  7181                           
  7182                           ;RF_Control_B1.c: 81: }
  7183                           ;RF_Control_B1.c: 82: } else {
  7184  04EF  2D31               	goto	l8933
  7185  04F0                     l2160:	
  7186                           
  7187                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7188  04F0  1DA0               	btfss	_RF1^(0+128),3
  7189  04F1  2CFF               	goto	l8919
  7190                           
  7191                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7192  04F2  3188  204B  3184   	fcall	_CC2500_RxData
  7193                           
  7194                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7195  04F5  0021               	movlb	1	; select bank1
  7196  04F6  1CA0               	btfss	_RF1^(0+128),1
  7197  04F7  2D31               	goto	l8933
  7198                           
  7199                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7200  04F8  10A0               	bcf	_RF1^(0+128),1
  7201                           
  7202                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7203  04F9  01AB               	clrf	(_RF1^(0+128)+11)
  7204  04FA  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7205                           
  7206                           ;RF_Control_B1.c: 97: getRxData();
  7207  04FB  3197  272E  3184   	fcall	_getRxData
  7208                           
  7209                           ;RF_Control_B1.c: 100: }
  7210                           ;RF_Control_B1.c: 101: } else {
  7211  04FE  2D31               	goto	l8933
  7212  04FF                     l8919:	
  7213                           
  7214                           ;RF_Control_B1.c: 102: RF1.Count++;
  7215  04FF  3001               	movlw	1
  7216  0500  0021               	movlb	1	; select bank1
  7217  0501  07A3               	addwf	(_RF1^(0+128)+3),f
  7218  0502  3000               	movlw	0
  7219  0503  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7220                           
  7221                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7222  0504  3014               	movlw	20
  7223  0505  0020               	movlb	0	; select bank0
  7224  0506  00A0               	movwf	___lwdiv@divisor
  7225  0507  3000               	movlw	0
  7226  0508  00A1               	movwf	___lwdiv@divisor+1
  7227  0509  0021               	movlb	1	; select bank1
  7228  050A  0829               	movf	((_RF1+1)^(0+128)+8),w
  7229  050B  0020               	movlb	0	; select bank0
  7230  050C  01A3               	clrf	___lwdiv@dividend+1
  7231  050D  07A3               	addwf	___lwdiv@dividend+1,f
  7232  050E  0021               	movlb	1	; select bank1
  7233  050F  0828               	movf	(_RF1^(0+128)+8),w
  7234  0510  0020               	movlb	0	; select bank0
  7235  0511  01A2               	clrf	___lwdiv@dividend
  7236  0512  07A2               	addwf	___lwdiv@dividend,f
  7237  0513  3191  2107  3184   	fcall	___lwdiv
  7238  0516  0020               	movlb	0	; select bank0
  7239  0517  0821               	movf	?___lwdiv+1,w
  7240  0518  0021               	movlb	1	; select bank1
  7241  0519  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7242  051A  1D03               	skipz
  7243  051B  2D20               	goto	u9345
  7244  051C  0020               	movlb	0	; select bank0
  7245  051D  0820               	movf	?___lwdiv,w
  7246  051E  0021               	movlb	1	; select bank1
  7247  051F  0223               	subwf	(_RF1^(0+128)+3),w
  7248  0520                     u9345:	
  7249  0520  1C03               	skipc
  7250  0521  2D31               	goto	l8933
  7251                           
  7252                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7253  0522  01A3               	clrf	(_RF1^(0+128)+3)
  7254  0523  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7255                           
  7256                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7257  0524  15A0               	bsf	_RF1^(0+128),3
  7258                           
  7259                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7260  0525  3036               	movlw	54
  7261  0526  319D  25C0  3184   	fcall	_CC2500_WriteCommand
  7262                           
  7263                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7264  0529  303A               	movlw	58
  7265  052A  319D  25C0  3184   	fcall	_CC2500_WriteCommand
  7266                           
  7267                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7268  052D  3034               	movlw	52
  7269  052E  319D  25C0  3184   	fcall	_CC2500_WriteCommand
  7270  0531                     l8933:	
  7271                           
  7272                           ;RF_Control_B1.c: 111: }
  7273                           ;RF_Control_B1.c: 112: }
  7274                           ;RF_Control_B1.c: 113: }
  7275                           ;RF_Control_B1.c: 114: }
  7276                           ;RF_Control_B1.c: 115: }
  7277                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7278  0531  3001               	movlw	1
  7279  0532  0021               	movlb	1	; select bank1
  7280  0533  07AB               	addwf	(_RF1^(0+128)+11),f
  7281  0534  3000               	movlw	0
  7282  0535  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7283                           
  7284                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7285  0536  300B               	movlw	11
  7286  0537  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7287  0538  30B9               	movlw	185
  7288  0539  1903               	skipnz
  7289  053A  022B               	subwf	(_RF1^(0+128)+11),w
  7290  053B  1C03               	skipc
  7291  053C  2D49               	goto	l8947
  7292                           
  7293                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7294  053D  01AB               	clrf	(_RF1^(0+128)+11)
  7295  053E  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7296                           
  7297                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7298  053F  11A0               	bcf	_RF1^(0+128),3
  7299                           
  7300                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7301  0540  10A0               	bcf	_RF1^(0+128),1
  7302                           
  7303                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7304  0541  3036               	movlw	54
  7305  0542  319D  25C0  3184   	fcall	_CC2500_WriteCommand
  7306                           
  7307                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7308  0545  303A               	movlw	58
  7309  0546  319D  25C0  3184   	fcall	_CC2500_WriteCommand
  7310  0549                     l8947:	
  7311                           
  7312                           ;RF_Control_B1.c: 125: }
  7313                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7314  0549  0021               	movlb	1	; select bank1
  7315  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  7316  054B  0008               	return
  7317                           
  7318                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7319  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7320                           
  7321                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7322  054D  319C  24BF         	fcall	_CC2500_PowerOnInitial
  7323                           
  7324                           ;RF_Control_B1.c: 130: }
  7325                           ;RF_Control_B1.c: 132: } else {
  7326  054F  0008               	return
  7327  0550                     l2155:	
  7328                           
  7329                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7330  0550  1C2F               	btfss	_myMain^(0+128),0
  7331  0551  0008               	return
  7332                           
  7333                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7334  0552  1420               	bsf	_RF1^(0+128),0
  7335  0553  0008               	return
  7336  0554                     __end_of_setRF_Main:	
  7337                           
  7338                           	psect	text26
  7339  172E                     __ptext26:	
  7340 ;; *************** function _getRxData *****************
  7341 ;; Defined at:
  7342 ;;		line 227 in file "../src/RF_Control_B1.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;		None
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  error           1   79[BANK0 ] unsigned char 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;		None               void
  7349 ;; Registers used:
  7350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;Total ram usage:        2 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:   10
  7363 ;; This function calls:
  7364 ;;		_getMain_All_Error_Status
  7365 ;;		_setControl_Lights_Table
  7366 ;;		_setLog_Code
  7367 ;;		_setTxData
  7368 ;; This function is called by:
  7369 ;;		_setRF_Main
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _getRxData
  7375  172E                     _getRxData:	
  7376                           
  7377                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7381  172E  0023               	movlb	3	; select bank3
  7382  172F  0820               	movf	_RF_Data^(0+384),w
  7383  1730  3AAA               	xorlw	170
  7384  1731  1D03               	skipz
  7385  1732  2F46               	goto	l7225
  7386  1733  0821               	movf	(_RF_Data^(0+384)+1),w
  7387  1734  3A01               	xorlw	1
  7388  1735  1D03               	skipz
  7389  1736  2F46               	goto	l7225
  7390                           
  7391                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7392  1737  3055               	movlw	85
  7393  1738  0020               	movlb	0	; select bank0
  7394  1739  00EE               	movwf	??_getRxData
  7395  173A  0021               	movlb	1	; select bank1
  7396  173B  086E               	movf	_product^(0+128),w
  7397  173C  3E02               	addlw	2
  7398  173D  0086               	movwf	6
  7399  173E  3001               	movlw	1	; select bank2/3
  7400  173F  0087               	movwf	7
  7401  1740  0020               	movlb	0	; select bank0
  7402  1741  086E               	movf	??_getRxData,w
  7403  1742  0081               	movwf	1
  7404                           
  7405                           ;RF_Control_B1.c: 231: setTxData();
  7406  1743  318E  267F         	fcall	_setTxData
  7407                           
  7408                           ;RF_Control_B1.c: 235: } else {
  7409  1745  0008               	return
  7410  1746                     l7225:	
  7411                           
  7412                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7413  1746  3000               	movlw	0
  7414  1747  3190  206A  3197   	fcall	_getMain_All_Error_Status
  7415  174A  0020               	movlb	0	; select bank0
  7416  174B  00EE               	movwf	??_getRxData
  7417  174C  086E               	movf	??_getRxData,w
  7418  174D  00EF               	movwf	getRxData@error
  7419                           
  7420                           ;RF_Control_B1.c: 237: if (error == 0) {
  7421  174E  08EF               	movf	getRxData@error,f
  7422  174F  1D03               	skipz
  7423  1750  2F93               	goto	l2200
  7424                           
  7425                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7426  1751  0021               	movlb	1	; select bank1
  7427  1752  1F20               	btfss	_RF1^(0+128),6
  7428  1753  2F5F               	goto	l7237
  7429                           
  7430                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7431  1754  0023               	movlb	3	; select bank3
  7432  1755  08A0               	movf	_RF_Data^(0+384),f
  7433  1756  1D03               	skipz
  7434  1757  0008               	return
  7435  1758  0821               	movf	(_RF_Data^(0+384)+1),w
  7436  1759  3A64               	xorlw	100
  7437  175A  1D03               	skipz
  7438  175B  0008               	return
  7439                           
  7440                           ;RF_Control_B1.c: 241: setLog_Code();
  7441  175C  3190  209D         	fcall	_setLog_Code
  7442                           
  7443                           ;RF_Control_B1.c: 242: }
  7444                           ;RF_Control_B1.c: 243: } else {
  7445  175E  0008               	return
  7446  175F                     l7237:	
  7447                           
  7448                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7449  175F  0023               	movlb	3	; select bank3
  7450  1760  0834               	movf	(_RF_Data^(0+384)+20),w
  7451  1761  3AD1               	xorlw	209
  7452  1762  1903               	skipnz
  7453  1763  2F68               	goto	l7241
  7454  1764  0834               	movf	(_RF_Data^(0+384)+20),w
  7455  1765  3A0A               	xorlw	10
  7456  1766  1D03               	skipz
  7457  1767  0008               	return
  7458  1768                     l7241:	
  7459                           
  7460                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7461  1768  08A0               	movf	_RF_Data^(0+384),f
  7462  1769  1D03               	skipz
  7463  176A  0008               	return
  7464  176B  0821               	movf	(_RF_Data^(0+384)+1),w
  7465  176C  3A02               	xorlw	2
  7466  176D  1D03               	skipz
  7467  176E  0008               	return
  7468                           
  7469                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7470  176F  0021               	movlb	1	; select bank1
  7471  1770  086E               	movf	_product^(0+128),w
  7472  1771  3E0C               	addlw	12
  7473  1772  0086               	movwf	6
  7474  1773  3001               	movlw	1	; select bank2/3
  7475  1774  0087               	movwf	7
  7476  1775  0023               	movlb	3	; select bank3
  7477  1776  082C               	movf	(_RF_Data^(0+384)+12),w
  7478  1777  0601               	xorwf	1,w
  7479  1778  1D03               	skipz
  7480  1779  0008               	return
  7481  177A  0021               	movlb	1	; select bank1
  7482  177B  086E               	movf	_product^(0+128),w
  7483  177C  3E0D               	addlw	13
  7484  177D  0086               	movwf	6
  7485  177E  3001               	movlw	1	; select bank2/3
  7486  177F  0087               	movwf	7
  7487  1780  0023               	movlb	3	; select bank3
  7488  1781  082D               	movf	(_RF_Data^(0+384)+13),w
  7489  1782  0601               	xorwf	1,w
  7490  1783  1D03               	skipz
  7491  1784  0008               	return
  7492  1785  0021               	movlb	1	; select bank1
  7493  1786  086E               	movf	_product^(0+128),w
  7494  1787  3E0E               	addlw	14
  7495  1788  0086               	movwf	6
  7496  1789  3001               	movlw	1	; select bank2/3
  7497  178A  0087               	movwf	7
  7498  178B  0023               	movlb	3	; select bank3
  7499  178C  082E               	movf	(_RF_Data^(0+384)+14),w
  7500  178D  0601               	xorwf	1,w
  7501  178E  1D03               	skipz
  7502  178F  0008               	return
  7503                           
  7504                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7505  1790  318A  2203         	fcall	_setControl_Lights_Table
  7506                           
  7507                           ;RF_Control_B1.c: 250: }
  7508                           ;RF_Control_B1.c: 253: }
  7509                           ;RF_Control_B1.c: 264: }
  7510                           ;RF_Control_B1.c: 265: }
  7511                           ;RF_Control_B1.c: 266: } else {
  7512  1792  0008               	return
  7513  1793                     l2200:	
  7514                           
  7515                           ;RF_Control_B1.c: 267: __nop();
  7516  1793  0000               	nop
  7517  1794  0008               	return
  7518  1795                     __end_of_getRxData:	
  7519                           
  7520                           	psect	text27
  7521  109D                     __ptext27:	
  7522 ;; *************** function _setLog_Code *****************
  7523 ;; Defined at:
  7524 ;;		line 273 in file "../src/RF_Control_B1.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;		None               void
  7531 ;; Registers used:
  7532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;Total ram usage:        1 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    7
  7545 ;; This function calls:
  7546 ;;		_setBuz
  7547 ;;		_setMemory_LoopSave
  7548 ;;		_setMemory_Modify
  7549 ;;		_setProductData
  7550 ;; This function is called by:
  7551 ;;		_getRxData
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           
  7556                           ;psect for function _setLog_Code
  7557  109D                     _setLog_Code:	
  7558                           
  7559                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7560                           
  7561                           ;incstack = 0
  7562                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7563  109D  0021               	movlb	1	; select bank1
  7564  109E  1320               	bcf	_RF1^(0+128),6
  7565                           
  7566                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7567  109F  0023               	movlb	3	; select bank3
  7568  10A0  082C               	movf	(_RF_Data^(0+384)+12),w
  7569  10A1  0020               	movlb	0	; select bank0
  7570  10A2  00E5               	movwf	??_setLog_Code
  7571  10A3  0865               	movf	??_setLog_Code,w
  7572  10A4  00E2               	movwf	setProductData@value
  7573  10A5  300C               	movlw	12
  7574  10A6  319A  22A6  3190   	fcall	_setProductData
  7575                           
  7576                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7577  10A9  0023               	movlb	3	; select bank3
  7578  10AA  082D               	movf	(_RF_Data^(0+384)+13),w
  7579  10AB  0020               	movlb	0	; select bank0
  7580  10AC  00E5               	movwf	??_setLog_Code
  7581  10AD  0865               	movf	??_setLog_Code,w
  7582  10AE  00E2               	movwf	setProductData@value
  7583  10AF  300D               	movlw	13
  7584  10B0  319A  22A6  3190   	fcall	_setProductData
  7585                           
  7586                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7587  10B3  0023               	movlb	3	; select bank3
  7588  10B4  082E               	movf	(_RF_Data^(0+384)+14),w
  7589  10B5  0020               	movlb	0	; select bank0
  7590  10B6  00E5               	movwf	??_setLog_Code
  7591  10B7  0865               	movf	??_setLog_Code,w
  7592  10B8  00E2               	movwf	setProductData@value
  7593  10B9  300E               	movlw	14
  7594  10BA  319A  22A6  3190   	fcall	_setProductData
  7595                           
  7596                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7597  10BD  3064               	movlw	100
  7598  10BE  0020               	movlb	0	; select bank0
  7599  10BF  00A9               	movwf	setBuz@time
  7600  10C0  3000               	movlw	0
  7601  10C1  00AA               	movwf	setBuz@time+1
  7602  10C2  3001               	movlw	1
  7603  10C3  3194  242E  3190   	fcall	_setBuz
  7604                           
  7605                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7606  10C6  0021               	movlb	1	; select bank1
  7607  10C7  1EAF               	btfss	_myMain^(0+128),5
  7608  10C8  28CD               	goto	l2213
  7609                           
  7610                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7611  10C9  3001               	movlw	1
  7612  10CA  319C  2470  3190   	fcall	_setMemory_LoopSave
  7613  10CD                     l2213:	
  7614                           
  7615                           ;RF_Control_B1.c: 281: }
  7616                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7617  10CD  3001               	movlw	1
  7618  10CE  319C  2437         	fcall	_setMemory_Modify
  7619  10D0  0008               	return
  7620  10D1                     __end_of_setLog_Code:	
  7621                           
  7622                           	psect	text28
  7623  1C70                     __ptext28:	
  7624 ;; *************** function _setMemory_LoopSave *****************
  7625 ;; Defined at:
  7626 ;;		line 1089 in file "../src/MCU_B1.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  command         1    wreg     unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  command         1    1[BANK0 ] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;Total ram usage:        2 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    5
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_setLog_Code
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           
  7655                           ;psect for function _setMemory_LoopSave
  7656  1C70                     _setMemory_LoopSave:	
  7657                           
  7658                           ;incstack = 0
  7659                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7660                           ;setMemory_LoopSave@command stored from wreg
  7661  1C70  0020               	movlb	0	; select bank0
  7662  1C71  00A1               	movwf	setMemory_LoopSave@command
  7663                           
  7664                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7665  1C72  0821               	movf	setMemory_LoopSave@command,w
  7666  1C73  3A01               	xorlw	1
  7667  1C74  3000               	movlw	0
  7668  1C75  1903               	skipnz
  7669  1C76  3001               	movlw	1
  7670  1C77  00A0               	movwf	??_setMemory_LoopSave
  7671  1C78  0DA0               	rlf	??_setMemory_LoopSave,f
  7672  1C79  0DA0               	rlf	??_setMemory_LoopSave,f
  7673  1C7A  0024               	movlb	4	; select bank4
  7674  1C7B  0844               	movf	(_Memory^(0+512)+36),w
  7675  1C7C  0020               	movlb	0	; select bank0
  7676  1C7D  0620               	xorwf	??_setMemory_LoopSave,w
  7677  1C7E  39FB               	andlw	-5
  7678  1C7F  0620               	xorwf	??_setMemory_LoopSave,w
  7679  1C80  0024               	movlb	4	; select bank4
  7680  1C81  00C4               	movwf	(_Memory^(0+512)+36)
  7681  1C82  0008               	return
  7682  1C83                     __end_of_setMemory_LoopSave:	
  7683                           
  7684                           	psect	text29
  7685  0A03                     __ptext29:	
  7686 ;; *************** function _setControl_Lights_Table *****************
  7687 ;; Defined at:
  7688 ;;		line 286 in file "../src/RF_Control_B1.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;		None               void
  7695 ;; Registers used:
  7696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    9
  7709 ;; This function calls:
  7710 ;;		_getDimmerLights_Status
  7711 ;;		_getMain_All_LightsStatus
  7712 ;;		_setCmd_Status
  7713 ;;		_setDimmerLights_SwOff
  7714 ;;		_setDimmerLights_SwOn
  7715 ;;		_setProductData
  7716 ;;		_setRFSW_AdjControl
  7717 ;;		_setRFSW_Control
  7718 ;;		_setRF_AdjControl
  7719 ;;		_setTxData
  7720 ;; This function is called by:
  7721 ;;		_getRxData
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           
  7726                           ;psect for function _setControl_Lights_Table
  7727  0A03                     _setControl_Lights_Table:	
  7728                           
  7729                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7730                           
  7731                           ;incstack = 0
  7732                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7733  0A03  2A69               	goto	l6823
  7734  0A04                     l6803:	
  7735                           ;RF_Control_B1.c: 290: case 0x00:
  7736                           
  7737                           
  7738                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7739  0A04  319A  2258  318A   	fcall	_getMain_All_LightsStatus
  7740  0A07  3A01               	xorlw	1
  7741  0A08  1D03               	skipz
  7742  0A09  2A20               	goto	l6811
  7743                           
  7744                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7745  0A0A  3001               	movlw	1
  7746  0A0B  319B  2377  318A   	fcall	_getDimmerLights_Status
  7747  0A0E  3A01               	xorlw	1
  7748  0A0F  1D03               	skipz
  7749  0A10  2A19               	goto	l6809
  7750                           
  7751                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7752  0A11  3001               	movlw	1
  7753  0A12  3193  2339  318A   	fcall	_setDimmerLights_SwOn
  7754                           
  7755                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7756  0A15  3001               	movlw	1
  7757  0A16  3192  22AD  318A   	fcall	_setDimmerLights_SwOff
  7758  0A19                     l6809:	
  7759                           
  7760                           ;RF_Control_B1.c: 297: }
  7761                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7762  0A19  0020               	movlb	0	; select bank0
  7763  0A1A  01A0               	clrf	setCmd_Status@cmd
  7764  0A1B  0AA0               	incf	setCmd_Status@cmd,f
  7765  0A1C  3001               	movlw	1
  7766  0A1D  319D  255A         	fcall	_setCmd_Status
  7767                           
  7768                           ;RF_Control_B1.c: 313: } else {
  7769  0A1F  0008               	return
  7770  0A20                     l6811:	
  7771                           
  7772                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7773  0A20  0020               	movlb	0	; select bank0
  7774  0A21  01E2               	clrf	setProductData@value
  7775  0A22  3009               	movlw	9
  7776  0A23  319A  22A6  318A   	fcall	_setProductData
  7777                           
  7778                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7779  0A26  0020               	movlb	0	; select bank0
  7780  0A27  01E2               	clrf	setProductData@value
  7781  0A28  300B               	movlw	11
  7782  0A29  319A  22A6  318A   	fcall	_setProductData
  7783                           
  7784                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7785  0A2C  0020               	movlb	0	; select bank0
  7786  0A2D  01E2               	clrf	setProductData@value
  7787  0A2E  300F               	movlw	15
  7788  0A2F  319A  22A6  318A   	fcall	_setProductData
  7789                           
  7790                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7791  0A32  0020               	movlb	0	; select bank0
  7792  0A33  01E2               	clrf	setProductData@value
  7793  0A34  3011               	movlw	17
  7794  0A35  319A  22A6  318A   	fcall	_setProductData
  7795                           
  7796                           ;RF_Control_B1.c: 318: setTxData();
  7797  0A38  318E  267F         	fcall	_setTxData
  7798                           
  7799                           ;RF_Control_B1.c: 319: }
  7800                           ;RF_Control_B1.c: 320: break;
  7801  0A3A  0008               	return
  7802  0A3B                     l6813:	
  7803                           ;RF_Control_B1.c: 322: case 0x20:
  7804                           
  7805                           
  7806                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7807  0A3B  0020               	movlb	0	; select bank0
  7808  0A3C  01E2               	clrf	setProductData@value
  7809  0A3D  3009               	movlw	9
  7810  0A3E  319A  22A6  318A   	fcall	_setProductData
  7811                           
  7812                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7813  0A41  0020               	movlb	0	; select bank0
  7814  0A42  01E2               	clrf	setProductData@value
  7815  0A43  300B               	movlw	11
  7816  0A44  319A  22A6  318A   	fcall	_setProductData
  7817                           
  7818                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7819  0A47  0021               	movlb	1	; select bank1
  7820  0A48  086E               	movf	_product^(0+128),w
  7821  0A49  0086               	movwf	6
  7822  0A4A  3001               	movlw	1	; select bank2/3
  7823  0A4B  0087               	movwf	7
  7824  0A4C  3001               	movlw	1	; select bank2/3
  7825  0A4D  3F4F               	moviw [15]fsr1
  7826  0A4E  0020               	movlb	0	; select bank0
  7827  0A4F  00E2               	movwf	setProductData@value
  7828  0A50  300F               	movlw	15
  7829  0A51  319A  22A6  318A   	fcall	_setProductData
  7830                           
  7831                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7832  0A54  0020               	movlb	0	; select bank0
  7833  0A55  01E2               	clrf	setProductData@value
  7834  0A56  3011               	movlw	17
  7835  0A57  319A  22A6  318A   	fcall	_setProductData
  7836                           
  7837                           ;RF_Control_B1.c: 327: setTxData();
  7838  0A5A  318E  267F         	fcall	_setTxData
  7839                           
  7840                           ;RF_Control_B1.c: 328: break;
  7841  0A5C  0008               	return
  7842  0A5D                     l6815:	
  7843                           ;RF_Control_B1.c: 331: case 0x01:
  7844                           
  7845                           
  7846                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7847  0A5D  3001               	movlw	1
  7848  0A5E  3195  2540         	fcall	_setRFSW_Control
  7849                           
  7850                           ;RF_Control_B1.c: 333: break;
  7851  0A60  0008               	return
  7852  0A61                     l6817:	
  7853                           ;RF_Control_B1.c: 337: case 0x11:
  7854                           
  7855                           
  7856                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7857  0A61  3001               	movlw	1
  7858  0A62  318A  227C         	fcall	_setRFSW_AdjControl
  7859                           
  7860                           ;RF_Control_B1.c: 339: break;
  7861  0A64  0008               	return
  7862  0A65                     l6819:	
  7863                           ;RF_Control_B1.c: 341: case 0xd1:
  7864                           
  7865                           
  7866                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7867  0A65  3001               	movlw	1
  7868  0A66  3187  27C6         	fcall	_setRF_AdjControl
  7869                           
  7870                           ;RF_Control_B1.c: 376: }
  7871                           
  7872                           ;RF_Control_B1.c: 343: break;
  7873  0A68  0008               	return
  7874  0A69                     l6823:	
  7875  0A69  0023               	movlb	3	; select bank3
  7876  0A6A  082F               	movf	(_RF_Data^(0+384)+15),w
  7877                           
  7878                           ; Switch size 1, requested type "space"
  7879                           ; Number of cases is 5, Range of values is 0 to 209
  7880                           ; switch strategies available:
  7881                           ; Name         Instructions Cycles
  7882                           ; simple_byte           16     9 (average)
  7883                           ; jumptable            260     6 (fixed)
  7884                           ;	Chosen strategy is simple_byte
  7885  0A6B  3A00               	xorlw	0	; case 0
  7886  0A6C  1903               	skipnz
  7887  0A6D  2A04               	goto	l6803
  7888  0A6E  3A01               	xorlw	1	; case 1
  7889  0A6F  1903               	skipnz
  7890  0A70  2A5D               	goto	l6815
  7891  0A71  3A10               	xorlw	16	; case 17
  7892  0A72  1903               	skipnz
  7893  0A73  2A61               	goto	l6817
  7894  0A74  3A31               	xorlw	49	; case 32
  7895  0A75  1903               	skipnz
  7896  0A76  2A3B               	goto	l6813
  7897  0A77  3AF1               	xorlw	241	; case 209
  7898  0A78  1903               	skipnz
  7899  0A79  2A65               	goto	l6819
  7900  0A7A  2A7B               	goto	l2227
  7901  0A7B                     l2227:	
  7902  0A7B  0008               	return
  7903  0A7C                     __end_of_setControl_Lights_Table:	
  7904                           
  7905                           	psect	text30
  7906  07C6                     __ptext30:	
  7907 ;; *************** function _setRF_AdjControl *****************
  7908 ;; Defined at:
  7909 ;;		line 457 in file "../src/RF_Control_B1.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  sw              1    wreg     unsigned char 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  sw              1    7[BANK0 ] unsigned char 
  7914 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
  7915 ;;  status          1    5[BANK0 ] unsigned char 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;		None               void
  7918 ;; Registers used:
  7919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7926 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;Total ram usage:        4 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    7
  7932 ;; This function calls:
  7933 ;;		_DimmerLights_SelectPointer
  7934 ;;		_getDimmerIntr_Dimming_Sw
  7935 ;;		_getDimmerLights_Status
  7936 ;; This function is called by:
  7937 ;;		_setControl_Lights_Table
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           
  7942                           ;psect for function _setRF_AdjControl
  7943  07C6                     _setRF_AdjControl:	
  7944                           
  7945                           ;incstack = 0
  7946                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7947                           ;setRF_AdjControl@sw stored from wreg
  7948  07C6  0020               	movlb	0	; select bank0
  7949  07C7  00A7               	movwf	setRF_AdjControl@sw
  7950                           
  7951                           ;RF_Control_B1.c: 458: char status = 0;
  7952  07C8  01A5               	clrf	setRF_AdjControl@status
  7953                           
  7954                           ;RF_Control_B1.c: 460: status = getDimmerLights_Status(sw);
  7955  07C9  0827               	movf	setRF_AdjControl@sw,w
  7956  07CA  319B  2377  3187   	fcall	_getDimmerLights_Status
  7957  07CD  0020               	movlb	0	; select bank0
  7958  07CE  00A4               	movwf	??_setRF_AdjControl
  7959  07CF  0824               	movf	??_setRF_AdjControl,w
  7960  07D0  00A5               	movwf	setRF_AdjControl@status
  7961                           
  7962                           ;RF_Control_B1.c: 461: char dimmingStatus = 0;
  7963  07D1  01A6               	clrf	setRF_AdjControl@dimmingStatus
  7964                           
  7965                           ;RF_Control_B1.c: 462: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  7966  07D2  0827               	movf	setRF_AdjControl@sw,w
  7967  07D3  319B  232B  3187   	fcall	_getDimmerIntr_Dimming_Sw
  7968  07D6  0020               	movlb	0	; select bank0
  7969  07D7  00A4               	movwf	??_setRF_AdjControl
  7970  07D8  0824               	movf	??_setRF_AdjControl,w
  7971  07D9  00A6               	movwf	setRF_AdjControl@dimmingStatus
  7972                           
  7973                           ;RF_Control_B1.c: 464: if (status == 1) {
  7974  07DA  0825               	movf	setRF_AdjControl@status,w
  7975  07DB  3A01               	xorlw	1
  7976  07DC  1D03               	skipz
  7977  07DD  0008               	return
  7978                           
  7979                           ;RF_Control_B1.c: 465: if (dimmingStatus == 0) {
  7980  07DE  08A6               	movf	setRF_AdjControl@dimmingStatus,f
  7981  07DF  1D03               	skipz
  7982  07E0  2FF0               	goto	l6573
  7983                           
  7984                           ;RF_Control_B1.c: 466: DimmerLights_SelectPointer(sw);
  7985  07E1  0827               	movf	setRF_AdjControl@sw,w
  7986  07E2  319A  229A         	fcall	_DimmerLights_SelectPointer
  7987                           
  7988                           ;RF_Control_B1.c: 467: DimmerLights->DimmingTrigger = 1;
  7989  07E4  0021               	movlb	1	; select bank1
  7990  07E5  084C               	movf	_DimmerLights^(0+128),w
  7991  07E6  0086               	movwf	6
  7992  07E7  3001               	movlw	1	; select bank2/3
  7993  07E8  0087               	movwf	7
  7994  07E9  1601               	bsf	1,4
  7995                           
  7996                           ;RF_Control_B1.c: 468: DimmerLights->DimmingSwitch = 1;
  7997  07EA  084C               	movf	_DimmerLights^(0+128),w
  7998  07EB  0086               	movwf	6
  7999  07EC  3001               	movlw	1	; select bank2/3
  8000  07ED  0087               	movwf	7
  8001  07EE  1681               	bsf	1,5
  8002                           
  8003                           ;RF_Control_B1.c: 470: } else {
  8004  07EF  0008               	return
  8005  07F0                     l6573:	
  8006                           
  8007                           ;RF_Control_B1.c: 471: DimmerLights_SelectPointer(sw);
  8008  07F0  0020               	movlb	0	; select bank0
  8009  07F1  0827               	movf	setRF_AdjControl@sw,w
  8010  07F2  319A  229A         	fcall	_DimmerLights_SelectPointer
  8011                           
  8012                           ;RF_Control_B1.c: 472: DimmerLights->DimmingTrigger = 1;
  8013  07F4  0021               	movlb	1	; select bank1
  8014  07F5  084C               	movf	_DimmerLights^(0+128),w
  8015  07F6  0086               	movwf	6
  8016  07F7  3001               	movlw	1	; select bank2/3
  8017  07F8  0087               	movwf	7
  8018  07F9  1601               	bsf	1,4
  8019                           
  8020                           ;RF_Control_B1.c: 473: DimmerLights->DimmingSwitch = 0;
  8021  07FA  084C               	movf	_DimmerLights^(0+128),w
  8022  07FB  0086               	movwf	6
  8023  07FC  3001               	movlw	1	; select bank2/3
  8024  07FD  0087               	movwf	7
  8025  07FE  1281               	bcf	1,5
  8026  07FF  0008               	return
  8027  0800                     __end_of_setRF_AdjControl:	
  8028                           
  8029                           	psect	text31
  8030  1540                     __ptext31:	
  8031 ;; *************** function _setRFSW_Control *****************
  8032 ;; Defined at:
  8033 ;;		line 384 in file "../src/RF_Control_B1.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;  sw              1    wreg     unsigned char 
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  sw              1    2[BANK1 ] unsigned char 
  8038 ;;  rfDimming       1    1[BANK1 ] unsigned char 
  8039 ;;  status          1    0[BANK1 ] unsigned char 
  8040 ;; Return value:  Size  Location     Type
  8041 ;;		None               void
  8042 ;; Registers used:
  8043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;Total ram usage:        4 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    8
  8056 ;; This function calls:
  8057 ;;		_getDimmerLights_Status
  8058 ;;		_setBuz
  8059 ;;		_setDelayOff_GO
  8060 ;;		_setDimmerLights_SwOff
  8061 ;;		_setDimmerLights_SwOn
  8062 ;;		_setRF_DimmerLights
  8063 ;;		_setTxData
  8064 ;; This function is called by:
  8065 ;;		_setControl_Lights_Table
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           
  8070                           ;psect for function _setRFSW_Control
  8071  1540                     _setRFSW_Control:	
  8072                           
  8073                           ;incstack = 0
  8074                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8075                           ;setRFSW_Control@sw stored from wreg
  8076  1540  0021               	movlb	1	; select bank1
  8077  1541  00E7               	movwf	setRFSW_Control@sw^(0+128)
  8078                           
  8079                           ;RF_Control_B1.c: 385: char status = 0;
  8080  1542  01E5               	clrf	setRFSW_Control@status^(0+128)
  8081                           
  8082                           ;RF_Control_B1.c: 386: char rfDimming = 0;
  8083  1543  01E6               	clrf	setRFSW_Control@rfDimming^(0+128)
  8084                           
  8085                           ;RF_Control_B1.c: 387: rfDimming = RF1.flagDimming == 1 ? 1 : 0;
  8086  1544  3000               	movlw	0
  8087  1545  1822               	btfsc	(_RF1^(0+128)+2),0
  8088  1546  3001               	movlw	1
  8089  1547  00E6               	movwf	setRFSW_Control@rfDimming^(0+128)
  8090                           
  8091                           ;RF_Control_B1.c: 389: if (rfDimming == 0) {
  8092  1548  08E6               	movf	setRFSW_Control@rfDimming^(0+128),f
  8093  1549  1D03               	skipz
  8094  154A  2D8A               	goto	l2230
  8095                           
  8096                           ;RF_Control_B1.c: 390: if (RF_Data[16] == 0x80) {
  8097  154B  0023               	movlb	3	; select bank3
  8098  154C  0830               	movf	(_RF_Data^(0+384)+16),w
  8099  154D  3A80               	xorlw	128
  8100  154E  1D03               	skipz
  8101  154F  2D7D               	goto	l6521
  8102                           
  8103                           ;RF_Control_B1.c: 391: setDelayOff_GO(sw, 1, RF_Data[17]);
  8104  1550  0020               	movlb	0	; select bank0
  8105  1551  01E5               	clrf	setDelayOff_GO@command
  8106  1552  0AE5               	incf	setDelayOff_GO@command,f
  8107  1553  0023               	movlb	3	; select bank3
  8108  1554  0831               	movf	(_RF_Data^(0+384)+17),w
  8109  1555  0020               	movlb	0	; select bank0
  8110  1556  00ED               	movwf	??_setRFSW_Control
  8111  1557  086D               	movf	??_setRFSW_Control,w
  8112  1558  00E6               	movwf	setDelayOff_GO@value
  8113  1559  0021               	movlb	1	; select bank1
  8114  155A  0867               	movf	setRFSW_Control@sw^(0+128),w
  8115  155B  318C  2409  3195   	fcall	_setDelayOff_GO
  8116                           
  8117                           ;RF_Control_B1.c: 392: if (getDimmerLights_Status(sw) == 1) {
  8118  155E  0021               	movlb	1	; select bank1
  8119  155F  0867               	movf	setRFSW_Control@sw^(0+128),w
  8120  1560  319B  2377  3195   	fcall	_getDimmerLights_Status
  8121  1563  3A01               	xorlw	1
  8122  1564  1D03               	skipz
  8123  1565  2D7D               	goto	l6521
  8124                           
  8125                           ;RF_Control_B1.c: 393: setBuz(1, 100);
  8126  1566  3064               	movlw	100
  8127  1567  0020               	movlb	0	; select bank0
  8128  1568  00A9               	movwf	setBuz@time
  8129  1569  3000               	movlw	0
  8130  156A  00AA               	movwf	setBuz@time+1
  8131  156B  3001               	movlw	1
  8132  156C  3194  242E  3195   	fcall	_setBuz
  8133                           
  8134                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw, 1);
  8135  156F  0020               	movlb	0	; select bank0
  8136  1570  01E5               	clrf	setRF_DimmerLights@on
  8137  1571  0AE5               	incf	setRF_DimmerLights@on,f
  8138  1572  0021               	movlb	1	; select bank1
  8139  1573  0867               	movf	setRFSW_Control@sw^(0+128),w
  8140  1574  3196  26C9  3195   	fcall	_setRF_DimmerLights
  8141                           
  8142                           ;RF_Control_B1.c: 395: setTxData();
  8143  1577  318E  267F  3195   	fcall	_setTxData
  8144                           
  8145                           ;RF_Control_B1.c: 396: status = 1;
  8146  157A  0021               	movlb	1	; select bank1
  8147  157B  01E5               	clrf	setRFSW_Control@status^(0+128)
  8148  157C  0AE5               	incf	setRFSW_Control@status^(0+128),f
  8149  157D                     l6521:	
  8150                           
  8151                           ;RF_Control_B1.c: 397: }
  8152                           ;RF_Control_B1.c: 398: }
  8153                           ;RF_Control_B1.c: 400: if (status == 0) {
  8154  157D  0021               	movlb	1	; select bank1
  8155  157E  08E5               	movf	setRFSW_Control@status^(0+128),f
  8156  157F  1D03               	skipz
  8157  1580  0008               	return
  8158                           
  8159                           ;RF_Control_B1.c: 402: setDimmerLights_SwOn(sw);
  8160  1581  0867               	movf	setRFSW_Control@sw^(0+128),w
  8161  1582  3193  2339  3195   	fcall	_setDimmerLights_SwOn
  8162                           
  8163                           ;RF_Control_B1.c: 403: setDimmerLights_SwOff(sw);
  8164  1585  0021               	movlb	1	; select bank1
  8165  1586  0867               	movf	setRFSW_Control@sw^(0+128),w
  8166  1587  3192  22AD         	fcall	_setDimmerLights_SwOff
  8167                           
  8168                           ;RF_Control_B1.c: 405: }
  8169                           ;RF_Control_B1.c: 406: } else {
  8170  1589  0008               	return
  8171  158A                     l2230:	
  8172                           
  8173                           ;RF_Control_B1.c: 408: RF1.flagDimming = 0;
  8174  158A  1022               	bcf	(_RF1^(0+128)+2),0
  8175                           
  8176                           ;RF_Control_B1.c: 409: DimmerLights->DimmingTrigger = 1;
  8177  158B  084C               	movf	_DimmerLights^(0+128),w
  8178  158C  0086               	movwf	6
  8179  158D  3001               	movlw	1	; select bank2/3
  8180  158E  0087               	movwf	7
  8181  158F  1601               	bsf	1,4
  8182                           
  8183                           ;RF_Control_B1.c: 410: DimmerLights->DimmingSwitch = 0;
  8184  1590  084C               	movf	_DimmerLights^(0+128),w
  8185  1591  0086               	movwf	6
  8186  1592  3001               	movlw	1	; select bank2/3
  8187  1593  0087               	movwf	7
  8188  1594  1281               	bcf	1,5
  8189                           
  8190                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  8191  1595  3064               	movlw	100
  8192  1596  0020               	movlb	0	; select bank0
  8193  1597  00A9               	movwf	setBuz@time
  8194  1598  3000               	movlw	0
  8195  1599  00AA               	movwf	setBuz@time+1
  8196  159A  3001               	movlw	1
  8197  159B  3194  242E         	fcall	_setBuz
  8198  159D  0008               	return
  8199  159E                     __end_of_setRFSW_Control:	
  8200                           
  8201                           	psect	text32
  8202  0A7C                     __ptext32:	
  8203 ;; *************** function _setRFSW_AdjControl *****************
  8204 ;; Defined at:
  8205 ;;		line 416 in file "../src/RF_Control_B1.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  sw              1    wreg     unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  sw              1   72[BANK0 ] unsigned char 
  8210 ;;  status          1   71[BANK0 ] unsigned char 
  8211 ;; Return value:  Size  Location     Type
  8212 ;;		None               void
  8213 ;; Registers used:
  8214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : 0/0
  8217 ;;		On exit  : 0/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;Total ram usage:        4 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    8
  8227 ;; This function calls:
  8228 ;;		_getDimmerLights_PercentToValue
  8229 ;;		_getDimmerLights_Status
  8230 ;;		_setDimmerIntr_Dimming_RF
  8231 ;;		_setDimmerIntr_MaxmumValue
  8232 ;;		_setDimmerLights_DimmingRun
  8233 ;;		_setDimmerLights_SwOff
  8234 ;;		_setDimmerLights_SwOn
  8235 ;;		_setMemory_Modify
  8236 ;;		_setProductData
  8237 ;;		_setTxData
  8238 ;; This function is called by:
  8239 ;;		_setControl_Lights_Table
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _setRFSW_AdjControl
  8245  0A7C                     _setRFSW_AdjControl:	
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8249                           ;setRFSW_AdjControl@sw stored from wreg
  8250  0A7C  0020               	movlb	0	; select bank0
  8251  0A7D  00E8               	movwf	setRFSW_AdjControl@sw
  8252                           
  8253                           ;RF_Control_B1.c: 417: char status = 0;
  8254  0A7E  01E7               	clrf	setRFSW_AdjControl@status
  8255                           
  8256                           ;RF_Control_B1.c: 419: status = getDimmerLights_Status(sw);
  8257  0A7F  0868               	movf	setRFSW_AdjControl@sw,w
  8258  0A80  319B  2377  318A   	fcall	_getDimmerLights_Status
  8259  0A83  0020               	movlb	0	; select bank0
  8260  0A84  00E5               	movwf	??_setRFSW_AdjControl
  8261  0A85  0865               	movf	??_setRFSW_AdjControl,w
  8262  0A86  00E7               	movwf	setRFSW_AdjControl@status
  8263                           
  8264                           ;RF_Control_B1.c: 421: if (RF_Data[9] > 0x64) {
  8265  0A87  3065               	movlw	101
  8266  0A88  0023               	movlb	3	; select bank3
  8267  0A89  0229               	subwf	(_RF_Data^(0+384)+9),w
  8268  0A8A  1C03               	skipc
  8269  0A8B  2A93               	goto	l6537
  8270                           
  8271                           ;RF_Control_B1.c: 422: RF_Data[9] = 0x64;
  8272  0A8C  3064               	movlw	100
  8273  0A8D  0020               	movlb	0	; select bank0
  8274  0A8E  00E5               	movwf	??_setRFSW_AdjControl
  8275  0A8F  0865               	movf	??_setRFSW_AdjControl,w
  8276  0A90  0023               	movlb	3	; select bank3
  8277  0A91  00A9               	movwf	(_RF_Data^(0+384)+9)
  8278                           
  8279                           ;RF_Control_B1.c: 423: } else if (RF_Data[9] < 0x01) {
  8280  0A92  2A98               	goto	l6541
  8281  0A93                     l6537:	
  8282  0A93  08A9               	movf	(_RF_Data^(0+384)+9),f
  8283  0A94  1D03               	skipz
  8284  0A95  2A98               	goto	l6541
  8285                           
  8286                           ;RF_Control_B1.c: 424: RF_Data[9] = 0x01;
  8287  0A96  01A9               	clrf	(_RF_Data^(0+384)+9)
  8288  0A97  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8289  0A98                     l6541:	
  8290                           
  8291                           ;RF_Control_B1.c: 425: }
  8292                           ;RF_Control_B1.c: 426: setProductData(9, RF_Data[9]);
  8293  0A98  0829               	movf	(_RF_Data^(0+384)+9),w
  8294  0A99  0020               	movlb	0	; select bank0
  8295  0A9A  00E5               	movwf	??_setRFSW_AdjControl
  8296  0A9B  0865               	movf	??_setRFSW_AdjControl,w
  8297  0A9C  00E2               	movwf	setProductData@value
  8298  0A9D  3009               	movlw	9
  8299  0A9E  319A  22A6  318A   	fcall	_setProductData
  8300                           
  8301                           ;RF_Control_B1.c: 427: setProductData(11, sw);
  8302  0AA1  0020               	movlb	0	; select bank0
  8303  0AA2  0868               	movf	setRFSW_AdjControl@sw,w
  8304  0AA3  00E5               	movwf	??_setRFSW_AdjControl
  8305  0AA4  0865               	movf	??_setRFSW_AdjControl,w
  8306  0AA5  00E2               	movwf	setProductData@value
  8307  0AA6  300B               	movlw	11
  8308  0AA7  319A  22A6  318A   	fcall	_setProductData
  8309                           
  8310                           ;RF_Control_B1.c: 428: setProductData(17, product->Data[26 + sw]);
  8311  0AAA  0020               	movlb	0	; select bank0
  8312  0AAB  0868               	movf	setRFSW_AdjControl@sw,w
  8313  0AAC  3E1A               	addlw	26
  8314  0AAD  0021               	movlb	1	; select bank1
  8315  0AAE  076E               	addwf	_product^(0+128),w
  8316  0AAF  0020               	movlb	0	; select bank0
  8317  0AB0  00E5               	movwf	??_setRFSW_AdjControl
  8318  0AB1  0865               	movf	??_setRFSW_AdjControl,w
  8319  0AB2  0086               	movwf	6
  8320  0AB3  3001               	movlw	1	; select bank2/3
  8321  0AB4  0087               	movwf	7
  8322  0AB5  0801               	movf	1,w
  8323  0AB6  00E6               	movwf	??_setRFSW_AdjControl+1
  8324  0AB7  0866               	movf	??_setRFSW_AdjControl+1,w
  8325  0AB8  00E2               	movwf	setProductData@value
  8326  0AB9  3011               	movlw	17
  8327  0ABA  319A  22A6  318A   	fcall	_setProductData
  8328                           
  8329                           ;RF_Control_B1.c: 429: setProductData((20 + sw), RF_Data[9]);
  8330  0ABD  0023               	movlb	3	; select bank3
  8331  0ABE  0829               	movf	(_RF_Data^(0+384)+9),w
  8332  0ABF  0020               	movlb	0	; select bank0
  8333  0AC0  00E5               	movwf	??_setRFSW_AdjControl
  8334  0AC1  0865               	movf	??_setRFSW_AdjControl,w
  8335  0AC2  00E2               	movwf	setProductData@value
  8336  0AC3  0868               	movf	setRFSW_AdjControl@sw,w
  8337  0AC4  3E14               	addlw	20
  8338  0AC5  319A  22A6  318A   	fcall	_setProductData
  8339                           
  8340                           ;RF_Control_B1.c: 437: setMemory_Modify(1);
  8341  0AC8  3001               	movlw	1
  8342  0AC9  319C  2437  318A   	fcall	_setMemory_Modify
  8343                           
  8344                           ;RF_Control_B1.c: 441: if (status == 1) {
  8345  0ACC  0020               	movlb	0	; select bank0
  8346  0ACD  0867               	movf	setRFSW_AdjControl@status,w
  8347  0ACE  3A01               	xorlw	1
  8348  0ACF  1D03               	skipz
  8349  0AD0  2AE8               	goto	l6551
  8350                           
  8351                           ;RF_Control_B1.c: 442: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8352  0AD1  0023               	movlb	3	; select bank3
  8353  0AD2  0829               	movf	(_RF_Data^(0+384)+9),w
  8354  0AD3  3195  25FF  318A   	fcall	_getDimmerLights_PercentToValue
  8355  0AD6  0020               	movlb	0	; select bank0
  8356  0AD7  00E5               	movwf	??_setRFSW_AdjControl
  8357  0AD8  0865               	movf	??_setRFSW_AdjControl,w
  8358  0AD9  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8359  0ADA  0868               	movf	setRFSW_AdjControl@sw,w
  8360  0ADB  319A  22B2  318A   	fcall	_setDimmerIntr_MaxmumValue
  8361                           
  8362                           ;RF_Control_B1.c: 443: setDimmerIntr_Dimming_RF(sw, 1);
  8363  0ADE  0020               	movlb	0	; select bank0
  8364  0ADF  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8365  0AE0  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8366  0AE1  0868               	movf	setRFSW_AdjControl@sw,w
  8367  0AE2  319D  2542  318A   	fcall	_setDimmerIntr_Dimming_RF
  8368                           
  8369                           ;RF_Control_B1.c: 444: setTxData();
  8370  0AE5  318E  267F         	fcall	_setTxData
  8371                           
  8372                           ;RF_Control_B1.c: 446: } else if (status == 0) {
  8373  0AE7  0008               	return
  8374  0AE8                     l6551:	
  8375  0AE8  0020               	movlb	0	; select bank0
  8376  0AE9  08E7               	movf	setRFSW_AdjControl@status,f
  8377  0AEA  1D03               	skipz
  8378  0AEB  0008               	return
  8379                           
  8380                           ;RF_Control_B1.c: 450: setDimmerLights_DimmingRun(sw, 1);
  8381  0AEC  01A2               	clrf	setDimmerLights_DimmingRun@command
  8382  0AED  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8383  0AEE  0868               	movf	setRFSW_AdjControl@sw,w
  8384  0AEF  319D  25DA  318A   	fcall	_setDimmerLights_DimmingRun
  8385                           
  8386                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  8387  0AF2  0020               	movlb	0	; select bank0
  8388  0AF3  0868               	movf	setRFSW_AdjControl@sw,w
  8389  0AF4  3193  2339  318A   	fcall	_setDimmerLights_SwOn
  8390                           
  8391                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  8392  0AF7  0020               	movlb	0	; select bank0
  8393  0AF8  0868               	movf	setRFSW_AdjControl@sw,w
  8394  0AF9  3192  22AD         	fcall	_setDimmerLights_SwOff
  8395  0AFB  0008               	return
  8396  0AFC                     __end_of_setRFSW_AdjControl:	
  8397                           
  8398                           	psect	text33
  8399  1DDA                     __ptext33:	
  8400 ;; *************** function _setDimmerLights_DimmingRun *****************
  8401 ;; Defined at:
  8402 ;;		line 1147 in file "../src/Dimmer_B1.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;  lights          1    wreg     unsigned char 
  8405 ;;  command         1    2[BANK0 ] unsigned char 
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;  lights          1    4[BANK0 ] unsigned char 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;		None               void
  8410 ;; Registers used:
  8411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        3 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    6
  8424 ;; This function calls:
  8425 ;;		_DimmerLights_SelectPointer
  8426 ;; This function is called by:
  8427 ;;		_setRFSW_AdjControl
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _setDimmerLights_DimmingRun
  8433  1DDA                     _setDimmerLights_DimmingRun:	
  8434                           
  8435                           ;incstack = 0
  8436                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8437                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8438  1DDA  0020               	movlb	0	; select bank0
  8439  1DDB  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8440                           
  8441                           ;Dimmer_B1.c: 1148: DimmerLights_SelectPointer(lights);
  8442  1DDC  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8443  1DDD  319A  229A         	fcall	_DimmerLights_SelectPointer
  8444                           
  8445                           ;Dimmer_B1.c: 1149: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8446  1DDF  0020               	movlb	0	; select bank0
  8447  1DE0  0822               	movf	setDimmerLights_DimmingRun@command,w
  8448  1DE1  3A01               	xorlw	1
  8449  1DE2  3000               	movlw	0
  8450  1DE3  1903               	skipnz
  8451  1DE4  3001               	movlw	1
  8452  1DE5  00A3               	movwf	??_setDimmerLights_DimmingRun
  8453  1DE6  0021               	movlb	1	; select bank1
  8454  1DE7  0A4C               	incf	_DimmerLights^(0+128),w
  8455  1DE8  0086               	movwf	6
  8456  1DE9  3001               	movlw	1	; select bank2/3
  8457  1DEA  0087               	movwf	7
  8458  1DEB  0020               	movlb	0	; select bank0
  8459  1DEC  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8460  1DED  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8461  1DEE  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8462  1DEF  0801               	movf	1,w
  8463  1DF0  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8464  1DF1  39BF               	andlw	-65
  8465  1DF2  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8466  1DF3  0081               	movwf	1
  8467  1DF4  0008               	return
  8468  1DF5                     __end_of_setDimmerLights_DimmingRun:	
  8469                           
  8470                           	psect	text34
  8471  1BCC                     __ptext34:	
  8472 ;; *************** function _getRF_KeyStatus *****************
  8473 ;; Defined at:
  8474 ;;		line 166 in file "../src/RF_Control_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  key             1    1[BANK0 ] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      unsigned char 
  8481 ;; Registers used:
  8482 ;;		wreg, status,2
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        3 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    5
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_setRF_Main
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _getRF_KeyStatus
  8504  1BCC                     _getRF_KeyStatus:	
  8505                           
  8506                           ;RF_Control_B1.c: 167: char key = 0;
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8510  1BCC  0020               	movlb	0	; select bank0
  8511  1BCD  01A1               	clrf	getRF_KeyStatus@key
  8512                           
  8513                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8514  1BCE  01A2               	clrf	_getRF_KeyStatus$5424
  8515  1BCF  0AA2               	incf	_getRF_KeyStatus$5424,f
  8516  1BD0  1F0C               	btfss	12,6	;volatile
  8517  1BD1  1A0C               	btfsc	12,4	;volatile
  8518  1BD2  2BD7               	goto	l7205
  8519  1BD3  1C0C               	btfss	12,0	;volatile
  8520  1BD4  1B8C               	btfsc	12,7	;volatile
  8521  1BD5  2BD7               	goto	l7205
  8522  1BD6  01A2               	clrf	_getRF_KeyStatus$5424
  8523  1BD7                     l7205:	
  8524  1BD7  0822               	movf	_getRF_KeyStatus$5424,w
  8525  1BD8  00A0               	movwf	??_getRF_KeyStatus
  8526  1BD9  0820               	movf	??_getRF_KeyStatus,w
  8527  1BDA  00A1               	movwf	getRF_KeyStatus@key
  8528                           
  8529                           ;RF_Control_B1.c: 179: return key;
  8530  1BDB  0821               	movf	getRF_KeyStatus@key,w
  8531  1BDC  0008               	return
  8532  1BDD                     __end_of_getRF_KeyStatus:	
  8533                           
  8534                           	psect	text35
  8535  1BBB                     __ptext35:	
  8536 ;; *************** function _getBuz_GO *****************
  8537 ;; Defined at:
  8538 ;;		line 82 in file "../src/Buzzer_B1.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;		None
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  i               2    4[BANK0 ] int 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  2    0[BANK0 ] int 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        6 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    5
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_setRF_Main
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function _getBuz_GO
  8568  1BBB                     _getBuz_GO:	
  8569                           
  8570                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8571                           
  8572                           ;incstack = 0
  8573                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8574  1BBB  0022               	movlb	2	; select bank2
  8575  1BBC  0C20               	rrf	_Buz1^(0+256),w
  8576  1BBD  3901               	andlw	1
  8577  1BBE  0020               	movlb	0	; select bank0
  8578  1BBF  00A2               	movwf	??_getBuz_GO
  8579  1BC0  01A3               	clrf	??_getBuz_GO+1
  8580  1BC1  0822               	movf	??_getBuz_GO,w
  8581  1BC2  00A4               	movwf	getBuz_GO@i
  8582  1BC3  0823               	movf	??_getBuz_GO+1,w
  8583  1BC4  00A5               	movwf	getBuz_GO@i+1
  8584                           
  8585                           ;Buzzer_B1.c: 84: return i;
  8586  1BC5  0825               	movf	getBuz_GO@i+1,w
  8587  1BC6  01A1               	clrf	?_getBuz_GO+1
  8588  1BC7  07A1               	addwf	?_getBuz_GO+1,f
  8589  1BC8  0824               	movf	getBuz_GO@i,w
  8590  1BC9  01A0               	clrf	?_getBuz_GO
  8591  1BCA  07A0               	addwf	?_getBuz_GO,f
  8592  1BCB  0008               	return
  8593  1BCC                     __end_of_getBuz_GO:	
  8594                           
  8595                           	psect	text36
  8596  1B58                     __ptext36:	
  8597 ;; *************** function _RF_RxDisable *****************
  8598 ;; Defined at:
  8599 ;;		line 154 in file "../src/RF_Control_B1.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;		None
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;		None
  8604 ;; Return value:  Size  Location     Type
  8605 ;;		None               void
  8606 ;; Registers used:
  8607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;Total ram usage:        0 bytes
  8618 ;; Hardware stack levels used:    1
  8619 ;; Hardware stack levels required when called:    7
  8620 ;; This function calls:
  8621 ;;		_CC2500_WriteCommand
  8622 ;; This function is called by:
  8623 ;;		_setRF_Main
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _RF_RxDisable
  8629  1B58                     _RF_RxDisable:	
  8630                           
  8631                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8635  1B58  0021               	movlb	1	; select bank1
  8636  1B59  18A0               	btfsc	_RF1^(0+128),1
  8637  1B5A  2B5D               	goto	l2185
  8638  1B5B  1DA0               	btfss	_RF1^(0+128),3
  8639  1B5C  0008               	return
  8640  1B5D                     l2185:	
  8641                           
  8642                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8643  1B5D  11A0               	bcf	_RF1^(0+128),3
  8644                           
  8645                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8646  1B5E  10A0               	bcf	_RF1^(0+128),1
  8647                           
  8648                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8649  1B5F  3036               	movlw	54
  8650  1B60  319D  25C0  319B   	fcall	_CC2500_WriteCommand
  8651                           
  8652                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8653  1B63  303A               	movlw	58
  8654  1B64  319D  25C0         	fcall	_CC2500_WriteCommand
  8655  1B66  0008               	return
  8656  1B67                     __end_of_RF_RxDisable:	
  8657                           
  8658                           	psect	text37
  8659  08B6                     __ptext37:	
  8660 ;; *************** function _CC2500_TxData *****************
  8661 ;; Defined at:
  8662 ;;		line 32 in file "../src/CC2500_B1.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;		None
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8667 ;; Return value:  Size  Location     Type
  8668 ;;		None               void
  8669 ;; Registers used:
  8670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;Total ram usage:        2 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    7
  8683 ;; This function calls:
  8684 ;;		_CC2500_WriteByte
  8685 ;;		_CC2500_WriteCommand
  8686 ;;		_RF_Timeout_Counter
  8687 ;;		_setRF_TimeoutCleared
  8688 ;; This function is called by:
  8689 ;;		_setRF_Main
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           
  8694                           ;psect for function _CC2500_TxData
  8695  08B6                     _CC2500_TxData:	
  8696                           
  8697                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8698                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8699                           
  8700                           ;incstack = 0
  8701                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8702  08B6  3036               	movlw	54
  8703  08B7  319D  25C0  3188   	fcall	_CC2500_WriteCommand
  8704                           
  8705                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8706  08BA  303B               	movlw	59
  8707  08BB  319D  25C0  3188   	fcall	_CC2500_WriteCommand
  8708                           
  8709                           ;CC2500_B1.c: 38: RC0 = 0;
  8710  08BE  0020               	movlb	0	; select bank0
  8711  08BF  100E               	bcf	14,0	;volatile
  8712                           
  8713                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8714  08C0  307F               	movlw	127
  8715  08C1  00A4               	movwf	??_CC2500_TxData
  8716  08C2  0824               	movf	??_CC2500_TxData,w
  8717  08C3  0021               	movlb	1	; select bank1
  8718  08C4  00D0               	movwf	_SPI0Buffer^(0+128)
  8719                           
  8720                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8721  08C5  28C9               	goto	l8773
  8722  08C6                     l8771:	
  8723                           
  8724                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8725  08C6  319C  24AA  3188   	fcall	_RF_Timeout_Counter
  8726  08C9                     l8773:	
  8727  08C9  0020               	movlb	0	; select bank0
  8728  08CA  1E8E               	btfss	14,5	;volatile
  8729  08CB  28CF               	goto	l8777
  8730  08CC  0021               	movlb	1	; select bank1
  8731  08CD  1F21               	btfss	(_RF1^(0+128)+1),6
  8732  08CE  28C6               	goto	l8771
  8733  08CF                     l8777:	
  8734                           
  8735                           ;CC2500_B1.c: 42: };
  8736                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8737  08CF  3199  21DF  3188   	fcall	_setRF_TimeoutCleared
  8738                           
  8739                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8740  08D2  319D  2573  3188   	fcall	_CC2500_WriteByte
  8741                           
  8742                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8743  08D5  0021               	movlb	1	; select bank1
  8744  08D6  0853               	movf	_Tx_Length^(0+128),w
  8745  08D7  0020               	movlb	0	; select bank0
  8746  08D8  00A4               	movwf	??_CC2500_TxData
  8747  08D9  0824               	movf	??_CC2500_TxData,w
  8748  08DA  0021               	movlb	1	; select bank1
  8749  08DB  00D0               	movwf	_SPI0Buffer^(0+128)
  8750                           
  8751                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8752  08DC  319D  2573  3188   	fcall	_CC2500_WriteByte
  8753                           
  8754                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8755  08DF  0020               	movlb	0	; select bank0
  8756  08E0  01A5               	clrf	CC2500_TxData@loop_e
  8757  08E1                     l8791:	
  8758  08E1  0021               	movlb	1	; select bank1
  8759  08E2  0853               	movf	_Tx_Length^(0+128),w
  8760  08E3  0020               	movlb	0	; select bank0
  8761  08E4  0225               	subwf	CC2500_TxData@loop_e,w
  8762  08E5  1803               	btfsc	3,0
  8763  08E6  28FA               	goto	l235
  8764                           
  8765                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8766  08E7  0825               	movf	CC2500_TxData@loop_e,w
  8767  08E8  3EA0               	addlw	_RF_Data& (0+255)
  8768  08E9  0086               	movwf	6
  8769  08EA  3001               	movlw	1	; select bank3/4
  8770  08EB  0087               	movwf	7
  8771  08EC  0801               	movf	1,w
  8772  08ED  00A4               	movwf	??_CC2500_TxData
  8773  08EE  0824               	movf	??_CC2500_TxData,w
  8774  08EF  0021               	movlb	1	; select bank1
  8775  08F0  00D0               	movwf	_SPI0Buffer^(0+128)
  8776                           
  8777                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8778  08F1  319D  2573  3188   	fcall	_CC2500_WriteByte
  8779  08F4  3001               	movlw	1
  8780  08F5  0020               	movlb	0	; select bank0
  8781  08F6  00A4               	movwf	??_CC2500_TxData
  8782  08F7  0824               	movf	??_CC2500_TxData,w
  8783  08F8  07A5               	addwf	CC2500_TxData@loop_e,f
  8784  08F9  28E1               	goto	l8791
  8785  08FA                     l235:	
  8786                           
  8787                           ;CC2500_B1.c: 51: }
  8788                           ;CC2500_B1.c: 52: RC0 = 1;
  8789  08FA  140E               	bsf	14,0	;volatile
  8790                           
  8791                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8792  08FB  3035               	movlw	53
  8793  08FC  319D  25C0  3188   	fcall	_CC2500_WriteCommand
  8794                           
  8795                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8796  08FF  2903               	goto	l8797
  8797  0900                     l8795:	
  8798                           
  8799                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8800  0900  319C  24AA  3188   	fcall	_RF_Timeout_Counter
  8801  0903                     l8797:	
  8802  0903  0020               	movlb	0	; select bank0
  8803  0904  188E               	btfsc	14,1	;volatile
  8804  0905  2909               	goto	l8801
  8805  0906  0021               	movlb	1	; select bank1
  8806  0907  1F21               	btfss	(_RF1^(0+128)+1),6
  8807  0908  2900               	goto	l8795
  8808  0909                     l8801:	
  8809                           
  8810                           ;CC2500_B1.c: 56: };
  8811                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8812  0909  3199  21DF  3188   	fcall	_setRF_TimeoutCleared
  8813                           
  8814                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8815  090C  2910               	goto	l8805
  8816  090D                     l8803:	
  8817                           
  8818                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8819  090D  319C  24AA  3188   	fcall	_RF_Timeout_Counter
  8820  0910                     l8805:	
  8821  0910  0020               	movlb	0	; select bank0
  8822  0911  1C8E               	btfss	14,1	;volatile
  8823  0912  2916               	goto	l8809
  8824  0913  0021               	movlb	1	; select bank1
  8825  0914  1F21               	btfss	(_RF1^(0+128)+1),6
  8826  0915  290D               	goto	l8803
  8827  0916                     l8809:	
  8828                           
  8829                           ;CC2500_B1.c: 61: };
  8830                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8831  0916  3199  21DF  3188   	fcall	_setRF_TimeoutCleared
  8832                           
  8833                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8834  0919  3036               	movlw	54
  8835  091A  319D  25C0  3188   	fcall	_CC2500_WriteCommand
  8836                           
  8837                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8838  091D  303B               	movlw	59
  8839  091E  319D  25C0         	fcall	_CC2500_WriteCommand
  8840                           
  8841                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8842  0920  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8843  0921  0008               	return
  8844  0922                     __end_of_CC2500_TxData:	
  8845                           
  8846                           	psect	text38
  8847  084B                     __ptext38:	
  8848 ;; *************** function _CC2500_RxData *****************
  8849 ;; Defined at:
  8850 ;;		line 73 in file "../src/CC2500_B1.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;		None               void
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;Total ram usage:        2 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    7
  8871 ;; This function calls:
  8872 ;;		_CC2500_ReadByte
  8873 ;;		_CC2500_ReadStatus
  8874 ;;		_CC2500_WriteByte
  8875 ;;		_CC2500_WriteCommand
  8876 ;;		_RF_Timeout_Counter
  8877 ;;		_setRF_TimeoutCleared
  8878 ;; This function is called by:
  8879 ;;		_setRF_Main
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           
  8884                           ;psect for function _CC2500_RxData
  8885  084B                     _CC2500_RxData:	
  8886                           
  8887                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8888                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8889                           
  8890                           ;incstack = 0
  8891                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8892  084B  0020               	movlb	0	; select bank0
  8893  084C  188E               	btfsc	14,1	;volatile
  8894  084D  0008               	return
  8895                           
  8896                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8897  084E  303B               	movlw	59
  8898  084F  319F  278D  3188   	fcall	_CC2500_ReadStatus
  8899                           
  8900                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8901  0852  0021               	movlb	1	; select bank1
  8902  0853  0856               	movf	_s_data^(0+128),w
  8903  0854  1903               	btfsc	3,2
  8904  0855  0008               	return
  8905                           
  8906                           ;CC2500_B1.c: 90: RC0 = 0;
  8907  0856  0020               	movlb	0	; select bank0
  8908  0857  100E               	bcf	14,0	;volatile
  8909                           
  8910                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8911  0858  30FF               	movlw	255
  8912  0859  00A4               	movwf	??_CC2500_RxData
  8913  085A  0824               	movf	??_CC2500_RxData,w
  8914  085B  0021               	movlb	1	; select bank1
  8915  085C  00D0               	movwf	_SPI0Buffer^(0+128)
  8916                           
  8917                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8918  085D  2861               	goto	l8829
  8919  085E                     l8827:	
  8920                           
  8921                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8922  085E  319C  24AA  3188   	fcall	_RF_Timeout_Counter
  8923  0861                     l8829:	
  8924  0861  0020               	movlb	0	; select bank0
  8925  0862  1E8E               	btfss	14,5	;volatile
  8926  0863  2867               	goto	l8833
  8927  0864  0021               	movlb	1	; select bank1
  8928  0865  1F21               	btfss	(_RF1^(0+128)+1),6
  8929  0866  285E               	goto	l8827
  8930  0867                     l8833:	
  8931                           
  8932                           ;CC2500_B1.c: 95: };
  8933                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8934  0867  3199  21DF  3188   	fcall	_setRF_TimeoutCleared
  8935                           
  8936                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8937  086A  319D  2573  3188   	fcall	_CC2500_WriteByte
  8938                           
  8939                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8940  086D  319E  262C  3188   	fcall	_CC2500_ReadByte
  8941                           
  8942                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8943  0870  0021               	movlb	1	; select bank1
  8944  0871  0850               	movf	_SPI0Buffer^(0+128),w
  8945  0872  0020               	movlb	0	; select bank0
  8946  0873  00A4               	movwf	??_CC2500_RxData
  8947  0874  0824               	movf	??_CC2500_RxData,w
  8948  0875  0021               	movlb	1	; select bank1
  8949  0876  00CF               	movwf	_Rx_Length^(0+128)
  8950                           
  8951                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8952  0877  0020               	movlb	0	; select bank0
  8953  0878  01A5               	clrf	CC2500_RxData@loop_f
  8954  0879                     l8849:	
  8955  0879  0021               	movlb	1	; select bank1
  8956  087A  084F               	movf	_Rx_Length^(0+128),w
  8957  087B  0020               	movlb	0	; select bank0
  8958  087C  0225               	subwf	CC2500_RxData@loop_f,w
  8959  087D  1803               	btfsc	3,0
  8960  087E  2892               	goto	l8851
  8961                           
  8962                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8963  087F  319E  262C  3188   	fcall	_CC2500_ReadByte
  8964                           
  8965                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8966  0882  0021               	movlb	1	; select bank1
  8967  0883  0850               	movf	_SPI0Buffer^(0+128),w
  8968  0884  0020               	movlb	0	; select bank0
  8969  0885  00A4               	movwf	??_CC2500_RxData
  8970  0886  0825               	movf	CC2500_RxData@loop_f,w
  8971  0887  3EA0               	addlw	_RF_Data& (0+255)
  8972  0888  0086               	movwf	6
  8973  0889  3001               	movlw	1	; select bank3/4
  8974  088A  0087               	movwf	7
  8975  088B  0824               	movf	??_CC2500_RxData,w
  8976  088C  0081               	movwf	1
  8977  088D  3001               	movlw	1
  8978  088E  00A4               	movwf	??_CC2500_RxData
  8979  088F  0824               	movf	??_CC2500_RxData,w
  8980  0890  07A5               	addwf	CC2500_RxData@loop_f,f
  8981  0891  2879               	goto	l8849
  8982  0892                     l8851:	
  8983                           
  8984                           ;CC2500_B1.c: 104: }
  8985                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8986  0892  319E  262C  3188   	fcall	_CC2500_ReadByte
  8987                           
  8988                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8989  0895  0021               	movlb	1	; select bank1
  8990  0896  0850               	movf	_SPI0Buffer^(0+128),w
  8991  0897  0020               	movlb	0	; select bank0
  8992  0898  00A4               	movwf	??_CC2500_RxData
  8993  0899  0824               	movf	??_CC2500_RxData,w
  8994  089A  0021               	movlb	1	; select bank1
  8995  089B  00CE               	movwf	_RSSI^(0+128)
  8996                           
  8997                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8998  089C  319E  262C  3188   	fcall	_CC2500_ReadByte
  8999                           
  9000                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9001  089F  0021               	movlb	1	; select bank1
  9002  08A0  0850               	movf	_SPI0Buffer^(0+128),w
  9003  08A1  0020               	movlb	0	; select bank0
  9004  08A2  00A4               	movwf	??_CC2500_RxData
  9005  08A3  0824               	movf	??_CC2500_RxData,w
  9006  08A4  0021               	movlb	1	; select bank1
  9007  08A5  00C8               	movwf	_CRC^(0+128)
  9008                           
  9009                           ;CC2500_B1.c: 109: RC0 = 1;
  9010  08A6  0020               	movlb	0	; select bank0
  9011  08A7  140E               	bsf	14,0	;volatile
  9012                           
  9013                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9014  08A8  0021               	movlb	1	; select bank1
  9015  08A9  1BC8               	btfsc	_CRC^(0+128),7
  9016                           
  9017                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9018  08AA  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  9019                           
  9020                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9021  08AB  11A0               	bcf	_RF1^(0+128),3
  9022                           
  9023                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9024  08AC  14A0               	bsf	_RF1^(0+128),1
  9025                           
  9026                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9027  08AD  3036               	movlw	54
  9028  08AE  319D  25C0  3188   	fcall	_CC2500_WriteCommand
  9029                           
  9030                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9031  08B1  303A               	movlw	58
  9032  08B2  319D  25C0         	fcall	_CC2500_WriteCommand
  9033  08B4  0021               	movlb	1	; select bank1
  9034  08B5  0008               	return
  9035  08B6                     __end_of_CC2500_RxData:	
  9036                           
  9037                           	psect	text39
  9038  1F8D                     __ptext39:	
  9039 ;; *************** function _CC2500_ReadStatus *****************
  9040 ;; Defined at:
  9041 ;;		line 308 in file "../src/CC2500_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  status_addr     1    wreg     unsigned char 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;		None               void
  9048 ;; Registers used:
  9049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    6
  9062 ;; This function calls:
  9063 ;;		_CC2500_ReadByte
  9064 ;;		_CC2500_WriteByte
  9065 ;;		_RF_Timeout_Counter
  9066 ;;		_setRF_TimeoutCleared
  9067 ;; This function is called by:
  9068 ;;		_CC2500_RxData
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           
  9073                           ;psect for function _CC2500_ReadStatus
  9074  1F8D                     _CC2500_ReadStatus:	
  9075                           
  9076                           ;incstack = 0
  9077                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9078                           ;CC2500_ReadStatus@status_addr stored from wreg
  9079  1F8D  0020               	movlb	0	; select bank0
  9080  1F8E  00A3               	movwf	CC2500_ReadStatus@status_addr
  9081                           
  9082                           ;CC2500_B1.c: 309: RC0 = 0;
  9083  1F8F  100E               	bcf	14,0	;volatile
  9084                           
  9085                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9086  1F90  0823               	movf	CC2500_ReadStatus@status_addr,w
  9087  1F91  3EC0               	addlw	192
  9088  1F92  00A2               	movwf	??_CC2500_ReadStatus
  9089  1F93  0822               	movf	??_CC2500_ReadStatus,w
  9090  1F94  0021               	movlb	1	; select bank1
  9091  1F95  00D0               	movwf	_SPI0Buffer^(0+128)
  9092                           
  9093                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  9094  1F96  2F9A               	goto	l8679
  9095  1F97                     l8677:	
  9096                           
  9097                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9098  1F97  319C  24AA  319F   	fcall	_RF_Timeout_Counter
  9099  1F9A                     l8679:	
  9100  1F9A  0020               	movlb	0	; select bank0
  9101  1F9B  1E8E               	btfss	14,5	;volatile
  9102  1F9C  2FA0               	goto	l8683
  9103  1F9D  0021               	movlb	1	; select bank1
  9104  1F9E  1F21               	btfss	(_RF1^(0+128)+1),6
  9105  1F9F  2F97               	goto	l8677
  9106  1FA0                     l8683:	
  9107                           
  9108                           ;CC2500_B1.c: 314: };
  9109                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9110  1FA0  3199  21DF  319F   	fcall	_setRF_TimeoutCleared
  9111                           
  9112                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9113  1FA3  319D  2573  319F   	fcall	_CC2500_WriteByte
  9114                           
  9115                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9116  1FA6  319E  262C         	fcall	_CC2500_ReadByte
  9117                           
  9118                           ;CC2500_B1.c: 319: RC0 = 1;
  9119  1FA8  0020               	movlb	0	; select bank0
  9120  1FA9  140E               	bsf	14,0	;volatile
  9121                           
  9122                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9123  1FAA  0021               	movlb	1	; select bank1
  9124  1FAB  0850               	movf	_SPI0Buffer^(0+128),w
  9125  1FAC  0020               	movlb	0	; select bank0
  9126  1FAD  00A2               	movwf	??_CC2500_ReadStatus
  9127  1FAE  0822               	movf	??_CC2500_ReadStatus,w
  9128  1FAF  0021               	movlb	1	; select bank1
  9129  1FB0  00D6               	movwf	_s_data^(0+128)
  9130  1FB1  0008               	return
  9131  1FB2                     __end_of_CC2500_ReadStatus:	
  9132                           
  9133                           	psect	text40
  9134  1E2C                     __ptext40:	
  9135 ;; *************** function _CC2500_ReadByte *****************
  9136 ;; Defined at:
  9137 ;;		line 242 in file "../src/CC2500_B1.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;		None               void
  9144 ;; Registers used:
  9145 ;;		wreg, status,2, status,0
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;Total ram usage:        2 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    5
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_CC2500_RxData
  9162 ;;		_CC2500_ReadStatus
  9163 ;;		_CC2500_ReadREG
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           
  9168                           ;psect for function _CC2500_ReadByte
  9169  1E2C                     _CC2500_ReadByte:	
  9170                           
  9171                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9172                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9173                           
  9174                           ;incstack = 0
  9175                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9176  1E2C  0020               	movlb	0	; select bank0
  9177  1E2D  01A1               	clrf	CC2500_ReadByte@loop_b
  9178  1E2E                     L3:	
  9179  1E2E  3008               	movlw	8
  9180  1E2F  0221               	subwf	CC2500_ReadByte@loop_b,w
  9181  1E30  1803               	btfsc	3,0
  9182  1E31  0008               	return
  9183                           
  9184                           ;CC2500_B1.c: 245: RC3 = 1;
  9185  1E32  158E               	bsf	14,3	;volatile
  9186                           
  9187                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9188  1E33  1003               	clrc
  9189  1E34  0021               	movlb	1	; select bank1
  9190  1E35  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9191                           
  9192                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9193  1E36  0020               	movlb	0	; select bank0
  9194  1E37  1E8E               	btfss	14,5	;volatile
  9195  1E38  2E3C               	goto	l8649
  9196                           
  9197                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9198  1E39  0021               	movlb	1	; select bank1
  9199  1E3A  1450               	bsf	_SPI0Buffer^(0+128),0
  9200  1E3B  2E42               	goto	l8651
  9201  1E3C                     l8649:	
  9202                           
  9203                           ;CC2500_B1.c: 249: else
  9204                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9205  1E3C  30FE               	movlw	254
  9206  1E3D  0020               	movlb	0	; select bank0
  9207  1E3E  00A0               	movwf	??_CC2500_ReadByte
  9208  1E3F  0820               	movf	??_CC2500_ReadByte,w
  9209  1E40  0021               	movlb	1	; select bank1
  9210  1E41  05D0               	andwf	_SPI0Buffer^(0+128),f
  9211  1E42                     l8651:	
  9212                           
  9213                           ;CC2500_B1.c: 251: RC3 = 0;
  9214  1E42  0020               	movlb	0	; select bank0
  9215  1E43  118E               	bcf	14,3	;volatile
  9216  1E44  3001               	movlw	1
  9217  1E45  00A0               	movwf	??_CC2500_ReadByte
  9218  1E46  0820               	movf	??_CC2500_ReadByte,w
  9219  1E47  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9220  1E48  2E2E               	goto	L3
  9221  1E49                     __end_of_CC2500_ReadByte:	
  9222                           
  9223                           	psect	text41
  9224  1CBF                     __ptext41:	
  9225 ;; *************** function _CC2500_PowerOnInitial *****************
  9226 ;; Defined at:
  9227 ;;		line 126 in file "../src/CC2500_B1.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;		None
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;		None
  9232 ;; Return value:  Size  Location     Type
  9233 ;;		None               void
  9234 ;; Registers used:
  9235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;Total ram usage:        0 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    8
  9248 ;; This function calls:
  9249 ;;		_CC2500_ClearRXFIFO
  9250 ;;		_CC2500_ClearTXFIFO
  9251 ;;		_CC2500_FrequencyCabr
  9252 ;;		_CC2500_InitPATable
  9253 ;;		_CC2500_InitSetREG
  9254 ;;		_CC2500_PowerRST
  9255 ;;		_CC2500_SIDLEMode
  9256 ;; This function is called by:
  9257 ;;		_main
  9258 ;;		_setRF_Main
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           
  9263                           ;psect for function _CC2500_PowerOnInitial
  9264  1CBF                     _CC2500_PowerOnInitial:	
  9265                           
  9266                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9267                           
  9268                           ;incstack = 0
  9269                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9270  1CBF  3192  2269  319C   	fcall	_CC2500_PowerRST
  9271                           
  9272                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9273  1CC2  3190  2011  319C   	fcall	_CC2500_InitSetREG
  9274                           
  9275                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9276  1CC5  319E  2686  319C   	fcall	_CC2500_InitPATable
  9277                           
  9278                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9279  1CC8  3199  21E7  319C   	fcall	_CC2500_ClearTXFIFO
  9280                           
  9281                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9282  1CCB  3199  21E3  319C   	fcall	_CC2500_ClearRXFIFO
  9283                           
  9284                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9285  1CCE  319B  2306  319C   	fcall	_CC2500_FrequencyCabr
  9286                           
  9287                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9288  1CD1  3199  21EB         	fcall	_CC2500_SIDLEMode
  9289  1CD3  0008               	return
  9290  1CD4                     __end_of_CC2500_PowerOnInitial:	
  9291                           
  9292                           	psect	text42
  9293  19EB                     __ptext42:	
  9294 ;; *************** function _CC2500_SIDLEMode *****************
  9295 ;; Defined at:
  9296 ;;		line 216 in file "../src/CC2500_B1.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;		None
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;		None
  9301 ;; Return value:  Size  Location     Type
  9302 ;;		None               void
  9303 ;; Registers used:
  9304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;Total ram usage:        0 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    7
  9317 ;; This function calls:
  9318 ;;		_CC2500_WriteCommand
  9319 ;; This function is called by:
  9320 ;;		_CC2500_PowerOnInitial
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _CC2500_SIDLEMode
  9326  19EB                     _CC2500_SIDLEMode:	
  9327                           
  9328                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9329                           
  9330                           ;incstack = 0
  9331                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9332  19EB  3036               	movlw	54
  9333  19EC  319D  25C0         	fcall	_CC2500_WriteCommand
  9334  19EE  0008               	return
  9335  19EF                     __end_of_CC2500_SIDLEMode:	
  9336                           
  9337                           	psect	text43
  9338  1269                     __ptext43:	
  9339 ;; *************** function _CC2500_PowerRST *****************
  9340 ;; Defined at:
  9341 ;;		line 139 in file "../src/CC2500_B1.c"
  9342 ;; Parameters:    Size  Location     Type
  9343 ;;		None
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;		None
  9346 ;; Return value:  Size  Location     Type
  9347 ;;		None               void
  9348 ;; Registers used:
  9349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9350 ;; Tracked objects:
  9351 ;;		On entry : 0/0
  9352 ;;		On exit  : 0/0
  9353 ;;		Unchanged: 0/0
  9354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;Total ram usage:        1 bytes
  9360 ;; Hardware stack levels used:    1
  9361 ;; Hardware stack levels required when called:    6
  9362 ;; This function calls:
  9363 ;;		_CC2500_WriteByte
  9364 ;;		_DelayTime_1us
  9365 ;;		_RF_Timeout_Counter
  9366 ;;		_setRF_TimeoutCleared
  9367 ;; This function is called by:
  9368 ;;		_CC2500_PowerOnInitial
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _CC2500_PowerRST
  9374  1269                     _CC2500_PowerRST:	
  9375                           
  9376                           ;CC2500_B1.c: 140: RC3 = 0;
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9380  1269  0020               	movlb	0	; select bank0
  9381  126A  118E               	bcf	14,3	;volatile
  9382                           
  9383                           ;CC2500_B1.c: 141: RC4 = 0;
  9384  126B  120E               	bcf	14,4	;volatile
  9385                           
  9386                           ;CC2500_B1.c: 142: RC0 = 1;
  9387  126C  140E               	bsf	14,0	;volatile
  9388                           
  9389                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9390  126D  300A               	movlw	10
  9391  126E  00A0               	movwf	DelayTime_1us@count
  9392  126F  3000               	movlw	0
  9393  1270  00A1               	movwf	DelayTime_1us@count+1
  9394  1271  319F  27B2  3192   	fcall	_DelayTime_1us
  9395                           
  9396                           ;CC2500_B1.c: 144: RC0 = 0;
  9397  1274  0020               	movlb	0	; select bank0
  9398  1275  100E               	bcf	14,0	;volatile
  9399                           
  9400                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9401  1276  300A               	movlw	10
  9402  1277  00A0               	movwf	DelayTime_1us@count
  9403  1278  3000               	movlw	0
  9404  1279  00A1               	movwf	DelayTime_1us@count+1
  9405  127A  319F  27B2  3192   	fcall	_DelayTime_1us
  9406                           
  9407                           ;CC2500_B1.c: 146: RC0 = 1;
  9408  127D  0020               	movlb	0	; select bank0
  9409  127E  140E               	bsf	14,0	;volatile
  9410                           
  9411                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9412  127F  3028               	movlw	40
  9413  1280  00A0               	movwf	DelayTime_1us@count
  9414  1281  3000               	movlw	0
  9415  1282  00A1               	movwf	DelayTime_1us@count+1
  9416  1283  319F  27B2  3192   	fcall	_DelayTime_1us
  9417                           
  9418                           ;CC2500_B1.c: 148: RC0 = 0;
  9419  1286  0020               	movlb	0	; select bank0
  9420  1287  100E               	bcf	14,0	;volatile
  9421                           
  9422                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9423  1288  3030               	movlw	48
  9424  1289  00A6               	movwf	??_CC2500_PowerRST
  9425  128A  0826               	movf	??_CC2500_PowerRST,w
  9426  128B  0021               	movlb	1	; select bank1
  9427  128C  00D0               	movwf	_SPI0Buffer^(0+128)
  9428                           
  9429                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9430  128D  2A91               	goto	l8707
  9431  128E                     l8705:	
  9432                           
  9433                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9434  128E  319C  24AA  3192   	fcall	_RF_Timeout_Counter
  9435  1291                     l8707:	
  9436  1291  0020               	movlb	0	; select bank0
  9437  1292  1E8E               	btfss	14,5	;volatile
  9438  1293  2A97               	goto	l8711
  9439  1294  0021               	movlb	1	; select bank1
  9440  1295  1F21               	btfss	(_RF1^(0+128)+1),6
  9441  1296  2A8E               	goto	l8705
  9442  1297                     l8711:	
  9443                           
  9444                           ;CC2500_B1.c: 152: };
  9445                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9446  1297  3199  21DF  3192   	fcall	_setRF_TimeoutCleared
  9447                           
  9448                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9449  129A  319D  2573  3192   	fcall	_CC2500_WriteByte
  9450                           
  9451                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9452  129D  2AA1               	goto	l8717
  9453  129E                     l8715:	
  9454                           
  9455                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9456  129E  319C  24AA  3192   	fcall	_RF_Timeout_Counter
  9457  12A1                     l8717:	
  9458  12A1  0020               	movlb	0	; select bank0
  9459  12A2  1E8E               	btfss	14,5	;volatile
  9460  12A3  2AA7               	goto	l8721
  9461  12A4  0021               	movlb	1	; select bank1
  9462  12A5  1F21               	btfss	(_RF1^(0+128)+1),6
  9463  12A6  2A9E               	goto	l8715
  9464  12A7                     l8721:	
  9465                           
  9466                           ;CC2500_B1.c: 157: };
  9467                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9468  12A7  3199  21DF         	fcall	_setRF_TimeoutCleared
  9469                           
  9470                           ;CC2500_B1.c: 159: RC4 = 0;
  9471  12A9  0020               	movlb	0	; select bank0
  9472  12AA  120E               	bcf	14,4	;volatile
  9473                           
  9474                           ;CC2500_B1.c: 160: RC0 = 1;
  9475  12AB  140E               	bsf	14,0	;volatile
  9476  12AC  0008               	return
  9477  12AD                     __end_of_CC2500_PowerRST:	
  9478                           
  9479                           	psect	text44
  9480  1011                     __ptext44:	
  9481 ;; *************** function _CC2500_InitSetREG *****************
  9482 ;; Defined at:
  9483 ;;		line 166 in file "../src/CC2500_B1.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9488 ;;  temp2           1    7[BANK0 ] unsigned char 
  9489 ;;  temp1           1    6[BANK0 ] unsigned char 
  9490 ;; Return value:  Size  Location     Type
  9491 ;;		None               void
  9492 ;; Registers used:
  9493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;Total ram usage:        4 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; Hardware stack levels required when called:    7
  9506 ;; This function calls:
  9507 ;;		_CC2500_WriteREG
  9508 ;; This function is called by:
  9509 ;;		_CC2500_PowerOnInitial
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           
  9514                           ;psect for function _CC2500_InitSetREG
  9515  1011                     _CC2500_InitSetREG:	
  9516                           
  9517                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9518                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9519                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9523  1011  0020               	movlb	0	; select bank0
  9524  1012  01A8               	clrf	CC2500_InitSetREG@loop_c
  9525  1013                     L4:	
  9526  1013  302F               	movlw	47
  9527  1014  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9528  1015  1803               	btfsc	3,0
  9529  1016  0008               	return
  9530                           
  9531                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9532  1017  0828               	movf	CC2500_InitSetREG@loop_c,w
  9533  1018  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9534  1019  0084               	movwf	4
  9535  101A  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9536  101B  1803               	skipnc
  9537  101C  3E01               	addlw	1
  9538  101D  0085               	movwf	5
  9539  101E  0800               	movf	0,w	;code access
  9540  101F  00A5               	movwf	??_CC2500_InitSetREG
  9541  1020  0825               	movf	??_CC2500_InitSetREG,w
  9542  1021  00A6               	movwf	CC2500_InitSetREG@temp1
  9543                           
  9544                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9545  1022  0828               	movf	CC2500_InitSetREG@loop_c,w
  9546  1023  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9547  1024  0084               	movwf	4
  9548  1025  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9549  1026  1803               	skipnc
  9550  1027  3E01               	addlw	1
  9551  1028  0085               	movwf	5
  9552  1029  0800               	movf	0,w	;code access
  9553  102A  00A5               	movwf	??_CC2500_InitSetREG
  9554  102B  0825               	movf	??_CC2500_InitSetREG,w
  9555  102C  00A7               	movwf	CC2500_InitSetREG@temp2
  9556                           
  9557                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9558  102D  0827               	movf	CC2500_InitSetREG@temp2,w
  9559  102E  00A5               	movwf	??_CC2500_InitSetREG
  9560  102F  0825               	movf	??_CC2500_InitSetREG,w
  9561  1030  00A2               	movwf	CC2500_WriteREG@value
  9562  1031  0826               	movf	CC2500_InitSetREG@temp1,w
  9563  1032  319F  276A  3190   	fcall	_CC2500_WriteREG
  9564  1035  3001               	movlw	1
  9565  1036  0020               	movlb	0	; select bank0
  9566  1037  00A5               	movwf	??_CC2500_InitSetREG
  9567  1038  0825               	movf	??_CC2500_InitSetREG,w
  9568  1039  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9569  103A  2813               	goto	L4
  9570  103B                     __end_of_CC2500_InitSetREG:	
  9571                           
  9572                           	psect	text45
  9573  1E86                     __ptext45:	
  9574 ;; *************** function _CC2500_InitPATable *****************
  9575 ;; Defined at:
  9576 ;;		line 181 in file "../src/CC2500_B1.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;		None
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9581 ;;  temp            1    6[BANK0 ] unsigned char 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;		None               void
  9584 ;; Registers used:
  9585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;Total ram usage:        3 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    7
  9598 ;; This function calls:
  9599 ;;		_CC2500_WriteREG
  9600 ;; This function is called by:
  9601 ;;		_CC2500_PowerOnInitial
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           
  9606                           ;psect for function _CC2500_InitPATable
  9607  1E86                     _CC2500_InitPATable:	
  9608                           
  9609                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9610                           ;CC2500_B1.c: 183: unsigned char temp;
  9611                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9615  1E86  0020               	movlb	0	; select bank0
  9616  1E87  01A7               	clrf	CC2500_InitPATable@loop_d
  9617  1E88                     L5:	
  9618  1E88  3008               	movlw	8
  9619  1E89  0227               	subwf	CC2500_InitPATable@loop_d,w
  9620  1E8A  1803               	btfsc	3,0
  9621  1E8B  0008               	return
  9622                           
  9623                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9624  1E8C  0827               	movf	CC2500_InitPATable@loop_d,w
  9625  1E8D  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9626  1E8E  0084               	movwf	4
  9627  1E8F  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9628  1E90  1803               	skipnc
  9629  1E91  3E01               	addlw	1
  9630  1E92  0085               	movwf	5
  9631  1E93  0800               	movf	0,w	;code access
  9632  1E94  00A5               	movwf	??_CC2500_InitPATable
  9633  1E95  0825               	movf	??_CC2500_InitPATable,w
  9634  1E96  00A6               	movwf	CC2500_InitPATable@temp
  9635                           
  9636                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9637  1E97  0826               	movf	CC2500_InitPATable@temp,w
  9638  1E98  00A5               	movwf	??_CC2500_InitPATable
  9639  1E99  0825               	movf	??_CC2500_InitPATable,w
  9640  1E9A  00A2               	movwf	CC2500_WriteREG@value
  9641  1E9B  303E               	movlw	62
  9642  1E9C  319F  276A  319E   	fcall	_CC2500_WriteREG
  9643  1E9F  3001               	movlw	1
  9644  1EA0  0020               	movlb	0	; select bank0
  9645  1EA1  00A5               	movwf	??_CC2500_InitPATable
  9646  1EA2  0825               	movf	??_CC2500_InitPATable,w
  9647  1EA3  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9648  1EA4  2E88               	goto	L5
  9649  1EA5                     __end_of_CC2500_InitPATable:	
  9650                           
  9651                           	psect	text46
  9652  1F6A                     __ptext46:	
  9653 ;; *************** function _CC2500_WriteREG *****************
  9654 ;; Defined at:
  9655 ;;		line 258 in file "../src/CC2500_B1.c"
  9656 ;; Parameters:    Size  Location     Type
  9657 ;;  w_addr          1    wreg     unsigned char 
  9658 ;;  value           1    2[BANK0 ] unsigned char 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;		None               void
  9663 ;; Registers used:
  9664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:        3 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    6
  9677 ;; This function calls:
  9678 ;;		_CC2500_WriteByte
  9679 ;;		_RF_Timeout_Counter
  9680 ;;		_setRF_TimeoutCleared
  9681 ;; This function is called by:
  9682 ;;		_CC2500_InitSetREG
  9683 ;;		_CC2500_InitPATable
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           
  9688                           ;psect for function _CC2500_WriteREG
  9689  1F6A                     _CC2500_WriteREG:	
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9693                           ;CC2500_WriteREG@w_addr stored from wreg
  9694  1F6A  0020               	movlb	0	; select bank0
  9695  1F6B  00A4               	movwf	CC2500_WriteREG@w_addr
  9696                           
  9697                           ;CC2500_B1.c: 259: RC0 = 0;
  9698  1F6C  100E               	bcf	14,0	;volatile
  9699                           
  9700                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9701  1F6D  0824               	movf	CC2500_WriteREG@w_addr,w
  9702  1F6E  00A3               	movwf	??_CC2500_WriteREG
  9703  1F6F  0823               	movf	??_CC2500_WriteREG,w
  9704  1F70  0021               	movlb	1	; select bank1
  9705  1F71  00D0               	movwf	_SPI0Buffer^(0+128)
  9706                           
  9707                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9708  1F72  2F76               	goto	l8661
  9709  1F73                     l8659:	
  9710                           
  9711                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9712  1F73  319C  24AA  319F   	fcall	_RF_Timeout_Counter
  9713  1F76                     l8661:	
  9714  1F76  0020               	movlb	0	; select bank0
  9715  1F77  1E8E               	btfss	14,5	;volatile
  9716  1F78  2F7C               	goto	l8665
  9717  1F79  0021               	movlb	1	; select bank1
  9718  1F7A  1F21               	btfss	(_RF1^(0+128)+1),6
  9719  1F7B  2F73               	goto	l8659
  9720  1F7C                     l8665:	
  9721                           
  9722                           ;CC2500_B1.c: 263: };
  9723                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9724  1F7C  3199  21DF  319F   	fcall	_setRF_TimeoutCleared
  9725                           
  9726                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9727  1F7F  319D  2573  319F   	fcall	_CC2500_WriteByte
  9728                           
  9729                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9730  1F82  0020               	movlb	0	; select bank0
  9731  1F83  0822               	movf	CC2500_WriteREG@value,w
  9732  1F84  00A3               	movwf	??_CC2500_WriteREG
  9733  1F85  0823               	movf	??_CC2500_WriteREG,w
  9734  1F86  0021               	movlb	1	; select bank1
  9735  1F87  00D0               	movwf	_SPI0Buffer^(0+128)
  9736                           
  9737                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9738  1F88  319D  2573         	fcall	_CC2500_WriteByte
  9739                           
  9740                           ;CC2500_B1.c: 269: RC0 = 1;
  9741  1F8A  0020               	movlb	0	; select bank0
  9742  1F8B  140E               	bsf	14,0	;volatile
  9743  1F8C  0008               	return
  9744  1F8D                     __end_of_CC2500_WriteREG:	
  9745                           
  9746                           	psect	text47
  9747  1B06                     __ptext47:	
  9748 ;; *************** function _CC2500_FrequencyCabr *****************
  9749 ;; Defined at:
  9750 ;;		line 208 in file "../src/CC2500_B1.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;		None
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;		None
  9755 ;; Return value:  Size  Location     Type
  9756 ;;		None               void
  9757 ;; Registers used:
  9758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9759 ;; Tracked objects:
  9760 ;;		On entry : 0/0
  9761 ;;		On exit  : 0/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;Total ram usage:        0 bytes
  9769 ;; Hardware stack levels used:    1
  9770 ;; Hardware stack levels required when called:    7
  9771 ;; This function calls:
  9772 ;;		_CC2500_WriteCommand
  9773 ;;		_DelayTime_1us
  9774 ;; This function is called by:
  9775 ;;		_CC2500_PowerOnInitial
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           
  9780                           ;psect for function _CC2500_FrequencyCabr
  9781  1B06                     _CC2500_FrequencyCabr:	
  9782                           
  9783                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9784                           
  9785                           ;incstack = 0
  9786                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9787  1B06  3033               	movlw	51
  9788  1B07  319D  25C0  319B   	fcall	_CC2500_WriteCommand
  9789                           
  9790                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9791  1B0A  30E8               	movlw	232
  9792  1B0B  0020               	movlb	0	; select bank0
  9793  1B0C  00A0               	movwf	DelayTime_1us@count
  9794  1B0D  3003               	movlw	3
  9795  1B0E  00A1               	movwf	DelayTime_1us@count+1
  9796  1B0F  319F  27B2         	fcall	_DelayTime_1us
  9797  1B11  0008               	return
  9798  1B12                     __end_of_CC2500_FrequencyCabr:	
  9799                           
  9800                           	psect	text48
  9801  1FB2                     __ptext48:	
  9802 ;; *************** function _DelayTime_1us *****************
  9803 ;; Defined at:
  9804 ;;		line 327 in file "../src/CC2500_B1.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;  count           2    0[BANK0 ] int 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  j               2    4[BANK0 ] unsigned int 
  9809 ;;  i               2    2[BANK0 ] unsigned int 
  9810 ;; Return value:  Size  Location     Type
  9811 ;;		None               void
  9812 ;; Registers used:
  9813 ;;		wreg, status,2
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9819 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;Total ram usage:        6 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    5
  9826 ;; This function calls:
  9827 ;;		Nothing
  9828 ;; This function is called by:
  9829 ;;		_CC2500_PowerRST
  9830 ;;		_CC2500_FrequencyCabr
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           
  9835                           ;psect for function _DelayTime_1us
  9836  1FB2                     _DelayTime_1us:	
  9837                           
  9838                           ;CC2500_B1.c: 328: unsigned int i, j;
  9839                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9840                           
  9841                           ;incstack = 0
  9842                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9843  1FB2  3001               	movlw	1
  9844  1FB3  0020               	movlb	0	; select bank0
  9845  1FB4  00A2               	movwf	DelayTime_1us@i
  9846  1FB5  3000               	movlw	0
  9847  1FB6  00A3               	movwf	DelayTime_1us@i+1
  9848  1FB7                     l347:	
  9849  1FB7  0821               	movf	DelayTime_1us@count+1,w
  9850  1FB8  0223               	subwf	DelayTime_1us@i+1,w
  9851  1FB9  1D03               	skipz
  9852  1FBA  2FBD               	goto	u5595
  9853  1FBB  0820               	movf	DelayTime_1us@count,w
  9854  1FBC  0222               	subwf	DelayTime_1us@i,w
  9855  1FBD                     u5595:	
  9856  1FBD  1803               	btfsc	3,0
  9857  1FBE  0008               	return
  9858                           
  9859                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9860  1FBF  01A4               	clrf	DelayTime_1us@j
  9861  1FC0  01A5               	clrf	DelayTime_1us@j+1
  9862  1FC1  3000               	movlw	0
  9863  1FC2  0225               	subwf	DelayTime_1us@j+1,w
  9864  1FC3  3002               	movlw	2
  9865  1FC4  1903               	skipnz
  9866  1FC5  0224               	subwf	DelayTime_1us@j,w
  9867  1FC6  1803               	btfsc	3,0
  9868  1FC7  2FD3               	goto	l6459
  9869  1FC8                     l6457:	
  9870  1FC8  3001               	movlw	1
  9871  1FC9  07A4               	addwf	DelayTime_1us@j,f
  9872  1FCA  3000               	movlw	0
  9873  1FCB  3DA5               	addwfc	DelayTime_1us@j+1,f
  9874  1FCC  3000               	movlw	0
  9875  1FCD  0225               	subwf	DelayTime_1us@j+1,w
  9876  1FCE  3002               	movlw	2
  9877  1FCF  1903               	skipnz
  9878  1FD0  0224               	subwf	DelayTime_1us@j,w
  9879  1FD1  1C03               	skipc
  9880  1FD2  2FC8               	goto	l6457
  9881  1FD3                     l6459:	
  9882  1FD3  3001               	movlw	1
  9883  1FD4  07A2               	addwf	DelayTime_1us@i,f
  9884  1FD5  3000               	movlw	0
  9885  1FD6  3DA3               	addwfc	DelayTime_1us@i+1,f
  9886  1FD7  2FB7               	goto	l347
  9887  1FD8                     __end_of_DelayTime_1us:	
  9888                           
  9889                           	psect	text49
  9890  19E7                     __ptext49:	
  9891 ;; *************** function _CC2500_ClearTXFIFO *****************
  9892 ;; Defined at:
  9893 ;;		line 194 in file "../src/CC2500_B1.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;		None
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;		None
  9898 ;; Return value:  Size  Location     Type
  9899 ;;		None               void
  9900 ;; Registers used:
  9901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;Total ram usage:        0 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    7
  9914 ;; This function calls:
  9915 ;;		_CC2500_WriteCommand
  9916 ;; This function is called by:
  9917 ;;		_CC2500_PowerOnInitial
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           
  9922                           ;psect for function _CC2500_ClearTXFIFO
  9923  19E7                     _CC2500_ClearTXFIFO:	
  9924                           
  9925                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9926                           
  9927                           ;incstack = 0
  9928                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9929  19E7  303B               	movlw	59
  9930  19E8  319D  25C0         	fcall	_CC2500_WriteCommand
  9931  19EA  0008               	return
  9932  19EB                     __end_of_CC2500_ClearTXFIFO:	
  9933                           
  9934                           	psect	text50
  9935  19E3                     __ptext50:	
  9936 ;; *************** function _CC2500_ClearRXFIFO *****************
  9937 ;; Defined at:
  9938 ;;		line 201 in file "../src/CC2500_B1.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        0 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    7
  9959 ;; This function calls:
  9960 ;;		_CC2500_WriteCommand
  9961 ;; This function is called by:
  9962 ;;		_CC2500_PowerOnInitial
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function _CC2500_ClearRXFIFO
  9968  19E3                     _CC2500_ClearRXFIFO:	
  9969                           
  9970                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9971                           
  9972                           ;incstack = 0
  9973                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9974  19E3  303A               	movlw	58
  9975  19E4  319D  25C0         	fcall	_CC2500_WriteCommand
  9976  19E6  0008               	return
  9977  19E7                     __end_of_CC2500_ClearRXFIFO:	
  9978                           
  9979                           	psect	text51
  9980  1DC0                     __ptext51:	
  9981 ;; *************** function _CC2500_WriteCommand *****************
  9982 ;; Defined at:
  9983 ;;		line 292 in file "../src/CC2500_B1.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;  command         1    wreg     unsigned char 
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  command         1    3[BANK0 ] unsigned char 
  9988 ;; Return value:  Size  Location     Type
  9989 ;;		None               void
  9990 ;; Registers used:
  9991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;Total ram usage:        2 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    6
 10004 ;; This function calls:
 10005 ;;		_CC2500_WriteByte
 10006 ;;		_RF_Timeout_Counter
 10007 ;;		_setRF_TimeoutCleared
 10008 ;; This function is called by:
 10009 ;;		_CC2500_TxData
 10010 ;;		_CC2500_RxData
 10011 ;;		_CC2500_ClearTXFIFO
 10012 ;;		_CC2500_ClearRXFIFO
 10013 ;;		_CC2500_FrequencyCabr
 10014 ;;		_CC2500_SIDLEMode
 10015 ;;		_setRF_Main
 10016 ;;		_RF_RxDisable
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           
 10021                           ;psect for function _CC2500_WriteCommand
 10022  1DC0                     _CC2500_WriteCommand:	
 10023                           
 10024                           ;incstack = 0
 10025                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10026                           ;CC2500_WriteCommand@command stored from wreg
 10027  1DC0  0020               	movlb	0	; select bank0
 10028  1DC1  00A3               	movwf	CC2500_WriteCommand@command
 10029                           
 10030                           ;CC2500_B1.c: 293: RC0 = 0;
 10031  1DC2  100E               	bcf	14,0	;volatile
 10032                           
 10033                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10034  1DC3  0823               	movf	CC2500_WriteCommand@command,w
 10035  1DC4  00A2               	movwf	??_CC2500_WriteCommand
 10036  1DC5  0822               	movf	??_CC2500_WriteCommand,w
 10037  1DC6  0021               	movlb	1	; select bank1
 10038  1DC7  00D0               	movwf	_SPI0Buffer^(0+128)
 10039                           
 10040                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
 10041  1DC8  2DCC               	goto	l8627
 10042  1DC9                     l8625:	
 10043                           
 10044                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10045  1DC9  319C  24AA  319D   	fcall	_RF_Timeout_Counter
 10046  1DCC                     l8627:	
 10047  1DCC  0020               	movlb	0	; select bank0
 10048  1DCD  1E8E               	btfss	14,5	;volatile
 10049  1DCE  2DD2               	goto	l8631
 10050  1DCF  0021               	movlb	1	; select bank1
 10051  1DD0  1F21               	btfss	(_RF1^(0+128)+1),6
 10052  1DD1  2DC9               	goto	l8625
 10053  1DD2                     l8631:	
 10054                           
 10055                           ;CC2500_B1.c: 298: };
 10056                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10057  1DD2  3199  21DF  319D   	fcall	_setRF_TimeoutCleared
 10058                           
 10059                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10060  1DD5  319D  2573         	fcall	_CC2500_WriteByte
 10061                           
 10062                           ;CC2500_B1.c: 302: RC0 = 1;
 10063  1DD7  0020               	movlb	0	; select bank0
 10064  1DD8  140E               	bsf	14,0	;volatile
 10065  1DD9  0008               	return
 10066  1DDA                     __end_of_CC2500_WriteCommand:	
 10067                           
 10068                           	psect	text52
 10069  19DF                     __ptext52:	
 10070 ;; *************** function _setRF_TimeoutCleared *****************
 10071 ;; Defined at:
 10072 ;;		line 149 in file "../src/RF_Control_B1.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;		None
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;		None
 10077 ;; Return value:  Size  Location     Type
 10078 ;;		None               void
 10079 ;; Registers used:
 10080 ;;		status,2
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;Total ram usage:        0 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    5
 10093 ;; This function calls:
 10094 ;;		Nothing
 10095 ;; This function is called by:
 10096 ;;		_CC2500_TxData
 10097 ;;		_CC2500_RxData
 10098 ;;		_CC2500_PowerRST
 10099 ;;		_CC2500_WriteREG
 10100 ;;		_CC2500_WriteCommand
 10101 ;;		_CC2500_ReadStatus
 10102 ;;		_CC2500_ReadREG
 10103 ;; This function uses a non-reentrant model
 10104 ;;
 10105                           
 10106                           
 10107                           ;psect for function _setRF_TimeoutCleared
 10108  19DF                     _setRF_TimeoutCleared:	
 10109                           
 10110                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10111                           
 10112                           ;incstack = 0
 10113                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10114  19DF  0021               	movlb	1	; select bank1
 10115  19E0  01AD               	clrf	(_RF1^(0+128)+13)
 10116  19E1  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10117  19E2  0008               	return
 10118  19E3                     __end_of_setRF_TimeoutCleared:	
 10119                           
 10120                           	psect	text53
 10121  1CAA                     __ptext53:	
 10122 ;; *************** function _RF_Timeout_Counter *****************
 10123 ;; Defined at:
 10124 ;;		line 141 in file "../src/RF_Control_B1.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;		None
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;		None
 10129 ;; Return value:  Size  Location     Type
 10130 ;;		None               void
 10131 ;; Registers used:
 10132 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;Total ram usage:        0 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    5
 10145 ;; This function calls:
 10146 ;;		Nothing
 10147 ;; This function is called by:
 10148 ;;		_CC2500_TxData
 10149 ;;		_CC2500_RxData
 10150 ;;		_CC2500_PowerRST
 10151 ;;		_CC2500_WriteREG
 10152 ;;		_CC2500_WriteCommand
 10153 ;;		_CC2500_ReadStatus
 10154 ;;		_CC2500_ReadREG
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           
 10159                           ;psect for function _RF_Timeout_Counter
 10160  1CAA                     _RF_Timeout_Counter:	
 10161                           
 10162                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10163                           
 10164                           ;incstack = 0
 10165                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10166  1CAA  3001               	movlw	1
 10167  1CAB  0021               	movlb	1	; select bank1
 10168  1CAC  07AD               	addwf	(_RF1^(0+128)+13),f
 10169  1CAD  3000               	movlw	0
 10170  1CAE  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10171                           
 10172                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10173  1CAF  300D               	movlw	13
 10174  1CB0  3EA0               	addlw	_RF1& (0+255)
 10175  1CB1  0086               	movwf	6
 10176  1CB2  0187               	clrf	7
 10177  1CB3  3F40               	moviw [0]fsr1
 10178  1CB4  3AA8               	xorlw	168
 10179  1CB5  1D03               	skipz
 10180  1CB6  2CB9               	goto	u8895
 10181  1CB7  3F41               	moviw [1]fsr1
 10182  1CB8  3A61               	xorlw	97
 10183  1CB9                     u8895:	
 10184  1CB9  1D03               	skipz
 10185  1CBA  0008               	return
 10186                           
 10187                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10188  1CBB  01AD               	clrf	(_RF1^(0+128)+13)
 10189  1CBC  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10190                           
 10191                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10192  1CBD  1721               	bsf	(_RF1^(0+128)+1),6
 10193  1CBE  0008               	return
 10194  1CBF                     __end_of_RF_Timeout_Counter:	
 10195                           
 10196                           	psect	text54
 10197  1D73                     __ptext54:	
 10198 ;; *************** function _CC2500_WriteByte *****************
 10199 ;; Defined at:
 10200 ;;		line 226 in file "../src/CC2500_B1.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;		None               void
 10207 ;; Registers used:
 10208 ;;		wreg, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;Total ram usage:        2 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    5
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_CC2500_TxData
 10225 ;;		_CC2500_RxData
 10226 ;;		_CC2500_PowerRST
 10227 ;;		_CC2500_WriteREG
 10228 ;;		_CC2500_WriteCommand
 10229 ;;		_CC2500_ReadStatus
 10230 ;;		_CC2500_ReadREG
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _CC2500_WriteByte
 10236  1D73                     _CC2500_WriteByte:	
 10237                           
 10238                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10239                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10243  1D73  0020               	movlb	0	; select bank0
 10244  1D74  01A1               	clrf	CC2500_WriteByte@loop_a
 10245  1D75                     L6:	
 10246  1D75  3008               	movlw	8
 10247  1D76  0221               	subwf	CC2500_WriteByte@loop_a,w
 10248  1D77  1803               	btfsc	3,0
 10249  1D78  0008               	return
 10250                           
 10251                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10252  1D79  0021               	movlb	1	; select bank1
 10253  1D7A  1FD0               	btfss	_SPI0Buffer^(0+128),7
 10254  1D7B  2D7F               	goto	l303
 10255                           
 10256                           ;CC2500_B1.c: 230: RC4 = 1;
 10257  1D7C  0020               	movlb	0	; select bank0
 10258  1D7D  160E               	bsf	14,4	;volatile
 10259  1D7E  2D81               	goto	l304
 10260  1D7F                     l303:	
 10261                           
 10262                           ;CC2500_B1.c: 231: else
 10263                           ;CC2500_B1.c: 232: RC4 = 0;
 10264  1D7F  0020               	movlb	0	; select bank0
 10265  1D80  120E               	bcf	14,4	;volatile
 10266  1D81                     l304:	
 10267                           
 10268                           ;CC2500_B1.c: 233: RC3 = 1;
 10269  1D81  158E               	bsf	14,3	;volatile
 10270                           
 10271                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10272  1D82  1003               	clrc
 10273  1D83  0021               	movlb	1	; select bank1
 10274  1D84  0DD0               	rlf	_SPI0Buffer^(0+128),f
 10275                           
 10276                           ;CC2500_B1.c: 235: RC3 = 0;
 10277  1D85  0020               	movlb	0	; select bank0
 10278  1D86  118E               	bcf	14,3	;volatile
 10279  1D87  3001               	movlw	1
 10280  1D88  00A0               	movwf	??_CC2500_WriteByte
 10281  1D89  0820               	movf	??_CC2500_WriteByte,w
 10282  1D8A  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10283  1D8B  2D75               	goto	L6
 10284  1D8C                     __end_of_CC2500_WriteByte:	
 10285                           
 10286                           	psect	text55
 10287  19BF                     __ptext55:	
 10288 ;; *************** function _RF_Initialization *****************
 10289 ;; Defined at:
 10290 ;;		line 9 in file "../src/RF_Control_B1.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;		None               void
 10297 ;; Registers used:
 10298 ;;		wreg, status,2, status,0, pclath, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        0 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    6
 10311 ;; This function calls:
 10312 ;;		_setRF_Initialization
 10313 ;; This function is called by:
 10314 ;;		_main
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function _RF_Initialization
 10320  19BF                     _RF_Initialization:	
 10321                           
 10322                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10326  19BF  319A  2283         	fcall	_setRF_Initialization
 10327  19C1  0008               	return
 10328  19C2                     __end_of_RF_Initialization:	
 10329                           
 10330                           	psect	text56
 10331  1A83                     __ptext56:	
 10332 ;; *************** function _setRF_Initialization *****************
 10333 ;; Defined at:
 10334 ;;		line 17 in file "../src/RF_Control_B1.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;		None
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;		None
 10339 ;; Return value:  Size  Location     Type
 10340 ;;		None               void
 10341 ;; Registers used:
 10342 ;;		wreg
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;Total ram usage:        1 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    5
 10355 ;; This function calls:
 10356 ;;		Nothing
 10357 ;; This function is called by:
 10358 ;;		_RF_Initialization
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _setRF_Initialization
 10364  1A83                     _setRF_Initialization:	
 10365                           
 10366                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _setRF_Initialization: [wreg]
 10370  1A83  3015               	movlw	21
 10371  1A84  0020               	movlb	0	; select bank0
 10372  1A85  00A0               	movwf	??_setRF_Initialization
 10373  1A86  0820               	movf	??_setRF_Initialization,w
 10374  1A87  0021               	movlb	1	; select bank1
 10375  1A88  00D3               	movwf	_Tx_Length^(0+128)
 10376                           
 10377                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10378  1A89  30C8               	movlw	200
 10379  1A8A  00A8               	movwf	(_RF1^(0+128)+8)
 10380  1A8B  3000               	movlw	0
 10381  1A8C  00A9               	movwf	(_RF1^(0+128)+9)
 10382  1A8D  0008               	return
 10383  1A8E                     __end_of_setRF_Initialization:	
 10384                           
 10385                           	psect	text57
 10386  1C13                     __ptext57:	
 10387 ;; *************** function _Mcu_Initialization *****************
 10388 ;; Defined at:
 10389 ;;		line 30 in file "../src/MCU_B1.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;		None
 10394 ;; Return value:  Size  Location     Type
 10395 ;;		None               void
 10396 ;; Registers used:
 10397 ;;		wreg, status,2, status,0, pclath, cstack
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;Total ram usage:        0 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    6
 10410 ;; This function calls:
 10411 ;;		_ADC_Set
 10412 ;;		_Fosc_Set
 10413 ;;		_IOC_Set
 10414 ;;		_IO_Set
 10415 ;;		_TMR1_Set
 10416 ;;		_WDT_Set
 10417 ;; This function is called by:
 10418 ;;		_main
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           
 10423                           ;psect for function _Mcu_Initialization
 10424  1C13                     _Mcu_Initialization:	
 10425                           
 10426                           ;MCU_B1.c: 32: Fosc_Set();
 10427                           
 10428                           ;incstack = 0
 10429                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10430  1C13  3199  21DB  319C   	fcall	_Fosc_Set
 10431                           
 10432                           ;MCU_B1.c: 34: IO_Set();
 10433  1C16  319D  25A6  319C   	fcall	_IO_Set
 10434                           
 10435                           ;MCU_B1.c: 36: ;;
 10436                           ;MCU_B1.c: 38: TMR1_Set();
 10437  1C19  319A  22EE  319C   	fcall	_TMR1_Set
 10438                           
 10439                           ;MCU_B1.c: 40: ADC_Set();
 10440  1C1C  319A  2217  319C   	fcall	_ADC_Set
 10441                           
 10442                           ;MCU_B1.c: 42: ;;
 10443                           ;MCU_B1.c: 44: ;;
 10444                           ;MCU_B1.c: 46: IOC_Set();
 10445  1C1F  319A  2278  319C   	fcall	_IOC_Set
 10446                           
 10447                           ;MCU_B1.c: 48: ;;
 10448                           ;MCU_B1.c: 50: ;;
 10449                           ;MCU_B1.c: 52: WDT_Set();
 10450  1C22  319A  22FA         	fcall	_WDT_Set
 10451  1C24  0008               	return
 10452  1C25                     __end_of_Mcu_Initialization:	
 10453                           
 10454                           	psect	text58
 10455  1AFA                     __ptext58:	
 10456 ;; *************** function _WDT_Set *****************
 10457 ;; Defined at:
 10458 ;;		line 1102 in file "../src/MCU_B1.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;		None
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;		None
 10463 ;; Return value:  Size  Location     Type
 10464 ;;		None               void
 10465 ;; Registers used:
 10466 ;;		wreg
 10467 ;; Tracked objects:
 10468 ;;		On entry : 0/0
 10469 ;;		On exit  : 0/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;Total ram usage:        1 bytes
 10477 ;; Hardware stack levels used:    1
 10478 ;; Hardware stack levels required when called:    5
 10479 ;; This function calls:
 10480 ;;		Nothing
 10481 ;; This function is called by:
 10482 ;;		_Mcu_Initialization
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           
 10487                           ;psect for function _WDT_Set
 10488  1AFA                     _WDT_Set:	
 10489                           
 10490                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10491                           
 10492                           ;incstack = 0
 10493                           ; Regs used in _WDT_Set: [wreg]
 10494  1AFA  3017               	movlw	23
 10495  1AFB  0021               	movlb	1	; select bank1
 10496  1AFC  0097               	movwf	23	;volatile
 10497                           
 10498                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10499  1AFD  0022               	movlb	2	; select bank2
 10500  1AFE  1436               	bsf	_WDT^(0+256),0
 10501                           
 10502                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10503  1AFF  300A               	movlw	10
 10504  1B00  0020               	movlb	0	; select bank0
 10505  1B01  00A0               	movwf	??_WDT_Set
 10506  1B02  0820               	movf	??_WDT_Set,w
 10507  1B03  0022               	movlb	2	; select bank2
 10508  1B04  00B7               	movwf	(_WDT^(0+256)+1)
 10509  1B05  0008               	return
 10510  1B06                     __end_of_WDT_Set:	
 10511                           
 10512                           	psect	text59
 10513  1AEE                     __ptext59:	
 10514 ;; *************** function _TMR1_Set *****************
 10515 ;; Defined at:
 10516 ;;		line 226 in file "../src/MCU_B1.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;		None
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;		None
 10521 ;; Return value:  Size  Location     Type
 10522 ;;		None               void
 10523 ;; Registers used:
 10524 ;;		wreg
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;Total ram usage:        0 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    5
 10537 ;; This function calls:
 10538 ;;		Nothing
 10539 ;; This function is called by:
 10540 ;;		_Mcu_Initialization
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           
 10545                           ;psect for function _TMR1_Set
 10546  1AEE                     _TMR1_Set:	
 10547                           
 10548                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10549                           
 10550                           ;incstack = 0
 10551                           ; Regs used in _TMR1_Set: [wreg]
 10552  1AEE  3041               	movlw	65
 10553  1AEF  0020               	movlb	0	; select bank0
 10554  1AF0  0098               	movwf	24	;volatile
 10555                           
 10556                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10557  1AF1  30FA               	movlw	250
 10558  1AF2  0097               	movwf	23	;volatile
 10559                           
 10560                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10561  1AF3  3038               	movlw	56
 10562  1AF4  0096               	movwf	22	;volatile
 10563                           
 10564                           ;MCU_B1.c: 230: TMR1IE = 1;
 10565  1AF5  0021               	movlb	1	; select bank1
 10566  1AF6  1411               	bsf	17,0	;volatile
 10567                           
 10568                           ;MCU_B1.c: 231: PEIE = 1;
 10569  1AF7  170B               	bsf	11,6	;volatile
 10570                           
 10571                           ;MCU_B1.c: 232: GIE = 1;
 10572  1AF8  178B               	bsf	11,7	;volatile
 10573  1AF9  0008               	return
 10574  1AFA                     __end_of_TMR1_Set:	
 10575                           
 10576                           	psect	text60
 10577  1DA6                     __ptext60:	
 10578 ;; *************** function _IO_Set *****************
 10579 ;; Defined at:
 10580 ;;		line 60 in file "../src/MCU_B1.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;		None
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;		None               void
 10587 ;; Registers used:
 10588 ;;		wreg, status,2
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;Total ram usage:        0 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    5
 10601 ;; This function calls:
 10602 ;;		Nothing
 10603 ;; This function is called by:
 10604 ;;		_Mcu_Initialization
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           
 10609                           ;psect for function _IO_Set
 10610  1DA6                     _IO_Set:	
 10611                           
 10612                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10613                           
 10614                           ;incstack = 0
 10615                           ; Regs used in _IO_Set: [wreg+status,2]
 10616  1DA6  30F7               	movlw	247
 10617  1DA7  0021               	movlb	1	; select bank1
 10618  1DA8  008C               	movwf	12	;volatile
 10619                           
 10620                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10621  1DA9  3004               	movlw	4
 10622  1DAA  008D               	movwf	13	;volatile
 10623                           
 10624                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10625  1DAB  3026               	movlw	38
 10626  1DAC  008E               	movwf	14	;volatile
 10627                           
 10628                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10629  1DAD  0022               	movlb	2	; select bank2
 10630  1DAE  018C               	clrf	12	;volatile
 10631                           
 10632                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10633  1DAF  018D               	clrf	13	;volatile
 10634                           
 10635                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10636  1DB0  018E               	clrf	14	;volatile
 10637                           
 10638                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10639  1DB1  300E               	movlw	14
 10640  1DB2  0023               	movlb	3	; select bank3
 10641  1DB3  008C               	movwf	12	;volatile
 10642                           
 10643                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10644  1DB4  018D               	clrf	13	;volatile
 10645                           
 10646                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10647  1DB5  018E               	clrf	14	;volatile
 10648                           
 10649                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10650  1DB6  30F7               	movlw	247
 10651  1DB7  0020               	movlb	0	; select bank0
 10652  1DB8  008C               	movwf	12	;volatile
 10653                           
 10654                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10655  1DB9  3004               	movlw	4
 10656  1DBA  008D               	movwf	13	;volatile
 10657                           
 10658                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10659  1DBB  3026               	movlw	38
 10660  1DBC  008E               	movwf	14	;volatile
 10661                           
 10662                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10663  1DBD  0024               	movlb	4	; select bank4
 10664  1DBE  018D               	clrf	13	;volatile
 10665  1DBF  0008               	return
 10666  1DC0                     __end_of_IO_Set:	
 10667                           
 10668                           	psect	text61
 10669  1A78                     __ptext61:	
 10670 ;; *************** function _IOC_Set *****************
 10671 ;; Defined at:
 10672 ;;		line 380 in file "../src/MCU_B1.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;		None
 10675 ;; Auto vars:     Size  Location     Type
 10676 ;;		None
 10677 ;; Return value:  Size  Location     Type
 10678 ;;		None               void
 10679 ;; Registers used:
 10680 ;;		wreg, status,2
 10681 ;; Tracked objects:
 10682 ;;		On entry : 0/0
 10683 ;;		On exit  : 0/0
 10684 ;;		Unchanged: 0/0
 10685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;Total ram usage:        0 bytes
 10691 ;; Hardware stack levels used:    1
 10692 ;; Hardware stack levels required when called:    5
 10693 ;; This function calls:
 10694 ;;		Nothing
 10695 ;; This function is called by:
 10696 ;;		_Mcu_Initialization
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           
 10701                           ;psect for function _IOC_Set
 10702  1A78                     _IOC_Set:	
 10703                           
 10704                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10705                           
 10706                           ;incstack = 0
 10707                           ; Regs used in _IOC_Set: [wreg+status,2]
 10708  1A78  3004               	movlw	4
 10709  1A79  0027               	movlb	7	; select bank7
 10710  1A7A  0094               	movwf	20	;volatile
 10711                           
 10712                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10713  1A7B  3004               	movlw	4
 10714  1A7C  0095               	movwf	21	;volatile
 10715                           
 10716                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10717  1A7D  0196               	clrf	22	;volatile
 10718                           
 10719                           ;MCU_B1.c: 387: IOCIE = 1;
 10720  1A7E  158B               	bsf	11,3	;volatile
 10721                           
 10722                           ;MCU_B1.c: 388: IOCIF = 0;
 10723  1A7F  100B               	bcf	11,0	;volatile
 10724                           
 10725                           ;MCU_B1.c: 389: PEIE = 1;
 10726  1A80  170B               	bsf	11,6	;volatile
 10727                           
 10728                           ;MCU_B1.c: 390: GIE = 1;
 10729  1A81  178B               	bsf	11,7	;volatile
 10730  1A82  0008               	return
 10731  1A83                     __end_of_IOC_Set:	
 10732                           
 10733                           	psect	text62
 10734  19DB                     __ptext62:	
 10735 ;; *************** function _Fosc_Set *****************
 10736 ;; Defined at:
 10737 ;;		line 56 in file "../src/MCU_B1.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;		None               void
 10744 ;; Registers used:
 10745 ;;		wreg
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;Total ram usage:        0 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; Hardware stack levels required when called:    5
 10758 ;; This function calls:
 10759 ;;		Nothing
 10760 ;; This function is called by:
 10761 ;;		_Mcu_Initialization
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _Fosc_Set
 10767  19DB                     _Fosc_Set:	
 10768                           
 10769                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10770                           
 10771                           ;incstack = 0
 10772                           ; Regs used in _Fosc_Set: [wreg]
 10773  19DB  3078               	movlw	120
 10774  19DC  0021               	movlb	1	; select bank1
 10775  19DD  0099               	movwf	25	;volatile
 10776  19DE  0008               	return
 10777  19DF                     __end_of_Fosc_Set:	
 10778                           
 10779                           	psect	text63
 10780  1A17                     __ptext63:	
 10781 ;; *************** function _ADC_Set *****************
 10782 ;; Defined at:
 10783 ;;		line 427 in file "../src/MCU_B1.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;		None               void
 10790 ;; Registers used:
 10791 ;;		wreg
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;Total ram usage:        0 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    5
 10804 ;; This function calls:
 10805 ;;		Nothing
 10806 ;; This function is called by:
 10807 ;;		_Mcu_Initialization
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           
 10812                           ;psect for function _ADC_Set
 10813  1A17                     _ADC_Set:	
 10814                           
 10815                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10816                           
 10817                           ;incstack = 0
 10818                           ; Regs used in _ADC_Set: [wreg]
 10819  1A17  30F3               	movlw	243
 10820  1A18  0021               	movlb	1	; select bank1
 10821  1A19  009E               	movwf	30	;volatile
 10822                           
 10823                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10824  1A1A  30C1               	movlw	193
 10825  1A1B  0022               	movlb	2	; select bank2
 10826  1A1C  0097               	movwf	23	;volatile
 10827  1A1D  0008               	return
 10828  1A1E                     __end_of_ADC_Set:	
 10829                           
 10830                           	psect	text64
 10831  0053                     __ptext64:	
 10832 ;; *************** function _Load_Main *****************
 10833 ;; Defined at:
 10834 ;;		line 40 in file "../src/OverLoad_B1.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;  i               2   16[BANK0 ] int 
 10839 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10840 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10841 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10842 ;;  error           1   12[BANK0 ] unsigned char 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;		None               void
 10845 ;; Registers used:
 10846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;Total ram usage:       10 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    6
 10859 ;; This function calls:
 10860 ;;		___lwdiv
 10861 ;;		___wmul
 10862 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10863 ;;		_getDimmer_LoadGO
 10864 ;;		_getDimmer_Load_Status
 10865 ;;		_getMain_All_Error_Status
 10866 ;;		_getMain_All_LightsStatus
 10867 ;;		_getMain_Lights_Count
 10868 ;;		_setLoad_AH_AL_Restore
 10869 ;; This function is called by:
 10870 ;;		_main
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           
 10875                           ;psect for function _Load_Main
 10876  0053                     _Load_Main:	
 10877                           
 10878                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10882  0053  3000               	movlw	0
 10883  0054  3190  206A  3180   	fcall	_getMain_All_Error_Status
 10884  0057  0020               	movlb	0	; select bank0
 10885  0058  00A8               	movwf	??_Load_Main
 10886  0059  0828               	movf	??_Load_Main,w
 10887  005A  00AC               	movwf	Load_Main@error
 10888                           
 10889                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10890  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10891  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10892  005D  01AF               	clrf	Load_Main@LightsCount
 10893                           
 10894                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10895  005E  0022               	movlb	2	; select bank2
 10896  005F  1C39               	btfss	_Load^(0+256),0
 10897  0060  29FF               	goto	l1640
 10898                           
 10899                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10900  0061  319A  2258  3180   	fcall	_getMain_All_LightsStatus
 10901  0064  3800               	iorlw	0
 10902  0065  1D03               	skipz
 10903  0066  2869               	goto	l8221
 10904                           
 10905                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10906  0067  0022               	movlb	2	; select bank2
 10907  0068  288A               	goto	l8239
 10908  0069                     l8221:	
 10909                           ;OverLoad_B1.c: 47: } else {
 10910                           
 10911                           
 10912                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10913  0069  0020               	movlb	0	; select bank0
 10914  006A  08AC               	movf	Load_Main@error,f
 10915  006B  1D03               	skipz
 10916  006C  2887               	goto	l1643
 10917  006D  319C  245D  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10918  0070  3800               	iorlw	0
 10919  0071  1D03               	skipz
 10920  0072  2887               	goto	l1643
 10921                           
 10922                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10923  0073  0022               	movlb	2	; select bank2
 10924  0074  14B9               	bsf	_Load^(0+256),1
 10925                           
 10926                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10927  0075  319A  222D  3180   	fcall	_getDimmer_LoadGO
 10928  0078  3A01               	xorlw	1
 10929  0079  1D03               	skipz
 10930  007A  2882               	goto	l1644
 10931                           
 10932                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10933  007B  0022               	movlb	2	; select bank2
 10934  007C  1DB9               	btfss	_Load^(0+256),3
 10935  007D  1BB9               	btfsc	_Load^(0+256),7
 10936  007E  288B               	goto	l1642
 10937                           
 10938                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10939  007F  15B9               	bsf	_Load^(0+256),3
 10940                           
 10941                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10942  0080  01DE               	clrf	(_Load^(0+256)+37)
 10943                           
 10944                           ;OverLoad_B1.c: 57: }
 10945                           ;OverLoad_B1.c: 58: } else {
 10946  0081  288B               	goto	l1642
 10947  0082                     l1644:	
 10948                           
 10949                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10950  0082  0022               	movlb	2	; select bank2
 10951  0083  1FB9               	btfss	_Load^(0+256),7
 10952  0084  288B               	goto	l1642
 10953                           
 10954                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10955  0085  13B9               	bcf	_Load^(0+256),7
 10956                           
 10957                           ;OverLoad_B1.c: 61: }
 10958                           ;OverLoad_B1.c: 62: }
 10959                           ;OverLoad_B1.c: 63: } else {
 10960  0086  288B               	goto	l1642
 10961  0087                     l1643:	
 10962                           
 10963                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10964  0087  0022               	movlb	2	; select bank2
 10965  0088  1CB9               	btfss	_Load^(0+256),1
 10966  0089  288B               	goto	l1642
 10967  008A                     l8239:	
 10968                           
 10969                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10970  008A  10B9               	bcf	_Load^(0+256),1
 10971  008B                     l1642:	
 10972                           
 10973                           ;OverLoad_B1.c: 66: }
 10974                           ;OverLoad_B1.c: 67: }
 10975                           ;OverLoad_B1.c: 89: }
 10976                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10977  008B  1CB9               	btfss	_Load^(0+256),1
 10978  008C  29DB               	goto	l1650
 10979                           
 10980                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10981  008D  1539               	bsf	_Load^(0+256),2
 10982                           
 10983                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10984  008E  1E39               	btfss	_Load^(0+256),4
 10985  008F  29D9               	goto	l1651
 10986                           
 10987                           ;OverLoad_B1.c: 96: Load.Time++;
 10988  0090  3001               	movlw	1
 10989  0091  07BA               	addwf	(_Load^(0+256)+1),f
 10990  0092  3000               	movlw	0
 10991  0093  3DBB               	addwfc	((_Load+1)^(0+256)+1),f
 10992                           
 10993                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10994  0094  3000               	movlw	0
 10995  0095  023B               	subwf	((_Load+1)^(0+256)+1),w
 10996  0096  3002               	movlw	2
 10997  0097  1903               	skipnz
 10998  0098  023A               	subwf	(_Load^(0+256)+1),w
 10999  0099  1C03               	skipc
 11000  009A  0008               	return
 11001                           
 11002                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11003  009B  01BA               	clrf	(_Load^(0+256)+1)
 11004  009C  01BB               	clrf	((_Load+1)^(0+256)+1)
 11005                           
 11006                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11007  009D  1239               	bcf	_Load^(0+256),4
 11008                           
 11009                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11010  009E  3001               	movlw	1
 11011  009F  0020               	movlb	0	; select bank0
 11012  00A0  00B0               	movwf	Load_Main@i
 11013  00A1  3000               	movlw	0
 11014  00A2  00B1               	movwf	Load_Main@i+1
 11015  00A3  0831               	movf	Load_Main@i+1,w
 11016  00A4  3A80               	xorlw	128
 11017  00A5  00A8               	movwf	??_Load_Main
 11018  00A6  3080               	movlw	128
 11019  00A7  0228               	subwf	??_Load_Main,w
 11020  00A8  1D03               	skipz
 11021  00A9  28AC               	goto	u8455
 11022  00AA  3004               	movlw	4
 11023  00AB  0230               	subwf	Load_Main@i,w
 11024  00AC                     u8455:	
 11025  00AC  1803               	btfsc	3,0
 11026  00AD  28E0               	goto	l8261
 11027  00AE                     l8255:	
 11028                           
 11029                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11030  00AE  0020               	movlb	0	; select bank0
 11031  00AF  3530               	lslf	Load_Main@i,w
 11032  00B0  3E44               	addlw	(_Load+11)& (0+255)
 11033  00B1  0086               	movwf	6
 11034  00B2  3001               	movlw	1	; select bank2/3
 11035  00B3  0087               	movwf	7
 11036  00B4  3F40               	moviw [0]fsr1
 11037  00B5  00A8               	movwf	??_Load_Main
 11038  00B6  3F41               	moviw [1]fsr1
 11039  00B7  00A9               	movwf	??_Load_Main+1
 11040  00B8  0828               	movf	??_Load_Main,w
 11041  00B9  0022               	movlb	2	; select bank2
 11042  00BA  07BE               	addwf	(_Load^(0+256)+5),f
 11043  00BB  0020               	movlb	0	; select bank0
 11044  00BC  0829               	movf	??_Load_Main+1,w
 11045  00BD  0022               	movlb	2	; select bank2
 11046  00BE  3DBF               	addwfc	((_Load+1)^(0+256)+5),f
 11047                           
 11048                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11049  00BF  0020               	movlb	0	; select bank0
 11050  00C0  3530               	lslf	Load_Main@i,w
 11051  00C1  3E4E               	addlw	(_Load+21)& (0+255)
 11052  00C2  0086               	movwf	6
 11053  00C3  3001               	movlw	1	; select bank2/3
 11054  00C4  0087               	movwf	7
 11055  00C5  3F40               	moviw [0]fsr1
 11056  00C6  00A8               	movwf	??_Load_Main
 11057  00C7  3F41               	moviw [1]fsr1
 11058  00C8  00A9               	movwf	??_Load_Main+1
 11059  00C9  0828               	movf	??_Load_Main,w
 11060  00CA  0022               	movlb	2	; select bank2
 11061  00CB  07C0               	addwf	(_Load^(0+256)+7),f
 11062  00CC  0020               	movlb	0	; select bank0
 11063  00CD  0829               	movf	??_Load_Main+1,w
 11064  00CE  0022               	movlb	2	; select bank2
 11065  00CF  3DC1               	addwfc	((_Load+1)^(0+256)+7),f
 11066  00D0  3001               	movlw	1
 11067  00D1  0020               	movlb	0	; select bank0
 11068  00D2  07B0               	addwf	Load_Main@i,f
 11069  00D3  3000               	movlw	0
 11070  00D4  3DB1               	addwfc	Load_Main@i+1,f
 11071  00D5  0831               	movf	Load_Main@i+1,w
 11072  00D6  3A80               	xorlw	128
 11073  00D7  00A8               	movwf	??_Load_Main
 11074  00D8  3080               	movlw	128
 11075  00D9  0228               	subwf	??_Load_Main,w
 11076  00DA  1D03               	skipz
 11077  00DB  28DE               	goto	u8465
 11078  00DC  3004               	movlw	4
 11079  00DD  0230               	subwf	Load_Main@i,w
 11080  00DE                     u8465:	
 11081  00DE  1C03               	skipc
 11082  00DF  28AE               	goto	l8255
 11083  00E0                     l8261:	
 11084                           
 11085                           ;OverLoad_B1.c: 104: }
 11086                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11087  00E0  3003               	movlw	3
 11088  00E1  0020               	movlb	0	; select bank0
 11089  00E2  00A0               	movwf	___lwdiv@divisor
 11090  00E3  3000               	movlw	0
 11091  00E4  00A1               	movwf	___lwdiv@divisor+1
 11092  00E5  0022               	movlb	2	; select bank2
 11093  00E6  083F               	movf	((_Load+1)^(0+256)+5),w
 11094  00E7  0020               	movlb	0	; select bank0
 11095  00E8  01A3               	clrf	___lwdiv@dividend+1
 11096  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11097  00EA  0022               	movlb	2	; select bank2
 11098  00EB  083E               	movf	(_Load^(0+256)+5),w
 11099  00EC  0020               	movlb	0	; select bank0
 11100  00ED  01A2               	clrf	___lwdiv@dividend
 11101  00EE  07A2               	addwf	___lwdiv@dividend,f
 11102  00EF  3191  2107  3180   	fcall	___lwdiv
 11103  00F2  0020               	movlb	0	; select bank0
 11104  00F3  0821               	movf	?___lwdiv+1,w
 11105  00F4  0022               	movlb	2	; select bank2
 11106  00F5  01BF               	clrf	((_Load+1)^(0+256)+5)
 11107  00F6  07BF               	addwf	((_Load+1)^(0+256)+5),f
 11108  00F7  0020               	movlb	0	; select bank0
 11109  00F8  0820               	movf	?___lwdiv,w
 11110  00F9  0022               	movlb	2	; select bank2
 11111  00FA  01BE               	clrf	(_Load^(0+256)+5)
 11112  00FB  07BE               	addwf	(_Load^(0+256)+5),f
 11113                           
 11114                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11115  00FC  3003               	movlw	3
 11116  00FD  0020               	movlb	0	; select bank0
 11117  00FE  00A0               	movwf	___lwdiv@divisor
 11118  00FF  3000               	movlw	0
 11119  0100  00A1               	movwf	___lwdiv@divisor+1
 11120  0101  0022               	movlb	2	; select bank2
 11121  0102  0841               	movf	((_Load+1)^(0+256)+7),w
 11122  0103  0020               	movlb	0	; select bank0
 11123  0104  01A3               	clrf	___lwdiv@dividend+1
 11124  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11125  0106  0022               	movlb	2	; select bank2
 11126  0107  0840               	movf	(_Load^(0+256)+7),w
 11127  0108  0020               	movlb	0	; select bank0
 11128  0109  01A2               	clrf	___lwdiv@dividend
 11129  010A  07A2               	addwf	___lwdiv@dividend,f
 11130  010B  3191  2107  3180   	fcall	___lwdiv
 11131  010E  0020               	movlb	0	; select bank0
 11132  010F  0821               	movf	?___lwdiv+1,w
 11133  0110  0022               	movlb	2	; select bank2
 11134  0111  01C1               	clrf	((_Load+1)^(0+256)+7)
 11135  0112  07C1               	addwf	((_Load+1)^(0+256)+7),f
 11136  0113  0020               	movlb	0	; select bank0
 11137  0114  0820               	movf	?___lwdiv,w
 11138  0115  0022               	movlb	2	; select bank2
 11139  0116  01C0               	clrf	(_Load^(0+256)+7)
 11140  0117  07C0               	addwf	(_Load^(0+256)+7),f
 11141                           
 11142                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11143  0118  319E  2610  3180   	fcall	_setLoad_AH_AL_Restore
 11144                           
 11145                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11146  011B  0022               	movlb	2	; select bank2
 11147  011C  0841               	movf	((_Load+1)^(0+256)+7),w
 11148  011D  023F               	subwf	((_Load+1)^(0+256)+5),w
 11149  011E  1D03               	skipz
 11150  011F  2922               	goto	u8475
 11151  0120  0840               	movf	(_Load^(0+256)+7),w
 11152  0121  023E               	subwf	(_Load^(0+256)+5),w
 11153  0122                     u8475:	
 11154  0122  1C03               	skipc
 11155  0123  0008               	return
 11156                           
 11157                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11158  0124  3005               	movlw	5
 11159  0125  3E39               	addlw	_Load& (0+255)
 11160  0126  0086               	movwf	6
 11161  0127  3001               	movlw	1	; select bank2/3
 11162  0128  0087               	movwf	7
 11163  0129  0940               	comf	(_Load^(0+256)+7),w
 11164  012A  0020               	movlb	0	; select bank0
 11165  012B  00A8               	movwf	??_Load_Main
 11166  012C  0022               	movlb	2	; select bank2
 11167  012D  0941               	comf	((_Load+1)^(0+256)+7),w
 11168  012E  0020               	movlb	0	; select bank0
 11169  012F  00A9               	movwf	??_Load_Main+1
 11170  0130  0AA8               	incf	??_Load_Main,f
 11171  0131  1903               	skipnz
 11172  0132  0AA9               	incf	??_Load_Main+1,f
 11173  0133  3F40               	moviw [0]fsr1
 11174  0134  0728               	addwf	??_Load_Main,w
 11175  0135  0022               	movlb	2	; select bank2
 11176  0136  00D8               	movwf	(_Load^(0+256)+31)
 11177  0137  3F41               	moviw [1]fsr1
 11178  0138  0020               	movlb	0	; select bank0
 11179  0139  3D29               	addwfc	??_Load_Main+1,w
 11180  013A  0022               	movlb	2	; select bank2
 11181  013B  00D9               	movwf	(_Load^(0+256)+32)
 11182                           
 11183                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11184  013C  01BE               	clrf	(_Load^(0+256)+5)
 11185  013D  01BF               	clrf	((_Load+1)^(0+256)+5)
 11186                           
 11187                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11188  013E  01C0               	clrf	(_Load^(0+256)+7)
 11189  013F  01C1               	clrf	((_Load+1)^(0+256)+7)
 11190                           
 11191                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11192  0140  1DB9               	btfss	_Load^(0+256),3
 11193  0141  299B               	goto	l8301
 11194                           
 11195                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11196  0142  3002               	movlw	2
 11197  0143  025E               	subwf	(_Load^(0+256)+37),w
 11198  0144  1803               	skipnc
 11199  0145  299B               	goto	l8301
 11200                           
 11201                           ;OverLoad_B1.c: 117: Load.Count++;
 11202  0146  3001               	movlw	1
 11203  0147  0020               	movlb	0	; select bank0
 11204  0148  00A8               	movwf	??_Load_Main
 11205  0149  0828               	movf	??_Load_Main,w
 11206  014A  0022               	movlb	2	; select bank2
 11207  014B  07DE               	addwf	(_Load^(0+256)+37),f
 11208                           
 11209                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11210  014C  319A  2235  3180   	fcall	_getDimmer_Load_Status
 11211  014F  0020               	movlb	0	; select bank0
 11212  0150  00A8               	movwf	??_Load_Main
 11213  0151  0828               	movf	??_Load_Main,w
 11214  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11215                           
 11216                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11217  0153  319A  226D  3180   	fcall	_getMain_Lights_Count
 11218  0156  0020               	movlb	0	; select bank0
 11219  0157  00A8               	movwf	??_Load_Main
 11220  0158  0828               	movf	??_Load_Main,w
 11221  0159  00AF               	movwf	Load_Main@LightsCount
 11222                           
 11223                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11224  015A  0022               	movlb	2	; select bank2
 11225  015B  085E               	movf	(_Load^(0+256)+37),w
 11226  015C  3A01               	xorlw	1
 11227  015D  1D03               	skipz
 11228  015E  2963               	goto	l8287
 11229                           
 11230                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11231  015F  3014               	movlw	20
 11232  0160  00DC               	movwf	(_Load^(0+256)+35)
 11233  0161  3005               	movlw	5
 11234  0162  2970               	goto	L7
 11235  0163                     l8287:	
 11236                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11237                           
 11238  0163  085E               	movf	(_Load^(0+256)+37),w
 11239  0164  3A02               	xorlw	2
 11240  0165  1D03               	skipz
 11241  0166  299B               	goto	l8301
 11242                           
 11243                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11244  0167  0020               	movlb	0	; select bank0
 11245  0168  082F               	movf	Load_Main@LightsCount,w
 11246  0169  3A01               	xorlw	1
 11247  016A  1D03               	skipz
 11248  016B  2972               	goto	l8293
 11249                           
 11250                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11251  016C  3075               	movlw	117
 11252  016D  0022               	movlb	2	; select bank2
 11253  016E  00DC               	movwf	(_Load^(0+256)+35)
 11254  016F  3000               	movlw	0
 11255  0170                     L7:	
 11256  0170  00DD               	movwf	(_Load^(0+256)+36)
 11257                           
 11258                           ;OverLoad_B1.c: 132: } else {
 11259  0171  299B               	goto	l8301
 11260  0172                     l8293:	
 11261                           
 11262                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11263  0172  0020               	movlb	0	; select bank0
 11264  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11265  0174  1D03               	skipz
 11266  0175  298F               	goto	l8297
 11267                           
 11268                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11269  0176  082F               	movf	Load_Main@LightsCount,w
 11270  0177  00A8               	movwf	??_Load_Main
 11271  0178  01A9               	clrf	??_Load_Main+1
 11272  0179  0828               	movf	??_Load_Main,w
 11273  017A  00A0               	movwf	___wmul@multiplier
 11274  017B  0829               	movf	??_Load_Main+1,w
 11275  017C  00A1               	movwf	___wmul@multiplier+1
 11276  017D  3075               	movlw	117
 11277  017E  00A2               	movwf	___wmul@multiplicand
 11278  017F  3000               	movlw	0
 11279  0180  00A3               	movwf	___wmul@multiplicand+1
 11280  0181  319E  2649  3180   	fcall	___wmul
 11281  0184  0020               	movlb	0	; select bank0
 11282  0185  0821               	movf	?___wmul+1,w
 11283  0186  0022               	movlb	2	; select bank2
 11284  0187  01DD               	clrf	((_Load+1)^(0+256)+35)
 11285  0188  07DD               	addwf	((_Load+1)^(0+256)+35),f
 11286  0189  0020               	movlb	0	; select bank0
 11287  018A  0820               	movf	?___wmul,w
 11288  018B  0022               	movlb	2	; select bank2
 11289  018C  01DC               	clrf	(_Load^(0+256)+35)
 11290  018D  07DC               	addwf	(_Load^(0+256)+35),f
 11291                           
 11292                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11293  018E  299B               	goto	l8301
 11294  018F                     l8297:	
 11295  018F  0020               	movlb	0	; select bank0
 11296  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11297  0191  3A01               	xorlw	1
 11298  0192  1D03               	skipz
 11299  0193  299B               	goto	l8301
 11300                           
 11301                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11302  0194  0022               	movlb	2	; select bank2
 11303  0195  0842               	movf	(_Load^(0+256)+9),w
 11304  0196  3E75               	addlw	117
 11305  0197  00DC               	movwf	(_Load^(0+256)+35)
 11306  0198  3000               	movlw	0
 11307  0199  3D43               	addwfc	((_Load+1)^(0+256)+9),w
 11308  019A  00DD               	movwf	((_Load+1)^(0+256)+35)
 11309  019B                     l8301:	
 11310                           
 11311                           ;OverLoad_B1.c: 137: }
 11312                           ;OverLoad_B1.c: 138: }
 11313                           ;OverLoad_B1.c: 139: }
 11314                           ;OverLoad_B1.c: 140: }
 11315                           ;OverLoad_B1.c: 141: }
 11316                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11317  019B  0022               	movlb	2	; select bank2
 11318  019C  085D               	movf	((_Load+1)^(0+256)+35),w
 11319  019D  0259               	subwf	((_Load+1)^(0+256)+31),w
 11320  019E  1D03               	skipz
 11321  019F  29A2               	goto	u8555
 11322  01A0  085C               	movf	(_Load^(0+256)+35),w
 11323  01A1  0258               	subwf	(_Load^(0+256)+31),w
 11324  01A2                     u8555:	
 11325  01A2  1C03               	skipc
 11326  01A3  29C1               	goto	l8317
 11327                           
 11328                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11329  01A4  0020               	movlb	0	; select bank0
 11330  01A5  082F               	movf	Load_Main@LightsCount,w
 11331  01A6  3A01               	xorlw	1
 11332  01A7  1903               	skipnz
 11333  01A8  29AB               	goto	l8307
 11334  01A9  3003               	movlw	3
 11335  01AA  29AC               	goto	L8
 11336  01AB                     l8307:	
 11337  01AB  3002               	movlw	2
 11338  01AC                     L8:	
 11339  01AC  00AA               	movwf	_Load_Main$4000
 11340  01AD  3000               	movlw	0
 11341  01AE  00AB               	movwf	_Load_Main$4000+1
 11342  01AF  082A               	movf	_Load_Main$4000,w
 11343  01B0  00A8               	movwf	??_Load_Main
 11344  01B1  0828               	movf	??_Load_Main,w
 11345  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11346                           
 11347                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11348  01B3  3001               	movlw	1
 11349  01B4  00A8               	movwf	??_Load_Main
 11350  01B5  0828               	movf	??_Load_Main,w
 11351  01B6  0022               	movlb	2	; select bank2
 11352  01B7  07DF               	addwf	(_Load^(0+256)+38),f
 11353                           
 11354                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11355  01B8  085F               	movf	(_Load^(0+256)+38),w
 11356  01B9  0020               	movlb	0	; select bank0
 11357  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11358  01BB  1803               	skipnc
 11359  01BC  0008               	return
 11360                           
 11361                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11362  01BD  0022               	movlb	2	; select bank2
 11363  01BE  01DF               	clrf	(_Load^(0+256)+38)
 11364                           
 11365                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11366  01BF  16B9               	bsf	_Load^(0+256),5
 11367                           
 11368                           ;OverLoad_B1.c: 170: }
 11369                           ;OverLoad_B1.c: 171: } else {
 11370  01C0  0008               	return
 11371  01C1                     l8317:	
 11372                           
 11373                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11374  01C1  01DF               	clrf	(_Load^(0+256)+38)
 11375                           
 11376                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11377  01C2  1DB9               	btfss	_Load^(0+256),3
 11378  01C3  0008               	return
 11379                           
 11380                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11381  01C4  3001               	movlw	1
 11382  01C5  0020               	movlb	0	; select bank0
 11383  01C6  00A8               	movwf	??_Load_Main
 11384  01C7  0828               	movf	??_Load_Main,w
 11385  01C8  0022               	movlb	2	; select bank2
 11386  01C9  07E0               	addwf	(_Load^(0+256)+39),f
 11387                           
 11388                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11389  01CA  3003               	movlw	3
 11390  01CB  0260               	subwf	(_Load^(0+256)+39),w
 11391  01CC  1C03               	skipc
 11392  01CD  0008               	return
 11393                           
 11394                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11395  01CE  01E0               	clrf	(_Load^(0+256)+39)
 11396                           
 11397                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11398  01CF  17B9               	bsf	_Load^(0+256),7
 11399                           
 11400                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11401  01D0  11B9               	bcf	_Load^(0+256),3
 11402                           
 11403                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11404  01D1  01DE               	clrf	(_Load^(0+256)+37)
 11405                           
 11406                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11407  01D2  0859               	movf	((_Load+1)^(0+256)+31),w
 11408  01D3  01C3               	clrf	((_Load+1)^(0+256)+9)
 11409  01D4  07C3               	addwf	((_Load+1)^(0+256)+9),f
 11410  01D5  0858               	movf	(_Load^(0+256)+31),w
 11411  01D6  01C2               	clrf	(_Load^(0+256)+9)
 11412  01D7  07C2               	addwf	(_Load^(0+256)+9),f
 11413                           
 11414                           ;OverLoad_B1.c: 184: }
 11415                           ;OverLoad_B1.c: 185: }
 11416                           ;OverLoad_B1.c: 208: }
 11417                           ;OverLoad_B1.c: 209: }
 11418                           ;OverLoad_B1.c: 210: }
 11419                           ;OverLoad_B1.c: 211: } else {
 11420  01D8  0008               	return
 11421  01D9                     l1651:	
 11422                           
 11423                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11424  01D9  1639               	bsf	_Load^(0+256),4
 11425                           
 11426                           ;OverLoad_B1.c: 213: }
 11427                           ;OverLoad_B1.c: 214: } else {
 11428  01DA  0008               	return
 11429  01DB                     l1650:	
 11430                           
 11431                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11432  01DB  1D39               	btfss	_Load^(0+256),2
 11433  01DC  29EE               	goto	l8353
 11434                           
 11435                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11436  01DD  1139               	bcf	_Load^(0+256),2
 11437                           
 11438                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11439  01DE  1239               	bcf	_Load^(0+256),4
 11440                           
 11441                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11442  01DF  01BA               	clrf	(_Load^(0+256)+1)
 11443  01E0  01BB               	clrf	((_Load+1)^(0+256)+1)
 11444                           
 11445                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11446  01E1  319E  2610  3180   	fcall	_setLoad_AH_AL_Restore
 11447                           
 11448                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11449  01E4  0022               	movlb	2	; select bank2
 11450  01E5  01DF               	clrf	(_Load^(0+256)+38)
 11451                           
 11452                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11453  01E6  01E0               	clrf	(_Load^(0+256)+39)
 11454                           
 11455                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11456  01E7  01BE               	clrf	(_Load^(0+256)+5)
 11457  01E8  01BF               	clrf	((_Load+1)^(0+256)+5)
 11458                           
 11459                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11460  01E9  01C0               	clrf	(_Load^(0+256)+7)
 11461  01EA  01C1               	clrf	((_Load+1)^(0+256)+7)
 11462                           
 11463                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11464  01EB  11B9               	bcf	_Load^(0+256),3
 11465                           
 11466                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11467  01EC  01DE               	clrf	(_Load^(0+256)+37)
 11468                           
 11469                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11470  01ED  13B9               	bcf	_Load^(0+256),7
 11471  01EE                     l8353:	
 11472                           
 11473                           ;OverLoad_B1.c: 257: }
 11474                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11475  01EE  1EB9               	btfss	_Load^(0+256),5
 11476  01EF  0008               	return
 11477                           
 11478                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11479  01F0  3001               	movlw	1
 11480  01F1  07BC               	addwf	(_Load^(0+256)+3),f
 11481  01F2  3000               	movlw	0
 11482  01F3  3DBD               	addwfc	((_Load+1)^(0+256)+3),f
 11483                           
 11484                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11485  01F4  3001               	movlw	1
 11486  01F5  023D               	subwf	((_Load+1)^(0+256)+3),w
 11487  01F6  30F4               	movlw	244
 11488  01F7  1903               	skipnz
 11489  01F8  023C               	subwf	(_Load^(0+256)+3),w
 11490  01F9  1C03               	skipc
 11491  01FA  0008               	return
 11492                           
 11493                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11494  01FB  01BC               	clrf	(_Load^(0+256)+3)
 11495  01FC  01BD               	clrf	((_Load+1)^(0+256)+3)
 11496                           
 11497                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11498  01FD  12B9               	bcf	_Load^(0+256),5
 11499                           
 11500                           ;OverLoad_B1.c: 263: }
 11501                           ;OverLoad_B1.c: 264: }
 11502                           ;OverLoad_B1.c: 265: }
 11503                           ;OverLoad_B1.c: 266: } else {
 11504  01FE  0008               	return
 11505  01FF                     l1640:	
 11506                           
 11507                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11508  01FF  0021               	movlb	1	; select bank1
 11509  0200  1C2F               	btfss	_myMain^(0+128),0
 11510  0201  0008               	return
 11511                           
 11512                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11513  0202  0022               	movlb	2	; select bank2
 11514  0203  1439               	bsf	_Load^(0+256),0
 11515  0204  0008               	return
 11516  0205                     __end_of_Load_Main:	
 11517                           
 11518                           	psect	text65
 11519  1A6D                     __ptext65:	
 11520 ;; *************** function _getMain_Lights_Count *****************
 11521 ;; Defined at:
 11522 ;;		line 459 in file "../src/Main_B1.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;		None
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;  status1         1    1[BANK0 ] unsigned char 
 11527 ;;  count           1    0[BANK0 ] unsigned char 
 11528 ;; Return value:  Size  Location     Type
 11529 ;;                  1    wreg      unsigned char 
 11530 ;; Registers used:
 11531 ;;		wreg, status,2
 11532 ;; Tracked objects:
 11533 ;;		On entry : 0/0
 11534 ;;		On exit  : 0/0
 11535 ;;		Unchanged: 0/0
 11536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;Total ram usage:        2 bytes
 11542 ;; Hardware stack levels used:    1
 11543 ;; Hardware stack levels required when called:    5
 11544 ;; This function calls:
 11545 ;;		Nothing
 11546 ;; This function is called by:
 11547 ;;		_Load_Main
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           
 11552                           ;psect for function _getMain_Lights_Count
 11553  1A6D                     _getMain_Lights_Count:	
 11554                           
 11555                           ;Main_B1.c: 460: char count = 0;
 11556                           
 11557                           ;incstack = 0
 11558                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11559  1A6D  0020               	movlb	0	; select bank0
 11560  1A6E  01A0               	clrf	getMain_Lights_Count@count
 11561                           
 11562                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11563  1A6F  3000               	movlw	0
 11564  1A70  0021               	movlb	1	; select bank1
 11565  1A71  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11566  1A72  3001               	movlw	1
 11567  1A73  0020               	movlb	0	; select bank0
 11568  1A74  00A1               	movwf	getMain_Lights_Count@status1
 11569                           
 11570                           ;Main_B1.c: 487: return count = status1;
 11571  1A75  0821               	movf	getMain_Lights_Count@status1,w
 11572  1A76  00A0               	movwf	getMain_Lights_Count@count
 11573  1A77  0008               	return
 11574  1A78                     __end_of_getMain_Lights_Count:	
 11575                           
 11576                           	psect	text66
 11577  1A35                     __ptext66:	
 11578 ;; *************** function _getDimmer_Load_Status *****************
 11579 ;; Defined at:
 11580 ;;		line 1219 in file "../src/Dimmer_B1.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;  status          1    0[BANK0 ] unsigned char 
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      unsigned char 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;Total ram usage:        1 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    5
 11601 ;; This function calls:
 11602 ;;		Nothing
 11603 ;; This function is called by:
 11604 ;;		_Load_Main
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           
 11609                           ;psect for function _getDimmer_Load_Status
 11610  1A35                     _getDimmer_Load_Status:	
 11611                           
 11612                           ;Dimmer_B1.c: 1220: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11613                           
 11614                           ;incstack = 0
 11615                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11616  1A35  3000               	movlw	0
 11617  1A36  0022               	movlb	2	; select bank2
 11618  1A37  192C               	btfsc	_Dimmer^(0+256),2
 11619  1A38  3001               	movlw	1
 11620  1A39  0020               	movlb	0	; select bank0
 11621  1A3A  00A0               	movwf	getDimmer_Load_Status@status
 11622                           
 11623                           ;Dimmer_B1.c: 1221: return status;
 11624  1A3B  0820               	movf	getDimmer_Load_Status@status,w
 11625  1A3C  0008               	return
 11626  1A3D                     __end_of_getDimmer_Load_Status:	
 11627                           
 11628                           	psect	text67
 11629  1A2D                     __ptext67:	
 11630 ;; *************** function _getDimmer_LoadGO *****************
 11631 ;; Defined at:
 11632 ;;		line 1213 in file "../src/Dimmer_B1.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;		None
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      unsigned char 
 11639 ;; Registers used:
 11640 ;;		wreg, status,2
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;Total ram usage:        1 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    5
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_Load_Main
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _getDimmer_LoadGO
 11662  1A2D                     _getDimmer_LoadGO:	
 11663                           
 11664                           ;Dimmer_B1.c: 1214: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11668  1A2D  3000               	movlw	0
 11669  1A2E  0022               	movlb	2	; select bank2
 11670  1A2F  18AC               	btfsc	_Dimmer^(0+256),1
 11671  1A30  3001               	movlw	1
 11672  1A31  0020               	movlb	0	; select bank0
 11673  1A32  00A0               	movwf	getDimmer_LoadGO@loadgo
 11674                           
 11675                           ;Dimmer_B1.c: 1215: return loadgo;
 11676  1A33  0820               	movf	getDimmer_LoadGO@loadgo,w
 11677  1A34  0008               	return
 11678  1A35                     __end_of_getDimmer_LoadGO:	
 11679                           
 11680                           	psect	text68
 11681  1C5D                     __ptext68:	
 11682 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11683 ;; Defined at:
 11684 ;;		line 320 in file "../src/Dimmer_B1.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;		None
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;  status          1    0[BANK0 ] unsigned char 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      unsigned char 
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;Total ram usage:        1 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    5
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_Load_Main
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11714  1C5D                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11715                           
 11716                           ;Dimmer_B1.c: 321: char status = 0;
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11720  1C5D  0020               	movlb	0	; select bank0
 11721  1C5E  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11722                           
 11723                           ;Dimmer_B1.c: 332: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11724  1C5F  3000               	movlw	0
 11725  1C60  0021               	movlb	1	; select bank1
 11726  1C61  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11727  1C62  3001               	movlw	1
 11728  1C63  0020               	movlb	0	; select bank0
 11729  1C64  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11730                           
 11731                           ;Dimmer_B1.c: 336: if (status == 0) {
 11732  1C65  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11733  1C66  1D03               	skipz
 11734  1C67  2C6E               	goto	l7363
 11735                           
 11736                           ;Dimmer_B1.c: 346: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11737  1C68  3000               	movlw	0
 11738  1C69  0021               	movlb	1	; select bank1
 11739  1C6A  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11740  1C6B  3001               	movlw	1
 11741  1C6C  0020               	movlb	0	; select bank0
 11742  1C6D  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11743  1C6E                     l7363:	
 11744                           
 11745                           ;Dimmer_B1.c: 348: }
 11746                           ;Dimmer_B1.c: 350: return status;
 11747  1C6E  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11748  1C6F  0008               	return
 11749  1C70                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11750                           
 11751                           	psect	text69
 11752  1E49                     __ptext69:	
 11753 ;; *************** function ___wmul *****************
 11754 ;; Defined at:
 11755 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11758 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11759 ;; Auto vars:     Size  Location     Type
 11760 ;;  product         2    4[BANK0 ] unsigned int 
 11761 ;; Return value:  Size  Location     Type
 11762 ;;                  2    0[BANK0 ] unsigned int 
 11763 ;; Registers used:
 11764 ;;		wreg, status,2, status,0
 11765 ;; Tracked objects:
 11766 ;;		On entry : 0/0
 11767 ;;		On exit  : 0/0
 11768 ;;		Unchanged: 0/0
 11769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;Total ram usage:        6 bytes
 11775 ;; Hardware stack levels used:    1
 11776 ;; Hardware stack levels required when called:    5
 11777 ;; This function calls:
 11778 ;;		Nothing
 11779 ;; This function is called by:
 11780 ;;		_Load_Main
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           
 11785                           ;psect for function ___wmul
 11786  1E49                     ___wmul:	
 11787                           
 11788                           ;incstack = 0
 11789                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11790  1E49  0020               	movlb	0	; select bank0
 11791  1E4A  01A4               	clrf	___wmul@product
 11792  1E4B  01A5               	clrf	___wmul@product+1
 11793  1E4C                     l7931:	
 11794  1E4C  1C20               	btfss	___wmul@multiplier,0
 11795  1E4D  2E52               	goto	l2730
 11796  1E4E  0822               	movf	___wmul@multiplicand,w
 11797  1E4F  07A4               	addwf	___wmul@product,f
 11798  1E50  0823               	movf	___wmul@multiplicand+1,w
 11799  1E51  3DA5               	addwfc	___wmul@product+1,f
 11800  1E52                     l2730:	
 11801  1E52  3001               	movlw	1
 11802  1E53                     u7835:	
 11803  1E53  35A2               	lslf	___wmul@multiplicand,f
 11804  1E54  0DA3               	rlf	___wmul@multiplicand+1,f
 11805  1E55  0B89               	decfsz	9,f
 11806  1E56  2E53               	goto	u7835
 11807  1E57  3001               	movlw	1
 11808  1E58                     u7845:	
 11809  1E58  36A1               	lsrf	___wmul@multiplier+1,f
 11810  1E59  0CA0               	rrf	___wmul@multiplier,f
 11811  1E5A  0B89               	decfsz	9,f
 11812  1E5B  2E58               	goto	u7845
 11813  1E5C  0821               	movf	___wmul@multiplier+1,w
 11814  1E5D  0420               	iorwf	___wmul@multiplier,w
 11815  1E5E  1D03               	skipz
 11816  1E5F  2E4C               	goto	l7931
 11817  1E60  0825               	movf	___wmul@product+1,w
 11818  1E61  01A1               	clrf	?___wmul+1
 11819  1E62  07A1               	addwf	?___wmul+1,f
 11820  1E63  0824               	movf	___wmul@product,w
 11821  1E64  01A0               	clrf	?___wmul
 11822  1E65  07A0               	addwf	?___wmul,f
 11823  1E66  0008               	return
 11824  1E67                     __end_of___wmul:	
 11825                           
 11826                           	psect	text70
 11827  1107                     __ptext70:	
 11828 ;; *************** function ___lwdiv *****************
 11829 ;; Defined at:
 11830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11831 ;; Parameters:    Size  Location     Type
 11832 ;;  divisor         2    0[BANK0 ] unsigned int 
 11833 ;;  dividend        2    2[BANK0 ] unsigned int 
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;  quotient        2    5[BANK0 ] unsigned int 
 11836 ;;  counter         1    7[BANK0 ] unsigned char 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  2    0[BANK0 ] unsigned int 
 11839 ;; Registers used:
 11840 ;;		wreg, status,2, status,0
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11846 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;Total ram usage:        8 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    5
 11853 ;; This function calls:
 11854 ;;		Nothing
 11855 ;; This function is called by:
 11856 ;;		_Load_Main
 11857 ;;		_setTemp_Main
 11858 ;;		_setRF_Main
 11859 ;; This function uses a non-reentrant model
 11860 ;;
 11861                           
 11862                           
 11863                           ;psect for function ___lwdiv
 11864  1107                     ___lwdiv:	
 11865                           
 11866                           ;incstack = 0
 11867                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11868  1107  0020               	movlb	0	; select bank0
 11869  1108  01A5               	clrf	___lwdiv@quotient
 11870  1109  01A6               	clrf	___lwdiv@quotient+1
 11871  110A  0821               	movf	___lwdiv@divisor+1,w
 11872  110B  0420               	iorwf	___lwdiv@divisor,w
 11873  110C  1903               	skipnz
 11874  110D  2937               	goto	l7299
 11875  110E  01A7               	clrf	___lwdiv@counter
 11876  110F  0AA7               	incf	___lwdiv@counter,f
 11877  1110                     l7287:	
 11878  1110  1BA1               	btfsc	___lwdiv@divisor+1,7
 11879  1111  291C               	goto	l7289
 11880  1112  3001               	movlw	1
 11881  1113                     u6705:	
 11882  1113  35A0               	lslf	___lwdiv@divisor,f
 11883  1114  0DA1               	rlf	___lwdiv@divisor+1,f
 11884  1115  0B89               	decfsz	9,f
 11885  1116  2913               	goto	u6705
 11886  1117  3001               	movlw	1
 11887  1118  00A4               	movwf	??___lwdiv
 11888  1119  0824               	movf	??___lwdiv,w
 11889  111A  07A7               	addwf	___lwdiv@counter,f
 11890  111B  2910               	goto	l7287
 11891  111C                     l7289:	
 11892  111C  3001               	movlw	1
 11893  111D                     u6725:	
 11894  111D  35A5               	lslf	___lwdiv@quotient,f
 11895  111E  0DA6               	rlf	___lwdiv@quotient+1,f
 11896  111F  0B89               	decfsz	9,f
 11897  1120  291D               	goto	u6725
 11898  1121  0821               	movf	___lwdiv@divisor+1,w
 11899  1122  0223               	subwf	___lwdiv@dividend+1,w
 11900  1123  1D03               	skipz
 11901  1124  2927               	goto	u6735
 11902  1125  0820               	movf	___lwdiv@divisor,w
 11903  1126  0222               	subwf	___lwdiv@dividend,w
 11904  1127                     u6735:	
 11905  1127  1C03               	skipc
 11906  1128  292E               	goto	l7295
 11907  1129  0820               	movf	___lwdiv@divisor,w
 11908  112A  02A2               	subwf	___lwdiv@dividend,f
 11909  112B  0821               	movf	___lwdiv@divisor+1,w
 11910  112C  3BA3               	subwfb	___lwdiv@dividend+1,f
 11911  112D  1425               	bsf	___lwdiv@quotient,0
 11912  112E                     l7295:	
 11913  112E  3001               	movlw	1
 11914  112F                     u6745:	
 11915  112F  36A1               	lsrf	___lwdiv@divisor+1,f
 11916  1130  0CA0               	rrf	___lwdiv@divisor,f
 11917  1131  0B89               	decfsz	9,f
 11918  1132  292F               	goto	u6745
 11919  1133  3001               	movlw	1
 11920  1134  02A7               	subwf	___lwdiv@counter,f
 11921  1135  1D03               	btfss	3,2
 11922  1136  291C               	goto	l7289
 11923  1137                     l7299:	
 11924  1137  0826               	movf	___lwdiv@quotient+1,w
 11925  1138  01A1               	clrf	?___lwdiv+1
 11926  1139  07A1               	addwf	?___lwdiv+1,f
 11927  113A  0825               	movf	___lwdiv@quotient,w
 11928  113B  01A0               	clrf	?___lwdiv
 11929  113C  07A0               	addwf	?___lwdiv,f
 11930  113D  0008               	return
 11931  113E                     __end_of___lwdiv:	
 11932                           
 11933                           	psect	text71
 11934  19BC                     __ptext71:	
 11935 ;; *************** function _Load_Initialization *****************
 11936 ;; Defined at:
 11937 ;;		line 9 in file "../src/OverLoad_B1.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;		None
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;		None
 11942 ;; Return value:  Size  Location     Type
 11943 ;;		None               void
 11944 ;; Registers used:
 11945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;Total ram usage:        0 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    6
 11958 ;; This function calls:
 11959 ;;		_setLoad_AH_AL_Restore
 11960 ;; This function is called by:
 11961 ;;		_main
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           
 11966                           ;psect for function _Load_Initialization
 11967  19BC                     _Load_Initialization:	
 11968                           
 11969                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11970                           
 11971                           ;incstack = 0
 11972                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11973  19BC  319E  2610         	fcall	_setLoad_AH_AL_Restore
 11974  19BE  0008               	return
 11975  19BF                     __end_of_Load_Initialization:	
 11976                           
 11977                           	psect	text72
 11978  1E10                     __ptext72:	
 11979 ;; *************** function _setLoad_AH_AL_Restore *****************
 11980 ;; Defined at:
 11981 ;;		line 294 in file "../src/OverLoad_B1.c"
 11982 ;; Parameters:    Size  Location     Type
 11983 ;;		None
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;  i               1    1[BANK0 ] unsigned char 
 11986 ;; Return value:  Size  Location     Type
 11987 ;;		None               void
 11988 ;; Registers used:
 11989 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;Total ram usage:        2 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    5
 12002 ;; This function calls:
 12003 ;;		Nothing
 12004 ;; This function is called by:
 12005 ;;		_Load_Initialization
 12006 ;;		_Load_Main
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           
 12011                           ;psect for function _setLoad_AH_AL_Restore
 12012  1E10                     _setLoad_AH_AL_Restore:	
 12013                           
 12014                           ;OverLoad_B1.c: 295: char i;
 12015                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12019  1E10  0020               	movlb	0	; select bank0
 12020  1E11  01A1               	clrf	setLoad_AH_AL_Restore@i
 12021  1E12                     L9:	
 12022  1E12  3005               	movlw	5
 12023  1E13  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12024  1E14  1803               	btfsc	3,0
 12025  1E15  0008               	return
 12026                           
 12027                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12028  1E16  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12029  1E17  3E44               	addlw	(_Load+11)& (0+255)
 12030  1E18  0086               	movwf	6
 12031  1E19  3001               	movlw	1	; select bank2/3
 12032  1E1A  0087               	movwf	7
 12033  1E1B  3000               	movlw	0
 12034  1E1C  3FC0               	movwi [0]fsr1
 12035  1E1D  3FC1               	movwi [1]fsr1
 12036                           
 12037                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12038  1E1E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12039  1E1F  3E4E               	addlw	(_Load+21)& (0+255)
 12040  1E20  0086               	movwf	6
 12041  1E21  3001               	movlw	1	; select bank2/3
 12042  1E22  0087               	movwf	7
 12043  1E23  30FF               	movlw	255
 12044  1E24  3FC0               	movwi [0]fsr1
 12045  1E25  30FF               	movlw	255
 12046  1E26  3FC1               	movwi [1]fsr1
 12047  1E27  3001               	movlw	1
 12048  1E28  00A0               	movwf	??_setLoad_AH_AL_Restore
 12049  1E29  0820               	movf	??_setLoad_AH_AL_Restore,w
 12050  1E2A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12051  1E2B  2E12               	goto	L9
 12052  1E2C                     __end_of_setLoad_AH_AL_Restore:	
 12053                           
 12054                           	psect	text73
 12055  19D7                     __ptext73:	
 12056 ;; *************** function _LED_Main *****************
 12057 ;; Defined at:
 12058 ;;		line 47 in file "../src/LED_B1.c"
 12059 ;; Parameters:    Size  Location     Type
 12060 ;;		None
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;		None
 12063 ;; Return value:  Size  Location     Type
 12064 ;;		None               void
 12065 ;; Registers used:
 12066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12067 ;; Tracked objects:
 12068 ;;		On entry : 0/0
 12069 ;;		On exit  : 0/0
 12070 ;;		Unchanged: 0/0
 12071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;Total ram usage:        0 bytes
 12077 ;; Hardware stack levels used:    1
 12078 ;; Hardware stack levels required when called:    7
 12079 ;; This function calls:
 12080 ;;		_setLED_Main
 12081 ;; This function is called by:
 12082 ;;		_main
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           
 12087                           ;psect for function _LED_Main
 12088  19D7                     _LED_Main:	
 12089                           
 12090                           ;LED_B1.c: 67: setLED_Main(99);
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12094  19D7  3063               	movlw	99
 12095  19D8  3190  20D1         	fcall	_setLED_Main
 12096  19DA  0008               	return
 12097  19DB                     __end_of_LED_Main:	
 12098                           
 12099                           	psect	text74
 12100  10D1                     __ptext74:	
 12101 ;; *************** function _setLED_Main *****************
 12102 ;; Defined at:
 12103 ;;		line 229 in file "../src/LED_B1.c"
 12104 ;; Parameters:    Size  Location     Type
 12105 ;;  led             1    wreg     unsigned char 
 12106 ;; Auto vars:     Size  Location     Type
 12107 ;;  led             1    4[BANK0 ] unsigned char 
 12108 ;; Return value:  Size  Location     Type
 12109 ;;		None               void
 12110 ;; Registers used:
 12111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12112 ;; Tracked objects:
 12113 ;;		On entry : 0/0
 12114 ;;		On exit  : 0/0
 12115 ;;		Unchanged: 0/0
 12116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;Total ram usage:        3 bytes
 12122 ;; Hardware stack levels used:    1
 12123 ;; Hardware stack levels required when called:    6
 12124 ;; This function calls:
 12125 ;;		_LedPointSelect
 12126 ;; This function is called by:
 12127 ;;		_LED_Main
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           
 12132                           ;psect for function _setLED_Main
 12133  10D1                     _setLED_Main:	
 12134                           
 12135                           ;incstack = 0
 12136                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12137                           ;setLED_Main@led stored from wreg
 12138  10D1  0020               	movlb	0	; select bank0
 12139  10D2  00A4               	movwf	setLED_Main@led
 12140                           
 12141                           ;LED_B1.c: 230: LedPointSelect(led);
 12142  10D3  0824               	movf	setLED_Main@led,w
 12143  10D4  319A  22CA  3190   	fcall	_LedPointSelect
 12144                           
 12145                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12146  10D7  0021               	movlb	1	; select bank1
 12147  10D8  084D               	movf	_LED^(0+128),w
 12148  10D9  0086               	movwf	6
 12149  10DA  3001               	movlw	1	; select bank2/3
 12150  10DB  0087               	movwf	7
 12151  10DC  1C81               	btfss	1,1
 12152  10DD  0008               	return
 12153                           
 12154                           ;LED_B1.c: 232: LED->Time++;
 12155  10DE  0A4D               	incf	_LED^(0+128),w
 12156  10DF  0086               	movwf	6
 12157  10E0  3001               	movlw	1	; select bank2/3
 12158  10E1  0087               	movwf	7
 12159  10E2  3001               	movlw	1
 12160  10E3  0781               	addwf	1,f
 12161  10E4  3141               	addfsr 1,1
 12162  10E5  1803               	skipnc
 12163  10E6  0A81               	incf	1,f
 12164                           
 12165                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12166  10E7  0A4D               	incf	_LED^(0+128),w
 12167  10E8  0086               	movwf	6
 12168  10E9  3001               	movlw	1	; select bank2/3
 12169  10EA  0087               	movwf	7
 12170  10EB  3F40               	moviw [0]fsr1
 12171  10EC  0020               	movlb	0	; select bank0
 12172  10ED  00A2               	movwf	??_setLED_Main
 12173  10EE  3F41               	moviw [1]fsr1
 12174  10EF  00A3               	movwf	??_setLED_Main+1
 12175  10F0  3000               	movlw	0
 12176  10F1  0223               	subwf	??_setLED_Main+1,w
 12177  10F2  3019               	movlw	25
 12178  10F3  1903               	skipnz
 12179  10F4  0222               	subwf	??_setLED_Main,w
 12180  10F5  1C03               	skipc
 12181  10F6  0008               	return
 12182                           
 12183                           ;LED_B1.c: 234: LED->Time = 0;
 12184  10F7  0021               	movlb	1	; select bank1
 12185  10F8  0A4D               	incf	_LED^(0+128),w
 12186  10F9  0086               	movwf	6
 12187  10FA  3001               	movlw	1	; select bank2/3
 12188  10FB  0087               	movwf	7
 12189  10FC  3000               	movlw	0
 12190  10FD  3FC0               	movwi [0]fsr1
 12191  10FE  3FC1               	movwi [1]fsr1
 12192                           
 12193                           ;LED_B1.c: 252: if (led == 99) {
 12194  10FF  0020               	movlb	0	; select bank0
 12195  1100  0824               	movf	setLED_Main@led,w
 12196  1101  3A63               	xorlw	99
 12197  1102  1D03               	skipz
 12198  1103  0008               	return
 12199                           
 12200                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12201  1104  3020               	movlw	32
 12202  1105  068D               	xorwf	13,f
 12203  1106  0008               	return
 12204  1107                     __end_of_setLED_Main:	
 12205                           
 12206                           	psect	text75
 12207  19D3                     __ptext75:	
 12208 ;; *************** function _LED_Initialization *****************
 12209 ;; Defined at:
 12210 ;;		line 31 in file "../src/LED_B1.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;		None
 12215 ;; Return value:  Size  Location     Type
 12216 ;;		None               void
 12217 ;; Registers used:
 12218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;Total ram usage:        0 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    8
 12231 ;; This function calls:
 12232 ;;		_setLED_Initialization
 12233 ;; This function is called by:
 12234 ;;		_main
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           
 12239                           ;psect for function _LED_Initialization
 12240  19D3                     _LED_Initialization:	
 12241                           
 12242                           ;LED_B1.c: 42: setLED_Initialization(99);
 12243                           
 12244                           ;incstack = 0
 12245                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12246  19D3  3063               	movlw	99
 12247  19D4  319C  2401         	fcall	_setLED_Initialization
 12248  19D6  0008               	return
 12249  19D7                     __end_of_LED_Initialization:	
 12250                           
 12251                           	psect	text76
 12252  1C01                     __ptext76:	
 12253 ;; *************** function _setLED_Initialization *****************
 12254 ;; Defined at:
 12255 ;;		line 74 in file "../src/LED_B1.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;  led             1    wreg     unsigned char 
 12258 ;; Auto vars:     Size  Location     Type
 12259 ;;  led             1    4[BANK0 ] unsigned char 
 12260 ;; Return value:  Size  Location     Type
 12261 ;;		None               void
 12262 ;; Registers used:
 12263 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12264 ;; Tracked objects:
 12265 ;;		On entry : 0/0
 12266 ;;		On exit  : 0/0
 12267 ;;		Unchanged: 0/0
 12268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;Total ram usage:        1 bytes
 12274 ;; Hardware stack levels used:    1
 12275 ;; Hardware stack levels required when called:    7
 12276 ;; This function calls:
 12277 ;;		_LedPointSelect
 12278 ;;		_setLED
 12279 ;; This function is called by:
 12280 ;;		_LED_Initialization
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           
 12285                           ;psect for function _setLED_Initialization
 12286  1C01                     _setLED_Initialization:	
 12287                           
 12288                           ;incstack = 0
 12289                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12290                           ;setLED_Initialization@led stored from wreg
 12291  1C01  0020               	movlb	0	; select bank0
 12292  1C02  00A4               	movwf	setLED_Initialization@led
 12293                           
 12294                           ;LED_B1.c: 75: LedPointSelect(led);
 12295  1C03  0824               	movf	setLED_Initialization@led,w
 12296  1C04  319A  22CA  319C   	fcall	_LedPointSelect
 12297                           
 12298                           ;LED_B1.c: 76: LED->Enable = 1;
 12299  1C07  0021               	movlb	1	; select bank1
 12300  1C08  084D               	movf	_LED^(0+128),w
 12301  1C09  0086               	movwf	6
 12302  1C0A  3001               	movlw	1	; select bank2/3
 12303  1C0B  0087               	movwf	7
 12304  1C0C  1401               	bsf	1,0
 12305                           
 12306                           ;LED_B1.c: 77: setLED(led, 0);
 12307  1C0D  0020               	movlb	0	; select bank0
 12308  1C0E  01A2               	clrf	setLED@command
 12309  1C0F  0824               	movf	setLED_Initialization@led,w
 12310  1C10  3191  2176         	fcall	_setLED
 12311  1C12  0008               	return
 12312  1C13                     __end_of_setLED_Initialization:	
 12313                           
 12314                           	psect	text77
 12315  1228                     __ptext77:	
 12316 ;; *************** function _Flash_Memory_Main *****************
 12317 ;; Defined at:
 12318 ;;		line 976 in file "../src/MCU_B1.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;		None
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12323 ;; Return value:  Size  Location     Type
 12324 ;;		None               void
 12325 ;; Registers used:
 12326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;Total ram usage:        3 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    8
 12339 ;; This function calls:
 12340 ;;		_Flash_Memory_Modify
 12341 ;;		_getAll_Sw_KeyStatus
 12342 ;;		_getMain_All_LightsStatus
 12343 ;; This function is called by:
 12344 ;;		_main
 12345 ;; This function uses a non-reentrant model
 12346 ;;
 12347                           
 12348                           
 12349                           ;psect for function _Flash_Memory_Main
 12350  1228                     _Flash_Memory_Main:	
 12351                           
 12352                           ;MCU_B1.c: 977: char key_Status = 0;
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12356  1228  0020               	movlb	0	; select bank0
 12357  1229  01A7               	clrf	Flash_Memory_Main@key_Status
 12358                           
 12359                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12360  122A  319B  23AA  3192   	fcall	_getAll_Sw_KeyStatus
 12361  122D  0020               	movlb	0	; select bank0
 12362  122E  00A6               	movwf	??_Flash_Memory_Main
 12363  122F  0826               	movf	??_Flash_Memory_Main,w
 12364  1230  00A7               	movwf	Flash_Memory_Main@key_Status
 12365                           
 12366                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12367  1231  0024               	movlb	4	; select bank4
 12368  1232  1C44               	btfss	(_Memory^(0+512)+36),0
 12369  1233  0008               	return
 12370                           
 12371                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12372  1234  0020               	movlb	0	; select bank0
 12373  1235  01A8               	clrf	_Flash_Memory_Main$3165
 12374  1236  319A  2258  3192   	fcall	_getMain_All_LightsStatus
 12375  1239  3800               	iorlw	0
 12376  123A  1D03               	skipz
 12377  123B  2A42               	goto	l8061
 12378  123C  0020               	movlb	0	; select bank0
 12379  123D  08A7               	movf	Flash_Memory_Main@key_Status,f
 12380  123E  1D03               	skipz
 12381  123F  2A42               	goto	l8061
 12382  1240  01A8               	clrf	_Flash_Memory_Main$3165
 12383  1241  0AA8               	incf	_Flash_Memory_Main$3165,f
 12384  1242                     l8061:	
 12385  1242  0020               	movlb	0	; select bank0
 12386  1243  0828               	movf	_Flash_Memory_Main$3165,w
 12387  1244  0024               	movlb	4	; select bank4
 12388  1245  10C4               	bcf	(_Memory^(0+512)+36),1
 12389  1246  1D03               	skipz
 12390  1247  14C4               	bsf	(_Memory^(0+512)+36),1
 12391                           
 12392                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12393  1248  1CC4               	btfss	(_Memory^(0+512)+36),1
 12394  1249  2A63               	goto	l1262
 12395                           
 12396                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12397  124A  15C4               	bsf	(_Memory^(0+512)+36),3
 12398                           
 12399                           ;MCU_B1.c: 985: Memory.Time++;
 12400  124B  3001               	movlw	1
 12401  124C  07C2               	addwf	(_Memory^(0+512)+34),f
 12402  124D  3000               	movlw	0
 12403  124E  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12404                           
 12405                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12406  124F  3022               	movlw	34
 12407  1250  3E20               	addlw	_Memory& (0+255)
 12408  1251  0086               	movwf	6
 12409  1252  3002               	movlw	2	; select bank4/5
 12410  1253  0087               	movwf	7
 12411  1254  3F40               	moviw [0]fsr1
 12412  1255  3A0A               	xorlw	10
 12413  1256  1D03               	skipz
 12414  1257  2A5A               	goto	u8075
 12415  1258  3F41               	moviw [1]fsr1
 12416  1259  3A00               	xorlw	0
 12417  125A                     u8075:	
 12418  125A  1D03               	skipz
 12419  125B  0008               	return
 12420                           
 12421                           ;MCU_B1.c: 987: Memory.Time = 0;
 12422  125C  01C2               	clrf	(_Memory^(0+512)+34)
 12423  125D  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12424                           
 12425                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12426  125E  1044               	bcf	(_Memory^(0+512)+36),0
 12427                           
 12428                           ;MCU_B1.c: 989: Memory.GO = 0;
 12429  125F  10C4               	bcf	(_Memory^(0+512)+36),1
 12430                           
 12431                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12432  1260  318A  22FC         	fcall	_Flash_Memory_Modify
 12433                           
 12434                           ;MCU_B1.c: 991: }
 12435                           ;MCU_B1.c: 992: } else {
 12436  1262  0008               	return
 12437  1263                     l1262:	
 12438                           
 12439                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12440  1263  1DC4               	btfss	(_Memory^(0+512)+36),3
 12441  1264  0008               	return
 12442                           
 12443                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12444  1265  11C4               	bcf	(_Memory^(0+512)+36),3
 12445                           
 12446                           ;MCU_B1.c: 995: Memory.Time = 0;
 12447  1266  01C2               	clrf	(_Memory^(0+512)+34)
 12448  1267  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12449  1268  0008               	return
 12450  1269                     __end_of_Flash_Memory_Main:	
 12451                           
 12452                           	psect	text78
 12453  1BAA                     __ptext78:	
 12454 ;; *************** function _getAll_Sw_KeyStatus *****************
 12455 ;; Defined at:
 12456 ;;		line 279 in file "../src/Switch_B1.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;		None
 12459 ;; Auto vars:     Size  Location     Type
 12460 ;;  status          1    1[BANK0 ] unsigned char 
 12461 ;; Return value:  Size  Location     Type
 12462 ;;                  1    wreg      unsigned char 
 12463 ;; Registers used:
 12464 ;;		wreg, status,2
 12465 ;; Tracked objects:
 12466 ;;		On entry : 0/0
 12467 ;;		On exit  : 0/0
 12468 ;;		Unchanged: 0/0
 12469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;Total ram usage:        3 bytes
 12475 ;; Hardware stack levels used:    1
 12476 ;; Hardware stack levels required when called:    5
 12477 ;; This function calls:
 12478 ;;		Nothing
 12479 ;; This function is called by:
 12480 ;;		_Flash_Memory_Main
 12481 ;; This function uses a non-reentrant model
 12482 ;;
 12483                           
 12484                           
 12485                           ;psect for function _getAll_Sw_KeyStatus
 12486  1BAA                     _getAll_Sw_KeyStatus:	
 12487                           
 12488                           ;Switch_B1.c: 280: char status = 0;
 12489                           
 12490                           ;incstack = 0
 12491                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12492  1BAA  0020               	movlb	0	; select bank0
 12493  1BAB  01A1               	clrf	getAll_Sw_KeyStatus@status
 12494                           
 12495                           ;Switch_B1.c: 299: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12496  1BAC  01A2               	clrf	_getAll_Sw_KeyStatus$6483
 12497  1BAD  0AA2               	incf	_getAll_Sw_KeyStatus$6483,f
 12498  1BAE  1F0C               	btfss	12,6	;volatile
 12499  1BAF  1A0C               	btfsc	12,4	;volatile
 12500  1BB0  2BB5               	goto	l7615
 12501  1BB1  1C0C               	btfss	12,0	;volatile
 12502  1BB2  1B8C               	btfsc	12,7	;volatile
 12503  1BB3  2BB5               	goto	l7615
 12504  1BB4  01A2               	clrf	_getAll_Sw_KeyStatus$6483
 12505  1BB5                     l7615:	
 12506  1BB5  0822               	movf	_getAll_Sw_KeyStatus$6483,w
 12507  1BB6  00A0               	movwf	??_getAll_Sw_KeyStatus
 12508  1BB7  0820               	movf	??_getAll_Sw_KeyStatus,w
 12509  1BB8  00A1               	movwf	getAll_Sw_KeyStatus@status
 12510                           
 12511                           ;Switch_B1.c: 303: return status;
 12512  1BB9  0821               	movf	getAll_Sw_KeyStatus@status,w
 12513  1BBA  0008               	return
 12514  1BBB                     __end_of_getAll_Sw_KeyStatus:	
 12515                           
 12516                           	psect	text79
 12517  0AFC                     __ptext79:	
 12518 ;; *************** function _Flash_Memory_Modify *****************
 12519 ;; Defined at:
 12520 ;;		line 1053 in file "../src/MCU_B1.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;		None
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  i               1    5[BANK0 ] unsigned char 
 12525 ;; Return value:  Size  Location     Type
 12526 ;;		None               void
 12527 ;; Registers used:
 12528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;Total ram usage:        2 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    7
 12541 ;; This function calls:
 12542 ;;		_Flash_Memory_Erasing
 12543 ;;		_Flash_Memory_Read
 12544 ;;		_Flash_Memory_Write
 12545 ;;		_setMemory_Data
 12546 ;; This function is called by:
 12547 ;;		_Flash_Memory_Main
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _Flash_Memory_Modify
 12553  0AFC                     _Flash_Memory_Modify:	
 12554                           
 12555                           ;MCU_B1.c: 1054: char i = 0;
 12556                           
 12557                           ;incstack = 0
 12558                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12559  0AFC  0020               	movlb	0	; select bank0
 12560  0AFD  01A5               	clrf	Flash_Memory_Modify@i
 12561                           
 12562                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12563  0AFE  01A5               	clrf	Flash_Memory_Modify@i
 12564  0AFF  3020               	movlw	32
 12565  0B00  0225               	subwf	Flash_Memory_Modify@i,w
 12566  0B01  1803               	btfsc	3,0
 12567  0B02  2B18               	goto	l7633
 12568  0B03                     l7627:	
 12569                           
 12570                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12571  0B03  0825               	movf	Flash_Memory_Modify@i,w
 12572  0B04  319D  258C  318A   	fcall	_Flash_Memory_Read
 12573  0B07  0020               	movlb	0	; select bank0
 12574  0B08  00A4               	movwf	??_Flash_Memory_Modify
 12575  0B09  0825               	movf	Flash_Memory_Modify@i,w
 12576  0B0A  3E20               	addlw	_Memory& (0+255)
 12577  0B0B  0086               	movwf	6
 12578  0B0C  3002               	movlw	2	; select bank4/5
 12579  0B0D  0087               	movwf	7
 12580  0B0E  0824               	movf	??_Flash_Memory_Modify,w
 12581  0B0F  0081               	movwf	1
 12582  0B10  3001               	movlw	1
 12583  0B11  00A4               	movwf	??_Flash_Memory_Modify
 12584  0B12  0824               	movf	??_Flash_Memory_Modify,w
 12585  0B13  07A5               	addwf	Flash_Memory_Modify@i,f
 12586  0B14  3020               	movlw	32
 12587  0B15  0225               	subwf	Flash_Memory_Modify@i,w
 12588  0B16  1C03               	skipc
 12589  0B17  2B03               	goto	l7627
 12590  0B18                     l7633:	
 12591                           
 12592                           ;MCU_B1.c: 1057: }
 12593                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12594  0B18  0021               	movlb	1	; select bank1
 12595  0B19  086E               	movf	_product^(0+128),w
 12596  0B1A  0086               	movwf	6
 12597  0B1B  3001               	movlw	1	; select bank2/3
 12598  0B1C  0087               	movwf	7
 12599  0B1D  3001               	movlw	1	; select bank2/3
 12600  0B1E  3F4C               	moviw [12]fsr1
 12601  0B1F  0020               	movlb	0	; select bank0
 12602  0B20  00A0               	movwf	setMemory_Data@data
 12603  0B21  3000               	movlw	0
 12604  0B22  319A  22D6  318A   	fcall	_setMemory_Data
 12605                           
 12606                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12607  0B25  0021               	movlb	1	; select bank1
 12608  0B26  086E               	movf	_product^(0+128),w
 12609  0B27  0086               	movwf	6
 12610  0B28  3001               	movlw	1	; select bank2/3
 12611  0B29  0087               	movwf	7
 12612  0B2A  3001               	movlw	1	; select bank2/3
 12613  0B2B  3F4D               	moviw [13]fsr1
 12614  0B2C  0020               	movlb	0	; select bank0
 12615  0B2D  00A0               	movwf	setMemory_Data@data
 12616  0B2E  3001               	movlw	1
 12617  0B2F  319A  22D6  318A   	fcall	_setMemory_Data
 12618                           
 12619                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12620  0B32  0021               	movlb	1	; select bank1
 12621  0B33  086E               	movf	_product^(0+128),w
 12622  0B34  0086               	movwf	6
 12623  0B35  3001               	movlw	1	; select bank2/3
 12624  0B36  0087               	movwf	7
 12625  0B37  3001               	movlw	1	; select bank2/3
 12626  0B38  3F4E               	moviw [14]fsr1
 12627  0B39  0020               	movlb	0	; select bank0
 12628  0B3A  00A0               	movwf	setMemory_Data@data
 12629  0B3B  3002               	movlw	2
 12630  0B3C  319A  22D6  318A   	fcall	_setMemory_Data
 12631                           
 12632                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12633  0B3F  0021               	movlb	1	; select bank1
 12634  0B40  086E               	movf	_product^(0+128),w
 12635  0B41  0086               	movwf	6
 12636  0B42  3001               	movlw	1	; select bank2/3
 12637  0B43  0087               	movwf	7
 12638  0B44  3001               	movlw	1	; select bank2/3
 12639  0B45  3F55               	moviw [21]fsr1
 12640  0B46  0020               	movlb	0	; select bank0
 12641  0B47  00A0               	movwf	setMemory_Data@data
 12642  0B48  3003               	movlw	3
 12643  0B49  319A  22D6  318A   	fcall	_setMemory_Data
 12644                           
 12645                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12646  0B4C  0021               	movlb	1	; select bank1
 12647  0B4D  086E               	movf	_product^(0+128),w
 12648  0B4E  0086               	movwf	6
 12649  0B4F  3001               	movlw	1	; select bank2/3
 12650  0B50  0087               	movwf	7
 12651  0B51  3001               	movlw	1	; select bank2/3
 12652  0B52  3F56               	moviw [22]fsr1
 12653  0B53  0020               	movlb	0	; select bank0
 12654  0B54  00A0               	movwf	setMemory_Data@data
 12655  0B55  3004               	movlw	4
 12656  0B56  319A  22D6  318A   	fcall	_setMemory_Data
 12657                           
 12658                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12659  0B59  0021               	movlb	1	; select bank1
 12660  0B5A  086E               	movf	_product^(0+128),w
 12661  0B5B  0086               	movwf	6
 12662  0B5C  3001               	movlw	1	; select bank2/3
 12663  0B5D  0087               	movwf	7
 12664  0B5E  3001               	movlw	1	; select bank2/3
 12665  0B5F  3F57               	moviw [23]fsr1
 12666  0B60  0020               	movlb	0	; select bank0
 12667  0B61  00A0               	movwf	setMemory_Data@data
 12668  0B62  3005               	movlw	5
 12669  0B63  319A  22D6  318A   	fcall	_setMemory_Data
 12670                           
 12671                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12672  0B66  0021               	movlb	1	; select bank1
 12673  0B67  1EB9               	btfss	(_myMain^(0+128)+10),5
 12674  0B68  2B73               	goto	l7641
 12675                           
 12676                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12677  0B69  12B9               	bcf	(_myMain^(0+128)+10),5
 12678                           
 12679                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12680  0B6A  30AA               	movlw	170
 12681  0B6B  0020               	movlb	0	; select bank0
 12682  0B6C  00A4               	movwf	??_Flash_Memory_Modify
 12683  0B6D  0824               	movf	??_Flash_Memory_Modify,w
 12684  0B6E  00A0               	movwf	setMemory_Data@data
 12685  0B6F  301E               	movlw	30
 12686  0B70  319A  22D6  318A   	fcall	_setMemory_Data
 12687  0B73                     l7641:	
 12688                           
 12689                           ;MCU_B1.c: 1068: }
 12690                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12691  0B73  0024               	movlb	4	; select bank4
 12692  0B74  1D44               	btfss	(_Memory^(0+512)+36),2
 12693  0B75  2B7A               	goto	l1286
 12694                           
 12695                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12696  0B76  1144               	bcf	(_Memory^(0+512)+36),2
 12697                           
 12698                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12699  0B77  0021               	movlb	1	; select bank1
 12700  0B78  11AF               	bcf	_myMain^(0+128),3
 12701                           
 12702                           ;MCU_B1.c: 1073: myMain.First = 0;
 12703  0B79  12AF               	bcf	_myMain^(0+128),5
 12704  0B7A                     l1286:	
 12705                           
 12706                           ;MCU_B1.c: 1075: }
 12707                           ;MCU_B1.c: 1076: GIE = 0;
 12708  0B7A  138B               	bcf	11,7	;volatile
 12709                           
 12710                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12711  0B7B  319A  22E2  318A   	fcall	_Flash_Memory_Erasing
 12712                           
 12713                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12714  0B7E  3190  203B         	fcall	_Flash_Memory_Write
 12715                           
 12716                           ;MCU_B1.c: 1079: GIE = 1;
 12717  0B80  178B               	bsf	11,7	;volatile
 12718  0B81  0008               	return
 12719  0B82                     __end_of_Flash_Memory_Modify:	
 12720                           
 12721                           	psect	text80
 12722  1AE2                     __ptext80:	
 12723 ;; *************** function _Flash_Memory_Erasing *****************
 12724 ;; Defined at:
 12725 ;;		line 1042 in file "../src/MCU_B1.c"
 12726 ;; Parameters:    Size  Location     Type
 12727 ;;		None
 12728 ;; Auto vars:     Size  Location     Type
 12729 ;;		None
 12730 ;; Return value:  Size  Location     Type
 12731 ;;		None               void
 12732 ;; Registers used:
 12733 ;;		wreg, status,2, status,0, pclath, cstack
 12734 ;; Tracked objects:
 12735 ;;		On entry : 0/0
 12736 ;;		On exit  : 0/0
 12737 ;;		Unchanged: 0/0
 12738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;Total ram usage:        0 bytes
 12744 ;; Hardware stack levels used:    1
 12745 ;; Hardware stack levels required when called:    6
 12746 ;; This function calls:
 12747 ;;		_Flash_Memory_Unlock
 12748 ;; This function is called by:
 12749 ;;		_Flash_Memory_Modify
 12750 ;; This function uses a non-reentrant model
 12751 ;;
 12752                           
 12753                           
 12754                           ;psect for function _Flash_Memory_Erasing
 12755  1AE2                     _Flash_Memory_Erasing:	
 12756                           
 12757                           ;MCU_B1.c: 1043: CFGS = 0;
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12761  1AE2  0023               	movlb	3	; select bank3
 12762  1AE3  1315               	bcf	21,6	;volatile
 12763                           
 12764                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12765  1AE4  3030               	movlw	48
 12766  1AE5  0092               	movwf	18	;volatile
 12767                           
 12768                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12769  1AE6  0191               	clrf	17	;volatile
 12770                           
 12771                           ;MCU_B1.c: 1046: FREE = 1;
 12772  1AE7  1615               	bsf	21,4	;volatile
 12773                           
 12774                           ;MCU_B1.c: 1047: WREN = 1;
 12775  1AE8  1515               	bsf	21,2	;volatile
 12776                           
 12777                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12778  1AE9  319A  224F         	fcall	_Flash_Memory_Unlock
 12779                           
 12780                           ;MCU_B1.c: 1049: WREN = 0;
 12781  1AEB  0023               	movlb	3	; select bank3
 12782  1AEC  1115               	bcf	21,2	;volatile
 12783  1AED  0008               	return
 12784  1AEE                     __end_of_Flash_Memory_Erasing:	
 12785                           
 12786                           	psect	text81
 12787  06FC                     __ptext81:	
 12788 ;; *************** function _Flash_Memory_Initialization *****************
 12789 ;; Defined at:
 12790 ;;		line 932 in file "../src/MCU_B1.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;		None
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;  value           1    5[BANK0 ] unsigned char 
 12795 ;; Return value:  Size  Location     Type
 12796 ;;		None               void
 12797 ;; Registers used:
 12798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12808 ;;Total ram usage:        2 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    7
 12811 ;; This function calls:
 12812 ;;		_Flash_Memory_Read
 12813 ;;		_Flash_Memory_Write
 12814 ;;		_setMemory_Data
 12815 ;; This function is called by:
 12816 ;;		_main
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           
 12821                           ;psect for function _Flash_Memory_Initialization
 12822  06FC                     _Flash_Memory_Initialization:	
 12823                           
 12824                           ;MCU_B1.c: 933: char value = 0;
 12825                           
 12826                           ;incstack = 0
 12827                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12828  06FC  0020               	movlb	0	; select bank0
 12829  06FD  01A5               	clrf	Flash_Memory_Initialization@value
 12830                           
 12831                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12832  06FE  301F               	movlw	31
 12833  06FF  319D  258C  3186   	fcall	_Flash_Memory_Read
 12834  0702  3AAA               	xorlw	170
 12835  0703  1D03               	skipz
 12836  0704  2F7E               	goto	l8035
 12837                           
 12838                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12839  0705  3000               	movlw	0
 12840  0706  319D  258C  3186   	fcall	_Flash_Memory_Read
 12841  0709  0020               	movlb	0	; select bank0
 12842  070A  00A4               	movwf	??_Flash_Memory_Initialization
 12843  070B  0021               	movlb	1	; select bank1
 12844  070C  086E               	movf	_product^(0+128),w
 12845  070D  3E0C               	addlw	12
 12846  070E  0086               	movwf	6
 12847  070F  3001               	movlw	1	; select bank2/3
 12848  0710  0087               	movwf	7
 12849  0711  0020               	movlb	0	; select bank0
 12850  0712  0824               	movf	??_Flash_Memory_Initialization,w
 12851  0713  0081               	movwf	1
 12852                           
 12853                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12854  0714  3001               	movlw	1
 12855  0715  319D  258C  3186   	fcall	_Flash_Memory_Read
 12856  0718  0020               	movlb	0	; select bank0
 12857  0719  00A4               	movwf	??_Flash_Memory_Initialization
 12858  071A  0021               	movlb	1	; select bank1
 12859  071B  086E               	movf	_product^(0+128),w
 12860  071C  3E0D               	addlw	13
 12861  071D  0086               	movwf	6
 12862  071E  3001               	movlw	1	; select bank2/3
 12863  071F  0087               	movwf	7
 12864  0720  0020               	movlb	0	; select bank0
 12865  0721  0824               	movf	??_Flash_Memory_Initialization,w
 12866  0722  0081               	movwf	1
 12867                           
 12868                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12869  0723  3002               	movlw	2
 12870  0724  319D  258C  3186   	fcall	_Flash_Memory_Read
 12871  0727  0020               	movlb	0	; select bank0
 12872  0728  00A4               	movwf	??_Flash_Memory_Initialization
 12873  0729  0021               	movlb	1	; select bank1
 12874  072A  086E               	movf	_product^(0+128),w
 12875  072B  3E0E               	addlw	14
 12876  072C  0086               	movwf	6
 12877  072D  3001               	movlw	1	; select bank2/3
 12878  072E  0087               	movwf	7
 12879  072F  0020               	movlb	0	; select bank0
 12880  0730  0824               	movf	??_Flash_Memory_Initialization,w
 12881  0731  0081               	movwf	1
 12882                           
 12883                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12884  0732  3003               	movlw	3
 12885  0733  319D  258C  3186   	fcall	_Flash_Memory_Read
 12886  0736  0020               	movlb	0	; select bank0
 12887  0737  00A4               	movwf	??_Flash_Memory_Initialization
 12888  0738  0021               	movlb	1	; select bank1
 12889  0739  086E               	movf	_product^(0+128),w
 12890  073A  3E15               	addlw	21
 12891  073B  0086               	movwf	6
 12892  073C  3001               	movlw	1	; select bank2/3
 12893  073D  0087               	movwf	7
 12894  073E  0020               	movlb	0	; select bank0
 12895  073F  0824               	movf	??_Flash_Memory_Initialization,w
 12896  0740  0081               	movwf	1
 12897                           
 12898                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12899  0741  3004               	movlw	4
 12900  0742  319D  258C  3186   	fcall	_Flash_Memory_Read
 12901  0745  0020               	movlb	0	; select bank0
 12902  0746  00A4               	movwf	??_Flash_Memory_Initialization
 12903  0747  0021               	movlb	1	; select bank1
 12904  0748  086E               	movf	_product^(0+128),w
 12905  0749  3E16               	addlw	22
 12906  074A  0086               	movwf	6
 12907  074B  3001               	movlw	1	; select bank2/3
 12908  074C  0087               	movwf	7
 12909  074D  0020               	movlb	0	; select bank0
 12910  074E  0824               	movf	??_Flash_Memory_Initialization,w
 12911  074F  0081               	movwf	1
 12912                           
 12913                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12914  0750  3005               	movlw	5
 12915  0751  319D  258C  3186   	fcall	_Flash_Memory_Read
 12916  0754  0020               	movlb	0	; select bank0
 12917  0755  00A4               	movwf	??_Flash_Memory_Initialization
 12918  0756  0021               	movlb	1	; select bank1
 12919  0757  086E               	movf	_product^(0+128),w
 12920  0758  3E17               	addlw	23
 12921  0759  0086               	movwf	6
 12922  075A  3001               	movlw	1	; select bank2/3
 12923  075B  0087               	movwf	7
 12924  075C  0020               	movlb	0	; select bank0
 12925  075D  0824               	movf	??_Flash_Memory_Initialization,w
 12926  075E  0081               	movwf	1
 12927                           
 12928                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12929  075F  0021               	movlb	1	; select bank1
 12930  0760  086E               	movf	_product^(0+128),w
 12931  0761  3E0C               	addlw	12
 12932  0762  0086               	movwf	6
 12933  0763  3001               	movlw	1	; select bank2/3
 12934  0764  0087               	movwf	7
 12935  0765  0801               	movf	1,w
 12936  0766  3AFF               	xorlw	255
 12937  0767  1D03               	skipz
 12938  0768  0008               	return
 12939  0769  086E               	movf	_product^(0+128),w
 12940  076A  3E0D               	addlw	13
 12941  076B  0086               	movwf	6
 12942  076C  3001               	movlw	1	; select bank2/3
 12943  076D  0087               	movwf	7
 12944  076E  0801               	movf	1,w
 12945  076F  3AFF               	xorlw	255
 12946  0770  1D03               	skipz
 12947  0771  0008               	return
 12948  0772  086E               	movf	_product^(0+128),w
 12949  0773  3E0E               	addlw	14
 12950  0774  0086               	movwf	6
 12951  0775  3001               	movlw	1	; select bank2/3
 12952  0776  0087               	movwf	7
 12953  0777  0801               	movf	1,w
 12954  0778  3AFF               	xorlw	255
 12955  0779  1D03               	skipz
 12956  077A  0008               	return
 12957                           
 12958                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12959  077B  15AF               	bsf	_myMain^(0+128),3
 12960                           
 12961                           ;MCU_B1.c: 951: myMain.First = 1;
 12962  077C  16AF               	bsf	_myMain^(0+128),5
 12963                           
 12964                           ;MCU_B1.c: 952: }
 12965                           ;MCU_B1.c: 953: } else {
 12966  077D  0008               	return
 12967  077E                     l8035:	
 12968                           
 12969                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12970  077E  30FF               	movlw	255
 12971  077F  0020               	movlb	0	; select bank0
 12972  0780  00A4               	movwf	??_Flash_Memory_Initialization
 12973  0781  0824               	movf	??_Flash_Memory_Initialization,w
 12974  0782  00A0               	movwf	setMemory_Data@data
 12975  0783  3000               	movlw	0
 12976  0784  319A  22D6  3186   	fcall	_setMemory_Data
 12977                           
 12978                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12979  0787  30FF               	movlw	255
 12980  0788  0020               	movlb	0	; select bank0
 12981  0789  00A4               	movwf	??_Flash_Memory_Initialization
 12982  078A  0824               	movf	??_Flash_Memory_Initialization,w
 12983  078B  00A0               	movwf	setMemory_Data@data
 12984  078C  3001               	movlw	1
 12985  078D  319A  22D6  3186   	fcall	_setMemory_Data
 12986                           
 12987                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12988  0790  30FF               	movlw	255
 12989  0791  0020               	movlb	0	; select bank0
 12990  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12991  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12992  0794  00A0               	movwf	setMemory_Data@data
 12993  0795  3002               	movlw	2
 12994  0796  319A  22D6  3186   	fcall	_setMemory_Data
 12995                           
 12996                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12997  0799  30FF               	movlw	255
 12998  079A  0020               	movlb	0	; select bank0
 12999  079B  00A4               	movwf	??_Flash_Memory_Initialization
 13000  079C  0824               	movf	??_Flash_Memory_Initialization,w
 13001  079D  00A0               	movwf	setMemory_Data@data
 13002  079E  3003               	movlw	3
 13003  079F  319A  22D6  3186   	fcall	_setMemory_Data
 13004                           
 13005                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 13006  07A2  30FF               	movlw	255
 13007  07A3  0020               	movlb	0	; select bank0
 13008  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 13009  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 13010  07A6  00A0               	movwf	setMemory_Data@data
 13011  07A7  3004               	movlw	4
 13012  07A8  319A  22D6  3186   	fcall	_setMemory_Data
 13013                           
 13014                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 13015  07AB  30FF               	movlw	255
 13016  07AC  0020               	movlb	0	; select bank0
 13017  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 13018  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 13019  07AF  00A0               	movwf	setMemory_Data@data
 13020  07B0  3005               	movlw	5
 13021  07B1  319A  22D6  3186   	fcall	_setMemory_Data
 13022                           
 13023                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 13024  07B4  30AA               	movlw	170
 13025  07B5  0020               	movlb	0	; select bank0
 13026  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 13027  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 13028  07B8  00A0               	movwf	setMemory_Data@data
 13029  07B9  301F               	movlw	31
 13030  07BA  319A  22D6  3186   	fcall	_setMemory_Data
 13031                           
 13032                           ;MCU_B1.c: 966: GIE = 0;
 13033  07BD  138B               	bcf	11,7	;volatile
 13034                           
 13035                           ;MCU_B1.c: 967: Flash_Memory_Write();
 13036  07BE  3190  203B         	fcall	_Flash_Memory_Write
 13037                           
 13038                           ;MCU_B1.c: 968: GIE = 1;
 13039  07C0  178B               	bsf	11,7	;volatile
 13040                           
 13041                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 13042  07C1  0021               	movlb	1	; select bank1
 13043  07C2  15AF               	bsf	_myMain^(0+128),3
 13044                           
 13045                           ;MCU_B1.c: 970: myMain.First = 1;
 13046  07C3  16AF               	bsf	_myMain^(0+128),5
 13047                           
 13048                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 13049  07C4  1639               	bsf	(_myMain^(0+128)+10),4
 13050  07C5  0008               	return
 13051  07C6                     __end_of_Flash_Memory_Initialization:	
 13052                           
 13053                           	psect	text82
 13054  1AD6                     __ptext82:	
 13055 ;; *************** function _setMemory_Data *****************
 13056 ;; Defined at:
 13057 ;;		line 1094 in file "../src/MCU_B1.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  address         1    wreg     unsigned char 
 13060 ;;  data            1    0[BANK0 ] unsigned char 
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;  address         1    2[BANK0 ] unsigned char 
 13063 ;; Return value:  Size  Location     Type
 13064 ;;		None               void
 13065 ;; Registers used:
 13066 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13072 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;Total ram usage:        3 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    5
 13079 ;; This function calls:
 13080 ;;		Nothing
 13081 ;; This function is called by:
 13082 ;;		_Flash_Memory_Initialization
 13083 ;;		_Flash_Memory_Modify
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           
 13088                           ;psect for function _setMemory_Data
 13089  1AD6                     _setMemory_Data:	
 13090                           
 13091                           ;incstack = 0
 13092                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13093                           ;setMemory_Data@address stored from wreg
 13094  1AD6  0020               	movlb	0	; select bank0
 13095  1AD7  00A2               	movwf	setMemory_Data@address
 13096                           
 13097                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13098  1AD8  0820               	movf	setMemory_Data@data,w
 13099  1AD9  00A1               	movwf	??_setMemory_Data
 13100  1ADA  0822               	movf	setMemory_Data@address,w
 13101  1ADB  3E20               	addlw	_Memory& (0+255)
 13102  1ADC  0086               	movwf	6
 13103  1ADD  3002               	movlw	2	; select bank4/5
 13104  1ADE  0087               	movwf	7
 13105  1ADF  0821               	movf	??_setMemory_Data,w
 13106  1AE0  0081               	movwf	1
 13107  1AE1  0008               	return
 13108  1AE2                     __end_of_setMemory_Data:	
 13109                           
 13110                           	psect	text83
 13111  103B                     __ptext83:	
 13112 ;; *************** function _Flash_Memory_Write *****************
 13113 ;; Defined at:
 13114 ;;		line 1023 in file "../src/MCU_B1.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;		None
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  i               1    1[BANK0 ] unsigned char 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;		None               void
 13121 ;; Registers used:
 13122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;Total ram usage:        2 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    6
 13135 ;; This function calls:
 13136 ;;		_Flash_Memory_Unlock
 13137 ;; This function is called by:
 13138 ;;		_Flash_Memory_Initialization
 13139 ;;		_Flash_Memory_Modify
 13140 ;; This function uses a non-reentrant model
 13141 ;;
 13142                           
 13143                           
 13144                           ;psect for function _Flash_Memory_Write
 13145  103B                     _Flash_Memory_Write:	
 13146                           
 13147                           ;MCU_B1.c: 1024: char i = 0;
 13148                           
 13149                           ;incstack = 0
 13150                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13151  103B  0020               	movlb	0	; select bank0
 13152  103C  01A1               	clrf	Flash_Memory_Write@i
 13153                           
 13154                           ;MCU_B1.c: 1025: CFGS = 0;
 13155  103D  0023               	movlb	3	; select bank3
 13156  103E  1315               	bcf	21,6	;volatile
 13157                           
 13158                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13159  103F  3030               	movlw	48
 13160  1040  0092               	movwf	18	;volatile
 13161                           
 13162                           ;MCU_B1.c: 1027: PMDATH = 0;
 13163  1041  0194               	clrf	20	;volatile
 13164                           
 13165                           ;MCU_B1.c: 1028: FREE = 0;
 13166  1042  1215               	bcf	21,4	;volatile
 13167                           
 13168                           ;MCU_B1.c: 1029: LWLO = 1;
 13169  1043  1695               	bsf	21,5	;volatile
 13170                           
 13171                           ;MCU_B1.c: 1030: WREN = 1;
 13172  1044  1515               	bsf	21,2	;volatile
 13173                           
 13174                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13175  1045  0020               	movlb	0	; select bank0
 13176  1046  01A1               	clrf	Flash_Memory_Write@i
 13177  1047  3020               	movlw	32
 13178  1048  0221               	subwf	Flash_Memory_Write@i,w
 13179  1049  1803               	btfsc	3,0
 13180  104A  2863               	goto	l1276
 13181  104B                     l7149:	
 13182                           
 13183                           ;MCU_B1.c: 1032: PMADRL = i;
 13184  104B  0821               	movf	Flash_Memory_Write@i,w
 13185  104C  0023               	movlb	3	; select bank3
 13186  104D  0091               	movwf	17	;volatile
 13187                           
 13188                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13189  104E  0020               	movlb	0	; select bank0
 13190  104F  0821               	movf	Flash_Memory_Write@i,w
 13191  1050  3E20               	addlw	_Memory& (0+255)
 13192  1051  0086               	movwf	6
 13193  1052  3002               	movlw	2	; select bank4/5
 13194  1053  0087               	movwf	7
 13195  1054  0801               	movf	1,w
 13196  1055  0023               	movlb	3	; select bank3
 13197  1056  0093               	movwf	19	;volatile
 13198                           
 13199                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13200  1057  319A  224F  3190   	fcall	_Flash_Memory_Unlock
 13201  105A  3001               	movlw	1
 13202  105B  0020               	movlb	0	; select bank0
 13203  105C  00A0               	movwf	??_Flash_Memory_Write
 13204  105D  0820               	movf	??_Flash_Memory_Write,w
 13205  105E  07A1               	addwf	Flash_Memory_Write@i,f
 13206  105F  3020               	movlw	32
 13207  1060  0221               	subwf	Flash_Memory_Write@i,w
 13208  1061  1C03               	skipc
 13209  1062  284B               	goto	l7149
 13210  1063                     l1276:	
 13211                           
 13212                           ;MCU_B1.c: 1035: }
 13213                           ;MCU_B1.c: 1036: LWLO = 0;
 13214  1063  0023               	movlb	3	; select bank3
 13215  1064  1295               	bcf	21,5	;volatile
 13216                           
 13217                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13218  1065  319A  224F         	fcall	_Flash_Memory_Unlock
 13219                           
 13220                           ;MCU_B1.c: 1038: WREN = 0;
 13221  1067  0023               	movlb	3	; select bank3
 13222  1068  1115               	bcf	21,2	;volatile
 13223  1069  0008               	return
 13224  106A                     __end_of_Flash_Memory_Write:	
 13225                           
 13226                           	psect	text84
 13227  1A4F                     __ptext84:	
 13228 ;; *************** function _Flash_Memory_Unlock *****************
 13229 ;; Defined at:
 13230 ;;		line 1002 in file "../src/MCU_B1.c"
 13231 ;; Parameters:    Size  Location     Type
 13232 ;;		None
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;		None
 13235 ;; Return value:  Size  Location     Type
 13236 ;;		None               void
 13237 ;; Registers used:
 13238 ;;		wreg
 13239 ;; Tracked objects:
 13240 ;;		On entry : 0/0
 13241 ;;		On exit  : 0/0
 13242 ;;		Unchanged: 0/0
 13243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;Total ram usage:        0 bytes
 13249 ;; Hardware stack levels used:    1
 13250 ;; Hardware stack levels required when called:    5
 13251 ;; This function calls:
 13252 ;;		Nothing
 13253 ;; This function is called by:
 13254 ;;		_Flash_Memory_Write
 13255 ;;		_Flash_Memory_Erasing
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           
 13260                           ;psect for function _Flash_Memory_Unlock
 13261  1A4F                     _Flash_Memory_Unlock:	
 13262                           
 13263                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13264                           
 13265                           ;incstack = 0
 13266                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13267  1A4F  3055               	movlw	85
 13268  1A50  0023               	movlb	3	; select bank3
 13269  1A51  0096               	movwf	22	;volatile
 13270                           
 13271                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13272  1A52  30AA               	movlw	170
 13273  1A53  0096               	movwf	22	;volatile
 13274                           
 13275                           ;MCU_B1.c: 1005: WR = 1;
 13276  1A54  1495               	bsf	21,1	;volatile
 13277                           
 13278                           ;MCU_B1.c: 1006: __nop();
 13279  1A55  0000               	nop
 13280                           
 13281                           ;MCU_B1.c: 1007: __nop();
 13282  1A56  0000               	nop
 13283  1A57  0008               	return
 13284  1A58                     __end_of_Flash_Memory_Unlock:	
 13285                           
 13286                           	psect	text85
 13287  1D8C                     __ptext85:	
 13288 ;; *************** function _Flash_Memory_Read *****************
 13289 ;; Defined at:
 13290 ;;		line 1011 in file "../src/MCU_B1.c"
 13291 ;; Parameters:    Size  Location     Type
 13292 ;;  address         1    wreg     unsigned char 
 13293 ;; Auto vars:     Size  Location     Type
 13294 ;;  address         1    2[BANK0 ] unsigned char 
 13295 ;;  ret             1    3[BANK0 ] unsigned char 
 13296 ;;  i               1    1[BANK0 ] unsigned char 
 13297 ;; Return value:  Size  Location     Type
 13298 ;;                  1    wreg      unsigned char 
 13299 ;; Registers used:
 13300 ;;		wreg, status,2
 13301 ;; Tracked objects:
 13302 ;;		On entry : 0/0
 13303 ;;		On exit  : 0/0
 13304 ;;		Unchanged: 0/0
 13305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13309 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;Total ram usage:        4 bytes
 13311 ;; Hardware stack levels used:    1
 13312 ;; Hardware stack levels required when called:    5
 13313 ;; This function calls:
 13314 ;;		Nothing
 13315 ;; This function is called by:
 13316 ;;		_Flash_Memory_Initialization
 13317 ;;		_Flash_Memory_Modify
 13318 ;; This function uses a non-reentrant model
 13319 ;;
 13320                           
 13321                           
 13322                           ;psect for function _Flash_Memory_Read
 13323  1D8C                     _Flash_Memory_Read:	
 13324                           
 13325                           ;incstack = 0
 13326                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13327                           ;Flash_Memory_Read@address stored from wreg
 13328  1D8C  0020               	movlb	0	; select bank0
 13329  1D8D  00A2               	movwf	Flash_Memory_Read@address
 13330                           
 13331                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13332  1D8E  01A1               	clrf	Flash_Memory_Read@i
 13333  1D8F  01A3               	clrf	Flash_Memory_Read@ret
 13334                           
 13335                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13336  1D90  3030               	movlw	48
 13337  1D91  0023               	movlb	3	; select bank3
 13338  1D92  0092               	movwf	18	;volatile
 13339                           
 13340                           ;MCU_B1.c: 1014: PMADRL = address;
 13341  1D93  0020               	movlb	0	; select bank0
 13342  1D94  0822               	movf	Flash_Memory_Read@address,w
 13343  1D95  0023               	movlb	3	; select bank3
 13344  1D96  0091               	movwf	17	;volatile
 13345                           
 13346                           ;MCU_B1.c: 1015: CFGS = 0;
 13347  1D97  1315               	bcf	21,6	;volatile
 13348                           
 13349                           ;MCU_B1.c: 1016: RD = 1;
 13350  1D98  1415               	bsf	21,0	;volatile
 13351                           
 13352                           ;MCU_B1.c: 1017: i = PMDATH;
 13353  1D99  0814               	movf	20,w	;volatile
 13354  1D9A  0020               	movlb	0	; select bank0
 13355  1D9B  00A0               	movwf	??_Flash_Memory_Read
 13356  1D9C  0820               	movf	??_Flash_Memory_Read,w
 13357  1D9D  00A1               	movwf	Flash_Memory_Read@i
 13358                           
 13359                           ;MCU_B1.c: 1018: ret = PMDATL;
 13360  1D9E  0023               	movlb	3	; select bank3
 13361  1D9F  0813               	movf	19,w	;volatile
 13362  1DA0  0020               	movlb	0	; select bank0
 13363  1DA1  00A0               	movwf	??_Flash_Memory_Read
 13364  1DA2  0820               	movf	??_Flash_Memory_Read,w
 13365  1DA3  00A3               	movwf	Flash_Memory_Read@ret
 13366                           
 13367                           ;MCU_B1.c: 1019: return ret;
 13368  1DA4  0823               	movf	Flash_Memory_Read@ret,w
 13369  1DA5  0008               	return
 13370  1DA6                     __end_of_Flash_Memory_Read:	
 13371                           
 13372                           	psect	text86
 13373  0554                     __ptext86:	
 13374 ;; *************** function _Exception_Main *****************
 13375 ;; Defined at:
 13376 ;;		line 499 in file "../src/Main_B1.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;		None
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  i               2   18[BANK0 ] int 
 13381 ;;  i               2   16[BANK0 ] int 
 13382 ;;  lights          1   21[BANK0 ] unsigned char 
 13383 ;;  error           1   20[BANK0 ] unsigned char 
 13384 ;;  count           1   15[BANK0 ] unsigned char 
 13385 ;;  status          1   14[BANK0 ] unsigned char 
 13386 ;; Return value:  Size  Location     Type
 13387 ;;		None               void
 13388 ;; Registers used:
 13389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;Total ram usage:        9 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; Hardware stack levels required when called:    7
 13402 ;; This function calls:
 13403 ;;		_getDimmerLights_Line
 13404 ;;		_getDimmerLights_Status
 13405 ;;		_getMain_All_Error_Status
 13406 ;;		_getMain_All_LightsStatus
 13407 ;;		_setBuz
 13408 ;;		_setDimmerLights_SwOff
 13409 ;;		_setLED
 13410 ;; This function is called by:
 13411 ;;		_main
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           
 13416                           ;psect for function _Exception_Main
 13417  0554                     _Exception_Main:	
 13418                           
 13419                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13420                           
 13421                           ;incstack = 0
 13422                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13423  0554  3000               	movlw	0
 13424  0555  3190  206A  3185   	fcall	_getMain_All_Error_Status
 13425  0558  0020               	movlb	0	; select bank0
 13426  0559  00AD               	movwf	??_Exception_Main
 13427  055A  082D               	movf	??_Exception_Main,w
 13428  055B  00B4               	movwf	Exception_Main@error
 13429                           
 13430                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13431  055C  01B5               	clrf	Exception_Main@lights
 13432  055D  01AF               	clrf	Exception_Main@count
 13433  055E  0AAF               	incf	Exception_Main@count,f
 13434                           
 13435                           ;Main_B1.c: 502: char status = 0;
 13436  055F  01AE               	clrf	Exception_Main@status
 13437                           
 13438                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13439  0560  0021               	movlb	1	; select bank1
 13440  0561  1DB9               	btfss	(_myMain^(0+128)+10),3
 13441  0562  2D72               	goto	l8383
 13442                           
 13443                           ;Main_B1.c: 505: if (error == 0) {
 13444  0563  0020               	movlb	0	; select bank0
 13445  0564  08B4               	movf	Exception_Main@error,f
 13446  0565  1D03               	skipz
 13447  0566  0008               	return
 13448                           
 13449                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13450  0567  0021               	movlb	1	; select bank1
 13451  0568  11B9               	bcf	(_myMain^(0+128)+10),3
 13452                           
 13453                           ;Main_B1.c: 509: setLED(99, 10);
 13454  0569  300A               	movlw	10
 13455  056A  0020               	movlb	0	; select bank0
 13456  056B  00AD               	movwf	??_Exception_Main
 13457  056C  082D               	movf	??_Exception_Main,w
 13458  056D  00A2               	movwf	setLED@command
 13459  056E  3063               	movlw	99
 13460  056F  3191  2176         	fcall	_setLED
 13461                           
 13462                           ;Main_B1.c: 522: }
 13463                           ;Main_B1.c: 523: } else {
 13464  0571  0008               	return
 13465  0572                     l8383:	
 13466                           
 13467                           ;Main_B1.c: 524: if (error != 0) {
 13468  0572  0020               	movlb	0	; select bank0
 13469  0573  0834               	movf	Exception_Main@error,w
 13470  0574  1903               	btfsc	3,2
 13471  0575  0008               	return
 13472                           
 13473                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13474  0576  0021               	movlb	1	; select bank1
 13475  0577  15B9               	bsf	(_myMain^(0+128)+10),3
 13476                           
 13477                           ;Main_B1.c: 527: setLED(99, 11);
 13478  0578  300B               	movlw	11
 13479  0579  0020               	movlb	0	; select bank0
 13480  057A  00AD               	movwf	??_Exception_Main
 13481  057B  082D               	movf	??_Exception_Main,w
 13482  057C  00A2               	movwf	setLED@command
 13483  057D  3063               	movlw	99
 13484  057E  3191  2176  3185   	fcall	_setLED
 13485                           
 13486                           ;Main_B1.c: 538: switch (error) {
 13487  0581  2E1E               	goto	l8431
 13488  0582                     l8389:	
 13489                           ;Main_B1.c: 539: case 2:
 13490                           
 13491                           
 13492                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13493  0582  319A  2258  3185   	fcall	_getMain_All_LightsStatus
 13494  0585  3A01               	xorlw	1
 13495  0586  1D03               	skipz
 13496  0587  2D91               	goto	l8393
 13497                           
 13498                           ;Main_B1.c: 547: setBuz(10, 300);
 13499  0588  302C               	movlw	44
 13500  0589  0020               	movlb	0	; select bank0
 13501  058A  00A9               	movwf	setBuz@time
 13502  058B  3001               	movlw	1
 13503  058C  00AA               	movwf	setBuz@time+1
 13504  058D  300A               	movlw	10
 13505  058E  3194  242E  3185   	fcall	_setBuz
 13506  0591                     l8393:	
 13507                           
 13508                           ;Main_B1.c: 548: }
 13509                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13510  0591  0020               	movlb	0	; select bank0
 13511  0592  01B0               	clrf	Exception_Main@i
 13512  0593  01B1               	clrf	Exception_Main@i+1
 13513  0594                     l8403:	
 13514  0594  0831               	movf	Exception_Main@i+1,w
 13515  0595  3A80               	xorlw	128
 13516  0596  00AD               	movwf	??_Exception_Main
 13517  0597  3080               	movlw	128
 13518  0598  022D               	subwf	??_Exception_Main,w
 13519  0599  1D03               	skipz
 13520  059A  2D9D               	goto	u8695
 13521  059B  082F               	movf	Exception_Main@count,w
 13522  059C  0230               	subwf	Exception_Main@i,w
 13523  059D                     u8695:	
 13524  059D  1803               	btfsc	3,0
 13525  059E  2DBF               	goto	u8690
 13526                           
 13527                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13528  059F  0020               	movlb	0	; select bank0
 13529  05A0  0830               	movf	Exception_Main@i,w
 13530  05A1  3E01               	addlw	1
 13531  05A2  319B  2377  3185   	fcall	_getDimmerLights_Status
 13532  05A5  3A01               	xorlw	1
 13533  05A6  1D03               	skipz
 13534  05A7  2DB9               	goto	l8401
 13535                           
 13536                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13537  05A8  0021               	movlb	1	; select bank1
 13538  05A9  084C               	movf	_DimmerLights^(0+128),w
 13539  05AA  0086               	movwf	6
 13540  05AB  3001               	movlw	1	; select bank2/3
 13541  05AC  0087               	movwf	7
 13542  05AD  1401               	bsf	1,0
 13543                           
 13544                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13545  05AE  0A4C               	incf	_DimmerLights^(0+128),w
 13546  05AF  0086               	movwf	6
 13547  05B0  3001               	movlw	1	; select bank2/3
 13548  05B1  0087               	movwf	7
 13549  05B2  1001               	bcf	1,0
 13550                           
 13551                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13552  05B3  0020               	movlb	0	; select bank0
 13553  05B4  0830               	movf	Exception_Main@i,w
 13554  05B5  3E01               	addlw	1
 13555  05B6  3192  22AD  3185   	fcall	_setDimmerLights_SwOff
 13556  05B9                     l8401:	
 13557  05B9  3001               	movlw	1
 13558  05BA  0020               	movlb	0	; select bank0
 13559  05BB  07B0               	addwf	Exception_Main@i,f
 13560  05BC  3000               	movlw	0
 13561  05BD  3DB1               	addwfc	Exception_Main@i+1,f
 13562  05BE  2D94               	goto	l8403
 13563  05BF                     u8690:	
 13564  05BF  0020               	movlb	0	; select bank0
 13565  05C0  0008               	return
 13566  05C1                     l8405:	
 13567                           ;Main_B1.c: 561: case 3:
 13568                           
 13569                           ;Main_B1.c: 556: }
 13570                           ;Main_B1.c: 557: }
 13571                           ;Main_B1.c: 560: break;
 13572                           
 13573                           
 13574                           ;Main_B1.c: 563: setBuz(5, 300);
 13575  05C1  302C               	movlw	44
 13576  05C2  0020               	movlb	0	; select bank0
 13577  05C3  00A9               	movwf	setBuz@time
 13578  05C4  3001               	movlw	1
 13579  05C5  00AA               	movwf	setBuz@time+1
 13580  05C6  3005               	movlw	5
 13581  05C7  3194  242E  3185   	fcall	_setBuz
 13582                           
 13583                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13584  05CA  319A  2262  3185   	fcall	_getDimmerLights_Line
 13585  05CD  0020               	movlb	0	; select bank0
 13586  05CE  00AD               	movwf	??_Exception_Main
 13587  05CF  082D               	movf	??_Exception_Main,w
 13588  05D0  00B5               	movwf	Exception_Main@lights
 13589                           
 13590                           ;Main_B1.c: 565: if (lights == 0) {
 13591  05D1  08B5               	movf	Exception_Main@lights,f
 13592  05D2  1D03               	skipz
 13593  05D3  2E03               	goto	l8423
 13594                           
 13595                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13596  05D4  01B2               	clrf	Exception_Main@i_3637
 13597  05D5  01B3               	clrf	Exception_Main@i_3637+1
 13598  05D6                     l8421:	
 13599  05D6  0833               	movf	Exception_Main@i_3637+1,w
 13600  05D7  3A80               	xorlw	128
 13601  05D8  00AD               	movwf	??_Exception_Main
 13602  05D9  3080               	movlw	128
 13603  05DA  022D               	subwf	??_Exception_Main,w
 13604  05DB  1D03               	skipz
 13605  05DC  2DDF               	goto	u8725
 13606  05DD  082F               	movf	Exception_Main@count,w
 13607  05DE  0232               	subwf	Exception_Main@i_3637,w
 13608  05DF                     u8725:	
 13609  05DF  1803               	btfsc	3,0
 13610  05E0  2E01               	goto	u8720
 13611                           
 13612                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13613  05E1  0020               	movlb	0	; select bank0
 13614  05E2  0832               	movf	Exception_Main@i_3637,w
 13615  05E3  3E01               	addlw	1
 13616  05E4  319B  2377  3185   	fcall	_getDimmerLights_Status
 13617  05E7  3A01               	xorlw	1
 13618  05E8  1D03               	skipz
 13619  05E9  2DFB               	goto	l8419
 13620                           
 13621                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13622  05EA  0021               	movlb	1	; select bank1
 13623  05EB  084C               	movf	_DimmerLights^(0+128),w
 13624  05EC  0086               	movwf	6
 13625  05ED  3001               	movlw	1	; select bank2/3
 13626  05EE  0087               	movwf	7
 13627  05EF  1401               	bsf	1,0
 13628                           
 13629                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13630  05F0  0A4C               	incf	_DimmerLights^(0+128),w
 13631  05F1  0086               	movwf	6
 13632  05F2  3001               	movlw	1	; select bank2/3
 13633  05F3  0087               	movwf	7
 13634  05F4  1001               	bcf	1,0
 13635                           
 13636                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13637  05F5  0020               	movlb	0	; select bank0
 13638  05F6  0832               	movf	Exception_Main@i_3637,w
 13639  05F7  3E01               	addlw	1
 13640  05F8  3192  22AD  3185   	fcall	_setDimmerLights_SwOff
 13641  05FB                     l8419:	
 13642  05FB  3001               	movlw	1
 13643  05FC  0020               	movlb	0	; select bank0
 13644  05FD  07B2               	addwf	Exception_Main@i_3637,f
 13645  05FE  3000               	movlw	0
 13646  05FF  3DB3               	addwfc	Exception_Main@i_3637+1,f
 13647  0600  2DD6               	goto	l8421
 13648  0601                     u8720:	
 13649  0601  0020               	movlb	0	; select bank0
 13650  0602  0008               	return
 13651  0603                     l8423:	
 13652                           ;Main_B1.c: 573: }
 13653                           ;Main_B1.c: 574: }
 13654                           ;Main_B1.c: 575: } else {
 13655                           
 13656                           
 13657                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13658  0603  0020               	movlb	0	; select bank0
 13659  0604  0835               	movf	Exception_Main@lights,w
 13660  0605  319B  2377  3185   	fcall	_getDimmerLights_Status
 13661  0608  3A01               	xorlw	1
 13662  0609  1903               	btfsc	3,2
 13663  060A  2E0D               	goto	l8425
 13664  060B  0020               	movlb	0	; select bank0
 13665  060C  0008               	return
 13666  060D                     l8425:	
 13667                           
 13668                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13669  060D  0021               	movlb	1	; select bank1
 13670  060E  084C               	movf	_DimmerLights^(0+128),w
 13671  060F  0086               	movwf	6
 13672  0610  3001               	movlw	1	; select bank2/3
 13673  0611  0087               	movwf	7
 13674  0612  1401               	bsf	1,0
 13675                           
 13676                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13677  0613  0A4C               	incf	_DimmerLights^(0+128),w
 13678  0614  0086               	movwf	6
 13679  0615  3001               	movlw	1	; select bank2/3
 13680  0616  0087               	movwf	7
 13681  0617  1001               	bcf	1,0
 13682                           
 13683                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13684  0618  0020               	movlb	0	; select bank0
 13685  0619  0835               	movf	Exception_Main@lights,w
 13686  061A  3192  22AD         	fcall	_setDimmerLights_SwOff
 13687  061C  0020               	movlb	0	; select bank0
 13688  061D  0008               	return
 13689  061E                     l8431:	
 13690                           ;Main_B1.c: 586: }
 13691                           
 13692                           ;Main_B1.c: 582: }
 13693                           ;Main_B1.c: 583: }
 13694                           ;Main_B1.c: 585: break;
 13695                           
 13696  061E  0020               	movlb	0	; select bank0
 13697  061F  0834               	movf	Exception_Main@error,w
 13698                           
 13699                           ; Switch size 1, requested type "space"
 13700                           ; Number of cases is 2, Range of values is 2 to 3
 13701                           ; switch strategies available:
 13702                           ; Name         Instructions Cycles
 13703                           ; simple_byte            7     4 (average)
 13704                           ; direct_byte           13     9 (fixed)
 13705                           ; jumptable            263     9 (fixed)
 13706                           ;	Chosen strategy is simple_byte
 13707  0620  3A02               	xorlw	2	; case 2
 13708  0621  1903               	skipnz
 13709  0622  2D82               	goto	l8389
 13710  0623  3A01               	xorlw	1	; case 3
 13711  0624  1903               	skipnz
 13712  0625  2DC1               	goto	l8405
 13713  0626  2E28               	goto	l1518
 13714  0627  0008               	return
 13715  0628                     l1518:	
 13716  0628  0008               	return
 13717  0629                     __end_of_Exception_Main:	
 13718                           
 13719                           	psect	text87
 13720  1A62                     __ptext87:	
 13721 ;; *************** function _getDimmerLights_Line *****************
 13722 ;; Defined at:
 13723 ;;		line 1113 in file "../src/Dimmer_B1.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;		None
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  line            1    0[BANK0 ] unsigned char 
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  1    wreg      unsigned char 
 13730 ;; Registers used:
 13731 ;;		wreg, status,2
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;Total ram usage:        1 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    5
 13744 ;; This function calls:
 13745 ;;		Nothing
 13746 ;; This function is called by:
 13747 ;;		_Exception_Main
 13748 ;; This function uses a non-reentrant model
 13749 ;;
 13750                           
 13751                           
 13752                           ;psect for function _getDimmerLights_Line
 13753  1A62                     _getDimmerLights_Line:	
 13754                           
 13755                           ;Dimmer_B1.c: 1114: char line = 0;
 13756                           
 13757                           ;incstack = 0
 13758                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13759  1A62  0020               	movlb	0	; select bank0
 13760  1A63  01A0               	clrf	getDimmerLights_Line@line
 13761                           
 13762                           ;Dimmer_B1.c: 1116: if (DimmerLights1.Line == 1) {
 13763  1A64  0022               	movlb	2	; select bank2
 13764  1A65  1CE2               	btfss	(_DimmerLights1^(0+256)+1),1
 13765  1A66  2A6A               	goto	l7435
 13766                           
 13767                           ;Dimmer_B1.c: 1117: line = 1;
 13768  1A67  0020               	movlb	0	; select bank0
 13769  1A68  01A0               	clrf	getDimmerLights_Line@line
 13770  1A69  0AA0               	incf	getDimmerLights_Line@line,f
 13771  1A6A                     l7435:	
 13772                           
 13773                           ;Dimmer_B1.c: 1118: }
 13774                           ;Dimmer_B1.c: 1130: return line;
 13775  1A6A  0020               	movlb	0	; select bank0
 13776  1A6B  0820               	movf	getDimmerLights_Line@line,w
 13777  1A6C  0008               	return
 13778  1A6D                     __end_of_getDimmerLights_Line:	
 13779                           
 13780                           	psect	text88
 13781  1EA5                     __ptext88:	
 13782 ;; *************** function _DimmerLights_Main *****************
 13783 ;; Defined at:
 13784 ;;		line 832 in file "../src/Dimmer_B1.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;		None
 13787 ;; Auto vars:     Size  Location     Type
 13788 ;;		None
 13789 ;; Return value:  Size  Location     Type
 13790 ;;		None               void
 13791 ;; Registers used:
 13792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13793 ;; Tracked objects:
 13794 ;;		On entry : 0/0
 13795 ;;		On exit  : 0/0
 13796 ;;		Unchanged: 0/0
 13797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;Total ram usage:        0 bytes
 13803 ;; Hardware stack levels used:    1
 13804 ;; Hardware stack levels required when called:   10
 13805 ;; This function calls:
 13806 ;;		_DimmerLights_DimmingFunction
 13807 ;;		_getLoad_OK
 13808 ;;		_getMain_All_Error_Status
 13809 ;;		_getMain_All_LightsStatus
 13810 ;;		_setDimmerLights_Main
 13811 ;; This function is called by:
 13812 ;;		_main
 13813 ;; This function uses a non-reentrant model
 13814 ;;
 13815                           
 13816                           
 13817                           ;psect for function _DimmerLights_Main
 13818  1EA5                     _DimmerLights_Main:	
 13819                           
 13820                           ;Dimmer_B1.c: 835: if (Dimmer.LoadGO == 1) {
 13821                           
 13822                           ;incstack = 0
 13823                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13824  1EA5  0022               	movlb	2	; select bank2
 13825  1EA6  1CAC               	btfss	_Dimmer^(0+256),1
 13826  1EA7  2EBD               	goto	l7987
 13827                           
 13828                           ;Dimmer_B1.c: 836: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13829  1EA8  319A  2225  319E   	fcall	_getLoad_OK
 13830  1EAB  3A01               	xorlw	1
 13831  1EAC  1903               	skipnz
 13832  1EAD  2EBB               	goto	l769
 13833  1EAE  3000               	movlw	0
 13834  1EAF  3190  206A  319E   	fcall	_getMain_All_Error_Status
 13835  1EB2  3800               	iorlw	0
 13836  1EB3  1D03               	skipz
 13837  1EB4  2EBB               	goto	l769
 13838  1EB5  319A  2258  319E   	fcall	_getMain_All_LightsStatus
 13839  1EB8  3800               	iorlw	0
 13840  1EB9  1D03               	skipz
 13841  1EBA  2EBD               	goto	l7987
 13842  1EBB                     l769:	
 13843                           
 13844                           ;Dimmer_B1.c: 837: Dimmer.LoadGO = 0;
 13845  1EBB  0022               	movlb	2	; select bank2
 13846  1EBC  10AC               	bcf	_Dimmer^(0+256),1
 13847  1EBD                     l7987:	
 13848                           
 13849                           ;Dimmer_B1.c: 838: }
 13850                           ;Dimmer_B1.c: 839: }
 13851                           ;Dimmer_B1.c: 844: setDimmerLights_Main(1);
 13852  1EBD  3001               	movlw	1
 13853  1EBE  3197  2795  319E   	fcall	_setDimmerLights_Main
 13854                           
 13855                           ;Dimmer_B1.c: 847: DimmerLights_DimmingFunction(1);
 13856  1EC1  3001               	movlw	1
 13857  1EC2  3192  22F3         	fcall	_DimmerLights_DimmingFunction
 13858  1EC4  0008               	return
 13859  1EC5                     __end_of_DimmerLights_Main:	
 13860                           
 13861                           	psect	text89
 13862  1795                     __ptext89:	
 13863 ;; *************** function _setDimmerLights_Main *****************
 13864 ;; Defined at:
 13865 ;;		line 870 in file "../src/Dimmer_B1.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  lights          1    wreg     unsigned char 
 13868 ;; Auto vars:     Size  Location     Type
 13869 ;;  lights          1    1[BANK1 ] unsigned char 
 13870 ;; Return value:  Size  Location     Type
 13871 ;;		None               void
 13872 ;; Registers used:
 13873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13874 ;; Tracked objects:
 13875 ;;		On entry : 0/0
 13876 ;;		On exit  : 0/0
 13877 ;;		Unchanged: 0/0
 13878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;Total ram usage:        1 bytes
 13884 ;; Hardware stack levels used:    1
 13885 ;; Hardware stack levels required when called:    9
 13886 ;; This function calls:
 13887 ;;		_DimmerLights_SelectPointer
 13888 ;;		_getDimmerLights_Allow_Condition
 13889 ;;		_getMain_All_LightsStatus
 13890 ;;		_setDimmerLights_Dimming
 13891 ;;		_setDimmerLights_OnOff
 13892 ;; This function is called by:
 13893 ;;		_DimmerLights_Main
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           
 13898                           ;psect for function _setDimmerLights_Main
 13899  1795                     _setDimmerLights_Main:	
 13900                           
 13901                           ;incstack = 0
 13902                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13903                           ;setDimmerLights_Main@lights stored from wreg
 13904  1795  0021               	movlb	1	; select bank1
 13905  1796  00E6               	movwf	setDimmerLights_Main@lights^(0+128)
 13906                           
 13907                           ;Dimmer_B1.c: 872: DimmerLights_SelectPointer(lights);
 13908  1797  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13909  1798  319A  229A  3197   	fcall	_DimmerLights_SelectPointer
 13910                           
 13911                           ;Dimmer_B1.c: 873: if (DimmerLights->Trigger == 1) {
 13912  179B  0021               	movlb	1	; select bank1
 13913  179C  084C               	movf	_DimmerLights^(0+128),w
 13914  179D  0086               	movwf	6
 13915  179E  3001               	movlw	1	; select bank2/3
 13916  179F  0087               	movwf	7
 13917  17A0  1C81               	btfss	1,1
 13918  17A1  2FC4               	goto	l7379
 13919                           
 13920                           ;Dimmer_B1.c: 874: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13921  17A2  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13922  17A3  319C  24FE  3197   	fcall	_getDimmerLights_Allow_Condition
 13923  17A6  3800               	iorlw	0
 13924  17A7  1D03               	skipz
 13925  17A8  0008               	return
 13926                           
 13927                           ;Dimmer_B1.c: 875: DimmerLights->Trigger = 0;
 13928  17A9  0021               	movlb	1	; select bank1
 13929  17AA  084C               	movf	_DimmerLights^(0+128),w
 13930  17AB  0086               	movwf	6
 13931  17AC  3001               	movlw	1	; select bank2/3
 13932  17AD  0087               	movwf	7
 13933  17AE  1081               	bcf	1,1
 13934                           
 13935                           ;Dimmer_B1.c: 876: if (DimmerLights->Switch == 1) {
 13936  17AF  084C               	movf	_DimmerLights^(0+128),w
 13937  17B0  0086               	movwf	6
 13938  17B1  3001               	movlw	1	; select bank2/3
 13939  17B2  0087               	movwf	7
 13940  17B3  1D01               	btfss	1,2
 13941  17B4  2FBD               	goto	l7377
 13942                           
 13943                           ;Dimmer_B1.c: 877: setDimmerLights_OnOff(lights, 1);
 13944  17B5  0020               	movlb	0	; select bank0
 13945  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13946  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13947  17B8  0021               	movlb	1	; select bank1
 13948  17B9  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13949  17BA  318F  273A         	fcall	_setDimmerLights_OnOff
 13950                           
 13951                           ;Dimmer_B1.c: 878: } else {
 13952  17BC  0008               	return
 13953  17BD                     l7377:	
 13954                           
 13955                           ;Dimmer_B1.c: 879: setDimmerLights_OnOff(lights, 0);
 13956  17BD  0020               	movlb	0	; select bank0
 13957  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13958  17BF  0021               	movlb	1	; select bank1
 13959  17C0  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13960  17C1  318F  273A         	fcall	_setDimmerLights_OnOff
 13961                           
 13962                           ;Dimmer_B1.c: 880: }
 13963                           ;Dimmer_B1.c: 881: }
 13964                           ;Dimmer_B1.c: 882: } else {
 13965  17C3  0008               	return
 13966  17C4                     l7379:	
 13967                           
 13968                           ;Dimmer_B1.c: 883: if (getMain_All_LightsStatus() == 1) {
 13969  17C4  319A  2258  3197   	fcall	_getMain_All_LightsStatus
 13970  17C7  3A01               	xorlw	1
 13971  17C8  1D03               	skipz
 13972  17C9  2FF3               	goto	l7391
 13973                           
 13974                           ;Dimmer_B1.c: 884: if (DimmerLights->DimmingTrigger == 1) {
 13975  17CA  0021               	movlb	1	; select bank1
 13976  17CB  084C               	movf	_DimmerLights^(0+128),w
 13977  17CC  0086               	movwf	6
 13978  17CD  3001               	movlw	1	; select bank2/3
 13979  17CE  0087               	movwf	7
 13980  17CF  1E01               	btfss	1,4
 13981  17D0  0008               	return
 13982                           
 13983                           ;Dimmer_B1.c: 885: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13984  17D1  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13985  17D2  319C  24FE  3197   	fcall	_getDimmerLights_Allow_Condition
 13986  17D5  3800               	iorlw	0
 13987  17D6  1D03               	skipz
 13988  17D7  0008               	return
 13989                           
 13990                           ;Dimmer_B1.c: 886: DimmerLights->DimmingTrigger = 0;
 13991  17D8  0021               	movlb	1	; select bank1
 13992  17D9  084C               	movf	_DimmerLights^(0+128),w
 13993  17DA  0086               	movwf	6
 13994  17DB  3001               	movlw	1	; select bank2/3
 13995  17DC  0087               	movwf	7
 13996  17DD  1201               	bcf	1,4
 13997                           
 13998                           ;Dimmer_B1.c: 887: if (DimmerLights->DimmingSwitch == 1) {
 13999  17DE  084C               	movf	_DimmerLights^(0+128),w
 14000  17DF  0086               	movwf	6
 14001  17E0  3001               	movlw	1	; select bank2/3
 14002  17E1  0087               	movwf	7
 14003  17E2  1E81               	btfss	1,5
 14004  17E3  2FEC               	goto	l7389
 14005                           
 14006                           ;Dimmer_B1.c: 888: setDimmerLights_Dimming(lights, 1);
 14007  17E4  0020               	movlb	0	; select bank0
 14008  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 14009  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 14010  17E7  0021               	movlb	1	; select bank1
 14011  17E8  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14012  17E9  3193  23DA         	fcall	_setDimmerLights_Dimming
 14013                           
 14014                           ;Dimmer_B1.c: 889: } else {
 14015  17EB  0008               	return
 14016  17EC                     l7389:	
 14017                           
 14018                           ;Dimmer_B1.c: 890: setDimmerLights_Dimming(lights, 0);
 14019  17EC  0020               	movlb	0	; select bank0
 14020  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 14021  17EE  0021               	movlb	1	; select bank1
 14022  17EF  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14023  17F0  3193  23DA         	fcall	_setDimmerLights_Dimming
 14024                           
 14025                           ;Dimmer_B1.c: 891: }
 14026                           ;Dimmer_B1.c: 892: }
 14027                           ;Dimmer_B1.c: 893: }
 14028                           ;Dimmer_B1.c: 894: } else {
 14029  17F2  0008               	return
 14030  17F3                     l7391:	
 14031                           
 14032                           ;Dimmer_B1.c: 895: if (DimmerLights->DimmingTrigger == 1) {
 14033  17F3  0021               	movlb	1	; select bank1
 14034  17F4  084C               	movf	_DimmerLights^(0+128),w
 14035  17F5  0086               	movwf	6
 14036  17F6  3001               	movlw	1	; select bank2/3
 14037  17F7  0087               	movwf	7
 14038  17F8  1E01               	btfss	1,4
 14039  17F9  0008               	return
 14040                           
 14041                           ;Dimmer_B1.c: 896: DimmerLights->DimmingTrigger = 0;
 14042  17FA  084C               	movf	_DimmerLights^(0+128),w
 14043  17FB  0086               	movwf	6
 14044  17FC  3001               	movlw	1	; select bank2/3
 14045  17FD  0087               	movwf	7
 14046  17FE  1201               	bcf	1,4
 14047  17FF  0008               	return
 14048  1800                     __end_of_setDimmerLights_Main:	
 14049                           
 14050                           	psect	text90
 14051  0F3A                     __ptext90:	
 14052 ;; *************** function _setDimmerLights_OnOff *****************
 14053 ;; Defined at:
 14054 ;;		line 904 in file "../src/Dimmer_B1.c"
 14055 ;; Parameters:    Size  Location     Type
 14056 ;;  lights          1    wreg     unsigned char 
 14057 ;;  command         1   77[BANK0 ] unsigned char 
 14058 ;; Auto vars:     Size  Location     Type
 14059 ;;  lights          1    0[BANK1 ] unsigned char 
 14060 ;; Return value:  Size  Location     Type
 14061 ;;		None               void
 14062 ;; Registers used:
 14063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14064 ;; Tracked objects:
 14065 ;;		On entry : 0/0
 14066 ;;		On exit  : 0/0
 14067 ;;		Unchanged: 0/0
 14068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14069 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14071 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14072 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;Total ram usage:        4 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    8
 14076 ;; This function calls:
 14077 ;;		_getCmd_Status
 14078 ;;		_getDelayOff_GO
 14079 ;;		_getDimmerLights_PercentToValue
 14080 ;;		_getMain_All_LightsStatus
 14081 ;;		_setCmd_Status
 14082 ;;		_setDelayOff_GO
 14083 ;;		_setDimmerIntr_ControlStatus
 14084 ;;		_setDimmerIntr_DimmingValue
 14085 ;;		_setDimmerIntr_Dimming_RF
 14086 ;;		_setDimmerIntr_MaxmumValue
 14087 ;;		_setDimmerLights_DimmingClose
 14088 ;;		_setDimmerLights_Line
 14089 ;;		_setLED
 14090 ;;		_setProductData
 14091 ;;		_setRF_DimmerLights
 14092 ;;		_setTxData
 14093 ;; This function is called by:
 14094 ;;		_setDimmerLights_Main
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _setDimmerLights_OnOff
 14100  0F3A                     _setDimmerLights_OnOff:	
 14101                           
 14102                           ;incstack = 0
 14103                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14104                           ;setDimmerLights_OnOff@lights stored from wreg
 14105  0F3A  0021               	movlb	1	; select bank1
 14106  0F3B  00E5               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14107                           
 14108                           ;Dimmer_B1.c: 906: if (command == 1) {
 14109  0F3C  0020               	movlb	0	; select bank0
 14110  0F3D  086D               	movf	setDimmerLights_OnOff@command,w
 14111  0F3E  3A01               	xorlw	1
 14112  0F3F  1D03               	skipz
 14113  0F40  2F9F               	goto	l7041
 14114                           
 14115                           ;Dimmer_B1.c: 908: setDimmerIntr_ControlStatus(lights, 1);
 14116  0F41  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14117  0F42  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14118  0F43  0021               	movlb	1	; select bank1
 14119  0F44  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14120  0F45  319D  252A  318F   	fcall	_setDimmerIntr_ControlStatus
 14121                           
 14122                           ;Dimmer_B1.c: 911: Dimmer.Load_Status = 1;
 14123  0F48  0022               	movlb	2	; select bank2
 14124  0F49  152C               	bsf	_Dimmer^(0+256),2
 14125                           
 14126                           ;Dimmer_B1.c: 912: setDimmerLights_Line(lights);
 14127  0F4A  0021               	movlb	1	; select bank1
 14128  0F4B  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14129  0F4C  319B  2388  318F   	fcall	_setDimmerLights_Line
 14130                           
 14131                           ;Dimmer_B1.c: 918: setLED(lights, 0);
 14132  0F4F  0020               	movlb	0	; select bank0
 14133  0F50  01A2               	clrf	setLED@command
 14134  0F51  0021               	movlb	1	; select bank1
 14135  0F52  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14136  0F53  3191  2176  318F   	fcall	_setLED
 14137                           
 14138                           ;Dimmer_B1.c: 919: ;;
 14139                           ;Dimmer_B1.c: 939: if (DimmerLights->DimmingRun == 1) {
 14140  0F56  0021               	movlb	1	; select bank1
 14141  0F57  0A4C               	incf	_DimmerLights^(0+128),w
 14142  0F58  0086               	movwf	6
 14143  0F59  3001               	movlw	1	; select bank2/3
 14144  0F5A  0087               	movwf	7
 14145  0F5B  1F01               	btfss	1,6
 14146  0F5C  2F81               	goto	l7033
 14147                           
 14148                           ;Dimmer_B1.c: 940: DimmerLights->DimmingRun = 0;
 14149  0F5D  0A4C               	incf	_DimmerLights^(0+128),w
 14150  0F5E  0086               	movwf	6
 14151  0F5F  3001               	movlw	1	; select bank2/3
 14152  0F60  0087               	movwf	7
 14153  0F61  1301               	bcf	1,6
 14154                           
 14155                           ;Dimmer_B1.c: 941: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14156  0F62  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14157  0F63  3E14               	addlw	20
 14158  0F64  076E               	addwf	_product^(0+128),w
 14159  0F65  0020               	movlb	0	; select bank0
 14160  0F66  00EE               	movwf	??_setDimmerLights_OnOff
 14161  0F67  086E               	movf	??_setDimmerLights_OnOff,w
 14162  0F68  0086               	movwf	6
 14163  0F69  3001               	movlw	1	; select bank2/3
 14164  0F6A  0087               	movwf	7
 14165  0F6B  0801               	movf	1,w
 14166  0F6C  3195  25FF  318F   	fcall	_getDimmerLights_PercentToValue
 14167  0F6F  0020               	movlb	0	; select bank0
 14168  0F70  00EF               	movwf	??_setDimmerLights_OnOff+1
 14169  0F71  086F               	movf	??_setDimmerLights_OnOff+1,w
 14170  0F72  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14171  0F73  0021               	movlb	1	; select bank1
 14172  0F74  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14173  0F75  319A  22B2  318F   	fcall	_setDimmerIntr_MaxmumValue
 14174                           
 14175                           ;Dimmer_B1.c: 942: setDimmerIntr_Dimming_RF(lights, 1);
 14176  0F78  0020               	movlb	0	; select bank0
 14177  0F79  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14178  0F7A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14179  0F7B  0021               	movlb	1	; select bank1
 14180  0F7C  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14181  0F7D  319D  2542  318F   	fcall	_setDimmerIntr_Dimming_RF
 14182                           
 14183                           ;Dimmer_B1.c: 943: } else {
 14184  0F80  2F98               	goto	l7035
 14185  0F81                     l7033:	
 14186                           
 14187                           ;Dimmer_B1.c: 944: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14188  0F81  0021               	movlb	1	; select bank1
 14189  0F82  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14190  0F83  3E14               	addlw	20
 14191  0F84  076E               	addwf	_product^(0+128),w
 14192  0F85  0020               	movlb	0	; select bank0
 14193  0F86  00EE               	movwf	??_setDimmerLights_OnOff
 14194  0F87  086E               	movf	??_setDimmerLights_OnOff,w
 14195  0F88  0086               	movwf	6
 14196  0F89  3001               	movlw	1	; select bank2/3
 14197  0F8A  0087               	movwf	7
 14198  0F8B  0801               	movf	1,w
 14199  0F8C  3195  25FF  318F   	fcall	_getDimmerLights_PercentToValue
 14200  0F8F  0020               	movlb	0	; select bank0
 14201  0F90  00EF               	movwf	??_setDimmerLights_OnOff+1
 14202  0F91  086F               	movf	??_setDimmerLights_OnOff+1,w
 14203  0F92  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14204  0F93  0021               	movlb	1	; select bank1
 14205  0F94  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14206  0F95  319A  22BE  318F   	fcall	_setDimmerIntr_DimmingValue
 14207  0F98                     l7035:	
 14208                           
 14209                           ;Dimmer_B1.c: 947: }
 14210                           ;Dimmer_B1.c: 949: if (lights == 1) {
 14211  0F98  0021               	movlb	1	; select bank1
 14212  0F99  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14213  0F9A  3A01               	xorlw	1
 14214  0F9B  1D03               	skipz
 14215  0F9C  2FCE               	goto	l7055
 14216                           
 14217                           ;Dimmer_B1.c: 951: DimmerIntr1.TuneGO = 1;
 14218  0F9D  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14219                           
 14220                           ;Dimmer_B1.c: 957: }
 14221                           ;Dimmer_B1.c: 963: } else if (command == 0) {
 14222                           
 14223                           ;Dimmer_B1.c: 953: } else if (lights == 2) {
 14224  0F9E  2FCE               	goto	l7055
 14225  0F9F                     l7041:	
 14226  0F9F  0020               	movlb	0	; select bank0
 14227  0FA0  08ED               	movf	setDimmerLights_OnOff@command,f
 14228  0FA1  1D03               	skipz
 14229  0FA2  2FCE               	goto	l7055
 14230                           
 14231                           ;Dimmer_B1.c: 965: setDimmerIntr_ControlStatus(lights, 0);
 14232  0FA3  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14233  0FA4  0021               	movlb	1	; select bank1
 14234  0FA5  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14235  0FA6  319D  252A  318F   	fcall	_setDimmerIntr_ControlStatus
 14236                           
 14237                           ;Dimmer_B1.c: 967: Dimmer.Load_Status = 0;
 14238  0FA9  0022               	movlb	2	; select bank2
 14239  0FAA  112C               	bcf	_Dimmer^(0+256),2
 14240                           
 14241                           ;Dimmer_B1.c: 968: setDimmerLights_Line(0);
 14242  0FAB  3000               	movlw	0
 14243  0FAC  319B  2388  318F   	fcall	_setDimmerLights_Line
 14244                           
 14245                           ;Dimmer_B1.c: 972: if (getDelayOff_GO(lights) == 1) {
 14246  0FAF  0021               	movlb	1	; select bank1
 14247  0FB0  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14248  0FB1  319B  2399  318F   	fcall	_getDelayOff_GO
 14249  0FB4  3A01               	xorlw	1
 14250  0FB5  1D03               	skipz
 14251  0FB6  2FBF               	goto	l796
 14252                           
 14253                           ;Dimmer_B1.c: 973: setDelayOff_GO(lights, 0, 0);
 14254  0FB7  0020               	movlb	0	; select bank0
 14255  0FB8  01E5               	clrf	setDelayOff_GO@command
 14256  0FB9  01E6               	clrf	setDelayOff_GO@value
 14257  0FBA  0021               	movlb	1	; select bank1
 14258  0FBB  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14259  0FBC  318C  2409  318F   	fcall	_setDelayOff_GO
 14260  0FBF                     l796:	
 14261                           
 14262                           ;Dimmer_B1.c: 974: }
 14263                           ;Dimmer_B1.c: 979: setLED(lights, 1);
 14264  0FBF  0020               	movlb	0	; select bank0
 14265  0FC0  01A2               	clrf	setLED@command
 14266  0FC1  0AA2               	incf	setLED@command,f
 14267  0FC2  0021               	movlb	1	; select bank1
 14268  0FC3  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14269  0FC4  3191  2176  318F   	fcall	_setLED
 14270                           
 14271                           ;Dimmer_B1.c: 980: ;;
 14272                           ;Dimmer_B1.c: 984: if (lights == 1) {
 14273  0FC7  0021               	movlb	1	; select bank1
 14274  0FC8  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14275  0FC9  3A01               	xorlw	1
 14276  0FCA  1D03               	skipz
 14277  0FCB  2FCE               	goto	l7055
 14278                           
 14279                           ;Dimmer_B1.c: 985: RB1 = 0;
 14280  0FCC  0020               	movlb	0	; select bank0
 14281  0FCD  108D               	bcf	13,1	;volatile
 14282  0FCE                     l7055:	
 14283                           
 14284                           ;Dimmer_B1.c: 987: }
 14285                           ;Dimmer_B1.c: 998: }
 14286                           ;Dimmer_B1.c: 1000: setDimmerLights_DimmingClose();
 14287  0FCE  3199  21FE  318F   	fcall	_setDimmerLights_DimmingClose
 14288                           
 14289                           ;Dimmer_B1.c: 1002: setRF_DimmerLights(lights, command);
 14290  0FD1  0020               	movlb	0	; select bank0
 14291  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14292  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14293  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14294  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14295  0FD6  0021               	movlb	1	; select bank1
 14296  0FD7  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14297  0FD8  3196  26C9  318F   	fcall	_setRF_DimmerLights
 14298                           
 14299                           ;Dimmer_B1.c: 1004: if (getCmd_Status(1) == 1) {
 14300  0FDB  3001               	movlw	1
 14301  0FDC  319B  23DD  318F   	fcall	_getCmd_Status
 14302  0FDF  3A01               	xorlw	1
 14303  0FE0  1D03               	skipz
 14304  0FE1  2FFD               	goto	l7071
 14305                           
 14306                           ;Dimmer_B1.c: 1005: if (getMain_All_LightsStatus() == 0) {
 14307  0FE2  319A  2258  318F   	fcall	_getMain_All_LightsStatus
 14308  0FE5  3800               	iorlw	0
 14309  0FE6  1D03               	skipz
 14310  0FE7  0008               	return
 14311                           
 14312                           ;Dimmer_B1.c: 1006: setCmd_Status(1, 0);
 14313  0FE8  0020               	movlb	0	; select bank0
 14314  0FE9  01A0               	clrf	setCmd_Status@cmd
 14315  0FEA  3001               	movlw	1
 14316  0FEB  319D  255A  318F   	fcall	_setCmd_Status
 14317                           
 14318                           ;Dimmer_B1.c: 1007: setProductData(11, 0);
 14319  0FEE  0020               	movlb	0	; select bank0
 14320  0FEF  01E2               	clrf	setProductData@value
 14321  0FF0  300B               	movlw	11
 14322  0FF1  319A  22A6  318F   	fcall	_setProductData
 14323                           
 14324                           ;Dimmer_B1.c: 1008: setProductData(17, 0);
 14325  0FF4  0020               	movlb	0	; select bank0
 14326  0FF5  01E2               	clrf	setProductData@value
 14327  0FF6  3011               	movlw	17
 14328  0FF7  319A  22A6  318F   	fcall	_setProductData
 14329                           
 14330                           ;Dimmer_B1.c: 1009: setTxData();
 14331  0FFA  318E  267F         	fcall	_setTxData
 14332                           
 14333                           ;Dimmer_B1.c: 1010: }
 14334                           ;Dimmer_B1.c: 1011: } else {
 14335  0FFC  0008               	return
 14336  0FFD                     l7071:	
 14337                           
 14338                           ;Dimmer_B1.c: 1012: setTxData();
 14339  0FFD  318E  267F         	fcall	_setTxData
 14340  0FFF  0008               	return
 14341  1000                     __end_of_setDimmerLights_OnOff:	
 14342                           
 14343                           	psect	text91
 14344  1176                     __ptext91:	
 14345 ;; *************** function _setLED *****************
 14346 ;; Defined at:
 14347 ;;		line 81 in file "../src/LED_B1.c"
 14348 ;; Parameters:    Size  Location     Type
 14349 ;;  led             1    wreg     unsigned char 
 14350 ;;  command         1    2[BANK0 ] unsigned char 
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  led             1    3[BANK0 ] unsigned char 
 14353 ;; Return value:  Size  Location     Type
 14354 ;;		None               void
 14355 ;; Registers used:
 14356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14357 ;; Tracked objects:
 14358 ;;		On entry : 0/0
 14359 ;;		On exit  : 0/0
 14360 ;;		Unchanged: 0/0
 14361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14362 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14366 ;;Total ram usage:        2 bytes
 14367 ;; Hardware stack levels used:    1
 14368 ;; Hardware stack levels required when called:    6
 14369 ;; This function calls:
 14370 ;;		_LedPointSelect
 14371 ;; This function is called by:
 14372 ;;		_setDimmerLights_OnOff
 14373 ;;		_setLED_Initialization
 14374 ;;		_Exception_Main
 14375 ;;		_setSw_Initialization
 14376 ;; This function uses a non-reentrant model
 14377 ;;
 14378                           
 14379                           
 14380                           ;psect for function _setLED
 14381  1176                     _setLED:	
 14382                           
 14383                           ;incstack = 0
 14384                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14385                           ;setLED@led stored from wreg
 14386  1176  0020               	movlb	0	; select bank0
 14387  1177  00A3               	movwf	setLED@led
 14388                           
 14389                           ;LED_B1.c: 82: LedPointSelect(led);
 14390  1178  0823               	movf	setLED@led,w
 14391  1179  319A  22CA  3191   	fcall	_LedPointSelect
 14392                           
 14393                           ;LED_B1.c: 83: if (command == 0) {
 14394  117C  0020               	movlb	0	; select bank0
 14395  117D  08A2               	movf	setLED@command,f
 14396  117E  1D03               	skipz
 14397  117F  2985               	goto	l6749
 14398                           
 14399                           ;LED_B1.c: 112: if (led == 99) {
 14400  1180  0823               	movf	setLED@led,w
 14401  1181  3A63               	xorlw	99
 14402  1182  1D03               	skipz
 14403  1183  2985               	goto	l6749
 14404                           
 14405                           ;LED_B1.c: 116: RB5 = 1;
 14406  1184  168D               	bsf	13,5	;volatile
 14407  1185                     l6749:	
 14408                           
 14409                           ;LED_B1.c: 118: }
 14410                           ;LED_B1.c: 120: }
 14411                           ;LED_B1.c: 121: if (command == 1) {
 14412  1185  0822               	movf	setLED@command,w
 14413  1186  3A01               	xorlw	1
 14414  1187  1D03               	skipz
 14415  1188  298E               	goto	l6755
 14416                           
 14417                           ;LED_B1.c: 150: if (led == 99) {
 14418  1189  0823               	movf	setLED@led,w
 14419  118A  3A63               	xorlw	99
 14420  118B  1D03               	skipz
 14421  118C  298E               	goto	l6755
 14422                           
 14423                           ;LED_B1.c: 154: RB5 = 0;
 14424  118D  128D               	bcf	13,5	;volatile
 14425  118E                     l6755:	
 14426                           
 14427                           ;LED_B1.c: 156: }
 14428                           ;LED_B1.c: 158: }
 14429                           ;LED_B1.c: 159: if (command == 10) {
 14430  118E  0822               	movf	setLED@command,w
 14431  118F  3A0A               	xorlw	10
 14432  1190  1D03               	skipz
 14433  1191  29A4               	goto	l6763
 14434                           
 14435                           ;LED_B1.c: 160: LED->GO = 0;
 14436  1192  0021               	movlb	1	; select bank1
 14437  1193  084D               	movf	_LED^(0+128),w
 14438  1194  0086               	movwf	6
 14439  1195  3001               	movlw	1	; select bank2/3
 14440  1196  0087               	movwf	7
 14441  1197  1081               	bcf	1,1
 14442                           
 14443                           ;LED_B1.c: 161: LED->Time = 0;
 14444  1198  0A4D               	incf	_LED^(0+128),w
 14445  1199  0086               	movwf	6
 14446  119A  3001               	movlw	1	; select bank2/3
 14447  119B  0087               	movwf	7
 14448  119C  3000               	movlw	0
 14449  119D  3FC0               	movwi [0]fsr1
 14450  119E  3FC1               	movwi [1]fsr1
 14451                           
 14452                           ;LED_B1.c: 190: if (led == 99) {
 14453  119F  0020               	movlb	0	; select bank0
 14454  11A0  0823               	movf	setLED@led,w
 14455  11A1  3A63               	xorlw	99
 14456  11A2  1903               	btfsc	3,2
 14457                           
 14458                           ;LED_B1.c: 194: RB5 = 1;
 14459  11A3  168D               	bsf	13,5	;volatile
 14460  11A4                     l6763:	
 14461                           
 14462                           ;LED_B1.c: 196: }
 14463                           ;LED_B1.c: 198: }
 14464                           ;LED_B1.c: 199: if (command == 11) {
 14465  11A4  0822               	movf	setLED@command,w
 14466  11A5  3A0B               	xorlw	11
 14467  11A6  1D03               	skipz
 14468  11A7  0008               	return
 14469                           
 14470                           ;LED_B1.c: 200: LED->GO = 1;
 14471  11A8  0021               	movlb	1	; select bank1
 14472  11A9  084D               	movf	_LED^(0+128),w
 14473  11AA  0086               	movwf	6
 14474  11AB  3001               	movlw	1	; select bank2/3
 14475  11AC  0087               	movwf	7
 14476  11AD  1481               	bsf	1,1
 14477  11AE  0008               	return
 14478  11AF                     __end_of_setLED:	
 14479                           
 14480                           	psect	text92
 14481  1ACA                     __ptext92:	
 14482 ;; *************** function _LedPointSelect *****************
 14483 ;; Defined at:
 14484 ;;		line 7 in file "../src/LED_B1.c"
 14485 ;; Parameters:    Size  Location     Type
 14486 ;;  led             1    wreg     unsigned char 
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;  led             1    1[BANK0 ] unsigned char 
 14489 ;; Return value:  Size  Location     Type
 14490 ;;		None               void
 14491 ;; Registers used:
 14492 ;;		wreg
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/0
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;Total ram usage:        2 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    5
 14505 ;; This function calls:
 14506 ;;		Nothing
 14507 ;; This function is called by:
 14508 ;;		_setLED_Initialization
 14509 ;;		_setLED
 14510 ;;		_setLED_Main
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           
 14515                           ;psect for function _LedPointSelect
 14516  1ACA                     _LedPointSelect:	
 14517                           
 14518                           ;incstack = 0
 14519                           ; Regs used in _LedPointSelect: [wreg]
 14520                           ;LedPointSelect@led stored from wreg
 14521  1ACA  0020               	movlb	0	; select bank0
 14522  1ACB  00A1               	movwf	LedPointSelect@led
 14523                           
 14524                           ;LED_B1.c: 24: if (led == 99) {
 14525  1ACC  0821               	movf	LedPointSelect@led,w
 14526  1ACD  3A63               	xorlw	99
 14527  1ACE  1D03               	skipz
 14528  1ACF  0008               	return
 14529                           
 14530                           ;LED_B1.c: 25: LED = &VarErrLED;
 14531  1AD0  3069               	movlw	_VarErrLED& (0+255)
 14532  1AD1  00A0               	movwf	??_LedPointSelect
 14533  1AD2  0820               	movf	??_LedPointSelect,w
 14534  1AD3  0021               	movlb	1	; select bank1
 14535  1AD4  00CD               	movwf	_LED^(0+128)
 14536  1AD5  0008               	return
 14537  1AD6                     __end_of_LedPointSelect:	
 14538                           
 14539                           	psect	text93
 14540  19FE                     __ptext93:	
 14541 ;; *************** function _setDimmerLights_DimmingClose *****************
 14542 ;; Defined at:
 14543 ;;		line 1781 in file "../src/Dimmer_B1.c"
 14544 ;; Parameters:    Size  Location     Type
 14545 ;;		None
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;		None
 14548 ;; Return value:  Size  Location     Type
 14549 ;;		None               void
 14550 ;; Registers used:
 14551 ;;		wreg, status,2, status,0, pclath, cstack
 14552 ;; Tracked objects:
 14553 ;;		On entry : 0/0
 14554 ;;		On exit  : 0/0
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;Total ram usage:        0 bytes
 14562 ;; Hardware stack levels used:    1
 14563 ;; Hardware stack levels required when called:    6
 14564 ;; This function calls:
 14565 ;;		_setDimmerIntr_Dimming_Sw
 14566 ;; This function is called by:
 14567 ;;		_setDimmerLights_OnOff
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           
 14572                           ;psect for function _setDimmerLights_DimmingClose
 14573  19FE                     _setDimmerLights_DimmingClose:	
 14574                           
 14575                           ;Dimmer_B1.c: 1783: setDimmerIntr_Dimming_Sw(1, 0);
 14576                           
 14577                           ;incstack = 0
 14578                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14579  19FE  0020               	movlb	0	; select bank0
 14580  19FF  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14581  1A00  3001               	movlw	1
 14582  1A01  319D  2514         	fcall	_setDimmerIntr_Dimming_Sw
 14583  1A03  0008               	return
 14584  1A04                     __end_of_setDimmerLights_DimmingClose:	
 14585                           
 14586                           	psect	text94
 14587  1D42                     __ptext94:	
 14588 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14589 ;; Defined at:
 14590 ;;		line 262 in file "../src/Dimmer_B1.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;  lights          1    wreg     unsigned char 
 14593 ;;  command         1    0[BANK0 ] unsigned char 
 14594 ;; Auto vars:     Size  Location     Type
 14595 ;;  lights          1    2[BANK0 ] unsigned char 
 14596 ;; Return value:  Size  Location     Type
 14597 ;;		None               void
 14598 ;; Registers used:
 14599 ;;		wreg, status,2, status,0
 14600 ;; Tracked objects:
 14601 ;;		On entry : 0/0
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14605 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;Total ram usage:        3 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    5
 14612 ;; This function calls:
 14613 ;;		Nothing
 14614 ;; This function is called by:
 14615 ;;		_setDimmerLights_OnOff
 14616 ;;		_setRFSW_AdjControl
 14617 ;; This function uses a non-reentrant model
 14618 ;;
 14619                           
 14620                           
 14621                           ;psect for function _setDimmerIntr_Dimming_RF
 14622  1D42                     _setDimmerIntr_Dimming_RF:	
 14623                           
 14624                           ;incstack = 0
 14625                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14626                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14627  1D42  0020               	movlb	0	; select bank0
 14628  1D43  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14629                           
 14630                           ;Dimmer_B1.c: 264: if (lights == 1) {
 14631  1D44  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14632  1D45  3A01               	xorlw	1
 14633  1D46  1D03               	skipz
 14634  1D47  0008               	return
 14635                           
 14636                           ;Dimmer_B1.c: 265: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14637  1D48  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14638  1D49  3A01               	xorlw	1
 14639  1D4A  3000               	movlw	0
 14640  1D4B  1903               	skipnz
 14641  1D4C  3001               	movlw	1
 14642  1D4D  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14643  1D4E  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14644  1D4F  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14645  1D50  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14646  1D51  0021               	movlb	1	; select bank1
 14647  1D52  083C               	movf	_DimmerIntr1^(0+128),w
 14648  1D53  0020               	movlb	0	; select bank0
 14649  1D54  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14650  1D55  39BF               	andlw	-65
 14651  1D56  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14652  1D57  0021               	movlb	1	; select bank1
 14653  1D58  00BC               	movwf	_DimmerIntr1^(0+128)
 14654  1D59  0008               	return
 14655  1D5A                     __end_of_setDimmerIntr_Dimming_RF:	
 14656                           
 14657                           	psect	text95
 14658  1ABE                     __ptext95:	
 14659 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14660 ;; Defined at:
 14661 ;;		line 106 in file "../src/Dimmer_B1.c"
 14662 ;; Parameters:    Size  Location     Type
 14663 ;;  lights          1    wreg     unsigned char 
 14664 ;;  value           1   66[BANK0 ] unsigned char 
 14665 ;; Auto vars:     Size  Location     Type
 14666 ;;  lights          1   68[BANK0 ] unsigned char 
 14667 ;; Return value:  Size  Location     Type
 14668 ;;		None               void
 14669 ;; Registers used:
 14670 ;;		wreg
 14671 ;; Tracked objects:
 14672 ;;		On entry : 0/0
 14673 ;;		On exit  : 0/0
 14674 ;;		Unchanged: 0/0
 14675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14676 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;Total ram usage:        3 bytes
 14681 ;; Hardware stack levels used:    1
 14682 ;; Hardware stack levels required when called:    5
 14683 ;; This function calls:
 14684 ;;		Nothing
 14685 ;; This function is called by:
 14686 ;;		_setDimmerLights_OnOff
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           
 14691                           ;psect for function _setDimmerIntr_DimmingValue
 14692  1ABE                     _setDimmerIntr_DimmingValue:	
 14693                           
 14694                           ;incstack = 0
 14695                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14696                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14697  1ABE  0020               	movlb	0	; select bank0
 14698  1ABF  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14699                           
 14700                           ;Dimmer_B1.c: 108: if (lights == 1) {
 14701  1AC0  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14702  1AC1  3A01               	xorlw	1
 14703  1AC2  1D03               	skipz
 14704  1AC3  0008               	return
 14705                           
 14706                           ;Dimmer_B1.c: 109: DimmerIntr1.DimmingValue = value;
 14707  1AC4  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14708  1AC5  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14709  1AC6  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14710  1AC7  0021               	movlb	1	; select bank1
 14711  1AC8  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14712  1AC9  0008               	return
 14713  1ACA                     __end_of_setDimmerIntr_DimmingValue:	
 14714                           
 14715                           	psect	text96
 14716  1D2A                     __ptext96:	
 14717 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14718 ;; Defined at:
 14719 ;;		line 88 in file "../src/Dimmer_B1.c"
 14720 ;; Parameters:    Size  Location     Type
 14721 ;;  lights          1    wreg     unsigned char 
 14722 ;;  command         1    0[BANK0 ] unsigned char 
 14723 ;; Auto vars:     Size  Location     Type
 14724 ;;  lights          1    2[BANK0 ] unsigned char 
 14725 ;; Return value:  Size  Location     Type
 14726 ;;		None               void
 14727 ;; Registers used:
 14728 ;;		wreg, status,2, status,0
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14734 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14738 ;;Total ram usage:        3 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    5
 14741 ;; This function calls:
 14742 ;;		Nothing
 14743 ;; This function is called by:
 14744 ;;		_setDimmerLights_OnOff
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           
 14749                           ;psect for function _setDimmerIntr_ControlStatus
 14750  1D2A                     _setDimmerIntr_ControlStatus:	
 14751                           
 14752                           ;incstack = 0
 14753                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14754                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14755  1D2A  0020               	movlb	0	; select bank0
 14756  1D2B  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14757                           
 14758                           ;Dimmer_B1.c: 90: if (lights == 1) {
 14759  1D2C  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14760  1D2D  3A01               	xorlw	1
 14761  1D2E  1D03               	skipz
 14762  1D2F  0008               	return
 14763                           
 14764                           ;Dimmer_B1.c: 91: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14765  1D30  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14766  1D31  3A01               	xorlw	1
 14767  1D32  3000               	movlw	0
 14768  1D33  1903               	skipnz
 14769  1D34  3001               	movlw	1
 14770  1D35  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14771  1D36  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14772  1D37  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14773  1D38  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14774  1D39  0021               	movlb	1	; select bank1
 14775  1D3A  083C               	movf	_DimmerIntr1^(0+128),w
 14776  1D3B  0020               	movlb	0	; select bank0
 14777  1D3C  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14778  1D3D  39F7               	andlw	-9
 14779  1D3E  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14780  1D3F  0021               	movlb	1	; select bank1
 14781  1D40  00BC               	movwf	_DimmerIntr1^(0+128)
 14782  1D41  0008               	return
 14783  1D42                     __end_of_setDimmerIntr_ControlStatus:	
 14784                           
 14785                           	psect	text97
 14786  0C09                     __ptext97:	
 14787 ;; *************** function _setDelayOff_GO *****************
 14788 ;; Defined at:
 14789 ;;		line 87 in file "../src/DelayOff_B1.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;  sw              1    wreg     unsigned char 
 14792 ;;  command         1   69[BANK0 ] unsigned char 
 14793 ;;  value           1   70[BANK0 ] unsigned char 
 14794 ;; Auto vars:     Size  Location     Type
 14795 ;;  sw              1   76[BANK0 ] unsigned char 
 14796 ;;  k               1   75[BANK0 ] unsigned char 
 14797 ;;  j               1   74[BANK0 ] unsigned char 
 14798 ;;  i               1   73[BANK0 ] unsigned char 
 14799 ;; Return value:  Size  Location     Type
 14800 ;;		None               void
 14801 ;; Registers used:
 14802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14803 ;; Tracked objects:
 14804 ;;		On entry : 0/0
 14805 ;;		On exit  : 0/0
 14806 ;;		Unchanged: 0/0
 14807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14808 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14811 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14812 ;;Total ram usage:        8 bytes
 14813 ;; Hardware stack levels used:    1
 14814 ;; Hardware stack levels required when called:    6
 14815 ;; This function calls:
 14816 ;;		_DelayOffPointSelect
 14817 ;;		___bmul
 14818 ;;		_setProductData
 14819 ;; This function is called by:
 14820 ;;		_setDimmerLights_OnOff
 14821 ;;		_setRFSW_Control
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824                           
 14825                           
 14826                           ;psect for function _setDelayOff_GO
 14827  0C09                     _setDelayOff_GO:	
 14828                           
 14829                           ;incstack = 0
 14830                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14831                           ;setDelayOff_GO@sw stored from wreg
 14832  0C09  0020               	movlb	0	; select bank0
 14833  0C0A  00EC               	movwf	setDelayOff_GO@sw
 14834                           
 14835                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14836  0C0B  086C               	movf	setDelayOff_GO@sw,w
 14837  0C0C  319A  228E  318C   	fcall	_DelayOffPointSelect
 14838                           
 14839                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14840  0C0F  0020               	movlb	0	; select bank0
 14841  0C10  0865               	movf	setDelayOff_GO@command,w
 14842  0C11  3A01               	xorlw	1
 14843  0C12  3000               	movlw	0
 14844  0C13  1903               	skipnz
 14845  0C14  3001               	movlw	1
 14846  0C15  00E7               	movwf	??_setDelayOff_GO
 14847  0C16  0021               	movlb	1	; select bank1
 14848  0C17  084A               	movf	_DelayOff^(0+128),w
 14849  0C18  0086               	movwf	6
 14850  0C19  3001               	movlw	1	; select bank2/3
 14851  0C1A  0087               	movwf	7
 14852  0C1B  0020               	movlb	0	; select bank0
 14853  0C1C  0DE7               	rlf	??_setDelayOff_GO,f
 14854  0C1D  0801               	movf	1,w
 14855  0C1E  0667               	xorwf	??_setDelayOff_GO,w
 14856  0C1F  39FD               	andlw	-3
 14857  0C20  0667               	xorwf	??_setDelayOff_GO,w
 14858  0C21  0081               	movwf	1
 14859                           
 14860                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14861  0C22  0021               	movlb	1	; select bank1
 14862  0C23  084A               	movf	_DelayOff^(0+128),w
 14863  0C24  3E02               	addlw	2
 14864  0C25  0086               	movwf	6
 14865  0C26  3001               	movlw	1	; select bank2/3
 14866  0C27  0087               	movwf	7
 14867  0C28  3000               	movlw	0
 14868  0C29  3FC0               	movwi [0]fsr1
 14869  0C2A  3FC1               	movwi [1]fsr1
 14870                           
 14871                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14872  0C2B  084A               	movf	_DelayOff^(0+128),w
 14873  0C2C  3E04               	addlw	4
 14874  0C2D  0086               	movwf	6
 14875  0C2E  3001               	movlw	1	; select bank2/3
 14876  0C2F  0087               	movwf	7
 14877  0C30  0181               	clrf	1
 14878                           
 14879                           ;DelayOff_B1.c: 94: if (command == 1) {
 14880  0C31  0020               	movlb	0	; select bank0
 14881  0C32  0865               	movf	setDelayOff_GO@command,w
 14882  0C33  3A01               	xorlw	1
 14883  0C34  1D03               	skipz
 14884  0C35  2C8B               	goto	l6325
 14885                           
 14886                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14887  0C36  3005               	movlw	5
 14888  0C37  00E7               	movwf	??_setDelayOff_GO
 14889  0C38  0867               	movf	??_setDelayOff_GO,w
 14890  0C39  00E9               	movwf	setDelayOff_GO@i
 14891  0C3A  01EA               	clrf	setDelayOff_GO@j
 14892  0C3B  01EB               	clrf	setDelayOff_GO@k
 14893                           
 14894                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14895  0C3C  300F               	movlw	15
 14896  0C3D  0566               	andwf	setDelayOff_GO@value,w
 14897  0C3E  00E7               	movwf	??_setDelayOff_GO
 14898  0C3F  0867               	movf	??_setDelayOff_GO,w
 14899  0C40  3A05               	xorlw	5
 14900  0C41  1903               	skipnz
 14901  0C42  2C47               	goto	l6311
 14902  0C43  0866               	movf	setDelayOff_GO@value,w
 14903  0C44  390F               	andlw	15
 14904  0C45  1D03               	btfss	3,2
 14905  0C46  2C77               	goto	l6321
 14906  0C47                     l6311:	
 14907  0C47  3031               	movlw	49
 14908  0C48  0266               	subwf	setDelayOff_GO@value,w
 14909  0C49  1803               	skipnc
 14910  0C4A  2C77               	goto	l6321
 14911                           
 14912                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14913  0C4B  0866               	movf	setDelayOff_GO@value,w
 14914  0C4C  390F               	andlw	15
 14915  0C4D  00E7               	movwf	??_setDelayOff_GO
 14916  0C4E  0867               	movf	??_setDelayOff_GO,w
 14917  0C4F  00EA               	movwf	setDelayOff_GO@j
 14918                           
 14919                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14920  0C50  0866               	movf	setDelayOff_GO@value,w
 14921  0C51  00E7               	movwf	??_setDelayOff_GO
 14922  0C52  3004               	movlw	4
 14923  0C53                     u5455:	
 14924  0C53  36E7               	lsrf	??_setDelayOff_GO,f
 14925  0C54  0B89               	decfsz	9,f
 14926  0C55  2C53               	goto	u5455
 14927  0C56  0867               	movf	??_setDelayOff_GO,w
 14928  0C57  390F               	andlw	15
 14929  0C58  00E8               	movwf	??_setDelayOff_GO+1
 14930  0C59  0868               	movf	??_setDelayOff_GO+1,w
 14931  0C5A  00EB               	movwf	setDelayOff_GO@k
 14932                           
 14933                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14934  0C5B  300A               	movlw	10
 14935  0C5C  00E7               	movwf	??_setDelayOff_GO
 14936  0C5D  0867               	movf	??_setDelayOff_GO,w
 14937  0C5E  00A0               	movwf	___bmul@multiplicand
 14938  0C5F  086B               	movf	setDelayOff_GO@k,w
 14939  0C60  319B  23EF  318C   	fcall	___bmul
 14940  0C63  0020               	movlb	0	; select bank0
 14941  0C64  076A               	addwf	setDelayOff_GO@j,w
 14942  0C65  00E8               	movwf	??_setDelayOff_GO+1
 14943  0C66  0021               	movlb	1	; select bank1
 14944  0C67  0A4A               	incf	_DelayOff^(0+128),w
 14945  0C68  0086               	movwf	6
 14946  0C69  3001               	movlw	1	; select bank2/3
 14947  0C6A  0087               	movwf	7
 14948  0C6B  0020               	movlb	0	; select bank0
 14949  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14950  0C6D  0081               	movwf	1
 14951                           
 14952                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14953  0C6E  0866               	movf	setDelayOff_GO@value,w
 14954  0C6F  00E7               	movwf	??_setDelayOff_GO
 14955  0C70  0867               	movf	??_setDelayOff_GO,w
 14956  0C71  00E2               	movwf	setProductData@value
 14957  0C72  086C               	movf	setDelayOff_GO@sw,w
 14958  0C73  3E1A               	addlw	26
 14959  0C74  319A  22A6         	fcall	_setProductData
 14960                           
 14961                           ;DelayOff_B1.c: 103: } else {
 14962  0C76  0008               	return
 14963  0C77                     l6321:	
 14964                           
 14965                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14966  0C77  3005               	movlw	5
 14967  0C78  0020               	movlb	0	; select bank0
 14968  0C79  00E7               	movwf	??_setDelayOff_GO
 14969  0C7A  0021               	movlb	1	; select bank1
 14970  0C7B  0A4A               	incf	_DelayOff^(0+128),w
 14971  0C7C  0086               	movwf	6
 14972  0C7D  3001               	movlw	1	; select bank2/3
 14973  0C7E  0087               	movwf	7
 14974  0C7F  0020               	movlb	0	; select bank0
 14975  0C80  0867               	movf	??_setDelayOff_GO,w
 14976  0C81  0081               	movwf	1
 14977                           
 14978                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14979  0C82  3005               	movlw	5
 14980  0C83  00E7               	movwf	??_setDelayOff_GO
 14981  0C84  0867               	movf	??_setDelayOff_GO,w
 14982  0C85  00E2               	movwf	setProductData@value
 14983  0C86  086C               	movf	setDelayOff_GO@sw,w
 14984  0C87  3E1A               	addlw	26
 14985  0C88  319A  22A6         	fcall	_setProductData
 14986                           
 14987                           ;DelayOff_B1.c: 106: }
 14988                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14989  0C8A  0008               	return
 14990  0C8B                     l6325:	
 14991  0C8B  0020               	movlb	0	; select bank0
 14992  0C8C  08E5               	movf	setDelayOff_GO@command,f
 14993  0C8D  1D03               	skipz
 14994  0C8E  0008               	return
 14995                           
 14996                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14997  0C8F  01E2               	clrf	setProductData@value
 14998  0C90  086C               	movf	setDelayOff_GO@sw,w
 14999  0C91  3E1A               	addlw	26
 15000  0C92  319A  22A6         	fcall	_setProductData
 15001  0C94  0008               	return
 15002  0C95                     __end_of_setDelayOff_GO:	
 15003                           
 15004                           	psect	text98
 15005  1BEF                     __ptext98:	
 15006 ;; *************** function ___bmul *****************
 15007 ;; Defined at:
 15008 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15009 ;; Parameters:    Size  Location     Type
 15010 ;;  multiplier      1    wreg     unsigned char 
 15011 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15014 ;;  product         1    2[BANK0 ] unsigned char 
 15015 ;; Return value:  Size  Location     Type
 15016 ;;                  1    wreg      unsigned char 
 15017 ;; Registers used:
 15018 ;;		wreg, status,2, status,0
 15019 ;; Tracked objects:
 15020 ;;		On entry : 0/0
 15021 ;;		On exit  : 0/0
 15022 ;;		Unchanged: 0/0
 15023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;Total ram usage:        4 bytes
 15029 ;; Hardware stack levels used:    1
 15030 ;; Hardware stack levels required when called:    5
 15031 ;; This function calls:
 15032 ;;		Nothing
 15033 ;; This function is called by:
 15034 ;;		_setDelayOff_GO
 15035 ;;		_DelayTimejudge
 15036 ;; This function uses a non-reentrant model
 15037 ;;
 15038                           
 15039                           
 15040                           ;psect for function ___bmul
 15041  1BEF                     ___bmul:	
 15042                           
 15043                           ;incstack = 0
 15044                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15045                           ;___bmul@multiplier stored from wreg
 15046  1BEF  0020               	movlb	0	; select bank0
 15047  1BF0  00A3               	movwf	___bmul@multiplier
 15048  1BF1  01A2               	clrf	___bmul@product
 15049  1BF2                     l5981:	
 15050  1BF2  1C23               	btfss	___bmul@multiplier,0
 15051  1BF3  2BF8               	goto	l5985
 15052  1BF4  0820               	movf	___bmul@multiplicand,w
 15053  1BF5  00A1               	movwf	??___bmul
 15054  1BF6  0821               	movf	??___bmul,w
 15055  1BF7  07A2               	addwf	___bmul@product,f
 15056  1BF8                     l5985:	
 15057  1BF8  1003               	clrc
 15058  1BF9  0DA0               	rlf	___bmul@multiplicand,f
 15059  1BFA  1003               	clrc
 15060  1BFB  0CA3               	rrf	___bmul@multiplier,f
 15061  1BFC  08A3               	movf	___bmul@multiplier,f
 15062  1BFD  1D03               	skipz
 15063  1BFE  2BF2               	goto	l5981
 15064  1BFF  0822               	movf	___bmul@product,w
 15065  1C00  0008               	return
 15066  1C01                     __end_of___bmul:	
 15067                           
 15068                           	psect	text99
 15069  1D5A                     __ptext99:	
 15070 ;; *************** function _setCmd_Status *****************
 15071 ;; Defined at:
 15072 ;;		line 651 in file "../src/Main_B1.c"
 15073 ;; Parameters:    Size  Location     Type
 15074 ;;  number          1    wreg     unsigned char 
 15075 ;;  cmd             1    0[BANK0 ] unsigned char 
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;  number          1    2[BANK0 ] unsigned char 
 15078 ;; Return value:  Size  Location     Type
 15079 ;;		None               void
 15080 ;; Registers used:
 15081 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15082 ;; Tracked objects:
 15083 ;;		On entry : 0/0
 15084 ;;		On exit  : 0/0
 15085 ;;		Unchanged: 0/0
 15086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15087 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;Total ram usage:        3 bytes
 15092 ;; Hardware stack levels used:    1
 15093 ;; Hardware stack levels required when called:    5
 15094 ;; This function calls:
 15095 ;;		Nothing
 15096 ;; This function is called by:
 15097 ;;		_setDimmerLights_OnOff
 15098 ;;		_setControl_Lights_Table
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           
 15103                           ;psect for function _setCmd_Status
 15104  1D5A                     _setCmd_Status:	
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15108                           ;setCmd_Status@number stored from wreg
 15109  1D5A  0020               	movlb	0	; select bank0
 15110  1D5B  00A2               	movwf	setCmd_Status@number
 15111                           
 15112                           ;Main_B1.c: 652: switch (number) {
 15113  1D5C  2D6C               	goto	l6495
 15114  1D5D                     l6491:	
 15115                           ;Main_B1.c: 653: case 1:
 15116                           
 15117                           
 15118                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15119  1D5D  0820               	movf	setCmd_Status@cmd,w
 15120  1D5E  3A01               	xorlw	1
 15121  1D5F  3000               	movlw	0
 15122  1D60  1903               	skipnz
 15123  1D61  3001               	movlw	1
 15124  1D62  00A1               	movwf	??_setCmd_Status
 15125  1D63  0021               	movlb	1	; select bank1
 15126  1D64  0849               	movf	_Cmd^(0+128),w
 15127  1D65  0020               	movlb	0	; select bank0
 15128  1D66  0621               	xorwf	??_setCmd_Status,w
 15129  1D67  39FE               	andlw	-2
 15130  1D68  0621               	xorwf	??_setCmd_Status,w
 15131  1D69  0021               	movlb	1	; select bank1
 15132  1D6A  00C9               	movwf	_Cmd^(0+128)
 15133                           
 15134                           ;Main_B1.c: 656: }
 15135                           
 15136                           ;Main_B1.c: 655: break;
 15137  1D6B  0008               	return
 15138  1D6C                     l6495:	
 15139  1D6C  0020               	movlb	0	; select bank0
 15140  1D6D  0822               	movf	setCmd_Status@number,w
 15141                           
 15142                           ; Switch size 1, requested type "space"
 15143                           ; Number of cases is 1, Range of values is 1 to 1
 15144                           ; switch strategies available:
 15145                           ; Name         Instructions Cycles
 15146                           ; simple_byte            4     3 (average)
 15147                           ; direct_byte           11     9 (fixed)
 15148                           ; jumptable            263     9 (fixed)
 15149                           ;	Chosen strategy is simple_byte
 15150  1D6E  3A01               	xorlw	1	; case 1
 15151  1D6F  1903               	skipnz
 15152  1D70  2D5D               	goto	l6491
 15153  1D71  2D72               	goto	l1527
 15154  1D72                     l1527:	
 15155  1D72  0008               	return
 15156  1D73                     __end_of_setCmd_Status:	
 15157                           
 15158                           	psect	text100
 15159  1A58                     __ptext100:	
 15160 ;; *************** function _getMain_All_LightsStatus *****************
 15161 ;; Defined at:
 15162 ;;		line 373 in file "../src/Main_B1.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;		None
 15165 ;; Auto vars:     Size  Location     Type
 15166 ;;  status          1    0[BANK0 ] unsigned char 
 15167 ;; Return value:  Size  Location     Type
 15168 ;;                  1    wreg      unsigned char 
 15169 ;; Registers used:
 15170 ;;		wreg, status,2
 15171 ;; Tracked objects:
 15172 ;;		On entry : 0/0
 15173 ;;		On exit  : 0/0
 15174 ;;		Unchanged: 0/0
 15175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;Total ram usage:        1 bytes
 15181 ;; Hardware stack levels used:    1
 15182 ;; Hardware stack levels required when called:    5
 15183 ;; This function calls:
 15184 ;;		Nothing
 15185 ;; This function is called by:
 15186 ;;		_DimmerLights_Main
 15187 ;;		_setDimmerLights_Main
 15188 ;;		_setDimmerLights_OnOff
 15189 ;;		_Flash_Memory_Main
 15190 ;;		_Exception_Main
 15191 ;;		_Load_Main
 15192 ;;		_setTemp_Main
 15193 ;;		_setControl_Lights_Table
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           
 15198                           ;psect for function _getMain_All_LightsStatus
 15199  1A58                     _getMain_All_LightsStatus:	
 15200                           
 15201                           ;Main_B1.c: 374: char status = 0;
 15202                           
 15203                           ;incstack = 0
 15204                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15205  1A58  0020               	movlb	0	; select bank0
 15206  1A59  01A0               	clrf	getMain_All_LightsStatus@status
 15207                           
 15208                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15209  1A5A  3000               	movlw	0
 15210  1A5B  0022               	movlb	2	; select bank2
 15211  1A5C  1862               	btfsc	(_DimmerLights1^(0+256)+1),0
 15212  1A5D  3001               	movlw	1
 15213  1A5E  0020               	movlb	0	; select bank0
 15214  1A5F  00A0               	movwf	getMain_All_LightsStatus@status
 15215                           
 15216                           ;Main_B1.c: 420: return status;
 15217  1A60  0820               	movf	getMain_All_LightsStatus@status,w
 15218  1A61  0008               	return
 15219  1A62                     __end_of_getMain_All_LightsStatus:	
 15220                           
 15221                           	psect	text101
 15222  1B99                     __ptext101:	
 15223 ;; *************** function _getDelayOff_GO *****************
 15224 ;; Defined at:
 15225 ;;		line 114 in file "../src/DelayOff_B1.c"
 15226 ;; Parameters:    Size  Location     Type
 15227 ;;  sw              1    wreg     unsigned char 
 15228 ;; Auto vars:     Size  Location     Type
 15229 ;;  sw              1    2[BANK0 ] unsigned char 
 15230 ;;  go              1    3[BANK0 ] unsigned char 
 15231 ;; Return value:  Size  Location     Type
 15232 ;;                  1    wreg      unsigned char 
 15233 ;; Registers used:
 15234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15235 ;; Tracked objects:
 15236 ;;		On entry : 0/0
 15237 ;;		On exit  : 0/0
 15238 ;;		Unchanged: 0/0
 15239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;Total ram usage:        2 bytes
 15245 ;; Hardware stack levels used:    1
 15246 ;; Hardware stack levels required when called:    6
 15247 ;; This function calls:
 15248 ;;		_DelayOffPointSelect
 15249 ;; This function is called by:
 15250 ;;		_setDimmerLights_OnOff
 15251 ;; This function uses a non-reentrant model
 15252 ;;
 15253                           
 15254                           
 15255                           ;psect for function _getDelayOff_GO
 15256  1B99                     _getDelayOff_GO:	
 15257                           
 15258                           ;incstack = 0
 15259                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15260                           ;getDelayOff_GO@sw stored from wreg
 15261  1B99  0020               	movlb	0	; select bank0
 15262  1B9A  00A2               	movwf	getDelayOff_GO@sw
 15263                           
 15264                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15265  1B9B  0822               	movf	getDelayOff_GO@sw,w
 15266  1B9C  319A  228E         	fcall	_DelayOffPointSelect
 15267                           
 15268                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15269  1B9E  0021               	movlb	1	; select bank1
 15270  1B9F  084A               	movf	_DelayOff^(0+128),w
 15271  1BA0  0086               	movwf	6
 15272  1BA1  3001               	movlw	1	; select bank2/3
 15273  1BA2  0087               	movwf	7
 15274  1BA3  3000               	movlw	0
 15275  1BA4  1881               	btfsc	1,1
 15276  1BA5  3001               	movlw	1
 15277  1BA6  0020               	movlb	0	; select bank0
 15278  1BA7  00A3               	movwf	getDelayOff_GO@go
 15279                           
 15280                           ;DelayOff_B1.c: 117: return go;
 15281  1BA8  0823               	movf	getDelayOff_GO@go,w
 15282  1BA9  0008               	return
 15283  1BAA                     __end_of_getDelayOff_GO:	
 15284                           
 15285                           	psect	text102
 15286  1BDD                     __ptext102:	
 15287 ;; *************** function _getCmd_Status *****************
 15288 ;; Defined at:
 15289 ;;		line 659 in file "../src/Main_B1.c"
 15290 ;; Parameters:    Size  Location     Type
 15291 ;;  number          1    wreg     unsigned char 
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;  number          1    0[BANK0 ] unsigned char 
 15294 ;;  cmd             1    1[BANK0 ] unsigned char 
 15295 ;; Return value:  Size  Location     Type
 15296 ;;                  1    wreg      unsigned char 
 15297 ;; Registers used:
 15298 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15299 ;; Tracked objects:
 15300 ;;		On entry : 0/0
 15301 ;;		On exit  : 0/0
 15302 ;;		Unchanged: 0/0
 15303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;Total ram usage:        2 bytes
 15309 ;; Hardware stack levels used:    1
 15310 ;; Hardware stack levels required when called:    5
 15311 ;; This function calls:
 15312 ;;		Nothing
 15313 ;; This function is called by:
 15314 ;;		_setDimmerLights_OnOff
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           
 15319                           ;psect for function _getCmd_Status
 15320  1BDD                     _getCmd_Status:	
 15321                           
 15322                           ;incstack = 0
 15323                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15324                           ;getCmd_Status@number stored from wreg
 15325  1BDD  0020               	movlb	0	; select bank0
 15326  1BDE  00A0               	movwf	getCmd_Status@number
 15327                           
 15328                           ;Main_B1.c: 660: char cmd = 0;
 15329  1BDF  01A1               	clrf	getCmd_Status@cmd
 15330                           
 15331                           ;Main_B1.c: 661: switch (number) {
 15332  1BE0  2BE8               	goto	l6775
 15333  1BE1                     l6771:	
 15334                           ;Main_B1.c: 662: case 1:
 15335                           
 15336                           
 15337                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15338  1BE1  3000               	movlw	0
 15339  1BE2  0021               	movlb	1	; select bank1
 15340  1BE3  1849               	btfsc	_Cmd^(0+128),0
 15341  1BE4  3001               	movlw	1
 15342  1BE5  0020               	movlb	0	; select bank0
 15343  1BE6  00A1               	movwf	getCmd_Status@cmd
 15344                           
 15345                           ;Main_B1.c: 665: }
 15346                           
 15347                           ;Main_B1.c: 664: break;
 15348  1BE7  2BED               	goto	l6777
 15349  1BE8                     l6775:	
 15350  1BE8  0820               	movf	getCmd_Status@number,w
 15351                           
 15352                           ; Switch size 1, requested type "space"
 15353                           ; Number of cases is 1, Range of values is 1 to 1
 15354                           ; switch strategies available:
 15355                           ; Name         Instructions Cycles
 15356                           ; simple_byte            4     3 (average)
 15357                           ; direct_byte           11     9 (fixed)
 15358                           ; jumptable            263     9 (fixed)
 15359                           ;	Chosen strategy is simple_byte
 15360  1BE9  3A01               	xorlw	1	; case 1
 15361  1BEA  1903               	skipnz
 15362  1BEB  2BE1               	goto	l6771
 15363  1BEC  2BED               	goto	l6777
 15364  1BED                     l6777:	
 15365                           
 15366                           ;Main_B1.c: 666: return cmd;
 15367  1BED  0821               	movf	getCmd_Status@cmd,w
 15368  1BEE  0008               	return
 15369  1BEF                     __end_of_getCmd_Status:	
 15370                           
 15371                           	psect	text103
 15372  13DA                     __ptext103:	
 15373 ;; *************** function _setDimmerLights_Dimming *****************
 15374 ;; Defined at:
 15375 ;;		line 1018 in file "../src/Dimmer_B1.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;  lights          1    wreg     unsigned char 
 15378 ;;  status          1   74[BANK0 ] unsigned char 
 15379 ;; Auto vars:     Size  Location     Type
 15380 ;;  lights          1   77[BANK0 ] unsigned char 
 15381 ;;  value           1   76[BANK0 ] unsigned char 
 15382 ;; Return value:  Size  Location     Type
 15383 ;;		None               void
 15384 ;; Registers used:
 15385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15391 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;Total ram usage:        4 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; Hardware stack levels required when called:    8
 15398 ;; This function calls:
 15399 ;;		_getDimmerIntr_DimmingValue
 15400 ;;		_getDimmerLights_ValueToPercent
 15401 ;;		_setBuz
 15402 ;;		_setDimmerIntr_Dimming_Sw
 15403 ;;		_setDimmerIntr_MaxmumValue
 15404 ;;		_setDimmerLights_Line
 15405 ;;		_setMemory_Modify
 15406 ;;		_setProductData
 15407 ;;		_setRF_DimmerLights
 15408 ;;		_setRF_TransceiveGO
 15409 ;;		_setTxData
 15410 ;; This function is called by:
 15411 ;;		_setDimmerLights_Main
 15412 ;; This function uses a non-reentrant model
 15413 ;;
 15414                           
 15415                           
 15416                           ;psect for function _setDimmerLights_Dimming
 15417  13DA                     _setDimmerLights_Dimming:	
 15418                           
 15419                           ;incstack = 0
 15420                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15421                           ;setDimmerLights_Dimming@lights stored from wreg
 15422  13DA  0020               	movlb	0	; select bank0
 15423  13DB  00ED               	movwf	setDimmerLights_Dimming@lights
 15424                           
 15425                           ;Dimmer_B1.c: 1019: setDimmerIntr_Dimming_Sw(lights, status);
 15426  13DC  086A               	movf	setDimmerLights_Dimming@status,w
 15427  13DD  00EB               	movwf	??_setDimmerLights_Dimming
 15428  13DE  086B               	movf	??_setDimmerLights_Dimming,w
 15429  13DF  00A0               	movwf	setDimmerIntr_Dimming_Sw@command
 15430  13E0  086D               	movf	setDimmerLights_Dimming@lights,w
 15431  13E1  319D  2514  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15432                           
 15433                           ;Dimmer_B1.c: 1020: if (status == 1) {
 15434  13E4  0020               	movlb	0	; select bank0
 15435  13E5  086A               	movf	setDimmerLights_Dimming@status,w
 15436  13E6  3A01               	xorlw	1
 15437  13E7  1D03               	skipz
 15438  13E8  2BF6               	goto	l7079
 15439                           
 15440                           ;Dimmer_B1.c: 1022: setRF_TransceiveGO(0);
 15441  13E9  3000               	movlw	0
 15442  13EA  319C  244A  3193   	fcall	_setRF_TransceiveGO
 15443                           
 15444                           ;Dimmer_B1.c: 1024: setBuz(1, 100);
 15445  13ED  3064               	movlw	100
 15446  13EE  0020               	movlb	0	; select bank0
 15447  13EF  00A9               	movwf	setBuz@time
 15448  13F0  3000               	movlw	0
 15449  13F1  00AA               	movwf	setBuz@time+1
 15450  13F2  3001               	movlw	1
 15451  13F3  3194  242E         	fcall	_setBuz
 15452                           
 15453                           ;Dimmer_B1.c: 1025: } else if (status == 0) {
 15454  13F5  0008               	return
 15455  13F6                     l7079:	
 15456  13F6  0020               	movlb	0	; select bank0
 15457  13F7  08EA               	movf	setDimmerLights_Dimming@status,f
 15458  13F8  1D03               	skipz
 15459  13F9  0008               	return
 15460                           
 15461                           ;Dimmer_B1.c: 1028: Dimmer.Load_Status = 0;
 15462  13FA  0022               	movlb	2	; select bank2
 15463  13FB  112C               	bcf	_Dimmer^(0+256),2
 15464                           
 15465                           ;Dimmer_B1.c: 1029: setDimmerLights_Line(lights);
 15466  13FC  0020               	movlb	0	; select bank0
 15467  13FD  086D               	movf	setDimmerLights_Dimming@lights,w
 15468  13FE  319B  2388  3193   	fcall	_setDimmerLights_Line
 15469                           
 15470                           ;Dimmer_B1.c: 1031: char value = getDimmerIntr_DimmingValue(lights);
 15471  1401  0020               	movlb	0	; select bank0
 15472  1402  086D               	movf	setDimmerLights_Dimming@lights,w
 15473  1403  319B  2349  3193   	fcall	_getDimmerIntr_DimmingValue
 15474  1406  0020               	movlb	0	; select bank0
 15475  1407  00EB               	movwf	??_setDimmerLights_Dimming
 15476  1408  086B               	movf	??_setDimmerLights_Dimming,w
 15477  1409  00EC               	movwf	setDimmerLights_Dimming@value
 15478                           
 15479                           ;Dimmer_B1.c: 1032: setDimmerIntr_MaxmumValue(lights, value);
 15480  140A  086C               	movf	setDimmerLights_Dimming@value,w
 15481  140B  00EB               	movwf	??_setDimmerLights_Dimming
 15482  140C  086B               	movf	??_setDimmerLights_Dimming,w
 15483  140D  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15484  140E  086D               	movf	setDimmerLights_Dimming@lights,w
 15485  140F  319A  22B2  3193   	fcall	_setDimmerIntr_MaxmumValue
 15486                           
 15487                           ;Dimmer_B1.c: 1033: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15488  1412  0020               	movlb	0	; select bank0
 15489  1413  086C               	movf	setDimmerLights_Dimming@value,w
 15490  1414  3196  2664  3193   	fcall	_getDimmerLights_ValueToPercent
 15491  1417  0020               	movlb	0	; select bank0
 15492  1418  00EB               	movwf	??_setDimmerLights_Dimming
 15493  1419  086B               	movf	??_setDimmerLights_Dimming,w
 15494  141A  00E2               	movwf	setProductData@value
 15495  141B  086D               	movf	setDimmerLights_Dimming@lights,w
 15496  141C  3E14               	addlw	20
 15497  141D  319A  22A6  3193   	fcall	_setProductData
 15498                           
 15499                           ;Dimmer_B1.c: 1040: setMemory_Modify(1);
 15500  1420  3001               	movlw	1
 15501  1421  319C  2437  3193   	fcall	_setMemory_Modify
 15502                           
 15503                           ;Dimmer_B1.c: 1044: setRF_DimmerLights(lights, 1);
 15504  1424  0020               	movlb	0	; select bank0
 15505  1425  01E5               	clrf	setRF_DimmerLights@on
 15506  1426  0AE5               	incf	setRF_DimmerLights@on,f
 15507  1427  086D               	movf	setDimmerLights_Dimming@lights,w
 15508  1428  3196  26C9  3193   	fcall	_setRF_DimmerLights
 15509                           
 15510                           ;Dimmer_B1.c: 1045: setTxData();
 15511  142B  318E  267F         	fcall	_setTxData
 15512  142D  0008               	return
 15513  142E                     __end_of_setDimmerLights_Dimming:	
 15514                           
 15515                           	psect	text104
 15516  0E7F                     __ptext104:	
 15517 ;; *************** function _setTxData *****************
 15518 ;; Defined at:
 15519 ;;		line 183 in file "../src/RF_Control_B1.c"
 15520 ;; Parameters:    Size  Location     Type
 15521 ;;		None
 15522 ;; Auto vars:     Size  Location     Type
 15523 ;;  i               1    0        unsigned char 
 15524 ;; Return value:  Size  Location     Type
 15525 ;;		None               void
 15526 ;; Registers used:
 15527 ;;		wreg, fsr1l, fsr1h, status,2
 15528 ;; Tracked objects:
 15529 ;;		On entry : 0/0
 15530 ;;		On exit  : 0/0
 15531 ;;		Unchanged: 0/0
 15532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;Total ram usage:        1 bytes
 15538 ;; Hardware stack levels used:    1
 15539 ;; Hardware stack levels required when called:    5
 15540 ;; This function calls:
 15541 ;;		Nothing
 15542 ;; This function is called by:
 15543 ;;		_setDimmerLights_OnOff
 15544 ;;		_setDimmerLights_Dimming
 15545 ;;		_getRxData
 15546 ;;		_setControl_Lights_Table
 15547 ;;		_setRFSW_Control
 15548 ;;		_setRFSW_AdjControl
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           
 15553                           ;psect for function _setTxData
 15554  0E7F                     _setTxData:	
 15555                           
 15556                           ;RF_Control_B1.c: 184: char i;
 15557                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15558                           
 15559                           ;incstack = 0
 15560                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15561  0E7F  0021               	movlb	1	; select bank1
 15562  0E80  1C20               	btfss	_RF1^(0+128),0
 15563  0E81  0008               	return
 15564                           
 15565                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15566  0E82  1520               	bsf	_RF1^(0+128),2
 15567                           
 15568                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15569  0E83  01A3               	clrf	(_RF1^(0+128)+3)
 15570  0E84  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15571                           
 15572                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15573  0E85  3063               	movlw	99
 15574  0E86  0020               	movlb	0	; select bank0
 15575  0E87  00A0               	movwf	??_setTxData
 15576  0E88  0820               	movf	??_setTxData,w
 15577  0E89  0023               	movlb	3	; select bank3
 15578  0E8A  00A0               	movwf	_RF_Data^(0+384)
 15579                           
 15580                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15581  0E8B  3002               	movlw	2
 15582  0E8C  0020               	movlb	0	; select bank0
 15583  0E8D  00A0               	movwf	??_setTxData
 15584  0E8E  0820               	movf	??_setTxData,w
 15585  0E8F  0023               	movlb	3	; select bank3
 15586  0E90  00A1               	movwf	(_RF_Data^(0+384)+1)
 15587                           
 15588                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15589  0E91  0021               	movlb	1	; select bank1
 15590  0E92  086E               	movf	_product^(0+128),w
 15591  0E93  0086               	movwf	6
 15592  0E94  3001               	movlw	1	; select bank2/3
 15593  0E95  0087               	movwf	7
 15594  0E96  3001               	movlw	1	; select bank2/3
 15595  0E97  3F42               	moviw [2]fsr1
 15596  0E98  0023               	movlb	3	; select bank3
 15597  0E99  00A2               	movwf	(_RF_Data^(0+384)+2)
 15598                           
 15599                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15600  0E9A  0021               	movlb	1	; select bank1
 15601  0E9B  086E               	movf	_product^(0+128),w
 15602  0E9C  0086               	movwf	6
 15603  0E9D  3001               	movlw	1	; select bank2/3
 15604  0E9E  0087               	movwf	7
 15605  0E9F  3001               	movlw	1	; select bank2/3
 15606  0EA0  3F43               	moviw [3]fsr1
 15607  0EA1  0023               	movlb	3	; select bank3
 15608  0EA2  00A3               	movwf	(_RF_Data^(0+384)+3)
 15609                           
 15610                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15611  0EA3  0021               	movlb	1	; select bank1
 15612  0EA4  086E               	movf	_product^(0+128),w
 15613  0EA5  0086               	movwf	6
 15614  0EA6  3001               	movlw	1	; select bank2/3
 15615  0EA7  0087               	movwf	7
 15616  0EA8  3001               	movlw	1	; select bank2/3
 15617  0EA9  3F44               	moviw [4]fsr1
 15618  0EAA  0023               	movlb	3	; select bank3
 15619  0EAB  00A4               	movwf	(_RF_Data^(0+384)+4)
 15620                           
 15621                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15622  0EAC  0021               	movlb	1	; select bank1
 15623  0EAD  086E               	movf	_product^(0+128),w
 15624  0EAE  0086               	movwf	6
 15625  0EAF  3001               	movlw	1	; select bank2/3
 15626  0EB0  0087               	movwf	7
 15627  0EB1  3001               	movlw	1	; select bank2/3
 15628  0EB2  3F45               	moviw [5]fsr1
 15629  0EB3  0023               	movlb	3	; select bank3
 15630  0EB4  00A5               	movwf	(_RF_Data^(0+384)+5)
 15631                           
 15632                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15633  0EB5  0021               	movlb	1	; select bank1
 15634  0EB6  086E               	movf	_product^(0+128),w
 15635  0EB7  0086               	movwf	6
 15636  0EB8  3001               	movlw	1	; select bank2/3
 15637  0EB9  0087               	movwf	7
 15638  0EBA  3001               	movlw	1	; select bank2/3
 15639  0EBB  3F46               	moviw [6]fsr1
 15640  0EBC  0023               	movlb	3	; select bank3
 15641  0EBD  00A6               	movwf	(_RF_Data^(0+384)+6)
 15642                           
 15643                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15644  0EBE  0021               	movlb	1	; select bank1
 15645  0EBF  086E               	movf	_product^(0+128),w
 15646  0EC0  0086               	movwf	6
 15647  0EC1  3001               	movlw	1	; select bank2/3
 15648  0EC2  0087               	movwf	7
 15649  0EC3  3001               	movlw	1	; select bank2/3
 15650  0EC4  3F47               	moviw [7]fsr1
 15651  0EC5  0023               	movlb	3	; select bank3
 15652  0EC6  00A7               	movwf	(_RF_Data^(0+384)+7)
 15653                           
 15654                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15655  0EC7  0021               	movlb	1	; select bank1
 15656  0EC8  086E               	movf	_product^(0+128),w
 15657  0EC9  0086               	movwf	6
 15658  0ECA  3001               	movlw	1	; select bank2/3
 15659  0ECB  0087               	movwf	7
 15660  0ECC  3001               	movlw	1	; select bank2/3
 15661  0ECD  3F48               	moviw [8]fsr1
 15662  0ECE  0023               	movlb	3	; select bank3
 15663  0ECF  00A8               	movwf	(_RF_Data^(0+384)+8)
 15664                           
 15665                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15666  0ED0  0021               	movlb	1	; select bank1
 15667  0ED1  086E               	movf	_product^(0+128),w
 15668  0ED2  0086               	movwf	6
 15669  0ED3  3001               	movlw	1	; select bank2/3
 15670  0ED4  0087               	movwf	7
 15671  0ED5  3001               	movlw	1	; select bank2/3
 15672  0ED6  3F49               	moviw [9]fsr1
 15673  0ED7  0023               	movlb	3	; select bank3
 15674  0ED8  00A9               	movwf	(_RF_Data^(0+384)+9)
 15675                           
 15676                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15677  0ED9  0021               	movlb	1	; select bank1
 15678  0EDA  086E               	movf	_product^(0+128),w
 15679  0EDB  0086               	movwf	6
 15680  0EDC  3001               	movlw	1	; select bank2/3
 15681  0EDD  0087               	movwf	7
 15682  0EDE  3001               	movlw	1	; select bank2/3
 15683  0EDF  3F4A               	moviw [10]fsr1
 15684  0EE0  0023               	movlb	3	; select bank3
 15685  0EE1  00AA               	movwf	(_RF_Data^(0+384)+10)
 15686                           
 15687                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15688  0EE2  0021               	movlb	1	; select bank1
 15689  0EE3  086E               	movf	_product^(0+128),w
 15690  0EE4  0086               	movwf	6
 15691  0EE5  3001               	movlw	1	; select bank2/3
 15692  0EE6  0087               	movwf	7
 15693  0EE7  3001               	movlw	1	; select bank2/3
 15694  0EE8  3F4B               	moviw [11]fsr1
 15695  0EE9  0023               	movlb	3	; select bank3
 15696  0EEA  00AB               	movwf	(_RF_Data^(0+384)+11)
 15697                           
 15698                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15699  0EEB  0021               	movlb	1	; select bank1
 15700  0EEC  086E               	movf	_product^(0+128),w
 15701  0EED  0086               	movwf	6
 15702  0EEE  3001               	movlw	1	; select bank2/3
 15703  0EEF  0087               	movwf	7
 15704  0EF0  3001               	movlw	1	; select bank2/3
 15705  0EF1  3F4C               	moviw [12]fsr1
 15706  0EF2  0023               	movlb	3	; select bank3
 15707  0EF3  00AC               	movwf	(_RF_Data^(0+384)+12)
 15708                           
 15709                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15710  0EF4  0021               	movlb	1	; select bank1
 15711  0EF5  086E               	movf	_product^(0+128),w
 15712  0EF6  0086               	movwf	6
 15713  0EF7  3001               	movlw	1	; select bank2/3
 15714  0EF8  0087               	movwf	7
 15715  0EF9  3001               	movlw	1	; select bank2/3
 15716  0EFA  3F4D               	moviw [13]fsr1
 15717  0EFB  0023               	movlb	3	; select bank3
 15718  0EFC  00AD               	movwf	(_RF_Data^(0+384)+13)
 15719                           
 15720                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15721  0EFD  0021               	movlb	1	; select bank1
 15722  0EFE  086E               	movf	_product^(0+128),w
 15723  0EFF  0086               	movwf	6
 15724  0F00  3001               	movlw	1	; select bank2/3
 15725  0F01  0087               	movwf	7
 15726  0F02  3001               	movlw	1	; select bank2/3
 15727  0F03  3F4E               	moviw [14]fsr1
 15728  0F04  0023               	movlb	3	; select bank3
 15729  0F05  00AE               	movwf	(_RF_Data^(0+384)+14)
 15730                           
 15731                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15732  0F06  0021               	movlb	1	; select bank1
 15733  0F07  086E               	movf	_product^(0+128),w
 15734  0F08  0086               	movwf	6
 15735  0F09  3001               	movlw	1	; select bank2/3
 15736  0F0A  0087               	movwf	7
 15737  0F0B  3001               	movlw	1	; select bank2/3
 15738  0F0C  3F4F               	moviw [15]fsr1
 15739  0F0D  0023               	movlb	3	; select bank3
 15740  0F0E  00AF               	movwf	(_RF_Data^(0+384)+15)
 15741                           
 15742                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15743  0F0F  0021               	movlb	1	; select bank1
 15744  0F10  086E               	movf	_product^(0+128),w
 15745  0F11  0086               	movwf	6
 15746  0F12  3001               	movlw	1	; select bank2/3
 15747  0F13  0087               	movwf	7
 15748  0F14  3001               	movlw	1	; select bank2/3
 15749  0F15  3F50               	moviw [16]fsr1
 15750  0F16  0023               	movlb	3	; select bank3
 15751  0F17  00B0               	movwf	(_RF_Data^(0+384)+16)
 15752                           
 15753                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15754  0F18  0021               	movlb	1	; select bank1
 15755  0F19  086E               	movf	_product^(0+128),w
 15756  0F1A  0086               	movwf	6
 15757  0F1B  3001               	movlw	1	; select bank2/3
 15758  0F1C  0087               	movwf	7
 15759  0F1D  3001               	movlw	1	; select bank2/3
 15760  0F1E  3F51               	moviw [17]fsr1
 15761  0F1F  0023               	movlb	3	; select bank3
 15762  0F20  00B1               	movwf	(_RF_Data^(0+384)+17)
 15763                           
 15764                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15765  0F21  0021               	movlb	1	; select bank1
 15766  0F22  086E               	movf	_product^(0+128),w
 15767  0F23  0086               	movwf	6
 15768  0F24  3001               	movlw	1	; select bank2/3
 15769  0F25  0087               	movwf	7
 15770  0F26  3001               	movlw	1	; select bank2/3
 15771  0F27  3F52               	moviw [18]fsr1
 15772  0F28  0023               	movlb	3	; select bank3
 15773  0F29  00B2               	movwf	(_RF_Data^(0+384)+18)
 15774                           
 15775                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15776  0F2A  0021               	movlb	1	; select bank1
 15777  0F2B  086E               	movf	_product^(0+128),w
 15778  0F2C  0086               	movwf	6
 15779  0F2D  3001               	movlw	1	; select bank2/3
 15780  0F2E  0087               	movwf	7
 15781  0F2F  3001               	movlw	1	; select bank2/3
 15782  0F30  3F53               	moviw [19]fsr1
 15783  0F31  0023               	movlb	3	; select bank3
 15784  0F32  00B3               	movwf	(_RF_Data^(0+384)+19)
 15785                           
 15786                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15787  0F33  30D1               	movlw	209
 15788  0F34  0020               	movlb	0	; select bank0
 15789  0F35  00A0               	movwf	??_setTxData
 15790  0F36  0820               	movf	??_setTxData,w
 15791  0F37  0023               	movlb	3	; select bank3
 15792  0F38  00B4               	movwf	(_RF_Data^(0+384)+20)
 15793  0F39  0008               	return
 15794  0F3A                     __end_of_setTxData:	
 15795                           
 15796                           	psect	text105
 15797  1C4A                     __ptext105:	
 15798 ;; *************** function _setRF_TransceiveGO *****************
 15799 ;; Defined at:
 15800 ;;		line 518 in file "../src/RF_Control_B1.c"
 15801 ;; Parameters:    Size  Location     Type
 15802 ;;  command         1    wreg     unsigned char 
 15803 ;; Auto vars:     Size  Location     Type
 15804 ;;  command         1    1[BANK0 ] unsigned char 
 15805 ;; Return value:  Size  Location     Type
 15806 ;;		None               void
 15807 ;; Registers used:
 15808 ;;		wreg, status,2, status,0
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;Total ram usage:        2 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; Hardware stack levels required when called:    5
 15821 ;; This function calls:
 15822 ;;		Nothing
 15823 ;; This function is called by:
 15824 ;;		_setDimmerLights_Dimming
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           
 15829                           ;psect for function _setRF_TransceiveGO
 15830  1C4A                     _setRF_TransceiveGO:	
 15831                           
 15832                           ;incstack = 0
 15833                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15834                           ;setRF_TransceiveGO@command stored from wreg
 15835  1C4A  0020               	movlb	0	; select bank0
 15836  1C4B  00A1               	movwf	setRF_TransceiveGO@command
 15837                           
 15838                           ;RF_Control_B1.c: 519: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15839  1C4C  0821               	movf	setRF_TransceiveGO@command,w
 15840  1C4D  3A01               	xorlw	1
 15841  1C4E  3000               	movlw	0
 15842  1C4F  1903               	skipnz
 15843  1C50  3001               	movlw	1
 15844  1C51  00A0               	movwf	??_setRF_TransceiveGO
 15845  1C52  0DA0               	rlf	??_setRF_TransceiveGO,f
 15846  1C53  0DA0               	rlf	??_setRF_TransceiveGO,f
 15847  1C54  0021               	movlb	1	; select bank1
 15848  1C55  0820               	movf	_RF1^(0+128),w
 15849  1C56  0020               	movlb	0	; select bank0
 15850  1C57  0620               	xorwf	??_setRF_TransceiveGO,w
 15851  1C58  39FB               	andlw	-5
 15852  1C59  0620               	xorwf	??_setRF_TransceiveGO,w
 15853  1C5A  0021               	movlb	1	; select bank1
 15854  1C5B  00A0               	movwf	_RF1^(0+128)
 15855  1C5C  0008               	return
 15856  1C5D                     __end_of_setRF_TransceiveGO:	
 15857                           
 15858                           	psect	text106
 15859  16C9                     __ptext106:	
 15860 ;; *************** function _setRF_DimmerLights *****************
 15861 ;; Defined at:
 15862 ;;		line 503 in file "../src/RF_Control_B1.c"
 15863 ;; Parameters:    Size  Location     Type
 15864 ;;  lights          1    wreg     unsigned char 
 15865 ;;  on              1   69[BANK0 ] unsigned char 
 15866 ;; Auto vars:     Size  Location     Type
 15867 ;;  lights          1   73[BANK0 ] unsigned char 
 15868 ;;  status          1   72[BANK0 ] unsigned char 
 15869 ;; Return value:  Size  Location     Type
 15870 ;;		None               void
 15871 ;; Registers used:
 15872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15878 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;Total ram usage:        5 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; Hardware stack levels required when called:    6
 15885 ;; This function calls:
 15886 ;;		_setProductData
 15887 ;; This function is called by:
 15888 ;;		_setDimmerLights_OnOff
 15889 ;;		_setDimmerLights_Dimming
 15890 ;;		_setRFSW_Control
 15891 ;; This function uses a non-reentrant model
 15892 ;;
 15893                           
 15894                           
 15895                           ;psect for function _setRF_DimmerLights
 15896  16C9                     _setRF_DimmerLights:	
 15897                           
 15898                           ;incstack = 0
 15899                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15900                           ;setRF_DimmerLights@lights stored from wreg
 15901  16C9  0020               	movlb	0	; select bank0
 15902  16CA  00E9               	movwf	setRF_DimmerLights@lights
 15903                           
 15904                           ;RF_Control_B1.c: 504: char status = 1;
 15905  16CB  01E8               	clrf	setRF_DimmerLights@status
 15906  16CC  0AE8               	incf	setRF_DimmerLights@status,f
 15907                           
 15908                           ;RF_Control_B1.c: 505: status <<= (lights - 1);
 15909  16CD  0869               	movf	setRF_DimmerLights@lights,w
 15910  16CE  3EFF               	addlw	-1
 15911  16CF  0A89               	incf	9,f
 15912  16D0  2ED3               	goto	u5490
 15913  16D1                     u5495:	
 15914  16D1  1003               	clrc
 15915  16D2  0DE8               	rlf	setRF_DimmerLights@status,f
 15916  16D3                     u5490:	
 15917  16D3  3EFF               	addlw	-1
 15918  16D4  1D03               	skipz
 15919  16D5  2ED1               	goto	u5495
 15920                           
 15921                           ;RF_Control_B1.c: 506: setProductData(11, lights);
 15922  16D6  0869               	movf	setRF_DimmerLights@lights,w
 15923  16D7  00E6               	movwf	??_setRF_DimmerLights
 15924  16D8  0866               	movf	??_setRF_DimmerLights,w
 15925  16D9  00E2               	movwf	setProductData@value
 15926  16DA  300B               	movlw	11
 15927  16DB  319A  22A6  3196   	fcall	_setProductData
 15928                           
 15929                           ;RF_Control_B1.c: 507: setProductData(17, product->Data[26 + lights]);
 15930  16DE  0020               	movlb	0	; select bank0
 15931  16DF  0869               	movf	setRF_DimmerLights@lights,w
 15932  16E0  3E1A               	addlw	26
 15933  16E1  0021               	movlb	1	; select bank1
 15934  16E2  076E               	addwf	_product^(0+128),w
 15935  16E3  0020               	movlb	0	; select bank0
 15936  16E4  00E6               	movwf	??_setRF_DimmerLights
 15937  16E5  0866               	movf	??_setRF_DimmerLights,w
 15938  16E6  0086               	movwf	6
 15939  16E7  3001               	movlw	1	; select bank2/3
 15940  16E8  0087               	movwf	7
 15941  16E9  0801               	movf	1,w
 15942  16EA  00E7               	movwf	??_setRF_DimmerLights+1
 15943  16EB  0867               	movf	??_setRF_DimmerLights+1,w
 15944  16EC  00E2               	movwf	setProductData@value
 15945  16ED  3011               	movlw	17
 15946  16EE  319A  22A6  3196   	fcall	_setProductData
 15947                           
 15948                           ;RF_Control_B1.c: 508: if (on == 1) {
 15949  16F1  0020               	movlb	0	; select bank0
 15950  16F2  0865               	movf	setRF_DimmerLights@on,w
 15951  16F3  3A01               	xorlw	1
 15952  16F4  1D03               	skipz
 15953  16F5  2F18               	goto	l6361
 15954                           
 15955                           ;RF_Control_B1.c: 509: setProductData(9, product->Data[20 + lights]);
 15956  16F6  0869               	movf	setRF_DimmerLights@lights,w
 15957  16F7  3E14               	addlw	20
 15958  16F8  0021               	movlb	1	; select bank1
 15959  16F9  076E               	addwf	_product^(0+128),w
 15960  16FA  0020               	movlb	0	; select bank0
 15961  16FB  00E6               	movwf	??_setRF_DimmerLights
 15962  16FC  0866               	movf	??_setRF_DimmerLights,w
 15963  16FD  0086               	movwf	6
 15964  16FE  3001               	movlw	1	; select bank2/3
 15965  16FF  0087               	movwf	7
 15966  1700  0801               	movf	1,w
 15967  1701  00E7               	movwf	??_setRF_DimmerLights+1
 15968  1702  0867               	movf	??_setRF_DimmerLights+1,w
 15969  1703  00E2               	movwf	setProductData@value
 15970  1704  3009               	movlw	9
 15971  1705  319A  22A6  3196   	fcall	_setProductData
 15972                           
 15973                           ;RF_Control_B1.c: 510: setProductData(15, (product->Data[15] | status));
 15974  1708  0021               	movlb	1	; select bank1
 15975  1709  086E               	movf	_product^(0+128),w
 15976  170A  3E0F               	addlw	15
 15977  170B  0086               	movwf	6
 15978  170C  3001               	movlw	1	; select bank2/3
 15979  170D  0087               	movwf	7
 15980  170E  0801               	movf	1,w
 15981  170F  0020               	movlb	0	; select bank0
 15982  1710  0468               	iorwf	setRF_DimmerLights@status,w
 15983  1711  00E6               	movwf	??_setRF_DimmerLights
 15984  1712  0866               	movf	??_setRF_DimmerLights,w
 15985  1713  00E2               	movwf	setProductData@value
 15986  1714  300F               	movlw	15
 15987  1715  319A  22A6         	fcall	_setProductData
 15988                           
 15989                           ;RF_Control_B1.c: 511: } else {
 15990  1717  0008               	return
 15991  1718                     l6361:	
 15992                           
 15993                           ;RF_Control_B1.c: 512: setProductData(9, 0x00);
 15994  1718  0020               	movlb	0	; select bank0
 15995  1719  01E2               	clrf	setProductData@value
 15996  171A  3009               	movlw	9
 15997  171B  319A  22A6  3196   	fcall	_setProductData
 15998                           
 15999                           ;RF_Control_B1.c: 513: setProductData(15, (product->Data[15]&(~status)));
 16000  171E  0021               	movlb	1	; select bank1
 16001  171F  086E               	movf	_product^(0+128),w
 16002  1720  3E0F               	addlw	15
 16003  1721  0086               	movwf	6
 16004  1722  3001               	movlw	1	; select bank2/3
 16005  1723  0087               	movwf	7
 16006  1724  0020               	movlb	0	; select bank0
 16007  1725  0968               	comf	setRF_DimmerLights@status,w
 16008  1726  0501               	andwf	1,w
 16009  1727  00E6               	movwf	??_setRF_DimmerLights
 16010  1728  0866               	movf	??_setRF_DimmerLights,w
 16011  1729  00E2               	movwf	setProductData@value
 16012  172A  300F               	movlw	15
 16013  172B  319A  22A6         	fcall	_setProductData
 16014  172D  0008               	return
 16015  172E                     __end_of_setRF_DimmerLights:	
 16016                           
 16017                           	psect	text107
 16018  1B88                     __ptext107:	
 16019 ;; *************** function _setDimmerLights_Line *****************
 16020 ;; Defined at:
 16021 ;;		line 1090 in file "../src/Dimmer_B1.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;  lights          1    wreg     unsigned char 
 16024 ;; Auto vars:     Size  Location     Type
 16025 ;;  lights          1    0[BANK0 ] unsigned char 
 16026 ;; Return value:  Size  Location     Type
 16027 ;;		None               void
 16028 ;; Registers used:
 16029 ;;		wreg
 16030 ;; Tracked objects:
 16031 ;;		On entry : 0/0
 16032 ;;		On exit  : 0/0
 16033 ;;		Unchanged: 0/0
 16034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;Total ram usage:        1 bytes
 16040 ;; Hardware stack levels used:    1
 16041 ;; Hardware stack levels required when called:    5
 16042 ;; This function calls:
 16043 ;;		Nothing
 16044 ;; This function is called by:
 16045 ;;		_setDimmerLights_OnOff
 16046 ;;		_setDimmerLights_Dimming
 16047 ;; This function uses a non-reentrant model
 16048 ;;
 16049                           
 16050                           
 16051                           ;psect for function _setDimmerLights_Line
 16052  1B88                     _setDimmerLights_Line:	
 16053                           
 16054                           ;incstack = 0
 16055                           ; Regs used in _setDimmerLights_Line: [wreg]
 16056                           ;setDimmerLights_Line@lights stored from wreg
 16057  1B88  0020               	movlb	0	; select bank0
 16058  1B89  00A0               	movwf	setDimmerLights_Line@lights
 16059                           
 16060                           ;Dimmer_B1.c: 1091: Dimmer.LoadGO = 1;
 16061  1B8A  0022               	movlb	2	; select bank2
 16062  1B8B  14AC               	bsf	_Dimmer^(0+256),1
 16063                           
 16064                           ;Dimmer_B1.c: 1093: DimmerLights1.Line = 0;
 16065  1B8C  10E2               	bcf	(_DimmerLights1^(0+256)+1),1
 16066                           
 16067                           ;Dimmer_B1.c: 1094: if (lights == 1 && lights != 0) {
 16068  1B8D  0020               	movlb	0	; select bank0
 16069  1B8E  0820               	movf	setDimmerLights_Line@lights,w
 16070  1B8F  3A01               	xorlw	1
 16071  1B90  1D03               	skipz
 16072  1B91  0008               	return
 16073  1B92  0820               	movf	setDimmerLights_Line@lights,w
 16074  1B93  1903               	btfsc	3,2
 16075  1B94  0008               	return
 16076                           
 16077                           ;Dimmer_B1.c: 1095: DimmerLights1.Line = 1;
 16078  1B95  0022               	movlb	2	; select bank2
 16079  1B96  14E2               	bsf	(_DimmerLights1^(0+256)+1),1
 16080  1B97  0020               	movlb	0	; select bank0
 16081  1B98  0008               	return
 16082  1B99                     __end_of_setDimmerLights_Line:	
 16083                           
 16084                           	psect	text108
 16085  1AB2                     __ptext108:	
 16086 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16087 ;; Defined at:
 16088 ;;		line 146 in file "../src/Dimmer_B1.c"
 16089 ;; Parameters:    Size  Location     Type
 16090 ;;  lights          1    wreg     unsigned char 
 16091 ;;  value           1   66[BANK0 ] unsigned char 
 16092 ;; Auto vars:     Size  Location     Type
 16093 ;;  lights          1   68[BANK0 ] unsigned char 
 16094 ;; Return value:  Size  Location     Type
 16095 ;;		None               void
 16096 ;; Registers used:
 16097 ;;		wreg
 16098 ;; Tracked objects:
 16099 ;;		On entry : 0/0
 16100 ;;		On exit  : 0/0
 16101 ;;		Unchanged: 0/0
 16102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16103 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;Total ram usage:        3 bytes
 16108 ;; Hardware stack levels used:    1
 16109 ;; Hardware stack levels required when called:    5
 16110 ;; This function calls:
 16111 ;;		Nothing
 16112 ;; This function is called by:
 16113 ;;		_setDimmerLights_OnOff
 16114 ;;		_setDimmerLights_Dimming
 16115 ;;		_setRFSW_AdjControl
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119                           
 16120                           ;psect for function _setDimmerIntr_MaxmumValue
 16121  1AB2                     _setDimmerIntr_MaxmumValue:	
 16122                           
 16123                           ;incstack = 0
 16124                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16125                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16126  1AB2  0020               	movlb	0	; select bank0
 16127  1AB3  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16128                           
 16129                           ;Dimmer_B1.c: 148: if (lights == 1) {
 16130  1AB4  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16131  1AB5  3A01               	xorlw	1
 16132  1AB6  1D03               	skipz
 16133  1AB7  0008               	return
 16134                           
 16135                           ;Dimmer_B1.c: 149: DimmerIntr1.MaxmumValue = value;
 16136  1AB8  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16137  1AB9  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16138  1ABA  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16139  1ABB  0021               	movlb	1	; select bank1
 16140  1ABC  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16141  1ABD  0008               	return
 16142  1ABE                     __end_of_setDimmerIntr_MaxmumValue:	
 16143                           
 16144                           	psect	text109
 16145  1D14                     __ptext109:	
 16146 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16147 ;; Defined at:
 16148 ;;		line 223 in file "../src/Dimmer_B1.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;  lights          1    wreg     unsigned char 
 16151 ;;  command         1    0[BANK0 ] unsigned char 
 16152 ;; Auto vars:     Size  Location     Type
 16153 ;;  lights          1    2[BANK0 ] unsigned char 
 16154 ;; Return value:  Size  Location     Type
 16155 ;;		None               void
 16156 ;; Registers used:
 16157 ;;		wreg, status,2, status,0
 16158 ;; Tracked objects:
 16159 ;;		On entry : 0/0
 16160 ;;		On exit  : 0/0
 16161 ;;		Unchanged: 0/0
 16162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16163 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;Total ram usage:        3 bytes
 16168 ;; Hardware stack levels used:    1
 16169 ;; Hardware stack levels required when called:    5
 16170 ;; This function calls:
 16171 ;;		Nothing
 16172 ;; This function is called by:
 16173 ;;		_setDimmerLights_Dimming
 16174 ;;		_setDimmerLights_DimmingClose
 16175 ;; This function uses a non-reentrant model
 16176 ;;
 16177                           
 16178                           
 16179                           ;psect for function _setDimmerIntr_Dimming_Sw
 16180  1D14                     _setDimmerIntr_Dimming_Sw:	
 16181                           
 16182                           ;incstack = 0
 16183                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16184                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16185  1D14  0020               	movlb	0	; select bank0
 16186  1D15  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16187                           
 16188                           ;Dimmer_B1.c: 225: if (lights == 1) {
 16189  1D16  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16190  1D17  3A01               	xorlw	1
 16191  1D18  1D03               	skipz
 16192  1D19  0008               	return
 16193                           
 16194                           ;Dimmer_B1.c: 226: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16195  1D1A  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16196  1D1B  3A01               	xorlw	1
 16197  1D1C  3000               	movlw	0
 16198  1D1D  1903               	skipnz
 16199  1D1E  3001               	movlw	1
 16200  1D1F  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16201  1D20  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16202  1D21  0021               	movlb	1	; select bank1
 16203  1D22  083C               	movf	_DimmerIntr1^(0+128),w
 16204  1D23  0020               	movlb	0	; select bank0
 16205  1D24  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16206  1D25  39EF               	andlw	-17
 16207  1D26  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16208  1D27  0021               	movlb	1	; select bank1
 16209  1D28  00BC               	movwf	_DimmerIntr1^(0+128)
 16210  1D29  0008               	return
 16211  1D2A                     __end_of_setDimmerIntr_Dimming_Sw:	
 16212                           
 16213                           	psect	text110
 16214  1B49                     __ptext110:	
 16215 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16216 ;; Defined at:
 16217 ;;		line 124 in file "../src/Dimmer_B1.c"
 16218 ;; Parameters:    Size  Location     Type
 16219 ;;  lights          1    wreg     unsigned char 
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;  lights          1    1[BANK0 ] unsigned char 
 16222 ;;  value           1    2[BANK0 ] unsigned char 
 16223 ;; Return value:  Size  Location     Type
 16224 ;;                  1    wreg      unsigned char 
 16225 ;; Registers used:
 16226 ;;		wreg, status,2
 16227 ;; Tracked objects:
 16228 ;;		On entry : 0/0
 16229 ;;		On exit  : 0/0
 16230 ;;		Unchanged: 0/0
 16231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16236 ;;Total ram usage:        3 bytes
 16237 ;; Hardware stack levels used:    1
 16238 ;; Hardware stack levels required when called:    5
 16239 ;; This function calls:
 16240 ;;		Nothing
 16241 ;; This function is called by:
 16242 ;;		_setDimmerLights_Dimming
 16243 ;; This function uses a non-reentrant model
 16244 ;;
 16245                           
 16246                           
 16247                           ;psect for function _getDimmerIntr_DimmingValue
 16248  1B49                     _getDimmerIntr_DimmingValue:	
 16249                           
 16250                           ;incstack = 0
 16251                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16252                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16253  1B49  0020               	movlb	0	; select bank0
 16254  1B4A  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16255                           
 16256                           ;Dimmer_B1.c: 125: char value = 0;
 16257  1B4B  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16258                           
 16259                           ;Dimmer_B1.c: 127: if (lights == 1) {
 16260  1B4C  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16261  1B4D  3A01               	xorlw	1
 16262  1B4E  1D03               	skipz
 16263  1B4F  2B56               	goto	l693
 16264                           
 16265                           ;Dimmer_B1.c: 128: value = DimmerIntr1.DimmingValue;
 16266  1B50  0021               	movlb	1	; select bank1
 16267  1B51  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16268  1B52  0020               	movlb	0	; select bank0
 16269  1B53  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16270  1B54  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16271  1B55  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16272  1B56                     l693:	
 16273                           
 16274                           ;Dimmer_B1.c: 129: }
 16275                           ;Dimmer_B1.c: 141: return value;
 16276  1B56  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16277  1B57  0008               	return
 16278  1B58                     __end_of_getDimmerIntr_DimmingValue:	
 16279                           
 16280                           	psect	text111
 16281  1CFE                     __ptext111:	
 16282 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16283 ;; Defined at:
 16284 ;;		line 1051 in file "../src/Dimmer_B1.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;  lights          1    wreg     unsigned char 
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;  lights          1    0[COMMON] unsigned char 
 16289 ;;  allow           1    2[BANK0 ] unsigned char 
 16290 ;; Return value:  Size  Location     Type
 16291 ;;                  1    wreg      unsigned char 
 16292 ;; Registers used:
 16293 ;;		wreg, status,2, pclath, cstack
 16294 ;; Tracked objects:
 16295 ;;		On entry : 0/0
 16296 ;;		On exit  : 0/0
 16297 ;;		Unchanged: 0/0
 16298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;Total ram usage:        3 bytes
 16304 ;; Hardware stack levels used:    1
 16305 ;; Hardware stack levels required when called:    6
 16306 ;; This function calls:
 16307 ;;		_getLoad_OK
 16308 ;; This function is called by:
 16309 ;;		_setDimmerLights_Main
 16310 ;; This function uses a non-reentrant model
 16311 ;;
 16312                           
 16313                           
 16314                           ;psect for function _getDimmerLights_Allow_Condition
 16315  1CFE                     _getDimmerLights_Allow_Condition:	
 16316                           
 16317                           ;Dimmer_B1.c: 1052: char allow = 0;
 16318                           
 16319                           ;incstack = 0
 16320                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16321  1CFE  0020               	movlb	0	; select bank0
 16322  1CFF  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16323                           
 16324                           ;Dimmer_B1.c: 1058: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16325  1D00  01A3               	clrf	_getDimmerLights_Allow_Condition$2294
 16326  1D01  0AA3               	incf	_getDimmerLights_Allow_Condition$2294,f
 16327  1D02  319A  2225  319C   	fcall	_getLoad_OK
 16328  1D05  3800               	iorlw	0
 16329  1D06  1D03               	skipz
 16330  1D07  2D0D               	goto	l7011
 16331  1D08  0022               	movlb	2	; select bank2
 16332  1D09  18AC               	btfsc	_Dimmer^(0+256),1
 16333  1D0A  2D0D               	goto	l7011
 16334  1D0B  0020               	movlb	0	; select bank0
 16335  1D0C  01A3               	clrf	_getDimmerLights_Allow_Condition$2294
 16336  1D0D                     l7011:	
 16337  1D0D  0020               	movlb	0	; select bank0
 16338  1D0E  0823               	movf	_getDimmerLights_Allow_Condition$2294,w
 16339  1D0F  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16340  1D10  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16341  1D11  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16342                           
 16343                           ;Dimmer_B1.c: 1085: return allow;
 16344  1D12  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16345  1D13  0008               	return
 16346  1D14                     __end_of_getDimmerLights_Allow_Condition:	
 16347                           
 16348                           	psect	text112
 16349  1A25                     __ptext112:	
 16350 ;; *************** function _getLoad_OK *****************
 16351 ;; Defined at:
 16352 ;;		line 274 in file "../src/OverLoad_B1.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;		None
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;  ok              1    0[BANK0 ] unsigned char 
 16357 ;; Return value:  Size  Location     Type
 16358 ;;                  1    wreg      unsigned char 
 16359 ;; Registers used:
 16360 ;;		wreg, status,2
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;Total ram usage:        1 bytes
 16371 ;; Hardware stack levels used:    1
 16372 ;; Hardware stack levels required when called:    5
 16373 ;; This function calls:
 16374 ;;		Nothing
 16375 ;; This function is called by:
 16376 ;;		_DimmerLights_Main
 16377 ;;		_getDimmerLights_Allow_Condition
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           
 16382                           ;psect for function _getLoad_OK
 16383  1A25                     _getLoad_OK:	
 16384                           
 16385                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16386                           
 16387                           ;incstack = 0
 16388                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16389  1A25  3000               	movlw	0
 16390  1A26  0022               	movlb	2	; select bank2
 16391  1A27  1BB9               	btfsc	_Load^(0+256),7
 16392  1A28  3001               	movlw	1
 16393  1A29  0020               	movlb	0	; select bank0
 16394  1A2A  00A0               	movwf	getLoad_OK@ok
 16395                           
 16396                           ;OverLoad_B1.c: 276: return ok;
 16397  1A2B  0820               	movf	getLoad_OK@ok,w
 16398  1A2C  0008               	return
 16399  1A2D                     __end_of_getLoad_OK:	
 16400                           
 16401                           	psect	text113
 16402  106A                     __ptext113:	
 16403 ;; *************** function _getMain_All_Error_Status *****************
 16404 ;; Defined at:
 16405 ;;		line 424 in file "../src/Main_B1.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  command         1    wreg     unsigned char 
 16408 ;; Auto vars:     Size  Location     Type
 16409 ;;  command         1    5[BANK0 ] unsigned char 
 16410 ;;  status          1    6[BANK0 ] unsigned char 
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      unsigned char 
 16413 ;; Registers used:
 16414 ;;		wreg, status,2, status,0
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;Total ram usage:        7 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:    5
 16427 ;; This function calls:
 16428 ;;		Nothing
 16429 ;; This function is called by:
 16430 ;;		_DimmerLights_Main
 16431 ;;		_Exception_Main
 16432 ;;		_Load_Main
 16433 ;;		_setTemp_Main
 16434 ;;		_getRxData
 16435 ;;		_setSw_Main
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           
 16440                           ;psect for function _getMain_All_Error_Status
 16441  106A                     _getMain_All_Error_Status:	
 16442                           
 16443                           ;incstack = 0
 16444                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16445                           ;getMain_All_Error_Status@command stored from wreg
 16446  106A  0020               	movlb	0	; select bank0
 16447  106B  00A5               	movwf	getMain_All_Error_Status@command
 16448                           
 16449                           ;Main_B1.c: 425: char status = 0;
 16450  106C  01A6               	clrf	getMain_All_Error_Status@status
 16451                           
 16452                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16453  106D  08A6               	movf	getMain_All_Error_Status@status,f
 16454  106E  1D03               	skipz
 16455  106F  2884               	goto	l6721
 16456  1070  0825               	movf	getMain_All_Error_Status@command,w
 16457  1071  3A02               	xorlw	2
 16458  1072  1903               	skipnz
 16459  1073  2884               	goto	l6721
 16460                           
 16461                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16462  1074  0021               	movlb	1	; select bank1
 16463  1075  18D7               	btfsc	_Temp^(0+128),1
 16464  1076  287B               	goto	l6719
 16465  1077  0020               	movlb	0	; select bank0
 16466  1078  01A1               	clrf	_getMain_All_Error_Status$3625
 16467  1079  01A2               	clrf	_getMain_All_Error_Status$3625+1
 16468  107A  2880               	goto	l1486
 16469  107B                     l6719:	
 16470  107B  3002               	movlw	2
 16471  107C  0020               	movlb	0	; select bank0
 16472  107D  00A1               	movwf	_getMain_All_Error_Status$3625
 16473  107E  3000               	movlw	0
 16474  107F  00A2               	movwf	_getMain_All_Error_Status$3625+1
 16475  1080                     l1486:	
 16476  1080  0821               	movf	_getMain_All_Error_Status$3625,w
 16477  1081  00A0               	movwf	??_getMain_All_Error_Status
 16478  1082  0820               	movf	??_getMain_All_Error_Status,w
 16479  1083  00A6               	movwf	getMain_All_Error_Status@status
 16480  1084                     l6721:	
 16481                           
 16482                           ;Main_B1.c: 438: }
 16483                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16484  1084  08A6               	movf	getMain_All_Error_Status@status,f
 16485  1085  1D03               	skipz
 16486  1086  289B               	goto	l1487
 16487  1087  0825               	movf	getMain_All_Error_Status@command,w
 16488  1088  3A03               	xorlw	3
 16489  1089  1903               	skipnz
 16490  108A  289B               	goto	l1487
 16491                           
 16492                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16493  108B  0022               	movlb	2	; select bank2
 16494  108C  1AB9               	btfsc	_Load^(0+256),5
 16495  108D  2892               	goto	l6729
 16496  108E  0020               	movlb	0	; select bank0
 16497  108F  01A3               	clrf	_getMain_All_Error_Status$3626
 16498  1090  01A4               	clrf	_getMain_All_Error_Status$3626+1
 16499  1091  2897               	goto	l1491
 16500  1092                     l6729:	
 16501  1092  3003               	movlw	3
 16502  1093  0020               	movlb	0	; select bank0
 16503  1094  00A3               	movwf	_getMain_All_Error_Status$3626
 16504  1095  3000               	movlw	0
 16505  1096  00A4               	movwf	_getMain_All_Error_Status$3626+1
 16506  1097                     l1491:	
 16507  1097  0823               	movf	_getMain_All_Error_Status$3626,w
 16508  1098  00A0               	movwf	??_getMain_All_Error_Status
 16509  1099  0820               	movf	??_getMain_All_Error_Status,w
 16510  109A  00A6               	movwf	getMain_All_Error_Status@status
 16511  109B                     l1487:	
 16512                           
 16513                           ;Main_B1.c: 445: }
 16514                           ;Main_B1.c: 455: return status;
 16515  109B  0826               	movf	getMain_All_Error_Status@status,w
 16516  109C  0008               	return
 16517  109D                     __end_of_getMain_All_Error_Status:	
 16518                           
 16519                           	psect	text114
 16520  12F3                     __ptext114:	
 16521 ;; *************** function _DimmerLights_DimmingFunction *****************
 16522 ;; Defined at:
 16523 ;;		line 1796 in file "../src/Dimmer_B1.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;  lights          1    wreg     unsigned char 
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;  lights          1    1[BANK0 ] unsigned char 
 16528 ;; Return value:  Size  Location     Type
 16529 ;;		None               void
 16530 ;; Registers used:
 16531 ;;		wreg, status,2, status,0
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16541 ;;Total ram usage:        2 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; Hardware stack levels required when called:    5
 16544 ;; This function calls:
 16545 ;;		Nothing
 16546 ;; This function is called by:
 16547 ;;		_DimmerLights_Main
 16548 ;; This function uses a non-reentrant model
 16549 ;;
 16550                           
 16551                           
 16552                           ;psect for function _DimmerLights_DimmingFunction
 16553  12F3                     _DimmerLights_DimmingFunction:	
 16554                           
 16555                           ;incstack = 0
 16556                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0]
 16557                           ;DimmerLights_DimmingFunction@lights stored from wreg
 16558  12F3  0020               	movlb	0	; select bank0
 16559  12F4  00A1               	movwf	DimmerLights_DimmingFunction@lights
 16560                           
 16561                           ;Dimmer_B1.c: 1798: if (lights == 1) {
 16562  12F5  0821               	movf	DimmerLights_DimmingFunction@lights,w
 16563  12F6  3A01               	xorlw	1
 16564  12F7  1D03               	skipz
 16565  12F8  0008               	return
 16566                           
 16567                           ;Dimmer_B1.c: 1799: if (DimmerIntr1.Tune == 1) {
 16568  12F9  0021               	movlb	1	; select bank1
 16569  12FA  1CBC               	btfss	_DimmerIntr1^(0+128),1
 16570  12FB  0008               	return
 16571                           
 16572                           ;Dimmer_B1.c: 1800: DimmerIntr1.Tune = 0;
 16573  12FC  10BC               	bcf	_DimmerIntr1^(0+128),1
 16574                           
 16575                           ;Dimmer_B1.c: 1801: DimmerIntr1.TuneTime++;
 16576  12FD  3001               	movlw	1
 16577  12FE  0020               	movlb	0	; select bank0
 16578  12FF  00A0               	movwf	??_DimmerLights_DimmingFunction
 16579  1300  0820               	movf	??_DimmerLights_DimmingFunction,w
 16580  1301  0021               	movlb	1	; select bank1
 16581  1302  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 16582                           
 16583                           ;Dimmer_B1.c: 1802: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 16584  1303  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 16585  1304  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 16586  1305  1C03               	skipc
 16587  1306  0008               	return
 16588                           
 16589                           ;Dimmer_B1.c: 1803: DimmerIntr1.TuneTime = 0;
 16590  1307  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 16591                           
 16592                           ;Dimmer_B1.c: 1804: DimmerIntr1.TuneGO = 1;
 16593  1308  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 16594                           
 16595                           ;Dimmer_B1.c: 1805: if (DimmerIntr1.Dimming_Sw == 1) {
 16596  1309  1E3C               	btfss	_DimmerIntr1^(0+128),4
 16597  130A  2B23               	goto	l883
 16598                           
 16599                           ;Dimmer_B1.c: 1806: if (DimmerIntr1.Dimming_Status == 0) {
 16600  130B  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 16601  130C  2B1A               	goto	l7417
 16602                           
 16603                           ;Dimmer_B1.c: 1807: if (DimmerIntr1.DimmingValue < ((char)(87*0.6))) {
 16604  130D  3034               	movlw	52
 16605  130E  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16606  130F  1803               	skipnc
 16607  1310  2B18               	goto	l885
 16608                           
 16609                           ;Dimmer_B1.c: 1808: DimmerIntr1.DimmingValue++;
 16610  1311  3001               	movlw	1
 16611  1312  0020               	movlb	0	; select bank0
 16612  1313  00A0               	movwf	??_DimmerLights_DimmingFunction
 16613  1314  0820               	movf	??_DimmerLights_DimmingFunction,w
 16614  1315  0021               	movlb	1	; select bank1
 16615  1316  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 16616                           
 16617                           ;Dimmer_B1.c: 1809: } else {
 16618  1317  0008               	return
 16619  1318                     l885:	
 16620                           
 16621                           ;Dimmer_B1.c: 1810: DimmerIntr1.Dimming_Status = 1;
 16622  1318  16BC               	bsf	_DimmerIntr1^(0+128),5
 16623                           
 16624                           ;Dimmer_B1.c: 1811: }
 16625                           ;Dimmer_B1.c: 1812: } else {
 16626  1319  0008               	return
 16627  131A                     l7417:	
 16628                           
 16629                           ;Dimmer_B1.c: 1813: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 16630  131A  3007               	movlw	7
 16631  131B  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16632  131C  1C03               	skipc
 16633  131D  2B21               	goto	l888
 16634                           
 16635                           ;Dimmer_B1.c: 1814: DimmerIntr1.DimmingValue--;
 16636  131E  3001               	movlw	1
 16637  131F  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 16638                           
 16639                           ;Dimmer_B1.c: 1815: } else {
 16640  1320  0008               	return
 16641  1321                     l888:	
 16642                           
 16643                           ;Dimmer_B1.c: 1816: DimmerIntr1.Dimming_Status = 0;
 16644  1321  12BC               	bcf	_DimmerIntr1^(0+128),5
 16645                           
 16646                           ;Dimmer_B1.c: 1817: }
 16647                           ;Dimmer_B1.c: 1818: }
 16648                           ;Dimmer_B1.c: 1819: } else if (DimmerIntr1.Dimming_RF == 1) {
 16649  1322  0008               	return
 16650  1323                     l883:	
 16651  1323  1F3C               	btfss	_DimmerIntr1^(0+128),6
 16652  1324  0008               	return
 16653                           
 16654                           ;Dimmer_B1.c: 1820: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 16655  1325  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 16656  1326  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16657  1327  1803               	skipnc
 16658  1328  2B30               	goto	l7425
 16659                           
 16660                           ;Dimmer_B1.c: 1821: DimmerIntr1.DimmingValue++;
 16661  1329  3001               	movlw	1
 16662  132A  0020               	movlb	0	; select bank0
 16663  132B  00A0               	movwf	??_DimmerLights_DimmingFunction
 16664  132C  0820               	movf	??_DimmerLights_DimmingFunction,w
 16665  132D  0021               	movlb	1	; select bank1
 16666  132E  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 16667                           
 16668                           ;Dimmer_B1.c: 1822: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 16669  132F  0008               	return
 16670  1330                     l7425:	
 16671  1330  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16672  1331  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 16673  1332  1803               	skipnc
 16674  1333  2B37               	goto	l894
 16675                           
 16676                           ;Dimmer_B1.c: 1823: DimmerIntr1.DimmingValue--;
 16677  1334  3001               	movlw	1
 16678  1335  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 16679                           
 16680                           ;Dimmer_B1.c: 1824: } else {
 16681  1336  0008               	return
 16682  1337                     l894:	
 16683                           
 16684                           ;Dimmer_B1.c: 1825: DimmerIntr1.Dimming_RF = 0;
 16685  1337  133C               	bcf	_DimmerIntr1^(0+128),6
 16686  1338  0008               	return
 16687  1339                     __end_of_DimmerLights_DimmingFunction:	
 16688                           
 16689                           	psect	text115
 16690  1A10                     __ptext115:	
 16691 ;; *************** function _DimmerLights_Initialization *****************
 16692 ;; Defined at:
 16693 ;;		line 675 in file "../src/Dimmer_B1.c"
 16694 ;; Parameters:    Size  Location     Type
 16695 ;;		None
 16696 ;; Auto vars:     Size  Location     Type
 16697 ;;		None
 16698 ;; Return value:  Size  Location     Type
 16699 ;;		None               void
 16700 ;; Registers used:
 16701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16702 ;; Tracked objects:
 16703 ;;		On entry : 0/0
 16704 ;;		On exit  : 0/0
 16705 ;;		Unchanged: 0/0
 16706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;Total ram usage:        0 bytes
 16712 ;; Hardware stack levels used:    1
 16713 ;; Hardware stack levels required when called:    9
 16714 ;; This function calls:
 16715 ;;		_DimmerIntr_Initialization
 16716 ;;		_setDimmerLights_Initialization
 16717 ;; This function is called by:
 16718 ;;		_main
 16719 ;; This function uses a non-reentrant model
 16720 ;;
 16721                           
 16722                           
 16723                           ;psect for function _DimmerLights_Initialization
 16724  1A10                     _DimmerLights_Initialization:	
 16725                           
 16726                           ;Dimmer_B1.c: 677: setDimmerLights_Initialization(1);
 16727                           
 16728                           ;incstack = 0
 16729                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16730  1A10  3001               	movlw	1
 16731  1A11  3199  21B8  319A   	fcall	_setDimmerLights_Initialization
 16732                           
 16733                           ;Dimmer_B1.c: 687: DimmerIntr_Initialization();
 16734  1A14  3194  24E2         	fcall	_DimmerIntr_Initialization
 16735  1A16  0008               	return
 16736  1A17                     __end_of_DimmerLights_Initialization:	
 16737                           
 16738                           	psect	text116
 16739  19B8                     __ptext116:	
 16740 ;; *************** function _setDimmerLights_Initialization *****************
 16741 ;; Defined at:
 16742 ;;		line 691 in file "../src/Dimmer_B1.c"
 16743 ;; Parameters:    Size  Location     Type
 16744 ;;  lights          1    wreg     unsigned char 
 16745 ;; Auto vars:     Size  Location     Type
 16746 ;;  lights          1    0[COMMON] unsigned char 
 16747 ;; Return value:  Size  Location     Type
 16748 ;;		None               void
 16749 ;; Registers used:
 16750 ;;		wreg
 16751 ;; Tracked objects:
 16752 ;;		On entry : 0/0
 16753 ;;		On exit  : 0/0
 16754 ;;		Unchanged: 0/0
 16755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;Total ram usage:        0 bytes
 16761 ;; Hardware stack levels used:    1
 16762 ;; Hardware stack levels required when called:    5
 16763 ;; This function calls:
 16764 ;;		Nothing
 16765 ;; This function is called by:
 16766 ;;		_DimmerLights_Initialization
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           
 16771                           ;psect for function _setDimmerLights_Initialization
 16772  19B8                     _setDimmerLights_Initialization:	
 16773                           
 16774                           ;incstack = 0
 16775                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16776  19B8  0008               	return
 16777  19B9                     __end_of_setDimmerLights_Initialization:	
 16778                           
 16779                           	psect	text117
 16780  14E2                     __ptext117:	
 16781 ;; *************** function _DimmerIntr_Initialization *****************
 16782 ;; Defined at:
 16783 ;;		line 7 in file "../src/Dimmer_B1.c"
 16784 ;; Parameters:    Size  Location     Type
 16785 ;;		None
 16786 ;; Auto vars:     Size  Location     Type
 16787 ;;		None
 16788 ;; Return value:  Size  Location     Type
 16789 ;;		None               void
 16790 ;; Registers used:
 16791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16792 ;; Tracked objects:
 16793 ;;		On entry : 0/0
 16794 ;;		On exit  : 0/0
 16795 ;;		Unchanged: 0/0
 16796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;Total ram usage:        2 bytes
 16802 ;; Hardware stack levels used:    1
 16803 ;; Hardware stack levels required when called:    8
 16804 ;; This function calls:
 16805 ;;		_Division
 16806 ;;		_getDimmerLights_PercentToValue
 16807 ;;		_getDimmerLights_ValueToPercent
 16808 ;;		_setMemory_Modify
 16809 ;; This function is called by:
 16810 ;;		_DimmerLights_Initialization
 16811 ;; This function uses a non-reentrant model
 16812 ;;
 16813                           
 16814                           
 16815                           ;psect for function _DimmerIntr_Initialization
 16816  14E2                     _DimmerIntr_Initialization:	
 16817                           
 16818                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 16819                           
 16820                           ;incstack = 0
 16821                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16822  14E2  3003               	movlw	3
 16823  14E3  0020               	movlb	0	; select bank0
 16824  14E4  00E2               	movwf	??_DimmerIntr_Initialization
 16825  14E5  0862               	movf	??_DimmerIntr_Initialization,w
 16826  14E6  0021               	movlb	1	; select bank1
 16827  14E7  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16828                           
 16829                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16830  14E8  3034               	movlw	52
 16831  14E9  0020               	movlb	0	; select bank0
 16832  14EA  00E2               	movwf	??_DimmerIntr_Initialization
 16833  14EB  0862               	movf	??_DimmerIntr_Initialization,w
 16834  14EC  0021               	movlb	1	; select bank1
 16835  14ED  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16836                           
 16837                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16838  14EE  3006               	movlw	6
 16839  14EF  0020               	movlb	0	; select bank0
 16840  14F0  00E2               	movwf	??_DimmerIntr_Initialization
 16841  14F1  0862               	movf	??_DimmerIntr_Initialization,w
 16842  14F2  0021               	movlb	1	; select bank1
 16843  14F3  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16844                           
 16845                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 16846  14F4  10BC               	bcf	_DimmerIntr1^(0+128),1
 16847                           
 16848                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 16849  14F5  1E39               	btfss	(_myMain^(0+128)+10),4
 16850  14F6  2D06               	goto	l680
 16851                           
 16852                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16853  14F7  3034               	movlw	52
 16854  14F8  3196  2664  3194   	fcall	_getDimmerLights_ValueToPercent
 16855  14FB  0020               	movlb	0	; select bank0
 16856  14FC  00E2               	movwf	??_DimmerIntr_Initialization
 16857  14FD  0021               	movlb	1	; select bank1
 16858  14FE  086E               	movf	_product^(0+128),w
 16859  14FF  3E15               	addlw	21
 16860  1500  0086               	movwf	6
 16861  1501  3001               	movlw	1	; select bank2/3
 16862  1502  0087               	movwf	7
 16863  1503  0020               	movlb	0	; select bank0
 16864  1504  0862               	movf	??_DimmerIntr_Initialization,w
 16865  1505  0081               	movwf	1
 16866  1506                     l680:	
 16867                           
 16868                           ;Dimmer_B1.c: 19: }
 16869                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16870  1506  0021               	movlb	1	; select bank1
 16871  1507  086E               	movf	_product^(0+128),w
 16872  1508  3E15               	addlw	21
 16873  1509  0086               	movwf	6
 16874  150A  3001               	movlw	1	; select bank2/3
 16875  150B  0087               	movwf	7
 16876  150C  0801               	movf	1,w
 16877  150D  3195  25FF  3194   	fcall	_getDimmerLights_PercentToValue
 16878  1510  0020               	movlb	0	; select bank0
 16879  1511  00E2               	movwf	??_DimmerIntr_Initialization
 16880  1512  0862               	movf	??_DimmerIntr_Initialization,w
 16881  1513  0021               	movlb	1	; select bank1
 16882  1514  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16883                           
 16884                           ;Dimmer_B1.c: 28: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16885  1515  3002               	movlw	2
 16886  1516  0020               	movlb	0	; select bank0
 16887  1517  00E2               	movwf	??_DimmerIntr_Initialization
 16888  1518  0862               	movf	??_DimmerIntr_Initialization,w
 16889  1519  00A5               	movwf	Division@num
 16890  151A  3034               	movlw	52
 16891  151B  319B  233A  3194   	fcall	_Division
 16892  151E  0020               	movlb	0	; select bank0
 16893  151F  00E3               	movwf	??_DimmerIntr_Initialization+1
 16894  1520  0863               	movf	??_DimmerIntr_Initialization+1,w
 16895  1521  0021               	movlb	1	; select bank1
 16896  1522  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16897                           
 16898                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16899  1523  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16900  1524  3E08               	addlw	8
 16901  1525  0020               	movlb	0	; select bank0
 16902  1526  00E2               	movwf	??_DimmerIntr_Initialization
 16903  1527  0862               	movf	??_DimmerIntr_Initialization,w
 16904  1528  0021               	movlb	1	; select bank1
 16905  1529  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16906                           
 16907                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16908  152A  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16909  152B  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16910  152C  0020               	movlb	0	; select bank0
 16911  152D  00E2               	movwf	??_DimmerIntr_Initialization
 16912  152E  0862               	movf	??_DimmerIntr_Initialization,w
 16913  152F  0021               	movlb	1	; select bank1
 16914  1530  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16915                           
 16916                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16917  1531  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16918  1532  3E01               	addlw	1
 16919  1533  0020               	movlb	0	; select bank0
 16920  1534  00E2               	movwf	??_DimmerIntr_Initialization
 16921  1535  0862               	movf	??_DimmerIntr_Initialization,w
 16922  1536  0021               	movlb	1	; select bank1
 16923  1537  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16924                           
 16925                           ;Dimmer_B1.c: 80: if (myMain.InitDimmer == 1) {
 16926  1538  1E39               	btfss	(_myMain^(0+128)+10),4
 16927  1539  0008               	return
 16928                           
 16929                           ;Dimmer_B1.c: 81: myMain.InitDimmer = 0;
 16930  153A  1239               	bcf	(_myMain^(0+128)+10),4
 16931                           
 16932                           ;Dimmer_B1.c: 82: myMain.SaveDimmer = 1;
 16933  153B  16B9               	bsf	(_myMain^(0+128)+10),5
 16934                           
 16935                           ;Dimmer_B1.c: 83: setMemory_Modify(1);
 16936  153C  3001               	movlw	1
 16937  153D  319C  2437         	fcall	_setMemory_Modify
 16938  153F  0008               	return
 16939  1540                     __end_of_DimmerIntr_Initialization:	
 16940                           
 16941                           	psect	text118
 16942  1C37                     __ptext118:	
 16943 ;; *************** function _setMemory_Modify *****************
 16944 ;; Defined at:
 16945 ;;		line 1083 in file "../src/MCU_B1.c"
 16946 ;; Parameters:    Size  Location     Type
 16947 ;;  command         1    wreg     unsigned char 
 16948 ;; Auto vars:     Size  Location     Type
 16949 ;;  command         1    1[BANK0 ] unsigned char 
 16950 ;; Return value:  Size  Location     Type
 16951 ;;		None               void
 16952 ;; Registers used:
 16953 ;;		wreg, status,2, status,0
 16954 ;; Tracked objects:
 16955 ;;		On entry : 0/0
 16956 ;;		On exit  : 0/0
 16957 ;;		Unchanged: 0/0
 16958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;Total ram usage:        2 bytes
 16964 ;; Hardware stack levels used:    1
 16965 ;; Hardware stack levels required when called:    5
 16966 ;; This function calls:
 16967 ;;		Nothing
 16968 ;; This function is called by:
 16969 ;;		_DimmerIntr_Initialization
 16970 ;;		_setDimmerLights_Dimming
 16971 ;;		_setLog_Code
 16972 ;;		_setRFSW_AdjControl
 16973 ;; This function uses a non-reentrant model
 16974 ;;
 16975                           
 16976                           
 16977                           ;psect for function _setMemory_Modify
 16978  1C37                     _setMemory_Modify:	
 16979                           
 16980                           ;incstack = 0
 16981                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16982                           ;setMemory_Modify@command stored from wreg
 16983  1C37  0020               	movlb	0	; select bank0
 16984  1C38  00A1               	movwf	setMemory_Modify@command
 16985                           
 16986                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16987  1C39  0821               	movf	setMemory_Modify@command,w
 16988  1C3A  3A01               	xorlw	1
 16989  1C3B  3000               	movlw	0
 16990  1C3C  1903               	skipnz
 16991  1C3D  3001               	movlw	1
 16992  1C3E  00A0               	movwf	??_setMemory_Modify
 16993  1C3F  0024               	movlb	4	; select bank4
 16994  1C40  0844               	movf	(_Memory^(0+512)+36),w
 16995  1C41  0020               	movlb	0	; select bank0
 16996  1C42  0620               	xorwf	??_setMemory_Modify,w
 16997  1C43  39FE               	andlw	-2
 16998  1C44  0620               	xorwf	??_setMemory_Modify,w
 16999  1C45  0024               	movlb	4	; select bank4
 17000  1C46  00C4               	movwf	(_Memory^(0+512)+36)
 17001                           
 17002                           ;MCU_B1.c: 1085: Memory.Time = 0;
 17003  1C47  01C2               	clrf	(_Memory^(0+512)+34)
 17004  1C48  01C3               	clrf	((_Memory+1)^(0+512)+34)
 17005  1C49  0008               	return
 17006  1C4A                     __end_of_setMemory_Modify:	
 17007                           
 17008                           	psect	text119
 17009  1664                     __ptext119:	
 17010 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17011 ;; Defined at:
 17012 ;;		line 1190 in file "../src/Dimmer_B1.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;  value           1    wreg     unsigned char 
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;  value           1   62[BANK0 ] unsigned char 
 17017 ;;  i               3   63[BANK0 ] float 
 17018 ;; Return value:  Size  Location     Type
 17019 ;;                  1    wreg      unsigned char 
 17020 ;; Registers used:
 17021 ;;		wreg, status,2, status,0, pclath, cstack
 17022 ;; Tracked objects:
 17023 ;;		On entry : 0/0
 17024 ;;		On exit  : 0/0
 17025 ;;		Unchanged: 0/0
 17026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;Total ram usage:        6 bytes
 17032 ;; Hardware stack levels used:    1
 17033 ;; Hardware stack levels required when called:    7
 17034 ;; This function calls:
 17035 ;;		___awtoft
 17036 ;;		___ftadd
 17037 ;;		___ftdiv
 17038 ;;		___ftneg
 17039 ;;		___fttol
 17040 ;; This function is called by:
 17041 ;;		_DimmerIntr_Initialization
 17042 ;;		_setDimmerLights_Dimming
 17043 ;; This function uses a non-reentrant model
 17044 ;;
 17045                           
 17046                           
 17047                           ;psect for function _getDimmerLights_ValueToPercent
 17048  1664                     _getDimmerLights_ValueToPercent:	
 17049                           
 17050                           ;incstack = 0
 17051                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17052                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17053  1664  0020               	movlb	0	; select bank0
 17054  1665  00DE               	movwf	getDimmerLights_ValueToPercent@value
 17055                           
 17056                           ;Dimmer_B1.c: 1198: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 17057  1666  3000               	movlw	0
 17058  1667  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17059  1668  3038               	movlw	56
 17060  1669  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17061  166A  3042               	movlw	66
 17062  166B  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17063                           
 17064                           ;Dimmer_B1.c: 1199: i /= 100;
 17065  166C  3000               	movlw	0
 17066  166D  00AE               	movwf	___ftdiv@f2
 17067  166E  30C8               	movlw	200
 17068  166F  00AF               	movwf	___ftdiv@f2+1
 17069  1670  3042               	movlw	66
 17070  1671  00B0               	movwf	___ftdiv@f2+2
 17071  1672  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17072  1673  00B1               	movwf	___ftdiv@f1
 17073  1674  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17074  1675  00B2               	movwf	___ftdiv@f1+1
 17075  1676  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17076  1677  00B3               	movwf	___ftdiv@f1+2
 17077  1678  318D  2522  3196   	fcall	___ftdiv
 17078  167B  0020               	movlb	0	; select bank0
 17079  167C  082E               	movf	?___ftdiv,w
 17080  167D  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17081  167E  082F               	movf	?___ftdiv+1,w
 17082  167F  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17083  1680  0830               	movf	?___ftdiv+2,w
 17084  1681  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17085                           
 17086                           ;Dimmer_B1.c: 1201: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 17087  1682  085E               	movf	getDimmerLights_ValueToPercent@value,w
 17088  1683  00DC               	movwf	??_getDimmerLights_ValueToPercent
 17089  1684  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 17090  1685  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 17091  1686  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 17092  1687  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 17093  1688  1903               	skipnz
 17094  1689  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 17095  168A  085C               	movf	??_getDimmerLights_ValueToPercent,w
 17096  168B  3E34               	addlw	52
 17097  168C  00A8               	movwf	___awtoft@c
 17098  168D  3000               	movlw	0
 17099  168E  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17100  168F  00A9               	movwf	___awtoft@c+1
 17101  1690  319F  2748  3196   	fcall	___awtoft
 17102  1693  0020               	movlb	0	; select bank0
 17103  1694  0828               	movf	?___awtoft,w
 17104  1695  00B1               	movwf	___ftdiv@f1
 17105  1696  0829               	movf	?___awtoft+1,w
 17106  1697  00B2               	movwf	___ftdiv@f1+1
 17107  1698  082A               	movf	?___awtoft+2,w
 17108  1699  00B3               	movwf	___ftdiv@f1+2
 17109  169A  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17110  169B  00AE               	movwf	___ftdiv@f2
 17111  169C  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17112  169D  00AF               	movwf	___ftdiv@f2+1
 17113  169E  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17114  169F  00B0               	movwf	___ftdiv@f2+2
 17115  16A0  318D  2522  3196   	fcall	___ftdiv
 17116  16A3  0020               	movlb	0	; select bank0
 17117  16A4  082E               	movf	?___ftdiv,w
 17118  16A5  00BE               	movwf	___ftneg@f1
 17119  16A6  082F               	movf	?___ftdiv+1,w
 17120  16A7  00BF               	movwf	___ftneg@f1+1
 17121  16A8  0830               	movf	?___ftdiv+2,w
 17122  16A9  00C0               	movwf	___ftneg@f1+2
 17123  16AA  319A  2246  3196   	fcall	___ftneg
 17124  16AD  0020               	movlb	0	; select bank0
 17125  16AE  083E               	movf	?___ftneg,w
 17126  16AF  00C4               	movwf	___ftadd@f2
 17127  16B0  083F               	movf	?___ftneg+1,w
 17128  16B1  00C5               	movwf	___ftadd@f2+1
 17129  16B2  0840               	movf	?___ftneg+2,w
 17130  16B3  00C6               	movwf	___ftadd@f2+2
 17131  16B4  3000               	movlw	0
 17132  16B5  00C1               	movwf	___ftadd@f1
 17133  16B6  30C8               	movlw	200
 17134  16B7  00C2               	movwf	___ftadd@f1+1
 17135  16B8  3042               	movlw	66
 17136  16B9  00C3               	movwf	___ftadd@f1+2
 17137  16BA  3183  2389  3196   	fcall	___ftadd
 17138  16BD  0020               	movlb	0	; select bank0
 17139  16BE  0841               	movf	?___ftadd,w
 17140  16BF  00CE               	movwf	___fttol@f1
 17141  16C0  0842               	movf	?___ftadd+1,w
 17142  16C1  00CF               	movwf	___fttol@f1+1
 17143  16C2  0843               	movf	?___ftadd+2,w
 17144  16C3  00D0               	movwf	___fttol@f1+2
 17145  16C4  318B  2382         	fcall	___fttol
 17146  16C6  0020               	movlb	0	; select bank0
 17147  16C7  084E               	movf	?___fttol,w
 17148  16C8  0008               	return
 17149  16C9                     __end_of_getDimmerLights_ValueToPercent:	
 17150                           
 17151                           	psect	text120
 17152  15FF                     __ptext120:	
 17153 ;; *************** function _getDimmerLights_PercentToValue *****************
 17154 ;; Defined at:
 17155 ;;		line 1174 in file "../src/Dimmer_B1.c"
 17156 ;; Parameters:    Size  Location     Type
 17157 ;;  value           1    wreg     unsigned char 
 17158 ;; Auto vars:     Size  Location     Type
 17159 ;;  value           1   62[BANK0 ] unsigned char 
 17160 ;;  i               3   63[BANK0 ] float 
 17161 ;; Return value:  Size  Location     Type
 17162 ;;                  1    wreg      unsigned char 
 17163 ;; Registers used:
 17164 ;;		wreg, status,2, status,0, pclath, cstack
 17165 ;; Tracked objects:
 17166 ;;		On entry : 0/0
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;Total ram usage:        6 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    7
 17177 ;; This function calls:
 17178 ;;		___awtoft
 17179 ;;		___ftadd
 17180 ;;		___ftdiv
 17181 ;;		___ftmul
 17182 ;;		___ftneg
 17183 ;;		___fttol
 17184 ;; This function is called by:
 17185 ;;		_DimmerIntr_Initialization
 17186 ;;		_setDimmerLights_OnOff
 17187 ;;		_setRFSW_AdjControl
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           
 17192                           ;psect for function _getDimmerLights_PercentToValue
 17193  15FF                     _getDimmerLights_PercentToValue:	
 17194                           
 17195                           ;incstack = 0
 17196                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17197                           ;getDimmerLights_PercentToValue@value stored from wreg
 17198  15FF  0020               	movlb	0	; select bank0
 17199  1600  00DE               	movwf	getDimmerLights_PercentToValue@value
 17200                           
 17201                           ;Dimmer_B1.c: 1182: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 17202  1601  3000               	movlw	0
 17203  1602  00DF               	movwf	getDimmerLights_PercentToValue@i
 17204  1603  3038               	movlw	56
 17205  1604  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17206  1605  3042               	movlw	66
 17207  1606  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17208                           
 17209                           ;Dimmer_B1.c: 1183: i /= 100;
 17210  1607  3000               	movlw	0
 17211  1608  00AE               	movwf	___ftdiv@f2
 17212  1609  30C8               	movlw	200
 17213  160A  00AF               	movwf	___ftdiv@f2+1
 17214  160B  3042               	movlw	66
 17215  160C  00B0               	movwf	___ftdiv@f2+2
 17216  160D  085F               	movf	getDimmerLights_PercentToValue@i,w
 17217  160E  00B1               	movwf	___ftdiv@f1
 17218  160F  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17219  1610  00B2               	movwf	___ftdiv@f1+1
 17220  1611  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17221  1612  00B3               	movwf	___ftdiv@f1+2
 17222  1613  318D  2522  3195   	fcall	___ftdiv
 17223  1616  0020               	movlb	0	; select bank0
 17224  1617  082E               	movf	?___ftdiv,w
 17225  1618  00DF               	movwf	getDimmerLights_PercentToValue@i
 17226  1619  082F               	movf	?___ftdiv+1,w
 17227  161A  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17228  161B  0830               	movf	?___ftdiv+2,w
 17229  161C  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17230                           
 17231                           ;Dimmer_B1.c: 1185: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 17232  161D  085E               	movf	getDimmerLights_PercentToValue@value,w
 17233  161E  00DC               	movwf	??_getDimmerLights_PercentToValue
 17234  161F  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 17235  1620  09DC               	comf	??_getDimmerLights_PercentToValue,f
 17236  1621  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 17237  1622  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 17238  1623  1903               	skipnz
 17239  1624  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 17240  1625  085C               	movf	??_getDimmerLights_PercentToValue,w
 17241  1626  3E64               	addlw	100
 17242  1627  00A8               	movwf	___awtoft@c
 17243  1628  3000               	movlw	0
 17244  1629  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17245  162A  00A9               	movwf	___awtoft@c+1
 17246  162B  319F  2748  3195   	fcall	___awtoft
 17247  162E  0020               	movlb	0	; select bank0
 17248  162F  0828               	movf	?___awtoft,w
 17249  1630  00B1               	movwf	___ftmul@f2
 17250  1631  0829               	movf	?___awtoft+1,w
 17251  1632  00B2               	movwf	___ftmul@f2+1
 17252  1633  082A               	movf	?___awtoft+2,w
 17253  1634  00B3               	movwf	___ftmul@f2+2
 17254  1635  085F               	movf	getDimmerLights_PercentToValue@i,w
 17255  1636  00AE               	movwf	___ftmul@f1
 17256  1637  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17257  1638  00AF               	movwf	___ftmul@f1+1
 17258  1639  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17259  163A  00B0               	movwf	___ftmul@f1+2
 17260  163B  318D  25CB  3195   	fcall	___ftmul
 17261  163E  0020               	movlb	0	; select bank0
 17262  163F  082E               	movf	?___ftmul,w
 17263  1640  00BE               	movwf	___ftneg@f1
 17264  1641  082F               	movf	?___ftmul+1,w
 17265  1642  00BF               	movwf	___ftneg@f1+1
 17266  1643  0830               	movf	?___ftmul+2,w
 17267  1644  00C0               	movwf	___ftneg@f1+2
 17268  1645  319A  2246  3195   	fcall	___ftneg
 17269  1648  0020               	movlb	0	; select bank0
 17270  1649  083E               	movf	?___ftneg,w
 17271  164A  00C4               	movwf	___ftadd@f2
 17272  164B  083F               	movf	?___ftneg+1,w
 17273  164C  00C5               	movwf	___ftadd@f2+1
 17274  164D  0840               	movf	?___ftneg+2,w
 17275  164E  00C6               	movwf	___ftadd@f2+2
 17276  164F  3000               	movlw	0
 17277  1650  00C1               	movwf	___ftadd@f1
 17278  1651  3050               	movlw	80
 17279  1652  00C2               	movwf	___ftadd@f1+1
 17280  1653  3042               	movlw	66
 17281  1654  00C3               	movwf	___ftadd@f1+2
 17282  1655  3183  2389  3195   	fcall	___ftadd
 17283  1658  0020               	movlb	0	; select bank0
 17284  1659  0841               	movf	?___ftadd,w
 17285  165A  00CE               	movwf	___fttol@f1
 17286  165B  0842               	movf	?___ftadd+1,w
 17287  165C  00CF               	movwf	___fttol@f1+1
 17288  165D  0843               	movf	?___ftadd+2,w
 17289  165E  00D0               	movwf	___fttol@f1+2
 17290  165F  318B  2382         	fcall	___fttol
 17291  1661  0020               	movlb	0	; select bank0
 17292  1662  084E               	movf	?___fttol,w
 17293  1663  0008               	return
 17294  1664                     __end_of_getDimmerLights_PercentToValue:	
 17295                           
 17296                           	psect	text121
 17297  0B82                     __ptext121:	
 17298 ;; *************** function ___fttol *****************
 17299 ;; Defined at:
 17300 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17301 ;; Parameters:    Size  Location     Type
 17302 ;;  f1              3   46[BANK0 ] float 
 17303 ;; Auto vars:     Size  Location     Type
 17304 ;;  lval            4   55[BANK0 ] unsigned long 
 17305 ;;  exp1            1   59[BANK0 ] unsigned char 
 17306 ;;  sign1           1   54[BANK0 ] unsigned char 
 17307 ;; Return value:  Size  Location     Type
 17308 ;;                  4   46[BANK0 ] long 
 17309 ;; Registers used:
 17310 ;;		wreg, status,2, status,0
 17311 ;; Tracked objects:
 17312 ;;		On entry : 0/0
 17313 ;;		On exit  : 0/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;Total ram usage:       14 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; Hardware stack levels required when called:    5
 17323 ;; This function calls:
 17324 ;;		Nothing
 17325 ;; This function is called by:
 17326 ;;		_getDimmerLights_PercentToValue
 17327 ;;		_getDimmerLights_ValueToPercent
 17328 ;; This function uses a non-reentrant model
 17329 ;;
 17330                           
 17331                           
 17332                           ;psect for function ___fttol
 17333  0B82                     ___fttol:	
 17334                           
 17335                           ;incstack = 0
 17336                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17337  0B82  0020               	movlb	0	; select bank0
 17338  0B83  084E               	movf	___fttol@f1,w
 17339  0B84  00D2               	movwf	??___fttol
 17340  0B85  084F               	movf	___fttol@f1+1,w
 17341  0B86  00D3               	movwf	??___fttol+1
 17342  0B87  0850               	movf	___fttol@f1+2,w
 17343  0B88  00D4               	movwf	??___fttol+2
 17344  0B89  1003               	clrc
 17345  0B8A  0D53               	rlf	??___fttol+1,w
 17346  0B8B  0D54               	rlf	??___fttol+2,w
 17347  0B8C  00D5               	movwf	??___fttol+3
 17348  0B8D  0855               	movf	??___fttol+3,w
 17349  0B8E  00DB               	movwf	___fttol@exp1
 17350  0B8F  08DB               	movf	___fttol@exp1,f
 17351  0B90  1D03               	skipz
 17352  0B91  2B9B               	goto	l6185
 17353  0B92  3000               	movlw	0
 17354  0B93  00D1               	movwf	?___fttol+3
 17355  0B94  3000               	movlw	0
 17356  0B95  00D0               	movwf	?___fttol+2
 17357  0B96  3000               	movlw	0
 17358  0B97  00CF               	movwf	?___fttol+1
 17359  0B98  3000               	movlw	0
 17360  0B99  00CE               	movwf	?___fttol
 17361  0B9A  0008               	return
 17362  0B9B                     l6185:	
 17363  0B9B  084E               	movf	___fttol@f1,w
 17364  0B9C  00D2               	movwf	??___fttol
 17365  0B9D  084F               	movf	___fttol@f1+1,w
 17366  0B9E  00D3               	movwf	??___fttol+1
 17367  0B9F  0850               	movf	___fttol@f1+2,w
 17368  0BA0  00D4               	movwf	??___fttol+2
 17369  0BA1  3017               	movlw	23
 17370  0BA2                     u5215:	
 17371  0BA2  36D4               	lsrf	??___fttol+2,f
 17372  0BA3  0CD3               	rrf	??___fttol+1,f
 17373  0BA4  0CD2               	rrf	??___fttol,f
 17374  0BA5  0B89               	decfsz	9,f
 17375  0BA6  2BA2               	goto	u5215
 17376  0BA7  0852               	movf	??___fttol,w
 17377  0BA8  00D5               	movwf	??___fttol+3
 17378  0BA9  0855               	movf	??___fttol+3,w
 17379  0BAA  00D6               	movwf	___fttol@sign1
 17380  0BAB  17CF               	bsf	___fttol@f1+1,7
 17381  0BAC  30FF               	movlw	255
 17382  0BAD  05CE               	andwf	___fttol@f1,f
 17383  0BAE  30FF               	movlw	255
 17384  0BAF  05CF               	andwf	___fttol@f1+1,f
 17385  0BB0  3000               	movlw	0
 17386  0BB1  05D0               	andwf	___fttol@f1+2,f
 17387  0BB2  084E               	movf	___fttol@f1,w
 17388  0BB3  00D7               	movwf	___fttol@lval
 17389  0BB4  084F               	movf	___fttol@f1+1,w
 17390  0BB5  00D8               	movwf	___fttol@lval+1
 17391  0BB6  0850               	movf	___fttol@f1+2,w
 17392  0BB7  00D9               	movwf	___fttol@lval+2
 17393  0BB8  01DA               	clrf	___fttol@lval+3
 17394  0BB9  308E               	movlw	142
 17395  0BBA  02DB               	subwf	___fttol@exp1,f
 17396  0BBB  1FDB               	btfss	___fttol@exp1,7
 17397  0BBC  2BD9               	goto	l6205
 17398  0BBD  085B               	movf	___fttol@exp1,w
 17399  0BBE  3A80               	xorlw	128
 17400  0BBF  3E8F               	addlw	143
 17401  0BC0  1803               	skipnc
 17402  0BC1  2BCB               	goto	l6203
 17403  0BC2  3000               	movlw	0
 17404  0BC3  00D1               	movwf	?___fttol+3
 17405  0BC4  3000               	movlw	0
 17406  0BC5  00D0               	movwf	?___fttol+2
 17407  0BC6  3000               	movlw	0
 17408  0BC7  00CF               	movwf	?___fttol+1
 17409  0BC8  3000               	movlw	0
 17410  0BC9  00CE               	movwf	?___fttol
 17411  0BCA  0008               	return
 17412  0BCB                     l6203:	
 17413  0BCB  3001               	movlw	1
 17414  0BCC                     u5245:	
 17415  0BCC  36DA               	lsrf	___fttol@lval+3,f
 17416  0BCD  0CD9               	rrf	___fttol@lval+2,f
 17417  0BCE  0CD8               	rrf	___fttol@lval+1,f
 17418  0BCF  0CD7               	rrf	___fttol@lval,f
 17419  0BD0  0B89               	decfsz	9,f
 17420  0BD1  2BCC               	goto	u5245
 17421  0BD2  3001               	movlw	1
 17422  0BD3  00D2               	movwf	??___fttol
 17423  0BD4  0852               	movf	??___fttol,w
 17424  0BD5  07DB               	addwf	___fttol@exp1,f
 17425  0BD6  1903               	btfsc	3,2
 17426  0BD7  2BF2               	goto	l6215
 17427  0BD8  2BCB               	goto	l6203
 17428  0BD9                     l6205:	
 17429  0BD9  3018               	movlw	24
 17430  0BDA  025B               	subwf	___fttol@exp1,w
 17431  0BDB  1C03               	skipc
 17432  0BDC  2BEF               	goto	l6213
 17433  0BDD  3000               	movlw	0
 17434  0BDE  00D1               	movwf	?___fttol+3
 17435  0BDF  3000               	movlw	0
 17436  0BE0  00D0               	movwf	?___fttol+2
 17437  0BE1  3000               	movlw	0
 17438  0BE2  00CF               	movwf	?___fttol+1
 17439  0BE3  3000               	movlw	0
 17440  0BE4  00CE               	movwf	?___fttol
 17441  0BE5  0008               	return
 17442  0BE6                     l6211:	
 17443  0BE6  3001               	movlw	1
 17444  0BE7                     u5275:	
 17445  0BE7  35D7               	lslf	___fttol@lval,f
 17446  0BE8  0DD8               	rlf	___fttol@lval+1,f
 17447  0BE9  0DD9               	rlf	___fttol@lval+2,f
 17448  0BEA  0DDA               	rlf	___fttol@lval+3,f
 17449  0BEB  0B89               	decfsz	9,f
 17450  0BEC  2BE7               	goto	u5275
 17451  0BED  3001               	movlw	1
 17452  0BEE  02DB               	subwf	___fttol@exp1,f
 17453  0BEF                     l6213:	
 17454  0BEF  08DB               	movf	___fttol@exp1,f
 17455  0BF0  1D03               	skipz
 17456  0BF1  2BE6               	goto	l6211
 17457  0BF2                     l6215:	
 17458  0BF2  0856               	movf	___fttol@sign1,w
 17459  0BF3  1903               	btfsc	3,2
 17460  0BF4  2C00               	goto	l6219
 17461  0BF5  09D7               	comf	___fttol@lval,f
 17462  0BF6  09D8               	comf	___fttol@lval+1,f
 17463  0BF7  09D9               	comf	___fttol@lval+2,f
 17464  0BF8  09DA               	comf	___fttol@lval+3,f
 17465  0BF9  0AD7               	incf	___fttol@lval,f
 17466  0BFA  1903               	skipnz
 17467  0BFB  0AD8               	incf	___fttol@lval+1,f
 17468  0BFC  1903               	skipnz
 17469  0BFD  0AD9               	incf	___fttol@lval+2,f
 17470  0BFE  1903               	skipnz
 17471  0BFF  0ADA               	incf	___fttol@lval+3,f
 17472  0C00                     l6219:	
 17473  0C00  085A               	movf	___fttol@lval+3,w
 17474  0C01  00D1               	movwf	?___fttol+3
 17475  0C02  0859               	movf	___fttol@lval+2,w
 17476  0C03  00D0               	movwf	?___fttol+2
 17477  0C04  0858               	movf	___fttol@lval+1,w
 17478  0C05  00CF               	movwf	?___fttol+1
 17479  0C06  0857               	movf	___fttol@lval,w
 17480  0C07  00CE               	movwf	?___fttol
 17481  0C08  0008               	return
 17482  0C09                     __end_of___fttol:	
 17483                           
 17484                           	psect	text122
 17485  1A46                     __ptext122:	
 17486 ;; *************** function ___ftneg *****************
 17487 ;; Defined at:
 17488 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17489 ;; Parameters:    Size  Location     Type
 17490 ;;  f1              3   30[BANK0 ] float 
 17491 ;; Auto vars:     Size  Location     Type
 17492 ;;		None
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  3   30[BANK0 ] float 
 17495 ;; Registers used:
 17496 ;;		wreg
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17502 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;Total ram usage:        3 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    5
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_getDimmerLights_PercentToValue
 17513 ;;		_getDimmerLights_ValueToPercent
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           
 17518                           ;psect for function ___ftneg
 17519  1A46                     ___ftneg:	
 17520                           
 17521                           ;incstack = 0
 17522                           ; Regs used in ___ftneg: [wreg]
 17523  1A46  0020               	movlb	0	; select bank0
 17524  1A47  0840               	movf	___ftneg@f1+2,w
 17525  1A48  043F               	iorwf	___ftneg@f1+1,w
 17526  1A49  043E               	iorwf	___ftneg@f1,w
 17527  1A4A  1903               	skipnz
 17528  1A4B  0008               	return
 17529  1A4C  3080               	movlw	128
 17530  1A4D  06C0               	xorwf	___ftneg@f1+2,f
 17531  1A4E  0008               	return
 17532  1A4F                     __end_of___ftneg:	
 17533                           
 17534                           	psect	text123
 17535  0DCB                     __ptext123:	
 17536 ;; *************** function ___ftmul *****************
 17537 ;; Defined at:
 17538 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17539 ;; Parameters:    Size  Location     Type
 17540 ;;  f1              3   14[BANK0 ] float 
 17541 ;;  f2              3   17[BANK0 ] float 
 17542 ;; Auto vars:     Size  Location     Type
 17543 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17544 ;;  sign            1   29[BANK0 ] unsigned char 
 17545 ;;  cntr            1   28[BANK0 ] unsigned char 
 17546 ;;  exp             1   24[BANK0 ] unsigned char 
 17547 ;; Return value:  Size  Location     Type
 17548 ;;                  3   14[BANK0 ] float 
 17549 ;; Registers used:
 17550 ;;		wreg, status,2, status,0, pclath, cstack
 17551 ;; Tracked objects:
 17552 ;;		On entry : 0/0
 17553 ;;		On exit  : 0/0
 17554 ;;		Unchanged: 0/0
 17555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17556 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;Total ram usage:       16 bytes
 17561 ;; Hardware stack levels used:    1
 17562 ;; Hardware stack levels required when called:    6
 17563 ;; This function calls:
 17564 ;;		___ftpack
 17565 ;; This function is called by:
 17566 ;;		_getDimmerLights_PercentToValue
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           
 17571                           ;psect for function ___ftmul
 17572  0DCB                     ___ftmul:	
 17573                           
 17574                           ;incstack = 0
 17575                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17576  0DCB  0020               	movlb	0	; select bank0
 17577  0DCC  082E               	movf	___ftmul@f1,w
 17578  0DCD  00B4               	movwf	??___ftmul
 17579  0DCE  082F               	movf	___ftmul@f1+1,w
 17580  0DCF  00B5               	movwf	??___ftmul+1
 17581  0DD0  0830               	movf	___ftmul@f1+2,w
 17582  0DD1  00B6               	movwf	??___ftmul+2
 17583  0DD2  1003               	clrc
 17584  0DD3  0D35               	rlf	??___ftmul+1,w
 17585  0DD4  0D36               	rlf	??___ftmul+2,w
 17586  0DD5  00B7               	movwf	??___ftmul+3
 17587  0DD6  0837               	movf	??___ftmul+3,w
 17588  0DD7  00B8               	movwf	___ftmul@exp
 17589  0DD8  08B8               	movf	___ftmul@exp,f
 17590  0DD9  1D03               	skipz
 17591  0DDA  2DE2               	goto	l6127
 17592  0DDB  3000               	movlw	0
 17593  0DDC  00AE               	movwf	?___ftmul
 17594  0DDD  3000               	movlw	0
 17595  0DDE  00AF               	movwf	?___ftmul+1
 17596  0DDF  3000               	movlw	0
 17597  0DE0  00B0               	movwf	?___ftmul+2
 17598  0DE1  0008               	return
 17599  0DE2                     l6127:	
 17600  0DE2  0831               	movf	___ftmul@f2,w
 17601  0DE3  00B4               	movwf	??___ftmul
 17602  0DE4  0832               	movf	___ftmul@f2+1,w
 17603  0DE5  00B5               	movwf	??___ftmul+1
 17604  0DE6  0833               	movf	___ftmul@f2+2,w
 17605  0DE7  00B6               	movwf	??___ftmul+2
 17606  0DE8  1003               	clrc
 17607  0DE9  0D35               	rlf	??___ftmul+1,w
 17608  0DEA  0D36               	rlf	??___ftmul+2,w
 17609  0DEB  00B7               	movwf	??___ftmul+3
 17610  0DEC  0837               	movf	??___ftmul+3,w
 17611  0DED  00BD               	movwf	___ftmul@sign
 17612  0DEE  08BD               	movf	___ftmul@sign,f
 17613  0DEF  1D03               	skipz
 17614  0DF0  2DF8               	goto	l6133
 17615  0DF1  3000               	movlw	0
 17616  0DF2  00AE               	movwf	?___ftmul
 17617  0DF3  3000               	movlw	0
 17618  0DF4  00AF               	movwf	?___ftmul+1
 17619  0DF5  3000               	movlw	0
 17620  0DF6  00B0               	movwf	?___ftmul+2
 17621  0DF7  0008               	return
 17622  0DF8                     l6133:	
 17623  0DF8  083D               	movf	___ftmul@sign,w
 17624  0DF9  3E7B               	addlw	123
 17625  0DFA  00B4               	movwf	??___ftmul
 17626  0DFB  0834               	movf	??___ftmul,w
 17627  0DFC  07B8               	addwf	___ftmul@exp,f
 17628  0DFD  082E               	movf	___ftmul@f1,w
 17629  0DFE  00B4               	movwf	??___ftmul
 17630  0DFF  082F               	movf	___ftmul@f1+1,w
 17631  0E00  00B5               	movwf	??___ftmul+1
 17632  0E01  0830               	movf	___ftmul@f1+2,w
 17633  0E02  00B6               	movwf	??___ftmul+2
 17634  0E03  3010               	movlw	16
 17635  0E04                     u5095:	
 17636  0E04  36B6               	lsrf	??___ftmul+2,f
 17637  0E05  0CB5               	rrf	??___ftmul+1,f
 17638  0E06  0CB4               	rrf	??___ftmul,f
 17639  0E07  0B89               	decfsz	9,f
 17640  0E08  2E04               	goto	u5095
 17641  0E09  0834               	movf	??___ftmul,w
 17642  0E0A  00B7               	movwf	??___ftmul+3
 17643  0E0B  0837               	movf	??___ftmul+3,w
 17644  0E0C  00BD               	movwf	___ftmul@sign
 17645  0E0D  0831               	movf	___ftmul@f2,w
 17646  0E0E  00B4               	movwf	??___ftmul
 17647  0E0F  0832               	movf	___ftmul@f2+1,w
 17648  0E10  00B5               	movwf	??___ftmul+1
 17649  0E11  0833               	movf	___ftmul@f2+2,w
 17650  0E12  00B6               	movwf	??___ftmul+2
 17651  0E13  3010               	movlw	16
 17652  0E14                     u5105:	
 17653  0E14  36B6               	lsrf	??___ftmul+2,f
 17654  0E15  0CB5               	rrf	??___ftmul+1,f
 17655  0E16  0CB4               	rrf	??___ftmul,f
 17656  0E17  0B89               	decfsz	9,f
 17657  0E18  2E14               	goto	u5105
 17658  0E19  0834               	movf	??___ftmul,w
 17659  0E1A  00B7               	movwf	??___ftmul+3
 17660  0E1B  0837               	movf	??___ftmul+3,w
 17661  0E1C  06BD               	xorwf	___ftmul@sign,f
 17662  0E1D  3080               	movlw	128
 17663  0E1E  00B4               	movwf	??___ftmul
 17664  0E1F  0834               	movf	??___ftmul,w
 17665  0E20  05BD               	andwf	___ftmul@sign,f
 17666  0E21  17AF               	bsf	___ftmul@f1+1,7
 17667  0E22  17B2               	bsf	___ftmul@f2+1,7
 17668  0E23  30FF               	movlw	255
 17669  0E24  05B1               	andwf	___ftmul@f2,f
 17670  0E25  30FF               	movlw	255
 17671  0E26  05B2               	andwf	___ftmul@f2+1,f
 17672  0E27  3000               	movlw	0
 17673  0E28  05B3               	andwf	___ftmul@f2+2,f
 17674  0E29  3000               	movlw	0
 17675  0E2A  00B9               	movwf	___ftmul@f3_as_product
 17676  0E2B  3000               	movlw	0
 17677  0E2C  00BA               	movwf	___ftmul@f3_as_product+1
 17678  0E2D  3000               	movlw	0
 17679  0E2E  00BB               	movwf	___ftmul@f3_as_product+2
 17680  0E2F  3007               	movlw	7
 17681  0E30  00B4               	movwf	??___ftmul
 17682  0E31  0834               	movf	??___ftmul,w
 17683  0E32  00BC               	movwf	___ftmul@cntr
 17684  0E33                     l6145:	
 17685  0E33  1C2E               	btfss	___ftmul@f1,0
 17686  0E34  2E3B               	goto	l6149
 17687  0E35  0831               	movf	___ftmul@f2,w
 17688  0E36  07B9               	addwf	___ftmul@f3_as_product,f
 17689  0E37  0832               	movf	___ftmul@f2+1,w
 17690  0E38  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17691  0E39  0833               	movf	___ftmul@f2+2,w
 17692  0E3A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17693  0E3B                     l6149:	
 17694  0E3B  3001               	movlw	1
 17695  0E3C                     u5125:	
 17696  0E3C  36B0               	lsrf	___ftmul@f1+2,f
 17697  0E3D  0CAF               	rrf	___ftmul@f1+1,f
 17698  0E3E  0CAE               	rrf	___ftmul@f1,f
 17699  0E3F  0B89               	decfsz	9,f
 17700  0E40  2E3C               	goto	u5125
 17701  0E41  3001               	movlw	1
 17702  0E42                     u5135:	
 17703  0E42  35B1               	lslf	___ftmul@f2,f
 17704  0E43  0DB2               	rlf	___ftmul@f2+1,f
 17705  0E44  0DB3               	rlf	___ftmul@f2+2,f
 17706  0E45  0B89               	decfsz	9,f
 17707  0E46  2E42               	goto	u5135
 17708  0E47  3001               	movlw	1
 17709  0E48  02BC               	subwf	___ftmul@cntr,f
 17710  0E49  1D03               	btfss	3,2
 17711  0E4A  2E33               	goto	l6145
 17712  0E4B  3009               	movlw	9
 17713  0E4C  00B4               	movwf	??___ftmul
 17714  0E4D  0834               	movf	??___ftmul,w
 17715  0E4E  00BC               	movwf	___ftmul@cntr
 17716  0E4F                     l6157:	
 17717  0E4F  1C2E               	btfss	___ftmul@f1,0
 17718  0E50  2E57               	goto	l6161
 17719  0E51  0831               	movf	___ftmul@f2,w
 17720  0E52  07B9               	addwf	___ftmul@f3_as_product,f
 17721  0E53  0832               	movf	___ftmul@f2+1,w
 17722  0E54  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17723  0E55  0833               	movf	___ftmul@f2+2,w
 17724  0E56  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17725  0E57                     l6161:	
 17726  0E57  3001               	movlw	1
 17727  0E58                     u5165:	
 17728  0E58  36B0               	lsrf	___ftmul@f1+2,f
 17729  0E59  0CAF               	rrf	___ftmul@f1+1,f
 17730  0E5A  0CAE               	rrf	___ftmul@f1,f
 17731  0E5B  0B89               	decfsz	9,f
 17732  0E5C  2E58               	goto	u5165
 17733  0E5D  3001               	movlw	1
 17734  0E5E                     u5175:	
 17735  0E5E  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17736  0E5F  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17737  0E60  0CB9               	rrf	___ftmul@f3_as_product,f
 17738  0E61  0B89               	decfsz	9,f
 17739  0E62  2E5E               	goto	u5175
 17740  0E63  3001               	movlw	1
 17741  0E64  02BC               	subwf	___ftmul@cntr,f
 17742  0E65  1D03               	btfss	3,2
 17743  0E66  2E4F               	goto	l6157
 17744  0E67  0839               	movf	___ftmul@f3_as_product,w
 17745  0E68  00A0               	movwf	___ftpack@arg
 17746  0E69  083A               	movf	___ftmul@f3_as_product+1,w
 17747  0E6A  00A1               	movwf	___ftpack@arg+1
 17748  0E6B  083B               	movf	___ftmul@f3_as_product+2,w
 17749  0E6C  00A2               	movwf	___ftpack@arg+2
 17750  0E6D  0838               	movf	___ftmul@exp,w
 17751  0E6E  00B4               	movwf	??___ftmul
 17752  0E6F  0834               	movf	??___ftmul,w
 17753  0E70  00A3               	movwf	___ftpack@exp
 17754  0E71  083D               	movf	___ftmul@sign,w
 17755  0E72  00B5               	movwf	??___ftmul+1
 17756  0E73  0835               	movf	??___ftmul+1,w
 17757  0E74  00A4               	movwf	___ftpack@sign
 17758  0E75  3195  259E         	fcall	___ftpack
 17759  0E77  0020               	movlb	0	; select bank0
 17760  0E78  0820               	movf	?___ftpack,w
 17761  0E79  00AE               	movwf	?___ftmul
 17762  0E7A  0821               	movf	?___ftpack+1,w
 17763  0E7B  00AF               	movwf	?___ftmul+1
 17764  0E7C  0822               	movf	?___ftpack+2,w
 17765  0E7D  00B0               	movwf	?___ftmul+2
 17766  0E7E  0008               	return
 17767  0E7F                     __end_of___ftmul:	
 17768                           
 17769                           	psect	text124
 17770  0D22                     __ptext124:	
 17771 ;; *************** function ___ftdiv *****************
 17772 ;; Defined at:
 17773 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;  f2              3   14[BANK0 ] float 
 17776 ;;  f1              3   17[BANK0 ] float 
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;  f3              3   25[BANK0 ] float 
 17779 ;;  sign            1   29[BANK0 ] unsigned char 
 17780 ;;  exp             1   28[BANK0 ] unsigned char 
 17781 ;;  cntr            1   24[BANK0 ] unsigned char 
 17782 ;; Return value:  Size  Location     Type
 17783 ;;                  3   14[BANK0 ] float 
 17784 ;; Registers used:
 17785 ;;		wreg, status,2, status,0, pclath, cstack
 17786 ;; Tracked objects:
 17787 ;;		On entry : 0/0
 17788 ;;		On exit  : 0/0
 17789 ;;		Unchanged: 0/0
 17790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17791 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17793 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;Total ram usage:       16 bytes
 17796 ;; Hardware stack levels used:    1
 17797 ;; Hardware stack levels required when called:    6
 17798 ;; This function calls:
 17799 ;;		___ftpack
 17800 ;; This function is called by:
 17801 ;;		_getDimmerLights_PercentToValue
 17802 ;;		_getDimmerLights_ValueToPercent
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806                           
 17807                           ;psect for function ___ftdiv
 17808  0D22                     ___ftdiv:	
 17809                           
 17810                           ;incstack = 0
 17811                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17812  0D22  0020               	movlb	0	; select bank0
 17813  0D23  0831               	movf	___ftdiv@f1,w
 17814  0D24  00B4               	movwf	??___ftdiv
 17815  0D25  0832               	movf	___ftdiv@f1+1,w
 17816  0D26  00B5               	movwf	??___ftdiv+1
 17817  0D27  0833               	movf	___ftdiv@f1+2,w
 17818  0D28  00B6               	movwf	??___ftdiv+2
 17819  0D29  1003               	clrc
 17820  0D2A  0D35               	rlf	??___ftdiv+1,w
 17821  0D2B  0D36               	rlf	??___ftdiv+2,w
 17822  0D2C  00B7               	movwf	??___ftdiv+3
 17823  0D2D  0837               	movf	??___ftdiv+3,w
 17824  0D2E  00BC               	movwf	___ftdiv@exp
 17825  0D2F  08BC               	movf	___ftdiv@exp,f
 17826  0D30  1D03               	skipz
 17827  0D31  2D39               	goto	l6085
 17828  0D32  3000               	movlw	0
 17829  0D33  00AE               	movwf	?___ftdiv
 17830  0D34  3000               	movlw	0
 17831  0D35  00AF               	movwf	?___ftdiv+1
 17832  0D36  3000               	movlw	0
 17833  0D37  00B0               	movwf	?___ftdiv+2
 17834  0D38  0008               	return
 17835  0D39                     l6085:	
 17836  0D39  082E               	movf	___ftdiv@f2,w
 17837  0D3A  00B4               	movwf	??___ftdiv
 17838  0D3B  082F               	movf	___ftdiv@f2+1,w
 17839  0D3C  00B5               	movwf	??___ftdiv+1
 17840  0D3D  0830               	movf	___ftdiv@f2+2,w
 17841  0D3E  00B6               	movwf	??___ftdiv+2
 17842  0D3F  1003               	clrc
 17843  0D40  0D35               	rlf	??___ftdiv+1,w
 17844  0D41  0D36               	rlf	??___ftdiv+2,w
 17845  0D42  00B7               	movwf	??___ftdiv+3
 17846  0D43  0837               	movf	??___ftdiv+3,w
 17847  0D44  00BD               	movwf	___ftdiv@sign
 17848  0D45  08BD               	movf	___ftdiv@sign,f
 17849  0D46  1D03               	skipz
 17850  0D47  2D4F               	goto	l6091
 17851  0D48  3000               	movlw	0
 17852  0D49  00AE               	movwf	?___ftdiv
 17853  0D4A  3000               	movlw	0
 17854  0D4B  00AF               	movwf	?___ftdiv+1
 17855  0D4C  3000               	movlw	0
 17856  0D4D  00B0               	movwf	?___ftdiv+2
 17857  0D4E  0008               	return
 17858  0D4F                     l6091:	
 17859  0D4F  3000               	movlw	0
 17860  0D50  00B9               	movwf	___ftdiv@f3
 17861  0D51  3000               	movlw	0
 17862  0D52  00BA               	movwf	___ftdiv@f3+1
 17863  0D53  3000               	movlw	0
 17864  0D54  00BB               	movwf	___ftdiv@f3+2
 17865  0D55  3089               	movlw	137
 17866  0D56  073D               	addwf	___ftdiv@sign,w
 17867  0D57  00B4               	movwf	??___ftdiv
 17868  0D58  0834               	movf	??___ftdiv,w
 17869  0D59  02BC               	subwf	___ftdiv@exp,f
 17870  0D5A  0831               	movf	___ftdiv@f1,w
 17871  0D5B  00B4               	movwf	??___ftdiv
 17872  0D5C  0832               	movf	___ftdiv@f1+1,w
 17873  0D5D  00B5               	movwf	??___ftdiv+1
 17874  0D5E  0833               	movf	___ftdiv@f1+2,w
 17875  0D5F  00B6               	movwf	??___ftdiv+2
 17876  0D60  3010               	movlw	16
 17877  0D61                     u5015:	
 17878  0D61  36B6               	lsrf	??___ftdiv+2,f
 17879  0D62  0CB5               	rrf	??___ftdiv+1,f
 17880  0D63  0CB4               	rrf	??___ftdiv,f
 17881  0D64  0B89               	decfsz	9,f
 17882  0D65  2D61               	goto	u5015
 17883  0D66  0834               	movf	??___ftdiv,w
 17884  0D67  00B7               	movwf	??___ftdiv+3
 17885  0D68  0837               	movf	??___ftdiv+3,w
 17886  0D69  00BD               	movwf	___ftdiv@sign
 17887  0D6A  082E               	movf	___ftdiv@f2,w
 17888  0D6B  00B4               	movwf	??___ftdiv
 17889  0D6C  082F               	movf	___ftdiv@f2+1,w
 17890  0D6D  00B5               	movwf	??___ftdiv+1
 17891  0D6E  0830               	movf	___ftdiv@f2+2,w
 17892  0D6F  00B6               	movwf	??___ftdiv+2
 17893  0D70  3010               	movlw	16
 17894  0D71                     u5025:	
 17895  0D71  36B6               	lsrf	??___ftdiv+2,f
 17896  0D72  0CB5               	rrf	??___ftdiv+1,f
 17897  0D73  0CB4               	rrf	??___ftdiv,f
 17898  0D74  0B89               	decfsz	9,f
 17899  0D75  2D71               	goto	u5025
 17900  0D76  0834               	movf	??___ftdiv,w
 17901  0D77  00B7               	movwf	??___ftdiv+3
 17902  0D78  0837               	movf	??___ftdiv+3,w
 17903  0D79  06BD               	xorwf	___ftdiv@sign,f
 17904  0D7A  3080               	movlw	128
 17905  0D7B  00B4               	movwf	??___ftdiv
 17906  0D7C  0834               	movf	??___ftdiv,w
 17907  0D7D  05BD               	andwf	___ftdiv@sign,f
 17908  0D7E  17B2               	bsf	___ftdiv@f1+1,7
 17909  0D7F  30FF               	movlw	255
 17910  0D80  05B1               	andwf	___ftdiv@f1,f
 17911  0D81  30FF               	movlw	255
 17912  0D82  05B2               	andwf	___ftdiv@f1+1,f
 17913  0D83  3000               	movlw	0
 17914  0D84  05B3               	andwf	___ftdiv@f1+2,f
 17915  0D85  17AF               	bsf	___ftdiv@f2+1,7
 17916  0D86  30FF               	movlw	255
 17917  0D87  05AE               	andwf	___ftdiv@f2,f
 17918  0D88  30FF               	movlw	255
 17919  0D89  05AF               	andwf	___ftdiv@f2+1,f
 17920  0D8A  3000               	movlw	0
 17921  0D8B  05B0               	andwf	___ftdiv@f2+2,f
 17922  0D8C  3018               	movlw	24
 17923  0D8D  00B4               	movwf	??___ftdiv
 17924  0D8E  0834               	movf	??___ftdiv,w
 17925  0D8F  00B8               	movwf	___ftdiv@cntr
 17926  0D90                     l6105:	
 17927  0D90  3001               	movlw	1
 17928  0D91                     u5035:	
 17929  0D91  35B9               	lslf	___ftdiv@f3,f
 17930  0D92  0DBA               	rlf	___ftdiv@f3+1,f
 17931  0D93  0DBB               	rlf	___ftdiv@f3+2,f
 17932  0D94  0B89               	decfsz	9,f
 17933  0D95  2D91               	goto	u5035
 17934  0D96  0830               	movf	___ftdiv@f2+2,w
 17935  0D97  0233               	subwf	___ftdiv@f1+2,w
 17936  0D98  1D03               	skipz
 17937  0D99  2DA0               	goto	u5045
 17938  0D9A  082F               	movf	___ftdiv@f2+1,w
 17939  0D9B  0232               	subwf	___ftdiv@f1+1,w
 17940  0D9C  1D03               	skipz
 17941  0D9D  2DA0               	goto	u5045
 17942  0D9E  082E               	movf	___ftdiv@f2,w
 17943  0D9F  0231               	subwf	___ftdiv@f1,w
 17944  0DA0                     u5045:	
 17945  0DA0  1C03               	skipc
 17946  0DA1  2DA9               	goto	l6113
 17947  0DA2  082E               	movf	___ftdiv@f2,w
 17948  0DA3  02B1               	subwf	___ftdiv@f1,f
 17949  0DA4  082F               	movf	___ftdiv@f2+1,w
 17950  0DA5  3BB2               	subwfb	___ftdiv@f1+1,f
 17951  0DA6  0830               	movf	___ftdiv@f2+2,w
 17952  0DA7  3BB3               	subwfb	___ftdiv@f1+2,f
 17953  0DA8  1439               	bsf	___ftdiv@f3,0
 17954  0DA9                     l6113:	
 17955  0DA9  3001               	movlw	1
 17956  0DAA                     u5055:	
 17957  0DAA  35B1               	lslf	___ftdiv@f1,f
 17958  0DAB  0DB2               	rlf	___ftdiv@f1+1,f
 17959  0DAC  0DB3               	rlf	___ftdiv@f1+2,f
 17960  0DAD  0B89               	decfsz	9,f
 17961  0DAE  2DAA               	goto	u5055
 17962  0DAF  3001               	movlw	1
 17963  0DB0  02B8               	subwf	___ftdiv@cntr,f
 17964  0DB1  1D03               	btfss	3,2
 17965  0DB2  2D90               	goto	l6105
 17966  0DB3  0839               	movf	___ftdiv@f3,w
 17967  0DB4  00A0               	movwf	___ftpack@arg
 17968  0DB5  083A               	movf	___ftdiv@f3+1,w
 17969  0DB6  00A1               	movwf	___ftpack@arg+1
 17970  0DB7  083B               	movf	___ftdiv@f3+2,w
 17971  0DB8  00A2               	movwf	___ftpack@arg+2
 17972  0DB9  083C               	movf	___ftdiv@exp,w
 17973  0DBA  00B4               	movwf	??___ftdiv
 17974  0DBB  0834               	movf	??___ftdiv,w
 17975  0DBC  00A3               	movwf	___ftpack@exp
 17976  0DBD  083D               	movf	___ftdiv@sign,w
 17977  0DBE  00B5               	movwf	??___ftdiv+1
 17978  0DBF  0835               	movf	??___ftdiv+1,w
 17979  0DC0  00A4               	movwf	___ftpack@sign
 17980  0DC1  3195  259E         	fcall	___ftpack
 17981  0DC3  0020               	movlb	0	; select bank0
 17982  0DC4  0820               	movf	?___ftpack,w
 17983  0DC5  00AE               	movwf	?___ftdiv
 17984  0DC6  0821               	movf	?___ftpack+1,w
 17985  0DC7  00AF               	movwf	?___ftdiv+1
 17986  0DC8  0822               	movf	?___ftpack+2,w
 17987  0DC9  00B0               	movwf	?___ftdiv+2
 17988  0DCA  0008               	return
 17989  0DCB                     __end_of___ftdiv:	
 17990                           
 17991                           	psect	text125
 17992  0389                     __ptext125:	
 17993 ;; *************** function ___ftadd *****************
 17994 ;; Defined at:
 17995 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;  f1              3   33[BANK0 ] float 
 17998 ;;  f2              3   36[BANK0 ] float 
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;  exp1            1   45[BANK0 ] unsigned char 
 18001 ;;  exp2            1   44[BANK0 ] unsigned char 
 18002 ;;  sign            1   43[BANK0 ] unsigned char 
 18003 ;; Return value:  Size  Location     Type
 18004 ;;                  3   33[BANK0 ] float 
 18005 ;; Registers used:
 18006 ;;		wreg, status,2, status,0, pclath, cstack
 18007 ;; Tracked objects:
 18008 ;;		On entry : 0/0
 18009 ;;		On exit  : 0/0
 18010 ;;		Unchanged: 0/0
 18011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;Total ram usage:       13 bytes
 18017 ;; Hardware stack levels used:    1
 18018 ;; Hardware stack levels required when called:    6
 18019 ;; This function calls:
 18020 ;;		___ftpack
 18021 ;; This function is called by:
 18022 ;;		_getDimmerLights_PercentToValue
 18023 ;;		_getDimmerLights_ValueToPercent
 18024 ;; This function uses a non-reentrant model
 18025 ;;
 18026                           
 18027                           
 18028                           ;psect for function ___ftadd
 18029  0389                     ___ftadd:	
 18030                           
 18031                           ;incstack = 0
 18032                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18033  0389  0020               	movlb	0	; select bank0
 18034  038A  0841               	movf	___ftadd@f1,w
 18035  038B  00C7               	movwf	??___ftadd
 18036  038C  0842               	movf	___ftadd@f1+1,w
 18037  038D  00C8               	movwf	??___ftadd+1
 18038  038E  0843               	movf	___ftadd@f1+2,w
 18039  038F  00C9               	movwf	??___ftadd+2
 18040  0390  1003               	clrc
 18041  0391  0D48               	rlf	??___ftadd+1,w
 18042  0392  0D49               	rlf	??___ftadd+2,w
 18043  0393  00CA               	movwf	??___ftadd+3
 18044  0394  084A               	movf	??___ftadd+3,w
 18045  0395  00CD               	movwf	___ftadd@exp1
 18046  0396  0844               	movf	___ftadd@f2,w
 18047  0397  00C7               	movwf	??___ftadd
 18048  0398  0845               	movf	___ftadd@f2+1,w
 18049  0399  00C8               	movwf	??___ftadd+1
 18050  039A  0846               	movf	___ftadd@f2+2,w
 18051  039B  00C9               	movwf	??___ftadd+2
 18052  039C  1003               	clrc
 18053  039D  0D48               	rlf	??___ftadd+1,w
 18054  039E  0D49               	rlf	??___ftadd+2,w
 18055  039F  00CA               	movwf	??___ftadd+3
 18056  03A0  084A               	movf	??___ftadd+3,w
 18057  03A1  00CC               	movwf	___ftadd@exp2
 18058  03A2  084D               	movf	___ftadd@exp1,w
 18059  03A3  1903               	btfsc	3,2
 18060  03A4  2BB1               	goto	l6015
 18061  03A5  084C               	movf	___ftadd@exp2,w
 18062  03A6  024D               	subwf	___ftadd@exp1,w
 18063  03A7  1803               	skipnc
 18064  03A8  2BB8               	goto	l6019
 18065  03A9  034D               	decf	___ftadd@exp1,w
 18066  03AA  3AFF               	xorlw	255
 18067  03AB  074C               	addwf	___ftadd@exp2,w
 18068  03AC  00C7               	movwf	??___ftadd
 18069  03AD  3019               	movlw	25
 18070  03AE  0247               	subwf	??___ftadd,w
 18071  03AF  1C03               	skipc
 18072  03B0  2BB8               	goto	l6019
 18073  03B1                     l6015:	
 18074  03B1  0844               	movf	___ftadd@f2,w
 18075  03B2  00C1               	movwf	?___ftadd
 18076  03B3  0845               	movf	___ftadd@f2+1,w
 18077  03B4  00C2               	movwf	?___ftadd+1
 18078  03B5  0846               	movf	___ftadd@f2+2,w
 18079  03B6  00C3               	movwf	?___ftadd+2
 18080  03B7  0008               	return
 18081  03B8                     l6019:	
 18082  03B8  084C               	movf	___ftadd@exp2,w
 18083  03B9  1903               	btfsc	3,2
 18084  03BA  0008               	return
 18085  03BB  084D               	movf	___ftadd@exp1,w
 18086  03BC  024C               	subwf	___ftadd@exp2,w
 18087  03BD  1803               	skipnc
 18088  03BE  2BC7               	goto	l6025
 18089  03BF  034C               	decf	___ftadd@exp2,w
 18090  03C0  3AFF               	xorlw	255
 18091  03C1  074D               	addwf	___ftadd@exp1,w
 18092  03C2  00C7               	movwf	??___ftadd
 18093  03C3  3019               	movlw	25
 18094  03C4  0247               	subwf	??___ftadd,w
 18095  03C5  1803               	btfsc	3,0
 18096  03C6  0008               	return
 18097  03C7                     l6025:	
 18098  03C7  3006               	movlw	6
 18099  03C8  00C7               	movwf	??___ftadd
 18100  03C9  0847               	movf	??___ftadd,w
 18101  03CA  00CB               	movwf	___ftadd@sign
 18102  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 18103  03CC  17CB               	bsf	___ftadd@sign,7
 18104  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 18105  03CE  174B               	bsf	___ftadd@sign,6
 18106  03CF  17C2               	bsf	___ftadd@f1+1,7
 18107  03D0  30FF               	movlw	255
 18108  03D1  05C1               	andwf	___ftadd@f1,f
 18109  03D2  30FF               	movlw	255
 18110  03D3  05C2               	andwf	___ftadd@f1+1,f
 18111  03D4  3000               	movlw	0
 18112  03D5  05C3               	andwf	___ftadd@f1+2,f
 18113  03D6  17C5               	bsf	___ftadd@f2+1,7
 18114  03D7  30FF               	movlw	255
 18115  03D8  05C4               	andwf	___ftadd@f2,f
 18116  03D9  30FF               	movlw	255
 18117  03DA  05C5               	andwf	___ftadd@f2+1,f
 18118  03DB  3000               	movlw	0
 18119  03DC  05C6               	andwf	___ftadd@f2+2,f
 18120  03DD  084C               	movf	___ftadd@exp2,w
 18121  03DE  024D               	subwf	___ftadd@exp1,w
 18122  03DF  1803               	skipnc
 18123  03E0  2C03               	goto	l6047
 18124  03E1                     l6037:	
 18125  03E1  3001               	movlw	1
 18126  03E2                     u4855:	
 18127  03E2  35C4               	lslf	___ftadd@f2,f
 18128  03E3  0DC5               	rlf	___ftadd@f2+1,f
 18129  03E4  0DC6               	rlf	___ftadd@f2+2,f
 18130  03E5  0B89               	decfsz	9,f
 18131  03E6  2BE2               	goto	u4855
 18132  03E7  3001               	movlw	1
 18133  03E8  02CC               	subwf	___ftadd@exp2,f
 18134  03E9  084C               	movf	___ftadd@exp2,w
 18135  03EA  064D               	xorwf	___ftadd@exp1,w
 18136  03EB  1903               	skipnz
 18137  03EC  2BFE               	goto	l6045
 18138  03ED  3001               	movlw	1
 18139  03EE  02CB               	subwf	___ftadd@sign,f
 18140  03EF  084B               	movf	___ftadd@sign,w
 18141  03F0  3907               	andlw	7
 18142  03F1  1903               	btfsc	3,2
 18143  03F2  2BFE               	goto	l6045
 18144  03F3  2BE1               	goto	l6037
 18145  03F4                     l6043:	
 18146  03F4  3001               	movlw	1
 18147  03F5                     u4885:	
 18148  03F5  36C3               	lsrf	___ftadd@f1+2,f
 18149  03F6  0CC2               	rrf	___ftadd@f1+1,f
 18150  03F7  0CC1               	rrf	___ftadd@f1,f
 18151  03F8  0B89               	decfsz	9,f
 18152  03F9  2BF5               	goto	u4885
 18153  03FA  3001               	movlw	1
 18154  03FB  00C7               	movwf	??___ftadd
 18155  03FC  0847               	movf	??___ftadd,w
 18156  03FD  07CD               	addwf	___ftadd@exp1,f
 18157  03FE                     l6045:	
 18158  03FE  084D               	movf	___ftadd@exp1,w
 18159  03FF  064C               	xorwf	___ftadd@exp2,w
 18160  0400  1903               	btfsc	3,2
 18161  0401  2C28               	goto	l2920
 18162  0402  2BF4               	goto	l6043
 18163  0403                     l6047:	
 18164  0403  084D               	movf	___ftadd@exp1,w
 18165  0404  024C               	subwf	___ftadd@exp2,w
 18166  0405  1803               	skipnc
 18167  0406  2C28               	goto	l2920
 18168  0407                     l6049:	
 18169  0407  3001               	movlw	1
 18170  0408                     u4915:	
 18171  0408  35C1               	lslf	___ftadd@f1,f
 18172  0409  0DC2               	rlf	___ftadd@f1+1,f
 18173  040A  0DC3               	rlf	___ftadd@f1+2,f
 18174  040B  0B89               	decfsz	9,f
 18175  040C  2C08               	goto	u4915
 18176  040D  3001               	movlw	1
 18177  040E  02CD               	subwf	___ftadd@exp1,f
 18178  040F  084C               	movf	___ftadd@exp2,w
 18179  0410  064D               	xorwf	___ftadd@exp1,w
 18180  0411  1903               	skipnz
 18181  0412  2C24               	goto	l6057
 18182  0413  3001               	movlw	1
 18183  0414  02CB               	subwf	___ftadd@sign,f
 18184  0415  084B               	movf	___ftadd@sign,w
 18185  0416  3907               	andlw	7
 18186  0417  1903               	btfsc	3,2
 18187  0418  2C24               	goto	l6057
 18188  0419  2C07               	goto	l6049
 18189  041A                     l6055:	
 18190  041A  3001               	movlw	1
 18191  041B                     u4945:	
 18192  041B  36C6               	lsrf	___ftadd@f2+2,f
 18193  041C  0CC5               	rrf	___ftadd@f2+1,f
 18194  041D  0CC4               	rrf	___ftadd@f2,f
 18195  041E  0B89               	decfsz	9,f
 18196  041F  2C1B               	goto	u4945
 18197  0420  3001               	movlw	1
 18198  0421  00C7               	movwf	??___ftadd
 18199  0422  0847               	movf	??___ftadd,w
 18200  0423  07CC               	addwf	___ftadd@exp2,f
 18201  0424                     l6057:	
 18202  0424  084D               	movf	___ftadd@exp1,w
 18203  0425  064C               	xorwf	___ftadd@exp2,w
 18204  0426  1D03               	skipz
 18205  0427  2C1A               	goto	l6055
 18206  0428                     l2920:	
 18207  0428  1FCB               	btfss	___ftadd@sign,7
 18208  0429  2C3A               	goto	l6061
 18209  042A  30FF               	movlw	255
 18210  042B  06C1               	xorwf	___ftadd@f1,f
 18211  042C  30FF               	movlw	255
 18212  042D  06C2               	xorwf	___ftadd@f1+1,f
 18213  042E  30FF               	movlw	255
 18214  042F  06C3               	xorwf	___ftadd@f1+2,f
 18215  0430  3001               	movlw	1
 18216  0431  07C1               	addwf	___ftadd@f1,f
 18217  0432  3000               	movlw	0
 18218  0433  1803               	skipnc
 18219  0434  3001               	movlw	1
 18220  0435  07C2               	addwf	___ftadd@f1+1,f
 18221  0436  3000               	movlw	0
 18222  0437  1803               	skipnc
 18223  0438  3001               	movlw	1
 18224  0439  07C3               	addwf	___ftadd@f1+2,f
 18225  043A                     l6061:	
 18226  043A  1F4B               	btfss	___ftadd@sign,6
 18227  043B  2C4C               	goto	l6065
 18228  043C  30FF               	movlw	255
 18229  043D  06C4               	xorwf	___ftadd@f2,f
 18230  043E  30FF               	movlw	255
 18231  043F  06C5               	xorwf	___ftadd@f2+1,f
 18232  0440  30FF               	movlw	255
 18233  0441  06C6               	xorwf	___ftadd@f2+2,f
 18234  0442  3001               	movlw	1
 18235  0443  07C4               	addwf	___ftadd@f2,f
 18236  0444  3000               	movlw	0
 18237  0445  1803               	skipnc
 18238  0446  3001               	movlw	1
 18239  0447  07C5               	addwf	___ftadd@f2+1,f
 18240  0448  3000               	movlw	0
 18241  0449  1803               	skipnc
 18242  044A  3001               	movlw	1
 18243  044B  07C6               	addwf	___ftadd@f2+2,f
 18244  044C                     l6065:	
 18245  044C  01CB               	clrf	___ftadd@sign
 18246  044D  0841               	movf	___ftadd@f1,w
 18247  044E  07C4               	addwf	___ftadd@f2,f
 18248  044F  0842               	movf	___ftadd@f1+1,w
 18249  0450  3DC5               	addwfc	___ftadd@f2+1,f
 18250  0451  0843               	movf	___ftadd@f1+2,w
 18251  0452  3DC6               	addwfc	___ftadd@f2+2,f
 18252  0453  1FC6               	btfss	___ftadd@f2+2,7
 18253  0454  2C67               	goto	l6075
 18254  0455  30FF               	movlw	255
 18255  0456  06C4               	xorwf	___ftadd@f2,f
 18256  0457  30FF               	movlw	255
 18257  0458  06C5               	xorwf	___ftadd@f2+1,f
 18258  0459  30FF               	movlw	255
 18259  045A  06C6               	xorwf	___ftadd@f2+2,f
 18260  045B  3001               	movlw	1
 18261  045C  07C4               	addwf	___ftadd@f2,f
 18262  045D  3000               	movlw	0
 18263  045E  1803               	skipnc
 18264  045F  3001               	movlw	1
 18265  0460  07C5               	addwf	___ftadd@f2+1,f
 18266  0461  3000               	movlw	0
 18267  0462  1803               	skipnc
 18268  0463  3001               	movlw	1
 18269  0464  07C6               	addwf	___ftadd@f2+2,f
 18270  0465  01CB               	clrf	___ftadd@sign
 18271  0466  0ACB               	incf	___ftadd@sign,f
 18272  0467                     l6075:	
 18273  0467  0844               	movf	___ftadd@f2,w
 18274  0468  00A0               	movwf	___ftpack@arg
 18275  0469  0845               	movf	___ftadd@f2+1,w
 18276  046A  00A1               	movwf	___ftpack@arg+1
 18277  046B  0846               	movf	___ftadd@f2+2,w
 18278  046C  00A2               	movwf	___ftpack@arg+2
 18279  046D  084D               	movf	___ftadd@exp1,w
 18280  046E  00C7               	movwf	??___ftadd
 18281  046F  0847               	movf	??___ftadd,w
 18282  0470  00A3               	movwf	___ftpack@exp
 18283  0471  084B               	movf	___ftadd@sign,w
 18284  0472  00C8               	movwf	??___ftadd+1
 18285  0473  0848               	movf	??___ftadd+1,w
 18286  0474  00A4               	movwf	___ftpack@sign
 18287  0475  3195  259E         	fcall	___ftpack
 18288  0477  0020               	movlb	0	; select bank0
 18289  0478  0820               	movf	?___ftpack,w
 18290  0479  00C1               	movwf	?___ftadd
 18291  047A  0821               	movf	?___ftpack+1,w
 18292  047B  00C2               	movwf	?___ftadd+1
 18293  047C  0822               	movf	?___ftpack+2,w
 18294  047D  00C3               	movwf	?___ftadd+2
 18295  047E  0008               	return
 18296  047F                     __end_of___ftadd:	
 18297                           
 18298                           	psect	text126
 18299  1F48                     __ptext126:	
 18300 ;; *************** function ___awtoft *****************
 18301 ;; Defined at:
 18302 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18303 ;; Parameters:    Size  Location     Type
 18304 ;;  c               2    8[BANK0 ] int 
 18305 ;; Auto vars:     Size  Location     Type
 18306 ;;  sign            1   13[BANK0 ] unsigned char 
 18307 ;; Return value:  Size  Location     Type
 18308 ;;                  3    8[BANK0 ] float 
 18309 ;; Registers used:
 18310 ;;		wreg, status,2, status,0, pclath, cstack
 18311 ;; Tracked objects:
 18312 ;;		On entry : 0/0
 18313 ;;		On exit  : 0/0
 18314 ;;		Unchanged: 0/0
 18315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;Total ram usage:        6 bytes
 18321 ;; Hardware stack levels used:    1
 18322 ;; Hardware stack levels required when called:    6
 18323 ;; This function calls:
 18324 ;;		___ftpack
 18325 ;; This function is called by:
 18326 ;;		_getDimmerLights_PercentToValue
 18327 ;;		_getDimmerLights_ValueToPercent
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           
 18332                           ;psect for function ___awtoft
 18333  1F48                     ___awtoft:	
 18334                           
 18335                           ;incstack = 0
 18336                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18337  1F48  0020               	movlb	0	; select bank0
 18338  1F49  01AD               	clrf	___awtoft@sign
 18339  1F4A  1FA9               	btfss	___awtoft@c+1,7
 18340  1F4B  2F53               	goto	l6003
 18341  1F4C  09A8               	comf	___awtoft@c,f
 18342  1F4D  09A9               	comf	___awtoft@c+1,f
 18343  1F4E  0AA8               	incf	___awtoft@c,f
 18344  1F4F  1903               	skipnz
 18345  1F50  0AA9               	incf	___awtoft@c+1,f
 18346  1F51  01AD               	clrf	___awtoft@sign
 18347  1F52  0AAD               	incf	___awtoft@sign,f
 18348  1F53                     l6003:	
 18349  1F53  0828               	movf	___awtoft@c,w
 18350  1F54  00A0               	movwf	___ftpack@arg
 18351  1F55  0829               	movf	___awtoft@c+1,w
 18352  1F56  00A1               	movwf	___ftpack@arg+1
 18353  1F57  01A2               	clrf	___ftpack@arg+2
 18354  1F58  308E               	movlw	142
 18355  1F59  00AB               	movwf	??___awtoft
 18356  1F5A  082B               	movf	??___awtoft,w
 18357  1F5B  00A3               	movwf	___ftpack@exp
 18358  1F5C  082D               	movf	___awtoft@sign,w
 18359  1F5D  00AC               	movwf	??___awtoft+1
 18360  1F5E  082C               	movf	??___awtoft+1,w
 18361  1F5F  00A4               	movwf	___ftpack@sign
 18362  1F60  3195  259E         	fcall	___ftpack
 18363  1F62  0020               	movlb	0	; select bank0
 18364  1F63  0820               	movf	?___ftpack,w
 18365  1F64  00A8               	movwf	?___awtoft
 18366  1F65  0821               	movf	?___ftpack+1,w
 18367  1F66  00A9               	movwf	?___awtoft+1
 18368  1F67  0822               	movf	?___ftpack+2,w
 18369  1F68  00AA               	movwf	?___awtoft+2
 18370  1F69  0008               	return
 18371  1F6A                     __end_of___awtoft:	
 18372                           
 18373                           	psect	text127
 18374  159E                     __ptext127:	
 18375 ;; *************** function ___ftpack *****************
 18376 ;; Defined at:
 18377 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  arg             3    0[BANK0 ] unsigned um
 18380 ;;  exp             1    3[BANK0 ] unsigned char 
 18381 ;;  sign            1    4[BANK0 ] unsigned char 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;		None
 18384 ;; Return value:  Size  Location     Type
 18385 ;;                  3    0[BANK0 ] float 
 18386 ;; Registers used:
 18387 ;;		wreg, status,2, status,0
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18393 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;Total ram usage:        8 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    5
 18400 ;; This function calls:
 18401 ;;		Nothing
 18402 ;; This function is called by:
 18403 ;;		___awtoft
 18404 ;;		___ftadd
 18405 ;;		___ftdiv
 18406 ;;		___ftmul
 18407 ;; This function uses a non-reentrant model
 18408 ;;
 18409                           
 18410                           
 18411                           ;psect for function ___ftpack
 18412  159E                     ___ftpack:	
 18413                           
 18414                           ;incstack = 0
 18415                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18416  159E  0020               	movlb	0	; select bank0
 18417  159F  0823               	movf	___ftpack@exp,w
 18418  15A0  1903               	btfsc	3,2
 18419  15A1  2DA7               	goto	l5861
 18420  15A2  0822               	movf	___ftpack@arg+2,w
 18421  15A3  0421               	iorwf	___ftpack@arg+1,w
 18422  15A4  0420               	iorwf	___ftpack@arg,w
 18423  15A5  1D03               	skipz
 18424  15A6  2DB8               	goto	l5867
 18425  15A7                     l5861:	
 18426  15A7  3000               	movlw	0
 18427  15A8  00A0               	movwf	?___ftpack
 18428  15A9  3000               	movlw	0
 18429  15AA  00A1               	movwf	?___ftpack+1
 18430  15AB  3000               	movlw	0
 18431  15AC  00A2               	movwf	?___ftpack+2
 18432  15AD  0008               	return
 18433  15AE                     l5865:	
 18434  15AE  3001               	movlw	1
 18435  15AF  00A5               	movwf	??___ftpack
 18436  15B0  0825               	movf	??___ftpack,w
 18437  15B1  07A3               	addwf	___ftpack@exp,f
 18438  15B2  3001               	movlw	1
 18439  15B3                     u4475:	
 18440  15B3  36A2               	lsrf	___ftpack@arg+2,f
 18441  15B4  0CA1               	rrf	___ftpack@arg+1,f
 18442  15B5  0CA0               	rrf	___ftpack@arg,f
 18443  15B6  0B89               	decfsz	9,f
 18444  15B7  2DB3               	goto	u4475
 18445  15B8                     l5867:	
 18446  15B8  30FE               	movlw	254
 18447  15B9  0522               	andwf	___ftpack@arg+2,w
 18448  15BA  1903               	btfsc	3,2
 18449  15BB  2DD1               	goto	l2891
 18450  15BC  2DAE               	goto	l5865
 18451  15BD                     l5869:	
 18452  15BD  3001               	movlw	1
 18453  15BE  00A5               	movwf	??___ftpack
 18454  15BF  0825               	movf	??___ftpack,w
 18455  15C0  07A3               	addwf	___ftpack@exp,f
 18456  15C1  3001               	movlw	1
 18457  15C2  07A0               	addwf	___ftpack@arg,f
 18458  15C3  3000               	movlw	0
 18459  15C4  1803               	skipnc
 18460  15C5  3001               	movlw	1
 18461  15C6  07A1               	addwf	___ftpack@arg+1,f
 18462  15C7  3000               	movlw	0
 18463  15C8  1803               	skipnc
 18464  15C9  3001               	movlw	1
 18465  15CA  07A2               	addwf	___ftpack@arg+2,f
 18466  15CB  3001               	movlw	1
 18467  15CC                     u4495:	
 18468  15CC  36A2               	lsrf	___ftpack@arg+2,f
 18469  15CD  0CA1               	rrf	___ftpack@arg+1,f
 18470  15CE  0CA0               	rrf	___ftpack@arg,f
 18471  15CF  0B89               	decfsz	9,f
 18472  15D0  2DCC               	goto	u4495
 18473  15D1                     l2891:	
 18474  15D1  30FF               	movlw	255
 18475  15D2  0522               	andwf	___ftpack@arg+2,w
 18476  15D3  1903               	btfsc	3,2
 18477  15D4  2DDE               	goto	l5877
 18478  15D5  2DBD               	goto	l5869
 18479  15D6                     l5875:	
 18480  15D6  3001               	movlw	1
 18481  15D7  02A3               	subwf	___ftpack@exp,f
 18482  15D8  3001               	movlw	1
 18483  15D9                     u4515:	
 18484  15D9  35A0               	lslf	___ftpack@arg,f
 18485  15DA  0DA1               	rlf	___ftpack@arg+1,f
 18486  15DB  0DA2               	rlf	___ftpack@arg+2,f
 18487  15DC  0B89               	decfsz	9,f
 18488  15DD  2DD9               	goto	u4515
 18489  15DE                     l5877:	
 18490  15DE  1FA1               	btfss	___ftpack@arg+1,7
 18491  15DF  2DD6               	goto	l5875
 18492  15E0  1823               	btfsc	___ftpack@exp,0
 18493  15E1  2DE8               	goto	l2897
 18494  15E2  30FF               	movlw	255
 18495  15E3  05A0               	andwf	___ftpack@arg,f
 18496  15E4  307F               	movlw	127
 18497  15E5  05A1               	andwf	___ftpack@arg+1,f
 18498  15E6  30FF               	movlw	255
 18499  15E7  05A2               	andwf	___ftpack@arg+2,f
 18500  15E8                     l2897:	
 18501  15E8  1003               	clrc
 18502  15E9  0CA3               	rrf	___ftpack@exp,f
 18503  15EA  0823               	movf	___ftpack@exp,w
 18504  15EB  00A5               	movwf	??___ftpack
 18505  15EC  01A6               	clrf	??___ftpack+1
 18506  15ED  01A7               	clrf	??___ftpack+2
 18507  15EE  3010               	movlw	16
 18508  15EF                     u4545:	
 18509  15EF  35A5               	lslf	??___ftpack,f
 18510  15F0  0DA6               	rlf	??___ftpack+1,f
 18511  15F1  0DA7               	rlf	??___ftpack+2,f
 18512  15F2  0B89               	decfsz	9,f
 18513  15F3  2DEF               	goto	u4545
 18514  15F4  0825               	movf	??___ftpack,w
 18515  15F5  04A0               	iorwf	___ftpack@arg,f
 18516  15F6  0826               	movf	??___ftpack+1,w
 18517  15F7  04A1               	iorwf	___ftpack@arg+1,f
 18518  15F8  0827               	movf	??___ftpack+2,w
 18519  15F9  04A2               	iorwf	___ftpack@arg+2,f
 18520  15FA  0824               	movf	___ftpack@sign,w
 18521  15FB  1903               	btfsc	3,2
 18522  15FC  0008               	return
 18523  15FD  17A2               	bsf	___ftpack@arg+2,7
 18524  15FE  0008               	return
 18525  15FF                     __end_of___ftpack:	
 18526                           
 18527                           	psect	text128
 18528  1B3A                     __ptext128:	
 18529 ;; *************** function _Division *****************
 18530 ;; Defined at:
 18531 ;;		line 1443 in file "../src/Dimmer_B1.c"
 18532 ;; Parameters:    Size  Location     Type
 18533 ;;  value           1    wreg     unsigned char 
 18534 ;;  num             1    5[BANK0 ] unsigned char 
 18535 ;; Auto vars:     Size  Location     Type
 18536 ;;  value           1    8[BANK0 ] unsigned char 
 18537 ;;  result          1    9[BANK0 ] unsigned char 
 18538 ;; Return value:  Size  Location     Type
 18539 ;;                  1    wreg      unsigned char 
 18540 ;; Registers used:
 18541 ;;		wreg, status,2, status,0, pclath, cstack
 18542 ;; Tracked objects:
 18543 ;;		On entry : 0/0
 18544 ;;		On exit  : 0/0
 18545 ;;		Unchanged: 0/0
 18546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18550 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18551 ;;Total ram usage:        5 bytes
 18552 ;; Hardware stack levels used:    1
 18553 ;; Hardware stack levels required when called:    6
 18554 ;; This function calls:
 18555 ;;		___lbdiv
 18556 ;; This function is called by:
 18557 ;;		_DimmerIntr_Initialization
 18558 ;; This function uses a non-reentrant model
 18559 ;;
 18560                           
 18561                           
 18562                           ;psect for function _Division
 18563  1B3A                     _Division:	
 18564                           
 18565                           ;incstack = 0
 18566                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18567                           ;Division@value stored from wreg
 18568  1B3A  0020               	movlb	0	; select bank0
 18569  1B3B  00A8               	movwf	Division@value
 18570                           
 18571                           ;Dimmer_B1.c: 1444: char result = (char) (value / num);
 18572  1B3C  0825               	movf	Division@num,w
 18573  1B3D  00A6               	movwf	??_Division
 18574  1B3E  0826               	movf	??_Division,w
 18575  1B3F  00A0               	movwf	___lbdiv@divisor
 18576  1B40  0828               	movf	Division@value,w
 18577  1B41  319F  2726         	fcall	___lbdiv
 18578  1B43  0020               	movlb	0	; select bank0
 18579  1B44  00A7               	movwf	??_Division+1
 18580  1B45  0827               	movf	??_Division+1,w
 18581  1B46  00A9               	movwf	Division@result
 18582                           
 18583                           ;Dimmer_B1.c: 1445: return result;
 18584  1B47  0829               	movf	Division@result,w
 18585  1B48  0008               	return
 18586  1B49                     __end_of_Division:	
 18587                           
 18588                           	psect	text129
 18589  1F26                     __ptext129:	
 18590 ;; *************** function ___lbdiv *****************
 18591 ;; Defined at:
 18592 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18593 ;; Parameters:    Size  Location     Type
 18594 ;;  dividend        1    wreg     unsigned char 
 18595 ;;  divisor         1    0[BANK0 ] unsigned char 
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;  dividend        1    2[BANK0 ] unsigned char 
 18598 ;;  quotient        1    4[BANK0 ] unsigned char 
 18599 ;;  counter         1    3[BANK0 ] unsigned char 
 18600 ;; Return value:  Size  Location     Type
 18601 ;;                  1    wreg      unsigned char 
 18602 ;; Registers used:
 18603 ;;		wreg, status,2, status,0
 18604 ;; Tracked objects:
 18605 ;;		On entry : 0/0
 18606 ;;		On exit  : 0/0
 18607 ;;		Unchanged: 0/0
 18608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18609 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18613 ;;Total ram usage:        5 bytes
 18614 ;; Hardware stack levels used:    1
 18615 ;; Hardware stack levels required when called:    5
 18616 ;; This function calls:
 18617 ;;		Nothing
 18618 ;; This function is called by:
 18619 ;;		_Division
 18620 ;; This function uses a non-reentrant model
 18621 ;;
 18622                           
 18623                           
 18624                           ;psect for function ___lbdiv
 18625  1F26                     ___lbdiv:	
 18626                           
 18627                           ;incstack = 0
 18628                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18629                           ;___lbdiv@dividend stored from wreg
 18630  1F26  0020               	movlb	0	; select bank0
 18631  1F27  00A2               	movwf	___lbdiv@dividend
 18632  1F28  01A4               	clrf	___lbdiv@quotient
 18633  1F29  0820               	movf	___lbdiv@divisor,w
 18634  1F2A  1903               	btfsc	3,2
 18635  1F2B  2F46               	goto	l6847
 18636  1F2C  01A3               	clrf	___lbdiv@counter
 18637  1F2D  0AA3               	incf	___lbdiv@counter,f
 18638  1F2E                     l6835:	
 18639  1F2E  1BA0               	btfsc	___lbdiv@divisor,7
 18640  1F2F  2F37               	goto	l6837
 18641  1F30  1003               	clrc
 18642  1F31  0DA0               	rlf	___lbdiv@divisor,f
 18643  1F32  3001               	movlw	1
 18644  1F33  00A1               	movwf	??___lbdiv
 18645  1F34  0821               	movf	??___lbdiv,w
 18646  1F35  07A3               	addwf	___lbdiv@counter,f
 18647  1F36  2F2E               	goto	l6835
 18648  1F37                     l6837:	
 18649  1F37  1003               	clrc
 18650  1F38  0DA4               	rlf	___lbdiv@quotient,f
 18651  1F39  0820               	movf	___lbdiv@divisor,w
 18652  1F3A  0222               	subwf	___lbdiv@dividend,w
 18653  1F3B  1C03               	skipc
 18654  1F3C  2F41               	goto	L10
 18655  1F3D  0820               	movf	___lbdiv@divisor,w
 18656  1F3E  02A2               	subwf	___lbdiv@dividend,f
 18657  1F3F  1424               	bsf	___lbdiv@quotient,0
 18658  1F40  1003               	clrc
 18659  1F41                     L10:	
 18660  1F41  0CA0               	rrf	___lbdiv@divisor,f
 18661  1F42  3001               	movlw	1
 18662  1F43  02A3               	subwf	___lbdiv@counter,f
 18663  1F44  1D03               	btfss	3,2
 18664  1F45  2F37               	goto	l6837
 18665  1F46                     l6847:	
 18666  1F46  0824               	movf	___lbdiv@quotient,w
 18667  1F47  0008               	return
 18668  1F48                     __end_of___lbdiv:	
 18669                           
 18670                           	psect	text130
 18671  19CF                     __ptext130:	
 18672 ;; *************** function _DelayOff_Main *****************
 18673 ;; Defined at:
 18674 ;;		line 41 in file "../src/DelayOff_B1.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;		None               void
 18681 ;; Registers used:
 18682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18692 ;;Total ram usage:        0 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    9
 18695 ;; This function calls:
 18696 ;;		_DlyOff_Main
 18697 ;; This function is called by:
 18698 ;;		_main
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           
 18703                           ;psect for function _DelayOff_Main
 18704  19CF                     _DelayOff_Main:	
 18705                           
 18706                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18707                           
 18708                           ;incstack = 0
 18709                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18710  19CF  3001               	movlw	1
 18711  19D0  3189  2122         	fcall	_DlyOff_Main
 18712  19D2  0008               	return
 18713  19D3                     __end_of_DelayOff_Main:	
 18714                           
 18715                           	psect	text131
 18716  0922                     __ptext131:	
 18717 ;; *************** function _DlyOff_Main *****************
 18718 ;; Defined at:
 18719 ;;		line 61 in file "../src/DelayOff_B1.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;  sw              1    wreg     unsigned char 
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;  sw              1   71[BANK0 ] unsigned char 
 18724 ;; Return value:  Size  Location     Type
 18725 ;;		None               void
 18726 ;; Registers used:
 18727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18728 ;; Tracked objects:
 18729 ;;		On entry : 0/0
 18730 ;;		On exit  : 0/0
 18731 ;;		Unchanged: 0/0
 18732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;Total ram usage:        3 bytes
 18738 ;; Hardware stack levels used:    1
 18739 ;; Hardware stack levels required when called:    8
 18740 ;; This function calls:
 18741 ;;		_DelayOffPointSelect
 18742 ;;		_getDimmerLights_Status
 18743 ;;		_setDimmerLights_SwOff
 18744 ;;		_setDimmerLights_SwOn
 18745 ;;		_setProductData
 18746 ;; This function is called by:
 18747 ;;		_DelayOff_Main
 18748 ;; This function uses a non-reentrant model
 18749 ;;
 18750                           
 18751                           
 18752                           ;psect for function _DlyOff_Main
 18753  0922                     _DlyOff_Main:	
 18754                           
 18755                           ;incstack = 0
 18756                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18757                           ;DlyOff_Main@sw stored from wreg
 18758  0922  0020               	movlb	0	; select bank0
 18759  0923  00E7               	movwf	DlyOff_Main@sw
 18760                           
 18761                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18762  0924  0867               	movf	DlyOff_Main@sw,w
 18763  0925  319A  228E  3189   	fcall	_DelayOffPointSelect
 18764                           
 18765                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18766  0928  0021               	movlb	1	; select bank1
 18767  0929  084A               	movf	_DelayOff^(0+128),w
 18768  092A  0086               	movwf	6
 18769  092B  3001               	movlw	1	; select bank2/3
 18770  092C  0087               	movwf	7
 18771  092D  1C81               	btfss	1,1
 18772  092E  0008               	return
 18773                           
 18774                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18775  092F  084A               	movf	_DelayOff^(0+128),w
 18776  0930  3E02               	addlw	2
 18777  0931  0086               	movwf	6
 18778  0932  3001               	movlw	1	; select bank2/3
 18779  0933  0087               	movwf	7
 18780  0934  3001               	movlw	1
 18781  0935  0781               	addwf	1,f
 18782  0936  3141               	addfsr 1,1
 18783  0937  1803               	skipnc
 18784  0938  0A81               	incf	1,f
 18785                           
 18786                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18787  0939  084A               	movf	_DelayOff^(0+128),w
 18788  093A  3E02               	addlw	2
 18789  093B  0086               	movwf	6
 18790  093C  3001               	movlw	1	; select bank2/3
 18791  093D  0087               	movwf	7
 18792  093E  3F40               	moviw [0]fsr1
 18793  093F  0020               	movlb	0	; select bank0
 18794  0940  00E5               	movwf	??_DlyOff_Main
 18795  0941  3F41               	moviw [1]fsr1
 18796  0942  00E6               	movwf	??_DlyOff_Main+1
 18797  0943  300B               	movlw	11
 18798  0944  0266               	subwf	??_DlyOff_Main+1,w
 18799  0945  30B8               	movlw	184
 18800  0946  1903               	skipnz
 18801  0947  0265               	subwf	??_DlyOff_Main,w
 18802  0948  1C03               	skipc
 18803  0949  0008               	return
 18804                           
 18805                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18806  094A  0021               	movlb	1	; select bank1
 18807  094B  084A               	movf	_DelayOff^(0+128),w
 18808  094C  3E02               	addlw	2
 18809  094D  0086               	movwf	6
 18810  094E  3001               	movlw	1	; select bank2/3
 18811  094F  0087               	movwf	7
 18812  0950  3000               	movlw	0
 18813  0951  3FC0               	movwi [0]fsr1
 18814  0952  3FC1               	movwi [1]fsr1
 18815                           
 18816                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18817  0953  3001               	movlw	1
 18818  0954  0020               	movlb	0	; select bank0
 18819  0955  00E5               	movwf	??_DlyOff_Main
 18820  0956  0021               	movlb	1	; select bank1
 18821  0957  084A               	movf	_DelayOff^(0+128),w
 18822  0958  3E04               	addlw	4
 18823  0959  0086               	movwf	6
 18824  095A  3001               	movlw	1	; select bank2/3
 18825  095B  0087               	movwf	7
 18826  095C  0020               	movlb	0	; select bank0
 18827  095D  0865               	movf	??_DlyOff_Main,w
 18828  095E  0781               	addwf	1,f
 18829                           
 18830                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18831  095F  0021               	movlb	1	; select bank1
 18832  0960  084A               	movf	_DelayOff^(0+128),w
 18833  0961  3E04               	addlw	4
 18834  0962  0086               	movwf	6
 18835  0963  3001               	movlw	1	; select bank2/3
 18836  0964  0087               	movwf	7
 18837  0965  0A4A               	incf	_DelayOff^(0+128),w
 18838  0966  0084               	movwf	4
 18839  0967  3001               	movlw	1	; select bank2/3
 18840  0968  0085               	movwf	5
 18841  0969  0800               	movf	0,w
 18842  096A  0201               	subwf	1,w
 18843  096B  1C03               	skipc
 18844  096C  0008               	return
 18845                           
 18846                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18847  096D  084A               	movf	_DelayOff^(0+128),w
 18848  096E  3E04               	addlw	4
 18849  096F  0086               	movwf	6
 18850  0970  3001               	movlw	1	; select bank2/3
 18851  0971  0087               	movwf	7
 18852  0972  0181               	clrf	1
 18853                           
 18854                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18855  0973  084A               	movf	_DelayOff^(0+128),w
 18856  0974  0086               	movwf	6
 18857  0975  3001               	movlw	1	; select bank2/3
 18858  0976  0087               	movwf	7
 18859  0977  1081               	bcf	1,1
 18860                           
 18861                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18862  0978  0020               	movlb	0	; select bank0
 18863  0979  0867               	movf	DlyOff_Main@sw,w
 18864  097A  319B  2377  3189   	fcall	_getDimmerLights_Status
 18865  097D  3A01               	xorlw	1
 18866  097E  1D03               	skipz
 18867  097F  298A               	goto	l531
 18868                           
 18869                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18870  0980  0020               	movlb	0	; select bank0
 18871  0981  0867               	movf	DlyOff_Main@sw,w
 18872  0982  3193  2339  3189   	fcall	_setDimmerLights_SwOn
 18873                           
 18874                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18875  0985  0020               	movlb	0	; select bank0
 18876  0986  0867               	movf	DlyOff_Main@sw,w
 18877  0987  3192  22AD  3189   	fcall	_setDimmerLights_SwOff
 18878  098A                     l531:	
 18879                           
 18880                           ;DelayOff_B1.c: 78: }
 18881                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18882  098A  0020               	movlb	0	; select bank0
 18883  098B  01E2               	clrf	setProductData@value
 18884  098C  0867               	movf	DlyOff_Main@sw,w
 18885  098D  3E1A               	addlw	26
 18886  098E  319A  22A6         	fcall	_setProductData
 18887  0990  0008               	return
 18888  0991                     __end_of_DlyOff_Main:	
 18889                           
 18890                           	psect	text132
 18891  1AA6                     __ptext132:	
 18892 ;; *************** function _setProductData *****************
 18893 ;; Defined at:
 18894 ;;		line 645 in file "../src/Main_B1.c"
 18895 ;; Parameters:    Size  Location     Type
 18896 ;;  address         1    wreg     unsigned char 
 18897 ;;  value           1   66[BANK0 ] unsigned char 
 18898 ;; Auto vars:     Size  Location     Type
 18899 ;;  address         1   68[BANK0 ] unsigned char 
 18900 ;; Return value:  Size  Location     Type
 18901 ;;		None               void
 18902 ;; Registers used:
 18903 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18904 ;; Tracked objects:
 18905 ;;		On entry : 0/0
 18906 ;;		On exit  : 0/0
 18907 ;;		Unchanged: 0/0
 18908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;Total ram usage:        3 bytes
 18914 ;; Hardware stack levels used:    1
 18915 ;; Hardware stack levels required when called:    5
 18916 ;; This function calls:
 18917 ;;		Nothing
 18918 ;; This function is called by:
 18919 ;;		_DlyOff_Main
 18920 ;;		_setDelayOff_GO
 18921 ;;		_setDimmerLights_OnOff
 18922 ;;		_setDimmerLights_Dimming
 18923 ;;		_setTemp_Main
 18924 ;;		_setLog_Code
 18925 ;;		_setControl_Lights_Table
 18926 ;;		_setRFSW_AdjControl
 18927 ;;		_setRF_DimmerLights
 18928 ;; This function uses a non-reentrant model
 18929 ;;
 18930                           
 18931                           
 18932                           ;psect for function _setProductData
 18933  1AA6                     _setProductData:	
 18934                           
 18935                           ;incstack = 0
 18936                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18937                           ;setProductData@address stored from wreg
 18938  1AA6  0020               	movlb	0	; select bank0
 18939  1AA7  00E4               	movwf	setProductData@address
 18940                           
 18941                           ;Main_B1.c: 646: _product.Data[address] = value;
 18942  1AA8  0862               	movf	setProductData@value,w
 18943  1AA9  00E3               	movwf	??_setProductData
 18944  1AAA  0864               	movf	setProductData@address,w
 18945  1AAB  3ECC               	addlw	__product& (0+255)
 18946  1AAC  0086               	movwf	6
 18947  1AAD  3001               	movlw	1	; select bank3/4
 18948  1AAE  0087               	movwf	7
 18949  1AAF  0863               	movf	??_setProductData,w
 18950  1AB0  0081               	movwf	1
 18951  1AB1  0008               	return
 18952  1AB2                     __end_of_setProductData:	
 18953                           
 18954                           	psect	text133
 18955  1339                     __ptext133:	
 18956 ;; *************** function _setDimmerLights_SwOn *****************
 18957 ;; Defined at:
 18958 ;;		line 731 in file "../src/Dimmer_B1.c"
 18959 ;; Parameters:    Size  Location     Type
 18960 ;;  sw              1    wreg     unsigned char 
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;  sw              1   16[BANK0 ] unsigned char 
 18963 ;;  dimmingStatu    1   15[BANK0 ] unsigned char 
 18964 ;;  idle            1   14[BANK0 ] unsigned char 
 18965 ;; Return value:  Size  Location     Type
 18966 ;;		None               void
 18967 ;; Registers used:
 18968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18969 ;; Tracked objects:
 18970 ;;		On entry : 0/0
 18971 ;;		On exit  : 0/0
 18972 ;;		Unchanged: 0/0
 18973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18978 ;;Total ram usage:        4 bytes
 18979 ;; Hardware stack levels used:    1
 18980 ;; Hardware stack levels required when called:    7
 18981 ;; This function calls:
 18982 ;;		_DimmerLights_SelectPointer
 18983 ;;		_getDimmerIntr_Dimming_Sw
 18984 ;;		_setBuz
 18985 ;; This function is called by:
 18986 ;;		_DlyOff_Main
 18987 ;;		_setControl_Lights_Table
 18988 ;;		_setRFSW_Control
 18989 ;;		_setRFSW_AdjControl
 18990 ;;		_setSw_Main
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           
 18995                           ;psect for function _setDimmerLights_SwOn
 18996  1339                     _setDimmerLights_SwOn:	
 18997                           
 18998                           ;incstack = 0
 18999                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19000                           ;setDimmerLights_SwOn@sw stored from wreg
 19001  1339  0020               	movlb	0	; select bank0
 19002  133A  00B0               	movwf	setDimmerLights_SwOn@sw
 19003                           
 19004                           ;Dimmer_B1.c: 732: char idle = 0;
 19005  133B  01AE               	clrf	setDimmerLights_SwOn@idle
 19006                           
 19007                           ;Dimmer_B1.c: 734: char dimmingStatus = 0;
 19008  133C  01AF               	clrf	setDimmerLights_SwOn@dimmingStatus
 19009                           
 19010                           ;Dimmer_B1.c: 735: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19011  133D  0830               	movf	setDimmerLights_SwOn@sw,w
 19012  133E  319B  232B  3193   	fcall	_getDimmerIntr_Dimming_Sw
 19013  1341  0020               	movlb	0	; select bank0
 19014  1342  00AD               	movwf	??_setDimmerLights_SwOn
 19015  1343  082D               	movf	??_setDimmerLights_SwOn,w
 19016  1344  00AF               	movwf	setDimmerLights_SwOn@dimmingStatus
 19017                           
 19018                           ;Dimmer_B1.c: 762: DimmerLights_SelectPointer(sw);
 19019  1345  0830               	movf	setDimmerLights_SwOn@sw,w
 19020  1346  319A  229A  3193   	fcall	_DimmerLights_SelectPointer
 19021                           
 19022                           ;Dimmer_B1.c: 763: if (idle == 0) {
 19023  1349  0020               	movlb	0	; select bank0
 19024  134A  08AE               	movf	setDimmerLights_SwOn@idle,f
 19025  134B  1D03               	skipz
 19026  134C  0008               	return
 19027                           
 19028                           ;Dimmer_B1.c: 765: if (dimmingStatus == 0) {
 19029  134D  08AF               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19030  134E  1D03               	skipz
 19031  134F  2B72               	goto	l6271
 19032                           
 19033                           ;Dimmer_B1.c: 766: DimmerLights->SwFlag = 1;
 19034  1350  0021               	movlb	1	; select bank1
 19035  1351  084C               	movf	_DimmerLights^(0+128),w
 19036  1352  0086               	movwf	6
 19037  1353  3001               	movlw	1	; select bank2/3
 19038  1354  0087               	movwf	7
 19039  1355  1401               	bsf	1,0
 19040                           
 19041                           ;Dimmer_B1.c: 767: if (DimmerLights->Status == 0) {
 19042  1356  0A4C               	incf	_DimmerLights^(0+128),w
 19043  1357  0086               	movwf	6
 19044  1358  3001               	movlw	1	; select bank2/3
 19045  1359  0087               	movwf	7
 19046  135A  1801               	btfsc	1,0
 19047  135B  2B6C               	goto	l6269
 19048                           
 19049                           ;Dimmer_B1.c: 768: DimmerLights->Status = 1;
 19050  135C  0A4C               	incf	_DimmerLights^(0+128),w
 19051  135D  0086               	movwf	6
 19052  135E  3001               	movlw	1	; select bank2/3
 19053  135F  0087               	movwf	7
 19054  1360  1401               	bsf	1,0
 19055                           
 19056                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 19057  1361  084C               	movf	_DimmerLights^(0+128),w
 19058  1362  0086               	movwf	6
 19059  1363  3001               	movlw	1	; select bank2/3
 19060  1364  0087               	movwf	7
 19061  1365  1481               	bsf	1,1
 19062                           
 19063                           ;Dimmer_B1.c: 770: DimmerLights->Switch = 1;
 19064  1366  084C               	movf	_DimmerLights^(0+128),w
 19065  1367  0086               	movwf	6
 19066  1368  3001               	movlw	1	; select bank2/3
 19067  1369  0087               	movwf	7
 19068  136A  1501               	bsf	1,2
 19069                           
 19070                           ;Dimmer_B1.c: 771: } else {
 19071  136B  2B7D               	goto	l6273
 19072  136C                     l6269:	
 19073                           
 19074                           ;Dimmer_B1.c: 772: DimmerLights->Status = 0;
 19075  136C  0A4C               	incf	_DimmerLights^(0+128),w
 19076  136D  0086               	movwf	6
 19077  136E  3001               	movlw	1	; select bank2/3
 19078  136F  0087               	movwf	7
 19079  1370  1001               	bcf	1,0
 19080                           
 19081                           ;Dimmer_B1.c: 773: }
 19082                           ;Dimmer_B1.c: 774: } else {
 19083  1371  2B7D               	goto	l6273
 19084  1372                     l6271:	
 19085                           
 19086                           ;Dimmer_B1.c: 775: DimmerLights->DimmingTrigger = 1;
 19087  1372  0021               	movlb	1	; select bank1
 19088  1373  084C               	movf	_DimmerLights^(0+128),w
 19089  1374  0086               	movwf	6
 19090  1375  3001               	movlw	1	; select bank2/3
 19091  1376  0087               	movwf	7
 19092  1377  1601               	bsf	1,4
 19093                           
 19094                           ;Dimmer_B1.c: 776: DimmerLights->DimmingSwitch = 0;
 19095  1378  084C               	movf	_DimmerLights^(0+128),w
 19096  1379  0086               	movwf	6
 19097  137A  3001               	movlw	1	; select bank2/3
 19098  137B  0087               	movwf	7
 19099  137C  1281               	bcf	1,5
 19100  137D                     l6273:	
 19101                           
 19102                           ;Dimmer_B1.c: 777: }
 19103                           ;Dimmer_B1.c: 778: setBuz(1, 100);
 19104  137D  3064               	movlw	100
 19105  137E  0020               	movlb	0	; select bank0
 19106  137F  00A9               	movwf	setBuz@time
 19107  1380  3000               	movlw	0
 19108  1381  00AA               	movwf	setBuz@time+1
 19109  1382  3001               	movlw	1
 19110  1383  3194  242E         	fcall	_setBuz
 19111  1385  0008               	return
 19112  1386                     __end_of_setDimmerLights_SwOn:	
 19113                           
 19114                           	psect	text134
 19115  142E                     __ptext134:	
 19116 ;; *************** function _setBuz *****************
 19117 ;; Defined at:
 19118 ;;		line 22 in file "../src/Buzzer_B1.c"
 19119 ;; Parameters:    Size  Location     Type
 19120 ;;  count           1    wreg     unsigned char 
 19121 ;;  time            2    9[BANK0 ] int 
 19122 ;; Auto vars:     Size  Location     Type
 19123 ;;  count           1   12[BANK0 ] unsigned char 
 19124 ;; Return value:  Size  Location     Type
 19125 ;;		None               void
 19126 ;; Registers used:
 19127 ;;		wreg, status,2, status,0, pclath, cstack
 19128 ;; Tracked objects:
 19129 ;;		On entry : 0/0
 19130 ;;		On exit  : 0/0
 19131 ;;		Unchanged: 0/0
 19132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19136 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19137 ;;Total ram usage:        4 bytes
 19138 ;; Hardware stack levels used:    1
 19139 ;; Hardware stack levels required when called:    6
 19140 ;; This function calls:
 19141 ;;		___awdiv
 19142 ;; This function is called by:
 19143 ;;		_setDimmerLights_SwOn
 19144 ;;		_setDimmerLights_Dimming
 19145 ;;		_my_MainTimer
 19146 ;;		_Exception_Main
 19147 ;;		_setTemp_Main
 19148 ;;		_setLog_Code
 19149 ;;		_setRFSW_Control
 19150 ;;		_setSw_Main
 19151 ;; This function uses a non-reentrant model
 19152 ;;
 19153                           
 19154                           
 19155                           ;psect for function _setBuz
 19156  142E                     _setBuz:	
 19157                           
 19158                           ;incstack = 0
 19159                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 19160                           ;setBuz@count stored from wreg
 19161  142E  0020               	movlb	0	; select bank0
 19162  142F  00AC               	movwf	setBuz@count
 19163                           
 19164                           ;Buzzer_B1.c: 23: time /= 20;
 19165  1430  3014               	movlw	20
 19166  1431  00A0               	movwf	___awdiv@divisor
 19167  1432  3000               	movlw	0
 19168  1433  00A1               	movwf	___awdiv@divisor+1
 19169  1434  082A               	movf	setBuz@time+1,w
 19170  1435  01A3               	clrf	___awdiv@dividend+1
 19171  1436  07A3               	addwf	___awdiv@dividend+1,f
 19172  1437  0829               	movf	setBuz@time,w
 19173  1438  01A2               	clrf	___awdiv@dividend
 19174  1439  07A2               	addwf	___awdiv@dividend,f
 19175  143A  3193  2386  3194   	fcall	___awdiv
 19176  143D  0020               	movlb	0	; select bank0
 19177  143E  0821               	movf	?___awdiv+1,w
 19178  143F  01AA               	clrf	setBuz@time+1
 19179  1440  07AA               	addwf	setBuz@time+1,f
 19180  1441  0820               	movf	?___awdiv,w
 19181  1442  01A9               	clrf	setBuz@time
 19182  1443  07A9               	addwf	setBuz@time,f
 19183                           
 19184                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 19185  1444  0022               	movlb	2	; select bank2
 19186  1445  1C20               	btfss	_Buz1^(0+256),0
 19187  1446  0008               	return
 19188                           
 19189                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 19190  1447  18A0               	btfsc	_Buz1^(0+256),1
 19191  1448  2C5F               	goto	l86
 19192                           
 19193                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 19194  1449  14A0               	bsf	_Buz1^(0+256),1
 19195                           
 19196                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 19197  144A  01A1               	clrf	(_Buz1^(0+256)+1)
 19198  144B  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19199                           
 19200                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 19201  144C  0020               	movlb	0	; select bank0
 19202  144D  082C               	movf	setBuz@count,w
 19203  144E  00AB               	movwf	??_setBuz
 19204  144F  082B               	movf	??_setBuz,w
 19205  1450  0022               	movlb	2	; select bank2
 19206  1451  00A3               	movwf	(_Buz1^(0+256)+3)
 19207                           
 19208                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 19209  1452  0020               	movlb	0	; select bank0
 19210  1453  082A               	movf	setBuz@time+1,w
 19211  1454  0022               	movlb	2	; select bank2
 19212  1455  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19213  1456  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19214  1457  0020               	movlb	0	; select bank0
 19215  1458  0829               	movf	setBuz@time,w
 19216  1459  0022               	movlb	2	; select bank2
 19217  145A  01A6               	clrf	(_Buz1^(0+256)+6)
 19218  145B  07A6               	addwf	(_Buz1^(0+256)+6),f
 19219                           
 19220                           ;Buzzer_B1.c: 30: RB3 = 1;
 19221  145C  0020               	movlb	0	; select bank0
 19222  145D  158D               	bsf	13,3	;volatile
 19223                           
 19224                           ;Buzzer_B1.c: 31: } else {
 19225  145E  0008               	return
 19226  145F                     l86:	
 19227                           
 19228                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 19229  145F  19A0               	btfsc	_Buz1^(0+256),3
 19230  1460  2C73               	goto	l88
 19231                           
 19232                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19233  1461  15A0               	bsf	_Buz1^(0+256),3
 19234                           
 19235                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19236  1462  0020               	movlb	0	; select bank0
 19237  1463  082C               	movf	setBuz@count,w
 19238  1464  00AB               	movwf	??_setBuz
 19239  1465  082B               	movf	??_setBuz,w
 19240  1466  0022               	movlb	2	; select bank2
 19241  1467  00A4               	movwf	(_Buz1^(0+256)+4)
 19242                           
 19243                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19244  1468  0020               	movlb	0	; select bank0
 19245  1469  082A               	movf	setBuz@time+1,w
 19246  146A  0022               	movlb	2	; select bank2
 19247  146B  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19248  146C  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19249  146D  0020               	movlb	0	; select bank0
 19250  146E  0829               	movf	setBuz@time,w
 19251  146F  0022               	movlb	2	; select bank2
 19252  1470  01A8               	clrf	(_Buz1^(0+256)+8)
 19253  1471  07A8               	addwf	(_Buz1^(0+256)+8),f
 19254                           
 19255                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19256  1472  0008               	return
 19257  1473                     l88:	
 19258  1473  1A20               	btfsc	_Buz1^(0+256),4
 19259  1474  0008               	return
 19260                           
 19261                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19262  1475  1620               	bsf	_Buz1^(0+256),4
 19263                           
 19264                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19265  1476  0020               	movlb	0	; select bank0
 19266  1477  082C               	movf	setBuz@count,w
 19267  1478  00AB               	movwf	??_setBuz
 19268  1479  082B               	movf	??_setBuz,w
 19269  147A  0022               	movlb	2	; select bank2
 19270  147B  00A5               	movwf	(_Buz1^(0+256)+5)
 19271                           
 19272                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19273  147C  0020               	movlb	0	; select bank0
 19274  147D  082A               	movf	setBuz@time+1,w
 19275  147E  0022               	movlb	2	; select bank2
 19276  147F  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19277  1480  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19278  1481  0020               	movlb	0	; select bank0
 19279  1482  0829               	movf	setBuz@time,w
 19280  1483  0022               	movlb	2	; select bank2
 19281  1484  01AA               	clrf	(_Buz1^(0+256)+10)
 19282  1485  07AA               	addwf	(_Buz1^(0+256)+10),f
 19283  1486  0008               	return
 19284  1487                     __end_of_setBuz:	
 19285                           
 19286                           	psect	text135
 19287  1386                     __ptext135:	
 19288 ;; *************** function ___awdiv *****************
 19289 ;; Defined at:
 19290 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19291 ;; Parameters:    Size  Location     Type
 19292 ;;  divisor         2    0[BANK0 ] int 
 19293 ;;  dividend        2    2[BANK0 ] int 
 19294 ;; Auto vars:     Size  Location     Type
 19295 ;;  quotient        2    7[BANK0 ] int 
 19296 ;;  sign            1    6[BANK0 ] unsigned char 
 19297 ;;  counter         1    5[BANK0 ] unsigned char 
 19298 ;; Return value:  Size  Location     Type
 19299 ;;                  2    0[BANK0 ] int 
 19300 ;; Registers used:
 19301 ;;		wreg, status,2, status,0
 19302 ;; Tracked objects:
 19303 ;;		On entry : 0/0
 19304 ;;		On exit  : 0/0
 19305 ;;		Unchanged: 0/0
 19306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19307 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19308 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19311 ;;Total ram usage:        9 bytes
 19312 ;; Hardware stack levels used:    1
 19313 ;; Hardware stack levels required when called:    5
 19314 ;; This function calls:
 19315 ;;		Nothing
 19316 ;; This function is called by:
 19317 ;;		_setBuz
 19318 ;; This function uses a non-reentrant model
 19319 ;;
 19320                           
 19321                           
 19322                           ;psect for function ___awdiv
 19323  1386                     ___awdiv:	
 19324                           
 19325                           ;incstack = 0
 19326                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19327  1386  0020               	movlb	0	; select bank0
 19328  1387  01A6               	clrf	___awdiv@sign
 19329  1388  1FA1               	btfss	___awdiv@divisor+1,7
 19330  1389  2B91               	goto	l5895
 19331  138A  09A0               	comf	___awdiv@divisor,f
 19332  138B  09A1               	comf	___awdiv@divisor+1,f
 19333  138C  0AA0               	incf	___awdiv@divisor,f
 19334  138D  1903               	skipnz
 19335  138E  0AA1               	incf	___awdiv@divisor+1,f
 19336  138F  01A6               	clrf	___awdiv@sign
 19337  1390  0AA6               	incf	___awdiv@sign,f
 19338  1391                     l5895:	
 19339  1391  1FA3               	btfss	___awdiv@dividend+1,7
 19340  1392  2B9C               	goto	l5901
 19341  1393  09A2               	comf	___awdiv@dividend,f
 19342  1394  09A3               	comf	___awdiv@dividend+1,f
 19343  1395  0AA2               	incf	___awdiv@dividend,f
 19344  1396  1903               	skipnz
 19345  1397  0AA3               	incf	___awdiv@dividend+1,f
 19346  1398  3001               	movlw	1
 19347  1399  00A4               	movwf	??___awdiv
 19348  139A  0824               	movf	??___awdiv,w
 19349  139B  06A6               	xorwf	___awdiv@sign,f
 19350  139C                     l5901:	
 19351  139C  01A7               	clrf	___awdiv@quotient
 19352  139D  01A8               	clrf	___awdiv@quotient+1
 19353  139E  0821               	movf	___awdiv@divisor+1,w
 19354  139F  0420               	iorwf	___awdiv@divisor,w
 19355  13A0  1903               	skipnz
 19356  13A1  2BCB               	goto	l5923
 19357  13A2  01A5               	clrf	___awdiv@counter
 19358  13A3  0AA5               	incf	___awdiv@counter,f
 19359  13A4                     l5911:	
 19360  13A4  1BA1               	btfsc	___awdiv@divisor+1,7
 19361  13A5  2BB0               	goto	l5913
 19362  13A6  3001               	movlw	1
 19363  13A7                     u4595:	
 19364  13A7  35A0               	lslf	___awdiv@divisor,f
 19365  13A8  0DA1               	rlf	___awdiv@divisor+1,f
 19366  13A9  0B89               	decfsz	9,f
 19367  13AA  2BA7               	goto	u4595
 19368  13AB  3001               	movlw	1
 19369  13AC  00A4               	movwf	??___awdiv
 19370  13AD  0824               	movf	??___awdiv,w
 19371  13AE  07A5               	addwf	___awdiv@counter,f
 19372  13AF  2BA4               	goto	l5911
 19373  13B0                     l5913:	
 19374  13B0  3001               	movlw	1
 19375  13B1                     u4615:	
 19376  13B1  35A7               	lslf	___awdiv@quotient,f
 19377  13B2  0DA8               	rlf	___awdiv@quotient+1,f
 19378  13B3  0B89               	decfsz	9,f
 19379  13B4  2BB1               	goto	u4615
 19380  13B5  0821               	movf	___awdiv@divisor+1,w
 19381  13B6  0223               	subwf	___awdiv@dividend+1,w
 19382  13B7  1D03               	skipz
 19383  13B8  2BBB               	goto	u4625
 19384  13B9  0820               	movf	___awdiv@divisor,w
 19385  13BA  0222               	subwf	___awdiv@dividend,w
 19386  13BB                     u4625:	
 19387  13BB  1C03               	skipc
 19388  13BC  2BC2               	goto	l5919
 19389  13BD  0820               	movf	___awdiv@divisor,w
 19390  13BE  02A2               	subwf	___awdiv@dividend,f
 19391  13BF  0821               	movf	___awdiv@divisor+1,w
 19392  13C0  3BA3               	subwfb	___awdiv@dividend+1,f
 19393  13C1  1427               	bsf	___awdiv@quotient,0
 19394  13C2                     l5919:	
 19395  13C2  3001               	movlw	1
 19396  13C3                     u4635:	
 19397  13C3  36A1               	lsrf	___awdiv@divisor+1,f
 19398  13C4  0CA0               	rrf	___awdiv@divisor,f
 19399  13C5  0B89               	decfsz	9,f
 19400  13C6  2BC3               	goto	u4635
 19401  13C7  3001               	movlw	1
 19402  13C8  02A5               	subwf	___awdiv@counter,f
 19403  13C9  1D03               	btfss	3,2
 19404  13CA  2BB0               	goto	l5913
 19405  13CB                     l5923:	
 19406  13CB  0826               	movf	___awdiv@sign,w
 19407  13CC  1903               	btfsc	3,2
 19408  13CD  2BD3               	goto	l5927
 19409  13CE  09A7               	comf	___awdiv@quotient,f
 19410  13CF  09A8               	comf	___awdiv@quotient+1,f
 19411  13D0  0AA7               	incf	___awdiv@quotient,f
 19412  13D1  1903               	skipnz
 19413  13D2  0AA8               	incf	___awdiv@quotient+1,f
 19414  13D3                     l5927:	
 19415  13D3  0828               	movf	___awdiv@quotient+1,w
 19416  13D4  01A1               	clrf	?___awdiv+1
 19417  13D5  07A1               	addwf	?___awdiv+1,f
 19418  13D6  0827               	movf	___awdiv@quotient,w
 19419  13D7  01A0               	clrf	?___awdiv
 19420  13D8  07A0               	addwf	?___awdiv,f
 19421  13D9  0008               	return
 19422  13DA                     __end_of___awdiv:	
 19423                           
 19424                           	psect	text136
 19425  12AD                     __ptext136:	
 19426 ;; *************** function _setDimmerLights_SwOff *****************
 19427 ;; Defined at:
 19428 ;;		line 783 in file "../src/Dimmer_B1.c"
 19429 ;; Parameters:    Size  Location     Type
 19430 ;;  sw              1    wreg     unsigned char 
 19431 ;; Auto vars:     Size  Location     Type
 19432 ;;  sw              1    4[BANK0 ] unsigned char 
 19433 ;;  dimmingStatu    1    3[BANK0 ] unsigned char 
 19434 ;; Return value:  Size  Location     Type
 19435 ;;		None               void
 19436 ;; Registers used:
 19437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19438 ;; Tracked objects:
 19439 ;;		On entry : 0/0
 19440 ;;		On exit  : 0/0
 19441 ;;		Unchanged: 0/0
 19442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19446 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;Total ram usage:        3 bytes
 19448 ;; Hardware stack levels used:    1
 19449 ;; Hardware stack levels required when called:    6
 19450 ;; This function calls:
 19451 ;;		_DimmerLights_SelectPointer
 19452 ;;		_getDimmerIntr_Dimming_Sw
 19453 ;; This function is called by:
 19454 ;;		_DlyOff_Main
 19455 ;;		_Exception_Main
 19456 ;;		_setControl_Lights_Table
 19457 ;;		_setRFSW_Control
 19458 ;;		_setRFSW_AdjControl
 19459 ;;		_setSw_Main
 19460 ;; This function uses a non-reentrant model
 19461 ;;
 19462                           
 19463                           
 19464                           ;psect for function _setDimmerLights_SwOff
 19465  12AD                     _setDimmerLights_SwOff:	
 19466                           
 19467                           ;incstack = 0
 19468                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19469                           ;setDimmerLights_SwOff@sw stored from wreg
 19470  12AD  0020               	movlb	0	; select bank0
 19471  12AE  00A4               	movwf	setDimmerLights_SwOff@sw
 19472                           
 19473                           ;Dimmer_B1.c: 786: char dimmingStatus = 0;
 19474  12AF  01A3               	clrf	setDimmerLights_SwOff@dimmingStatus
 19475                           
 19476                           ;Dimmer_B1.c: 787: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19477  12B0  0824               	movf	setDimmerLights_SwOff@sw,w
 19478  12B1  319B  232B  3192   	fcall	_getDimmerIntr_Dimming_Sw
 19479  12B4  0020               	movlb	0	; select bank0
 19480  12B5  00A2               	movwf	??_setDimmerLights_SwOff
 19481  12B6  0822               	movf	??_setDimmerLights_SwOff,w
 19482  12B7  00A3               	movwf	setDimmerLights_SwOff@dimmingStatus
 19483                           
 19484                           ;Dimmer_B1.c: 790: DimmerLights_SelectPointer(sw);
 19485  12B8  0824               	movf	setDimmerLights_SwOff@sw,w
 19486  12B9  319A  229A  3192   	fcall	_DimmerLights_SelectPointer
 19487                           
 19488                           ;Dimmer_B1.c: 792: if (dimmingStatus == 0) {
 19489  12BC  0020               	movlb	0	; select bank0
 19490  12BD  08A3               	movf	setDimmerLights_SwOff@dimmingStatus,f
 19491  12BE  1D03               	skipz
 19492  12BF  0008               	return
 19493                           
 19494                           ;Dimmer_B1.c: 793: if (DimmerLights->SwFlag == 1) {
 19495  12C0  0021               	movlb	1	; select bank1
 19496  12C1  084C               	movf	_DimmerLights^(0+128),w
 19497  12C2  0086               	movwf	6
 19498  12C3  3001               	movlw	1	; select bank2/3
 19499  12C4  0087               	movwf	7
 19500  12C5  1C01               	btfss	1,0
 19501  12C6  0008               	return
 19502                           
 19503                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 0;
 19504  12C7  084C               	movf	_DimmerLights^(0+128),w
 19505  12C8  0086               	movwf	6
 19506  12C9  3001               	movlw	1	; select bank2/3
 19507  12CA  0087               	movwf	7
 19508  12CB  1001               	bcf	1,0
 19509                           
 19510                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 1) {
 19511  12CC  0A4C               	incf	_DimmerLights^(0+128),w
 19512  12CD  0086               	movwf	6
 19513  12CE  3001               	movlw	1	; select bank2/3
 19514  12CF  0087               	movwf	7
 19515  12D0  1C01               	btfss	1,0
 19516  12D1  2AE8               	goto	l6289
 19517                           
 19518                           ;Dimmer_B1.c: 796: if (DimmerLights->DimmingSwFlag == 1) {
 19519  12D2  084C               	movf	_DimmerLights^(0+128),w
 19520  12D3  0086               	movwf	6
 19521  12D4  3001               	movlw	1	; select bank2/3
 19522  12D5  0087               	movwf	7
 19523  12D6  1D81               	btfss	1,3
 19524  12D7  0008               	return
 19525                           
 19526                           ;Dimmer_B1.c: 797: DimmerLights->DimmingSwFlag = 0;
 19527  12D8  084C               	movf	_DimmerLights^(0+128),w
 19528  12D9  0086               	movwf	6
 19529  12DA  3001               	movlw	1	; select bank2/3
 19530  12DB  0087               	movwf	7
 19531  12DC  1181               	bcf	1,3
 19532                           
 19533                           ;Dimmer_B1.c: 799: DimmerLights->DimmingTrigger = 1;
 19534  12DD  084C               	movf	_DimmerLights^(0+128),w
 19535  12DE  0086               	movwf	6
 19536  12DF  3001               	movlw	1	; select bank2/3
 19537  12E0  0087               	movwf	7
 19538  12E1  1601               	bsf	1,4
 19539                           
 19540                           ;Dimmer_B1.c: 800: DimmerLights->DimmingSwitch = 0;
 19541  12E2  084C               	movf	_DimmerLights^(0+128),w
 19542  12E3  0086               	movwf	6
 19543  12E4  3001               	movlw	1	; select bank2/3
 19544  12E5  0087               	movwf	7
 19545  12E6  1281               	bcf	1,5
 19546                           
 19547                           ;Dimmer_B1.c: 801: }
 19548                           ;Dimmer_B1.c: 802: } else {
 19549  12E7  0008               	return
 19550  12E8                     l6289:	
 19551                           
 19552                           ;Dimmer_B1.c: 803: DimmerLights->Trigger = 1;
 19553  12E8  084C               	movf	_DimmerLights^(0+128),w
 19554  12E9  0086               	movwf	6
 19555  12EA  3001               	movlw	1	; select bank2/3
 19556  12EB  0087               	movwf	7
 19557  12EC  1481               	bsf	1,1
 19558                           
 19559                           ;Dimmer_B1.c: 804: DimmerLights->Switch = 0;
 19560  12ED  084C               	movf	_DimmerLights^(0+128),w
 19561  12EE  0086               	movwf	6
 19562  12EF  3001               	movlw	1	; select bank2/3
 19563  12F0  0087               	movwf	7
 19564  12F1  1101               	bcf	1,2
 19565  12F2  0008               	return
 19566  12F3                     __end_of_setDimmerLights_SwOff:	
 19567                           
 19568                           	psect	text137
 19569  1B2B                     __ptext137:	
 19570 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 19571 ;; Defined at:
 19572 ;;		line 241 in file "../src/Dimmer_B1.c"
 19573 ;; Parameters:    Size  Location     Type
 19574 ;;  lights          1    wreg     unsigned char 
 19575 ;; Auto vars:     Size  Location     Type
 19576 ;;  lights          1    0[BANK0 ] unsigned char 
 19577 ;;  status          1    1[BANK0 ] unsigned char 
 19578 ;; Return value:  Size  Location     Type
 19579 ;;                  1    wreg      unsigned char 
 19580 ;; Registers used:
 19581 ;;		wreg, status,2
 19582 ;; Tracked objects:
 19583 ;;		On entry : 0/0
 19584 ;;		On exit  : 0/0
 19585 ;;		Unchanged: 0/0
 19586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19591 ;;Total ram usage:        2 bytes
 19592 ;; Hardware stack levels used:    1
 19593 ;; Hardware stack levels required when called:    5
 19594 ;; This function calls:
 19595 ;;		Nothing
 19596 ;; This function is called by:
 19597 ;;		_setDimmerLights_SwOn
 19598 ;;		_setDimmerLights_SwOff
 19599 ;;		_setRF_AdjControl
 19600 ;; This function uses a non-reentrant model
 19601 ;;
 19602                           
 19603                           
 19604                           ;psect for function _getDimmerIntr_Dimming_Sw
 19605  1B2B                     _getDimmerIntr_Dimming_Sw:	
 19606                           
 19607                           ;incstack = 0
 19608                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 19609                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 19610  1B2B  0020               	movlb	0	; select bank0
 19611  1B2C  00A0               	movwf	getDimmerIntr_Dimming_Sw@lights
 19612                           
 19613                           ;Dimmer_B1.c: 242: char status = 0;
 19614  1B2D  01A1               	clrf	getDimmerIntr_Dimming_Sw@status
 19615                           
 19616                           ;Dimmer_B1.c: 244: if (lights == 1) {
 19617  1B2E  0820               	movf	getDimmerIntr_Dimming_Sw@lights,w
 19618  1B2F  3A01               	xorlw	1
 19619  1B30  1D03               	skipz
 19620  1B31  2B38               	goto	l5971
 19621                           
 19622                           ;Dimmer_B1.c: 245: status=DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 19623  1B32  3000               	movlw	0
 19624  1B33  0021               	movlb	1	; select bank1
 19625  1B34  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 19626  1B35  3001               	movlw	1
 19627  1B36  0020               	movlb	0	; select bank0
 19628  1B37  00A1               	movwf	getDimmerIntr_Dimming_Sw@status
 19629  1B38                     l5971:	
 19630                           
 19631                           ;Dimmer_B1.c: 246: }
 19632                           ;Dimmer_B1.c: 259: return status;
 19633  1B38  0821               	movf	getDimmerIntr_Dimming_Sw@status,w
 19634  1B39  0008               	return
 19635  1B3A                     __end_of_getDimmerIntr_Dimming_Sw:	
 19636                           
 19637                           	psect	text138
 19638  1B77                     __ptext138:	
 19639 ;; *************** function _getDimmerLights_Status *****************
 19640 ;; Defined at:
 19641 ;;		line 1141 in file "../src/Dimmer_B1.c"
 19642 ;; Parameters:    Size  Location     Type
 19643 ;;  lights          1    wreg     unsigned char 
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;  lights          1    2[BANK0 ] unsigned char 
 19646 ;;  status          1    3[BANK0 ] unsigned char 
 19647 ;; Return value:  Size  Location     Type
 19648 ;;                  1    wreg      unsigned char 
 19649 ;; Registers used:
 19650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19651 ;; Tracked objects:
 19652 ;;		On entry : 0/0
 19653 ;;		On exit  : 0/0
 19654 ;;		Unchanged: 0/0
 19655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19660 ;;Total ram usage:        2 bytes
 19661 ;; Hardware stack levels used:    1
 19662 ;; Hardware stack levels required when called:    6
 19663 ;; This function calls:
 19664 ;;		_DimmerLights_SelectPointer
 19665 ;; This function is called by:
 19666 ;;		_DlyOff_Main
 19667 ;;		_Exception_Main
 19668 ;;		_setControl_Lights_Table
 19669 ;;		_setRFSW_Control
 19670 ;;		_setRFSW_AdjControl
 19671 ;;		_setRF_AdjControl
 19672 ;; This function uses a non-reentrant model
 19673 ;;
 19674                           
 19675                           
 19676                           ;psect for function _getDimmerLights_Status
 19677  1B77                     _getDimmerLights_Status:	
 19678                           
 19679                           ;incstack = 0
 19680                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19681                           ;getDimmerLights_Status@lights stored from wreg
 19682  1B77  0020               	movlb	0	; select bank0
 19683  1B78  00A2               	movwf	getDimmerLights_Status@lights
 19684                           
 19685                           ;Dimmer_B1.c: 1142: DimmerLights_SelectPointer(lights);
 19686  1B79  0822               	movf	getDimmerLights_Status@lights,w
 19687  1B7A  319A  229A         	fcall	_DimmerLights_SelectPointer
 19688                           
 19689                           ;Dimmer_B1.c: 1143: char status = DimmerLights->Status == 1 ? 1 : 0;
 19690  1B7C  0021               	movlb	1	; select bank1
 19691  1B7D  0A4C               	incf	_DimmerLights^(0+128),w
 19692  1B7E  0086               	movwf	6
 19693  1B7F  3001               	movlw	1	; select bank2/3
 19694  1B80  0087               	movwf	7
 19695  1B81  3000               	movlw	0
 19696  1B82  1801               	btfsc	1,0
 19697  1B83  3001               	movlw	1
 19698  1B84  0020               	movlb	0	; select bank0
 19699  1B85  00A3               	movwf	getDimmerLights_Status@status
 19700                           
 19701                           ;Dimmer_B1.c: 1144: return status;
 19702  1B86  0823               	movf	getDimmerLights_Status@status,w
 19703  1B87  0008               	return
 19704  1B88                     __end_of_getDimmerLights_Status:	
 19705                           
 19706                           	psect	text139
 19707  1A9A                     __ptext139:	
 19708 ;; *************** function _DimmerLights_SelectPointer *****************
 19709 ;; Defined at:
 19710 ;;		line 654 in file "../src/Dimmer_B1.c"
 19711 ;; Parameters:    Size  Location     Type
 19712 ;;  lights          1    wreg     unsigned char 
 19713 ;; Auto vars:     Size  Location     Type
 19714 ;;  lights          1    1[BANK0 ] unsigned char 
 19715 ;; Return value:  Size  Location     Type
 19716 ;;		None               void
 19717 ;; Registers used:
 19718 ;;		wreg
 19719 ;; Tracked objects:
 19720 ;;		On entry : 0/0
 19721 ;;		On exit  : 0/0
 19722 ;;		Unchanged: 0/0
 19723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;Total ram usage:        2 bytes
 19729 ;; Hardware stack levels used:    1
 19730 ;; Hardware stack levels required when called:    5
 19731 ;; This function calls:
 19732 ;;		Nothing
 19733 ;; This function is called by:
 19734 ;;		_setDimmerLights_SwOn
 19735 ;;		_setDimmerLights_SwOff
 19736 ;;		_setDimmerLights_DimmingOn
 19737 ;;		_setDimmerLights_Main
 19738 ;;		_getDimmerLights_Status
 19739 ;;		_setDimmerLights_DimmingRun
 19740 ;;		_setRF_AdjControl
 19741 ;;		_setDimmerLights_Status
 19742 ;; This function uses a non-reentrant model
 19743 ;;
 19744                           
 19745                           
 19746                           ;psect for function _DimmerLights_SelectPointer
 19747  1A9A                     _DimmerLights_SelectPointer:	
 19748                           
 19749                           ;incstack = 0
 19750                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19751                           ;DimmerLights_SelectPointer@lights stored from wreg
 19752  1A9A  0020               	movlb	0	; select bank0
 19753  1A9B  00A1               	movwf	DimmerLights_SelectPointer@lights
 19754                           
 19755                           ;Dimmer_B1.c: 656: if (lights == 1) {
 19756  1A9C  0821               	movf	DimmerLights_SelectPointer@lights,w
 19757  1A9D  3A01               	xorlw	1
 19758  1A9E  1D03               	skipz
 19759  1A9F  0008               	return
 19760                           
 19761                           ;Dimmer_B1.c: 657: DimmerLights = &DimmerLights1;
 19762  1AA0  3061               	movlw	_DimmerLights1& (0+255)
 19763  1AA1  00A0               	movwf	??_DimmerLights_SelectPointer
 19764  1AA2  0820               	movf	??_DimmerLights_SelectPointer,w
 19765  1AA3  0021               	movlb	1	; select bank1
 19766  1AA4  00CC               	movwf	_DimmerLights^(0+128)
 19767  1AA5  0008               	return
 19768  1AA6                     __end_of_DimmerLights_SelectPointer:	
 19769                           
 19770                           	psect	text140
 19771  19CB                     __ptext140:	
 19772 ;; *************** function _DelayOff_Initialization *****************
 19773 ;; Defined at:
 19774 ;;		line 26 in file "../src/DelayOff_B1.c"
 19775 ;; Parameters:    Size  Location     Type
 19776 ;;		None
 19777 ;; Auto vars:     Size  Location     Type
 19778 ;;		None
 19779 ;; Return value:  Size  Location     Type
 19780 ;;		None               void
 19781 ;; Registers used:
 19782 ;;		wreg, status,2, status,0, pclath, cstack
 19783 ;; Tracked objects:
 19784 ;;		On entry : 0/0
 19785 ;;		On exit  : 0/0
 19786 ;;		Unchanged: 0/0
 19787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19792 ;;Total ram usage:        0 bytes
 19793 ;; Hardware stack levels used:    1
 19794 ;; Hardware stack levels required when called:    7
 19795 ;; This function calls:
 19796 ;;		_DlyOff_Initialization
 19797 ;; This function is called by:
 19798 ;;		_main
 19799 ;; This function uses a non-reentrant model
 19800 ;;
 19801                           
 19802                           
 19803                           ;psect for function _DelayOff_Initialization
 19804  19CB                     _DelayOff_Initialization:	
 19805                           
 19806                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19807                           
 19808                           ;incstack = 0
 19809                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19810  19CB  3001               	movlw	1
 19811  19CC  3199  21F8         	fcall	_DlyOff_Initialization
 19812  19CE  0008               	return
 19813  19CF                     __end_of_DelayOff_Initialization:	
 19814                           
 19815                           	psect	text141
 19816  19F8                     __ptext141:	
 19817 ;; *************** function _DlyOff_Initialization *****************
 19818 ;; Defined at:
 19819 ;;		line 56 in file "../src/DelayOff_B1.c"
 19820 ;; Parameters:    Size  Location     Type
 19821 ;;  sw              1    wreg     unsigned char 
 19822 ;; Auto vars:     Size  Location     Type
 19823 ;;  sw              1    2[BANK0 ] unsigned char 
 19824 ;; Return value:  Size  Location     Type
 19825 ;;		None               void
 19826 ;; Registers used:
 19827 ;;		wreg, status,2, status,0, pclath, cstack
 19828 ;; Tracked objects:
 19829 ;;		On entry : 0/0
 19830 ;;		On exit  : 0/0
 19831 ;;		Unchanged: 0/0
 19832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19836 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19837 ;;Total ram usage:        1 bytes
 19838 ;; Hardware stack levels used:    1
 19839 ;; Hardware stack levels required when called:    6
 19840 ;; This function calls:
 19841 ;;		_DelayOffPointSelect
 19842 ;; This function is called by:
 19843 ;;		_DelayOff_Initialization
 19844 ;; This function uses a non-reentrant model
 19845 ;;
 19846                           
 19847                           
 19848                           ;psect for function _DlyOff_Initialization
 19849  19F8                     _DlyOff_Initialization:	
 19850                           
 19851                           ;incstack = 0
 19852                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19853                           ;DlyOff_Initialization@sw stored from wreg
 19854  19F8  0020               	movlb	0	; select bank0
 19855  19F9  00A2               	movwf	DlyOff_Initialization@sw
 19856                           
 19857                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19858  19FA  0822               	movf	DlyOff_Initialization@sw,w
 19859  19FB  319A  228E         	fcall	_DelayOffPointSelect
 19860  19FD  0008               	return
 19861  19FE                     __end_of_DlyOff_Initialization:	
 19862                           
 19863                           	psect	text142
 19864  1A8E                     __ptext142:	
 19865 ;; *************** function _DelayOffPointSelect *****************
 19866 ;; Defined at:
 19867 ;;		line 7 in file "../src/DelayOff_B1.c"
 19868 ;; Parameters:    Size  Location     Type
 19869 ;;  sw              1    wreg     unsigned char 
 19870 ;; Auto vars:     Size  Location     Type
 19871 ;;  sw              1    1[BANK0 ] unsigned char 
 19872 ;; Return value:  Size  Location     Type
 19873 ;;		None               void
 19874 ;; Registers used:
 19875 ;;		wreg
 19876 ;; Tracked objects:
 19877 ;;		On entry : 0/0
 19878 ;;		On exit  : 0/0
 19879 ;;		Unchanged: 0/0
 19880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19885 ;;Total ram usage:        2 bytes
 19886 ;; Hardware stack levels used:    1
 19887 ;; Hardware stack levels required when called:    5
 19888 ;; This function calls:
 19889 ;;		Nothing
 19890 ;; This function is called by:
 19891 ;;		_DlyOff_Initialization
 19892 ;;		_DlyOff_Main
 19893 ;;		_setDelayOff_GO
 19894 ;;		_getDelayOff_GO
 19895 ;; This function uses a non-reentrant model
 19896 ;;
 19897                           
 19898                           
 19899                           ;psect for function _DelayOffPointSelect
 19900  1A8E                     _DelayOffPointSelect:	
 19901                           
 19902                           ;incstack = 0
 19903                           ; Regs used in _DelayOffPointSelect: [wreg]
 19904                           ;DelayOffPointSelect@sw stored from wreg
 19905  1A8E  0020               	movlb	0	; select bank0
 19906  1A8F  00A1               	movwf	DelayOffPointSelect@sw
 19907                           
 19908                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19909  1A90  0821               	movf	DelayOffPointSelect@sw,w
 19910  1A91  3A01               	xorlw	1
 19911  1A92  1D03               	skipz
 19912  1A93  0008               	return
 19913                           
 19914                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19915  1A94  30C7               	movlw	_DlySw1& (0+255)
 19916  1A95  00A0               	movwf	??_DelayOffPointSelect
 19917  1A96  0820               	movf	??_DelayOffPointSelect,w
 19918  1A97  0021               	movlb	1	; select bank1
 19919  1A98  00CA               	movwf	_DelayOff^(0+128)
 19920  1A99  0008               	return
 19921  1A9A                     __end_of_DelayOffPointSelect:	
 19922                           
 19923                           	psect	text143
 19924  0801                     __ptext143:	
 19925 ;; *************** function _Buzzer_Main *****************
 19926 ;; Defined at:
 19927 ;;		line 46 in file "../src/Buzzer_B1.c"
 19928 ;; Parameters:    Size  Location     Type
 19929 ;;		None
 19930 ;; Auto vars:     Size  Location     Type
 19931 ;;		None
 19932 ;; Return value:  Size  Location     Type
 19933 ;;		None               void
 19934 ;; Registers used:
 19935 ;;		wreg, status,2, status,0
 19936 ;; Tracked objects:
 19937 ;;		On entry : 0/0
 19938 ;;		On exit  : 0/0
 19939 ;;		Unchanged: 0/0
 19940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19945 ;;Total ram usage:        1 bytes
 19946 ;; Hardware stack levels used:    1
 19947 ;; Hardware stack levels required when called:    5
 19948 ;; This function calls:
 19949 ;;		Nothing
 19950 ;; This function is called by:
 19951 ;;		_main
 19952 ;; This function uses a non-reentrant model
 19953 ;;
 19954                           
 19955                           
 19956                           ;psect for function _Buzzer_Main
 19957  0801                     _Buzzer_Main:	
 19958                           
 19959                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19960                           
 19961                           ;incstack = 0
 19962                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19963  0801  0022               	movlb	2	; select bank2
 19964  0802  1CA0               	btfss	_Buz1^(0+256),1
 19965  0803  0008               	return
 19966                           
 19967                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19968  0804  3001               	movlw	1
 19969  0805  07A1               	addwf	(_Buz1^(0+256)+1),f
 19970  0806  3000               	movlw	0
 19971  0807  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19972                           
 19973                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19974  0808  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19975  0809  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19976  080A  1D03               	skipz
 19977  080B  280E               	goto	u7875
 19978  080C  0826               	movf	(_Buz1^(0+256)+6),w
 19979  080D  0221               	subwf	(_Buz1^(0+256)+1),w
 19980  080E                     u7875:	
 19981  080E  1C03               	skipc
 19982  080F  0008               	return
 19983                           
 19984                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19985  0810  01A1               	clrf	(_Buz1^(0+256)+1)
 19986  0811  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19987                           
 19988                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19989  0812  12A0               	bcf	_Buz1^(0+256),5
 19990  0813  0020               	movlb	0	; select bank0
 19991  0814  1D8D               	btfss	13,3	;volatile
 19992  0815  2818               	goto	l7951
 19993  0816  0022               	movlb	2	; select bank2
 19994  0817  16A0               	bsf	_Buz1^(0+256),5
 19995  0818                     l7951:	
 19996                           
 19997                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19998  0818  0022               	movlb	2	; select bank2
 19999  0819  1AA0               	btfsc	_Buz1^(0+256),5
 20000  081A  2844               	goto	l96
 20001                           
 20002                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 20003  081B  08A3               	movf	(_Buz1^(0+256)+3),f
 20004  081C  1D03               	skipz
 20005  081D  2840               	goto	l97
 20006                           
 20007                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 20008  081E  1DA0               	btfss	_Buz1^(0+256),3
 20009  081F  282E               	goto	l98
 20010                           
 20011                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 20012  0820  11A0               	bcf	_Buz1^(0+256),3
 20013                           
 20014                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 20015  0821  0824               	movf	(_Buz1^(0+256)+4),w
 20016  0822  0020               	movlb	0	; select bank0
 20017  0823  00A0               	movwf	??_Buzzer_Main
 20018  0824  0820               	movf	??_Buzzer_Main,w
 20019  0825  0022               	movlb	2	; select bank2
 20020  0826  00A3               	movwf	(_Buz1^(0+256)+3)
 20021                           
 20022                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20023  0827  0829               	movf	((_Buz1+1)^(0+256)+8),w
 20024  0828  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20025  0829  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20026  082A  0828               	movf	(_Buz1^(0+256)+8),w
 20027  082B  01A6               	clrf	(_Buz1^(0+256)+6)
 20028  082C  07A6               	addwf	(_Buz1^(0+256)+6),f
 20029                           
 20030                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20031  082D  0008               	return
 20032  082E                     l98:	
 20033  082E  1E20               	btfss	_Buz1^(0+256),4
 20034  082F  283E               	goto	l100
 20035                           
 20036                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 20037  0830  1220               	bcf	_Buz1^(0+256),4
 20038                           
 20039                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 20040  0831  0825               	movf	(_Buz1^(0+256)+5),w
 20041  0832  0020               	movlb	0	; select bank0
 20042  0833  00A0               	movwf	??_Buzzer_Main
 20043  0834  0820               	movf	??_Buzzer_Main,w
 20044  0835  0022               	movlb	2	; select bank2
 20045  0836  00A3               	movwf	(_Buz1^(0+256)+3)
 20046                           
 20047                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 20048  0837  082B               	movf	((_Buz1+1)^(0+256)+10),w
 20049  0838  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20050  0839  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20051  083A  082A               	movf	(_Buz1^(0+256)+10),w
 20052  083B  01A6               	clrf	(_Buz1^(0+256)+6)
 20053  083C  07A6               	addwf	(_Buz1^(0+256)+6),f
 20054                           
 20055                           ;Buzzer_B1.c: 62: } else {
 20056  083D  0008               	return
 20057  083E                     l100:	
 20058                           
 20059                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 20060  083E  10A0               	bcf	_Buz1^(0+256),1
 20061                           
 20062                           ;Buzzer_B1.c: 64: }
 20063                           ;Buzzer_B1.c: 65: } else {
 20064  083F  0008               	return
 20065  0840                     l97:	
 20066                           
 20067                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 20068  0840  16A0               	bsf	_Buz1^(0+256),5
 20069                           
 20070                           ;Buzzer_B1.c: 68: RB3 = 1;
 20071  0841  0020               	movlb	0	; select bank0
 20072  0842  158D               	bsf	13,3	;volatile
 20073                           
 20074                           ;Buzzer_B1.c: 69: }
 20075                           ;Buzzer_B1.c: 70: } else {
 20076  0843  0008               	return
 20077  0844                     l96:	
 20078                           
 20079                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 20080  0844  12A0               	bcf	_Buz1^(0+256),5
 20081                           
 20082                           ;Buzzer_B1.c: 73: RB3 = 0;
 20083  0845  0020               	movlb	0	; select bank0
 20084  0846  118D               	bcf	13,3	;volatile
 20085                           
 20086                           ;Buzzer_B1.c: 75: Buz1.Count--;
 20087  0847  3001               	movlw	1
 20088  0848  0022               	movlb	2	; select bank2
 20089  0849  02A3               	subwf	(_Buz1^(0+256)+3),f
 20090  084A  0008               	return
 20091  084B                     __end_of_Buzzer_Main:	
 20092                           
 20093                           	psect	text144
 20094  19B9                     __ptext144:	
 20095 ;; *************** function _Buzzer_Initialization *****************
 20096 ;; Defined at:
 20097 ;;		line 11 in file "../src/Buzzer_B1.c"
 20098 ;; Parameters:    Size  Location     Type
 20099 ;;		None
 20100 ;; Auto vars:     Size  Location     Type
 20101 ;;		None
 20102 ;; Return value:  Size  Location     Type
 20103 ;;		None               void
 20104 ;; Registers used:
 20105 ;;		None
 20106 ;; Tracked objects:
 20107 ;;		On entry : 0/0
 20108 ;;		On exit  : 0/0
 20109 ;;		Unchanged: 0/0
 20110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20115 ;;Total ram usage:        0 bytes
 20116 ;; Hardware stack levels used:    1
 20117 ;; Hardware stack levels required when called:    5
 20118 ;; This function calls:
 20119 ;;		Nothing
 20120 ;; This function is called by:
 20121 ;;		_main
 20122 ;; This function uses a non-reentrant model
 20123 ;;
 20124                           
 20125                           
 20126                           ;psect for function _Buzzer_Initialization
 20127  19B9                     _Buzzer_Initialization:	
 20128                           
 20129                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 20130                           
 20131                           ;incstack = 0
 20132                           ; Regs used in _Buzzer_Initialization: []
 20133  19B9  0022               	movlb	2	; select bank2
 20134  19BA  1420               	bsf	_Buz1^(0+256),0
 20135  19BB  0008               	return
 20136  19BC                     __end_of_Buzzer_Initialization:	
 20137                           
 20138                           	psect	intentry
 20139  0004                     __pintentry:	
 20140 ;; *************** function _ISR *****************
 20141 ;; Defined at:
 20142 ;;		line 116 in file "../src/MCU_B1.c"
 20143 ;; Parameters:    Size  Location     Type
 20144 ;;		None
 20145 ;; Auto vars:     Size  Location     Type
 20146 ;;		None
 20147 ;; Return value:  Size  Location     Type
 20148 ;;		None               void
 20149 ;; Registers used:
 20150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20151 ;; Tracked objects:
 20152 ;;		On entry : 0/0
 20153 ;;		On exit  : 0/0
 20154 ;;		Unchanged: 0/0
 20155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20160 ;;Total ram usage:        1 bytes
 20161 ;; Hardware stack levels used:    1
 20162 ;; Hardware stack levels required when called:    4
 20163 ;; This function calls:
 20164 ;;		_IOC_ISR
 20165 ;;		_TMR1_ISR
 20166 ;; This function is called by:
 20167 ;;		Interrupt level 1
 20168 ;; This function uses a non-reentrant model
 20169 ;;
 20170                           
 20171  0004                     _ISR:	
 20172                           
 20173                           ;incstack = 0
 20174                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20175  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20176  0005  3180               	pagesel	$
 20177  0006  0020               	movlb	0	; select bank0
 20178  0007  087F               	movf	127,w
 20179  0008  00FC               	movwf	??_ISR
 20180                           
 20181                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 20182  0009  0021               	movlb	1	; select bank1
 20183  000A  1C11               	btfss	17,0	;volatile
 20184  000B  2812               	goto	i1l8517
 20185  000C  0020               	movlb	0	; select bank0
 20186  000D  1C11               	btfss	17,0	;volatile
 20187  000E  2812               	goto	i1l8517
 20188                           
 20189                           ;MCU_B1.c: 126: TMR1_ISR();
 20190  000F  319E  2667  3180   	fcall	_TMR1_ISR
 20191  0012                     i1l8517:	
 20192                           
 20193                           ;MCU_B1.c: 127: }
 20194                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 20195  0012  198B               	btfsc	11,3	;volatile
 20196  0013  1C0B               	btfss	11,0	;volatile
 20197  0014  281A               	goto	i1l1225
 20198  0015  0027               	movlb	7	; select bank7
 20199  0016  1D16               	btfss	22,2	;volatile
 20200  0017  281A               	goto	i1l1225
 20201                           
 20202                           ;MCU_B1.c: 139: IOC_ISR();
 20203  0018  319A  223D         	fcall	_IOC_ISR
 20204  001A                     i1l1225:	
 20205                           ;MCU_B1.c: 140: }
 20206                           ;MCU_B1.c: 148: return;
 20207                           
 20208  001A  087C               	movf	??_ISR,w
 20209  001B  0020               	movlb	0	; select bank0
 20210  001C  00FF               	movwf	127
 20211  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 20212  001E  0009               	retfie
 20213  001F                     __end_of_ISR:	
 20214                           
 20215                           	psect	text146
 20216  1E67                     __ptext146:	
 20217 ;; *************** function _TMR1_ISR *****************
 20218 ;; Defined at:
 20219 ;;		line 236 in file "../src/MCU_B1.c"
 20220 ;; Parameters:    Size  Location     Type
 20221 ;;		None
 20222 ;; Auto vars:     Size  Location     Type
 20223 ;;		None
 20224 ;; Return value:  Size  Location     Type
 20225 ;;		None               void
 20226 ;; Registers used:
 20227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20228 ;; Tracked objects:
 20229 ;;		On entry : 0/0
 20230 ;;		On exit  : 0/0
 20231 ;;		Unchanged: 0/0
 20232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20237 ;;Total ram usage:        0 bytes
 20238 ;; Hardware stack levels used:    1
 20239 ;; Hardware stack levels required when called:    1
 20240 ;; This function calls:
 20241 ;;		_DimmerLights_TMR_1
 20242 ;; This function is called by:
 20243 ;;		_ISR
 20244 ;; This function uses a non-reentrant model
 20245 ;;
 20246                           
 20247                           
 20248                           ;psect for function _TMR1_ISR
 20249  1E67                     _TMR1_ISR:	
 20250                           
 20251                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 20252                           
 20253                           ;incstack = 0
 20254                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20255  1E67  3191  213E  319E   	fcall	_DimmerLights_TMR_1
 20256                           
 20257                           ;MCU_B1.c: 268: Timer1.Count++;
 20258  1E6A  3001               	movlw	1
 20259  1E6B  0022               	movlb	2	; select bank2
 20260  1E6C  07B2               	addwf	(_Timer1^(0+256)+1),f
 20261  1E6D  3000               	movlw	0
 20262  1E6E  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 20263                           
 20264                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 20265  1E6F  3001               	movlw	1
 20266  1E70  3E31               	addlw	_Timer1& (0+255)
 20267  1E71  0086               	movwf	6
 20268  1E72  3001               	movlw	1	; select bank2/3
 20269  1E73  0087               	movwf	7
 20270  1E74  3F40               	moviw [0]fsr1
 20271  1E75  3AC8               	xorlw	200
 20272  1E76  1D03               	skipz
 20273  1E77  2E7A               	goto	u797_25
 20274  1E78  3F41               	moviw [1]fsr1
 20275  1E79  3A00               	xorlw	0
 20276  1E7A                     u797_25:	
 20277  1E7A  1D03               	skipz
 20278  1E7B  2E7F               	goto	i1l8007
 20279                           
 20280                           ;MCU_B1.c: 270: Timer1.Count = 0;
 20281  1E7C  01B2               	clrf	(_Timer1^(0+256)+1)
 20282  1E7D  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20283                           
 20284                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 20285  1E7E  1431               	bsf	_Timer1^(0+256),0
 20286  1E7F                     i1l8007:	
 20287                           
 20288                           ;MCU_B1.c: 272: }
 20289                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 20290  1E7F  30FA               	movlw	250
 20291  1E80  0020               	movlb	0	; select bank0
 20292  1E81  0097               	movwf	23	;volatile
 20293                           
 20294                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 20295  1E82  3038               	movlw	56
 20296  1E83  0096               	movwf	22	;volatile
 20297                           
 20298                           ;MCU_B1.c: 276: TMR1IF = 0;
 20299  1E84  1011               	bcf	17,0	;volatile
 20300  1E85  0008               	return
 20301  1E86                     __end_of_TMR1_ISR:	
 20302                           
 20303                           	psect	text147
 20304  113E                     __ptext147:	
 20305 ;; *************** function _DimmerLights_TMR_1 *****************
 20306 ;; Defined at:
 20307 ;;		line 1448 in file "../src/Dimmer_B1.c"
 20308 ;; Parameters:    Size  Location     Type
 20309 ;;		None
 20310 ;; Auto vars:     Size  Location     Type
 20311 ;;		None
 20312 ;; Return value:  Size  Location     Type
 20313 ;;		None               void
 20314 ;; Registers used:
 20315 ;;		wreg, status,2, status,0
 20316 ;; Tracked objects:
 20317 ;;		On entry : 0/0
 20318 ;;		On exit  : 0/0
 20319 ;;		Unchanged: 0/0
 20320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20324 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20325 ;;Total ram usage:        1 bytes
 20326 ;; Hardware stack levels used:    1
 20327 ;; This function calls:
 20328 ;;		Nothing
 20329 ;; This function is called by:
 20330 ;;		_TMR1_ISR
 20331 ;; This function uses a non-reentrant model
 20332 ;;
 20333                           
 20334                           
 20335                           ;psect for function _DimmerLights_TMR_1
 20336  113E                     _DimmerLights_TMR_1:	
 20337                           
 20338                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.Start == 1) {
 20339                           
 20340                           ;incstack = 0
 20341                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20342  113E  0021               	movlb	1	; select bank1
 20343  113F  1D3C               	btfss	_DimmerIntr1^(0+128),2
 20344  1140  2964               	goto	i1l853
 20345                           
 20346                           ;Dimmer_B1.c: 1451: DimmerIntr1.Count++;
 20347  1141  3001               	movlw	1
 20348  1142  00F0               	movwf	??_DimmerLights_TMR_1
 20349  1143  0870               	movf	??_DimmerLights_TMR_1,w
 20350  1144  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20351                           
 20352                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 20353  1145  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20354  1146  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20355  1147  1D03               	skipz
 20356  1148  294B               	goto	i1l7461
 20357                           
 20358                           ;Dimmer_B1.c: 1454: DimmerIntr1.Count = 0;
 20359  1149  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20360                           
 20361                           ;Dimmer_B1.c: 1455: DimmerIntr1.Start = 0;
 20362  114A  113C               	bcf	_DimmerIntr1^(0+128),2
 20363  114B                     i1l7461:	
 20364                           
 20365                           ;Dimmer_B1.c: 1456: }
 20366                           ;Dimmer_B1.c: 1470: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20367  114B  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20368  114C  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20369  114D  1903               	btfsc	3,2
 20370                           
 20371                           ;Dimmer_B1.c: 1471: if (DimmerIntr1.ControlStatus == 1) {
 20372  114E  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20373  114F  2952               	goto	i1l7467
 20374                           
 20375                           ;Dimmer_B1.c: 1472: RB1 = 0;
 20376  1150  0020               	movlb	0	; select bank0
 20377  1151  108D               	bcf	13,1	;volatile
 20378  1152                     i1l7467:	
 20379                           
 20380                           ;Dimmer_B1.c: 1473: }
 20381                           ;Dimmer_B1.c: 1474: }
 20382                           ;Dimmer_B1.c: 1477: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20383  1152  0021               	movlb	1	; select bank1
 20384  1153  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20385  1154  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20386  1155  1903               	btfsc	3,2
 20387                           
 20388                           ;Dimmer_B1.c: 1478: if (DimmerIntr1.ControlStatus == 1) {
 20389  1156  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20390  1157  295A               	goto	i1l7473
 20391                           
 20392                           ;Dimmer_B1.c: 1479: RB1 = 1;
 20393  1158  0020               	movlb	0	; select bank0
 20394  1159  148D               	bsf	13,1	;volatile
 20395  115A                     i1l7473:	
 20396                           
 20397                           ;Dimmer_B1.c: 1480: }
 20398                           ;Dimmer_B1.c: 1481: }
 20399                           ;Dimmer_B1.c: 1484: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20400  115A  0021               	movlb	1	; select bank1
 20401  115B  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20402  115C  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20403  115D  1D03               	skipz
 20404  115E  0008               	return
 20405                           
 20406                           ;Dimmer_B1.c: 1485: if (DimmerIntr1.ControlStatus == 1) {
 20407  115F  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20408  1160  0008               	return
 20409                           
 20410                           ;Dimmer_B1.c: 1486: RB1 = 0;
 20411  1161  0020               	movlb	0	; select bank0
 20412  1162  108D               	bcf	13,1	;volatile
 20413                           
 20414                           ;Dimmer_B1.c: 1487: }
 20415                           ;Dimmer_B1.c: 1490: }
 20416                           ;Dimmer_B1.c: 1492: } else {
 20417  1163  0008               	return
 20418  1164                     i1l853:	
 20419                           
 20420                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.GO == 1) {
 20421  1164  1C3C               	btfss	_DimmerIntr1^(0+128),0
 20422  1165  0008               	return
 20423                           
 20424                           ;Dimmer_B1.c: 1494: DimmerIntr1.Count++;
 20425  1166  3001               	movlw	1
 20426  1167  00F0               	movwf	??_DimmerLights_TMR_1
 20427  1168  0870               	movf	??_DimmerLights_TMR_1,w
 20428  1169  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20429                           
 20430                           ;Dimmer_B1.c: 1495: if (DimmerIntr1.Count == 7) {
 20431  116A  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20432  116B  3A07               	xorlw	7
 20433  116C  1D03               	skipz
 20434  116D  0008               	return
 20435                           
 20436                           ;Dimmer_B1.c: 1496: DimmerIntr1.Count = 0;
 20437  116E  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20438                           
 20439                           ;Dimmer_B1.c: 1497: DimmerIntr1.GO = 0;
 20440  116F  103C               	bcf	_DimmerIntr1^(0+128),0
 20441                           
 20442                           ;Dimmer_B1.c: 1498: DimmerIntr1.Start = 1;
 20443  1170  153C               	bsf	_DimmerIntr1^(0+128),2
 20444                           
 20445                           ;Dimmer_B1.c: 1500: if (DimmerIntr1.ControlStatus == 1) {
 20446  1171  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20447  1172  0008               	return
 20448                           
 20449                           ;Dimmer_B1.c: 1501: RB1 = 1;
 20450  1173  0020               	movlb	0	; select bank0
 20451  1174  148D               	bsf	13,1	;volatile
 20452  1175  0008               	return
 20453  1176                     __end_of_DimmerLights_TMR_1:	
 20454                           
 20455                           	psect	text148
 20456  1A3D                     __ptext148:	
 20457 ;; *************** function _IOC_ISR *****************
 20458 ;; Defined at:
 20459 ;;		line 395 in file "../src/MCU_B1.c"
 20460 ;; Parameters:    Size  Location     Type
 20461 ;;		None
 20462 ;; Auto vars:     Size  Location     Type
 20463 ;;		None
 20464 ;; Return value:  Size  Location     Type
 20465 ;;		None               void
 20466 ;; Registers used:
 20467 ;;		wreg, status,2, status,0, pclath, cstack
 20468 ;; Tracked objects:
 20469 ;;		On entry : 0/0
 20470 ;;		On exit  : 0/0
 20471 ;;		Unchanged: 0/0
 20472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20477 ;;Total ram usage:        0 bytes
 20478 ;; Hardware stack levels used:    1
 20479 ;; Hardware stack levels required when called:    3
 20480 ;; This function calls:
 20481 ;;		_DimmerLights_IOC_1
 20482 ;; This function is called by:
 20483 ;;		_ISR
 20484 ;; This function uses a non-reentrant model
 20485 ;;
 20486                           
 20487                           
 20488                           ;psect for function _IOC_ISR
 20489  1A3D                     _IOC_ISR:	
 20490                           
 20491                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20492                           
 20493                           ;incstack = 0
 20494                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20495  1A3D  0021               	movlb	1	; select bank1
 20496  1A3E  1C2F               	btfss	_myMain^(0+128),0
 20497  1A3F  2A42               	goto	i1l8017
 20498                           
 20499                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20500  1A40  3191  21EB         	fcall	_DimmerLights_IOC_1
 20501  1A42                     i1l8017:	
 20502                           
 20503                           ;MCU_B1.c: 416: }
 20504                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20505  1A42  0027               	movlb	7	; select bank7
 20506  1A43  1116               	bcf	22,2	;volatile
 20507                           
 20508                           ;MCU_B1.c: 419: IOCIF = 0;
 20509  1A44  100B               	bcf	11,0	;volatile
 20510  1A45  0008               	return
 20511  1A46                     __end_of_IOC_ISR:	
 20512                           
 20513                           	psect	text149
 20514  11EB                     __ptext149:	
 20515 ;; *************** function _DimmerLights_IOC_1 *****************
 20516 ;; Defined at:
 20517 ;;		line 1543 in file "../src/Dimmer_B1.c"
 20518 ;; Parameters:    Size  Location     Type
 20519 ;;		None
 20520 ;; Auto vars:     Size  Location     Type
 20521 ;;		None
 20522 ;; Return value:  Size  Location     Type
 20523 ;;		None               void
 20524 ;; Registers used:
 20525 ;;		wreg, status,2, status,0, pclath, cstack
 20526 ;; Tracked objects:
 20527 ;;		On entry : 0/0
 20528 ;;		On exit  : 0/0
 20529 ;;		Unchanged: 0/0
 20530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20533 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20535 ;;Total ram usage:        2 bytes
 20536 ;; Hardware stack levels used:    1
 20537 ;; Hardware stack levels required when called:    2
 20538 ;; This function calls:
 20539 ;;		i1_Division
 20540 ;; This function is called by:
 20541 ;;		_IOC_ISR
 20542 ;; This function uses a non-reentrant model
 20543 ;;
 20544                           
 20545                           
 20546                           ;psect for function _DimmerLights_IOC_1
 20547  11EB                     _DimmerLights_IOC_1:	
 20548                           
 20549                           ;Dimmer_B1.c: 1557: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20550                           
 20551                           ;incstack = 0
 20552                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20553  11EB  0021               	movlb	1	; select bank1
 20554  11EC  193C               	btfsc	_DimmerIntr1^(0+128),2
 20555  11ED  0008               	return
 20556  11EE  183C               	btfsc	_DimmerIntr1^(0+128),0
 20557  11EF  0008               	return
 20558                           
 20559                           ;Dimmer_B1.c: 1559: if (RB2 != DimmerIntr1.Status) {
 20560  11F0  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20561  11F1  0C89               	rrf	9,f
 20562  11F2  3901               	andlw	1
 20563  11F3  00FA               	movwf	??_DimmerLights_IOC_1
 20564  11F4  3000               	movlw	0
 20565  11F5  0020               	movlb	0	; select bank0
 20566  11F6  190D               	btfsc	13,2	;volatile
 20567  11F7  3001               	movlw	1
 20568  11F8  067A               	xorwf	??_DimmerLights_IOC_1,w
 20569  11F9  1903               	skipnz
 20570  11FA  0008               	return
 20571                           
 20572                           ;Dimmer_B1.c: 1562: DimmerIntr1.Count = 0;
 20573  11FB  0021               	movlb	1	; select bank1
 20574  11FC  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20575                           
 20576                           ;Dimmer_B1.c: 1563: DimmerIntr1.GO = 1;
 20577  11FD  143C               	bsf	_DimmerIntr1^(0+128),0
 20578                           
 20579                           ;Dimmer_B1.c: 1565: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20580  11FE  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20581  11FF  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20582                           
 20583                           ;Dimmer_B1.c: 1566: DimmerIntr1.Tune = 1;
 20584  1200  14BC               	bsf	_DimmerIntr1^(0+128),1
 20585                           
 20586                           ;Dimmer_B1.c: 1567: }
 20587                           ;Dimmer_B1.c: 1569: if (DimmerIntr1.TuneGO == 1) {
 20588  1201  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20589  1202  2A21               	goto	i1l7517
 20590                           
 20591                           ;Dimmer_B1.c: 1570: DimmerIntr1.TuneGO = 0;
 20592  1203  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20593                           
 20594                           ;Dimmer_B1.c: 1573: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20595  1204  3002               	movlw	2
 20596  1205  00FA               	movwf	??_DimmerLights_IOC_1
 20597  1206  087A               	movf	??_DimmerLights_IOC_1,w
 20598  1207  00F5               	movwf	i1Division@num
 20599  1208  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20600  1209  319B  231E  3191   	fcall	i1_Division
 20601  120C  00FB               	movwf	??_DimmerLights_IOC_1+1
 20602  120D  087B               	movf	??_DimmerLights_IOC_1+1,w
 20603  120E  0021               	movlb	1	; select bank1
 20604  120F  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20605                           
 20606                           ;Dimmer_B1.c: 1574: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20607  1210  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20608  1211  3AFF               	xorlw	255
 20609  1212  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20610  1213  3E3C               	addlw	60
 20611  1214  00FA               	movwf	??_DimmerLights_IOC_1
 20612  1215  087A               	movf	??_DimmerLights_IOC_1,w
 20613  1216  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20614                           
 20615                           ;Dimmer_B1.c: 1575: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20616  1217  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20617  1218  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20618  1219  00FA               	movwf	??_DimmerLights_IOC_1
 20619  121A  087A               	movf	??_DimmerLights_IOC_1,w
 20620  121B  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20621                           
 20622                           ;Dimmer_B1.c: 1576: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20623  121C  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20624  121D  3E01               	addlw	1
 20625  121E  00FA               	movwf	??_DimmerLights_IOC_1
 20626  121F  087A               	movf	??_DimmerLights_IOC_1,w
 20627  1220  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20628  1221                     i1l7517:	
 20629                           
 20630                           ;Dimmer_B1.c: 1577: }
 20631                           ;Dimmer_B1.c: 1581: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20632  1221  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20633  1222  0020               	movlb	0	; select bank0
 20634  1223  1D0D               	btfss	13,2	;volatile
 20635  1224  0008               	return
 20636  1225  0021               	movlb	1	; select bank1
 20637  1226  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20638  1227  0008               	return
 20639  1228                     __end_of_DimmerLights_IOC_1:	
 20640                           
 20641                           	psect	text150
 20642  1B1E                     __ptext150:	
 20643 ;; *************** function i1_Division *****************
 20644 ;; Defined at:
 20645 ;;		line 1443 in file "../src/Dimmer_B1.c"
 20646 ;; Parameters:    Size  Location     Type
 20647 ;;  value           1    wreg     unsigned char 
 20648 ;;  num             1    5[COMMON] unsigned char 
 20649 ;; Auto vars:     Size  Location     Type
 20650 ;;  value           1    8[COMMON] unsigned char 
 20651 ;;  Division        1    9[COMMON] unsigned char 
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  1    wreg      unsigned char 
 20654 ;; Registers used:
 20655 ;;		wreg, status,2, status,0, pclath, cstack
 20656 ;; Tracked objects:
 20657 ;;		On entry : 0/0
 20658 ;;		On exit  : 0/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20661 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20663 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20664 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20665 ;;Total ram usage:        5 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; Hardware stack levels required when called:    1
 20668 ;; This function calls:
 20669 ;;		i1___lbdiv
 20670 ;; This function is called by:
 20671 ;;		_DimmerLights_IOC_1
 20672 ;; This function uses a non-reentrant model
 20673 ;;
 20674                           
 20675                           
 20676                           ;psect for function i1_Division
 20677  1B1E                     i1_Division:	
 20678                           
 20679                           ;incstack = 0
 20680                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20681                           ;i1Division@value stored from wreg
 20682  1B1E  00F8               	movwf	i1Division@value
 20683                           
 20684                           ;Dimmer_B1.c: 1444: char result = (char) (value / num);
 20685  1B1F  0875               	movf	i1Division@num,w
 20686  1B20  00F6               	movwf	??i1_Division
 20687  1B21  0876               	movf	??i1_Division,w
 20688  1B22  00F0               	movwf	i1___lbdiv@divisor
 20689  1B23  0878               	movf	i1Division@value,w
 20690  1B24  319F  2705         	fcall	i1___lbdiv
 20691  1B26  00F7               	movwf	??i1_Division+1
 20692  1B27  0877               	movf	??i1_Division+1,w
 20693  1B28  00F9               	movwf	i1Division@result
 20694                           
 20695                           ;Dimmer_B1.c: 1445: return result;
 20696  1B29  0879               	movf	i1Division@result,w
 20697  1B2A  0008               	return
 20698  1B2B                     __end_ofi1_Division:	
 20699                           
 20700                           	psect	text151
 20701  1F05                     __ptext151:	
 20702 ;; *************** function i1___lbdiv *****************
 20703 ;; Defined at:
 20704 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20705 ;; Parameters:    Size  Location     Type
 20706 ;;  dividend        1    wreg     unsigned char 
 20707 ;;  divisor         1    0[COMMON] unsigned char 
 20708 ;; Auto vars:     Size  Location     Type
 20709 ;;  dividend        1    2[COMMON] unsigned char 
 20710 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20711 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20712 ;; Return value:  Size  Location     Type
 20713 ;;                  1    wreg      unsigned char 
 20714 ;; Registers used:
 20715 ;;		wreg, status,2, status,0
 20716 ;; Tracked objects:
 20717 ;;		On entry : 0/0
 20718 ;;		On exit  : 0/0
 20719 ;;		Unchanged: 0/0
 20720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20722 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20724 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20725 ;;Total ram usage:        5 bytes
 20726 ;; Hardware stack levels used:    1
 20727 ;; This function calls:
 20728 ;;		Nothing
 20729 ;; This function is called by:
 20730 ;;		i1_Division
 20731 ;; This function uses a non-reentrant model
 20732 ;;
 20733                           
 20734                           
 20735                           ;psect for function i1___lbdiv
 20736  1F05                     i1___lbdiv:	
 20737                           
 20738                           ;incstack = 0
 20739                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20740                           ;i1___lbdiv@dividend stored from wreg
 20741  1F05  00F2               	movwf	i1___lbdiv@dividend
 20742  1F06  01F4               	clrf	i1___lbdiv@quotient
 20743  1F07  0870               	movf	i1___lbdiv@divisor,w
 20744  1F08  1903               	btfsc	3,2
 20745  1F09  2F24               	goto	i1l6873
 20746  1F0A  01F3               	clrf	i1___lbdiv@counter
 20747  1F0B  0AF3               	incf	i1___lbdiv@counter,f
 20748  1F0C                     i1l6861:	
 20749  1F0C  1BF0               	btfsc	i1___lbdiv@divisor,7
 20750  1F0D  2F15               	goto	i1l6863
 20751  1F0E  1003               	clrc
 20752  1F0F  0DF0               	rlf	i1___lbdiv@divisor,f
 20753  1F10  3001               	movlw	1
 20754  1F11  00F1               	movwf	??i1___lbdiv
 20755  1F12  0871               	movf	??i1___lbdiv,w
 20756  1F13  07F3               	addwf	i1___lbdiv@counter,f
 20757  1F14  2F0C               	goto	i1l6861
 20758  1F15                     i1l6863:	
 20759  1F15  1003               	clrc
 20760  1F16  0DF4               	rlf	i1___lbdiv@quotient,f
 20761  1F17  0870               	movf	i1___lbdiv@divisor,w
 20762  1F18  0272               	subwf	i1___lbdiv@dividend,w
 20763  1F19  1C03               	skipc
 20764  1F1A  2F1F               	goto	L11
 20765  1F1B  0870               	movf	i1___lbdiv@divisor,w
 20766  1F1C  02F2               	subwf	i1___lbdiv@dividend,f
 20767  1F1D  1474               	bsf	i1___lbdiv@quotient,0
 20768  1F1E  1003               	clrc
 20769  1F1F                     L11:	
 20770  1F1F  0CF0               	rrf	i1___lbdiv@divisor,f
 20771  1F20  3001               	movlw	1
 20772  1F21  02F3               	subwf	i1___lbdiv@counter,f
 20773  1F22  1D03               	btfss	3,2
 20774  1F23  2F15               	goto	i1l6863
 20775  1F24                     i1l6873:	
 20776  1F24  0874               	movf	i1___lbdiv@quotient,w
 20777  1F25  0008               	return
 20778  1F26                     __end_ofi1___lbdiv:	
 20779  007E                     btemp	set	126	;btemp
 20780  007E                     pic14e$flags	set	126
 20781  007E                     wtemp	set	126
 20782  007E                     wtemp0	set	126
 20783  0080                     wtemp1	set	128
 20784  0082                     wtemp2	set	130
 20785  0084                     wtemp3	set	132
 20786  0086                     wtemp4	set	134
 20787  0088                     wtemp5	set	136
 20788  007F                     wtemp6	set	127
 20789  007E                     ttemp	set	126
 20790  007E                     ttemp0	set	126
 20791  0081                     ttemp1	set	129
 20792  0084                     ttemp2	set	132
 20793  0087                     ttemp3	set	135
 20794  007F                     ttemp4	set	127
 20795  007E                     ltemp	set	126
 20796  007E                     ltemp0	set	126
 20797  0082                     ltemp1	set	130
 20798  0086                     ltemp2	set	134
 20799  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         227
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      9      80
    BANK2            80      0      77
    BANK3            80      0      76
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _setDimmerLights_SwOff->_getDimmerIntr_Dimming_Sw
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  150636
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5904
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5904
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3748
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3748
                                             17 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45256
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   45256
                                              3 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40682
                                             78 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4281
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   36217
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     271
                                              4 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      4     4      0   10400
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20701
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2168
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3073
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48360
       _DimmerLights_DimmingFunction
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48130
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27626
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     222
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20233
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4731
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4731
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 4     4      0    1682
                                             13 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                3     3      0     136
                                              2 BANK0      3     3      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
       _getDimmerIntr_Dimming_Sw
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 16 16:12:27 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1D73                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 145F  
                                      l96 0844                                        l88 1473  
                                      l97 0840                                        l98 082E  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1F8D  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D1                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1A62  
                  __end_of_setDelayOff_GO 0C95                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1795  
                    _setDimmerLights_Line 1B88                              ___ftadd@sign 004B  
                                     l100 083E                                       l303 1D7F  
                                     l304 1D81                                       l235 08FA  
                    _setDimmerLights_SwOn 1339                                       l531 098A  
                                     l347 1FB7                                       l680 1506  
                                     l693 1B56                                       l769 1EBB  
                                     l883 1323                                       l796 0FBF  
                                     l885 1318                                       l894 1337  
                                     l888 1321                                       _GIE 005F  
                                     _CRC 00C8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1D8C                     _Buzzer_Initialization 19B9  
                         __end_of_ADC_Set 1A1E                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1D42               _setDimmerIntr_ControlStatus 1D2A  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1A46  
                   _setDimmerLights_OnOff 0F3A          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                          _Load_Main$4000 002A                                      l2200 1793  
                                    l2213 10CD                                      l1262 1263  
                                    l2230 158A                                      l2160 04F0  
                                    l2227 0A7B                                      l2155 0550  
                                    l1276 1063                                      l1518 0628  
                                    l1286 0B7A                                      l1527 1D72  
                                    l2159 049F                                      l1463 11E9  
                                    l1640 01FF                                      l2185 1B5D  
                                    l1650 01DB                                      l1642 008B  
                                    l1491 1097                                      l1651 01D9  
                                    l1643 0087                                      l1644 0082  
                                    l1812 06F8                           __end_of_IOC_Set 1A83  
                                    l1486 1080                                      l2526 1CF0  
                                    l1487 109B                                      l2730 1E52  
                                    l2546 0381                                      l1818 064B  
                                    l6003 1F53                                      l2548 024D  
                                    l6015 03B1                                      l2920 0428  
                                    l6025 03C7                                      l6113 0DA9  
                                    l6105 0D90                                      l6043 03F4  
                                    l6019 03B8                                      l6211 0BE6  
                                    l6203 0BCB                                      l7011 1D0D  
                                    l6061 043A                                      l6045 03FE  
                                    l6037 03E1                                      l6133 0DF8  
                                    l6213 0BEF                                      l6205 0BD9  
                                    l6055 041A                                      l6047 0403  
                                    l6127 0DE2                                      l6215 0BF2  
                                    l6311 0C47                                      l6065 044C  
                                    l6057 0424                                      l6049 0407  
                                    l6161 0E57                                      l6145 0E33  
                                    l6321 0C77                                      l7033 0F81  
                                    l7041 0F9F                                      l2891 15D1  
                                    l6075 0467                                      l6091 0D4F  
                                    l6219 0C00                                      l7035 0F98  
                                    l6085 0D39                                      l6157 0E4F  
                                    l6149 0E3B                                      l6325 0C8B  
                                    l7205 1BD7                                      l6271 1372  
                                    l7071 0FFD                                      l7055 0FCE  
                                    l6273 137D                                      l2897 15E8  
                                    l6185 0B9B                                      l6361 1718  
                                    l6521 157D                                      l7241 1768  
                                    l7225 1746                                      l9001 14B6  
                                    l8035 077E                                      l8123 09CF  
                                    l8115 09B0                     _setDimmerLights_SwOff 12AD  
                                    l5901 139C                                      l6269 136C  
                                    l7149 104B                                      l8061 1242  
                                    l8301 019B                                      l8221 0069  
                                    l6541 0A98                                      l7237 175F  
                                    l5911 13A4                                      l7079 13F6  
                                    l6551 0AE8                                      l7271 100B  
                                    l8143 09FE                                      l8127 09D7  
                                    l6289 12E8                                      l5913 13B0  
                                    l7425 1330                                      l7417 131A  
                                    l6721 1084                                      l8401 05B9  
                                    l6457 1FC8                                      l6537 0A93  
                                    l5923 13CB                                      l6491 1D5D  
                                    l7435 1A6A                                      l8403 0594  
                                    l7363 1C6E                                      l8307 01AB  
                                    l6459 1FD3                                      l6811 0A20  
                                    l6803 0A04                                      l8171 0D0B  
                                    l8163 0CDD                                      l5861 15A7  
                                    l8421 05D6                                      l8405 05C1  
                                    l8317 01C1                                      l8261 00E0  
                                    l6573 07F0                                      l6813 0A3B  
                                    l5927 13D3                                      l5919 13C2  
                                    l6719 107B                                      l6495 1D6C  
                                    l7391 17F3                                      l8423 0603  
                                    l8431 061E                                      l7615 1BB5  
                                    l7295 112E                                      l7287 1110  
                                    l8255 00AE                                      l8239 008A  
                                    l6815 0A5D                                      l6823 0A69  
                                    l8167 0CF4                                      l8159 0CC6  
                                    l5865 15AE                                      l6729 1092  
                                    l7377 17BD                                      l8425 060D  
                                    l7641 0B73                                      l7633 0B18  
                                    l7289 111C                                      l8353 01EE  
                                    l6817 0A61                                      l6809 0A19  
                                    l5971 1B38                                      l6835 1F2E  
                                    l5875 15D6                                      l5867 15B8  
                                    l6771 1BE1                                      l6763 11A4  
                                    l6755 118E                                      l7379 17C4  
                                    l8419 05FB                                      l7627 0B03  
                                    l7299 1137                                      l6819 0A65  
                                    l6837 1F37                                      l5877 15DE  
                                    l5869 15BD                                      l5981 1BF2  
                                    l6749 1185                                      l7389 17EC  
                                    l8293 0172                                      l7901 0329  
                                    l8189 11C9                                      l5895 1391  
                                    l6847 1F46                                      l6775 1BE8  
                                    l8383 0572                                      l8287 0163  
                                    l8631 1DD2                                      l8711 1297  
                                    l7727 06CF                                      l7591 1ED3  
                                    l6777 1BED                                      l5985 1BF8  
                                    l8393 0591                                      l8297 018F  
                                    l8625 1DC9                                      l8721 12A7  
                                    l8705 128E                                      l8801 0909  
                                    l7833 1CF5                                      l7737 06E4  
                                    l7931 1E4C                                      l8627 1DCC  
                                    l8715 129E                                      l8707 1291  
                                    l8651 1E42                                      l8803 090D  
                                    l7851 0237                                      l7739 06E6  
                                    l7595 1ED8                                      l8389 0582  
                                    l8661 1F76                                      l8717 12A1  
                                    l8805 0910                                      l7837 1CFB  
                                    l7589 1ED0                     _myMain_Initialization 1C83  
                                    l7951 0818                                      l7695 065D  
                                    l8665 1F7C                                      l8649 1E3C  
                                    l8833 0867                                      l8809 0916  
                                    l8905 04EB                                      l7689 064E  
                                    l7697 0660                                      l8659 1F73  
                                    l8683 1FA0                                      l8851 0892  
                                    l8827 085E                                      l8771 08C6  
                                    l7891 02F5                                      l7867 0280  
                                    l8677 1F97                                      l8829 0861  
                                    l8773 08C9                                      l8933 0531  
                                    l7877 02B5                                      l8679 1F9A  
                                    l8791 08E1                                      l8919 04FF  
                                    l8849 0879                                      l8777 08CF  
                                    _CFGS 0CAE                                      l7987 1EBD  
                                    l8795 0900                                      l8947 0549  
                                    l8797 0903                              __CFG_WDTE$ON 0000  
                                    l8997 14AB                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5015 0D61  
                                    u5025 0D71                                      u5105 0E14  
                                    u5035 0D91                                      u5045 0DA0  
                                    u5125 0E3C                                      u5055 0DAA  
                                    u5135 0E42                                      u5215 0BA2  
                                    u4515 15D9                                      _PEIE 005E  
                                    u5165 0E58                                      u5245 0BCC  
                                    u4615 13B1                                      u5175 0E5E  
                                    u5095 0E04                                      u4625 13BB  
                                    u4545 15EF                                      u4635 13C3  
                                    u4475 15B3                                      u5275 0BE7  
                                    u6405 1CE3                                      u4495 15CC  
                                    u5455 0C53                                      u5490 16D3  
                                    u4595 13A7                                      u4915 0408  
                                    u6435 1E01                                      u4855 03E2  
                                    u5495 16D1                                      u8135 09BF  
                                    u4945 041B                                      u6705 1113  
                                    u7425 06A1                                      u8075 125A  
                                    u5595 1FBD                                      u8235 0CB9  
                                    u8315 11E1                                      u4885 03F5  
                                    u6725 111D                                      u7445 06B8  
                                    u8245 0CD0                                      u6735 1127  
                                    u8255 0CE7                                      u6745 112F  
                                    u7465 06D6                                      u8185 09EE  
                                    u8265 0CFE                                      u9315 04C3  
                                    u8275 0D15                                      u8455 00AC  
                                    u8720 0601                                      u8465 00DE  
                                    u9345 0520                                      u7835 1E53  
                                    u8555 01A2                                      u8475 0122  
                                    u8725 05DF                                      u7845 1E58  
                                    u8690 05BF                                      u7875 080E  
                                    u8695 059D                                      _LWLO 0CAD  
                                    u8895 1CB9                                      _RSSI 00CE  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1DF5                _setDimmerLights_DimmingRun 1DDA  
                                    _Buz1 0120                                      _Load 0139  
                                    _Temp 00D7                                      _main 1487  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0991  
                         __end_of_RF_Main 19C5                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B06  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 002F  
    __end_of_DimmerLights_DimmingFunction 1339     __size_of_DimmerLights_DimmingFunction 0046  
            _DimmerLights_DimmingFunction 12F3                __end_of_setRFSW_AdjControl 0AFC  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2294 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1D14  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1CFE                    _getDimmerLights_Status 1B77  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 19DB  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CB  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 13DA  
                         __end_of___lbdiv 1F48                           __end_of___ftadd 047F  
                         __end_of___ftdiv 0DCB                           __end_of___ftneg 1A4F  
                         __end_of___ftmul 0E7F                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0C09  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 113E  
                                   i1l853 1164                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1CE9  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 16C9  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1664  
                                   _Light 0138                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1E86                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1AFA        DimmerLights_DimmingFunction@lights 0021  
                                   _getAD 1EC5                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1C37  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1A78                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1C13                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 1BAA                        _setRF_DimmerLights 16C9  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1B49                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14E2                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 19DF            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0554                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1B67  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0A03                            _setMemory_Data 1AD6  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13DA                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1A58                  __size_of_setRFSW_Control 005E  
                      _RF_Timeout_Counter 1CAA                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0922  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 1B3A  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1A35                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1F6A                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 15FF                  _getMain_All_Error_Status 106A  
                setRFSW_Control@rfDimming 00E6                                    _IOCBF2 1CB2  
                                  i1l1225 001A                                    i1l8007 1E7F  
                                  i1l8017 1A42                                    i1l7517 1221  
                                  i1l7461 114B                                    i1l7473 115A  
                                  i1l7467 1152                                    i1l6861 1F0C  
                                  i1l8517 0012                                    i1l6863 1F15  
                                  i1l6873 1F24                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DA6  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 1A04  
   __size_of_setDimmerLights_DimmingClose 0006              _setDimmerLights_DimmingClose 19FE  
                                  u797_25 1E7A                        DelayTime_1us@count 0020  
                    Exception_Main@i_3637 0032                        setRF_AdjControl@sw 0027  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1CD4                                    _Dimmer 012C  
                                  _DlySw1 01C7                          _setRF_AdjControl 07C6  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1BEF                __end_of_Mcu_Initialization 1C25  
                     __end_of_Buzzer_Main 084B                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 1BEF                    __end_of_Exception_Main 0629  
                    Exception_Main@lights 0035                                    ___wmul 1E49  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1C70  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1C5D                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 1176  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1AE2                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 142E  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 19BF          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1D5A          __end_of_setDimmerIntr_Dimming_Sw 1D2A  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1F26  
               _setDimmerLights_DimmingOn 1FD8                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1C83  
             getMain_Lights_Count@status1 0021               __size_of_DimmerLights_IOC_1 003D  
                   __end_of_SwPointSelect 1B1E               __size_of_DimmerLights_TMR_1 0038  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 000C  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006C  
                        ___lbdiv@dividend 0022                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1CE9  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004F  
         setDimmerIntr_DimmingValue@value 0062           getDimmerIntr_DimmingValue@value 0022  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5424 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK3 1EE5  
                           __end_of_getAD 1EE5                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 19D3  
                         _getSw_KeyStatus 1000                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
          ??_DimmerLights_DimmingFunction 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0024                          ___lbdiv@quotient 0024  
                    _getMain_Lights_Count 1A6D                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0205         setDimmerIntr_ControlStatus@lights 0022  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1AB2  
              __end_of_set_TimeoutCleared 19F8           setDimmerIntr_MaxmumValue@lights 0064  
                      __size_of_getRxData 0067                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1AA6  
                    __size_of_setLED_Main 0036                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 19C5  
                      ??_CC2500_WriteByte 0020                                 ?_Division 0025  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 0801  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 19CB                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 19CB  
                           ??_Switch_Main 0034                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CC                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1487  
                          _getDelayOff_GO 1B99                       _CC2500_WriteCommand 1DC0  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 1540  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
       __size_of_getDimmerIntr_Dimming_Sw 000F                                _getLoad_AD 0991  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1A25  
               ?_getDimmerIntr_Dimming_Sw 0070                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1A17  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 0C95  
      __end_of_DimmerLights_SelectPointer 1AA6                _DimmerLights_SelectPointer 1A9A  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1A8E  
      setDimmerLights_SwOff@dimmingStatus 0023                        _setRFSW_AdjControl 0A7C  
                  __end_of_setProductData 1AB2             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1A3D                                   _IOC_Set 1A78  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 1228  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1D8C  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 19C2                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1AFA           __end_of_setControl_Lights_Table 0A7C  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 142E                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1B12  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1BCC                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BAA  
          __end_of_getDimmerLights_Status 1B88                         __end_of_getRxData 1795  
                 __end_of_getSw_KeyStatus 1011                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1386  
          ??_setDimmerLights_DimmingClose 0023                                   ___lbdiv 1F26  
                                 ___ftadd 0389                                   ___ftdiv 0D22  
                                 ___ftneg 1A46                           __size_of___wmul 001E  
                                 ___ftmul 0DCB                                   ___fttol 0B82  
                     __end_of_Switch_Main 1A25                        __end_ofi1_Division 1B2B  
                                 ___lwdiv 1107                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1BCC  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 11AF  
                                 __ptext2 1C83                                   __ptext3 0C95  
                                 __ptext4 0991                                   __ptext5 1EC5  
                                 __ptext6 1C25                                   __ptext7 0002  
                                 __ptext8 19C8                                   __ptext9 0629  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 1269                 __end_of_Flash_Memory_Read 1DA6  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 047F  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 19CF  
                __end_of_setRF_AdjControl 0800                         _DimmerLights_Main 1EA5  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 19FE  
              __end_of_CC2500_ClearRXFIFO 19E7                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 19EB                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1ACA                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1A8E  
                                 clrloop0 1A0B            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 19F3                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1011  
                           _DelayTime_1us 1FB2                         __end_of_setTxData 0F3A  
              __end_of_Flash_Memory_Write 106A        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1A04                __end_of_setRF_TransceiveGO 1C5D  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1A05  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0030                         _CC2500_ReadStatus 1F8D  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C01  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 084B  
                           _CC2500_TxData 08B6                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0AFC                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1D5A  
                     _Flash_Memory_Unlock 1A4F                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1EC5                        _Mcu_Initialization 1C13  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001B  
            __end_of_setRF_TimeoutCleared 19E3                      __end_of_my_MainTimer 11EB  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1AD6                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1F05  
               __end_of_CC2500_InitSetREG 103B                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 1FB2  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 2000                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1DC0  
                    _setRF_Initialization 1A83                        _setMemory_LoopSave 1C70  
                             _Switch_Main 1A1E                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1BDD  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1CBF               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1BBB  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C01       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1E67  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 11AF  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 004D                            __end_of_setBuz 1487  
              __end_of_DimmerLights_IOC_1 1228                      _CC2500_FrequencyCabr 1B06  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1540                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 1176                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1A2D                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1EA5  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 06FC  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1664  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 15FF  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
           setRF_AdjControl@dimmingStatus 0026                        _set_TimeoutCleared 19F3  
       __end_of_setDimmerIntr_MaxmumValue 1ABE                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0169  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 008D                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 19C8  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00CF                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0034  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1A62  
                               _Tx_Length 00D3                               __pdataBANK3 01CC  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 109D                          _CC2500_SIDLEMode 19EB  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
          getDimmerIntr_Dimming_Sw@lights 0020                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E            getDimmerIntr_Dimming_Sw@status 0021  
                               ___latbits 0003                          _setMemory_Modify 1C37  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 14E2  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0161                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E2C  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00EE                            getRxData@error 006F  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 19DF  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0030  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1BDD                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 0800  
                               _getBuz_GO 1BBB                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 07C6               _Flash_Memory_Initialization 06FC  
                                ?___awdiv 0020                                 __ptext100 1A58  
                               __ptext101 1B99                                  ?___lbdiv 0020  
                               __ptext110 1B49                                 __ptext102 1BDD  
                               __ptext111 1CFE                                 __ptext103 13DA  
                               __ptext120 15FF                                 __ptext112 1A25  
                               __ptext104 0E7F                                 __ptext121 0B82  
                               __ptext113 106A                                 __ptext105 1C4A  
                               __ptext130 19CF                                 __ptext122 1A46  
                               __ptext114 12F3                                 __ptext106 16C9  
                               __ptext131 0922                                 __ptext123 0DCB  
                               __ptext115 1A10                                 __ptext107 1B88  
                               __ptext140 19CB                                 __ptext132 1AA6  
                               __ptext124 0D22                                 __ptext116 19B8  
                               __ptext108 1AB2                                 __ptext141 19F8  
                               __ptext133 1339                                 __ptext125 0389  
                               __ptext117 14E2                                 __ptext109 1D14  
                                ?___ftadd 0041                                 __ptext150 1B1E  
                               __ptext142 1A8E                                 __ptext134 142E  
                               __ptext126 1F48                                 __ptext118 1C37  
                               __ptext151 1F05                                 __ptext143 0801  
                               __ptext135 1386                                 __ptext127 159E  
                               __ptext119 1664                                 __ptext144 19B9  
                               __ptext136 12AD                                 __ptext128 1B3A  
                               __ptext137 1B2B                                 __ptext129 1F26  
                               __ptext146 1E67                                 __ptext138 1B77  
                               __ptext147 113E                                 __ptext139 1A9A  
                               __ptext148 1A3D                                 __ptext149 11EB  
                               _getRxData 172E                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 159E  
                        ??_setProductData 0063                   _setOverTemp_ADV_Restore 1DF5  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 19BC                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1CFE  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1B58              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1B49                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C6                         ?_setRF_AdjControl 0070  
                               _r_address 00D4             __end_of_setDimmerLights_OnOff 1000  
          __size_of_setDimmerLights_SwOff 0046            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12F3              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1C96                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                      ??_setRF_AdjControl 0024                             _SwPointSelect 1B12  
                     __end_of_setLED_Main 1107                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 19C8  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 19D7                           SwPointSelect@sw 0021  
                               clear_ram0 1A0A                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 11AF  
                               _setTxData 0E7F       __end_of_DimmerLights_Initialization 1A17  
             _DimmerLights_Initialization 1A10                    _Flash_Memory_Main$3165 0028  
                      _CC2500_ClearRXFIFO 19E3                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 19E7                  _getDimmerIntr_Dimming_Sw 1B2B  
                setRF_DimmerLights@lights 0069                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1CAA                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  setRF_DimmerLights@status 0068  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 103B  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1E67                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 1AEE                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1C4A  
                                _RF_Count 0134                      __end_of_RF_RxDisable 1B67  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1DDA  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C25  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00D3  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CA                              setSw_Main@sw 0033  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1AEE                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 10D1                     _DlyOff_Initialization 19F8  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0024  
                                _Division 1B3A                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1D42  
             setDimmerLights_OnOff@lights 00E5                  _setDimmerIntr_Dimming_Sw 1D14  
                                _Fosc_Set 19DB                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 00E5                        __end_of_getLoad_AD 0A03  
                      __end_of_getLoad_OK 1A2D                     _Switch_Initialization 19EF  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0D22                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1D73  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0020                                  _SwDetect 00D2  
                             ??_Temp_Main 006F                          getCmd_Status@cmd 0021  
                        setCmd_Status@cmd 0020                         setRFSW_Control@sw 00E7  
           _getMain_All_Error_Status$3625 0021             _getMain_All_Error_Status$3626 0023  
                __end_of_getDimmer_LoadGO 1A35                       _Load_Initialization 19BC  
        ??_getDimmerLights_ValueToPercent 005C           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0023                 ??_setOverTemp_ADV_Restore 0020  
                            _setTemp_Main 0629                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1F48  
                        ??_LedPointSelect 0020                                  ___ftpack 159E  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E8  
                    CC2500_WriteREG@value 0022                               _setLED_Main 10D1  
              __end_of_setRF_DimmerLights 172E            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1A3D  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1DF5                                  __ptext11 19C5  
                                __ptext20 19F3                                  __ptext12 0800  
                                __ptext21 1CD4                                  __ptext13 1A1E  
                                __ptext30 07C6                                  __ptext22 19EF  
                                __ptext14 0205                                  __ptext31 1540  
                                __ptext23 1B67                                  __ptext15 1C96  
                                __ptext40 1E2C                                  __ptext32 0A7C  
                                __ptext24 19C2                                  __ptext16 1FD8  
                                __ptext41 1CBF                                  __ptext33 1DDA  
                                __ptext25 047F                                  __ptext17 1000  
                                __ptext50 19E3                                  __ptext42 19EB  
                                __ptext34 1BCC                                  __ptext26 172E  
                                __ptext18 1B12                                  __ptext51 1DC0  
                                __ptext43 1269                                  __ptext35 1BBB  
                                __ptext27 109D                                  __ptext19 1CE9  
                                __ptext60 1DA6                                  __ptext52 19DF  
                                __ptext44 1011                                  __ptext36 1B58  
                                __ptext28 1C70                                  __ptext61 1A78  
                                __ptext53 1CAA                                  __ptext45 1E86  
                                __ptext37 08B6                                  __ptext29 0A03  
                                __ptext70 1107                                  __ptext62 19DB  
                                __ptext54 1D73                                  __ptext46 1F6A  
                                __ptext38 084B                                  __ptext71 19BC  
                                __ptext63 1A17                                  __ptext55 19BF  
                                __ptext47 1B06                                  __ptext39 1F8D  
                                __ptext80 1AE2                                  __ptext72 1E10  
                                __ptext64 0053                                  __ptext56 1A83  
                                __ptext48 1FB2                                  __ptext81 06FC  
                                __ptext73 19D7                                  __ptext65 1A6D  
                                __ptext57 1C13                                  __ptext49 19E7  
                                __ptext90 0F3A                                  __ptext82 1AD6  
                                __ptext74 10D1                                  __ptext66 1A35  
                                __ptext58 1AFA                                  __ptext91 1176  
                                __ptext83 103B                                  __ptext75 19D3  
                                __ptext67 1A2D                                  __ptext59 1AEE  
                                __ptext92 1ACA                                  __ptext84 1A4F  
                                __ptext76 1C01                                  __ptext68 1C5D  
                                __ptext93 19FE                                  __ptext85 1D8C  
                                __ptext77 1228                                  __ptext69 1E49  
                                __ptext94 1D42                                  __ptext86 0554  
                                __ptext78 1BAA                                  __ptext95 1ABE  
                                __ptext87 1A62                                  __ptext79 0AFC  
                                __ptext96 1D2A                                  __ptext88 1EA5  
                                __ptext97 0C09                                  __ptext89 1795  
                                __ptext98 1BEF                                  __ptext99 1D5A  
                                __product 01CC                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1A6D  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1B99  
                      _DimmerLights_IOC_1 11EB              __end_of_setDimmerLights_SwOn 1386  
                            ??_setSw_Main 0031                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1C96  
      __size_of_DimmerIntr_Initialization 005E                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 113E                  __end_of_CC2500_SIDLEMode 19EF  
              setDimmerLights_Main@lights 00E6               __end_of_DelayOffPointSelect 1A9A  
                setOverTemp_ADV_Restore@i 0021                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1E2C                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1E86                  __end_of_setMemory_Modify 1C4A  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 0554  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1CBF               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$6483 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6480 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 1269                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1ACA  
              _setDimmerIntr_DimmingValue 1ABE               __end_of_Flash_Memory_Modify 0B82  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 109D  
             __end_of_Flash_Memory_Unlock 1A58                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F6A                        __end_of_setSw_Main 0389  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1E10                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0024               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 19B9   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 19B8                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 19BF  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1AE2  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D0  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 19CF                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 19D3                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C09  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1B1E  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FD8  
              ??_getDimmerIntr_Dimming_Sw 0020                   __end_of_CC2500_ReadByte 1E49  
            __end_of_setSw_Initialization 1B77                           _Timeout_Counter 1CD4  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 1B58          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 19D7            __end_of_setTemp_Initialization 0801  
                             Division@num 0025                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 19C2                 __size_of_setRF_AdjControl 003A  
                   __end_of_CC2500_RxData 08B6                     __end_of_CC2500_TxData 0922  
                   _setLoad_AH_AL_Restore 1E10                   __end_of_CC2500_PowerRST 12AD  
