

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Mar 07 16:25:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text147,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1F0A                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1F0A  3463               	retlw	99
  2172  1F0B  3402               	retlw	2
  2173  1F0C  3400               	retlw	0
  2174  1F0D  3400               	retlw	0
  2175  1F0E  3400               	retlw	0
  2176  1F0F  3400               	retlw	0
  2177  1F10  3400               	retlw	0
  2178  1F11  3400               	retlw	0
  2179  1F12  3400               	retlw	0
  2180  1F13  3400               	retlw	0
  2181  1F14  3400               	retlw	0
  2182  1F15  3400               	retlw	0
  2183  1F16  34FF               	retlw	255
  2184  1F17  34FF               	retlw	255
  2185  1F18  34FF               	retlw	255
  2186  1F19  3400               	retlw	0
  2187  1F1A  3400               	retlw	0
  2188  1F1B  3400               	retlw	0
  2189  1F1C  3400               	retlw	0
  2190  1F1D  3400               	retlw	0
  2191  1F1E  3400               	retlw	0
  2192  1F1F  3400               	retlw	0
  2193  1F20  3400               	retlw	0
  2194  1F21  3400               	retlw	0
  2195  1F22  3400               	retlw	0
  2196  1F23  3400               	retlw	0
  2197  1F24  3400               	retlw	0
  2198  1F25  3400               	retlw	0
  2199  1F26  3400               	retlw	0
  2200  1F27  3400               	retlw	0
  2201  1F28  3400               	retlw	0
  2202  1F29  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EC                     __pnvBANK1:	
  2317  00EC                     _product:	
  2318  00EC                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0073                     _RC3	set	115
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  0396                     _IOCBF	set	918
  2375  0395                     _IOCBN	set	917
  2376  0394                     _IOCBP	set	916
  2377  1CB2                     _IOCBF2	set	7346
  2378                           
  2379                           ; #config settings
  2380  0000                     
  2381                           	psect	cinit
  2382  0021                     start_initialization:	
  2383  0021                     __initialization:	
  2384                           
  2385                           ; Clear objects allocated to BITCOMMON
  2386  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BITBANK1
  2389  0022  0021               	movlb	1	; select bank1
  2390  0023  01ED               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  0024  30A0               	movlw	low __pbssBANK1
  2394  0025  0084               	movwf	4
  2395  0026  3000               	movlw	high __pbssBANK1
  2396  0027  0085               	movwf	5
  2397  0028  3044               	movlw	68
  2398  0029  319A  225D  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  002C  3020               	movlw	low __pbssBANK2
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK2
  2404  002F  0085               	movwf	5
  2405  0030  304F               	movlw	79
  2406  0031  319A  225D  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  0034  30A0               	movlw	low __pbssBANK3
  2410  0035  0084               	movwf	4
  2411  0036  3001               	movlw	high __pbssBANK3
  2412  0037  0085               	movwf	5
  2413  0038  304C               	movlw	76
  2414  0039  319A  225D  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Initialize objects allocated to BANK4
  2417  003C  300A               	movlw	low __pidataBANK4
  2418  003D  0084               	movwf	4
  2419  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2420  003F  0085               	movwf	5
  2421  0040  3020               	movlw	low __pdataBANK4
  2422  0041  0086               	movwf	6
  2423  0042  3002               	movlw	high __pdataBANK4
  2424  0043  0087               	movwf	7
  2425  0044  3020               	movlw	32
  2426  0045  319A  2257         	fcall	init_ram
  2427  0047                     end_of_initialization:	
  2428                           ;End of C runtime variable initialization code
  2429                           
  2430  0047                     __end_of__initialization:	
  2431  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2432  0048  0020               	movlb	0
  2433  0049  3194  2CE2         	ljmp	_main	;jump to C main() function
  2434                           
  2435                           	psect	bitbssCOMMON
  2436  03E8                     __pbitbssCOMMON:	
  2437  03E8                     _Transceive_OK:	
  2438  03E8                     	ds	1
  2439                           
  2440                           	psect	bitbssBANK1
  2441  0768                     __pbitbssBANK1:	
  2442  0768                     _Receive_OK:	
  2443  0768                     	ds	1
  2444                           
  2445                           	psect	bssBANK1
  2446  00A0                     __pbssBANK1:	
  2447  00A0                     _RF1:	
  2448  00A0                     	ds	15
  2449  00AF                     _myMain:	
  2450  00AF                     	ds	13
  2451  00BC                     _DimmerIntr1:	
  2452  00BC                     	ds	12
  2453  00C8                     _WDT:	
  2454  00C8                     	ds	2
  2455  00CA                     _CRC:	
  2456  00CA                     	ds	1
  2457  00CB                     _Cmd:	
  2458  00CB                     	ds	1
  2459  00CC                     _DelayOff:	
  2460  00CC                     	ds	1
  2461  00CD                     _DimmerIntr:	
  2462  00CD                     	ds	1
  2463  00CE                     _DimmerLights:	
  2464  00CE                     	ds	1
  2465  00CF                     _LED:	
  2466  00CF                     	ds	1
  2467  00D0                     _Light:	
  2468  00D0                     	ds	1
  2469  00D1                     _RSSI:	
  2470  00D1                     	ds	1
  2471  00D2                     _Rx_Length:	
  2472  00D2                     	ds	1
  2473  00D3                     _SPI0Buffer:	
  2474  00D3                     	ds	1
  2475  00D4                     _Sw:	
  2476  00D4                     	ds	1
  2477  00D5                     _SwDetect:	
  2478  00D5                     	ds	1
  2479  00D6                     _Tx_Length:	
  2480  00D6                     	ds	1
  2481  00D7                     _r_address:	
  2482  00D7                     	ds	1
  2483  00D8                     _r_data:	
  2484  00D8                     	ds	1
  2485  00D9                     _s_data:	
  2486  00D9                     	ds	1
  2487  00DA                     _Temp:	
  2488  00DA                     	ds	10
  2489                           
  2490                           	psect	bssBANK2
  2491  0120                     __pbssBANK2:	
  2492  0120                     _Buz1:	
  2493  0120                     	ds	12
  2494  012C                     _Dimmer:	
  2495  012C                     	ds	5
  2496  0131                     _Timer1:	
  2497  0131                     	ds	3
  2498  0134                     _RF_Count:	
  2499  0134                     	ds	2
  2500  0136                     _Load:	
  2501  0136                     	ds	40
  2502  015E                     _DimmerLights1:	
  2503  015E                     	ds	8
  2504  0166                     _DlySw1:	
  2505  0166                     	ds	5
  2506  016B                     _VarErrLED:	
  2507  016B                     	ds	4
  2508                           
  2509                           	psect	bssBANK3
  2510  01A0                     __pbssBANK3:	
  2511  01A0                     _RF_Data:	
  2512  01A0                     	ds	30
  2513  01BE                     _Memory:	
  2514  01BE                     	ds	37
  2515  01E3                     _Sw1:	
  2516  01E3                     	ds	9
  2517                           
  2518                           	psect	dataBANK4
  2519  0220                     __pdataBANK4:	
  2520  0220                     __product:	
  2521  0220                     	ds	32
  2522                           
  2523                           	psect	clrtext
  2524  1A5D                     clear_ram0:	
  2525                           ;	Called with FSR0 containing the base address, and
  2526                           ;	WREG with the size to clear
  2527                           
  2528  1A5D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2529  1A5E                     clrloop0:	
  2530  1A5E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2531  1A5F  3101               	addfsr 0,1
  2532  1A60  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2533  1A61  2A5E               	goto	clrloop0	;have we reached the end yet?
  2534  1A62  3400               	retlw	0	;all done for this memory range, return
  2535                           
  2536                           	psect	inittext
  2537  1A57                     init_ram:	
  2538  1A57  00FE               	movwf	126
  2539  1A58                     initloop:	
  2540  1A58  0012               	moviw fsr0++
  2541  1A59  001E               	movwi fsr1++
  2542  1A5A  0BFE               	decfsz	126,f
  2543  1A5B  2A58               	goto	initloop
  2544  1A5C  3400               	retlw	0
  2545                           
  2546                           	psect	cstackBANK1
  2547  00E4                     __pcstackBANK1:	
  2548  00E4                     ??_getRxData:	
  2549  00E4                     setDimmerLights_OnOff@lights:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552                           
  2553                           ; 1 bytes @ 0x0
  2554  00E4                     	ds	1
  2555  00E5                     setDimmerLights_Main@lights:	
  2556  00E5                     getRxData@error:	
  2557                           ; 1 bytes @ 0x1
  2558                           
  2559                           
  2560                           ; 1 bytes @ 0x1
  2561  00E5                     	ds	1
  2562  00E6                     ??_setRF_Main:	
  2563                           
  2564                           ; 0 bytes @ 0x2
  2565  00E6                     	ds	1
  2566  00E7                     setRF_Main@error:	
  2567                           
  2568                           ; 1 bytes @ 0x3
  2569  00E7                     	ds	1
  2570  00E8                     ?_main:	
  2571  00E8                     main@argc:	
  2572                           ; 2 bytes @ 0x4
  2573                           
  2574                           
  2575                           ; 2 bytes @ 0x4
  2576  00E8                     	ds	2
  2577  00EA                     main@argv:	
  2578                           
  2579                           ; 2 bytes @ 0x6
  2580  00EA                     	ds	2
  2581                           
  2582                           	psect	cstackCOMMON
  2583  0070                     __pcstackCOMMON:	
  2584  0070                     ?_CC2500_WriteCommand:	
  2585  0070                     ?_RF_Timeout_Counter:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRF_TimeoutCleared:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_WriteByte:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_ReadStatus:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ReadByte:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_PowerRST:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_InitSetREG:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_InitPATable:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ClearTXFIFO:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ClearRXFIFO:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_FrequencyCabr:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_SIDLEMode:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_DlyOff_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_DlyOff_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_SwOn:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_SwOff:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setMemory_Modify:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_Line:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setTxData:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setRF_TransceiveGO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setLED_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setLED_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_Fosc_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_IO_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_TMR1_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_ADC_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IOC_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_WDT_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_TMR1_ISR:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_IOC_ISR:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Timeout_Counter:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_set_TimeoutCleared:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Write:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Modify:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_WDT_Clearing:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_myMain_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Temp_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Load_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Switch_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RF_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getLoad_AD:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getTemp_AD:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_my_MainTimer:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Temp_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Load_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Switch_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_RF_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Exception_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setLoad_AH_AL_Restore:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setTemp_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setTemp_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setRF_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setRF_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_RxDisable:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_getRxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setLog_Code:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setControl_Lights_Table:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setRFSW_Control:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setRFSW_AdjControl:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setRF_AdjControl:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setSw_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setSw_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Buzzer_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Buzzer_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_CC2500_TxData:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_CC2500_RxData:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_PowerOnInitial:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DelayOffPointSelect:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DelayOff_Initialization:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOff_Main:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DimmerIntr_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DimmerLights_SelectPointer:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerLights_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setDimmerLights_DimmingOn:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_Main:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DimmerLights_TMR_1:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ??_DimmerLights_TMR_1:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerLights_IOC_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_LedPointSelect:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_LED_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_LED_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Mcu_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_ISR:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Flash_Memory_Initialization:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Flash_Memory_Main:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Flash_Memory_Unlock:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Flash_Memory_Erasing:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_setMemory_LoopSave:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_WDT_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setRF_Learn:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_TouchPower:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_SwPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_getDimmerLights_Status:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_getDimmerLights_ValueToPercent:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDimmerLights_PercentToValue:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getLoad_OK:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getMain_All_Error_Status:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getMain_All_LightsStatus:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getDimmerLights_Allow_Condition:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getCmd_Status:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_Flash_Memory_Read:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getAll_Sw_KeyStatus:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getRF_KeyStatus:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getSw_KeyStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDelayOff_GO:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getDimmerIntr_DimmingValue:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getDimmerLights_Line:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getDimmer_LoadGO:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmer_Load_Status:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getMain_Lights_Count:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?i1___lbdiv:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     setDimmerLights_Initialization@lights:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     getDimmerLights_Allow_Condition@lights:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     getSw_KeyStatus@sw:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     i1___lbdiv@divisor:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0x0
  2941  0070                     	ds	1
  2942  0071                     ??_TMR1_ISR:	
  2943  0071                     ??i1___lbdiv:	
  2944                           ; 0 bytes @ 0x1
  2945                           
  2946                           
  2947                           ; 0 bytes @ 0x1
  2948  0071                     	ds	1
  2949  0072                     i1___lbdiv@dividend:	
  2950                           
  2951                           ; 1 bytes @ 0x2
  2952  0072                     	ds	1
  2953  0073                     i1___lbdiv@counter:	
  2954                           
  2955                           ; 1 bytes @ 0x3
  2956  0073                     	ds	1
  2957  0074                     i1___lbdiv@quotient:	
  2958                           
  2959                           ; 1 bytes @ 0x4
  2960  0074                     	ds	1
  2961  0075                     ?i1_Division:	
  2962  0075                     i1Division@num:	
  2963                           ; 1 bytes @ 0x5
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x5
  2967  0075                     	ds	1
  2968  0076                     ??i1_Division:	
  2969                           
  2970                           ; 0 bytes @ 0x6
  2971  0076                     	ds	2
  2972  0078                     i1Division@value:	
  2973                           
  2974                           ; 1 bytes @ 0x8
  2975  0078                     	ds	1
  2976  0079                     i1Division@result:	
  2977                           
  2978                           ; 1 bytes @ 0x9
  2979  0079                     	ds	1
  2980  007A                     ??_DimmerLights_IOC_1:	
  2981                           
  2982                           ; 0 bytes @ 0xA
  2983  007A                     	ds	2
  2984  007C                     ??_IOC_ISR:	
  2985  007C                     ??_ISR:	
  2986                           ; 0 bytes @ 0xC
  2987                           
  2988                           
  2989                           ; 0 bytes @ 0xC
  2990  007C                     	ds	1
  2991                           
  2992                           	psect	cstackBANK0
  2993  0020                     __pcstackBANK0:	
  2994  0020                     ??_RF_Timeout_Counter:	
  2995  0020                     ??_setRF_TimeoutCleared:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_CC2500_WriteByte:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_CC2500_ReadByte:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ?_DelayTime_1us:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_setMemory_Modify:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_setDimmerLights_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_getLoad_OK:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_getMain_All_Error_Status:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_getMain_All_LightsStatus:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setDimmerLights_Line:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getCmd_Status:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ?_setCmd_Status:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_setTxData:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_setRF_TransceiveGO:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_Fosc_Set:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_IO_Set:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_TMR1_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_ADC_Set:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_IOC_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_WDT_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Timeout_Counter:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_set_TimeoutCleared:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Flash_Memory_Read:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ?_setMemory_Data:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Flash_Memory_Write:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_getAll_Sw_KeyStatus:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_WDT_Clearing:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_myMain_Initialization:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_Temp_Initialization:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_setLoad_AH_AL_Restore:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_setTemp_Initialization:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_setRF_Initialization:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_getRF_KeyStatus:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_getSw_KeyStatus:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_Buzzer_Initialization:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_Buzzer_Main:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_DelayOffPointSelect:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ?_setDimmerIntr_ControlStatus:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_getDimmerIntr_DimmingValue:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ?_setDimmerIntr_Dimming_RF:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_DimmerLights_SelectPointer:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getDimmerLights_Line:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_getDimmer_LoadGO:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getDimmer_Load_Status:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_LedPointSelect:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_Flash_Memory_Unlock:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_Flash_Memory_Erasing:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_setMemory_LoopSave:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_WDT_Main:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_getMain_Lights_Count:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_setRF_Learn:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_TouchPower:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_SwPointSelect:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ?___bmul:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ?___lbdiv:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0020                     ?_getBuz_GO:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0020                     ?_getAD:	
  3170                           ; 2 bytes @ 0x0
  3171                           
  3172  0020                     ?___wmul:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___awdiv:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     ?___lwdiv:	
  3179                           ; 2 bytes @ 0x0
  3180                           
  3181  0020                     ?___ftpack:	
  3182                           ; 2 bytes @ 0x0
  3183                           
  3184  0020                     setDimmerIntr_ControlStatus@command:	
  3185                           ; 3 bytes @ 0x0
  3186                           
  3187  0020                     setDimmerIntr_Dimming_Sw@command:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     setDimmerIntr_Dimming_RF@command:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     setDimmerLights_Line@lights:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     getDimmerLights_Line@line:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getDimmer_LoadGO@loadgo:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getDimmer_Load_Status@status:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     getAD@adcon1:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     setMemory_Data@data:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     getMain_All_LightsStatus@status:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     getMain_Lights_Count@count:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0020                     setCmd_Status@cmd:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0020                     getCmd_Status@number:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0020                     getLoad_OK@ok:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0020                     ___bmul@multiplicand:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0020                     ___lbdiv@divisor:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0020                     DelayTime_1us@count:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0020                     ___wmul@multiplier:	
  3239                           ; 2 bytes @ 0x0
  3240                           
  3241  0020                     ___awdiv@divisor:	
  3242                           ; 2 bytes @ 0x0
  3243                           
  3244  0020                     ___lwdiv@divisor:	
  3245                           ; 2 bytes @ 0x0
  3246                           
  3247  0020                     ___ftpack@arg:	
  3248                           ; 2 bytes @ 0x0
  3249                           
  3250                           
  3251                           ; 3 bytes @ 0x0
  3252  0020                     	ds	1
  3253  0021                     ??_getDimmerLights_Allow_Condition:	
  3254  0021                     ??_setCmd_Status:	
  3255                           ; 0 bytes @ 0x1
  3256                           
  3257  0021                     ??_setMemory_Data:	
  3258                           ; 0 bytes @ 0x1
  3259                           
  3260  0021                     ??_RF_Initialization:	
  3261                           ; 0 bytes @ 0x1
  3262                           
  3263  0021                     ??_setDimmerIntr_ControlStatus:	
  3264                           ; 0 bytes @ 0x1
  3265                           
  3266  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3267                           ; 0 bytes @ 0x1
  3268                           
  3269  0021                     ??_setDimmerIntr_Dimming_RF:	
  3270                           ; 0 bytes @ 0x1
  3271                           
  3272  0021                     ??_Mcu_Initialization:	
  3273                           ; 0 bytes @ 0x1
  3274                           
  3275  0021                     ??___bmul:	
  3276                           ; 0 bytes @ 0x1
  3277                           
  3278  0021                     ??___lbdiv:	
  3279                           ; 0 bytes @ 0x1
  3280                           
  3281  0021                     CC2500_WriteByte@loop_a:	
  3282                           ; 0 bytes @ 0x1
  3283                           
  3284  0021                     CC2500_ReadByte@loop_b:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     DelayOffPointSelect@sw:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     getDimmerIntr_DimmingValue@lights:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     DimmerLights_SelectPointer@lights:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     LedPointSelect@led:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     Flash_Memory_Read@i:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     Flash_Memory_Write@i:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     setMemory_Modify@command:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     setMemory_LoopSave@command:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311  0021                     getMain_Lights_Count@status1:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314  0021                     getCmd_Status@cmd:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317  0021                     setLoad_AH_AL_Restore@i:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     setRF_Learn@command:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323  0021                     getRF_KeyStatus@key:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326  0021                     setRF_TransceiveGO@command:	
  3327                           ; 1 bytes @ 0x1
  3328                           
  3329  0021                     SwPointSelect@sw:	
  3330                           ; 1 bytes @ 0x1
  3331                           
  3332  0021                     getSw_KeyStatus@status:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335  0021                     getAll_Sw_KeyStatus@status:	
  3336                           ; 1 bytes @ 0x1
  3337                           
  3338  0021                     _getMain_All_Error_Status$3618:	
  3339                           ; 1 bytes @ 0x1
  3340                           
  3341                           
  3342                           ; 2 bytes @ 0x1
  3343  0021                     	ds	1
  3344  0022                     ??_CC2500_WriteCommand:	
  3345  0022                     ??_CC2500_ReadStatus:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ??_DelayTime_1us:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ?_CC2500_WriteREG:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     ??_DlyOff_Initialization:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     ??_getDimmerLights_Status:	
  3358                           ; 0 bytes @ 0x2
  3359                           
  3360  0022                     ??_setDimmerLights_SwOff:	
  3361                           ; 0 bytes @ 0x2
  3362                           
  3363  0022                     ?_setLED:	
  3364                           ; 0 bytes @ 0x2
  3365                           
  3366  0022                     ??_setLED_Main:	
  3367                           ; 0 bytes @ 0x2
  3368                           
  3369  0022                     ??_Load_Initialization:	
  3370                           ; 0 bytes @ 0x2
  3371                           
  3372  0022                     ??_getBuz_GO:	
  3373                           ; 0 bytes @ 0x2
  3374                           
  3375  0022                     ??_getDelayOff_GO:	
  3376                           ; 0 bytes @ 0x2
  3377                           
  3378  0022                     ??_setDimmerLights_DimmingOn:	
  3379                           ; 0 bytes @ 0x2
  3380                           
  3381  0022                     ?_setDimmerLights_DimmingRun:	
  3382                           ; 0 bytes @ 0x2
  3383                           
  3384  0022                     CC2500_WriteREG@value:	
  3385                           ; 0 bytes @ 0x2
  3386                           
  3387  0022                     DlyOff_Initialization@sw:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     getDelayOff_GO@sw:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     setDimmerIntr_ControlStatus@lights:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     getDimmerIntr_DimmingValue@value:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     setDimmerIntr_Dimming_RF@lights:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     setDimmerLights_SwOff@sw:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     setDimmerLights_DimmingOn@sw:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     getDimmerLights_Allow_Condition@allow:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     getDimmerLights_Status@lights:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0022                     setDimmerLights_DimmingRun@command:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0022                     setLED@command:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0022                     Flash_Memory_Read@address:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0022                     setMemory_Data@address:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0022                     setCmd_Status@number:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0022                     _getRF_KeyStatus$5417:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0022                     _getSw_KeyStatus$6474:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0022                     _getAll_Sw_KeyStatus$6477:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0022                     ___bmul@product:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0022                     ___lbdiv@dividend:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0022                     DelayTime_1us@i:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0022                     ___wmul@multiplicand:	
  3451                           ; 2 bytes @ 0x2
  3452                           
  3453  0022                     ___awdiv@dividend:	
  3454                           ; 2 bytes @ 0x2
  3455                           
  3456  0022                     ___lwdiv@dividend:	
  3457                           ; 2 bytes @ 0x2
  3458                           
  3459                           
  3460                           ; 2 bytes @ 0x2
  3461  0022                     	ds	1
  3462  0023                     ??_CC2500_WriteREG:	
  3463  0023                     ??_setLED:	
  3464                           ; 0 bytes @ 0x3
  3465                           
  3466  0023                     ??_DelayOff_Initialization:	
  3467                           ; 0 bytes @ 0x3
  3468                           
  3469  0023                     ??_setDimmerLights_DimmingRun:	
  3470                           ; 0 bytes @ 0x3
  3471                           
  3472  0023                     ??_getAD:	
  3473                           ; 0 bytes @ 0x3
  3474                           
  3475  0023                     CC2500_WriteCommand@command:	
  3476                           ; 0 bytes @ 0x3
  3477                           
  3478  0023                     CC2500_ReadStatus@status_addr:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     getDelayOff_GO@go:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     _getDimmerLights_Allow_Condition$2285:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     getDimmerLights_Status@status:	
  3488                           ; 1 bytes @ 0x3
  3489                           
  3490  0023                     setLED@led:	
  3491                           ; 1 bytes @ 0x3
  3492                           
  3493  0023                     getAD@adcon0:	
  3494                           ; 1 bytes @ 0x3
  3495                           
  3496  0023                     Flash_Memory_Read@ret:	
  3497                           ; 1 bytes @ 0x3
  3498                           
  3499  0023                     ___bmul@multiplier:	
  3500                           ; 1 bytes @ 0x3
  3501                           
  3502  0023                     ___ftpack@exp:	
  3503                           ; 1 bytes @ 0x3
  3504                           
  3505  0023                     ___lbdiv@counter:	
  3506                           ; 1 bytes @ 0x3
  3507                           
  3508  0023                     _getMain_All_Error_Status$3619:	
  3509                           ; 1 bytes @ 0x3
  3510                           
  3511                           
  3512                           ; 2 bytes @ 0x3
  3513  0023                     	ds	1
  3514  0024                     ??_CC2500_ClearTXFIFO:	
  3515  0024                     ??_CC2500_ClearRXFIFO:	
  3516                           ; 0 bytes @ 0x4
  3517                           
  3518  0024                     ??_CC2500_SIDLEMode:	
  3519                           ; 0 bytes @ 0x4
  3520                           
  3521  0024                     ??_setLED_Initialization:	
  3522                           ; 0 bytes @ 0x4
  3523                           
  3524  0024                     ??_Flash_Memory_Modify:	
  3525                           ; 0 bytes @ 0x4
  3526                           
  3527  0024                     ??_getLoad_AD:	
  3528                           ; 0 bytes @ 0x4
  3529                           
  3530  0024                     ??_getTemp_AD:	
  3531                           ; 0 bytes @ 0x4
  3532                           
  3533  0024                     ??_RF_RxDisable:	
  3534                           ; 0 bytes @ 0x4
  3535                           
  3536  0024                     ??_setSw_Initialization:	
  3537                           ; 0 bytes @ 0x4
  3538                           
  3539  0024                     ??_CC2500_TxData:	
  3540                           ; 0 bytes @ 0x4
  3541                           
  3542  0024                     ??_CC2500_RxData:	
  3543                           ; 0 bytes @ 0x4
  3544                           
  3545  0024                     ??_Flash_Memory_Initialization:	
  3546                           ; 0 bytes @ 0x4
  3547                           
  3548  0024                     ??___wmul:	
  3549                           ; 0 bytes @ 0x4
  3550                           
  3551  0024                     ??___awdiv:	
  3552                           ; 0 bytes @ 0x4
  3553                           
  3554  0024                     ??___lwdiv:	
  3555                           ; 0 bytes @ 0x4
  3556                           
  3557  0024                     CC2500_WriteREG@w_addr:	
  3558                           ; 0 bytes @ 0x4
  3559                           
  3560  0024                     setDimmerLights_DimmingRun@lights:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0024                     setLED_Initialization@led:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0024                     setLED_Main@led:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0024                     setSw_Initialization@sw:	
  3570                           ; 1 bytes @ 0x4
  3571                           
  3572  0024                     ___ftpack@sign:	
  3573                           ; 1 bytes @ 0x4
  3574                           
  3575  0024                     ___lbdiv@quotient:	
  3576                           ; 1 bytes @ 0x4
  3577                           
  3578  0024                     getBuz_GO@i:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0024                     DelayTime_1us@j:	
  3582                           ; 2 bytes @ 0x4
  3583                           
  3584  0024                     ___wmul@product:	
  3585                           ; 2 bytes @ 0x4
  3586                           
  3587                           
  3588                           ; 2 bytes @ 0x4
  3589  0024                     	ds	1
  3590  0025                     ??_CC2500_InitSetREG:	
  3591  0025                     ??_CC2500_InitPATable:	
  3592                           ; 0 bytes @ 0x5
  3593                           
  3594  0025                     ??_Switch_Initialization:	
  3595                           ; 0 bytes @ 0x5
  3596                           
  3597  0025                     ??___ftpack:	
  3598                           ; 0 bytes @ 0x5
  3599                           
  3600  0025                     ??_LED_Initialization:	
  3601                           ; 0 bytes @ 0x5
  3602                           
  3603  0025                     ??_LED_Main:	
  3604                           ; 0 bytes @ 0x5
  3605                           
  3606  0025                     ?_Division:	
  3607                           ; 0 bytes @ 0x5
  3608                           
  3609  0025                     CC2500_TxData@loop_e:	
  3610                           ; 1 bytes @ 0x5
  3611                           
  3612  0025                     CC2500_RxData@loop_f:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0025                     Division@num:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618  0025                     Flash_Memory_Initialization@value:	
  3619                           ; 1 bytes @ 0x5
  3620                           
  3621  0025                     Flash_Memory_Modify@i:	
  3622                           ; 1 bytes @ 0x5
  3623                           
  3624  0025                     getMain_All_Error_Status@command:	
  3625                           ; 1 bytes @ 0x5
  3626                           
  3627  0025                     getTemp_AD@channel:	
  3628                           ; 1 bytes @ 0x5
  3629                           
  3630  0025                     ___awdiv@counter:	
  3631                           ; 1 bytes @ 0x5
  3632                           
  3633  0025                     ___lwdiv@counter:	
  3634                           ; 1 bytes @ 0x5
  3635                           
  3636                           
  3637                           ; 1 bytes @ 0x5
  3638  0025                     	ds	1
  3639  0026                     ??_CC2500_PowerRST:	
  3640  0026                     ??_CC2500_FrequencyCabr:	
  3641                           ; 0 bytes @ 0x6
  3642                           
  3643  0026                     ??_Division:	
  3644                           ; 0 bytes @ 0x6
  3645                           
  3646  0026                     ??_Flash_Memory_Main:	
  3647                           ; 0 bytes @ 0x6
  3648                           
  3649  0026                     CC2500_InitSetREG@temp1:	
  3650                           ; 0 bytes @ 0x6
  3651                           
  3652  0026                     CC2500_InitPATable@temp:	
  3653                           ; 1 bytes @ 0x6
  3654                           
  3655  0026                     getMain_All_Error_Status@status:	
  3656                           ; 1 bytes @ 0x6
  3657                           
  3658  0026                     getLoad_AD@channel:	
  3659                           ; 1 bytes @ 0x6
  3660                           
  3661  0026                     ___awdiv@sign:	
  3662                           ; 1 bytes @ 0x6
  3663                           
  3664  0026                     getTemp_AD@ADRES:	
  3665                           ; 1 bytes @ 0x6
  3666                           
  3667  0026                     ___lwdiv@quotient:	
  3668                           ; 2 bytes @ 0x6
  3669                           
  3670                           
  3671                           ; 2 bytes @ 0x6
  3672  0026                     	ds	1
  3673  0027                     CC2500_InitSetREG@temp2:	
  3674  0027                     CC2500_InitPATable@loop_d:	
  3675                           ; 1 bytes @ 0x7
  3676                           
  3677  0027                     Flash_Memory_Main@key_Status:	
  3678                           ; 1 bytes @ 0x7
  3679                           
  3680  0027                     getLoad_AD@k:	
  3681                           ; 1 bytes @ 0x7
  3682                           
  3683  0027                     ___awdiv@quotient:	
  3684                           ; 1 bytes @ 0x7
  3685                           
  3686                           
  3687                           ; 2 bytes @ 0x7
  3688  0027                     	ds	1
  3689  0028                     ?___awtoft:	
  3690  0028                     CC2500_InitSetREG@loop_c:	
  3691                           ; 3 bytes @ 0x8
  3692                           
  3693  0028                     Division@value:	
  3694                           ; 1 bytes @ 0x8
  3695                           
  3696  0028                     _Flash_Memory_Main$3155:	
  3697                           ; 1 bytes @ 0x8
  3698                           
  3699  0028                     getLoad_AD@j:	
  3700                           ; 1 bytes @ 0x8
  3701                           
  3702  0028                     ___awtoft@c:	
  3703                           ; 1 bytes @ 0x8
  3704                           
  3705                           
  3706                           ; 2 bytes @ 0x8
  3707  0028                     	ds	1
  3708  0029                     ?_setBuz:	
  3709  0029                     ??_CC2500_PowerOnInitial:	
  3710                           ; 0 bytes @ 0x9
  3711                           
  3712  0029                     Division@result:	
  3713                           ; 0 bytes @ 0x9
  3714                           
  3715  0029                     setBuz@time:	
  3716                           ; 1 bytes @ 0x9
  3717                           
  3718  0029                     getLoad_AD@ADRES:	
  3719                           ; 2 bytes @ 0x9
  3720                           
  3721                           
  3722                           ; 2 bytes @ 0x9
  3723  0029                     	ds	2
  3724  002B                     ??_setBuz:	
  3725  002B                     ??___awtoft:	
  3726                           ; 0 bytes @ 0xB
  3727                           
  3728  002B                     getLoad_AD@i:	
  3729                           ; 0 bytes @ 0xB
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0xB
  3733  002B                     	ds	1
  3734  002C                     setBuz@count:	
  3735                           
  3736                           ; 1 bytes @ 0xC
  3737  002C                     	ds	1
  3738  002D                     ??_setDimmerLights_SwOn:	
  3739  002D                     ??_my_MainTimer:	
  3740                           ; 0 bytes @ 0xD
  3741                           
  3742  002D                     ??_Exception_Main:	
  3743                           ; 0 bytes @ 0xD
  3744                           
  3745  002D                     ??_setRF_AdjControl:	
  3746                           ; 0 bytes @ 0xD
  3747                           
  3748  002D                     setDimmerLights_SwOn@sw:	
  3749                           ; 0 bytes @ 0xD
  3750                           
  3751  002D                     ___awtoft@sign:	
  3752                           ; 1 bytes @ 0xD
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0xD
  3756  002D                     	ds	1
  3757  002E                     ?___ftdiv:	
  3758  002E                     ?___ftmul:	
  3759                           ; 3 bytes @ 0xE
  3760                           
  3761  002E                     setDimmerLights_SwOn@idle:	
  3762                           ; 3 bytes @ 0xE
  3763                           
  3764  002E                     Exception_Main@status:	
  3765                           ; 1 bytes @ 0xE
  3766                           
  3767  002E                     setRF_AdjControl@status:	
  3768                           ; 1 bytes @ 0xE
  3769                           
  3770  002E                     ___ftdiv@f2:	
  3771                           ; 1 bytes @ 0xE
  3772                           
  3773  002E                     ___ftmul@f1:	
  3774                           ; 3 bytes @ 0xE
  3775                           
  3776                           
  3777                           ; 3 bytes @ 0xE
  3778  002E                     	ds	1
  3779  002F                     ??_setSw_Main:	
  3780  002F                     Exception_Main@count:	
  3781                           ; 0 bytes @ 0xF
  3782                           
  3783  002F                     setRF_AdjControl@sw:	
  3784                           ; 1 bytes @ 0xF
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0xF
  3788  002F                     	ds	1
  3789  0030                     Exception_Main@error:	
  3790                           
  3791                           ; 1 bytes @ 0x10
  3792  0030                     	ds	1
  3793  0031                     setSw_Main@sw:	
  3794  0031                     Exception_Main@i:	
  3795                           ; 1 bytes @ 0x11
  3796                           
  3797  0031                     ___ftdiv@f1:	
  3798                           ; 2 bytes @ 0x11
  3799                           
  3800  0031                     ___ftmul@f2:	
  3801                           ; 3 bytes @ 0x11
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0x11
  3805  0031                     	ds	1
  3806  0032                     ??_Switch_Main:	
  3807                           
  3808                           ; 0 bytes @ 0x12
  3809  0032                     	ds	1
  3810  0033                     Exception_Main@i_3630:	
  3811                           
  3812                           ; 2 bytes @ 0x13
  3813  0033                     	ds	1
  3814  0034                     ??___ftdiv:	
  3815  0034                     ??___ftmul:	
  3816                           ; 0 bytes @ 0x14
  3817                           
  3818                           
  3819                           ; 0 bytes @ 0x14
  3820  0034                     	ds	1
  3821  0035                     Exception_Main@lights:	
  3822                           
  3823                           ; 1 bytes @ 0x15
  3824  0035                     	ds	3
  3825  0038                     ___ftdiv@cntr:	
  3826  0038                     ___ftmul@exp:	
  3827                           ; 1 bytes @ 0x18
  3828                           
  3829                           
  3830                           ; 1 bytes @ 0x18
  3831  0038                     	ds	1
  3832  0039                     ___ftdiv@f3:	
  3833  0039                     ___ftmul@f3_as_product:	
  3834                           ; 3 bytes @ 0x19
  3835                           
  3836                           
  3837                           ; 3 bytes @ 0x19
  3838  0039                     	ds	3
  3839  003C                     ___ftdiv@exp:	
  3840  003C                     ___ftmul@cntr:	
  3841                           ; 1 bytes @ 0x1C
  3842                           
  3843                           
  3844                           ; 1 bytes @ 0x1C
  3845  003C                     	ds	1
  3846  003D                     ___ftdiv@sign:	
  3847  003D                     ___ftmul@sign:	
  3848                           ; 1 bytes @ 0x1D
  3849                           
  3850                           
  3851                           ; 1 bytes @ 0x1D
  3852  003D                     	ds	1
  3853  003E                     ?___ftneg:	
  3854  003E                     ___ftneg@f1:	
  3855                           ; 3 bytes @ 0x1E
  3856                           
  3857                           
  3858                           ; 3 bytes @ 0x1E
  3859  003E                     	ds	3
  3860  0041                     ??___ftneg:	
  3861  0041                     ?___ftadd:	
  3862                           ; 0 bytes @ 0x21
  3863                           
  3864  0041                     ___ftadd@f1:	
  3865                           ; 3 bytes @ 0x21
  3866                           
  3867                           
  3868                           ; 3 bytes @ 0x21
  3869  0041                     	ds	3
  3870  0044                     ___ftadd@f2:	
  3871                           
  3872                           ; 3 bytes @ 0x24
  3873  0044                     	ds	3
  3874  0047                     ??___ftadd:	
  3875                           
  3876                           ; 0 bytes @ 0x27
  3877  0047                     	ds	4
  3878  004B                     ___ftadd@sign:	
  3879                           
  3880                           ; 1 bytes @ 0x2B
  3881  004B                     	ds	1
  3882  004C                     ___ftadd@exp2:	
  3883                           
  3884                           ; 1 bytes @ 0x2C
  3885  004C                     	ds	1
  3886  004D                     ___ftadd@exp1:	
  3887                           
  3888                           ; 1 bytes @ 0x2D
  3889  004D                     	ds	1
  3890  004E                     ?___fttol:	
  3891  004E                     ___fttol@f1:	
  3892                           ; 4 bytes @ 0x2E
  3893                           
  3894                           
  3895                           ; 3 bytes @ 0x2E
  3896  004E                     	ds	4
  3897  0052                     ??___fttol:	
  3898                           
  3899                           ; 0 bytes @ 0x32
  3900  0052                     	ds	4
  3901  0056                     ___fttol@sign1:	
  3902                           
  3903                           ; 1 bytes @ 0x36
  3904  0056                     	ds	1
  3905  0057                     ___fttol@lval:	
  3906                           
  3907                           ; 4 bytes @ 0x37
  3908  0057                     	ds	4
  3909  005B                     ___fttol@exp1:	
  3910                           
  3911                           ; 1 bytes @ 0x3B
  3912  005B                     	ds	1
  3913  005C                     ??_getDimmerLights_ValueToPercent:	
  3914  005C                     ??_getDimmerLights_PercentToValue:	
  3915                           ; 0 bytes @ 0x3C
  3916                           
  3917                           
  3918                           ; 0 bytes @ 0x3C
  3919  005C                     	ds	2
  3920  005E                     getDimmerLights_PercentToValue@value:	
  3921  005E                     getDimmerLights_ValueToPercent@value:	
  3922                           ; 1 bytes @ 0x3E
  3923                           
  3924                           
  3925                           ; 1 bytes @ 0x3E
  3926  005E                     	ds	1
  3927  005F                     getDimmerLights_PercentToValue@i:	
  3928  005F                     getDimmerLights_ValueToPercent@i:	
  3929                           ; 3 bytes @ 0x3F
  3930                           
  3931                           
  3932                           ; 3 bytes @ 0x3F
  3933  005F                     	ds	3
  3934  0062                     ?_setProductData:	
  3935  0062                     ??_DimmerIntr_Initialization:	
  3936                           ; 0 bytes @ 0x42
  3937                           
  3938  0062                     ?_setDimmerIntr_DimmingValue:	
  3939                           ; 0 bytes @ 0x42
  3940                           
  3941  0062                     ?_setDimmerIntr_MaxmumValue:	
  3942                           ; 0 bytes @ 0x42
  3943                           
  3944  0062                     setDimmerIntr_DimmingValue@value:	
  3945                           ; 0 bytes @ 0x42
  3946                           
  3947  0062                     setDimmerIntr_MaxmumValue@value:	
  3948                           ; 1 bytes @ 0x42
  3949                           
  3950  0062                     setProductData@value:	
  3951                           ; 1 bytes @ 0x42
  3952                           
  3953                           
  3954                           ; 1 bytes @ 0x42
  3955  0062                     	ds	1
  3956  0063                     ??_setProductData:	
  3957  0063                     ??_setDimmerIntr_DimmingValue:	
  3958                           ; 0 bytes @ 0x43
  3959                           
  3960  0063                     ??_setDimmerIntr_MaxmumValue:	
  3961                           ; 0 bytes @ 0x43
  3962                           
  3963                           
  3964                           ; 0 bytes @ 0x43
  3965  0063                     	ds	1
  3966  0064                     ??_DimmerLights_Initialization:	
  3967  0064                     setDimmerIntr_DimmingValue@lights:	
  3968                           ; 0 bytes @ 0x44
  3969                           
  3970  0064                     setDimmerIntr_MaxmumValue@lights:	
  3971                           ; 1 bytes @ 0x44
  3972                           
  3973  0064                     setProductData@address:	
  3974                           ; 1 bytes @ 0x44
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x44
  3978  0064                     	ds	1
  3979  0065                     ??_DlyOff_Main:	
  3980  0065                     ?_setRF_DimmerLights:	
  3981                           ; 0 bytes @ 0x45
  3982                           
  3983  0065                     ??_Load_Main:	
  3984                           ; 0 bytes @ 0x45
  3985                           
  3986  0065                     ??_setTemp_Main:	
  3987                           ; 0 bytes @ 0x45
  3988                           
  3989  0065                     ??_setLog_Code:	
  3990                           ; 0 bytes @ 0x45
  3991                           
  3992  0065                     ??_setRFSW_AdjControl:	
  3993                           ; 0 bytes @ 0x45
  3994                           
  3995  0065                     ?_setDelayOff_GO:	
  3996                           ; 0 bytes @ 0x45
  3997                           
  3998  0065                     setDelayOff_GO@command:	
  3999                           ; 0 bytes @ 0x45
  4000                           
  4001  0065                     setRF_DimmerLights@on:	
  4002                           ; 1 bytes @ 0x45
  4003                           
  4004                           
  4005                           ; 1 bytes @ 0x45
  4006  0065                     	ds	1
  4007  0066                     ??_setRF_DimmerLights:	
  4008  0066                     setDelayOff_GO@value:	
  4009                           ; 0 bytes @ 0x46
  4010                           
  4011  0066                     setTemp_Main@error:	
  4012                           ; 1 bytes @ 0x46
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x46
  4016  0066                     	ds	1
  4017  0067                     ??_setDelayOff_GO:	
  4018  0067                     DlyOff_Main@sw:	
  4019                           ; 0 bytes @ 0x47
  4020                           
  4021  0067                     Load_Main@error:	
  4022                           ; 1 bytes @ 0x47
  4023                           
  4024  0067                     setTemp_Main@TempGO:	
  4025                           ; 1 bytes @ 0x47
  4026                           
  4027  0067                     setRFSW_AdjControl@status:	
  4028                           ; 1 bytes @ 0x47
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x47
  4032  0067                     	ds	1
  4033  0068                     ??_DelayOff_Main:	
  4034  0068                     setRFSW_AdjControl@sw:	
  4035                           ; 0 bytes @ 0x48
  4036                           
  4037  0068                     setRF_DimmerLights@status:	
  4038                           ; 1 bytes @ 0x48
  4039                           
  4040  0068                     _Load_Main$3996:	
  4041                           ; 1 bytes @ 0x48
  4042                           
  4043  0068                     setTemp_Main@SafeValue:	
  4044                           ; 2 bytes @ 0x48
  4045                           
  4046                           
  4047                           ; 2 bytes @ 0x48
  4048  0068                     	ds	1
  4049  0069                     setDelayOff_GO@i:	
  4050  0069                     setRF_DimmerLights@lights:	
  4051                           ; 1 bytes @ 0x49
  4052                           
  4053                           
  4054                           ; 1 bytes @ 0x49
  4055  0069                     	ds	1
  4056  006A                     ?_setDimmerLights_Dimming:	
  4057  006A                     setDelayOff_GO@j:	
  4058                           ; 0 bytes @ 0x4A
  4059                           
  4060  006A                     setDimmerLights_Dimming@status:	
  4061                           ; 1 bytes @ 0x4A
  4062                           
  4063  006A                     Load_Main@ErrorCountValue:	
  4064                           ; 1 bytes @ 0x4A
  4065                           
  4066  006A                     setTemp_Main@DangerValue:	
  4067                           ; 1 bytes @ 0x4A
  4068                           
  4069                           
  4070                           ; 2 bytes @ 0x4A
  4071  006A                     	ds	1
  4072  006B                     ??_setDimmerLights_Dimming:	
  4073  006B                     setDelayOff_GO@k:	
  4074                           ; 0 bytes @ 0x4B
  4075                           
  4076  006B                     Load_Main@Load_RunStatus:	
  4077                           ; 1 bytes @ 0x4B
  4078                           
  4079                           
  4080                           ; 1 bytes @ 0x4B
  4081  006B                     	ds	1
  4082  006C                     setDelayOff_GO@sw:	
  4083  006C                     setDimmerLights_Dimming@value:	
  4084                           ; 1 bytes @ 0x4C
  4085                           
  4086  006C                     Load_Main@i:	
  4087                           ; 1 bytes @ 0x4C
  4088                           
  4089  006C                     setTemp_Main@AD:	
  4090                           ; 2 bytes @ 0x4C
  4091                           
  4092                           
  4093                           ; 2 bytes @ 0x4C
  4094  006C                     	ds	1
  4095  006D                     ?_setDimmerLights_OnOff:	
  4096  006D                     ??_setRFSW_Control:	
  4097                           ; 0 bytes @ 0x4D
  4098                           
  4099  006D                     setDimmerLights_OnOff@command:	
  4100                           ; 0 bytes @ 0x4D
  4101                           
  4102  006D                     setDimmerLights_Dimming@lights:	
  4103                           ; 1 bytes @ 0x4D
  4104                           
  4105                           
  4106                           ; 1 bytes @ 0x4D
  4107  006D                     	ds	1
  4108  006E                     ??_setDimmerLights_OnOff:	
  4109  006E                     ??_Temp_Main:	
  4110                           ; 0 bytes @ 0x4E
  4111                           
  4112  006E                     Load_Main@LightsCount:	
  4113                           ; 0 bytes @ 0x4E
  4114                           
  4115  006E                     setRFSW_Control@status:	
  4116                           ; 1 bytes @ 0x4E
  4117                           
  4118                           
  4119                           ; 1 bytes @ 0x4E
  4120  006E                     	ds	1
  4121  006F                     setRFSW_Control@sw:	
  4122                           
  4123                           ; 1 bytes @ 0x4F
  4124  006F                     	ds	1
  4125  0070                     ??_setDimmerLights_Main:	
  4126  0070                     ??_RF_Main:	
  4127                           ; 0 bytes @ 0x50
  4128                           
  4129  0070                     ??_setControl_Lights_Table:	
  4130                           ; 0 bytes @ 0x50
  4131                           
  4132  0070                     ??_DimmerLights_Main:	
  4133                           ; 0 bytes @ 0x50
  4134                           
  4135  0070                     ??_main:	
  4136                           ; 0 bytes @ 0x50
  4137                           
  4138                           
  4139                           	psect	maintext
  4140  14E2                     __pmaintext:	
  4141                           ; 0 bytes @ 0x50
  4142 ;;
  4143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4144 ;;
  4145 ;; *************** function _main *****************
  4146 ;; Defined at:
  4147 ;;		line 7 in file "../src/Main_B1.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  argc            2    4[BANK1 ] int 
  4150 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  2    4[BANK1 ] int 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 17F/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4162 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;Total ram usage:        4 bytes
  4167 ;; Hardware stack levels required when called:   13
  4168 ;; This function calls:
  4169 ;;		_Buzzer_Initialization
  4170 ;;		_Buzzer_Main
  4171 ;;		_CC2500_PowerOnInitial
  4172 ;;		_DelayOff_Initialization
  4173 ;;		_DelayOff_Main
  4174 ;;		_DimmerLights_Initialization
  4175 ;;		_DimmerLights_Main
  4176 ;;		_Exception_Main
  4177 ;;		_Flash_Memory_Initialization
  4178 ;;		_Flash_Memory_Main
  4179 ;;		_LED_Initialization
  4180 ;;		_LED_Main
  4181 ;;		_Load_Initialization
  4182 ;;		_Load_Main
  4183 ;;		_Mcu_Initialization
  4184 ;;		_RF_Initialization
  4185 ;;		_RF_Main
  4186 ;;		_Switch_Initialization
  4187 ;;		_Switch_Main
  4188 ;;		_Temp_Initialization
  4189 ;;		_Temp_Main
  4190 ;;		_WDT_Main
  4191 ;;		_getLoad_AD
  4192 ;;		_getTemp_AD
  4193 ;;		_myMain_Initialization
  4194 ;;		_my_MainTimer
  4195 ;; This function is called by:
  4196 ;;		Startup code after reset
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _main
  4202  14E2                     _main:	
  4203                           
  4204                           ;Main_B1.c: 8: myMain_Initialization();
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4208  14E2  319C  24C7  3194   	fcall	_myMain_Initialization
  4209                           
  4210                           ;Main_B1.c: 9: Mcu_Initialization();
  4211  14E5  319C  2457  3194   	fcall	_Mcu_Initialization
  4212                           
  4213                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4214  14E8  3186  26D2  3194   	fcall	_Flash_Memory_Initialization
  4215                           
  4216                           ;Main_B1.c: 11: LED_Initialization();
  4217  14EB  319A  222C  3194   	fcall	_LED_Initialization
  4218                           
  4219                           ;Main_B1.c: 12: Buzzer_Initialization();
  4220  14EE  319A  2212  3194   	fcall	_Buzzer_Initialization
  4221                           
  4222                           ;Main_B1.c: 14: ;;
  4223                           ;Main_B1.c: 15: Temp_Initialization();
  4224  14F1  319A  221E  3194   	fcall	_Temp_Initialization
  4225                           
  4226                           ;Main_B1.c: 16: Load_Initialization();
  4227  14F4  319A  2215  3194   	fcall	_Load_Initialization
  4228                           
  4229                           ;Main_B1.c: 17: ;;
  4230                           ;Main_B1.c: 18: DelayOff_Initialization();
  4231  14F7  319A  2224  3194   	fcall	_DelayOff_Initialization
  4232                           
  4233                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4234  14FA  319A  2263  3194   	fcall	_DimmerLights_Initialization
  4235                           
  4236                           ;Main_B1.c: 21: ;;
  4237                           ;Main_B1.c: 22: ;;
  4238                           ;Main_B1.c: 23: ;;
  4239                           ;Main_B1.c: 24: Switch_Initialization();
  4240  14FD  319A  2248  3194   	fcall	_Switch_Initialization
  4241                           
  4242                           ;Main_B1.c: 25: RF_Initialization();
  4243  1500  319A  2218  3194   	fcall	_RF_Initialization
  4244                           
  4245                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4246  1503  319D  2503  3194   	fcall	_CC2500_PowerOnInitial
  4247  1506                     l11015:	
  4248                           ;Main_B1.c: 27: ;;
  4249                           ;Main_B1.c: 28: ;;
  4250                           ;Main_B1.c: 30: while (1) {
  4251                           
  4252                           
  4253                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4254  1506  0021               	movlb	1	; select bank1
  4255  1507  1C2F               	btfss	_myMain^(0+128),0
  4256  1508  2D11               	goto	l11019
  4257                           
  4258                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4259  1509  3005               	movlw	5
  4260  150A  3189  2170  3194   	fcall	_getLoad_AD
  4261                           
  4262                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4263  150D  3009               	movlw	9
  4264  150E  3190  2069  3194   	fcall	_getTemp_AD
  4265  1511                     l11019:	
  4266                           
  4267                           ;Main_B1.c: 57: }
  4268                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4269  1511  0022               	movlb	2	; select bank2
  4270  1512  1C31               	btfss	_Timer1^(0+256),0
  4271  1513  2D06               	goto	l11015
  4272                           
  4273                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4274  1514  1031               	bcf	_Timer1^(0+256),0
  4275                           
  4276                           ;Main_B1.c: 96: my_MainTimer();
  4277  1515  3193  2310  3194   	fcall	_my_MainTimer
  4278                           
  4279                           ;Main_B1.c: 97: WDT_Main();
  4280  1518  319C  2469  3194   	fcall	_WDT_Main
  4281                           
  4282                           ;Main_B1.c: 98: ;;
  4283                           ;Main_B1.c: 99: ;;
  4284                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4285  151B  0021               	movlb	1	; select bank1
  4286  151C  1C2F               	btfss	_myMain^(0+128),0
  4287  151D  2D06               	goto	l11015
  4288                           
  4289                           ;Main_B1.c: 101: Flash_Memory_Main();
  4290  151E  3192  22CF  3194   	fcall	_Flash_Memory_Main
  4291                           
  4292                           ;Main_B1.c: 103: LED_Main();
  4293  1521  319A  2230  3194   	fcall	_LED_Main
  4294                           
  4295                           ;Main_B1.c: 104: Buzzer_Main();
  4296  1524  3193  2395  3194   	fcall	_Buzzer_Main
  4297                           
  4298                           ;Main_B1.c: 106: ;;
  4299                           ;Main_B1.c: 107: Temp_Main();
  4300  1527  319A  2221  3194   	fcall	_Temp_Main
  4301                           
  4302                           ;Main_B1.c: 108: Load_Main();
  4303  152A  3180  204B  3194   	fcall	_Load_Main
  4304                           
  4305                           ;Main_B1.c: 109: ;;
  4306                           ;Main_B1.c: 111: ;;
  4307                           ;Main_B1.c: 112: DimmerLights_Main();
  4308  152D  319E  2639  3194   	fcall	_DimmerLights_Main
  4309                           
  4310                           ;Main_B1.c: 113: Switch_Main();
  4311  1530  319A  2271  3194   	fcall	_Switch_Main
  4312                           
  4313                           ;Main_B1.c: 114: ;;
  4314                           ;Main_B1.c: 115: ;;
  4315                           ;Main_B1.c: 117: RF_Main();
  4316  1533  319A  221B  3194   	fcall	_RF_Main
  4317                           
  4318                           ;Main_B1.c: 118: DelayOff_Main();
  4319  1536  319A  2228  3194   	fcall	_DelayOff_Main
  4320                           
  4321                           ;Main_B1.c: 119: ;;
  4322                           ;Main_B1.c: 120: ;;
  4323                           ;Main_B1.c: 121: Exception_Main();
  4324  1539  3185  25FD  3194   	fcall	_Exception_Main
  4325  153C  2D06               	goto	l11015
  4326  153D                     __end_of_main:	
  4327                           ;Main_B1.c: 128: }
  4328                           ;Main_B1.c: 129: }
  4329                           ;Main_B1.c: 163: }
  4330                           ;Main_B1.c: 164: return (0);
  4331                           ;	Return value of _main is never used
  4332                           
  4333                           
  4334                           	psect	text1
  4335  1310                     __ptext1:	
  4336 ;; *************** function _my_MainTimer *****************
  4337 ;; Defined at:
  4338 ;;		line 185 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    7
  4359 ;; This function calls:
  4360 ;;		_setBuz
  4361 ;;		_setTxData
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _my_MainTimer
  4369  1310                     _my_MainTimer:	
  4370                           
  4371                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4375  1310  0021               	movlb	1	; select bank1
  4376  1311  182F               	btfsc	_myMain^(0+128),0
  4377  1312  2B2A               	goto	l10671
  4378                           
  4379                           ;Main_B1.c: 188: myMain.PowerCount++;
  4380  1313  3001               	movlw	1
  4381  1314  0020               	movlb	0	; select bank0
  4382  1315  00AD               	movwf	??_my_MainTimer
  4383  1316  082D               	movf	??_my_MainTimer,w
  4384  1317  0021               	movlb	1	; select bank1
  4385  1318  07B0               	addwf	(_myMain^(0+128)+1),f
  4386                           
  4387                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4388  1319  0830               	movf	(_myMain^(0+128)+1),w
  4389  131A  3A4B               	xorlw	75
  4390  131B  1D03               	skipz
  4391  131C  0008               	return
  4392                           
  4393                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4394  131D  01B0               	clrf	(_myMain^(0+128)+1)
  4395                           
  4396                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4397  131E  142F               	bsf	_myMain^(0+128),0
  4398                           
  4399                           ;Main_B1.c: 196: setBuz(3, 50);
  4400  131F  3032               	movlw	50
  4401  1320  0020               	movlb	0	; select bank0
  4402  1321  00A9               	movwf	setBuz@time
  4403  1322  3000               	movlw	0
  4404  1323  00AA               	movwf	setBuz@time+1
  4405  1324  3003               	movlw	3
  4406  1325  3194  2489         	fcall	_setBuz
  4407                           
  4408                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4409  1327  0021               	movlb	1	; select bank1
  4410  1328  162F               	bsf	_myMain^(0+128),4
  4411                           
  4412                           ;Main_B1.c: 206: }
  4413                           ;Main_B1.c: 207: } else {
  4414  1329  0008               	return
  4415  132A                     l10671:	
  4416                           
  4417                           ;Main_B1.c: 208: myMain.PowerCount++;
  4418  132A  3001               	movlw	1
  4419  132B  0020               	movlb	0	; select bank0
  4420  132C  00AD               	movwf	??_my_MainTimer
  4421  132D  082D               	movf	??_my_MainTimer,w
  4422  132E  0021               	movlb	1	; select bank1
  4423  132F  07B0               	addwf	(_myMain^(0+128)+1),f
  4424                           
  4425                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4426  1330  0830               	movf	(_myMain^(0+128)+1),w
  4427  1331  3A32               	xorlw	50
  4428  1332  1D03               	skipz
  4429  1333  2B38               	goto	l10679
  4430                           
  4431                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4432  1334  01B0               	clrf	(_myMain^(0+128)+1)
  4433                           
  4434                           ;Main_B1.c: 222: setTxData();
  4435  1335  318E  2682  3193   	fcall	_setTxData
  4436  1338                     l10679:	
  4437                           
  4438                           ;Main_B1.c: 226: }
  4439                           ;Main_B1.c: 228: myMain.Count1++;
  4440  1338  3001               	movlw	1
  4441  1339  0021               	movlb	1	; select bank1
  4442  133A  07B3               	addwf	(_myMain^(0+128)+4),f
  4443  133B  3000               	movlw	0
  4444  133C  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4445                           
  4446                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4447  133D  3004               	movlw	4
  4448  133E  3EAF               	addlw	_myMain& (0+255)
  4449  133F  0086               	movwf	6
  4450  1340  0187               	clrf	7
  4451  1341  3F40               	moviw [0]fsr1
  4452  1342  3A32               	xorlw	50
  4453  1343  1D03               	skipz
  4454  1344  2B47               	goto	u12305
  4455  1345  3F41               	moviw [1]fsr1
  4456  1346  3A00               	xorlw	0
  4457  1347                     u12305:	
  4458  1347  1D03               	skipz
  4459  1348  0008               	return
  4460                           
  4461                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4462  1349  01B3               	clrf	(_myMain^(0+128)+4)
  4463  134A  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4464                           
  4465                           ;Main_B1.c: 242: if (myMain.Flag) {
  4466  134B  1CAF               	btfss	_myMain^(0+128),1
  4467  134C  2B4F               	goto	l1448
  4468                           
  4469                           ;Main_B1.c: 243: myMain.Flag = 0;
  4470  134D  10AF               	bcf	_myMain^(0+128),1
  4471                           
  4472                           ;Main_B1.c: 252: } else {
  4473  134E  0008               	return
  4474  134F                     l1448:	
  4475                           
  4476                           ;Main_B1.c: 253: myMain.Flag = 1;
  4477  134F  14AF               	bsf	_myMain^(0+128),1
  4478  1350  0008               	return
  4479  1351                     __end_of_my_MainTimer:	
  4480                           
  4481                           	psect	text2
  4482  1CC7                     __ptext2:	
  4483 ;; *************** function _myMain_Initialization *****************
  4484 ;; Defined at:
  4485 ;;		line 170 in file "../src/Main_B1.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;		None               void
  4492 ;; Registers used:
  4493 ;;		wreg, fsr1l, fsr1h
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;Total ram usage:        1 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    5
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           
  4514                           ;psect for function _myMain_Initialization
  4515  1CC7                     _myMain_Initialization:	
  4516                           
  4517                           ;Main_B1.c: 173: product = &_product;
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4521  1CC7  3020               	movlw	__product& (0+255)
  4522  1CC8  0020               	movlb	0	; select bank0
  4523  1CC9  00A0               	movwf	??_myMain_Initialization
  4524  1CCA  0820               	movf	??_myMain_Initialization,w
  4525  1CCB  0021               	movlb	1	; select bank1
  4526  1CCC  00EC               	movwf	_product^(0+128)
  4527                           
  4528                           ;Main_B1.c: 174: product->Data[20] = 209;
  4529  1CCD  30D1               	movlw	209
  4530  1CCE  0020               	movlb	0	; select bank0
  4531  1CCF  00A0               	movwf	??_myMain_Initialization
  4532  1CD0  0021               	movlb	1	; select bank1
  4533  1CD1  086C               	movf	_product^(0+128),w
  4534  1CD2  3E14               	addlw	20
  4535  1CD3  0086               	movwf	6
  4536  1CD4  3002               	movlw	2	; select bank4/5
  4537  1CD5  0087               	movwf	7
  4538  1CD6  0020               	movlb	0	; select bank0
  4539  1CD7  0820               	movf	??_myMain_Initialization,w
  4540  1CD8  0081               	movwf	1
  4541  1CD9  0008               	return
  4542  1CDA                     __end_of_myMain_Initialization:	
  4543                           
  4544                           	psect	text3
  4545  1069                     __ptext3:	
  4546 ;; *************** function _getTemp_AD *****************
  4547 ;; Defined at:
  4548 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  channel         1    wreg     unsigned char 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  channel         1    5[BANK0 ] unsigned char 
  4553 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;		None               void
  4556 ;; Registers used:
  4557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4564 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;Total ram usage:        4 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    7
  4570 ;; This function calls:
  4571 ;;		_getAD
  4572 ;; This function is called by:
  4573 ;;		_main
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           
  4578                           ;psect for function _getTemp_AD
  4579  1069                     _getTemp_AD:	
  4580                           
  4581                           ;incstack = 0
  4582                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4583                           ;getTemp_AD@channel stored from wreg
  4584  1069  0020               	movlb	0	; select bank0
  4585  106A  00A5               	movwf	getTemp_AD@channel
  4586                           
  4587                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4588  106B  01A6               	clrf	getTemp_AD@ADRES
  4589  106C  01A7               	clrf	getTemp_AD@ADRES+1
  4590                           
  4591                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4592  106D  0021               	movlb	1	; select bank1
  4593  106E  1D5A               	btfss	_Temp^(0+128),2
  4594  106F  0008               	return
  4595                           
  4596                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4597  1070  30F0               	movlw	240
  4598  1071  0020               	movlb	0	; select bank0
  4599  1072  00A4               	movwf	??_getTemp_AD
  4600  1073  0824               	movf	??_getTemp_AD,w
  4601  1074  00A0               	movwf	getAD@adcon1
  4602  1075  0825               	movf	getTemp_AD@channel,w
  4603  1076  319E  26EA  3190   	fcall	_getAD
  4604  1079  0020               	movlb	0	; select bank0
  4605  107A  0821               	movf	?_getAD+1,w
  4606  107B  01A7               	clrf	getTemp_AD@ADRES+1
  4607  107C  07A7               	addwf	getTemp_AD@ADRES+1,f
  4608  107D  0820               	movf	?_getAD,w
  4609  107E  01A6               	clrf	getTemp_AD@ADRES
  4610  107F  07A6               	addwf	getTemp_AD@ADRES,f
  4611                           
  4612                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4613  1080  0827               	movf	getTemp_AD@ADRES+1,w
  4614  1081  0426               	iorwf	getTemp_AD@ADRES,w
  4615  1082  1903               	skipnz
  4616  1083  0008               	return
  4617                           
  4618                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4619  1084  0827               	movf	getTemp_AD@ADRES+1,w
  4620  1085  0021               	movlb	1	; select bank1
  4621  1086  0263               	subwf	((_Temp+1)^(0+128)+8),w
  4622  1087  1D03               	skipz
  4623  1088  288D               	goto	u12265
  4624  1089  0020               	movlb	0	; select bank0
  4625  108A  0826               	movf	getTemp_AD@ADRES,w
  4626  108B  0021               	movlb	1	; select bank1
  4627  108C  0262               	subwf	(_Temp^(0+128)+8),w
  4628  108D                     u12265:	
  4629  108D  1803               	skipnc
  4630  108E  0008               	return
  4631                           
  4632                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4633  108F  0020               	movlb	0	; select bank0
  4634  1090  0827               	movf	getTemp_AD@ADRES+1,w
  4635  1091  0021               	movlb	1	; select bank1
  4636  1092  01E3               	clrf	((_Temp+1)^(0+128)+8)
  4637  1093  07E3               	addwf	((_Temp+1)^(0+128)+8),f
  4638  1094  0020               	movlb	0	; select bank0
  4639  1095  0826               	movf	getTemp_AD@ADRES,w
  4640  1096  0021               	movlb	1	; select bank1
  4641  1097  01E2               	clrf	(_Temp^(0+128)+8)
  4642  1098  07E2               	addwf	(_Temp^(0+128)+8),f
  4643  1099  0008               	return
  4644  109A                     __end_of_getTemp_AD:	
  4645                           
  4646                           	psect	text4
  4647  0970                     __ptext4:	
  4648 ;; *************** function _getLoad_AD *****************
  4649 ;; Defined at:
  4650 ;;		line 16 in file "../src/OverLoad_B1.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  channel         1    wreg     unsigned char 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  channel         1    6[BANK0 ] unsigned char 
  4655 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4656 ;;  i               1   11[BANK0 ] unsigned char 
  4657 ;;  j               1    8[BANK0 ] unsigned char 
  4658 ;;  k               1    7[BANK0 ] unsigned char 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;		None               void
  4661 ;; Registers used:
  4662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;Total ram usage:        8 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    7
  4675 ;; This function calls:
  4676 ;;		_getAD
  4677 ;; This function is called by:
  4678 ;;		_main
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _getLoad_AD
  4684  0970                     _getLoad_AD:	
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4688                           ;getLoad_AD@channel stored from wreg
  4689  0970  0020               	movlb	0	; select bank0
  4690  0971  00A6               	movwf	getLoad_AD@channel
  4691                           
  4692                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4693  0972  01AB               	clrf	getLoad_AD@i
  4694  0973  01A8               	clrf	getLoad_AD@j
  4695  0974  01A7               	clrf	getLoad_AD@k
  4696                           
  4697                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4698  0975  01A9               	clrf	getLoad_AD@ADRES
  4699  0976  01AA               	clrf	getLoad_AD@ADRES+1
  4700                           
  4701                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4702  0977  0022               	movlb	2	; select bank2
  4703  0978  1E36               	btfss	_Load^(0+256),4
  4704  0979  0008               	return
  4705                           
  4706                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4707  097A  30F3               	movlw	243
  4708  097B  0020               	movlb	0	; select bank0
  4709  097C  00A4               	movwf	??_getLoad_AD
  4710  097D  0824               	movf	??_getLoad_AD,w
  4711  097E  00A0               	movwf	getAD@adcon1
  4712  097F  0826               	movf	getLoad_AD@channel,w
  4713  0980  319E  26EA  3189   	fcall	_getAD
  4714  0983  0020               	movlb	0	; select bank0
  4715  0984  0821               	movf	?_getAD+1,w
  4716  0985  01AA               	clrf	getLoad_AD@ADRES+1
  4717  0986  07AA               	addwf	getLoad_AD@ADRES+1,f
  4718  0987  0820               	movf	?_getAD,w
  4719  0988  01A9               	clrf	getLoad_AD@ADRES
  4720  0989  07A9               	addwf	getLoad_AD@ADRES,f
  4721                           
  4722                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4723  098A  01AB               	clrf	getLoad_AD@i
  4724  098B  3004               	movlw	4
  4725  098C  022B               	subwf	getLoad_AD@i,w
  4726  098D  1803               	btfsc	3,0
  4727  098E  29B6               	goto	l10625
  4728  098F                     l10613:	
  4729                           
  4730                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4731  098F  352B               	lslf	getLoad_AD@i,w
  4732  0990  3E41               	addlw	(_Load+11)& (0+255)
  4733  0991  0086               	movwf	6
  4734  0992  3001               	movlw	1	; select bank2/3
  4735  0993  0087               	movwf	7
  4736  0994  3F40               	moviw [0]fsr1
  4737  0995  00A4               	movwf	??_getLoad_AD
  4738  0996  3F41               	moviw [1]fsr1
  4739  0997  00A5               	movwf	??_getLoad_AD+1
  4740  0998  082A               	movf	getLoad_AD@ADRES+1,w
  4741  0999  0225               	subwf	??_getLoad_AD+1,w
  4742  099A  1D03               	skipz
  4743  099B  299E               	goto	u12165
  4744  099C  0829               	movf	getLoad_AD@ADRES,w
  4745  099D  0224               	subwf	??_getLoad_AD,w
  4746  099E                     u12165:	
  4747  099E  1803               	skipnc
  4748  099F  29AE               	goto	l10621
  4749  09A0  08A8               	movf	getLoad_AD@j,f
  4750  09A1  1D03               	skipz
  4751  09A2  29AE               	goto	l10621
  4752                           
  4753                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4754  09A3  352B               	lslf	getLoad_AD@i,w
  4755  09A4  3E41               	addlw	(_Load+11)& (0+255)
  4756  09A5  0086               	movwf	6
  4757  09A6  3001               	movlw	1	; select bank2/3
  4758  09A7  0087               	movwf	7
  4759  09A8  0829               	movf	getLoad_AD@ADRES,w
  4760  09A9  3FC0               	movwi [0]fsr1
  4761  09AA  082A               	movf	getLoad_AD@ADRES+1,w
  4762  09AB  3FC1               	movwi [1]fsr1
  4763                           
  4764                           ;OverLoad_B1.c: 25: j = 1;
  4765  09AC  01A8               	clrf	getLoad_AD@j
  4766  09AD  0AA8               	incf	getLoad_AD@j,f
  4767  09AE                     l10621:	
  4768  09AE  3001               	movlw	1
  4769  09AF  00A4               	movwf	??_getLoad_AD
  4770  09B0  0824               	movf	??_getLoad_AD,w
  4771  09B1  07AB               	addwf	getLoad_AD@i,f
  4772  09B2  3004               	movlw	4
  4773  09B3  022B               	subwf	getLoad_AD@i,w
  4774  09B4  1C03               	skipc
  4775  09B5  298F               	goto	l10613
  4776  09B6                     l10625:	
  4777                           
  4778                           ;OverLoad_B1.c: 26: }
  4779                           ;OverLoad_B1.c: 27: }
  4780                           ;OverLoad_B1.c: 28: if (j == 0) {
  4781  09B6  08A8               	movf	getLoad_AD@j,f
  4782  09B7  1D03               	skipz
  4783  09B8  0008               	return
  4784                           
  4785                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4786  09B9  01AB               	clrf	getLoad_AD@i
  4787  09BA                     L1:	
  4788  09BA  3004               	movlw	4
  4789  09BB  022B               	subwf	getLoad_AD@i,w
  4790  09BC  1803               	btfsc	3,0
  4791  09BD  0008               	return
  4792                           
  4793                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4794  09BE  352B               	lslf	getLoad_AD@i,w
  4795  09BF  3E4B               	addlw	(_Load+21)& (0+255)
  4796  09C0  0086               	movwf	6
  4797  09C1  3001               	movlw	1	; select bank2/3
  4798  09C2  0087               	movwf	7
  4799  09C3  3F40               	moviw [0]fsr1
  4800  09C4  00A4               	movwf	??_getLoad_AD
  4801  09C5  3F41               	moviw [1]fsr1
  4802  09C6  00A5               	movwf	??_getLoad_AD+1
  4803  09C7  0825               	movf	??_getLoad_AD+1,w
  4804  09C8  022A               	subwf	getLoad_AD@ADRES+1,w
  4805  09C9  1D03               	skipz
  4806  09CA  29CD               	goto	u12215
  4807  09CB  0824               	movf	??_getLoad_AD,w
  4808  09CC  0229               	subwf	getLoad_AD@ADRES,w
  4809  09CD                     u12215:	
  4810  09CD  1803               	skipnc
  4811  09CE  29DD               	goto	l10641
  4812  09CF  08A7               	movf	getLoad_AD@k,f
  4813  09D0  1D03               	skipz
  4814  09D1  29DD               	goto	l10641
  4815                           
  4816                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4817  09D2  352B               	lslf	getLoad_AD@i,w
  4818  09D3  3E4B               	addlw	(_Load+21)& (0+255)
  4819  09D4  0086               	movwf	6
  4820  09D5  3001               	movlw	1	; select bank2/3
  4821  09D6  0087               	movwf	7
  4822  09D7  0829               	movf	getLoad_AD@ADRES,w
  4823  09D8  3FC0               	movwi [0]fsr1
  4824  09D9  082A               	movf	getLoad_AD@ADRES+1,w
  4825  09DA  3FC1               	movwi [1]fsr1
  4826                           
  4827                           ;OverLoad_B1.c: 32: k = 1;
  4828  09DB  01A7               	clrf	getLoad_AD@k
  4829  09DC  0AA7               	incf	getLoad_AD@k,f
  4830  09DD                     l10641:	
  4831  09DD  3001               	movlw	1
  4832  09DE  00A4               	movwf	??_getLoad_AD
  4833  09DF  0824               	movf	??_getLoad_AD,w
  4834  09E0  07AB               	addwf	getLoad_AD@i,f
  4835  09E1  29BA               	goto	L1
  4836  09E2                     __end_of_getLoad_AD:	
  4837                           
  4838                           	psect	text5
  4839  1EEA                     __ptext5:	
  4840 ;; *************** function _getAD *****************
  4841 ;; Defined at:
  4842 ;;		line 461 in file "../src/MCU_B1.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  adcon0          1    wreg     unsigned char 
  4845 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  2    0[BANK0 ] int 
  4850 ;; Registers used:
  4851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4857 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;Total ram usage:        4 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    6
  4864 ;; This function calls:
  4865 ;;		_Timeout_Counter
  4866 ;;		_set_TimeoutCleared
  4867 ;; This function is called by:
  4868 ;;		_getLoad_AD
  4869 ;;		_getTemp_AD
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _getAD
  4875  1EEA                     _getAD:	
  4876                           
  4877                           ;incstack = 0
  4878                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4879                           ;getAD@adcon0 stored from wreg
  4880  1EEA  0020               	movlb	0	; select bank0
  4881  1EEB  00A3               	movwf	getAD@adcon0
  4882                           
  4883                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4884  1EEC  0823               	movf	getAD@adcon0,w
  4885  1EED  0021               	movlb	1	; select bank1
  4886  1EEE  009D               	movwf	29	;volatile
  4887                           
  4888                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4889  1EEF  0020               	movlb	0	; select bank0
  4890  1EF0  0820               	movf	getAD@adcon1,w
  4891  1EF1  0021               	movlb	1	; select bank1
  4892  1EF2  009E               	movwf	30	;volatile
  4893                           
  4894                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4895  1EF3  149D               	bsf	29,1	;volatile
  4896                           
  4897                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4898  1EF4  2EF8               	goto	l10101
  4899  1EF5                     l10099:	
  4900                           
  4901                           ;MCU_B1.c: 466: Timeout_Counter();
  4902  1EF5  319D  2518  319E   	fcall	_Timeout_Counter
  4903  1EF8                     l10101:	
  4904  1EF8  0021               	movlb	1	; select bank1
  4905  1EF9  1C9D               	btfss	29,1	;volatile
  4906  1EFA  2EFD               	goto	l10105
  4907  1EFB  1D39               	btfss	(_myMain^(0+128)+10),2
  4908  1EFC  2EF5               	goto	l10099
  4909  1EFD                     l10105:	
  4910                           
  4911                           ;MCU_B1.c: 467: };
  4912                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4913  1EFD  319A  224C         	fcall	_set_TimeoutCleared
  4914                           
  4915                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4916  1EFF  0021               	movlb	1	; select bank1
  4917  1F00  081C               	movf	28,w	;volatile
  4918  1F01  0020               	movlb	0	; select bank0
  4919  1F02  01A1               	clrf	?_getAD+1
  4920  1F03  07A1               	addwf	?_getAD+1,f
  4921  1F04  0021               	movlb	1	; select bank1
  4922  1F05  081B               	movf	27,w	;volatile
  4923  1F06  0020               	movlb	0	; select bank0
  4924  1F07  01A0               	clrf	?_getAD
  4925  1F08  07A0               	addwf	?_getAD,f
  4926  1F09  0008               	return
  4927  1F0A                     __end_of_getAD:	
  4928                           
  4929                           	psect	text6
  4930  1C69                     __ptext6:	
  4931 ;; *************** function _WDT_Main *****************
  4932 ;; Defined at:
  4933 ;;		line 1116 in file "../src/MCU_B1.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;		None               void
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0, pclath, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;Total ram usage:        1 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    6
  4954 ;; This function calls:
  4955 ;;		_WDT_Clearing
  4956 ;; This function is called by:
  4957 ;;		_main
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _WDT_Main
  4963  1C69                     _WDT_Main:	
  4964                           
  4965                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4969  1C69  0021               	movlb	1	; select bank1
  4970  1C6A  1C48               	btfss	_WDT^(0+128),0
  4971  1C6B  0008               	return
  4972                           
  4973                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4974  1C6C  3001               	movlw	1
  4975  1C6D  02C9               	subwf	(_WDT^(0+128)+1),f
  4976  1C6E  0849               	movf	(_WDT^(0+128)+1),w
  4977  1C6F  3AFF               	xorlw	255
  4978  1C70  1903               	skipnz
  4979  1C71  0008               	return
  4980                           
  4981                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4982  1C72  3064               	movlw	100
  4983  1C73  0020               	movlb	0	; select bank0
  4984  1C74  00A0               	movwf	??_WDT_Main
  4985  1C75  0820               	movf	??_WDT_Main,w
  4986  1C76  0021               	movlb	1	; select bank1
  4987  1C77  00C9               	movwf	(_WDT^(0+128)+1)
  4988                           
  4989                           ;MCU_B1.c: 1120: WDT_Clearing();
  4990  1C78  3180  2002         	fcall	_WDT_Clearing
  4991  1C7A  0008               	return
  4992  1C7B                     __end_of_WDT_Main:	
  4993                           
  4994                           	psect	text7
  4995  0002                     __ptext7:	
  4996 ;; *************** function _WDT_Clearing *****************
  4997 ;; Defined at:
  4998 ;;		line 1126 in file "../src/MCU_B1.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;		None
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;		None
  5003 ;; Return value:  Size  Location     Type
  5004 ;;		None               void
  5005 ;; Registers used:
  5006 ;;		None
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;Total ram usage:        0 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    5
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_WDT_Main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _WDT_Clearing
  5028  0002                     _WDT_Clearing:	
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _WDT_Clearing: []
  5032  0002  0064               	clrwdt	;# 
  5033  0003  0008               	return
  5034  0004                     __end_of_WDT_Clearing:	
  5035                           
  5036                           	psect	text8
  5037  1A21                     __ptext8:	
  5038 ;; *************** function _Temp_Main *****************
  5039 ;; Defined at:
  5040 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;		None
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;		None
  5045 ;; Return value:  Size  Location     Type
  5046 ;;		None               void
  5047 ;; Registers used:
  5048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;Total ram usage:        0 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    8
  5061 ;; This function calls:
  5062 ;;		_setTemp_Main
  5063 ;; This function is called by:
  5064 ;;		_main
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           
  5069                           ;psect for function _Temp_Main
  5070  1A21                     _Temp_Main:	
  5071                           
  5072                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5073                           
  5074                           ;incstack = 0
  5075                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5076  1A21  318D  251D         	fcall	_setTemp_Main
  5077  1A23  0008               	return
  5078  1A24                     __end_of_Temp_Main:	
  5079                           
  5080                           	psect	text9
  5081  0D1D                     __ptext9:	
  5082 ;; *************** function _setTemp_Main *****************
  5083 ;; Defined at:
  5084 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;		None
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  AD              2   76[BANK0 ] unsigned int 
  5089 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5090 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5091 ;;  TempGO          1   71[BANK0 ] unsigned char 
  5092 ;;  error           1   70[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;		None               void
  5095 ;; Registers used:
  5096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;Total ram usage:        9 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    7
  5109 ;; This function calls:
  5110 ;;		_getMain_All_Error_Status
  5111 ;;		_getMain_All_LightsStatus
  5112 ;;		_setBuz
  5113 ;;		_setProductData
  5114 ;; This function is called by:
  5115 ;;		_Temp_Main
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function _setTemp_Main
  5121  0D1D                     _setTemp_Main:	
  5122                           
  5123                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5124                           
  5125                           ;incstack = 0
  5126                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5127  0D1D  3000               	movlw	0
  5128  0D1E  3190  209A  318D   	fcall	_getMain_All_Error_Status
  5129  0D21  0020               	movlb	0	; select bank0
  5130  0D22  00E5               	movwf	??_setTemp_Main
  5131  0D23  0865               	movf	??_setTemp_Main,w
  5132  0D24  00E6               	movwf	setTemp_Main@error
  5133                           
  5134                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5135  0D25  01E8               	clrf	setTemp_Main@SafeValue
  5136  0D26  01E9               	clrf	setTemp_Main@SafeValue+1
  5137  0D27  01EA               	clrf	setTemp_Main@DangerValue
  5138  0D28  01EB               	clrf	setTemp_Main@DangerValue+1
  5139                           
  5140                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5141  0D29  319A  22AB  318D   	fcall	_getMain_All_LightsStatus
  5142  0D2C  0020               	movlb	0	; select bank0
  5143  0D2D  00E5               	movwf	??_setTemp_Main
  5144  0D2E  0865               	movf	??_setTemp_Main,w
  5145  0D2F  00E7               	movwf	setTemp_Main@TempGO
  5146                           
  5147                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5148  0D30  0021               	movlb	1	; select bank1
  5149  0D31  1C5A               	btfss	_Temp^(0+128),0
  5150  0D32  2DCA               	goto	l1789
  5151                           
  5152                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5153  0D33  195A               	btfsc	_Temp^(0+128),2
  5154  0D34  2D52               	goto	l10205
  5155                           
  5156                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5157  0D35  0020               	movlb	0	; select bank0
  5158  0D36  0867               	movf	setTemp_Main@TempGO,w
  5159  0D37  3A01               	xorlw	1
  5160  0D38  1D03               	skipz
  5161  0D39  2D3D               	goto	l1795
  5162  0D3A  0021               	movlb	1	; select bank1
  5163  0D3B  1CDA               	btfss	_Temp^(0+128),1
  5164  0D3C  2D40               	goto	l10197
  5165  0D3D                     l1795:	
  5166  0D3D  0021               	movlb	1	; select bank1
  5167  0D3E  1CDA               	btfss	_Temp^(0+128),1
  5168  0D3F  2D4F               	goto	l10203
  5169  0D40                     l10197:	
  5170                           
  5171                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5172  0D40  3001               	movlw	1
  5173  0D41  07DB               	addwf	(_Temp^(0+128)+1),f
  5174  0D42  3000               	movlw	0
  5175  0D43  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5176                           
  5177                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5178  0D44  3000               	movlw	0
  5179  0D45  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5180  0D46  30FA               	movlw	250
  5181  0D47  1903               	skipnz
  5182  0D48  025B               	subwf	(_Temp^(0+128)+1),w
  5183  0D49  1C03               	skipc
  5184  0D4A  0008               	return
  5185                           
  5186                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5187  0D4B  01DB               	clrf	(_Temp^(0+128)+1)
  5188  0D4C  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5189                           
  5190                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5191  0D4D  155A               	bsf	_Temp^(0+128),2
  5192                           
  5193                           ;OverTemperature_B1.c: 83: }
  5194                           ;OverTemperature_B1.c: 84: } else {
  5195  0D4E  0008               	return
  5196  0D4F                     l10203:	
  5197                           
  5198                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5199  0D4F  01DB               	clrf	(_Temp^(0+128)+1)
  5200  0D50  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5201                           
  5202                           ;OverTemperature_B1.c: 86: }
  5203                           ;OverTemperature_B1.c: 87: } else {
  5204  0D51  0008               	return
  5205  0D52                     l10205:	
  5206                           
  5207                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5208  0D52  3001               	movlw	1
  5209  0D53  07DB               	addwf	(_Temp^(0+128)+1),f
  5210  0D54  3000               	movlw	0
  5211  0D55  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5212                           
  5213                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5214  0D56  3000               	movlw	0
  5215  0D57  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5216  0D58  3005               	movlw	5
  5217  0D59  1903               	skipnz
  5218  0D5A  025B               	subwf	(_Temp^(0+128)+1),w
  5219  0D5B  1C03               	skipc
  5220  0D5C  0008               	return
  5221                           
  5222                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5223  0D5D  01DB               	clrf	(_Temp^(0+128)+1)
  5224  0D5E  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5225                           
  5226                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5227  0D5F  3008               	movlw	8
  5228  0D60  3EDA               	addlw	_Temp& (0+255)
  5229  0D61  0086               	movwf	6
  5230  0D62  0187               	clrf	7
  5231  0D63  0016               	moviw fsr1++
  5232  0D64  0401               	iorwf	1,w
  5233  0D65  1903               	skipnz
  5234  0D66  2DC2               	goto	l1800
  5235                           
  5236                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5237  0D67  115A               	bcf	_Temp^(0+128),2
  5238                           
  5239                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5240  0D68  0863               	movf	((_Temp+1)^(0+128)+8),w
  5241  0D69  0020               	movlb	0	; select bank0
  5242  0D6A  01ED               	clrf	setTemp_Main@AD+1
  5243  0D6B  07ED               	addwf	setTemp_Main@AD+1,f
  5244  0D6C  0021               	movlb	1	; select bank1
  5245  0D6D  0862               	movf	(_Temp^(0+128)+8),w
  5246  0D6E  0020               	movlb	0	; select bank0
  5247  0D6F  01EC               	clrf	setTemp_Main@AD
  5248  0D70  07EC               	addwf	setTemp_Main@AD,f
  5249                           
  5250                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5251  0D71  3090               	movlw	144
  5252  0D72  00E8               	movwf	setTemp_Main@SafeValue
  5253  0D73  3001               	movlw	1
  5254  0D74  00E9               	movwf	setTemp_Main@SafeValue+1
  5255                           
  5256                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5257  0D75  3059               	movlw	89
  5258  0D76  00EA               	movwf	setTemp_Main@DangerValue
  5259  0D77  3001               	movlw	1
  5260  0D78  00EB               	movwf	setTemp_Main@DangerValue+1
  5261                           
  5262                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5263  0D79  0021               	movlb	1	; select bank1
  5264  0D7A  1CDA               	btfss	_Temp^(0+128),1
  5265  0D7B  2D9A               	goto	l10235
  5266                           
  5267                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5268  0D7C  0020               	movlb	0	; select bank0
  5269  0D7D  0869               	movf	setTemp_Main@SafeValue+1,w
  5270  0D7E  026D               	subwf	setTemp_Main@AD+1,w
  5271  0D7F  1D03               	skipz
  5272  0D80  2D83               	goto	u11485
  5273  0D81  0868               	movf	setTemp_Main@SafeValue,w
  5274  0D82  026C               	subwf	setTemp_Main@AD,w
  5275  0D83                     u11485:	
  5276  0D83  1C03               	skipc
  5277  0D84  2DAF               	goto	l10245
  5278                           
  5279                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5280  0D85  3001               	movlw	1
  5281  0D86  00E5               	movwf	??_setTemp_Main
  5282  0D87  0865               	movf	??_setTemp_Main,w
  5283  0D88  0021               	movlb	1	; select bank1
  5284  0D89  07DD               	addwf	(_Temp^(0+128)+3),f
  5285                           
  5286                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5287  0D8A  3003               	movlw	3
  5288  0D8B  025D               	subwf	(_Temp^(0+128)+3),w
  5289  0D8C  1C03               	skipc
  5290  0D8D  2DB1               	goto	l10247
  5291                           
  5292                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5293  0D8E  01DD               	clrf	(_Temp^(0+128)+3)
  5294                           
  5295                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5296  0D8F  10DA               	bcf	_Temp^(0+128),1
  5297                           
  5298                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5299  0D90  3064               	movlw	100
  5300  0D91  0020               	movlb	0	; select bank0
  5301  0D92  00A9               	movwf	setBuz@time
  5302  0D93  3000               	movlw	0
  5303  0D94  00AA               	movwf	setBuz@time+1
  5304  0D95  3002               	movlw	2
  5305  0D96  3194  2489  318D   	fcall	_setBuz
  5306                           
  5307                           ;OverTemperature_B1.c: 126: }
  5308                           ;OverTemperature_B1.c: 127: } else {
  5309  0D99  2DB1               	goto	l10247
  5310  0D9A                     l10235:	
  5311                           ;OverTemperature_B1.c: 129: }
  5312                           ;OverTemperature_B1.c: 130: } else {
  5313                           
  5314                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5315                           
  5316                           
  5317                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5318  0D9A  0020               	movlb	0	; select bank0
  5319  0D9B  086D               	movf	setTemp_Main@AD+1,w
  5320  0D9C  026B               	subwf	setTemp_Main@DangerValue+1,w
  5321  0D9D  1D03               	skipz
  5322  0D9E  2DA1               	goto	u11505
  5323  0D9F  086C               	movf	setTemp_Main@AD,w
  5324  0DA0  026A               	subwf	setTemp_Main@DangerValue,w
  5325  0DA1                     u11505:	
  5326  0DA1  1C03               	skipc
  5327  0DA2  2DAF               	goto	l10245
  5328                           
  5329                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5330  0DA3  3001               	movlw	1
  5331  0DA4  00E5               	movwf	??_setTemp_Main
  5332  0DA5  0865               	movf	??_setTemp_Main,w
  5333  0DA6  0021               	movlb	1	; select bank1
  5334  0DA7  07DD               	addwf	(_Temp^(0+128)+3),f
  5335                           
  5336                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5337  0DA8  3003               	movlw	3
  5338  0DA9  025D               	subwf	(_Temp^(0+128)+3),w
  5339  0DAA  1C03               	skipc
  5340  0DAB  2DB1               	goto	l10247
  5341                           
  5342                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5343  0DAC  01DD               	clrf	(_Temp^(0+128)+3)
  5344                           
  5345                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5346  0DAD  14DA               	bsf	_Temp^(0+128),1
  5347                           
  5348                           ;OverTemperature_B1.c: 136: }
  5349                           ;OverTemperature_B1.c: 137: } else {
  5350  0DAE  2DB1               	goto	l10247
  5351  0DAF                     l10245:	
  5352                           
  5353                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5354  0DAF  0021               	movlb	1	; select bank1
  5355  0DB0  01DD               	clrf	(_Temp^(0+128)+3)
  5356  0DB1                     l10247:	
  5357                           
  5358                           ;OverTemperature_B1.c: 139: }
  5359                           ;OverTemperature_B1.c: 140: }
  5360                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5361  0DB1  0020               	movlb	0	; select bank0
  5362  0DB2  086D               	movf	setTemp_Main@AD+1,w
  5363  0DB3  00E5               	movwf	??_setTemp_Main
  5364  0DB4  0865               	movf	??_setTemp_Main,w
  5365  0DB5  00E2               	movwf	setProductData@value
  5366  0DB6  3018               	movlw	24
  5367  0DB7  319B  2304  318D   	fcall	_setProductData
  5368                           
  5369                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5370  0DBA  0020               	movlb	0	; select bank0
  5371  0DBB  086C               	movf	setTemp_Main@AD,w
  5372  0DBC  00E5               	movwf	??_setTemp_Main
  5373  0DBD  0865               	movf	??_setTemp_Main,w
  5374  0DBE  00E2               	movwf	setProductData@value
  5375  0DBF  3019               	movlw	25
  5376  0DC0  319B  2304         	fcall	_setProductData
  5377  0DC2                     l1800:	
  5378                           
  5379                           ;OverTemperature_B1.c: 158: }
  5380                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5381  0DC2  0021               	movlb	1	; select bank1
  5382  0DC3  01DE               	clrf	(_Temp^(0+128)+4)
  5383  0DC4  01DF               	clrf	((_Temp+1)^(0+128)+4)
  5384                           
  5385                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5386  0DC5  01E0               	clrf	(_Temp^(0+128)+6)
  5387  0DC6  01E1               	clrf	((_Temp+1)^(0+128)+6)
  5388                           
  5389                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5390  0DC7  01E2               	clrf	(_Temp^(0+128)+8)
  5391  0DC8  01E3               	clrf	((_Temp+1)^(0+128)+8)
  5392                           
  5393                           ;OverTemperature_B1.c: 162: }
  5394                           ;OverTemperature_B1.c: 163: }
  5395                           ;OverTemperature_B1.c: 166: } else {
  5396  0DC9  0008               	return
  5397  0DCA                     l1789:	
  5398                           
  5399                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5400  0DCA  1C2F               	btfss	_myMain^(0+128),0
  5401  0DCB  0008               	return
  5402                           
  5403                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5404  0DCC  145A               	bsf	_Temp^(0+128),0
  5405  0DCD  0008               	return
  5406  0DCE                     __end_of_setTemp_Main:	
  5407                           
  5408                           	psect	text10
  5409  1A1E                     __ptext10:	
  5410 ;; *************** function _Temp_Initialization *****************
  5411 ;; Defined at:
  5412 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;		None               void
  5419 ;; Registers used:
  5420 ;;		status,2, status,0, pclath, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    6
  5433 ;; This function calls:
  5434 ;;		_setTemp_Initialization
  5435 ;; This function is called by:
  5436 ;;		_main
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _Temp_Initialization
  5442  1A1E                     _Temp_Initialization:	
  5443                           
  5444                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5448  1A1E  319A  2211         	fcall	_setTemp_Initialization
  5449  1A20  0008               	return
  5450  1A21                     __end_of_Temp_Initialization:	
  5451                           
  5452                           	psect	text11
  5453  1A11                     __ptext11:	
  5454 ;; *************** function _setTemp_Initialization *****************
  5455 ;; Defined at:
  5456 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;		None               void
  5463 ;; Registers used:
  5464 ;;		None
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;Total ram usage:        0 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    5
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_Temp_Initialization
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _setTemp_Initialization
  5486  1A11                     _setTemp_Initialization:	
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in _setTemp_Initialization: []
  5490  1A11  0008               	return
  5491  1A12                     __end_of_setTemp_Initialization:	
  5492                           
  5493                           	psect	text12
  5494  1A71                     __ptext12:	
  5495 ;; *************** function _Switch_Main *****************
  5496 ;; Defined at:
  5497 ;;		line 76 in file "../src/Switch_B1.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;Total ram usage:        0 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    9
  5518 ;; This function calls:
  5519 ;;		_TouchPower
  5520 ;;		_setSw_Main
  5521 ;; This function is called by:
  5522 ;;		_main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _Switch_Main
  5528  1A71                     _Switch_Main:	
  5529                           
  5530                           ;Switch_B1.c: 79: setSw_Main(1);
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5534  1A71  3001               	movlw	1
  5535  1A72  3182  22AE  319A   	fcall	_setSw_Main
  5536                           
  5537                           ;Switch_B1.c: 91: TouchPower();
  5538  1A75  319D  252D         	fcall	_TouchPower
  5539  1A77  0008               	return
  5540  1A78                     __end_of_Switch_Main:	
  5541                           
  5542                           	psect	text13
  5543  02AE                     __ptext13:	
  5544 ;; *************** function _setSw_Main *****************
  5545 ;; Defined at:
  5546 ;;		line 117 in file "../src/Switch_B1.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  sw              1    wreg     unsigned char 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;  sw              1   17[BANK0 ] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;		None               void
  5553 ;; Registers used:
  5554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;Total ram usage:        3 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    8
  5567 ;; This function calls:
  5568 ;;		_SwPointSelect
  5569 ;;		_getMain_All_Error_Status
  5570 ;;		_getSw_KeyStatus
  5571 ;;		_setBuz
  5572 ;;		_setDimmerLights_DimmingOn
  5573 ;;		_setDimmerLights_SwOff
  5574 ;;		_setDimmerLights_SwOn
  5575 ;;		_setRF_Learn
  5576 ;; This function is called by:
  5577 ;;		_Switch_Main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _setSw_Main
  5583  02AE                     _setSw_Main:	
  5584                           
  5585                           ;incstack = 0
  5586                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5587                           ;setSw_Main@sw stored from wreg
  5588  02AE  0020               	movlb	0	; select bank0
  5589  02AF  00B1               	movwf	setSw_Main@sw
  5590                           
  5591                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5592  02B0  0831               	movf	setSw_Main@sw,w
  5593  02B1  319B  2364  3182   	fcall	_SwPointSelect
  5594                           
  5595                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5596  02B4  0021               	movlb	1	; select bank1
  5597  02B5  0854               	movf	_Sw^(0+128),w
  5598  02B6  0086               	movwf	6
  5599  02B7  3001               	movlw	1	; select bank2/3
  5600  02B8  0087               	movwf	7
  5601  02B9  1C01               	btfss	1,0
  5602  02BA  2C2A               	goto	l2514
  5603                           
  5604                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5605  02BB  3000               	movlw	0
  5606  02BC  3190  209A  3182   	fcall	_getMain_All_Error_Status
  5607  02BF  3800               	iorlw	0
  5608  02C0  1D03               	skipz
  5609  02C1  2AE0               	goto	l10359
  5610                           
  5611                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5612  02C2  0021               	movlb	1	; select bank1
  5613  02C3  0A54               	incf	_Sw^(0+128),w
  5614  02C4  0086               	movwf	6
  5615  02C5  3001               	movlw	1	; select bank2/3
  5616  02C6  0087               	movwf	7
  5617  02C7  1081               	bcf	1,1
  5618                           
  5619                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5620  02C8  0020               	movlb	0	; select bank0
  5621  02C9  0831               	movf	setSw_Main@sw,w
  5622  02CA  319C  2410  3182   	fcall	_getSw_KeyStatus
  5623  02CD  3A01               	xorlw	1
  5624  02CE  3000               	movlw	0
  5625  02CF  1903               	skipnz
  5626  02D0  3001               	movlw	1
  5627  02D1  0020               	movlb	0	; select bank0
  5628  02D2  00AF               	movwf	??_setSw_Main
  5629  02D3  0021               	movlb	1	; select bank1
  5630  02D4  0854               	movf	_Sw^(0+128),w
  5631  02D5  0086               	movwf	6
  5632  02D6  3001               	movlw	1	; select bank2/3
  5633  02D7  0087               	movwf	7
  5634  02D8  0020               	movlb	0	; select bank0
  5635  02D9  0DAF               	rlf	??_setSw_Main,f
  5636  02DA  0801               	movf	1,w
  5637  02DB  062F               	xorwf	??_setSw_Main,w
  5638  02DC  39FD               	andlw	-3
  5639  02DD  062F               	xorwf	??_setSw_Main,w
  5640  02DE  0081               	movwf	1
  5641                           
  5642                           ;Switch_B1.c: 124: } else {
  5643  02DF  2AF6               	goto	l2516
  5644  02E0                     l10359:	
  5645                           
  5646                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5647  02E0  0021               	movlb	1	; select bank1
  5648  02E1  0A54               	incf	_Sw^(0+128),w
  5649  02E2  0086               	movwf	6
  5650  02E3  3001               	movlw	1	; select bank2/3
  5651  02E4  0087               	movwf	7
  5652  02E5  1881               	btfsc	1,1
  5653  02E6  2AF6               	goto	l2516
  5654                           
  5655                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5656  02E7  0A54               	incf	_Sw^(0+128),w
  5657  02E8  0086               	movwf	6
  5658  02E9  3001               	movlw	1	; select bank2/3
  5659  02EA  0087               	movwf	7
  5660  02EB  1481               	bsf	1,1
  5661                           
  5662                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5663  02EC  0854               	movf	_Sw^(0+128),w
  5664  02ED  0086               	movwf	6
  5665  02EE  3001               	movlw	1	; select bank2/3
  5666  02EF  0087               	movwf	7
  5667  02F0  1081               	bcf	1,1
  5668                           
  5669                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5670  02F1  0854               	movf	_Sw^(0+128),w
  5671  02F2  0086               	movwf	6
  5672  02F3  3001               	movlw	1	; select bank2/3
  5673  02F4  0087               	movwf	7
  5674  02F5  1501               	bsf	1,2
  5675  02F6                     l2516:	
  5676                           
  5677                           ;Switch_B1.c: 130: }
  5678                           ;Switch_B1.c: 131: }
  5679                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5680  02F6  0021               	movlb	1	; select bank1
  5681  02F7  0854               	movf	_Sw^(0+128),w
  5682  02F8  0086               	movwf	6
  5683  02F9  3001               	movlw	1	; select bank2/3
  5684  02FA  0087               	movwf	7
  5685  02FB  1C81               	btfss	1,1
  5686  02FC  2BD2               	goto	l10409
  5687                           
  5688                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5689  02FD  0854               	movf	_Sw^(0+128),w
  5690  02FE  0086               	movwf	6
  5691  02FF  3001               	movlw	1	; select bank2/3
  5692  0300  0087               	movwf	7
  5693  0301  1901               	btfsc	1,2
  5694  0302  2B29               	goto	l10375
  5695                           
  5696                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5697  0303  3001               	movlw	1
  5698  0304  0020               	movlb	0	; select bank0
  5699  0305  00AF               	movwf	??_setSw_Main
  5700  0306  0021               	movlb	1	; select bank1
  5701  0307  0854               	movf	_Sw^(0+128),w
  5702  0308  3E02               	addlw	2
  5703  0309  0086               	movwf	6
  5704  030A  3001               	movlw	1	; select bank2/3
  5705  030B  0087               	movwf	7
  5706  030C  0020               	movlb	0	; select bank0
  5707  030D  082F               	movf	??_setSw_Main,w
  5708  030E  0781               	addwf	1,f
  5709                           
  5710                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5711  030F  0021               	movlb	1	; select bank1
  5712  0310  0854               	movf	_Sw^(0+128),w
  5713  0311  3E02               	addlw	2
  5714  0312  0086               	movwf	6
  5715  0313  3001               	movlw	1	; select bank2/3
  5716  0314  0087               	movwf	7
  5717  0315  3003               	movlw	3
  5718  0316  0201               	subwf	1,w
  5719  0317  1C03               	skipc
  5720  0318  0008               	return
  5721                           
  5722                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5723  0319  0854               	movf	_Sw^(0+128),w
  5724  031A  3E02               	addlw	2
  5725  031B  0086               	movwf	6
  5726  031C  3001               	movlw	1	; select bank2/3
  5727  031D  0087               	movwf	7
  5728  031E  0181               	clrf	1
  5729                           
  5730                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5731  031F  0854               	movf	_Sw^(0+128),w
  5732  0320  0086               	movwf	6
  5733  0321  3001               	movlw	1	; select bank2/3
  5734  0322  0087               	movwf	7
  5735  0323  1501               	bsf	1,2
  5736                           
  5737                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5738  0324  0020               	movlb	0	; select bank0
  5739  0325  0831               	movf	setSw_Main@sw,w
  5740  0326  3191  2101         	fcall	_setDimmerLights_SwOn
  5741                           
  5742                           ;Switch_B1.c: 146: }
  5743                           ;Switch_B1.c: 147: } else {
  5744  0328  0008               	return
  5745  0329                     l10375:	
  5746                           
  5747                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5748  0329  0021               	movlb	1	; select bank1
  5749  032A  0854               	movf	_Sw^(0+128),w
  5750  032B  0086               	movwf	6
  5751  032C  3001               	movlw	1	; select bank2/3
  5752  032D  0087               	movwf	7
  5753  032E  1981               	btfsc	1,3
  5754  032F  2B5E               	goto	l10385
  5755                           
  5756                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5757  0330  0854               	movf	_Sw^(0+128),w
  5758  0331  3E03               	addlw	3
  5759  0332  0086               	movwf	6
  5760  0333  3001               	movlw	1	; select bank2/3
  5761  0334  0087               	movwf	7
  5762  0335  3001               	movlw	1
  5763  0336  0781               	addwf	1,f
  5764  0337  3141               	addfsr 1,1
  5765  0338  1803               	skipnc
  5766  0339  0A81               	incf	1,f
  5767                           
  5768                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5769  033A  0854               	movf	_Sw^(0+128),w
  5770  033B  3E03               	addlw	3
  5771  033C  0086               	movwf	6
  5772  033D  3001               	movlw	1	; select bank2/3
  5773  033E  0087               	movwf	7
  5774  033F  3F40               	moviw [0]fsr1
  5775  0340  0020               	movlb	0	; select bank0
  5776  0341  00AF               	movwf	??_setSw_Main
  5777  0342  3F41               	moviw [1]fsr1
  5778  0343  00B0               	movwf	??_setSw_Main+1
  5779  0344  3000               	movlw	0
  5780  0345  0230               	subwf	??_setSw_Main+1,w
  5781  0346  304B               	movlw	75
  5782  0347  1903               	skipnz
  5783  0348  022F               	subwf	??_setSw_Main,w
  5784  0349  1C03               	skipc
  5785  034A  0008               	return
  5786                           
  5787                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5788  034B  0021               	movlb	1	; select bank1
  5789  034C  0854               	movf	_Sw^(0+128),w
  5790  034D  3E03               	addlw	3
  5791  034E  0086               	movwf	6
  5792  034F  3001               	movlw	1	; select bank2/3
  5793  0350  0087               	movwf	7
  5794  0351  3000               	movlw	0
  5795  0352  3FC0               	movwi [0]fsr1
  5796  0353  3FC1               	movwi [1]fsr1
  5797                           
  5798                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5799  0354  0854               	movf	_Sw^(0+128),w
  5800  0355  0086               	movwf	6
  5801  0356  3001               	movlw	1	; select bank2/3
  5802  0357  0087               	movwf	7
  5803  0358  1581               	bsf	1,3
  5804                           
  5805                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5806  0359  0020               	movlb	0	; select bank0
  5807  035A  0831               	movf	setSw_Main@sw,w
  5808  035B  319F  27D8         	fcall	_setDimmerLights_DimmingOn
  5809                           
  5810                           ;Switch_B1.c: 161: }
  5811                           ;Switch_B1.c: 162: } else {
  5812  035D  0008               	return
  5813  035E                     l10385:	
  5814                           
  5815                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5816  035E  0021               	movlb	1	; select bank1
  5817  035F  0854               	movf	_Sw^(0+128),w
  5818  0360  0086               	movwf	6
  5819  0361  3001               	movlw	1	; select bank2/3
  5820  0362  0087               	movwf	7
  5821  0363  1A01               	btfsc	1,4
  5822  0364  2B9E               	goto	l10399
  5823                           
  5824                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5825  0365  0854               	movf	_Sw^(0+128),w
  5826  0366  3E05               	addlw	5
  5827  0367  0086               	movwf	6
  5828  0368  3001               	movlw	1	; select bank2/3
  5829  0369  0087               	movwf	7
  5830  036A  3001               	movlw	1
  5831  036B  0781               	addwf	1,f
  5832  036C  3141               	addfsr 1,1
  5833  036D  1803               	skipnc
  5834  036E  0A81               	incf	1,f
  5835                           
  5836                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5837  036F  0854               	movf	_Sw^(0+128),w
  5838  0370  3E05               	addlw	5
  5839  0371  0086               	movwf	6
  5840  0372  3001               	movlw	1	; select bank2/3
  5841  0373  0087               	movwf	7
  5842  0374  3F40               	moviw [0]fsr1
  5843  0375  0020               	movlb	0	; select bank0
  5844  0376  00AF               	movwf	??_setSw_Main
  5845  0377  3F41               	moviw [1]fsr1
  5846  0378  00B0               	movwf	??_setSw_Main+1
  5847  0379  3000               	movlw	0
  5848  037A  0230               	subwf	??_setSw_Main+1,w
  5849  037B  304B               	movlw	75
  5850  037C  1903               	skipnz
  5851  037D  022F               	subwf	??_setSw_Main,w
  5852  037E  1C03               	skipc
  5853  037F  0008               	return
  5854                           
  5855                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5856  0380  0021               	movlb	1	; select bank1
  5857  0381  0854               	movf	_Sw^(0+128),w
  5858  0382  3E05               	addlw	5
  5859  0383  0086               	movwf	6
  5860  0384  3001               	movlw	1	; select bank2/3
  5861  0385  0087               	movwf	7
  5862  0386  3000               	movlw	0
  5863  0387  3FC0               	movwi [0]fsr1
  5864  0388  3FC1               	movwi [1]fsr1
  5865                           
  5866                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5867  0389  0854               	movf	_Sw^(0+128),w
  5868  038A  0086               	movwf	6
  5869  038B  3001               	movlw	1	; select bank2/3
  5870  038C  0087               	movwf	7
  5871  038D  1601               	bsf	1,4
  5872                           
  5873                           ;Switch_B1.c: 171: setRF_Learn(1);
  5874  038E  3001               	movlw	1
  5875  038F  319C  24DA  3182   	fcall	_setRF_Learn
  5876                           
  5877                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5878  0392  0021               	movlb	1	; select bank1
  5879  0393  1EAF               	btfss	_myMain^(0+128),5
  5880  0394  0008               	return
  5881                           
  5882                           ;Switch_B1.c: 173: setBuz(2, 100);
  5883  0395  3064               	movlw	100
  5884  0396  0020               	movlb	0	; select bank0
  5885  0397  00A9               	movwf	setBuz@time
  5886  0398  3000               	movlw	0
  5887  0399  00AA               	movwf	setBuz@time+1
  5888  039A  3002               	movlw	2
  5889  039B  3194  2489         	fcall	_setBuz
  5890                           
  5891                           ;Switch_B1.c: 174: }
  5892                           ;Switch_B1.c: 178: }
  5893                           ;Switch_B1.c: 179: } else {
  5894  039D  0008               	return
  5895  039E                     l10399:	
  5896                           
  5897                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5898  039E  0021               	movlb	1	; select bank1
  5899  039F  0854               	movf	_Sw^(0+128),w
  5900  03A0  0086               	movwf	6
  5901  03A1  3001               	movlw	1	; select bank2/3
  5902  03A2  0087               	movwf	7
  5903  03A3  1A81               	btfsc	1,5
  5904  03A4  0008               	return
  5905                           
  5906                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5907  03A5  0854               	movf	_Sw^(0+128),w
  5908  03A6  3E07               	addlw	7
  5909  03A7  0086               	movwf	6
  5910  03A8  3001               	movlw	1	; select bank2/3
  5911  03A9  0087               	movwf	7
  5912  03AA  3001               	movlw	1
  5913  03AB  0781               	addwf	1,f
  5914  03AC  3141               	addfsr 1,1
  5915  03AD  1803               	skipnc
  5916  03AE  0A81               	incf	1,f
  5917                           
  5918                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5919  03AF  0854               	movf	_Sw^(0+128),w
  5920  03B0  3E07               	addlw	7
  5921  03B1  0086               	movwf	6
  5922  03B2  3001               	movlw	1	; select bank2/3
  5923  03B3  0087               	movwf	7
  5924  03B4  3F40               	moviw [0]fsr1
  5925  03B5  0020               	movlb	0	; select bank0
  5926  03B6  00AF               	movwf	??_setSw_Main
  5927  03B7  3F41               	moviw [1]fsr1
  5928  03B8  00B0               	movwf	??_setSw_Main+1
  5929  03B9  3000               	movlw	0
  5930  03BA  0230               	subwf	??_setSw_Main+1,w
  5931  03BB  3096               	movlw	150
  5932  03BC  1903               	skipnz
  5933  03BD  022F               	subwf	??_setSw_Main,w
  5934  03BE  1C03               	skipc
  5935  03BF  0008               	return
  5936                           
  5937                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5938  03C0  0021               	movlb	1	; select bank1
  5939  03C1  0854               	movf	_Sw^(0+128),w
  5940  03C2  3E07               	addlw	7
  5941  03C3  0086               	movwf	6
  5942  03C4  3001               	movlw	1	; select bank2/3
  5943  03C5  0087               	movwf	7
  5944  03C6  3000               	movlw	0
  5945  03C7  3FC0               	movwi [0]fsr1
  5946  03C8  3FC1               	movwi [1]fsr1
  5947                           
  5948                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5949  03C9  0854               	movf	_Sw^(0+128),w
  5950  03CA  0086               	movwf	6
  5951  03CB  3001               	movlw	1	; select bank2/3
  5952  03CC  0087               	movwf	7
  5953  03CD  1681               	bsf	1,5
  5954                           
  5955                           ;Switch_B1.c: 187: setRF_Learn(0);
  5956  03CE  3000               	movlw	0
  5957  03CF  319C  24DA         	fcall	_setRF_Learn
  5958                           
  5959                           ;Switch_B1.c: 190: }
  5960                           ;Switch_B1.c: 191: }
  5961                           ;Switch_B1.c: 192: }
  5962                           ;Switch_B1.c: 194: }
  5963                           ;Switch_B1.c: 195: }
  5964                           ;Switch_B1.c: 196: } else {
  5965  03D1  0008               	return
  5966  03D2                     l10409:	
  5967                           
  5968                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5969  03D2  0021               	movlb	1	; select bank1
  5970  03D3  0854               	movf	_Sw^(0+128),w
  5971  03D4  0086               	movwf	6
  5972  03D5  3001               	movlw	1	; select bank2/3
  5973  03D6  0087               	movwf	7
  5974  03D7  1D01               	btfss	1,2
  5975  03D8  0008               	return
  5976                           
  5977                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5978  03D9  3001               	movlw	1
  5979  03DA  0020               	movlb	0	; select bank0
  5980  03DB  00AF               	movwf	??_setSw_Main
  5981  03DC  0021               	movlb	1	; select bank1
  5982  03DD  0854               	movf	_Sw^(0+128),w
  5983  03DE  3E02               	addlw	2
  5984  03DF  0086               	movwf	6
  5985  03E0  3001               	movlw	1	; select bank2/3
  5986  03E1  0087               	movwf	7
  5987  03E2  0020               	movlb	0	; select bank0
  5988  03E3  082F               	movf	??_setSw_Main,w
  5989  03E4  0781               	addwf	1,f
  5990                           
  5991                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5992  03E5  0021               	movlb	1	; select bank1
  5993  03E6  0854               	movf	_Sw^(0+128),w
  5994  03E7  3E02               	addlw	2
  5995  03E8  0086               	movwf	6
  5996  03E9  3001               	movlw	1	; select bank2/3
  5997  03EA  0087               	movwf	7
  5998  03EB  3003               	movlw	3
  5999  03EC  0201               	subwf	1,w
  6000  03ED  1C03               	skipc
  6001  03EE  0008               	return
  6002                           
  6003                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6004  03EF  0854               	movf	_Sw^(0+128),w
  6005  03F0  3E02               	addlw	2
  6006  03F1  0086               	movwf	6
  6007  03F2  3001               	movlw	1	; select bank2/3
  6008  03F3  0087               	movwf	7
  6009  03F4  0181               	clrf	1
  6010                           
  6011                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6012  03F5  0854               	movf	_Sw^(0+128),w
  6013  03F6  0086               	movwf	6
  6014  03F7  3001               	movlw	1	; select bank2/3
  6015  03F8  0087               	movwf	7
  6016  03F9  1101               	bcf	1,2
  6017                           
  6018                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6019  03FA  0854               	movf	_Sw^(0+128),w
  6020  03FB  3E03               	addlw	3
  6021  03FC  0086               	movwf	6
  6022  03FD  3001               	movlw	1	; select bank2/3
  6023  03FE  0087               	movwf	7
  6024  03FF  3000               	movlw	0
  6025  0400  3FC0               	movwi [0]fsr1
  6026  0401  3FC1               	movwi [1]fsr1
  6027                           
  6028                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6029  0402  0854               	movf	_Sw^(0+128),w
  6030  0403  0086               	movwf	6
  6031  0404  3001               	movlw	1	; select bank2/3
  6032  0405  0087               	movwf	7
  6033  0406  1181               	bcf	1,3
  6034                           
  6035                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6036  0407  0854               	movf	_Sw^(0+128),w
  6037  0408  0086               	movwf	6
  6038  0409  3001               	movlw	1	; select bank2/3
  6039  040A  0087               	movwf	7
  6040  040B  1201               	bcf	1,4
  6041                           
  6042                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6043  040C  0854               	movf	_Sw^(0+128),w
  6044  040D  0086               	movwf	6
  6045  040E  3001               	movlw	1	; select bank2/3
  6046  040F  0087               	movwf	7
  6047  0410  1281               	bcf	1,5
  6048                           
  6049                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6050  0411  0854               	movf	_Sw^(0+128),w
  6051  0412  3E05               	addlw	5
  6052  0413  0086               	movwf	6
  6053  0414  3001               	movlw	1	; select bank2/3
  6054  0415  0087               	movwf	7
  6055  0416  3000               	movlw	0
  6056  0417  3FC0               	movwi [0]fsr1
  6057  0418  3FC1               	movwi [1]fsr1
  6058                           
  6059                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6060  0419  0854               	movf	_Sw^(0+128),w
  6061  041A  3E07               	addlw	7
  6062  041B  0086               	movwf	6
  6063  041C  3001               	movlw	1	; select bank2/3
  6064  041D  0087               	movwf	7
  6065  041E  3000               	movlw	0
  6066  041F  3FC0               	movwi [0]fsr1
  6067  0420  3FC1               	movwi [1]fsr1
  6068                           
  6069                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6070  0421  0020               	movlb	0	; select bank0
  6071  0422  0831               	movf	setSw_Main@sw,w
  6072  0423  3191  21A3  3182   	fcall	_setDimmerLights_SwOff
  6073                           
  6074                           ;Switch_B1.c: 219: setRF_Learn(0);
  6075  0426  3000               	movlw	0
  6076  0427  319C  24DA         	fcall	_setRF_Learn
  6077                           
  6078                           ;Switch_B1.c: 221: }
  6079                           ;Switch_B1.c: 222: }
  6080                           ;Switch_B1.c: 223: }
  6081                           ;Switch_B1.c: 224: } else {
  6082  0429  0008               	return
  6083  042A                     l2514:	
  6084                           
  6085                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6086  042A  1C2F               	btfss	_myMain^(0+128),0
  6087  042B  0008               	return
  6088                           
  6089                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6090  042C  0854               	movf	_Sw^(0+128),w
  6091  042D  0086               	movwf	6
  6092  042E  3001               	movlw	1	; select bank2/3
  6093  042F  0087               	movwf	7
  6094  0430  1401               	bsf	1,0
  6095  0431  0008               	return
  6096  0432                     __end_of_setSw_Main:	
  6097                           
  6098                           	psect	text14
  6099  1CDA                     __ptext14:	
  6100 ;; *************** function _setRF_Learn *****************
  6101 ;; Defined at:
  6102 ;;		line 33 in file "../src/RF_Control_B1.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  command         1    wreg     unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  command         1    1[BANK0 ] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;		None               void
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;Total ram usage:        2 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    5
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_setSw_Main
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           
  6131                           ;psect for function _setRF_Learn
  6132  1CDA                     _setRF_Learn:	
  6133                           
  6134                           ;incstack = 0
  6135                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6136                           ;setRF_Learn@command stored from wreg
  6137  1CDA  0020               	movlb	0	; select bank0
  6138  1CDB  00A1               	movwf	setRF_Learn@command
  6139                           
  6140                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6141  1CDC  0821               	movf	setRF_Learn@command,w
  6142  1CDD  3A01               	xorlw	1
  6143  1CDE  3000               	movlw	0
  6144  1CDF  1903               	skipnz
  6145  1CE0  3001               	movlw	1
  6146  1CE1  00A0               	movwf	??_setRF_Learn
  6147  1CE2  0EA0               	swapf	??_setRF_Learn,f
  6148  1CE3  0DA0               	rlf	??_setRF_Learn,f
  6149  1CE4  0DA0               	rlf	??_setRF_Learn,f
  6150  1CE5  0021               	movlb	1	; select bank1
  6151  1CE6  0820               	movf	_RF1^(0+128),w
  6152  1CE7  0020               	movlb	0	; select bank0
  6153  1CE8  0620               	xorwf	??_setRF_Learn,w
  6154  1CE9  39BF               	andlw	-65
  6155  1CEA  0620               	xorwf	??_setRF_Learn,w
  6156  1CEB  0021               	movlb	1	; select bank1
  6157  1CEC  00A0               	movwf	_RF1^(0+128)
  6158  1CED  0008               	return
  6159  1CEE                     __end_of_setRF_Learn:	
  6160                           
  6161                           	psect	text15
  6162  1FD8                     __ptext15:	
  6163 ;; *************** function _setDimmerLights_DimmingOn *****************
  6164 ;; Defined at:
  6165 ;;		line 759 in file "../src/Dimmer_B1.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  sw              1    wreg     unsigned char 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  sw              1    2[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;		None               void
  6172 ;; Registers used:
  6173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;Total ram usage:        1 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    6
  6186 ;; This function calls:
  6187 ;;		_DimmerLights_SelectPointer
  6188 ;; This function is called by:
  6189 ;;		_setSw_Main
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _setDimmerLights_DimmingOn
  6195  1FD8                     _setDimmerLights_DimmingOn:	
  6196                           
  6197                           ;incstack = 0
  6198                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6199                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6200  1FD8  0020               	movlb	0	; select bank0
  6201  1FD9  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6202                           
  6203                           ;Dimmer_B1.c: 765: DimmerLights_SelectPointer(sw);
  6204  1FDA  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6205  1FDB  319A  22F8  319F   	fcall	_DimmerLights_SelectPointer
  6206                           
  6207                           ;Dimmer_B1.c: 766: if (DimmerLights->Trigger == 0) {
  6208  1FDE  0021               	movlb	1	; select bank1
  6209  1FDF  084E               	movf	_DimmerLights^(0+128),w
  6210  1FE0  0086               	movwf	6
  6211  1FE1  3001               	movlw	1	; select bank2/3
  6212  1FE2  0087               	movwf	7
  6213  1FE3  1881               	btfsc	1,1
  6214  1FE4  0008               	return
  6215                           
  6216                           ;Dimmer_B1.c: 767: if (DimmerLights->SwFlag == 1) {
  6217  1FE5  084E               	movf	_DimmerLights^(0+128),w
  6218  1FE6  0086               	movwf	6
  6219  1FE7  3001               	movlw	1	; select bank2/3
  6220  1FE8  0087               	movwf	7
  6221  1FE9  1C01               	btfss	1,0
  6222  1FEA  0008               	return
  6223                           
  6224                           ;Dimmer_B1.c: 768: DimmerLights->Status = 1;
  6225  1FEB  0A4E               	incf	_DimmerLights^(0+128),w
  6226  1FEC  0086               	movwf	6
  6227  1FED  3001               	movlw	1	; select bank2/3
  6228  1FEE  0087               	movwf	7
  6229  1FEF  1401               	bsf	1,0
  6230                           
  6231                           ;Dimmer_B1.c: 770: DimmerLights->DimmingSwFlag = 1;
  6232  1FF0  084E               	movf	_DimmerLights^(0+128),w
  6233  1FF1  0086               	movwf	6
  6234  1FF2  3001               	movlw	1	; select bank2/3
  6235  1FF3  0087               	movwf	7
  6236  1FF4  1581               	bsf	1,3
  6237                           
  6238                           ;Dimmer_B1.c: 771: DimmerLights->DimmingTrigger = 1;
  6239  1FF5  084E               	movf	_DimmerLights^(0+128),w
  6240  1FF6  0086               	movwf	6
  6241  1FF7  3001               	movlw	1	; select bank2/3
  6242  1FF8  0087               	movwf	7
  6243  1FF9  1601               	bsf	1,4
  6244                           
  6245                           ;Dimmer_B1.c: 772: DimmerLights->DimmingSwitch = 1;
  6246  1FFA  084E               	movf	_DimmerLights^(0+128),w
  6247  1FFB  0086               	movwf	6
  6248  1FFC  3001               	movlw	1	; select bank2/3
  6249  1FFD  0087               	movwf	7
  6250  1FFE  1681               	bsf	1,5
  6251  1FFF  0008               	return
  6252  2000                     __end_of_setDimmerLights_DimmingOn:	
  6253                           
  6254                           	psect	text16
  6255  1C10                     __ptext16:	
  6256 ;; *************** function _getSw_KeyStatus *****************
  6257 ;; Defined at:
  6258 ;;		line 237 in file "../src/Switch_B1.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  sw              1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  sw              1    0[COMMON] unsigned char 
  6263 ;;  status          1    1[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      unsigned char 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;Total ram usage:        3 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    5
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_setSw_Main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _getSw_KeyStatus
  6289  1C10                     _getSw_KeyStatus:	
  6290                           
  6291                           ;Switch_B1.c: 238: char status = 0;
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6295  1C10  0020               	movlb	0	; select bank0
  6296  1C11  01A1               	clrf	getSw_KeyStatus@status
  6297                           
  6298                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6299  1C12  01A2               	clrf	_getSw_KeyStatus$6474
  6300  1C13  0AA2               	incf	_getSw_KeyStatus$6474,f
  6301  1C14  1F0C               	btfss	12,6	;volatile
  6302  1C15  1A0C               	btfsc	12,4	;volatile
  6303  1C16  2C1B               	goto	l9817
  6304  1C17  1C0C               	btfss	12,0	;volatile
  6305  1C18  1B8C               	btfsc	12,7	;volatile
  6306  1C19  2C1B               	goto	l9817
  6307  1C1A  01A2               	clrf	_getSw_KeyStatus$6474
  6308  1C1B                     l9817:	
  6309  1C1B  0822               	movf	_getSw_KeyStatus$6474,w
  6310  1C1C  00A0               	movwf	??_getSw_KeyStatus
  6311  1C1D  0820               	movf	??_getSw_KeyStatus,w
  6312  1C1E  00A1               	movwf	getSw_KeyStatus@status
  6313                           
  6314                           ;Switch_B1.c: 275: return status;
  6315  1C1F  0821               	movf	getSw_KeyStatus@status,w
  6316  1C20  0008               	return
  6317  1C21                     __end_of_getSw_KeyStatus:	
  6318                           
  6319                           	psect	text17
  6320  1B64                     __ptext17:	
  6321 ;; *************** function _SwPointSelect *****************
  6322 ;; Defined at:
  6323 ;;		line 25 in file "../src/Switch_B1.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  sw              1    wreg     unsigned char 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  sw              1    1[BANK0 ] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;		None               void
  6330 ;; Registers used:
  6331 ;;		wreg
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;Total ram usage:        2 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    5
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_setSw_Main
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           
  6352                           ;psect for function _SwPointSelect
  6353  1B64                     _SwPointSelect:	
  6354                           
  6355                           ;incstack = 0
  6356                           ; Regs used in _SwPointSelect: [wreg]
  6357                           ;SwPointSelect@sw stored from wreg
  6358  1B64  0020               	movlb	0	; select bank0
  6359  1B65  00A1               	movwf	SwPointSelect@sw
  6360                           
  6361                           ;Switch_B1.c: 28: if (sw == 1) {
  6362  1B66  0821               	movf	SwPointSelect@sw,w
  6363  1B67  3A01               	xorlw	1
  6364  1B68  1D03               	skipz
  6365  1B69  0008               	return
  6366                           
  6367                           ;Switch_B1.c: 29: Sw = &Sw1;
  6368  1B6A  30E3               	movlw	_Sw1& (0+255)
  6369  1B6B  00A0               	movwf	??_SwPointSelect
  6370  1B6C  0820               	movf	??_SwPointSelect,w
  6371  1B6D  0021               	movlb	1	; select bank1
  6372  1B6E  00D4               	movwf	_Sw^(0+128)
  6373  1B6F  0008               	return
  6374  1B70                     __end_of_SwPointSelect:	
  6375                           
  6376                           	psect	text18
  6377  1D2D                     __ptext18:	
  6378 ;; *************** function _TouchPower *****************
  6379 ;; Defined at:
  6380 ;;		line 10 in file "../src/Switch_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        0 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		_Timeout_Counter
  6403 ;;		_set_TimeoutCleared
  6404 ;; This function is called by:
  6405 ;;		_Switch_Main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _TouchPower
  6411  1D2D                     _TouchPower:	
  6412                           
  6413                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6417  1D2D  0021               	movlb	1	; select bank1
  6418  1D2E  1C2F               	btfss	_myMain^(0+128),0
  6419  1D2F  0008               	return
  6420                           
  6421                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6422  1D30  0020               	movlb	0	; select bank0
  6423  1D31  180D               	btfsc	13,0	;volatile
  6424  1D32  0008               	return
  6425  1D33  2D39               	goto	l10341
  6426  1D34                     l2494:	
  6427                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6428                           
  6429                           
  6430                           ;Switch_B1.c: 14: RB0 = 1;
  6431  1D34  0020               	movlb	0	; select bank0
  6432  1D35  140D               	bsf	13,0	;volatile
  6433                           
  6434                           ;Switch_B1.c: 15: Timeout_Counter();
  6435  1D36  319D  2518  319D   	fcall	_Timeout_Counter
  6436  1D39                     l10341:	
  6437  1D39  0020               	movlb	0	; select bank0
  6438  1D3A  180D               	btfsc	13,0	;volatile
  6439  1D3B  2D3F               	goto	l10345
  6440  1D3C  0021               	movlb	1	; select bank1
  6441  1D3D  1D39               	btfss	(_myMain^(0+128)+10),2
  6442  1D3E  2D34               	goto	l2494
  6443  1D3F                     l10345:	
  6444                           
  6445                           ;Switch_B1.c: 16: }
  6446                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6447  1D3F  319A  224C         	fcall	_set_TimeoutCleared
  6448  1D41  0008               	return
  6449  1D42                     __end_of_TouchPower:	
  6450                           
  6451                           	psect	text19
  6452  1A4C                     __ptext19:	
  6453 ;; *************** function _set_TimeoutCleared *****************
  6454 ;; Defined at:
  6455 ;;		line 281 in file "../src/Main_B1.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;		None
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;		None
  6460 ;; Return value:  Size  Location     Type
  6461 ;;		None               void
  6462 ;; Registers used:
  6463 ;;		status,2
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;Total ram usage:        0 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    5
  6476 ;; This function calls:
  6477 ;;		Nothing
  6478 ;; This function is called by:
  6479 ;;		_getAD
  6480 ;;		_TouchPower
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _set_TimeoutCleared
  6486  1A4C                     _set_TimeoutCleared:	
  6487                           
  6488                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in _set_TimeoutCleared: [status,2]
  6492  1A4C  0021               	movlb	1	; select bank1
  6493  1A4D  1139               	bcf	(_myMain^(0+128)+10),2
  6494                           
  6495                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6496  1A4E  01BA               	clrf	(_myMain^(0+128)+11)
  6497  1A4F  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6498  1A50  0008               	return
  6499  1A51                     __end_of_set_TimeoutCleared:	
  6500                           
  6501                           	psect	text20
  6502  1D18                     __ptext20:	
  6503 ;; *************** function _Timeout_Counter *****************
  6504 ;; Defined at:
  6505 ;;		line 272 in file "../src/Main_B1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;		None
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        0 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    5
  6526 ;; This function calls:
  6527 ;;		Nothing
  6528 ;; This function is called by:
  6529 ;;		_getAD
  6530 ;;		_TouchPower
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _Timeout_Counter
  6536  1D18                     _Timeout_Counter:	
  6537                           
  6538                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6539                           
  6540                           ;incstack = 0
  6541                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6542  1D18  3001               	movlw	1
  6543  1D19  0021               	movlb	1	; select bank1
  6544  1D1A  07BA               	addwf	(_myMain^(0+128)+11),f
  6545  1D1B  3000               	movlw	0
  6546  1D1C  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6547                           
  6548                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6549  1D1D  300B               	movlw	11
  6550  1D1E  3EAF               	addlw	_myMain& (0+255)
  6551  1D1F  0086               	movwf	6
  6552  1D20  0187               	clrf	7
  6553  1D21  3F40               	moviw [0]fsr1
  6554  1D22  3AA8               	xorlw	168
  6555  1D23  1D03               	skipz
  6556  1D24  2D27               	goto	u10545
  6557  1D25  3F41               	moviw [1]fsr1
  6558  1D26  3A61               	xorlw	97
  6559  1D27                     u10545:	
  6560  1D27  1D03               	skipz
  6561  1D28  0008               	return
  6562                           
  6563                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6564  1D29  01BA               	clrf	(_myMain^(0+128)+11)
  6565  1D2A  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6566                           
  6567                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6568  1D2B  1539               	bsf	(_myMain^(0+128)+10),2
  6569  1D2C  0008               	return
  6570  1D2D                     __end_of_Timeout_Counter:	
  6571                           
  6572                           	psect	text21
  6573  1A48                     __ptext21:	
  6574 ;; *************** function _Switch_Initialization *****************
  6575 ;; Defined at:
  6576 ;;		line 46 in file "../src/Switch_B1.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;		None
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;		None
  6581 ;; Return value:  Size  Location     Type
  6582 ;;		None               void
  6583 ;; Registers used:
  6584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;Total ram usage:        0 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    8
  6597 ;; This function calls:
  6598 ;;		_setSw_Initialization
  6599 ;; This function is called by:
  6600 ;;		_main
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _Switch_Initialization
  6606  1A48                     _Switch_Initialization:	
  6607                           
  6608                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6609                           
  6610                           ;incstack = 0
  6611                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6612  1A48  3001               	movlw	1
  6613  1A49  3190  2000         	fcall	_setSw_Initialization
  6614  1A4B  0008               	return
  6615  1A4C                     __end_of_Switch_Initialization:	
  6616                           
  6617                           	psect	text22
  6618  1000                     __ptext22:	
  6619 ;; *************** function _setSw_Initialization *****************
  6620 ;; Defined at:
  6621 ;;		line 66 in file "../src/Switch_B1.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;  sw              1    wreg     unsigned char 
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;  sw              1    4[BANK0 ] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;		None               void
  6628 ;; Registers used:
  6629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;Total ram usage:        1 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    7
  6642 ;; This function calls:
  6643 ;;		_setLED
  6644 ;; This function is called by:
  6645 ;;		_Switch_Initialization
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           
  6650                           ;psect for function _setSw_Initialization
  6651  1000                     _setSw_Initialization:	
  6652                           
  6653                           ;incstack = 0
  6654                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6655                           ;setSw_Initialization@sw stored from wreg
  6656  1000  0020               	movlb	0	; select bank0
  6657  1001  00A4               	movwf	setSw_Initialization@sw
  6658                           
  6659                           ;Switch_B1.c: 68: setLED(sw, 1);
  6660  1002  01A2               	clrf	setLED@command
  6661  1003  0AA2               	incf	setLED@command,f
  6662  1004  0824               	movf	setSw_Initialization@sw,w
  6663  1005  3191  21DC  3190   	fcall	_setLED
  6664                           
  6665                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6666  1008  0020               	movlb	0	; select bank0
  6667  1009  01A2               	clrf	setLED@command
  6668  100A  0AA2               	incf	setLED@command,f
  6669  100B  0824               	movf	setSw_Initialization@sw,w
  6670  100C  3E01               	addlw	1
  6671  100D  3191  21DC         	fcall	_setLED
  6672  100F  0008               	return
  6673  1010                     __end_of_setSw_Initialization:	
  6674                           
  6675                           	psect	text23
  6676  1A1B                     __ptext23:	
  6677 ;; *************** function _RF_Main *****************
  6678 ;; Defined at:
  6679 ;;		line 26 in file "../src/RF_Control_B1.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;		None
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;		None               void
  6686 ;; Registers used:
  6687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;Total ram usage:        0 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:   12
  6700 ;; This function calls:
  6701 ;;		_setRF_Main
  6702 ;; This function is called by:
  6703 ;;		_main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _RF_Main
  6709  1A1B                     _RF_Main:	
  6710                           
  6711                           ;RF_Control_B1.c: 28: setRF_Main();
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6715  1A1B  3185  2528         	fcall	_setRF_Main
  6716  1A1D  0008               	return
  6717  1A1E                     __end_of_RF_Main:	
  6718                           
  6719                           	psect	text24
  6720  0528                     __ptext24:	
  6721 ;; *************** function _setRF_Main *****************
  6722 ;; Defined at:
  6723 ;;		line 53 in file "../src/RF_Control_B1.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  error           1    3[BANK1 ] unsigned char 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;		None               void
  6730 ;; Registers used:
  6731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;Total ram usage:        2 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:   11
  6744 ;; This function calls:
  6745 ;;		_CC2500_PowerOnInitial
  6746 ;;		_CC2500_RxData
  6747 ;;		_CC2500_TxData
  6748 ;;		_CC2500_WriteCommand
  6749 ;;		_RF_RxDisable
  6750 ;;		___lwdiv
  6751 ;;		_getBuz_GO
  6752 ;;		_getRF_KeyStatus
  6753 ;;		_getRxData
  6754 ;; This function is called by:
  6755 ;;		_RF_Main
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function _setRF_Main
  6761  0528                     _setRF_Main:	
  6762                           
  6763                           ;RF_Control_B1.c: 54: char error = 0;
  6764                           
  6765                           ;incstack = 0
  6766                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6767  0528  0021               	movlb	1	; select bank1
  6768  0529  01E7               	clrf	setRF_Main@error^(0+128)
  6769                           
  6770                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6771  052A  1C20               	btfss	_RF1^(0+128),0
  6772  052B  2DF9               	goto	l2125
  6773                           
  6774                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6775  052C  319B  23EE  3185   	fcall	_getBuz_GO
  6776  052F  0020               	movlb	0	; select bank0
  6777  0530  0821               	movf	?_getBuz_GO+1,w
  6778  0531  0420               	iorwf	?_getBuz_GO,w
  6779  0532  1D03               	skipz
  6780  0533  2DDA               	goto	l10311
  6781                           
  6782                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6783  0534  319B  23FF  3185   	fcall	_getRF_KeyStatus
  6784  0537  3A01               	xorlw	1
  6785  0538  3000               	movlw	0
  6786  0539  1903               	skipnz
  6787  053A  3001               	movlw	1
  6788  053B  0021               	movlb	1	; select bank1
  6789  053C  00E6               	movwf	??_setRF_Main^(0+128)
  6790  053D  0CE6               	rrf	??_setRF_Main^(0+128),f
  6791  053E  0CE6               	rrf	??_setRF_Main^(0+128),f
  6792  053F  0820               	movf	_RF1^(0+128),w
  6793  0540  0666               	xorwf	??_setRF_Main^(0+128),w
  6794  0541  397F               	andlw	-129
  6795  0542  0666               	xorwf	??_setRF_Main^(0+128),w
  6796  0543  00A0               	movwf	_RF1^(0+128)
  6797                           
  6798                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6799  0544  1FA0               	btfss	_RF1^(0+128),7
  6800  0545  2D48               	goto	l2129
  6801  0546  1F20               	btfss	_RF1^(0+128),6
  6802  0547  2DDA               	goto	l10311
  6803  0548                     l2129:	
  6804                           
  6805                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6806  0548  1D20               	btfss	_RF1^(0+128),2
  6807  0549  2D99               	goto	l2130
  6808                           
  6809                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6810  054A  1B20               	btfsc	_RF1^(0+128),6
  6811  054B  2D94               	goto	l10283
  6812                           
  6813                           ;RF_Control_B1.c: 68: RF1.Count++;
  6814  054C  3001               	movlw	1
  6815  054D  07A3               	addwf	(_RF1^(0+128)+3),f
  6816  054E  3000               	movlw	0
  6817  054F  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6818                           
  6819                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6820  0550  3014               	movlw	20
  6821  0551  0020               	movlb	0	; select bank0
  6822  0552  00A0               	movwf	___lwdiv@divisor
  6823  0553  3000               	movlw	0
  6824  0554  00A1               	movwf	___lwdiv@divisor+1
  6825  0555  0021               	movlb	1	; select bank1
  6826  0556  0829               	movf	((_RF1+1)^(0+128)+8),w
  6827  0557  0020               	movlb	0	; select bank0
  6828  0558  01A3               	clrf	___lwdiv@dividend+1
  6829  0559  07A3               	addwf	___lwdiv@dividend+1,f
  6830  055A  0021               	movlb	1	; select bank1
  6831  055B  0828               	movf	(_RF1^(0+128)+8),w
  6832  055C  0020               	movlb	0	; select bank0
  6833  055D  01A2               	clrf	___lwdiv@dividend
  6834  055E  07A2               	addwf	___lwdiv@dividend,f
  6835  055F  3191  216C  3185   	fcall	___lwdiv
  6836  0562  0020               	movlb	0	; select bank0
  6837  0563  0821               	movf	?___lwdiv+1,w
  6838  0564  0021               	movlb	1	; select bank1
  6839  0565  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6840  0566  1D03               	skipz
  6841  0567  2D6C               	goto	u11595
  6842  0568  0020               	movlb	0	; select bank0
  6843  0569  0820               	movf	?___lwdiv,w
  6844  056A  0021               	movlb	1	; select bank1
  6845  056B  0223               	subwf	(_RF1^(0+128)+3),w
  6846  056C                     u11595:	
  6847  056C  1C03               	skipc
  6848  056D  2DDA               	goto	l10311
  6849                           
  6850                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6851  056E  3014               	movlw	20
  6852  056F  0020               	movlb	0	; select bank0
  6853  0570  00A0               	movwf	___lwdiv@divisor
  6854  0571  3000               	movlw	0
  6855  0572  00A1               	movwf	___lwdiv@divisor+1
  6856  0573  0021               	movlb	1	; select bank1
  6857  0574  0829               	movf	((_RF1+1)^(0+128)+8),w
  6858  0575  0020               	movlb	0	; select bank0
  6859  0576  01A3               	clrf	___lwdiv@dividend+1
  6860  0577  07A3               	addwf	___lwdiv@dividend+1,f
  6861  0578  0021               	movlb	1	; select bank1
  6862  0579  0828               	movf	(_RF1^(0+128)+8),w
  6863  057A  0020               	movlb	0	; select bank0
  6864  057B  01A2               	clrf	___lwdiv@dividend
  6865  057C  07A2               	addwf	___lwdiv@dividend,f
  6866  057D  3191  216C  3185   	fcall	___lwdiv
  6867  0580  0020               	movlb	0	; select bank0
  6868  0581  0821               	movf	?___lwdiv+1,w
  6869  0582  0021               	movlb	1	; select bank1
  6870  0583  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6871  0584  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  6872  0585  0020               	movlb	0	; select bank0
  6873  0586  0820               	movf	?___lwdiv,w
  6874  0587  0021               	movlb	1	; select bank1
  6875  0588  01A3               	clrf	(_RF1^(0+128)+3)
  6876  0589  07A3               	addwf	(_RF1^(0+128)+3),f
  6877                           
  6878                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6879  058A  1120               	bcf	_RF1^(0+128),2
  6880                           
  6881                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6882  058B  01AB               	clrf	(_RF1^(0+128)+11)
  6883  058C  01AC               	clrf	((_RF1+1)^(0+128)+11)
  6884                           
  6885                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6886  058D  319B  239B  3185   	fcall	_RF_RxDisable
  6887                           
  6888                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6889  0590  3188  2025  3185   	fcall	_CC2500_TxData
  6890                           
  6891                           ;RF_Control_B1.c: 77: }
  6892                           ;RF_Control_B1.c: 78: } else {
  6893  0593  2DDA               	goto	l10311
  6894  0594                     l10283:	
  6895                           
  6896                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6897  0594  0021               	movlb	1	; select bank1
  6898  0595  01A3               	clrf	(_RF1^(0+128)+3)
  6899  0596  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6900                           
  6901                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6902  0597  1120               	bcf	_RF1^(0+128),2
  6903                           
  6904                           ;RF_Control_B1.c: 81: }
  6905                           ;RF_Control_B1.c: 82: } else {
  6906  0598  2DDA               	goto	l10311
  6907  0599                     l2130:	
  6908                           
  6909                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6910  0599  1DA0               	btfss	_RF1^(0+128),3
  6911  059A  2DA8               	goto	l10297
  6912                           
  6913                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6914  059B  3197  2795  3185   	fcall	_CC2500_RxData
  6915                           
  6916                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6917  059E  0021               	movlb	1	; select bank1
  6918  059F  1CA0               	btfss	_RF1^(0+128),1
  6919  05A0  2DDA               	goto	l10311
  6920                           
  6921                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6922  05A1  10A0               	bcf	_RF1^(0+128),1
  6923                           
  6924                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6925  05A2  01AB               	clrf	(_RF1^(0+128)+11)
  6926  05A3  01AC               	clrf	((_RF1+1)^(0+128)+11)
  6927                           
  6928                           ;RF_Control_B1.c: 97: getRxData();
  6929  05A4  3187  279C  3185   	fcall	_getRxData
  6930                           
  6931                           ;RF_Control_B1.c: 100: }
  6932                           ;RF_Control_B1.c: 101: } else {
  6933  05A7  2DDA               	goto	l10311
  6934  05A8                     l10297:	
  6935                           
  6936                           ;RF_Control_B1.c: 102: RF1.Count++;
  6937  05A8  3001               	movlw	1
  6938  05A9  0021               	movlb	1	; select bank1
  6939  05AA  07A3               	addwf	(_RF1^(0+128)+3),f
  6940  05AB  3000               	movlw	0
  6941  05AC  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6942                           
  6943                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6944  05AD  3014               	movlw	20
  6945  05AE  0020               	movlb	0	; select bank0
  6946  05AF  00A0               	movwf	___lwdiv@divisor
  6947  05B0  3000               	movlw	0
  6948  05B1  00A1               	movwf	___lwdiv@divisor+1
  6949  05B2  0021               	movlb	1	; select bank1
  6950  05B3  0829               	movf	((_RF1+1)^(0+128)+8),w
  6951  05B4  0020               	movlb	0	; select bank0
  6952  05B5  01A3               	clrf	___lwdiv@dividend+1
  6953  05B6  07A3               	addwf	___lwdiv@dividend+1,f
  6954  05B7  0021               	movlb	1	; select bank1
  6955  05B8  0828               	movf	(_RF1^(0+128)+8),w
  6956  05B9  0020               	movlb	0	; select bank0
  6957  05BA  01A2               	clrf	___lwdiv@dividend
  6958  05BB  07A2               	addwf	___lwdiv@dividend,f
  6959  05BC  3191  216C  3185   	fcall	___lwdiv
  6960  05BF  0020               	movlb	0	; select bank0
  6961  05C0  0821               	movf	?___lwdiv+1,w
  6962  05C1  0021               	movlb	1	; select bank1
  6963  05C2  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6964  05C3  1D03               	skipz
  6965  05C4  2DC9               	goto	u11625
  6966  05C5  0020               	movlb	0	; select bank0
  6967  05C6  0820               	movf	?___lwdiv,w
  6968  05C7  0021               	movlb	1	; select bank1
  6969  05C8  0223               	subwf	(_RF1^(0+128)+3),w
  6970  05C9                     u11625:	
  6971  05C9  1C03               	skipc
  6972  05CA  2DDA               	goto	l10311
  6973                           
  6974                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6975  05CB  01A3               	clrf	(_RF1^(0+128)+3)
  6976  05CC  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6977                           
  6978                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6979  05CD  15A0               	bsf	_RF1^(0+128),3
  6980                           
  6981                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6982  05CE  3036               	movlw	54
  6983  05CF  319E  2604  3185   	fcall	_CC2500_WriteCommand
  6984                           
  6985                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6986  05D2  303A               	movlw	58
  6987  05D3  319E  2604  3185   	fcall	_CC2500_WriteCommand
  6988                           
  6989                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6990  05D6  3034               	movlw	52
  6991  05D7  319E  2604  3185   	fcall	_CC2500_WriteCommand
  6992  05DA                     l10311:	
  6993                           
  6994                           ;RF_Control_B1.c: 111: }
  6995                           ;RF_Control_B1.c: 112: }
  6996                           ;RF_Control_B1.c: 113: }
  6997                           ;RF_Control_B1.c: 114: }
  6998                           ;RF_Control_B1.c: 115: }
  6999                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7000  05DA  3001               	movlw	1
  7001  05DB  0021               	movlb	1	; select bank1
  7002  05DC  07AB               	addwf	(_RF1^(0+128)+11),f
  7003  05DD  3000               	movlw	0
  7004  05DE  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7005                           
  7006                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7007  05DF  300B               	movlw	11
  7008  05E0  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7009  05E1  30B9               	movlw	185
  7010  05E2  1903               	skipnz
  7011  05E3  022B               	subwf	(_RF1^(0+128)+11),w
  7012  05E4  1C03               	skipc
  7013  05E5  2DF2               	goto	l10325
  7014                           
  7015                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7016  05E6  01AB               	clrf	(_RF1^(0+128)+11)
  7017  05E7  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7018                           
  7019                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7020  05E8  11A0               	bcf	_RF1^(0+128),3
  7021                           
  7022                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7023  05E9  10A0               	bcf	_RF1^(0+128),1
  7024                           
  7025                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7026  05EA  3036               	movlw	54
  7027  05EB  319E  2604  3185   	fcall	_CC2500_WriteCommand
  7028                           
  7029                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7030  05EE  303A               	movlw	58
  7031  05EF  319E  2604  3185   	fcall	_CC2500_WriteCommand
  7032  05F2                     l10325:	
  7033                           
  7034                           ;RF_Control_B1.c: 125: }
  7035                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7036  05F2  0021               	movlb	1	; select bank1
  7037  05F3  1F21               	btfss	(_RF1^(0+128)+1),6
  7038  05F4  0008               	return
  7039                           
  7040                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7041  05F5  1321               	bcf	(_RF1^(0+128)+1),6
  7042                           
  7043                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7044  05F6  319D  2503         	fcall	_CC2500_PowerOnInitial
  7045                           
  7046                           ;RF_Control_B1.c: 130: }
  7047                           ;RF_Control_B1.c: 132: } else {
  7048  05F8  0008               	return
  7049  05F9                     l2125:	
  7050                           
  7051                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7052  05F9  1C2F               	btfss	_myMain^(0+128),0
  7053  05FA  0008               	return
  7054                           
  7055                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7056  05FB  1420               	bsf	_RF1^(0+128),0
  7057  05FC  0008               	return
  7058  05FD                     __end_of_setRF_Main:	
  7059                           
  7060                           	psect	text25
  7061  079C                     __ptext25:	
  7062 ;; *************** function _getRxData *****************
  7063 ;; Defined at:
  7064 ;;		line 227 in file "../src/RF_Control_B1.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  error           1    1[BANK1 ] unsigned char 
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;Total ram usage:        2 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; Hardware stack levels required when called:   10
  7085 ;; This function calls:
  7086 ;;		_getMain_All_Error_Status
  7087 ;;		_setControl_Lights_Table
  7088 ;;		_setLog_Code
  7089 ;;		_setTxData
  7090 ;; This function is called by:
  7091 ;;		_setRF_Main
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function _getRxData
  7097  079C                     _getRxData:	
  7098                           
  7099                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7103  079C  0023               	movlb	3	; select bank3
  7104  079D  0820               	movf	_RF_Data^(0+384),w
  7105  079E  3AAA               	xorlw	170
  7106  079F  1D03               	skipz
  7107  07A0  2FB2               	goto	l9771
  7108  07A1  0821               	movf	(_RF_Data^(0+384)+1),w
  7109  07A2  3A01               	xorlw	1
  7110  07A3  1D03               	skipz
  7111  07A4  2FB2               	goto	l9771
  7112                           
  7113                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7114  07A5  3055               	movlw	85
  7115  07A6  0021               	movlb	1	; select bank1
  7116  07A7  00E4               	movwf	??_getRxData^(0+128)
  7117  07A8  086C               	movf	_product^(0+128),w
  7118  07A9  3E02               	addlw	2
  7119  07AA  0086               	movwf	6
  7120  07AB  3002               	movlw	2	; select bank4/5
  7121  07AC  0087               	movwf	7
  7122  07AD  0864               	movf	??_getRxData^(0+128),w
  7123  07AE  0081               	movwf	1
  7124                           
  7125                           ;RF_Control_B1.c: 231: setTxData();
  7126  07AF  318E  2682         	fcall	_setTxData
  7127                           
  7128                           ;RF_Control_B1.c: 235: } else {
  7129  07B1  0008               	return
  7130  07B2                     l9771:	
  7131                           
  7132                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7133  07B2  3000               	movlw	0
  7134  07B3  3190  209A  3187   	fcall	_getMain_All_Error_Status
  7135  07B6  0021               	movlb	1	; select bank1
  7136  07B7  00E4               	movwf	??_getRxData^(0+128)
  7137  07B8  0864               	movf	??_getRxData^(0+128),w
  7138  07B9  00E5               	movwf	getRxData@error^(0+128)
  7139                           
  7140                           ;RF_Control_B1.c: 237: if (error == 0) {
  7141  07BA  08E5               	movf	getRxData@error^(0+128),f
  7142  07BB  1D03               	skipz
  7143  07BC  2FFE               	goto	l2170
  7144                           
  7145                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7146  07BD  1F20               	btfss	_RF1^(0+128),6
  7147  07BE  2FCA               	goto	l9783
  7148                           
  7149                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7150  07BF  0023               	movlb	3	; select bank3
  7151  07C0  08A0               	movf	_RF_Data^(0+384),f
  7152  07C1  1D03               	skipz
  7153  07C2  0008               	return
  7154  07C3  0821               	movf	(_RF_Data^(0+384)+1),w
  7155  07C4  3A64               	xorlw	100
  7156  07C5  1D03               	skipz
  7157  07C6  0008               	return
  7158                           
  7159                           ;RF_Control_B1.c: 241: setLog_Code();
  7160  07C7  3190  20CD         	fcall	_setLog_Code
  7161                           
  7162                           ;RF_Control_B1.c: 242: }
  7163                           ;RF_Control_B1.c: 243: } else {
  7164  07C9  0008               	return
  7165  07CA                     l9783:	
  7166                           
  7167                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7168  07CA  0023               	movlb	3	; select bank3
  7169  07CB  0834               	movf	(_RF_Data^(0+384)+20),w
  7170  07CC  3AD1               	xorlw	209
  7171  07CD  1903               	skipnz
  7172  07CE  2FD3               	goto	l9787
  7173  07CF  0834               	movf	(_RF_Data^(0+384)+20),w
  7174  07D0  3A0A               	xorlw	10
  7175  07D1  1D03               	skipz
  7176  07D2  0008               	return
  7177  07D3                     l9787:	
  7178                           
  7179                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7180  07D3  08A0               	movf	_RF_Data^(0+384),f
  7181  07D4  1D03               	skipz
  7182  07D5  0008               	return
  7183  07D6  0821               	movf	(_RF_Data^(0+384)+1),w
  7184  07D7  3A02               	xorlw	2
  7185  07D8  1D03               	skipz
  7186  07D9  0008               	return
  7187                           
  7188                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7189  07DA  0021               	movlb	1	; select bank1
  7190  07DB  086C               	movf	_product^(0+128),w
  7191  07DC  3E0C               	addlw	12
  7192  07DD  0086               	movwf	6
  7193  07DE  3002               	movlw	2	; select bank4/5
  7194  07DF  0087               	movwf	7
  7195  07E0  0023               	movlb	3	; select bank3
  7196  07E1  082C               	movf	(_RF_Data^(0+384)+12),w
  7197  07E2  0601               	xorwf	1,w
  7198  07E3  1D03               	skipz
  7199  07E4  0008               	return
  7200  07E5  0021               	movlb	1	; select bank1
  7201  07E6  086C               	movf	_product^(0+128),w
  7202  07E7  3E0D               	addlw	13
  7203  07E8  0086               	movwf	6
  7204  07E9  3002               	movlw	2	; select bank4/5
  7205  07EA  0087               	movwf	7
  7206  07EB  0023               	movlb	3	; select bank3
  7207  07EC  082D               	movf	(_RF_Data^(0+384)+13),w
  7208  07ED  0601               	xorwf	1,w
  7209  07EE  1D03               	skipz
  7210  07EF  0008               	return
  7211  07F0  0021               	movlb	1	; select bank1
  7212  07F1  086C               	movf	_product^(0+128),w
  7213  07F2  3E0E               	addlw	14
  7214  07F3  0086               	movwf	6
  7215  07F4  3002               	movlw	2	; select bank4/5
  7216  07F5  0087               	movwf	7
  7217  07F6  0023               	movlb	3	; select bank3
  7218  07F7  082E               	movf	(_RF_Data^(0+384)+14),w
  7219  07F8  0601               	xorwf	1,w
  7220  07F9  1D03               	skipz
  7221  07FA  0008               	return
  7222                           
  7223                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7224  07FB  3189  21E2         	fcall	_setControl_Lights_Table
  7225                           
  7226                           ;RF_Control_B1.c: 250: }
  7227                           ;RF_Control_B1.c: 253: }
  7228                           ;RF_Control_B1.c: 264: }
  7229                           ;RF_Control_B1.c: 265: }
  7230                           ;RF_Control_B1.c: 266: } else {
  7231  07FD  0008               	return
  7232  07FE                     l2170:	
  7233                           
  7234                           ;RF_Control_B1.c: 267: __nop();
  7235  07FE  0000               	nop
  7236  07FF  0008               	return
  7237  0800                     __end_of_getRxData:	
  7238                           
  7239                           	psect	text26
  7240  10CD                     __ptext26:	
  7241 ;; *************** function _setLog_Code *****************
  7242 ;; Defined at:
  7243 ;;		line 273 in file "../src/RF_Control_B1.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;		None
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;		None
  7248 ;; Return value:  Size  Location     Type
  7249 ;;		None               void
  7250 ;; Registers used:
  7251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;Total ram usage:        1 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    7
  7264 ;; This function calls:
  7265 ;;		_setBuz
  7266 ;;		_setMemory_LoopSave
  7267 ;;		_setMemory_Modify
  7268 ;;		_setProductData
  7269 ;; This function is called by:
  7270 ;;		_getRxData
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           
  7275                           ;psect for function _setLog_Code
  7276  10CD                     _setLog_Code:	
  7277                           
  7278                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7279                           
  7280                           ;incstack = 0
  7281                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7282  10CD  0021               	movlb	1	; select bank1
  7283  10CE  1320               	bcf	_RF1^(0+128),6
  7284                           
  7285                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7286  10CF  0023               	movlb	3	; select bank3
  7287  10D0  082C               	movf	(_RF_Data^(0+384)+12),w
  7288  10D1  0020               	movlb	0	; select bank0
  7289  10D2  00E5               	movwf	??_setLog_Code
  7290  10D3  0865               	movf	??_setLog_Code,w
  7291  10D4  00E2               	movwf	setProductData@value
  7292  10D5  300C               	movlw	12
  7293  10D6  319B  2304  3190   	fcall	_setProductData
  7294                           
  7295                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7296  10D9  0023               	movlb	3	; select bank3
  7297  10DA  082D               	movf	(_RF_Data^(0+384)+13),w
  7298  10DB  0020               	movlb	0	; select bank0
  7299  10DC  00E5               	movwf	??_setLog_Code
  7300  10DD  0865               	movf	??_setLog_Code,w
  7301  10DE  00E2               	movwf	setProductData@value
  7302  10DF  300D               	movlw	13
  7303  10E0  319B  2304  3190   	fcall	_setProductData
  7304                           
  7305                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7306  10E3  0023               	movlb	3	; select bank3
  7307  10E4  082E               	movf	(_RF_Data^(0+384)+14),w
  7308  10E5  0020               	movlb	0	; select bank0
  7309  10E6  00E5               	movwf	??_setLog_Code
  7310  10E7  0865               	movf	??_setLog_Code,w
  7311  10E8  00E2               	movwf	setProductData@value
  7312  10E9  300E               	movlw	14
  7313  10EA  319B  2304  3190   	fcall	_setProductData
  7314                           
  7315                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7316  10ED  3064               	movlw	100
  7317  10EE  0020               	movlb	0	; select bank0
  7318  10EF  00A9               	movwf	setBuz@time
  7319  10F0  3000               	movlw	0
  7320  10F1  00AA               	movwf	setBuz@time+1
  7321  10F2  3001               	movlw	1
  7322  10F3  3194  2489  3190   	fcall	_setBuz
  7323                           
  7324                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7325  10F6  0021               	movlb	1	; select bank1
  7326  10F7  1EAF               	btfss	_myMain^(0+128),5
  7327  10F8  28FD               	goto	l2183
  7328                           
  7329                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7330  10F9  3001               	movlw	1
  7331  10FA  319C  24B4  3190   	fcall	_setMemory_LoopSave
  7332  10FD                     l2183:	
  7333                           
  7334                           ;RF_Control_B1.c: 281: }
  7335                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7336  10FD  3001               	movlw	1
  7337  10FE  319C  247B         	fcall	_setMemory_Modify
  7338  1100  0008               	return
  7339  1101                     __end_of_setLog_Code:	
  7340                           
  7341                           	psect	text27
  7342  1CB4                     __ptext27:	
  7343 ;; *************** function _setMemory_LoopSave *****************
  7344 ;; Defined at:
  7345 ;;		line 1089 in file "../src/MCU_B1.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  command         1    wreg     unsigned char 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  command         1    1[BANK0 ] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;		None               void
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;Total ram usage:        2 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    5
  7366 ;; This function calls:
  7367 ;;		Nothing
  7368 ;; This function is called by:
  7369 ;;		_setLog_Code
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _setMemory_LoopSave
  7375  1CB4                     _setMemory_LoopSave:	
  7376                           
  7377                           ;incstack = 0
  7378                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7379                           ;setMemory_LoopSave@command stored from wreg
  7380  1CB4  0020               	movlb	0	; select bank0
  7381  1CB5  00A1               	movwf	setMemory_LoopSave@command
  7382                           
  7383                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7384  1CB6  0821               	movf	setMemory_LoopSave@command,w
  7385  1CB7  3A01               	xorlw	1
  7386  1CB8  3000               	movlw	0
  7387  1CB9  1903               	skipnz
  7388  1CBA  3001               	movlw	1
  7389  1CBB  00A0               	movwf	??_setMemory_LoopSave
  7390  1CBC  0DA0               	rlf	??_setMemory_LoopSave,f
  7391  1CBD  0DA0               	rlf	??_setMemory_LoopSave,f
  7392  1CBE  0023               	movlb	3	; select bank3
  7393  1CBF  0862               	movf	(_Memory^(0+384)+36),w
  7394  1CC0  0020               	movlb	0	; select bank0
  7395  1CC1  0620               	xorwf	??_setMemory_LoopSave,w
  7396  1CC2  39FB               	andlw	-5
  7397  1CC3  0620               	xorwf	??_setMemory_LoopSave,w
  7398  1CC4  0023               	movlb	3	; select bank3
  7399  1CC5  00E2               	movwf	(_Memory^(0+384)+36)
  7400  1CC6  0008               	return
  7401  1CC7                     __end_of_setMemory_LoopSave:	
  7402                           
  7403                           	psect	text28
  7404  09E2                     __ptext28:	
  7405 ;; *************** function _setControl_Lights_Table *****************
  7406 ;; Defined at:
  7407 ;;		line 286 in file "../src/RF_Control_B1.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;		None               void
  7414 ;; Registers used:
  7415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;Total ram usage:        0 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    9
  7428 ;; This function calls:
  7429 ;;		_getDimmerLights_Status
  7430 ;;		_getMain_All_LightsStatus
  7431 ;;		_setCmd_Status
  7432 ;;		_setDimmerLights_SwOff
  7433 ;;		_setDimmerLights_SwOn
  7434 ;;		_setProductData
  7435 ;;		_setRFSW_AdjControl
  7436 ;;		_setRFSW_Control
  7437 ;;		_setRF_AdjControl
  7438 ;;		_setTxData
  7439 ;; This function is called by:
  7440 ;;		_getRxData
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _setControl_Lights_Table
  7446  09E2                     _setControl_Lights_Table:	
  7447                           
  7448                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7452  09E2  2A48               	goto	l9411
  7453  09E3                     l9391:	
  7454                           ;RF_Control_B1.c: 290: case 0x00:
  7455                           
  7456                           
  7457                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7458  09E3  319A  22AB  3189   	fcall	_getMain_All_LightsStatus
  7459  09E6  3A01               	xorlw	1
  7460  09E7  1D03               	skipz
  7461  09E8  29FF               	goto	l9399
  7462                           
  7463                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7464  09E9  3001               	movlw	1
  7465  09EA  319B  23AA  3189   	fcall	_getDimmerLights_Status
  7466  09ED  3A01               	xorlw	1
  7467  09EE  1D03               	skipz
  7468  09EF  29F8               	goto	l9397
  7469                           
  7470                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7471  09F0  3001               	movlw	1
  7472  09F1  3191  2101  3189   	fcall	_setDimmerLights_SwOn
  7473                           
  7474                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7475  09F4  3001               	movlw	1
  7476  09F5  3191  21A3  3189   	fcall	_setDimmerLights_SwOff
  7477  09F8                     l9397:	
  7478                           
  7479                           ;RF_Control_B1.c: 297: }
  7480                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7481  09F8  0020               	movlb	0	; select bank0
  7482  09F9  01A0               	clrf	setCmd_Status@cmd
  7483  09FA  0AA0               	incf	setCmd_Status@cmd,f
  7484  09FB  3001               	movlw	1
  7485  09FC  319D  259E         	fcall	_setCmd_Status
  7486                           
  7487                           ;RF_Control_B1.c: 313: } else {
  7488  09FE  0008               	return
  7489  09FF                     l9399:	
  7490                           
  7491                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7492  09FF  0020               	movlb	0	; select bank0
  7493  0A00  01E2               	clrf	setProductData@value
  7494  0A01  3009               	movlw	9
  7495  0A02  319B  2304  3189   	fcall	_setProductData
  7496                           
  7497                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7498  0A05  0020               	movlb	0	; select bank0
  7499  0A06  01E2               	clrf	setProductData@value
  7500  0A07  300B               	movlw	11
  7501  0A08  319B  2304  3189   	fcall	_setProductData
  7502                           
  7503                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7504  0A0B  0020               	movlb	0	; select bank0
  7505  0A0C  01E2               	clrf	setProductData@value
  7506  0A0D  300F               	movlw	15
  7507  0A0E  319B  2304  3189   	fcall	_setProductData
  7508                           
  7509                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7510  0A11  0020               	movlb	0	; select bank0
  7511  0A12  01E2               	clrf	setProductData@value
  7512  0A13  3011               	movlw	17
  7513  0A14  319B  2304  3189   	fcall	_setProductData
  7514                           
  7515                           ;RF_Control_B1.c: 318: setTxData();
  7516  0A17  318E  2682         	fcall	_setTxData
  7517                           
  7518                           ;RF_Control_B1.c: 319: }
  7519                           ;RF_Control_B1.c: 320: break;
  7520  0A19  0008               	return
  7521  0A1A                     l9401:	
  7522                           ;RF_Control_B1.c: 322: case 0x20:
  7523                           
  7524                           
  7525                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7526  0A1A  0020               	movlb	0	; select bank0
  7527  0A1B  01E2               	clrf	setProductData@value
  7528  0A1C  3009               	movlw	9
  7529  0A1D  319B  2304  3189   	fcall	_setProductData
  7530                           
  7531                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7532  0A20  0020               	movlb	0	; select bank0
  7533  0A21  01E2               	clrf	setProductData@value
  7534  0A22  300B               	movlw	11
  7535  0A23  319B  2304  3189   	fcall	_setProductData
  7536                           
  7537                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7538  0A26  0021               	movlb	1	; select bank1
  7539  0A27  086C               	movf	_product^(0+128),w
  7540  0A28  0086               	movwf	6
  7541  0A29  3002               	movlw	2	; select bank4/5
  7542  0A2A  0087               	movwf	7
  7543  0A2B  3002               	movlw	2	; select bank4/5
  7544  0A2C  3F4F               	moviw [15]fsr1
  7545  0A2D  0020               	movlb	0	; select bank0
  7546  0A2E  00E2               	movwf	setProductData@value
  7547  0A2F  300F               	movlw	15
  7548  0A30  319B  2304  3189   	fcall	_setProductData
  7549                           
  7550                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7551  0A33  0020               	movlb	0	; select bank0
  7552  0A34  01E2               	clrf	setProductData@value
  7553  0A35  3011               	movlw	17
  7554  0A36  319B  2304  3189   	fcall	_setProductData
  7555                           
  7556                           ;RF_Control_B1.c: 327: setTxData();
  7557  0A39  318E  2682         	fcall	_setTxData
  7558                           
  7559                           ;RF_Control_B1.c: 328: break;
  7560  0A3B  0008               	return
  7561  0A3C                     l9403:	
  7562                           ;RF_Control_B1.c: 331: case 0x01:
  7563                           
  7564                           
  7565                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7566  0A3C  3001               	movlw	1
  7567  0A3D  3192  228F         	fcall	_setRFSW_Control
  7568                           
  7569                           ;RF_Control_B1.c: 333: break;
  7570  0A3F  0008               	return
  7571  0A40                     l9405:	
  7572                           ;RF_Control_B1.c: 337: case 0x11:
  7573                           
  7574                           
  7575                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7576  0A40  3001               	movlw	1
  7577  0A41  318A  225B         	fcall	_setRFSW_AdjControl
  7578                           
  7579                           ;RF_Control_B1.c: 339: break;
  7580  0A43  0008               	return
  7581  0A44                     l9407:	
  7582                           ;RF_Control_B1.c: 341: case 0xd1:
  7583                           
  7584                           
  7585                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7586  0A44  3001               	movlw	1
  7587  0A45  3192  2252         	fcall	_setRF_AdjControl
  7588                           
  7589                           ;RF_Control_B1.c: 372: }
  7590                           
  7591                           ;RF_Control_B1.c: 343: break;
  7592  0A47  0008               	return
  7593  0A48                     l9411:	
  7594  0A48  0023               	movlb	3	; select bank3
  7595  0A49  082F               	movf	(_RF_Data^(0+384)+15),w
  7596                           
  7597                           ; Switch size 1, requested type "space"
  7598                           ; Number of cases is 5, Range of values is 0 to 209
  7599                           ; switch strategies available:
  7600                           ; Name         Instructions Cycles
  7601                           ; simple_byte           16     9 (average)
  7602                           ; jumptable            260     6 (fixed)
  7603                           ;	Chosen strategy is simple_byte
  7604  0A4A  3A00               	xorlw	0	; case 0
  7605  0A4B  1903               	skipnz
  7606  0A4C  29E3               	goto	l9391
  7607  0A4D  3A01               	xorlw	1	; case 1
  7608  0A4E  1903               	skipnz
  7609  0A4F  2A3C               	goto	l9403
  7610  0A50  3A10               	xorlw	16	; case 17
  7611  0A51  1903               	skipnz
  7612  0A52  2A40               	goto	l9405
  7613  0A53  3A31               	xorlw	49	; case 32
  7614  0A54  1903               	skipnz
  7615  0A55  2A1A               	goto	l9401
  7616  0A56  3AF1               	xorlw	241	; case 209
  7617  0A57  1903               	skipnz
  7618  0A58  2A44               	goto	l9407
  7619  0A59  2A5A               	goto	l2197
  7620  0A5A                     l2197:	
  7621  0A5A  0008               	return
  7622  0A5B                     __end_of_setControl_Lights_Table:	
  7623                           
  7624                           	psect	text29
  7625  1252                     __ptext29:	
  7626 ;; *************** function _setRF_AdjControl *****************
  7627 ;; Defined at:
  7628 ;;		line 443 in file "../src/RF_Control_B1.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;  sw              1    wreg     unsigned char 
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;  sw              1   15[BANK0 ] unsigned char 
  7633 ;;  status          1   14[BANK0 ] unsigned char 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;		None               void
  7636 ;; Registers used:
  7637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;Total ram usage:        3 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    7
  7650 ;; This function calls:
  7651 ;;		_DimmerLights_SelectPointer
  7652 ;;		_getDimmerLights_Status
  7653 ;;		_setBuz
  7654 ;; This function is called by:
  7655 ;;		_setControl_Lights_Table
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _setRF_AdjControl
  7661  1252                     _setRF_AdjControl:	
  7662                           
  7663                           ;incstack = 0
  7664                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7665                           ;setRF_AdjControl@sw stored from wreg
  7666  1252  0020               	movlb	0	; select bank0
  7667  1253  00AF               	movwf	setRF_AdjControl@sw
  7668                           
  7669                           ;RF_Control_B1.c: 444: char status = 0;
  7670  1254  01AE               	clrf	setRF_AdjControl@status
  7671                           
  7672                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7673  1255  082F               	movf	setRF_AdjControl@sw,w
  7674  1256  319B  23AA  3192   	fcall	_getDimmerLights_Status
  7675  1259  0020               	movlb	0	; select bank0
  7676  125A  00AD               	movwf	??_setRF_AdjControl
  7677  125B  082D               	movf	??_setRF_AdjControl,w
  7678  125C  00AE               	movwf	setRF_AdjControl@status
  7679                           
  7680                           ;RF_Control_B1.c: 448: if (status == 1) {
  7681  125D  082E               	movf	setRF_AdjControl@status,w
  7682  125E  3A01               	xorlw	1
  7683  125F  1D03               	skipz
  7684  1260  2A86               	goto	l9163
  7685                           
  7686                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7687  1261  0021               	movlb	1	; select bank1
  7688  1262  1822               	btfsc	(_RF1^(0+128)+2),0
  7689  1263  2A7B               	goto	l2216
  7690                           
  7691                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7692  1264  1422               	bsf	(_RF1^(0+128)+2),0
  7693                           
  7694                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7695  1265  0020               	movlb	0	; select bank0
  7696  1266  082F               	movf	setRF_AdjControl@sw,w
  7697  1267  319A  22F8  3192   	fcall	_DimmerLights_SelectPointer
  7698                           
  7699                           ;RF_Control_B1.c: 453: DimmerLights->DimmingSwFlag = 1;
  7700  126A  0021               	movlb	1	; select bank1
  7701  126B  084E               	movf	_DimmerLights^(0+128),w
  7702  126C  0086               	movwf	6
  7703  126D  3001               	movlw	1	; select bank2/3
  7704  126E  0087               	movwf	7
  7705  126F  1581               	bsf	1,3
  7706                           
  7707                           ;RF_Control_B1.c: 454: DimmerLights->DimmingTrigger = 1;
  7708  1270  084E               	movf	_DimmerLights^(0+128),w
  7709  1271  0086               	movwf	6
  7710  1272  3001               	movlw	1	; select bank2/3
  7711  1273  0087               	movwf	7
  7712  1274  1601               	bsf	1,4
  7713                           
  7714                           ;RF_Control_B1.c: 455: DimmerLights->DimmingSwitch = 1;
  7715  1275  084E               	movf	_DimmerLights^(0+128),w
  7716  1276  0086               	movwf	6
  7717  1277  3001               	movlw	1	; select bank2/3
  7718  1278  0087               	movwf	7
  7719  1279  1681               	bsf	1,5
  7720                           
  7721                           ;RF_Control_B1.c: 457: } else {
  7722  127A  2A86               	goto	l9163
  7723  127B                     l2216:	
  7724                           
  7725                           ;RF_Control_B1.c: 458: RF1.flagDimming = 0;
  7726  127B  1022               	bcf	(_RF1^(0+128)+2),0
  7727                           
  7728                           ;RF_Control_B1.c: 459: DimmerLights->DimmingTrigger = 1;
  7729  127C  084E               	movf	_DimmerLights^(0+128),w
  7730  127D  0086               	movwf	6
  7731  127E  3001               	movlw	1	; select bank2/3
  7732  127F  0087               	movwf	7
  7733  1280  1601               	bsf	1,4
  7734                           
  7735                           ;RF_Control_B1.c: 460: DimmerLights->DimmingSwitch = 0;
  7736  1281  084E               	movf	_DimmerLights^(0+128),w
  7737  1282  0086               	movwf	6
  7738  1283  3001               	movlw	1	; select bank2/3
  7739  1284  0087               	movwf	7
  7740  1285  1281               	bcf	1,5
  7741  1286                     l9163:	
  7742                           
  7743                           ;RF_Control_B1.c: 461: }
  7744                           ;RF_Control_B1.c: 462: }
  7745                           ;RF_Control_B1.c: 463: setBuz(1, 100);
  7746  1286  3064               	movlw	100
  7747  1287  0020               	movlb	0	; select bank0
  7748  1288  00A9               	movwf	setBuz@time
  7749  1289  3000               	movlw	0
  7750  128A  00AA               	movwf	setBuz@time+1
  7751  128B  3001               	movlw	1
  7752  128C  3194  2489         	fcall	_setBuz
  7753  128E  0008               	return
  7754  128F                     __end_of_setRF_AdjControl:	
  7755                           
  7756                           	psect	text30
  7757  128F                     __ptext30:	
  7758 ;; *************** function _setRFSW_Control *****************
  7759 ;; Defined at:
  7760 ;;		line 380 in file "../src/RF_Control_B1.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;  sw              1    wreg     unsigned char 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;  sw              1   79[BANK0 ] unsigned char 
  7765 ;;  status          1   78[BANK0 ] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;		None               void
  7768 ;; Registers used:
  7769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;Total ram usage:        3 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    8
  7782 ;; This function calls:
  7783 ;;		_getDimmerLights_Status
  7784 ;;		_setBuz
  7785 ;;		_setDelayOff_GO
  7786 ;;		_setDimmerLights_SwOff
  7787 ;;		_setDimmerLights_SwOn
  7788 ;;		_setRF_DimmerLights
  7789 ;;		_setTxData
  7790 ;; This function is called by:
  7791 ;;		_setControl_Lights_Table
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           
  7796                           ;psect for function _setRFSW_Control
  7797  128F                     _setRFSW_Control:	
  7798                           
  7799                           ;incstack = 0
  7800                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7801                           ;setRFSW_Control@sw stored from wreg
  7802  128F  0020               	movlb	0	; select bank0
  7803  1290  00EF               	movwf	setRFSW_Control@sw
  7804                           
  7805                           ;RF_Control_B1.c: 381: char status = 0;
  7806  1291  01EE               	clrf	setRFSW_Control@status
  7807                           
  7808                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7809  1292  0023               	movlb	3	; select bank3
  7810  1293  0830               	movf	(_RF_Data^(0+384)+16),w
  7811  1294  3A80               	xorlw	128
  7812  1295  1D03               	skipz
  7813  1296  2AC2               	goto	l9113
  7814                           
  7815                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7816  1297  0020               	movlb	0	; select bank0
  7817  1298  01E5               	clrf	setDelayOff_GO@command
  7818  1299  0AE5               	incf	setDelayOff_GO@command,f
  7819  129A  0023               	movlb	3	; select bank3
  7820  129B  0831               	movf	(_RF_Data^(0+384)+17),w
  7821  129C  0020               	movlb	0	; select bank0
  7822  129D  00ED               	movwf	??_setRFSW_Control
  7823  129E  086D               	movf	??_setRFSW_Control,w
  7824  129F  00E6               	movwf	setDelayOff_GO@value
  7825  12A0  086F               	movf	setRFSW_Control@sw,w
  7826  12A1  318B  23E8  3192   	fcall	_setDelayOff_GO
  7827                           
  7828                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7829  12A4  0020               	movlb	0	; select bank0
  7830  12A5  086F               	movf	setRFSW_Control@sw,w
  7831  12A6  319B  23AA  3192   	fcall	_getDimmerLights_Status
  7832  12A9  3A01               	xorlw	1
  7833  12AA  1D03               	skipz
  7834  12AB  2AC2               	goto	l9113
  7835                           
  7836                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7837  12AC  3064               	movlw	100
  7838  12AD  0020               	movlb	0	; select bank0
  7839  12AE  00A9               	movwf	setBuz@time
  7840  12AF  3000               	movlw	0
  7841  12B0  00AA               	movwf	setBuz@time+1
  7842  12B1  3001               	movlw	1
  7843  12B2  3194  2489  3192   	fcall	_setBuz
  7844                           
  7845                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  7846  12B5  0020               	movlb	0	; select bank0
  7847  12B6  01E5               	clrf	setRF_DimmerLights@on
  7848  12B7  0AE5               	incf	setRF_DimmerLights@on,f
  7849  12B8  086F               	movf	setRFSW_Control@sw,w
  7850  12B9  3196  26C5  3192   	fcall	_setRF_DimmerLights
  7851                           
  7852                           ;RF_Control_B1.c: 388: setTxData();
  7853  12BC  318E  2682  3192   	fcall	_setTxData
  7854                           
  7855                           ;RF_Control_B1.c: 389: status = 1;
  7856  12BF  0020               	movlb	0	; select bank0
  7857  12C0  01EE               	clrf	setRFSW_Control@status
  7858  12C1  0AEE               	incf	setRFSW_Control@status,f
  7859  12C2                     l9113:	
  7860                           
  7861                           ;RF_Control_B1.c: 390: }
  7862                           ;RF_Control_B1.c: 391: }
  7863                           ;RF_Control_B1.c: 393: if (status == 0) {
  7864  12C2  0020               	movlb	0	; select bank0
  7865  12C3  08EE               	movf	setRFSW_Control@status,f
  7866  12C4  1D03               	skipz
  7867  12C5  0008               	return
  7868                           
  7869                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7870  12C6  086F               	movf	setRFSW_Control@sw,w
  7871  12C7  3191  2101  3192   	fcall	_setDimmerLights_SwOn
  7872                           
  7873                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7874  12CA  0020               	movlb	0	; select bank0
  7875  12CB  086F               	movf	setRFSW_Control@sw,w
  7876  12CC  3191  21A3         	fcall	_setDimmerLights_SwOff
  7877  12CE  0008               	return
  7878  12CF                     __end_of_setRFSW_Control:	
  7879                           
  7880                           	psect	text31
  7881  0A5B                     __ptext31:	
  7882 ;; *************** function _setRFSW_AdjControl *****************
  7883 ;; Defined at:
  7884 ;;		line 402 in file "../src/RF_Control_B1.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  sw              1    wreg     unsigned char 
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;  sw              1   72[BANK0 ] unsigned char 
  7889 ;;  status          1   71[BANK0 ] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;		None               void
  7892 ;; Registers used:
  7893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;Total ram usage:        4 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    8
  7906 ;; This function calls:
  7907 ;;		_getDimmerLights_PercentToValue
  7908 ;;		_getDimmerLights_Status
  7909 ;;		_setDimmerIntr_Dimming_RF
  7910 ;;		_setDimmerIntr_MaxmumValue
  7911 ;;		_setDimmerLights_DimmingRun
  7912 ;;		_setDimmerLights_SwOff
  7913 ;;		_setDimmerLights_SwOn
  7914 ;;		_setMemory_Modify
  7915 ;;		_setProductData
  7916 ;;		_setTxData
  7917 ;; This function is called by:
  7918 ;;		_setControl_Lights_Table
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function _setRFSW_AdjControl
  7924  0A5B                     _setRFSW_AdjControl:	
  7925                           
  7926                           ;incstack = 0
  7927                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7928                           ;setRFSW_AdjControl@sw stored from wreg
  7929  0A5B  0020               	movlb	0	; select bank0
  7930  0A5C  00E8               	movwf	setRFSW_AdjControl@sw
  7931                           
  7932                           ;RF_Control_B1.c: 403: char status = 0;
  7933  0A5D  01E7               	clrf	setRFSW_AdjControl@status
  7934                           
  7935                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  7936  0A5E  0868               	movf	setRFSW_AdjControl@sw,w
  7937  0A5F  319B  23AA  318A   	fcall	_getDimmerLights_Status
  7938  0A62  0020               	movlb	0	; select bank0
  7939  0A63  00E5               	movwf	??_setRFSW_AdjControl
  7940  0A64  0865               	movf	??_setRFSW_AdjControl,w
  7941  0A65  00E7               	movwf	setRFSW_AdjControl@status
  7942                           
  7943                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  7944  0A66  3065               	movlw	101
  7945  0A67  0023               	movlb	3	; select bank3
  7946  0A68  0229               	subwf	(_RF_Data^(0+384)+9),w
  7947  0A69  1C03               	skipc
  7948  0A6A  2A72               	goto	l9125
  7949                           
  7950                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  7951  0A6B  3064               	movlw	100
  7952  0A6C  0020               	movlb	0	; select bank0
  7953  0A6D  00E5               	movwf	??_setRFSW_AdjControl
  7954  0A6E  0865               	movf	??_setRFSW_AdjControl,w
  7955  0A6F  0023               	movlb	3	; select bank3
  7956  0A70  00A9               	movwf	(_RF_Data^(0+384)+9)
  7957                           
  7958                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  7959  0A71  2A77               	goto	l9129
  7960  0A72                     l9125:	
  7961  0A72  08A9               	movf	(_RF_Data^(0+384)+9),f
  7962  0A73  1D03               	skipz
  7963  0A74  2A77               	goto	l9129
  7964                           
  7965                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  7966  0A75  01A9               	clrf	(_RF_Data^(0+384)+9)
  7967  0A76  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7968  0A77                     l9129:	
  7969                           
  7970                           ;RF_Control_B1.c: 411: }
  7971                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  7972  0A77  0829               	movf	(_RF_Data^(0+384)+9),w
  7973  0A78  0020               	movlb	0	; select bank0
  7974  0A79  00E5               	movwf	??_setRFSW_AdjControl
  7975  0A7A  0865               	movf	??_setRFSW_AdjControl,w
  7976  0A7B  00E2               	movwf	setProductData@value
  7977  0A7C  3009               	movlw	9
  7978  0A7D  319B  2304  318A   	fcall	_setProductData
  7979                           
  7980                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  7981  0A80  0020               	movlb	0	; select bank0
  7982  0A81  0868               	movf	setRFSW_AdjControl@sw,w
  7983  0A82  00E5               	movwf	??_setRFSW_AdjControl
  7984  0A83  0865               	movf	??_setRFSW_AdjControl,w
  7985  0A84  00E2               	movwf	setProductData@value
  7986  0A85  300B               	movlw	11
  7987  0A86  319B  2304  318A   	fcall	_setProductData
  7988                           
  7989                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  7990  0A89  0020               	movlb	0	; select bank0
  7991  0A8A  0868               	movf	setRFSW_AdjControl@sw,w
  7992  0A8B  3E1A               	addlw	26
  7993  0A8C  0021               	movlb	1	; select bank1
  7994  0A8D  076C               	addwf	_product^(0+128),w
  7995  0A8E  0020               	movlb	0	; select bank0
  7996  0A8F  00E5               	movwf	??_setRFSW_AdjControl
  7997  0A90  0865               	movf	??_setRFSW_AdjControl,w
  7998  0A91  0086               	movwf	6
  7999  0A92  3002               	movlw	2	; select bank4/5
  8000  0A93  0087               	movwf	7
  8001  0A94  0801               	movf	1,w
  8002  0A95  00E6               	movwf	??_setRFSW_AdjControl+1
  8003  0A96  0866               	movf	??_setRFSW_AdjControl+1,w
  8004  0A97  00E2               	movwf	setProductData@value
  8005  0A98  3011               	movlw	17
  8006  0A99  319B  2304  318A   	fcall	_setProductData
  8007                           
  8008                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8009  0A9C  0023               	movlb	3	; select bank3
  8010  0A9D  0829               	movf	(_RF_Data^(0+384)+9),w
  8011  0A9E  0020               	movlb	0	; select bank0
  8012  0A9F  00E5               	movwf	??_setRFSW_AdjControl
  8013  0AA0  0865               	movf	??_setRFSW_AdjControl,w
  8014  0AA1  00E2               	movwf	setProductData@value
  8015  0AA2  0868               	movf	setRFSW_AdjControl@sw,w
  8016  0AA3  3E14               	addlw	20
  8017  0AA4  319B  2304  318A   	fcall	_setProductData
  8018                           
  8019                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8020  0AA7  3001               	movlw	1
  8021  0AA8  319C  247B  318A   	fcall	_setMemory_Modify
  8022                           
  8023                           ;RF_Control_B1.c: 427: if (status == 1) {
  8024  0AAB  0020               	movlb	0	; select bank0
  8025  0AAC  0867               	movf	setRFSW_AdjControl@status,w
  8026  0AAD  3A01               	xorlw	1
  8027  0AAE  1D03               	skipz
  8028  0AAF  2AC7               	goto	l9139
  8029                           
  8030                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8031  0AB0  0023               	movlb	3	; select bank3
  8032  0AB1  0829               	movf	(_RF_Data^(0+384)+9),w
  8033  0AB2  3195  25FB  318A   	fcall	_getDimmerLights_PercentToValue
  8034  0AB5  0020               	movlb	0	; select bank0
  8035  0AB6  00E5               	movwf	??_setRFSW_AdjControl
  8036  0AB7  0865               	movf	??_setRFSW_AdjControl,w
  8037  0AB8  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8038  0AB9  0868               	movf	setRFSW_AdjControl@sw,w
  8039  0ABA  319B  2310  318A   	fcall	_setDimmerIntr_MaxmumValue
  8040                           
  8041                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8042  0ABD  0020               	movlb	0	; select bank0
  8043  0ABE  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8044  0ABF  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8045  0AC0  0868               	movf	setRFSW_AdjControl@sw,w
  8046  0AC1  319D  2586  318A   	fcall	_setDimmerIntr_Dimming_RF
  8047                           
  8048                           ;RF_Control_B1.c: 430: setTxData();
  8049  0AC4  318E  2682         	fcall	_setTxData
  8050                           
  8051                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8052  0AC6  0008               	return
  8053  0AC7                     l9139:	
  8054  0AC7  0020               	movlb	0	; select bank0
  8055  0AC8  08E7               	movf	setRFSW_AdjControl@status,f
  8056  0AC9  1D03               	skipz
  8057  0ACA  0008               	return
  8058                           
  8059                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8060  0ACB  01A2               	clrf	setDimmerLights_DimmingRun@command
  8061  0ACC  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8062  0ACD  0868               	movf	setRFSW_AdjControl@sw,w
  8063  0ACE  319E  261E  318A   	fcall	_setDimmerLights_DimmingRun
  8064                           
  8065                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8066  0AD1  0020               	movlb	0	; select bank0
  8067  0AD2  0868               	movf	setRFSW_AdjControl@sw,w
  8068  0AD3  3191  2101  318A   	fcall	_setDimmerLights_SwOn
  8069                           
  8070                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8071  0AD6  0020               	movlb	0	; select bank0
  8072  0AD7  0868               	movf	setRFSW_AdjControl@sw,w
  8073  0AD8  3191  21A3         	fcall	_setDimmerLights_SwOff
  8074  0ADA  0008               	return
  8075  0ADB                     __end_of_setRFSW_AdjControl:	
  8076                           
  8077                           	psect	text32
  8078  1E1E                     __ptext32:	
  8079 ;; *************** function _setDimmerLights_DimmingRun *****************
  8080 ;; Defined at:
  8081 ;;		line 1085 in file "../src/Dimmer_B1.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  lights          1    wreg     unsigned char 
  8084 ;;  command         1    2[BANK0 ] unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  lights          1    4[BANK0 ] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        3 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    6
  8103 ;; This function calls:
  8104 ;;		_DimmerLights_SelectPointer
  8105 ;; This function is called by:
  8106 ;;		_setRFSW_AdjControl
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function _setDimmerLights_DimmingRun
  8112  1E1E                     _setDimmerLights_DimmingRun:	
  8113                           
  8114                           ;incstack = 0
  8115                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8116                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8117  1E1E  0020               	movlb	0	; select bank0
  8118  1E1F  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8119                           
  8120                           ;Dimmer_B1.c: 1086: DimmerLights_SelectPointer(lights);
  8121  1E20  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8122  1E21  319A  22F8         	fcall	_DimmerLights_SelectPointer
  8123                           
  8124                           ;Dimmer_B1.c: 1087: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8125  1E23  0020               	movlb	0	; select bank0
  8126  1E24  0822               	movf	setDimmerLights_DimmingRun@command,w
  8127  1E25  3A01               	xorlw	1
  8128  1E26  3000               	movlw	0
  8129  1E27  1903               	skipnz
  8130  1E28  3001               	movlw	1
  8131  1E29  00A3               	movwf	??_setDimmerLights_DimmingRun
  8132  1E2A  0021               	movlb	1	; select bank1
  8133  1E2B  0A4E               	incf	_DimmerLights^(0+128),w
  8134  1E2C  0086               	movwf	6
  8135  1E2D  3001               	movlw	1	; select bank2/3
  8136  1E2E  0087               	movwf	7
  8137  1E2F  0020               	movlb	0	; select bank0
  8138  1E30  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8139  1E31  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8140  1E32  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8141  1E33  0801               	movf	1,w
  8142  1E34  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8143  1E35  39BF               	andlw	-65
  8144  1E36  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8145  1E37  0081               	movwf	1
  8146  1E38  0008               	return
  8147  1E39                     __end_of_setDimmerLights_DimmingRun:	
  8148                           
  8149                           	psect	text33
  8150  1BFF                     __ptext33:	
  8151 ;; *************** function _getRF_KeyStatus *****************
  8152 ;; Defined at:
  8153 ;;		line 166 in file "../src/RF_Control_B1.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  key             1    1[BANK0 ] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      unsigned char 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        3 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    5
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_setRF_Main
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _getRF_KeyStatus
  8183  1BFF                     _getRF_KeyStatus:	
  8184                           
  8185                           ;RF_Control_B1.c: 167: char key = 0;
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8189  1BFF  0020               	movlb	0	; select bank0
  8190  1C00  01A1               	clrf	getRF_KeyStatus@key
  8191                           
  8192                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8193  1C01  01A2               	clrf	_getRF_KeyStatus$5417
  8194  1C02  0AA2               	incf	_getRF_KeyStatus$5417,f
  8195  1C03  1F0C               	btfss	12,6	;volatile
  8196  1C04  1A0C               	btfsc	12,4	;volatile
  8197  1C05  2C0A               	goto	l9751
  8198  1C06  1C0C               	btfss	12,0	;volatile
  8199  1C07  1B8C               	btfsc	12,7	;volatile
  8200  1C08  2C0A               	goto	l9751
  8201  1C09  01A2               	clrf	_getRF_KeyStatus$5417
  8202  1C0A                     l9751:	
  8203  1C0A  0822               	movf	_getRF_KeyStatus$5417,w
  8204  1C0B  00A0               	movwf	??_getRF_KeyStatus
  8205  1C0C  0820               	movf	??_getRF_KeyStatus,w
  8206  1C0D  00A1               	movwf	getRF_KeyStatus@key
  8207                           
  8208                           ;RF_Control_B1.c: 179: return key;
  8209  1C0E  0821               	movf	getRF_KeyStatus@key,w
  8210  1C0F  0008               	return
  8211  1C10                     __end_of_getRF_KeyStatus:	
  8212                           
  8213                           	psect	text34
  8214  1BEE                     __ptext34:	
  8215 ;; *************** function _getBuz_GO *****************
  8216 ;; Defined at:
  8217 ;;		line 82 in file "../src/Buzzer_B1.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;		None
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;  i               2    4[BANK0 ] int 
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  2    0[BANK0 ] int 
  8224 ;; Registers used:
  8225 ;;		wreg, status,2, status,0
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8231 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;Total ram usage:        6 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:    5
  8238 ;; This function calls:
  8239 ;;		Nothing
  8240 ;; This function is called by:
  8241 ;;		_setRF_Main
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _getBuz_GO
  8247  1BEE                     _getBuz_GO:	
  8248                           
  8249                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8253  1BEE  0022               	movlb	2	; select bank2
  8254  1BEF  0C20               	rrf	_Buz1^(0+256),w
  8255  1BF0  3901               	andlw	1
  8256  1BF1  0020               	movlb	0	; select bank0
  8257  1BF2  00A2               	movwf	??_getBuz_GO
  8258  1BF3  01A3               	clrf	??_getBuz_GO+1
  8259  1BF4  0822               	movf	??_getBuz_GO,w
  8260  1BF5  00A4               	movwf	getBuz_GO@i
  8261  1BF6  0823               	movf	??_getBuz_GO+1,w
  8262  1BF7  00A5               	movwf	getBuz_GO@i+1
  8263                           
  8264                           ;Buzzer_B1.c: 84: return i;
  8265  1BF8  0825               	movf	getBuz_GO@i+1,w
  8266  1BF9  01A1               	clrf	?_getBuz_GO+1
  8267  1BFA  07A1               	addwf	?_getBuz_GO+1,f
  8268  1BFB  0824               	movf	getBuz_GO@i,w
  8269  1BFC  01A0               	clrf	?_getBuz_GO
  8270  1BFD  07A0               	addwf	?_getBuz_GO,f
  8271  1BFE  0008               	return
  8272  1BFF                     __end_of_getBuz_GO:	
  8273                           
  8274                           	psect	text35
  8275  1B9B                     __ptext35:	
  8276 ;; *************** function _RF_RxDisable *****************
  8277 ;; Defined at:
  8278 ;;		line 154 in file "../src/RF_Control_B1.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;Total ram usage:        0 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    7
  8299 ;; This function calls:
  8300 ;;		_CC2500_WriteCommand
  8301 ;; This function is called by:
  8302 ;;		_setRF_Main
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           
  8307                           ;psect for function _RF_RxDisable
  8308  1B9B                     _RF_RxDisable:	
  8309                           
  8310                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8311                           
  8312                           ;incstack = 0
  8313                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8314  1B9B  0021               	movlb	1	; select bank1
  8315  1B9C  18A0               	btfsc	_RF1^(0+128),1
  8316  1B9D  2BA0               	goto	l2155
  8317  1B9E  1DA0               	btfss	_RF1^(0+128),3
  8318  1B9F  0008               	return
  8319  1BA0                     l2155:	
  8320                           
  8321                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8322  1BA0  11A0               	bcf	_RF1^(0+128),3
  8323                           
  8324                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8325  1BA1  10A0               	bcf	_RF1^(0+128),1
  8326                           
  8327                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8328  1BA2  3036               	movlw	54
  8329  1BA3  319E  2604  319B   	fcall	_CC2500_WriteCommand
  8330                           
  8331                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8332  1BA6  303A               	movlw	58
  8333  1BA7  319E  2604         	fcall	_CC2500_WriteCommand
  8334  1BA9  0008               	return
  8335  1BAA                     __end_of_RF_RxDisable:	
  8336                           
  8337                           	psect	text36
  8338  0825                     __ptext36:	
  8339 ;; *************** function _CC2500_TxData *****************
  8340 ;; Defined at:
  8341 ;;		line 32 in file "../src/CC2500_B1.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;		None               void
  8348 ;; Registers used:
  8349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;Total ram usage:        2 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    7
  8362 ;; This function calls:
  8363 ;;		_CC2500_WriteByte
  8364 ;;		_CC2500_WriteCommand
  8365 ;;		_RF_Timeout_Counter
  8366 ;;		_setRF_TimeoutCleared
  8367 ;; This function is called by:
  8368 ;;		_setRF_Main
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           
  8373                           ;psect for function _CC2500_TxData
  8374  0825                     _CC2500_TxData:	
  8375                           
  8376                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8377                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8378                           
  8379                           ;incstack = 0
  8380                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8381  0825  3036               	movlw	54
  8382  0826  319E  2604  3188   	fcall	_CC2500_WriteCommand
  8383                           
  8384                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8385  0829  303B               	movlw	59
  8386  082A  319E  2604  3188   	fcall	_CC2500_WriteCommand
  8387                           
  8388                           ;CC2500_B1.c: 38: RC0 = 0;
  8389  082D  0020               	movlb	0	; select bank0
  8390  082E  100E               	bcf	14,0	;volatile
  8391                           
  8392                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8393  082F  307F               	movlw	127
  8394  0830  00A4               	movwf	??_CC2500_TxData
  8395  0831  0824               	movf	??_CC2500_TxData,w
  8396  0832  0021               	movlb	1	; select bank1
  8397  0833  00D3               	movwf	_SPI0Buffer^(0+128)
  8398                           
  8399                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8400  0834  2838               	goto	l9451
  8401  0835                     l9449:	
  8402                           
  8403                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8404  0835  319C  24EE  3188   	fcall	_RF_Timeout_Counter
  8405  0838                     l9451:	
  8406  0838  0020               	movlb	0	; select bank0
  8407  0839  1E8E               	btfss	14,5	;volatile
  8408  083A  283E               	goto	l9455
  8409  083B  0021               	movlb	1	; select bank1
  8410  083C  1F21               	btfss	(_RF1^(0+128)+1),6
  8411  083D  2835               	goto	l9449
  8412  083E                     l9455:	
  8413                           
  8414                           ;CC2500_B1.c: 42: };
  8415                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8416  083E  319A  2238  3188   	fcall	_setRF_TimeoutCleared
  8417                           
  8418                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8419  0841  319D  25B7  3188   	fcall	_CC2500_WriteByte
  8420                           
  8421                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8422  0844  0021               	movlb	1	; select bank1
  8423  0845  0856               	movf	_Tx_Length^(0+128),w
  8424  0846  0020               	movlb	0	; select bank0
  8425  0847  00A4               	movwf	??_CC2500_TxData
  8426  0848  0824               	movf	??_CC2500_TxData,w
  8427  0849  0021               	movlb	1	; select bank1
  8428  084A  00D3               	movwf	_SPI0Buffer^(0+128)
  8429                           
  8430                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8431  084B  319D  25B7  3188   	fcall	_CC2500_WriteByte
  8432                           
  8433                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8434  084E  0020               	movlb	0	; select bank0
  8435  084F  01A5               	clrf	CC2500_TxData@loop_e
  8436  0850                     l9469:	
  8437  0850  0021               	movlb	1	; select bank1
  8438  0851  0856               	movf	_Tx_Length^(0+128),w
  8439  0852  0020               	movlb	0	; select bank0
  8440  0853  0225               	subwf	CC2500_TxData@loop_e,w
  8441  0854  1803               	btfsc	3,0
  8442  0855  2869               	goto	l235
  8443                           
  8444                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8445  0856  0825               	movf	CC2500_TxData@loop_e,w
  8446  0857  3EA0               	addlw	_RF_Data& (0+255)
  8447  0858  0086               	movwf	6
  8448  0859  3001               	movlw	1	; select bank3/4
  8449  085A  0087               	movwf	7
  8450  085B  0801               	movf	1,w
  8451  085C  00A4               	movwf	??_CC2500_TxData
  8452  085D  0824               	movf	??_CC2500_TxData,w
  8453  085E  0021               	movlb	1	; select bank1
  8454  085F  00D3               	movwf	_SPI0Buffer^(0+128)
  8455                           
  8456                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8457  0860  319D  25B7  3188   	fcall	_CC2500_WriteByte
  8458  0863  3001               	movlw	1
  8459  0864  0020               	movlb	0	; select bank0
  8460  0865  00A4               	movwf	??_CC2500_TxData
  8461  0866  0824               	movf	??_CC2500_TxData,w
  8462  0867  07A5               	addwf	CC2500_TxData@loop_e,f
  8463  0868  2850               	goto	l9469
  8464  0869                     l235:	
  8465                           
  8466                           ;CC2500_B1.c: 51: }
  8467                           ;CC2500_B1.c: 52: RC0 = 1;
  8468  0869  140E               	bsf	14,0	;volatile
  8469                           
  8470                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8471  086A  3035               	movlw	53
  8472  086B  319E  2604  3188   	fcall	_CC2500_WriteCommand
  8473                           
  8474                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8475  086E  2872               	goto	l9475
  8476  086F                     l9473:	
  8477                           
  8478                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8479  086F  319C  24EE  3188   	fcall	_RF_Timeout_Counter
  8480  0872                     l9475:	
  8481  0872  0020               	movlb	0	; select bank0
  8482  0873  188E               	btfsc	14,1	;volatile
  8483  0874  2878               	goto	l9479
  8484  0875  0021               	movlb	1	; select bank1
  8485  0876  1F21               	btfss	(_RF1^(0+128)+1),6
  8486  0877  286F               	goto	l9473
  8487  0878                     l9479:	
  8488                           
  8489                           ;CC2500_B1.c: 56: };
  8490                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8491  0878  319A  2238  3188   	fcall	_setRF_TimeoutCleared
  8492                           
  8493                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8494  087B  287F               	goto	l9483
  8495  087C                     l9481:	
  8496                           
  8497                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8498  087C  319C  24EE  3188   	fcall	_RF_Timeout_Counter
  8499  087F                     l9483:	
  8500  087F  0020               	movlb	0	; select bank0
  8501  0880  1C8E               	btfss	14,1	;volatile
  8502  0881  2885               	goto	l9487
  8503  0882  0021               	movlb	1	; select bank1
  8504  0883  1F21               	btfss	(_RF1^(0+128)+1),6
  8505  0884  287C               	goto	l9481
  8506  0885                     l9487:	
  8507                           
  8508                           ;CC2500_B1.c: 61: };
  8509                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8510  0885  319A  2238  3188   	fcall	_setRF_TimeoutCleared
  8511                           
  8512                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8513  0888  3036               	movlw	54
  8514  0889  319E  2604  3188   	fcall	_CC2500_WriteCommand
  8515                           
  8516                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8517  088C  303B               	movlw	59
  8518  088D  319E  2604         	fcall	_CC2500_WriteCommand
  8519                           
  8520                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8521  088F  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8522  0890  0008               	return
  8523  0891                     __end_of_CC2500_TxData:	
  8524                           
  8525                           	psect	text37
  8526  1795                     __ptext37:	
  8527 ;; *************** function _CC2500_RxData *****************
  8528 ;; Defined at:
  8529 ;;		line 73 in file "../src/CC2500_B1.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;		None               void
  8536 ;; Registers used:
  8537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;Total ram usage:        2 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    7
  8550 ;; This function calls:
  8551 ;;		_CC2500_ReadByte
  8552 ;;		_CC2500_ReadStatus
  8553 ;;		_CC2500_WriteByte
  8554 ;;		_CC2500_WriteCommand
  8555 ;;		_RF_Timeout_Counter
  8556 ;;		_setRF_TimeoutCleared
  8557 ;; This function is called by:
  8558 ;;		_setRF_Main
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           
  8563                           ;psect for function _CC2500_RxData
  8564  1795                     _CC2500_RxData:	
  8565                           
  8566                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8567                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8571  1795  0020               	movlb	0	; select bank0
  8572  1796  188E               	btfsc	14,1	;volatile
  8573  1797  0008               	return
  8574                           
  8575                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8576  1798  303B               	movlw	59
  8577  1799  3188  2000  3197   	fcall	_CC2500_ReadStatus
  8578                           
  8579                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8580  179C  0021               	movlb	1	; select bank1
  8581  179D  0859               	movf	_s_data^(0+128),w
  8582  179E  1903               	btfsc	3,2
  8583  179F  0008               	return
  8584                           
  8585                           ;CC2500_B1.c: 90: RC0 = 0;
  8586  17A0  0020               	movlb	0	; select bank0
  8587  17A1  100E               	bcf	14,0	;volatile
  8588                           
  8589                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8590  17A2  30FF               	movlw	255
  8591  17A3  00A4               	movwf	??_CC2500_RxData
  8592  17A4  0824               	movf	??_CC2500_RxData,w
  8593  17A5  0021               	movlb	1	; select bank1
  8594  17A6  00D3               	movwf	_SPI0Buffer^(0+128)
  8595                           
  8596                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8597  17A7  2FAB               	goto	l9507
  8598  17A8                     l9505:	
  8599                           
  8600                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8601  17A8  319C  24EE  3197   	fcall	_RF_Timeout_Counter
  8602  17AB                     l9507:	
  8603  17AB  0020               	movlb	0	; select bank0
  8604  17AC  1E8E               	btfss	14,5	;volatile
  8605  17AD  2FB1               	goto	l9511
  8606  17AE  0021               	movlb	1	; select bank1
  8607  17AF  1F21               	btfss	(_RF1^(0+128)+1),6
  8608  17B0  2FA8               	goto	l9505
  8609  17B1                     l9511:	
  8610                           
  8611                           ;CC2500_B1.c: 95: };
  8612                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8613  17B1  319A  2238  3197   	fcall	_setRF_TimeoutCleared
  8614                           
  8615                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8616  17B4  319D  25B7  3197   	fcall	_CC2500_WriteByte
  8617                           
  8618                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8619  17B7  319E  2671  3197   	fcall	_CC2500_ReadByte
  8620                           
  8621                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8622  17BA  0021               	movlb	1	; select bank1
  8623  17BB  0853               	movf	_SPI0Buffer^(0+128),w
  8624  17BC  0020               	movlb	0	; select bank0
  8625  17BD  00A4               	movwf	??_CC2500_RxData
  8626  17BE  0824               	movf	??_CC2500_RxData,w
  8627  17BF  0021               	movlb	1	; select bank1
  8628  17C0  00D2               	movwf	_Rx_Length^(0+128)
  8629                           
  8630                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8631  17C1  0020               	movlb	0	; select bank0
  8632  17C2  01A5               	clrf	CC2500_RxData@loop_f
  8633  17C3                     l9527:	
  8634  17C3  0021               	movlb	1	; select bank1
  8635  17C4  0852               	movf	_Rx_Length^(0+128),w
  8636  17C5  0020               	movlb	0	; select bank0
  8637  17C6  0225               	subwf	CC2500_RxData@loop_f,w
  8638  17C7  1803               	btfsc	3,0
  8639  17C8  2FDC               	goto	l9529
  8640                           
  8641                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8642  17C9  319E  2671  3197   	fcall	_CC2500_ReadByte
  8643                           
  8644                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8645  17CC  0021               	movlb	1	; select bank1
  8646  17CD  0853               	movf	_SPI0Buffer^(0+128),w
  8647  17CE  0020               	movlb	0	; select bank0
  8648  17CF  00A4               	movwf	??_CC2500_RxData
  8649  17D0  0825               	movf	CC2500_RxData@loop_f,w
  8650  17D1  3EA0               	addlw	_RF_Data& (0+255)
  8651  17D2  0086               	movwf	6
  8652  17D3  3001               	movlw	1	; select bank3/4
  8653  17D4  0087               	movwf	7
  8654  17D5  0824               	movf	??_CC2500_RxData,w
  8655  17D6  0081               	movwf	1
  8656  17D7  3001               	movlw	1
  8657  17D8  00A4               	movwf	??_CC2500_RxData
  8658  17D9  0824               	movf	??_CC2500_RxData,w
  8659  17DA  07A5               	addwf	CC2500_RxData@loop_f,f
  8660  17DB  2FC3               	goto	l9527
  8661  17DC                     l9529:	
  8662                           
  8663                           ;CC2500_B1.c: 104: }
  8664                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8665  17DC  319E  2671  3197   	fcall	_CC2500_ReadByte
  8666                           
  8667                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8668  17DF  0021               	movlb	1	; select bank1
  8669  17E0  0853               	movf	_SPI0Buffer^(0+128),w
  8670  17E1  0020               	movlb	0	; select bank0
  8671  17E2  00A4               	movwf	??_CC2500_RxData
  8672  17E3  0824               	movf	??_CC2500_RxData,w
  8673  17E4  0021               	movlb	1	; select bank1
  8674  17E5  00D1               	movwf	_RSSI^(0+128)
  8675                           
  8676                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8677  17E6  319E  2671  3197   	fcall	_CC2500_ReadByte
  8678                           
  8679                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8680  17E9  0021               	movlb	1	; select bank1
  8681  17EA  0853               	movf	_SPI0Buffer^(0+128),w
  8682  17EB  0020               	movlb	0	; select bank0
  8683  17EC  00A4               	movwf	??_CC2500_RxData
  8684  17ED  0824               	movf	??_CC2500_RxData,w
  8685  17EE  0021               	movlb	1	; select bank1
  8686  17EF  00CA               	movwf	_CRC^(0+128)
  8687                           
  8688                           ;CC2500_B1.c: 109: RC0 = 1;
  8689  17F0  0020               	movlb	0	; select bank0
  8690  17F1  140E               	bsf	14,0	;volatile
  8691                           
  8692                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8693  17F2  0021               	movlb	1	; select bank1
  8694  17F3  1BCA               	btfsc	_CRC^(0+128),7
  8695                           
  8696                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8697  17F4  146D               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8698                           
  8699                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8700  17F5  11A0               	bcf	_RF1^(0+128),3
  8701                           
  8702                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8703  17F6  14A0               	bsf	_RF1^(0+128),1
  8704                           
  8705                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8706  17F7  3036               	movlw	54
  8707  17F8  319E  2604  3197   	fcall	_CC2500_WriteCommand
  8708                           
  8709                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8710  17FB  303A               	movlw	58
  8711  17FC  319E  2604         	fcall	_CC2500_WriteCommand
  8712  17FE  0021               	movlb	1	; select bank1
  8713  17FF  0008               	return
  8714  1800                     __end_of_CC2500_RxData:	
  8715                           
  8716                           	psect	text38
  8717  0800                     __ptext38:	
  8718 ;; *************** function _CC2500_ReadStatus *****************
  8719 ;; Defined at:
  8720 ;;		line 308 in file "../src/CC2500_B1.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  status_addr     1    wreg     unsigned char 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8725 ;; Return value:  Size  Location     Type
  8726 ;;		None               void
  8727 ;; Registers used:
  8728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        2 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    6
  8741 ;; This function calls:
  8742 ;;		_CC2500_ReadByte
  8743 ;;		_CC2500_WriteByte
  8744 ;;		_RF_Timeout_Counter
  8745 ;;		_setRF_TimeoutCleared
  8746 ;; This function is called by:
  8747 ;;		_CC2500_RxData
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _CC2500_ReadStatus
  8753  0800                     _CC2500_ReadStatus:	
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8757                           ;CC2500_ReadStatus@status_addr stored from wreg
  8758  0800  0020               	movlb	0	; select bank0
  8759  0801  00A3               	movwf	CC2500_ReadStatus@status_addr
  8760                           
  8761                           ;CC2500_B1.c: 309: RC0 = 0;
  8762  0802  100E               	bcf	14,0	;volatile
  8763                           
  8764                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8765  0803  0823               	movf	CC2500_ReadStatus@status_addr,w
  8766  0804  3EC0               	addlw	192
  8767  0805  00A2               	movwf	??_CC2500_ReadStatus
  8768  0806  0822               	movf	??_CC2500_ReadStatus,w
  8769  0807  0021               	movlb	1	; select bank1
  8770  0808  00D3               	movwf	_SPI0Buffer^(0+128)
  8771                           
  8772                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8773  0809  280D               	goto	l9171
  8774  080A                     l9169:	
  8775                           
  8776                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8777  080A  319C  24EE  3188   	fcall	_RF_Timeout_Counter
  8778  080D                     l9171:	
  8779  080D  0020               	movlb	0	; select bank0
  8780  080E  1E8E               	btfss	14,5	;volatile
  8781  080F  2813               	goto	l9175
  8782  0810  0021               	movlb	1	; select bank1
  8783  0811  1F21               	btfss	(_RF1^(0+128)+1),6
  8784  0812  280A               	goto	l9169
  8785  0813                     l9175:	
  8786                           
  8787                           ;CC2500_B1.c: 314: };
  8788                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8789  0813  319A  2238  3188   	fcall	_setRF_TimeoutCleared
  8790                           
  8791                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8792  0816  319D  25B7  3188   	fcall	_CC2500_WriteByte
  8793                           
  8794                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8795  0819  319E  2671         	fcall	_CC2500_ReadByte
  8796                           
  8797                           ;CC2500_B1.c: 319: RC0 = 1;
  8798  081B  0020               	movlb	0	; select bank0
  8799  081C  140E               	bsf	14,0	;volatile
  8800                           
  8801                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8802  081D  0021               	movlb	1	; select bank1
  8803  081E  0853               	movf	_SPI0Buffer^(0+128),w
  8804  081F  0020               	movlb	0	; select bank0
  8805  0820  00A2               	movwf	??_CC2500_ReadStatus
  8806  0821  0822               	movf	??_CC2500_ReadStatus,w
  8807  0822  0021               	movlb	1	; select bank1
  8808  0823  00D9               	movwf	_s_data^(0+128)
  8809  0824  0008               	return
  8810  0825                     __end_of_CC2500_ReadStatus:	
  8811                           
  8812                           	psect	text39
  8813  1E71                     __ptext39:	
  8814 ;; *************** function _CC2500_ReadByte *****************
  8815 ;; Defined at:
  8816 ;;		line 242 in file "../src/CC2500_B1.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;		None
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8821 ;; Return value:  Size  Location     Type
  8822 ;;		None               void
  8823 ;; Registers used:
  8824 ;;		wreg, status,2, status,0
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;Total ram usage:        2 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    5
  8837 ;; This function calls:
  8838 ;;		Nothing
  8839 ;; This function is called by:
  8840 ;;		_CC2500_RxData
  8841 ;;		_CC2500_ReadStatus
  8842 ;;		_CC2500_ReadREG
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           
  8847                           ;psect for function _CC2500_ReadByte
  8848  1E71                     _CC2500_ReadByte:	
  8849                           
  8850                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8851                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8855  1E71  0020               	movlb	0	; select bank0
  8856  1E72  01A1               	clrf	CC2500_ReadByte@loop_b
  8857  1E73                     L2:	
  8858  1E73  3008               	movlw	8
  8859  1E74  0221               	subwf	CC2500_ReadByte@loop_b,w
  8860  1E75  1803               	btfsc	3,0
  8861  1E76  0008               	return
  8862                           
  8863                           ;CC2500_B1.c: 245: RC3 = 1;
  8864  1E77  158E               	bsf	14,3	;volatile
  8865                           
  8866                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8867  1E78  1003               	clrc
  8868  1E79  0021               	movlb	1	; select bank1
  8869  1E7A  0DD3               	rlf	_SPI0Buffer^(0+128),f
  8870                           
  8871                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8872  1E7B  0020               	movlb	0	; select bank0
  8873  1E7C  1E8E               	btfss	14,5	;volatile
  8874  1E7D  2E81               	goto	l9043
  8875                           
  8876                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8877  1E7E  0021               	movlb	1	; select bank1
  8878  1E7F  1453               	bsf	_SPI0Buffer^(0+128),0
  8879  1E80  2E87               	goto	l9045
  8880  1E81                     l9043:	
  8881                           
  8882                           ;CC2500_B1.c: 249: else
  8883                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8884  1E81  30FE               	movlw	254
  8885  1E82  0020               	movlb	0	; select bank0
  8886  1E83  00A0               	movwf	??_CC2500_ReadByte
  8887  1E84  0820               	movf	??_CC2500_ReadByte,w
  8888  1E85  0021               	movlb	1	; select bank1
  8889  1E86  05D3               	andwf	_SPI0Buffer^(0+128),f
  8890  1E87                     l9045:	
  8891                           
  8892                           ;CC2500_B1.c: 251: RC3 = 0;
  8893  1E87  0020               	movlb	0	; select bank0
  8894  1E88  118E               	bcf	14,3	;volatile
  8895  1E89  3001               	movlw	1
  8896  1E8A  00A0               	movwf	??_CC2500_ReadByte
  8897  1E8B  0820               	movf	??_CC2500_ReadByte,w
  8898  1E8C  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8899  1E8D  2E73               	goto	L2
  8900  1E8E                     __end_of_CC2500_ReadByte:	
  8901                           
  8902                           	psect	text40
  8903  1D03                     __ptext40:	
  8904 ;; *************** function _CC2500_PowerOnInitial *****************
  8905 ;; Defined at:
  8906 ;;		line 126 in file "../src/CC2500_B1.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;		None
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;		None               void
  8913 ;; Registers used:
  8914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;Total ram usage:        0 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    8
  8927 ;; This function calls:
  8928 ;;		_CC2500_ClearRXFIFO
  8929 ;;		_CC2500_ClearTXFIFO
  8930 ;;		_CC2500_FrequencyCabr
  8931 ;;		_CC2500_InitPATable
  8932 ;;		_CC2500_InitSetREG
  8933 ;;		_CC2500_PowerRST
  8934 ;;		_CC2500_SIDLEMode
  8935 ;; This function is called by:
  8936 ;;		_main
  8937 ;;		_setRF_Main
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           
  8942                           ;psect for function _CC2500_PowerOnInitial
  8943  1D03                     _CC2500_PowerOnInitial:	
  8944                           
  8945                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8946                           
  8947                           ;incstack = 0
  8948                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8949  1D03  3193  2351  319D   	fcall	_CC2500_PowerRST
  8950                           
  8951                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8952  1D06  3190  2010  319D   	fcall	_CC2500_InitSetREG
  8953                           
  8954                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8955  1D09  319E  26CB  319D   	fcall	_CC2500_InitPATable
  8956                           
  8957                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8958  1D0C  319A  2240  319D   	fcall	_CC2500_ClearTXFIFO
  8959                           
  8960                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8961  1D0F  319A  223C  319D   	fcall	_CC2500_ClearRXFIFO
  8962                           
  8963                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8964  1D12  319B  2358  319D   	fcall	_CC2500_FrequencyCabr
  8965                           
  8966                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8967  1D15  319A  2244         	fcall	_CC2500_SIDLEMode
  8968  1D17  0008               	return
  8969  1D18                     __end_of_CC2500_PowerOnInitial:	
  8970                           
  8971                           	psect	text41
  8972  1A44                     __ptext41:	
  8973 ;; *************** function _CC2500_SIDLEMode *****************
  8974 ;; Defined at:
  8975 ;;		line 216 in file "../src/CC2500_B1.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;		None               void
  8982 ;; Registers used:
  8983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;Total ram usage:        0 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    7
  8996 ;; This function calls:
  8997 ;;		_CC2500_WriteCommand
  8998 ;; This function is called by:
  8999 ;;		_CC2500_PowerOnInitial
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           
  9004                           ;psect for function _CC2500_SIDLEMode
  9005  1A44                     _CC2500_SIDLEMode:	
  9006                           
  9007                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9011  1A44  3036               	movlw	54
  9012  1A45  319E  2604         	fcall	_CC2500_WriteCommand
  9013  1A47  0008               	return
  9014  1A48                     __end_of_CC2500_SIDLEMode:	
  9015                           
  9016                           	psect	text42
  9017  1351                     __ptext42:	
  9018 ;; *************** function _CC2500_PowerRST *****************
  9019 ;; Defined at:
  9020 ;;		line 139 in file "../src/CC2500_B1.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;		None
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;		None
  9025 ;; Return value:  Size  Location     Type
  9026 ;;		None               void
  9027 ;; Registers used:
  9028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;Total ram usage:        1 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; Hardware stack levels required when called:    6
  9041 ;; This function calls:
  9042 ;;		_CC2500_WriteByte
  9043 ;;		_DelayTime_1us
  9044 ;;		_RF_Timeout_Counter
  9045 ;;		_setRF_TimeoutCleared
  9046 ;; This function is called by:
  9047 ;;		_CC2500_PowerOnInitial
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           
  9052                           ;psect for function _CC2500_PowerRST
  9053  1351                     _CC2500_PowerRST:	
  9054                           
  9055                           ;CC2500_B1.c: 140: RC3 = 0;
  9056                           
  9057                           ;incstack = 0
  9058                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9059  1351  0020               	movlb	0	; select bank0
  9060  1352  118E               	bcf	14,3	;volatile
  9061                           
  9062                           ;CC2500_B1.c: 141: RC4 = 0;
  9063  1353  120E               	bcf	14,4	;volatile
  9064                           
  9065                           ;CC2500_B1.c: 142: RC0 = 1;
  9066  1354  140E               	bsf	14,0	;volatile
  9067                           
  9068                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9069  1355  300A               	movlw	10
  9070  1356  00A0               	movwf	DelayTime_1us@count
  9071  1357  3000               	movlw	0
  9072  1358  00A1               	movwf	DelayTime_1us@count+1
  9073  1359  319F  27B2  3193   	fcall	_DelayTime_1us
  9074                           
  9075                           ;CC2500_B1.c: 144: RC0 = 0;
  9076  135C  0020               	movlb	0	; select bank0
  9077  135D  100E               	bcf	14,0	;volatile
  9078                           
  9079                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9080  135E  300A               	movlw	10
  9081  135F  00A0               	movwf	DelayTime_1us@count
  9082  1360  3000               	movlw	0
  9083  1361  00A1               	movwf	DelayTime_1us@count+1
  9084  1362  319F  27B2  3193   	fcall	_DelayTime_1us
  9085                           
  9086                           ;CC2500_B1.c: 146: RC0 = 1;
  9087  1365  0020               	movlb	0	; select bank0
  9088  1366  140E               	bsf	14,0	;volatile
  9089                           
  9090                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9091  1367  3028               	movlw	40
  9092  1368  00A0               	movwf	DelayTime_1us@count
  9093  1369  3000               	movlw	0
  9094  136A  00A1               	movwf	DelayTime_1us@count+1
  9095  136B  319F  27B2  3193   	fcall	_DelayTime_1us
  9096                           
  9097                           ;CC2500_B1.c: 148: RC0 = 0;
  9098  136E  0020               	movlb	0	; select bank0
  9099  136F  100E               	bcf	14,0	;volatile
  9100                           
  9101                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9102  1370  3030               	movlw	48
  9103  1371  00A6               	movwf	??_CC2500_PowerRST
  9104  1372  0826               	movf	??_CC2500_PowerRST,w
  9105  1373  0021               	movlb	1	; select bank1
  9106  1374  00D3               	movwf	_SPI0Buffer^(0+128)
  9107                           
  9108                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9109  1375  2B79               	goto	l9199
  9110  1376                     l9197:	
  9111                           
  9112                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9113  1376  319C  24EE  3193   	fcall	_RF_Timeout_Counter
  9114  1379                     l9199:	
  9115  1379  0020               	movlb	0	; select bank0
  9116  137A  1E8E               	btfss	14,5	;volatile
  9117  137B  2B7F               	goto	l9203
  9118  137C  0021               	movlb	1	; select bank1
  9119  137D  1F21               	btfss	(_RF1^(0+128)+1),6
  9120  137E  2B76               	goto	l9197
  9121  137F                     l9203:	
  9122                           
  9123                           ;CC2500_B1.c: 152: };
  9124                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9125  137F  319A  2238  3193   	fcall	_setRF_TimeoutCleared
  9126                           
  9127                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9128  1382  319D  25B7  3193   	fcall	_CC2500_WriteByte
  9129                           
  9130                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9131  1385  2B89               	goto	l9209
  9132  1386                     l9207:	
  9133                           
  9134                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9135  1386  319C  24EE  3193   	fcall	_RF_Timeout_Counter
  9136  1389                     l9209:	
  9137  1389  0020               	movlb	0	; select bank0
  9138  138A  1E8E               	btfss	14,5	;volatile
  9139  138B  2B8F               	goto	l9213
  9140  138C  0021               	movlb	1	; select bank1
  9141  138D  1F21               	btfss	(_RF1^(0+128)+1),6
  9142  138E  2B86               	goto	l9207
  9143  138F                     l9213:	
  9144                           
  9145                           ;CC2500_B1.c: 157: };
  9146                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9147  138F  319A  2238         	fcall	_setRF_TimeoutCleared
  9148                           
  9149                           ;CC2500_B1.c: 159: RC4 = 0;
  9150  1391  0020               	movlb	0	; select bank0
  9151  1392  120E               	bcf	14,4	;volatile
  9152                           
  9153                           ;CC2500_B1.c: 160: RC0 = 1;
  9154  1393  140E               	bsf	14,0	;volatile
  9155  1394  0008               	return
  9156  1395                     __end_of_CC2500_PowerRST:	
  9157                           
  9158                           	psect	text43
  9159  1010                     __ptext43:	
  9160 ;; *************** function _CC2500_InitSetREG *****************
  9161 ;; Defined at:
  9162 ;;		line 166 in file "../src/CC2500_B1.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9167 ;;  temp2           1    7[BANK0 ] unsigned char 
  9168 ;;  temp1           1    6[BANK0 ] unsigned char 
  9169 ;; Return value:  Size  Location     Type
  9170 ;;		None               void
  9171 ;; Registers used:
  9172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9173 ;; Tracked objects:
  9174 ;;		On entry : 0/0
  9175 ;;		On exit  : 0/0
  9176 ;;		Unchanged: 0/0
  9177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9182 ;;Total ram usage:        4 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:    7
  9185 ;; This function calls:
  9186 ;;		_CC2500_WriteREG
  9187 ;; This function is called by:
  9188 ;;		_CC2500_PowerOnInitial
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           
  9193                           ;psect for function _CC2500_InitSetREG
  9194  1010                     _CC2500_InitSetREG:	
  9195                           
  9196                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9197                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9198                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9199                           
  9200                           ;incstack = 0
  9201                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9202  1010  0020               	movlb	0	; select bank0
  9203  1011  01A8               	clrf	CC2500_InitSetREG@loop_c
  9204  1012                     L3:	
  9205  1012  302F               	movlw	47
  9206  1013  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9207  1014  1803               	btfsc	3,0
  9208  1015  0008               	return
  9209                           
  9210                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9211  1016  0828               	movf	CC2500_InitSetREG@loop_c,w
  9212  1017  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9213  1018  0084               	movwf	4
  9214  1019  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9215  101A  1803               	skipnc
  9216  101B  3E01               	addlw	1
  9217  101C  0085               	movwf	5
  9218  101D  0800               	movf	0,w	;code access
  9219  101E  00A5               	movwf	??_CC2500_InitSetREG
  9220  101F  0825               	movf	??_CC2500_InitSetREG,w
  9221  1020  00A6               	movwf	CC2500_InitSetREG@temp1
  9222                           
  9223                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9224  1021  0828               	movf	CC2500_InitSetREG@loop_c,w
  9225  1022  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9226  1023  0084               	movwf	4
  9227  1024  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9228  1025  1803               	skipnc
  9229  1026  3E01               	addlw	1
  9230  1027  0085               	movwf	5
  9231  1028  0800               	movf	0,w	;code access
  9232  1029  00A5               	movwf	??_CC2500_InitSetREG
  9233  102A  0825               	movf	??_CC2500_InitSetREG,w
  9234  102B  00A7               	movwf	CC2500_InitSetREG@temp2
  9235                           
  9236                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9237  102C  0827               	movf	CC2500_InitSetREG@temp2,w
  9238  102D  00A5               	movwf	??_CC2500_InitSetREG
  9239  102E  0825               	movf	??_CC2500_InitSetREG,w
  9240  102F  00A2               	movwf	CC2500_WriteREG@value
  9241  1030  0826               	movf	CC2500_InitSetREG@temp1,w
  9242  1031  319F  278F  3190   	fcall	_CC2500_WriteREG
  9243  1034  3001               	movlw	1
  9244  1035  0020               	movlb	0	; select bank0
  9245  1036  00A5               	movwf	??_CC2500_InitSetREG
  9246  1037  0825               	movf	??_CC2500_InitSetREG,w
  9247  1038  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9248  1039  2812               	goto	L3
  9249  103A                     __end_of_CC2500_InitSetREG:	
  9250                           
  9251                           	psect	text44
  9252  1ECB                     __ptext44:	
  9253 ;; *************** function _CC2500_InitPATable *****************
  9254 ;; Defined at:
  9255 ;;		line 181 in file "../src/CC2500_B1.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;		None
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9260 ;;  temp            1    6[BANK0 ] unsigned char 
  9261 ;; Return value:  Size  Location     Type
  9262 ;;		None               void
  9263 ;; Registers used:
  9264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        3 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    7
  9277 ;; This function calls:
  9278 ;;		_CC2500_WriteREG
  9279 ;; This function is called by:
  9280 ;;		_CC2500_PowerOnInitial
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _CC2500_InitPATable
  9286  1ECB                     _CC2500_InitPATable:	
  9287                           
  9288                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9289                           ;CC2500_B1.c: 183: unsigned char temp;
  9290                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9291                           
  9292                           ;incstack = 0
  9293                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9294  1ECB  0020               	movlb	0	; select bank0
  9295  1ECC  01A7               	clrf	CC2500_InitPATable@loop_d
  9296  1ECD                     L4:	
  9297  1ECD  3008               	movlw	8
  9298  1ECE  0227               	subwf	CC2500_InitPATable@loop_d,w
  9299  1ECF  1803               	btfsc	3,0
  9300  1ED0  0008               	return
  9301                           
  9302                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9303  1ED1  0827               	movf	CC2500_InitPATable@loop_d,w
  9304  1ED2  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9305  1ED3  0084               	movwf	4
  9306  1ED4  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9307  1ED5  1803               	skipnc
  9308  1ED6  3E01               	addlw	1
  9309  1ED7  0085               	movwf	5
  9310  1ED8  0800               	movf	0,w	;code access
  9311  1ED9  00A5               	movwf	??_CC2500_InitPATable
  9312  1EDA  0825               	movf	??_CC2500_InitPATable,w
  9313  1EDB  00A6               	movwf	CC2500_InitPATable@temp
  9314                           
  9315                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9316  1EDC  0826               	movf	CC2500_InitPATable@temp,w
  9317  1EDD  00A5               	movwf	??_CC2500_InitPATable
  9318  1EDE  0825               	movf	??_CC2500_InitPATable,w
  9319  1EDF  00A2               	movwf	CC2500_WriteREG@value
  9320  1EE0  303E               	movlw	62
  9321  1EE1  319F  278F  319E   	fcall	_CC2500_WriteREG
  9322  1EE4  3001               	movlw	1
  9323  1EE5  0020               	movlb	0	; select bank0
  9324  1EE6  00A5               	movwf	??_CC2500_InitPATable
  9325  1EE7  0825               	movf	??_CC2500_InitPATable,w
  9326  1EE8  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9327  1EE9  2ECD               	goto	L4
  9328  1EEA                     __end_of_CC2500_InitPATable:	
  9329                           
  9330                           	psect	text45
  9331  1F8F                     __ptext45:	
  9332 ;; *************** function _CC2500_WriteREG *****************
  9333 ;; Defined at:
  9334 ;;		line 258 in file "../src/CC2500_B1.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  w_addr          1    wreg     unsigned char 
  9337 ;;  value           1    2[BANK0 ] unsigned char 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:        3 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    6
  9356 ;; This function calls:
  9357 ;;		_CC2500_WriteByte
  9358 ;;		_RF_Timeout_Counter
  9359 ;;		_setRF_TimeoutCleared
  9360 ;; This function is called by:
  9361 ;;		_CC2500_InitSetREG
  9362 ;;		_CC2500_InitPATable
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _CC2500_WriteREG
  9368  1F8F                     _CC2500_WriteREG:	
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9372                           ;CC2500_WriteREG@w_addr stored from wreg
  9373  1F8F  0020               	movlb	0	; select bank0
  9374  1F90  00A4               	movwf	CC2500_WriteREG@w_addr
  9375                           
  9376                           ;CC2500_B1.c: 259: RC0 = 0;
  9377  1F91  100E               	bcf	14,0	;volatile
  9378                           
  9379                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9380  1F92  0824               	movf	CC2500_WriteREG@w_addr,w
  9381  1F93  00A3               	movwf	??_CC2500_WriteREG
  9382  1F94  0823               	movf	??_CC2500_WriteREG,w
  9383  1F95  0021               	movlb	1	; select bank1
  9384  1F96  00D3               	movwf	_SPI0Buffer^(0+128)
  9385                           
  9386                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9387  1F97  2F9B               	goto	l9067
  9388  1F98                     l9065:	
  9389                           
  9390                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9391  1F98  319C  24EE  319F   	fcall	_RF_Timeout_Counter
  9392  1F9B                     l9067:	
  9393  1F9B  0020               	movlb	0	; select bank0
  9394  1F9C  1E8E               	btfss	14,5	;volatile
  9395  1F9D  2FA1               	goto	l9071
  9396  1F9E  0021               	movlb	1	; select bank1
  9397  1F9F  1F21               	btfss	(_RF1^(0+128)+1),6
  9398  1FA0  2F98               	goto	l9065
  9399  1FA1                     l9071:	
  9400                           
  9401                           ;CC2500_B1.c: 263: };
  9402                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9403  1FA1  319A  2238  319F   	fcall	_setRF_TimeoutCleared
  9404                           
  9405                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9406  1FA4  319D  25B7  319F   	fcall	_CC2500_WriteByte
  9407                           
  9408                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9409  1FA7  0020               	movlb	0	; select bank0
  9410  1FA8  0822               	movf	CC2500_WriteREG@value,w
  9411  1FA9  00A3               	movwf	??_CC2500_WriteREG
  9412  1FAA  0823               	movf	??_CC2500_WriteREG,w
  9413  1FAB  0021               	movlb	1	; select bank1
  9414  1FAC  00D3               	movwf	_SPI0Buffer^(0+128)
  9415                           
  9416                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9417  1FAD  319D  25B7         	fcall	_CC2500_WriteByte
  9418                           
  9419                           ;CC2500_B1.c: 269: RC0 = 1;
  9420  1FAF  0020               	movlb	0	; select bank0
  9421  1FB0  140E               	bsf	14,0	;volatile
  9422  1FB1  0008               	return
  9423  1FB2                     __end_of_CC2500_WriteREG:	
  9424                           
  9425                           	psect	text46
  9426  1B58                     __ptext46:	
  9427 ;; *************** function _CC2500_FrequencyCabr *****************
  9428 ;; Defined at:
  9429 ;;		line 208 in file "../src/CC2500_B1.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;		None
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;		None               void
  9436 ;; Registers used:
  9437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;Total ram usage:        0 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    7
  9450 ;; This function calls:
  9451 ;;		_CC2500_WriteCommand
  9452 ;;		_DelayTime_1us
  9453 ;; This function is called by:
  9454 ;;		_CC2500_PowerOnInitial
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _CC2500_FrequencyCabr
  9460  1B58                     _CC2500_FrequencyCabr:	
  9461                           
  9462                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9463                           
  9464                           ;incstack = 0
  9465                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9466  1B58  3033               	movlw	51
  9467  1B59  319E  2604  319B   	fcall	_CC2500_WriteCommand
  9468                           
  9469                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9470  1B5C  30E8               	movlw	232
  9471  1B5D  0020               	movlb	0	; select bank0
  9472  1B5E  00A0               	movwf	DelayTime_1us@count
  9473  1B5F  3003               	movlw	3
  9474  1B60  00A1               	movwf	DelayTime_1us@count+1
  9475  1B61  319F  27B2         	fcall	_DelayTime_1us
  9476  1B63  0008               	return
  9477  1B64                     __end_of_CC2500_FrequencyCabr:	
  9478                           
  9479                           	psect	text47
  9480  1FB2                     __ptext47:	
  9481 ;; *************** function _DelayTime_1us *****************
  9482 ;; Defined at:
  9483 ;;		line 327 in file "../src/CC2500_B1.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;  count           2    0[BANK0 ] int 
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  j               2    4[BANK0 ] unsigned int 
  9488 ;;  i               2    2[BANK0 ] unsigned int 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;		None               void
  9491 ;; Registers used:
  9492 ;;		wreg, status,2
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;Total ram usage:        6 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    5
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_CC2500_PowerRST
  9509 ;;		_CC2500_FrequencyCabr
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           
  9514                           ;psect for function _DelayTime_1us
  9515  1FB2                     _DelayTime_1us:	
  9516                           
  9517                           ;CC2500_B1.c: 328: unsigned int i, j;
  9518                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9519                           
  9520                           ;incstack = 0
  9521                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9522  1FB2  3001               	movlw	1
  9523  1FB3  0020               	movlb	0	; select bank0
  9524  1FB4  00A2               	movwf	DelayTime_1us@i
  9525  1FB5  3000               	movlw	0
  9526  1FB6  00A3               	movwf	DelayTime_1us@i+1
  9527  1FB7                     l347:	
  9528  1FB7  0821               	movf	DelayTime_1us@count+1,w
  9529  1FB8  0223               	subwf	DelayTime_1us@i+1,w
  9530  1FB9  1D03               	skipz
  9531  1FBA  2FBD               	goto	u9785
  9532  1FBB  0820               	movf	DelayTime_1us@count,w
  9533  1FBC  0222               	subwf	DelayTime_1us@i,w
  9534  1FBD                     u9785:	
  9535  1FBD  1803               	btfsc	3,0
  9536  1FBE  0008               	return
  9537                           
  9538                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9539  1FBF  01A4               	clrf	DelayTime_1us@j
  9540  1FC0  01A5               	clrf	DelayTime_1us@j+1
  9541  1FC1  3000               	movlw	0
  9542  1FC2  0225               	subwf	DelayTime_1us@j+1,w
  9543  1FC3  3002               	movlw	2
  9544  1FC4  1903               	skipnz
  9545  1FC5  0224               	subwf	DelayTime_1us@j,w
  9546  1FC6  1803               	btfsc	3,0
  9547  1FC7  2FD3               	goto	l9059
  9548  1FC8                     l9057:	
  9549  1FC8  3001               	movlw	1
  9550  1FC9  07A4               	addwf	DelayTime_1us@j,f
  9551  1FCA  3000               	movlw	0
  9552  1FCB  3DA5               	addwfc	DelayTime_1us@j+1,f
  9553  1FCC  3000               	movlw	0
  9554  1FCD  0225               	subwf	DelayTime_1us@j+1,w
  9555  1FCE  3002               	movlw	2
  9556  1FCF  1903               	skipnz
  9557  1FD0  0224               	subwf	DelayTime_1us@j,w
  9558  1FD1  1C03               	skipc
  9559  1FD2  2FC8               	goto	l9057
  9560  1FD3                     l9059:	
  9561  1FD3  3001               	movlw	1
  9562  1FD4  07A2               	addwf	DelayTime_1us@i,f
  9563  1FD5  3000               	movlw	0
  9564  1FD6  3DA3               	addwfc	DelayTime_1us@i+1,f
  9565  1FD7  2FB7               	goto	l347
  9566  1FD8                     __end_of_DelayTime_1us:	
  9567                           
  9568                           	psect	text48
  9569  1A40                     __ptext48:	
  9570 ;; *************** function _CC2500_ClearTXFIFO *****************
  9571 ;; Defined at:
  9572 ;;		line 194 in file "../src/CC2500_B1.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;		None
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;Total ram usage:        0 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    7
  9593 ;; This function calls:
  9594 ;;		_CC2500_WriteCommand
  9595 ;; This function is called by:
  9596 ;;		_CC2500_PowerOnInitial
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _CC2500_ClearTXFIFO
  9602  1A40                     _CC2500_ClearTXFIFO:	
  9603                           
  9604                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9608  1A40  303B               	movlw	59
  9609  1A41  319E  2604         	fcall	_CC2500_WriteCommand
  9610  1A43  0008               	return
  9611  1A44                     __end_of_CC2500_ClearTXFIFO:	
  9612                           
  9613                           	psect	text49
  9614  1A3C                     __ptext49:	
  9615 ;; *************** function _CC2500_ClearRXFIFO *****************
  9616 ;; Defined at:
  9617 ;;		line 201 in file "../src/CC2500_B1.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;		None
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;		None               void
  9624 ;; Registers used:
  9625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;Total ram usage:        0 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    7
  9638 ;; This function calls:
  9639 ;;		_CC2500_WriteCommand
  9640 ;; This function is called by:
  9641 ;;		_CC2500_PowerOnInitial
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           
  9646                           ;psect for function _CC2500_ClearRXFIFO
  9647  1A3C                     _CC2500_ClearRXFIFO:	
  9648                           
  9649                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9650                           
  9651                           ;incstack = 0
  9652                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9653  1A3C  303A               	movlw	58
  9654  1A3D  319E  2604         	fcall	_CC2500_WriteCommand
  9655  1A3F  0008               	return
  9656  1A40                     __end_of_CC2500_ClearRXFIFO:	
  9657                           
  9658                           	psect	text50
  9659  1E04                     __ptext50:	
  9660 ;; *************** function _CC2500_WriteCommand *****************
  9661 ;; Defined at:
  9662 ;;		line 292 in file "../src/CC2500_B1.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;  command         1    wreg     unsigned char 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  command         1    3[BANK0 ] unsigned char 
  9667 ;; Return value:  Size  Location     Type
  9668 ;;		None               void
  9669 ;; Registers used:
  9670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;Total ram usage:        2 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    6
  9683 ;; This function calls:
  9684 ;;		_CC2500_WriteByte
  9685 ;;		_RF_Timeout_Counter
  9686 ;;		_setRF_TimeoutCleared
  9687 ;; This function is called by:
  9688 ;;		_CC2500_TxData
  9689 ;;		_CC2500_RxData
  9690 ;;		_CC2500_ClearTXFIFO
  9691 ;;		_CC2500_ClearRXFIFO
  9692 ;;		_CC2500_FrequencyCabr
  9693 ;;		_CC2500_SIDLEMode
  9694 ;;		_setRF_Main
  9695 ;;		_RF_RxDisable
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           
  9700                           ;psect for function _CC2500_WriteCommand
  9701  1E04                     _CC2500_WriteCommand:	
  9702                           
  9703                           ;incstack = 0
  9704                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9705                           ;CC2500_WriteCommand@command stored from wreg
  9706  1E04  0020               	movlb	0	; select bank0
  9707  1E05  00A3               	movwf	CC2500_WriteCommand@command
  9708                           
  9709                           ;CC2500_B1.c: 293: RC0 = 0;
  9710  1E06  100E               	bcf	14,0	;volatile
  9711                           
  9712                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9713  1E07  0823               	movf	CC2500_WriteCommand@command,w
  9714  1E08  00A2               	movwf	??_CC2500_WriteCommand
  9715  1E09  0822               	movf	??_CC2500_WriteCommand,w
  9716  1E0A  0021               	movlb	1	; select bank1
  9717  1E0B  00D3               	movwf	_SPI0Buffer^(0+128)
  9718                           
  9719                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9720  1E0C  2E10               	goto	l9021
  9721  1E0D                     l9019:	
  9722                           
  9723                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9724  1E0D  319C  24EE  319E   	fcall	_RF_Timeout_Counter
  9725  1E10                     l9021:	
  9726  1E10  0020               	movlb	0	; select bank0
  9727  1E11  1E8E               	btfss	14,5	;volatile
  9728  1E12  2E16               	goto	l9025
  9729  1E13  0021               	movlb	1	; select bank1
  9730  1E14  1F21               	btfss	(_RF1^(0+128)+1),6
  9731  1E15  2E0D               	goto	l9019
  9732  1E16                     l9025:	
  9733                           
  9734                           ;CC2500_B1.c: 298: };
  9735                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9736  1E16  319A  2238  319E   	fcall	_setRF_TimeoutCleared
  9737                           
  9738                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9739  1E19  319D  25B7         	fcall	_CC2500_WriteByte
  9740                           
  9741                           ;CC2500_B1.c: 302: RC0 = 1;
  9742  1E1B  0020               	movlb	0	; select bank0
  9743  1E1C  140E               	bsf	14,0	;volatile
  9744  1E1D  0008               	return
  9745  1E1E                     __end_of_CC2500_WriteCommand:	
  9746                           
  9747                           	psect	text51
  9748  1A38                     __ptext51:	
  9749 ;; *************** function _setRF_TimeoutCleared *****************
  9750 ;; Defined at:
  9751 ;;		line 149 in file "../src/RF_Control_B1.c"
  9752 ;; Parameters:    Size  Location     Type
  9753 ;;		None
  9754 ;; Auto vars:     Size  Location     Type
  9755 ;;		None
  9756 ;; Return value:  Size  Location     Type
  9757 ;;		None               void
  9758 ;; Registers used:
  9759 ;;		status,2
  9760 ;; Tracked objects:
  9761 ;;		On entry : 0/0
  9762 ;;		On exit  : 0/0
  9763 ;;		Unchanged: 0/0
  9764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;Total ram usage:        0 bytes
  9770 ;; Hardware stack levels used:    1
  9771 ;; Hardware stack levels required when called:    5
  9772 ;; This function calls:
  9773 ;;		Nothing
  9774 ;; This function is called by:
  9775 ;;		_CC2500_TxData
  9776 ;;		_CC2500_RxData
  9777 ;;		_CC2500_PowerRST
  9778 ;;		_CC2500_WriteREG
  9779 ;;		_CC2500_WriteCommand
  9780 ;;		_CC2500_ReadStatus
  9781 ;;		_CC2500_ReadREG
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function _setRF_TimeoutCleared
  9787  1A38                     _setRF_TimeoutCleared:	
  9788                           
  9789                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9790                           
  9791                           ;incstack = 0
  9792                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9793  1A38  0021               	movlb	1	; select bank1
  9794  1A39  01AD               	clrf	(_RF1^(0+128)+13)
  9795  1A3A  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9796  1A3B  0008               	return
  9797  1A3C                     __end_of_setRF_TimeoutCleared:	
  9798                           
  9799                           	psect	text52
  9800  1CEE                     __ptext52:	
  9801 ;; *************** function _RF_Timeout_Counter *****************
  9802 ;; Defined at:
  9803 ;;		line 141 in file "../src/RF_Control_B1.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;		None
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;		None
  9808 ;; Return value:  Size  Location     Type
  9809 ;;		None               void
  9810 ;; Registers used:
  9811 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;Total ram usage:        0 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    5
  9824 ;; This function calls:
  9825 ;;		Nothing
  9826 ;; This function is called by:
  9827 ;;		_CC2500_TxData
  9828 ;;		_CC2500_RxData
  9829 ;;		_CC2500_PowerRST
  9830 ;;		_CC2500_WriteREG
  9831 ;;		_CC2500_WriteCommand
  9832 ;;		_CC2500_ReadStatus
  9833 ;;		_CC2500_ReadREG
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function _RF_Timeout_Counter
  9839  1CEE                     _RF_Timeout_Counter:	
  9840                           
  9841                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9842                           
  9843                           ;incstack = 0
  9844                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9845  1CEE  3001               	movlw	1
  9846  1CEF  0021               	movlb	1	; select bank1
  9847  1CF0  07AD               	addwf	(_RF1^(0+128)+13),f
  9848  1CF1  3000               	movlw	0
  9849  1CF2  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
  9850                           
  9851                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9852  1CF3  300D               	movlw	13
  9853  1CF4  3EA0               	addlw	_RF1& (0+255)
  9854  1CF5  0086               	movwf	6
  9855  1CF6  0187               	clrf	7
  9856  1CF7  3F40               	moviw [0]fsr1
  9857  1CF8  3AA8               	xorlw	168
  9858  1CF9  1D03               	skipz
  9859  1CFA  2CFD               	goto	u9515
  9860  1CFB  3F41               	moviw [1]fsr1
  9861  1CFC  3A61               	xorlw	97
  9862  1CFD                     u9515:	
  9863  1CFD  1D03               	skipz
  9864  1CFE  0008               	return
  9865                           
  9866                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9867  1CFF  01AD               	clrf	(_RF1^(0+128)+13)
  9868  1D00  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9869                           
  9870                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9871  1D01  1721               	bsf	(_RF1^(0+128)+1),6
  9872  1D02  0008               	return
  9873  1D03                     __end_of_RF_Timeout_Counter:	
  9874                           
  9875                           	psect	text53
  9876  1DB7                     __ptext53:	
  9877 ;; *************** function _CC2500_WriteByte *****************
  9878 ;; Defined at:
  9879 ;;		line 226 in file "../src/CC2500_B1.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;		None
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9884 ;; Return value:  Size  Location     Type
  9885 ;;		None               void
  9886 ;; Registers used:
  9887 ;;		wreg, status,2, status,0
  9888 ;; Tracked objects:
  9889 ;;		On entry : 0/0
  9890 ;;		On exit  : 0/0
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;Total ram usage:        2 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; Hardware stack levels required when called:    5
  9900 ;; This function calls:
  9901 ;;		Nothing
  9902 ;; This function is called by:
  9903 ;;		_CC2500_TxData
  9904 ;;		_CC2500_RxData
  9905 ;;		_CC2500_PowerRST
  9906 ;;		_CC2500_WriteREG
  9907 ;;		_CC2500_WriteCommand
  9908 ;;		_CC2500_ReadStatus
  9909 ;;		_CC2500_ReadREG
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           
  9914                           ;psect for function _CC2500_WriteByte
  9915  1DB7                     _CC2500_WriteByte:	
  9916                           
  9917                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9918                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9919                           
  9920                           ;incstack = 0
  9921                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9922  1DB7  0020               	movlb	0	; select bank0
  9923  1DB8  01A1               	clrf	CC2500_WriteByte@loop_a
  9924  1DB9                     L5:	
  9925  1DB9  3008               	movlw	8
  9926  1DBA  0221               	subwf	CC2500_WriteByte@loop_a,w
  9927  1DBB  1803               	btfsc	3,0
  9928  1DBC  0008               	return
  9929                           
  9930                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9931  1DBD  0021               	movlb	1	; select bank1
  9932  1DBE  1FD3               	btfss	_SPI0Buffer^(0+128),7
  9933  1DBF  2DC3               	goto	l303
  9934                           
  9935                           ;CC2500_B1.c: 230: RC4 = 1;
  9936  1DC0  0020               	movlb	0	; select bank0
  9937  1DC1  160E               	bsf	14,4	;volatile
  9938  1DC2  2DC5               	goto	l304
  9939  1DC3                     l303:	
  9940                           
  9941                           ;CC2500_B1.c: 231: else
  9942                           ;CC2500_B1.c: 232: RC4 = 0;
  9943  1DC3  0020               	movlb	0	; select bank0
  9944  1DC4  120E               	bcf	14,4	;volatile
  9945  1DC5                     l304:	
  9946                           
  9947                           ;CC2500_B1.c: 233: RC3 = 1;
  9948  1DC5  158E               	bsf	14,3	;volatile
  9949                           
  9950                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9951  1DC6  1003               	clrc
  9952  1DC7  0021               	movlb	1	; select bank1
  9953  1DC8  0DD3               	rlf	_SPI0Buffer^(0+128),f
  9954                           
  9955                           ;CC2500_B1.c: 235: RC3 = 0;
  9956  1DC9  0020               	movlb	0	; select bank0
  9957  1DCA  118E               	bcf	14,3	;volatile
  9958  1DCB  3001               	movlw	1
  9959  1DCC  00A0               	movwf	??_CC2500_WriteByte
  9960  1DCD  0820               	movf	??_CC2500_WriteByte,w
  9961  1DCE  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9962  1DCF  2DB9               	goto	L5
  9963  1DD0                     __end_of_CC2500_WriteByte:	
  9964                           
  9965                           	psect	text54
  9966  1A18                     __ptext54:	
  9967 ;; *************** function _RF_Initialization *****************
  9968 ;; Defined at:
  9969 ;;		line 9 in file "../src/RF_Control_B1.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;		None               void
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0, pclath, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;Total ram usage:        0 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    6
  9990 ;; This function calls:
  9991 ;;		_setRF_Initialization
  9992 ;; This function is called by:
  9993 ;;		_main
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           
  9998                           ;psect for function _RF_Initialization
  9999  1A18                     _RF_Initialization:	
 10000                           
 10001                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10002                           
 10003                           ;incstack = 0
 10004                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10005  1A18  319A  22E1         	fcall	_setRF_Initialization
 10006  1A1A  0008               	return
 10007  1A1B                     __end_of_RF_Initialization:	
 10008                           
 10009                           	psect	text55
 10010  1AE1                     __ptext55:	
 10011 ;; *************** function _setRF_Initialization *****************
 10012 ;; Defined at:
 10013 ;;		line 17 in file "../src/RF_Control_B1.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;		None
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;		None
 10018 ;; Return value:  Size  Location     Type
 10019 ;;		None               void
 10020 ;; Registers used:
 10021 ;;		wreg
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;Total ram usage:        1 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; Hardware stack levels required when called:    5
 10034 ;; This function calls:
 10035 ;;		Nothing
 10036 ;; This function is called by:
 10037 ;;		_RF_Initialization
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           
 10042                           ;psect for function _setRF_Initialization
 10043  1AE1                     _setRF_Initialization:	
 10044                           
 10045                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10046                           
 10047                           ;incstack = 0
 10048                           ; Regs used in _setRF_Initialization: [wreg]
 10049  1AE1  3015               	movlw	21
 10050  1AE2  0020               	movlb	0	; select bank0
 10051  1AE3  00A0               	movwf	??_setRF_Initialization
 10052  1AE4  0820               	movf	??_setRF_Initialization,w
 10053  1AE5  0021               	movlb	1	; select bank1
 10054  1AE6  00D6               	movwf	_Tx_Length^(0+128)
 10055                           
 10056                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10057  1AE7  30C8               	movlw	200
 10058  1AE8  00A8               	movwf	(_RF1^(0+128)+8)
 10059  1AE9  3000               	movlw	0
 10060  1AEA  00A9               	movwf	(_RF1^(0+128)+9)
 10061  1AEB  0008               	return
 10062  1AEC                     __end_of_setRF_Initialization:	
 10063                           
 10064                           	psect	text56
 10065  1C57                     __ptext56:	
 10066 ;; *************** function _Mcu_Initialization *****************
 10067 ;; Defined at:
 10068 ;;		line 30 in file "../src/MCU_B1.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;		None
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;		None
 10073 ;; Return value:  Size  Location     Type
 10074 ;;		None               void
 10075 ;; Registers used:
 10076 ;;		wreg, status,2, status,0, pclath, cstack
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;Total ram usage:        0 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; Hardware stack levels required when called:    6
 10089 ;; This function calls:
 10090 ;;		_ADC_Set
 10091 ;;		_Fosc_Set
 10092 ;;		_IOC_Set
 10093 ;;		_IO_Set
 10094 ;;		_TMR1_Set
 10095 ;;		_WDT_Set
 10096 ;; This function is called by:
 10097 ;;		_main
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           
 10102                           ;psect for function _Mcu_Initialization
 10103  1C57                     _Mcu_Initialization:	
 10104                           
 10105                           ;MCU_B1.c: 32: Fosc_Set();
 10106                           
 10107                           ;incstack = 0
 10108                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10109  1C57  319A  2234  319C   	fcall	_Fosc_Set
 10110                           
 10111                           ;MCU_B1.c: 34: IO_Set();
 10112  1C5A  319D  25EA  319C   	fcall	_IO_Set
 10113                           
 10114                           ;MCU_B1.c: 36: ;;
 10115                           ;MCU_B1.c: 38: TMR1_Set();
 10116  1C5D  319B  234C  319C   	fcall	_TMR1_Set
 10117                           
 10118                           ;MCU_B1.c: 40: ADC_Set();
 10119  1C60  319A  226A  319C   	fcall	_ADC_Set
 10120                           
 10121                           ;MCU_B1.c: 42: ;;
 10122                           ;MCU_B1.c: 44: ;;
 10123                           ;MCU_B1.c: 46: IOC_Set();
 10124  1C63  319A  22CB  319C   	fcall	_IOC_Set
 10125                           
 10126                           ;MCU_B1.c: 48: ;;
 10127                           ;MCU_B1.c: 50: ;;
 10128                           ;MCU_B1.c: 52: WDT_Set();
 10129  1C66  319A  22D6         	fcall	_WDT_Set
 10130  1C68  0008               	return
 10131  1C69                     __end_of_Mcu_Initialization:	
 10132                           
 10133                           	psect	text57
 10134  1AD6                     __ptext57:	
 10135 ;; *************** function _WDT_Set *****************
 10136 ;; Defined at:
 10137 ;;		line 1102 in file "../src/MCU_B1.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        1 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    5
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		_Mcu_Initialization
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _WDT_Set
 10167  1AD6                     _WDT_Set:	
 10168                           
 10169                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10170                           
 10171                           ;incstack = 0
 10172                           ; Regs used in _WDT_Set: [wreg]
 10173  1AD6  3017               	movlw	23
 10174  1AD7  0021               	movlb	1	; select bank1
 10175  1AD8  0097               	movwf	23	;volatile
 10176                           
 10177                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10178  1AD9  1448               	bsf	_WDT^(0+128),0
 10179                           
 10180                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10181  1ADA  300A               	movlw	10
 10182  1ADB  0020               	movlb	0	; select bank0
 10183  1ADC  00A0               	movwf	??_WDT_Set
 10184  1ADD  0820               	movf	??_WDT_Set,w
 10185  1ADE  0021               	movlb	1	; select bank1
 10186  1ADF  00C9               	movwf	(_WDT^(0+128)+1)
 10187  1AE0  0008               	return
 10188  1AE1                     __end_of_WDT_Set:	
 10189                           
 10190                           	psect	text58
 10191  1B4C                     __ptext58:	
 10192 ;; *************** function _TMR1_Set *****************
 10193 ;; Defined at:
 10194 ;;		line 226 in file "../src/MCU_B1.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;		None
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;		None
 10199 ;; Return value:  Size  Location     Type
 10200 ;;		None               void
 10201 ;; Registers used:
 10202 ;;		wreg
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;Total ram usage:        0 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    5
 10215 ;; This function calls:
 10216 ;;		Nothing
 10217 ;; This function is called by:
 10218 ;;		_Mcu_Initialization
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           
 10223                           ;psect for function _TMR1_Set
 10224  1B4C                     _TMR1_Set:	
 10225                           
 10226                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10227                           
 10228                           ;incstack = 0
 10229                           ; Regs used in _TMR1_Set: [wreg]
 10230  1B4C  3041               	movlw	65
 10231  1B4D  0020               	movlb	0	; select bank0
 10232  1B4E  0098               	movwf	24	;volatile
 10233                           
 10234                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10235  1B4F  30FA               	movlw	250
 10236  1B50  0097               	movwf	23	;volatile
 10237                           
 10238                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10239  1B51  3038               	movlw	56
 10240  1B52  0096               	movwf	22	;volatile
 10241                           
 10242                           ;MCU_B1.c: 230: TMR1IE = 1;
 10243  1B53  0021               	movlb	1	; select bank1
 10244  1B54  1411               	bsf	17,0	;volatile
 10245                           
 10246                           ;MCU_B1.c: 231: PEIE = 1;
 10247  1B55  170B               	bsf	11,6	;volatile
 10248                           
 10249                           ;MCU_B1.c: 232: GIE = 1;
 10250  1B56  178B               	bsf	11,7	;volatile
 10251  1B57  0008               	return
 10252  1B58                     __end_of_TMR1_Set:	
 10253                           
 10254                           	psect	text59
 10255  1DEA                     __ptext59:	
 10256 ;; *************** function _IO_Set *****************
 10257 ;; Defined at:
 10258 ;;		line 60 in file "../src/MCU_B1.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;		None
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;		None
 10263 ;; Return value:  Size  Location     Type
 10264 ;;		None               void
 10265 ;; Registers used:
 10266 ;;		wreg, status,2
 10267 ;; Tracked objects:
 10268 ;;		On entry : 0/0
 10269 ;;		On exit  : 0/0
 10270 ;;		Unchanged: 0/0
 10271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;Total ram usage:        0 bytes
 10277 ;; Hardware stack levels used:    1
 10278 ;; Hardware stack levels required when called:    5
 10279 ;; This function calls:
 10280 ;;		Nothing
 10281 ;; This function is called by:
 10282 ;;		_Mcu_Initialization
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _IO_Set
 10288  1DEA                     _IO_Set:	
 10289                           
 10290                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _IO_Set: [wreg+status,2]
 10294  1DEA  30F7               	movlw	247
 10295  1DEB  0021               	movlb	1	; select bank1
 10296  1DEC  008C               	movwf	12	;volatile
 10297                           
 10298                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10299  1DED  3004               	movlw	4
 10300  1DEE  008D               	movwf	13	;volatile
 10301                           
 10302                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10303  1DEF  3026               	movlw	38
 10304  1DF0  008E               	movwf	14	;volatile
 10305                           
 10306                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10307  1DF1  0022               	movlb	2	; select bank2
 10308  1DF2  018C               	clrf	12	;volatile
 10309                           
 10310                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10311  1DF3  018D               	clrf	13	;volatile
 10312                           
 10313                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10314  1DF4  018E               	clrf	14	;volatile
 10315                           
 10316                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10317  1DF5  300E               	movlw	14
 10318  1DF6  0023               	movlb	3	; select bank3
 10319  1DF7  008C               	movwf	12	;volatile
 10320                           
 10321                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10322  1DF8  018D               	clrf	13	;volatile
 10323                           
 10324                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10325  1DF9  018E               	clrf	14	;volatile
 10326                           
 10327                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10328  1DFA  30F7               	movlw	247
 10329  1DFB  0020               	movlb	0	; select bank0
 10330  1DFC  008C               	movwf	12	;volatile
 10331                           
 10332                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10333  1DFD  3004               	movlw	4
 10334  1DFE  008D               	movwf	13	;volatile
 10335                           
 10336                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10337  1DFF  3026               	movlw	38
 10338  1E00  008E               	movwf	14	;volatile
 10339                           
 10340                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10341  1E01  0024               	movlb	4	; select bank4
 10342  1E02  018D               	clrf	13	;volatile
 10343  1E03  0008               	return
 10344  1E04                     __end_of_IO_Set:	
 10345                           
 10346                           	psect	text60
 10347  1ACB                     __ptext60:	
 10348 ;; *************** function _IOC_Set *****************
 10349 ;; Defined at:
 10350 ;;		line 380 in file "../src/MCU_B1.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;		None
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;		None
 10355 ;; Return value:  Size  Location     Type
 10356 ;;		None               void
 10357 ;; Registers used:
 10358 ;;		wreg, status,2
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;Total ram usage:        0 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; Hardware stack levels required when called:    5
 10371 ;; This function calls:
 10372 ;;		Nothing
 10373 ;; This function is called by:
 10374 ;;		_Mcu_Initialization
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           
 10379                           ;psect for function _IOC_Set
 10380  1ACB                     _IOC_Set:	
 10381                           
 10382                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10383                           
 10384                           ;incstack = 0
 10385                           ; Regs used in _IOC_Set: [wreg+status,2]
 10386  1ACB  3004               	movlw	4
 10387  1ACC  0027               	movlb	7	; select bank7
 10388  1ACD  0094               	movwf	20	;volatile
 10389                           
 10390                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10391  1ACE  3004               	movlw	4
 10392  1ACF  0095               	movwf	21	;volatile
 10393                           
 10394                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10395  1AD0  0196               	clrf	22	;volatile
 10396                           
 10397                           ;MCU_B1.c: 387: IOCIE = 1;
 10398  1AD1  158B               	bsf	11,3	;volatile
 10399                           
 10400                           ;MCU_B1.c: 388: IOCIF = 0;
 10401  1AD2  100B               	bcf	11,0	;volatile
 10402                           
 10403                           ;MCU_B1.c: 389: PEIE = 1;
 10404  1AD3  170B               	bsf	11,6	;volatile
 10405                           
 10406                           ;MCU_B1.c: 390: GIE = 1;
 10407  1AD4  178B               	bsf	11,7	;volatile
 10408  1AD5  0008               	return
 10409  1AD6                     __end_of_IOC_Set:	
 10410                           
 10411                           	psect	text61
 10412  1A34                     __ptext61:	
 10413 ;; *************** function _Fosc_Set *****************
 10414 ;; Defined at:
 10415 ;;		line 56 in file "../src/MCU_B1.c"
 10416 ;; Parameters:    Size  Location     Type
 10417 ;;		None
 10418 ;; Auto vars:     Size  Location     Type
 10419 ;;		None
 10420 ;; Return value:  Size  Location     Type
 10421 ;;		None               void
 10422 ;; Registers used:
 10423 ;;		wreg
 10424 ;; Tracked objects:
 10425 ;;		On entry : 0/0
 10426 ;;		On exit  : 0/0
 10427 ;;		Unchanged: 0/0
 10428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;Total ram usage:        0 bytes
 10434 ;; Hardware stack levels used:    1
 10435 ;; Hardware stack levels required when called:    5
 10436 ;; This function calls:
 10437 ;;		Nothing
 10438 ;; This function is called by:
 10439 ;;		_Mcu_Initialization
 10440 ;; This function uses a non-reentrant model
 10441 ;;
 10442                           
 10443                           
 10444                           ;psect for function _Fosc_Set
 10445  1A34                     _Fosc_Set:	
 10446                           
 10447                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10448                           
 10449                           ;incstack = 0
 10450                           ; Regs used in _Fosc_Set: [wreg]
 10451  1A34  3078               	movlw	120
 10452  1A35  0021               	movlb	1	; select bank1
 10453  1A36  0099               	movwf	25	;volatile
 10454  1A37  0008               	return
 10455  1A38                     __end_of_Fosc_Set:	
 10456                           
 10457                           	psect	text62
 10458  1A6A                     __ptext62:	
 10459 ;; *************** function _ADC_Set *****************
 10460 ;; Defined at:
 10461 ;;		line 427 in file "../src/MCU_B1.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;		None
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;		None               void
 10468 ;; Registers used:
 10469 ;;		wreg
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:        0 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    5
 10482 ;; This function calls:
 10483 ;;		Nothing
 10484 ;; This function is called by:
 10485 ;;		_Mcu_Initialization
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _ADC_Set
 10491  1A6A                     _ADC_Set:	
 10492                           
 10493                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10494                           
 10495                           ;incstack = 0
 10496                           ; Regs used in _ADC_Set: [wreg]
 10497  1A6A  30F3               	movlw	243
 10498  1A6B  0021               	movlb	1	; select bank1
 10499  1A6C  009E               	movwf	30	;volatile
 10500                           
 10501                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10502  1A6D  30C1               	movlw	193
 10503  1A6E  0022               	movlb	2	; select bank2
 10504  1A6F  0097               	movwf	23	;volatile
 10505  1A70  0008               	return
 10506  1A71                     __end_of_ADC_Set:	
 10507                           
 10508                           	psect	text63
 10509  004B                     __ptext63:	
 10510 ;; *************** function _Load_Main *****************
 10511 ;; Defined at:
 10512 ;;		line 40 in file "../src/OverLoad_B1.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;		None
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;  i               2   76[BANK0 ] int 
 10517 ;;  LightsCount     1   78[BANK0 ] unsigned char 
 10518 ;;  Load_RunStat    1   75[BANK0 ] unsigned char 
 10519 ;;  ErrorCountVa    1   74[BANK0 ] unsigned char 
 10520 ;;  error           1   71[BANK0 ] unsigned char 
 10521 ;; Return value:  Size  Location     Type
 10522 ;;		None               void
 10523 ;; Registers used:
 10524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;Total ram usage:       10 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    6
 10537 ;; This function calls:
 10538 ;;		___lwdiv
 10539 ;;		___wmul
 10540 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10541 ;;		_getDimmer_LoadGO
 10542 ;;		_getDimmer_Load_Status
 10543 ;;		_getMain_All_Error_Status
 10544 ;;		_getMain_All_LightsStatus
 10545 ;;		_getMain_Lights_Count
 10546 ;;		_setLoad_AH_AL_Restore
 10547 ;;		_setProductData
 10548 ;; This function is called by:
 10549 ;;		_main
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           
 10554                           ;psect for function _Load_Main
 10555  004B                     _Load_Main:	
 10556                           
 10557                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10558                           
 10559                           ;incstack = 0
 10560                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10561  004B  3000               	movlw	0
 10562  004C  3190  209A  3180   	fcall	_getMain_All_Error_Status
 10563  004F  0020               	movlb	0	; select bank0
 10564  0050  00E5               	movwf	??_Load_Main
 10565  0051  0865               	movf	??_Load_Main,w
 10566  0052  00E7               	movwf	Load_Main@error
 10567                           
 10568                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10569  0053  01EB               	clrf	Load_Main@Load_RunStatus
 10570  0054  01EA               	clrf	Load_Main@ErrorCountValue
 10571  0055  01EE               	clrf	Load_Main@LightsCount
 10572                           
 10573                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10574  0056  0022               	movlb	2	; select bank2
 10575  0057  1C36               	btfss	_Load^(0+256),0
 10576  0058  2AA8               	goto	l1627
 10577                           
 10578                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10579  0059  319A  22AB  3180   	fcall	_getMain_All_LightsStatus
 10580  005C  3800               	iorlw	0
 10581  005D  1D03               	skipz
 10582  005E  2861               	goto	l10705
 10583                           
 10584                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10585  005F  0022               	movlb	2	; select bank2
 10586  0060  2882               	goto	l10723
 10587  0061                     l10705:	
 10588                           ;OverLoad_B1.c: 47: } else {
 10589                           
 10590                           
 10591                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10592  0061  0020               	movlb	0	; select bank0
 10593  0062  08E7               	movf	Load_Main@error,f
 10594  0063  1D03               	skipz
 10595  0064  287F               	goto	l1630
 10596  0065  319C  24A1  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10597  0068  3800               	iorlw	0
 10598  0069  1D03               	skipz
 10599  006A  287F               	goto	l1630
 10600                           
 10601                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10602  006B  0022               	movlb	2	; select bank2
 10603  006C  14B6               	bsf	_Load^(0+256),1
 10604                           
 10605                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10606  006D  319A  2280  3180   	fcall	_getDimmer_LoadGO
 10607  0070  3A01               	xorlw	1
 10608  0071  1D03               	skipz
 10609  0072  287A               	goto	l1631
 10610                           
 10611                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10612  0073  0022               	movlb	2	; select bank2
 10613  0074  1DB6               	btfss	_Load^(0+256),3
 10614  0075  1BB6               	btfsc	_Load^(0+256),7
 10615  0076  2883               	goto	l1629
 10616                           
 10617                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10618  0077  15B6               	bsf	_Load^(0+256),3
 10619                           
 10620                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10621  0078  01DB               	clrf	(_Load^(0+256)+37)
 10622                           
 10623                           ;OverLoad_B1.c: 57: }
 10624                           ;OverLoad_B1.c: 58: } else {
 10625  0079  2883               	goto	l1629
 10626  007A                     l1631:	
 10627                           
 10628                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10629  007A  0022               	movlb	2	; select bank2
 10630  007B  1FB6               	btfss	_Load^(0+256),7
 10631  007C  2883               	goto	l1629
 10632                           
 10633                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10634  007D  13B6               	bcf	_Load^(0+256),7
 10635                           
 10636                           ;OverLoad_B1.c: 61: }
 10637                           ;OverLoad_B1.c: 62: }
 10638                           ;OverLoad_B1.c: 63: } else {
 10639  007E  2883               	goto	l1629
 10640  007F                     l1630:	
 10641                           
 10642                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10643  007F  0022               	movlb	2	; select bank2
 10644  0080  1CB6               	btfss	_Load^(0+256),1
 10645  0081  2883               	goto	l1629
 10646  0082                     l10723:	
 10647                           
 10648                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10649  0082  10B6               	bcf	_Load^(0+256),1
 10650  0083                     l1629:	
 10651                           
 10652                           ;OverLoad_B1.c: 66: }
 10653                           ;OverLoad_B1.c: 67: }
 10654                           ;OverLoad_B1.c: 89: }
 10655                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10656  0083  1CB6               	btfss	_Load^(0+256),1
 10657  0084  2A48               	goto	l1637
 10658                           
 10659                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10660  0085  1536               	bsf	_Load^(0+256),2
 10661                           
 10662                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10663  0086  1E36               	btfss	_Load^(0+256),4
 10664  0087  2A46               	goto	l1638
 10665                           
 10666                           ;OverLoad_B1.c: 96: Load.Time++;
 10667  0088  3001               	movlw	1
 10668  0089  07B7               	addwf	(_Load^(0+256)+1),f
 10669  008A  3000               	movlw	0
 10670  008B  3DB8               	addwfc	((_Load+1)^(0+256)+1),f
 10671                           
 10672                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10673  008C  3000               	movlw	0
 10674  008D  0238               	subwf	((_Load+1)^(0+256)+1),w
 10675  008E  3002               	movlw	2
 10676  008F  1903               	skipnz
 10677  0090  0237               	subwf	(_Load^(0+256)+1),w
 10678  0091  1C03               	skipc
 10679  0092  0008               	return
 10680                           
 10681                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10682  0093  01B7               	clrf	(_Load^(0+256)+1)
 10683  0094  01B8               	clrf	((_Load+1)^(0+256)+1)
 10684                           
 10685                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10686  0095  1236               	bcf	_Load^(0+256),4
 10687                           
 10688                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10689  0096  3001               	movlw	1
 10690  0097  0020               	movlb	0	; select bank0
 10691  0098  00EC               	movwf	Load_Main@i
 10692  0099  3000               	movlw	0
 10693  009A  00ED               	movwf	Load_Main@i+1
 10694  009B  086D               	movf	Load_Main@i+1,w
 10695  009C  3A80               	xorlw	128
 10696  009D  00E5               	movwf	??_Load_Main
 10697  009E  3080               	movlw	128
 10698  009F  0265               	subwf	??_Load_Main,w
 10699  00A0  1D03               	skipz
 10700  00A1  28A4               	goto	u12445
 10701  00A2  3004               	movlw	4
 10702  00A3  026C               	subwf	Load_Main@i,w
 10703  00A4                     u12445:	
 10704  00A4  1803               	btfsc	3,0
 10705  00A5  28D8               	goto	l10745
 10706  00A6                     l10739:	
 10707                           
 10708                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10709  00A6  0020               	movlb	0	; select bank0
 10710  00A7  356C               	lslf	Load_Main@i,w
 10711  00A8  3E41               	addlw	(_Load+11)& (0+255)
 10712  00A9  0086               	movwf	6
 10713  00AA  3001               	movlw	1	; select bank2/3
 10714  00AB  0087               	movwf	7
 10715  00AC  3F40               	moviw [0]fsr1
 10716  00AD  00E5               	movwf	??_Load_Main
 10717  00AE  3F41               	moviw [1]fsr1
 10718  00AF  00E6               	movwf	??_Load_Main+1
 10719  00B0  0865               	movf	??_Load_Main,w
 10720  00B1  0022               	movlb	2	; select bank2
 10721  00B2  07BB               	addwf	(_Load^(0+256)+5),f
 10722  00B3  0020               	movlb	0	; select bank0
 10723  00B4  0866               	movf	??_Load_Main+1,w
 10724  00B5  0022               	movlb	2	; select bank2
 10725  00B6  3DBC               	addwfc	((_Load+1)^(0+256)+5),f
 10726                           
 10727                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10728  00B7  0020               	movlb	0	; select bank0
 10729  00B8  356C               	lslf	Load_Main@i,w
 10730  00B9  3E4B               	addlw	(_Load+21)& (0+255)
 10731  00BA  0086               	movwf	6
 10732  00BB  3001               	movlw	1	; select bank2/3
 10733  00BC  0087               	movwf	7
 10734  00BD  3F40               	moviw [0]fsr1
 10735  00BE  00E5               	movwf	??_Load_Main
 10736  00BF  3F41               	moviw [1]fsr1
 10737  00C0  00E6               	movwf	??_Load_Main+1
 10738  00C1  0865               	movf	??_Load_Main,w
 10739  00C2  0022               	movlb	2	; select bank2
 10740  00C3  07BD               	addwf	(_Load^(0+256)+7),f
 10741  00C4  0020               	movlb	0	; select bank0
 10742  00C5  0866               	movf	??_Load_Main+1,w
 10743  00C6  0022               	movlb	2	; select bank2
 10744  00C7  3DBE               	addwfc	((_Load+1)^(0+256)+7),f
 10745  00C8  3001               	movlw	1
 10746  00C9  0020               	movlb	0	; select bank0
 10747  00CA  07EC               	addwf	Load_Main@i,f
 10748  00CB  3000               	movlw	0
 10749  00CC  3DED               	addwfc	Load_Main@i+1,f
 10750  00CD  086D               	movf	Load_Main@i+1,w
 10751  00CE  3A80               	xorlw	128
 10752  00CF  00E5               	movwf	??_Load_Main
 10753  00D0  3080               	movlw	128
 10754  00D1  0265               	subwf	??_Load_Main,w
 10755  00D2  1D03               	skipz
 10756  00D3  28D6               	goto	u12455
 10757  00D4  3004               	movlw	4
 10758  00D5  026C               	subwf	Load_Main@i,w
 10759  00D6                     u12455:	
 10760  00D6  1C03               	skipc
 10761  00D7  28A6               	goto	l10739
 10762  00D8                     l10745:	
 10763                           
 10764                           ;OverLoad_B1.c: 104: }
 10765                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10766  00D8  3003               	movlw	3
 10767  00D9  0020               	movlb	0	; select bank0
 10768  00DA  00A0               	movwf	___lwdiv@divisor
 10769  00DB  3000               	movlw	0
 10770  00DC  00A1               	movwf	___lwdiv@divisor+1
 10771  00DD  0022               	movlb	2	; select bank2
 10772  00DE  083C               	movf	((_Load+1)^(0+256)+5),w
 10773  00DF  0020               	movlb	0	; select bank0
 10774  00E0  01A3               	clrf	___lwdiv@dividend+1
 10775  00E1  07A3               	addwf	___lwdiv@dividend+1,f
 10776  00E2  0022               	movlb	2	; select bank2
 10777  00E3  083B               	movf	(_Load^(0+256)+5),w
 10778  00E4  0020               	movlb	0	; select bank0
 10779  00E5  01A2               	clrf	___lwdiv@dividend
 10780  00E6  07A2               	addwf	___lwdiv@dividend,f
 10781  00E7  3191  216C  3180   	fcall	___lwdiv
 10782  00EA  0020               	movlb	0	; select bank0
 10783  00EB  0821               	movf	?___lwdiv+1,w
 10784  00EC  0022               	movlb	2	; select bank2
 10785  00ED  01BC               	clrf	((_Load+1)^(0+256)+5)
 10786  00EE  07BC               	addwf	((_Load+1)^(0+256)+5),f
 10787  00EF  0020               	movlb	0	; select bank0
 10788  00F0  0820               	movf	?___lwdiv,w
 10789  00F1  0022               	movlb	2	; select bank2
 10790  00F2  01BB               	clrf	(_Load^(0+256)+5)
 10791  00F3  07BB               	addwf	(_Load^(0+256)+5),f
 10792                           
 10793                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10794  00F4  3003               	movlw	3
 10795  00F5  0020               	movlb	0	; select bank0
 10796  00F6  00A0               	movwf	___lwdiv@divisor
 10797  00F7  3000               	movlw	0
 10798  00F8  00A1               	movwf	___lwdiv@divisor+1
 10799  00F9  0022               	movlb	2	; select bank2
 10800  00FA  083E               	movf	((_Load+1)^(0+256)+7),w
 10801  00FB  0020               	movlb	0	; select bank0
 10802  00FC  01A3               	clrf	___lwdiv@dividend+1
 10803  00FD  07A3               	addwf	___lwdiv@dividend+1,f
 10804  00FE  0022               	movlb	2	; select bank2
 10805  00FF  083D               	movf	(_Load^(0+256)+7),w
 10806  0100  0020               	movlb	0	; select bank0
 10807  0101  01A2               	clrf	___lwdiv@dividend
 10808  0102  07A2               	addwf	___lwdiv@dividend,f
 10809  0103  3191  216C  3180   	fcall	___lwdiv
 10810  0106  0020               	movlb	0	; select bank0
 10811  0107  0821               	movf	?___lwdiv+1,w
 10812  0108  0022               	movlb	2	; select bank2
 10813  0109  01BE               	clrf	((_Load+1)^(0+256)+7)
 10814  010A  07BE               	addwf	((_Load+1)^(0+256)+7),f
 10815  010B  0020               	movlb	0	; select bank0
 10816  010C  0820               	movf	?___lwdiv,w
 10817  010D  0022               	movlb	2	; select bank2
 10818  010E  01BD               	clrf	(_Load^(0+256)+7)
 10819  010F  07BD               	addwf	(_Load^(0+256)+7),f
 10820                           
 10821                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 10822  0110  319E  2655  3180   	fcall	_setLoad_AH_AL_Restore
 10823                           
 10824                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 10825  0113  0022               	movlb	2	; select bank2
 10826  0114  083E               	movf	((_Load+1)^(0+256)+7),w
 10827  0115  023C               	subwf	((_Load+1)^(0+256)+5),w
 10828  0116  1D03               	skipz
 10829  0117  291A               	goto	u12465
 10830  0118  083D               	movf	(_Load^(0+256)+7),w
 10831  0119  023B               	subwf	(_Load^(0+256)+5),w
 10832  011A                     u12465:	
 10833  011A  1C03               	skipc
 10834  011B  0008               	return
 10835                           
 10836                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 10837  011C  3005               	movlw	5
 10838  011D  3E36               	addlw	_Load& (0+255)
 10839  011E  0086               	movwf	6
 10840  011F  3001               	movlw	1	; select bank2/3
 10841  0120  0087               	movwf	7
 10842  0121  093D               	comf	(_Load^(0+256)+7),w
 10843  0122  0020               	movlb	0	; select bank0
 10844  0123  00E5               	movwf	??_Load_Main
 10845  0124  0022               	movlb	2	; select bank2
 10846  0125  093E               	comf	((_Load+1)^(0+256)+7),w
 10847  0126  0020               	movlb	0	; select bank0
 10848  0127  00E6               	movwf	??_Load_Main+1
 10849  0128  0AE5               	incf	??_Load_Main,f
 10850  0129  1903               	skipnz
 10851  012A  0AE6               	incf	??_Load_Main+1,f
 10852  012B  3F40               	moviw [0]fsr1
 10853  012C  0765               	addwf	??_Load_Main,w
 10854  012D  0022               	movlb	2	; select bank2
 10855  012E  00D5               	movwf	(_Load^(0+256)+31)
 10856  012F  3F41               	moviw [1]fsr1
 10857  0130  0020               	movlb	0	; select bank0
 10858  0131  3D66               	addwfc	??_Load_Main+1,w
 10859  0132  0022               	movlb	2	; select bank2
 10860  0133  00D6               	movwf	(_Load^(0+256)+32)
 10861                           
 10862                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 10863  0134  01BB               	clrf	(_Load^(0+256)+5)
 10864  0135  01BC               	clrf	((_Load+1)^(0+256)+5)
 10865                           
 10866                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 10867  0136  01BD               	clrf	(_Load^(0+256)+7)
 10868  0137  01BE               	clrf	((_Load+1)^(0+256)+7)
 10869                           
 10870                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 10871  0138  1DB6               	btfss	_Load^(0+256),3
 10872  0139  2993               	goto	l10785
 10873                           
 10874                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 10875  013A  3002               	movlw	2
 10876  013B  025B               	subwf	(_Load^(0+256)+37),w
 10877  013C  1803               	skipnc
 10878  013D  2993               	goto	l10785
 10879                           
 10880                           ;OverLoad_B1.c: 117: Load.Count++;
 10881  013E  3001               	movlw	1
 10882  013F  0020               	movlb	0	; select bank0
 10883  0140  00E5               	movwf	??_Load_Main
 10884  0141  0865               	movf	??_Load_Main,w
 10885  0142  0022               	movlb	2	; select bank2
 10886  0143  07DB               	addwf	(_Load^(0+256)+37),f
 10887                           
 10888                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 10889  0144  319A  2288  3180   	fcall	_getDimmer_Load_Status
 10890  0147  0020               	movlb	0	; select bank0
 10891  0148  00E5               	movwf	??_Load_Main
 10892  0149  0865               	movf	??_Load_Main,w
 10893  014A  00EB               	movwf	Load_Main@Load_RunStatus
 10894                           
 10895                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 10896  014B  319A  22C0  3180   	fcall	_getMain_Lights_Count
 10897  014E  0020               	movlb	0	; select bank0
 10898  014F  00E5               	movwf	??_Load_Main
 10899  0150  0865               	movf	??_Load_Main,w
 10900  0151  00EE               	movwf	Load_Main@LightsCount
 10901                           
 10902                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 10903  0152  0022               	movlb	2	; select bank2
 10904  0153  085B               	movf	(_Load^(0+256)+37),w
 10905  0154  3A01               	xorlw	1
 10906  0155  1D03               	skipz
 10907  0156  295B               	goto	l10771
 10908                           
 10909                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*68);
 10910  0157  3050               	movlw	80
 10911  0158  00D9               	movwf	(_Load^(0+256)+35)
 10912  0159  3005               	movlw	5
 10913  015A  2968               	goto	L6
 10914  015B                     l10771:	
 10915                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 10916                           
 10917  015B  085B               	movf	(_Load^(0+256)+37),w
 10918  015C  3A02               	xorlw	2
 10919  015D  1D03               	skipz
 10920  015E  2993               	goto	l10785
 10921                           
 10922                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 10923  015F  0020               	movlb	0	; select bank0
 10924  0160  086E               	movf	Load_Main@LightsCount,w
 10925  0161  3A01               	xorlw	1
 10926  0162  1D03               	skipz
 10927  0163  296A               	goto	l10777
 10928                           
 10929                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*68);
 10930  0164  307A               	movlw	122
 10931  0165  0022               	movlb	2	; select bank2
 10932  0166  00D9               	movwf	(_Load^(0+256)+35)
 10933  0167  3000               	movlw	0
 10934  0168                     L6:	
 10935  0168  00DA               	movwf	(_Load^(0+256)+36)
 10936                           
 10937                           ;OverLoad_B1.c: 132: } else {
 10938  0169  2993               	goto	l10785
 10939  016A                     l10777:	
 10940                           
 10941                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 10942  016A  0020               	movlb	0	; select bank0
 10943  016B  08EB               	movf	Load_Main@Load_RunStatus,f
 10944  016C  1D03               	skipz
 10945  016D  2987               	goto	l10781
 10946                           
 10947                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*68) * LightsCount;
 10948  016E  086E               	movf	Load_Main@LightsCount,w
 10949  016F  00E5               	movwf	??_Load_Main
 10950  0170  01E6               	clrf	??_Load_Main+1
 10951  0171  0865               	movf	??_Load_Main,w
 10952  0172  00A0               	movwf	___wmul@multiplier
 10953  0173  0866               	movf	??_Load_Main+1,w
 10954  0174  00A1               	movwf	___wmul@multiplier+1
 10955  0175  307A               	movlw	122
 10956  0176  00A2               	movwf	___wmul@multiplicand
 10957  0177  3000               	movlw	0
 10958  0178  00A3               	movwf	___wmul@multiplicand+1
 10959  0179  319E  268E  3180   	fcall	___wmul
 10960  017C  0020               	movlb	0	; select bank0
 10961  017D  0821               	movf	?___wmul+1,w
 10962  017E  0022               	movlb	2	; select bank2
 10963  017F  01DA               	clrf	((_Load+1)^(0+256)+35)
 10964  0180  07DA               	addwf	((_Load+1)^(0+256)+35),f
 10965  0181  0020               	movlb	0	; select bank0
 10966  0182  0820               	movf	?___wmul,w
 10967  0183  0022               	movlb	2	; select bank2
 10968  0184  01D9               	clrf	(_Load^(0+256)+35)
 10969  0185  07D9               	addwf	(_Load^(0+256)+35),f
 10970                           
 10971                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 10972  0186  2993               	goto	l10785
 10973  0187                     l10781:	
 10974  0187  0020               	movlb	0	; select bank0
 10975  0188  086B               	movf	Load_Main@Load_RunStatus,w
 10976  0189  3A01               	xorlw	1
 10977  018A  1D03               	skipz
 10978  018B  2993               	goto	l10785
 10979                           
 10980                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*68) + Load.TotalLoad;
 10981  018C  0022               	movlb	2	; select bank2
 10982  018D  083F               	movf	(_Load^(0+256)+9),w
 10983  018E  3E7A               	addlw	122
 10984  018F  00D9               	movwf	(_Load^(0+256)+35)
 10985  0190  3000               	movlw	0
 10986  0191  3D40               	addwfc	((_Load+1)^(0+256)+9),w
 10987  0192  00DA               	movwf	((_Load+1)^(0+256)+35)
 10988  0193                     l10785:	
 10989                           
 10990                           ;OverLoad_B1.c: 137: }
 10991                           ;OverLoad_B1.c: 138: }
 10992                           ;OverLoad_B1.c: 139: }
 10993                           ;OverLoad_B1.c: 140: }
 10994                           ;OverLoad_B1.c: 141: }
 10995                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 10996  0193  0022               	movlb	2	; select bank2
 10997  0194  085A               	movf	((_Load+1)^(0+256)+35),w
 10998  0195  0256               	subwf	((_Load+1)^(0+256)+31),w
 10999  0196  1D03               	skipz
 11000  0197  299A               	goto	u12545
 11001  0198  0859               	movf	(_Load^(0+256)+35),w
 11002  0199  0255               	subwf	(_Load^(0+256)+31),w
 11003  019A                     u12545:	
 11004  019A  1C03               	skipc
 11005  019B  29F3               	goto	l10813
 11006                           
 11007                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11008  019C  0020               	movlb	0	; select bank0
 11009  019D  086E               	movf	Load_Main@LightsCount,w
 11010  019E  3A01               	xorlw	1
 11011  019F  1903               	skipnz
 11012  01A0  29A3               	goto	l10791
 11013  01A1  3003               	movlw	3
 11014  01A2  29A4               	goto	L7
 11015  01A3                     l10791:	
 11016  01A3  3002               	movlw	2
 11017  01A4                     L7:	
 11018  01A4  00E8               	movwf	_Load_Main$3996
 11019  01A5  3000               	movlw	0
 11020  01A6  00E9               	movwf	_Load_Main$3996+1
 11021  01A7  0868               	movf	_Load_Main$3996,w
 11022  01A8  00E5               	movwf	??_Load_Main
 11023  01A9  0865               	movf	??_Load_Main,w
 11024  01AA  00EA               	movwf	Load_Main@ErrorCountValue
 11025                           
 11026                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11027  01AB  3001               	movlw	1
 11028  01AC  00E5               	movwf	??_Load_Main
 11029  01AD  0865               	movf	??_Load_Main,w
 11030  01AE  0022               	movlb	2	; select bank2
 11031  01AF  07DC               	addwf	(_Load^(0+256)+38),f
 11032                           
 11033                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11034  01B0  085C               	movf	(_Load^(0+256)+38),w
 11035  01B1  0020               	movlb	0	; select bank0
 11036  01B2  026A               	subwf	Load_Main@ErrorCountValue,w
 11037  01B3  1803               	skipnc
 11038  01B4  0008               	return
 11039                           
 11040                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11041  01B5  0022               	movlb	2	; select bank2
 11042  01B6  01DC               	clrf	(_Load^(0+256)+38)
 11043                           
 11044                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11045  01B7  16B6               	bsf	_Load^(0+256),5
 11046                           
 11047                           ;OverLoad_B1.c: 162: setProductData(4, (Load.AD >> 8));
 11048  01B8  0856               	movf	((_Load+1)^(0+256)+31),w
 11049  01B9  0020               	movlb	0	; select bank0
 11050  01BA  00E5               	movwf	??_Load_Main
 11051  01BB  0865               	movf	??_Load_Main,w
 11052  01BC  00E2               	movwf	setProductData@value
 11053  01BD  3004               	movlw	4
 11054  01BE  319B  2304  3180   	fcall	_setProductData
 11055                           
 11056                           ;OverLoad_B1.c: 163: setProductData(5, Load.AD);
 11057  01C1  0022               	movlb	2	; select bank2
 11058  01C2  0855               	movf	(_Load^(0+256)+31),w
 11059  01C3  0020               	movlb	0	; select bank0
 11060  01C4  00E5               	movwf	??_Load_Main
 11061  01C5  0865               	movf	??_Load_Main,w
 11062  01C6  00E2               	movwf	setProductData@value
 11063  01C7  3005               	movlw	5
 11064  01C8  319B  2304  3180   	fcall	_setProductData
 11065                           
 11066                           ;OverLoad_B1.c: 164: setProductData(6, (Load.JudgeValue >> 8));
 11067  01CB  0022               	movlb	2	; select bank2
 11068  01CC  085A               	movf	((_Load+1)^(0+256)+35),w
 11069  01CD  0020               	movlb	0	; select bank0
 11070  01CE  00E5               	movwf	??_Load_Main
 11071  01CF  0865               	movf	??_Load_Main,w
 11072  01D0  00E2               	movwf	setProductData@value
 11073  01D1  3006               	movlw	6
 11074  01D2  319B  2304  3180   	fcall	_setProductData
 11075                           
 11076                           ;OverLoad_B1.c: 165: setProductData(7, Load.JudgeValue);
 11077  01D5  0022               	movlb	2	; select bank2
 11078  01D6  0859               	movf	(_Load^(0+256)+35),w
 11079  01D7  0020               	movlb	0	; select bank0
 11080  01D8  00E5               	movwf	??_Load_Main
 11081  01D9  0865               	movf	??_Load_Main,w
 11082  01DA  00E2               	movwf	setProductData@value
 11083  01DB  3007               	movlw	7
 11084  01DC  319B  2304  3180   	fcall	_setProductData
 11085                           
 11086                           ;OverLoad_B1.c: 166: setProductData(8, LightsCount);
 11087  01DF  0020               	movlb	0	; select bank0
 11088  01E0  086E               	movf	Load_Main@LightsCount,w
 11089  01E1  00E5               	movwf	??_Load_Main
 11090  01E2  0865               	movf	??_Load_Main,w
 11091  01E3  00E2               	movwf	setProductData@value
 11092  01E4  3008               	movlw	8
 11093  01E5  319B  2304  3180   	fcall	_setProductData
 11094                           
 11095                           ;OverLoad_B1.c: 167: setProductData(10, getDimmer_LoadGO());
 11096  01E8  319A  2280  3180   	fcall	_getDimmer_LoadGO
 11097  01EB  0020               	movlb	0	; select bank0
 11098  01EC  00E5               	movwf	??_Load_Main
 11099  01ED  0865               	movf	??_Load_Main,w
 11100  01EE  00E2               	movwf	setProductData@value
 11101  01EF  300A               	movlw	10
 11102  01F0  319B  2304         	fcall	_setProductData
 11103                           
 11104                           ;OverLoad_B1.c: 170: }
 11105                           ;OverLoad_B1.c: 171: } else {
 11106  01F2  0008               	return
 11107  01F3                     l10813:	
 11108                           
 11109                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11110  01F3  0022               	movlb	2	; select bank2
 11111  01F4  01DC               	clrf	(_Load^(0+256)+38)
 11112                           
 11113                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11114  01F5  1DB6               	btfss	_Load^(0+256),3
 11115  01F6  2A0B               	goto	l10829
 11116                           
 11117                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11118  01F7  3001               	movlw	1
 11119  01F8  0020               	movlb	0	; select bank0
 11120  01F9  00E5               	movwf	??_Load_Main
 11121  01FA  0865               	movf	??_Load_Main,w
 11122  01FB  0022               	movlb	2	; select bank2
 11123  01FC  07DD               	addwf	(_Load^(0+256)+39),f
 11124                           
 11125                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11126  01FD  3003               	movlw	3
 11127  01FE  025D               	subwf	(_Load^(0+256)+39),w
 11128  01FF  1C03               	skipc
 11129  0200  2A0B               	goto	l10829
 11130                           
 11131                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11132  0201  01DD               	clrf	(_Load^(0+256)+39)
 11133                           
 11134                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11135  0202  17B6               	bsf	_Load^(0+256),7
 11136                           
 11137                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11138  0203  11B6               	bcf	_Load^(0+256),3
 11139                           
 11140                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11141  0204  01DB               	clrf	(_Load^(0+256)+37)
 11142                           
 11143                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11144  0205  0856               	movf	((_Load+1)^(0+256)+31),w
 11145  0206  01C0               	clrf	((_Load+1)^(0+256)+9)
 11146  0207  07C0               	addwf	((_Load+1)^(0+256)+9),f
 11147  0208  0855               	movf	(_Load^(0+256)+31),w
 11148  0209  01BF               	clrf	(_Load^(0+256)+9)
 11149  020A  07BF               	addwf	(_Load^(0+256)+9),f
 11150  020B                     l10829:	
 11151                           
 11152                           ;OverLoad_B1.c: 184: }
 11153                           ;OverLoad_B1.c: 185: }
 11154                           ;OverLoad_B1.c: 200: setProductData(4, (Load.AD >> 8));
 11155  020B  0856               	movf	((_Load+1)^(0+256)+31),w
 11156  020C  0020               	movlb	0	; select bank0
 11157  020D  00E5               	movwf	??_Load_Main
 11158  020E  0865               	movf	??_Load_Main,w
 11159  020F  00E2               	movwf	setProductData@value
 11160  0210  3004               	movlw	4
 11161  0211  319B  2304  3180   	fcall	_setProductData
 11162                           
 11163                           ;OverLoad_B1.c: 201: setProductData(5, Load.AD);
 11164  0214  0022               	movlb	2	; select bank2
 11165  0215  0855               	movf	(_Load^(0+256)+31),w
 11166  0216  0020               	movlb	0	; select bank0
 11167  0217  00E5               	movwf	??_Load_Main
 11168  0218  0865               	movf	??_Load_Main,w
 11169  0219  00E2               	movwf	setProductData@value
 11170  021A  3005               	movlw	5
 11171  021B  319B  2304  3180   	fcall	_setProductData
 11172                           
 11173                           ;OverLoad_B1.c: 202: setProductData(6, (Load.JudgeValue >> 8));
 11174  021E  0022               	movlb	2	; select bank2
 11175  021F  085A               	movf	((_Load+1)^(0+256)+35),w
 11176  0220  0020               	movlb	0	; select bank0
 11177  0221  00E5               	movwf	??_Load_Main
 11178  0222  0865               	movf	??_Load_Main,w
 11179  0223  00E2               	movwf	setProductData@value
 11180  0224  3006               	movlw	6
 11181  0225  319B  2304  3180   	fcall	_setProductData
 11182                           
 11183                           ;OverLoad_B1.c: 203: setProductData(7, Load.JudgeValue);
 11184  0228  0022               	movlb	2	; select bank2
 11185  0229  0859               	movf	(_Load^(0+256)+35),w
 11186  022A  0020               	movlb	0	; select bank0
 11187  022B  00E5               	movwf	??_Load_Main
 11188  022C  0865               	movf	??_Load_Main,w
 11189  022D  00E2               	movwf	setProductData@value
 11190  022E  3007               	movlw	7
 11191  022F  319B  2304  3180   	fcall	_setProductData
 11192                           
 11193                           ;OverLoad_B1.c: 204: setProductData(8, LightsCount);
 11194  0232  0020               	movlb	0	; select bank0
 11195  0233  086E               	movf	Load_Main@LightsCount,w
 11196  0234  00E5               	movwf	??_Load_Main
 11197  0235  0865               	movf	??_Load_Main,w
 11198  0236  00E2               	movwf	setProductData@value
 11199  0237  3008               	movlw	8
 11200  0238  319B  2304  3180   	fcall	_setProductData
 11201                           
 11202                           ;OverLoad_B1.c: 205: setProductData(10, getDimmer_LoadGO());
 11203  023B  319A  2280  3180   	fcall	_getDimmer_LoadGO
 11204  023E  0020               	movlb	0	; select bank0
 11205  023F  00E5               	movwf	??_Load_Main
 11206  0240  0865               	movf	??_Load_Main,w
 11207  0241  00E2               	movwf	setProductData@value
 11208  0242  300A               	movlw	10
 11209  0243  319B  2304         	fcall	_setProductData
 11210                           
 11211                           ;OverLoad_B1.c: 208: }
 11212                           ;OverLoad_B1.c: 209: }
 11213                           ;OverLoad_B1.c: 210: }
 11214                           ;OverLoad_B1.c: 211: } else {
 11215  0245  0008               	return
 11216  0246                     l1638:	
 11217                           
 11218                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11219  0246  1636               	bsf	_Load^(0+256),4
 11220                           
 11221                           ;OverLoad_B1.c: 213: }
 11222                           ;OverLoad_B1.c: 214: } else {
 11223  0247  0008               	return
 11224  0248                     l1637:	
 11225                           
 11226                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11227  0248  1D36               	btfss	_Load^(0+256),2
 11228  0249  2A96               	goto	l10861
 11229                           
 11230                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11231  024A  1136               	bcf	_Load^(0+256),2
 11232                           
 11233                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11234  024B  1236               	bcf	_Load^(0+256),4
 11235                           
 11236                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11237  024C  01B7               	clrf	(_Load^(0+256)+1)
 11238  024D  01B8               	clrf	((_Load+1)^(0+256)+1)
 11239                           
 11240                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11241  024E  319E  2655  3180   	fcall	_setLoad_AH_AL_Restore
 11242                           
 11243                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11244  0251  0022               	movlb	2	; select bank2
 11245  0252  01DC               	clrf	(_Load^(0+256)+38)
 11246                           
 11247                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11248  0253  01DD               	clrf	(_Load^(0+256)+39)
 11249                           
 11250                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11251  0254  01BB               	clrf	(_Load^(0+256)+5)
 11252  0255  01BC               	clrf	((_Load+1)^(0+256)+5)
 11253                           
 11254                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11255  0256  01BD               	clrf	(_Load^(0+256)+7)
 11256  0257  01BE               	clrf	((_Load+1)^(0+256)+7)
 11257                           
 11258                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11259  0258  11B6               	bcf	_Load^(0+256),3
 11260                           
 11261                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11262  0259  01DB               	clrf	(_Load^(0+256)+37)
 11263                           
 11264                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11265  025A  13B6               	bcf	_Load^(0+256),7
 11266                           
 11267                           ;OverLoad_B1.c: 249: setProductData(4, (Load.AD >> 8));
 11268  025B  0856               	movf	((_Load+1)^(0+256)+31),w
 11269  025C  0020               	movlb	0	; select bank0
 11270  025D  00E5               	movwf	??_Load_Main
 11271  025E  0865               	movf	??_Load_Main,w
 11272  025F  00E2               	movwf	setProductData@value
 11273  0260  3004               	movlw	4
 11274  0261  319B  2304  3180   	fcall	_setProductData
 11275                           
 11276                           ;OverLoad_B1.c: 250: setProductData(5, Load.AD);
 11277  0264  0022               	movlb	2	; select bank2
 11278  0265  0855               	movf	(_Load^(0+256)+31),w
 11279  0266  0020               	movlb	0	; select bank0
 11280  0267  00E5               	movwf	??_Load_Main
 11281  0268  0865               	movf	??_Load_Main,w
 11282  0269  00E2               	movwf	setProductData@value
 11283  026A  3005               	movlw	5
 11284  026B  319B  2304  3180   	fcall	_setProductData
 11285                           
 11286                           ;OverLoad_B1.c: 251: setProductData(6, (Load.JudgeValue >> 8));
 11287  026E  0022               	movlb	2	; select bank2
 11288  026F  085A               	movf	((_Load+1)^(0+256)+35),w
 11289  0270  0020               	movlb	0	; select bank0
 11290  0271  00E5               	movwf	??_Load_Main
 11291  0272  0865               	movf	??_Load_Main,w
 11292  0273  00E2               	movwf	setProductData@value
 11293  0274  3006               	movlw	6
 11294  0275  319B  2304  3180   	fcall	_setProductData
 11295                           
 11296                           ;OverLoad_B1.c: 252: setProductData(7, Load.JudgeValue);
 11297  0278  0022               	movlb	2	; select bank2
 11298  0279  0859               	movf	(_Load^(0+256)+35),w
 11299  027A  0020               	movlb	0	; select bank0
 11300  027B  00E5               	movwf	??_Load_Main
 11301  027C  0865               	movf	??_Load_Main,w
 11302  027D  00E2               	movwf	setProductData@value
 11303  027E  3007               	movlw	7
 11304  027F  319B  2304  3180   	fcall	_setProductData
 11305                           
 11306                           ;OverLoad_B1.c: 253: setProductData(8, LightsCount);
 11307  0282  0020               	movlb	0	; select bank0
 11308  0283  086E               	movf	Load_Main@LightsCount,w
 11309  0284  00E5               	movwf	??_Load_Main
 11310  0285  0865               	movf	??_Load_Main,w
 11311  0286  00E2               	movwf	setProductData@value
 11312  0287  3008               	movlw	8
 11313  0288  319B  2304  3180   	fcall	_setProductData
 11314                           
 11315                           ;OverLoad_B1.c: 254: setProductData(10, getDimmer_LoadGO());
 11316  028B  319A  2280  3180   	fcall	_getDimmer_LoadGO
 11317  028E  0020               	movlb	0	; select bank0
 11318  028F  00E5               	movwf	??_Load_Main
 11319  0290  0865               	movf	??_Load_Main,w
 11320  0291  00E2               	movwf	setProductData@value
 11321  0292  300A               	movlw	10
 11322  0293  319B  2304  3180   	fcall	_setProductData
 11323  0296                     l10861:	
 11324                           
 11325                           ;OverLoad_B1.c: 257: }
 11326                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11327  0296  0022               	movlb	2	; select bank2
 11328  0297  1EB6               	btfss	_Load^(0+256),5
 11329  0298  0008               	return
 11330                           
 11331                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11332  0299  3001               	movlw	1
 11333  029A  07B9               	addwf	(_Load^(0+256)+3),f
 11334  029B  3000               	movlw	0
 11335  029C  3DBA               	addwfc	((_Load+1)^(0+256)+3),f
 11336                           
 11337                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11338  029D  3001               	movlw	1
 11339  029E  023A               	subwf	((_Load+1)^(0+256)+3),w
 11340  029F  30F4               	movlw	244
 11341  02A0  1903               	skipnz
 11342  02A1  0239               	subwf	(_Load^(0+256)+3),w
 11343  02A2  1C03               	skipc
 11344  02A3  0008               	return
 11345                           
 11346                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11347  02A4  01B9               	clrf	(_Load^(0+256)+3)
 11348  02A5  01BA               	clrf	((_Load+1)^(0+256)+3)
 11349                           
 11350                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11351  02A6  12B6               	bcf	_Load^(0+256),5
 11352                           
 11353                           ;OverLoad_B1.c: 263: }
 11354                           ;OverLoad_B1.c: 264: }
 11355                           ;OverLoad_B1.c: 265: }
 11356                           ;OverLoad_B1.c: 266: } else {
 11357  02A7  0008               	return
 11358  02A8                     l1627:	
 11359                           
 11360                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11361  02A8  0021               	movlb	1	; select bank1
 11362  02A9  1C2F               	btfss	_myMain^(0+128),0
 11363  02AA  0008               	return
 11364                           
 11365                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11366  02AB  0022               	movlb	2	; select bank2
 11367  02AC  1436               	bsf	_Load^(0+256),0
 11368  02AD  0008               	return
 11369  02AE                     __end_of_Load_Main:	
 11370                           
 11371                           	psect	text64
 11372  1AC0                     __ptext64:	
 11373 ;; *************** function _getMain_Lights_Count *****************
 11374 ;; Defined at:
 11375 ;;		line 459 in file "../src/Main_B1.c"
 11376 ;; Parameters:    Size  Location     Type
 11377 ;;		None
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;  status1         1    1[BANK0 ] unsigned char 
 11380 ;;  count           1    0[BANK0 ] unsigned char 
 11381 ;; Return value:  Size  Location     Type
 11382 ;;                  1    wreg      unsigned char 
 11383 ;; Registers used:
 11384 ;;		wreg, status,2
 11385 ;; Tracked objects:
 11386 ;;		On entry : 0/0
 11387 ;;		On exit  : 0/0
 11388 ;;		Unchanged: 0/0
 11389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;Total ram usage:        2 bytes
 11395 ;; Hardware stack levels used:    1
 11396 ;; Hardware stack levels required when called:    5
 11397 ;; This function calls:
 11398 ;;		Nothing
 11399 ;; This function is called by:
 11400 ;;		_Load_Main
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           
 11405                           ;psect for function _getMain_Lights_Count
 11406  1AC0                     _getMain_Lights_Count:	
 11407                           
 11408                           ;Main_B1.c: 460: char count = 0;
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11412  1AC0  0020               	movlb	0	; select bank0
 11413  1AC1  01A0               	clrf	getMain_Lights_Count@count
 11414                           
 11415                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11416  1AC2  3000               	movlw	0
 11417  1AC3  0021               	movlb	1	; select bank1
 11418  1AC4  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11419  1AC5  3001               	movlw	1
 11420  1AC6  0020               	movlb	0	; select bank0
 11421  1AC7  00A1               	movwf	getMain_Lights_Count@status1
 11422                           
 11423                           ;Main_B1.c: 487: return count = status1;
 11424  1AC8  0821               	movf	getMain_Lights_Count@status1,w
 11425  1AC9  00A0               	movwf	getMain_Lights_Count@count
 11426  1ACA  0008               	return
 11427  1ACB                     __end_of_getMain_Lights_Count:	
 11428                           
 11429                           	psect	text65
 11430  1A88                     __ptext65:	
 11431 ;; *************** function _getDimmer_Load_Status *****************
 11432 ;; Defined at:
 11433 ;;		line 1157 in file "../src/Dimmer_B1.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;		None
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  status          1    0[BANK0 ] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      unsigned char 
 11440 ;; Registers used:
 11441 ;;		wreg, status,2
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;Total ram usage:        1 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:    5
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_Load_Main
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           
 11462                           ;psect for function _getDimmer_Load_Status
 11463  1A88                     _getDimmer_Load_Status:	
 11464                           
 11465                           ;Dimmer_B1.c: 1158: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11466                           
 11467                           ;incstack = 0
 11468                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11469  1A88  3000               	movlw	0
 11470  1A89  0022               	movlb	2	; select bank2
 11471  1A8A  192C               	btfsc	_Dimmer^(0+256),2
 11472  1A8B  3001               	movlw	1
 11473  1A8C  0020               	movlb	0	; select bank0
 11474  1A8D  00A0               	movwf	getDimmer_Load_Status@status
 11475                           
 11476                           ;Dimmer_B1.c: 1159: return status;
 11477  1A8E  0820               	movf	getDimmer_Load_Status@status,w
 11478  1A8F  0008               	return
 11479  1A90                     __end_of_getDimmer_Load_Status:	
 11480                           
 11481                           	psect	text66
 11482  1A80                     __ptext66:	
 11483 ;; *************** function _getDimmer_LoadGO *****************
 11484 ;; Defined at:
 11485 ;;		line 1151 in file "../src/Dimmer_B1.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11490 ;; Return value:  Size  Location     Type
 11491 ;;                  1    wreg      unsigned char 
 11492 ;; Registers used:
 11493 ;;		wreg, status,2
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;Total ram usage:        1 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    5
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_Load_Main
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           
 11514                           ;psect for function _getDimmer_LoadGO
 11515  1A80                     _getDimmer_LoadGO:	
 11516                           
 11517                           ;Dimmer_B1.c: 1152: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11518                           
 11519                           ;incstack = 0
 11520                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11521  1A80  3000               	movlw	0
 11522  1A81  0022               	movlb	2	; select bank2
 11523  1A82  18AC               	btfsc	_Dimmer^(0+256),1
 11524  1A83  3001               	movlw	1
 11525  1A84  0020               	movlb	0	; select bank0
 11526  1A85  00A0               	movwf	getDimmer_LoadGO@loadgo
 11527                           
 11528                           ;Dimmer_B1.c: 1153: return loadgo;
 11529  1A86  0820               	movf	getDimmer_LoadGO@loadgo,w
 11530  1A87  0008               	return
 11531  1A88                     __end_of_getDimmer_LoadGO:	
 11532                           
 11533                           	psect	text67
 11534  1CA1                     __ptext67:	
 11535 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11536 ;; Defined at:
 11537 ;;		line 285 in file "../src/Dimmer_B1.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;  status          1    0[BANK0 ] unsigned char 
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      unsigned char 
 11544 ;; Registers used:
 11545 ;;		wreg, status,2, status,0
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;Total ram usage:        1 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    5
 11558 ;; This function calls:
 11559 ;;		Nothing
 11560 ;; This function is called by:
 11561 ;;		_Load_Main
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           
 11566                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11567  1CA1                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11568                           
 11569                           ;Dimmer_B1.c: 286: char status = 0;
 11570                           
 11571                           ;incstack = 0
 11572                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11573  1CA1  0020               	movlb	0	; select bank0
 11574  1CA2  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11575                           
 11576                           ;Dimmer_B1.c: 297: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11577  1CA3  3000               	movlw	0
 11578  1CA4  0021               	movlb	1	; select bank1
 11579  1CA5  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11580  1CA6  3001               	movlw	1
 11581  1CA7  0020               	movlb	0	; select bank0
 11582  1CA8  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11583                           
 11584                           ;Dimmer_B1.c: 301: if (status == 0) {
 11585  1CA9  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11586  1CAA  1D03               	skipz
 11587  1CAB  2CB2               	goto	l9903
 11588                           
 11589                           ;Dimmer_B1.c: 311: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11590  1CAC  3000               	movlw	0
 11591  1CAD  0021               	movlb	1	; select bank1
 11592  1CAE  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11593  1CAF  3001               	movlw	1
 11594  1CB0  0020               	movlb	0	; select bank0
 11595  1CB1  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11596  1CB2                     l9903:	
 11597                           
 11598                           ;Dimmer_B1.c: 313: }
 11599                           ;Dimmer_B1.c: 315: return status;
 11600  1CB2  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11601  1CB3  0008               	return
 11602  1CB4                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11603                           
 11604                           	psect	text68
 11605  1E8E                     __ptext68:	
 11606 ;; *************** function ___wmul *****************
 11607 ;; Defined at:
 11608 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11611 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  product         2    4[BANK0 ] unsigned int 
 11614 ;; Return value:  Size  Location     Type
 11615 ;;                  2    0[BANK0 ] unsigned int 
 11616 ;; Registers used:
 11617 ;;		wreg, status,2, status,0
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;Total ram usage:        6 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:    5
 11630 ;; This function calls:
 11631 ;;		Nothing
 11632 ;; This function is called by:
 11633 ;;		_Load_Main
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           
 11638                           ;psect for function ___wmul
 11639  1E8E                     ___wmul:	
 11640                           
 11641                           ;incstack = 0
 11642                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11643  1E8E  0020               	movlb	0	; select bank0
 11644  1E8F  01A4               	clrf	___wmul@product
 11645  1E90  01A5               	clrf	___wmul@product+1
 11646  1E91                     l10439:	
 11647  1E91  1C20               	btfss	___wmul@multiplier,0
 11648  1E92  2E97               	goto	l2698
 11649  1E93  0822               	movf	___wmul@multiplicand,w
 11650  1E94  07A4               	addwf	___wmul@product,f
 11651  1E95  0823               	movf	___wmul@multiplicand+1,w
 11652  1E96  3DA5               	addwfc	___wmul@product+1,f
 11653  1E97                     l2698:	
 11654  1E97  3001               	movlw	1
 11655  1E98                     u11875:	
 11656  1E98  35A2               	lslf	___wmul@multiplicand,f
 11657  1E99  0DA3               	rlf	___wmul@multiplicand+1,f
 11658  1E9A  0B89               	decfsz	9,f
 11659  1E9B  2E98               	goto	u11875
 11660  1E9C  3001               	movlw	1
 11661  1E9D                     u11885:	
 11662  1E9D  36A1               	lsrf	___wmul@multiplier+1,f
 11663  1E9E  0CA0               	rrf	___wmul@multiplier,f
 11664  1E9F  0B89               	decfsz	9,f
 11665  1EA0  2E9D               	goto	u11885
 11666  1EA1  0821               	movf	___wmul@multiplier+1,w
 11667  1EA2  0420               	iorwf	___wmul@multiplier,w
 11668  1EA3  1D03               	skipz
 11669  1EA4  2E91               	goto	l10439
 11670  1EA5  0825               	movf	___wmul@product+1,w
 11671  1EA6  01A1               	clrf	?___wmul+1
 11672  1EA7  07A1               	addwf	?___wmul+1,f
 11673  1EA8  0824               	movf	___wmul@product,w
 11674  1EA9  01A0               	clrf	?___wmul
 11675  1EAA  07A0               	addwf	?___wmul,f
 11676  1EAB  0008               	return
 11677  1EAC                     __end_of___wmul:	
 11678                           
 11679                           	psect	text69
 11680  116C                     __ptext69:	
 11681 ;; *************** function ___lwdiv *****************
 11682 ;; Defined at:
 11683 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;  divisor         2    0[BANK0 ] unsigned int 
 11686 ;;  dividend        2    2[BANK0 ] unsigned int 
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;  quotient        2    6[BANK0 ] unsigned int 
 11689 ;;  counter         1    5[BANK0 ] unsigned char 
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  2    0[BANK0 ] unsigned int 
 11692 ;; Registers used:
 11693 ;;		wreg, status,2, status,0
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;Total ram usage:        8 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; Hardware stack levels required when called:    5
 11706 ;; This function calls:
 11707 ;;		Nothing
 11708 ;; This function is called by:
 11709 ;;		_Load_Main
 11710 ;;		_setRF_Main
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           
 11715                           ;psect for function ___lwdiv
 11716  116C                     ___lwdiv:	
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11720  116C  0020               	movlb	0	; select bank0
 11721  116D  01A6               	clrf	___lwdiv@quotient
 11722  116E  01A7               	clrf	___lwdiv@quotient+1
 11723  116F  0821               	movf	___lwdiv@divisor+1,w
 11724  1170  0420               	iorwf	___lwdiv@divisor,w
 11725  1171  1903               	skipnz
 11726  1172  299C               	goto	l9845
 11727  1173  01A5               	clrf	___lwdiv@counter
 11728  1174  0AA5               	incf	___lwdiv@counter,f
 11729  1175                     l9833:	
 11730  1175  1BA1               	btfsc	___lwdiv@divisor+1,7
 11731  1176  2981               	goto	l9835
 11732  1177  3001               	movlw	1
 11733  1178                     u10825:	
 11734  1178  35A0               	lslf	___lwdiv@divisor,f
 11735  1179  0DA1               	rlf	___lwdiv@divisor+1,f
 11736  117A  0B89               	decfsz	9,f
 11737  117B  2978               	goto	u10825
 11738  117C  3001               	movlw	1
 11739  117D  00A4               	movwf	??___lwdiv
 11740  117E  0824               	movf	??___lwdiv,w
 11741  117F  07A5               	addwf	___lwdiv@counter,f
 11742  1180  2975               	goto	l9833
 11743  1181                     l9835:	
 11744  1181  3001               	movlw	1
 11745  1182                     u10845:	
 11746  1182  35A6               	lslf	___lwdiv@quotient,f
 11747  1183  0DA7               	rlf	___lwdiv@quotient+1,f
 11748  1184  0B89               	decfsz	9,f
 11749  1185  2982               	goto	u10845
 11750  1186  0821               	movf	___lwdiv@divisor+1,w
 11751  1187  0223               	subwf	___lwdiv@dividend+1,w
 11752  1188  1D03               	skipz
 11753  1189  298C               	goto	u10855
 11754  118A  0820               	movf	___lwdiv@divisor,w
 11755  118B  0222               	subwf	___lwdiv@dividend,w
 11756  118C                     u10855:	
 11757  118C  1C03               	skipc
 11758  118D  2993               	goto	l9841
 11759  118E  0820               	movf	___lwdiv@divisor,w
 11760  118F  02A2               	subwf	___lwdiv@dividend,f
 11761  1190  0821               	movf	___lwdiv@divisor+1,w
 11762  1191  3BA3               	subwfb	___lwdiv@dividend+1,f
 11763  1192  1426               	bsf	___lwdiv@quotient,0
 11764  1193                     l9841:	
 11765  1193  3001               	movlw	1
 11766  1194                     u10865:	
 11767  1194  36A1               	lsrf	___lwdiv@divisor+1,f
 11768  1195  0CA0               	rrf	___lwdiv@divisor,f
 11769  1196  0B89               	decfsz	9,f
 11770  1197  2994               	goto	u10865
 11771  1198  3001               	movlw	1
 11772  1199  02A5               	subwf	___lwdiv@counter,f
 11773  119A  1D03               	btfss	3,2
 11774  119B  2981               	goto	l9835
 11775  119C                     l9845:	
 11776  119C  0827               	movf	___lwdiv@quotient+1,w
 11777  119D  01A1               	clrf	?___lwdiv+1
 11778  119E  07A1               	addwf	?___lwdiv+1,f
 11779  119F  0826               	movf	___lwdiv@quotient,w
 11780  11A0  01A0               	clrf	?___lwdiv
 11781  11A1  07A0               	addwf	?___lwdiv,f
 11782  11A2  0008               	return
 11783  11A3                     __end_of___lwdiv:	
 11784                           
 11785                           	psect	text70
 11786  1A15                     __ptext70:	
 11787 ;; *************** function _Load_Initialization *****************
 11788 ;; Defined at:
 11789 ;;		line 9 in file "../src/OverLoad_B1.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;		None
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;		None
 11794 ;; Return value:  Size  Location     Type
 11795 ;;		None               void
 11796 ;; Registers used:
 11797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;Total ram usage:        0 bytes
 11808 ;; Hardware stack levels used:    1
 11809 ;; Hardware stack levels required when called:    6
 11810 ;; This function calls:
 11811 ;;		_setLoad_AH_AL_Restore
 11812 ;; This function is called by:
 11813 ;;		_main
 11814 ;; This function uses a non-reentrant model
 11815 ;;
 11816                           
 11817                           
 11818                           ;psect for function _Load_Initialization
 11819  1A15                     _Load_Initialization:	
 11820                           
 11821                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11822                           
 11823                           ;incstack = 0
 11824                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11825  1A15  319E  2655         	fcall	_setLoad_AH_AL_Restore
 11826  1A17  0008               	return
 11827  1A18                     __end_of_Load_Initialization:	
 11828                           
 11829                           	psect	text71
 11830  1E55                     __ptext71:	
 11831 ;; *************** function _setLoad_AH_AL_Restore *****************
 11832 ;; Defined at:
 11833 ;;		line 294 in file "../src/OverLoad_B1.c"
 11834 ;; Parameters:    Size  Location     Type
 11835 ;;		None
 11836 ;; Auto vars:     Size  Location     Type
 11837 ;;  i               1    1[BANK0 ] unsigned char 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;		None               void
 11840 ;; Registers used:
 11841 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;Total ram usage:        2 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    5
 11854 ;; This function calls:
 11855 ;;		Nothing
 11856 ;; This function is called by:
 11857 ;;		_Load_Initialization
 11858 ;;		_Load_Main
 11859 ;; This function uses a non-reentrant model
 11860 ;;
 11861                           
 11862                           
 11863                           ;psect for function _setLoad_AH_AL_Restore
 11864  1E55                     _setLoad_AH_AL_Restore:	
 11865                           
 11866                           ;OverLoad_B1.c: 295: char i;
 11867                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11868                           
 11869                           ;incstack = 0
 11870                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11871  1E55  0020               	movlb	0	; select bank0
 11872  1E56  01A1               	clrf	setLoad_AH_AL_Restore@i
 11873  1E57                     L8:	
 11874  1E57  3005               	movlw	5
 11875  1E58  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11876  1E59  1803               	btfsc	3,0
 11877  1E5A  0008               	return
 11878                           
 11879                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11880  1E5B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11881  1E5C  3E41               	addlw	(_Load+11)& (0+255)
 11882  1E5D  0086               	movwf	6
 11883  1E5E  3001               	movlw	1	; select bank2/3
 11884  1E5F  0087               	movwf	7
 11885  1E60  3000               	movlw	0
 11886  1E61  3FC0               	movwi [0]fsr1
 11887  1E62  3FC1               	movwi [1]fsr1
 11888                           
 11889                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11890  1E63  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11891  1E64  3E4B               	addlw	(_Load+21)& (0+255)
 11892  1E65  0086               	movwf	6
 11893  1E66  3001               	movlw	1	; select bank2/3
 11894  1E67  0087               	movwf	7
 11895  1E68  30FF               	movlw	255
 11896  1E69  3FC0               	movwi [0]fsr1
 11897  1E6A  30FF               	movlw	255
 11898  1E6B  3FC1               	movwi [1]fsr1
 11899  1E6C  3001               	movlw	1
 11900  1E6D  00A0               	movwf	??_setLoad_AH_AL_Restore
 11901  1E6E  0820               	movf	??_setLoad_AH_AL_Restore,w
 11902  1E6F  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11903  1E70  2E57               	goto	L8
 11904  1E71                     __end_of_setLoad_AH_AL_Restore:	
 11905                           
 11906                           	psect	text72
 11907  1A30                     __ptext72:	
 11908 ;; *************** function _LED_Main *****************
 11909 ;; Defined at:
 11910 ;;		line 47 in file "../src/LED_B1.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;		None
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;		None
 11915 ;; Return value:  Size  Location     Type
 11916 ;;		None               void
 11917 ;; Registers used:
 11918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;Total ram usage:        0 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    7
 11931 ;; This function calls:
 11932 ;;		_setLED_Main
 11933 ;; This function is called by:
 11934 ;;		_main
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _LED_Main
 11940  1A30                     _LED_Main:	
 11941                           
 11942                           ;LED_B1.c: 67: setLED_Main(99);
 11943                           
 11944                           ;incstack = 0
 11945                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11946  1A30  3063               	movlw	99
 11947  1A31  3191  2136         	fcall	_setLED_Main
 11948  1A33  0008               	return
 11949  1A34                     __end_of_LED_Main:	
 11950                           
 11951                           	psect	text73
 11952  1136                     __ptext73:	
 11953 ;; *************** function _setLED_Main *****************
 11954 ;; Defined at:
 11955 ;;		line 229 in file "../src/LED_B1.c"
 11956 ;; Parameters:    Size  Location     Type
 11957 ;;  led             1    wreg     unsigned char 
 11958 ;; Auto vars:     Size  Location     Type
 11959 ;;  led             1    4[BANK0 ] unsigned char 
 11960 ;; Return value:  Size  Location     Type
 11961 ;;		None               void
 11962 ;; Registers used:
 11963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11964 ;; Tracked objects:
 11965 ;;		On entry : 0/0
 11966 ;;		On exit  : 0/0
 11967 ;;		Unchanged: 0/0
 11968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;Total ram usage:        3 bytes
 11974 ;; Hardware stack levels used:    1
 11975 ;; Hardware stack levels required when called:    6
 11976 ;; This function calls:
 11977 ;;		_LedPointSelect
 11978 ;; This function is called by:
 11979 ;;		_LED_Main
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           
 11984                           ;psect for function _setLED_Main
 11985  1136                     _setLED_Main:	
 11986                           
 11987                           ;incstack = 0
 11988                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11989                           ;setLED_Main@led stored from wreg
 11990  1136  0020               	movlb	0	; select bank0
 11991  1137  00A4               	movwf	setLED_Main@led
 11992                           
 11993                           ;LED_B1.c: 230: LedPointSelect(led);
 11994  1138  0824               	movf	setLED_Main@led,w
 11995  1139  319B  2328  3191   	fcall	_LedPointSelect
 11996                           
 11997                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11998  113C  0021               	movlb	1	; select bank1
 11999  113D  084F               	movf	_LED^(0+128),w
 12000  113E  0086               	movwf	6
 12001  113F  3001               	movlw	1	; select bank2/3
 12002  1140  0087               	movwf	7
 12003  1141  1C81               	btfss	1,1
 12004  1142  0008               	return
 12005                           
 12006                           ;LED_B1.c: 232: LED->Time++;
 12007  1143  0A4F               	incf	_LED^(0+128),w
 12008  1144  0086               	movwf	6
 12009  1145  3001               	movlw	1	; select bank2/3
 12010  1146  0087               	movwf	7
 12011  1147  3001               	movlw	1
 12012  1148  0781               	addwf	1,f
 12013  1149  3141               	addfsr 1,1
 12014  114A  1803               	skipnc
 12015  114B  0A81               	incf	1,f
 12016                           
 12017                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12018  114C  0A4F               	incf	_LED^(0+128),w
 12019  114D  0086               	movwf	6
 12020  114E  3001               	movlw	1	; select bank2/3
 12021  114F  0087               	movwf	7
 12022  1150  3F40               	moviw [0]fsr1
 12023  1151  0020               	movlb	0	; select bank0
 12024  1152  00A2               	movwf	??_setLED_Main
 12025  1153  3F41               	moviw [1]fsr1
 12026  1154  00A3               	movwf	??_setLED_Main+1
 12027  1155  3000               	movlw	0
 12028  1156  0223               	subwf	??_setLED_Main+1,w
 12029  1157  3019               	movlw	25
 12030  1158  1903               	skipnz
 12031  1159  0222               	subwf	??_setLED_Main,w
 12032  115A  1C03               	skipc
 12033  115B  0008               	return
 12034                           
 12035                           ;LED_B1.c: 234: LED->Time = 0;
 12036  115C  0021               	movlb	1	; select bank1
 12037  115D  0A4F               	incf	_LED^(0+128),w
 12038  115E  0086               	movwf	6
 12039  115F  3001               	movlw	1	; select bank2/3
 12040  1160  0087               	movwf	7
 12041  1161  3000               	movlw	0
 12042  1162  3FC0               	movwi [0]fsr1
 12043  1163  3FC1               	movwi [1]fsr1
 12044                           
 12045                           ;LED_B1.c: 252: if (led == 99) {
 12046  1164  0020               	movlb	0	; select bank0
 12047  1165  0824               	movf	setLED_Main@led,w
 12048  1166  3A63               	xorlw	99
 12049  1167  1D03               	skipz
 12050  1168  0008               	return
 12051                           
 12052                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12053  1169  3020               	movlw	32
 12054  116A  068D               	xorwf	13,f
 12055  116B  0008               	return
 12056  116C                     __end_of_setLED_Main:	
 12057                           
 12058                           	psect	text74
 12059  1A2C                     __ptext74:	
 12060 ;; *************** function _LED_Initialization *****************
 12061 ;; Defined at:
 12062 ;;		line 31 in file "../src/LED_B1.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;		None
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;		None
 12067 ;; Return value:  Size  Location     Type
 12068 ;;		None               void
 12069 ;; Registers used:
 12070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12071 ;; Tracked objects:
 12072 ;;		On entry : 0/0
 12073 ;;		On exit  : 0/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;Total ram usage:        0 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; Hardware stack levels required when called:    8
 12083 ;; This function calls:
 12084 ;;		_setLED_Initialization
 12085 ;; This function is called by:
 12086 ;;		_main
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           
 12091                           ;psect for function _LED_Initialization
 12092  1A2C                     _LED_Initialization:	
 12093                           
 12094                           ;LED_B1.c: 42: setLED_Initialization(99);
 12095                           
 12096                           ;incstack = 0
 12097                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12098  1A2C  3063               	movlw	99
 12099  1A2D  319C  2445         	fcall	_setLED_Initialization
 12100  1A2F  0008               	return
 12101  1A30                     __end_of_LED_Initialization:	
 12102                           
 12103                           	psect	text75
 12104  1C45                     __ptext75:	
 12105 ;; *************** function _setLED_Initialization *****************
 12106 ;; Defined at:
 12107 ;;		line 74 in file "../src/LED_B1.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;  led             1    wreg     unsigned char 
 12110 ;; Auto vars:     Size  Location     Type
 12111 ;;  led             1    4[BANK0 ] unsigned char 
 12112 ;; Return value:  Size  Location     Type
 12113 ;;		None               void
 12114 ;; Registers used:
 12115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12116 ;; Tracked objects:
 12117 ;;		On entry : 0/0
 12118 ;;		On exit  : 0/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12125 ;;Total ram usage:        1 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    7
 12128 ;; This function calls:
 12129 ;;		_LedPointSelect
 12130 ;;		_setLED
 12131 ;; This function is called by:
 12132 ;;		_LED_Initialization
 12133 ;; This function uses a non-reentrant model
 12134 ;;
 12135                           
 12136                           
 12137                           ;psect for function _setLED_Initialization
 12138  1C45                     _setLED_Initialization:	
 12139                           
 12140                           ;incstack = 0
 12141                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12142                           ;setLED_Initialization@led stored from wreg
 12143  1C45  0020               	movlb	0	; select bank0
 12144  1C46  00A4               	movwf	setLED_Initialization@led
 12145                           
 12146                           ;LED_B1.c: 75: LedPointSelect(led);
 12147  1C47  0824               	movf	setLED_Initialization@led,w
 12148  1C48  319B  2328  319C   	fcall	_LedPointSelect
 12149                           
 12150                           ;LED_B1.c: 76: LED->Enable = 1;
 12151  1C4B  0021               	movlb	1	; select bank1
 12152  1C4C  084F               	movf	_LED^(0+128),w
 12153  1C4D  0086               	movwf	6
 12154  1C4E  3001               	movlw	1	; select bank2/3
 12155  1C4F  0087               	movwf	7
 12156  1C50  1401               	bsf	1,0
 12157                           
 12158                           ;LED_B1.c: 77: setLED(led, 0);
 12159  1C51  0020               	movlb	0	; select bank0
 12160  1C52  01A2               	clrf	setLED@command
 12161  1C53  0824               	movf	setLED_Initialization@led,w
 12162  1C54  3191  21DC         	fcall	_setLED
 12163  1C56  0008               	return
 12164  1C57                     __end_of_setLED_Initialization:	
 12165                           
 12166                           	psect	text76
 12167  12CF                     __ptext76:	
 12168 ;; *************** function _Flash_Memory_Main *****************
 12169 ;; Defined at:
 12170 ;;		line 976 in file "../src/MCU_B1.c"
 12171 ;; Parameters:    Size  Location     Type
 12172 ;;		None
 12173 ;; Auto vars:     Size  Location     Type
 12174 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12175 ;; Return value:  Size  Location     Type
 12176 ;;		None               void
 12177 ;; Registers used:
 12178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12179 ;; Tracked objects:
 12180 ;;		On entry : 0/0
 12181 ;;		On exit  : 0/0
 12182 ;;		Unchanged: 0/0
 12183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;Total ram usage:        3 bytes
 12189 ;; Hardware stack levels used:    1
 12190 ;; Hardware stack levels required when called:    8
 12191 ;; This function calls:
 12192 ;;		_Flash_Memory_Modify
 12193 ;;		_getAll_Sw_KeyStatus
 12194 ;;		_getMain_All_LightsStatus
 12195 ;; This function is called by:
 12196 ;;		_main
 12197 ;; This function uses a non-reentrant model
 12198 ;;
 12199                           
 12200                           
 12201                           ;psect for function _Flash_Memory_Main
 12202  12CF                     _Flash_Memory_Main:	
 12203                           
 12204                           ;MCU_B1.c: 977: char key_Status = 0;
 12205                           
 12206                           ;incstack = 0
 12207                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12208  12CF  0020               	movlb	0	; select bank0
 12209  12D0  01A7               	clrf	Flash_Memory_Main@key_Status
 12210                           
 12211                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12212  12D1  319B  23DD  3192   	fcall	_getAll_Sw_KeyStatus
 12213  12D4  0020               	movlb	0	; select bank0
 12214  12D5  00A6               	movwf	??_Flash_Memory_Main
 12215  12D6  0826               	movf	??_Flash_Memory_Main,w
 12216  12D7  00A7               	movwf	Flash_Memory_Main@key_Status
 12217                           
 12218                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12219  12D8  0023               	movlb	3	; select bank3
 12220  12D9  1C62               	btfss	(_Memory^(0+384)+36),0
 12221  12DA  0008               	return
 12222                           
 12223                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12224  12DB  0020               	movlb	0	; select bank0
 12225  12DC  01A8               	clrf	_Flash_Memory_Main$3155
 12226  12DD  319A  22AB  3192   	fcall	_getMain_All_LightsStatus
 12227  12E0  3800               	iorlw	0
 12228  12E1  1D03               	skipz
 12229  12E2  2AE9               	goto	l10559
 12230  12E3  0020               	movlb	0	; select bank0
 12231  12E4  08A7               	movf	Flash_Memory_Main@key_Status,f
 12232  12E5  1D03               	skipz
 12233  12E6  2AE9               	goto	l10559
 12234  12E7  01A8               	clrf	_Flash_Memory_Main$3155
 12235  12E8  0AA8               	incf	_Flash_Memory_Main$3155,f
 12236  12E9                     l10559:	
 12237  12E9  0020               	movlb	0	; select bank0
 12238  12EA  0828               	movf	_Flash_Memory_Main$3155,w
 12239  12EB  0023               	movlb	3	; select bank3
 12240  12EC  10E2               	bcf	(_Memory^(0+384)+36),1
 12241  12ED  1D03               	skipz
 12242  12EE  14E2               	bsf	(_Memory^(0+384)+36),1
 12243                           
 12244                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12245  12EF  1CE2               	btfss	(_Memory^(0+384)+36),1
 12246  12F0  2B0A               	goto	l1245
 12247                           
 12248                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12249  12F1  15E2               	bsf	(_Memory^(0+384)+36),3
 12250                           
 12251                           ;MCU_B1.c: 985: Memory.Time++;
 12252  12F2  3001               	movlw	1
 12253  12F3  07E0               	addwf	(_Memory^(0+384)+34),f
 12254  12F4  3000               	movlw	0
 12255  12F5  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 12256                           
 12257                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12258  12F6  3022               	movlw	34
 12259  12F7  3EBE               	addlw	_Memory& (0+255)
 12260  12F8  0086               	movwf	6
 12261  12F9  3001               	movlw	1	; select bank3/4
 12262  12FA  0087               	movwf	7
 12263  12FB  3F40               	moviw [0]fsr1
 12264  12FC  3A0A               	xorlw	10
 12265  12FD  1D03               	skipz
 12266  12FE  2B01               	goto	u12105
 12267  12FF  3F41               	moviw [1]fsr1
 12268  1300  3A00               	xorlw	0
 12269  1301                     u12105:	
 12270  1301  1D03               	skipz
 12271  1302  0008               	return
 12272                           
 12273                           ;MCU_B1.c: 987: Memory.Time = 0;
 12274  1303  01E0               	clrf	(_Memory^(0+384)+34)
 12275  1304  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12276                           
 12277                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12278  1305  1062               	bcf	(_Memory^(0+384)+36),0
 12279                           
 12280                           ;MCU_B1.c: 989: Memory.GO = 0;
 12281  1306  10E2               	bcf	(_Memory^(0+384)+36),1
 12282                           
 12283                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12284  1307  318A  22DB         	fcall	_Flash_Memory_Modify
 12285                           
 12286                           ;MCU_B1.c: 991: }
 12287                           ;MCU_B1.c: 992: } else {
 12288  1309  0008               	return
 12289  130A                     l1245:	
 12290                           
 12291                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12292  130A  1DE2               	btfss	(_Memory^(0+384)+36),3
 12293  130B  0008               	return
 12294                           
 12295                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12296  130C  11E2               	bcf	(_Memory^(0+384)+36),3
 12297                           
 12298                           ;MCU_B1.c: 995: Memory.Time = 0;
 12299  130D  01E0               	clrf	(_Memory^(0+384)+34)
 12300  130E  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12301  130F  0008               	return
 12302  1310                     __end_of_Flash_Memory_Main:	
 12303                           
 12304                           	psect	text77
 12305  1BDD                     __ptext77:	
 12306 ;; *************** function _getAll_Sw_KeyStatus *****************
 12307 ;; Defined at:
 12308 ;;		line 278 in file "../src/Switch_B1.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;		None
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;  status          1    1[BANK0 ] unsigned char 
 12313 ;; Return value:  Size  Location     Type
 12314 ;;                  1    wreg      unsigned char 
 12315 ;; Registers used:
 12316 ;;		wreg, status,2
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;Total ram usage:        3 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; Hardware stack levels required when called:    5
 12329 ;; This function calls:
 12330 ;;		Nothing
 12331 ;; This function is called by:
 12332 ;;		_Flash_Memory_Main
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           
 12337                           ;psect for function _getAll_Sw_KeyStatus
 12338  1BDD                     _getAll_Sw_KeyStatus:	
 12339                           
 12340                           ;Switch_B1.c: 279: char status = 0;
 12341                           
 12342                           ;incstack = 0
 12343                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12344  1BDD  0020               	movlb	0	; select bank0
 12345  1BDE  01A1               	clrf	getAll_Sw_KeyStatus@status
 12346                           
 12347                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12348  1BDF  01A2               	clrf	_getAll_Sw_KeyStatus$6477
 12349  1BE0  0AA2               	incf	_getAll_Sw_KeyStatus$6477,f
 12350  1BE1  1F0C               	btfss	12,6	;volatile
 12351  1BE2  1A0C               	btfsc	12,4	;volatile
 12352  1BE3  2BE8               	goto	l10125
 12353  1BE4  1C0C               	btfss	12,0	;volatile
 12354  1BE5  1B8C               	btfsc	12,7	;volatile
 12355  1BE6  2BE8               	goto	l10125
 12356  1BE7  01A2               	clrf	_getAll_Sw_KeyStatus$6477
 12357  1BE8                     l10125:	
 12358  1BE8  0822               	movf	_getAll_Sw_KeyStatus$6477,w
 12359  1BE9  00A0               	movwf	??_getAll_Sw_KeyStatus
 12360  1BEA  0820               	movf	??_getAll_Sw_KeyStatus,w
 12361  1BEB  00A1               	movwf	getAll_Sw_KeyStatus@status
 12362                           
 12363                           ;Switch_B1.c: 302: return status;
 12364  1BEC  0821               	movf	getAll_Sw_KeyStatus@status,w
 12365  1BED  0008               	return
 12366  1BEE                     __end_of_getAll_Sw_KeyStatus:	
 12367                           
 12368                           	psect	text78
 12369  0ADB                     __ptext78:	
 12370 ;; *************** function _Flash_Memory_Modify *****************
 12371 ;; Defined at:
 12372 ;;		line 1053 in file "../src/MCU_B1.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;		None
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  i               1    5[BANK0 ] unsigned char 
 12377 ;; Return value:  Size  Location     Type
 12378 ;;		None               void
 12379 ;; Registers used:
 12380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        2 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    7
 12393 ;; This function calls:
 12394 ;;		_Flash_Memory_Erasing
 12395 ;;		_Flash_Memory_Read
 12396 ;;		_Flash_Memory_Write
 12397 ;;		_setMemory_Data
 12398 ;; This function is called by:
 12399 ;;		_Flash_Memory_Main
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           
 12404                           ;psect for function _Flash_Memory_Modify
 12405  0ADB                     _Flash_Memory_Modify:	
 12406                           
 12407                           ;MCU_B1.c: 1054: char i = 0;
 12408                           
 12409                           ;incstack = 0
 12410                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12411  0ADB  0020               	movlb	0	; select bank0
 12412  0ADC  01A5               	clrf	Flash_Memory_Modify@i
 12413                           
 12414                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12415  0ADD  01A5               	clrf	Flash_Memory_Modify@i
 12416  0ADE  3020               	movlw	32
 12417  0ADF  0225               	subwf	Flash_Memory_Modify@i,w
 12418  0AE0  1803               	btfsc	3,0
 12419  0AE1  2AF7               	goto	l10143
 12420  0AE2                     l10137:	
 12421                           
 12422                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12423  0AE2  0825               	movf	Flash_Memory_Modify@i,w
 12424  0AE3  319D  25D0  318A   	fcall	_Flash_Memory_Read
 12425  0AE6  0020               	movlb	0	; select bank0
 12426  0AE7  00A4               	movwf	??_Flash_Memory_Modify
 12427  0AE8  0825               	movf	Flash_Memory_Modify@i,w
 12428  0AE9  3EBE               	addlw	_Memory& (0+255)
 12429  0AEA  0086               	movwf	6
 12430  0AEB  3001               	movlw	1	; select bank3/4
 12431  0AEC  0087               	movwf	7
 12432  0AED  0824               	movf	??_Flash_Memory_Modify,w
 12433  0AEE  0081               	movwf	1
 12434  0AEF  3001               	movlw	1
 12435  0AF0  00A4               	movwf	??_Flash_Memory_Modify
 12436  0AF1  0824               	movf	??_Flash_Memory_Modify,w
 12437  0AF2  07A5               	addwf	Flash_Memory_Modify@i,f
 12438  0AF3  3020               	movlw	32
 12439  0AF4  0225               	subwf	Flash_Memory_Modify@i,w
 12440  0AF5  1C03               	skipc
 12441  0AF6  2AE2               	goto	l10137
 12442  0AF7                     l10143:	
 12443                           
 12444                           ;MCU_B1.c: 1057: }
 12445                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12446  0AF7  0021               	movlb	1	; select bank1
 12447  0AF8  086C               	movf	_product^(0+128),w
 12448  0AF9  0086               	movwf	6
 12449  0AFA  3002               	movlw	2	; select bank4/5
 12450  0AFB  0087               	movwf	7
 12451  0AFC  3002               	movlw	2	; select bank4/5
 12452  0AFD  3F4C               	moviw [12]fsr1
 12453  0AFE  0020               	movlb	0	; select bank0
 12454  0AFF  00A0               	movwf	setMemory_Data@data
 12455  0B00  3000               	movlw	0
 12456  0B01  319B  2334  318A   	fcall	_setMemory_Data
 12457                           
 12458                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12459  0B04  0021               	movlb	1	; select bank1
 12460  0B05  086C               	movf	_product^(0+128),w
 12461  0B06  0086               	movwf	6
 12462  0B07  3002               	movlw	2	; select bank4/5
 12463  0B08  0087               	movwf	7
 12464  0B09  3002               	movlw	2	; select bank4/5
 12465  0B0A  3F4D               	moviw [13]fsr1
 12466  0B0B  0020               	movlb	0	; select bank0
 12467  0B0C  00A0               	movwf	setMemory_Data@data
 12468  0B0D  3001               	movlw	1
 12469  0B0E  319B  2334  318A   	fcall	_setMemory_Data
 12470                           
 12471                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12472  0B11  0021               	movlb	1	; select bank1
 12473  0B12  086C               	movf	_product^(0+128),w
 12474  0B13  0086               	movwf	6
 12475  0B14  3002               	movlw	2	; select bank4/5
 12476  0B15  0087               	movwf	7
 12477  0B16  3002               	movlw	2	; select bank4/5
 12478  0B17  3F4E               	moviw [14]fsr1
 12479  0B18  0020               	movlb	0	; select bank0
 12480  0B19  00A0               	movwf	setMemory_Data@data
 12481  0B1A  3002               	movlw	2
 12482  0B1B  319B  2334  318A   	fcall	_setMemory_Data
 12483                           
 12484                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12485  0B1E  0021               	movlb	1	; select bank1
 12486  0B1F  086C               	movf	_product^(0+128),w
 12487  0B20  0086               	movwf	6
 12488  0B21  3002               	movlw	2	; select bank4/5
 12489  0B22  0087               	movwf	7
 12490  0B23  3002               	movlw	2	; select bank4/5
 12491  0B24  3F55               	moviw [21]fsr1
 12492  0B25  0020               	movlb	0	; select bank0
 12493  0B26  00A0               	movwf	setMemory_Data@data
 12494  0B27  3003               	movlw	3
 12495  0B28  319B  2334  318A   	fcall	_setMemory_Data
 12496                           
 12497                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12498  0B2B  0021               	movlb	1	; select bank1
 12499  0B2C  086C               	movf	_product^(0+128),w
 12500  0B2D  0086               	movwf	6
 12501  0B2E  3002               	movlw	2	; select bank4/5
 12502  0B2F  0087               	movwf	7
 12503  0B30  3002               	movlw	2	; select bank4/5
 12504  0B31  3F56               	moviw [22]fsr1
 12505  0B32  0020               	movlb	0	; select bank0
 12506  0B33  00A0               	movwf	setMemory_Data@data
 12507  0B34  3004               	movlw	4
 12508  0B35  319B  2334  318A   	fcall	_setMemory_Data
 12509                           
 12510                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12511  0B38  0021               	movlb	1	; select bank1
 12512  0B39  086C               	movf	_product^(0+128),w
 12513  0B3A  0086               	movwf	6
 12514  0B3B  3002               	movlw	2	; select bank4/5
 12515  0B3C  0087               	movwf	7
 12516  0B3D  3002               	movlw	2	; select bank4/5
 12517  0B3E  3F57               	moviw [23]fsr1
 12518  0B3F  0020               	movlb	0	; select bank0
 12519  0B40  00A0               	movwf	setMemory_Data@data
 12520  0B41  3005               	movlw	5
 12521  0B42  319B  2334  318A   	fcall	_setMemory_Data
 12522                           
 12523                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12524  0B45  0021               	movlb	1	; select bank1
 12525  0B46  1EB9               	btfss	(_myMain^(0+128)+10),5
 12526  0B47  2B52               	goto	l10151
 12527                           
 12528                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12529  0B48  12B9               	bcf	(_myMain^(0+128)+10),5
 12530                           
 12531                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12532  0B49  30AA               	movlw	170
 12533  0B4A  0020               	movlb	0	; select bank0
 12534  0B4B  00A4               	movwf	??_Flash_Memory_Modify
 12535  0B4C  0824               	movf	??_Flash_Memory_Modify,w
 12536  0B4D  00A0               	movwf	setMemory_Data@data
 12537  0B4E  301E               	movlw	30
 12538  0B4F  319B  2334  318A   	fcall	_setMemory_Data
 12539  0B52                     l10151:	
 12540                           
 12541                           ;MCU_B1.c: 1068: }
 12542                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12543  0B52  0023               	movlb	3	; select bank3
 12544  0B53  1D62               	btfss	(_Memory^(0+384)+36),2
 12545  0B54  2B59               	goto	l1269
 12546                           
 12547                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12548  0B55  1162               	bcf	(_Memory^(0+384)+36),2
 12549                           
 12550                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12551  0B56  0021               	movlb	1	; select bank1
 12552  0B57  11AF               	bcf	_myMain^(0+128),3
 12553                           
 12554                           ;MCU_B1.c: 1073: myMain.First = 0;
 12555  0B58  12AF               	bcf	_myMain^(0+128),5
 12556  0B59                     l1269:	
 12557                           
 12558                           ;MCU_B1.c: 1075: }
 12559                           ;MCU_B1.c: 1076: GIE = 0;
 12560  0B59  138B               	bcf	11,7	;volatile
 12561                           
 12562                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12563  0B5A  319B  2340  318A   	fcall	_Flash_Memory_Erasing
 12564                           
 12565                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12566  0B5D  3190  203A         	fcall	_Flash_Memory_Write
 12567                           
 12568                           ;MCU_B1.c: 1079: GIE = 1;
 12569  0B5F  178B               	bsf	11,7	;volatile
 12570  0B60  0008               	return
 12571  0B61                     __end_of_Flash_Memory_Modify:	
 12572                           
 12573                           	psect	text79
 12574  1B40                     __ptext79:	
 12575 ;; *************** function _Flash_Memory_Erasing *****************
 12576 ;; Defined at:
 12577 ;;		line 1042 in file "../src/MCU_B1.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;		None               void
 12584 ;; Registers used:
 12585 ;;		wreg, status,2, status,0, pclath, cstack
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        0 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:    6
 12598 ;; This function calls:
 12599 ;;		_Flash_Memory_Unlock
 12600 ;; This function is called by:
 12601 ;;		_Flash_Memory_Modify
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           
 12606                           ;psect for function _Flash_Memory_Erasing
 12607  1B40                     _Flash_Memory_Erasing:	
 12608                           
 12609                           ;MCU_B1.c: 1043: CFGS = 0;
 12610                           
 12611                           ;incstack = 0
 12612                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12613  1B40  0023               	movlb	3	; select bank3
 12614  1B41  1315               	bcf	21,6	;volatile
 12615                           
 12616                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12617  1B42  3030               	movlw	48
 12618  1B43  0092               	movwf	18	;volatile
 12619                           
 12620                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12621  1B44  0191               	clrf	17	;volatile
 12622                           
 12623                           ;MCU_B1.c: 1046: FREE = 1;
 12624  1B45  1615               	bsf	21,4	;volatile
 12625                           
 12626                           ;MCU_B1.c: 1047: WREN = 1;
 12627  1B46  1515               	bsf	21,2	;volatile
 12628                           
 12629                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12630  1B47  319A  22A2         	fcall	_Flash_Memory_Unlock
 12631                           
 12632                           ;MCU_B1.c: 1049: WREN = 0;
 12633  1B49  0023               	movlb	3	; select bank3
 12634  1B4A  1115               	bcf	21,2	;volatile
 12635  1B4B  0008               	return
 12636  1B4C                     __end_of_Flash_Memory_Erasing:	
 12637                           
 12638                           	psect	text80
 12639  06D2                     __ptext80:	
 12640 ;; *************** function _Flash_Memory_Initialization *****************
 12641 ;; Defined at:
 12642 ;;		line 932 in file "../src/MCU_B1.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;		None
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  value           1    5[BANK0 ] unsigned char 
 12647 ;; Return value:  Size  Location     Type
 12648 ;;		None               void
 12649 ;; Registers used:
 12650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;Total ram usage:        2 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    7
 12663 ;; This function calls:
 12664 ;;		_Flash_Memory_Read
 12665 ;;		_Flash_Memory_Write
 12666 ;;		_setMemory_Data
 12667 ;; This function is called by:
 12668 ;;		_main
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           
 12673                           ;psect for function _Flash_Memory_Initialization
 12674  06D2                     _Flash_Memory_Initialization:	
 12675                           
 12676                           ;MCU_B1.c: 933: char value = 0;
 12677                           
 12678                           ;incstack = 0
 12679                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12680  06D2  0020               	movlb	0	; select bank0
 12681  06D3  01A5               	clrf	Flash_Memory_Initialization@value
 12682                           
 12683                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12684  06D4  301F               	movlw	31
 12685  06D5  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12686  06D8  3AAA               	xorlw	170
 12687  06D9  1D03               	skipz
 12688  06DA  2F54               	goto	l10533
 12689                           
 12690                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12691  06DB  3000               	movlw	0
 12692  06DC  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12693  06DF  0020               	movlb	0	; select bank0
 12694  06E0  00A4               	movwf	??_Flash_Memory_Initialization
 12695  06E1  0021               	movlb	1	; select bank1
 12696  06E2  086C               	movf	_product^(0+128),w
 12697  06E3  3E0C               	addlw	12
 12698  06E4  0086               	movwf	6
 12699  06E5  3002               	movlw	2	; select bank4/5
 12700  06E6  0087               	movwf	7
 12701  06E7  0020               	movlb	0	; select bank0
 12702  06E8  0824               	movf	??_Flash_Memory_Initialization,w
 12703  06E9  0081               	movwf	1
 12704                           
 12705                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12706  06EA  3001               	movlw	1
 12707  06EB  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12708  06EE  0020               	movlb	0	; select bank0
 12709  06EF  00A4               	movwf	??_Flash_Memory_Initialization
 12710  06F0  0021               	movlb	1	; select bank1
 12711  06F1  086C               	movf	_product^(0+128),w
 12712  06F2  3E0D               	addlw	13
 12713  06F3  0086               	movwf	6
 12714  06F4  3002               	movlw	2	; select bank4/5
 12715  06F5  0087               	movwf	7
 12716  06F6  0020               	movlb	0	; select bank0
 12717  06F7  0824               	movf	??_Flash_Memory_Initialization,w
 12718  06F8  0081               	movwf	1
 12719                           
 12720                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12721  06F9  3002               	movlw	2
 12722  06FA  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12723  06FD  0020               	movlb	0	; select bank0
 12724  06FE  00A4               	movwf	??_Flash_Memory_Initialization
 12725  06FF  0021               	movlb	1	; select bank1
 12726  0700  086C               	movf	_product^(0+128),w
 12727  0701  3E0E               	addlw	14
 12728  0702  0086               	movwf	6
 12729  0703  3002               	movlw	2	; select bank4/5
 12730  0704  0087               	movwf	7
 12731  0705  0020               	movlb	0	; select bank0
 12732  0706  0824               	movf	??_Flash_Memory_Initialization,w
 12733  0707  0081               	movwf	1
 12734                           
 12735                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12736  0708  3003               	movlw	3
 12737  0709  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12738  070C  0020               	movlb	0	; select bank0
 12739  070D  00A4               	movwf	??_Flash_Memory_Initialization
 12740  070E  0021               	movlb	1	; select bank1
 12741  070F  086C               	movf	_product^(0+128),w
 12742  0710  3E15               	addlw	21
 12743  0711  0086               	movwf	6
 12744  0712  3002               	movlw	2	; select bank4/5
 12745  0713  0087               	movwf	7
 12746  0714  0020               	movlb	0	; select bank0
 12747  0715  0824               	movf	??_Flash_Memory_Initialization,w
 12748  0716  0081               	movwf	1
 12749                           
 12750                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12751  0717  3004               	movlw	4
 12752  0718  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12753  071B  0020               	movlb	0	; select bank0
 12754  071C  00A4               	movwf	??_Flash_Memory_Initialization
 12755  071D  0021               	movlb	1	; select bank1
 12756  071E  086C               	movf	_product^(0+128),w
 12757  071F  3E16               	addlw	22
 12758  0720  0086               	movwf	6
 12759  0721  3002               	movlw	2	; select bank4/5
 12760  0722  0087               	movwf	7
 12761  0723  0020               	movlb	0	; select bank0
 12762  0724  0824               	movf	??_Flash_Memory_Initialization,w
 12763  0725  0081               	movwf	1
 12764                           
 12765                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12766  0726  3005               	movlw	5
 12767  0727  319D  25D0  3186   	fcall	_Flash_Memory_Read
 12768  072A  0020               	movlb	0	; select bank0
 12769  072B  00A4               	movwf	??_Flash_Memory_Initialization
 12770  072C  0021               	movlb	1	; select bank1
 12771  072D  086C               	movf	_product^(0+128),w
 12772  072E  3E17               	addlw	23
 12773  072F  0086               	movwf	6
 12774  0730  3002               	movlw	2	; select bank4/5
 12775  0731  0087               	movwf	7
 12776  0732  0020               	movlb	0	; select bank0
 12777  0733  0824               	movf	??_Flash_Memory_Initialization,w
 12778  0734  0081               	movwf	1
 12779                           
 12780                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12781  0735  0021               	movlb	1	; select bank1
 12782  0736  086C               	movf	_product^(0+128),w
 12783  0737  3E0C               	addlw	12
 12784  0738  0086               	movwf	6
 12785  0739  3002               	movlw	2	; select bank4/5
 12786  073A  0087               	movwf	7
 12787  073B  0801               	movf	1,w
 12788  073C  3AFF               	xorlw	255
 12789  073D  1D03               	skipz
 12790  073E  0008               	return
 12791  073F  086C               	movf	_product^(0+128),w
 12792  0740  3E0D               	addlw	13
 12793  0741  0086               	movwf	6
 12794  0742  3002               	movlw	2	; select bank4/5
 12795  0743  0087               	movwf	7
 12796  0744  0801               	movf	1,w
 12797  0745  3AFF               	xorlw	255
 12798  0746  1D03               	skipz
 12799  0747  0008               	return
 12800  0748  086C               	movf	_product^(0+128),w
 12801  0749  3E0E               	addlw	14
 12802  074A  0086               	movwf	6
 12803  074B  3002               	movlw	2	; select bank4/5
 12804  074C  0087               	movwf	7
 12805  074D  0801               	movf	1,w
 12806  074E  3AFF               	xorlw	255
 12807  074F  1D03               	skipz
 12808  0750  0008               	return
 12809                           
 12810                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12811  0751  15AF               	bsf	_myMain^(0+128),3
 12812                           
 12813                           ;MCU_B1.c: 951: myMain.First = 1;
 12814  0752  16AF               	bsf	_myMain^(0+128),5
 12815                           
 12816                           ;MCU_B1.c: 952: }
 12817                           ;MCU_B1.c: 953: } else {
 12818  0753  0008               	return
 12819  0754                     l10533:	
 12820                           
 12821                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12822  0754  30FF               	movlw	255
 12823  0755  0020               	movlb	0	; select bank0
 12824  0756  00A4               	movwf	??_Flash_Memory_Initialization
 12825  0757  0824               	movf	??_Flash_Memory_Initialization,w
 12826  0758  00A0               	movwf	setMemory_Data@data
 12827  0759  3000               	movlw	0
 12828  075A  319B  2334  3186   	fcall	_setMemory_Data
 12829                           
 12830                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12831  075D  30FF               	movlw	255
 12832  075E  0020               	movlb	0	; select bank0
 12833  075F  00A4               	movwf	??_Flash_Memory_Initialization
 12834  0760  0824               	movf	??_Flash_Memory_Initialization,w
 12835  0761  00A0               	movwf	setMemory_Data@data
 12836  0762  3001               	movlw	1
 12837  0763  319B  2334  3186   	fcall	_setMemory_Data
 12838                           
 12839                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12840  0766  30FF               	movlw	255
 12841  0767  0020               	movlb	0	; select bank0
 12842  0768  00A4               	movwf	??_Flash_Memory_Initialization
 12843  0769  0824               	movf	??_Flash_Memory_Initialization,w
 12844  076A  00A0               	movwf	setMemory_Data@data
 12845  076B  3002               	movlw	2
 12846  076C  319B  2334  3186   	fcall	_setMemory_Data
 12847                           
 12848                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12849  076F  30FF               	movlw	255
 12850  0770  0020               	movlb	0	; select bank0
 12851  0771  00A4               	movwf	??_Flash_Memory_Initialization
 12852  0772  0824               	movf	??_Flash_Memory_Initialization,w
 12853  0773  00A0               	movwf	setMemory_Data@data
 12854  0774  3003               	movlw	3
 12855  0775  319B  2334  3186   	fcall	_setMemory_Data
 12856                           
 12857                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12858  0778  30FF               	movlw	255
 12859  0779  0020               	movlb	0	; select bank0
 12860  077A  00A4               	movwf	??_Flash_Memory_Initialization
 12861  077B  0824               	movf	??_Flash_Memory_Initialization,w
 12862  077C  00A0               	movwf	setMemory_Data@data
 12863  077D  3004               	movlw	4
 12864  077E  319B  2334  3186   	fcall	_setMemory_Data
 12865                           
 12866                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12867  0781  30FF               	movlw	255
 12868  0782  0020               	movlb	0	; select bank0
 12869  0783  00A4               	movwf	??_Flash_Memory_Initialization
 12870  0784  0824               	movf	??_Flash_Memory_Initialization,w
 12871  0785  00A0               	movwf	setMemory_Data@data
 12872  0786  3005               	movlw	5
 12873  0787  319B  2334  3186   	fcall	_setMemory_Data
 12874                           
 12875                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12876  078A  30AA               	movlw	170
 12877  078B  0020               	movlb	0	; select bank0
 12878  078C  00A4               	movwf	??_Flash_Memory_Initialization
 12879  078D  0824               	movf	??_Flash_Memory_Initialization,w
 12880  078E  00A0               	movwf	setMemory_Data@data
 12881  078F  301F               	movlw	31
 12882  0790  319B  2334  3186   	fcall	_setMemory_Data
 12883                           
 12884                           ;MCU_B1.c: 966: GIE = 0;
 12885  0793  138B               	bcf	11,7	;volatile
 12886                           
 12887                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12888  0794  3190  203A         	fcall	_Flash_Memory_Write
 12889                           
 12890                           ;MCU_B1.c: 968: GIE = 1;
 12891  0796  178B               	bsf	11,7	;volatile
 12892                           
 12893                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12894  0797  0021               	movlb	1	; select bank1
 12895  0798  15AF               	bsf	_myMain^(0+128),3
 12896                           
 12897                           ;MCU_B1.c: 970: myMain.First = 1;
 12898  0799  16AF               	bsf	_myMain^(0+128),5
 12899                           
 12900                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12901  079A  1639               	bsf	(_myMain^(0+128)+10),4
 12902  079B  0008               	return
 12903  079C                     __end_of_Flash_Memory_Initialization:	
 12904                           
 12905                           	psect	text81
 12906  1B34                     __ptext81:	
 12907 ;; *************** function _setMemory_Data *****************
 12908 ;; Defined at:
 12909 ;;		line 1094 in file "../src/MCU_B1.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;  address         1    wreg     unsigned char 
 12912 ;;  data            1    0[BANK0 ] unsigned char 
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;  address         1    2[BANK0 ] unsigned char 
 12915 ;; Return value:  Size  Location     Type
 12916 ;;		None               void
 12917 ;; Registers used:
 12918 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12924 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;Total ram usage:        3 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    5
 12931 ;; This function calls:
 12932 ;;		Nothing
 12933 ;; This function is called by:
 12934 ;;		_Flash_Memory_Initialization
 12935 ;;		_Flash_Memory_Modify
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           
 12940                           ;psect for function _setMemory_Data
 12941  1B34                     _setMemory_Data:	
 12942                           
 12943                           ;incstack = 0
 12944                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12945                           ;setMemory_Data@address stored from wreg
 12946  1B34  0020               	movlb	0	; select bank0
 12947  1B35  00A2               	movwf	setMemory_Data@address
 12948                           
 12949                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12950  1B36  0820               	movf	setMemory_Data@data,w
 12951  1B37  00A1               	movwf	??_setMemory_Data
 12952  1B38  0822               	movf	setMemory_Data@address,w
 12953  1B39  3EBE               	addlw	_Memory& (0+255)
 12954  1B3A  0086               	movwf	6
 12955  1B3B  3001               	movlw	1	; select bank3/4
 12956  1B3C  0087               	movwf	7
 12957  1B3D  0821               	movf	??_setMemory_Data,w
 12958  1B3E  0081               	movwf	1
 12959  1B3F  0008               	return
 12960  1B40                     __end_of_setMemory_Data:	
 12961                           
 12962                           	psect	text82
 12963  103A                     __ptext82:	
 12964 ;; *************** function _Flash_Memory_Write *****************
 12965 ;; Defined at:
 12966 ;;		line 1023 in file "../src/MCU_B1.c"
 12967 ;; Parameters:    Size  Location     Type
 12968 ;;		None
 12969 ;; Auto vars:     Size  Location     Type
 12970 ;;  i               1    1[BANK0 ] unsigned char 
 12971 ;; Return value:  Size  Location     Type
 12972 ;;		None               void
 12973 ;; Registers used:
 12974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12975 ;; Tracked objects:
 12976 ;;		On entry : 0/0
 12977 ;;		On exit  : 0/0
 12978 ;;		Unchanged: 0/0
 12979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;Total ram usage:        2 bytes
 12985 ;; Hardware stack levels used:    1
 12986 ;; Hardware stack levels required when called:    6
 12987 ;; This function calls:
 12988 ;;		_Flash_Memory_Unlock
 12989 ;; This function is called by:
 12990 ;;		_Flash_Memory_Initialization
 12991 ;;		_Flash_Memory_Modify
 12992 ;; This function uses a non-reentrant model
 12993 ;;
 12994                           
 12995                           
 12996                           ;psect for function _Flash_Memory_Write
 12997  103A                     _Flash_Memory_Write:	
 12998                           
 12999                           ;MCU_B1.c: 1024: char i = 0;
 13000                           
 13001                           ;incstack = 0
 13002                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13003  103A  0020               	movlb	0	; select bank0
 13004  103B  01A1               	clrf	Flash_Memory_Write@i
 13005                           
 13006                           ;MCU_B1.c: 1025: CFGS = 0;
 13007  103C  0023               	movlb	3	; select bank3
 13008  103D  1315               	bcf	21,6	;volatile
 13009                           
 13010                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13011  103E  3030               	movlw	48
 13012  103F  0092               	movwf	18	;volatile
 13013                           
 13014                           ;MCU_B1.c: 1027: PMDATH = 0;
 13015  1040  0194               	clrf	20	;volatile
 13016                           
 13017                           ;MCU_B1.c: 1028: FREE = 0;
 13018  1041  1215               	bcf	21,4	;volatile
 13019                           
 13020                           ;MCU_B1.c: 1029: LWLO = 1;
 13021  1042  1695               	bsf	21,5	;volatile
 13022                           
 13023                           ;MCU_B1.c: 1030: WREN = 1;
 13024  1043  1515               	bsf	21,2	;volatile
 13025                           
 13026                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13027  1044  0020               	movlb	0	; select bank0
 13028  1045  01A1               	clrf	Flash_Memory_Write@i
 13029  1046  3020               	movlw	32
 13030  1047  0221               	subwf	Flash_Memory_Write@i,w
 13031  1048  1803               	btfsc	3,0
 13032  1049  2862               	goto	l1259
 13033  104A                     l9707:	
 13034                           
 13035                           ;MCU_B1.c: 1032: PMADRL = i;
 13036  104A  0821               	movf	Flash_Memory_Write@i,w
 13037  104B  0023               	movlb	3	; select bank3
 13038  104C  0091               	movwf	17	;volatile
 13039                           
 13040                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13041  104D  0020               	movlb	0	; select bank0
 13042  104E  0821               	movf	Flash_Memory_Write@i,w
 13043  104F  3EBE               	addlw	_Memory& (0+255)
 13044  1050  0086               	movwf	6
 13045  1051  3001               	movlw	1	; select bank3/4
 13046  1052  0087               	movwf	7
 13047  1053  0801               	movf	1,w
 13048  1054  0023               	movlb	3	; select bank3
 13049  1055  0093               	movwf	19	;volatile
 13050                           
 13051                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13052  1056  319A  22A2  3190   	fcall	_Flash_Memory_Unlock
 13053  1059  3001               	movlw	1
 13054  105A  0020               	movlb	0	; select bank0
 13055  105B  00A0               	movwf	??_Flash_Memory_Write
 13056  105C  0820               	movf	??_Flash_Memory_Write,w
 13057  105D  07A1               	addwf	Flash_Memory_Write@i,f
 13058  105E  3020               	movlw	32
 13059  105F  0221               	subwf	Flash_Memory_Write@i,w
 13060  1060  1C03               	skipc
 13061  1061  284A               	goto	l9707
 13062  1062                     l1259:	
 13063                           
 13064                           ;MCU_B1.c: 1035: }
 13065                           ;MCU_B1.c: 1036: LWLO = 0;
 13066  1062  0023               	movlb	3	; select bank3
 13067  1063  1295               	bcf	21,5	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13070  1064  319A  22A2         	fcall	_Flash_Memory_Unlock
 13071                           
 13072                           ;MCU_B1.c: 1038: WREN = 0;
 13073  1066  0023               	movlb	3	; select bank3
 13074  1067  1115               	bcf	21,2	;volatile
 13075  1068  0008               	return
 13076  1069                     __end_of_Flash_Memory_Write:	
 13077                           
 13078                           	psect	text83
 13079  1AA2                     __ptext83:	
 13080 ;; *************** function _Flash_Memory_Unlock *****************
 13081 ;; Defined at:
 13082 ;;		line 1002 in file "../src/MCU_B1.c"
 13083 ;; Parameters:    Size  Location     Type
 13084 ;;		None
 13085 ;; Auto vars:     Size  Location     Type
 13086 ;;		None
 13087 ;; Return value:  Size  Location     Type
 13088 ;;		None               void
 13089 ;; Registers used:
 13090 ;;		wreg
 13091 ;; Tracked objects:
 13092 ;;		On entry : 0/0
 13093 ;;		On exit  : 0/0
 13094 ;;		Unchanged: 0/0
 13095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13100 ;;Total ram usage:        0 bytes
 13101 ;; Hardware stack levels used:    1
 13102 ;; Hardware stack levels required when called:    5
 13103 ;; This function calls:
 13104 ;;		Nothing
 13105 ;; This function is called by:
 13106 ;;		_Flash_Memory_Write
 13107 ;;		_Flash_Memory_Erasing
 13108 ;; This function uses a non-reentrant model
 13109 ;;
 13110                           
 13111                           
 13112                           ;psect for function _Flash_Memory_Unlock
 13113  1AA2                     _Flash_Memory_Unlock:	
 13114                           
 13115                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13116                           
 13117                           ;incstack = 0
 13118                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13119  1AA2  3055               	movlw	85
 13120  1AA3  0023               	movlb	3	; select bank3
 13121  1AA4  0096               	movwf	22	;volatile
 13122                           
 13123                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13124  1AA5  30AA               	movlw	170
 13125  1AA6  0096               	movwf	22	;volatile
 13126                           
 13127                           ;MCU_B1.c: 1005: WR = 1;
 13128  1AA7  1495               	bsf	21,1	;volatile
 13129                           
 13130                           ;MCU_B1.c: 1006: __nop();
 13131  1AA8  0000               	nop
 13132                           
 13133                           ;MCU_B1.c: 1007: __nop();
 13134  1AA9  0000               	nop
 13135  1AAA  0008               	return
 13136  1AAB                     __end_of_Flash_Memory_Unlock:	
 13137                           
 13138                           	psect	text84
 13139  1DD0                     __ptext84:	
 13140 ;; *************** function _Flash_Memory_Read *****************
 13141 ;; Defined at:
 13142 ;;		line 1011 in file "../src/MCU_B1.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;  address         1    wreg     unsigned char 
 13145 ;; Auto vars:     Size  Location     Type
 13146 ;;  address         1    2[BANK0 ] unsigned char 
 13147 ;;  ret             1    3[BANK0 ] unsigned char 
 13148 ;;  i               1    1[BANK0 ] unsigned char 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      unsigned char 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;Total ram usage:        4 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    5
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		_Flash_Memory_Initialization
 13169 ;;		_Flash_Memory_Modify
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _Flash_Memory_Read
 13175  1DD0                     _Flash_Memory_Read:	
 13176                           
 13177                           ;incstack = 0
 13178                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13179                           ;Flash_Memory_Read@address stored from wreg
 13180  1DD0  0020               	movlb	0	; select bank0
 13181  1DD1  00A2               	movwf	Flash_Memory_Read@address
 13182                           
 13183                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13184  1DD2  01A1               	clrf	Flash_Memory_Read@i
 13185  1DD3  01A3               	clrf	Flash_Memory_Read@ret
 13186                           
 13187                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13188  1DD4  3030               	movlw	48
 13189  1DD5  0023               	movlb	3	; select bank3
 13190  1DD6  0092               	movwf	18	;volatile
 13191                           
 13192                           ;MCU_B1.c: 1014: PMADRL = address;
 13193  1DD7  0020               	movlb	0	; select bank0
 13194  1DD8  0822               	movf	Flash_Memory_Read@address,w
 13195  1DD9  0023               	movlb	3	; select bank3
 13196  1DDA  0091               	movwf	17	;volatile
 13197                           
 13198                           ;MCU_B1.c: 1015: CFGS = 0;
 13199  1DDB  1315               	bcf	21,6	;volatile
 13200                           
 13201                           ;MCU_B1.c: 1016: RD = 1;
 13202  1DDC  1415               	bsf	21,0	;volatile
 13203                           
 13204                           ;MCU_B1.c: 1017: i = PMDATH;
 13205  1DDD  0814               	movf	20,w	;volatile
 13206  1DDE  0020               	movlb	0	; select bank0
 13207  1DDF  00A0               	movwf	??_Flash_Memory_Read
 13208  1DE0  0820               	movf	??_Flash_Memory_Read,w
 13209  1DE1  00A1               	movwf	Flash_Memory_Read@i
 13210                           
 13211                           ;MCU_B1.c: 1018: ret = PMDATL;
 13212  1DE2  0023               	movlb	3	; select bank3
 13213  1DE3  0813               	movf	19,w	;volatile
 13214  1DE4  0020               	movlb	0	; select bank0
 13215  1DE5  00A0               	movwf	??_Flash_Memory_Read
 13216  1DE6  0820               	movf	??_Flash_Memory_Read,w
 13217  1DE7  00A3               	movwf	Flash_Memory_Read@ret
 13218                           
 13219                           ;MCU_B1.c: 1019: return ret;
 13220  1DE8  0823               	movf	Flash_Memory_Read@ret,w
 13221  1DE9  0008               	return
 13222  1DEA                     __end_of_Flash_Memory_Read:	
 13223                           
 13224                           	psect	text85
 13225  05FD                     __ptext85:	
 13226 ;; *************** function _Exception_Main *****************
 13227 ;; Defined at:
 13228 ;;		line 499 in file "../src/Main_B1.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;		None
 13231 ;; Auto vars:     Size  Location     Type
 13232 ;;  i               2   19[BANK0 ] int 
 13233 ;;  i               2   17[BANK0 ] int 
 13234 ;;  lights          1   21[BANK0 ] unsigned char 
 13235 ;;  error           1   16[BANK0 ] unsigned char 
 13236 ;;  count           1   15[BANK0 ] unsigned char 
 13237 ;;  status          1   14[BANK0 ] unsigned char 
 13238 ;; Return value:  Size  Location     Type
 13239 ;;		None               void
 13240 ;; Registers used:
 13241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;Total ram usage:        9 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:    7
 13254 ;; This function calls:
 13255 ;;		_getDimmerLights_Line
 13256 ;;		_getDimmerLights_Status
 13257 ;;		_getMain_All_Error_Status
 13258 ;;		_getMain_All_LightsStatus
 13259 ;;		_setBuz
 13260 ;;		_setDimmerLights_SwOff
 13261 ;;		_setLED
 13262 ;; This function is called by:
 13263 ;;		_main
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _Exception_Main
 13269  05FD                     _Exception_Main:	
 13270                           
 13271                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13272                           
 13273                           ;incstack = 0
 13274                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13275  05FD  3000               	movlw	0
 13276  05FE  3190  209A  3185   	fcall	_getMain_All_Error_Status
 13277  0601  0020               	movlb	0	; select bank0
 13278  0602  00AD               	movwf	??_Exception_Main
 13279  0603  082D               	movf	??_Exception_Main,w
 13280  0604  00B0               	movwf	Exception_Main@error
 13281                           
 13282                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13283  0605  01B5               	clrf	Exception_Main@lights
 13284  0606  01AF               	clrf	Exception_Main@count
 13285  0607  0AAF               	incf	Exception_Main@count,f
 13286                           
 13287                           ;Main_B1.c: 502: char status = 0;
 13288  0608  01AE               	clrf	Exception_Main@status
 13289                           
 13290                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13291  0609  0021               	movlb	1	; select bank1
 13292  060A  1DB9               	btfss	(_myMain^(0+128)+10),3
 13293  060B  2E1B               	goto	l10891
 13294                           
 13295                           ;Main_B1.c: 505: if (error == 0) {
 13296  060C  0020               	movlb	0	; select bank0
 13297  060D  08B0               	movf	Exception_Main@error,f
 13298  060E  1D03               	skipz
 13299  060F  0008               	return
 13300                           
 13301                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13302  0610  0021               	movlb	1	; select bank1
 13303  0611  11B9               	bcf	(_myMain^(0+128)+10),3
 13304                           
 13305                           ;Main_B1.c: 509: setLED(99, 10);
 13306  0612  300A               	movlw	10
 13307  0613  0020               	movlb	0	; select bank0
 13308  0614  00AD               	movwf	??_Exception_Main
 13309  0615  082D               	movf	??_Exception_Main,w
 13310  0616  00A2               	movwf	setLED@command
 13311  0617  3063               	movlw	99
 13312  0618  3191  21DC         	fcall	_setLED
 13313                           
 13314                           ;Main_B1.c: 522: }
 13315                           ;Main_B1.c: 523: } else {
 13316  061A  0008               	return
 13317  061B                     l10891:	
 13318                           
 13319                           ;Main_B1.c: 524: if (error != 0) {
 13320  061B  0020               	movlb	0	; select bank0
 13321  061C  0830               	movf	Exception_Main@error,w
 13322  061D  1903               	btfsc	3,2
 13323  061E  0008               	return
 13324                           
 13325                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13326  061F  0021               	movlb	1	; select bank1
 13327  0620  15B9               	bsf	(_myMain^(0+128)+10),3
 13328                           
 13329                           ;Main_B1.c: 527: setLED(99, 11);
 13330  0621  300B               	movlw	11
 13331  0622  0020               	movlb	0	; select bank0
 13332  0623  00AD               	movwf	??_Exception_Main
 13333  0624  082D               	movf	??_Exception_Main,w
 13334  0625  00A2               	movwf	setLED@command
 13335  0626  3063               	movlw	99
 13336  0627  3191  21DC  3185   	fcall	_setLED
 13337                           
 13338                           ;Main_B1.c: 538: switch (error) {
 13339  062A  2EC7               	goto	l10939
 13340  062B                     l10897:	
 13341                           ;Main_B1.c: 539: case 2:
 13342                           
 13343                           
 13344                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13345  062B  319A  22AB  3185   	fcall	_getMain_All_LightsStatus
 13346  062E  3A01               	xorlw	1
 13347  062F  1D03               	skipz
 13348  0630  2E3A               	goto	l10901
 13349                           
 13350                           ;Main_B1.c: 547: setBuz(10, 300);
 13351  0631  302C               	movlw	44
 13352  0632  0020               	movlb	0	; select bank0
 13353  0633  00A9               	movwf	setBuz@time
 13354  0634  3001               	movlw	1
 13355  0635  00AA               	movwf	setBuz@time+1
 13356  0636  300A               	movlw	10
 13357  0637  3194  2489  3185   	fcall	_setBuz
 13358  063A                     l10901:	
 13359                           
 13360                           ;Main_B1.c: 548: }
 13361                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13362  063A  0020               	movlb	0	; select bank0
 13363  063B  01B1               	clrf	Exception_Main@i
 13364  063C  01B2               	clrf	Exception_Main@i+1
 13365  063D                     l10911:	
 13366  063D  0832               	movf	Exception_Main@i+1,w
 13367  063E  3A80               	xorlw	128
 13368  063F  00AD               	movwf	??_Exception_Main
 13369  0640  3080               	movlw	128
 13370  0641  022D               	subwf	??_Exception_Main,w
 13371  0642  1D03               	skipz
 13372  0643  2E46               	goto	u12685
 13373  0644  082F               	movf	Exception_Main@count,w
 13374  0645  0231               	subwf	Exception_Main@i,w
 13375  0646                     u12685:	
 13376  0646  1803               	btfsc	3,0
 13377  0647  2E68               	goto	u12680
 13378                           
 13379                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13380  0648  0020               	movlb	0	; select bank0
 13381  0649  0831               	movf	Exception_Main@i,w
 13382  064A  3E01               	addlw	1
 13383  064B  319B  23AA  3185   	fcall	_getDimmerLights_Status
 13384  064E  3A01               	xorlw	1
 13385  064F  1D03               	skipz
 13386  0650  2E62               	goto	l10909
 13387                           
 13388                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13389  0651  0021               	movlb	1	; select bank1
 13390  0652  084E               	movf	_DimmerLights^(0+128),w
 13391  0653  0086               	movwf	6
 13392  0654  3001               	movlw	1	; select bank2/3
 13393  0655  0087               	movwf	7
 13394  0656  1401               	bsf	1,0
 13395                           
 13396                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13397  0657  0A4E               	incf	_DimmerLights^(0+128),w
 13398  0658  0086               	movwf	6
 13399  0659  3001               	movlw	1	; select bank2/3
 13400  065A  0087               	movwf	7
 13401  065B  1001               	bcf	1,0
 13402                           
 13403                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13404  065C  0020               	movlb	0	; select bank0
 13405  065D  0831               	movf	Exception_Main@i,w
 13406  065E  3E01               	addlw	1
 13407  065F  3191  21A3  3185   	fcall	_setDimmerLights_SwOff
 13408  0662                     l10909:	
 13409  0662  3001               	movlw	1
 13410  0663  0020               	movlb	0	; select bank0
 13411  0664  07B1               	addwf	Exception_Main@i,f
 13412  0665  3000               	movlw	0
 13413  0666  3DB2               	addwfc	Exception_Main@i+1,f
 13414  0667  2E3D               	goto	l10911
 13415  0668                     u12680:	
 13416  0668  0020               	movlb	0	; select bank0
 13417  0669  0008               	return
 13418  066A                     l10913:	
 13419                           ;Main_B1.c: 561: case 3:
 13420                           
 13421                           ;Main_B1.c: 556: }
 13422                           ;Main_B1.c: 557: }
 13423                           ;Main_B1.c: 560: break;
 13424                           
 13425                           
 13426                           ;Main_B1.c: 563: setBuz(5, 300);
 13427  066A  302C               	movlw	44
 13428  066B  0020               	movlb	0	; select bank0
 13429  066C  00A9               	movwf	setBuz@time
 13430  066D  3001               	movlw	1
 13431  066E  00AA               	movwf	setBuz@time+1
 13432  066F  3005               	movlw	5
 13433  0670  3194  2489  3185   	fcall	_setBuz
 13434                           
 13435                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13436  0673  319A  22B5  3185   	fcall	_getDimmerLights_Line
 13437  0676  0020               	movlb	0	; select bank0
 13438  0677  00AD               	movwf	??_Exception_Main
 13439  0678  082D               	movf	??_Exception_Main,w
 13440  0679  00B5               	movwf	Exception_Main@lights
 13441                           
 13442                           ;Main_B1.c: 565: if (lights == 0) {
 13443  067A  08B5               	movf	Exception_Main@lights,f
 13444  067B  1D03               	skipz
 13445  067C  2EAC               	goto	l10931
 13446                           
 13447                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13448  067D  01B3               	clrf	Exception_Main@i_3630
 13449  067E  01B4               	clrf	Exception_Main@i_3630+1
 13450  067F                     l10929:	
 13451  067F  0834               	movf	Exception_Main@i_3630+1,w
 13452  0680  3A80               	xorlw	128
 13453  0681  00AD               	movwf	??_Exception_Main
 13454  0682  3080               	movlw	128
 13455  0683  022D               	subwf	??_Exception_Main,w
 13456  0684  1D03               	skipz
 13457  0685  2E88               	goto	u12715
 13458  0686  082F               	movf	Exception_Main@count,w
 13459  0687  0233               	subwf	Exception_Main@i_3630,w
 13460  0688                     u12715:	
 13461  0688  1803               	btfsc	3,0
 13462  0689  2EAA               	goto	u12710
 13463                           
 13464                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13465  068A  0020               	movlb	0	; select bank0
 13466  068B  0833               	movf	Exception_Main@i_3630,w
 13467  068C  3E01               	addlw	1
 13468  068D  319B  23AA  3185   	fcall	_getDimmerLights_Status
 13469  0690  3A01               	xorlw	1
 13470  0691  1D03               	skipz
 13471  0692  2EA4               	goto	l10927
 13472                           
 13473                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13474  0693  0021               	movlb	1	; select bank1
 13475  0694  084E               	movf	_DimmerLights^(0+128),w
 13476  0695  0086               	movwf	6
 13477  0696  3001               	movlw	1	; select bank2/3
 13478  0697  0087               	movwf	7
 13479  0698  1401               	bsf	1,0
 13480                           
 13481                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13482  0699  0A4E               	incf	_DimmerLights^(0+128),w
 13483  069A  0086               	movwf	6
 13484  069B  3001               	movlw	1	; select bank2/3
 13485  069C  0087               	movwf	7
 13486  069D  1001               	bcf	1,0
 13487                           
 13488                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13489  069E  0020               	movlb	0	; select bank0
 13490  069F  0833               	movf	Exception_Main@i_3630,w
 13491  06A0  3E01               	addlw	1
 13492  06A1  3191  21A3  3185   	fcall	_setDimmerLights_SwOff
 13493  06A4                     l10927:	
 13494  06A4  3001               	movlw	1
 13495  06A5  0020               	movlb	0	; select bank0
 13496  06A6  07B3               	addwf	Exception_Main@i_3630,f
 13497  06A7  3000               	movlw	0
 13498  06A8  3DB4               	addwfc	Exception_Main@i_3630+1,f
 13499  06A9  2E7F               	goto	l10929
 13500  06AA                     u12710:	
 13501  06AA  0020               	movlb	0	; select bank0
 13502  06AB  0008               	return
 13503  06AC                     l10931:	
 13504                           ;Main_B1.c: 573: }
 13505                           ;Main_B1.c: 574: }
 13506                           ;Main_B1.c: 575: } else {
 13507                           
 13508                           
 13509                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13510  06AC  0020               	movlb	0	; select bank0
 13511  06AD  0835               	movf	Exception_Main@lights,w
 13512  06AE  319B  23AA  3185   	fcall	_getDimmerLights_Status
 13513  06B1  3A01               	xorlw	1
 13514  06B2  1903               	btfsc	3,2
 13515  06B3  2EB6               	goto	l10933
 13516  06B4  0020               	movlb	0	; select bank0
 13517  06B5  0008               	return
 13518  06B6                     l10933:	
 13519                           
 13520                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13521  06B6  0021               	movlb	1	; select bank1
 13522  06B7  084E               	movf	_DimmerLights^(0+128),w
 13523  06B8  0086               	movwf	6
 13524  06B9  3001               	movlw	1	; select bank2/3
 13525  06BA  0087               	movwf	7
 13526  06BB  1401               	bsf	1,0
 13527                           
 13528                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13529  06BC  0A4E               	incf	_DimmerLights^(0+128),w
 13530  06BD  0086               	movwf	6
 13531  06BE  3001               	movlw	1	; select bank2/3
 13532  06BF  0087               	movwf	7
 13533  06C0  1001               	bcf	1,0
 13534                           
 13535                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13536  06C1  0020               	movlb	0	; select bank0
 13537  06C2  0835               	movf	Exception_Main@lights,w
 13538  06C3  3191  21A3         	fcall	_setDimmerLights_SwOff
 13539  06C5  0020               	movlb	0	; select bank0
 13540  06C6  0008               	return
 13541  06C7                     l10939:	
 13542                           ;Main_B1.c: 586: }
 13543                           
 13544                           ;Main_B1.c: 582: }
 13545                           ;Main_B1.c: 583: }
 13546                           ;Main_B1.c: 585: break;
 13547                           
 13548  06C7  0020               	movlb	0	; select bank0
 13549  06C8  0830               	movf	Exception_Main@error,w
 13550                           
 13551                           ; Switch size 1, requested type "space"
 13552                           ; Number of cases is 2, Range of values is 2 to 3
 13553                           ; switch strategies available:
 13554                           ; Name         Instructions Cycles
 13555                           ; simple_byte            7     4 (average)
 13556                           ; direct_byte           13     9 (fixed)
 13557                           ; jumptable            263     9 (fixed)
 13558                           ;	Chosen strategy is simple_byte
 13559  06C9  3A02               	xorlw	2	; case 2
 13560  06CA  1903               	skipnz
 13561  06CB  2E2B               	goto	l10897
 13562  06CC  3A01               	xorlw	1	; case 3
 13563  06CD  1903               	skipnz
 13564  06CE  2E6A               	goto	l10913
 13565  06CF  2ED1               	goto	l1503
 13566  06D0  0008               	return
 13567  06D1                     l1503:	
 13568  06D1  0008               	return
 13569  06D2                     __end_of_Exception_Main:	
 13570                           
 13571                           	psect	text86
 13572  1AB5                     __ptext86:	
 13573 ;; *************** function _getDimmerLights_Line *****************
 13574 ;; Defined at:
 13575 ;;		line 1051 in file "../src/Dimmer_B1.c"
 13576 ;; Parameters:    Size  Location     Type
 13577 ;;		None
 13578 ;; Auto vars:     Size  Location     Type
 13579 ;;  line            1    0[BANK0 ] unsigned char 
 13580 ;; Return value:  Size  Location     Type
 13581 ;;                  1    wreg      unsigned char 
 13582 ;; Registers used:
 13583 ;;		wreg, status,2
 13584 ;; Tracked objects:
 13585 ;;		On entry : 0/0
 13586 ;;		On exit  : 0/0
 13587 ;;		Unchanged: 0/0
 13588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;Total ram usage:        1 bytes
 13594 ;; Hardware stack levels used:    1
 13595 ;; Hardware stack levels required when called:    5
 13596 ;; This function calls:
 13597 ;;		Nothing
 13598 ;; This function is called by:
 13599 ;;		_Exception_Main
 13600 ;; This function uses a non-reentrant model
 13601 ;;
 13602                           
 13603                           
 13604                           ;psect for function _getDimmerLights_Line
 13605  1AB5                     _getDimmerLights_Line:	
 13606                           
 13607                           ;Dimmer_B1.c: 1052: char line = 0;
 13608                           
 13609                           ;incstack = 0
 13610                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13611  1AB5  0020               	movlb	0	; select bank0
 13612  1AB6  01A0               	clrf	getDimmerLights_Line@line
 13613                           
 13614                           ;Dimmer_B1.c: 1054: if (DimmerLights1.Line == 1) {
 13615  1AB7  0022               	movlb	2	; select bank2
 13616  1AB8  1CDF               	btfss	(_DimmerLights1^(0+256)+1),1
 13617  1AB9  2ABD               	goto	l9941
 13618                           
 13619                           ;Dimmer_B1.c: 1055: line = 1;
 13620  1ABA  0020               	movlb	0	; select bank0
 13621  1ABB  01A0               	clrf	getDimmerLights_Line@line
 13622  1ABC  0AA0               	incf	getDimmerLights_Line@line,f
 13623  1ABD                     l9941:	
 13624                           
 13625                           ;Dimmer_B1.c: 1056: }
 13626                           ;Dimmer_B1.c: 1068: return line;
 13627  1ABD  0020               	movlb	0	; select bank0
 13628  1ABE  0820               	movf	getDimmerLights_Line@line,w
 13629  1ABF  0008               	return
 13630  1AC0                     __end_of_getDimmerLights_Line:	
 13631                           
 13632                           	psect	text87
 13633  1E39                     __ptext87:	
 13634 ;; *************** function _DimmerLights_Main *****************
 13635 ;; Defined at:
 13636 ;;		line 780 in file "../src/Dimmer_B1.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;		None
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;		None
 13641 ;; Return value:  Size  Location     Type
 13642 ;;		None               void
 13643 ;; Registers used:
 13644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        0 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:   10
 13657 ;; This function calls:
 13658 ;;		_getLoad_OK
 13659 ;;		_getMain_All_Error_Status
 13660 ;;		_getMain_All_LightsStatus
 13661 ;;		_setDimmerLights_Main
 13662 ;; This function is called by:
 13663 ;;		_main
 13664 ;; This function uses a non-reentrant model
 13665 ;;
 13666                           
 13667                           
 13668                           ;psect for function _DimmerLights_Main
 13669  1E39                     _DimmerLights_Main:	
 13670                           
 13671                           ;Dimmer_B1.c: 783: if (Dimmer.LoadGO == 1) {
 13672                           
 13673                           ;incstack = 0
 13674                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13675  1E39  0022               	movlb	2	; select bank2
 13676  1E3A  1CAC               	btfss	_Dimmer^(0+256),1
 13677  1E3B  2E51               	goto	l10495
 13678                           
 13679                           ;Dimmer_B1.c: 784: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13680  1E3C  319A  2278  319E   	fcall	_getLoad_OK
 13681  1E3F  3A01               	xorlw	1
 13682  1E40  1903               	skipnz
 13683  1E41  2E4F               	goto	l759
 13684  1E42  3000               	movlw	0
 13685  1E43  3190  209A  319E   	fcall	_getMain_All_Error_Status
 13686  1E46  3800               	iorlw	0
 13687  1E47  1D03               	skipz
 13688  1E48  2E4F               	goto	l759
 13689  1E49  319A  22AB  319E   	fcall	_getMain_All_LightsStatus
 13690  1E4C  3800               	iorlw	0
 13691  1E4D  1D03               	skipz
 13692  1E4E  2E51               	goto	l10495
 13693  1E4F                     l759:	
 13694                           
 13695                           ;Dimmer_B1.c: 785: Dimmer.LoadGO = 0;
 13696  1E4F  0022               	movlb	2	; select bank2
 13697  1E50  10AC               	bcf	_Dimmer^(0+256),1
 13698  1E51                     l10495:	
 13699                           
 13700                           ;Dimmer_B1.c: 786: }
 13701                           ;Dimmer_B1.c: 787: }
 13702                           ;Dimmer_B1.c: 791: setDimmerLights_Main(1);
 13703  1E51  3001               	movlw	1
 13704  1E52  3197  272A         	fcall	_setDimmerLights_Main
 13705  1E54  0008               	return
 13706  1E55                     __end_of_DimmerLights_Main:	
 13707                           
 13708                           	psect	text88
 13709  172A                     __ptext88:	
 13710 ;; *************** function _setDimmerLights_Main *****************
 13711 ;; Defined at:
 13712 ;;		line 809 in file "../src/Dimmer_B1.c"
 13713 ;; Parameters:    Size  Location     Type
 13714 ;;  lights          1    wreg     unsigned char 
 13715 ;; Auto vars:     Size  Location     Type
 13716 ;;  lights          1    1[BANK1 ] unsigned char 
 13717 ;; Return value:  Size  Location     Type
 13718 ;;		None               void
 13719 ;; Registers used:
 13720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13721 ;; Tracked objects:
 13722 ;;		On entry : 0/0
 13723 ;;		On exit  : 0/0
 13724 ;;		Unchanged: 0/0
 13725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;Total ram usage:        1 bytes
 13731 ;; Hardware stack levels used:    1
 13732 ;; Hardware stack levels required when called:    9
 13733 ;; This function calls:
 13734 ;;		_DimmerLights_SelectPointer
 13735 ;;		_getDimmerLights_Allow_Condition
 13736 ;;		_getMain_All_LightsStatus
 13737 ;;		_setDimmerLights_Dimming
 13738 ;;		_setDimmerLights_OnOff
 13739 ;; This function is called by:
 13740 ;;		_DimmerLights_Main
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _setDimmerLights_Main
 13746  172A                     _setDimmerLights_Main:	
 13747                           
 13748                           ;incstack = 0
 13749                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13750                           ;setDimmerLights_Main@lights stored from wreg
 13751  172A  0021               	movlb	1	; select bank1
 13752  172B  00E5               	movwf	setDimmerLights_Main@lights^(0+128)
 13753                           
 13754                           ;Dimmer_B1.c: 811: DimmerLights_SelectPointer(lights);
 13755  172C  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13756  172D  319A  22F8  3197   	fcall	_DimmerLights_SelectPointer
 13757                           
 13758                           ;Dimmer_B1.c: 812: if (DimmerLights->Trigger == 1) {
 13759  1730  0021               	movlb	1	; select bank1
 13760  1731  084E               	movf	_DimmerLights^(0+128),w
 13761  1732  0086               	movwf	6
 13762  1733  3001               	movlw	1	; select bank2/3
 13763  1734  0087               	movwf	7
 13764  1735  1C81               	btfss	1,1
 13765  1736  2F59               	goto	l9919
 13766                           
 13767                           ;Dimmer_B1.c: 813: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13768  1737  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13769  1738  319D  2542  3197   	fcall	_getDimmerLights_Allow_Condition
 13770  173B  3800               	iorlw	0
 13771  173C  1D03               	skipz
 13772  173D  0008               	return
 13773                           
 13774                           ;Dimmer_B1.c: 814: DimmerLights->Trigger = 0;
 13775  173E  0021               	movlb	1	; select bank1
 13776  173F  084E               	movf	_DimmerLights^(0+128),w
 13777  1740  0086               	movwf	6
 13778  1741  3001               	movlw	1	; select bank2/3
 13779  1742  0087               	movwf	7
 13780  1743  1081               	bcf	1,1
 13781                           
 13782                           ;Dimmer_B1.c: 815: if (DimmerLights->Switch == 1) {
 13783  1744  084E               	movf	_DimmerLights^(0+128),w
 13784  1745  0086               	movwf	6
 13785  1746  3001               	movlw	1	; select bank2/3
 13786  1747  0087               	movwf	7
 13787  1748  1D01               	btfss	1,2
 13788  1749  2F52               	goto	l9917
 13789                           
 13790                           ;Dimmer_B1.c: 816: setDimmerLights_OnOff(lights, 1);
 13791  174A  0020               	movlb	0	; select bank0
 13792  174B  01ED               	clrf	setDimmerLights_OnOff@command
 13793  174C  0AED               	incf	setDimmerLights_OnOff@command,f
 13794  174D  0021               	movlb	1	; select bank1
 13795  174E  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13796  174F  318F  273D         	fcall	_setDimmerLights_OnOff
 13797                           
 13798                           ;Dimmer_B1.c: 817: } else {
 13799  1751  0008               	return
 13800  1752                     l9917:	
 13801                           
 13802                           ;Dimmer_B1.c: 818: setDimmerLights_OnOff(lights, 0);
 13803  1752  0020               	movlb	0	; select bank0
 13804  1753  01ED               	clrf	setDimmerLights_OnOff@command
 13805  1754  0021               	movlb	1	; select bank1
 13806  1755  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13807  1756  318F  273D         	fcall	_setDimmerLights_OnOff
 13808                           
 13809                           ;Dimmer_B1.c: 819: }
 13810                           ;Dimmer_B1.c: 820: }
 13811                           ;Dimmer_B1.c: 821: } else {
 13812  1758  0008               	return
 13813  1759                     l9919:	
 13814                           
 13815                           ;Dimmer_B1.c: 822: if (getMain_All_LightsStatus() == 1) {
 13816  1759  319A  22AB  3197   	fcall	_getMain_All_LightsStatus
 13817  175C  3A01               	xorlw	1
 13818  175D  1D03               	skipz
 13819  175E  2F88               	goto	l9931
 13820                           
 13821                           ;Dimmer_B1.c: 823: if (DimmerLights->DimmingTrigger == 1) {
 13822  175F  0021               	movlb	1	; select bank1
 13823  1760  084E               	movf	_DimmerLights^(0+128),w
 13824  1761  0086               	movwf	6
 13825  1762  3001               	movlw	1	; select bank2/3
 13826  1763  0087               	movwf	7
 13827  1764  1E01               	btfss	1,4
 13828  1765  0008               	return
 13829                           
 13830                           ;Dimmer_B1.c: 824: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13831  1766  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13832  1767  319D  2542  3197   	fcall	_getDimmerLights_Allow_Condition
 13833  176A  3800               	iorlw	0
 13834  176B  1D03               	skipz
 13835  176C  0008               	return
 13836                           
 13837                           ;Dimmer_B1.c: 825: DimmerLights->DimmingTrigger = 0;
 13838  176D  0021               	movlb	1	; select bank1
 13839  176E  084E               	movf	_DimmerLights^(0+128),w
 13840  176F  0086               	movwf	6
 13841  1770  3001               	movlw	1	; select bank2/3
 13842  1771  0087               	movwf	7
 13843  1772  1201               	bcf	1,4
 13844                           
 13845                           ;Dimmer_B1.c: 826: if (DimmerLights->DimmingSwitch == 1) {
 13846  1773  084E               	movf	_DimmerLights^(0+128),w
 13847  1774  0086               	movwf	6
 13848  1775  3001               	movlw	1	; select bank2/3
 13849  1776  0087               	movwf	7
 13850  1777  1E81               	btfss	1,5
 13851  1778  2F81               	goto	l9929
 13852                           
 13853                           ;Dimmer_B1.c: 827: setDimmerLights_Dimming(lights, 1);
 13854  1779  0020               	movlb	0	; select bank0
 13855  177A  01EA               	clrf	setDimmerLights_Dimming@status
 13856  177B  0AEA               	incf	setDimmerLights_Dimming@status,f
 13857  177C  0021               	movlb	1	; select bank1
 13858  177D  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13859  177E  3194  2433         	fcall	_setDimmerLights_Dimming
 13860                           
 13861                           ;Dimmer_B1.c: 828: } else {
 13862  1780  0008               	return
 13863  1781                     l9929:	
 13864                           
 13865                           ;Dimmer_B1.c: 829: setDimmerLights_Dimming(lights, 0);
 13866  1781  0020               	movlb	0	; select bank0
 13867  1782  01EA               	clrf	setDimmerLights_Dimming@status
 13868  1783  0021               	movlb	1	; select bank1
 13869  1784  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13870  1785  3194  2433         	fcall	_setDimmerLights_Dimming
 13871                           
 13872                           ;Dimmer_B1.c: 830: }
 13873                           ;Dimmer_B1.c: 831: }
 13874                           ;Dimmer_B1.c: 832: }
 13875                           ;Dimmer_B1.c: 833: } else {
 13876  1787  0008               	return
 13877  1788                     l9931:	
 13878                           
 13879                           ;Dimmer_B1.c: 834: if (DimmerLights->DimmingTrigger == 1) {
 13880  1788  0021               	movlb	1	; select bank1
 13881  1789  084E               	movf	_DimmerLights^(0+128),w
 13882  178A  0086               	movwf	6
 13883  178B  3001               	movlw	1	; select bank2/3
 13884  178C  0087               	movwf	7
 13885  178D  1E01               	btfss	1,4
 13886  178E  0008               	return
 13887                           
 13888                           ;Dimmer_B1.c: 835: DimmerLights->DimmingTrigger = 0;
 13889  178F  084E               	movf	_DimmerLights^(0+128),w
 13890  1790  0086               	movwf	6
 13891  1791  3001               	movlw	1	; select bank2/3
 13892  1792  0087               	movwf	7
 13893  1793  1201               	bcf	1,4
 13894  1794  0008               	return
 13895  1795                     __end_of_setDimmerLights_Main:	
 13896                           
 13897                           	psect	text89
 13898  0F3D                     __ptext89:	
 13899 ;; *************** function _setDimmerLights_OnOff *****************
 13900 ;; Defined at:
 13901 ;;		line 843 in file "../src/Dimmer_B1.c"
 13902 ;; Parameters:    Size  Location     Type
 13903 ;;  lights          1    wreg     unsigned char 
 13904 ;;  command         1   77[BANK0 ] unsigned char 
 13905 ;; Auto vars:     Size  Location     Type
 13906 ;;  lights          1    0[BANK1 ] unsigned char 
 13907 ;; Return value:  Size  Location     Type
 13908 ;;		None               void
 13909 ;; Registers used:
 13910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;Total ram usage:        4 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; Hardware stack levels required when called:    8
 13923 ;; This function calls:
 13924 ;;		_getCmd_Status
 13925 ;;		_getDelayOff_GO
 13926 ;;		_getDimmerLights_PercentToValue
 13927 ;;		_getMain_All_LightsStatus
 13928 ;;		_setCmd_Status
 13929 ;;		_setDelayOff_GO
 13930 ;;		_setDimmerIntr_ControlStatus
 13931 ;;		_setDimmerIntr_DimmingValue
 13932 ;;		_setDimmerIntr_Dimming_RF
 13933 ;;		_setDimmerIntr_MaxmumValue
 13934 ;;		_setDimmerLights_Line
 13935 ;;		_setLED
 13936 ;;		_setProductData
 13937 ;;		_setRF_DimmerLights
 13938 ;;		_setTxData
 13939 ;; This function is called by:
 13940 ;;		_setDimmerLights_Main
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           
 13945                           ;psect for function _setDimmerLights_OnOff
 13946  0F3D                     _setDimmerLights_OnOff:	
 13947                           
 13948                           ;incstack = 0
 13949                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13950                           ;setDimmerLights_OnOff@lights stored from wreg
 13951  0F3D  0021               	movlb	1	; select bank1
 13952  0F3E  00E4               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13953                           
 13954                           ;Dimmer_B1.c: 845: if (command == 1) {
 13955  0F3F  0020               	movlb	0	; select bank0
 13956  0F40  086D               	movf	setDimmerLights_OnOff@command,w
 13957  0F41  3A01               	xorlw	1
 13958  0F42  1D03               	skipz
 13959  0F43  2FA2               	goto	l9603
 13960                           
 13961                           ;Dimmer_B1.c: 846: setDimmerIntr_ControlStatus(lights, 1);
 13962  0F44  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13963  0F45  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13964  0F46  0021               	movlb	1	; select bank1
 13965  0F47  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13966  0F48  319D  256E  318F   	fcall	_setDimmerIntr_ControlStatus
 13967                           
 13968                           ;Dimmer_B1.c: 849: Dimmer.Load_Status = 1;
 13969  0F4B  0022               	movlb	2	; select bank2
 13970  0F4C  152C               	bsf	_Dimmer^(0+256),2
 13971                           
 13972                           ;Dimmer_B1.c: 850: setDimmerLights_Line(lights);
 13973  0F4D  0021               	movlb	1	; select bank1
 13974  0F4E  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13975  0F4F  319B  23BB  318F   	fcall	_setDimmerLights_Line
 13976                           
 13977                           ;Dimmer_B1.c: 856: setLED(lights, 0);
 13978  0F52  0020               	movlb	0	; select bank0
 13979  0F53  01A2               	clrf	setLED@command
 13980  0F54  0021               	movlb	1	; select bank1
 13981  0F55  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13982  0F56  3191  21DC  318F   	fcall	_setLED
 13983                           
 13984                           ;Dimmer_B1.c: 857: ;;
 13985                           ;Dimmer_B1.c: 877: if (DimmerLights->DimmingRun == 1) {
 13986  0F59  0021               	movlb	1	; select bank1
 13987  0F5A  0A4E               	incf	_DimmerLights^(0+128),w
 13988  0F5B  0086               	movwf	6
 13989  0F5C  3001               	movlw	1	; select bank2/3
 13990  0F5D  0087               	movwf	7
 13991  0F5E  1F01               	btfss	1,6
 13992  0F5F  2F84               	goto	l9595
 13993                           
 13994                           ;Dimmer_B1.c: 878: DimmerLights->DimmingRun = 0;
 13995  0F60  0A4E               	incf	_DimmerLights^(0+128),w
 13996  0F61  0086               	movwf	6
 13997  0F62  3001               	movlw	1	; select bank2/3
 13998  0F63  0087               	movwf	7
 13999  0F64  1301               	bcf	1,6
 14000                           
 14001                           ;Dimmer_B1.c: 879: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14002  0F65  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14003  0F66  3E14               	addlw	20
 14004  0F67  076C               	addwf	_product^(0+128),w
 14005  0F68  0020               	movlb	0	; select bank0
 14006  0F69  00EE               	movwf	??_setDimmerLights_OnOff
 14007  0F6A  086E               	movf	??_setDimmerLights_OnOff,w
 14008  0F6B  0086               	movwf	6
 14009  0F6C  3002               	movlw	2	; select bank4/5
 14010  0F6D  0087               	movwf	7
 14011  0F6E  0801               	movf	1,w
 14012  0F6F  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14013  0F72  0020               	movlb	0	; select bank0
 14014  0F73  00EF               	movwf	??_setDimmerLights_OnOff+1
 14015  0F74  086F               	movf	??_setDimmerLights_OnOff+1,w
 14016  0F75  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14017  0F76  0021               	movlb	1	; select bank1
 14018  0F77  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14019  0F78  319B  2310  318F   	fcall	_setDimmerIntr_MaxmumValue
 14020                           
 14021                           ;Dimmer_B1.c: 880: setDimmerIntr_Dimming_RF(lights, 1);
 14022  0F7B  0020               	movlb	0	; select bank0
 14023  0F7C  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14024  0F7D  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14025  0F7E  0021               	movlb	1	; select bank1
 14026  0F7F  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14027  0F80  319D  2586  318F   	fcall	_setDimmerIntr_Dimming_RF
 14028                           
 14029                           ;Dimmer_B1.c: 881: } else {
 14030  0F83  2F9B               	goto	l9597
 14031  0F84                     l9595:	
 14032                           
 14033                           ;Dimmer_B1.c: 882: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14034  0F84  0021               	movlb	1	; select bank1
 14035  0F85  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14036  0F86  3E14               	addlw	20
 14037  0F87  076C               	addwf	_product^(0+128),w
 14038  0F88  0020               	movlb	0	; select bank0
 14039  0F89  00EE               	movwf	??_setDimmerLights_OnOff
 14040  0F8A  086E               	movf	??_setDimmerLights_OnOff,w
 14041  0F8B  0086               	movwf	6
 14042  0F8C  3002               	movlw	2	; select bank4/5
 14043  0F8D  0087               	movwf	7
 14044  0F8E  0801               	movf	1,w
 14045  0F8F  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14046  0F92  0020               	movlb	0	; select bank0
 14047  0F93  00EF               	movwf	??_setDimmerLights_OnOff+1
 14048  0F94  086F               	movf	??_setDimmerLights_OnOff+1,w
 14049  0F95  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14050  0F96  0021               	movlb	1	; select bank1
 14051  0F97  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14052  0F98  319B  231C  318F   	fcall	_setDimmerIntr_DimmingValue
 14053  0F9B                     l9597:	
 14054                           
 14055                           ;Dimmer_B1.c: 885: }
 14056                           ;Dimmer_B1.c: 887: if (lights == 1) {
 14057  0F9B  0021               	movlb	1	; select bank1
 14058  0F9C  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14059  0F9D  3A01               	xorlw	1
 14060  0F9E  1D03               	skipz
 14061  0F9F  2FD1               	goto	l9617
 14062                           
 14063                           ;Dimmer_B1.c: 889: DimmerIntr1.TuneGO = 1;
 14064  0FA0  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14065                           
 14066                           ;Dimmer_B1.c: 895: }
 14067                           ;Dimmer_B1.c: 901: } else if (command == 0) {
 14068                           
 14069                           ;Dimmer_B1.c: 891: } else if (lights == 2) {
 14070  0FA1  2FD1               	goto	l9617
 14071  0FA2                     l9603:	
 14072  0FA2  0020               	movlb	0	; select bank0
 14073  0FA3  08ED               	movf	setDimmerLights_OnOff@command,f
 14074  0FA4  1D03               	skipz
 14075  0FA5  2FD1               	goto	l9617
 14076                           
 14077                           ;Dimmer_B1.c: 902: setDimmerIntr_ControlStatus(lights, 0);
 14078  0FA6  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14079  0FA7  0021               	movlb	1	; select bank1
 14080  0FA8  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14081  0FA9  319D  256E  318F   	fcall	_setDimmerIntr_ControlStatus
 14082                           
 14083                           ;Dimmer_B1.c: 904: Dimmer.Load_Status = 0;
 14084  0FAC  0022               	movlb	2	; select bank2
 14085  0FAD  112C               	bcf	_Dimmer^(0+256),2
 14086                           
 14087                           ;Dimmer_B1.c: 905: setDimmerLights_Line(0);
 14088  0FAE  3000               	movlw	0
 14089  0FAF  319B  23BB  318F   	fcall	_setDimmerLights_Line
 14090                           
 14091                           ;Dimmer_B1.c: 909: if (getDelayOff_GO(lights) == 1) {
 14092  0FB2  0021               	movlb	1	; select bank1
 14093  0FB3  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14094  0FB4  319B  23CC  318F   	fcall	_getDelayOff_GO
 14095  0FB7  3A01               	xorlw	1
 14096  0FB8  1D03               	skipz
 14097  0FB9  2FC2               	goto	l786
 14098                           
 14099                           ;Dimmer_B1.c: 910: setDelayOff_GO(lights, 0, 0);
 14100  0FBA  0020               	movlb	0	; select bank0
 14101  0FBB  01E5               	clrf	setDelayOff_GO@command
 14102  0FBC  01E6               	clrf	setDelayOff_GO@value
 14103  0FBD  0021               	movlb	1	; select bank1
 14104  0FBE  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14105  0FBF  318B  23E8  318F   	fcall	_setDelayOff_GO
 14106  0FC2                     l786:	
 14107                           
 14108                           ;Dimmer_B1.c: 911: }
 14109                           ;Dimmer_B1.c: 916: setLED(lights, 1);
 14110  0FC2  0020               	movlb	0	; select bank0
 14111  0FC3  01A2               	clrf	setLED@command
 14112  0FC4  0AA2               	incf	setLED@command,f
 14113  0FC5  0021               	movlb	1	; select bank1
 14114  0FC6  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14115  0FC7  3191  21DC  318F   	fcall	_setLED
 14116                           
 14117                           ;Dimmer_B1.c: 917: ;;
 14118                           ;Dimmer_B1.c: 921: if (lights == 1) {
 14119  0FCA  0021               	movlb	1	; select bank1
 14120  0FCB  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14121  0FCC  3A01               	xorlw	1
 14122  0FCD  1D03               	skipz
 14123  0FCE  2FD1               	goto	l9617
 14124                           
 14125                           ;Dimmer_B1.c: 922: RB1 = 0;
 14126  0FCF  0020               	movlb	0	; select bank0
 14127  0FD0  108D               	bcf	13,1	;volatile
 14128  0FD1                     l9617:	
 14129                           
 14130                           ;Dimmer_B1.c: 924: }
 14131                           ;Dimmer_B1.c: 935: }
 14132                           ;Dimmer_B1.c: 938: setRF_DimmerLights(lights, command);
 14133  0FD1  0020               	movlb	0	; select bank0
 14134  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14135  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14136  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14137  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14138  0FD6  0021               	movlb	1	; select bank1
 14139  0FD7  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14140  0FD8  3196  26C5  318F   	fcall	_setRF_DimmerLights
 14141                           
 14142                           ;Dimmer_B1.c: 940: if (getCmd_Status(1) == 1) {
 14143  0FDB  3001               	movlw	1
 14144  0FDC  319C  2421  318F   	fcall	_getCmd_Status
 14145  0FDF  3A01               	xorlw	1
 14146  0FE0  1D03               	skipz
 14147  0FE1  2FFD               	goto	l9631
 14148                           
 14149                           ;Dimmer_B1.c: 941: if (getMain_All_LightsStatus() == 0) {
 14150  0FE2  319A  22AB  318F   	fcall	_getMain_All_LightsStatus
 14151  0FE5  3800               	iorlw	0
 14152  0FE6  1D03               	skipz
 14153  0FE7  0008               	return
 14154                           
 14155                           ;Dimmer_B1.c: 942: setCmd_Status(1, 0);
 14156  0FE8  0020               	movlb	0	; select bank0
 14157  0FE9  01A0               	clrf	setCmd_Status@cmd
 14158  0FEA  3001               	movlw	1
 14159  0FEB  319D  259E  318F   	fcall	_setCmd_Status
 14160                           
 14161                           ;Dimmer_B1.c: 943: setProductData(11, 0);
 14162  0FEE  0020               	movlb	0	; select bank0
 14163  0FEF  01E2               	clrf	setProductData@value
 14164  0FF0  300B               	movlw	11
 14165  0FF1  319B  2304  318F   	fcall	_setProductData
 14166                           
 14167                           ;Dimmer_B1.c: 944: setProductData(17, 0);
 14168  0FF4  0020               	movlb	0	; select bank0
 14169  0FF5  01E2               	clrf	setProductData@value
 14170  0FF6  3011               	movlw	17
 14171  0FF7  319B  2304  318F   	fcall	_setProductData
 14172                           
 14173                           ;Dimmer_B1.c: 945: setTxData();
 14174  0FFA  318E  2682         	fcall	_setTxData
 14175                           
 14176                           ;Dimmer_B1.c: 946: }
 14177                           ;Dimmer_B1.c: 947: } else {
 14178  0FFC  0008               	return
 14179  0FFD                     l9631:	
 14180                           
 14181                           ;Dimmer_B1.c: 948: setTxData();
 14182  0FFD  318E  2682         	fcall	_setTxData
 14183  0FFF  0008               	return
 14184  1000                     __end_of_setDimmerLights_OnOff:	
 14185                           
 14186                           	psect	text90
 14187  11DC                     __ptext90:	
 14188 ;; *************** function _setLED *****************
 14189 ;; Defined at:
 14190 ;;		line 81 in file "../src/LED_B1.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;  led             1    wreg     unsigned char 
 14193 ;;  command         1    2[BANK0 ] unsigned char 
 14194 ;; Auto vars:     Size  Location     Type
 14195 ;;  led             1    3[BANK0 ] unsigned char 
 14196 ;; Return value:  Size  Location     Type
 14197 ;;		None               void
 14198 ;; Registers used:
 14199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14200 ;; Tracked objects:
 14201 ;;		On entry : 0/0
 14202 ;;		On exit  : 0/0
 14203 ;;		Unchanged: 0/0
 14204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14205 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;Total ram usage:        2 bytes
 14210 ;; Hardware stack levels used:    1
 14211 ;; Hardware stack levels required when called:    6
 14212 ;; This function calls:
 14213 ;;		_LedPointSelect
 14214 ;; This function is called by:
 14215 ;;		_setDimmerLights_OnOff
 14216 ;;		_setLED_Initialization
 14217 ;;		_Exception_Main
 14218 ;;		_setSw_Initialization
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           
 14223                           ;psect for function _setLED
 14224  11DC                     _setLED:	
 14225                           
 14226                           ;incstack = 0
 14227                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14228                           ;setLED@led stored from wreg
 14229  11DC  0020               	movlb	0	; select bank0
 14230  11DD  00A3               	movwf	setLED@led
 14231                           
 14232                           ;LED_B1.c: 82: LedPointSelect(led);
 14233  11DE  0823               	movf	setLED@led,w
 14234  11DF  319B  2328  3191   	fcall	_LedPointSelect
 14235                           
 14236                           ;LED_B1.c: 83: if (command == 0) {
 14237  11E2  0020               	movlb	0	; select bank0
 14238  11E3  08A2               	movf	setLED@command,f
 14239  11E4  1D03               	skipz
 14240  11E5  29EB               	goto	l9339
 14241                           
 14242                           ;LED_B1.c: 112: if (led == 99) {
 14243  11E6  0823               	movf	setLED@led,w
 14244  11E7  3A63               	xorlw	99
 14245  11E8  1D03               	skipz
 14246  11E9  29EB               	goto	l9339
 14247                           
 14248                           ;LED_B1.c: 116: RB5 = 1;
 14249  11EA  168D               	bsf	13,5	;volatile
 14250  11EB                     l9339:	
 14251                           
 14252                           ;LED_B1.c: 118: }
 14253                           ;LED_B1.c: 120: }
 14254                           ;LED_B1.c: 121: if (command == 1) {
 14255  11EB  0822               	movf	setLED@command,w
 14256  11EC  3A01               	xorlw	1
 14257  11ED  1D03               	skipz
 14258  11EE  29F4               	goto	l9345
 14259                           
 14260                           ;LED_B1.c: 150: if (led == 99) {
 14261  11EF  0823               	movf	setLED@led,w
 14262  11F0  3A63               	xorlw	99
 14263  11F1  1D03               	skipz
 14264  11F2  29F4               	goto	l9345
 14265                           
 14266                           ;LED_B1.c: 154: RB5 = 0;
 14267  11F3  128D               	bcf	13,5	;volatile
 14268  11F4                     l9345:	
 14269                           
 14270                           ;LED_B1.c: 156: }
 14271                           ;LED_B1.c: 158: }
 14272                           ;LED_B1.c: 159: if (command == 10) {
 14273  11F4  0822               	movf	setLED@command,w
 14274  11F5  3A0A               	xorlw	10
 14275  11F6  1D03               	skipz
 14276  11F7  2A0A               	goto	l9353
 14277                           
 14278                           ;LED_B1.c: 160: LED->GO = 0;
 14279  11F8  0021               	movlb	1	; select bank1
 14280  11F9  084F               	movf	_LED^(0+128),w
 14281  11FA  0086               	movwf	6
 14282  11FB  3001               	movlw	1	; select bank2/3
 14283  11FC  0087               	movwf	7
 14284  11FD  1081               	bcf	1,1
 14285                           
 14286                           ;LED_B1.c: 161: LED->Time = 0;
 14287  11FE  0A4F               	incf	_LED^(0+128),w
 14288  11FF  0086               	movwf	6
 14289  1200  3001               	movlw	1	; select bank2/3
 14290  1201  0087               	movwf	7
 14291  1202  3000               	movlw	0
 14292  1203  3FC0               	movwi [0]fsr1
 14293  1204  3FC1               	movwi [1]fsr1
 14294                           
 14295                           ;LED_B1.c: 190: if (led == 99) {
 14296  1205  0020               	movlb	0	; select bank0
 14297  1206  0823               	movf	setLED@led,w
 14298  1207  3A63               	xorlw	99
 14299  1208  1903               	btfsc	3,2
 14300                           
 14301                           ;LED_B1.c: 194: RB5 = 1;
 14302  1209  168D               	bsf	13,5	;volatile
 14303  120A                     l9353:	
 14304                           
 14305                           ;LED_B1.c: 196: }
 14306                           ;LED_B1.c: 198: }
 14307                           ;LED_B1.c: 199: if (command == 11) {
 14308  120A  0822               	movf	setLED@command,w
 14309  120B  3A0B               	xorlw	11
 14310  120C  1D03               	skipz
 14311  120D  0008               	return
 14312                           
 14313                           ;LED_B1.c: 200: LED->GO = 1;
 14314  120E  0021               	movlb	1	; select bank1
 14315  120F  084F               	movf	_LED^(0+128),w
 14316  1210  0086               	movwf	6
 14317  1211  3001               	movlw	1	; select bank2/3
 14318  1212  0087               	movwf	7
 14319  1213  1481               	bsf	1,1
 14320  1214  0008               	return
 14321  1215                     __end_of_setLED:	
 14322                           
 14323                           	psect	text91
 14324  1B28                     __ptext91:	
 14325 ;; *************** function _LedPointSelect *****************
 14326 ;; Defined at:
 14327 ;;		line 7 in file "../src/LED_B1.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;  led             1    wreg     unsigned char 
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;  led             1    1[BANK0 ] unsigned char 
 14332 ;; Return value:  Size  Location     Type
 14333 ;;		None               void
 14334 ;; Registers used:
 14335 ;;		wreg
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;Total ram usage:        2 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    5
 14348 ;; This function calls:
 14349 ;;		Nothing
 14350 ;; This function is called by:
 14351 ;;		_setLED_Initialization
 14352 ;;		_setLED
 14353 ;;		_setLED_Main
 14354 ;; This function uses a non-reentrant model
 14355 ;;
 14356                           
 14357                           
 14358                           ;psect for function _LedPointSelect
 14359  1B28                     _LedPointSelect:	
 14360                           
 14361                           ;incstack = 0
 14362                           ; Regs used in _LedPointSelect: [wreg]
 14363                           ;LedPointSelect@led stored from wreg
 14364  1B28  0020               	movlb	0	; select bank0
 14365  1B29  00A1               	movwf	LedPointSelect@led
 14366                           
 14367                           ;LED_B1.c: 24: if (led == 99) {
 14368  1B2A  0821               	movf	LedPointSelect@led,w
 14369  1B2B  3A63               	xorlw	99
 14370  1B2C  1D03               	skipz
 14371  1B2D  0008               	return
 14372                           
 14373                           ;LED_B1.c: 25: LED = &VarErrLED;
 14374  1B2E  306B               	movlw	_VarErrLED& (0+255)
 14375  1B2F  00A0               	movwf	??_LedPointSelect
 14376  1B30  0820               	movf	??_LedPointSelect,w
 14377  1B31  0021               	movlb	1	; select bank1
 14378  1B32  00CF               	movwf	_LED^(0+128)
 14379  1B33  0008               	return
 14380  1B34                     __end_of_LedPointSelect:	
 14381                           
 14382                           	psect	text92
 14383  1D86                     __ptext92:	
 14384 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14385 ;; Defined at:
 14386 ;;		line 227 in file "../src/Dimmer_B1.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;  lights          1    wreg     unsigned char 
 14389 ;;  command         1    0[BANK0 ] unsigned char 
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  lights          1    2[BANK0 ] unsigned char 
 14392 ;; Return value:  Size  Location     Type
 14393 ;;		None               void
 14394 ;; Registers used:
 14395 ;;		wreg, status,2, status,0
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14401 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;Total ram usage:        3 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:    5
 14408 ;; This function calls:
 14409 ;;		Nothing
 14410 ;; This function is called by:
 14411 ;;		_setDimmerLights_OnOff
 14412 ;;		_setRFSW_AdjControl
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           
 14417                           ;psect for function _setDimmerIntr_Dimming_RF
 14418  1D86                     _setDimmerIntr_Dimming_RF:	
 14419                           
 14420                           ;incstack = 0
 14421                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14422                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14423  1D86  0020               	movlb	0	; select bank0
 14424  1D87  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14425                           
 14426                           ;Dimmer_B1.c: 229: if (lights == 1) {
 14427  1D88  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14428  1D89  3A01               	xorlw	1
 14429  1D8A  1D03               	skipz
 14430  1D8B  0008               	return
 14431                           
 14432                           ;Dimmer_B1.c: 230: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14433  1D8C  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14434  1D8D  3A01               	xorlw	1
 14435  1D8E  3000               	movlw	0
 14436  1D8F  1903               	skipnz
 14437  1D90  3001               	movlw	1
 14438  1D91  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14439  1D92  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14440  1D93  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14441  1D94  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14442  1D95  0021               	movlb	1	; select bank1
 14443  1D96  083C               	movf	_DimmerIntr1^(0+128),w
 14444  1D97  0020               	movlb	0	; select bank0
 14445  1D98  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14446  1D99  39BF               	andlw	-65
 14447  1D9A  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14448  1D9B  0021               	movlb	1	; select bank1
 14449  1D9C  00BC               	movwf	_DimmerIntr1^(0+128)
 14450  1D9D  0008               	return
 14451  1D9E                     __end_of_setDimmerIntr_Dimming_RF:	
 14452                           
 14453                           	psect	text93
 14454  1B1C                     __ptext93:	
 14455 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14456 ;; Defined at:
 14457 ;;		line 92 in file "../src/Dimmer_B1.c"
 14458 ;; Parameters:    Size  Location     Type
 14459 ;;  lights          1    wreg     unsigned char 
 14460 ;;  value           1   66[BANK0 ] unsigned char 
 14461 ;; Auto vars:     Size  Location     Type
 14462 ;;  lights          1   68[BANK0 ] unsigned char 
 14463 ;; Return value:  Size  Location     Type
 14464 ;;		None               void
 14465 ;; Registers used:
 14466 ;;		wreg
 14467 ;; Tracked objects:
 14468 ;;		On entry : 0/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14472 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;Total ram usage:        3 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; Hardware stack levels required when called:    5
 14479 ;; This function calls:
 14480 ;;		Nothing
 14481 ;; This function is called by:
 14482 ;;		_setDimmerLights_OnOff
 14483 ;; This function uses a non-reentrant model
 14484 ;;
 14485                           
 14486                           
 14487                           ;psect for function _setDimmerIntr_DimmingValue
 14488  1B1C                     _setDimmerIntr_DimmingValue:	
 14489                           
 14490                           ;incstack = 0
 14491                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14492                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14493  1B1C  0020               	movlb	0	; select bank0
 14494  1B1D  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14495                           
 14496                           ;Dimmer_B1.c: 94: if (lights == 1) {
 14497  1B1E  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14498  1B1F  3A01               	xorlw	1
 14499  1B20  1D03               	skipz
 14500  1B21  0008               	return
 14501                           
 14502                           ;Dimmer_B1.c: 95: DimmerIntr1.DimmingValue = value;
 14503  1B22  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14504  1B23  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14505  1B24  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14506  1B25  0021               	movlb	1	; select bank1
 14507  1B26  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14508  1B27  0008               	return
 14509  1B28                     __end_of_setDimmerIntr_DimmingValue:	
 14510                           
 14511                           	psect	text94
 14512  1D6E                     __ptext94:	
 14513 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14514 ;; Defined at:
 14515 ;;		line 74 in file "../src/Dimmer_B1.c"
 14516 ;; Parameters:    Size  Location     Type
 14517 ;;  lights          1    wreg     unsigned char 
 14518 ;;  command         1    0[BANK0 ] unsigned char 
 14519 ;; Auto vars:     Size  Location     Type
 14520 ;;  lights          1    2[BANK0 ] unsigned char 
 14521 ;; Return value:  Size  Location     Type
 14522 ;;		None               void
 14523 ;; Registers used:
 14524 ;;		wreg, status,2, status,0
 14525 ;; Tracked objects:
 14526 ;;		On entry : 0/0
 14527 ;;		On exit  : 0/0
 14528 ;;		Unchanged: 0/0
 14529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14530 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14534 ;;Total ram usage:        3 bytes
 14535 ;; Hardware stack levels used:    1
 14536 ;; Hardware stack levels required when called:    5
 14537 ;; This function calls:
 14538 ;;		Nothing
 14539 ;; This function is called by:
 14540 ;;		_setDimmerLights_OnOff
 14541 ;; This function uses a non-reentrant model
 14542 ;;
 14543                           
 14544                           
 14545                           ;psect for function _setDimmerIntr_ControlStatus
 14546  1D6E                     _setDimmerIntr_ControlStatus:	
 14547                           
 14548                           ;incstack = 0
 14549                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14550                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14551  1D6E  0020               	movlb	0	; select bank0
 14552  1D6F  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14553                           
 14554                           ;Dimmer_B1.c: 76: if (lights == 1) {
 14555  1D70  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14556  1D71  3A01               	xorlw	1
 14557  1D72  1D03               	skipz
 14558  1D73  0008               	return
 14559                           
 14560                           ;Dimmer_B1.c: 77: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14561  1D74  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14562  1D75  3A01               	xorlw	1
 14563  1D76  3000               	movlw	0
 14564  1D77  1903               	skipnz
 14565  1D78  3001               	movlw	1
 14566  1D79  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14567  1D7A  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14568  1D7B  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14569  1D7C  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14570  1D7D  0021               	movlb	1	; select bank1
 14571  1D7E  083C               	movf	_DimmerIntr1^(0+128),w
 14572  1D7F  0020               	movlb	0	; select bank0
 14573  1D80  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14574  1D81  39F7               	andlw	-9
 14575  1D82  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14576  1D83  0021               	movlb	1	; select bank1
 14577  1D84  00BC               	movwf	_DimmerIntr1^(0+128)
 14578  1D85  0008               	return
 14579  1D86                     __end_of_setDimmerIntr_ControlStatus:	
 14580                           
 14581                           	psect	text95
 14582  0BE8                     __ptext95:	
 14583 ;; *************** function _setDelayOff_GO *****************
 14584 ;; Defined at:
 14585 ;;		line 87 in file "../src/DelayOff_B1.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;  sw              1    wreg     unsigned char 
 14588 ;;  command         1   69[BANK0 ] unsigned char 
 14589 ;;  value           1   70[BANK0 ] unsigned char 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;  sw              1   76[BANK0 ] unsigned char 
 14592 ;;  k               1   75[BANK0 ] unsigned char 
 14593 ;;  j               1   74[BANK0 ] unsigned char 
 14594 ;;  i               1   73[BANK0 ] unsigned char 
 14595 ;; Return value:  Size  Location     Type
 14596 ;;		None               void
 14597 ;; Registers used:
 14598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14604 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;Total ram usage:        8 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:    6
 14611 ;; This function calls:
 14612 ;;		_DelayOffPointSelect
 14613 ;;		___bmul
 14614 ;;		_setProductData
 14615 ;; This function is called by:
 14616 ;;		_setDimmerLights_OnOff
 14617 ;;		_setRFSW_Control
 14618 ;; This function uses a non-reentrant model
 14619 ;;
 14620                           
 14621                           
 14622                           ;psect for function _setDelayOff_GO
 14623  0BE8                     _setDelayOff_GO:	
 14624                           
 14625                           ;incstack = 0
 14626                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14627                           ;setDelayOff_GO@sw stored from wreg
 14628  0BE8  0020               	movlb	0	; select bank0
 14629  0BE9  00EC               	movwf	setDelayOff_GO@sw
 14630                           
 14631                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14632  0BEA  086C               	movf	setDelayOff_GO@sw,w
 14633  0BEB  319A  22EC  318B   	fcall	_DelayOffPointSelect
 14634                           
 14635                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14636  0BEE  0020               	movlb	0	; select bank0
 14637  0BEF  0865               	movf	setDelayOff_GO@command,w
 14638  0BF0  3A01               	xorlw	1
 14639  0BF1  3000               	movlw	0
 14640  0BF2  1903               	skipnz
 14641  0BF3  3001               	movlw	1
 14642  0BF4  00E7               	movwf	??_setDelayOff_GO
 14643  0BF5  0021               	movlb	1	; select bank1
 14644  0BF6  084C               	movf	_DelayOff^(0+128),w
 14645  0BF7  0086               	movwf	6
 14646  0BF8  3001               	movlw	1	; select bank2/3
 14647  0BF9  0087               	movwf	7
 14648  0BFA  0020               	movlb	0	; select bank0
 14649  0BFB  0DE7               	rlf	??_setDelayOff_GO,f
 14650  0BFC  0801               	movf	1,w
 14651  0BFD  0667               	xorwf	??_setDelayOff_GO,w
 14652  0BFE  39FD               	andlw	-3
 14653  0BFF  0667               	xorwf	??_setDelayOff_GO,w
 14654  0C00  0081               	movwf	1
 14655                           
 14656                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14657  0C01  0021               	movlb	1	; select bank1
 14658  0C02  084C               	movf	_DelayOff^(0+128),w
 14659  0C03  3E02               	addlw	2
 14660  0C04  0086               	movwf	6
 14661  0C05  3001               	movlw	1	; select bank2/3
 14662  0C06  0087               	movwf	7
 14663  0C07  3000               	movlw	0
 14664  0C08  3FC0               	movwi [0]fsr1
 14665  0C09  3FC1               	movwi [1]fsr1
 14666                           
 14667                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14668  0C0A  084C               	movf	_DelayOff^(0+128),w
 14669  0C0B  3E04               	addlw	4
 14670  0C0C  0086               	movwf	6
 14671  0C0D  3001               	movlw	1	; select bank2/3
 14672  0C0E  0087               	movwf	7
 14673  0C0F  0181               	clrf	1
 14674                           
 14675                           ;DelayOff_B1.c: 94: if (command == 1) {
 14676  0C10  0020               	movlb	0	; select bank0
 14677  0C11  0865               	movf	setDelayOff_GO@command,w
 14678  0C12  3A01               	xorlw	1
 14679  0C13  1D03               	skipz
 14680  0C14  2C6A               	goto	l8925
 14681                           
 14682                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14683  0C15  3005               	movlw	5
 14684  0C16  00E7               	movwf	??_setDelayOff_GO
 14685  0C17  0867               	movf	??_setDelayOff_GO,w
 14686  0C18  00E9               	movwf	setDelayOff_GO@i
 14687  0C19  01EA               	clrf	setDelayOff_GO@j
 14688  0C1A  01EB               	clrf	setDelayOff_GO@k
 14689                           
 14690                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14691  0C1B  300F               	movlw	15
 14692  0C1C  0566               	andwf	setDelayOff_GO@value,w
 14693  0C1D  00E7               	movwf	??_setDelayOff_GO
 14694  0C1E  0867               	movf	??_setDelayOff_GO,w
 14695  0C1F  3A05               	xorlw	5
 14696  0C20  1903               	skipnz
 14697  0C21  2C26               	goto	l8911
 14698  0C22  0866               	movf	setDelayOff_GO@value,w
 14699  0C23  390F               	andlw	15
 14700  0C24  1D03               	btfss	3,2
 14701  0C25  2C56               	goto	l8921
 14702  0C26                     l8911:	
 14703  0C26  3031               	movlw	49
 14704  0C27  0266               	subwf	setDelayOff_GO@value,w
 14705  0C28  1803               	skipnc
 14706  0C29  2C56               	goto	l8921
 14707                           
 14708                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14709  0C2A  0866               	movf	setDelayOff_GO@value,w
 14710  0C2B  390F               	andlw	15
 14711  0C2C  00E7               	movwf	??_setDelayOff_GO
 14712  0C2D  0867               	movf	??_setDelayOff_GO,w
 14713  0C2E  00EA               	movwf	setDelayOff_GO@j
 14714                           
 14715                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14716  0C2F  0866               	movf	setDelayOff_GO@value,w
 14717  0C30  00E7               	movwf	??_setDelayOff_GO
 14718  0C31  3004               	movlw	4
 14719  0C32                     u9645:	
 14720  0C32  36E7               	lsrf	??_setDelayOff_GO,f
 14721  0C33  0B89               	decfsz	9,f
 14722  0C34  2C32               	goto	u9645
 14723  0C35  0867               	movf	??_setDelayOff_GO,w
 14724  0C36  390F               	andlw	15
 14725  0C37  00E8               	movwf	??_setDelayOff_GO+1
 14726  0C38  0868               	movf	??_setDelayOff_GO+1,w
 14727  0C39  00EB               	movwf	setDelayOff_GO@k
 14728                           
 14729                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14730  0C3A  300A               	movlw	10
 14731  0C3B  00E7               	movwf	??_setDelayOff_GO
 14732  0C3C  0867               	movf	??_setDelayOff_GO,w
 14733  0C3D  00A0               	movwf	___bmul@multiplicand
 14734  0C3E  086B               	movf	setDelayOff_GO@k,w
 14735  0C3F  319C  2433  318B   	fcall	___bmul
 14736  0C42  0020               	movlb	0	; select bank0
 14737  0C43  076A               	addwf	setDelayOff_GO@j,w
 14738  0C44  00E8               	movwf	??_setDelayOff_GO+1
 14739  0C45  0021               	movlb	1	; select bank1
 14740  0C46  0A4C               	incf	_DelayOff^(0+128),w
 14741  0C47  0086               	movwf	6
 14742  0C48  3001               	movlw	1	; select bank2/3
 14743  0C49  0087               	movwf	7
 14744  0C4A  0020               	movlb	0	; select bank0
 14745  0C4B  0868               	movf	??_setDelayOff_GO+1,w
 14746  0C4C  0081               	movwf	1
 14747                           
 14748                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14749  0C4D  0866               	movf	setDelayOff_GO@value,w
 14750  0C4E  00E7               	movwf	??_setDelayOff_GO
 14751  0C4F  0867               	movf	??_setDelayOff_GO,w
 14752  0C50  00E2               	movwf	setProductData@value
 14753  0C51  086C               	movf	setDelayOff_GO@sw,w
 14754  0C52  3E1A               	addlw	26
 14755  0C53  319B  2304         	fcall	_setProductData
 14756                           
 14757                           ;DelayOff_B1.c: 103: } else {
 14758  0C55  0008               	return
 14759  0C56                     l8921:	
 14760                           
 14761                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14762  0C56  3005               	movlw	5
 14763  0C57  0020               	movlb	0	; select bank0
 14764  0C58  00E7               	movwf	??_setDelayOff_GO
 14765  0C59  0021               	movlb	1	; select bank1
 14766  0C5A  0A4C               	incf	_DelayOff^(0+128),w
 14767  0C5B  0086               	movwf	6
 14768  0C5C  3001               	movlw	1	; select bank2/3
 14769  0C5D  0087               	movwf	7
 14770  0C5E  0020               	movlb	0	; select bank0
 14771  0C5F  0867               	movf	??_setDelayOff_GO,w
 14772  0C60  0081               	movwf	1
 14773                           
 14774                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14775  0C61  3005               	movlw	5
 14776  0C62  00E7               	movwf	??_setDelayOff_GO
 14777  0C63  0867               	movf	??_setDelayOff_GO,w
 14778  0C64  00E2               	movwf	setProductData@value
 14779  0C65  086C               	movf	setDelayOff_GO@sw,w
 14780  0C66  3E1A               	addlw	26
 14781  0C67  319B  2304         	fcall	_setProductData
 14782                           
 14783                           ;DelayOff_B1.c: 106: }
 14784                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14785  0C69  0008               	return
 14786  0C6A                     l8925:	
 14787  0C6A  0020               	movlb	0	; select bank0
 14788  0C6B  08E5               	movf	setDelayOff_GO@command,f
 14789  0C6C  1D03               	skipz
 14790  0C6D  0008               	return
 14791                           
 14792                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14793  0C6E  01E2               	clrf	setProductData@value
 14794  0C6F  086C               	movf	setDelayOff_GO@sw,w
 14795  0C70  3E1A               	addlw	26
 14796  0C71  319B  2304         	fcall	_setProductData
 14797  0C73  0008               	return
 14798  0C74                     __end_of_setDelayOff_GO:	
 14799                           
 14800                           	psect	text96
 14801  1C33                     __ptext96:	
 14802 ;; *************** function ___bmul *****************
 14803 ;; Defined at:
 14804 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14805 ;; Parameters:    Size  Location     Type
 14806 ;;  multiplier      1    wreg     unsigned char 
 14807 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14810 ;;  product         1    2[BANK0 ] unsigned char 
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      unsigned char 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2, status,0
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14820 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;Total ram usage:        4 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    5
 14827 ;; This function calls:
 14828 ;;		Nothing
 14829 ;; This function is called by:
 14830 ;;		_setDelayOff_GO
 14831 ;;		_DelayTimejudge
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           
 14836                           ;psect for function ___bmul
 14837  1C33                     ___bmul:	
 14838                           
 14839                           ;incstack = 0
 14840                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14841                           ;___bmul@multiplier stored from wreg
 14842  1C33  0020               	movlb	0	; select bank0
 14843  1C34  00A3               	movwf	___bmul@multiplier
 14844  1C35  01A2               	clrf	___bmul@product
 14845  1C36                     l8589:	
 14846  1C36  1C23               	btfss	___bmul@multiplier,0
 14847  1C37  2C3C               	goto	l8593
 14848  1C38  0820               	movf	___bmul@multiplicand,w
 14849  1C39  00A1               	movwf	??___bmul
 14850  1C3A  0821               	movf	??___bmul,w
 14851  1C3B  07A2               	addwf	___bmul@product,f
 14852  1C3C                     l8593:	
 14853  1C3C  1003               	clrc
 14854  1C3D  0DA0               	rlf	___bmul@multiplicand,f
 14855  1C3E  1003               	clrc
 14856  1C3F  0CA3               	rrf	___bmul@multiplier,f
 14857  1C40  08A3               	movf	___bmul@multiplier,f
 14858  1C41  1D03               	skipz
 14859  1C42  2C36               	goto	l8589
 14860  1C43  0822               	movf	___bmul@product,w
 14861  1C44  0008               	return
 14862  1C45                     __end_of___bmul:	
 14863                           
 14864                           	psect	text97
 14865  1D9E                     __ptext97:	
 14866 ;; *************** function _setCmd_Status *****************
 14867 ;; Defined at:
 14868 ;;		line 651 in file "../src/Main_B1.c"
 14869 ;; Parameters:    Size  Location     Type
 14870 ;;  number          1    wreg     unsigned char 
 14871 ;;  cmd             1    0[BANK0 ] unsigned char 
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;  number          1    2[BANK0 ] unsigned char 
 14874 ;; Return value:  Size  Location     Type
 14875 ;;		None               void
 14876 ;; Registers used:
 14877 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14883 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;Total ram usage:        3 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; Hardware stack levels required when called:    5
 14890 ;; This function calls:
 14891 ;;		Nothing
 14892 ;; This function is called by:
 14893 ;;		_setDimmerLights_OnOff
 14894 ;;		_setControl_Lights_Table
 14895 ;; This function uses a non-reentrant model
 14896 ;;
 14897                           
 14898                           
 14899                           ;psect for function _setCmd_Status
 14900  1D9E                     _setCmd_Status:	
 14901                           
 14902                           ;incstack = 0
 14903                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14904                           ;setCmd_Status@number stored from wreg
 14905  1D9E  0020               	movlb	0	; select bank0
 14906  1D9F  00A2               	movwf	setCmd_Status@number
 14907                           
 14908                           ;Main_B1.c: 652: switch (number) {
 14909  1DA0  2DB0               	goto	l9091
 14910  1DA1                     l9087:	
 14911                           ;Main_B1.c: 653: case 1:
 14912                           
 14913                           
 14914                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14915  1DA1  0820               	movf	setCmd_Status@cmd,w
 14916  1DA2  3A01               	xorlw	1
 14917  1DA3  3000               	movlw	0
 14918  1DA4  1903               	skipnz
 14919  1DA5  3001               	movlw	1
 14920  1DA6  00A1               	movwf	??_setCmd_Status
 14921  1DA7  0021               	movlb	1	; select bank1
 14922  1DA8  084B               	movf	_Cmd^(0+128),w
 14923  1DA9  0020               	movlb	0	; select bank0
 14924  1DAA  0621               	xorwf	??_setCmd_Status,w
 14925  1DAB  39FE               	andlw	-2
 14926  1DAC  0621               	xorwf	??_setCmd_Status,w
 14927  1DAD  0021               	movlb	1	; select bank1
 14928  1DAE  00CB               	movwf	_Cmd^(0+128)
 14929                           
 14930                           ;Main_B1.c: 656: }
 14931                           
 14932                           ;Main_B1.c: 655: break;
 14933  1DAF  0008               	return
 14934  1DB0                     l9091:	
 14935  1DB0  0020               	movlb	0	; select bank0
 14936  1DB1  0822               	movf	setCmd_Status@number,w
 14937                           
 14938                           ; Switch size 1, requested type "space"
 14939                           ; Number of cases is 1, Range of values is 1 to 1
 14940                           ; switch strategies available:
 14941                           ; Name         Instructions Cycles
 14942                           ; simple_byte            4     3 (average)
 14943                           ; direct_byte           11     9 (fixed)
 14944                           ; jumptable            263     9 (fixed)
 14945                           ;	Chosen strategy is simple_byte
 14946  1DB2  3A01               	xorlw	1	; case 1
 14947  1DB3  1903               	skipnz
 14948  1DB4  2DA1               	goto	l9087
 14949  1DB5  2DB6               	goto	l1512
 14950  1DB6                     l1512:	
 14951  1DB6  0008               	return
 14952  1DB7                     __end_of_setCmd_Status:	
 14953                           
 14954                           	psect	text98
 14955  1AAB                     __ptext98:	
 14956 ;; *************** function _getMain_All_LightsStatus *****************
 14957 ;; Defined at:
 14958 ;;		line 373 in file "../src/Main_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;		None
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;  status          1    0[BANK0 ] unsigned char 
 14963 ;; Return value:  Size  Location     Type
 14964 ;;                  1    wreg      unsigned char 
 14965 ;; Registers used:
 14966 ;;		wreg, status,2
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:        1 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    5
 14979 ;; This function calls:
 14980 ;;		Nothing
 14981 ;; This function is called by:
 14982 ;;		_DimmerLights_Main
 14983 ;;		_setDimmerLights_Main
 14984 ;;		_setDimmerLights_OnOff
 14985 ;;		_Flash_Memory_Main
 14986 ;;		_Exception_Main
 14987 ;;		_Load_Main
 14988 ;;		_setTemp_Main
 14989 ;;		_setControl_Lights_Table
 14990 ;; This function uses a non-reentrant model
 14991 ;;
 14992                           
 14993                           
 14994                           ;psect for function _getMain_All_LightsStatus
 14995  1AAB                     _getMain_All_LightsStatus:	
 14996                           
 14997                           ;Main_B1.c: 374: char status = 0;
 14998                           
 14999                           ;incstack = 0
 15000                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15001  1AAB  0020               	movlb	0	; select bank0
 15002  1AAC  01A0               	clrf	getMain_All_LightsStatus@status
 15003                           
 15004                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15005  1AAD  3000               	movlw	0
 15006  1AAE  0022               	movlb	2	; select bank2
 15007  1AAF  185F               	btfsc	(_DimmerLights1^(0+256)+1),0
 15008  1AB0  3001               	movlw	1
 15009  1AB1  0020               	movlb	0	; select bank0
 15010  1AB2  00A0               	movwf	getMain_All_LightsStatus@status
 15011                           
 15012                           ;Main_B1.c: 420: return status;
 15013  1AB3  0820               	movf	getMain_All_LightsStatus@status,w
 15014  1AB4  0008               	return
 15015  1AB5                     __end_of_getMain_All_LightsStatus:	
 15016                           
 15017                           	psect	text99
 15018  1BCC                     __ptext99:	
 15019 ;; *************** function _getDelayOff_GO *****************
 15020 ;; Defined at:
 15021 ;;		line 114 in file "../src/DelayOff_B1.c"
 15022 ;; Parameters:    Size  Location     Type
 15023 ;;  sw              1    wreg     unsigned char 
 15024 ;; Auto vars:     Size  Location     Type
 15025 ;;  sw              1    2[BANK0 ] unsigned char 
 15026 ;;  go              1    3[BANK0 ] unsigned char 
 15027 ;; Return value:  Size  Location     Type
 15028 ;;                  1    wreg      unsigned char 
 15029 ;; Registers used:
 15030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15031 ;; Tracked objects:
 15032 ;;		On entry : 0/0
 15033 ;;		On exit  : 0/0
 15034 ;;		Unchanged: 0/0
 15035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;Total ram usage:        2 bytes
 15041 ;; Hardware stack levels used:    1
 15042 ;; Hardware stack levels required when called:    6
 15043 ;; This function calls:
 15044 ;;		_DelayOffPointSelect
 15045 ;; This function is called by:
 15046 ;;		_setDimmerLights_OnOff
 15047 ;; This function uses a non-reentrant model
 15048 ;;
 15049                           
 15050                           
 15051                           ;psect for function _getDelayOff_GO
 15052  1BCC                     _getDelayOff_GO:	
 15053                           
 15054                           ;incstack = 0
 15055                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15056                           ;getDelayOff_GO@sw stored from wreg
 15057  1BCC  0020               	movlb	0	; select bank0
 15058  1BCD  00A2               	movwf	getDelayOff_GO@sw
 15059                           
 15060                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15061  1BCE  0822               	movf	getDelayOff_GO@sw,w
 15062  1BCF  319A  22EC         	fcall	_DelayOffPointSelect
 15063                           
 15064                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15065  1BD1  0021               	movlb	1	; select bank1
 15066  1BD2  084C               	movf	_DelayOff^(0+128),w
 15067  1BD3  0086               	movwf	6
 15068  1BD4  3001               	movlw	1	; select bank2/3
 15069  1BD5  0087               	movwf	7
 15070  1BD6  3000               	movlw	0
 15071  1BD7  1881               	btfsc	1,1
 15072  1BD8  3001               	movlw	1
 15073  1BD9  0020               	movlb	0	; select bank0
 15074  1BDA  00A3               	movwf	getDelayOff_GO@go
 15075                           
 15076                           ;DelayOff_B1.c: 117: return go;
 15077  1BDB  0823               	movf	getDelayOff_GO@go,w
 15078  1BDC  0008               	return
 15079  1BDD                     __end_of_getDelayOff_GO:	
 15080                           
 15081                           	psect	text100
 15082  1C21                     __ptext100:	
 15083 ;; *************** function _getCmd_Status *****************
 15084 ;; Defined at:
 15085 ;;		line 659 in file "../src/Main_B1.c"
 15086 ;; Parameters:    Size  Location     Type
 15087 ;;  number          1    wreg     unsigned char 
 15088 ;; Auto vars:     Size  Location     Type
 15089 ;;  number          1    0[BANK0 ] unsigned char 
 15090 ;;  cmd             1    1[BANK0 ] unsigned char 
 15091 ;; Return value:  Size  Location     Type
 15092 ;;                  1    wreg      unsigned char 
 15093 ;; Registers used:
 15094 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15095 ;; Tracked objects:
 15096 ;;		On entry : 0/0
 15097 ;;		On exit  : 0/0
 15098 ;;		Unchanged: 0/0
 15099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;Total ram usage:        2 bytes
 15105 ;; Hardware stack levels used:    1
 15106 ;; Hardware stack levels required when called:    5
 15107 ;; This function calls:
 15108 ;;		Nothing
 15109 ;; This function is called by:
 15110 ;;		_setDimmerLights_OnOff
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           
 15115                           ;psect for function _getCmd_Status
 15116  1C21                     _getCmd_Status:	
 15117                           
 15118                           ;incstack = 0
 15119                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15120                           ;getCmd_Status@number stored from wreg
 15121  1C21  0020               	movlb	0	; select bank0
 15122  1C22  00A0               	movwf	getCmd_Status@number
 15123                           
 15124                           ;Main_B1.c: 660: char cmd = 0;
 15125  1C23  01A1               	clrf	getCmd_Status@cmd
 15126                           
 15127                           ;Main_B1.c: 661: switch (number) {
 15128  1C24  2C2C               	goto	l9363
 15129  1C25                     l9359:	
 15130                           ;Main_B1.c: 662: case 1:
 15131                           
 15132                           
 15133                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15134  1C25  3000               	movlw	0
 15135  1C26  0021               	movlb	1	; select bank1
 15136  1C27  184B               	btfsc	_Cmd^(0+128),0
 15137  1C28  3001               	movlw	1
 15138  1C29  0020               	movlb	0	; select bank0
 15139  1C2A  00A1               	movwf	getCmd_Status@cmd
 15140                           
 15141                           ;Main_B1.c: 665: }
 15142                           
 15143                           ;Main_B1.c: 664: break;
 15144  1C2B  2C31               	goto	l9365
 15145  1C2C                     l9363:	
 15146  1C2C  0820               	movf	getCmd_Status@number,w
 15147                           
 15148                           ; Switch size 1, requested type "space"
 15149                           ; Number of cases is 1, Range of values is 1 to 1
 15150                           ; switch strategies available:
 15151                           ; Name         Instructions Cycles
 15152                           ; simple_byte            4     3 (average)
 15153                           ; direct_byte           11     9 (fixed)
 15154                           ; jumptable            263     9 (fixed)
 15155                           ;	Chosen strategy is simple_byte
 15156  1C2D  3A01               	xorlw	1	; case 1
 15157  1C2E  1903               	skipnz
 15158  1C2F  2C25               	goto	l9359
 15159  1C30  2C31               	goto	l9365
 15160  1C31                     l9365:	
 15161                           
 15162                           ;Main_B1.c: 666: return cmd;
 15163  1C31  0821               	movf	getCmd_Status@cmd,w
 15164  1C32  0008               	return
 15165  1C33                     __end_of_getCmd_Status:	
 15166                           
 15167                           	psect	text101
 15168  1433                     __ptext101:	
 15169 ;; *************** function _setDimmerLights_Dimming *****************
 15170 ;; Defined at:
 15171 ;;		line 954 in file "../src/Dimmer_B1.c"
 15172 ;; Parameters:    Size  Location     Type
 15173 ;;  lights          1    wreg     unsigned char 
 15174 ;;  status          1   74[BANK0 ] unsigned char 
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;  lights          1   77[BANK0 ] unsigned char 
 15177 ;;  value           1   76[BANK0 ] unsigned char 
 15178 ;; Return value:  Size  Location     Type
 15179 ;;		None               void
 15180 ;; Registers used:
 15181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15182 ;; Tracked objects:
 15183 ;;		On entry : 0/0
 15184 ;;		On exit  : 0/0
 15185 ;;		Unchanged: 0/0
 15186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15187 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;Total ram usage:        4 bytes
 15192 ;; Hardware stack levels used:    1
 15193 ;; Hardware stack levels required when called:    8
 15194 ;; This function calls:
 15195 ;;		_getDimmerIntr_DimmingValue
 15196 ;;		_getDimmerLights_ValueToPercent
 15197 ;;		_setBuz
 15198 ;;		_setDimmerIntr_Dimming_Sw
 15199 ;;		_setDimmerIntr_MaxmumValue
 15200 ;;		_setDimmerLights_Line
 15201 ;;		_setMemory_Modify
 15202 ;;		_setProductData
 15203 ;;		_setRF_DimmerLights
 15204 ;;		_setRF_TransceiveGO
 15205 ;;		_setTxData
 15206 ;; This function is called by:
 15207 ;;		_setDimmerLights_Main
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           
 15212                           ;psect for function _setDimmerLights_Dimming
 15213  1433                     _setDimmerLights_Dimming:	
 15214                           
 15215                           ;incstack = 0
 15216                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15217                           ;setDimmerLights_Dimming@lights stored from wreg
 15218  1433  0020               	movlb	0	; select bank0
 15219  1434  00ED               	movwf	setDimmerLights_Dimming@lights
 15220                           
 15221                           ;Dimmer_B1.c: 955: if (status == 1) {
 15222  1435  086A               	movf	setDimmerLights_Dimming@status,w
 15223  1436  3A01               	xorlw	1
 15224  1437  1D03               	skipz
 15225  1438  2C4C               	goto	l9637
 15226                           
 15227                           ;Dimmer_B1.c: 956: setDimmerIntr_Dimming_Sw(lights, 1);
 15228  1439  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15229  143A  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15230  143B  086D               	movf	setDimmerLights_Dimming@lights,w
 15231  143C  319D  2558  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15232                           
 15233                           ;Dimmer_B1.c: 959: setRF_TransceiveGO(0);
 15234  143F  3000               	movlw	0
 15235  1440  319C  248E  3194   	fcall	_setRF_TransceiveGO
 15236                           
 15237                           ;Dimmer_B1.c: 961: setBuz(1, 100);
 15238  1443  3064               	movlw	100
 15239  1444  0020               	movlb	0	; select bank0
 15240  1445  00A9               	movwf	setBuz@time
 15241  1446  3000               	movlw	0
 15242  1447  00AA               	movwf	setBuz@time+1
 15243  1448  3001               	movlw	1
 15244  1449  3194  2489         	fcall	_setBuz
 15245                           
 15246                           ;Dimmer_B1.c: 962: } else if (status == 0) {
 15247  144B  0008               	return
 15248  144C                     l9637:	
 15249  144C  0020               	movlb	0	; select bank0
 15250  144D  08EA               	movf	setDimmerLights_Dimming@status,f
 15251  144E  1D03               	skipz
 15252  144F  0008               	return
 15253                           
 15254                           ;Dimmer_B1.c: 963: setDimmerIntr_Dimming_Sw(lights, 0);
 15255  1450  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15256  1451  086D               	movf	setDimmerLights_Dimming@lights,w
 15257  1452  319D  2558  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15258                           
 15259                           ;Dimmer_B1.c: 966: Dimmer.Load_Status = 0;
 15260  1455  0022               	movlb	2	; select bank2
 15261  1456  112C               	bcf	_Dimmer^(0+256),2
 15262                           
 15263                           ;Dimmer_B1.c: 967: setDimmerLights_Line(lights);
 15264  1457  0020               	movlb	0	; select bank0
 15265  1458  086D               	movf	setDimmerLights_Dimming@lights,w
 15266  1459  319B  23BB  3194   	fcall	_setDimmerLights_Line
 15267                           
 15268                           ;Dimmer_B1.c: 969: char value = getDimmerIntr_DimmingValue(lights);
 15269  145C  0020               	movlb	0	; select bank0
 15270  145D  086D               	movf	setDimmerLights_Dimming@lights,w
 15271  145E  319B  238C  3194   	fcall	_getDimmerIntr_DimmingValue
 15272  1461  0020               	movlb	0	; select bank0
 15273  1462  00EB               	movwf	??_setDimmerLights_Dimming
 15274  1463  086B               	movf	??_setDimmerLights_Dimming,w
 15275  1464  00EC               	movwf	setDimmerLights_Dimming@value
 15276                           
 15277                           ;Dimmer_B1.c: 970: setDimmerIntr_MaxmumValue(lights, value);
 15278  1465  086C               	movf	setDimmerLights_Dimming@value,w
 15279  1466  00EB               	movwf	??_setDimmerLights_Dimming
 15280  1467  086B               	movf	??_setDimmerLights_Dimming,w
 15281  1468  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15282  1469  086D               	movf	setDimmerLights_Dimming@lights,w
 15283  146A  319B  2310  3194   	fcall	_setDimmerIntr_MaxmumValue
 15284                           
 15285                           ;Dimmer_B1.c: 971: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15286  146D  0020               	movlb	0	; select bank0
 15287  146E  086C               	movf	setDimmerLights_Dimming@value,w
 15288  146F  3196  2660  3194   	fcall	_getDimmerLights_ValueToPercent
 15289  1472  0020               	movlb	0	; select bank0
 15290  1473  00EB               	movwf	??_setDimmerLights_Dimming
 15291  1474  086B               	movf	??_setDimmerLights_Dimming,w
 15292  1475  00E2               	movwf	setProductData@value
 15293  1476  086D               	movf	setDimmerLights_Dimming@lights,w
 15294  1477  3E14               	addlw	20
 15295  1478  319B  2304  3194   	fcall	_setProductData
 15296                           
 15297                           ;Dimmer_B1.c: 978: setMemory_Modify(1);
 15298  147B  3001               	movlw	1
 15299  147C  319C  247B  3194   	fcall	_setMemory_Modify
 15300                           
 15301                           ;Dimmer_B1.c: 982: setRF_DimmerLights(lights, 1);
 15302  147F  0020               	movlb	0	; select bank0
 15303  1480  01E5               	clrf	setRF_DimmerLights@on
 15304  1481  0AE5               	incf	setRF_DimmerLights@on,f
 15305  1482  086D               	movf	setDimmerLights_Dimming@lights,w
 15306  1483  3196  26C5  3194   	fcall	_setRF_DimmerLights
 15307                           
 15308                           ;Dimmer_B1.c: 983: setTxData();
 15309  1486  318E  2682         	fcall	_setTxData
 15310  1488  0008               	return
 15311  1489                     __end_of_setDimmerLights_Dimming:	
 15312                           
 15313                           	psect	text102
 15314  0E82                     __ptext102:	
 15315 ;; *************** function _setTxData *****************
 15316 ;; Defined at:
 15317 ;;		line 183 in file "../src/RF_Control_B1.c"
 15318 ;; Parameters:    Size  Location     Type
 15319 ;;		None
 15320 ;; Auto vars:     Size  Location     Type
 15321 ;;  i               1    0        unsigned char 
 15322 ;; Return value:  Size  Location     Type
 15323 ;;		None               void
 15324 ;; Registers used:
 15325 ;;		wreg, fsr1l, fsr1h, status,2
 15326 ;; Tracked objects:
 15327 ;;		On entry : 0/0
 15328 ;;		On exit  : 0/0
 15329 ;;		Unchanged: 0/0
 15330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;Total ram usage:        1 bytes
 15336 ;; Hardware stack levels used:    1
 15337 ;; Hardware stack levels required when called:    5
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		_setDimmerLights_OnOff
 15342 ;;		_setDimmerLights_Dimming
 15343 ;;		_my_MainTimer
 15344 ;;		_getRxData
 15345 ;;		_setControl_Lights_Table
 15346 ;;		_setRFSW_Control
 15347 ;;		_setRFSW_AdjControl
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           
 15352                           ;psect for function _setTxData
 15353  0E82                     _setTxData:	
 15354                           
 15355                           ;RF_Control_B1.c: 184: char i;
 15356                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15357                           
 15358                           ;incstack = 0
 15359                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15360  0E82  0021               	movlb	1	; select bank1
 15361  0E83  1C20               	btfss	_RF1^(0+128),0
 15362  0E84  0008               	return
 15363                           
 15364                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15365  0E85  1520               	bsf	_RF1^(0+128),2
 15366                           
 15367                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15368  0E86  01A3               	clrf	(_RF1^(0+128)+3)
 15369  0E87  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15370                           
 15371                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15372  0E88  3063               	movlw	99
 15373  0E89  0020               	movlb	0	; select bank0
 15374  0E8A  00A0               	movwf	??_setTxData
 15375  0E8B  0820               	movf	??_setTxData,w
 15376  0E8C  0023               	movlb	3	; select bank3
 15377  0E8D  00A0               	movwf	_RF_Data^(0+384)
 15378                           
 15379                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15380  0E8E  3002               	movlw	2
 15381  0E8F  0020               	movlb	0	; select bank0
 15382  0E90  00A0               	movwf	??_setTxData
 15383  0E91  0820               	movf	??_setTxData,w
 15384  0E92  0023               	movlb	3	; select bank3
 15385  0E93  00A1               	movwf	(_RF_Data^(0+384)+1)
 15386                           
 15387                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15388  0E94  0021               	movlb	1	; select bank1
 15389  0E95  086C               	movf	_product^(0+128),w
 15390  0E96  0086               	movwf	6
 15391  0E97  3002               	movlw	2	; select bank4/5
 15392  0E98  0087               	movwf	7
 15393  0E99  3002               	movlw	2	; select bank4/5
 15394  0E9A  3F42               	moviw [2]fsr1
 15395  0E9B  0023               	movlb	3	; select bank3
 15396  0E9C  00A2               	movwf	(_RF_Data^(0+384)+2)
 15397                           
 15398                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15399  0E9D  0021               	movlb	1	; select bank1
 15400  0E9E  086C               	movf	_product^(0+128),w
 15401  0E9F  0086               	movwf	6
 15402  0EA0  3002               	movlw	2	; select bank4/5
 15403  0EA1  0087               	movwf	7
 15404  0EA2  3002               	movlw	2	; select bank4/5
 15405  0EA3  3F43               	moviw [3]fsr1
 15406  0EA4  0023               	movlb	3	; select bank3
 15407  0EA5  00A3               	movwf	(_RF_Data^(0+384)+3)
 15408                           
 15409                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15410  0EA6  0021               	movlb	1	; select bank1
 15411  0EA7  086C               	movf	_product^(0+128),w
 15412  0EA8  0086               	movwf	6
 15413  0EA9  3002               	movlw	2	; select bank4/5
 15414  0EAA  0087               	movwf	7
 15415  0EAB  3002               	movlw	2	; select bank4/5
 15416  0EAC  3F44               	moviw [4]fsr1
 15417  0EAD  0023               	movlb	3	; select bank3
 15418  0EAE  00A4               	movwf	(_RF_Data^(0+384)+4)
 15419                           
 15420                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15421  0EAF  0021               	movlb	1	; select bank1
 15422  0EB0  086C               	movf	_product^(0+128),w
 15423  0EB1  0086               	movwf	6
 15424  0EB2  3002               	movlw	2	; select bank4/5
 15425  0EB3  0087               	movwf	7
 15426  0EB4  3002               	movlw	2	; select bank4/5
 15427  0EB5  3F45               	moviw [5]fsr1
 15428  0EB6  0023               	movlb	3	; select bank3
 15429  0EB7  00A5               	movwf	(_RF_Data^(0+384)+5)
 15430                           
 15431                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15432  0EB8  0021               	movlb	1	; select bank1
 15433  0EB9  086C               	movf	_product^(0+128),w
 15434  0EBA  0086               	movwf	6
 15435  0EBB  3002               	movlw	2	; select bank4/5
 15436  0EBC  0087               	movwf	7
 15437  0EBD  3002               	movlw	2	; select bank4/5
 15438  0EBE  3F46               	moviw [6]fsr1
 15439  0EBF  0023               	movlb	3	; select bank3
 15440  0EC0  00A6               	movwf	(_RF_Data^(0+384)+6)
 15441                           
 15442                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15443  0EC1  0021               	movlb	1	; select bank1
 15444  0EC2  086C               	movf	_product^(0+128),w
 15445  0EC3  0086               	movwf	6
 15446  0EC4  3002               	movlw	2	; select bank4/5
 15447  0EC5  0087               	movwf	7
 15448  0EC6  3002               	movlw	2	; select bank4/5
 15449  0EC7  3F47               	moviw [7]fsr1
 15450  0EC8  0023               	movlb	3	; select bank3
 15451  0EC9  00A7               	movwf	(_RF_Data^(0+384)+7)
 15452                           
 15453                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15454  0ECA  0021               	movlb	1	; select bank1
 15455  0ECB  086C               	movf	_product^(0+128),w
 15456  0ECC  0086               	movwf	6
 15457  0ECD  3002               	movlw	2	; select bank4/5
 15458  0ECE  0087               	movwf	7
 15459  0ECF  3002               	movlw	2	; select bank4/5
 15460  0ED0  3F48               	moviw [8]fsr1
 15461  0ED1  0023               	movlb	3	; select bank3
 15462  0ED2  00A8               	movwf	(_RF_Data^(0+384)+8)
 15463                           
 15464                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15465  0ED3  0021               	movlb	1	; select bank1
 15466  0ED4  086C               	movf	_product^(0+128),w
 15467  0ED5  0086               	movwf	6
 15468  0ED6  3002               	movlw	2	; select bank4/5
 15469  0ED7  0087               	movwf	7
 15470  0ED8  3002               	movlw	2	; select bank4/5
 15471  0ED9  3F49               	moviw [9]fsr1
 15472  0EDA  0023               	movlb	3	; select bank3
 15473  0EDB  00A9               	movwf	(_RF_Data^(0+384)+9)
 15474                           
 15475                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15476  0EDC  0021               	movlb	1	; select bank1
 15477  0EDD  086C               	movf	_product^(0+128),w
 15478  0EDE  0086               	movwf	6
 15479  0EDF  3002               	movlw	2	; select bank4/5
 15480  0EE0  0087               	movwf	7
 15481  0EE1  3002               	movlw	2	; select bank4/5
 15482  0EE2  3F4A               	moviw [10]fsr1
 15483  0EE3  0023               	movlb	3	; select bank3
 15484  0EE4  00AA               	movwf	(_RF_Data^(0+384)+10)
 15485                           
 15486                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15487  0EE5  0021               	movlb	1	; select bank1
 15488  0EE6  086C               	movf	_product^(0+128),w
 15489  0EE7  0086               	movwf	6
 15490  0EE8  3002               	movlw	2	; select bank4/5
 15491  0EE9  0087               	movwf	7
 15492  0EEA  3002               	movlw	2	; select bank4/5
 15493  0EEB  3F4B               	moviw [11]fsr1
 15494  0EEC  0023               	movlb	3	; select bank3
 15495  0EED  00AB               	movwf	(_RF_Data^(0+384)+11)
 15496                           
 15497                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15498  0EEE  0021               	movlb	1	; select bank1
 15499  0EEF  086C               	movf	_product^(0+128),w
 15500  0EF0  0086               	movwf	6
 15501  0EF1  3002               	movlw	2	; select bank4/5
 15502  0EF2  0087               	movwf	7
 15503  0EF3  3002               	movlw	2	; select bank4/5
 15504  0EF4  3F4C               	moviw [12]fsr1
 15505  0EF5  0023               	movlb	3	; select bank3
 15506  0EF6  00AC               	movwf	(_RF_Data^(0+384)+12)
 15507                           
 15508                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15509  0EF7  0021               	movlb	1	; select bank1
 15510  0EF8  086C               	movf	_product^(0+128),w
 15511  0EF9  0086               	movwf	6
 15512  0EFA  3002               	movlw	2	; select bank4/5
 15513  0EFB  0087               	movwf	7
 15514  0EFC  3002               	movlw	2	; select bank4/5
 15515  0EFD  3F4D               	moviw [13]fsr1
 15516  0EFE  0023               	movlb	3	; select bank3
 15517  0EFF  00AD               	movwf	(_RF_Data^(0+384)+13)
 15518                           
 15519                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15520  0F00  0021               	movlb	1	; select bank1
 15521  0F01  086C               	movf	_product^(0+128),w
 15522  0F02  0086               	movwf	6
 15523  0F03  3002               	movlw	2	; select bank4/5
 15524  0F04  0087               	movwf	7
 15525  0F05  3002               	movlw	2	; select bank4/5
 15526  0F06  3F4E               	moviw [14]fsr1
 15527  0F07  0023               	movlb	3	; select bank3
 15528  0F08  00AE               	movwf	(_RF_Data^(0+384)+14)
 15529                           
 15530                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15531  0F09  0021               	movlb	1	; select bank1
 15532  0F0A  086C               	movf	_product^(0+128),w
 15533  0F0B  0086               	movwf	6
 15534  0F0C  3002               	movlw	2	; select bank4/5
 15535  0F0D  0087               	movwf	7
 15536  0F0E  3002               	movlw	2	; select bank4/5
 15537  0F0F  3F4F               	moviw [15]fsr1
 15538  0F10  0023               	movlb	3	; select bank3
 15539  0F11  00AF               	movwf	(_RF_Data^(0+384)+15)
 15540                           
 15541                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15542  0F12  0021               	movlb	1	; select bank1
 15543  0F13  086C               	movf	_product^(0+128),w
 15544  0F14  0086               	movwf	6
 15545  0F15  3002               	movlw	2	; select bank4/5
 15546  0F16  0087               	movwf	7
 15547  0F17  3002               	movlw	2	; select bank4/5
 15548  0F18  3F50               	moviw [16]fsr1
 15549  0F19  0023               	movlb	3	; select bank3
 15550  0F1A  00B0               	movwf	(_RF_Data^(0+384)+16)
 15551                           
 15552                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15553  0F1B  0021               	movlb	1	; select bank1
 15554  0F1C  086C               	movf	_product^(0+128),w
 15555  0F1D  0086               	movwf	6
 15556  0F1E  3002               	movlw	2	; select bank4/5
 15557  0F1F  0087               	movwf	7
 15558  0F20  3002               	movlw	2	; select bank4/5
 15559  0F21  3F51               	moviw [17]fsr1
 15560  0F22  0023               	movlb	3	; select bank3
 15561  0F23  00B1               	movwf	(_RF_Data^(0+384)+17)
 15562                           
 15563                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15564  0F24  0021               	movlb	1	; select bank1
 15565  0F25  086C               	movf	_product^(0+128),w
 15566  0F26  0086               	movwf	6
 15567  0F27  3002               	movlw	2	; select bank4/5
 15568  0F28  0087               	movwf	7
 15569  0F29  3002               	movlw	2	; select bank4/5
 15570  0F2A  3F52               	moviw [18]fsr1
 15571  0F2B  0023               	movlb	3	; select bank3
 15572  0F2C  00B2               	movwf	(_RF_Data^(0+384)+18)
 15573                           
 15574                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15575  0F2D  0021               	movlb	1	; select bank1
 15576  0F2E  086C               	movf	_product^(0+128),w
 15577  0F2F  0086               	movwf	6
 15578  0F30  3002               	movlw	2	; select bank4/5
 15579  0F31  0087               	movwf	7
 15580  0F32  3002               	movlw	2	; select bank4/5
 15581  0F33  3F53               	moviw [19]fsr1
 15582  0F34  0023               	movlb	3	; select bank3
 15583  0F35  00B3               	movwf	(_RF_Data^(0+384)+19)
 15584                           
 15585                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15586  0F36  30D1               	movlw	209
 15587  0F37  0020               	movlb	0	; select bank0
 15588  0F38  00A0               	movwf	??_setTxData
 15589  0F39  0820               	movf	??_setTxData,w
 15590  0F3A  0023               	movlb	3	; select bank3
 15591  0F3B  00B4               	movwf	(_RF_Data^(0+384)+20)
 15592  0F3C  0008               	return
 15593  0F3D                     __end_of_setTxData:	
 15594                           
 15595                           	psect	text103
 15596  1C8E                     __ptext103:	
 15597 ;; *************** function _setRF_TransceiveGO *****************
 15598 ;; Defined at:
 15599 ;;		line 506 in file "../src/RF_Control_B1.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  command         1    wreg     unsigned char 
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;  command         1    1[BANK0 ] unsigned char 
 15604 ;; Return value:  Size  Location     Type
 15605 ;;		None               void
 15606 ;; Registers used:
 15607 ;;		wreg, status,2, status,0
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;Total ram usage:        2 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    5
 15620 ;; This function calls:
 15621 ;;		Nothing
 15622 ;; This function is called by:
 15623 ;;		_setDimmerLights_Dimming
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           
 15628                           ;psect for function _setRF_TransceiveGO
 15629  1C8E                     _setRF_TransceiveGO:	
 15630                           
 15631                           ;incstack = 0
 15632                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15633                           ;setRF_TransceiveGO@command stored from wreg
 15634  1C8E  0020               	movlb	0	; select bank0
 15635  1C8F  00A1               	movwf	setRF_TransceiveGO@command
 15636                           
 15637                           ;RF_Control_B1.c: 507: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15638  1C90  0821               	movf	setRF_TransceiveGO@command,w
 15639  1C91  3A01               	xorlw	1
 15640  1C92  3000               	movlw	0
 15641  1C93  1903               	skipnz
 15642  1C94  3001               	movlw	1
 15643  1C95  00A0               	movwf	??_setRF_TransceiveGO
 15644  1C96  0DA0               	rlf	??_setRF_TransceiveGO,f
 15645  1C97  0DA0               	rlf	??_setRF_TransceiveGO,f
 15646  1C98  0021               	movlb	1	; select bank1
 15647  1C99  0820               	movf	_RF1^(0+128),w
 15648  1C9A  0020               	movlb	0	; select bank0
 15649  1C9B  0620               	xorwf	??_setRF_TransceiveGO,w
 15650  1C9C  39FB               	andlw	-5
 15651  1C9D  0620               	xorwf	??_setRF_TransceiveGO,w
 15652  1C9E  0021               	movlb	1	; select bank1
 15653  1C9F  00A0               	movwf	_RF1^(0+128)
 15654  1CA0  0008               	return
 15655  1CA1                     __end_of_setRF_TransceiveGO:	
 15656                           
 15657                           	psect	text104
 15658  16C5                     __ptext104:	
 15659 ;; *************** function _setRF_DimmerLights *****************
 15660 ;; Defined at:
 15661 ;;		line 491 in file "../src/RF_Control_B1.c"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;  lights          1    wreg     unsigned char 
 15664 ;;  on              1   69[BANK0 ] unsigned char 
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;  lights          1   73[BANK0 ] unsigned char 
 15667 ;;  status          1   72[BANK0 ] unsigned char 
 15668 ;; Return value:  Size  Location     Type
 15669 ;;		None               void
 15670 ;; Registers used:
 15671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;Total ram usage:        5 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    6
 15684 ;; This function calls:
 15685 ;;		_setProductData
 15686 ;; This function is called by:
 15687 ;;		_setDimmerLights_OnOff
 15688 ;;		_setDimmerLights_Dimming
 15689 ;;		_setRFSW_Control
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           
 15694                           ;psect for function _setRF_DimmerLights
 15695  16C5                     _setRF_DimmerLights:	
 15696                           
 15697                           ;incstack = 0
 15698                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15699                           ;setRF_DimmerLights@lights stored from wreg
 15700  16C5  0020               	movlb	0	; select bank0
 15701  16C6  00E9               	movwf	setRF_DimmerLights@lights
 15702                           
 15703                           ;RF_Control_B1.c: 492: char status = 1;
 15704  16C7  01E8               	clrf	setRF_DimmerLights@status
 15705  16C8  0AE8               	incf	setRF_DimmerLights@status,f
 15706                           
 15707                           ;RF_Control_B1.c: 493: status <<= (lights - 1);
 15708  16C9  0869               	movf	setRF_DimmerLights@lights,w
 15709  16CA  3EFF               	addlw	-1
 15710  16CB  0A89               	incf	9,f
 15711  16CC  2ECF               	goto	u9680
 15712  16CD                     u9685:	
 15713  16CD  1003               	clrc
 15714  16CE  0DE8               	rlf	setRF_DimmerLights@status,f
 15715  16CF                     u9680:	
 15716  16CF  3EFF               	addlw	-1
 15717  16D0  1D03               	skipz
 15718  16D1  2ECD               	goto	u9685
 15719                           
 15720                           ;RF_Control_B1.c: 494: setProductData(11, lights);
 15721  16D2  0869               	movf	setRF_DimmerLights@lights,w
 15722  16D3  00E6               	movwf	??_setRF_DimmerLights
 15723  16D4  0866               	movf	??_setRF_DimmerLights,w
 15724  16D5  00E2               	movwf	setProductData@value
 15725  16D6  300B               	movlw	11
 15726  16D7  319B  2304  3196   	fcall	_setProductData
 15727                           
 15728                           ;RF_Control_B1.c: 495: setProductData(17, product->Data[26 + lights]);
 15729  16DA  0020               	movlb	0	; select bank0
 15730  16DB  0869               	movf	setRF_DimmerLights@lights,w
 15731  16DC  3E1A               	addlw	26
 15732  16DD  0021               	movlb	1	; select bank1
 15733  16DE  076C               	addwf	_product^(0+128),w
 15734  16DF  0020               	movlb	0	; select bank0
 15735  16E0  00E6               	movwf	??_setRF_DimmerLights
 15736  16E1  0866               	movf	??_setRF_DimmerLights,w
 15737  16E2  0086               	movwf	6
 15738  16E3  3002               	movlw	2	; select bank4/5
 15739  16E4  0087               	movwf	7
 15740  16E5  0801               	movf	1,w
 15741  16E6  00E7               	movwf	??_setRF_DimmerLights+1
 15742  16E7  0867               	movf	??_setRF_DimmerLights+1,w
 15743  16E8  00E2               	movwf	setProductData@value
 15744  16E9  3011               	movlw	17
 15745  16EA  319B  2304  3196   	fcall	_setProductData
 15746                           
 15747                           ;RF_Control_B1.c: 496: if (on == 1) {
 15748  16ED  0020               	movlb	0	; select bank0
 15749  16EE  0865               	movf	setRF_DimmerLights@on,w
 15750  16EF  3A01               	xorlw	1
 15751  16F0  1D03               	skipz
 15752  16F1  2F14               	goto	l8961
 15753                           
 15754                           ;RF_Control_B1.c: 497: setProductData(9, product->Data[20 + lights]);
 15755  16F2  0869               	movf	setRF_DimmerLights@lights,w
 15756  16F3  3E14               	addlw	20
 15757  16F4  0021               	movlb	1	; select bank1
 15758  16F5  076C               	addwf	_product^(0+128),w
 15759  16F6  0020               	movlb	0	; select bank0
 15760  16F7  00E6               	movwf	??_setRF_DimmerLights
 15761  16F8  0866               	movf	??_setRF_DimmerLights,w
 15762  16F9  0086               	movwf	6
 15763  16FA  3002               	movlw	2	; select bank4/5
 15764  16FB  0087               	movwf	7
 15765  16FC  0801               	movf	1,w
 15766  16FD  00E7               	movwf	??_setRF_DimmerLights+1
 15767  16FE  0867               	movf	??_setRF_DimmerLights+1,w
 15768  16FF  00E2               	movwf	setProductData@value
 15769  1700  3009               	movlw	9
 15770  1701  319B  2304  3196   	fcall	_setProductData
 15771                           
 15772                           ;RF_Control_B1.c: 498: setProductData(15, (product->Data[15] | status));
 15773  1704  0021               	movlb	1	; select bank1
 15774  1705  086C               	movf	_product^(0+128),w
 15775  1706  3E0F               	addlw	15
 15776  1707  0086               	movwf	6
 15777  1708  3002               	movlw	2	; select bank4/5
 15778  1709  0087               	movwf	7
 15779  170A  0801               	movf	1,w
 15780  170B  0020               	movlb	0	; select bank0
 15781  170C  0468               	iorwf	setRF_DimmerLights@status,w
 15782  170D  00E6               	movwf	??_setRF_DimmerLights
 15783  170E  0866               	movf	??_setRF_DimmerLights,w
 15784  170F  00E2               	movwf	setProductData@value
 15785  1710  300F               	movlw	15
 15786  1711  319B  2304         	fcall	_setProductData
 15787                           
 15788                           ;RF_Control_B1.c: 499: } else {
 15789  1713  0008               	return
 15790  1714                     l8961:	
 15791                           
 15792                           ;RF_Control_B1.c: 500: setProductData(9, 0x00);
 15793  1714  0020               	movlb	0	; select bank0
 15794  1715  01E2               	clrf	setProductData@value
 15795  1716  3009               	movlw	9
 15796  1717  319B  2304  3196   	fcall	_setProductData
 15797                           
 15798                           ;RF_Control_B1.c: 501: setProductData(15, (product->Data[15]&(~status)));
 15799  171A  0021               	movlb	1	; select bank1
 15800  171B  086C               	movf	_product^(0+128),w
 15801  171C  3E0F               	addlw	15
 15802  171D  0086               	movwf	6
 15803  171E  3002               	movlw	2	; select bank4/5
 15804  171F  0087               	movwf	7
 15805  1720  0020               	movlb	0	; select bank0
 15806  1721  0968               	comf	setRF_DimmerLights@status,w
 15807  1722  0501               	andwf	1,w
 15808  1723  00E6               	movwf	??_setRF_DimmerLights
 15809  1724  0866               	movf	??_setRF_DimmerLights,w
 15810  1725  00E2               	movwf	setProductData@value
 15811  1726  300F               	movlw	15
 15812  1727  319B  2304         	fcall	_setProductData
 15813  1729  0008               	return
 15814  172A                     __end_of_setRF_DimmerLights:	
 15815                           
 15816                           	psect	text105
 15817  1BBB                     __ptext105:	
 15818 ;; *************** function _setDimmerLights_Line *****************
 15819 ;; Defined at:
 15820 ;;		line 1028 in file "../src/Dimmer_B1.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;  lights          1    wreg     unsigned char 
 15823 ;; Auto vars:     Size  Location     Type
 15824 ;;  lights          1    0[BANK0 ] unsigned char 
 15825 ;; Return value:  Size  Location     Type
 15826 ;;		None               void
 15827 ;; Registers used:
 15828 ;;		wreg
 15829 ;; Tracked objects:
 15830 ;;		On entry : 0/0
 15831 ;;		On exit  : 0/0
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;Total ram usage:        1 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; Hardware stack levels required when called:    5
 15841 ;; This function calls:
 15842 ;;		Nothing
 15843 ;; This function is called by:
 15844 ;;		_setDimmerLights_OnOff
 15845 ;;		_setDimmerLights_Dimming
 15846 ;; This function uses a non-reentrant model
 15847 ;;
 15848                           
 15849                           
 15850                           ;psect for function _setDimmerLights_Line
 15851  1BBB                     _setDimmerLights_Line:	
 15852                           
 15853                           ;incstack = 0
 15854                           ; Regs used in _setDimmerLights_Line: [wreg]
 15855                           ;setDimmerLights_Line@lights stored from wreg
 15856  1BBB  0020               	movlb	0	; select bank0
 15857  1BBC  00A0               	movwf	setDimmerLights_Line@lights
 15858                           
 15859                           ;Dimmer_B1.c: 1029: Dimmer.LoadGO = 1;
 15860  1BBD  0022               	movlb	2	; select bank2
 15861  1BBE  14AC               	bsf	_Dimmer^(0+256),1
 15862                           
 15863                           ;Dimmer_B1.c: 1031: DimmerLights1.Line = 0;
 15864  1BBF  10DF               	bcf	(_DimmerLights1^(0+256)+1),1
 15865                           
 15866                           ;Dimmer_B1.c: 1032: if (lights == 1 && lights != 0) {
 15867  1BC0  0020               	movlb	0	; select bank0
 15868  1BC1  0820               	movf	setDimmerLights_Line@lights,w
 15869  1BC2  3A01               	xorlw	1
 15870  1BC3  1D03               	skipz
 15871  1BC4  0008               	return
 15872  1BC5  0820               	movf	setDimmerLights_Line@lights,w
 15873  1BC6  1903               	btfsc	3,2
 15874  1BC7  0008               	return
 15875                           
 15876                           ;Dimmer_B1.c: 1033: DimmerLights1.Line = 1;
 15877  1BC8  0022               	movlb	2	; select bank2
 15878  1BC9  14DF               	bsf	(_DimmerLights1^(0+256)+1),1
 15879  1BCA  0020               	movlb	0	; select bank0
 15880  1BCB  0008               	return
 15881  1BCC                     __end_of_setDimmerLights_Line:	
 15882                           
 15883                           	psect	text106
 15884  1B10                     __ptext106:	
 15885 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15886 ;; Defined at:
 15887 ;;		line 132 in file "../src/Dimmer_B1.c"
 15888 ;; Parameters:    Size  Location     Type
 15889 ;;  lights          1    wreg     unsigned char 
 15890 ;;  value           1   66[BANK0 ] unsigned char 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  lights          1   68[BANK0 ] unsigned char 
 15893 ;; Return value:  Size  Location     Type
 15894 ;;		None               void
 15895 ;; Registers used:
 15896 ;;		wreg
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15906 ;;Total ram usage:        3 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:    5
 15909 ;; This function calls:
 15910 ;;		Nothing
 15911 ;; This function is called by:
 15912 ;;		_setDimmerLights_OnOff
 15913 ;;		_setDimmerLights_Dimming
 15914 ;;		_setRFSW_AdjControl
 15915 ;; This function uses a non-reentrant model
 15916 ;;
 15917                           
 15918                           
 15919                           ;psect for function _setDimmerIntr_MaxmumValue
 15920  1B10                     _setDimmerIntr_MaxmumValue:	
 15921                           
 15922                           ;incstack = 0
 15923                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15924                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15925  1B10  0020               	movlb	0	; select bank0
 15926  1B11  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15927                           
 15928                           ;Dimmer_B1.c: 134: if (lights == 1) {
 15929  1B12  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15930  1B13  3A01               	xorlw	1
 15931  1B14  1D03               	skipz
 15932  1B15  0008               	return
 15933                           
 15934                           ;Dimmer_B1.c: 135: DimmerIntr1.MaxmumValue = value;
 15935  1B16  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15936  1B17  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15937  1B18  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15938  1B19  0021               	movlb	1	; select bank1
 15939  1B1A  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 15940  1B1B  0008               	return
 15941  1B1C                     __end_of_setDimmerIntr_MaxmumValue:	
 15942                           
 15943                           	psect	text107
 15944  1D58                     __ptext107:	
 15945 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15946 ;; Defined at:
 15947 ;;		line 209 in file "../src/Dimmer_B1.c"
 15948 ;; Parameters:    Size  Location     Type
 15949 ;;  lights          1    wreg     unsigned char 
 15950 ;;  command         1    0[BANK0 ] unsigned char 
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;  lights          1    2[BANK0 ] unsigned char 
 15953 ;; Return value:  Size  Location     Type
 15954 ;;		None               void
 15955 ;; Registers used:
 15956 ;;		wreg, status,2, status,0
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15962 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;Total ram usage:        3 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    5
 15969 ;; This function calls:
 15970 ;;		Nothing
 15971 ;; This function is called by:
 15972 ;;		_setDimmerLights_Dimming
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           
 15977                           ;psect for function _setDimmerIntr_Dimming_Sw
 15978  1D58                     _setDimmerIntr_Dimming_Sw:	
 15979                           
 15980                           ;incstack = 0
 15981                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15982                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15983  1D58  0020               	movlb	0	; select bank0
 15984  1D59  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15985                           
 15986                           ;Dimmer_B1.c: 211: if (lights == 1) {
 15987  1D5A  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15988  1D5B  3A01               	xorlw	1
 15989  1D5C  1D03               	skipz
 15990  1D5D  0008               	return
 15991                           
 15992                           ;Dimmer_B1.c: 212: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15993  1D5E  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15994  1D5F  3A01               	xorlw	1
 15995  1D60  3000               	movlw	0
 15996  1D61  1903               	skipnz
 15997  1D62  3001               	movlw	1
 15998  1D63  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15999  1D64  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16000  1D65  0021               	movlb	1	; select bank1
 16001  1D66  083C               	movf	_DimmerIntr1^(0+128),w
 16002  1D67  0020               	movlb	0	; select bank0
 16003  1D68  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16004  1D69  39EF               	andlw	-17
 16005  1D6A  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16006  1D6B  0021               	movlb	1	; select bank1
 16007  1D6C  00BC               	movwf	_DimmerIntr1^(0+128)
 16008  1D6D  0008               	return
 16009  1D6E                     __end_of_setDimmerIntr_Dimming_Sw:	
 16010                           
 16011                           	psect	text108
 16012  1B8C                     __ptext108:	
 16013 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16014 ;; Defined at:
 16015 ;;		line 110 in file "../src/Dimmer_B1.c"
 16016 ;; Parameters:    Size  Location     Type
 16017 ;;  lights          1    wreg     unsigned char 
 16018 ;; Auto vars:     Size  Location     Type
 16019 ;;  lights          1    1[BANK0 ] unsigned char 
 16020 ;;  value           1    2[BANK0 ] unsigned char 
 16021 ;; Return value:  Size  Location     Type
 16022 ;;                  1    wreg      unsigned char 
 16023 ;; Registers used:
 16024 ;;		wreg, status,2
 16025 ;; Tracked objects:
 16026 ;;		On entry : 0/0
 16027 ;;		On exit  : 0/0
 16028 ;;		Unchanged: 0/0
 16029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;Total ram usage:        3 bytes
 16035 ;; Hardware stack levels used:    1
 16036 ;; Hardware stack levels required when called:    5
 16037 ;; This function calls:
 16038 ;;		Nothing
 16039 ;; This function is called by:
 16040 ;;		_setDimmerLights_Dimming
 16041 ;; This function uses a non-reentrant model
 16042 ;;
 16043                           
 16044                           
 16045                           ;psect for function _getDimmerIntr_DimmingValue
 16046  1B8C                     _getDimmerIntr_DimmingValue:	
 16047                           
 16048                           ;incstack = 0
 16049                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16050                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16051  1B8C  0020               	movlb	0	; select bank0
 16052  1B8D  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16053                           
 16054                           ;Dimmer_B1.c: 111: char value = 0;
 16055  1B8E  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16056                           
 16057                           ;Dimmer_B1.c: 113: if (lights == 1) {
 16058  1B8F  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16059  1B90  3A01               	xorlw	1
 16060  1B91  1D03               	skipz
 16061  1B92  2B99               	goto	l690
 16062                           
 16063                           ;Dimmer_B1.c: 114: value = DimmerIntr1.DimmingValue;
 16064  1B93  0021               	movlb	1	; select bank1
 16065  1B94  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16066  1B95  0020               	movlb	0	; select bank0
 16067  1B96  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16068  1B97  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16069  1B98  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16070  1B99                     l690:	
 16071                           
 16072                           ;Dimmer_B1.c: 115: }
 16073                           ;Dimmer_B1.c: 127: return value;
 16074  1B99  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16075  1B9A  0008               	return
 16076  1B9B                     __end_of_getDimmerIntr_DimmingValue:	
 16077                           
 16078                           	psect	text109
 16079  1D42                     __ptext109:	
 16080 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16081 ;; Defined at:
 16082 ;;		line 989 in file "../src/Dimmer_B1.c"
 16083 ;; Parameters:    Size  Location     Type
 16084 ;;  lights          1    wreg     unsigned char 
 16085 ;; Auto vars:     Size  Location     Type
 16086 ;;  lights          1    0[COMMON] unsigned char 
 16087 ;;  allow           1    2[BANK0 ] unsigned char 
 16088 ;; Return value:  Size  Location     Type
 16089 ;;                  1    wreg      unsigned char 
 16090 ;; Registers used:
 16091 ;;		wreg, status,2, pclath, cstack
 16092 ;; Tracked objects:
 16093 ;;		On entry : 0/0
 16094 ;;		On exit  : 0/0
 16095 ;;		Unchanged: 0/0
 16096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;Total ram usage:        3 bytes
 16102 ;; Hardware stack levels used:    1
 16103 ;; Hardware stack levels required when called:    6
 16104 ;; This function calls:
 16105 ;;		_getLoad_OK
 16106 ;; This function is called by:
 16107 ;;		_setDimmerLights_Main
 16108 ;; This function uses a non-reentrant model
 16109 ;;
 16110                           
 16111                           
 16112                           ;psect for function _getDimmerLights_Allow_Condition
 16113  1D42                     _getDimmerLights_Allow_Condition:	
 16114                           
 16115                           ;Dimmer_B1.c: 990: char allow = 0;
 16116                           
 16117                           ;incstack = 0
 16118                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16119  1D42  0020               	movlb	0	; select bank0
 16120  1D43  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16121                           
 16122                           ;Dimmer_B1.c: 996: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16123  1D44  01A3               	clrf	_getDimmerLights_Allow_Condition$2285
 16124  1D45  0AA3               	incf	_getDimmerLights_Allow_Condition$2285,f
 16125  1D46  319A  2278  319D   	fcall	_getLoad_OK
 16126  1D49  3800               	iorlw	0
 16127  1D4A  1D03               	skipz
 16128  1D4B  2D51               	goto	l9573
 16129  1D4C  0022               	movlb	2	; select bank2
 16130  1D4D  18AC               	btfsc	_Dimmer^(0+256),1
 16131  1D4E  2D51               	goto	l9573
 16132  1D4F  0020               	movlb	0	; select bank0
 16133  1D50  01A3               	clrf	_getDimmerLights_Allow_Condition$2285
 16134  1D51                     l9573:	
 16135  1D51  0020               	movlb	0	; select bank0
 16136  1D52  0823               	movf	_getDimmerLights_Allow_Condition$2285,w
 16137  1D53  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16138  1D54  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16139  1D55  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16140                           
 16141                           ;Dimmer_B1.c: 1023: return allow;
 16142  1D56  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16143  1D57  0008               	return
 16144  1D58                     __end_of_getDimmerLights_Allow_Condition:	
 16145                           
 16146                           	psect	text110
 16147  1A78                     __ptext110:	
 16148 ;; *************** function _getLoad_OK *****************
 16149 ;; Defined at:
 16150 ;;		line 274 in file "../src/OverLoad_B1.c"
 16151 ;; Parameters:    Size  Location     Type
 16152 ;;		None
 16153 ;; Auto vars:     Size  Location     Type
 16154 ;;  ok              1    0[BANK0 ] unsigned char 
 16155 ;; Return value:  Size  Location     Type
 16156 ;;                  1    wreg      unsigned char 
 16157 ;; Registers used:
 16158 ;;		wreg, status,2
 16159 ;; Tracked objects:
 16160 ;;		On entry : 0/0
 16161 ;;		On exit  : 0/0
 16162 ;;		Unchanged: 0/0
 16163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;Total ram usage:        1 bytes
 16169 ;; Hardware stack levels used:    1
 16170 ;; Hardware stack levels required when called:    5
 16171 ;; This function calls:
 16172 ;;		Nothing
 16173 ;; This function is called by:
 16174 ;;		_DimmerLights_Main
 16175 ;;		_getDimmerLights_Allow_Condition
 16176 ;; This function uses a non-reentrant model
 16177 ;;
 16178                           
 16179                           
 16180                           ;psect for function _getLoad_OK
 16181  1A78                     _getLoad_OK:	
 16182                           
 16183                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16184                           
 16185                           ;incstack = 0
 16186                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16187  1A78  3000               	movlw	0
 16188  1A79  0022               	movlb	2	; select bank2
 16189  1A7A  1BB6               	btfsc	_Load^(0+256),7
 16190  1A7B  3001               	movlw	1
 16191  1A7C  0020               	movlb	0	; select bank0
 16192  1A7D  00A0               	movwf	getLoad_OK@ok
 16193                           
 16194                           ;OverLoad_B1.c: 276: return ok;
 16195  1A7E  0820               	movf	getLoad_OK@ok,w
 16196  1A7F  0008               	return
 16197  1A80                     __end_of_getLoad_OK:	
 16198                           
 16199                           	psect	text111
 16200  109A                     __ptext111:	
 16201 ;; *************** function _getMain_All_Error_Status *****************
 16202 ;; Defined at:
 16203 ;;		line 424 in file "../src/Main_B1.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;  command         1    wreg     unsigned char 
 16206 ;; Auto vars:     Size  Location     Type
 16207 ;;  command         1    5[BANK0 ] unsigned char 
 16208 ;;  status          1    6[BANK0 ] unsigned char 
 16209 ;; Return value:  Size  Location     Type
 16210 ;;                  1    wreg      unsigned char 
 16211 ;; Registers used:
 16212 ;;		wreg, status,2, status,0
 16213 ;; Tracked objects:
 16214 ;;		On entry : 0/0
 16215 ;;		On exit  : 0/0
 16216 ;;		Unchanged: 0/0
 16217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;Total ram usage:        7 bytes
 16223 ;; Hardware stack levels used:    1
 16224 ;; Hardware stack levels required when called:    5
 16225 ;; This function calls:
 16226 ;;		Nothing
 16227 ;; This function is called by:
 16228 ;;		_DimmerLights_Main
 16229 ;;		_Exception_Main
 16230 ;;		_Load_Main
 16231 ;;		_setTemp_Main
 16232 ;;		_getRxData
 16233 ;;		_setSw_Main
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           
 16238                           ;psect for function _getMain_All_Error_Status
 16239  109A                     _getMain_All_Error_Status:	
 16240                           
 16241                           ;incstack = 0
 16242                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16243                           ;getMain_All_Error_Status@command stored from wreg
 16244  109A  0020               	movlb	0	; select bank0
 16245  109B  00A5               	movwf	getMain_All_Error_Status@command
 16246                           
 16247                           ;Main_B1.c: 425: char status = 0;
 16248  109C  01A6               	clrf	getMain_All_Error_Status@status
 16249                           
 16250                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16251  109D  08A6               	movf	getMain_All_Error_Status@status,f
 16252  109E  1D03               	skipz
 16253  109F  28B4               	goto	l9311
 16254  10A0  0825               	movf	getMain_All_Error_Status@command,w
 16255  10A1  3A02               	xorlw	2
 16256  10A2  1903               	skipnz
 16257  10A3  28B4               	goto	l9311
 16258                           
 16259                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16260  10A4  0021               	movlb	1	; select bank1
 16261  10A5  18DA               	btfsc	_Temp^(0+128),1
 16262  10A6  28AB               	goto	l9309
 16263  10A7  0020               	movlb	0	; select bank0
 16264  10A8  01A1               	clrf	_getMain_All_Error_Status$3618
 16265  10A9  01A2               	clrf	_getMain_All_Error_Status$3618+1
 16266  10AA  28B0               	goto	l1471
 16267  10AB                     l9309:	
 16268  10AB  3002               	movlw	2
 16269  10AC  0020               	movlb	0	; select bank0
 16270  10AD  00A1               	movwf	_getMain_All_Error_Status$3618
 16271  10AE  3000               	movlw	0
 16272  10AF  00A2               	movwf	_getMain_All_Error_Status$3618+1
 16273  10B0                     l1471:	
 16274  10B0  0821               	movf	_getMain_All_Error_Status$3618,w
 16275  10B1  00A0               	movwf	??_getMain_All_Error_Status
 16276  10B2  0820               	movf	??_getMain_All_Error_Status,w
 16277  10B3  00A6               	movwf	getMain_All_Error_Status@status
 16278  10B4                     l9311:	
 16279                           
 16280                           ;Main_B1.c: 438: }
 16281                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16282  10B4  08A6               	movf	getMain_All_Error_Status@status,f
 16283  10B5  1D03               	skipz
 16284  10B6  28CB               	goto	l1472
 16285  10B7  0825               	movf	getMain_All_Error_Status@command,w
 16286  10B8  3A03               	xorlw	3
 16287  10B9  1903               	skipnz
 16288  10BA  28CB               	goto	l1472
 16289                           
 16290                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16291  10BB  0022               	movlb	2	; select bank2
 16292  10BC  1AB6               	btfsc	_Load^(0+256),5
 16293  10BD  28C2               	goto	l9319
 16294  10BE  0020               	movlb	0	; select bank0
 16295  10BF  01A3               	clrf	_getMain_All_Error_Status$3619
 16296  10C0  01A4               	clrf	_getMain_All_Error_Status$3619+1
 16297  10C1  28C7               	goto	l1476
 16298  10C2                     l9319:	
 16299  10C2  3003               	movlw	3
 16300  10C3  0020               	movlb	0	; select bank0
 16301  10C4  00A3               	movwf	_getMain_All_Error_Status$3619
 16302  10C5  3000               	movlw	0
 16303  10C6  00A4               	movwf	_getMain_All_Error_Status$3619+1
 16304  10C7                     l1476:	
 16305  10C7  0823               	movf	_getMain_All_Error_Status$3619,w
 16306  10C8  00A0               	movwf	??_getMain_All_Error_Status
 16307  10C9  0820               	movf	??_getMain_All_Error_Status,w
 16308  10CA  00A6               	movwf	getMain_All_Error_Status@status
 16309  10CB                     l1472:	
 16310                           
 16311                           ;Main_B1.c: 445: }
 16312                           ;Main_B1.c: 455: return status;
 16313  10CB  0826               	movf	getMain_All_Error_Status@status,w
 16314  10CC  0008               	return
 16315  10CD                     __end_of_getMain_All_Error_Status:	
 16316                           
 16317                           	psect	text112
 16318  1A63                     __ptext112:	
 16319 ;; *************** function _DimmerLights_Initialization *****************
 16320 ;; Defined at:
 16321 ;;		line 640 in file "../src/Dimmer_B1.c"
 16322 ;; Parameters:    Size  Location     Type
 16323 ;;		None
 16324 ;; Auto vars:     Size  Location     Type
 16325 ;;		None
 16326 ;; Return value:  Size  Location     Type
 16327 ;;		None               void
 16328 ;; Registers used:
 16329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16330 ;; Tracked objects:
 16331 ;;		On entry : 0/0
 16332 ;;		On exit  : 0/0
 16333 ;;		Unchanged: 0/0
 16334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16339 ;;Total ram usage:        0 bytes
 16340 ;; Hardware stack levels used:    1
 16341 ;; Hardware stack levels required when called:    9
 16342 ;; This function calls:
 16343 ;;		_DimmerIntr_Initialization
 16344 ;;		_setDimmerLights_Initialization
 16345 ;; This function is called by:
 16346 ;;		_main
 16347 ;; This function uses a non-reentrant model
 16348 ;;
 16349                           
 16350                           
 16351                           ;psect for function _DimmerLights_Initialization
 16352  1A63                     _DimmerLights_Initialization:	
 16353                           
 16354                           ;Dimmer_B1.c: 642: setDimmerLights_Initialization(1);
 16355                           
 16356                           ;incstack = 0
 16357                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16358  1A63  3001               	movlw	1
 16359  1A64  319A  2210  319A   	fcall	_setDimmerLights_Initialization
 16360                           
 16361                           ;Dimmer_B1.c: 652: DimmerIntr_Initialization();
 16362  1A67  3195  253D         	fcall	_DimmerIntr_Initialization
 16363  1A69  0008               	return
 16364  1A6A                     __end_of_DimmerLights_Initialization:	
 16365                           
 16366                           	psect	text113
 16367  1A10                     __ptext113:	
 16368 ;; *************** function _setDimmerLights_Initialization *****************
 16369 ;; Defined at:
 16370 ;;		line 656 in file "../src/Dimmer_B1.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  lights          1    wreg     unsigned char 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  lights          1    0[COMMON] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;		None               void
 16377 ;; Registers used:
 16378 ;;		wreg
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;Total ram usage:        0 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    5
 16391 ;; This function calls:
 16392 ;;		Nothing
 16393 ;; This function is called by:
 16394 ;;		_DimmerLights_Initialization
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           
 16399                           ;psect for function _setDimmerLights_Initialization
 16400  1A10                     _setDimmerLights_Initialization:	
 16401                           
 16402                           ;incstack = 0
 16403                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16404  1A10  0008               	return
 16405  1A11                     __end_of_setDimmerLights_Initialization:	
 16406                           
 16407                           	psect	text114
 16408  153D                     __ptext114:	
 16409 ;; *************** function _DimmerIntr_Initialization *****************
 16410 ;; Defined at:
 16411 ;;		line 7 in file "../src/Dimmer_B1.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;		None
 16414 ;; Auto vars:     Size  Location     Type
 16415 ;;		None
 16416 ;; Return value:  Size  Location     Type
 16417 ;;		None               void
 16418 ;; Registers used:
 16419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;Total ram usage:        2 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    8
 16432 ;; This function calls:
 16433 ;;		_Division
 16434 ;;		_getDimmerLights_PercentToValue
 16435 ;;		_getDimmerLights_ValueToPercent
 16436 ;;		_setMemory_Modify
 16437 ;; This function is called by:
 16438 ;;		_DimmerLights_Initialization
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           
 16443                           ;psect for function _DimmerIntr_Initialization
 16444  153D                     _DimmerIntr_Initialization:	
 16445                           
 16446                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16447                           
 16448                           ;incstack = 0
 16449                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16450  153D  3007               	movlw	7
 16451  153E  0020               	movlb	0	; select bank0
 16452  153F  00E2               	movwf	??_DimmerIntr_Initialization
 16453  1540  0862               	movf	??_DimmerIntr_Initialization,w
 16454  1541  0021               	movlb	1	; select bank1
 16455  1542  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16456                           
 16457                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16458  1543  3034               	movlw	52
 16459  1544  0020               	movlb	0	; select bank0
 16460  1545  00E2               	movwf	??_DimmerIntr_Initialization
 16461  1546  0862               	movf	??_DimmerIntr_Initialization,w
 16462  1547  0021               	movlb	1	; select bank1
 16463  1548  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16464                           
 16465                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16466  1549  3006               	movlw	6
 16467  154A  0020               	movlb	0	; select bank0
 16468  154B  00E2               	movwf	??_DimmerIntr_Initialization
 16469  154C  0862               	movf	??_DimmerIntr_Initialization,w
 16470  154D  0021               	movlb	1	; select bank1
 16471  154E  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16472                           
 16473                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16474  154F  1E39               	btfss	(_myMain^(0+128)+10),4
 16475  1550  2D61               	goto	l9879
 16476                           
 16477                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16478  1551  3034               	movlw	52
 16479  1552  3196  2660  3195   	fcall	_getDimmerLights_ValueToPercent
 16480  1555  0020               	movlb	0	; select bank0
 16481  1556  00E2               	movwf	??_DimmerIntr_Initialization
 16482  1557  0021               	movlb	1	; select bank1
 16483  1558  086C               	movf	_product^(0+128),w
 16484  1559  3E15               	addlw	21
 16485  155A  0086               	movwf	6
 16486  155B  3002               	movlw	2	; select bank4/5
 16487  155C  0087               	movwf	7
 16488  155D  0020               	movlb	0	; select bank0
 16489  155E  0862               	movf	??_DimmerIntr_Initialization,w
 16490  155F  0081               	movwf	1
 16491                           
 16492                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16493  1560  0021               	movlb	1	; select bank1
 16494  1561                     l9879:	
 16495                           ;Dimmer_B1.c: 19: } else {
 16496                           
 16497                           
 16498                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16499  1561  086C               	movf	_product^(0+128),w
 16500  1562  3E15               	addlw	21
 16501  1563  0086               	movwf	6
 16502  1564  3002               	movlw	2	; select bank4/5
 16503  1565  0087               	movwf	7
 16504  1566  0801               	movf	1,w
 16505  1567  3195  25FB  3195   	fcall	_getDimmerLights_PercentToValue
 16506  156A  0020               	movlb	0	; select bank0
 16507  156B  00E2               	movwf	??_DimmerIntr_Initialization
 16508  156C  0862               	movf	??_DimmerIntr_Initialization,w
 16509  156D  0021               	movlb	1	; select bank1
 16510  156E  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16511                           
 16512                           ;Dimmer_B1.c: 21: }
 16513                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16514  156F  3002               	movlw	2
 16515  1570  0020               	movlb	0	; select bank0
 16516  1571  00E2               	movwf	??_DimmerIntr_Initialization
 16517  1572  0862               	movf	??_DimmerIntr_Initialization,w
 16518  1573  00A5               	movwf	Division@num
 16519  1574  3034               	movlw	52
 16520  1575  319B  237D  3195   	fcall	_Division
 16521  1578  0020               	movlb	0	; select bank0
 16522  1579  00E3               	movwf	??_DimmerIntr_Initialization+1
 16523  157A  0863               	movf	??_DimmerIntr_Initialization+1,w
 16524  157B  0021               	movlb	1	; select bank1
 16525  157C  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16526                           
 16527                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16528  157D  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16529  157E  3E08               	addlw	8
 16530  157F  0020               	movlb	0	; select bank0
 16531  1580  00E2               	movwf	??_DimmerIntr_Initialization
 16532  1581  0862               	movf	??_DimmerIntr_Initialization,w
 16533  1582  0021               	movlb	1	; select bank1
 16534  1583  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16535                           
 16536                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16537  1584  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16538  1585  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16539  1586  0020               	movlb	0	; select bank0
 16540  1587  00E2               	movwf	??_DimmerIntr_Initialization
 16541  1588  0862               	movf	??_DimmerIntr_Initialization,w
 16542  1589  0021               	movlb	1	; select bank1
 16543  158A  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16544                           
 16545                           ;Dimmer_B1.c: 33: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16546  158B  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16547  158C  3E01               	addlw	1
 16548  158D  0020               	movlb	0	; select bank0
 16549  158E  00E2               	movwf	??_DimmerIntr_Initialization
 16550  158F  0862               	movf	??_DimmerIntr_Initialization,w
 16551  1590  0021               	movlb	1	; select bank1
 16552  1591  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16553                           
 16554                           ;Dimmer_B1.c: 66: if (myMain.InitDimmer == 1) {
 16555  1592  1E39               	btfss	(_myMain^(0+128)+10),4
 16556  1593  0008               	return
 16557                           
 16558                           ;Dimmer_B1.c: 67: myMain.InitDimmer = 0;
 16559  1594  1239               	bcf	(_myMain^(0+128)+10),4
 16560                           
 16561                           ;Dimmer_B1.c: 68: myMain.SaveDimmer = 1;
 16562  1595  16B9               	bsf	(_myMain^(0+128)+10),5
 16563                           
 16564                           ;Dimmer_B1.c: 69: setMemory_Modify(1);
 16565  1596  3001               	movlw	1
 16566  1597  319C  247B         	fcall	_setMemory_Modify
 16567  1599  0008               	return
 16568  159A                     __end_of_DimmerIntr_Initialization:	
 16569                           
 16570                           	psect	text115
 16571  1C7B                     __ptext115:	
 16572 ;; *************** function _setMemory_Modify *****************
 16573 ;; Defined at:
 16574 ;;		line 1083 in file "../src/MCU_B1.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;  command         1    wreg     unsigned char 
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;  command         1    1[BANK0 ] unsigned char 
 16579 ;; Return value:  Size  Location     Type
 16580 ;;		None               void
 16581 ;; Registers used:
 16582 ;;		wreg, status,2, status,0
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;Total ram usage:        2 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:    5
 16595 ;; This function calls:
 16596 ;;		Nothing
 16597 ;; This function is called by:
 16598 ;;		_DimmerIntr_Initialization
 16599 ;;		_setDimmerLights_Dimming
 16600 ;;		_setLog_Code
 16601 ;;		_setRFSW_AdjControl
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           
 16606                           ;psect for function _setMemory_Modify
 16607  1C7B                     _setMemory_Modify:	
 16608                           
 16609                           ;incstack = 0
 16610                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16611                           ;setMemory_Modify@command stored from wreg
 16612  1C7B  0020               	movlb	0	; select bank0
 16613  1C7C  00A1               	movwf	setMemory_Modify@command
 16614                           
 16615                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16616  1C7D  0821               	movf	setMemory_Modify@command,w
 16617  1C7E  3A01               	xorlw	1
 16618  1C7F  3000               	movlw	0
 16619  1C80  1903               	skipnz
 16620  1C81  3001               	movlw	1
 16621  1C82  00A0               	movwf	??_setMemory_Modify
 16622  1C83  0023               	movlb	3	; select bank3
 16623  1C84  0862               	movf	(_Memory^(0+384)+36),w
 16624  1C85  0020               	movlb	0	; select bank0
 16625  1C86  0620               	xorwf	??_setMemory_Modify,w
 16626  1C87  39FE               	andlw	-2
 16627  1C88  0620               	xorwf	??_setMemory_Modify,w
 16628  1C89  0023               	movlb	3	; select bank3
 16629  1C8A  00E2               	movwf	(_Memory^(0+384)+36)
 16630                           
 16631                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16632  1C8B  01E0               	clrf	(_Memory^(0+384)+34)
 16633  1C8C  01E1               	clrf	((_Memory+1)^(0+384)+34)
 16634  1C8D  0008               	return
 16635  1C8E                     __end_of_setMemory_Modify:	
 16636                           
 16637                           	psect	text116
 16638  1660                     __ptext116:	
 16639 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16640 ;; Defined at:
 16641 ;;		line 1128 in file "../src/Dimmer_B1.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  value           1    wreg     unsigned char 
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;  value           1   62[BANK0 ] unsigned char 
 16646 ;;  i               3   63[BANK0 ] float 
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  1    wreg      unsigned char 
 16649 ;; Registers used:
 16650 ;;		wreg, status,2, status,0, pclath, cstack
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;Total ram usage:        6 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; Hardware stack levels required when called:    7
 16663 ;; This function calls:
 16664 ;;		___awtoft
 16665 ;;		___ftadd
 16666 ;;		___ftdiv
 16667 ;;		___ftneg
 16668 ;;		___fttol
 16669 ;; This function is called by:
 16670 ;;		_DimmerIntr_Initialization
 16671 ;;		_setDimmerLights_Dimming
 16672 ;; This function uses a non-reentrant model
 16673 ;;
 16674                           
 16675                           
 16676                           ;psect for function _getDimmerLights_ValueToPercent
 16677  1660                     _getDimmerLights_ValueToPercent:	
 16678                           
 16679                           ;incstack = 0
 16680                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16681                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16682  1660  0020               	movlb	0	; select bank0
 16683  1661  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16684                           
 16685                           ;Dimmer_B1.c: 1136: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16686  1662  3000               	movlw	0
 16687  1663  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16688  1664  3038               	movlw	56
 16689  1665  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16690  1666  3042               	movlw	66
 16691  1667  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16692                           
 16693                           ;Dimmer_B1.c: 1137: i /= 100;
 16694  1668  3000               	movlw	0
 16695  1669  00AE               	movwf	___ftdiv@f2
 16696  166A  30C8               	movlw	200
 16697  166B  00AF               	movwf	___ftdiv@f2+1
 16698  166C  3042               	movlw	66
 16699  166D  00B0               	movwf	___ftdiv@f2+2
 16700  166E  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16701  166F  00B1               	movwf	___ftdiv@f1
 16702  1670  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16703  1671  00B2               	movwf	___ftdiv@f1+1
 16704  1672  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16705  1673  00B3               	movwf	___ftdiv@f1+2
 16706  1674  318C  2474  3196   	fcall	___ftdiv
 16707  1677  0020               	movlb	0	; select bank0
 16708  1678  082E               	movf	?___ftdiv,w
 16709  1679  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16710  167A  082F               	movf	?___ftdiv+1,w
 16711  167B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16712  167C  0830               	movf	?___ftdiv+2,w
 16713  167D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16714                           
 16715                           ;Dimmer_B1.c: 1139: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 16716  167E  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16717  167F  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16718  1680  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16719  1681  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16720  1682  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16721  1683  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16722  1684  1903               	skipnz
 16723  1685  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16724  1686  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16725  1687  3E34               	addlw	52
 16726  1688  00A8               	movwf	___awtoft@c
 16727  1689  3000               	movlw	0
 16728  168A  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16729  168B  00A9               	movwf	___awtoft@c+1
 16730  168C  319F  276D  3196   	fcall	___awtoft
 16731  168F  0020               	movlb	0	; select bank0
 16732  1690  0828               	movf	?___awtoft,w
 16733  1691  00B1               	movwf	___ftdiv@f1
 16734  1692  0829               	movf	?___awtoft+1,w
 16735  1693  00B2               	movwf	___ftdiv@f1+1
 16736  1694  082A               	movf	?___awtoft+2,w
 16737  1695  00B3               	movwf	___ftdiv@f1+2
 16738  1696  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16739  1697  00AE               	movwf	___ftdiv@f2
 16740  1698  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16741  1699  00AF               	movwf	___ftdiv@f2+1
 16742  169A  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16743  169B  00B0               	movwf	___ftdiv@f2+2
 16744  169C  318C  2474  3196   	fcall	___ftdiv
 16745  169F  0020               	movlb	0	; select bank0
 16746  16A0  082E               	movf	?___ftdiv,w
 16747  16A1  00BE               	movwf	___ftneg@f1
 16748  16A2  082F               	movf	?___ftdiv+1,w
 16749  16A3  00BF               	movwf	___ftneg@f1+1
 16750  16A4  0830               	movf	?___ftdiv+2,w
 16751  16A5  00C0               	movwf	___ftneg@f1+2
 16752  16A6  319A  2299  3196   	fcall	___ftneg
 16753  16A9  0020               	movlb	0	; select bank0
 16754  16AA  083E               	movf	?___ftneg,w
 16755  16AB  00C4               	movwf	___ftadd@f2
 16756  16AC  083F               	movf	?___ftneg+1,w
 16757  16AD  00C5               	movwf	___ftadd@f2+1
 16758  16AE  0840               	movf	?___ftneg+2,w
 16759  16AF  00C6               	movwf	___ftadd@f2+2
 16760  16B0  3000               	movlw	0
 16761  16B1  00C1               	movwf	___ftadd@f1
 16762  16B2  30C8               	movlw	200
 16763  16B3  00C2               	movwf	___ftadd@f1+1
 16764  16B4  3042               	movlw	66
 16765  16B5  00C3               	movwf	___ftadd@f1+2
 16766  16B6  3184  2432  3196   	fcall	___ftadd
 16767  16B9  0020               	movlb	0	; select bank0
 16768  16BA  0841               	movf	?___ftadd,w
 16769  16BB  00CE               	movwf	___fttol@f1
 16770  16BC  0842               	movf	?___ftadd+1,w
 16771  16BD  00CF               	movwf	___fttol@f1+1
 16772  16BE  0843               	movf	?___ftadd+2,w
 16773  16BF  00D0               	movwf	___fttol@f1+2
 16774  16C0  318B  2361         	fcall	___fttol
 16775  16C2  0020               	movlb	0	; select bank0
 16776  16C3  084E               	movf	?___fttol,w
 16777  16C4  0008               	return
 16778  16C5                     __end_of_getDimmerLights_ValueToPercent:	
 16779                           
 16780                           	psect	text117
 16781  15FB                     __ptext117:	
 16782 ;; *************** function _getDimmerLights_PercentToValue *****************
 16783 ;; Defined at:
 16784 ;;		line 1112 in file "../src/Dimmer_B1.c"
 16785 ;; Parameters:    Size  Location     Type
 16786 ;;  value           1    wreg     unsigned char 
 16787 ;; Auto vars:     Size  Location     Type
 16788 ;;  value           1   62[BANK0 ] unsigned char 
 16789 ;;  i               3   63[BANK0 ] float 
 16790 ;; Return value:  Size  Location     Type
 16791 ;;                  1    wreg      unsigned char 
 16792 ;; Registers used:
 16793 ;;		wreg, status,2, status,0, pclath, cstack
 16794 ;; Tracked objects:
 16795 ;;		On entry : 0/0
 16796 ;;		On exit  : 0/0
 16797 ;;		Unchanged: 0/0
 16798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16803 ;;Total ram usage:        6 bytes
 16804 ;; Hardware stack levels used:    1
 16805 ;; Hardware stack levels required when called:    7
 16806 ;; This function calls:
 16807 ;;		___awtoft
 16808 ;;		___ftadd
 16809 ;;		___ftdiv
 16810 ;;		___ftmul
 16811 ;;		___ftneg
 16812 ;;		___fttol
 16813 ;; This function is called by:
 16814 ;;		_DimmerIntr_Initialization
 16815 ;;		_setDimmerLights_OnOff
 16816 ;;		_setRFSW_AdjControl
 16817 ;; This function uses a non-reentrant model
 16818 ;;
 16819                           
 16820                           
 16821                           ;psect for function _getDimmerLights_PercentToValue
 16822  15FB                     _getDimmerLights_PercentToValue:	
 16823                           
 16824                           ;incstack = 0
 16825                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16826                           ;getDimmerLights_PercentToValue@value stored from wreg
 16827  15FB  0020               	movlb	0	; select bank0
 16828  15FC  00DE               	movwf	getDimmerLights_PercentToValue@value
 16829                           
 16830                           ;Dimmer_B1.c: 1120: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16831  15FD  3000               	movlw	0
 16832  15FE  00DF               	movwf	getDimmerLights_PercentToValue@i
 16833  15FF  3038               	movlw	56
 16834  1600  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16835  1601  3042               	movlw	66
 16836  1602  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16837                           
 16838                           ;Dimmer_B1.c: 1121: i /= 100;
 16839  1603  3000               	movlw	0
 16840  1604  00AE               	movwf	___ftdiv@f2
 16841  1605  30C8               	movlw	200
 16842  1606  00AF               	movwf	___ftdiv@f2+1
 16843  1607  3042               	movlw	66
 16844  1608  00B0               	movwf	___ftdiv@f2+2
 16845  1609  085F               	movf	getDimmerLights_PercentToValue@i,w
 16846  160A  00B1               	movwf	___ftdiv@f1
 16847  160B  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16848  160C  00B2               	movwf	___ftdiv@f1+1
 16849  160D  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16850  160E  00B3               	movwf	___ftdiv@f1+2
 16851  160F  318C  2474  3195   	fcall	___ftdiv
 16852  1612  0020               	movlb	0	; select bank0
 16853  1613  082E               	movf	?___ftdiv,w
 16854  1614  00DF               	movwf	getDimmerLights_PercentToValue@i
 16855  1615  082F               	movf	?___ftdiv+1,w
 16856  1616  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16857  1617  0830               	movf	?___ftdiv+2,w
 16858  1618  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16859                           
 16860                           ;Dimmer_B1.c: 1123: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 16861  1619  085E               	movf	getDimmerLights_PercentToValue@value,w
 16862  161A  00DC               	movwf	??_getDimmerLights_PercentToValue
 16863  161B  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16864  161C  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16865  161D  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16866  161E  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16867  161F  1903               	skipnz
 16868  1620  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16869  1621  085C               	movf	??_getDimmerLights_PercentToValue,w
 16870  1622  3E64               	addlw	100
 16871  1623  00A8               	movwf	___awtoft@c
 16872  1624  3000               	movlw	0
 16873  1625  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16874  1626  00A9               	movwf	___awtoft@c+1
 16875  1627  319F  276D  3195   	fcall	___awtoft
 16876  162A  0020               	movlb	0	; select bank0
 16877  162B  0828               	movf	?___awtoft,w
 16878  162C  00B1               	movwf	___ftmul@f2
 16879  162D  0829               	movf	?___awtoft+1,w
 16880  162E  00B2               	movwf	___ftmul@f2+1
 16881  162F  082A               	movf	?___awtoft+2,w
 16882  1630  00B3               	movwf	___ftmul@f2+2
 16883  1631  085F               	movf	getDimmerLights_PercentToValue@i,w
 16884  1632  00AE               	movwf	___ftmul@f1
 16885  1633  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16886  1634  00AF               	movwf	___ftmul@f1+1
 16887  1635  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16888  1636  00B0               	movwf	___ftmul@f1+2
 16889  1637  318D  25CE  3195   	fcall	___ftmul
 16890  163A  0020               	movlb	0	; select bank0
 16891  163B  082E               	movf	?___ftmul,w
 16892  163C  00BE               	movwf	___ftneg@f1
 16893  163D  082F               	movf	?___ftmul+1,w
 16894  163E  00BF               	movwf	___ftneg@f1+1
 16895  163F  0830               	movf	?___ftmul+2,w
 16896  1640  00C0               	movwf	___ftneg@f1+2
 16897  1641  319A  2299  3195   	fcall	___ftneg
 16898  1644  0020               	movlb	0	; select bank0
 16899  1645  083E               	movf	?___ftneg,w
 16900  1646  00C4               	movwf	___ftadd@f2
 16901  1647  083F               	movf	?___ftneg+1,w
 16902  1648  00C5               	movwf	___ftadd@f2+1
 16903  1649  0840               	movf	?___ftneg+2,w
 16904  164A  00C6               	movwf	___ftadd@f2+2
 16905  164B  3000               	movlw	0
 16906  164C  00C1               	movwf	___ftadd@f1
 16907  164D  3050               	movlw	80
 16908  164E  00C2               	movwf	___ftadd@f1+1
 16909  164F  3042               	movlw	66
 16910  1650  00C3               	movwf	___ftadd@f1+2
 16911  1651  3184  2432  3195   	fcall	___ftadd
 16912  1654  0020               	movlb	0	; select bank0
 16913  1655  0841               	movf	?___ftadd,w
 16914  1656  00CE               	movwf	___fttol@f1
 16915  1657  0842               	movf	?___ftadd+1,w
 16916  1658  00CF               	movwf	___fttol@f1+1
 16917  1659  0843               	movf	?___ftadd+2,w
 16918  165A  00D0               	movwf	___fttol@f1+2
 16919  165B  318B  2361         	fcall	___fttol
 16920  165D  0020               	movlb	0	; select bank0
 16921  165E  084E               	movf	?___fttol,w
 16922  165F  0008               	return
 16923  1660                     __end_of_getDimmerLights_PercentToValue:	
 16924                           
 16925                           	psect	text118
 16926  0B61                     __ptext118:	
 16927 ;; *************** function ___fttol *****************
 16928 ;; Defined at:
 16929 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;  f1              3   46[BANK0 ] float 
 16932 ;; Auto vars:     Size  Location     Type
 16933 ;;  lval            4   55[BANK0 ] unsigned long 
 16934 ;;  exp1            1   59[BANK0 ] unsigned char 
 16935 ;;  sign1           1   54[BANK0 ] unsigned char 
 16936 ;; Return value:  Size  Location     Type
 16937 ;;                  4   46[BANK0 ] long 
 16938 ;; Registers used:
 16939 ;;		wreg, status,2, status,0
 16940 ;; Tracked objects:
 16941 ;;		On entry : 0/0
 16942 ;;		On exit  : 0/0
 16943 ;;		Unchanged: 0/0
 16944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16945 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;Total ram usage:       14 bytes
 16950 ;; Hardware stack levels used:    1
 16951 ;; Hardware stack levels required when called:    5
 16952 ;; This function calls:
 16953 ;;		Nothing
 16954 ;; This function is called by:
 16955 ;;		_getDimmerLights_PercentToValue
 16956 ;;		_getDimmerLights_ValueToPercent
 16957 ;; This function uses a non-reentrant model
 16958 ;;
 16959                           
 16960                           
 16961                           ;psect for function ___fttol
 16962  0B61                     ___fttol:	
 16963                           
 16964                           ;incstack = 0
 16965                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16966  0B61  0020               	movlb	0	; select bank0
 16967  0B62  084E               	movf	___fttol@f1,w
 16968  0B63  00D2               	movwf	??___fttol
 16969  0B64  084F               	movf	___fttol@f1+1,w
 16970  0B65  00D3               	movwf	??___fttol+1
 16971  0B66  0850               	movf	___fttol@f1+2,w
 16972  0B67  00D4               	movwf	??___fttol+2
 16973  0B68  1003               	clrc
 16974  0B69  0D53               	rlf	??___fttol+1,w
 16975  0B6A  0D54               	rlf	??___fttol+2,w
 16976  0B6B  00D5               	movwf	??___fttol+3
 16977  0B6C  0855               	movf	??___fttol+3,w
 16978  0B6D  00DB               	movwf	___fttol@exp1
 16979  0B6E  08DB               	movf	___fttol@exp1,f
 16980  0B6F  1D03               	skipz
 16981  0B70  2B7A               	goto	l8793
 16982  0B71  3000               	movlw	0
 16983  0B72  00D1               	movwf	?___fttol+3
 16984  0B73  3000               	movlw	0
 16985  0B74  00D0               	movwf	?___fttol+2
 16986  0B75  3000               	movlw	0
 16987  0B76  00CF               	movwf	?___fttol+1
 16988  0B77  3000               	movlw	0
 16989  0B78  00CE               	movwf	?___fttol
 16990  0B79  0008               	return
 16991  0B7A                     l8793:	
 16992  0B7A  084E               	movf	___fttol@f1,w
 16993  0B7B  00D2               	movwf	??___fttol
 16994  0B7C  084F               	movf	___fttol@f1+1,w
 16995  0B7D  00D3               	movwf	??___fttol+1
 16996  0B7E  0850               	movf	___fttol@f1+2,w
 16997  0B7F  00D4               	movwf	??___fttol+2
 16998  0B80  3017               	movlw	23
 16999  0B81                     u9425:	
 17000  0B81  36D4               	lsrf	??___fttol+2,f
 17001  0B82  0CD3               	rrf	??___fttol+1,f
 17002  0B83  0CD2               	rrf	??___fttol,f
 17003  0B84  0B89               	decfsz	9,f
 17004  0B85  2B81               	goto	u9425
 17005  0B86  0852               	movf	??___fttol,w
 17006  0B87  00D5               	movwf	??___fttol+3
 17007  0B88  0855               	movf	??___fttol+3,w
 17008  0B89  00D6               	movwf	___fttol@sign1
 17009  0B8A  17CF               	bsf	___fttol@f1+1,7
 17010  0B8B  30FF               	movlw	255
 17011  0B8C  05CE               	andwf	___fttol@f1,f
 17012  0B8D  30FF               	movlw	255
 17013  0B8E  05CF               	andwf	___fttol@f1+1,f
 17014  0B8F  3000               	movlw	0
 17015  0B90  05D0               	andwf	___fttol@f1+2,f
 17016  0B91  084E               	movf	___fttol@f1,w
 17017  0B92  00D7               	movwf	___fttol@lval
 17018  0B93  084F               	movf	___fttol@f1+1,w
 17019  0B94  00D8               	movwf	___fttol@lval+1
 17020  0B95  0850               	movf	___fttol@f1+2,w
 17021  0B96  00D9               	movwf	___fttol@lval+2
 17022  0B97  01DA               	clrf	___fttol@lval+3
 17023  0B98  308E               	movlw	142
 17024  0B99  02DB               	subwf	___fttol@exp1,f
 17025  0B9A  1FDB               	btfss	___fttol@exp1,7
 17026  0B9B  2BB8               	goto	l8813
 17027  0B9C  085B               	movf	___fttol@exp1,w
 17028  0B9D  3A80               	xorlw	128
 17029  0B9E  3E8F               	addlw	143
 17030  0B9F  1803               	skipnc
 17031  0BA0  2BAA               	goto	l8811
 17032  0BA1  3000               	movlw	0
 17033  0BA2  00D1               	movwf	?___fttol+3
 17034  0BA3  3000               	movlw	0
 17035  0BA4  00D0               	movwf	?___fttol+2
 17036  0BA5  3000               	movlw	0
 17037  0BA6  00CF               	movwf	?___fttol+1
 17038  0BA7  3000               	movlw	0
 17039  0BA8  00CE               	movwf	?___fttol
 17040  0BA9  0008               	return
 17041  0BAA                     l8811:	
 17042  0BAA  3001               	movlw	1
 17043  0BAB                     u9455:	
 17044  0BAB  36DA               	lsrf	___fttol@lval+3,f
 17045  0BAC  0CD9               	rrf	___fttol@lval+2,f
 17046  0BAD  0CD8               	rrf	___fttol@lval+1,f
 17047  0BAE  0CD7               	rrf	___fttol@lval,f
 17048  0BAF  0B89               	decfsz	9,f
 17049  0BB0  2BAB               	goto	u9455
 17050  0BB1  3001               	movlw	1
 17051  0BB2  00D2               	movwf	??___fttol
 17052  0BB3  0852               	movf	??___fttol,w
 17053  0BB4  07DB               	addwf	___fttol@exp1,f
 17054  0BB5  1903               	btfsc	3,2
 17055  0BB6  2BD1               	goto	l8823
 17056  0BB7  2BAA               	goto	l8811
 17057  0BB8                     l8813:	
 17058  0BB8  3018               	movlw	24
 17059  0BB9  025B               	subwf	___fttol@exp1,w
 17060  0BBA  1C03               	skipc
 17061  0BBB  2BCE               	goto	l8821
 17062  0BBC  3000               	movlw	0
 17063  0BBD  00D1               	movwf	?___fttol+3
 17064  0BBE  3000               	movlw	0
 17065  0BBF  00D0               	movwf	?___fttol+2
 17066  0BC0  3000               	movlw	0
 17067  0BC1  00CF               	movwf	?___fttol+1
 17068  0BC2  3000               	movlw	0
 17069  0BC3  00CE               	movwf	?___fttol
 17070  0BC4  0008               	return
 17071  0BC5                     l8819:	
 17072  0BC5  3001               	movlw	1
 17073  0BC6                     u9485:	
 17074  0BC6  35D7               	lslf	___fttol@lval,f
 17075  0BC7  0DD8               	rlf	___fttol@lval+1,f
 17076  0BC8  0DD9               	rlf	___fttol@lval+2,f
 17077  0BC9  0DDA               	rlf	___fttol@lval+3,f
 17078  0BCA  0B89               	decfsz	9,f
 17079  0BCB  2BC6               	goto	u9485
 17080  0BCC  3001               	movlw	1
 17081  0BCD  02DB               	subwf	___fttol@exp1,f
 17082  0BCE                     l8821:	
 17083  0BCE  08DB               	movf	___fttol@exp1,f
 17084  0BCF  1D03               	skipz
 17085  0BD0  2BC5               	goto	l8819
 17086  0BD1                     l8823:	
 17087  0BD1  0856               	movf	___fttol@sign1,w
 17088  0BD2  1903               	btfsc	3,2
 17089  0BD3  2BDF               	goto	l8827
 17090  0BD4  09D7               	comf	___fttol@lval,f
 17091  0BD5  09D8               	comf	___fttol@lval+1,f
 17092  0BD6  09D9               	comf	___fttol@lval+2,f
 17093  0BD7  09DA               	comf	___fttol@lval+3,f
 17094  0BD8  0AD7               	incf	___fttol@lval,f
 17095  0BD9  1903               	skipnz
 17096  0BDA  0AD8               	incf	___fttol@lval+1,f
 17097  0BDB  1903               	skipnz
 17098  0BDC  0AD9               	incf	___fttol@lval+2,f
 17099  0BDD  1903               	skipnz
 17100  0BDE  0ADA               	incf	___fttol@lval+3,f
 17101  0BDF                     l8827:	
 17102  0BDF  085A               	movf	___fttol@lval+3,w
 17103  0BE0  00D1               	movwf	?___fttol+3
 17104  0BE1  0859               	movf	___fttol@lval+2,w
 17105  0BE2  00D0               	movwf	?___fttol+2
 17106  0BE3  0858               	movf	___fttol@lval+1,w
 17107  0BE4  00CF               	movwf	?___fttol+1
 17108  0BE5  0857               	movf	___fttol@lval,w
 17109  0BE6  00CE               	movwf	?___fttol
 17110  0BE7  0008               	return
 17111  0BE8                     __end_of___fttol:	
 17112                           
 17113                           	psect	text119
 17114  1A99                     __ptext119:	
 17115 ;; *************** function ___ftneg *****************
 17116 ;; Defined at:
 17117 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17118 ;; Parameters:    Size  Location     Type
 17119 ;;  f1              3   30[BANK0 ] float 
 17120 ;; Auto vars:     Size  Location     Type
 17121 ;;		None
 17122 ;; Return value:  Size  Location     Type
 17123 ;;                  3   30[BANK0 ] float 
 17124 ;; Registers used:
 17125 ;;		wreg
 17126 ;; Tracked objects:
 17127 ;;		On entry : 0/0
 17128 ;;		On exit  : 0/0
 17129 ;;		Unchanged: 0/0
 17130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17131 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;Total ram usage:        3 bytes
 17136 ;; Hardware stack levels used:    1
 17137 ;; Hardware stack levels required when called:    5
 17138 ;; This function calls:
 17139 ;;		Nothing
 17140 ;; This function is called by:
 17141 ;;		_getDimmerLights_PercentToValue
 17142 ;;		_getDimmerLights_ValueToPercent
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           
 17147                           ;psect for function ___ftneg
 17148  1A99                     ___ftneg:	
 17149                           
 17150                           ;incstack = 0
 17151                           ; Regs used in ___ftneg: [wreg]
 17152  1A99  0020               	movlb	0	; select bank0
 17153  1A9A  0840               	movf	___ftneg@f1+2,w
 17154  1A9B  043F               	iorwf	___ftneg@f1+1,w
 17155  1A9C  043E               	iorwf	___ftneg@f1,w
 17156  1A9D  1903               	skipnz
 17157  1A9E  0008               	return
 17158  1A9F  3080               	movlw	128
 17159  1AA0  06C0               	xorwf	___ftneg@f1+2,f
 17160  1AA1  0008               	return
 17161  1AA2                     __end_of___ftneg:	
 17162                           
 17163                           	psect	text120
 17164  0DCE                     __ptext120:	
 17165 ;; *************** function ___ftmul *****************
 17166 ;; Defined at:
 17167 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17168 ;; Parameters:    Size  Location     Type
 17169 ;;  f1              3   14[BANK0 ] float 
 17170 ;;  f2              3   17[BANK0 ] float 
 17171 ;; Auto vars:     Size  Location     Type
 17172 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17173 ;;  sign            1   29[BANK0 ] unsigned char 
 17174 ;;  cntr            1   28[BANK0 ] unsigned char 
 17175 ;;  exp             1   24[BANK0 ] unsigned char 
 17176 ;; Return value:  Size  Location     Type
 17177 ;;                  3   14[BANK0 ] float 
 17178 ;; Registers used:
 17179 ;;		wreg, status,2, status,0, pclath, cstack
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17185 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;Total ram usage:       16 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; Hardware stack levels required when called:    6
 17192 ;; This function calls:
 17193 ;;		___ftpack
 17194 ;; This function is called by:
 17195 ;;		_getDimmerLights_PercentToValue
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199                           
 17200                           ;psect for function ___ftmul
 17201  0DCE                     ___ftmul:	
 17202                           
 17203                           ;incstack = 0
 17204                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17205  0DCE  0020               	movlb	0	; select bank0
 17206  0DCF  082E               	movf	___ftmul@f1,w
 17207  0DD0  00B4               	movwf	??___ftmul
 17208  0DD1  082F               	movf	___ftmul@f1+1,w
 17209  0DD2  00B5               	movwf	??___ftmul+1
 17210  0DD3  0830               	movf	___ftmul@f1+2,w
 17211  0DD4  00B6               	movwf	??___ftmul+2
 17212  0DD5  1003               	clrc
 17213  0DD6  0D35               	rlf	??___ftmul+1,w
 17214  0DD7  0D36               	rlf	??___ftmul+2,w
 17215  0DD8  00B7               	movwf	??___ftmul+3
 17216  0DD9  0837               	movf	??___ftmul+3,w
 17217  0DDA  00B8               	movwf	___ftmul@exp
 17218  0DDB  08B8               	movf	___ftmul@exp,f
 17219  0DDC  1D03               	skipz
 17220  0DDD  2DE5               	goto	l8735
 17221  0DDE  3000               	movlw	0
 17222  0DDF  00AE               	movwf	?___ftmul
 17223  0DE0  3000               	movlw	0
 17224  0DE1  00AF               	movwf	?___ftmul+1
 17225  0DE2  3000               	movlw	0
 17226  0DE3  00B0               	movwf	?___ftmul+2
 17227  0DE4  0008               	return
 17228  0DE5                     l8735:	
 17229  0DE5  0831               	movf	___ftmul@f2,w
 17230  0DE6  00B4               	movwf	??___ftmul
 17231  0DE7  0832               	movf	___ftmul@f2+1,w
 17232  0DE8  00B5               	movwf	??___ftmul+1
 17233  0DE9  0833               	movf	___ftmul@f2+2,w
 17234  0DEA  00B6               	movwf	??___ftmul+2
 17235  0DEB  1003               	clrc
 17236  0DEC  0D35               	rlf	??___ftmul+1,w
 17237  0DED  0D36               	rlf	??___ftmul+2,w
 17238  0DEE  00B7               	movwf	??___ftmul+3
 17239  0DEF  0837               	movf	??___ftmul+3,w
 17240  0DF0  00BD               	movwf	___ftmul@sign
 17241  0DF1  08BD               	movf	___ftmul@sign,f
 17242  0DF2  1D03               	skipz
 17243  0DF3  2DFB               	goto	l8741
 17244  0DF4  3000               	movlw	0
 17245  0DF5  00AE               	movwf	?___ftmul
 17246  0DF6  3000               	movlw	0
 17247  0DF7  00AF               	movwf	?___ftmul+1
 17248  0DF8  3000               	movlw	0
 17249  0DF9  00B0               	movwf	?___ftmul+2
 17250  0DFA  0008               	return
 17251  0DFB                     l8741:	
 17252  0DFB  083D               	movf	___ftmul@sign,w
 17253  0DFC  3E7B               	addlw	123
 17254  0DFD  00B4               	movwf	??___ftmul
 17255  0DFE  0834               	movf	??___ftmul,w
 17256  0DFF  07B8               	addwf	___ftmul@exp,f
 17257  0E00  082E               	movf	___ftmul@f1,w
 17258  0E01  00B4               	movwf	??___ftmul
 17259  0E02  082F               	movf	___ftmul@f1+1,w
 17260  0E03  00B5               	movwf	??___ftmul+1
 17261  0E04  0830               	movf	___ftmul@f1+2,w
 17262  0E05  00B6               	movwf	??___ftmul+2
 17263  0E06  3010               	movlw	16
 17264  0E07                     u9305:	
 17265  0E07  36B6               	lsrf	??___ftmul+2,f
 17266  0E08  0CB5               	rrf	??___ftmul+1,f
 17267  0E09  0CB4               	rrf	??___ftmul,f
 17268  0E0A  0B89               	decfsz	9,f
 17269  0E0B  2E07               	goto	u9305
 17270  0E0C  0834               	movf	??___ftmul,w
 17271  0E0D  00B7               	movwf	??___ftmul+3
 17272  0E0E  0837               	movf	??___ftmul+3,w
 17273  0E0F  00BD               	movwf	___ftmul@sign
 17274  0E10  0831               	movf	___ftmul@f2,w
 17275  0E11  00B4               	movwf	??___ftmul
 17276  0E12  0832               	movf	___ftmul@f2+1,w
 17277  0E13  00B5               	movwf	??___ftmul+1
 17278  0E14  0833               	movf	___ftmul@f2+2,w
 17279  0E15  00B6               	movwf	??___ftmul+2
 17280  0E16  3010               	movlw	16
 17281  0E17                     u9315:	
 17282  0E17  36B6               	lsrf	??___ftmul+2,f
 17283  0E18  0CB5               	rrf	??___ftmul+1,f
 17284  0E19  0CB4               	rrf	??___ftmul,f
 17285  0E1A  0B89               	decfsz	9,f
 17286  0E1B  2E17               	goto	u9315
 17287  0E1C  0834               	movf	??___ftmul,w
 17288  0E1D  00B7               	movwf	??___ftmul+3
 17289  0E1E  0837               	movf	??___ftmul+3,w
 17290  0E1F  06BD               	xorwf	___ftmul@sign,f
 17291  0E20  3080               	movlw	128
 17292  0E21  00B4               	movwf	??___ftmul
 17293  0E22  0834               	movf	??___ftmul,w
 17294  0E23  05BD               	andwf	___ftmul@sign,f
 17295  0E24  17AF               	bsf	___ftmul@f1+1,7
 17296  0E25  17B2               	bsf	___ftmul@f2+1,7
 17297  0E26  30FF               	movlw	255
 17298  0E27  05B1               	andwf	___ftmul@f2,f
 17299  0E28  30FF               	movlw	255
 17300  0E29  05B2               	andwf	___ftmul@f2+1,f
 17301  0E2A  3000               	movlw	0
 17302  0E2B  05B3               	andwf	___ftmul@f2+2,f
 17303  0E2C  3000               	movlw	0
 17304  0E2D  00B9               	movwf	___ftmul@f3_as_product
 17305  0E2E  3000               	movlw	0
 17306  0E2F  00BA               	movwf	___ftmul@f3_as_product+1
 17307  0E30  3000               	movlw	0
 17308  0E31  00BB               	movwf	___ftmul@f3_as_product+2
 17309  0E32  3007               	movlw	7
 17310  0E33  00B4               	movwf	??___ftmul
 17311  0E34  0834               	movf	??___ftmul,w
 17312  0E35  00BC               	movwf	___ftmul@cntr
 17313  0E36                     l8753:	
 17314  0E36  1C2E               	btfss	___ftmul@f1,0
 17315  0E37  2E3E               	goto	l8757
 17316  0E38  0831               	movf	___ftmul@f2,w
 17317  0E39  07B9               	addwf	___ftmul@f3_as_product,f
 17318  0E3A  0832               	movf	___ftmul@f2+1,w
 17319  0E3B  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17320  0E3C  0833               	movf	___ftmul@f2+2,w
 17321  0E3D  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17322  0E3E                     l8757:	
 17323  0E3E  3001               	movlw	1
 17324  0E3F                     u9335:	
 17325  0E3F  36B0               	lsrf	___ftmul@f1+2,f
 17326  0E40  0CAF               	rrf	___ftmul@f1+1,f
 17327  0E41  0CAE               	rrf	___ftmul@f1,f
 17328  0E42  0B89               	decfsz	9,f
 17329  0E43  2E3F               	goto	u9335
 17330  0E44  3001               	movlw	1
 17331  0E45                     u9345:	
 17332  0E45  35B1               	lslf	___ftmul@f2,f
 17333  0E46  0DB2               	rlf	___ftmul@f2+1,f
 17334  0E47  0DB3               	rlf	___ftmul@f2+2,f
 17335  0E48  0B89               	decfsz	9,f
 17336  0E49  2E45               	goto	u9345
 17337  0E4A  3001               	movlw	1
 17338  0E4B  02BC               	subwf	___ftmul@cntr,f
 17339  0E4C  1D03               	btfss	3,2
 17340  0E4D  2E36               	goto	l8753
 17341  0E4E  3009               	movlw	9
 17342  0E4F  00B4               	movwf	??___ftmul
 17343  0E50  0834               	movf	??___ftmul,w
 17344  0E51  00BC               	movwf	___ftmul@cntr
 17345  0E52                     l8765:	
 17346  0E52  1C2E               	btfss	___ftmul@f1,0
 17347  0E53  2E5A               	goto	l8769
 17348  0E54  0831               	movf	___ftmul@f2,w
 17349  0E55  07B9               	addwf	___ftmul@f3_as_product,f
 17350  0E56  0832               	movf	___ftmul@f2+1,w
 17351  0E57  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17352  0E58  0833               	movf	___ftmul@f2+2,w
 17353  0E59  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17354  0E5A                     l8769:	
 17355  0E5A  3001               	movlw	1
 17356  0E5B                     u9375:	
 17357  0E5B  36B0               	lsrf	___ftmul@f1+2,f
 17358  0E5C  0CAF               	rrf	___ftmul@f1+1,f
 17359  0E5D  0CAE               	rrf	___ftmul@f1,f
 17360  0E5E  0B89               	decfsz	9,f
 17361  0E5F  2E5B               	goto	u9375
 17362  0E60  3001               	movlw	1
 17363  0E61                     u9385:	
 17364  0E61  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17365  0E62  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17366  0E63  0CB9               	rrf	___ftmul@f3_as_product,f
 17367  0E64  0B89               	decfsz	9,f
 17368  0E65  2E61               	goto	u9385
 17369  0E66  3001               	movlw	1
 17370  0E67  02BC               	subwf	___ftmul@cntr,f
 17371  0E68  1D03               	btfss	3,2
 17372  0E69  2E52               	goto	l8765
 17373  0E6A  0839               	movf	___ftmul@f3_as_product,w
 17374  0E6B  00A0               	movwf	___ftpack@arg
 17375  0E6C  083A               	movf	___ftmul@f3_as_product+1,w
 17376  0E6D  00A1               	movwf	___ftpack@arg+1
 17377  0E6E  083B               	movf	___ftmul@f3_as_product+2,w
 17378  0E6F  00A2               	movwf	___ftpack@arg+2
 17379  0E70  0838               	movf	___ftmul@exp,w
 17380  0E71  00B4               	movwf	??___ftmul
 17381  0E72  0834               	movf	??___ftmul,w
 17382  0E73  00A3               	movwf	___ftpack@exp
 17383  0E74  083D               	movf	___ftmul@sign,w
 17384  0E75  00B5               	movwf	??___ftmul+1
 17385  0E76  0835               	movf	??___ftmul+1,w
 17386  0E77  00A4               	movwf	___ftpack@sign
 17387  0E78  3195  259A         	fcall	___ftpack
 17388  0E7A  0020               	movlb	0	; select bank0
 17389  0E7B  0820               	movf	?___ftpack,w
 17390  0E7C  00AE               	movwf	?___ftmul
 17391  0E7D  0821               	movf	?___ftpack+1,w
 17392  0E7E  00AF               	movwf	?___ftmul+1
 17393  0E7F  0822               	movf	?___ftpack+2,w
 17394  0E80  00B0               	movwf	?___ftmul+2
 17395  0E81  0008               	return
 17396  0E82                     __end_of___ftmul:	
 17397                           
 17398                           	psect	text121
 17399  0C74                     __ptext121:	
 17400 ;; *************** function ___ftdiv *****************
 17401 ;; Defined at:
 17402 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17403 ;; Parameters:    Size  Location     Type
 17404 ;;  f2              3   14[BANK0 ] float 
 17405 ;;  f1              3   17[BANK0 ] float 
 17406 ;; Auto vars:     Size  Location     Type
 17407 ;;  f3              3   25[BANK0 ] float 
 17408 ;;  sign            1   29[BANK0 ] unsigned char 
 17409 ;;  exp             1   28[BANK0 ] unsigned char 
 17410 ;;  cntr            1   24[BANK0 ] unsigned char 
 17411 ;; Return value:  Size  Location     Type
 17412 ;;                  3   14[BANK0 ] float 
 17413 ;; Registers used:
 17414 ;;		wreg, status,2, status,0, pclath, cstack
 17415 ;; Tracked objects:
 17416 ;;		On entry : 0/0
 17417 ;;		On exit  : 0/0
 17418 ;;		Unchanged: 0/0
 17419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17420 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17422 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;Total ram usage:       16 bytes
 17425 ;; Hardware stack levels used:    1
 17426 ;; Hardware stack levels required when called:    6
 17427 ;; This function calls:
 17428 ;;		___ftpack
 17429 ;; This function is called by:
 17430 ;;		_getDimmerLights_PercentToValue
 17431 ;;		_getDimmerLights_ValueToPercent
 17432 ;; This function uses a non-reentrant model
 17433 ;;
 17434                           
 17435                           
 17436                           ;psect for function ___ftdiv
 17437  0C74                     ___ftdiv:	
 17438                           
 17439                           ;incstack = 0
 17440                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17441  0C74  0020               	movlb	0	; select bank0
 17442  0C75  0831               	movf	___ftdiv@f1,w
 17443  0C76  00B4               	movwf	??___ftdiv
 17444  0C77  0832               	movf	___ftdiv@f1+1,w
 17445  0C78  00B5               	movwf	??___ftdiv+1
 17446  0C79  0833               	movf	___ftdiv@f1+2,w
 17447  0C7A  00B6               	movwf	??___ftdiv+2
 17448  0C7B  1003               	clrc
 17449  0C7C  0D35               	rlf	??___ftdiv+1,w
 17450  0C7D  0D36               	rlf	??___ftdiv+2,w
 17451  0C7E  00B7               	movwf	??___ftdiv+3
 17452  0C7F  0837               	movf	??___ftdiv+3,w
 17453  0C80  00BC               	movwf	___ftdiv@exp
 17454  0C81  08BC               	movf	___ftdiv@exp,f
 17455  0C82  1D03               	skipz
 17456  0C83  2C8B               	goto	l8693
 17457  0C84  3000               	movlw	0
 17458  0C85  00AE               	movwf	?___ftdiv
 17459  0C86  3000               	movlw	0
 17460  0C87  00AF               	movwf	?___ftdiv+1
 17461  0C88  3000               	movlw	0
 17462  0C89  00B0               	movwf	?___ftdiv+2
 17463  0C8A  0008               	return
 17464  0C8B                     l8693:	
 17465  0C8B  082E               	movf	___ftdiv@f2,w
 17466  0C8C  00B4               	movwf	??___ftdiv
 17467  0C8D  082F               	movf	___ftdiv@f2+1,w
 17468  0C8E  00B5               	movwf	??___ftdiv+1
 17469  0C8F  0830               	movf	___ftdiv@f2+2,w
 17470  0C90  00B6               	movwf	??___ftdiv+2
 17471  0C91  1003               	clrc
 17472  0C92  0D35               	rlf	??___ftdiv+1,w
 17473  0C93  0D36               	rlf	??___ftdiv+2,w
 17474  0C94  00B7               	movwf	??___ftdiv+3
 17475  0C95  0837               	movf	??___ftdiv+3,w
 17476  0C96  00BD               	movwf	___ftdiv@sign
 17477  0C97  08BD               	movf	___ftdiv@sign,f
 17478  0C98  1D03               	skipz
 17479  0C99  2CA1               	goto	l8699
 17480  0C9A  3000               	movlw	0
 17481  0C9B  00AE               	movwf	?___ftdiv
 17482  0C9C  3000               	movlw	0
 17483  0C9D  00AF               	movwf	?___ftdiv+1
 17484  0C9E  3000               	movlw	0
 17485  0C9F  00B0               	movwf	?___ftdiv+2
 17486  0CA0  0008               	return
 17487  0CA1                     l8699:	
 17488  0CA1  3000               	movlw	0
 17489  0CA2  00B9               	movwf	___ftdiv@f3
 17490  0CA3  3000               	movlw	0
 17491  0CA4  00BA               	movwf	___ftdiv@f3+1
 17492  0CA5  3000               	movlw	0
 17493  0CA6  00BB               	movwf	___ftdiv@f3+2
 17494  0CA7  3089               	movlw	137
 17495  0CA8  073D               	addwf	___ftdiv@sign,w
 17496  0CA9  00B4               	movwf	??___ftdiv
 17497  0CAA  0834               	movf	??___ftdiv,w
 17498  0CAB  02BC               	subwf	___ftdiv@exp,f
 17499  0CAC  0831               	movf	___ftdiv@f1,w
 17500  0CAD  00B4               	movwf	??___ftdiv
 17501  0CAE  0832               	movf	___ftdiv@f1+1,w
 17502  0CAF  00B5               	movwf	??___ftdiv+1
 17503  0CB0  0833               	movf	___ftdiv@f1+2,w
 17504  0CB1  00B6               	movwf	??___ftdiv+2
 17505  0CB2  3010               	movlw	16
 17506  0CB3                     u9225:	
 17507  0CB3  36B6               	lsrf	??___ftdiv+2,f
 17508  0CB4  0CB5               	rrf	??___ftdiv+1,f
 17509  0CB5  0CB4               	rrf	??___ftdiv,f
 17510  0CB6  0B89               	decfsz	9,f
 17511  0CB7  2CB3               	goto	u9225
 17512  0CB8  0834               	movf	??___ftdiv,w
 17513  0CB9  00B7               	movwf	??___ftdiv+3
 17514  0CBA  0837               	movf	??___ftdiv+3,w
 17515  0CBB  00BD               	movwf	___ftdiv@sign
 17516  0CBC  082E               	movf	___ftdiv@f2,w
 17517  0CBD  00B4               	movwf	??___ftdiv
 17518  0CBE  082F               	movf	___ftdiv@f2+1,w
 17519  0CBF  00B5               	movwf	??___ftdiv+1
 17520  0CC0  0830               	movf	___ftdiv@f2+2,w
 17521  0CC1  00B6               	movwf	??___ftdiv+2
 17522  0CC2  3010               	movlw	16
 17523  0CC3                     u9235:	
 17524  0CC3  36B6               	lsrf	??___ftdiv+2,f
 17525  0CC4  0CB5               	rrf	??___ftdiv+1,f
 17526  0CC5  0CB4               	rrf	??___ftdiv,f
 17527  0CC6  0B89               	decfsz	9,f
 17528  0CC7  2CC3               	goto	u9235
 17529  0CC8  0834               	movf	??___ftdiv,w
 17530  0CC9  00B7               	movwf	??___ftdiv+3
 17531  0CCA  0837               	movf	??___ftdiv+3,w
 17532  0CCB  06BD               	xorwf	___ftdiv@sign,f
 17533  0CCC  3080               	movlw	128
 17534  0CCD  00B4               	movwf	??___ftdiv
 17535  0CCE  0834               	movf	??___ftdiv,w
 17536  0CCF  05BD               	andwf	___ftdiv@sign,f
 17537  0CD0  17B2               	bsf	___ftdiv@f1+1,7
 17538  0CD1  30FF               	movlw	255
 17539  0CD2  05B1               	andwf	___ftdiv@f1,f
 17540  0CD3  30FF               	movlw	255
 17541  0CD4  05B2               	andwf	___ftdiv@f1+1,f
 17542  0CD5  3000               	movlw	0
 17543  0CD6  05B3               	andwf	___ftdiv@f1+2,f
 17544  0CD7  17AF               	bsf	___ftdiv@f2+1,7
 17545  0CD8  30FF               	movlw	255
 17546  0CD9  05AE               	andwf	___ftdiv@f2,f
 17547  0CDA  30FF               	movlw	255
 17548  0CDB  05AF               	andwf	___ftdiv@f2+1,f
 17549  0CDC  3000               	movlw	0
 17550  0CDD  05B0               	andwf	___ftdiv@f2+2,f
 17551  0CDE  3018               	movlw	24
 17552  0CDF  00B4               	movwf	??___ftdiv
 17553  0CE0  0834               	movf	??___ftdiv,w
 17554  0CE1  00B8               	movwf	___ftdiv@cntr
 17555  0CE2                     l8713:	
 17556  0CE2  3001               	movlw	1
 17557  0CE3                     u9245:	
 17558  0CE3  35B9               	lslf	___ftdiv@f3,f
 17559  0CE4  0DBA               	rlf	___ftdiv@f3+1,f
 17560  0CE5  0DBB               	rlf	___ftdiv@f3+2,f
 17561  0CE6  0B89               	decfsz	9,f
 17562  0CE7  2CE3               	goto	u9245
 17563  0CE8  0830               	movf	___ftdiv@f2+2,w
 17564  0CE9  0233               	subwf	___ftdiv@f1+2,w
 17565  0CEA  1D03               	skipz
 17566  0CEB  2CF2               	goto	u9255
 17567  0CEC  082F               	movf	___ftdiv@f2+1,w
 17568  0CED  0232               	subwf	___ftdiv@f1+1,w
 17569  0CEE  1D03               	skipz
 17570  0CEF  2CF2               	goto	u9255
 17571  0CF0  082E               	movf	___ftdiv@f2,w
 17572  0CF1  0231               	subwf	___ftdiv@f1,w
 17573  0CF2                     u9255:	
 17574  0CF2  1C03               	skipc
 17575  0CF3  2CFB               	goto	l8721
 17576  0CF4  082E               	movf	___ftdiv@f2,w
 17577  0CF5  02B1               	subwf	___ftdiv@f1,f
 17578  0CF6  082F               	movf	___ftdiv@f2+1,w
 17579  0CF7  3BB2               	subwfb	___ftdiv@f1+1,f
 17580  0CF8  0830               	movf	___ftdiv@f2+2,w
 17581  0CF9  3BB3               	subwfb	___ftdiv@f1+2,f
 17582  0CFA  1439               	bsf	___ftdiv@f3,0
 17583  0CFB                     l8721:	
 17584  0CFB  3001               	movlw	1
 17585  0CFC                     u9265:	
 17586  0CFC  35B1               	lslf	___ftdiv@f1,f
 17587  0CFD  0DB2               	rlf	___ftdiv@f1+1,f
 17588  0CFE  0DB3               	rlf	___ftdiv@f1+2,f
 17589  0CFF  0B89               	decfsz	9,f
 17590  0D00  2CFC               	goto	u9265
 17591  0D01  3001               	movlw	1
 17592  0D02  02B8               	subwf	___ftdiv@cntr,f
 17593  0D03  1D03               	btfss	3,2
 17594  0D04  2CE2               	goto	l8713
 17595  0D05  0839               	movf	___ftdiv@f3,w
 17596  0D06  00A0               	movwf	___ftpack@arg
 17597  0D07  083A               	movf	___ftdiv@f3+1,w
 17598  0D08  00A1               	movwf	___ftpack@arg+1
 17599  0D09  083B               	movf	___ftdiv@f3+2,w
 17600  0D0A  00A2               	movwf	___ftpack@arg+2
 17601  0D0B  083C               	movf	___ftdiv@exp,w
 17602  0D0C  00B4               	movwf	??___ftdiv
 17603  0D0D  0834               	movf	??___ftdiv,w
 17604  0D0E  00A3               	movwf	___ftpack@exp
 17605  0D0F  083D               	movf	___ftdiv@sign,w
 17606  0D10  00B5               	movwf	??___ftdiv+1
 17607  0D11  0835               	movf	??___ftdiv+1,w
 17608  0D12  00A4               	movwf	___ftpack@sign
 17609  0D13  3195  259A         	fcall	___ftpack
 17610  0D15  0020               	movlb	0	; select bank0
 17611  0D16  0820               	movf	?___ftpack,w
 17612  0D17  00AE               	movwf	?___ftdiv
 17613  0D18  0821               	movf	?___ftpack+1,w
 17614  0D19  00AF               	movwf	?___ftdiv+1
 17615  0D1A  0822               	movf	?___ftpack+2,w
 17616  0D1B  00B0               	movwf	?___ftdiv+2
 17617  0D1C  0008               	return
 17618  0D1D                     __end_of___ftdiv:	
 17619                           
 17620                           	psect	text122
 17621  0432                     __ptext122:	
 17622 ;; *************** function ___ftadd *****************
 17623 ;; Defined at:
 17624 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17625 ;; Parameters:    Size  Location     Type
 17626 ;;  f1              3   33[BANK0 ] float 
 17627 ;;  f2              3   36[BANK0 ] float 
 17628 ;; Auto vars:     Size  Location     Type
 17629 ;;  exp1            1   45[BANK0 ] unsigned char 
 17630 ;;  exp2            1   44[BANK0 ] unsigned char 
 17631 ;;  sign            1   43[BANK0 ] unsigned char 
 17632 ;; Return value:  Size  Location     Type
 17633 ;;                  3   33[BANK0 ] float 
 17634 ;; Registers used:
 17635 ;;		wreg, status,2, status,0, pclath, cstack
 17636 ;; Tracked objects:
 17637 ;;		On entry : 0/0
 17638 ;;		On exit  : 0/0
 17639 ;;		Unchanged: 0/0
 17640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17642 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;Total ram usage:       13 bytes
 17646 ;; Hardware stack levels used:    1
 17647 ;; Hardware stack levels required when called:    6
 17648 ;; This function calls:
 17649 ;;		___ftpack
 17650 ;; This function is called by:
 17651 ;;		_getDimmerLights_PercentToValue
 17652 ;;		_getDimmerLights_ValueToPercent
 17653 ;; This function uses a non-reentrant model
 17654 ;;
 17655                           
 17656                           
 17657                           ;psect for function ___ftadd
 17658  0432                     ___ftadd:	
 17659                           
 17660                           ;incstack = 0
 17661                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17662  0432  0020               	movlb	0	; select bank0
 17663  0433  0841               	movf	___ftadd@f1,w
 17664  0434  00C7               	movwf	??___ftadd
 17665  0435  0842               	movf	___ftadd@f1+1,w
 17666  0436  00C8               	movwf	??___ftadd+1
 17667  0437  0843               	movf	___ftadd@f1+2,w
 17668  0438  00C9               	movwf	??___ftadd+2
 17669  0439  1003               	clrc
 17670  043A  0D48               	rlf	??___ftadd+1,w
 17671  043B  0D49               	rlf	??___ftadd+2,w
 17672  043C  00CA               	movwf	??___ftadd+3
 17673  043D  084A               	movf	??___ftadd+3,w
 17674  043E  00CD               	movwf	___ftadd@exp1
 17675  043F  0844               	movf	___ftadd@f2,w
 17676  0440  00C7               	movwf	??___ftadd
 17677  0441  0845               	movf	___ftadd@f2+1,w
 17678  0442  00C8               	movwf	??___ftadd+1
 17679  0443  0846               	movf	___ftadd@f2+2,w
 17680  0444  00C9               	movwf	??___ftadd+2
 17681  0445  1003               	clrc
 17682  0446  0D48               	rlf	??___ftadd+1,w
 17683  0447  0D49               	rlf	??___ftadd+2,w
 17684  0448  00CA               	movwf	??___ftadd+3
 17685  0449  084A               	movf	??___ftadd+3,w
 17686  044A  00CC               	movwf	___ftadd@exp2
 17687  044B  084D               	movf	___ftadd@exp1,w
 17688  044C  1903               	btfsc	3,2
 17689  044D  2C5A               	goto	l8623
 17690  044E  084C               	movf	___ftadd@exp2,w
 17691  044F  024D               	subwf	___ftadd@exp1,w
 17692  0450  1803               	skipnc
 17693  0451  2C61               	goto	l8627
 17694  0452  034D               	decf	___ftadd@exp1,w
 17695  0453  3AFF               	xorlw	255
 17696  0454  074C               	addwf	___ftadd@exp2,w
 17697  0455  00C7               	movwf	??___ftadd
 17698  0456  3019               	movlw	25
 17699  0457  0247               	subwf	??___ftadd,w
 17700  0458  1C03               	skipc
 17701  0459  2C61               	goto	l8627
 17702  045A                     l8623:	
 17703  045A  0844               	movf	___ftadd@f2,w
 17704  045B  00C1               	movwf	?___ftadd
 17705  045C  0845               	movf	___ftadd@f2+1,w
 17706  045D  00C2               	movwf	?___ftadd+1
 17707  045E  0846               	movf	___ftadd@f2+2,w
 17708  045F  00C3               	movwf	?___ftadd+2
 17709  0460  0008               	return
 17710  0461                     l8627:	
 17711  0461  084C               	movf	___ftadd@exp2,w
 17712  0462  1903               	btfsc	3,2
 17713  0463  0008               	return
 17714  0464  084D               	movf	___ftadd@exp1,w
 17715  0465  024C               	subwf	___ftadd@exp2,w
 17716  0466  1803               	skipnc
 17717  0467  2C70               	goto	l8633
 17718  0468  034C               	decf	___ftadd@exp2,w
 17719  0469  3AFF               	xorlw	255
 17720  046A  074D               	addwf	___ftadd@exp1,w
 17721  046B  00C7               	movwf	??___ftadd
 17722  046C  3019               	movlw	25
 17723  046D  0247               	subwf	??___ftadd,w
 17724  046E  1803               	btfsc	3,0
 17725  046F  0008               	return
 17726  0470                     l8633:	
 17727  0470  3006               	movlw	6
 17728  0471  00C7               	movwf	??___ftadd
 17729  0472  0847               	movf	??___ftadd,w
 17730  0473  00CB               	movwf	___ftadd@sign
 17731  0474  1BC3               	btfsc	___ftadd@f1+2,7
 17732  0475  17CB               	bsf	___ftadd@sign,7
 17733  0476  1BC6               	btfsc	___ftadd@f2+2,7
 17734  0477  174B               	bsf	___ftadd@sign,6
 17735  0478  17C2               	bsf	___ftadd@f1+1,7
 17736  0479  30FF               	movlw	255
 17737  047A  05C1               	andwf	___ftadd@f1,f
 17738  047B  30FF               	movlw	255
 17739  047C  05C2               	andwf	___ftadd@f1+1,f
 17740  047D  3000               	movlw	0
 17741  047E  05C3               	andwf	___ftadd@f1+2,f
 17742  047F  17C5               	bsf	___ftadd@f2+1,7
 17743  0480  30FF               	movlw	255
 17744  0481  05C4               	andwf	___ftadd@f2,f
 17745  0482  30FF               	movlw	255
 17746  0483  05C5               	andwf	___ftadd@f2+1,f
 17747  0484  3000               	movlw	0
 17748  0485  05C6               	andwf	___ftadd@f2+2,f
 17749  0486  084C               	movf	___ftadd@exp2,w
 17750  0487  024D               	subwf	___ftadd@exp1,w
 17751  0488  1803               	skipnc
 17752  0489  2CAC               	goto	l8655
 17753  048A                     l8645:	
 17754  048A  3001               	movlw	1
 17755  048B                     u9065:	
 17756  048B  35C4               	lslf	___ftadd@f2,f
 17757  048C  0DC5               	rlf	___ftadd@f2+1,f
 17758  048D  0DC6               	rlf	___ftadd@f2+2,f
 17759  048E  0B89               	decfsz	9,f
 17760  048F  2C8B               	goto	u9065
 17761  0490  3001               	movlw	1
 17762  0491  02CC               	subwf	___ftadd@exp2,f
 17763  0492  084C               	movf	___ftadd@exp2,w
 17764  0493  064D               	xorwf	___ftadd@exp1,w
 17765  0494  1903               	skipnz
 17766  0495  2CA7               	goto	l8653
 17767  0496  3001               	movlw	1
 17768  0497  02CB               	subwf	___ftadd@sign,f
 17769  0498  084B               	movf	___ftadd@sign,w
 17770  0499  3907               	andlw	7
 17771  049A  1903               	btfsc	3,2
 17772  049B  2CA7               	goto	l8653
 17773  049C  2C8A               	goto	l8645
 17774  049D                     l8651:	
 17775  049D  3001               	movlw	1
 17776  049E                     u9095:	
 17777  049E  36C3               	lsrf	___ftadd@f1+2,f
 17778  049F  0CC2               	rrf	___ftadd@f1+1,f
 17779  04A0  0CC1               	rrf	___ftadd@f1,f
 17780  04A1  0B89               	decfsz	9,f
 17781  04A2  2C9E               	goto	u9095
 17782  04A3  3001               	movlw	1
 17783  04A4  00C7               	movwf	??___ftadd
 17784  04A5  0847               	movf	??___ftadd,w
 17785  04A6  07CD               	addwf	___ftadd@exp1,f
 17786  04A7                     l8653:	
 17787  04A7  084D               	movf	___ftadd@exp1,w
 17788  04A8  064C               	xorwf	___ftadd@exp2,w
 17789  04A9  1903               	btfsc	3,2
 17790  04AA  2CD1               	goto	l2888
 17791  04AB  2C9D               	goto	l8651
 17792  04AC                     l8655:	
 17793  04AC  084D               	movf	___ftadd@exp1,w
 17794  04AD  024C               	subwf	___ftadd@exp2,w
 17795  04AE  1803               	skipnc
 17796  04AF  2CD1               	goto	l2888
 17797  04B0                     l8657:	
 17798  04B0  3001               	movlw	1
 17799  04B1                     u9125:	
 17800  04B1  35C1               	lslf	___ftadd@f1,f
 17801  04B2  0DC2               	rlf	___ftadd@f1+1,f
 17802  04B3  0DC3               	rlf	___ftadd@f1+2,f
 17803  04B4  0B89               	decfsz	9,f
 17804  04B5  2CB1               	goto	u9125
 17805  04B6  3001               	movlw	1
 17806  04B7  02CD               	subwf	___ftadd@exp1,f
 17807  04B8  084C               	movf	___ftadd@exp2,w
 17808  04B9  064D               	xorwf	___ftadd@exp1,w
 17809  04BA  1903               	skipnz
 17810  04BB  2CCD               	goto	l8665
 17811  04BC  3001               	movlw	1
 17812  04BD  02CB               	subwf	___ftadd@sign,f
 17813  04BE  084B               	movf	___ftadd@sign,w
 17814  04BF  3907               	andlw	7
 17815  04C0  1903               	btfsc	3,2
 17816  04C1  2CCD               	goto	l8665
 17817  04C2  2CB0               	goto	l8657
 17818  04C3                     l8663:	
 17819  04C3  3001               	movlw	1
 17820  04C4                     u9155:	
 17821  04C4  36C6               	lsrf	___ftadd@f2+2,f
 17822  04C5  0CC5               	rrf	___ftadd@f2+1,f
 17823  04C6  0CC4               	rrf	___ftadd@f2,f
 17824  04C7  0B89               	decfsz	9,f
 17825  04C8  2CC4               	goto	u9155
 17826  04C9  3001               	movlw	1
 17827  04CA  00C7               	movwf	??___ftadd
 17828  04CB  0847               	movf	??___ftadd,w
 17829  04CC  07CC               	addwf	___ftadd@exp2,f
 17830  04CD                     l8665:	
 17831  04CD  084D               	movf	___ftadd@exp1,w
 17832  04CE  064C               	xorwf	___ftadd@exp2,w
 17833  04CF  1D03               	skipz
 17834  04D0  2CC3               	goto	l8663
 17835  04D1                     l2888:	
 17836  04D1  1FCB               	btfss	___ftadd@sign,7
 17837  04D2  2CE3               	goto	l8669
 17838  04D3  30FF               	movlw	255
 17839  04D4  06C1               	xorwf	___ftadd@f1,f
 17840  04D5  30FF               	movlw	255
 17841  04D6  06C2               	xorwf	___ftadd@f1+1,f
 17842  04D7  30FF               	movlw	255
 17843  04D8  06C3               	xorwf	___ftadd@f1+2,f
 17844  04D9  3001               	movlw	1
 17845  04DA  07C1               	addwf	___ftadd@f1,f
 17846  04DB  3000               	movlw	0
 17847  04DC  1803               	skipnc
 17848  04DD  3001               	movlw	1
 17849  04DE  07C2               	addwf	___ftadd@f1+1,f
 17850  04DF  3000               	movlw	0
 17851  04E0  1803               	skipnc
 17852  04E1  3001               	movlw	1
 17853  04E2  07C3               	addwf	___ftadd@f1+2,f
 17854  04E3                     l8669:	
 17855  04E3  1F4B               	btfss	___ftadd@sign,6
 17856  04E4  2CF5               	goto	l8673
 17857  04E5  30FF               	movlw	255
 17858  04E6  06C4               	xorwf	___ftadd@f2,f
 17859  04E7  30FF               	movlw	255
 17860  04E8  06C5               	xorwf	___ftadd@f2+1,f
 17861  04E9  30FF               	movlw	255
 17862  04EA  06C6               	xorwf	___ftadd@f2+2,f
 17863  04EB  3001               	movlw	1
 17864  04EC  07C4               	addwf	___ftadd@f2,f
 17865  04ED  3000               	movlw	0
 17866  04EE  1803               	skipnc
 17867  04EF  3001               	movlw	1
 17868  04F0  07C5               	addwf	___ftadd@f2+1,f
 17869  04F1  3000               	movlw	0
 17870  04F2  1803               	skipnc
 17871  04F3  3001               	movlw	1
 17872  04F4  07C6               	addwf	___ftadd@f2+2,f
 17873  04F5                     l8673:	
 17874  04F5  01CB               	clrf	___ftadd@sign
 17875  04F6  0841               	movf	___ftadd@f1,w
 17876  04F7  07C4               	addwf	___ftadd@f2,f
 17877  04F8  0842               	movf	___ftadd@f1+1,w
 17878  04F9  3DC5               	addwfc	___ftadd@f2+1,f
 17879  04FA  0843               	movf	___ftadd@f1+2,w
 17880  04FB  3DC6               	addwfc	___ftadd@f2+2,f
 17881  04FC  1FC6               	btfss	___ftadd@f2+2,7
 17882  04FD  2D10               	goto	l8683
 17883  04FE  30FF               	movlw	255
 17884  04FF  06C4               	xorwf	___ftadd@f2,f
 17885  0500  30FF               	movlw	255
 17886  0501  06C5               	xorwf	___ftadd@f2+1,f
 17887  0502  30FF               	movlw	255
 17888  0503  06C6               	xorwf	___ftadd@f2+2,f
 17889  0504  3001               	movlw	1
 17890  0505  07C4               	addwf	___ftadd@f2,f
 17891  0506  3000               	movlw	0
 17892  0507  1803               	skipnc
 17893  0508  3001               	movlw	1
 17894  0509  07C5               	addwf	___ftadd@f2+1,f
 17895  050A  3000               	movlw	0
 17896  050B  1803               	skipnc
 17897  050C  3001               	movlw	1
 17898  050D  07C6               	addwf	___ftadd@f2+2,f
 17899  050E  01CB               	clrf	___ftadd@sign
 17900  050F  0ACB               	incf	___ftadd@sign,f
 17901  0510                     l8683:	
 17902  0510  0844               	movf	___ftadd@f2,w
 17903  0511  00A0               	movwf	___ftpack@arg
 17904  0512  0845               	movf	___ftadd@f2+1,w
 17905  0513  00A1               	movwf	___ftpack@arg+1
 17906  0514  0846               	movf	___ftadd@f2+2,w
 17907  0515  00A2               	movwf	___ftpack@arg+2
 17908  0516  084D               	movf	___ftadd@exp1,w
 17909  0517  00C7               	movwf	??___ftadd
 17910  0518  0847               	movf	??___ftadd,w
 17911  0519  00A3               	movwf	___ftpack@exp
 17912  051A  084B               	movf	___ftadd@sign,w
 17913  051B  00C8               	movwf	??___ftadd+1
 17914  051C  0848               	movf	??___ftadd+1,w
 17915  051D  00A4               	movwf	___ftpack@sign
 17916  051E  3195  259A         	fcall	___ftpack
 17917  0520  0020               	movlb	0	; select bank0
 17918  0521  0820               	movf	?___ftpack,w
 17919  0522  00C1               	movwf	?___ftadd
 17920  0523  0821               	movf	?___ftpack+1,w
 17921  0524  00C2               	movwf	?___ftadd+1
 17922  0525  0822               	movf	?___ftpack+2,w
 17923  0526  00C3               	movwf	?___ftadd+2
 17924  0527  0008               	return
 17925  0528                     __end_of___ftadd:	
 17926                           
 17927                           	psect	text123
 17928  1F6D                     __ptext123:	
 17929 ;; *************** function ___awtoft *****************
 17930 ;; Defined at:
 17931 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17932 ;; Parameters:    Size  Location     Type
 17933 ;;  c               2    8[BANK0 ] int 
 17934 ;; Auto vars:     Size  Location     Type
 17935 ;;  sign            1   13[BANK0 ] unsigned char 
 17936 ;; Return value:  Size  Location     Type
 17937 ;;                  3    8[BANK0 ] float 
 17938 ;; Registers used:
 17939 ;;		wreg, status,2, status,0, pclath, cstack
 17940 ;; Tracked objects:
 17941 ;;		On entry : 0/0
 17942 ;;		On exit  : 0/0
 17943 ;;		Unchanged: 0/0
 17944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17945 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17948 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17949 ;;Total ram usage:        6 bytes
 17950 ;; Hardware stack levels used:    1
 17951 ;; Hardware stack levels required when called:    6
 17952 ;; This function calls:
 17953 ;;		___ftpack
 17954 ;; This function is called by:
 17955 ;;		_getDimmerLights_PercentToValue
 17956 ;;		_getDimmerLights_ValueToPercent
 17957 ;; This function uses a non-reentrant model
 17958 ;;
 17959                           
 17960                           
 17961                           ;psect for function ___awtoft
 17962  1F6D                     ___awtoft:	
 17963                           
 17964                           ;incstack = 0
 17965                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17966  1F6D  0020               	movlb	0	; select bank0
 17967  1F6E  01AD               	clrf	___awtoft@sign
 17968  1F6F  1FA9               	btfss	___awtoft@c+1,7
 17969  1F70  2F78               	goto	l8611
 17970  1F71  09A8               	comf	___awtoft@c,f
 17971  1F72  09A9               	comf	___awtoft@c+1,f
 17972  1F73  0AA8               	incf	___awtoft@c,f
 17973  1F74  1903               	skipnz
 17974  1F75  0AA9               	incf	___awtoft@c+1,f
 17975  1F76  01AD               	clrf	___awtoft@sign
 17976  1F77  0AAD               	incf	___awtoft@sign,f
 17977  1F78                     l8611:	
 17978  1F78  0828               	movf	___awtoft@c,w
 17979  1F79  00A0               	movwf	___ftpack@arg
 17980  1F7A  0829               	movf	___awtoft@c+1,w
 17981  1F7B  00A1               	movwf	___ftpack@arg+1
 17982  1F7C  01A2               	clrf	___ftpack@arg+2
 17983  1F7D  308E               	movlw	142
 17984  1F7E  00AB               	movwf	??___awtoft
 17985  1F7F  082B               	movf	??___awtoft,w
 17986  1F80  00A3               	movwf	___ftpack@exp
 17987  1F81  082D               	movf	___awtoft@sign,w
 17988  1F82  00AC               	movwf	??___awtoft+1
 17989  1F83  082C               	movf	??___awtoft+1,w
 17990  1F84  00A4               	movwf	___ftpack@sign
 17991  1F85  3195  259A         	fcall	___ftpack
 17992  1F87  0020               	movlb	0	; select bank0
 17993  1F88  0820               	movf	?___ftpack,w
 17994  1F89  00A8               	movwf	?___awtoft
 17995  1F8A  0821               	movf	?___ftpack+1,w
 17996  1F8B  00A9               	movwf	?___awtoft+1
 17997  1F8C  0822               	movf	?___ftpack+2,w
 17998  1F8D  00AA               	movwf	?___awtoft+2
 17999  1F8E  0008               	return
 18000  1F8F                     __end_of___awtoft:	
 18001                           
 18002                           	psect	text124
 18003  159A                     __ptext124:	
 18004 ;; *************** function ___ftpack *****************
 18005 ;; Defined at:
 18006 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;  arg             3    0[BANK0 ] unsigned um
 18009 ;;  exp             1    3[BANK0 ] unsigned char 
 18010 ;;  sign            1    4[BANK0 ] unsigned char 
 18011 ;; Auto vars:     Size  Location     Type
 18012 ;;		None
 18013 ;; Return value:  Size  Location     Type
 18014 ;;                  3    0[BANK0 ] float 
 18015 ;; Registers used:
 18016 ;;		wreg, status,2, status,0
 18017 ;; Tracked objects:
 18018 ;;		On entry : 0/0
 18019 ;;		On exit  : 0/0
 18020 ;;		Unchanged: 0/0
 18021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18022 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18025 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18026 ;;Total ram usage:        8 bytes
 18027 ;; Hardware stack levels used:    1
 18028 ;; Hardware stack levels required when called:    5
 18029 ;; This function calls:
 18030 ;;		Nothing
 18031 ;; This function is called by:
 18032 ;;		___awtoft
 18033 ;;		___ftadd
 18034 ;;		___ftdiv
 18035 ;;		___ftmul
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           
 18040                           ;psect for function ___ftpack
 18041  159A                     ___ftpack:	
 18042                           
 18043                           ;incstack = 0
 18044                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18045  159A  0020               	movlb	0	; select bank0
 18046  159B  0823               	movf	___ftpack@exp,w
 18047  159C  1903               	btfsc	3,2
 18048  159D  2DA3               	goto	l8479
 18049  159E  0822               	movf	___ftpack@arg+2,w
 18050  159F  0421               	iorwf	___ftpack@arg+1,w
 18051  15A0  0420               	iorwf	___ftpack@arg,w
 18052  15A1  1D03               	skipz
 18053  15A2  2DB4               	goto	l8485
 18054  15A3                     l8479:	
 18055  15A3  3000               	movlw	0
 18056  15A4  00A0               	movwf	?___ftpack
 18057  15A5  3000               	movlw	0
 18058  15A6  00A1               	movwf	?___ftpack+1
 18059  15A7  3000               	movlw	0
 18060  15A8  00A2               	movwf	?___ftpack+2
 18061  15A9  0008               	return
 18062  15AA                     l8483:	
 18063  15AA  3001               	movlw	1
 18064  15AB  00A5               	movwf	??___ftpack
 18065  15AC  0825               	movf	??___ftpack,w
 18066  15AD  07A3               	addwf	___ftpack@exp,f
 18067  15AE  3001               	movlw	1
 18068  15AF                     u8695:	
 18069  15AF  36A2               	lsrf	___ftpack@arg+2,f
 18070  15B0  0CA1               	rrf	___ftpack@arg+1,f
 18071  15B1  0CA0               	rrf	___ftpack@arg,f
 18072  15B2  0B89               	decfsz	9,f
 18073  15B3  2DAF               	goto	u8695
 18074  15B4                     l8485:	
 18075  15B4  30FE               	movlw	254
 18076  15B5  0522               	andwf	___ftpack@arg+2,w
 18077  15B6  1903               	btfsc	3,2
 18078  15B7  2DCD               	goto	l2859
 18079  15B8  2DAA               	goto	l8483
 18080  15B9                     l8487:	
 18081  15B9  3001               	movlw	1
 18082  15BA  00A5               	movwf	??___ftpack
 18083  15BB  0825               	movf	??___ftpack,w
 18084  15BC  07A3               	addwf	___ftpack@exp,f
 18085  15BD  3001               	movlw	1
 18086  15BE  07A0               	addwf	___ftpack@arg,f
 18087  15BF  3000               	movlw	0
 18088  15C0  1803               	skipnc
 18089  15C1  3001               	movlw	1
 18090  15C2  07A1               	addwf	___ftpack@arg+1,f
 18091  15C3  3000               	movlw	0
 18092  15C4  1803               	skipnc
 18093  15C5  3001               	movlw	1
 18094  15C6  07A2               	addwf	___ftpack@arg+2,f
 18095  15C7  3001               	movlw	1
 18096  15C8                     u8715:	
 18097  15C8  36A2               	lsrf	___ftpack@arg+2,f
 18098  15C9  0CA1               	rrf	___ftpack@arg+1,f
 18099  15CA  0CA0               	rrf	___ftpack@arg,f
 18100  15CB  0B89               	decfsz	9,f
 18101  15CC  2DC8               	goto	u8715
 18102  15CD                     l2859:	
 18103  15CD  30FF               	movlw	255
 18104  15CE  0522               	andwf	___ftpack@arg+2,w
 18105  15CF  1903               	btfsc	3,2
 18106  15D0  2DDA               	goto	l8495
 18107  15D1  2DB9               	goto	l8487
 18108  15D2                     l8493:	
 18109  15D2  3001               	movlw	1
 18110  15D3  02A3               	subwf	___ftpack@exp,f
 18111  15D4  3001               	movlw	1
 18112  15D5                     u8735:	
 18113  15D5  35A0               	lslf	___ftpack@arg,f
 18114  15D6  0DA1               	rlf	___ftpack@arg+1,f
 18115  15D7  0DA2               	rlf	___ftpack@arg+2,f
 18116  15D8  0B89               	decfsz	9,f
 18117  15D9  2DD5               	goto	u8735
 18118  15DA                     l8495:	
 18119  15DA  1FA1               	btfss	___ftpack@arg+1,7
 18120  15DB  2DD2               	goto	l8493
 18121  15DC  1823               	btfsc	___ftpack@exp,0
 18122  15DD  2DE4               	goto	l2865
 18123  15DE  30FF               	movlw	255
 18124  15DF  05A0               	andwf	___ftpack@arg,f
 18125  15E0  307F               	movlw	127
 18126  15E1  05A1               	andwf	___ftpack@arg+1,f
 18127  15E2  30FF               	movlw	255
 18128  15E3  05A2               	andwf	___ftpack@arg+2,f
 18129  15E4                     l2865:	
 18130  15E4  1003               	clrc
 18131  15E5  0CA3               	rrf	___ftpack@exp,f
 18132  15E6  0823               	movf	___ftpack@exp,w
 18133  15E7  00A5               	movwf	??___ftpack
 18134  15E8  01A6               	clrf	??___ftpack+1
 18135  15E9  01A7               	clrf	??___ftpack+2
 18136  15EA  3010               	movlw	16
 18137  15EB                     u8765:	
 18138  15EB  35A5               	lslf	??___ftpack,f
 18139  15EC  0DA6               	rlf	??___ftpack+1,f
 18140  15ED  0DA7               	rlf	??___ftpack+2,f
 18141  15EE  0B89               	decfsz	9,f
 18142  15EF  2DEB               	goto	u8765
 18143  15F0  0825               	movf	??___ftpack,w
 18144  15F1  04A0               	iorwf	___ftpack@arg,f
 18145  15F2  0826               	movf	??___ftpack+1,w
 18146  15F3  04A1               	iorwf	___ftpack@arg+1,f
 18147  15F4  0827               	movf	??___ftpack+2,w
 18148  15F5  04A2               	iorwf	___ftpack@arg+2,f
 18149  15F6  0824               	movf	___ftpack@sign,w
 18150  15F7  1903               	btfsc	3,2
 18151  15F8  0008               	return
 18152  15F9  17A2               	bsf	___ftpack@arg+2,7
 18153  15FA  0008               	return
 18154  15FB                     __end_of___ftpack:	
 18155                           
 18156                           	psect	text125
 18157  1B7D                     __ptext125:	
 18158 ;; *************** function _Division *****************
 18159 ;; Defined at:
 18160 ;;		line 1381 in file "../src/Dimmer_B1.c"
 18161 ;; Parameters:    Size  Location     Type
 18162 ;;  value           1    wreg     unsigned char 
 18163 ;;  num             1    5[BANK0 ] unsigned char 
 18164 ;; Auto vars:     Size  Location     Type
 18165 ;;  value           1    8[BANK0 ] unsigned char 
 18166 ;;  result          1    9[BANK0 ] unsigned char 
 18167 ;; Return value:  Size  Location     Type
 18168 ;;                  1    wreg      unsigned char 
 18169 ;; Registers used:
 18170 ;;		wreg, status,2, status,0, pclath, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18176 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;Total ram usage:        5 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    6
 18183 ;; This function calls:
 18184 ;;		___lbdiv
 18185 ;; This function is called by:
 18186 ;;		_DimmerIntr_Initialization
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           
 18191                           ;psect for function _Division
 18192  1B7D                     _Division:	
 18193                           
 18194                           ;incstack = 0
 18195                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18196                           ;Division@value stored from wreg
 18197  1B7D  0020               	movlb	0	; select bank0
 18198  1B7E  00A8               	movwf	Division@value
 18199                           
 18200                           ;Dimmer_B1.c: 1382: char result = (char) (value / num);
 18201  1B7F  0825               	movf	Division@num,w
 18202  1B80  00A6               	movwf	??_Division
 18203  1B81  0826               	movf	??_Division,w
 18204  1B82  00A0               	movwf	___lbdiv@divisor
 18205  1B83  0828               	movf	Division@value,w
 18206  1B84  319F  274B         	fcall	___lbdiv
 18207  1B86  0020               	movlb	0	; select bank0
 18208  1B87  00A7               	movwf	??_Division+1
 18209  1B88  0827               	movf	??_Division+1,w
 18210  1B89  00A9               	movwf	Division@result
 18211                           
 18212                           ;Dimmer_B1.c: 1383: return result;
 18213  1B8A  0829               	movf	Division@result,w
 18214  1B8B  0008               	return
 18215  1B8C                     __end_of_Division:	
 18216                           
 18217                           	psect	text126
 18218  1F4B                     __ptext126:	
 18219 ;; *************** function ___lbdiv *****************
 18220 ;; Defined at:
 18221 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;  dividend        1    wreg     unsigned char 
 18224 ;;  divisor         1    0[BANK0 ] unsigned char 
 18225 ;; Auto vars:     Size  Location     Type
 18226 ;;  dividend        1    2[BANK0 ] unsigned char 
 18227 ;;  quotient        1    4[BANK0 ] unsigned char 
 18228 ;;  counter         1    3[BANK0 ] unsigned char 
 18229 ;; Return value:  Size  Location     Type
 18230 ;;                  1    wreg      unsigned char 
 18231 ;; Registers used:
 18232 ;;		wreg, status,2, status,0
 18233 ;; Tracked objects:
 18234 ;;		On entry : 0/0
 18235 ;;		On exit  : 0/0
 18236 ;;		Unchanged: 0/0
 18237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18238 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18241 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18242 ;;Total ram usage:        5 bytes
 18243 ;; Hardware stack levels used:    1
 18244 ;; Hardware stack levels required when called:    5
 18245 ;; This function calls:
 18246 ;;		Nothing
 18247 ;; This function is called by:
 18248 ;;		_Division
 18249 ;; This function uses a non-reentrant model
 18250 ;;
 18251                           
 18252                           
 18253                           ;psect for function ___lbdiv
 18254  1F4B                     ___lbdiv:	
 18255                           
 18256                           ;incstack = 0
 18257                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18258                           ;___lbdiv@dividend stored from wreg
 18259  1F4B  0020               	movlb	0	; select bank0
 18260  1F4C  00A2               	movwf	___lbdiv@dividend
 18261  1F4D  01A4               	clrf	___lbdiv@quotient
 18262  1F4E  0820               	movf	___lbdiv@divisor,w
 18263  1F4F  1903               	btfsc	3,2
 18264  1F50  2F6B               	goto	l9435
 18265  1F51  01A3               	clrf	___lbdiv@counter
 18266  1F52  0AA3               	incf	___lbdiv@counter,f
 18267  1F53                     l9423:	
 18268  1F53  1BA0               	btfsc	___lbdiv@divisor,7
 18269  1F54  2F5C               	goto	l9425
 18270  1F55  1003               	clrc
 18271  1F56  0DA0               	rlf	___lbdiv@divisor,f
 18272  1F57  3001               	movlw	1
 18273  1F58  00A1               	movwf	??___lbdiv
 18274  1F59  0821               	movf	??___lbdiv,w
 18275  1F5A  07A3               	addwf	___lbdiv@counter,f
 18276  1F5B  2F53               	goto	l9423
 18277  1F5C                     l9425:	
 18278  1F5C  1003               	clrc
 18279  1F5D  0DA4               	rlf	___lbdiv@quotient,f
 18280  1F5E  0820               	movf	___lbdiv@divisor,w
 18281  1F5F  0222               	subwf	___lbdiv@dividend,w
 18282  1F60  1C03               	skipc
 18283  1F61  2F66               	goto	L10
 18284  1F62  0820               	movf	___lbdiv@divisor,w
 18285  1F63  02A2               	subwf	___lbdiv@dividend,f
 18286  1F64  1424               	bsf	___lbdiv@quotient,0
 18287  1F65  1003               	clrc
 18288  1F66                     L10:	
 18289  1F66  0CA0               	rrf	___lbdiv@divisor,f
 18290  1F67  3001               	movlw	1
 18291  1F68  02A3               	subwf	___lbdiv@counter,f
 18292  1F69  1D03               	btfss	3,2
 18293  1F6A  2F5C               	goto	l9425
 18294  1F6B                     l9435:	
 18295  1F6B  0824               	movf	___lbdiv@quotient,w
 18296  1F6C  0008               	return
 18297  1F6D                     __end_of___lbdiv:	
 18298                           
 18299                           	psect	text127
 18300  1A28                     __ptext127:	
 18301 ;; *************** function _DelayOff_Main *****************
 18302 ;; Defined at:
 18303 ;;		line 41 in file "../src/DelayOff_B1.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;		None
 18306 ;; Auto vars:     Size  Location     Type
 18307 ;;		None
 18308 ;; Return value:  Size  Location     Type
 18309 ;;		None               void
 18310 ;; Registers used:
 18311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18312 ;; Tracked objects:
 18313 ;;		On entry : 0/0
 18314 ;;		On exit  : 0/0
 18315 ;;		Unchanged: 0/0
 18316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;Total ram usage:        0 bytes
 18322 ;; Hardware stack levels used:    1
 18323 ;; Hardware stack levels required when called:    9
 18324 ;; This function calls:
 18325 ;;		_DlyOff_Main
 18326 ;; This function is called by:
 18327 ;;		_main
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           
 18332                           ;psect for function _DelayOff_Main
 18333  1A28                     _DelayOff_Main:	
 18334                           
 18335                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18336                           
 18337                           ;incstack = 0
 18338                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18339  1A28  3001               	movlw	1
 18340  1A29  3188  2091         	fcall	_DlyOff_Main
 18341  1A2B  0008               	return
 18342  1A2C                     __end_of_DelayOff_Main:	
 18343                           
 18344                           	psect	text128
 18345  0891                     __ptext128:	
 18346 ;; *************** function _DlyOff_Main *****************
 18347 ;; Defined at:
 18348 ;;		line 61 in file "../src/DelayOff_B1.c"
 18349 ;; Parameters:    Size  Location     Type
 18350 ;;  sw              1    wreg     unsigned char 
 18351 ;; Auto vars:     Size  Location     Type
 18352 ;;  sw              1   71[BANK0 ] unsigned char 
 18353 ;; Return value:  Size  Location     Type
 18354 ;;		None               void
 18355 ;; Registers used:
 18356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18357 ;; Tracked objects:
 18358 ;;		On entry : 0/0
 18359 ;;		On exit  : 0/0
 18360 ;;		Unchanged: 0/0
 18361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18366 ;;Total ram usage:        3 bytes
 18367 ;; Hardware stack levels used:    1
 18368 ;; Hardware stack levels required when called:    8
 18369 ;; This function calls:
 18370 ;;		_DelayOffPointSelect
 18371 ;;		_getDimmerLights_Status
 18372 ;;		_setDimmerLights_SwOff
 18373 ;;		_setDimmerLights_SwOn
 18374 ;;		_setProductData
 18375 ;; This function is called by:
 18376 ;;		_DelayOff_Main
 18377 ;; This function uses a non-reentrant model
 18378 ;;
 18379                           
 18380                           
 18381                           ;psect for function _DlyOff_Main
 18382  0891                     _DlyOff_Main:	
 18383                           
 18384                           ;incstack = 0
 18385                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18386                           ;DlyOff_Main@sw stored from wreg
 18387  0891  0020               	movlb	0	; select bank0
 18388  0892  00E7               	movwf	DlyOff_Main@sw
 18389                           
 18390                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18391  0893  0867               	movf	DlyOff_Main@sw,w
 18392  0894  319A  22EC  3188   	fcall	_DelayOffPointSelect
 18393                           
 18394                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18395  0897  0021               	movlb	1	; select bank1
 18396  0898  084C               	movf	_DelayOff^(0+128),w
 18397  0899  0086               	movwf	6
 18398  089A  3001               	movlw	1	; select bank2/3
 18399  089B  0087               	movwf	7
 18400  089C  1C81               	btfss	1,1
 18401  089D  0008               	return
 18402                           
 18403                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18404  089E  084C               	movf	_DelayOff^(0+128),w
 18405  089F  3E02               	addlw	2
 18406  08A0  0086               	movwf	6
 18407  08A1  3001               	movlw	1	; select bank2/3
 18408  08A2  0087               	movwf	7
 18409  08A3  3001               	movlw	1
 18410  08A4  0781               	addwf	1,f
 18411  08A5  3141               	addfsr 1,1
 18412  08A6  1803               	skipnc
 18413  08A7  0A81               	incf	1,f
 18414                           
 18415                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18416  08A8  084C               	movf	_DelayOff^(0+128),w
 18417  08A9  3E02               	addlw	2
 18418  08AA  0086               	movwf	6
 18419  08AB  3001               	movlw	1	; select bank2/3
 18420  08AC  0087               	movwf	7
 18421  08AD  3F40               	moviw [0]fsr1
 18422  08AE  0020               	movlb	0	; select bank0
 18423  08AF  00E5               	movwf	??_DlyOff_Main
 18424  08B0  3F41               	moviw [1]fsr1
 18425  08B1  00E6               	movwf	??_DlyOff_Main+1
 18426  08B2  300B               	movlw	11
 18427  08B3  0266               	subwf	??_DlyOff_Main+1,w
 18428  08B4  30B8               	movlw	184
 18429  08B5  1903               	skipnz
 18430  08B6  0265               	subwf	??_DlyOff_Main,w
 18431  08B7  1C03               	skipc
 18432  08B8  0008               	return
 18433                           
 18434                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18435  08B9  0021               	movlb	1	; select bank1
 18436  08BA  084C               	movf	_DelayOff^(0+128),w
 18437  08BB  3E02               	addlw	2
 18438  08BC  0086               	movwf	6
 18439  08BD  3001               	movlw	1	; select bank2/3
 18440  08BE  0087               	movwf	7
 18441  08BF  3000               	movlw	0
 18442  08C0  3FC0               	movwi [0]fsr1
 18443  08C1  3FC1               	movwi [1]fsr1
 18444                           
 18445                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18446  08C2  3001               	movlw	1
 18447  08C3  0020               	movlb	0	; select bank0
 18448  08C4  00E5               	movwf	??_DlyOff_Main
 18449  08C5  0021               	movlb	1	; select bank1
 18450  08C6  084C               	movf	_DelayOff^(0+128),w
 18451  08C7  3E04               	addlw	4
 18452  08C8  0086               	movwf	6
 18453  08C9  3001               	movlw	1	; select bank2/3
 18454  08CA  0087               	movwf	7
 18455  08CB  0020               	movlb	0	; select bank0
 18456  08CC  0865               	movf	??_DlyOff_Main,w
 18457  08CD  0781               	addwf	1,f
 18458                           
 18459                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18460  08CE  0021               	movlb	1	; select bank1
 18461  08CF  084C               	movf	_DelayOff^(0+128),w
 18462  08D0  3E04               	addlw	4
 18463  08D1  0086               	movwf	6
 18464  08D2  3001               	movlw	1	; select bank2/3
 18465  08D3  0087               	movwf	7
 18466  08D4  0A4C               	incf	_DelayOff^(0+128),w
 18467  08D5  0084               	movwf	4
 18468  08D6  3001               	movlw	1	; select bank2/3
 18469  08D7  0085               	movwf	5
 18470  08D8  0800               	movf	0,w
 18471  08D9  0201               	subwf	1,w
 18472  08DA  1C03               	skipc
 18473  08DB  0008               	return
 18474                           
 18475                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18476  08DC  084C               	movf	_DelayOff^(0+128),w
 18477  08DD  3E04               	addlw	4
 18478  08DE  0086               	movwf	6
 18479  08DF  3001               	movlw	1	; select bank2/3
 18480  08E0  0087               	movwf	7
 18481  08E1  0181               	clrf	1
 18482                           
 18483                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18484  08E2  084C               	movf	_DelayOff^(0+128),w
 18485  08E3  0086               	movwf	6
 18486  08E4  3001               	movlw	1	; select bank2/3
 18487  08E5  0087               	movwf	7
 18488  08E6  1081               	bcf	1,1
 18489                           
 18490                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18491  08E7  0020               	movlb	0	; select bank0
 18492  08E8  0867               	movf	DlyOff_Main@sw,w
 18493  08E9  319B  23AA  3188   	fcall	_getDimmerLights_Status
 18494  08EC  3A01               	xorlw	1
 18495  08ED  1D03               	skipz
 18496  08EE  28F9               	goto	l531
 18497                           
 18498                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18499  08EF  0020               	movlb	0	; select bank0
 18500  08F0  0867               	movf	DlyOff_Main@sw,w
 18501  08F1  3191  2101  3188   	fcall	_setDimmerLights_SwOn
 18502                           
 18503                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18504  08F4  0020               	movlb	0	; select bank0
 18505  08F5  0867               	movf	DlyOff_Main@sw,w
 18506  08F6  3191  21A3  3188   	fcall	_setDimmerLights_SwOff
 18507  08F9                     l531:	
 18508                           
 18509                           ;DelayOff_B1.c: 78: }
 18510                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18511  08F9  0020               	movlb	0	; select bank0
 18512  08FA  01E2               	clrf	setProductData@value
 18513  08FB  0867               	movf	DlyOff_Main@sw,w
 18514  08FC  3E1A               	addlw	26
 18515  08FD  319B  2304         	fcall	_setProductData
 18516  08FF  0008               	return
 18517  0900                     __end_of_DlyOff_Main:	
 18518                           
 18519                           	psect	text129
 18520  1B04                     __ptext129:	
 18521 ;; *************** function _setProductData *****************
 18522 ;; Defined at:
 18523 ;;		line 645 in file "../src/Main_B1.c"
 18524 ;; Parameters:    Size  Location     Type
 18525 ;;  address         1    wreg     unsigned char 
 18526 ;;  value           1   66[BANK0 ] unsigned char 
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;  address         1   68[BANK0 ] unsigned char 
 18529 ;; Return value:  Size  Location     Type
 18530 ;;		None               void
 18531 ;; Registers used:
 18532 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;Total ram usage:        3 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    5
 18545 ;; This function calls:
 18546 ;;		Nothing
 18547 ;; This function is called by:
 18548 ;;		_DlyOff_Main
 18549 ;;		_setDelayOff_GO
 18550 ;;		_setDimmerLights_OnOff
 18551 ;;		_setDimmerLights_Dimming
 18552 ;;		_Load_Main
 18553 ;;		_setTemp_Main
 18554 ;;		_setLog_Code
 18555 ;;		_setControl_Lights_Table
 18556 ;;		_setRFSW_AdjControl
 18557 ;;		_setRF_DimmerLights
 18558 ;; This function uses a non-reentrant model
 18559 ;;
 18560                           
 18561                           
 18562                           ;psect for function _setProductData
 18563  1B04                     _setProductData:	
 18564                           
 18565                           ;incstack = 0
 18566                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18567                           ;setProductData@address stored from wreg
 18568  1B04  0020               	movlb	0	; select bank0
 18569  1B05  00E4               	movwf	setProductData@address
 18570                           
 18571                           ;Main_B1.c: 646: _product.Data[address] = value;
 18572  1B06  0862               	movf	setProductData@value,w
 18573  1B07  00E3               	movwf	??_setProductData
 18574  1B08  0864               	movf	setProductData@address,w
 18575  1B09  3E20               	addlw	__product& (0+255)
 18576  1B0A  0086               	movwf	6
 18577  1B0B  3002               	movlw	2	; select bank4/5
 18578  1B0C  0087               	movwf	7
 18579  1B0D  0863               	movf	??_setProductData,w
 18580  1B0E  0081               	movwf	1
 18581  1B0F  0008               	return
 18582  1B10                     __end_of_setProductData:	
 18583                           
 18584                           	psect	text130
 18585  1101                     __ptext130:	
 18586 ;; *************** function _setDimmerLights_SwOn *****************
 18587 ;; Defined at:
 18588 ;;		line 696 in file "../src/Dimmer_B1.c"
 18589 ;; Parameters:    Size  Location     Type
 18590 ;;  sw              1    wreg     unsigned char 
 18591 ;; Auto vars:     Size  Location     Type
 18592 ;;  sw              1   13[BANK0 ] unsigned char 
 18593 ;;  idle            1   14[BANK0 ] unsigned char 
 18594 ;; Return value:  Size  Location     Type
 18595 ;;		None               void
 18596 ;; Registers used:
 18597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18598 ;; Tracked objects:
 18599 ;;		On entry : 0/0
 18600 ;;		On exit  : 0/0
 18601 ;;		Unchanged: 0/0
 18602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18607 ;;Total ram usage:        2 bytes
 18608 ;; Hardware stack levels used:    1
 18609 ;; Hardware stack levels required when called:    7
 18610 ;; This function calls:
 18611 ;;		_DimmerLights_SelectPointer
 18612 ;;		_setBuz
 18613 ;; This function is called by:
 18614 ;;		_DlyOff_Main
 18615 ;;		_setControl_Lights_Table
 18616 ;;		_setRFSW_Control
 18617 ;;		_setRFSW_AdjControl
 18618 ;;		_setSw_Main
 18619 ;; This function uses a non-reentrant model
 18620 ;;
 18621                           
 18622                           
 18623                           ;psect for function _setDimmerLights_SwOn
 18624  1101                     _setDimmerLights_SwOn:	
 18625                           
 18626                           ;incstack = 0
 18627                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18628                           ;setDimmerLights_SwOn@sw stored from wreg
 18629  1101  0020               	movlb	0	; select bank0
 18630  1102  00AD               	movwf	setDimmerLights_SwOn@sw
 18631                           
 18632                           ;Dimmer_B1.c: 697: char idle = 0;
 18633  1103  01AE               	clrf	setDimmerLights_SwOn@idle
 18634                           
 18635                           ;Dimmer_B1.c: 722: DimmerLights_SelectPointer(sw);
 18636  1104  082D               	movf	setDimmerLights_SwOn@sw,w
 18637  1105  319A  22F8  3191   	fcall	_DimmerLights_SelectPointer
 18638                           
 18639                           ;Dimmer_B1.c: 723: if (idle == 0) {
 18640  1108  0020               	movlb	0	; select bank0
 18641  1109  08AE               	movf	setDimmerLights_SwOn@idle,f
 18642  110A  1D03               	skipz
 18643  110B  0008               	return
 18644                           
 18645                           ;Dimmer_B1.c: 725: DimmerLights->SwFlag = 1;
 18646  110C  0021               	movlb	1	; select bank1
 18647  110D  084E               	movf	_DimmerLights^(0+128),w
 18648  110E  0086               	movwf	6
 18649  110F  3001               	movlw	1	; select bank2/3
 18650  1110  0087               	movwf	7
 18651  1111  1401               	bsf	1,0
 18652                           
 18653                           ;Dimmer_B1.c: 726: if (DimmerLights->Status == 0) {
 18654  1112  0A4E               	incf	_DimmerLights^(0+128),w
 18655  1113  0086               	movwf	6
 18656  1114  3001               	movlw	1	; select bank2/3
 18657  1115  0087               	movwf	7
 18658  1116  1801               	btfsc	1,0
 18659  1117  2928               	goto	l8875
 18660                           
 18661                           ;Dimmer_B1.c: 727: DimmerLights->Status = 1;
 18662  1118  0A4E               	incf	_DimmerLights^(0+128),w
 18663  1119  0086               	movwf	6
 18664  111A  3001               	movlw	1	; select bank2/3
 18665  111B  0087               	movwf	7
 18666  111C  1401               	bsf	1,0
 18667                           
 18668                           ;Dimmer_B1.c: 728: DimmerLights->Trigger = 1;
 18669  111D  084E               	movf	_DimmerLights^(0+128),w
 18670  111E  0086               	movwf	6
 18671  111F  3001               	movlw	1	; select bank2/3
 18672  1120  0087               	movwf	7
 18673  1121  1481               	bsf	1,1
 18674                           
 18675                           ;Dimmer_B1.c: 729: DimmerLights->Switch = 1;
 18676  1122  084E               	movf	_DimmerLights^(0+128),w
 18677  1123  0086               	movwf	6
 18678  1124  3001               	movlw	1	; select bank2/3
 18679  1125  0087               	movwf	7
 18680  1126  1501               	bsf	1,2
 18681                           
 18682                           ;Dimmer_B1.c: 730: } else {
 18683  1127  292D               	goto	l8877
 18684  1128                     l8875:	
 18685                           
 18686                           ;Dimmer_B1.c: 731: DimmerLights->Status = 0;
 18687  1128  0A4E               	incf	_DimmerLights^(0+128),w
 18688  1129  0086               	movwf	6
 18689  112A  3001               	movlw	1	; select bank2/3
 18690  112B  0087               	movwf	7
 18691  112C  1001               	bcf	1,0
 18692  112D                     l8877:	
 18693                           
 18694                           ;Dimmer_B1.c: 732: }
 18695                           ;Dimmer_B1.c: 733: setBuz(1, 100);
 18696  112D  3064               	movlw	100
 18697  112E  0020               	movlb	0	; select bank0
 18698  112F  00A9               	movwf	setBuz@time
 18699  1130  3000               	movlw	0
 18700  1131  00AA               	movwf	setBuz@time+1
 18701  1132  3001               	movlw	1
 18702  1133  3194  2489         	fcall	_setBuz
 18703  1135  0008               	return
 18704  1136                     __end_of_setDimmerLights_SwOn:	
 18705                           
 18706                           	psect	text131
 18707  1489                     __ptext131:	
 18708 ;; *************** function _setBuz *****************
 18709 ;; Defined at:
 18710 ;;		line 22 in file "../src/Buzzer_B1.c"
 18711 ;; Parameters:    Size  Location     Type
 18712 ;;  count           1    wreg     unsigned char 
 18713 ;;  time            2    9[BANK0 ] int 
 18714 ;; Auto vars:     Size  Location     Type
 18715 ;;  count           1   12[BANK0 ] unsigned char 
 18716 ;; Return value:  Size  Location     Type
 18717 ;;		None               void
 18718 ;; Registers used:
 18719 ;;		wreg, status,2, status,0, pclath, cstack
 18720 ;; Tracked objects:
 18721 ;;		On entry : 0/0
 18722 ;;		On exit  : 0/0
 18723 ;;		Unchanged: 0/0
 18724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;Total ram usage:        4 bytes
 18730 ;; Hardware stack levels used:    1
 18731 ;; Hardware stack levels required when called:    6
 18732 ;; This function calls:
 18733 ;;		___awdiv
 18734 ;; This function is called by:
 18735 ;;		_setDimmerLights_SwOn
 18736 ;;		_setDimmerLights_Dimming
 18737 ;;		_my_MainTimer
 18738 ;;		_Exception_Main
 18739 ;;		_setTemp_Main
 18740 ;;		_setLog_Code
 18741 ;;		_setRFSW_Control
 18742 ;;		_setRF_AdjControl
 18743 ;;		_setSw_Main
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           
 18748                           ;psect for function _setBuz
 18749  1489                     _setBuz:	
 18750                           
 18751                           ;incstack = 0
 18752                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18753                           ;setBuz@count stored from wreg
 18754  1489  0020               	movlb	0	; select bank0
 18755  148A  00AC               	movwf	setBuz@count
 18756                           
 18757                           ;Buzzer_B1.c: 23: time /= 20;
 18758  148B  3014               	movlw	20
 18759  148C  00A0               	movwf	___awdiv@divisor
 18760  148D  3000               	movlw	0
 18761  148E  00A1               	movwf	___awdiv@divisor+1
 18762  148F  082A               	movf	setBuz@time+1,w
 18763  1490  01A3               	clrf	___awdiv@dividend+1
 18764  1491  07A3               	addwf	___awdiv@dividend+1,f
 18765  1492  0829               	movf	setBuz@time,w
 18766  1493  01A2               	clrf	___awdiv@dividend
 18767  1494  07A2               	addwf	___awdiv@dividend,f
 18768  1495  3193  23DF  3194   	fcall	___awdiv
 18769  1498  0020               	movlb	0	; select bank0
 18770  1499  0821               	movf	?___awdiv+1,w
 18771  149A  01AA               	clrf	setBuz@time+1
 18772  149B  07AA               	addwf	setBuz@time+1,f
 18773  149C  0820               	movf	?___awdiv,w
 18774  149D  01A9               	clrf	setBuz@time
 18775  149E  07A9               	addwf	setBuz@time,f
 18776                           
 18777                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18778  149F  0022               	movlb	2	; select bank2
 18779  14A0  1C20               	btfss	_Buz1^(0+256),0
 18780  14A1  0008               	return
 18781                           
 18782                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18783  14A2  18A0               	btfsc	_Buz1^(0+256),1
 18784  14A3  2CBA               	goto	l86
 18785                           
 18786                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18787  14A4  14A0               	bsf	_Buz1^(0+256),1
 18788                           
 18789                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18790  14A5  01A1               	clrf	(_Buz1^(0+256)+1)
 18791  14A6  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18792                           
 18793                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18794  14A7  0020               	movlb	0	; select bank0
 18795  14A8  082C               	movf	setBuz@count,w
 18796  14A9  00AB               	movwf	??_setBuz
 18797  14AA  082B               	movf	??_setBuz,w
 18798  14AB  0022               	movlb	2	; select bank2
 18799  14AC  00A3               	movwf	(_Buz1^(0+256)+3)
 18800                           
 18801                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18802  14AD  0020               	movlb	0	; select bank0
 18803  14AE  082A               	movf	setBuz@time+1,w
 18804  14AF  0022               	movlb	2	; select bank2
 18805  14B0  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18806  14B1  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18807  14B2  0020               	movlb	0	; select bank0
 18808  14B3  0829               	movf	setBuz@time,w
 18809  14B4  0022               	movlb	2	; select bank2
 18810  14B5  01A6               	clrf	(_Buz1^(0+256)+6)
 18811  14B6  07A6               	addwf	(_Buz1^(0+256)+6),f
 18812                           
 18813                           ;Buzzer_B1.c: 30: RB3 = 1;
 18814  14B7  0020               	movlb	0	; select bank0
 18815  14B8  158D               	bsf	13,3	;volatile
 18816                           
 18817                           ;Buzzer_B1.c: 31: } else {
 18818  14B9  0008               	return
 18819  14BA                     l86:	
 18820                           
 18821                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18822  14BA  19A0               	btfsc	_Buz1^(0+256),3
 18823  14BB  2CCE               	goto	l88
 18824                           
 18825                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18826  14BC  15A0               	bsf	_Buz1^(0+256),3
 18827                           
 18828                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18829  14BD  0020               	movlb	0	; select bank0
 18830  14BE  082C               	movf	setBuz@count,w
 18831  14BF  00AB               	movwf	??_setBuz
 18832  14C0  082B               	movf	??_setBuz,w
 18833  14C1  0022               	movlb	2	; select bank2
 18834  14C2  00A4               	movwf	(_Buz1^(0+256)+4)
 18835                           
 18836                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18837  14C3  0020               	movlb	0	; select bank0
 18838  14C4  082A               	movf	setBuz@time+1,w
 18839  14C5  0022               	movlb	2	; select bank2
 18840  14C6  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18841  14C7  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18842  14C8  0020               	movlb	0	; select bank0
 18843  14C9  0829               	movf	setBuz@time,w
 18844  14CA  0022               	movlb	2	; select bank2
 18845  14CB  01A8               	clrf	(_Buz1^(0+256)+8)
 18846  14CC  07A8               	addwf	(_Buz1^(0+256)+8),f
 18847                           
 18848                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18849  14CD  0008               	return
 18850  14CE                     l88:	
 18851  14CE  1A20               	btfsc	_Buz1^(0+256),4
 18852  14CF  0008               	return
 18853                           
 18854                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18855  14D0  1620               	bsf	_Buz1^(0+256),4
 18856                           
 18857                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18858  14D1  0020               	movlb	0	; select bank0
 18859  14D2  082C               	movf	setBuz@count,w
 18860  14D3  00AB               	movwf	??_setBuz
 18861  14D4  082B               	movf	??_setBuz,w
 18862  14D5  0022               	movlb	2	; select bank2
 18863  14D6  00A5               	movwf	(_Buz1^(0+256)+5)
 18864                           
 18865                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18866  14D7  0020               	movlb	0	; select bank0
 18867  14D8  082A               	movf	setBuz@time+1,w
 18868  14D9  0022               	movlb	2	; select bank2
 18869  14DA  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18870  14DB  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18871  14DC  0020               	movlb	0	; select bank0
 18872  14DD  0829               	movf	setBuz@time,w
 18873  14DE  0022               	movlb	2	; select bank2
 18874  14DF  01AA               	clrf	(_Buz1^(0+256)+10)
 18875  14E0  07AA               	addwf	(_Buz1^(0+256)+10),f
 18876  14E1  0008               	return
 18877  14E2                     __end_of_setBuz:	
 18878                           
 18879                           	psect	text132
 18880  13DF                     __ptext132:	
 18881 ;; *************** function ___awdiv *****************
 18882 ;; Defined at:
 18883 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18884 ;; Parameters:    Size  Location     Type
 18885 ;;  divisor         2    0[BANK0 ] int 
 18886 ;;  dividend        2    2[BANK0 ] int 
 18887 ;; Auto vars:     Size  Location     Type
 18888 ;;  quotient        2    7[BANK0 ] int 
 18889 ;;  sign            1    6[BANK0 ] unsigned char 
 18890 ;;  counter         1    5[BANK0 ] unsigned char 
 18891 ;; Return value:  Size  Location     Type
 18892 ;;                  2    0[BANK0 ] int 
 18893 ;; Registers used:
 18894 ;;		wreg, status,2, status,0
 18895 ;; Tracked objects:
 18896 ;;		On entry : 0/0
 18897 ;;		On exit  : 0/0
 18898 ;;		Unchanged: 0/0
 18899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18900 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18901 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18903 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;Total ram usage:        9 bytes
 18905 ;; Hardware stack levels used:    1
 18906 ;; Hardware stack levels required when called:    5
 18907 ;; This function calls:
 18908 ;;		Nothing
 18909 ;; This function is called by:
 18910 ;;		_setBuz
 18911 ;; This function uses a non-reentrant model
 18912 ;;
 18913                           
 18914                           
 18915                           ;psect for function ___awdiv
 18916  13DF                     ___awdiv:	
 18917                           
 18918                           ;incstack = 0
 18919                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18920  13DF  0020               	movlb	0	; select bank0
 18921  13E0  01A6               	clrf	___awdiv@sign
 18922  13E1  1FA1               	btfss	___awdiv@divisor+1,7
 18923  13E2  2BEA               	goto	l8513
 18924  13E3  09A0               	comf	___awdiv@divisor,f
 18925  13E4  09A1               	comf	___awdiv@divisor+1,f
 18926  13E5  0AA0               	incf	___awdiv@divisor,f
 18927  13E6  1903               	skipnz
 18928  13E7  0AA1               	incf	___awdiv@divisor+1,f
 18929  13E8  01A6               	clrf	___awdiv@sign
 18930  13E9  0AA6               	incf	___awdiv@sign,f
 18931  13EA                     l8513:	
 18932  13EA  1FA3               	btfss	___awdiv@dividend+1,7
 18933  13EB  2BF5               	goto	l8519
 18934  13EC  09A2               	comf	___awdiv@dividend,f
 18935  13ED  09A3               	comf	___awdiv@dividend+1,f
 18936  13EE  0AA2               	incf	___awdiv@dividend,f
 18937  13EF  1903               	skipnz
 18938  13F0  0AA3               	incf	___awdiv@dividend+1,f
 18939  13F1  3001               	movlw	1
 18940  13F2  00A4               	movwf	??___awdiv
 18941  13F3  0824               	movf	??___awdiv,w
 18942  13F4  06A6               	xorwf	___awdiv@sign,f
 18943  13F5                     l8519:	
 18944  13F5  01A7               	clrf	___awdiv@quotient
 18945  13F6  01A8               	clrf	___awdiv@quotient+1
 18946  13F7  0821               	movf	___awdiv@divisor+1,w
 18947  13F8  0420               	iorwf	___awdiv@divisor,w
 18948  13F9  1903               	skipnz
 18949  13FA  2C24               	goto	l8541
 18950  13FB  01A5               	clrf	___awdiv@counter
 18951  13FC  0AA5               	incf	___awdiv@counter,f
 18952  13FD                     l8529:	
 18953  13FD  1BA1               	btfsc	___awdiv@divisor+1,7
 18954  13FE  2C09               	goto	l8531
 18955  13FF  3001               	movlw	1
 18956  1400                     u8815:	
 18957  1400  35A0               	lslf	___awdiv@divisor,f
 18958  1401  0DA1               	rlf	___awdiv@divisor+1,f
 18959  1402  0B89               	decfsz	9,f
 18960  1403  2C00               	goto	u8815
 18961  1404  3001               	movlw	1
 18962  1405  00A4               	movwf	??___awdiv
 18963  1406  0824               	movf	??___awdiv,w
 18964  1407  07A5               	addwf	___awdiv@counter,f
 18965  1408  2BFD               	goto	l8529
 18966  1409                     l8531:	
 18967  1409  3001               	movlw	1
 18968  140A                     u8835:	
 18969  140A  35A7               	lslf	___awdiv@quotient,f
 18970  140B  0DA8               	rlf	___awdiv@quotient+1,f
 18971  140C  0B89               	decfsz	9,f
 18972  140D  2C0A               	goto	u8835
 18973  140E  0821               	movf	___awdiv@divisor+1,w
 18974  140F  0223               	subwf	___awdiv@dividend+1,w
 18975  1410  1D03               	skipz
 18976  1411  2C14               	goto	u8845
 18977  1412  0820               	movf	___awdiv@divisor,w
 18978  1413  0222               	subwf	___awdiv@dividend,w
 18979  1414                     u8845:	
 18980  1414  1C03               	skipc
 18981  1415  2C1B               	goto	l8537
 18982  1416  0820               	movf	___awdiv@divisor,w
 18983  1417  02A2               	subwf	___awdiv@dividend,f
 18984  1418  0821               	movf	___awdiv@divisor+1,w
 18985  1419  3BA3               	subwfb	___awdiv@dividend+1,f
 18986  141A  1427               	bsf	___awdiv@quotient,0
 18987  141B                     l8537:	
 18988  141B  3001               	movlw	1
 18989  141C                     u8855:	
 18990  141C  36A1               	lsrf	___awdiv@divisor+1,f
 18991  141D  0CA0               	rrf	___awdiv@divisor,f
 18992  141E  0B89               	decfsz	9,f
 18993  141F  2C1C               	goto	u8855
 18994  1420  3001               	movlw	1
 18995  1421  02A5               	subwf	___awdiv@counter,f
 18996  1422  1D03               	btfss	3,2
 18997  1423  2C09               	goto	l8531
 18998  1424                     l8541:	
 18999  1424  0826               	movf	___awdiv@sign,w
 19000  1425  1903               	btfsc	3,2
 19001  1426  2C2C               	goto	l8545
 19002  1427  09A7               	comf	___awdiv@quotient,f
 19003  1428  09A8               	comf	___awdiv@quotient+1,f
 19004  1429  0AA7               	incf	___awdiv@quotient,f
 19005  142A  1903               	skipnz
 19006  142B  0AA8               	incf	___awdiv@quotient+1,f
 19007  142C                     l8545:	
 19008  142C  0828               	movf	___awdiv@quotient+1,w
 19009  142D  01A1               	clrf	?___awdiv+1
 19010  142E  07A1               	addwf	?___awdiv+1,f
 19011  142F  0827               	movf	___awdiv@quotient,w
 19012  1430  01A0               	clrf	?___awdiv
 19013  1431  07A0               	addwf	?___awdiv,f
 19014  1432  0008               	return
 19015  1433                     __end_of___awdiv:	
 19016                           
 19017                           	psect	text133
 19018  11A3                     __ptext133:	
 19019 ;; *************** function _setDimmerLights_SwOff *****************
 19020 ;; Defined at:
 19021 ;;		line 738 in file "../src/Dimmer_B1.c"
 19022 ;; Parameters:    Size  Location     Type
 19023 ;;  sw              1    wreg     unsigned char 
 19024 ;; Auto vars:     Size  Location     Type
 19025 ;;  sw              1    2[BANK0 ] unsigned char 
 19026 ;; Return value:  Size  Location     Type
 19027 ;;		None               void
 19028 ;; Registers used:
 19029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19030 ;; Tracked objects:
 19031 ;;		On entry : 0/0
 19032 ;;		On exit  : 0/0
 19033 ;;		Unchanged: 0/0
 19034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19038 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19039 ;;Total ram usage:        1 bytes
 19040 ;; Hardware stack levels used:    1
 19041 ;; Hardware stack levels required when called:    6
 19042 ;; This function calls:
 19043 ;;		_DimmerLights_SelectPointer
 19044 ;; This function is called by:
 19045 ;;		_DlyOff_Main
 19046 ;;		_Exception_Main
 19047 ;;		_setControl_Lights_Table
 19048 ;;		_setRFSW_Control
 19049 ;;		_setRFSW_AdjControl
 19050 ;;		_setSw_Main
 19051 ;; This function uses a non-reentrant model
 19052 ;;
 19053                           
 19054                           
 19055                           ;psect for function _setDimmerLights_SwOff
 19056  11A3                     _setDimmerLights_SwOff:	
 19057                           
 19058                           ;incstack = 0
 19059                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19060                           ;setDimmerLights_SwOff@sw stored from wreg
 19061  11A3  0020               	movlb	0	; select bank0
 19062  11A4  00A2               	movwf	setDimmerLights_SwOff@sw
 19063                           
 19064                           ;Dimmer_B1.c: 739: DimmerLights_SelectPointer(sw);
 19065  11A5  0822               	movf	setDimmerLights_SwOff@sw,w
 19066  11A6  319A  22F8  3191   	fcall	_DimmerLights_SelectPointer
 19067                           
 19068                           ;Dimmer_B1.c: 741: if (DimmerLights->SwFlag == 1) {
 19069  11A9  0021               	movlb	1	; select bank1
 19070  11AA  084E               	movf	_DimmerLights^(0+128),w
 19071  11AB  0086               	movwf	6
 19072  11AC  3001               	movlw	1	; select bank2/3
 19073  11AD  0087               	movwf	7
 19074  11AE  1C01               	btfss	1,0
 19075  11AF  0008               	return
 19076                           
 19077                           ;Dimmer_B1.c: 742: DimmerLights->SwFlag = 0;
 19078  11B0  084E               	movf	_DimmerLights^(0+128),w
 19079  11B1  0086               	movwf	6
 19080  11B2  3001               	movlw	1	; select bank2/3
 19081  11B3  0087               	movwf	7
 19082  11B4  1001               	bcf	1,0
 19083                           
 19084                           ;Dimmer_B1.c: 743: if (DimmerLights->Status == 1) {
 19085  11B5  0A4E               	incf	_DimmerLights^(0+128),w
 19086  11B6  0086               	movwf	6
 19087  11B7  3001               	movlw	1	; select bank2/3
 19088  11B8  0087               	movwf	7
 19089  11B9  1C01               	btfss	1,0
 19090  11BA  29D1               	goto	l8889
 19091                           
 19092                           ;Dimmer_B1.c: 744: if (DimmerLights->DimmingSwFlag == 1) {
 19093  11BB  084E               	movf	_DimmerLights^(0+128),w
 19094  11BC  0086               	movwf	6
 19095  11BD  3001               	movlw	1	; select bank2/3
 19096  11BE  0087               	movwf	7
 19097  11BF  1D81               	btfss	1,3
 19098  11C0  0008               	return
 19099                           
 19100                           ;Dimmer_B1.c: 745: DimmerLights->DimmingSwFlag = 0;
 19101  11C1  084E               	movf	_DimmerLights^(0+128),w
 19102  11C2  0086               	movwf	6
 19103  11C3  3001               	movlw	1	; select bank2/3
 19104  11C4  0087               	movwf	7
 19105  11C5  1181               	bcf	1,3
 19106                           
 19107                           ;Dimmer_B1.c: 747: DimmerLights->DimmingTrigger = 1;
 19108  11C6  084E               	movf	_DimmerLights^(0+128),w
 19109  11C7  0086               	movwf	6
 19110  11C8  3001               	movlw	1	; select bank2/3
 19111  11C9  0087               	movwf	7
 19112  11CA  1601               	bsf	1,4
 19113                           
 19114                           ;Dimmer_B1.c: 748: DimmerLights->DimmingSwitch = 0;
 19115  11CB  084E               	movf	_DimmerLights^(0+128),w
 19116  11CC  0086               	movwf	6
 19117  11CD  3001               	movlw	1	; select bank2/3
 19118  11CE  0087               	movwf	7
 19119  11CF  1281               	bcf	1,5
 19120                           
 19121                           ;Dimmer_B1.c: 749: }
 19122                           ;Dimmer_B1.c: 750: } else {
 19123  11D0  0008               	return
 19124  11D1                     l8889:	
 19125                           
 19126                           ;Dimmer_B1.c: 752: DimmerLights->Trigger = 1;
 19127  11D1  084E               	movf	_DimmerLights^(0+128),w
 19128  11D2  0086               	movwf	6
 19129  11D3  3001               	movlw	1	; select bank2/3
 19130  11D4  0087               	movwf	7
 19131  11D5  1481               	bsf	1,1
 19132                           
 19133                           ;Dimmer_B1.c: 753: DimmerLights->Switch = 0;
 19134  11D6  084E               	movf	_DimmerLights^(0+128),w
 19135  11D7  0086               	movwf	6
 19136  11D8  3001               	movlw	1	; select bank2/3
 19137  11D9  0087               	movwf	7
 19138  11DA  1101               	bcf	1,2
 19139  11DB  0008               	return
 19140  11DC                     __end_of_setDimmerLights_SwOff:	
 19141                           
 19142                           	psect	text134
 19143  1BAA                     __ptext134:	
 19144 ;; *************** function _getDimmerLights_Status *****************
 19145 ;; Defined at:
 19146 ;;		line 1079 in file "../src/Dimmer_B1.c"
 19147 ;; Parameters:    Size  Location     Type
 19148 ;;  lights          1    wreg     unsigned char 
 19149 ;; Auto vars:     Size  Location     Type
 19150 ;;  lights          1    2[BANK0 ] unsigned char 
 19151 ;;  status          1    3[BANK0 ] unsigned char 
 19152 ;; Return value:  Size  Location     Type
 19153 ;;                  1    wreg      unsigned char 
 19154 ;; Registers used:
 19155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19156 ;; Tracked objects:
 19157 ;;		On entry : 0/0
 19158 ;;		On exit  : 0/0
 19159 ;;		Unchanged: 0/0
 19160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;Total ram usage:        2 bytes
 19166 ;; Hardware stack levels used:    1
 19167 ;; Hardware stack levels required when called:    6
 19168 ;; This function calls:
 19169 ;;		_DimmerLights_SelectPointer
 19170 ;; This function is called by:
 19171 ;;		_DlyOff_Main
 19172 ;;		_Exception_Main
 19173 ;;		_setControl_Lights_Table
 19174 ;;		_setRFSW_Control
 19175 ;;		_setRFSW_AdjControl
 19176 ;;		_setRF_AdjControl
 19177 ;; This function uses a non-reentrant model
 19178 ;;
 19179                           
 19180                           
 19181                           ;psect for function _getDimmerLights_Status
 19182  1BAA                     _getDimmerLights_Status:	
 19183                           
 19184                           ;incstack = 0
 19185                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19186                           ;getDimmerLights_Status@lights stored from wreg
 19187  1BAA  0020               	movlb	0	; select bank0
 19188  1BAB  00A2               	movwf	getDimmerLights_Status@lights
 19189                           
 19190                           ;Dimmer_B1.c: 1080: DimmerLights_SelectPointer(lights);
 19191  1BAC  0822               	movf	getDimmerLights_Status@lights,w
 19192  1BAD  319A  22F8         	fcall	_DimmerLights_SelectPointer
 19193                           
 19194                           ;Dimmer_B1.c: 1081: char status = DimmerLights->Status == 1 ? 1 : 0;
 19195  1BAF  0021               	movlb	1	; select bank1
 19196  1BB0  0A4E               	incf	_DimmerLights^(0+128),w
 19197  1BB1  0086               	movwf	6
 19198  1BB2  3001               	movlw	1	; select bank2/3
 19199  1BB3  0087               	movwf	7
 19200  1BB4  3000               	movlw	0
 19201  1BB5  1801               	btfsc	1,0
 19202  1BB6  3001               	movlw	1
 19203  1BB7  0020               	movlb	0	; select bank0
 19204  1BB8  00A3               	movwf	getDimmerLights_Status@status
 19205                           
 19206                           ;Dimmer_B1.c: 1082: return status;
 19207  1BB9  0823               	movf	getDimmerLights_Status@status,w
 19208  1BBA  0008               	return
 19209  1BBB                     __end_of_getDimmerLights_Status:	
 19210                           
 19211                           	psect	text135
 19212  1AF8                     __ptext135:	
 19213 ;; *************** function _DimmerLights_SelectPointer *****************
 19214 ;; Defined at:
 19215 ;;		line 619 in file "../src/Dimmer_B1.c"
 19216 ;; Parameters:    Size  Location     Type
 19217 ;;  lights          1    wreg     unsigned char 
 19218 ;; Auto vars:     Size  Location     Type
 19219 ;;  lights          1    1[BANK0 ] unsigned char 
 19220 ;; Return value:  Size  Location     Type
 19221 ;;		None               void
 19222 ;; Registers used:
 19223 ;;		wreg
 19224 ;; Tracked objects:
 19225 ;;		On entry : 0/0
 19226 ;;		On exit  : 0/0
 19227 ;;		Unchanged: 0/0
 19228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;Total ram usage:        2 bytes
 19234 ;; Hardware stack levels used:    1
 19235 ;; Hardware stack levels required when called:    5
 19236 ;; This function calls:
 19237 ;;		Nothing
 19238 ;; This function is called by:
 19239 ;;		_setDimmerLights_SwOn
 19240 ;;		_setDimmerLights_SwOff
 19241 ;;		_setDimmerLights_DimmingOn
 19242 ;;		_setDimmerLights_Main
 19243 ;;		_getDimmerLights_Status
 19244 ;;		_setDimmerLights_DimmingRun
 19245 ;;		_setRF_AdjControl
 19246 ;;		_setDimmerLights_Status
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           
 19251                           ;psect for function _DimmerLights_SelectPointer
 19252  1AF8                     _DimmerLights_SelectPointer:	
 19253                           
 19254                           ;incstack = 0
 19255                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19256                           ;DimmerLights_SelectPointer@lights stored from wreg
 19257  1AF8  0020               	movlb	0	; select bank0
 19258  1AF9  00A1               	movwf	DimmerLights_SelectPointer@lights
 19259                           
 19260                           ;Dimmer_B1.c: 621: if (lights == 1) {
 19261  1AFA  0821               	movf	DimmerLights_SelectPointer@lights,w
 19262  1AFB  3A01               	xorlw	1
 19263  1AFC  1D03               	skipz
 19264  1AFD  0008               	return
 19265                           
 19266                           ;Dimmer_B1.c: 622: DimmerLights = &DimmerLights1;
 19267  1AFE  305E               	movlw	_DimmerLights1& (0+255)
 19268  1AFF  00A0               	movwf	??_DimmerLights_SelectPointer
 19269  1B00  0820               	movf	??_DimmerLights_SelectPointer,w
 19270  1B01  0021               	movlb	1	; select bank1
 19271  1B02  00CE               	movwf	_DimmerLights^(0+128)
 19272  1B03  0008               	return
 19273  1B04                     __end_of_DimmerLights_SelectPointer:	
 19274                           
 19275                           	psect	text136
 19276  1A24                     __ptext136:	
 19277 ;; *************** function _DelayOff_Initialization *****************
 19278 ;; Defined at:
 19279 ;;		line 26 in file "../src/DelayOff_B1.c"
 19280 ;; Parameters:    Size  Location     Type
 19281 ;;		None
 19282 ;; Auto vars:     Size  Location     Type
 19283 ;;		None
 19284 ;; Return value:  Size  Location     Type
 19285 ;;		None               void
 19286 ;; Registers used:
 19287 ;;		wreg, status,2, status,0, pclath, cstack
 19288 ;; Tracked objects:
 19289 ;;		On entry : 0/0
 19290 ;;		On exit  : 0/0
 19291 ;;		Unchanged: 0/0
 19292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19297 ;;Total ram usage:        0 bytes
 19298 ;; Hardware stack levels used:    1
 19299 ;; Hardware stack levels required when called:    7
 19300 ;; This function calls:
 19301 ;;		_DlyOff_Initialization
 19302 ;; This function is called by:
 19303 ;;		_main
 19304 ;; This function uses a non-reentrant model
 19305 ;;
 19306                           
 19307                           
 19308                           ;psect for function _DelayOff_Initialization
 19309  1A24                     _DelayOff_Initialization:	
 19310                           
 19311                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19312                           
 19313                           ;incstack = 0
 19314                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19315  1A24  3001               	movlw	1
 19316  1A25  319A  2251         	fcall	_DlyOff_Initialization
 19317  1A27  0008               	return
 19318  1A28                     __end_of_DelayOff_Initialization:	
 19319                           
 19320                           	psect	text137
 19321  1A51                     __ptext137:	
 19322 ;; *************** function _DlyOff_Initialization *****************
 19323 ;; Defined at:
 19324 ;;		line 56 in file "../src/DelayOff_B1.c"
 19325 ;; Parameters:    Size  Location     Type
 19326 ;;  sw              1    wreg     unsigned char 
 19327 ;; Auto vars:     Size  Location     Type
 19328 ;;  sw              1    2[BANK0 ] unsigned char 
 19329 ;; Return value:  Size  Location     Type
 19330 ;;		None               void
 19331 ;; Registers used:
 19332 ;;		wreg, status,2, status,0, pclath, cstack
 19333 ;; Tracked objects:
 19334 ;;		On entry : 0/0
 19335 ;;		On exit  : 0/0
 19336 ;;		Unchanged: 0/0
 19337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19341 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19342 ;;Total ram usage:        1 bytes
 19343 ;; Hardware stack levels used:    1
 19344 ;; Hardware stack levels required when called:    6
 19345 ;; This function calls:
 19346 ;;		_DelayOffPointSelect
 19347 ;; This function is called by:
 19348 ;;		_DelayOff_Initialization
 19349 ;; This function uses a non-reentrant model
 19350 ;;
 19351                           
 19352                           
 19353                           ;psect for function _DlyOff_Initialization
 19354  1A51                     _DlyOff_Initialization:	
 19355                           
 19356                           ;incstack = 0
 19357                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19358                           ;DlyOff_Initialization@sw stored from wreg
 19359  1A51  0020               	movlb	0	; select bank0
 19360  1A52  00A2               	movwf	DlyOff_Initialization@sw
 19361                           
 19362                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19363  1A53  0822               	movf	DlyOff_Initialization@sw,w
 19364  1A54  319A  22EC         	fcall	_DelayOffPointSelect
 19365  1A56  0008               	return
 19366  1A57                     __end_of_DlyOff_Initialization:	
 19367                           
 19368                           	psect	text138
 19369  1AEC                     __ptext138:	
 19370 ;; *************** function _DelayOffPointSelect *****************
 19371 ;; Defined at:
 19372 ;;		line 7 in file "../src/DelayOff_B1.c"
 19373 ;; Parameters:    Size  Location     Type
 19374 ;;  sw              1    wreg     unsigned char 
 19375 ;; Auto vars:     Size  Location     Type
 19376 ;;  sw              1    1[BANK0 ] unsigned char 
 19377 ;; Return value:  Size  Location     Type
 19378 ;;		None               void
 19379 ;; Registers used:
 19380 ;;		wreg
 19381 ;; Tracked objects:
 19382 ;;		On entry : 0/0
 19383 ;;		On exit  : 0/0
 19384 ;;		Unchanged: 0/0
 19385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19390 ;;Total ram usage:        2 bytes
 19391 ;; Hardware stack levels used:    1
 19392 ;; Hardware stack levels required when called:    5
 19393 ;; This function calls:
 19394 ;;		Nothing
 19395 ;; This function is called by:
 19396 ;;		_DlyOff_Initialization
 19397 ;;		_DlyOff_Main
 19398 ;;		_setDelayOff_GO
 19399 ;;		_getDelayOff_GO
 19400 ;; This function uses a non-reentrant model
 19401 ;;
 19402                           
 19403                           
 19404                           ;psect for function _DelayOffPointSelect
 19405  1AEC                     _DelayOffPointSelect:	
 19406                           
 19407                           ;incstack = 0
 19408                           ; Regs used in _DelayOffPointSelect: [wreg]
 19409                           ;DelayOffPointSelect@sw stored from wreg
 19410  1AEC  0020               	movlb	0	; select bank0
 19411  1AED  00A1               	movwf	DelayOffPointSelect@sw
 19412                           
 19413                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19414  1AEE  0821               	movf	DelayOffPointSelect@sw,w
 19415  1AEF  3A01               	xorlw	1
 19416  1AF0  1D03               	skipz
 19417  1AF1  0008               	return
 19418                           
 19419                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19420  1AF2  3066               	movlw	_DlySw1& (0+255)
 19421  1AF3  00A0               	movwf	??_DelayOffPointSelect
 19422  1AF4  0820               	movf	??_DelayOffPointSelect,w
 19423  1AF5  0021               	movlb	1	; select bank1
 19424  1AF6  00CC               	movwf	_DelayOff^(0+128)
 19425  1AF7  0008               	return
 19426  1AF8                     __end_of_DelayOffPointSelect:	
 19427                           
 19428                           	psect	text139
 19429  1395                     __ptext139:	
 19430 ;; *************** function _Buzzer_Main *****************
 19431 ;; Defined at:
 19432 ;;		line 46 in file "../src/Buzzer_B1.c"
 19433 ;; Parameters:    Size  Location     Type
 19434 ;;		None
 19435 ;; Auto vars:     Size  Location     Type
 19436 ;;		None
 19437 ;; Return value:  Size  Location     Type
 19438 ;;		None               void
 19439 ;; Registers used:
 19440 ;;		wreg, status,2, status,0
 19441 ;; Tracked objects:
 19442 ;;		On entry : 0/0
 19443 ;;		On exit  : 0/0
 19444 ;;		Unchanged: 0/0
 19445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19449 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19450 ;;Total ram usage:        1 bytes
 19451 ;; Hardware stack levels used:    1
 19452 ;; Hardware stack levels required when called:    5
 19453 ;; This function calls:
 19454 ;;		Nothing
 19455 ;; This function is called by:
 19456 ;;		_main
 19457 ;; This function uses a non-reentrant model
 19458 ;;
 19459                           
 19460                           
 19461                           ;psect for function _Buzzer_Main
 19462  1395                     _Buzzer_Main:	
 19463                           
 19464                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19465                           
 19466                           ;incstack = 0
 19467                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19468  1395  0022               	movlb	2	; select bank2
 19469  1396  1CA0               	btfss	_Buz1^(0+256),1
 19470  1397  0008               	return
 19471                           
 19472                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19473  1398  3001               	movlw	1
 19474  1399  07A1               	addwf	(_Buz1^(0+256)+1),f
 19475  139A  3000               	movlw	0
 19476  139B  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19477                           
 19478                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19479  139C  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19480  139D  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19481  139E  1D03               	skipz
 19482  139F  2BA2               	goto	u11915
 19483  13A0  0826               	movf	(_Buz1^(0+256)+6),w
 19484  13A1  0221               	subwf	(_Buz1^(0+256)+1),w
 19485  13A2                     u11915:	
 19486  13A2  1C03               	skipc
 19487  13A3  0008               	return
 19488                           
 19489                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19490  13A4  01A1               	clrf	(_Buz1^(0+256)+1)
 19491  13A5  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19492                           
 19493                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19494  13A6  12A0               	bcf	_Buz1^(0+256),5
 19495  13A7  0020               	movlb	0	; select bank0
 19496  13A8  1D8D               	btfss	13,3	;volatile
 19497  13A9  2BAC               	goto	l10459
 19498  13AA  0022               	movlb	2	; select bank2
 19499  13AB  16A0               	bsf	_Buz1^(0+256),5
 19500  13AC                     l10459:	
 19501                           
 19502                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19503  13AC  0022               	movlb	2	; select bank2
 19504  13AD  1AA0               	btfsc	_Buz1^(0+256),5
 19505  13AE  2BD8               	goto	l96
 19506                           
 19507                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19508  13AF  08A3               	movf	(_Buz1^(0+256)+3),f
 19509  13B0  1D03               	skipz
 19510  13B1  2BD4               	goto	l97
 19511                           
 19512                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19513  13B2  1DA0               	btfss	_Buz1^(0+256),3
 19514  13B3  2BC2               	goto	l98
 19515                           
 19516                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19517  13B4  11A0               	bcf	_Buz1^(0+256),3
 19518                           
 19519                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19520  13B5  0824               	movf	(_Buz1^(0+256)+4),w
 19521  13B6  0020               	movlb	0	; select bank0
 19522  13B7  00A0               	movwf	??_Buzzer_Main
 19523  13B8  0820               	movf	??_Buzzer_Main,w
 19524  13B9  0022               	movlb	2	; select bank2
 19525  13BA  00A3               	movwf	(_Buz1^(0+256)+3)
 19526                           
 19527                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19528  13BB  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19529  13BC  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19530  13BD  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19531  13BE  0828               	movf	(_Buz1^(0+256)+8),w
 19532  13BF  01A6               	clrf	(_Buz1^(0+256)+6)
 19533  13C0  07A6               	addwf	(_Buz1^(0+256)+6),f
 19534                           
 19535                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19536  13C1  0008               	return
 19537  13C2                     l98:	
 19538  13C2  1E20               	btfss	_Buz1^(0+256),4
 19539  13C3  2BD2               	goto	l100
 19540                           
 19541                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19542  13C4  1220               	bcf	_Buz1^(0+256),4
 19543                           
 19544                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19545  13C5  0825               	movf	(_Buz1^(0+256)+5),w
 19546  13C6  0020               	movlb	0	; select bank0
 19547  13C7  00A0               	movwf	??_Buzzer_Main
 19548  13C8  0820               	movf	??_Buzzer_Main,w
 19549  13C9  0022               	movlb	2	; select bank2
 19550  13CA  00A3               	movwf	(_Buz1^(0+256)+3)
 19551                           
 19552                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19553  13CB  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19554  13CC  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19555  13CD  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19556  13CE  082A               	movf	(_Buz1^(0+256)+10),w
 19557  13CF  01A6               	clrf	(_Buz1^(0+256)+6)
 19558  13D0  07A6               	addwf	(_Buz1^(0+256)+6),f
 19559                           
 19560                           ;Buzzer_B1.c: 62: } else {
 19561  13D1  0008               	return
 19562  13D2                     l100:	
 19563                           
 19564                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19565  13D2  10A0               	bcf	_Buz1^(0+256),1
 19566                           
 19567                           ;Buzzer_B1.c: 64: }
 19568                           ;Buzzer_B1.c: 65: } else {
 19569  13D3  0008               	return
 19570  13D4                     l97:	
 19571                           
 19572                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19573  13D4  16A0               	bsf	_Buz1^(0+256),5
 19574                           
 19575                           ;Buzzer_B1.c: 68: RB3 = 1;
 19576  13D5  0020               	movlb	0	; select bank0
 19577  13D6  158D               	bsf	13,3	;volatile
 19578                           
 19579                           ;Buzzer_B1.c: 69: }
 19580                           ;Buzzer_B1.c: 70: } else {
 19581  13D7  0008               	return
 19582  13D8                     l96:	
 19583                           
 19584                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19585  13D8  12A0               	bcf	_Buz1^(0+256),5
 19586                           
 19587                           ;Buzzer_B1.c: 73: RB3 = 0;
 19588  13D9  0020               	movlb	0	; select bank0
 19589  13DA  118D               	bcf	13,3	;volatile
 19590                           
 19591                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19592  13DB  3001               	movlw	1
 19593  13DC  0022               	movlb	2	; select bank2
 19594  13DD  02A3               	subwf	(_Buz1^(0+256)+3),f
 19595  13DE  0008               	return
 19596  13DF                     __end_of_Buzzer_Main:	
 19597                           
 19598                           	psect	text140
 19599  1A12                     __ptext140:	
 19600 ;; *************** function _Buzzer_Initialization *****************
 19601 ;; Defined at:
 19602 ;;		line 11 in file "../src/Buzzer_B1.c"
 19603 ;; Parameters:    Size  Location     Type
 19604 ;;		None
 19605 ;; Auto vars:     Size  Location     Type
 19606 ;;		None
 19607 ;; Return value:  Size  Location     Type
 19608 ;;		None               void
 19609 ;; Registers used:
 19610 ;;		None
 19611 ;; Tracked objects:
 19612 ;;		On entry : 0/0
 19613 ;;		On exit  : 0/0
 19614 ;;		Unchanged: 0/0
 19615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19620 ;;Total ram usage:        0 bytes
 19621 ;; Hardware stack levels used:    1
 19622 ;; Hardware stack levels required when called:    5
 19623 ;; This function calls:
 19624 ;;		Nothing
 19625 ;; This function is called by:
 19626 ;;		_main
 19627 ;; This function uses a non-reentrant model
 19628 ;;
 19629                           
 19630                           
 19631                           ;psect for function _Buzzer_Initialization
 19632  1A12                     _Buzzer_Initialization:	
 19633                           
 19634                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19635                           
 19636                           ;incstack = 0
 19637                           ; Regs used in _Buzzer_Initialization: []
 19638  1A12  0022               	movlb	2	; select bank2
 19639  1A13  1420               	bsf	_Buz1^(0+256),0
 19640  1A14  0008               	return
 19641  1A15                     __end_of_Buzzer_Initialization:	
 19642                           
 19643                           	psect	intentry
 19644  0004                     __pintentry:	
 19645 ;; *************** function _ISR *****************
 19646 ;; Defined at:
 19647 ;;		line 116 in file "../src/MCU_B1.c"
 19648 ;; Parameters:    Size  Location     Type
 19649 ;;		None
 19650 ;; Auto vars:     Size  Location     Type
 19651 ;;		None
 19652 ;; Return value:  Size  Location     Type
 19653 ;;		None               void
 19654 ;; Registers used:
 19655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19656 ;; Tracked objects:
 19657 ;;		On entry : 0/0
 19658 ;;		On exit  : 0/0
 19659 ;;		Unchanged: 0/0
 19660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19663 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19664 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19665 ;;Total ram usage:        1 bytes
 19666 ;; Hardware stack levels used:    1
 19667 ;; Hardware stack levels required when called:    4
 19668 ;; This function calls:
 19669 ;;		_IOC_ISR
 19670 ;;		_TMR1_ISR
 19671 ;; This function is called by:
 19672 ;;		Interrupt level 1
 19673 ;; This function uses a non-reentrant model
 19674 ;;
 19675                           
 19676  0004                     _ISR:	
 19677                           
 19678                           ;incstack = 0
 19679                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19680  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19681  0005  3180               	pagesel	$
 19682  0006  0020               	movlb	0	; select bank0
 19683  0007  087F               	movf	127,w
 19684  0008  00FC               	movwf	??_ISR
 19685                           
 19686                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19687  0009  0021               	movlb	1	; select bank1
 19688  000A  1C11               	btfss	17,0	;volatile
 19689  000B  2812               	goto	i1l10985
 19690  000C  0020               	movlb	0	; select bank0
 19691  000D  1C11               	btfss	17,0	;volatile
 19692  000E  2812               	goto	i1l10985
 19693                           
 19694                           ;MCU_B1.c: 126: TMR1_ISR();
 19695  000F  319E  26AC  3180   	fcall	_TMR1_ISR
 19696  0012                     i1l10985:	
 19697                           
 19698                           ;MCU_B1.c: 127: }
 19699                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19700  0012  198B               	btfsc	11,3	;volatile
 19701  0013  1C0B               	btfss	11,0	;volatile
 19702  0014  281A               	goto	i1l1208
 19703  0015  0027               	movlb	7	; select bank7
 19704  0016  1D16               	btfss	22,2	;volatile
 19705  0017  281A               	goto	i1l1208
 19706                           
 19707                           ;MCU_B1.c: 139: IOC_ISR();
 19708  0018  319A  2290         	fcall	_IOC_ISR
 19709  001A                     i1l1208:	
 19710                           ;MCU_B1.c: 140: }
 19711                           ;MCU_B1.c: 148: return;
 19712                           
 19713  001A  087C               	movf	??_ISR,w
 19714  001B  0020               	movlb	0	; select bank0
 19715  001C  00FF               	movwf	127
 19716  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19717  001E  0009               	retfie
 19718  001F                     __end_of_ISR:	
 19719                           
 19720                           	psect	text142
 19721  1EAC                     __ptext142:	
 19722 ;; *************** function _TMR1_ISR *****************
 19723 ;; Defined at:
 19724 ;;		line 236 in file "../src/MCU_B1.c"
 19725 ;; Parameters:    Size  Location     Type
 19726 ;;		None
 19727 ;; Auto vars:     Size  Location     Type
 19728 ;;		None
 19729 ;; Return value:  Size  Location     Type
 19730 ;;		None               void
 19731 ;; Registers used:
 19732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19733 ;; Tracked objects:
 19734 ;;		On entry : 0/0
 19735 ;;		On exit  : 0/0
 19736 ;;		Unchanged: 0/0
 19737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19742 ;;Total ram usage:        0 bytes
 19743 ;; Hardware stack levels used:    1
 19744 ;; Hardware stack levels required when called:    1
 19745 ;; This function calls:
 19746 ;;		_DimmerLights_TMR_1
 19747 ;; This function is called by:
 19748 ;;		_ISR
 19749 ;; This function uses a non-reentrant model
 19750 ;;
 19751                           
 19752                           
 19753                           ;psect for function _TMR1_ISR
 19754  1EAC                     _TMR1_ISR:	
 19755                           
 19756                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19757                           
 19758                           ;incstack = 0
 19759                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19760  1EAC  3189  2100  319E   	fcall	_DimmerLights_TMR_1
 19761                           
 19762                           ;MCU_B1.c: 268: Timer1.Count++;
 19763  1EAF  3001               	movlw	1
 19764  1EB0  0022               	movlb	2	; select bank2
 19765  1EB1  07B2               	addwf	(_Timer1^(0+256)+1),f
 19766  1EB2  3000               	movlw	0
 19767  1EB3  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19768                           
 19769                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19770  1EB4  3001               	movlw	1
 19771  1EB5  3E31               	addlw	_Timer1& (0+255)
 19772  1EB6  0086               	movwf	6
 19773  1EB7  3001               	movlw	1	; select bank2/3
 19774  1EB8  0087               	movwf	7
 19775  1EB9  3F40               	moviw [0]fsr1
 19776  1EBA  3AC8               	xorlw	200
 19777  1EBB  1D03               	skipz
 19778  1EBC  2EBF               	goto	u1201_25
 19779  1EBD  3F41               	moviw [1]fsr1
 19780  1EBE  3A00               	xorlw	0
 19781  1EBF                     u1201_25:	
 19782  1EBF  1D03               	skipz
 19783  1EC0  2EC4               	goto	i1l10513
 19784                           
 19785                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19786  1EC1  01B2               	clrf	(_Timer1^(0+256)+1)
 19787  1EC2  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19788                           
 19789                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19790  1EC3  1431               	bsf	_Timer1^(0+256),0
 19791  1EC4                     i1l10513:	
 19792                           
 19793                           ;MCU_B1.c: 272: }
 19794                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19795  1EC4  30FA               	movlw	250
 19796  1EC5  0020               	movlb	0	; select bank0
 19797  1EC6  0097               	movwf	23	;volatile
 19798                           
 19799                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19800  1EC7  3038               	movlw	56
 19801  1EC8  0096               	movwf	22	;volatile
 19802                           
 19803                           ;MCU_B1.c: 276: TMR1IF = 0;
 19804  1EC9  1011               	bcf	17,0	;volatile
 19805  1ECA  0008               	return
 19806  1ECB                     __end_of_TMR1_ISR:	
 19807                           
 19808                           	psect	text143
 19809  0900                     __ptext143:	
 19810 ;; *************** function _DimmerLights_TMR_1 *****************
 19811 ;; Defined at:
 19812 ;;		line 1386 in file "../src/Dimmer_B1.c"
 19813 ;; Parameters:    Size  Location     Type
 19814 ;;		None
 19815 ;; Auto vars:     Size  Location     Type
 19816 ;;		None
 19817 ;; Return value:  Size  Location     Type
 19818 ;;		None               void
 19819 ;; Registers used:
 19820 ;;		wreg, status,2, status,0
 19821 ;; Tracked objects:
 19822 ;;		On entry : 0/0
 19823 ;;		On exit  : 0/0
 19824 ;;		Unchanged: 0/0
 19825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19830 ;;Total ram usage:        1 bytes
 19831 ;; Hardware stack levels used:    1
 19832 ;; This function calls:
 19833 ;;		Nothing
 19834 ;; This function is called by:
 19835 ;;		_TMR1_ISR
 19836 ;; This function uses a non-reentrant model
 19837 ;;
 19838                           
 19839                           
 19840                           ;psect for function _DimmerLights_TMR_1
 19841  0900                     _DimmerLights_TMR_1:	
 19842                           
 19843                           ;Dimmer_B1.c: 1388: if (DimmerIntr1.Start == 1) {
 19844                           
 19845                           ;incstack = 0
 19846                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19847  0900  0021               	movlb	1	; select bank1
 19848  0901  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19849  0902  2925               	goto	i1l843
 19850                           
 19851                           ;Dimmer_B1.c: 1389: DimmerIntr1.Count++;
 19852  0903  3001               	movlw	1
 19853  0904  00F0               	movwf	??_DimmerLights_TMR_1
 19854  0905  0870               	movf	??_DimmerLights_TMR_1,w
 19855  0906  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19856                           
 19857                           ;Dimmer_B1.c: 1391: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19858  0907  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19859  0908  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19860  0909  1D03               	skipz
 19861  090A  290D               	goto	i1l9967
 19862                           
 19863                           ;Dimmer_B1.c: 1392: DimmerIntr1.Count = 0;
 19864  090B  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19865                           
 19866                           ;Dimmer_B1.c: 1393: DimmerIntr1.Start = 0;
 19867  090C  113C               	bcf	_DimmerIntr1^(0+128),2
 19868  090D                     i1l9967:	
 19869                           
 19870                           ;Dimmer_B1.c: 1394: }
 19871                           ;Dimmer_B1.c: 1408: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19872  090D  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19873  090E  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19874  090F  1903               	btfsc	3,2
 19875                           
 19876                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.ControlStatus == 1) {
 19877  0910  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19878  0911  2914               	goto	i1l9973
 19879                           
 19880                           ;Dimmer_B1.c: 1410: RB1 = 0;
 19881  0912  0020               	movlb	0	; select bank0
 19882  0913  108D               	bcf	13,1	;volatile
 19883  0914                     i1l9973:	
 19884                           
 19885                           ;Dimmer_B1.c: 1411: }
 19886                           ;Dimmer_B1.c: 1412: }
 19887                           ;Dimmer_B1.c: 1415: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19888  0914  0021               	movlb	1	; select bank1
 19889  0915  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19890  0916  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19891  0917  1903               	btfsc	3,2
 19892                           
 19893                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.ControlStatus == 1) {
 19894  0918  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19895  0919  291C               	goto	i1l9979
 19896                           
 19897                           ;Dimmer_B1.c: 1417: RB1 = 1;
 19898  091A  0020               	movlb	0	; select bank0
 19899  091B  148D               	bsf	13,1	;volatile
 19900  091C                     i1l9979:	
 19901                           
 19902                           ;Dimmer_B1.c: 1418: }
 19903                           ;Dimmer_B1.c: 1419: }
 19904                           ;Dimmer_B1.c: 1422: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19905  091C  0021               	movlb	1	; select bank1
 19906  091D  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19907  091E  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19908  091F  1903               	btfsc	3,2
 19909                           
 19910                           ;Dimmer_B1.c: 1423: if (DimmerIntr1.ControlStatus == 1) {
 19911  0920  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19912  0921  2936               	goto	i1l851
 19913                           
 19914                           ;Dimmer_B1.c: 1424: RB1 = 0;
 19915  0922  0020               	movlb	0	; select bank0
 19916  0923  108D               	bcf	13,1	;volatile
 19917                           
 19918                           ;Dimmer_B1.c: 1425: }
 19919                           ;Dimmer_B1.c: 1428: }
 19920                           ;Dimmer_B1.c: 1430: } else {
 19921  0924  2936               	goto	i1l851
 19922  0925                     i1l843:	
 19923                           
 19924                           ;Dimmer_B1.c: 1431: if (DimmerIntr1.GO == 1) {
 19925  0925  1C3C               	btfss	_DimmerIntr1^(0+128),0
 19926  0926  2936               	goto	i1l851
 19927                           
 19928                           ;Dimmer_B1.c: 1432: DimmerIntr1.Count++;
 19929  0927  3001               	movlw	1
 19930  0928  00F0               	movwf	??_DimmerLights_TMR_1
 19931  0929  0870               	movf	??_DimmerLights_TMR_1,w
 19932  092A  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19933                           
 19934                           ;Dimmer_B1.c: 1433: if (DimmerIntr1.Count == 7) {
 19935  092B  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19936  092C  3A07               	xorlw	7
 19937  092D  1D03               	skipz
 19938  092E  2936               	goto	i1l851
 19939                           
 19940                           ;Dimmer_B1.c: 1434: DimmerIntr1.Count = 0;
 19941  092F  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19942                           
 19943                           ;Dimmer_B1.c: 1435: DimmerIntr1.GO = 0;
 19944  0930  103C               	bcf	_DimmerIntr1^(0+128),0
 19945                           
 19946                           ;Dimmer_B1.c: 1436: DimmerIntr1.Start = 1;
 19947  0931  153C               	bsf	_DimmerIntr1^(0+128),2
 19948                           
 19949                           ;Dimmer_B1.c: 1438: if (DimmerIntr1.ControlStatus == 1) {
 19950  0932  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19951  0933  2936               	goto	i1l851
 19952                           
 19953                           ;Dimmer_B1.c: 1439: RB1 = 1;
 19954  0934  0020               	movlb	0	; select bank0
 19955  0935  148D               	bsf	13,1	;volatile
 19956  0936                     i1l851:	
 19957                           
 19958                           ;Dimmer_B1.c: 1440: }
 19959                           ;Dimmer_B1.c: 1441: }
 19960                           ;Dimmer_B1.c: 1442: }
 19961                           ;Dimmer_B1.c: 1443: }
 19962                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Tune == 1) {
 19963  0936  0021               	movlb	1	; select bank1
 19964  0937  1CBC               	btfss	_DimmerIntr1^(0+128),1
 19965  0938  0008               	return
 19966                           
 19967                           ;Dimmer_B1.c: 1446: DimmerIntr1.Tune = 0;
 19968  0939  10BC               	bcf	_DimmerIntr1^(0+128),1
 19969                           
 19970                           ;Dimmer_B1.c: 1447: DimmerIntr1.TuneTime++;
 19971  093A  3001               	movlw	1
 19972  093B  00F0               	movwf	??_DimmerLights_TMR_1
 19973  093C  0870               	movf	??_DimmerLights_TMR_1,w
 19974  093D  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 19975                           
 19976                           ;Dimmer_B1.c: 1448: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19977  093E  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 19978  093F  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 19979  0940  1C03               	skipc
 19980  0941  0008               	return
 19981                           
 19982                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneTime = 0;
 19983  0942  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 19984                           
 19985                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneGO = 1;
 19986  0943  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 19987                           
 19988                           ;Dimmer_B1.c: 1451: if (DimmerIntr1.Dimming_Sw == 1) {
 19989  0944  1E3C               	btfss	_DimmerIntr1^(0+128),4
 19990  0945  295C               	goto	i1l857
 19991                           
 19992                           ;Dimmer_B1.c: 1452: if (DimmerIntr1.Dimming_Status == 0) {
 19993  0946  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 19994  0947  2953               	goto	i1l10017
 19995                           
 19996                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.DimmingValue < ((char)(87*0.6))) {
 19997  0948  3034               	movlw	52
 19998  0949  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19999  094A  1803               	skipnc
 20000  094B  2951               	goto	i1l859
 20001                           
 20002                           ;Dimmer_B1.c: 1454: DimmerIntr1.DimmingValue++;
 20003  094C  3001               	movlw	1
 20004  094D  00F0               	movwf	??_DimmerLights_TMR_1
 20005  094E  0870               	movf	??_DimmerLights_TMR_1,w
 20006  094F  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20007                           
 20008                           ;Dimmer_B1.c: 1455: } else {
 20009  0950  0008               	return
 20010  0951                     i1l859:	
 20011                           
 20012                           ;Dimmer_B1.c: 1456: DimmerIntr1.Dimming_Status = 1;
 20013  0951  16BC               	bsf	_DimmerIntr1^(0+128),5
 20014                           
 20015                           ;Dimmer_B1.c: 1457: }
 20016                           ;Dimmer_B1.c: 1458: } else {
 20017  0952  0008               	return
 20018  0953                     i1l10017:	
 20019                           
 20020                           ;Dimmer_B1.c: 1459: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 20021  0953  3007               	movlw	7
 20022  0954  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20023  0955  1C03               	skipc
 20024  0956  295A               	goto	i1l862
 20025                           
 20026                           ;Dimmer_B1.c: 1460: DimmerIntr1.DimmingValue--;
 20027  0957  3001               	movlw	1
 20028  0958  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20029                           
 20030                           ;Dimmer_B1.c: 1461: } else {
 20031  0959  0008               	return
 20032  095A                     i1l862:	
 20033                           
 20034                           ;Dimmer_B1.c: 1462: DimmerIntr1.Dimming_Status = 0;
 20035  095A  12BC               	bcf	_DimmerIntr1^(0+128),5
 20036                           
 20037                           ;Dimmer_B1.c: 1463: }
 20038                           ;Dimmer_B1.c: 1464: }
 20039                           ;Dimmer_B1.c: 1465: } else if (DimmerIntr1.Dimming_RF == 1) {
 20040  095B  0008               	return
 20041  095C                     i1l857:	
 20042  095C  1F3C               	btfss	_DimmerIntr1^(0+128),6
 20043  095D  0008               	return
 20044                           
 20045                           ;Dimmer_B1.c: 1466: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20046  095E  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 20047  095F  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20048  0960  1803               	skipnc
 20049  0961  2967               	goto	i1l10025
 20050                           
 20051                           ;Dimmer_B1.c: 1467: DimmerIntr1.DimmingValue++;
 20052  0962  3001               	movlw	1
 20053  0963  00F0               	movwf	??_DimmerLights_TMR_1
 20054  0964  0870               	movf	??_DimmerLights_TMR_1,w
 20055  0965  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20056                           
 20057                           ;Dimmer_B1.c: 1468: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20058  0966  0008               	return
 20059  0967                     i1l10025:	
 20060  0967  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20061  0968  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 20062  0969  1803               	skipnc
 20063  096A  296E               	goto	i1l868
 20064                           
 20065                           ;Dimmer_B1.c: 1469: DimmerIntr1.DimmingValue--;
 20066  096B  3001               	movlw	1
 20067  096C  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20068                           
 20069                           ;Dimmer_B1.c: 1470: } else {
 20070  096D  0008               	return
 20071  096E                     i1l868:	
 20072                           
 20073                           ;Dimmer_B1.c: 1471: DimmerIntr1.Dimming_RF = 0;
 20074  096E  133C               	bcf	_DimmerIntr1^(0+128),6
 20075  096F  0008               	return
 20076  0970                     __end_of_DimmerLights_TMR_1:	
 20077                           
 20078                           	psect	text144
 20079  1A90                     __ptext144:	
 20080 ;; *************** function _IOC_ISR *****************
 20081 ;; Defined at:
 20082 ;;		line 395 in file "../src/MCU_B1.c"
 20083 ;; Parameters:    Size  Location     Type
 20084 ;;		None
 20085 ;; Auto vars:     Size  Location     Type
 20086 ;;		None
 20087 ;; Return value:  Size  Location     Type
 20088 ;;		None               void
 20089 ;; Registers used:
 20090 ;;		wreg, status,2, status,0, pclath, cstack
 20091 ;; Tracked objects:
 20092 ;;		On entry : 0/0
 20093 ;;		On exit  : 0/0
 20094 ;;		Unchanged: 0/0
 20095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20100 ;;Total ram usage:        0 bytes
 20101 ;; Hardware stack levels used:    1
 20102 ;; Hardware stack levels required when called:    3
 20103 ;; This function calls:
 20104 ;;		_DimmerLights_IOC_1
 20105 ;; This function is called by:
 20106 ;;		_ISR
 20107 ;; This function uses a non-reentrant model
 20108 ;;
 20109                           
 20110                           
 20111                           ;psect for function _IOC_ISR
 20112  1A90                     _IOC_ISR:	
 20113                           
 20114                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20115                           
 20116                           ;incstack = 0
 20117                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20118  1A90  0021               	movlb	1	; select bank1
 20119  1A91  1C2F               	btfss	_myMain^(0+128),0
 20120  1A92  2A95               	goto	i1l7887
 20121                           
 20122                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20123  1A93  3192  2215         	fcall	_DimmerLights_IOC_1
 20124  1A95                     i1l7887:	
 20125                           
 20126                           ;MCU_B1.c: 416: }
 20127                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20128  1A95  0027               	movlb	7	; select bank7
 20129  1A96  1116               	bcf	22,2	;volatile
 20130                           
 20131                           ;MCU_B1.c: 419: IOCIF = 0;
 20132  1A97  100B               	bcf	11,0	;volatile
 20133  1A98  0008               	return
 20134  1A99                     __end_of_IOC_ISR:	
 20135                           
 20136                           	psect	text145
 20137  1215                     __ptext145:	
 20138 ;; *************** function _DimmerLights_IOC_1 *****************
 20139 ;; Defined at:
 20140 ;;		line 1478 in file "../src/Dimmer_B1.c"
 20141 ;; Parameters:    Size  Location     Type
 20142 ;;		None
 20143 ;; Auto vars:     Size  Location     Type
 20144 ;;		None
 20145 ;; Return value:  Size  Location     Type
 20146 ;;		None               void
 20147 ;; Registers used:
 20148 ;;		wreg, status,2, status,0, pclath, cstack
 20149 ;; Tracked objects:
 20150 ;;		On entry : 0/0
 20151 ;;		On exit  : 0/0
 20152 ;;		Unchanged: 0/0
 20153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20158 ;;Total ram usage:        2 bytes
 20159 ;; Hardware stack levels used:    1
 20160 ;; Hardware stack levels required when called:    2
 20161 ;; This function calls:
 20162 ;;		i1_Division
 20163 ;; This function is called by:
 20164 ;;		_IOC_ISR
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           
 20169                           ;psect for function _DimmerLights_IOC_1
 20170  1215                     _DimmerLights_IOC_1:	
 20171                           
 20172                           ;Dimmer_B1.c: 1492: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20173                           
 20174                           ;incstack = 0
 20175                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20176  1215  0021               	movlb	1	; select bank1
 20177  1216  193C               	btfsc	_DimmerIntr1^(0+128),2
 20178  1217  0008               	return
 20179  1218  183C               	btfsc	_DimmerIntr1^(0+128),0
 20180  1219  0008               	return
 20181                           
 20182                           ;Dimmer_B1.c: 1494: if (RB2 != DimmerIntr1.Status) {
 20183  121A  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20184  121B  0C89               	rrf	9,f
 20185  121C  3901               	andlw	1
 20186  121D  00FA               	movwf	??_DimmerLights_IOC_1
 20187  121E  3000               	movlw	0
 20188  121F  0020               	movlb	0	; select bank0
 20189  1220  190D               	btfsc	13,2	;volatile
 20190  1221  3001               	movlw	1
 20191  1222  067A               	xorwf	??_DimmerLights_IOC_1,w
 20192  1223  1903               	skipnz
 20193  1224  0008               	return
 20194                           
 20195                           ;Dimmer_B1.c: 1497: DimmerIntr1.Count = 0;
 20196  1225  0021               	movlb	1	; select bank1
 20197  1226  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20198                           
 20199                           ;Dimmer_B1.c: 1498: DimmerIntr1.GO = 1;
 20200  1227  143C               	bsf	_DimmerIntr1^(0+128),0
 20201                           
 20202                           ;Dimmer_B1.c: 1500: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20203  1228  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20204  1229  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20205                           
 20206                           ;Dimmer_B1.c: 1501: DimmerIntr1.Tune = 1;
 20207  122A  14BC               	bsf	_DimmerIntr1^(0+128),1
 20208                           
 20209                           ;Dimmer_B1.c: 1502: }
 20210                           ;Dimmer_B1.c: 1504: if (DimmerIntr1.TuneGO == 1) {
 20211  122B  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20212  122C  2A4B               	goto	i1l7391
 20213                           
 20214                           ;Dimmer_B1.c: 1505: DimmerIntr1.TuneGO = 0;
 20215  122D  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20216                           
 20217                           ;Dimmer_B1.c: 1508: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20218  122E  3002               	movlw	2
 20219  122F  00FA               	movwf	??_DimmerLights_IOC_1
 20220  1230  087A               	movf	??_DimmerLights_IOC_1,w
 20221  1231  00F5               	movwf	i1Division@num
 20222  1232  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20223  1233  319B  2370  3192   	fcall	i1_Division
 20224  1236  00FB               	movwf	??_DimmerLights_IOC_1+1
 20225  1237  087B               	movf	??_DimmerLights_IOC_1+1,w
 20226  1238  0021               	movlb	1	; select bank1
 20227  1239  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20228                           
 20229                           ;Dimmer_B1.c: 1509: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20230  123A  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20231  123B  3AFF               	xorlw	255
 20232  123C  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20233  123D  3E3C               	addlw	60
 20234  123E  00FA               	movwf	??_DimmerLights_IOC_1
 20235  123F  087A               	movf	??_DimmerLights_IOC_1,w
 20236  1240  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20237                           
 20238                           ;Dimmer_B1.c: 1510: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20239  1241  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20240  1242  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20241  1243  00FA               	movwf	??_DimmerLights_IOC_1
 20242  1244  087A               	movf	??_DimmerLights_IOC_1,w
 20243  1245  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20244                           
 20245                           ;Dimmer_B1.c: 1511: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20246  1246  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20247  1247  3E01               	addlw	1
 20248  1248  00FA               	movwf	??_DimmerLights_IOC_1
 20249  1249  087A               	movf	??_DimmerLights_IOC_1,w
 20250  124A  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20251  124B                     i1l7391:	
 20252                           
 20253                           ;Dimmer_B1.c: 1512: }
 20254                           ;Dimmer_B1.c: 1516: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20255  124B  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20256  124C  0020               	movlb	0	; select bank0
 20257  124D  1D0D               	btfss	13,2	;volatile
 20258  124E  0008               	return
 20259  124F  0021               	movlb	1	; select bank1
 20260  1250  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20261  1251  0008               	return
 20262  1252                     __end_of_DimmerLights_IOC_1:	
 20263                           
 20264                           	psect	text146
 20265  1B70                     __ptext146:	
 20266 ;; *************** function i1_Division *****************
 20267 ;; Defined at:
 20268 ;;		line 1381 in file "../src/Dimmer_B1.c"
 20269 ;; Parameters:    Size  Location     Type
 20270 ;;  value           1    wreg     unsigned char 
 20271 ;;  num             1    5[COMMON] unsigned char 
 20272 ;; Auto vars:     Size  Location     Type
 20273 ;;  value           1    8[COMMON] unsigned char 
 20274 ;;  Division        1    9[COMMON] unsigned char 
 20275 ;; Return value:  Size  Location     Type
 20276 ;;                  1    wreg      unsigned char 
 20277 ;; Registers used:
 20278 ;;		wreg, status,2, status,0, pclath, cstack
 20279 ;; Tracked objects:
 20280 ;;		On entry : 0/0
 20281 ;;		On exit  : 0/0
 20282 ;;		Unchanged: 0/0
 20283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20284 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20287 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20288 ;;Total ram usage:        5 bytes
 20289 ;; Hardware stack levels used:    1
 20290 ;; Hardware stack levels required when called:    1
 20291 ;; This function calls:
 20292 ;;		i1___lbdiv
 20293 ;; This function is called by:
 20294 ;;		_DimmerLights_IOC_1
 20295 ;; This function uses a non-reentrant model
 20296 ;;
 20297                           
 20298                           
 20299                           ;psect for function i1_Division
 20300  1B70                     i1_Division:	
 20301                           
 20302                           ;incstack = 0
 20303                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20304                           ;i1Division@value stored from wreg
 20305  1B70  00F8               	movwf	i1Division@value
 20306                           
 20307                           ;Dimmer_B1.c: 1382: char result = (char) (value / num);
 20308  1B71  0875               	movf	i1Division@num,w
 20309  1B72  00F6               	movwf	??i1_Division
 20310  1B73  0876               	movf	??i1_Division,w
 20311  1B74  00F0               	movwf	i1___lbdiv@divisor
 20312  1B75  0878               	movf	i1Division@value,w
 20313  1B76  319F  272A         	fcall	i1___lbdiv
 20314  1B78  00F7               	movwf	??i1_Division+1
 20315  1B79  0877               	movf	??i1_Division+1,w
 20316  1B7A  00F9               	movwf	i1Division@result
 20317                           
 20318                           ;Dimmer_B1.c: 1383: return result;
 20319  1B7B  0879               	movf	i1Division@result,w
 20320  1B7C  0008               	return
 20321  1B7D                     __end_ofi1_Division:	
 20322                           
 20323                           	psect	text147
 20324  1F2A                     __ptext147:	
 20325 ;; *************** function i1___lbdiv *****************
 20326 ;; Defined at:
 20327 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20328 ;; Parameters:    Size  Location     Type
 20329 ;;  dividend        1    wreg     unsigned char 
 20330 ;;  divisor         1    0[COMMON] unsigned char 
 20331 ;; Auto vars:     Size  Location     Type
 20332 ;;  dividend        1    2[COMMON] unsigned char 
 20333 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20334 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20335 ;; Return value:  Size  Location     Type
 20336 ;;                  1    wreg      unsigned char 
 20337 ;; Registers used:
 20338 ;;		wreg, status,2, status,0
 20339 ;; Tracked objects:
 20340 ;;		On entry : 0/0
 20341 ;;		On exit  : 0/0
 20342 ;;		Unchanged: 0/0
 20343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20344 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20345 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20347 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20348 ;;Total ram usage:        5 bytes
 20349 ;; Hardware stack levels used:    1
 20350 ;; This function calls:
 20351 ;;		Nothing
 20352 ;; This function is called by:
 20353 ;;		i1_Division
 20354 ;; This function uses a non-reentrant model
 20355 ;;
 20356                           
 20357                           
 20358                           ;psect for function i1___lbdiv
 20359  1F2A                     i1___lbdiv:	
 20360                           
 20361                           ;incstack = 0
 20362                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20363                           ;i1___lbdiv@dividend stored from wreg
 20364  1F2A  00F2               	movwf	i1___lbdiv@dividend
 20365  1F2B  01F4               	clrf	i1___lbdiv@quotient
 20366  1F2C  0870               	movf	i1___lbdiv@divisor,w
 20367  1F2D  1903               	btfsc	3,2
 20368  1F2E  2F49               	goto	i1l6767
 20369  1F2F  01F3               	clrf	i1___lbdiv@counter
 20370  1F30  0AF3               	incf	i1___lbdiv@counter,f
 20371  1F31                     i1l6755:	
 20372  1F31  1BF0               	btfsc	i1___lbdiv@divisor,7
 20373  1F32  2F3A               	goto	i1l6757
 20374  1F33  1003               	clrc
 20375  1F34  0DF0               	rlf	i1___lbdiv@divisor,f
 20376  1F35  3001               	movlw	1
 20377  1F36  00F1               	movwf	??i1___lbdiv
 20378  1F37  0871               	movf	??i1___lbdiv,w
 20379  1F38  07F3               	addwf	i1___lbdiv@counter,f
 20380  1F39  2F31               	goto	i1l6755
 20381  1F3A                     i1l6757:	
 20382  1F3A  1003               	clrc
 20383  1F3B  0DF4               	rlf	i1___lbdiv@quotient,f
 20384  1F3C  0870               	movf	i1___lbdiv@divisor,w
 20385  1F3D  0272               	subwf	i1___lbdiv@dividend,w
 20386  1F3E  1C03               	skipc
 20387  1F3F  2F44               	goto	L11
 20388  1F40  0870               	movf	i1___lbdiv@divisor,w
 20389  1F41  02F2               	subwf	i1___lbdiv@dividend,f
 20390  1F42  1474               	bsf	i1___lbdiv@quotient,0
 20391  1F43  1003               	clrc
 20392  1F44                     L11:	
 20393  1F44  0CF0               	rrf	i1___lbdiv@divisor,f
 20394  1F45  3001               	movlw	1
 20395  1F46  02F3               	subwf	i1___lbdiv@counter,f
 20396  1F47  1D03               	btfss	3,2
 20397  1F48  2F3A               	goto	i1l6757
 20398  1F49                     i1l6767:	
 20399  1F49  0874               	movf	i1___lbdiv@quotient,w
 20400  1F4A  0008               	return
 20401  1F4B                     __end_ofi1___lbdiv:	
 20402  007E                     btemp	set	126	;btemp
 20403  007E                     pic14e$flags	set	126
 20404  007E                     wtemp	set	126
 20405  007E                     wtemp0	set	126
 20406  0080                     wtemp1	set	128
 20407  0082                     wtemp2	set	130
 20408  0084                     wtemp3	set	132
 20409  0086                     wtemp4	set	134
 20410  0088                     wtemp5	set	136
 20411  007F                     wtemp6	set	127
 20412  007E                     ttemp	set	126
 20413  007E                     ttemp0	set	126
 20414  0081                     ttemp1	set	129
 20415  0084                     ttemp2	set	132
 20416  0087                     ttemp3	set	135
 20417  007F                     ttemp4	set	127
 20418  007E                     ltemp	set	126
 20419  007E                     ltemp0	set	126
 20420  0082                     ltemp1	set	130
 20421  0086                     ltemp2	set	134
 20422  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         223
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      78
    BANK2            80      0      79
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_setBuz
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setProductData
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  207771
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     400
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     799
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    7480
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    7480
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4575
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4575
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   64601
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   64601
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   59731
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    7029
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   52430
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0    2139
                                             13 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   16186
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   26577
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    7761
                                             69 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1281
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2043
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3851
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   67285
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   66976
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   38522
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     166
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    6325
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   28061
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    5589
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32899
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   32899
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     614
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     345
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    7407
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    7407
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    5054
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
                   _getDimmer_LoadGO (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    2009
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmer_LoadGO (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _getDimmer_LoadGO (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _getDimmer_LoadGO (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
     _setProductData
       _getDimmerLights_ValueToPercent (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmer_LoadGO (ARG)
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _getDimmer_LoadGO (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                 _getDimmer_LoadGO (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                 _getDimmer_LoadGO (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmer_LoadGO (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     167      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     167      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Mar 07 16:25:01 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1DB7                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 14BA  
                                      l96 13D8                                        l88 14CE  
                                      l97 13D4                                        l98 13C2  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1FB2  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D4                            setTemp_Main@AD 006C  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1AB5  
                  __end_of_setDelayOff_GO 0C74                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 002E  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 172A  
                    _setDimmerLights_Line 1BBB                              ___ftadd@sign 004B  
                                     l100 13D2                                       l303 1DC3  
                                     l304 1DC5                                       l235 0869  
                    _setDimmerLights_SwOn 1101                                       l531 08F9  
                                     l347 1FB7                                       l690 1B99  
                                     l759 1E4F                                       l786 0FC2  
                                     _GIE 005F                                       _CRC 00CA  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CF  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C8                                       _Cmd 00CB  
            getDimmerLights_Status@lights 0022                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1DD0  
                   _Buzzer_Initialization 1A12                           __end_of_ADC_Set 1A71  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1D86  
             _setDimmerIntr_ControlStatus 1D6E                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1A99                     _setDimmerLights_OnOff 0F3D  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 006C  
                            ___ftdiv@sign 003D                                      l2130 0599  
                                    l1245 130A                                      l2125 05F9  
                                    l1503 06D1                                      l1512 1DB6  
                                    l2216 127B                                      l2129 0548  
                                    l2170 07FE                                      l1259 1062  
                                    l2155 1BA0                                      l1269 0B59  
                                    l1630 007F                                      l1471 10B0  
                                    l1631 007A                                      l2183 10FD  
                                    l1472 10CB                                      l1800 0DC2  
                                    l1448 134F                                      l2514 042A  
                                    l1627 02A8                                      l1476 10C7  
                                    l2516 02F6                                      l1637 0248  
                                    l1629 0083                           __end_of_IOC_Set 1AD6  
                                    l2197 0A5A                                      l1638 0246  
                                    l2494 1D34                                      l1795 0D3D  
                                    l1789 0DCA                                      l2865 15E4  
                                    l2698 1E97                                      l2859 15CD  
                                    l2888 04D1                            _Load_Main$3996 0068  
                   _setDimmerLights_SwOff 11A3                                      l9021 1E10  
                                    l9025 1E16                                      l9113 12C2  
                                    l9019 1E0D                                      l9203 137F  
                                    l9043 1E81                                      l9213 138F  
                                    l9045 1E87                                      l9125 0A72  
                                    l9311 10B4                                      l9071 1FA1  
                                    l9207 1386                                      l8513 13EA  
                                    l9057 1FC8                                      l9065 1F98  
                                    l9209 1389                                      l9129 0A77  
                                    l9401 0A1A                                      l8531 1409  
                                    l8611 1F78                                      l9091 1DB0  
                                    l9059 1FD3                                      l9067 1F9B  
                                    l9171 080D                                      l9139 0AC7  
                                    l9163 1286                                      l9403 0A3C  
                                    l9411 0A48                                      l8541 1424  
                                    l9309 10AB                                      l9405 0A40  
                                    l8519 13F5                                      l9423 1F53  
                                    l8623 045A                                      l9319 10C2  
                                    l9087 1DA1                                      l9175 0813  
                                    l9511 17B1                                      l9407 0A44  
                                    l8545 142C                                      l8537 141B  
                                    l8529 13FD                                      l9425 1F5C  
                                    l8633 0470                                      l8721 0CFB  
                                    l8713 0CE2                                      l9353 120A  
                                    l9345 11F4                                      l9169 080A  
                                    l9505 17A8                                      l9435 1F6B  
                                    l8483 15AA                                      l8651 049D  
                                    l8627 0461                                      l8811 0BAA  
                                    l9363 1C2C                                      l9339 11EB  
                                    l9603 0FA2                                      l9507 17AB  
                                    l9451 0838                                      l8493 15D2  
                                    l8485 15B4                                      l8653 04A7  
                                    l8645 048A                                      l8741 0DFB  
                                    l8821 0BCE                                      l8813 0BB8  
                                    l9365 1C31                                      l9197 1376  
                   _myMain_Initialization 1CC7                                      l8495 15DA  
                                    l8487 15B9                                      l8479 15A3  
                                    l8663 04C3                                      l8655 04AC  
                                    l8735 0DE5                                      l8823 0BD1  
                                    l9359 1C25                                      l8911 0C26  
                                    l9631 0FFD                                      l9199 1379  
                                    l9527 17C3                                      l9455 083E  
                                    l9391 09E3                                      l8673 04F5  
                                    l8665 04CD                                      l8657 04B0  
                                    l8753 0E36                                      l8593 1C3C  
                                    l8921 0C56                                      l9617 0FD1  
                                    l9529 17DC                                      l9481 087C  
                                    l9473 086F                                      l9449 0835  
                                    l8683 0510                                      l8827 0BDF  
                                    l8819 0BC5                                      l9707 104A  
                                    l9483 087F                                      l9475 0872  
                                    l8669 04E3                                      l8693 0C8B  
                                    l8765 0E52                                      l8757 0E3E  
                                    l9573 1D51                                      l9637 144C  
                                    l8589 1C36                                      l8925 0C6A  
                                    l9469 0850                                      l9397 09F8  
                                    l9903 1CB2                                      l9487 0885  
                                    l9479 0878                                      l9751 1C0A  
                                    l9399 09FF                                      l8769 0E5A  
                                    l8793 0B7A                                      l8961 1714  
                                    l9841 1193                                      l9833 1175  
                                    l9817 1C1B                                      _CFGS 0CAE  
                                    l8875 1128                                      l8699 0CA1  
                                    l9595 0F84                                      l9931 1788  
                                    l9835 1181                                      l9771 07B2  
                                    l8877 112D                                      l9597 0F9B  
                                    l9917 1752                                      l9941 1ABD  
                                    l9845 119C                                      l9919 1759  
                                    l9783 07CA                              __CFG_WDTE$ON 0000  
                                    l8889 11D1                                      l9929 1781  
                                    l9787 07D3                                      l9879 1561  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u9125 04B1  
                                    u9065 048B                                      u9225 0CB3  
                                    u9305 0E07                                      u9155 04C4  
                                    u9235 0CC3                                      u9315 0E17  
                                    u9245 0CE3                                      u9095 049E  
                                    u9255 0CF2                                      u9335 0E3F  
                                    u9265 0CFC                                      u9345 0E45  
                                    u9425 0B81                                      u8715 15C8  
                                    u9515 1CFD                                      u8815 1400  
                                    u8735 15D5                                      u9375 0E5B  
                                    u9455 0BAB                                      u9385 0E61  
                                    u8835 140A                                      u8845 1414  
                                    u8765 15EB                                      u9485 0BC6  
                                    u9645 0C32                                      u8855 141C  
                                    u8695 15AF                                      u9680 16CF  
                                    _LWLO 0CAD                                      u9685 16CD  
                                    u9785 1FBD                                      _RSSI 00D1  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E39                _setDimmerLights_DimmingRun 1E1E  
                                    _Buz1 0120                                      _Load 0136  
                                    _Temp 00DA                                      _main 14E2  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0900  
                         __end_of_RF_Main 1A1E                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1AE1  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0ADB  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2285 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1D58  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1D42                    _getDimmerLights_Status 1BAA  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1A34  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CD  
                                   l10101 1EF8                                     l10105 1EFD  
                                   l10203 0D4F                                     l10125 1BE8  
                                   l10205 0D52                                     l10151 0B52  
                                   l10143 0AF7                                     l10311 05DA  
                                   l11015 1506                                     l10137 0AE2  
                                   l10235 0D9A                                     l11019 1511  
                                   l10325 05F2                                     l10341 1D39  
                                   l10245 0DAF                                     l10247 0DB1  
                                   l10345 1D3F                                     l10409 03D2  
                                   l10283 0594                                     l10099 1EF5  
                                   l10533 0754                                     l10197 0D40  
                                   l10621 09AE                                     l10613 098F  
                                   l10439 1E91                                     l10375 0329  
                                   l10359 02E0                                     l10705 0061  
                                   l10297 05A8                                     l10385 035E  
                                   l10641 09DD                                     l10625 09B6  
                                   l10459 13AC                                     l10723 0082  
                                   l10901 063A                                     l10813 01F3  
                                   l10495 1E51                                     l10911 063D  
                                   l10559 12E9                                     l10399 039E  
                                   l10671 132A                     ?_setDimmerLights_Main 0070  
                                   l10913 066A                                     l10745 00D8  
                                   l10931 06AC                                     l10771 015B  
                                   l10739 00A6                                     l10933 06B6  
                                   l10909 0662                                     l10861 0296  
                                   l10829 020B                                     l10781 0187  
                                   l10927 06A4                                     l10791 01A3  
                                   l10679 1338                                     l10929 067F  
                                   l10777 016A                                     l10785 0193  
                                   l10939 06C7                                     l10891 061B  
                                   l10897 062B                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00E8                           __end_of___awdiv 1433  
                         __end_of___lbdiv 1F6D                           __end_of___ftadd 0528  
                         __end_of___ftdiv 0D1D                           __end_of___ftneg 1AA2  
                         __end_of___ftmul 0E82                                     u12105 1301  
                         ___awdiv@divisor 0020                                     u12215 09CD  
                                   _T1CON 0018                                     u10545 1D27  
                                   u11505 0DA1                                     u12305 1347  
                         __end_of___fttol 0BE8                                     u12165 099E  
                                   u10825 1178                                     u11625 05C9  
                                   u12265 108D                                     u10845 1182  
                                   u12445 00A4                                     u11485 0D83  
                                   u12710 06AA                                     u10855 118C  
                                   u12455 00D6                                     u10865 1194  
                                   u12545 019A                                     u12465 011A  
                                   u11915 13A2                                     u12715 0688  
                                   u11595 056C                                     u12680 0668  
                                   u11875 1E98                                     u12685 0646  
                                   u11885 1E9D                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 11A3                                     i1l851 0936  
                                   i1l843 0925                                     i1l862 095A  
                                   i1l857 095C                                     i1l859 0951  
                                   i1l868 096E                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1D2D  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 16C5  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1660  
                                   _Light 00D0                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1ECB                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1B58                                     _getAD 1EEA  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1C7B               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1ACB  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1C57  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      __size_ofi1___lbdiv 0021                       _getAll_Sw_KeyStatus 1BDD  
                      _setRF_DimmerLights 16C5                           ___lbdiv@divisor 0020  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0023                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1B8C                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 153D                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1A38            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 05FD                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1000  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 09E2                            _setMemory_Data 1B34  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0768        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 1433                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1AAB                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1CEE                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0891  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1A88  
                               ??_WDT_Set 0020                          __end_of___awtoft 1F8F  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 15FB  
                _getMain_All_Error_Status 109A                                    _IOCBF2 1CB2  
                                  i1l1208 001A                                    i1l7391 124B  
                                  i1l6755 1F31                                    i1l6757 1F3A  
                                  i1l6767 1F49                                    i1l7887 1A95  
                                  _FVRCON 0117                                    i1l9973 0914  
                                  i1l9967 090D                                    i1l9979 091C  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0263                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DEA  
                                  _WDTCON 0097                      Exception_Main@i_3630 0033  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 002F  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D18                                    _Dimmer 012C  
                                  _DlySw1 0166                          _setRF_AdjControl 1252  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C33  
              __end_of_Mcu_Initialization 1C69                       __end_of_Buzzer_Main 13DF  
                                  _Memory 01BE                          i1Division@result 0079  
                                  _Timer1 0131                                    ___bmul 1C33  
                  __end_of_Exception_Main 06D2                      Exception_Main@lights 0035  
                                  ___wmul 1E8E                       __size_ofi1_Division 000D  
                               ??___awdiv 0024                                 ??___lbdiv 0021  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D8  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CB4  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1CA1  
                                  _s_data 00D9                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 11DC                                    _myMain 00AF  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1B40  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 1489                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 006E               __end_of_Load_Initialization 1A18  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1D9E  
        __end_of_setDimmerIntr_Dimming_Sw 1D6E                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___lbdiv 1F4B                 _setDimmerLights_DimmingOn 1FD8  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1CC7               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1B70  
             __size_of_DimmerLights_TMR_1 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 0067                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1D2D               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 0047           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5417 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1F0A  
                           __end_of_getAD 1F0A                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1A2C  
                         _getSw_KeyStatus 1C10                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1AC0  
                               ?_WDT_Main 0070                         __end_of_Load_Main 02AE  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1B10                __end_of_set_TimeoutCleared 1A51  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1B04                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1A1E                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1395  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 1A24                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1A24  
                           ??_Switch_Main 0032                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CE                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 14E2  
                          _getDelayOff_GO 1BCC                       _CC2500_WriteCommand 1E04  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 159A  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0970                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1A78                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1A6A  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 1069  
      __end_of_DimmerLights_SelectPointer 1B04                _DimmerLights_SelectPointer 1AF8  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1AEC  
                                 u1201_25 1EBF                        _setRFSW_AdjControl 0A5B  
                  __end_of_setProductData 1B10                                   i1l10025 0967  
                                 i1l10017 0953                                   i1l10513 1EC4  
                                 i1l10985 0012             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1A90                                   _IOC_Set 1ACB  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 12CF  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1DD0  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1A1B                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1AD6           __end_of_setControl_Lights_Table 0A5B  
                         setRF_Main@error 00E7                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1489                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1B64  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1BFF                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BDD  
          __end_of_getDimmerLights_Status 1BBB                         __end_of_getRxData 0800  
                 __end_of_getSw_KeyStatus 1C21                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 13DF  
                                 ___lbdiv 1F4B                                   ___ftadd 0432  
                                 ___ftdiv 0C74                                   ___ftneg 1A99  
                         __size_of___wmul 001E                                   ___ftmul 0DCE  
                                 ___fttol 0B61                       __end_of_Switch_Main 1A78  
                      __end_ofi1_Division 1B7D                                   ___lwdiv 116C  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1BFF                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1310                                   __ptext2 1CC7  
                                 __ptext3 1069                                   __ptext4 0970  
                                 __ptext5 1EEA                                   __ptext6 1C69  
                                 __ptext7 0002                                   __ptext8 1A21  
                                 __ptext9 0D1D                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 1310  
               __end_of_Flash_Memory_Read 1DEA                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 0528                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1A28                  __end_of_setRF_AdjControl 128F  
                       _DimmerLights_Main 1E39            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1A57                __end_of_CC2500_ClearRXFIFO 1A40  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1A44  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EC                            _LedPointSelect 1B28  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1AEC                                   clrloop0 1A5E  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1A4C  
                    end_of_initialization 0047                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1010                             _DelayTime_1us 1FB2  
                       __end_of_setTxData 0F3D                __end_of_Flash_Memory_Write 1069  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1A57  
              __end_of_setRF_TransceiveGO 1CA1                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 1A58                                _setSw_Main 02AE  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 002D  
                       _CC2500_ReadStatus 0800                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1C45                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                      i1___lbdiv@quotient 0074                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 1795                             _CC2500_TxData 0825  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0ADB  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1800  
                           _setCmd_Status 1D9E                       _Flash_Memory_Unlock 1AA2  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 006A  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1E55  
                      _Mcu_Initialization 1C57                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1A3C                      __end_of_my_MainTimer 1351  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B34                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 006A          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1F2A  
               __end_of_CC2500_InitSetREG 103A                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 0825  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 2000                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1E04  
                    _setRF_Initialization 1AE1                        _setMemory_LoopSave 1CB4  
                             _Switch_Main 1A71                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1C10  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D03               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1BEE  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C45       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1EAC  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 1215  
                           __pbitbssBANK1 0768             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 14E2  
              __end_of_DimmerLights_IOC_1 1252                      _CC2500_FrequencyCabr 1B58  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 128F                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0970                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 004B  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1A80                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1EEA  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0DCE  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1660  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 15FB  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1A4C         __end_of_setDimmerIntr_MaxmumValue 1B1C  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016B                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0031  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A21                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D2  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0030                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1AB5                                 _Tx_Length 00D6  
                             __pdataBANK4 0220                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 10CD  
                        _CC2500_SIDLEMode 1A44                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 006B                                 ___latbits 0003  
                        _setMemory_Modify 1C7B                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E4  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 153D                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 015E  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1E71                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EC  
                          getRxData@error 00E5               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1A38                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C21  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0067  
                  _setTemp_Initialization 1A11                                 _getBuz_GO 1BEE  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 079C  
             _Flash_Memory_Initialization 06D2                                  ?___awdiv 0020  
                               __ptext100 1C21                                 __ptext101 1433  
                                ?___lbdiv 0020                                 __ptext110 1A78  
                               __ptext102 0E82                                 __ptext111 109A  
                               __ptext103 1C8E                                 __ptext120 0DCE  
                               __ptext112 1A63                                 __ptext104 16C5  
                               __ptext121 0C74                                 __ptext113 1A10  
                               __ptext105 1BBB                                 __ptext130 1101  
                               __ptext122 0432                                 __ptext114 153D  
                               __ptext106 1B10                                 __ptext131 1489  
                               __ptext123 1F6D                                 __ptext115 1C7B  
                               __ptext107 1D58                                 __ptext140 1A12  
                               __ptext132 13DF                                 __ptext124 159A  
                               __ptext116 1660                                 __ptext108 1B8C  
                               __ptext133 11A3                                 __ptext125 1B7D  
                               __ptext117 15FB                                 __ptext109 1D42  
                                ?___ftadd 0041                                 __ptext142 1EAC  
                               __ptext134 1BAA                                 __ptext126 1F4B  
                               __ptext118 0B61                                 __ptext143 0900  
                               __ptext135 1AF8                                 __ptext127 1A28  
                               __ptext119 1A99                                 __ptext144 1A90  
                               __ptext136 1A24                                 __ptext128 0891  
                               __ptext145 1215                                 __ptext137 1A51  
                               __ptext129 1B04                                 __ptext146 1B70  
                               __ptext138 1AEC                                 __ptext147 1F2A  
                               __ptext139 1395                                 _getRxData 079C  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 0041                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 12CF                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A15                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1D42  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1B9B              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1B8C                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C3                         ?_setRF_AdjControl 0070  
                               _r_address 00D7             __end_of_setDimmerLights_OnOff 1000  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 11DC              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1CDA                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                      ??_setRF_AdjControl 002D                             _SwPointSelect 1B64  
                     __end_of_setLED_Main 116C                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1A21  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1A30                           SwPointSelect@sw 0021  
                               clear_ram0 1A5D                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1310  
                               _setTxData 0E82       __end_of_DimmerLights_Initialization 1A6A  
             _DimmerLights_Initialization 1A63                    _Flash_Memory_Main$3155 0028  
                      _CC2500_ClearRXFIFO 1A3C                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1A40                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1CEE  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 103A                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1EAC  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1B4C  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C8E                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1BAA                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1E1E                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1C69                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CC  
                            setSw_Main@sw 0031                               ??_Load_Main 0065  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1B4C  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1101  
                   _DlyOff_Initialization 1A51         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1B7D  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1D86               setDimmerLights_OnOff@lights 00E4  
                _setDimmerIntr_Dimming_Sw 1D58                                  _Fosc_Set 1A34  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 09E2                        __end_of_getLoad_OK 1A80  
                   _Switch_Initialization 1A48         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 109A  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1DB7                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00D5                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3618 0021  
           _getMain_All_Error_Status$3619 0023                  __end_of_getDimmer_LoadGO 1A88  
                     _Load_Initialization 1A15          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0D1D                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1F6D  
                        ??_LedPointSelect 0020                                  ___ftpack 159A  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E6  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1136  
              __end_of_setRF_DimmerLights 172A            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1A90  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0025  
                                __ptext10 1A1E                                  __ptext11 1A11  
                                __ptext20 1D18                                  __ptext12 1A71  
                                __ptext21 1A48                                  __ptext13 02AE  
                                __ptext30 128F                                  __ptext22 1000  
                                __ptext14 1CDA                                  __ptext31 0A5B  
                                __ptext23 1A1B                                  __ptext15 1FD8  
                                __ptext40 1D03                                  __ptext32 1E1E  
                                __ptext24 0528                                  __ptext16 1C10  
                                __ptext41 1A44                                  __ptext33 1BFF  
                                __ptext25 079C                                  __ptext17 1B64  
                                __ptext50 1E04                                  __ptext42 1351  
                                __ptext34 1BEE                                  __ptext26 10CD  
                                __ptext18 1D2D                                  __ptext51 1A38  
                                __ptext43 1010                                  __ptext35 1B9B  
                                __ptext27 1CB4                                  __ptext19 1A4C  
                                __ptext60 1ACB                                  __ptext52 1CEE  
                                __ptext44 1ECB                                  __ptext36 0825  
                                __ptext28 09E2                                  __ptext61 1A34  
                                __ptext53 1DB7                                  __ptext45 1F8F  
                                __ptext37 1795                                  __ptext29 1252  
                                __ptext70 1A15                                  __ptext62 1A6A  
                                __ptext54 1A18                                  __ptext46 1B58  
                                __ptext38 0800                                  __ptext71 1E55  
                                __ptext63 004B                                  __ptext55 1AE1  
                                __ptext47 1FB2                                  __ptext39 1E71  
                                __ptext80 06D2                                  __ptext72 1A30  
                                __ptext64 1AC0                                  __ptext56 1C57  
                                __ptext48 1A40                                  __ptext81 1B34  
                                __ptext73 1136                                  __ptext65 1A88  
                                __ptext57 1AD6                                  __ptext49 1A3C  
                                __ptext90 11DC                                  __ptext82 103A  
                                __ptext74 1A2C                                  __ptext66 1A80  
                                __ptext58 1B4C                                  __ptext91 1B28  
                                __ptext83 1AA2                                  __ptext75 1C45  
                                __ptext67 1CA1                                  __ptext59 1DEA  
                                __ptext92 1D86                                  __ptext84 1DD0  
                                __ptext76 12CF                                  __ptext68 1E8E  
                                __ptext93 1B1C                                  __ptext85 05FD  
                                __ptext77 1BDD                                  __ptext69 116C  
                                __ptext94 1D6E                                  __ptext86 1AB5  
                                __ptext78 0ADB                                  __ptext95 0BE8  
                                __ptext87 1E39                                  __ptext79 1B40  
                                __ptext96 1C33                                  __ptext88 172A  
                                __ptext97 1D9E                                  __ptext89 0F3D  
                                __ptext98 1AAB                                  __ptext99 1BCC  
                                __product 0220                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1AC0  
            __end_of_setDimmerLights_Main 1795              __end_of_setDimmerLights_Line 1BCC  
                      _DimmerLights_IOC_1 1215              __end_of_setDimmerLights_SwOn 1136  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1CDA  
      __size_of_DimmerIntr_Initialization 005D                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 0900                  __end_of_CC2500_SIDLEMode 1A48  
              setDimmerLights_Main@lights 00E5               __end_of_DelayOffPointSelect 1AF8  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1E71  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1ECB  
                __end_of_setMemory_Modify 1C8E                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 05FD                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E4  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1D03  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6477 0022  
                                main@argc 00E8                                  main@argv 00EA  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6474 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1351  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1B28                _setDimmerIntr_DimmingValue 1B1C  
             __end_of_Flash_Memory_Modify 0B61              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 10CD               __end_of_Flash_Memory_Unlock 1AAB  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1F8F  
                      __end_of_setSw_Main 0432                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0029                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1A11   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1A10                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A18  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1B40  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D3  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1A28                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A2C                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0BE8  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1B70  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FD8  
                 __end_of_CC2500_ReadByte 1E8E              __end_of_setSw_Initialization 1010  
                         _Timeout_Counter 1D18           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1B9B  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1A30  
          __end_of_setTemp_Initialization 1A12                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1A1B  
               __size_of_setRF_AdjControl 003D                     __end_of_CC2500_RxData 1800  
                   __end_of_CC2500_TxData 0891                     _setLoad_AH_AL_Restore 1E55  
                 __end_of_CC2500_PowerRST 1395  
