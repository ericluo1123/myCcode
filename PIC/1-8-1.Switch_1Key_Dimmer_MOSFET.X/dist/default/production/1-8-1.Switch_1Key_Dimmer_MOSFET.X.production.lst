

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 02 16:34:51 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1FE0                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1FE0  3463               	retlw	99
  2172  1FE1  3402               	retlw	2
  2173  1FE2  3400               	retlw	0
  2174  1FE3  3400               	retlw	0
  2175  1FE4  3400               	retlw	0
  2176  1FE5  3400               	retlw	0
  2177  1FE6  3400               	retlw	0
  2178  1FE7  3400               	retlw	0
  2179  1FE8  3400               	retlw	0
  2180  1FE9  3400               	retlw	0
  2181  1FEA  3400               	retlw	0
  2182  1FEB  3400               	retlw	0
  2183  1FEC  34FF               	retlw	255
  2184  1FED  34FF               	retlw	255
  2185  1FEE  34FF               	retlw	255
  2186  1FEF  3400               	retlw	0
  2187  1FF0  3400               	retlw	0
  2188  1FF1  3400               	retlw	0
  2189  1FF2  3400               	retlw	0
  2190  1FF3  3400               	retlw	0
  2191  1FF4  3400               	retlw	0
  2192  1FF5  3400               	retlw	0
  2193  1FF6  3400               	retlw	0
  2194  1FF7  3400               	retlw	0
  2195  1FF8  3400               	retlw	0
  2196  1FF9  3400               	retlw	0
  2197  1FFA  3400               	retlw	0
  2198  1FFB  3400               	retlw	0
  2199  1FFC  3400               	retlw	0
  2200  1FFD  3400               	retlw	0
  2201  1FFE  3400               	retlw	0
  2202  1FFF  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00E3                     __pnvBANK1:	
  2317  00E3                     _product:	
  2318  00E3                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0073                     _RC3	set	115
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  0396                     _IOCBF	set	918
  2375  0395                     _IOCBN	set	917
  2376  0394                     _IOCBP	set	916
  2377  1CB2                     _IOCBF2	set	7346
  2378                           
  2379                           ; #config settings
  2380  0000                     
  2381                           	psect	cinit
  2382  0021                     start_initialization:	
  2383  0021                     __initialization:	
  2384                           
  2385                           ; Clear objects allocated to BITCOMMON
  2386  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BITBANK1
  2389  0022  0021               	movlb	1	; select bank1
  2390  0023  01E4               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  0024  30A0               	movlw	low __pbssBANK1
  2394  0025  0084               	movwf	4
  2395  0026  3000               	movlw	high __pbssBANK1
  2396  0027  0085               	movwf	5
  2397  0028  303B               	movlw	59
  2398  0029  319B  233A  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  002C  3020               	movlw	low __pbssBANK2
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK2
  2404  002F  0085               	movwf	5
  2405  0030  304F               	movlw	79
  2406  0031  319B  233A  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  0034  30A0               	movlw	low __pbssBANK3
  2410  0035  0084               	movwf	4
  2411  0036  3001               	movlw	high __pbssBANK3
  2412  0037  0085               	movwf	5
  2413  0038  302F               	movlw	47
  2414  0039  319B  233A  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK4
  2417  003C  3020               	movlw	low __pbssBANK4
  2418  003D  0084               	movwf	4
  2419  003E  3002               	movlw	high __pbssBANK4
  2420  003F  0085               	movwf	5
  2421  0040  3025               	movlw	37
  2422  0041  319B  233A  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Initialize objects allocated to BANK4
  2425  0044  30E0               	movlw	low __pidataBANK4
  2426  0045  0084               	movwf	4
  2427  0046  309F               	movlw	(high __pidataBANK4)| (0+128)
  2428  0047  0085               	movwf	5
  2429  0048  3045               	movlw	low __pdataBANK4
  2430  0049  0086               	movwf	6
  2431  004A  3002               	movlw	high __pdataBANK4
  2432  004B  0087               	movwf	7
  2433  004C  3020               	movlw	32
  2434  004D  319B  2334         	fcall	init_ram
  2435  004F                     end_of_initialization:	
  2436                           ;End of C runtime variable initialization code
  2437                           
  2438  004F                     __end_of__initialization:	
  2439  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2440  0050  0020               	movlb	0
  2441  0051  3195  2D4A         	ljmp	_main	;jump to C main() function
  2442                           
  2443                           	psect	bitbssCOMMON
  2444  03E8                     __pbitbssCOMMON:	
  2445  03E8                     _Transceive_OK:	
  2446  03E8                     	ds	1
  2447                           
  2448                           	psect	bitbssBANK1
  2449  0720                     __pbitbssBANK1:	
  2450  0720                     _Receive_OK:	
  2451  0720                     	ds	1
  2452                           
  2453                           	psect	bssBANK1
  2454  00A0                     __pbssBANK1:	
  2455  00A0                     _RF1:	
  2456  00A0                     	ds	14
  2457  00AE                     _myMain:	
  2458  00AE                     	ds	13
  2459  00BB                     _DimmerIntr1:	
  2460  00BB                     	ds	12
  2461  00C7                     _CRC:	
  2462  00C7                     	ds	1
  2463  00C8                     _Cmd:	
  2464  00C8                     	ds	1
  2465  00C9                     _DelayOff:	
  2466  00C9                     	ds	1
  2467  00CA                     _DimmerLights:	
  2468  00CA                     	ds	1
  2469  00CB                     _LED:	
  2470  00CB                     	ds	1
  2471  00CC                     _Rx_Length:	
  2472  00CC                     	ds	1
  2473  00CD                     _SPI0Buffer:	
  2474  00CD                     	ds	1
  2475  00CE                     _Sw:	
  2476  00CE                     	ds	1
  2477  00CF                     _Tx_Length:	
  2478  00CF                     	ds	1
  2479  00D0                     _s_data:	
  2480  00D0                     	ds	1
  2481  00D1                     _Temp:	
  2482  00D1                     	ds	10
  2483                           
  2484                           	psect	bssBANK2
  2485  0120                     __pbssBANK2:	
  2486  0120                     _Buz1:	
  2487  0120                     	ds	12
  2488  012C                     _Dimmer:	
  2489  012C                     	ds	5
  2490  0131                     _Timer1:	
  2491  0131                     	ds	3
  2492  0134                     _RF_Count:	
  2493  0134                     	ds	2
  2494  0136                     _WDT:	
  2495  0136                     	ds	2
  2496  0138                     _DimmerIntr:	
  2497  0138                     	ds	1
  2498  0139                     _Light:	
  2499  0139                     	ds	1
  2500  013A                     _RSSI:	
  2501  013A                     	ds	1
  2502  013B                     _SwDetect:	
  2503  013B                     	ds	1
  2504  013C                     _r_address:	
  2505  013C                     	ds	1
  2506  013D                     _r_data:	
  2507  013D                     	ds	1
  2508  013E                     _Load:	
  2509  013E                     	ds	40
  2510  0166                     _DlySw1:	
  2511  0166                     	ds	5
  2512  016B                     _VarErrLED:	
  2513  016B                     	ds	4
  2514                           
  2515                           	psect	bssBANK3
  2516  01A0                     __pbssBANK3:	
  2517  01A0                     _RF_Data:	
  2518  01A0                     	ds	30
  2519  01BE                     _Sw1:	
  2520  01BE                     	ds	9
  2521  01C7                     _DimmerLights1:	
  2522  01C7                     	ds	8
  2523                           
  2524                           	psect	bssBANK4
  2525  0220                     __pbssBANK4:	
  2526  0220                     _Memory:	
  2527  0220                     	ds	37
  2528                           
  2529                           	psect	dataBANK4
  2530  0245                     __pdataBANK4:	
  2531  0245                     __product:	
  2532  0245                     	ds	32
  2533                           
  2534                           	psect	clrtext
  2535  1B3A                     clear_ram0:	
  2536                           ;	Called with FSR0 containing the base address, and
  2537                           ;	WREG with the size to clear
  2538                           
  2539  1B3A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2540  1B3B                     clrloop0:	
  2541  1B3B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2542  1B3C  3101               	addfsr 0,1
  2543  1B3D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2544  1B3E  2B3B               	goto	clrloop0	;have we reached the end yet?
  2545  1B3F  3400               	retlw	0	;all done for this memory range, return
  2546                           
  2547                           	psect	inittext
  2548  1B34                     init_ram:	
  2549  1B34  00FE               	movwf	126
  2550  1B35                     initloop:	
  2551  1B35  0012               	moviw fsr0++
  2552  1B36  001E               	movwi fsr1++
  2553  1B37  0BFE               	decfsz	126,f
  2554  1B38  2B35               	goto	initloop
  2555  1B39  3400               	retlw	0
  2556                           
  2557                           	psect	cstackBANK1
  2558  00DB                     __pcstackBANK1:	
  2559  00DB                     ??_getRxData:	
  2560  00DB                     setDimmerLights_OnOff@lights:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563                           
  2564                           ; 1 bytes @ 0x0
  2565  00DB                     	ds	1
  2566  00DC                     setDimmerLights_Main@lights:	
  2567  00DC                     getRxData@error:	
  2568                           ; 1 bytes @ 0x1
  2569                           
  2570                           
  2571                           ; 1 bytes @ 0x1
  2572  00DC                     	ds	1
  2573  00DD                     ??_setRF_Main:	
  2574                           
  2575                           ; 0 bytes @ 0x2
  2576  00DD                     	ds	1
  2577  00DE                     setRF_Main@error:	
  2578                           
  2579                           ; 1 bytes @ 0x3
  2580  00DE                     	ds	1
  2581  00DF                     ?_main:	
  2582  00DF                     main@argc:	
  2583                           ; 2 bytes @ 0x4
  2584                           
  2585                           
  2586                           ; 2 bytes @ 0x4
  2587  00DF                     	ds	2
  2588  00E1                     main@argv:	
  2589                           
  2590                           ; 2 bytes @ 0x6
  2591  00E1                     	ds	2
  2592                           
  2593                           	psect	cstackCOMMON
  2594  0070                     __pcstackCOMMON:	
  2595  0070                     ?_CC2500_WriteCommand:	
  2596  0070                     ?_RF_Timeout_Counter:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setRF_TimeoutCleared:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_WriteByte:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_ReadStatus:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadByte:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_PowerRST:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_InitSetREG:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitPATable:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ClearTXFIFO:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearRXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_FrequencyCabr:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_SIDLEMode:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DlyOff_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_SwOn:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_SwOff:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setMemory_Modify:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Line:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setTxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setRF_TransceiveGO:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setLED_Initialization:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setLED_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Fosc_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_IO_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_TMR1_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_ADC_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_IOC_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_WDT_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR1_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_IOC_ISR:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Timeout_Counter:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_set_TimeoutCleared:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Flash_Memory_Write:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Flash_Memory_Modify:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_WDT_Clearing:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_myMain_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Temp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Load_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Switch_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_RF_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_getLoad_AD:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getTemp_AD:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_my_MainTimer:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Temp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Switch_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Exception_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLoad_AH_AL_Restore:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setTemp_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setTemp_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_RF_RxDisable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getRxData:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLog_Code:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setControl_Lights_Table:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_Control:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_AdjControl:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setSw_Initialization:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Main:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_Buzzer_Initialization:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_Buzzer_Main:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_CC2500_TxData:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_RxData:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_PowerOnInitial:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DelayOffPointSelect:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOff_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOff_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerIntr_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerLights_SelectPointer:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DimmerLights_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_DimmingOn:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerLights_Main:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_TMR_1:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ??_DimmerLights_TMR_1:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerLights_IOC_1:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_LedPointSelect:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_LED_Initialization:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_LED_Main:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_Mcu_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_ISR:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Flash_Memory_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Flash_Memory_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Flash_Memory_Unlock:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Flash_Memory_Erasing:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_setMemory_LoopSave:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_WDT_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setRF_Learn:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_TouchPower:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_SwPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_getDimmerLights_Status:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_getDimmerLights_ValueToPercent:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_getDimmerLights_PercentToValue:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getLoad_OK:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getMain_All_Error_Status:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getMain_All_LightsStatus:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Allow_Condition:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getCmd_Status:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_Flash_Memory_Read:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getAll_Sw_KeyStatus:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getRF_KeyStatus:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getSw_KeyStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getDelayOff_GO:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDimmerIntr_DimmingValue:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getDimmerLights_Line:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDimmer_LoadGO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmer_Load_Status:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getMain_Lights_Count:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?i1___lbdiv:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     setDimmerLights_Initialization@lights:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     getDimmerLights_Allow_Condition@lights:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     getSw_KeyStatus@sw:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     i1___lbdiv@divisor:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0x0
  2949  0070                     	ds	1
  2950  0071                     ??_TMR1_ISR:	
  2951  0071                     ??i1___lbdiv:	
  2952                           ; 0 bytes @ 0x1
  2953                           
  2954                           
  2955                           ; 0 bytes @ 0x1
  2956  0071                     	ds	1
  2957  0072                     i1___lbdiv@dividend:	
  2958                           
  2959                           ; 1 bytes @ 0x2
  2960  0072                     	ds	1
  2961  0073                     i1___lbdiv@counter:	
  2962                           
  2963                           ; 1 bytes @ 0x3
  2964  0073                     	ds	1
  2965  0074                     i1___lbdiv@quotient:	
  2966                           
  2967                           ; 1 bytes @ 0x4
  2968  0074                     	ds	1
  2969  0075                     ?i1_Division:	
  2970  0075                     i1Division@num:	
  2971                           ; 1 bytes @ 0x5
  2972                           
  2973                           
  2974                           ; 1 bytes @ 0x5
  2975  0075                     	ds	1
  2976  0076                     ??i1_Division:	
  2977                           
  2978                           ; 0 bytes @ 0x6
  2979  0076                     	ds	2
  2980  0078                     i1Division@value:	
  2981                           
  2982                           ; 1 bytes @ 0x8
  2983  0078                     	ds	1
  2984  0079                     i1Division@result:	
  2985                           
  2986                           ; 1 bytes @ 0x9
  2987  0079                     	ds	1
  2988  007A                     ??_DimmerLights_IOC_1:	
  2989                           
  2990                           ; 0 bytes @ 0xA
  2991  007A                     	ds	2
  2992  007C                     ??_IOC_ISR:	
  2993  007C                     ??_ISR:	
  2994                           ; 0 bytes @ 0xC
  2995                           
  2996                           
  2997                           ; 0 bytes @ 0xC
  2998  007C                     	ds	1
  2999                           
  3000                           	psect	cstackBANK0
  3001  0020                     __pcstackBANK0:	
  3002  0020                     ??_RF_Timeout_Counter:	
  3003  0020                     ??_setRF_TimeoutCleared:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_CC2500_WriteByte:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_CC2500_ReadByte:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ?_DelayTime_1us:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_setMemory_Modify:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_setDimmerLights_Initialization:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_getLoad_OK:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_getMain_All_Error_Status:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_getMain_All_LightsStatus:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_setDimmerLights_Line:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_getCmd_Status:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ?_setCmd_Status:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_setTxData:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_setRF_TransceiveGO:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_Fosc_Set:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_IO_Set:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_TMR1_Set:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_ADC_Set:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_IOC_Set:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_WDT_Set:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_Timeout_Counter:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_set_TimeoutCleared:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_Flash_Memory_Read:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ?_setMemory_Data:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_Flash_Memory_Write:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_getAll_Sw_KeyStatus:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_WDT_Clearing:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_myMain_Initialization:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_Temp_Initialization:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_setLoad_AH_AL_Restore:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_setTemp_Initialization:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_setRF_Initialization:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_getRF_KeyStatus:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_getSw_KeyStatus:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_Buzzer_Initialization:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_Buzzer_Main:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_DelayOffPointSelect:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ?_setDimmerIntr_ControlStatus:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getDimmerIntr_DimmingValue:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ?_setDimmerIntr_Dimming_RF:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_DimmerLights_SelectPointer:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_getDimmerLights_Line:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_getDimmer_LoadGO:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_getDimmer_Load_Status:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ??_LedPointSelect:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ??_Flash_Memory_Unlock:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_Flash_Memory_Erasing:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_setMemory_LoopSave:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_WDT_Main:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_getMain_Lights_Count:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_setRF_Learn:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_TouchPower:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_SwPointSelect:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ?___bmul:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ?___lbdiv:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     ?_getBuz_GO:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     ?_getAD:	
  3178                           ; 2 bytes @ 0x0
  3179                           
  3180  0020                     ?___wmul:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183  0020                     ?___awdiv:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     ?___lwdiv:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ?___ftpack:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192  0020                     setDimmerIntr_ControlStatus@command:	
  3193                           ; 3 bytes @ 0x0
  3194                           
  3195  0020                     setDimmerIntr_Dimming_Sw@command:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0020                     setDimmerIntr_Dimming_RF@command:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0020                     setDimmerLights_Line@lights:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0020                     getDimmerLights_Line@line:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0020                     getDimmer_LoadGO@loadgo:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0020                     getDimmer_Load_Status@status:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     getAD@adcon1:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0020                     setMemory_Data@data:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0020                     getMain_All_LightsStatus@status:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0020                     getMain_Lights_Count@count:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0020                     setCmd_Status@cmd:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     getCmd_Status@number:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     getLoad_OK@ok:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     ___bmul@multiplicand:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     ___lbdiv@divisor:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     DelayTime_1us@count:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     ___wmul@multiplier:	
  3247                           ; 2 bytes @ 0x0
  3248                           
  3249  0020                     ___awdiv@divisor:	
  3250                           ; 2 bytes @ 0x0
  3251                           
  3252  0020                     ___lwdiv@divisor:	
  3253                           ; 2 bytes @ 0x0
  3254                           
  3255  0020                     ___ftpack@arg:	
  3256                           ; 2 bytes @ 0x0
  3257                           
  3258                           
  3259                           ; 3 bytes @ 0x0
  3260  0020                     	ds	1
  3261  0021                     ??_getDimmerLights_Allow_Condition:	
  3262  0021                     ??_setCmd_Status:	
  3263                           ; 0 bytes @ 0x1
  3264                           
  3265  0021                     ??_setMemory_Data:	
  3266                           ; 0 bytes @ 0x1
  3267                           
  3268  0021                     ??_RF_Initialization:	
  3269                           ; 0 bytes @ 0x1
  3270                           
  3271  0021                     ??_setDimmerIntr_ControlStatus:	
  3272                           ; 0 bytes @ 0x1
  3273                           
  3274  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3275                           ; 0 bytes @ 0x1
  3276                           
  3277  0021                     ??_setDimmerIntr_Dimming_RF:	
  3278                           ; 0 bytes @ 0x1
  3279                           
  3280  0021                     ??_Mcu_Initialization:	
  3281                           ; 0 bytes @ 0x1
  3282                           
  3283  0021                     ??___bmul:	
  3284                           ; 0 bytes @ 0x1
  3285                           
  3286  0021                     ??___lbdiv:	
  3287                           ; 0 bytes @ 0x1
  3288                           
  3289  0021                     CC2500_WriteByte@loop_a:	
  3290                           ; 0 bytes @ 0x1
  3291                           
  3292  0021                     CC2500_ReadByte@loop_b:	
  3293                           ; 1 bytes @ 0x1
  3294                           
  3295  0021                     DelayOffPointSelect@sw:	
  3296                           ; 1 bytes @ 0x1
  3297                           
  3298  0021                     getDimmerIntr_DimmingValue@lights:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     DimmerLights_SelectPointer@lights:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     LedPointSelect@led:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     Flash_Memory_Read@i:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     Flash_Memory_Write@i:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     setMemory_Modify@command:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     setMemory_LoopSave@command:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0021                     getMain_Lights_Count@status1:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0021                     getCmd_Status@cmd:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0021                     setLoad_AH_AL_Restore@i:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328  0021                     setRF_Learn@command:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     getRF_KeyStatus@key:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     setRF_TransceiveGO@command:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     SwPointSelect@sw:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     getSw_KeyStatus@status:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     getAll_Sw_KeyStatus@status:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     _getMain_All_Error_Status$3582:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349                           
  3350                           ; 2 bytes @ 0x1
  3351  0021                     	ds	1
  3352  0022                     ??_CC2500_WriteCommand:	
  3353  0022                     ??_CC2500_ReadStatus:	
  3354                           ; 0 bytes @ 0x2
  3355                           
  3356  0022                     ??_DelayTime_1us:	
  3357                           ; 0 bytes @ 0x2
  3358                           
  3359  0022                     ?_CC2500_WriteREG:	
  3360                           ; 0 bytes @ 0x2
  3361                           
  3362  0022                     ??_DlyOff_Initialization:	
  3363                           ; 0 bytes @ 0x2
  3364                           
  3365  0022                     ??_getDimmerLights_Status:	
  3366                           ; 0 bytes @ 0x2
  3367                           
  3368  0022                     ??_setDimmerLights_SwOff:	
  3369                           ; 0 bytes @ 0x2
  3370                           
  3371  0022                     ?_setLED:	
  3372                           ; 0 bytes @ 0x2
  3373                           
  3374  0022                     ??_setLED_Main:	
  3375                           ; 0 bytes @ 0x2
  3376                           
  3377  0022                     ??_Load_Initialization:	
  3378                           ; 0 bytes @ 0x2
  3379                           
  3380  0022                     ??_getBuz_GO:	
  3381                           ; 0 bytes @ 0x2
  3382                           
  3383  0022                     ??_getDelayOff_GO:	
  3384                           ; 0 bytes @ 0x2
  3385                           
  3386  0022                     ??_setDimmerLights_DimmingOn:	
  3387                           ; 0 bytes @ 0x2
  3388                           
  3389  0022                     ?_setDimmerLights_DimmingRun:	
  3390                           ; 0 bytes @ 0x2
  3391                           
  3392  0022                     CC2500_WriteREG@value:	
  3393                           ; 0 bytes @ 0x2
  3394                           
  3395  0022                     DlyOff_Initialization@sw:	
  3396                           ; 1 bytes @ 0x2
  3397                           
  3398  0022                     getDelayOff_GO@sw:	
  3399                           ; 1 bytes @ 0x2
  3400                           
  3401  0022                     setDimmerIntr_ControlStatus@lights:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0022                     getDimmerIntr_DimmingValue@value:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     setDimmerIntr_Dimming_RF@lights:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0022                     setDimmerLights_SwOff@sw:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     setDimmerLights_DimmingOn@sw:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     getDimmerLights_Allow_Condition@allow:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     getDimmerLights_Status@lights:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     setDimmerLights_DimmingRun@command:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0022                     setLED@command:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0022                     Flash_Memory_Read@address:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0022                     setMemory_Data@address:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0022                     setCmd_Status@number:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0022                     _getRF_KeyStatus$5352:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     _getSw_KeyStatus$6390:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     _getAll_Sw_KeyStatus$6393:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     ___bmul@product:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     ___lbdiv@dividend:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     DelayTime_1us@i:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     ___wmul@multiplicand:	
  3459                           ; 2 bytes @ 0x2
  3460                           
  3461  0022                     ___awdiv@dividend:	
  3462                           ; 2 bytes @ 0x2
  3463                           
  3464  0022                     ___lwdiv@dividend:	
  3465                           ; 2 bytes @ 0x2
  3466                           
  3467                           
  3468                           ; 2 bytes @ 0x2
  3469  0022                     	ds	1
  3470  0023                     ??_CC2500_WriteREG:	
  3471  0023                     ??_setLED:	
  3472                           ; 0 bytes @ 0x3
  3473                           
  3474  0023                     ??_DelayOff_Initialization:	
  3475                           ; 0 bytes @ 0x3
  3476                           
  3477  0023                     ??_setDimmerLights_DimmingRun:	
  3478                           ; 0 bytes @ 0x3
  3479                           
  3480  0023                     ??_getAD:	
  3481                           ; 0 bytes @ 0x3
  3482                           
  3483  0023                     CC2500_WriteCommand@command:	
  3484                           ; 0 bytes @ 0x3
  3485                           
  3486  0023                     CC2500_ReadStatus@status_addr:	
  3487                           ; 1 bytes @ 0x3
  3488                           
  3489  0023                     getDelayOff_GO@go:	
  3490                           ; 1 bytes @ 0x3
  3491                           
  3492  0023                     _getDimmerLights_Allow_Condition$2263:	
  3493                           ; 1 bytes @ 0x3
  3494                           
  3495  0023                     getDimmerLights_Status@status:	
  3496                           ; 1 bytes @ 0x3
  3497                           
  3498  0023                     setLED@led:	
  3499                           ; 1 bytes @ 0x3
  3500                           
  3501  0023                     getAD@adcon0:	
  3502                           ; 1 bytes @ 0x3
  3503                           
  3504  0023                     Flash_Memory_Read@ret:	
  3505                           ; 1 bytes @ 0x3
  3506                           
  3507  0023                     ___bmul@multiplier:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     ___ftpack@exp:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     ___lbdiv@counter:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     _getMain_All_Error_Status$3583:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519                           
  3520                           ; 2 bytes @ 0x3
  3521  0023                     	ds	1
  3522  0024                     ??_CC2500_ClearTXFIFO:	
  3523  0024                     ??_CC2500_ClearRXFIFO:	
  3524                           ; 0 bytes @ 0x4
  3525                           
  3526  0024                     ??_CC2500_SIDLEMode:	
  3527                           ; 0 bytes @ 0x4
  3528                           
  3529  0024                     ??_setLED_Initialization:	
  3530                           ; 0 bytes @ 0x4
  3531                           
  3532  0024                     ??_Flash_Memory_Modify:	
  3533                           ; 0 bytes @ 0x4
  3534                           
  3535  0024                     ??_getLoad_AD:	
  3536                           ; 0 bytes @ 0x4
  3537                           
  3538  0024                     ??_getTemp_AD:	
  3539                           ; 0 bytes @ 0x4
  3540                           
  3541  0024                     ??_RF_RxDisable:	
  3542                           ; 0 bytes @ 0x4
  3543                           
  3544  0024                     ??_setSw_Initialization:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_CC2500_TxData:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     ??_CC2500_RxData:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     ??_Flash_Memory_Initialization:	
  3554                           ; 0 bytes @ 0x4
  3555                           
  3556  0024                     ??___wmul:	
  3557                           ; 0 bytes @ 0x4
  3558                           
  3559  0024                     ??___awdiv:	
  3560                           ; 0 bytes @ 0x4
  3561                           
  3562  0024                     ??___lwdiv:	
  3563                           ; 0 bytes @ 0x4
  3564                           
  3565  0024                     CC2500_WriteREG@w_addr:	
  3566                           ; 0 bytes @ 0x4
  3567                           
  3568  0024                     setDimmerLights_DimmingRun@lights:	
  3569                           ; 1 bytes @ 0x4
  3570                           
  3571  0024                     setLED_Initialization@led:	
  3572                           ; 1 bytes @ 0x4
  3573                           
  3574  0024                     setLED_Main@led:	
  3575                           ; 1 bytes @ 0x4
  3576                           
  3577  0024                     setSw_Initialization@sw:	
  3578                           ; 1 bytes @ 0x4
  3579                           
  3580  0024                     ___ftpack@sign:	
  3581                           ; 1 bytes @ 0x4
  3582                           
  3583  0024                     ___lbdiv@quotient:	
  3584                           ; 1 bytes @ 0x4
  3585                           
  3586  0024                     getBuz_GO@i:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589  0024                     DelayTime_1us@j:	
  3590                           ; 2 bytes @ 0x4
  3591                           
  3592  0024                     ___wmul@product:	
  3593                           ; 2 bytes @ 0x4
  3594                           
  3595                           
  3596                           ; 2 bytes @ 0x4
  3597  0024                     	ds	1
  3598  0025                     ??_CC2500_InitSetREG:	
  3599  0025                     ??_CC2500_InitPATable:	
  3600                           ; 0 bytes @ 0x5
  3601                           
  3602  0025                     ??_Switch_Initialization:	
  3603                           ; 0 bytes @ 0x5
  3604                           
  3605  0025                     ??___ftpack:	
  3606                           ; 0 bytes @ 0x5
  3607                           
  3608  0025                     ??_LED_Initialization:	
  3609                           ; 0 bytes @ 0x5
  3610                           
  3611  0025                     ??_LED_Main:	
  3612                           ; 0 bytes @ 0x5
  3613                           
  3614  0025                     ?_Division:	
  3615                           ; 0 bytes @ 0x5
  3616                           
  3617  0025                     CC2500_TxData@loop_e:	
  3618                           ; 1 bytes @ 0x5
  3619                           
  3620  0025                     CC2500_RxData@loop_f:	
  3621                           ; 1 bytes @ 0x5
  3622                           
  3623  0025                     Division@num:	
  3624                           ; 1 bytes @ 0x5
  3625                           
  3626  0025                     Flash_Memory_Initialization@value:	
  3627                           ; 1 bytes @ 0x5
  3628                           
  3629  0025                     Flash_Memory_Modify@i:	
  3630                           ; 1 bytes @ 0x5
  3631                           
  3632  0025                     getMain_All_Error_Status@command:	
  3633                           ; 1 bytes @ 0x5
  3634                           
  3635  0025                     getTemp_AD@channel:	
  3636                           ; 1 bytes @ 0x5
  3637                           
  3638  0025                     ___awdiv@counter:	
  3639                           ; 1 bytes @ 0x5
  3640                           
  3641  0025                     ___lwdiv@quotient:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644                           
  3645                           ; 2 bytes @ 0x5
  3646  0025                     	ds	1
  3647  0026                     ??_CC2500_PowerRST:	
  3648  0026                     ??_CC2500_FrequencyCabr:	
  3649                           ; 0 bytes @ 0x6
  3650                           
  3651  0026                     ??_Division:	
  3652                           ; 0 bytes @ 0x6
  3653                           
  3654  0026                     ??_Flash_Memory_Main:	
  3655                           ; 0 bytes @ 0x6
  3656                           
  3657  0026                     CC2500_InitSetREG@temp1:	
  3658                           ; 0 bytes @ 0x6
  3659                           
  3660  0026                     CC2500_InitPATable@temp:	
  3661                           ; 1 bytes @ 0x6
  3662                           
  3663  0026                     getMain_All_Error_Status@status:	
  3664                           ; 1 bytes @ 0x6
  3665                           
  3666  0026                     getLoad_AD@channel:	
  3667                           ; 1 bytes @ 0x6
  3668                           
  3669  0026                     ___awdiv@sign:	
  3670                           ; 1 bytes @ 0x6
  3671                           
  3672  0026                     getTemp_AD@ADRES:	
  3673                           ; 1 bytes @ 0x6
  3674                           
  3675                           
  3676                           ; 2 bytes @ 0x6
  3677  0026                     	ds	1
  3678  0027                     CC2500_InitSetREG@temp2:	
  3679  0027                     CC2500_InitPATable@loop_d:	
  3680                           ; 1 bytes @ 0x7
  3681                           
  3682  0027                     Flash_Memory_Main@key_Status:	
  3683                           ; 1 bytes @ 0x7
  3684                           
  3685  0027                     getLoad_AD@k:	
  3686                           ; 1 bytes @ 0x7
  3687                           
  3688  0027                     ___lwdiv@counter:	
  3689                           ; 1 bytes @ 0x7
  3690                           
  3691  0027                     ___awdiv@quotient:	
  3692                           ; 1 bytes @ 0x7
  3693                           
  3694                           
  3695                           ; 2 bytes @ 0x7
  3696  0027                     	ds	1
  3697  0028                     ??_Load_Main:	
  3698  0028                     ?___awtoft:	
  3699                           ; 0 bytes @ 0x8
  3700                           
  3701  0028                     CC2500_InitSetREG@loop_c:	
  3702                           ; 3 bytes @ 0x8
  3703                           
  3704  0028                     Division@value:	
  3705                           ; 1 bytes @ 0x8
  3706                           
  3707  0028                     _Flash_Memory_Main$3125:	
  3708                           ; 1 bytes @ 0x8
  3709                           
  3710  0028                     getLoad_AD@j:	
  3711                           ; 1 bytes @ 0x8
  3712                           
  3713  0028                     ___awtoft@c:	
  3714                           ; 1 bytes @ 0x8
  3715                           
  3716                           
  3717                           ; 2 bytes @ 0x8
  3718  0028                     	ds	1
  3719  0029                     ?_setBuz:	
  3720  0029                     ??_CC2500_PowerOnInitial:	
  3721                           ; 0 bytes @ 0x9
  3722                           
  3723  0029                     Division@result:	
  3724                           ; 0 bytes @ 0x9
  3725                           
  3726  0029                     setBuz@time:	
  3727                           ; 1 bytes @ 0x9
  3728                           
  3729  0029                     getLoad_AD@ADRES:	
  3730                           ; 2 bytes @ 0x9
  3731                           
  3732                           
  3733                           ; 2 bytes @ 0x9
  3734  0029                     	ds	1
  3735  002A                     Load_Main@error:	
  3736                           
  3737                           ; 1 bytes @ 0xA
  3738  002A                     	ds	1
  3739  002B                     ??_setBuz:	
  3740  002B                     ??___awtoft:	
  3741                           ; 0 bytes @ 0xB
  3742                           
  3743  002B                     getLoad_AD@i:	
  3744                           ; 0 bytes @ 0xB
  3745                           
  3746  002B                     _Load_Main$3954:	
  3747                           ; 1 bytes @ 0xB
  3748                           
  3749                           
  3750                           ; 2 bytes @ 0xB
  3751  002B                     	ds	1
  3752  002C                     setBuz@count:	
  3753                           
  3754                           ; 1 bytes @ 0xC
  3755  002C                     	ds	1
  3756  002D                     ??_setDimmerLights_SwOn:	
  3757  002D                     ??_my_MainTimer:	
  3758                           ; 0 bytes @ 0xD
  3759                           
  3760  002D                     ??_Exception_Main:	
  3761                           ; 0 bytes @ 0xD
  3762                           
  3763  002D                     setDimmerLights_SwOn@sw:	
  3764                           ; 0 bytes @ 0xD
  3765                           
  3766  002D                     Load_Main@ErrorCountValue:	
  3767                           ; 1 bytes @ 0xD
  3768                           
  3769  002D                     ___awtoft@sign:	
  3770                           ; 1 bytes @ 0xD
  3771                           
  3772                           
  3773                           ; 1 bytes @ 0xD
  3774  002D                     	ds	1
  3775  002E                     ?___ftdiv:	
  3776  002E                     ?___ftmul:	
  3777                           ; 3 bytes @ 0xE
  3778                           
  3779  002E                     setDimmerLights_SwOn@idle:	
  3780                           ; 3 bytes @ 0xE
  3781                           
  3782  002E                     Exception_Main@status:	
  3783                           ; 1 bytes @ 0xE
  3784                           
  3785  002E                     Load_Main@Load_RunStatus:	
  3786                           ; 1 bytes @ 0xE
  3787                           
  3788  002E                     ___ftdiv@f2:	
  3789                           ; 1 bytes @ 0xE
  3790                           
  3791  002E                     ___ftmul@f1:	
  3792                           ; 3 bytes @ 0xE
  3793                           
  3794                           
  3795                           ; 3 bytes @ 0xE
  3796  002E                     	ds	1
  3797  002F                     ??_setSw_Main:	
  3798  002F                     Exception_Main@count:	
  3799                           ; 0 bytes @ 0xF
  3800                           
  3801  002F                     Load_Main@LightsCount:	
  3802                           ; 1 bytes @ 0xF
  3803                           
  3804                           
  3805                           ; 1 bytes @ 0xF
  3806  002F                     	ds	1
  3807  0030                     Exception_Main@error:	
  3808  0030                     Load_Main@i:	
  3809                           ; 1 bytes @ 0x10
  3810                           
  3811                           
  3812                           ; 2 bytes @ 0x10
  3813  0030                     	ds	1
  3814  0031                     setSw_Main@sw:	
  3815  0031                     Exception_Main@i:	
  3816                           ; 1 bytes @ 0x11
  3817                           
  3818  0031                     ___ftdiv@f1:	
  3819                           ; 2 bytes @ 0x11
  3820                           
  3821  0031                     ___ftmul@f2:	
  3822                           ; 3 bytes @ 0x11
  3823                           
  3824                           
  3825                           ; 3 bytes @ 0x11
  3826  0031                     	ds	1
  3827  0032                     ??_Switch_Main:	
  3828                           
  3829                           ; 0 bytes @ 0x12
  3830  0032                     	ds	1
  3831  0033                     Exception_Main@i_3594:	
  3832                           
  3833                           ; 2 bytes @ 0x13
  3834  0033                     	ds	1
  3835  0034                     ??___ftdiv:	
  3836  0034                     ??___ftmul:	
  3837                           ; 0 bytes @ 0x14
  3838                           
  3839                           
  3840                           ; 0 bytes @ 0x14
  3841  0034                     	ds	1
  3842  0035                     Exception_Main@lights:	
  3843                           
  3844                           ; 1 bytes @ 0x15
  3845  0035                     	ds	3
  3846  0038                     ___ftdiv@cntr:	
  3847  0038                     ___ftmul@exp:	
  3848                           ; 1 bytes @ 0x18
  3849                           
  3850                           
  3851                           ; 1 bytes @ 0x18
  3852  0038                     	ds	1
  3853  0039                     ___ftdiv@f3:	
  3854  0039                     ___ftmul@f3_as_product:	
  3855                           ; 3 bytes @ 0x19
  3856                           
  3857                           
  3858                           ; 3 bytes @ 0x19
  3859  0039                     	ds	3
  3860  003C                     ___ftdiv@exp:	
  3861  003C                     ___ftmul@cntr:	
  3862                           ; 1 bytes @ 0x1C
  3863                           
  3864                           
  3865                           ; 1 bytes @ 0x1C
  3866  003C                     	ds	1
  3867  003D                     ___ftdiv@sign:	
  3868  003D                     ___ftmul@sign:	
  3869                           ; 1 bytes @ 0x1D
  3870                           
  3871                           
  3872                           ; 1 bytes @ 0x1D
  3873  003D                     	ds	1
  3874  003E                     ?___ftneg:	
  3875  003E                     ___ftneg@f1:	
  3876                           ; 3 bytes @ 0x1E
  3877                           
  3878                           
  3879                           ; 3 bytes @ 0x1E
  3880  003E                     	ds	3
  3881  0041                     ??___ftneg:	
  3882  0041                     ?___ftadd:	
  3883                           ; 0 bytes @ 0x21
  3884                           
  3885  0041                     ___ftadd@f1:	
  3886                           ; 3 bytes @ 0x21
  3887                           
  3888                           
  3889                           ; 3 bytes @ 0x21
  3890  0041                     	ds	3
  3891  0044                     ___ftadd@f2:	
  3892                           
  3893                           ; 3 bytes @ 0x24
  3894  0044                     	ds	3
  3895  0047                     ??___ftadd:	
  3896                           
  3897                           ; 0 bytes @ 0x27
  3898  0047                     	ds	4
  3899  004B                     ___ftadd@sign:	
  3900                           
  3901                           ; 1 bytes @ 0x2B
  3902  004B                     	ds	1
  3903  004C                     ___ftadd@exp2:	
  3904                           
  3905                           ; 1 bytes @ 0x2C
  3906  004C                     	ds	1
  3907  004D                     ___ftadd@exp1:	
  3908                           
  3909                           ; 1 bytes @ 0x2D
  3910  004D                     	ds	1
  3911  004E                     ?___fttol:	
  3912  004E                     ___fttol@f1:	
  3913                           ; 4 bytes @ 0x2E
  3914                           
  3915                           
  3916                           ; 3 bytes @ 0x2E
  3917  004E                     	ds	4
  3918  0052                     ??___fttol:	
  3919                           
  3920                           ; 0 bytes @ 0x32
  3921  0052                     	ds	4
  3922  0056                     ___fttol@sign1:	
  3923                           
  3924                           ; 1 bytes @ 0x36
  3925  0056                     	ds	1
  3926  0057                     ___fttol@lval:	
  3927                           
  3928                           ; 4 bytes @ 0x37
  3929  0057                     	ds	4
  3930  005B                     ___fttol@exp1:	
  3931                           
  3932                           ; 1 bytes @ 0x3B
  3933  005B                     	ds	1
  3934  005C                     ??_getDimmerLights_ValueToPercent:	
  3935  005C                     ??_getDimmerLights_PercentToValue:	
  3936                           ; 0 bytes @ 0x3C
  3937                           
  3938                           
  3939                           ; 0 bytes @ 0x3C
  3940  005C                     	ds	2
  3941  005E                     getDimmerLights_PercentToValue@value:	
  3942  005E                     getDimmerLights_ValueToPercent@value:	
  3943                           ; 1 bytes @ 0x3E
  3944                           
  3945                           
  3946                           ; 1 bytes @ 0x3E
  3947  005E                     	ds	1
  3948  005F                     getDimmerLights_PercentToValue@i:	
  3949  005F                     getDimmerLights_ValueToPercent@i:	
  3950                           ; 3 bytes @ 0x3F
  3951                           
  3952                           
  3953                           ; 3 bytes @ 0x3F
  3954  005F                     	ds	3
  3955  0062                     ?_setProductData:	
  3956  0062                     ??_DimmerIntr_Initialization:	
  3957                           ; 0 bytes @ 0x42
  3958                           
  3959  0062                     ?_setDimmerIntr_DimmingValue:	
  3960                           ; 0 bytes @ 0x42
  3961                           
  3962  0062                     ?_setDimmerIntr_MaxmumValue:	
  3963                           ; 0 bytes @ 0x42
  3964                           
  3965  0062                     setDimmerIntr_DimmingValue@value:	
  3966                           ; 0 bytes @ 0x42
  3967                           
  3968  0062                     setDimmerIntr_MaxmumValue@value:	
  3969                           ; 1 bytes @ 0x42
  3970                           
  3971  0062                     setProductData@value:	
  3972                           ; 1 bytes @ 0x42
  3973                           
  3974                           
  3975                           ; 1 bytes @ 0x42
  3976  0062                     	ds	1
  3977  0063                     ??_setProductData:	
  3978  0063                     ??_setDimmerIntr_DimmingValue:	
  3979                           ; 0 bytes @ 0x43
  3980                           
  3981  0063                     ??_setDimmerIntr_MaxmumValue:	
  3982                           ; 0 bytes @ 0x43
  3983                           
  3984                           
  3985                           ; 0 bytes @ 0x43
  3986  0063                     	ds	1
  3987  0064                     ??_DimmerLights_Initialization:	
  3988  0064                     setDimmerIntr_DimmingValue@lights:	
  3989                           ; 0 bytes @ 0x44
  3990                           
  3991  0064                     setDimmerIntr_MaxmumValue@lights:	
  3992                           ; 1 bytes @ 0x44
  3993                           
  3994  0064                     setProductData@address:	
  3995                           ; 1 bytes @ 0x44
  3996                           
  3997                           
  3998                           ; 1 bytes @ 0x44
  3999  0064                     	ds	1
  4000  0065                     ??_DlyOff_Main:	
  4001  0065                     ?_setRF_DimmerLights:	
  4002                           ; 0 bytes @ 0x45
  4003                           
  4004  0065                     ??_setTemp_Main:	
  4005                           ; 0 bytes @ 0x45
  4006                           
  4007  0065                     ??_setLog_Code:	
  4008                           ; 0 bytes @ 0x45
  4009                           
  4010  0065                     ??_setRFSW_AdjControl:	
  4011                           ; 0 bytes @ 0x45
  4012                           
  4013  0065                     ?_setDelayOff_GO:	
  4014                           ; 0 bytes @ 0x45
  4015                           
  4016  0065                     setDelayOff_GO@command:	
  4017                           ; 0 bytes @ 0x45
  4018                           
  4019  0065                     setRF_DimmerLights@on:	
  4020                           ; 1 bytes @ 0x45
  4021                           
  4022                           
  4023                           ; 1 bytes @ 0x45
  4024  0065                     	ds	1
  4025  0066                     ??_setRF_DimmerLights:	
  4026  0066                     setDelayOff_GO@value:	
  4027                           ; 0 bytes @ 0x46
  4028                           
  4029  0066                     setTemp_Main@error:	
  4030                           ; 1 bytes @ 0x46
  4031                           
  4032                           
  4033                           ; 1 bytes @ 0x46
  4034  0066                     	ds	1
  4035  0067                     ??_setDelayOff_GO:	
  4036  0067                     DlyOff_Main@sw:	
  4037                           ; 0 bytes @ 0x47
  4038                           
  4039  0067                     setTemp_Main@TempGO:	
  4040                           ; 1 bytes @ 0x47
  4041                           
  4042  0067                     setRFSW_AdjControl@status:	
  4043                           ; 1 bytes @ 0x47
  4044                           
  4045                           
  4046                           ; 1 bytes @ 0x47
  4047  0067                     	ds	1
  4048  0068                     ??_DelayOff_Main:	
  4049  0068                     setRFSW_AdjControl@sw:	
  4050                           ; 0 bytes @ 0x48
  4051                           
  4052  0068                     setRF_DimmerLights@status:	
  4053                           ; 1 bytes @ 0x48
  4054                           
  4055  0068                     setTemp_Main@SafeValue:	
  4056                           ; 1 bytes @ 0x48
  4057                           
  4058                           
  4059                           ; 2 bytes @ 0x48
  4060  0068                     	ds	1
  4061  0069                     setDelayOff_GO@i:	
  4062  0069                     setRF_DimmerLights@lights:	
  4063                           ; 1 bytes @ 0x49
  4064                           
  4065                           
  4066                           ; 1 bytes @ 0x49
  4067  0069                     	ds	1
  4068  006A                     ?_setDimmerLights_Dimming:	
  4069  006A                     setDelayOff_GO@j:	
  4070                           ; 0 bytes @ 0x4A
  4071                           
  4072  006A                     setDimmerLights_Dimming@status:	
  4073                           ; 1 bytes @ 0x4A
  4074                           
  4075  006A                     setTemp_Main@DangerValue:	
  4076                           ; 1 bytes @ 0x4A
  4077                           
  4078                           
  4079                           ; 2 bytes @ 0x4A
  4080  006A                     	ds	1
  4081  006B                     ??_setDimmerLights_Dimming:	
  4082  006B                     setDelayOff_GO@k:	
  4083                           ; 0 bytes @ 0x4B
  4084                           
  4085                           
  4086                           ; 1 bytes @ 0x4B
  4087  006B                     	ds	1
  4088  006C                     setDelayOff_GO@sw:	
  4089  006C                     setDimmerLights_Dimming@value:	
  4090                           ; 1 bytes @ 0x4C
  4091                           
  4092  006C                     setTemp_Main@AD:	
  4093                           ; 1 bytes @ 0x4C
  4094                           
  4095                           
  4096                           ; 2 bytes @ 0x4C
  4097  006C                     	ds	1
  4098  006D                     ?_setDimmerLights_OnOff:	
  4099  006D                     ??_setRFSW_Control:	
  4100                           ; 0 bytes @ 0x4D
  4101                           
  4102  006D                     setDimmerLights_OnOff@command:	
  4103                           ; 0 bytes @ 0x4D
  4104                           
  4105  006D                     setDimmerLights_Dimming@lights:	
  4106                           ; 1 bytes @ 0x4D
  4107                           
  4108                           
  4109                           ; 1 bytes @ 0x4D
  4110  006D                     	ds	1
  4111  006E                     ??_setDimmerLights_OnOff:	
  4112  006E                     ??_Temp_Main:	
  4113                           ; 0 bytes @ 0x4E
  4114                           
  4115  006E                     setRFSW_Control@status:	
  4116                           ; 0 bytes @ 0x4E
  4117                           
  4118                           
  4119                           ; 1 bytes @ 0x4E
  4120  006E                     	ds	1
  4121  006F                     setRFSW_Control@sw:	
  4122                           
  4123                           ; 1 bytes @ 0x4F
  4124  006F                     	ds	1
  4125  0070                     ??_setDimmerLights_Main:	
  4126  0070                     ??_RF_Main:	
  4127                           ; 0 bytes @ 0x50
  4128                           
  4129  0070                     ??_setControl_Lights_Table:	
  4130                           ; 0 bytes @ 0x50
  4131                           
  4132  0070                     ??_DimmerLights_Main:	
  4133                           ; 0 bytes @ 0x50
  4134                           
  4135  0070                     ??_main:	
  4136                           ; 0 bytes @ 0x50
  4137                           
  4138                           
  4139                           	psect	maintext
  4140  154A                     __pmaintext:	
  4141                           ; 0 bytes @ 0x50
  4142 ;;
  4143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4144 ;;
  4145 ;; *************** function _main *****************
  4146 ;; Defined at:
  4147 ;;		line 7 in file "../src/Main_B1.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  argc            2    4[BANK1 ] int 
  4150 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  2    4[BANK1 ] int 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 17F/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4162 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;Total ram usage:        4 bytes
  4167 ;; Hardware stack levels required when called:   13
  4168 ;; This function calls:
  4169 ;;		_Buzzer_Initialization
  4170 ;;		_Buzzer_Main
  4171 ;;		_CC2500_PowerOnInitial
  4172 ;;		_DelayOff_Initialization
  4173 ;;		_DelayOff_Main
  4174 ;;		_DimmerLights_Initialization
  4175 ;;		_DimmerLights_Main
  4176 ;;		_Exception_Main
  4177 ;;		_Flash_Memory_Initialization
  4178 ;;		_Flash_Memory_Main
  4179 ;;		_LED_Initialization
  4180 ;;		_LED_Main
  4181 ;;		_Load_Initialization
  4182 ;;		_Load_Main
  4183 ;;		_Mcu_Initialization
  4184 ;;		_RF_Initialization
  4185 ;;		_RF_Main
  4186 ;;		_Switch_Initialization
  4187 ;;		_Switch_Main
  4188 ;;		_Temp_Initialization
  4189 ;;		_Temp_Main
  4190 ;;		_WDT_Main
  4191 ;;		_getLoad_AD
  4192 ;;		_getTemp_AD
  4193 ;;		_myMain_Initialization
  4194 ;;		_my_MainTimer
  4195 ;; This function is called by:
  4196 ;;		Startup code after reset
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _main
  4202  154A                     _main:	
  4203                           
  4204                           ;Main_B1.c: 8: myMain_Initialization();
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4208  154A  319D  259D  3195   	fcall	_myMain_Initialization
  4209                           
  4210                           ;Main_B1.c: 9: Mcu_Initialization();
  4211  154D  319D  253F  3195   	fcall	_Mcu_Initialization
  4212                           
  4213                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4214  1550  3186  2629  3195   	fcall	_Flash_Memory_Initialization
  4215                           
  4216                           ;Main_B1.c: 11: LED_Initialization();
  4217  1553  319B  2309  3195   	fcall	_LED_Initialization
  4218                           
  4219                           ;Main_B1.c: 12: Buzzer_Initialization();
  4220  1556  319A  22EF  3195   	fcall	_Buzzer_Initialization
  4221                           
  4222                           ;Main_B1.c: 14: ;;
  4223                           ;Main_B1.c: 15: Temp_Initialization();
  4224  1559  319A  22FB  3195   	fcall	_Temp_Initialization
  4225                           
  4226                           ;Main_B1.c: 16: Load_Initialization();
  4227  155C  319A  22F2  3195   	fcall	_Load_Initialization
  4228                           
  4229                           ;Main_B1.c: 17: ;;
  4230                           ;Main_B1.c: 18: DelayOff_Initialization();
  4231  155F  319B  2301  3195   	fcall	_DelayOff_Initialization
  4232                           
  4233                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4234  1562  319B  2340  3195   	fcall	_DimmerLights_Initialization
  4235                           
  4236                           ;Main_B1.c: 21: ;;
  4237                           ;Main_B1.c: 22: ;;
  4238                           ;Main_B1.c: 23: ;;
  4239                           ;Main_B1.c: 24: Switch_Initialization();
  4240  1565  319B  2325  3195   	fcall	_Switch_Initialization
  4241                           
  4242                           ;Main_B1.c: 25: RF_Initialization();
  4243  1568  319A  22F5  3195   	fcall	_RF_Initialization
  4244                           
  4245                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4246  156B  319D  25D9  3195   	fcall	_CC2500_PowerOnInitial
  4247  156E                     l10430:	
  4248                           ;Main_B1.c: 27: ;;
  4249                           ;Main_B1.c: 28: ;;
  4250                           ;Main_B1.c: 30: while (1) {
  4251                           
  4252                           
  4253                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4254  156E  0021               	movlb	1	; select bank1
  4255  156F  1C2E               	btfss	_myMain^(0+128),0
  4256  1570  2D79               	goto	l10434
  4257                           
  4258                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4259  1571  3005               	movlw	5
  4260  1572  318A  22AC  3195   	fcall	_getLoad_AD
  4261                           
  4262                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4263  1575  3009               	movlw	9
  4264  1576  3191  215B  3195   	fcall	_getTemp_AD
  4265  1579                     l10434:	
  4266                           
  4267                           ;Main_B1.c: 57: }
  4268                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4269  1579  0022               	movlb	2	; select bank2
  4270  157A  1C31               	btfss	_Timer1^(0+256),0
  4271  157B  2D6E               	goto	l10430
  4272                           
  4273                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4274  157C  1031               	bcf	_Timer1^(0+256),0
  4275                           
  4276                           ;Main_B1.c: 96: my_MainTimer();
  4277  157D  3193  2307  3195   	fcall	_my_MainTimer
  4278                           
  4279                           ;Main_B1.c: 97: WDT_Main();
  4280  1580  3188  2000  3195   	fcall	_WDT_Main
  4281                           
  4282                           ;Main_B1.c: 98: ;;
  4283                           ;Main_B1.c: 99: ;;
  4284                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4285  1583  0021               	movlb	1	; select bank1
  4286  1584  1C2E               	btfss	_myMain^(0+128),0
  4287  1585  2D6E               	goto	l10430
  4288                           
  4289                           ;Main_B1.c: 101: Flash_Memory_Main();
  4290  1586  3193  23C2  3195   	fcall	_Flash_Memory_Main
  4291                           
  4292                           ;Main_B1.c: 103: LED_Main();
  4293  1589  319B  230D  3195   	fcall	_LED_Main
  4294                           
  4295                           ;Main_B1.c: 104: Buzzer_Main();
  4296  158C  3187  27B6  3195   	fcall	_Buzzer_Main
  4297                           
  4298                           ;Main_B1.c: 106: ;;
  4299                           ;Main_B1.c: 107: Temp_Main();
  4300  158F  319A  22FE  3195   	fcall	_Temp_Main
  4301                           
  4302                           ;Main_B1.c: 108: Load_Main();
  4303  1592  3180  2053  3195   	fcall	_Load_Main
  4304                           
  4305                           ;Main_B1.c: 109: ;;
  4306                           ;Main_B1.c: 111: ;;
  4307                           ;Main_B1.c: 112: DimmerLights_Main();
  4308  1595  319F  270F  3195   	fcall	_DimmerLights_Main
  4309                           
  4310                           ;Main_B1.c: 113: Switch_Main();
  4311  1598  3190  2000  3195   	fcall	_Switch_Main
  4312                           
  4313                           ;Main_B1.c: 114: ;;
  4314                           ;Main_B1.c: 115: ;;
  4315                           ;Main_B1.c: 117: RF_Main();
  4316  159B  319A  22F8  3195   	fcall	_RF_Main
  4317                           
  4318                           ;Main_B1.c: 118: DelayOff_Main();
  4319  159E  319B  2305  3195   	fcall	_DelayOff_Main
  4320                           
  4321                           ;Main_B1.c: 119: ;;
  4322                           ;Main_B1.c: 120: ;;
  4323                           ;Main_B1.c: 121: Exception_Main();
  4324  15A1  3185  2554  3195   	fcall	_Exception_Main
  4325  15A4  2D6E               	goto	l10430
  4326  15A5                     __end_of_main:	
  4327                           ;Main_B1.c: 128: }
  4328                           ;Main_B1.c: 129: }
  4329                           ;Main_B1.c: 163: }
  4330                           ;Main_B1.c: 164: return (0);
  4331                           ;	Return value of _main is never used
  4332                           
  4333                           
  4334                           	psect	text1
  4335  1307                     __ptext1:	
  4336 ;; *************** function _my_MainTimer *****************
  4337 ;; Defined at:
  4338 ;;		line 185 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    7
  4359 ;; This function calls:
  4360 ;;		_setBuz
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _my_MainTimer
  4368  1307                     _my_MainTimer:	
  4369                           
  4370                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4374  1307  0021               	movlb	1	; select bank1
  4375  1308  182E               	btfsc	_myMain^(0+128),0
  4376  1309  2B21               	goto	l10120
  4377                           
  4378                           ;Main_B1.c: 188: myMain.PowerCount++;
  4379  130A  3001               	movlw	1
  4380  130B  0020               	movlb	0	; select bank0
  4381  130C  00AD               	movwf	??_my_MainTimer
  4382  130D  082D               	movf	??_my_MainTimer,w
  4383  130E  0021               	movlb	1	; select bank1
  4384  130F  07AF               	addwf	(_myMain^(0+128)+1),f
  4385                           
  4386                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4387  1310  082F               	movf	(_myMain^(0+128)+1),w
  4388  1311  3A4B               	xorlw	75
  4389  1312  1D03               	skipz
  4390  1313  0008               	return
  4391                           
  4392                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4393  1314  01AF               	clrf	(_myMain^(0+128)+1)
  4394                           
  4395                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4396  1315  142E               	bsf	_myMain^(0+128),0
  4397                           
  4398                           ;Main_B1.c: 196: setBuz(3, 50);
  4399  1316  3032               	movlw	50
  4400  1317  0020               	movlb	0	; select bank0
  4401  1318  00A9               	movwf	setBuz@time
  4402  1319  3000               	movlw	0
  4403  131A  00AA               	movwf	setBuz@time+1
  4404  131B  3003               	movlw	3
  4405  131C  3194  24F1         	fcall	_setBuz
  4406                           
  4407                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4408  131E  0021               	movlb	1	; select bank1
  4409  131F  162E               	bsf	_myMain^(0+128),4
  4410                           
  4411                           ;Main_B1.c: 206: }
  4412                           ;Main_B1.c: 207: } else {
  4413  1320  0008               	return
  4414  1321                     l10120:	
  4415                           
  4416                           ;Main_B1.c: 208: myMain.PowerCount++;
  4417  1321  3001               	movlw	1
  4418  1322  0020               	movlb	0	; select bank0
  4419  1323  00AD               	movwf	??_my_MainTimer
  4420  1324  082D               	movf	??_my_MainTimer,w
  4421  1325  0021               	movlb	1	; select bank1
  4422  1326  07AF               	addwf	(_myMain^(0+128)+1),f
  4423                           
  4424                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4425  1327  082F               	movf	(_myMain^(0+128)+1),w
  4426  1328  3A32               	xorlw	50
  4427  1329  1903               	btfsc	3,2
  4428                           
  4429                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4430  132A  01AF               	clrf	(_myMain^(0+128)+1)
  4431                           
  4432                           ;Main_B1.c: 226: }
  4433                           ;Main_B1.c: 228: myMain.Count1++;
  4434  132B  3001               	movlw	1
  4435  132C  07B2               	addwf	(_myMain^(0+128)+4),f
  4436  132D  3000               	movlw	0
  4437  132E  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4438                           
  4439                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4440  132F  3004               	movlw	4
  4441  1330  3EAE               	addlw	_myMain& (0+255)
  4442  1331  0086               	movwf	6
  4443  1332  0187               	clrf	7
  4444  1333  3F40               	moviw [0]fsr1
  4445  1334  3A32               	xorlw	50
  4446  1335  1D03               	skipz
  4447  1336  2B39               	goto	u11605
  4448  1337  3F41               	moviw [1]fsr1
  4449  1338  3A00               	xorlw	0
  4450  1339                     u11605:	
  4451  1339  1D03               	skipz
  4452  133A  0008               	return
  4453                           
  4454                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4455  133B  01B2               	clrf	(_myMain^(0+128)+4)
  4456  133C  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4457                           
  4458                           ;Main_B1.c: 242: if (myMain.Flag) {
  4459  133D  1CAE               	btfss	_myMain^(0+128),1
  4460  133E  2B41               	goto	l1448
  4461                           
  4462                           ;Main_B1.c: 243: myMain.Flag = 0;
  4463  133F  10AE               	bcf	_myMain^(0+128),1
  4464                           
  4465                           ;Main_B1.c: 252: } else {
  4466  1340  0008               	return
  4467  1341                     l1448:	
  4468                           
  4469                           ;Main_B1.c: 253: myMain.Flag = 1;
  4470  1341  14AE               	bsf	_myMain^(0+128),1
  4471  1342  0008               	return
  4472  1343                     __end_of_my_MainTimer:	
  4473                           
  4474                           	psect	text2
  4475  1D9D                     __ptext2:	
  4476 ;; *************** function _myMain_Initialization *****************
  4477 ;; Defined at:
  4478 ;;		line 170 in file "../src/Main_B1.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;		None
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;		None               void
  4485 ;; Registers used:
  4486 ;;		wreg, fsr1l, fsr1h
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;Total ram usage:        1 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    5
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_main
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _myMain_Initialization
  4508  1D9D                     _myMain_Initialization:	
  4509                           
  4510                           ;Main_B1.c: 173: product = &_product;
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4514  1D9D  3045               	movlw	__product& (0+255)
  4515  1D9E  0020               	movlb	0	; select bank0
  4516  1D9F  00A0               	movwf	??_myMain_Initialization
  4517  1DA0  0820               	movf	??_myMain_Initialization,w
  4518  1DA1  0021               	movlb	1	; select bank1
  4519  1DA2  00E3               	movwf	_product^(0+128)
  4520                           
  4521                           ;Main_B1.c: 174: product->Data[20] = 209;
  4522  1DA3  30D1               	movlw	209
  4523  1DA4  0020               	movlb	0	; select bank0
  4524  1DA5  00A0               	movwf	??_myMain_Initialization
  4525  1DA6  0021               	movlb	1	; select bank1
  4526  1DA7  0863               	movf	_product^(0+128),w
  4527  1DA8  3E14               	addlw	20
  4528  1DA9  0086               	movwf	6
  4529  1DAA  3002               	movlw	2	; select bank4/5
  4530  1DAB  0087               	movwf	7
  4531  1DAC  0020               	movlb	0	; select bank0
  4532  1DAD  0820               	movf	??_myMain_Initialization,w
  4533  1DAE  0081               	movwf	1
  4534  1DAF  0008               	return
  4535  1DB0                     __end_of_myMain_Initialization:	
  4536                           
  4537                           	psect	text3
  4538  115B                     __ptext3:	
  4539 ;; *************** function _getTemp_AD *****************
  4540 ;; Defined at:
  4541 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  channel         1    wreg     unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  channel         1    5[BANK0 ] unsigned char 
  4546 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;Total ram usage:        4 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    7
  4563 ;; This function calls:
  4564 ;;		_getAD
  4565 ;; This function is called by:
  4566 ;;		_main
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function _getTemp_AD
  4572  115B                     _getTemp_AD:	
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4576                           ;getTemp_AD@channel stored from wreg
  4577  115B  0020               	movlb	0	; select bank0
  4578  115C  00A5               	movwf	getTemp_AD@channel
  4579                           
  4580                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4581  115D  01A6               	clrf	getTemp_AD@ADRES
  4582  115E  01A7               	clrf	getTemp_AD@ADRES+1
  4583                           
  4584                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4585  115F  0021               	movlb	1	; select bank1
  4586  1160  1D51               	btfss	_Temp^(0+128),2
  4587  1161  0008               	return
  4588                           
  4589                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4590  1162  30F0               	movlw	240
  4591  1163  0020               	movlb	0	; select bank0
  4592  1164  00A4               	movwf	??_getTemp_AD
  4593  1165  0824               	movf	??_getTemp_AD,w
  4594  1166  00A0               	movwf	getAD@adcon1
  4595  1167  0825               	movf	getTemp_AD@channel,w
  4596  1168  319F  27C0  3191   	fcall	_getAD
  4597  116B  0020               	movlb	0	; select bank0
  4598  116C  0821               	movf	?_getAD+1,w
  4599  116D  01A7               	clrf	getTemp_AD@ADRES+1
  4600  116E  07A7               	addwf	getTemp_AD@ADRES+1,f
  4601  116F  0820               	movf	?_getAD,w
  4602  1170  01A6               	clrf	getTemp_AD@ADRES
  4603  1171  07A6               	addwf	getTemp_AD@ADRES,f
  4604                           
  4605                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4606  1172  0827               	movf	getTemp_AD@ADRES+1,w
  4607  1173  0426               	iorwf	getTemp_AD@ADRES,w
  4608  1174  1903               	skipnz
  4609  1175  0008               	return
  4610                           
  4611                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4612  1176  0827               	movf	getTemp_AD@ADRES+1,w
  4613  1177  0021               	movlb	1	; select bank1
  4614  1178  025A               	subwf	((_Temp+1)^(0+128)+8),w
  4615  1179  1D03               	skipz
  4616  117A  297F               	goto	u8075
  4617  117B  0020               	movlb	0	; select bank0
  4618  117C  0826               	movf	getTemp_AD@ADRES,w
  4619  117D  0021               	movlb	1	; select bank1
  4620  117E  0259               	subwf	(_Temp^(0+128)+8),w
  4621  117F                     u8075:	
  4622  117F  1803               	skipnc
  4623  1180  0008               	return
  4624                           
  4625                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4626  1181  0020               	movlb	0	; select bank0
  4627  1182  0827               	movf	getTemp_AD@ADRES+1,w
  4628  1183  0021               	movlb	1	; select bank1
  4629  1184  01DA               	clrf	((_Temp+1)^(0+128)+8)
  4630  1185  07DA               	addwf	((_Temp+1)^(0+128)+8),f
  4631  1186  0020               	movlb	0	; select bank0
  4632  1187  0826               	movf	getTemp_AD@ADRES,w
  4633  1188  0021               	movlb	1	; select bank1
  4634  1189  01D9               	clrf	(_Temp^(0+128)+8)
  4635  118A  07D9               	addwf	(_Temp^(0+128)+8),f
  4636  118B  0008               	return
  4637  118C                     __end_of_getTemp_AD:	
  4638                           
  4639                           	psect	text4
  4640  0AAC                     __ptext4:	
  4641 ;; *************** function _getLoad_AD *****************
  4642 ;; Defined at:
  4643 ;;		line 15 in file "../src/OverLoad_B1.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  channel         1    wreg     unsigned char 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  channel         1    6[BANK0 ] unsigned char 
  4648 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4649 ;;  i               1   11[BANK0 ] unsigned char 
  4650 ;;  j               1    8[BANK0 ] unsigned char 
  4651 ;;  k               1    7[BANK0 ] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;		None               void
  4654 ;; Registers used:
  4655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;Total ram usage:        8 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    7
  4668 ;; This function calls:
  4669 ;;		_getAD
  4670 ;; This function is called by:
  4671 ;;		_main
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           
  4676                           ;psect for function _getLoad_AD
  4677  0AAC                     _getLoad_AD:	
  4678                           
  4679                           ;incstack = 0
  4680                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4681                           ;getLoad_AD@channel stored from wreg
  4682  0AAC  0020               	movlb	0	; select bank0
  4683  0AAD  00A6               	movwf	getLoad_AD@channel
  4684                           
  4685                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4686  0AAE  01AB               	clrf	getLoad_AD@i
  4687  0AAF  01A8               	clrf	getLoad_AD@j
  4688  0AB0  01A7               	clrf	getLoad_AD@k
  4689                           
  4690                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4691  0AB1  01A9               	clrf	getLoad_AD@ADRES
  4692  0AB2  01AA               	clrf	getLoad_AD@ADRES+1
  4693                           
  4694                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4695  0AB3  0022               	movlb	2	; select bank2
  4696  0AB4  1E3E               	btfss	_Load^(0+256),4
  4697  0AB5  0008               	return
  4698                           
  4699                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4700  0AB6  30F3               	movlw	243
  4701  0AB7  0020               	movlb	0	; select bank0
  4702  0AB8  00A4               	movwf	??_getLoad_AD
  4703  0AB9  0824               	movf	??_getLoad_AD,w
  4704  0ABA  00A0               	movwf	getAD@adcon1
  4705  0ABB  0826               	movf	getLoad_AD@channel,w
  4706  0ABC  319F  27C0  318A   	fcall	_getAD
  4707  0ABF  0020               	movlb	0	; select bank0
  4708  0AC0  0821               	movf	?_getAD+1,w
  4709  0AC1  01AA               	clrf	getLoad_AD@ADRES+1
  4710  0AC2  07AA               	addwf	getLoad_AD@ADRES+1,f
  4711  0AC3  0820               	movf	?_getAD,w
  4712  0AC4  01A9               	clrf	getLoad_AD@ADRES
  4713  0AC5  07A9               	addwf	getLoad_AD@ADRES,f
  4714                           
  4715                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4716  0AC6  01AB               	clrf	getLoad_AD@i
  4717  0AC7  3004               	movlw	4
  4718  0AC8  022B               	subwf	getLoad_AD@i,w
  4719  0AC9  1803               	btfsc	3,0
  4720  0ACA  2AF2               	goto	l7920
  4721  0ACB                     l7908:	
  4722                           
  4723                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4724  0ACB  352B               	lslf	getLoad_AD@i,w
  4725  0ACC  3E49               	addlw	(_Load+11)& (0+255)
  4726  0ACD  0086               	movwf	6
  4727  0ACE  3001               	movlw	1	; select bank2/3
  4728  0ACF  0087               	movwf	7
  4729  0AD0  3F40               	moviw [0]fsr1
  4730  0AD1  00A4               	movwf	??_getLoad_AD
  4731  0AD2  3F41               	moviw [1]fsr1
  4732  0AD3  00A5               	movwf	??_getLoad_AD+1
  4733  0AD4  082A               	movf	getLoad_AD@ADRES+1,w
  4734  0AD5  0225               	subwf	??_getLoad_AD+1,w
  4735  0AD6  1D03               	skipz
  4736  0AD7  2ADA               	goto	u7975
  4737  0AD8  0829               	movf	getLoad_AD@ADRES,w
  4738  0AD9  0224               	subwf	??_getLoad_AD,w
  4739  0ADA                     u7975:	
  4740  0ADA  1803               	skipnc
  4741  0ADB  2AEA               	goto	l7916
  4742  0ADC  08A8               	movf	getLoad_AD@j,f
  4743  0ADD  1D03               	skipz
  4744  0ADE  2AEA               	goto	l7916
  4745                           
  4746                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4747  0ADF  352B               	lslf	getLoad_AD@i,w
  4748  0AE0  3E49               	addlw	(_Load+11)& (0+255)
  4749  0AE1  0086               	movwf	6
  4750  0AE2  3001               	movlw	1	; select bank2/3
  4751  0AE3  0087               	movwf	7
  4752  0AE4  0829               	movf	getLoad_AD@ADRES,w
  4753  0AE5  3FC0               	movwi [0]fsr1
  4754  0AE6  082A               	movf	getLoad_AD@ADRES+1,w
  4755  0AE7  3FC1               	movwi [1]fsr1
  4756                           
  4757                           ;OverLoad_B1.c: 24: j = 1;
  4758  0AE8  01A8               	clrf	getLoad_AD@j
  4759  0AE9  0AA8               	incf	getLoad_AD@j,f
  4760  0AEA                     l7916:	
  4761  0AEA  3001               	movlw	1
  4762  0AEB  00A4               	movwf	??_getLoad_AD
  4763  0AEC  0824               	movf	??_getLoad_AD,w
  4764  0AED  07AB               	addwf	getLoad_AD@i,f
  4765  0AEE  3004               	movlw	4
  4766  0AEF  022B               	subwf	getLoad_AD@i,w
  4767  0AF0  1C03               	skipc
  4768  0AF1  2ACB               	goto	l7908
  4769  0AF2                     l7920:	
  4770                           
  4771                           ;OverLoad_B1.c: 25: }
  4772                           ;OverLoad_B1.c: 26: }
  4773                           ;OverLoad_B1.c: 27: if (j == 0) {
  4774  0AF2  08A8               	movf	getLoad_AD@j,f
  4775  0AF3  1D03               	skipz
  4776  0AF4  0008               	return
  4777                           
  4778                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4779  0AF5  01AB               	clrf	getLoad_AD@i
  4780  0AF6                     L1:	
  4781  0AF6  3004               	movlw	4
  4782  0AF7  022B               	subwf	getLoad_AD@i,w
  4783  0AF8  1803               	btfsc	3,0
  4784  0AF9  0008               	return
  4785                           
  4786                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4787  0AFA  352B               	lslf	getLoad_AD@i,w
  4788  0AFB  3E53               	addlw	(_Load+21)& (0+255)
  4789  0AFC  0086               	movwf	6
  4790  0AFD  3001               	movlw	1	; select bank2/3
  4791  0AFE  0087               	movwf	7
  4792  0AFF  3F40               	moviw [0]fsr1
  4793  0B00  00A4               	movwf	??_getLoad_AD
  4794  0B01  3F41               	moviw [1]fsr1
  4795  0B02  00A5               	movwf	??_getLoad_AD+1
  4796  0B03  0825               	movf	??_getLoad_AD+1,w
  4797  0B04  022A               	subwf	getLoad_AD@ADRES+1,w
  4798  0B05  1D03               	skipz
  4799  0B06  2B09               	goto	u8025
  4800  0B07  0824               	movf	??_getLoad_AD,w
  4801  0B08  0229               	subwf	getLoad_AD@ADRES,w
  4802  0B09                     u8025:	
  4803  0B09  1803               	skipnc
  4804  0B0A  2B19               	goto	l7936
  4805  0B0B  08A7               	movf	getLoad_AD@k,f
  4806  0B0C  1D03               	skipz
  4807  0B0D  2B19               	goto	l7936
  4808                           
  4809                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4810  0B0E  352B               	lslf	getLoad_AD@i,w
  4811  0B0F  3E53               	addlw	(_Load+21)& (0+255)
  4812  0B10  0086               	movwf	6
  4813  0B11  3001               	movlw	1	; select bank2/3
  4814  0B12  0087               	movwf	7
  4815  0B13  0829               	movf	getLoad_AD@ADRES,w
  4816  0B14  3FC0               	movwi [0]fsr1
  4817  0B15  082A               	movf	getLoad_AD@ADRES+1,w
  4818  0B16  3FC1               	movwi [1]fsr1
  4819                           
  4820                           ;OverLoad_B1.c: 31: k = 1;
  4821  0B17  01A7               	clrf	getLoad_AD@k
  4822  0B18  0AA7               	incf	getLoad_AD@k,f
  4823  0B19                     l7936:	
  4824  0B19  3001               	movlw	1
  4825  0B1A  00A4               	movwf	??_getLoad_AD
  4826  0B1B  0824               	movf	??_getLoad_AD,w
  4827  0B1C  07AB               	addwf	getLoad_AD@i,f
  4828  0B1D  2AF6               	goto	L1
  4829  0B1E                     __end_of_getLoad_AD:	
  4830                           
  4831                           	psect	text5
  4832  1FC0                     __ptext5:	
  4833 ;; *************** function _getAD *****************
  4834 ;; Defined at:
  4835 ;;		line 461 in file "../src/MCU_B1.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  adcon0          1    wreg     unsigned char 
  4838 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  2    0[BANK0 ] int 
  4843 ;; Registers used:
  4844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4850 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;Total ram usage:        4 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    6
  4857 ;; This function calls:
  4858 ;;		_Timeout_Counter
  4859 ;;		_set_TimeoutCleared
  4860 ;; This function is called by:
  4861 ;;		_getLoad_AD
  4862 ;;		_getTemp_AD
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _getAD
  4868  1FC0                     _getAD:	
  4869                           
  4870                           ;incstack = 0
  4871                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4872                           ;getAD@adcon0 stored from wreg
  4873  1FC0  0020               	movlb	0	; select bank0
  4874  1FC1  00A3               	movwf	getAD@adcon0
  4875                           
  4876                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4877  1FC2  0823               	movf	getAD@adcon0,w
  4878  1FC3  0021               	movlb	1	; select bank1
  4879  1FC4  009D               	movwf	29	;volatile
  4880                           
  4881                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4882  1FC5  0020               	movlb	0	; select bank0
  4883  1FC6  0820               	movf	getAD@adcon1,w
  4884  1FC7  0021               	movlb	1	; select bank1
  4885  1FC8  009E               	movwf	30	;volatile
  4886                           
  4887                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4888  1FC9  149D               	bsf	29,1	;volatile
  4889                           
  4890                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4891  1FCA  2FCE               	goto	l7388
  4892  1FCB                     l7386:	
  4893                           
  4894                           ;MCU_B1.c: 466: Timeout_Counter();
  4895  1FCB  319D  25EE  319F   	fcall	_Timeout_Counter
  4896  1FCE                     l7388:	
  4897  1FCE  0021               	movlb	1	; select bank1
  4898  1FCF  1C9D               	btfss	29,1	;volatile
  4899  1FD0  2FD3               	goto	l7392
  4900  1FD1  1D38               	btfss	(_myMain^(0+128)+10),2
  4901  1FD2  2FCB               	goto	l7386
  4902  1FD3                     l7392:	
  4903                           
  4904                           ;MCU_B1.c: 467: };
  4905                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4906  1FD3  319B  2329         	fcall	_set_TimeoutCleared
  4907                           
  4908                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4909  1FD5  0021               	movlb	1	; select bank1
  4910  1FD6  081C               	movf	28,w	;volatile
  4911  1FD7  0020               	movlb	0	; select bank0
  4912  1FD8  01A1               	clrf	?_getAD+1
  4913  1FD9  07A1               	addwf	?_getAD+1,f
  4914  1FDA  0021               	movlb	1	; select bank1
  4915  1FDB  081B               	movf	27,w	;volatile
  4916  1FDC  0020               	movlb	0	; select bank0
  4917  1FDD  01A0               	clrf	?_getAD
  4918  1FDE  07A0               	addwf	?_getAD,f
  4919  1FDF  0008               	return
  4920  1FE0                     __end_of_getAD:	
  4921                           
  4922                           	psect	text6
  4923  0800                     __ptext6:	
  4924 ;; *************** function _WDT_Main *****************
  4925 ;; Defined at:
  4926 ;;		line 1116 in file "../src/MCU_B1.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;		None               void
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, pclath, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;Total ram usage:        1 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    6
  4947 ;; This function calls:
  4948 ;;		_WDT_Clearing
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function _WDT_Main
  4956  0800                     _WDT_Main:	
  4957                           
  4958                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4959                           
  4960                           ;incstack = 0
  4961                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4962  0800  0022               	movlb	2	; select bank2
  4963  0801  1C36               	btfss	_WDT^(0+256),0
  4964  0802  0008               	return
  4965                           
  4966                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4967  0803  3001               	movlw	1
  4968  0804  02B7               	subwf	(_WDT^(0+256)+1),f
  4969  0805  0837               	movf	(_WDT^(0+256)+1),w
  4970  0806  3AFF               	xorlw	255
  4971  0807  1903               	skipnz
  4972  0808  0008               	return
  4973                           
  4974                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4975  0809  3064               	movlw	100
  4976  080A  0020               	movlb	0	; select bank0
  4977  080B  00A0               	movwf	??_WDT_Main
  4978  080C  0820               	movf	??_WDT_Main,w
  4979  080D  0022               	movlb	2	; select bank2
  4980  080E  00B7               	movwf	(_WDT^(0+256)+1)
  4981                           
  4982                           ;MCU_B1.c: 1120: WDT_Clearing();
  4983  080F  3180  2002         	fcall	_WDT_Clearing
  4984  0811  0008               	return
  4985  0812                     __end_of_WDT_Main:	
  4986                           
  4987                           	psect	text7
  4988  0002                     __ptext7:	
  4989 ;; *************** function _WDT_Clearing *****************
  4990 ;; Defined at:
  4991 ;;		line 1126 in file "../src/MCU_B1.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;		None               void
  4998 ;; Registers used:
  4999 ;;		None
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    5
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_WDT_Main
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function _WDT_Clearing
  5021  0002                     _WDT_Clearing:	
  5022                           
  5023                           ;incstack = 0
  5024                           ; Regs used in _WDT_Clearing: []
  5025  0002  0064               	clrwdt	;# 
  5026  0003  0008               	return
  5027  0004                     __end_of_WDT_Clearing:	
  5028                           
  5029                           	psect	text8
  5030  1AFE                     __ptext8:	
  5031 ;; *************** function _Temp_Main *****************
  5032 ;; Defined at:
  5033 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;		None
  5038 ;; Return value:  Size  Location     Type
  5039 ;;		None               void
  5040 ;; Registers used:
  5041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;Total ram usage:        0 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    8
  5054 ;; This function calls:
  5055 ;;		_setTemp_Main
  5056 ;; This function is called by:
  5057 ;;		_main
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           
  5062                           ;psect for function _Temp_Main
  5063  1AFE                     _Temp_Main:	
  5064                           
  5065                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5066                           
  5067                           ;incstack = 0
  5068                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5069  1AFE  318D  25E0         	fcall	_setTemp_Main
  5070  1B00  0008               	return
  5071  1B01                     __end_of_Temp_Main:	
  5072                           
  5073                           	psect	text9
  5074  0DE0                     __ptext9:	
  5075 ;; *************** function _setTemp_Main *****************
  5076 ;; Defined at:
  5077 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  AD              2   76[BANK0 ] unsigned int 
  5082 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5083 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5084 ;;  TempGO          1   71[BANK0 ] unsigned char 
  5085 ;;  error           1   70[BANK0 ] unsigned char 
  5086 ;; Return value:  Size  Location     Type
  5087 ;;		None               void
  5088 ;; Registers used:
  5089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;Total ram usage:        9 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    7
  5102 ;; This function calls:
  5103 ;;		_getMain_All_Error_Status
  5104 ;;		_getMain_All_LightsStatus
  5105 ;;		_setBuz
  5106 ;;		_setProductData
  5107 ;; This function is called by:
  5108 ;;		_Temp_Main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _setTemp_Main
  5114  0DE0                     _setTemp_Main:	
  5115                           
  5116                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5117                           
  5118                           ;incstack = 0
  5119                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5120  0DE0  3000               	movlw	0
  5121  0DE1  3191  218C  318D   	fcall	_getMain_All_Error_Status
  5122  0DE4  0020               	movlb	0	; select bank0
  5123  0DE5  00E5               	movwf	??_setTemp_Main
  5124  0DE6  0865               	movf	??_setTemp_Main,w
  5125  0DE7  00E6               	movwf	setTemp_Main@error
  5126                           
  5127                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5128  0DE8  01E8               	clrf	setTemp_Main@SafeValue
  5129  0DE9  01E9               	clrf	setTemp_Main@SafeValue+1
  5130  0DEA  01EA               	clrf	setTemp_Main@DangerValue
  5131  0DEB  01EB               	clrf	setTemp_Main@DangerValue+1
  5132                           
  5133                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5134  0DEC  319B  2381  318D   	fcall	_getMain_All_LightsStatus
  5135  0DEF  0020               	movlb	0	; select bank0
  5136  0DF0  00E5               	movwf	??_setTemp_Main
  5137  0DF1  0865               	movf	??_setTemp_Main,w
  5138  0DF2  00E7               	movwf	setTemp_Main@TempGO
  5139                           
  5140                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5141  0DF3  0021               	movlb	1	; select bank1
  5142  0DF4  1C51               	btfss	_Temp^(0+128),0
  5143  0DF5  2E8D               	goto	l1787
  5144                           
  5145                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5146  0DF6  1951               	btfsc	_Temp^(0+128),2
  5147  0DF7  2E15               	goto	l9774
  5148                           
  5149                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5150  0DF8  0020               	movlb	0	; select bank0
  5151  0DF9  0867               	movf	setTemp_Main@TempGO,w
  5152  0DFA  3A01               	xorlw	1
  5153  0DFB  1D03               	skipz
  5154  0DFC  2E00               	goto	l1793
  5155  0DFD  0021               	movlb	1	; select bank1
  5156  0DFE  1CD1               	btfss	_Temp^(0+128),1
  5157  0DFF  2E03               	goto	l9766
  5158  0E00                     l1793:	
  5159  0E00  0021               	movlb	1	; select bank1
  5160  0E01  1CD1               	btfss	_Temp^(0+128),1
  5161  0E02  2E12               	goto	l9772
  5162  0E03                     l9766:	
  5163                           
  5164                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5165  0E03  3001               	movlw	1
  5166  0E04  07D2               	addwf	(_Temp^(0+128)+1),f
  5167  0E05  3000               	movlw	0
  5168  0E06  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5169                           
  5170                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5171  0E07  3000               	movlw	0
  5172  0E08  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5173  0E09  30FA               	movlw	250
  5174  0E0A  1903               	skipnz
  5175  0E0B  0252               	subwf	(_Temp^(0+128)+1),w
  5176  0E0C  1C03               	skipc
  5177  0E0D  0008               	return
  5178                           
  5179                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5180  0E0E  01D2               	clrf	(_Temp^(0+128)+1)
  5181  0E0F  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5182                           
  5183                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5184  0E10  1551               	bsf	_Temp^(0+128),2
  5185                           
  5186                           ;OverTemperature_B1.c: 83: }
  5187                           ;OverTemperature_B1.c: 84: } else {
  5188  0E11  0008               	return
  5189  0E12                     l9772:	
  5190                           
  5191                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5192  0E12  01D2               	clrf	(_Temp^(0+128)+1)
  5193  0E13  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5194                           
  5195                           ;OverTemperature_B1.c: 86: }
  5196                           ;OverTemperature_B1.c: 87: } else {
  5197  0E14  0008               	return
  5198  0E15                     l9774:	
  5199                           
  5200                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5201  0E15  3001               	movlw	1
  5202  0E16  07D2               	addwf	(_Temp^(0+128)+1),f
  5203  0E17  3000               	movlw	0
  5204  0E18  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5205                           
  5206                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5207  0E19  3000               	movlw	0
  5208  0E1A  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5209  0E1B  3005               	movlw	5
  5210  0E1C  1903               	skipnz
  5211  0E1D  0252               	subwf	(_Temp^(0+128)+1),w
  5212  0E1E  1C03               	skipc
  5213  0E1F  0008               	return
  5214                           
  5215                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5216  0E20  01D2               	clrf	(_Temp^(0+128)+1)
  5217  0E21  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5218                           
  5219                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5220  0E22  3008               	movlw	8
  5221  0E23  3ED1               	addlw	_Temp& (0+255)
  5222  0E24  0086               	movwf	6
  5223  0E25  0187               	clrf	7
  5224  0E26  0016               	moviw fsr1++
  5225  0E27  0401               	iorwf	1,w
  5226  0E28  1903               	skipnz
  5227  0E29  2E85               	goto	l1798
  5228                           
  5229                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5230  0E2A  1151               	bcf	_Temp^(0+128),2
  5231                           
  5232                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5233  0E2B  085A               	movf	((_Temp+1)^(0+128)+8),w
  5234  0E2C  0020               	movlb	0	; select bank0
  5235  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5236  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5237  0E2F  0021               	movlb	1	; select bank1
  5238  0E30  0859               	movf	(_Temp^(0+128)+8),w
  5239  0E31  0020               	movlb	0	; select bank0
  5240  0E32  01EC               	clrf	setTemp_Main@AD
  5241  0E33  07EC               	addwf	setTemp_Main@AD,f
  5242                           
  5243                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5244  0E34  3090               	movlw	144
  5245  0E35  00E8               	movwf	setTemp_Main@SafeValue
  5246  0E36  3001               	movlw	1
  5247  0E37  00E9               	movwf	setTemp_Main@SafeValue+1
  5248                           
  5249                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5250  0E38  3059               	movlw	89
  5251  0E39  00EA               	movwf	setTemp_Main@DangerValue
  5252  0E3A  3001               	movlw	1
  5253  0E3B  00EB               	movwf	setTemp_Main@DangerValue+1
  5254                           
  5255                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5256  0E3C  0021               	movlb	1	; select bank1
  5257  0E3D  1CD1               	btfss	_Temp^(0+128),1
  5258  0E3E  2E5D               	goto	l9804
  5259                           
  5260                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5261  0E3F  0020               	movlb	0	; select bank0
  5262  0E40  0869               	movf	setTemp_Main@SafeValue+1,w
  5263  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5264  0E42  1D03               	skipz
  5265  0E43  2E46               	goto	u11025
  5266  0E44  0868               	movf	setTemp_Main@SafeValue,w
  5267  0E45  026C               	subwf	setTemp_Main@AD,w
  5268  0E46                     u11025:	
  5269  0E46  1C03               	skipc
  5270  0E47  2E72               	goto	l9814
  5271                           
  5272                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5273  0E48  3001               	movlw	1
  5274  0E49  00E5               	movwf	??_setTemp_Main
  5275  0E4A  0865               	movf	??_setTemp_Main,w
  5276  0E4B  0021               	movlb	1	; select bank1
  5277  0E4C  07D4               	addwf	(_Temp^(0+128)+3),f
  5278                           
  5279                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5280  0E4D  3003               	movlw	3
  5281  0E4E  0254               	subwf	(_Temp^(0+128)+3),w
  5282  0E4F  1C03               	skipc
  5283  0E50  2E74               	goto	l9816
  5284                           
  5285                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5286  0E51  01D4               	clrf	(_Temp^(0+128)+3)
  5287                           
  5288                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5289  0E52  10D1               	bcf	_Temp^(0+128),1
  5290                           
  5291                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5292  0E53  3064               	movlw	100
  5293  0E54  0020               	movlb	0	; select bank0
  5294  0E55  00A9               	movwf	setBuz@time
  5295  0E56  3000               	movlw	0
  5296  0E57  00AA               	movwf	setBuz@time+1
  5297  0E58  3002               	movlw	2
  5298  0E59  3194  24F1  318D   	fcall	_setBuz
  5299                           
  5300                           ;OverTemperature_B1.c: 126: }
  5301                           ;OverTemperature_B1.c: 127: } else {
  5302  0E5C  2E74               	goto	l9816
  5303  0E5D                     l9804:	
  5304                           ;OverTemperature_B1.c: 129: }
  5305                           ;OverTemperature_B1.c: 130: } else {
  5306                           
  5307                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5308                           
  5309                           
  5310                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5311  0E5D  0020               	movlb	0	; select bank0
  5312  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5313  0E5F  026B               	subwf	setTemp_Main@DangerValue+1,w
  5314  0E60  1D03               	skipz
  5315  0E61  2E64               	goto	u11045
  5316  0E62  086C               	movf	setTemp_Main@AD,w
  5317  0E63  026A               	subwf	setTemp_Main@DangerValue,w
  5318  0E64                     u11045:	
  5319  0E64  1C03               	skipc
  5320  0E65  2E72               	goto	l9814
  5321                           
  5322                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5323  0E66  3001               	movlw	1
  5324  0E67  00E5               	movwf	??_setTemp_Main
  5325  0E68  0865               	movf	??_setTemp_Main,w
  5326  0E69  0021               	movlb	1	; select bank1
  5327  0E6A  07D4               	addwf	(_Temp^(0+128)+3),f
  5328                           
  5329                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5330  0E6B  3003               	movlw	3
  5331  0E6C  0254               	subwf	(_Temp^(0+128)+3),w
  5332  0E6D  1C03               	skipc
  5333  0E6E  2E74               	goto	l9816
  5334                           
  5335                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5336  0E6F  01D4               	clrf	(_Temp^(0+128)+3)
  5337                           
  5338                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5339  0E70  14D1               	bsf	_Temp^(0+128),1
  5340                           
  5341                           ;OverTemperature_B1.c: 136: }
  5342                           ;OverTemperature_B1.c: 137: } else {
  5343  0E71  2E74               	goto	l9816
  5344  0E72                     l9814:	
  5345                           
  5346                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5347  0E72  0021               	movlb	1	; select bank1
  5348  0E73  01D4               	clrf	(_Temp^(0+128)+3)
  5349  0E74                     l9816:	
  5350                           
  5351                           ;OverTemperature_B1.c: 139: }
  5352                           ;OverTemperature_B1.c: 140: }
  5353                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5354  0E74  0020               	movlb	0	; select bank0
  5355  0E75  086D               	movf	setTemp_Main@AD+1,w
  5356  0E76  00E5               	movwf	??_setTemp_Main
  5357  0E77  0865               	movf	??_setTemp_Main,w
  5358  0E78  00E2               	movwf	setProductData@value
  5359  0E79  3018               	movlw	24
  5360  0E7A  319B  23CF  318D   	fcall	_setProductData
  5361                           
  5362                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5363  0E7D  0020               	movlb	0	; select bank0
  5364  0E7E  086C               	movf	setTemp_Main@AD,w
  5365  0E7F  00E5               	movwf	??_setTemp_Main
  5366  0E80  0865               	movf	??_setTemp_Main,w
  5367  0E81  00E2               	movwf	setProductData@value
  5368  0E82  3019               	movlw	25
  5369  0E83  319B  23CF         	fcall	_setProductData
  5370  0E85                     l1798:	
  5371                           
  5372                           ;OverTemperature_B1.c: 158: }
  5373                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5374  0E85  0021               	movlb	1	; select bank1
  5375  0E86  01D5               	clrf	(_Temp^(0+128)+4)
  5376  0E87  01D6               	clrf	((_Temp+1)^(0+128)+4)
  5377                           
  5378                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5379  0E88  01D7               	clrf	(_Temp^(0+128)+6)
  5380  0E89  01D8               	clrf	((_Temp+1)^(0+128)+6)
  5381                           
  5382                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5383  0E8A  01D9               	clrf	(_Temp^(0+128)+8)
  5384  0E8B  01DA               	clrf	((_Temp+1)^(0+128)+8)
  5385                           
  5386                           ;OverTemperature_B1.c: 162: }
  5387                           ;OverTemperature_B1.c: 163: }
  5388                           ;OverTemperature_B1.c: 166: } else {
  5389  0E8C  0008               	return
  5390  0E8D                     l1787:	
  5391                           
  5392                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5393  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5394  0E8E  0008               	return
  5395                           
  5396                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5397  0E8F  1451               	bsf	_Temp^(0+128),0
  5398  0E90  0008               	return
  5399  0E91                     __end_of_setTemp_Main:	
  5400                           
  5401                           	psect	text10
  5402  1AFB                     __ptext10:	
  5403 ;; *************** function _Temp_Initialization *****************
  5404 ;; Defined at:
  5405 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;		None
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;		None
  5410 ;; Return value:  Size  Location     Type
  5411 ;;		None               void
  5412 ;; Registers used:
  5413 ;;		status,2, status,0, pclath, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;Total ram usage:        0 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    6
  5426 ;; This function calls:
  5427 ;;		_setTemp_Initialization
  5428 ;; This function is called by:
  5429 ;;		_main
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _Temp_Initialization
  5435  1AFB                     _Temp_Initialization:	
  5436                           
  5437                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5441  1AFB  319A  22EE         	fcall	_setTemp_Initialization
  5442  1AFD  0008               	return
  5443  1AFE                     __end_of_Temp_Initialization:	
  5444                           
  5445                           	psect	text11
  5446  1AEE                     __ptext11:	
  5447 ;; *************** function _setTemp_Initialization *****************
  5448 ;; Defined at:
  5449 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		None
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;Total ram usage:        0 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    5
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_Temp_Initialization
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _setTemp_Initialization
  5479  1AEE                     _setTemp_Initialization:	
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _setTemp_Initialization: []
  5483  1AEE  0008               	return
  5484  1AEF                     __end_of_setTemp_Initialization:	
  5485                           
  5486                           	psect	text12
  5487  1000                     __ptext12:	
  5488 ;; *************** function _Switch_Main *****************
  5489 ;; Defined at:
  5490 ;;		line 76 in file "../src/Switch_B1.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;		None
  5495 ;; Return value:  Size  Location     Type
  5496 ;;		None               void
  5497 ;; Registers used:
  5498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;Total ram usage:        0 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    9
  5511 ;; This function calls:
  5512 ;;		_TouchPower
  5513 ;;		_setSw_Main
  5514 ;; This function is called by:
  5515 ;;		_main
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _Switch_Main
  5521  1000                     _Switch_Main:	
  5522                           
  5523                           ;Switch_B1.c: 79: setSw_Main(1);
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5527  1000  3001               	movlw	1
  5528  1001  3182  2205  3190   	fcall	_setSw_Main
  5529                           
  5530                           ;Switch_B1.c: 91: TouchPower();
  5531  1004  319E  2603         	fcall	_TouchPower
  5532  1006  0008               	return
  5533  1007                     __end_of_Switch_Main:	
  5534                           
  5535                           	psect	text13
  5536  0205                     __ptext13:	
  5537 ;; *************** function _setSw_Main *****************
  5538 ;; Defined at:
  5539 ;;		line 117 in file "../src/Switch_B1.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  sw              1    wreg     unsigned char 
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  sw              1   17[BANK0 ] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;		None               void
  5546 ;; Registers used:
  5547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;Total ram usage:        3 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    8
  5560 ;; This function calls:
  5561 ;;		_SwPointSelect
  5562 ;;		_getMain_All_Error_Status
  5563 ;;		_getSw_KeyStatus
  5564 ;;		_setBuz
  5565 ;;		_setDimmerLights_DimmingOn
  5566 ;;		_setDimmerLights_SwOff
  5567 ;;		_setDimmerLights_SwOn
  5568 ;;		_setRF_Learn
  5569 ;; This function is called by:
  5570 ;;		_Switch_Main
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function _setSw_Main
  5576  0205                     _setSw_Main:	
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5580                           ;setSw_Main@sw stored from wreg
  5581  0205  0020               	movlb	0	; select bank0
  5582  0206  00B1               	movwf	setSw_Main@sw
  5583                           
  5584                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5585  0207  0831               	movf	setSw_Main@sw,w
  5586  0208  319C  243B  3182   	fcall	_SwPointSelect
  5587                           
  5588                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5589  020B  0021               	movlb	1	; select bank1
  5590  020C  084E               	movf	_Sw^(0+128),w
  5591  020D  0086               	movwf	6
  5592  020E  3001               	movlw	1	; select bank2/3
  5593  020F  0087               	movwf	7
  5594  0210  1C01               	btfss	1,0
  5595  0211  2B81               	goto	l2497
  5596                           
  5597                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5598  0212  3000               	movlw	0
  5599  0213  3191  218C  3182   	fcall	_getMain_All_Error_Status
  5600  0216  3800               	iorlw	0
  5601  0217  1D03               	skipz
  5602  0218  2A37               	goto	l9912
  5603                           
  5604                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5605  0219  0021               	movlb	1	; select bank1
  5606  021A  0A4E               	incf	_Sw^(0+128),w
  5607  021B  0086               	movwf	6
  5608  021C  3001               	movlw	1	; select bank2/3
  5609  021D  0087               	movwf	7
  5610  021E  1081               	bcf	1,1
  5611                           
  5612                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5613  021F  0020               	movlb	0	; select bank0
  5614  0220  0831               	movf	setSw_Main@sw,w
  5615  0221  319C  24E6  3182   	fcall	_getSw_KeyStatus
  5616  0224  3A01               	xorlw	1
  5617  0225  3000               	movlw	0
  5618  0226  1903               	skipnz
  5619  0227  3001               	movlw	1
  5620  0228  0020               	movlb	0	; select bank0
  5621  0229  00AF               	movwf	??_setSw_Main
  5622  022A  0021               	movlb	1	; select bank1
  5623  022B  084E               	movf	_Sw^(0+128),w
  5624  022C  0086               	movwf	6
  5625  022D  3001               	movlw	1	; select bank2/3
  5626  022E  0087               	movwf	7
  5627  022F  0020               	movlb	0	; select bank0
  5628  0230  0DAF               	rlf	??_setSw_Main,f
  5629  0231  0801               	movf	1,w
  5630  0232  062F               	xorwf	??_setSw_Main,w
  5631  0233  39FD               	andlw	-3
  5632  0234  062F               	xorwf	??_setSw_Main,w
  5633  0235  0081               	movwf	1
  5634                           
  5635                           ;Switch_B1.c: 124: } else {
  5636  0236  2A4D               	goto	l2499
  5637  0237                     l9912:	
  5638                           
  5639                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5640  0237  0021               	movlb	1	; select bank1
  5641  0238  0A4E               	incf	_Sw^(0+128),w
  5642  0239  0086               	movwf	6
  5643  023A  3001               	movlw	1	; select bank2/3
  5644  023B  0087               	movwf	7
  5645  023C  1881               	btfsc	1,1
  5646  023D  2A4D               	goto	l2499
  5647                           
  5648                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5649  023E  0A4E               	incf	_Sw^(0+128),w
  5650  023F  0086               	movwf	6
  5651  0240  3001               	movlw	1	; select bank2/3
  5652  0241  0087               	movwf	7
  5653  0242  1481               	bsf	1,1
  5654                           
  5655                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5656  0243  084E               	movf	_Sw^(0+128),w
  5657  0244  0086               	movwf	6
  5658  0245  3001               	movlw	1	; select bank2/3
  5659  0246  0087               	movwf	7
  5660  0247  1081               	bcf	1,1
  5661                           
  5662                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5663  0248  084E               	movf	_Sw^(0+128),w
  5664  0249  0086               	movwf	6
  5665  024A  3001               	movlw	1	; select bank2/3
  5666  024B  0087               	movwf	7
  5667  024C  1501               	bsf	1,2
  5668  024D                     l2499:	
  5669                           
  5670                           ;Switch_B1.c: 130: }
  5671                           ;Switch_B1.c: 131: }
  5672                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5673  024D  0021               	movlb	1	; select bank1
  5674  024E  084E               	movf	_Sw^(0+128),w
  5675  024F  0086               	movwf	6
  5676  0250  3001               	movlw	1	; select bank2/3
  5677  0251  0087               	movwf	7
  5678  0252  1C81               	btfss	1,1
  5679  0253  2B29               	goto	l9962
  5680                           
  5681                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5682  0254  084E               	movf	_Sw^(0+128),w
  5683  0255  0086               	movwf	6
  5684  0256  3001               	movlw	1	; select bank2/3
  5685  0257  0087               	movwf	7
  5686  0258  1901               	btfsc	1,2
  5687  0259  2A80               	goto	l9928
  5688                           
  5689                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5690  025A  3001               	movlw	1
  5691  025B  0020               	movlb	0	; select bank0
  5692  025C  00AF               	movwf	??_setSw_Main
  5693  025D  0021               	movlb	1	; select bank1
  5694  025E  084E               	movf	_Sw^(0+128),w
  5695  025F  3E02               	addlw	2
  5696  0260  0086               	movwf	6
  5697  0261  3001               	movlw	1	; select bank2/3
  5698  0262  0087               	movwf	7
  5699  0263  0020               	movlb	0	; select bank0
  5700  0264  082F               	movf	??_setSw_Main,w
  5701  0265  0781               	addwf	1,f
  5702                           
  5703                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5704  0266  0021               	movlb	1	; select bank1
  5705  0267  084E               	movf	_Sw^(0+128),w
  5706  0268  3E02               	addlw	2
  5707  0269  0086               	movwf	6
  5708  026A  3001               	movlw	1	; select bank2/3
  5709  026B  0087               	movwf	7
  5710  026C  3003               	movlw	3
  5711  026D  0201               	subwf	1,w
  5712  026E  1C03               	skipc
  5713  026F  0008               	return
  5714                           
  5715                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5716  0270  084E               	movf	_Sw^(0+128),w
  5717  0271  3E02               	addlw	2
  5718  0272  0086               	movwf	6
  5719  0273  3001               	movlw	1	; select bank2/3
  5720  0274  0087               	movwf	7
  5721  0275  0181               	clrf	1
  5722                           
  5723                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5724  0276  084E               	movf	_Sw^(0+128),w
  5725  0277  0086               	movwf	6
  5726  0278  3001               	movlw	1	; select bank2/3
  5727  0279  0087               	movwf	7
  5728  027A  1501               	bsf	1,2
  5729                           
  5730                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5731  027B  0020               	movlb	0	; select bank0
  5732  027C  0831               	movf	setSw_Main@sw,w
  5733  027D  3191  21F3         	fcall	_setDimmerLights_SwOn
  5734                           
  5735                           ;Switch_B1.c: 146: }
  5736                           ;Switch_B1.c: 147: } else {
  5737  027F  0008               	return
  5738  0280                     l9928:	
  5739                           
  5740                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5741  0280  0021               	movlb	1	; select bank1
  5742  0281  084E               	movf	_Sw^(0+128),w
  5743  0282  0086               	movwf	6
  5744  0283  3001               	movlw	1	; select bank2/3
  5745  0284  0087               	movwf	7
  5746  0285  1981               	btfsc	1,3
  5747  0286  2AB5               	goto	l9938
  5748                           
  5749                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5750  0287  084E               	movf	_Sw^(0+128),w
  5751  0288  3E03               	addlw	3
  5752  0289  0086               	movwf	6
  5753  028A  3001               	movlw	1	; select bank2/3
  5754  028B  0087               	movwf	7
  5755  028C  3001               	movlw	1
  5756  028D  0781               	addwf	1,f
  5757  028E  3141               	addfsr 1,1
  5758  028F  1803               	skipnc
  5759  0290  0A81               	incf	1,f
  5760                           
  5761                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5762  0291  084E               	movf	_Sw^(0+128),w
  5763  0292  3E03               	addlw	3
  5764  0293  0086               	movwf	6
  5765  0294  3001               	movlw	1	; select bank2/3
  5766  0295  0087               	movwf	7
  5767  0296  3F40               	moviw [0]fsr1
  5768  0297  0020               	movlb	0	; select bank0
  5769  0298  00AF               	movwf	??_setSw_Main
  5770  0299  3F41               	moviw [1]fsr1
  5771  029A  00B0               	movwf	??_setSw_Main+1
  5772  029B  3000               	movlw	0
  5773  029C  0230               	subwf	??_setSw_Main+1,w
  5774  029D  304B               	movlw	75
  5775  029E  1903               	skipnz
  5776  029F  022F               	subwf	??_setSw_Main,w
  5777  02A0  1C03               	skipc
  5778  02A1  0008               	return
  5779                           
  5780                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5781  02A2  0021               	movlb	1	; select bank1
  5782  02A3  084E               	movf	_Sw^(0+128),w
  5783  02A4  3E03               	addlw	3
  5784  02A5  0086               	movwf	6
  5785  02A6  3001               	movlw	1	; select bank2/3
  5786  02A7  0087               	movwf	7
  5787  02A8  3000               	movlw	0
  5788  02A9  3FC0               	movwi [0]fsr1
  5789  02AA  3FC1               	movwi [1]fsr1
  5790                           
  5791                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5792  02AB  084E               	movf	_Sw^(0+128),w
  5793  02AC  0086               	movwf	6
  5794  02AD  3001               	movlw	1	; select bank2/3
  5795  02AE  0087               	movwf	7
  5796  02AF  1581               	bsf	1,3
  5797                           
  5798                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5799  02B0  0020               	movlb	0	; select bank0
  5800  02B1  0831               	movf	setSw_Main@sw,w
  5801  02B2  3190  20DA         	fcall	_setDimmerLights_DimmingOn
  5802                           
  5803                           ;Switch_B1.c: 161: }
  5804                           ;Switch_B1.c: 162: } else {
  5805  02B4  0008               	return
  5806  02B5                     l9938:	
  5807                           
  5808                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5809  02B5  0021               	movlb	1	; select bank1
  5810  02B6  084E               	movf	_Sw^(0+128),w
  5811  02B7  0086               	movwf	6
  5812  02B8  3001               	movlw	1	; select bank2/3
  5813  02B9  0087               	movwf	7
  5814  02BA  1A01               	btfsc	1,4
  5815  02BB  2AF5               	goto	l9952
  5816                           
  5817                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5818  02BC  084E               	movf	_Sw^(0+128),w
  5819  02BD  3E05               	addlw	5
  5820  02BE  0086               	movwf	6
  5821  02BF  3001               	movlw	1	; select bank2/3
  5822  02C0  0087               	movwf	7
  5823  02C1  3001               	movlw	1
  5824  02C2  0781               	addwf	1,f
  5825  02C3  3141               	addfsr 1,1
  5826  02C4  1803               	skipnc
  5827  02C5  0A81               	incf	1,f
  5828                           
  5829                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5830  02C6  084E               	movf	_Sw^(0+128),w
  5831  02C7  3E05               	addlw	5
  5832  02C8  0086               	movwf	6
  5833  02C9  3001               	movlw	1	; select bank2/3
  5834  02CA  0087               	movwf	7
  5835  02CB  3F40               	moviw [0]fsr1
  5836  02CC  0020               	movlb	0	; select bank0
  5837  02CD  00AF               	movwf	??_setSw_Main
  5838  02CE  3F41               	moviw [1]fsr1
  5839  02CF  00B0               	movwf	??_setSw_Main+1
  5840  02D0  3000               	movlw	0
  5841  02D1  0230               	subwf	??_setSw_Main+1,w
  5842  02D2  304B               	movlw	75
  5843  02D3  1903               	skipnz
  5844  02D4  022F               	subwf	??_setSw_Main,w
  5845  02D5  1C03               	skipc
  5846  02D6  0008               	return
  5847                           
  5848                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5849  02D7  0021               	movlb	1	; select bank1
  5850  02D8  084E               	movf	_Sw^(0+128),w
  5851  02D9  3E05               	addlw	5
  5852  02DA  0086               	movwf	6
  5853  02DB  3001               	movlw	1	; select bank2/3
  5854  02DC  0087               	movwf	7
  5855  02DD  3000               	movlw	0
  5856  02DE  3FC0               	movwi [0]fsr1
  5857  02DF  3FC1               	movwi [1]fsr1
  5858                           
  5859                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5860  02E0  084E               	movf	_Sw^(0+128),w
  5861  02E1  0086               	movwf	6
  5862  02E2  3001               	movlw	1	; select bank2/3
  5863  02E3  0087               	movwf	7
  5864  02E4  1601               	bsf	1,4
  5865                           
  5866                           ;Switch_B1.c: 171: setRF_Learn(1);
  5867  02E5  3001               	movlw	1
  5868  02E6  319D  25B0  3182   	fcall	_setRF_Learn
  5869                           
  5870                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5871  02E9  0021               	movlb	1	; select bank1
  5872  02EA  1EAE               	btfss	_myMain^(0+128),5
  5873  02EB  0008               	return
  5874                           
  5875                           ;Switch_B1.c: 173: setBuz(2, 100);
  5876  02EC  3064               	movlw	100
  5877  02ED  0020               	movlb	0	; select bank0
  5878  02EE  00A9               	movwf	setBuz@time
  5879  02EF  3000               	movlw	0
  5880  02F0  00AA               	movwf	setBuz@time+1
  5881  02F1  3002               	movlw	2
  5882  02F2  3194  24F1         	fcall	_setBuz
  5883                           
  5884                           ;Switch_B1.c: 174: }
  5885                           ;Switch_B1.c: 178: }
  5886                           ;Switch_B1.c: 179: } else {
  5887  02F4  0008               	return
  5888  02F5                     l9952:	
  5889                           
  5890                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5891  02F5  0021               	movlb	1	; select bank1
  5892  02F6  084E               	movf	_Sw^(0+128),w
  5893  02F7  0086               	movwf	6
  5894  02F8  3001               	movlw	1	; select bank2/3
  5895  02F9  0087               	movwf	7
  5896  02FA  1A81               	btfsc	1,5
  5897  02FB  0008               	return
  5898                           
  5899                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5900  02FC  084E               	movf	_Sw^(0+128),w
  5901  02FD  3E07               	addlw	7
  5902  02FE  0086               	movwf	6
  5903  02FF  3001               	movlw	1	; select bank2/3
  5904  0300  0087               	movwf	7
  5905  0301  3001               	movlw	1
  5906  0302  0781               	addwf	1,f
  5907  0303  3141               	addfsr 1,1
  5908  0304  1803               	skipnc
  5909  0305  0A81               	incf	1,f
  5910                           
  5911                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5912  0306  084E               	movf	_Sw^(0+128),w
  5913  0307  3E07               	addlw	7
  5914  0308  0086               	movwf	6
  5915  0309  3001               	movlw	1	; select bank2/3
  5916  030A  0087               	movwf	7
  5917  030B  3F40               	moviw [0]fsr1
  5918  030C  0020               	movlb	0	; select bank0
  5919  030D  00AF               	movwf	??_setSw_Main
  5920  030E  3F41               	moviw [1]fsr1
  5921  030F  00B0               	movwf	??_setSw_Main+1
  5922  0310  3000               	movlw	0
  5923  0311  0230               	subwf	??_setSw_Main+1,w
  5924  0312  3096               	movlw	150
  5925  0313  1903               	skipnz
  5926  0314  022F               	subwf	??_setSw_Main,w
  5927  0315  1C03               	skipc
  5928  0316  0008               	return
  5929                           
  5930                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5931  0317  0021               	movlb	1	; select bank1
  5932  0318  084E               	movf	_Sw^(0+128),w
  5933  0319  3E07               	addlw	7
  5934  031A  0086               	movwf	6
  5935  031B  3001               	movlw	1	; select bank2/3
  5936  031C  0087               	movwf	7
  5937  031D  3000               	movlw	0
  5938  031E  3FC0               	movwi [0]fsr1
  5939  031F  3FC1               	movwi [1]fsr1
  5940                           
  5941                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5942  0320  084E               	movf	_Sw^(0+128),w
  5943  0321  0086               	movwf	6
  5944  0322  3001               	movlw	1	; select bank2/3
  5945  0323  0087               	movwf	7
  5946  0324  1681               	bsf	1,5
  5947                           
  5948                           ;Switch_B1.c: 187: setRF_Learn(0);
  5949  0325  3000               	movlw	0
  5950  0326  319D  25B0         	fcall	_setRF_Learn
  5951                           
  5952                           ;Switch_B1.c: 190: }
  5953                           ;Switch_B1.c: 191: }
  5954                           ;Switch_B1.c: 192: }
  5955                           ;Switch_B1.c: 194: }
  5956                           ;Switch_B1.c: 195: }
  5957                           ;Switch_B1.c: 196: } else {
  5958  0328  0008               	return
  5959  0329                     l9962:	
  5960                           
  5961                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5962  0329  0021               	movlb	1	; select bank1
  5963  032A  084E               	movf	_Sw^(0+128),w
  5964  032B  0086               	movwf	6
  5965  032C  3001               	movlw	1	; select bank2/3
  5966  032D  0087               	movwf	7
  5967  032E  1D01               	btfss	1,2
  5968  032F  0008               	return
  5969                           
  5970                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5971  0330  3001               	movlw	1
  5972  0331  0020               	movlb	0	; select bank0
  5973  0332  00AF               	movwf	??_setSw_Main
  5974  0333  0021               	movlb	1	; select bank1
  5975  0334  084E               	movf	_Sw^(0+128),w
  5976  0335  3E02               	addlw	2
  5977  0336  0086               	movwf	6
  5978  0337  3001               	movlw	1	; select bank2/3
  5979  0338  0087               	movwf	7
  5980  0339  0020               	movlb	0	; select bank0
  5981  033A  082F               	movf	??_setSw_Main,w
  5982  033B  0781               	addwf	1,f
  5983                           
  5984                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5985  033C  0021               	movlb	1	; select bank1
  5986  033D  084E               	movf	_Sw^(0+128),w
  5987  033E  3E02               	addlw	2
  5988  033F  0086               	movwf	6
  5989  0340  3001               	movlw	1	; select bank2/3
  5990  0341  0087               	movwf	7
  5991  0342  3003               	movlw	3
  5992  0343  0201               	subwf	1,w
  5993  0344  1C03               	skipc
  5994  0345  0008               	return
  5995                           
  5996                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5997  0346  084E               	movf	_Sw^(0+128),w
  5998  0347  3E02               	addlw	2
  5999  0348  0086               	movwf	6
  6000  0349  3001               	movlw	1	; select bank2/3
  6001  034A  0087               	movwf	7
  6002  034B  0181               	clrf	1
  6003                           
  6004                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6005  034C  084E               	movf	_Sw^(0+128),w
  6006  034D  0086               	movwf	6
  6007  034E  3001               	movlw	1	; select bank2/3
  6008  034F  0087               	movwf	7
  6009  0350  1101               	bcf	1,2
  6010                           
  6011                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6012  0351  084E               	movf	_Sw^(0+128),w
  6013  0352  3E03               	addlw	3
  6014  0353  0086               	movwf	6
  6015  0354  3001               	movlw	1	; select bank2/3
  6016  0355  0087               	movwf	7
  6017  0356  3000               	movlw	0
  6018  0357  3FC0               	movwi [0]fsr1
  6019  0358  3FC1               	movwi [1]fsr1
  6020                           
  6021                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6022  0359  084E               	movf	_Sw^(0+128),w
  6023  035A  0086               	movwf	6
  6024  035B  3001               	movlw	1	; select bank2/3
  6025  035C  0087               	movwf	7
  6026  035D  1181               	bcf	1,3
  6027                           
  6028                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6029  035E  084E               	movf	_Sw^(0+128),w
  6030  035F  0086               	movwf	6
  6031  0360  3001               	movlw	1	; select bank2/3
  6032  0361  0087               	movwf	7
  6033  0362  1201               	bcf	1,4
  6034                           
  6035                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6036  0363  084E               	movf	_Sw^(0+128),w
  6037  0364  0086               	movwf	6
  6038  0365  3001               	movlw	1	; select bank2/3
  6039  0366  0087               	movwf	7
  6040  0367  1281               	bcf	1,5
  6041                           
  6042                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6043  0368  084E               	movf	_Sw^(0+128),w
  6044  0369  3E05               	addlw	5
  6045  036A  0086               	movwf	6
  6046  036B  3001               	movlw	1	; select bank2/3
  6047  036C  0087               	movwf	7
  6048  036D  3000               	movlw	0
  6049  036E  3FC0               	movwi [0]fsr1
  6050  036F  3FC1               	movwi [1]fsr1
  6051                           
  6052                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6053  0370  084E               	movf	_Sw^(0+128),w
  6054  0371  3E07               	addlw	7
  6055  0372  0086               	movwf	6
  6056  0373  3001               	movlw	1	; select bank2/3
  6057  0374  0087               	movwf	7
  6058  0375  3000               	movlw	0
  6059  0376  3FC0               	movwi [0]fsr1
  6060  0377  3FC1               	movwi [1]fsr1
  6061                           
  6062                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6063  0378  0020               	movlb	0	; select bank0
  6064  0379  0831               	movf	setSw_Main@sw,w
  6065  037A  3192  2295  3182   	fcall	_setDimmerLights_SwOff
  6066                           
  6067                           ;Switch_B1.c: 219: setRF_Learn(0);
  6068  037D  3000               	movlw	0
  6069  037E  319D  25B0         	fcall	_setRF_Learn
  6070                           
  6071                           ;Switch_B1.c: 221: }
  6072                           ;Switch_B1.c: 222: }
  6073                           ;Switch_B1.c: 223: }
  6074                           ;Switch_B1.c: 224: } else {
  6075  0380  0008               	return
  6076  0381                     l2497:	
  6077                           
  6078                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6079  0381  1C2E               	btfss	_myMain^(0+128),0
  6080  0382  0008               	return
  6081                           
  6082                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6083  0383  084E               	movf	_Sw^(0+128),w
  6084  0384  0086               	movwf	6
  6085  0385  3001               	movlw	1	; select bank2/3
  6086  0386  0087               	movwf	7
  6087  0387  1401               	bsf	1,0
  6088  0388  0008               	return
  6089  0389                     __end_of_setSw_Main:	
  6090                           
  6091                           	psect	text14
  6092  1DB0                     __ptext14:	
  6093 ;; *************** function _setRF_Learn *****************
  6094 ;; Defined at:
  6095 ;;		line 33 in file "../src/RF_Control_B1.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  command         1    wreg     unsigned char 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  command         1    1[BANK0 ] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;		None               void
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;Total ram usage:        2 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    5
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_setSw_Main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function _setRF_Learn
  6125  1DB0                     _setRF_Learn:	
  6126                           
  6127                           ;incstack = 0
  6128                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6129                           ;setRF_Learn@command stored from wreg
  6130  1DB0  0020               	movlb	0	; select bank0
  6131  1DB1  00A1               	movwf	setRF_Learn@command
  6132                           
  6133                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6134  1DB2  0821               	movf	setRF_Learn@command,w
  6135  1DB3  3A01               	xorlw	1
  6136  1DB4  3000               	movlw	0
  6137  1DB5  1903               	skipnz
  6138  1DB6  3001               	movlw	1
  6139  1DB7  00A0               	movwf	??_setRF_Learn
  6140  1DB8  0EA0               	swapf	??_setRF_Learn,f
  6141  1DB9  0DA0               	rlf	??_setRF_Learn,f
  6142  1DBA  0DA0               	rlf	??_setRF_Learn,f
  6143  1DBB  0021               	movlb	1	; select bank1
  6144  1DBC  0820               	movf	_RF1^(0+128),w
  6145  1DBD  0020               	movlb	0	; select bank0
  6146  1DBE  0620               	xorwf	??_setRF_Learn,w
  6147  1DBF  39BF               	andlw	-65
  6148  1DC0  0620               	xorwf	??_setRF_Learn,w
  6149  1DC1  0021               	movlb	1	; select bank1
  6150  1DC2  00A0               	movwf	_RF1^(0+128)
  6151  1DC3  0008               	return
  6152  1DC4                     __end_of_setRF_Learn:	
  6153                           
  6154                           	psect	text15
  6155  10DA                     __ptext15:	
  6156 ;; *************** function _setDimmerLights_DimmingOn *****************
  6157 ;; Defined at:
  6158 ;;		line 758 in file "../src/Dimmer_B1.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  sw              1    wreg     unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  sw              1    2[BANK0 ] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;		None               void
  6165 ;; Registers used:
  6166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;Total ram usage:        1 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    6
  6179 ;; This function calls:
  6180 ;;		_DimmerLights_SelectPointer
  6181 ;; This function is called by:
  6182 ;;		_setSw_Main
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           
  6187                           ;psect for function _setDimmerLights_DimmingOn
  6188  10DA                     _setDimmerLights_DimmingOn:	
  6189                           
  6190                           ;incstack = 0
  6191                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6192                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6193  10DA  0020               	movlb	0	; select bank0
  6194  10DB  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6195                           
  6196                           ;Dimmer_B1.c: 764: DimmerLights_SelectPointer(sw);
  6197  10DC  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6198  10DD  319B  23C3  3190   	fcall	_DimmerLights_SelectPointer
  6199                           
  6200                           ;Dimmer_B1.c: 765: if (DimmerLights->Trigger == 0) {
  6201  10E0  0021               	movlb	1	; select bank1
  6202  10E1  084A               	movf	_DimmerLights^(0+128),w
  6203  10E2  0086               	movwf	6
  6204  10E3  3001               	movlw	1	; select bank2/3
  6205  10E4  0087               	movwf	7
  6206  10E5  1881               	btfsc	1,1
  6207  10E6  0008               	return
  6208                           
  6209                           ;Dimmer_B1.c: 766: if (DimmerLights->SwFlag == 1) {
  6210  10E7  084A               	movf	_DimmerLights^(0+128),w
  6211  10E8  0086               	movwf	6
  6212  10E9  3001               	movlw	1	; select bank2/3
  6213  10EA  0087               	movwf	7
  6214  10EB  1C01               	btfss	1,0
  6215  10EC  0008               	return
  6216                           
  6217                           ;Dimmer_B1.c: 767: DimmerLights->Status = 1;
  6218  10ED  0A4A               	incf	_DimmerLights^(0+128),w
  6219  10EE  0086               	movwf	6
  6220  10EF  3001               	movlw	1	; select bank2/3
  6221  10F0  0087               	movwf	7
  6222  10F1  1401               	bsf	1,0
  6223                           
  6224                           ;Dimmer_B1.c: 769: DimmerLights->DimmingSwFlag = 1;
  6225  10F2  084A               	movf	_DimmerLights^(0+128),w
  6226  10F3  0086               	movwf	6
  6227  10F4  3001               	movlw	1	; select bank2/3
  6228  10F5  0087               	movwf	7
  6229  10F6  1581               	bsf	1,3
  6230                           
  6231                           ;Dimmer_B1.c: 770: DimmerLights->DimmingTrigger = 1;
  6232  10F7  084A               	movf	_DimmerLights^(0+128),w
  6233  10F8  0086               	movwf	6
  6234  10F9  3001               	movlw	1	; select bank2/3
  6235  10FA  0087               	movwf	7
  6236  10FB  1601               	bsf	1,4
  6237                           
  6238                           ;Dimmer_B1.c: 771: DimmerLights->DimmingSwitch = 1;
  6239  10FC  084A               	movf	_DimmerLights^(0+128),w
  6240  10FD  0086               	movwf	6
  6241  10FE  3001               	movlw	1	; select bank2/3
  6242  10FF  0087               	movwf	7
  6243  1100  1681               	bsf	1,5
  6244  1101  0008               	return
  6245  1102                     __end_of_setDimmerLights_DimmingOn:	
  6246                           
  6247                           	psect	text16
  6248  1CE6                     __ptext16:	
  6249 ;; *************** function _getSw_KeyStatus *****************
  6250 ;; Defined at:
  6251 ;;		line 237 in file "../src/Switch_B1.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;  sw              1    wreg     unsigned char 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  sw              1    0[COMMON] unsigned char 
  6256 ;;  status          1    1[BANK0 ] unsigned char 
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      unsigned char 
  6259 ;; Registers used:
  6260 ;;		wreg, status,2
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;Total ram usage:        3 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    5
  6273 ;; This function calls:
  6274 ;;		Nothing
  6275 ;; This function is called by:
  6276 ;;		_setSw_Main
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           
  6281                           ;psect for function _getSw_KeyStatus
  6282  1CE6                     _getSw_KeyStatus:	
  6283                           
  6284                           ;Switch_B1.c: 238: char status = 0;
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6288  1CE6  0020               	movlb	0	; select bank0
  6289  1CE7  01A1               	clrf	getSw_KeyStatus@status
  6290                           
  6291                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6292  1CE8  01A2               	clrf	_getSw_KeyStatus$6390
  6293  1CE9  0AA2               	incf	_getSw_KeyStatus$6390,f
  6294  1CEA  1F0C               	btfss	12,6	;volatile
  6295  1CEB  1A0C               	btfsc	12,4	;volatile
  6296  1CEC  2CF1               	goto	l7070
  6297  1CED  1C0C               	btfss	12,0	;volatile
  6298  1CEE  1B8C               	btfsc	12,7	;volatile
  6299  1CEF  2CF1               	goto	l7070
  6300  1CF0  01A2               	clrf	_getSw_KeyStatus$6390
  6301  1CF1                     l7070:	
  6302  1CF1  0822               	movf	_getSw_KeyStatus$6390,w
  6303  1CF2  00A0               	movwf	??_getSw_KeyStatus
  6304  1CF3  0820               	movf	??_getSw_KeyStatus,w
  6305  1CF4  00A1               	movwf	getSw_KeyStatus@status
  6306                           
  6307                           ;Switch_B1.c: 275: return status;
  6308  1CF5  0821               	movf	getSw_KeyStatus@status,w
  6309  1CF6  0008               	return
  6310  1CF7                     __end_of_getSw_KeyStatus:	
  6311                           
  6312                           	psect	text17
  6313  1C3B                     __ptext17:	
  6314 ;; *************** function _SwPointSelect *****************
  6315 ;; Defined at:
  6316 ;;		line 25 in file "../src/Switch_B1.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  sw              1    wreg     unsigned char 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  sw              1    1[BANK0 ] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;		None               void
  6323 ;; Registers used:
  6324 ;;		wreg
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;Total ram usage:        2 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    5
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_setSw_Main
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           
  6345                           ;psect for function _SwPointSelect
  6346  1C3B                     _SwPointSelect:	
  6347                           
  6348                           ;incstack = 0
  6349                           ; Regs used in _SwPointSelect: [wreg]
  6350                           ;SwPointSelect@sw stored from wreg
  6351  1C3B  0020               	movlb	0	; select bank0
  6352  1C3C  00A1               	movwf	SwPointSelect@sw
  6353                           
  6354                           ;Switch_B1.c: 28: if (sw == 1) {
  6355  1C3D  0821               	movf	SwPointSelect@sw,w
  6356  1C3E  3A01               	xorlw	1
  6357  1C3F  1D03               	skipz
  6358  1C40  0008               	return
  6359                           
  6360                           ;Switch_B1.c: 29: Sw = &Sw1;
  6361  1C41  30BE               	movlw	_Sw1& (0+255)
  6362  1C42  00A0               	movwf	??_SwPointSelect
  6363  1C43  0820               	movf	??_SwPointSelect,w
  6364  1C44  0021               	movlb	1	; select bank1
  6365  1C45  00CE               	movwf	_Sw^(0+128)
  6366  1C46  0008               	return
  6367  1C47                     __end_of_SwPointSelect:	
  6368                           
  6369                           	psect	text18
  6370  1E03                     __ptext18:	
  6371 ;; *************** function _TouchPower *****************
  6372 ;; Defined at:
  6373 ;;		line 10 in file "../src/Switch_B1.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;		None               void
  6380 ;; Registers used:
  6381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    6
  6394 ;; This function calls:
  6395 ;;		_Timeout_Counter
  6396 ;;		_set_TimeoutCleared
  6397 ;; This function is called by:
  6398 ;;		_Switch_Main
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           
  6403                           ;psect for function _TouchPower
  6404  1E03                     _TouchPower:	
  6405                           
  6406                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6407                           
  6408                           ;incstack = 0
  6409                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6410  1E03  0021               	movlb	1	; select bank1
  6411  1E04  1C2E               	btfss	_myMain^(0+128),0
  6412  1E05  0008               	return
  6413                           
  6414                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6415  1E06  0020               	movlb	0	; select bank0
  6416  1E07  180D               	btfsc	13,0	;volatile
  6417  1E08  0008               	return
  6418  1E09  2E0F               	goto	l7628
  6419  1E0A                     l2477:	
  6420                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6421                           
  6422                           
  6423                           ;Switch_B1.c: 14: RB0 = 1;
  6424  1E0A  0020               	movlb	0	; select bank0
  6425  1E0B  140D               	bsf	13,0	;volatile
  6426                           
  6427                           ;Switch_B1.c: 15: Timeout_Counter();
  6428  1E0C  319D  25EE  319E   	fcall	_Timeout_Counter
  6429  1E0F                     l7628:	
  6430  1E0F  0020               	movlb	0	; select bank0
  6431  1E10  180D               	btfsc	13,0	;volatile
  6432  1E11  2E15               	goto	l7632
  6433  1E12  0021               	movlb	1	; select bank1
  6434  1E13  1D38               	btfss	(_myMain^(0+128)+10),2
  6435  1E14  2E0A               	goto	l2477
  6436  1E15                     l7632:	
  6437                           
  6438                           ;Switch_B1.c: 16: }
  6439                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6440  1E15  319B  2329         	fcall	_set_TimeoutCleared
  6441  1E17  0008               	return
  6442  1E18                     __end_of_TouchPower:	
  6443                           
  6444                           	psect	text19
  6445  1B29                     __ptext19:	
  6446 ;; *************** function _set_TimeoutCleared *****************
  6447 ;; Defined at:
  6448 ;;		line 281 in file "../src/Main_B1.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;		None
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;		None
  6453 ;; Return value:  Size  Location     Type
  6454 ;;		None               void
  6455 ;; Registers used:
  6456 ;;		status,2
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;Total ram usage:        0 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    5
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_getAD
  6473 ;;		_TouchPower
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _set_TimeoutCleared
  6479  1B29                     _set_TimeoutCleared:	
  6480                           
  6481                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6482                           
  6483                           ;incstack = 0
  6484                           ; Regs used in _set_TimeoutCleared: [status,2]
  6485  1B29  0021               	movlb	1	; select bank1
  6486  1B2A  1138               	bcf	(_myMain^(0+128)+10),2
  6487                           
  6488                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6489  1B2B  01B9               	clrf	(_myMain^(0+128)+11)
  6490  1B2C  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6491  1B2D  0008               	return
  6492  1B2E                     __end_of_set_TimeoutCleared:	
  6493                           
  6494                           	psect	text20
  6495  1DEE                     __ptext20:	
  6496 ;; *************** function _Timeout_Counter *****************
  6497 ;; Defined at:
  6498 ;;		line 272 in file "../src/Main_B1.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;		None
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;		None               void
  6505 ;; Registers used:
  6506 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;Total ram usage:        0 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    5
  6519 ;; This function calls:
  6520 ;;		Nothing
  6521 ;; This function is called by:
  6522 ;;		_getAD
  6523 ;;		_TouchPower
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           
  6528                           ;psect for function _Timeout_Counter
  6529  1DEE                     _Timeout_Counter:	
  6530                           
  6531                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6535  1DEE  3001               	movlw	1
  6536  1DEF  0021               	movlb	1	; select bank1
  6537  1DF0  07B9               	addwf	(_myMain^(0+128)+11),f
  6538  1DF1  3000               	movlw	0
  6539  1DF2  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6540                           
  6541                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6542  1DF3  300B               	movlw	11
  6543  1DF4  3EAE               	addlw	_myMain& (0+255)
  6544  1DF5  0086               	movwf	6
  6545  1DF6  0187               	clrf	7
  6546  1DF7  3F40               	moviw [0]fsr1
  6547  1DF8  3AA8               	xorlw	168
  6548  1DF9  1D03               	skipz
  6549  1DFA  2DFD               	goto	u6245
  6550  1DFB  3F41               	moviw [1]fsr1
  6551  1DFC  3A61               	xorlw	97
  6552  1DFD                     u6245:	
  6553  1DFD  1D03               	skipz
  6554  1DFE  0008               	return
  6555                           
  6556                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6557  1DFF  01B9               	clrf	(_myMain^(0+128)+11)
  6558  1E00  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6559                           
  6560                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6561  1E01  1538               	bsf	(_myMain^(0+128)+10),2
  6562  1E02  0008               	return
  6563  1E03                     __end_of_Timeout_Counter:	
  6564                           
  6565                           	psect	text21
  6566  1B25                     __ptext21:	
  6567 ;; *************** function _Switch_Initialization *****************
  6568 ;; Defined at:
  6569 ;;		line 46 in file "../src/Switch_B1.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;		None               void
  6576 ;; Registers used:
  6577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;Total ram usage:        0 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    8
  6590 ;; This function calls:
  6591 ;;		_setSw_Initialization
  6592 ;; This function is called by:
  6593 ;;		_main
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _Switch_Initialization
  6599  1B25                     _Switch_Initialization:	
  6600                           
  6601                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6602                           
  6603                           ;incstack = 0
  6604                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6605  1B25  3001               	movlw	1
  6606  1B26  319C  2481         	fcall	_setSw_Initialization
  6607  1B28  0008               	return
  6608  1B29                     __end_of_Switch_Initialization:	
  6609                           
  6610                           	psect	text22
  6611  1C81                     __ptext22:	
  6612 ;; *************** function _setSw_Initialization *****************
  6613 ;; Defined at:
  6614 ;;		line 66 in file "../src/Switch_B1.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  sw              1    wreg     unsigned char 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  sw              1    4[BANK0 ] unsigned char 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;		None               void
  6621 ;; Registers used:
  6622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    7
  6635 ;; This function calls:
  6636 ;;		_setLED
  6637 ;; This function is called by:
  6638 ;;		_Switch_Initialization
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _setSw_Initialization
  6644  1C81                     _setSw_Initialization:	
  6645                           
  6646                           ;incstack = 0
  6647                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6648                           ;setSw_Initialization@sw stored from wreg
  6649  1C81  0020               	movlb	0	; select bank0
  6650  1C82  00A4               	movwf	setSw_Initialization@sw
  6651                           
  6652                           ;Switch_B1.c: 68: setLED(sw, 1);
  6653  1C83  01A2               	clrf	setLED@command
  6654  1C84  0AA2               	incf	setLED@command,f
  6655  1C85  0824               	movf	setSw_Initialization@sw,w
  6656  1C86  3192  22CE  319C   	fcall	_setLED
  6657                           
  6658                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6659  1C89  0020               	movlb	0	; select bank0
  6660  1C8A  01A2               	clrf	setLED@command
  6661  1C8B  0AA2               	incf	setLED@command,f
  6662  1C8C  0824               	movf	setSw_Initialization@sw,w
  6663  1C8D  3E01               	addlw	1
  6664  1C8E  3192  22CE         	fcall	_setLED
  6665  1C90  0008               	return
  6666  1C91                     __end_of_setSw_Initialization:	
  6667                           
  6668                           	psect	text23
  6669  1AF8                     __ptext23:	
  6670 ;; *************** function _RF_Main *****************
  6671 ;; Defined at:
  6672 ;;		line 26 in file "../src/RF_Control_B1.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        0 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:   12
  6693 ;; This function calls:
  6694 ;;		_setRF_Main
  6695 ;; This function is called by:
  6696 ;;		_main
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _RF_Main
  6702  1AF8                     _RF_Main:	
  6703                           
  6704                           ;RF_Control_B1.c: 28: setRF_Main();
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6708  1AF8  3184  247F         	fcall	_setRF_Main
  6709  1AFA  0008               	return
  6710  1AFB                     __end_of_RF_Main:	
  6711                           
  6712                           	psect	text24
  6713  047F                     __ptext24:	
  6714 ;; *************** function _setRF_Main *****************
  6715 ;; Defined at:
  6716 ;;		line 53 in file "../src/RF_Control_B1.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  error           1    3[BANK1 ] unsigned char 
  6721 ;; Return value:  Size  Location     Type
  6722 ;;		None               void
  6723 ;; Registers used:
  6724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;Total ram usage:        2 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:   11
  6737 ;; This function calls:
  6738 ;;		_CC2500_PowerOnInitial
  6739 ;;		_CC2500_RxData
  6740 ;;		_CC2500_TxData
  6741 ;;		_CC2500_WriteCommand
  6742 ;;		_RF_RxDisable
  6743 ;;		___lwdiv
  6744 ;;		_getBuz_GO
  6745 ;;		_getRF_KeyStatus
  6746 ;;		_getRxData
  6747 ;; This function is called by:
  6748 ;;		_RF_Main
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _setRF_Main
  6754  047F                     _setRF_Main:	
  6755                           
  6756                           ;RF_Control_B1.c: 54: char error = 0;
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6760  047F  0021               	movlb	1	; select bank1
  6761  0480  01DE               	clrf	setRF_Main@error^(0+128)
  6762                           
  6763                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6764  0481  1C20               	btfss	_RF1^(0+128),0
  6765  0482  2D50               	goto	l2119
  6766                           
  6767                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6768  0483  319C  24C4  3184   	fcall	_getBuz_GO
  6769  0486  0020               	movlb	0	; select bank0
  6770  0487  0821               	movf	?_getBuz_GO+1,w
  6771  0488  0420               	iorwf	?_getBuz_GO,w
  6772  0489  1D03               	skipz
  6773  048A  2D31               	goto	l9878
  6774                           
  6775                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6776  048B  319C  24D5  3184   	fcall	_getRF_KeyStatus
  6777  048E  3A01               	xorlw	1
  6778  048F  3000               	movlw	0
  6779  0490  1903               	skipnz
  6780  0491  3001               	movlw	1
  6781  0492  0021               	movlb	1	; select bank1
  6782  0493  00DD               	movwf	??_setRF_Main^(0+128)
  6783  0494  0CDD               	rrf	??_setRF_Main^(0+128),f
  6784  0495  0CDD               	rrf	??_setRF_Main^(0+128),f
  6785  0496  0820               	movf	_RF1^(0+128),w
  6786  0497  065D               	xorwf	??_setRF_Main^(0+128),w
  6787  0498  397F               	andlw	-129
  6788  0499  065D               	xorwf	??_setRF_Main^(0+128),w
  6789  049A  00A0               	movwf	_RF1^(0+128)
  6790                           
  6791                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6792  049B  1FA0               	btfss	_RF1^(0+128),7
  6793  049C  2C9F               	goto	l2123
  6794  049D  1F20               	btfss	_RF1^(0+128),6
  6795  049E  2D31               	goto	l9878
  6796  049F                     l2123:	
  6797                           
  6798                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6799  049F  1D20               	btfss	_RF1^(0+128),2
  6800  04A0  2CF0               	goto	l2124
  6801                           
  6802                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6803  04A1  1B20               	btfsc	_RF1^(0+128),6
  6804  04A2  2CEB               	goto	l9850
  6805                           
  6806                           ;RF_Control_B1.c: 68: RF1.Count++;
  6807  04A3  3001               	movlw	1
  6808  04A4  07A2               	addwf	(_RF1^(0+128)+2),f
  6809  04A5  3000               	movlw	0
  6810  04A6  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6811                           
  6812                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6813  04A7  3014               	movlw	20
  6814  04A8  0020               	movlb	0	; select bank0
  6815  04A9  00A0               	movwf	___lwdiv@divisor
  6816  04AA  3000               	movlw	0
  6817  04AB  00A1               	movwf	___lwdiv@divisor+1
  6818  04AC  0021               	movlb	1	; select bank1
  6819  04AD  0828               	movf	((_RF1+1)^(0+128)+7),w
  6820  04AE  0020               	movlb	0	; select bank0
  6821  04AF  01A3               	clrf	___lwdiv@dividend+1
  6822  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  6823  04B1  0021               	movlb	1	; select bank1
  6824  04B2  0827               	movf	(_RF1^(0+128)+7),w
  6825  04B3  0020               	movlb	0	; select bank0
  6826  04B4  01A2               	clrf	___lwdiv@dividend
  6827  04B5  07A2               	addwf	___lwdiv@dividend,f
  6828  04B6  3192  225E  3184   	fcall	___lwdiv
  6829  04B9  0020               	movlb	0	; select bank0
  6830  04BA  0821               	movf	?___lwdiv+1,w
  6831  04BB  0021               	movlb	1	; select bank1
  6832  04BC  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6833  04BD  1D03               	skipz
  6834  04BE  2CC3               	goto	u11135
  6835  04BF  0020               	movlb	0	; select bank0
  6836  04C0  0820               	movf	?___lwdiv,w
  6837  04C1  0021               	movlb	1	; select bank1
  6838  04C2  0222               	subwf	(_RF1^(0+128)+2),w
  6839  04C3                     u11135:	
  6840  04C3  1C03               	skipc
  6841  04C4  2D31               	goto	l9878
  6842                           
  6843                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6844  04C5  3014               	movlw	20
  6845  04C6  0020               	movlb	0	; select bank0
  6846  04C7  00A0               	movwf	___lwdiv@divisor
  6847  04C8  3000               	movlw	0
  6848  04C9  00A1               	movwf	___lwdiv@divisor+1
  6849  04CA  0021               	movlb	1	; select bank1
  6850  04CB  0828               	movf	((_RF1+1)^(0+128)+7),w
  6851  04CC  0020               	movlb	0	; select bank0
  6852  04CD  01A3               	clrf	___lwdiv@dividend+1
  6853  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  6854  04CF  0021               	movlb	1	; select bank1
  6855  04D0  0827               	movf	(_RF1^(0+128)+7),w
  6856  04D1  0020               	movlb	0	; select bank0
  6857  04D2  01A2               	clrf	___lwdiv@dividend
  6858  04D3  07A2               	addwf	___lwdiv@dividend,f
  6859  04D4  3192  225E  3184   	fcall	___lwdiv
  6860  04D7  0020               	movlb	0	; select bank0
  6861  04D8  0821               	movf	?___lwdiv+1,w
  6862  04D9  0021               	movlb	1	; select bank1
  6863  04DA  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6864  04DB  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6865  04DC  0020               	movlb	0	; select bank0
  6866  04DD  0820               	movf	?___lwdiv,w
  6867  04DE  0021               	movlb	1	; select bank1
  6868  04DF  01A2               	clrf	(_RF1^(0+128)+2)
  6869  04E0  07A2               	addwf	(_RF1^(0+128)+2),f
  6870                           
  6871                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6872  04E1  1120               	bcf	_RF1^(0+128),2
  6873                           
  6874                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6875  04E2  01AA               	clrf	(_RF1^(0+128)+10)
  6876  04E3  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6877                           
  6878                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6879  04E4  319C  2472  3184   	fcall	_RF_RxDisable
  6880                           
  6881                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6882  04E7  3188  207D  3184   	fcall	_CC2500_TxData
  6883                           
  6884                           ;RF_Control_B1.c: 77: }
  6885                           ;RF_Control_B1.c: 78: } else {
  6886  04EA  2D31               	goto	l9878
  6887  04EB                     l9850:	
  6888                           
  6889                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6890  04EB  0021               	movlb	1	; select bank1
  6891  04EC  01A2               	clrf	(_RF1^(0+128)+2)
  6892  04ED  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6893                           
  6894                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6895  04EE  1120               	bcf	_RF1^(0+128),2
  6896                           
  6897                           ;RF_Control_B1.c: 81: }
  6898                           ;RF_Control_B1.c: 82: } else {
  6899  04EF  2D31               	goto	l9878
  6900  04F0                     l2124:	
  6901                           
  6902                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6903  04F0  1DA0               	btfss	_RF1^(0+128),3
  6904  04F1  2CFF               	goto	l9864
  6905                           
  6906                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6907  04F2  3188  2012  3184   	fcall	_CC2500_RxData
  6908                           
  6909                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6910  04F5  0021               	movlb	1	; select bank1
  6911  04F6  1CA0               	btfss	_RF1^(0+128),1
  6912  04F7  2D31               	goto	l9878
  6913                           
  6914                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6915  04F8  10A0               	bcf	_RF1^(0+128),1
  6916                           
  6917                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6918  04F9  01AA               	clrf	(_RF1^(0+128)+10)
  6919  04FA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6920                           
  6921                           ;RF_Control_B1.c: 97: getRxData();
  6922  04FB  318A  223A  3184   	fcall	_getRxData
  6923                           
  6924                           ;RF_Control_B1.c: 100: }
  6925                           ;RF_Control_B1.c: 101: } else {
  6926  04FE  2D31               	goto	l9878
  6927  04FF                     l9864:	
  6928                           
  6929                           ;RF_Control_B1.c: 102: RF1.Count++;
  6930  04FF  3001               	movlw	1
  6931  0500  0021               	movlb	1	; select bank1
  6932  0501  07A2               	addwf	(_RF1^(0+128)+2),f
  6933  0502  3000               	movlw	0
  6934  0503  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6935                           
  6936                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6937  0504  3014               	movlw	20
  6938  0505  0020               	movlb	0	; select bank0
  6939  0506  00A0               	movwf	___lwdiv@divisor
  6940  0507  3000               	movlw	0
  6941  0508  00A1               	movwf	___lwdiv@divisor+1
  6942  0509  0021               	movlb	1	; select bank1
  6943  050A  0828               	movf	((_RF1+1)^(0+128)+7),w
  6944  050B  0020               	movlb	0	; select bank0
  6945  050C  01A3               	clrf	___lwdiv@dividend+1
  6946  050D  07A3               	addwf	___lwdiv@dividend+1,f
  6947  050E  0021               	movlb	1	; select bank1
  6948  050F  0827               	movf	(_RF1^(0+128)+7),w
  6949  0510  0020               	movlb	0	; select bank0
  6950  0511  01A2               	clrf	___lwdiv@dividend
  6951  0512  07A2               	addwf	___lwdiv@dividend,f
  6952  0513  3192  225E  3184   	fcall	___lwdiv
  6953  0516  0020               	movlb	0	; select bank0
  6954  0517  0821               	movf	?___lwdiv+1,w
  6955  0518  0021               	movlb	1	; select bank1
  6956  0519  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6957  051A  1D03               	skipz
  6958  051B  2D20               	goto	u11165
  6959  051C  0020               	movlb	0	; select bank0
  6960  051D  0820               	movf	?___lwdiv,w
  6961  051E  0021               	movlb	1	; select bank1
  6962  051F  0222               	subwf	(_RF1^(0+128)+2),w
  6963  0520                     u11165:	
  6964  0520  1C03               	skipc
  6965  0521  2D31               	goto	l9878
  6966                           
  6967                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6968  0522  01A2               	clrf	(_RF1^(0+128)+2)
  6969  0523  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6970                           
  6971                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6972  0524  15A0               	bsf	_RF1^(0+128),3
  6973                           
  6974                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6975  0525  3036               	movlw	54
  6976  0526  319E  26DA  3184   	fcall	_CC2500_WriteCommand
  6977                           
  6978                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6979  0529  303A               	movlw	58
  6980  052A  319E  26DA  3184   	fcall	_CC2500_WriteCommand
  6981                           
  6982                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6983  052D  3034               	movlw	52
  6984  052E  319E  26DA  3184   	fcall	_CC2500_WriteCommand
  6985  0531                     l9878:	
  6986                           
  6987                           ;RF_Control_B1.c: 111: }
  6988                           ;RF_Control_B1.c: 112: }
  6989                           ;RF_Control_B1.c: 113: }
  6990                           ;RF_Control_B1.c: 114: }
  6991                           ;RF_Control_B1.c: 115: }
  6992                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6993  0531  3001               	movlw	1
  6994  0532  0021               	movlb	1	; select bank1
  6995  0533  07AA               	addwf	(_RF1^(0+128)+10),f
  6996  0534  3000               	movlw	0
  6997  0535  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6998                           
  6999                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7000  0536  300B               	movlw	11
  7001  0537  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7002  0538  30B9               	movlw	185
  7003  0539  1903               	skipnz
  7004  053A  022A               	subwf	(_RF1^(0+128)+10),w
  7005  053B  1C03               	skipc
  7006  053C  2D49               	goto	l9892
  7007                           
  7008                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7009  053D  01AA               	clrf	(_RF1^(0+128)+10)
  7010  053E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7011                           
  7012                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7013  053F  11A0               	bcf	_RF1^(0+128),3
  7014                           
  7015                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7016  0540  10A0               	bcf	_RF1^(0+128),1
  7017                           
  7018                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7019  0541  3036               	movlw	54
  7020  0542  319E  26DA  3184   	fcall	_CC2500_WriteCommand
  7021                           
  7022                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7023  0545  303A               	movlw	58
  7024  0546  319E  26DA  3184   	fcall	_CC2500_WriteCommand
  7025  0549                     l9892:	
  7026                           
  7027                           ;RF_Control_B1.c: 125: }
  7028                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7029  0549  0021               	movlb	1	; select bank1
  7030  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  7031  054B  0008               	return
  7032                           
  7033                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7034  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7035                           
  7036                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7037  054D  319D  25D9         	fcall	_CC2500_PowerOnInitial
  7038                           
  7039                           ;RF_Control_B1.c: 130: }
  7040                           ;RF_Control_B1.c: 132: } else {
  7041  054F  0008               	return
  7042  0550                     l2119:	
  7043                           
  7044                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7045  0550  1C2E               	btfss	_myMain^(0+128),0
  7046  0551  0008               	return
  7047                           
  7048                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7049  0552  1420               	bsf	_RF1^(0+128),0
  7050  0553  0008               	return
  7051  0554                     __end_of_setRF_Main:	
  7052                           
  7053                           	psect	text25
  7054  0A3A                     __ptext25:	
  7055 ;; *************** function _getRxData *****************
  7056 ;; Defined at:
  7057 ;;		line 227 in file "../src/RF_Control_B1.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;		None
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  error           1    1[BANK1 ] unsigned char 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;		None               void
  7064 ;; Registers used:
  7065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;Total ram usage:        2 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:   10
  7078 ;; This function calls:
  7079 ;;		_getMain_All_Error_Status
  7080 ;;		_setControl_Lights_Table
  7081 ;;		_setLog_Code
  7082 ;;		_setTxData
  7083 ;; This function is called by:
  7084 ;;		_setRF_Main
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function _getRxData
  7090  0A3A                     _getRxData:	
  7091                           
  7092                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7096  0A3A  0023               	movlb	3	; select bank3
  7097  0A3B  0820               	movf	_RF_Data^(0+384),w
  7098  0A3C  3AAA               	xorlw	170
  7099  0A3D  1D03               	skipz
  7100  0A3E  2A50               	goto	l9560
  7101  0A3F  0821               	movf	(_RF_Data^(0+384)+1),w
  7102  0A40  3A01               	xorlw	1
  7103  0A41  1D03               	skipz
  7104  0A42  2A50               	goto	l9560
  7105                           
  7106                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7107  0A43  3055               	movlw	85
  7108  0A44  0021               	movlb	1	; select bank1
  7109  0A45  00DB               	movwf	??_getRxData^(0+128)
  7110  0A46  0863               	movf	_product^(0+128),w
  7111  0A47  3E02               	addlw	2
  7112  0A48  0086               	movwf	6
  7113  0A49  3002               	movlw	2	; select bank4/5
  7114  0A4A  0087               	movwf	7
  7115  0A4B  085B               	movf	??_getRxData^(0+128),w
  7116  0A4C  0081               	movwf	1
  7117                           
  7118                           ;RF_Control_B1.c: 231: setTxData();
  7119  0A4D  318F  2745         	fcall	_setTxData
  7120                           
  7121                           ;RF_Control_B1.c: 235: } else {
  7122  0A4F  0008               	return
  7123  0A50                     l9560:	
  7124                           
  7125                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7126  0A50  3000               	movlw	0
  7127  0A51  3191  218C  318A   	fcall	_getMain_All_Error_Status
  7128  0A54  0021               	movlb	1	; select bank1
  7129  0A55  00DB               	movwf	??_getRxData^(0+128)
  7130  0A56  085B               	movf	??_getRxData^(0+128),w
  7131  0A57  00DC               	movwf	getRxData@error^(0+128)
  7132                           
  7133                           ;RF_Control_B1.c: 237: if (error == 0) {
  7134  0A58  08DC               	movf	getRxData@error^(0+128),f
  7135  0A59  1D03               	skipz
  7136  0A5A  2AAA               	goto	l2164
  7137                           
  7138                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7139  0A5B  1F20               	btfss	_RF1^(0+128),6
  7140  0A5C  2A68               	goto	l9572
  7141                           
  7142                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7143  0A5D  0023               	movlb	3	; select bank3
  7144  0A5E  08A0               	movf	_RF_Data^(0+384),f
  7145  0A5F  1D03               	skipz
  7146  0A60  0008               	return
  7147  0A61  0821               	movf	(_RF_Data^(0+384)+1),w
  7148  0A62  3A64               	xorlw	100
  7149  0A63  1D03               	skipz
  7150  0A64  0008               	return
  7151                           
  7152                           ;RF_Control_B1.c: 241: setLog_Code();
  7153  0A65  3191  21BF         	fcall	_setLog_Code
  7154                           
  7155                           ;RF_Control_B1.c: 242: }
  7156                           ;RF_Control_B1.c: 243: } else {
  7157  0A67  0008               	return
  7158  0A68                     l9572:	
  7159                           
  7160                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7161  0A68  0023               	movlb	3	; select bank3
  7162  0A69  0834               	movf	(_RF_Data^(0+384)+20),w
  7163  0A6A  3AD1               	xorlw	209
  7164  0A6B  1903               	skipnz
  7165  0A6C  2A71               	goto	l9576
  7166  0A6D  0834               	movf	(_RF_Data^(0+384)+20),w
  7167  0A6E  3A0A               	xorlw	10
  7168  0A6F  1D03               	skipz
  7169  0A70  0008               	return
  7170  0A71                     l9576:	
  7171                           
  7172                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7173  0A71  08A0               	movf	_RF_Data^(0+384),f
  7174  0A72  1D03               	skipz
  7175  0A73  0008               	return
  7176  0A74  0821               	movf	(_RF_Data^(0+384)+1),w
  7177  0A75  3A02               	xorlw	2
  7178  0A76  1D03               	skipz
  7179  0A77  0008               	return
  7180                           
  7181                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7182  0A78  082C               	movf	(_RF_Data^(0+384)+12),w
  7183  0A79  3AFF               	xorlw	255
  7184  0A7A  1D03               	skipz
  7185  0A7B  2A86               	goto	l9588
  7186  0A7C  082D               	movf	(_RF_Data^(0+384)+13),w
  7187  0A7D  3AFF               	xorlw	255
  7188  0A7E  1D03               	skipz
  7189  0A7F  2A86               	goto	l9588
  7190  0A80  082E               	movf	(_RF_Data^(0+384)+14),w
  7191  0A81  3AFF               	xorlw	255
  7192  0A82  1D03               	skipz
  7193  0A83  2A86               	goto	l9588
  7194                           
  7195                           ;RF_Control_B1.c: 249: __nop();
  7196  0A84  0000               	nop
  7197                           
  7198                           ;RF_Control_B1.c: 250: } else {
  7199  0A85  0008               	return
  7200  0A86                     l9588:	
  7201                           
  7202                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7203  0A86  0021               	movlb	1	; select bank1
  7204  0A87  0863               	movf	_product^(0+128),w
  7205  0A88  3E0C               	addlw	12
  7206  0A89  0086               	movwf	6
  7207  0A8A  3002               	movlw	2	; select bank4/5
  7208  0A8B  0087               	movwf	7
  7209  0A8C  0023               	movlb	3	; select bank3
  7210  0A8D  082C               	movf	(_RF_Data^(0+384)+12),w
  7211  0A8E  0601               	xorwf	1,w
  7212  0A8F  1D03               	skipz
  7213  0A90  0008               	return
  7214  0A91  0021               	movlb	1	; select bank1
  7215  0A92  0863               	movf	_product^(0+128),w
  7216  0A93  3E0D               	addlw	13
  7217  0A94  0086               	movwf	6
  7218  0A95  3002               	movlw	2	; select bank4/5
  7219  0A96  0087               	movwf	7
  7220  0A97  0023               	movlb	3	; select bank3
  7221  0A98  082D               	movf	(_RF_Data^(0+384)+13),w
  7222  0A99  0601               	xorwf	1,w
  7223  0A9A  1D03               	skipz
  7224  0A9B  0008               	return
  7225  0A9C  0021               	movlb	1	; select bank1
  7226  0A9D  0863               	movf	_product^(0+128),w
  7227  0A9E  3E0E               	addlw	14
  7228  0A9F  0086               	movwf	6
  7229  0AA0  3002               	movlw	2	; select bank4/5
  7230  0AA1  0087               	movwf	7
  7231  0AA2  0023               	movlb	3	; select bank3
  7232  0AA3  082E               	movf	(_RF_Data^(0+384)+14),w
  7233  0AA4  0601               	xorwf	1,w
  7234  0AA5  1D03               	skipz
  7235  0AA6  0008               	return
  7236                           
  7237                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7238  0AA7  3189  21C8         	fcall	_setControl_Lights_Table
  7239                           
  7240                           ;RF_Control_B1.c: 253: }
  7241                           ;RF_Control_B1.c: 254: }
  7242                           ;RF_Control_B1.c: 256: }
  7243                           ;RF_Control_B1.c: 267: }
  7244                           ;RF_Control_B1.c: 268: }
  7245                           ;RF_Control_B1.c: 269: } else {
  7246  0AA9  0008               	return
  7247  0AAA                     l2164:	
  7248                           
  7249                           ;RF_Control_B1.c: 270: __nop();
  7250  0AAA  0000               	nop
  7251  0AAB  0008               	return
  7252  0AAC                     __end_of_getRxData:	
  7253                           
  7254                           	psect	text26
  7255  11BF                     __ptext26:	
  7256 ;; *************** function _setLog_Code *****************
  7257 ;; Defined at:
  7258 ;;		line 276 in file "../src/RF_Control_B1.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;		None               void
  7265 ;; Registers used:
  7266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;Total ram usage:        1 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    7
  7279 ;; This function calls:
  7280 ;;		_setBuz
  7281 ;;		_setMemory_LoopSave
  7282 ;;		_setMemory_Modify
  7283 ;;		_setProductData
  7284 ;; This function is called by:
  7285 ;;		_getRxData
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function _setLog_Code
  7291  11BF                     _setLog_Code:	
  7292                           
  7293                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7297  11BF  0021               	movlb	1	; select bank1
  7298  11C0  1320               	bcf	_RF1^(0+128),6
  7299                           
  7300                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7301  11C1  0023               	movlb	3	; select bank3
  7302  11C2  082C               	movf	(_RF_Data^(0+384)+12),w
  7303  11C3  0020               	movlb	0	; select bank0
  7304  11C4  00E5               	movwf	??_setLog_Code
  7305  11C5  0865               	movf	??_setLog_Code,w
  7306  11C6  00E2               	movwf	setProductData@value
  7307  11C7  300C               	movlw	12
  7308  11C8  319B  23CF  3191   	fcall	_setProductData
  7309                           
  7310                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7311  11CB  0023               	movlb	3	; select bank3
  7312  11CC  082D               	movf	(_RF_Data^(0+384)+13),w
  7313  11CD  0020               	movlb	0	; select bank0
  7314  11CE  00E5               	movwf	??_setLog_Code
  7315  11CF  0865               	movf	??_setLog_Code,w
  7316  11D0  00E2               	movwf	setProductData@value
  7317  11D1  300D               	movlw	13
  7318  11D2  319B  23CF  3191   	fcall	_setProductData
  7319                           
  7320                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7321  11D5  0023               	movlb	3	; select bank3
  7322  11D6  082E               	movf	(_RF_Data^(0+384)+14),w
  7323  11D7  0020               	movlb	0	; select bank0
  7324  11D8  00E5               	movwf	??_setLog_Code
  7325  11D9  0865               	movf	??_setLog_Code,w
  7326  11DA  00E2               	movwf	setProductData@value
  7327  11DB  300E               	movlw	14
  7328  11DC  319B  23CF  3191   	fcall	_setProductData
  7329                           
  7330                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7331  11DF  3064               	movlw	100
  7332  11E0  0020               	movlb	0	; select bank0
  7333  11E1  00A9               	movwf	setBuz@time
  7334  11E2  3000               	movlw	0
  7335  11E3  00AA               	movwf	setBuz@time+1
  7336  11E4  3001               	movlw	1
  7337  11E5  3194  24F1  3191   	fcall	_setBuz
  7338                           
  7339                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7340  11E8  0021               	movlb	1	; select bank1
  7341  11E9  1EAE               	btfss	_myMain^(0+128),5
  7342  11EA  29EF               	goto	l2179
  7343                           
  7344                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7345  11EB  3001               	movlw	1
  7346  11EC  319D  258A  3191   	fcall	_setMemory_LoopSave
  7347  11EF                     l2179:	
  7348                           
  7349                           ;RF_Control_B1.c: 284: }
  7350                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7351  11EF  3001               	movlw	1
  7352  11F0  319D  2551         	fcall	_setMemory_Modify
  7353  11F2  0008               	return
  7354  11F3                     __end_of_setLog_Code:	
  7355                           
  7356                           	psect	text27
  7357  1D8A                     __ptext27:	
  7358 ;; *************** function _setMemory_LoopSave *****************
  7359 ;; Defined at:
  7360 ;;		line 1089 in file "../src/MCU_B1.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  command         1    wreg     unsigned char 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;  command         1    1[BANK0 ] unsigned char 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;		None               void
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;Total ram usage:        2 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    5
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_setLog_Code
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _setMemory_LoopSave
  7390  1D8A                     _setMemory_LoopSave:	
  7391                           
  7392                           ;incstack = 0
  7393                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7394                           ;setMemory_LoopSave@command stored from wreg
  7395  1D8A  0020               	movlb	0	; select bank0
  7396  1D8B  00A1               	movwf	setMemory_LoopSave@command
  7397                           
  7398                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7399  1D8C  0821               	movf	setMemory_LoopSave@command,w
  7400  1D8D  3A01               	xorlw	1
  7401  1D8E  3000               	movlw	0
  7402  1D8F  1903               	skipnz
  7403  1D90  3001               	movlw	1
  7404  1D91  00A0               	movwf	??_setMemory_LoopSave
  7405  1D92  0DA0               	rlf	??_setMemory_LoopSave,f
  7406  1D93  0DA0               	rlf	??_setMemory_LoopSave,f
  7407  1D94  0024               	movlb	4	; select bank4
  7408  1D95  0844               	movf	(_Memory^(0+512)+36),w
  7409  1D96  0020               	movlb	0	; select bank0
  7410  1D97  0620               	xorwf	??_setMemory_LoopSave,w
  7411  1D98  39FB               	andlw	-5
  7412  1D99  0620               	xorwf	??_setMemory_LoopSave,w
  7413  1D9A  0024               	movlb	4	; select bank4
  7414  1D9B  00C4               	movwf	(_Memory^(0+512)+36)
  7415  1D9C  0008               	return
  7416  1D9D                     __end_of_setMemory_LoopSave:	
  7417                           
  7418                           	psect	text28
  7419  09C8                     __ptext28:	
  7420 ;; *************** function _setControl_Lights_Table *****************
  7421 ;; Defined at:
  7422 ;;		line 289 in file "../src/RF_Control_B1.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;Total ram usage:        0 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    9
  7443 ;; This function calls:
  7444 ;;		_getDimmerLights_Status
  7445 ;;		_getMain_All_LightsStatus
  7446 ;;		_setCmd_Status
  7447 ;;		_setDimmerLights_SwOff
  7448 ;;		_setDimmerLights_SwOn
  7449 ;;		_setProductData
  7450 ;;		_setRFSW_AdjControl
  7451 ;;		_setRFSW_Control
  7452 ;;		_setTxData
  7453 ;; This function is called by:
  7454 ;;		_getRxData
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           
  7459                           ;psect for function _setControl_Lights_Table
  7460  09C8                     _setControl_Lights_Table:	
  7461                           
  7462                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7463                           
  7464                           ;incstack = 0
  7465                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7466  09C8  2A2A               	goto	l9266
  7467  09C9                     l9248:	
  7468                           ;RF_Control_B1.c: 292: case 0x00:
  7469                           
  7470                           
  7471                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7472  09C9  319B  2381  3189   	fcall	_getMain_All_LightsStatus
  7473  09CC  3A01               	xorlw	1
  7474  09CD  1D03               	skipz
  7475  09CE  29E5               	goto	l9256
  7476                           
  7477                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7478  09CF  3001               	movlw	1
  7479  09D0  319C  2491  3189   	fcall	_getDimmerLights_Status
  7480  09D3  3A01               	xorlw	1
  7481  09D4  1D03               	skipz
  7482  09D5  29DE               	goto	l9254
  7483                           
  7484                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7485  09D6  3001               	movlw	1
  7486  09D7  3191  21F3  3189   	fcall	_setDimmerLights_SwOn
  7487                           
  7488                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7489  09DA  3001               	movlw	1
  7490  09DB  3192  2295  3189   	fcall	_setDimmerLights_SwOff
  7491  09DE                     l9254:	
  7492                           
  7493                           ;RF_Control_B1.c: 299: }
  7494                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7495  09DE  0020               	movlb	0	; select bank0
  7496  09DF  01A0               	clrf	setCmd_Status@cmd
  7497  09E0  0AA0               	incf	setCmd_Status@cmd,f
  7498  09E1  3001               	movlw	1
  7499  09E2  319E  2674         	fcall	_setCmd_Status
  7500                           
  7501                           ;RF_Control_B1.c: 315: } else {
  7502  09E4  0008               	return
  7503  09E5                     l9256:	
  7504                           
  7505                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7506  09E5  0020               	movlb	0	; select bank0
  7507  09E6  01E2               	clrf	setProductData@value
  7508  09E7  3009               	movlw	9
  7509  09E8  319B  23CF  3189   	fcall	_setProductData
  7510                           
  7511                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7512  09EB  0020               	movlb	0	; select bank0
  7513  09EC  01E2               	clrf	setProductData@value
  7514  09ED  300B               	movlw	11
  7515  09EE  319B  23CF  3189   	fcall	_setProductData
  7516                           
  7517                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7518  09F1  0020               	movlb	0	; select bank0
  7519  09F2  01E2               	clrf	setProductData@value
  7520  09F3  300F               	movlw	15
  7521  09F4  319B  23CF  3189   	fcall	_setProductData
  7522                           
  7523                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7524  09F7  0020               	movlb	0	; select bank0
  7525  09F8  01E2               	clrf	setProductData@value
  7526  09F9  3011               	movlw	17
  7527  09FA  319B  23CF  3189   	fcall	_setProductData
  7528                           
  7529                           ;RF_Control_B1.c: 320: setTxData();
  7530  09FD  318F  2745         	fcall	_setTxData
  7531                           
  7532                           ;RF_Control_B1.c: 321: }
  7533                           ;RF_Control_B1.c: 322: break;
  7534  09FF  0008               	return
  7535  0A00                     l9258:	
  7536                           ;RF_Control_B1.c: 324: case 0x20:
  7537                           
  7538                           
  7539                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7540  0A00  0020               	movlb	0	; select bank0
  7541  0A01  01E2               	clrf	setProductData@value
  7542  0A02  3009               	movlw	9
  7543  0A03  319B  23CF  3189   	fcall	_setProductData
  7544                           
  7545                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7546  0A06  0020               	movlb	0	; select bank0
  7547  0A07  01E2               	clrf	setProductData@value
  7548  0A08  300B               	movlw	11
  7549  0A09  319B  23CF  3189   	fcall	_setProductData
  7550                           
  7551                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7552  0A0C  0021               	movlb	1	; select bank1
  7553  0A0D  0863               	movf	_product^(0+128),w
  7554  0A0E  0086               	movwf	6
  7555  0A0F  3002               	movlw	2	; select bank4/5
  7556  0A10  0087               	movwf	7
  7557  0A11  3002               	movlw	2	; select bank4/5
  7558  0A12  3F4F               	moviw [15]fsr1
  7559  0A13  0020               	movlb	0	; select bank0
  7560  0A14  00E2               	movwf	setProductData@value
  7561  0A15  300F               	movlw	15
  7562  0A16  319B  23CF  3189   	fcall	_setProductData
  7563                           
  7564                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7565  0A19  0020               	movlb	0	; select bank0
  7566  0A1A  01E2               	clrf	setProductData@value
  7567  0A1B  3011               	movlw	17
  7568  0A1C  319B  23CF  3189   	fcall	_setProductData
  7569                           
  7570                           ;RF_Control_B1.c: 329: setTxData();
  7571  0A1F  318F  2745         	fcall	_setTxData
  7572                           
  7573                           ;RF_Control_B1.c: 330: break;
  7574  0A21  0008               	return
  7575  0A22                     l9260:	
  7576                           ;RF_Control_B1.c: 333: case 0x01:
  7577                           
  7578                           
  7579                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7580  0A22  3001               	movlw	1
  7581  0A23  3193  2382         	fcall	_setRFSW_Control
  7582                           
  7583                           ;RF_Control_B1.c: 335: break;
  7584  0A25  0008               	return
  7585  0A26                     l9262:	
  7586                           ;RF_Control_B1.c: 339: case 0x11:
  7587                           
  7588                           
  7589                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7590  0A26  3001               	movlw	1
  7591  0A27  318B  231E         	fcall	_setRFSW_AdjControl
  7592                           
  7593                           ;RF_Control_B1.c: 370: }
  7594                           
  7595                           ;RF_Control_B1.c: 341: break;
  7596  0A29  0008               	return
  7597  0A2A                     l9266:	
  7598  0A2A  0023               	movlb	3	; select bank3
  7599  0A2B  082F               	movf	(_RF_Data^(0+384)+15),w
  7600                           
  7601                           ; Switch size 1, requested type "space"
  7602                           ; Number of cases is 4, Range of values is 0 to 32
  7603                           ; switch strategies available:
  7604                           ; Name         Instructions Cycles
  7605                           ; simple_byte           13     7 (average)
  7606                           ; direct_byte           72     6 (fixed)
  7607                           ; jumptable            260     6 (fixed)
  7608                           ;	Chosen strategy is simple_byte
  7609  0A2C  3A00               	xorlw	0	; case 0
  7610  0A2D  1903               	skipnz
  7611  0A2E  29C9               	goto	l9248
  7612  0A2F  3A01               	xorlw	1	; case 1
  7613  0A30  1903               	skipnz
  7614  0A31  2A22               	goto	l9260
  7615  0A32  3A10               	xorlw	16	; case 17
  7616  0A33  1903               	skipnz
  7617  0A34  2A26               	goto	l9262
  7618  0A35  3A31               	xorlw	49	; case 32
  7619  0A36  1903               	skipnz
  7620  0A37  2A00               	goto	l9258
  7621  0A38  2A39               	goto	l2192
  7622  0A39                     l2192:	
  7623  0A39  0008               	return
  7624  0A3A                     __end_of_setControl_Lights_Table:	
  7625                           
  7626                           	psect	text29
  7627  1382                     __ptext29:	
  7628 ;; *************** function _setRFSW_Control *****************
  7629 ;; Defined at:
  7630 ;;		line 378 in file "../src/RF_Control_B1.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  sw              1    wreg     unsigned char 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  sw              1   79[BANK0 ] unsigned char 
  7635 ;;  status          1   78[BANK0 ] unsigned char 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;		None               void
  7638 ;; Registers used:
  7639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;Total ram usage:        3 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    8
  7652 ;; This function calls:
  7653 ;;		_getDimmerLights_Status
  7654 ;;		_setBuz
  7655 ;;		_setDelayOff_GO
  7656 ;;		_setDimmerLights_SwOff
  7657 ;;		_setDimmerLights_SwOn
  7658 ;;		_setRF_DimmerLights
  7659 ;;		_setTxData
  7660 ;; This function is called by:
  7661 ;;		_setControl_Lights_Table
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           
  7666                           ;psect for function _setRFSW_Control
  7667  1382                     _setRFSW_Control:	
  7668                           
  7669                           ;incstack = 0
  7670                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7671                           ;setRFSW_Control@sw stored from wreg
  7672  1382  0020               	movlb	0	; select bank0
  7673  1383  00EF               	movwf	setRFSW_Control@sw
  7674                           
  7675                           ;RF_Control_B1.c: 379: char status = 0;
  7676  1384  01EE               	clrf	setRFSW_Control@status
  7677                           
  7678                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7679  1385  0023               	movlb	3	; select bank3
  7680  1386  0830               	movf	(_RF_Data^(0+384)+16),w
  7681  1387  3A80               	xorlw	128
  7682  1388  1D03               	skipz
  7683  1389  2BB5               	goto	l8992
  7684                           
  7685                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7686  138A  0020               	movlb	0	; select bank0
  7687  138B  01E5               	clrf	setDelayOff_GO@command
  7688  138C  0AE5               	incf	setDelayOff_GO@command,f
  7689  138D  0023               	movlb	3	; select bank3
  7690  138E  0831               	movf	(_RF_Data^(0+384)+17),w
  7691  138F  0020               	movlb	0	; select bank0
  7692  1390  00ED               	movwf	??_setRFSW_Control
  7693  1391  086D               	movf	??_setRFSW_Control,w
  7694  1392  00E6               	movwf	setDelayOff_GO@value
  7695  1393  086F               	movf	setRFSW_Control@sw,w
  7696  1394  318C  24AB  3193   	fcall	_setDelayOff_GO
  7697                           
  7698                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7699  1397  0020               	movlb	0	; select bank0
  7700  1398  086F               	movf	setRFSW_Control@sw,w
  7701  1399  319C  2491  3193   	fcall	_getDimmerLights_Status
  7702  139C  3A01               	xorlw	1
  7703  139D  1D03               	skipz
  7704  139E  2BB5               	goto	l8992
  7705                           
  7706                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7707  139F  3064               	movlw	100
  7708  13A0  0020               	movlb	0	; select bank0
  7709  13A1  00A9               	movwf	setBuz@time
  7710  13A2  3000               	movlw	0
  7711  13A3  00AA               	movwf	setBuz@time+1
  7712  13A4  3001               	movlw	1
  7713  13A5  3194  24F1  3193   	fcall	_setBuz
  7714                           
  7715                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7716  13A8  0020               	movlb	0	; select bank0
  7717  13A9  01E5               	clrf	setRF_DimmerLights@on
  7718  13AA  0AE5               	incf	setRF_DimmerLights@on,f
  7719  13AB  086F               	movf	setRFSW_Control@sw,w
  7720  13AC  3197  2730  3193   	fcall	_setRF_DimmerLights
  7721                           
  7722                           ;RF_Control_B1.c: 386: setTxData();
  7723  13AF  318F  2745  3193   	fcall	_setTxData
  7724                           
  7725                           ;RF_Control_B1.c: 387: status = 1;
  7726  13B2  0020               	movlb	0	; select bank0
  7727  13B3  01EE               	clrf	setRFSW_Control@status
  7728  13B4  0AEE               	incf	setRFSW_Control@status,f
  7729  13B5                     l8992:	
  7730                           
  7731                           ;RF_Control_B1.c: 388: }
  7732                           ;RF_Control_B1.c: 389: }
  7733                           ;RF_Control_B1.c: 391: if (status == 0) {
  7734  13B5  0020               	movlb	0	; select bank0
  7735  13B6  08EE               	movf	setRFSW_Control@status,f
  7736  13B7  1D03               	skipz
  7737  13B8  0008               	return
  7738                           
  7739                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7740  13B9  086F               	movf	setRFSW_Control@sw,w
  7741  13BA  3191  21F3  3193   	fcall	_setDimmerLights_SwOn
  7742                           
  7743                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7744  13BD  0020               	movlb	0	; select bank0
  7745  13BE  086F               	movf	setRFSW_Control@sw,w
  7746  13BF  3192  2295         	fcall	_setDimmerLights_SwOff
  7747  13C1  0008               	return
  7748  13C2                     __end_of_setRFSW_Control:	
  7749                           
  7750                           	psect	text30
  7751  0B1E                     __ptext30:	
  7752 ;; *************** function _setRFSW_AdjControl *****************
  7753 ;; Defined at:
  7754 ;;		line 400 in file "../src/RF_Control_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  sw              1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  sw              1   72[BANK0 ] unsigned char 
  7759 ;;  status          1   71[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        4 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    8
  7776 ;; This function calls:
  7777 ;;		_getDimmerLights_PercentToValue
  7778 ;;		_getDimmerLights_Status
  7779 ;;		_setDimmerIntr_Dimming_RF
  7780 ;;		_setDimmerIntr_MaxmumValue
  7781 ;;		_setDimmerLights_DimmingRun
  7782 ;;		_setDimmerLights_SwOff
  7783 ;;		_setDimmerLights_SwOn
  7784 ;;		_setMemory_Modify
  7785 ;;		_setProductData
  7786 ;;		_setTxData
  7787 ;; This function is called by:
  7788 ;;		_setControl_Lights_Table
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _setRFSW_AdjControl
  7794  0B1E                     _setRFSW_AdjControl:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7798                           ;setRFSW_AdjControl@sw stored from wreg
  7799  0B1E  0020               	movlb	0	; select bank0
  7800  0B1F  00E8               	movwf	setRFSW_AdjControl@sw
  7801                           
  7802                           ;RF_Control_B1.c: 401: char status = 0;
  7803  0B20  01E7               	clrf	setRFSW_AdjControl@status
  7804                           
  7805                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7806  0B21  0868               	movf	setRFSW_AdjControl@sw,w
  7807  0B22  319C  2491  318B   	fcall	_getDimmerLights_Status
  7808  0B25  0020               	movlb	0	; select bank0
  7809  0B26  00E5               	movwf	??_setRFSW_AdjControl
  7810  0B27  0865               	movf	??_setRFSW_AdjControl,w
  7811  0B28  00E7               	movwf	setRFSW_AdjControl@status
  7812                           
  7813                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7814  0B29  3065               	movlw	101
  7815  0B2A  0023               	movlb	3	; select bank3
  7816  0B2B  0229               	subwf	(_RF_Data^(0+384)+9),w
  7817  0B2C  1C03               	skipc
  7818  0B2D  2B35               	goto	l9004
  7819                           
  7820                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7821  0B2E  3064               	movlw	100
  7822  0B2F  0020               	movlb	0	; select bank0
  7823  0B30  00E5               	movwf	??_setRFSW_AdjControl
  7824  0B31  0865               	movf	??_setRFSW_AdjControl,w
  7825  0B32  0023               	movlb	3	; select bank3
  7826  0B33  00A9               	movwf	(_RF_Data^(0+384)+9)
  7827                           
  7828                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7829  0B34  2B3A               	goto	l9008
  7830  0B35                     l9004:	
  7831  0B35  08A9               	movf	(_RF_Data^(0+384)+9),f
  7832  0B36  1D03               	skipz
  7833  0B37  2B3A               	goto	l9008
  7834                           
  7835                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7836  0B38  01A9               	clrf	(_RF_Data^(0+384)+9)
  7837  0B39  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7838  0B3A                     l9008:	
  7839                           
  7840                           ;RF_Control_B1.c: 409: }
  7841                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7842  0B3A  0829               	movf	(_RF_Data^(0+384)+9),w
  7843  0B3B  0020               	movlb	0	; select bank0
  7844  0B3C  00E5               	movwf	??_setRFSW_AdjControl
  7845  0B3D  0865               	movf	??_setRFSW_AdjControl,w
  7846  0B3E  00E2               	movwf	setProductData@value
  7847  0B3F  3009               	movlw	9
  7848  0B40  319B  23CF  318B   	fcall	_setProductData
  7849                           
  7850                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7851  0B43  0020               	movlb	0	; select bank0
  7852  0B44  0868               	movf	setRFSW_AdjControl@sw,w
  7853  0B45  00E5               	movwf	??_setRFSW_AdjControl
  7854  0B46  0865               	movf	??_setRFSW_AdjControl,w
  7855  0B47  00E2               	movwf	setProductData@value
  7856  0B48  300B               	movlw	11
  7857  0B49  319B  23CF  318B   	fcall	_setProductData
  7858                           
  7859                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7860  0B4C  0020               	movlb	0	; select bank0
  7861  0B4D  0868               	movf	setRFSW_AdjControl@sw,w
  7862  0B4E  3E1A               	addlw	26
  7863  0B4F  0021               	movlb	1	; select bank1
  7864  0B50  0763               	addwf	_product^(0+128),w
  7865  0B51  0020               	movlb	0	; select bank0
  7866  0B52  00E5               	movwf	??_setRFSW_AdjControl
  7867  0B53  0865               	movf	??_setRFSW_AdjControl,w
  7868  0B54  0086               	movwf	6
  7869  0B55  3002               	movlw	2	; select bank4/5
  7870  0B56  0087               	movwf	7
  7871  0B57  0801               	movf	1,w
  7872  0B58  00E6               	movwf	??_setRFSW_AdjControl+1
  7873  0B59  0866               	movf	??_setRFSW_AdjControl+1,w
  7874  0B5A  00E2               	movwf	setProductData@value
  7875  0B5B  3011               	movlw	17
  7876  0B5C  319B  23CF  318B   	fcall	_setProductData
  7877                           
  7878                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7879  0B5F  0023               	movlb	3	; select bank3
  7880  0B60  0829               	movf	(_RF_Data^(0+384)+9),w
  7881  0B61  0020               	movlb	0	; select bank0
  7882  0B62  00E5               	movwf	??_setRFSW_AdjControl
  7883  0B63  0865               	movf	??_setRFSW_AdjControl,w
  7884  0B64  00E2               	movwf	setProductData@value
  7885  0B65  0868               	movf	setRFSW_AdjControl@sw,w
  7886  0B66  3E14               	addlw	20
  7887  0B67  319B  23CF  318B   	fcall	_setProductData
  7888                           
  7889                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7890  0B6A  3001               	movlw	1
  7891  0B6B  319D  2551  318B   	fcall	_setMemory_Modify
  7892                           
  7893                           ;RF_Control_B1.c: 425: if (status == 1) {
  7894  0B6E  0020               	movlb	0	; select bank0
  7895  0B6F  0867               	movf	setRFSW_AdjControl@status,w
  7896  0B70  3A01               	xorlw	1
  7897  0B71  1D03               	skipz
  7898  0B72  2B8A               	goto	l9018
  7899                           
  7900                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7901  0B73  0023               	movlb	3	; select bank3
  7902  0B74  0829               	movf	(_RF_Data^(0+384)+9),w
  7903  0B75  3196  2666  318B   	fcall	_getDimmerLights_PercentToValue
  7904  0B78  0020               	movlb	0	; select bank0
  7905  0B79  00E5               	movwf	??_setRFSW_AdjControl
  7906  0B7A  0865               	movf	??_setRFSW_AdjControl,w
  7907  0B7B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  7908  0B7C  0868               	movf	setRFSW_AdjControl@sw,w
  7909  0B7D  319B  23DB  318B   	fcall	_setDimmerIntr_MaxmumValue
  7910                           
  7911                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7912  0B80  0020               	movlb	0	; select bank0
  7913  0B81  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  7914  0B82  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  7915  0B83  0868               	movf	setRFSW_AdjControl@sw,w
  7916  0B84  319E  265C  318B   	fcall	_setDimmerIntr_Dimming_RF
  7917                           
  7918                           ;RF_Control_B1.c: 428: setTxData();
  7919  0B87  318F  2745         	fcall	_setTxData
  7920                           
  7921                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7922  0B89  0008               	return
  7923  0B8A                     l9018:	
  7924  0B8A  0020               	movlb	0	; select bank0
  7925  0B8B  08E7               	movf	setRFSW_AdjControl@status,f
  7926  0B8C  1D03               	skipz
  7927  0B8D  0008               	return
  7928                           
  7929                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7930  0B8E  01A2               	clrf	setDimmerLights_DimmingRun@command
  7931  0B8F  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  7932  0B90  0868               	movf	setRFSW_AdjControl@sw,w
  7933  0B91  319E  26F4  318B   	fcall	_setDimmerLights_DimmingRun
  7934                           
  7935                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7936  0B94  0020               	movlb	0	; select bank0
  7937  0B95  0868               	movf	setRFSW_AdjControl@sw,w
  7938  0B96  3191  21F3  318B   	fcall	_setDimmerLights_SwOn
  7939                           
  7940                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7941  0B99  0020               	movlb	0	; select bank0
  7942  0B9A  0868               	movf	setRFSW_AdjControl@sw,w
  7943  0B9B  3192  2295         	fcall	_setDimmerLights_SwOff
  7944  0B9D  0008               	return
  7945  0B9E                     __end_of_setRFSW_AdjControl:	
  7946                           
  7947                           	psect	text31
  7948  1EF4                     __ptext31:	
  7949 ;; *************** function _setDimmerLights_DimmingRun *****************
  7950 ;; Defined at:
  7951 ;;		line 1084 in file "../src/Dimmer_B1.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  lights          1    wreg     unsigned char 
  7954 ;;  command         1    2[BANK0 ] unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  lights          1    4[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;		None               void
  7959 ;; Registers used:
  7960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:        3 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    6
  7973 ;; This function calls:
  7974 ;;		_DimmerLights_SelectPointer
  7975 ;; This function is called by:
  7976 ;;		_setRFSW_AdjControl
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _setDimmerLights_DimmingRun
  7982  1EF4                     _setDimmerLights_DimmingRun:	
  7983                           
  7984                           ;incstack = 0
  7985                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7986                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7987  1EF4  0020               	movlb	0	; select bank0
  7988  1EF5  00A4               	movwf	setDimmerLights_DimmingRun@lights
  7989                           
  7990                           ;Dimmer_B1.c: 1085: DimmerLights_SelectPointer(lights);
  7991  1EF6  0824               	movf	setDimmerLights_DimmingRun@lights,w
  7992  1EF7  319B  23C3         	fcall	_DimmerLights_SelectPointer
  7993                           
  7994                           ;Dimmer_B1.c: 1086: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7995  1EF9  0020               	movlb	0	; select bank0
  7996  1EFA  0822               	movf	setDimmerLights_DimmingRun@command,w
  7997  1EFB  3A01               	xorlw	1
  7998  1EFC  3000               	movlw	0
  7999  1EFD  1903               	skipnz
  8000  1EFE  3001               	movlw	1
  8001  1EFF  00A3               	movwf	??_setDimmerLights_DimmingRun
  8002  1F00  0021               	movlb	1	; select bank1
  8003  1F01  0A4A               	incf	_DimmerLights^(0+128),w
  8004  1F02  0086               	movwf	6
  8005  1F03  3001               	movlw	1	; select bank2/3
  8006  1F04  0087               	movwf	7
  8007  1F05  0020               	movlb	0	; select bank0
  8008  1F06  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8009  1F07  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8010  1F08  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8011  1F09  0801               	movf	1,w
  8012  1F0A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8013  1F0B  39BF               	andlw	-65
  8014  1F0C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8015  1F0D  0081               	movwf	1
  8016  1F0E  0008               	return
  8017  1F0F                     __end_of_setDimmerLights_DimmingRun:	
  8018                           
  8019                           	psect	text32
  8020  1CD5                     __ptext32:	
  8021 ;; *************** function _getRF_KeyStatus *****************
  8022 ;; Defined at:
  8023 ;;		line 166 in file "../src/RF_Control_B1.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;  key             1    1[BANK0 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      unsigned char 
  8030 ;; Registers used:
  8031 ;;		wreg, status,2
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;Total ram usage:        3 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    5
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		_setRF_Main
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           
  8052                           ;psect for function _getRF_KeyStatus
  8053  1CD5                     _getRF_KeyStatus:	
  8054                           
  8055                           ;RF_Control_B1.c: 167: char key = 0;
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8059  1CD5  0020               	movlb	0	; select bank0
  8060  1CD6  01A1               	clrf	getRF_KeyStatus@key
  8061                           
  8062                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8063  1CD7  01A2               	clrf	_getRF_KeyStatus$5352
  8064  1CD8  0AA2               	incf	_getRF_KeyStatus$5352,f
  8065  1CD9  1F0C               	btfss	12,6	;volatile
  8066  1CDA  1A0C               	btfsc	12,4	;volatile
  8067  1CDB  2CE0               	goto	l6996
  8068  1CDC  1C0C               	btfss	12,0	;volatile
  8069  1CDD  1B8C               	btfsc	12,7	;volatile
  8070  1CDE  2CE0               	goto	l6996
  8071  1CDF  01A2               	clrf	_getRF_KeyStatus$5352
  8072  1CE0                     l6996:	
  8073  1CE0  0822               	movf	_getRF_KeyStatus$5352,w
  8074  1CE1  00A0               	movwf	??_getRF_KeyStatus
  8075  1CE2  0820               	movf	??_getRF_KeyStatus,w
  8076  1CE3  00A1               	movwf	getRF_KeyStatus@key
  8077                           
  8078                           ;RF_Control_B1.c: 179: return key;
  8079  1CE4  0821               	movf	getRF_KeyStatus@key,w
  8080  1CE5  0008               	return
  8081  1CE6                     __end_of_getRF_KeyStatus:	
  8082                           
  8083                           	psect	text33
  8084  1CC4                     __ptext33:	
  8085 ;; *************** function _getBuz_GO *****************
  8086 ;; Defined at:
  8087 ;;		line 82 in file "../src/Buzzer_B1.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  i               2    4[BANK0 ] int 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  2    0[BANK0 ] int 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        6 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    5
  8108 ;; This function calls:
  8109 ;;		Nothing
  8110 ;; This function is called by:
  8111 ;;		_setRF_Main
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _getBuz_GO
  8117  1CC4                     _getBuz_GO:	
  8118                           
  8119                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8123  1CC4  0022               	movlb	2	; select bank2
  8124  1CC5  0C20               	rrf	_Buz1^(0+256),w
  8125  1CC6  3901               	andlw	1
  8126  1CC7  0020               	movlb	0	; select bank0
  8127  1CC8  00A2               	movwf	??_getBuz_GO
  8128  1CC9  01A3               	clrf	??_getBuz_GO+1
  8129  1CCA  0822               	movf	??_getBuz_GO,w
  8130  1CCB  00A4               	movwf	getBuz_GO@i
  8131  1CCC  0823               	movf	??_getBuz_GO+1,w
  8132  1CCD  00A5               	movwf	getBuz_GO@i+1
  8133                           
  8134                           ;Buzzer_B1.c: 84: return i;
  8135  1CCE  0825               	movf	getBuz_GO@i+1,w
  8136  1CCF  01A1               	clrf	?_getBuz_GO+1
  8137  1CD0  07A1               	addwf	?_getBuz_GO+1,f
  8138  1CD1  0824               	movf	getBuz_GO@i,w
  8139  1CD2  01A0               	clrf	?_getBuz_GO
  8140  1CD3  07A0               	addwf	?_getBuz_GO,f
  8141  1CD4  0008               	return
  8142  1CD5                     __end_of_getBuz_GO:	
  8143                           
  8144                           	psect	text34
  8145  1C72                     __ptext34:	
  8146 ;; *************** function _RF_RxDisable *****************
  8147 ;; Defined at:
  8148 ;;		line 154 in file "../src/RF_Control_B1.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;		None               void
  8155 ;; Registers used:
  8156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:        0 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    7
  8169 ;; This function calls:
  8170 ;;		_CC2500_WriteCommand
  8171 ;; This function is called by:
  8172 ;;		_setRF_Main
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function _RF_RxDisable
  8178  1C72                     _RF_RxDisable:	
  8179                           
  8180                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8181                           
  8182                           ;incstack = 0
  8183                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8184  1C72  0021               	movlb	1	; select bank1
  8185  1C73  18A0               	btfsc	_RF1^(0+128),1
  8186  1C74  2C77               	goto	l2149
  8187  1C75  1DA0               	btfss	_RF1^(0+128),3
  8188  1C76  0008               	return
  8189  1C77                     l2149:	
  8190                           
  8191                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8192  1C77  11A0               	bcf	_RF1^(0+128),3
  8193                           
  8194                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8195  1C78  10A0               	bcf	_RF1^(0+128),1
  8196                           
  8197                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8198  1C79  3036               	movlw	54
  8199  1C7A  319E  26DA  319C   	fcall	_CC2500_WriteCommand
  8200                           
  8201                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8202  1C7D  303A               	movlw	58
  8203  1C7E  319E  26DA         	fcall	_CC2500_WriteCommand
  8204  1C80  0008               	return
  8205  1C81                     __end_of_RF_RxDisable:	
  8206                           
  8207                           	psect	text35
  8208  087D                     __ptext35:	
  8209 ;; *************** function _CC2500_TxData *****************
  8210 ;; Defined at:
  8211 ;;		line 32 in file "../src/CC2500_B1.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;		None               void
  8218 ;; Registers used:
  8219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        2 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    7
  8232 ;; This function calls:
  8233 ;;		_CC2500_WriteByte
  8234 ;;		_CC2500_WriteCommand
  8235 ;;		_RF_Timeout_Counter
  8236 ;;		_setRF_TimeoutCleared
  8237 ;; This function is called by:
  8238 ;;		_setRF_Main
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _CC2500_TxData
  8244  087D                     _CC2500_TxData:	
  8245                           
  8246                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8247                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8248                           
  8249                           ;incstack = 0
  8250                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8251  087D  3036               	movlw	54
  8252  087E  319E  26DA  3188   	fcall	_CC2500_WriteCommand
  8253                           
  8254                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8255  0881  303B               	movlw	59
  8256  0882  319E  26DA  3188   	fcall	_CC2500_WriteCommand
  8257                           
  8258                           ;CC2500_B1.c: 38: RC0 = 0;
  8259  0885  0020               	movlb	0	; select bank0
  8260  0886  100E               	bcf	14,0	;volatile
  8261                           
  8262                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8263  0887  307F               	movlw	127
  8264  0888  00A4               	movwf	??_CC2500_TxData
  8265  0889  0824               	movf	??_CC2500_TxData,w
  8266  088A  0021               	movlb	1	; select bank1
  8267  088B  00CD               	movwf	_SPI0Buffer^(0+128)
  8268                           
  8269                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8270  088C  2890               	goto	l9280
  8271  088D                     l9278:	
  8272                           
  8273                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8274  088D  319D  25C4  3188   	fcall	_RF_Timeout_Counter
  8275  0890                     l9280:	
  8276  0890  0020               	movlb	0	; select bank0
  8277  0891  1E8E               	btfss	14,5	;volatile
  8278  0892  2896               	goto	l9284
  8279  0893  0021               	movlb	1	; select bank1
  8280  0894  1F21               	btfss	(_RF1^(0+128)+1),6
  8281  0895  288D               	goto	l9278
  8282  0896                     l9284:	
  8283                           
  8284                           ;CC2500_B1.c: 42: };
  8285                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8286  0896  319B  2315  3188   	fcall	_setRF_TimeoutCleared
  8287                           
  8288                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8289  0899  319E  268D  3188   	fcall	_CC2500_WriteByte
  8290                           
  8291                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8292  089C  0021               	movlb	1	; select bank1
  8293  089D  084F               	movf	_Tx_Length^(0+128),w
  8294  089E  0020               	movlb	0	; select bank0
  8295  089F  00A4               	movwf	??_CC2500_TxData
  8296  08A0  0824               	movf	??_CC2500_TxData,w
  8297  08A1  0021               	movlb	1	; select bank1
  8298  08A2  00CD               	movwf	_SPI0Buffer^(0+128)
  8299                           
  8300                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8301  08A3  319E  268D  3188   	fcall	_CC2500_WriteByte
  8302                           
  8303                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8304  08A6  0020               	movlb	0	; select bank0
  8305  08A7  01A5               	clrf	CC2500_TxData@loop_e
  8306  08A8                     l9298:	
  8307  08A8  0021               	movlb	1	; select bank1
  8308  08A9  084F               	movf	_Tx_Length^(0+128),w
  8309  08AA  0020               	movlb	0	; select bank0
  8310  08AB  0225               	subwf	CC2500_TxData@loop_e,w
  8311  08AC  1803               	btfsc	3,0
  8312  08AD  28C1               	goto	l235
  8313                           
  8314                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8315  08AE  0825               	movf	CC2500_TxData@loop_e,w
  8316  08AF  3EA0               	addlw	_RF_Data& (0+255)
  8317  08B0  0086               	movwf	6
  8318  08B1  3001               	movlw	1	; select bank3/4
  8319  08B2  0087               	movwf	7
  8320  08B3  0801               	movf	1,w
  8321  08B4  00A4               	movwf	??_CC2500_TxData
  8322  08B5  0824               	movf	??_CC2500_TxData,w
  8323  08B6  0021               	movlb	1	; select bank1
  8324  08B7  00CD               	movwf	_SPI0Buffer^(0+128)
  8325                           
  8326                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8327  08B8  319E  268D  3188   	fcall	_CC2500_WriteByte
  8328  08BB  3001               	movlw	1
  8329  08BC  0020               	movlb	0	; select bank0
  8330  08BD  00A4               	movwf	??_CC2500_TxData
  8331  08BE  0824               	movf	??_CC2500_TxData,w
  8332  08BF  07A5               	addwf	CC2500_TxData@loop_e,f
  8333  08C0  28A8               	goto	l9298
  8334  08C1                     l235:	
  8335                           
  8336                           ;CC2500_B1.c: 51: }
  8337                           ;CC2500_B1.c: 52: RC0 = 1;
  8338  08C1  140E               	bsf	14,0	;volatile
  8339                           
  8340                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8341  08C2  3035               	movlw	53
  8342  08C3  319E  26DA  3188   	fcall	_CC2500_WriteCommand
  8343                           
  8344                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8345  08C6  28CA               	goto	l9304
  8346  08C7                     l9302:	
  8347                           
  8348                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8349  08C7  319D  25C4  3188   	fcall	_RF_Timeout_Counter
  8350  08CA                     l9304:	
  8351  08CA  0020               	movlb	0	; select bank0
  8352  08CB  188E               	btfsc	14,1	;volatile
  8353  08CC  28D0               	goto	l9308
  8354  08CD  0021               	movlb	1	; select bank1
  8355  08CE  1F21               	btfss	(_RF1^(0+128)+1),6
  8356  08CF  28C7               	goto	l9302
  8357  08D0                     l9308:	
  8358                           
  8359                           ;CC2500_B1.c: 56: };
  8360                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8361  08D0  319B  2315  3188   	fcall	_setRF_TimeoutCleared
  8362                           
  8363                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8364  08D3  28D7               	goto	l9312
  8365  08D4                     l9310:	
  8366                           
  8367                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8368  08D4  319D  25C4  3188   	fcall	_RF_Timeout_Counter
  8369  08D7                     l9312:	
  8370  08D7  0020               	movlb	0	; select bank0
  8371  08D8  1C8E               	btfss	14,1	;volatile
  8372  08D9  28DD               	goto	l9316
  8373  08DA  0021               	movlb	1	; select bank1
  8374  08DB  1F21               	btfss	(_RF1^(0+128)+1),6
  8375  08DC  28D4               	goto	l9310
  8376  08DD                     l9316:	
  8377                           
  8378                           ;CC2500_B1.c: 61: };
  8379                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8380  08DD  319B  2315  3188   	fcall	_setRF_TimeoutCleared
  8381                           
  8382                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8383  08E0  3036               	movlw	54
  8384  08E1  319E  26DA  3188   	fcall	_CC2500_WriteCommand
  8385                           
  8386                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8387  08E4  303B               	movlw	59
  8388  08E5  319E  26DA         	fcall	_CC2500_WriteCommand
  8389                           
  8390                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8391  08E7  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8392  08E8  0008               	return
  8393  08E9                     __end_of_CC2500_TxData:	
  8394                           
  8395                           	psect	text36
  8396  0812                     __ptext36:	
  8397 ;; *************** function _CC2500_RxData *****************
  8398 ;; Defined at:
  8399 ;;		line 73 in file "../src/CC2500_B1.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;		None               void
  8406 ;; Registers used:
  8407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;Total ram usage:        2 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    7
  8420 ;; This function calls:
  8421 ;;		_CC2500_ReadByte
  8422 ;;		_CC2500_ReadStatus
  8423 ;;		_CC2500_WriteByte
  8424 ;;		_CC2500_WriteCommand
  8425 ;;		_RF_Timeout_Counter
  8426 ;;		_setRF_TimeoutCleared
  8427 ;; This function is called by:
  8428 ;;		_setRF_Main
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _CC2500_RxData
  8434  0812                     _CC2500_RxData:	
  8435                           
  8436                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8437                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8438                           
  8439                           ;incstack = 0
  8440                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8441  0812  0020               	movlb	0	; select bank0
  8442  0813  188E               	btfsc	14,1	;volatile
  8443  0814  0008               	return
  8444                           
  8445                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8446  0815  303B               	movlw	59
  8447  0816  3190  208F  3188   	fcall	_CC2500_ReadStatus
  8448                           
  8449                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8450  0819  0021               	movlb	1	; select bank1
  8451  081A  0850               	movf	_s_data^(0+128),w
  8452  081B  1903               	btfsc	3,2
  8453  081C  0008               	return
  8454                           
  8455                           ;CC2500_B1.c: 90: RC0 = 0;
  8456  081D  0020               	movlb	0	; select bank0
  8457  081E  100E               	bcf	14,0	;volatile
  8458                           
  8459                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8460  081F  30FF               	movlw	255
  8461  0820  00A4               	movwf	??_CC2500_RxData
  8462  0821  0824               	movf	??_CC2500_RxData,w
  8463  0822  0021               	movlb	1	; select bank1
  8464  0823  00CD               	movwf	_SPI0Buffer^(0+128)
  8465                           
  8466                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8467  0824  2828               	goto	l9336
  8468  0825                     l9334:	
  8469                           
  8470                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8471  0825  319D  25C4  3188   	fcall	_RF_Timeout_Counter
  8472  0828                     l9336:	
  8473  0828  0020               	movlb	0	; select bank0
  8474  0829  1E8E               	btfss	14,5	;volatile
  8475  082A  282E               	goto	l9340
  8476  082B  0021               	movlb	1	; select bank1
  8477  082C  1F21               	btfss	(_RF1^(0+128)+1),6
  8478  082D  2825               	goto	l9334
  8479  082E                     l9340:	
  8480                           
  8481                           ;CC2500_B1.c: 95: };
  8482                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8483  082E  319B  2315  3188   	fcall	_setRF_TimeoutCleared
  8484                           
  8485                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8486  0831  319E  268D  3188   	fcall	_CC2500_WriteByte
  8487                           
  8488                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8489  0834  319F  2747  3188   	fcall	_CC2500_ReadByte
  8490                           
  8491                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8492  0837  0021               	movlb	1	; select bank1
  8493  0838  084D               	movf	_SPI0Buffer^(0+128),w
  8494  0839  0020               	movlb	0	; select bank0
  8495  083A  00A4               	movwf	??_CC2500_RxData
  8496  083B  0824               	movf	??_CC2500_RxData,w
  8497  083C  0021               	movlb	1	; select bank1
  8498  083D  00CC               	movwf	_Rx_Length^(0+128)
  8499                           
  8500                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8501  083E  0020               	movlb	0	; select bank0
  8502  083F  01A5               	clrf	CC2500_RxData@loop_f
  8503  0840                     l9356:	
  8504  0840  0021               	movlb	1	; select bank1
  8505  0841  084C               	movf	_Rx_Length^(0+128),w
  8506  0842  0020               	movlb	0	; select bank0
  8507  0843  0225               	subwf	CC2500_RxData@loop_f,w
  8508  0844  1803               	btfsc	3,0
  8509  0845  2859               	goto	l9358
  8510                           
  8511                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8512  0846  319F  2747  3188   	fcall	_CC2500_ReadByte
  8513                           
  8514                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8515  0849  0021               	movlb	1	; select bank1
  8516  084A  084D               	movf	_SPI0Buffer^(0+128),w
  8517  084B  0020               	movlb	0	; select bank0
  8518  084C  00A4               	movwf	??_CC2500_RxData
  8519  084D  0825               	movf	CC2500_RxData@loop_f,w
  8520  084E  3EA0               	addlw	_RF_Data& (0+255)
  8521  084F  0086               	movwf	6
  8522  0850  3001               	movlw	1	; select bank3/4
  8523  0851  0087               	movwf	7
  8524  0852  0824               	movf	??_CC2500_RxData,w
  8525  0853  0081               	movwf	1
  8526  0854  3001               	movlw	1
  8527  0855  00A4               	movwf	??_CC2500_RxData
  8528  0856  0824               	movf	??_CC2500_RxData,w
  8529  0857  07A5               	addwf	CC2500_RxData@loop_f,f
  8530  0858  2840               	goto	l9356
  8531  0859                     l9358:	
  8532                           
  8533                           ;CC2500_B1.c: 104: }
  8534                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8535  0859  319F  2747  3188   	fcall	_CC2500_ReadByte
  8536                           
  8537                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8538  085C  0021               	movlb	1	; select bank1
  8539  085D  084D               	movf	_SPI0Buffer^(0+128),w
  8540  085E  0020               	movlb	0	; select bank0
  8541  085F  00A4               	movwf	??_CC2500_RxData
  8542  0860  0824               	movf	??_CC2500_RxData,w
  8543  0861  0022               	movlb	2	; select bank2
  8544  0862  00BA               	movwf	_RSSI^(0+256)
  8545                           
  8546                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8547  0863  319F  2747  3188   	fcall	_CC2500_ReadByte
  8548                           
  8549                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8550  0866  0021               	movlb	1	; select bank1
  8551  0867  084D               	movf	_SPI0Buffer^(0+128),w
  8552  0868  0020               	movlb	0	; select bank0
  8553  0869  00A4               	movwf	??_CC2500_RxData
  8554  086A  0824               	movf	??_CC2500_RxData,w
  8555  086B  0021               	movlb	1	; select bank1
  8556  086C  00C7               	movwf	_CRC^(0+128)
  8557                           
  8558                           ;CC2500_B1.c: 109: RC0 = 1;
  8559  086D  0020               	movlb	0	; select bank0
  8560  086E  140E               	bsf	14,0	;volatile
  8561                           
  8562                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8563  086F  0021               	movlb	1	; select bank1
  8564  0870  1BC7               	btfsc	_CRC^(0+128),7
  8565                           
  8566                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8567  0871  1464               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8568                           
  8569                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8570  0872  11A0               	bcf	_RF1^(0+128),3
  8571                           
  8572                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8573  0873  14A0               	bsf	_RF1^(0+128),1
  8574                           
  8575                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8576  0874  3036               	movlw	54
  8577  0875  319E  26DA  3188   	fcall	_CC2500_WriteCommand
  8578                           
  8579                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8580  0878  303A               	movlw	58
  8581  0879  319E  26DA         	fcall	_CC2500_WriteCommand
  8582  087B  0021               	movlb	1	; select bank1
  8583  087C  0008               	return
  8584  087D                     __end_of_CC2500_RxData:	
  8585                           
  8586                           	psect	text37
  8587  108F                     __ptext37:	
  8588 ;; *************** function _CC2500_ReadStatus *****************
  8589 ;; Defined at:
  8590 ;;		line 308 in file "../src/CC2500_B1.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  status_addr     1    wreg     unsigned char 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;		None               void
  8597 ;; Registers used:
  8598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;Total ram usage:        2 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    6
  8611 ;; This function calls:
  8612 ;;		_CC2500_ReadByte
  8613 ;;		_CC2500_WriteByte
  8614 ;;		_RF_Timeout_Counter
  8615 ;;		_setRF_TimeoutCleared
  8616 ;; This function is called by:
  8617 ;;		_CC2500_RxData
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function _CC2500_ReadStatus
  8623  108F                     _CC2500_ReadStatus:	
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8627                           ;CC2500_ReadStatus@status_addr stored from wreg
  8628  108F  0020               	movlb	0	; select bank0
  8629  1090  00A3               	movwf	CC2500_ReadStatus@status_addr
  8630                           
  8631                           ;CC2500_B1.c: 309: RC0 = 0;
  8632  1091  100E               	bcf	14,0	;volatile
  8633                           
  8634                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8635  1092  0823               	movf	CC2500_ReadStatus@status_addr,w
  8636  1093  3EC0               	addlw	192
  8637  1094  00A2               	movwf	??_CC2500_ReadStatus
  8638  1095  0822               	movf	??_CC2500_ReadStatus,w
  8639  1096  0021               	movlb	1	; select bank1
  8640  1097  00CD               	movwf	_SPI0Buffer^(0+128)
  8641                           
  8642                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8643  1098  289C               	goto	l9028
  8644  1099                     l9026:	
  8645                           
  8646                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8647  1099  319D  25C4  3190   	fcall	_RF_Timeout_Counter
  8648  109C                     l9028:	
  8649  109C  0020               	movlb	0	; select bank0
  8650  109D  1E8E               	btfss	14,5	;volatile
  8651  109E  28A2               	goto	l9032
  8652  109F  0021               	movlb	1	; select bank1
  8653  10A0  1F21               	btfss	(_RF1^(0+128)+1),6
  8654  10A1  2899               	goto	l9026
  8655  10A2                     l9032:	
  8656                           
  8657                           ;CC2500_B1.c: 314: };
  8658                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8659  10A2  319B  2315  3190   	fcall	_setRF_TimeoutCleared
  8660                           
  8661                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8662  10A5  319E  268D  3190   	fcall	_CC2500_WriteByte
  8663                           
  8664                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8665  10A8  319F  2747         	fcall	_CC2500_ReadByte
  8666                           
  8667                           ;CC2500_B1.c: 319: RC0 = 1;
  8668  10AA  0020               	movlb	0	; select bank0
  8669  10AB  140E               	bsf	14,0	;volatile
  8670                           
  8671                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8672  10AC  0021               	movlb	1	; select bank1
  8673  10AD  084D               	movf	_SPI0Buffer^(0+128),w
  8674  10AE  0020               	movlb	0	; select bank0
  8675  10AF  00A2               	movwf	??_CC2500_ReadStatus
  8676  10B0  0822               	movf	??_CC2500_ReadStatus,w
  8677  10B1  0021               	movlb	1	; select bank1
  8678  10B2  00D0               	movwf	_s_data^(0+128)
  8679  10B3  0008               	return
  8680  10B4                     __end_of_CC2500_ReadStatus:	
  8681                           
  8682                           	psect	text38
  8683  1F47                     __ptext38:	
  8684 ;; *************** function _CC2500_ReadByte *****************
  8685 ;; Defined at:
  8686 ;;		line 242 in file "../src/CC2500_B1.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;		None               void
  8693 ;; Registers used:
  8694 ;;		wreg, status,2, status,0
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;Total ram usage:        2 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    5
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_CC2500_RxData
  8711 ;;		_CC2500_ReadStatus
  8712 ;;		_CC2500_ReadREG
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           
  8717                           ;psect for function _CC2500_ReadByte
  8718  1F47                     _CC2500_ReadByte:	
  8719                           
  8720                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8721                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8722                           
  8723                           ;incstack = 0
  8724                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8725  1F47  0020               	movlb	0	; select bank0
  8726  1F48  01A1               	clrf	CC2500_ReadByte@loop_b
  8727  1F49                     L2:	
  8728  1F49  3008               	movlw	8
  8729  1F4A  0221               	subwf	CC2500_ReadByte@loop_b,w
  8730  1F4B  1803               	btfsc	3,0
  8731  1F4C  0008               	return
  8732                           
  8733                           ;CC2500_B1.c: 245: RC3 = 1;
  8734  1F4D  158E               	bsf	14,3	;volatile
  8735                           
  8736                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8737  1F4E  1003               	clrc
  8738  1F4F  0021               	movlb	1	; select bank1
  8739  1F50  0DCD               	rlf	_SPI0Buffer^(0+128),f
  8740                           
  8741                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8742  1F51  0020               	movlb	0	; select bank0
  8743  1F52  1E8E               	btfss	14,5	;volatile
  8744  1F53  2F57               	goto	l8934
  8745                           
  8746                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8747  1F54  0021               	movlb	1	; select bank1
  8748  1F55  144D               	bsf	_SPI0Buffer^(0+128),0
  8749  1F56  2F5D               	goto	l8936
  8750  1F57                     l8934:	
  8751                           
  8752                           ;CC2500_B1.c: 249: else
  8753                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8754  1F57  30FE               	movlw	254
  8755  1F58  0020               	movlb	0	; select bank0
  8756  1F59  00A0               	movwf	??_CC2500_ReadByte
  8757  1F5A  0820               	movf	??_CC2500_ReadByte,w
  8758  1F5B  0021               	movlb	1	; select bank1
  8759  1F5C  05CD               	andwf	_SPI0Buffer^(0+128),f
  8760  1F5D                     l8936:	
  8761                           
  8762                           ;CC2500_B1.c: 251: RC3 = 0;
  8763  1F5D  0020               	movlb	0	; select bank0
  8764  1F5E  118E               	bcf	14,3	;volatile
  8765  1F5F  3001               	movlw	1
  8766  1F60  00A0               	movwf	??_CC2500_ReadByte
  8767  1F61  0820               	movf	??_CC2500_ReadByte,w
  8768  1F62  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8769  1F63  2F49               	goto	L2
  8770  1F64                     __end_of_CC2500_ReadByte:	
  8771                           
  8772                           	psect	text39
  8773  1DD9                     __ptext39:	
  8774 ;; *************** function _CC2500_PowerOnInitial *****************
  8775 ;; Defined at:
  8776 ;;		line 126 in file "../src/CC2500_B1.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;		None               void
  8783 ;; Registers used:
  8784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    8
  8797 ;; This function calls:
  8798 ;;		_CC2500_ClearRXFIFO
  8799 ;;		_CC2500_ClearTXFIFO
  8800 ;;		_CC2500_FrequencyCabr
  8801 ;;		_CC2500_InitPATable
  8802 ;;		_CC2500_InitSetREG
  8803 ;;		_CC2500_PowerRST
  8804 ;;		_CC2500_SIDLEMode
  8805 ;; This function is called by:
  8806 ;;		_main
  8807 ;;		_setRF_Main
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           
  8812                           ;psect for function _CC2500_PowerOnInitial
  8813  1DD9                     _CC2500_PowerOnInitial:	
  8814                           
  8815                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8816                           
  8817                           ;incstack = 0
  8818                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8819  1DD9  3194  2403  319D   	fcall	_CC2500_PowerRST
  8820                           
  8821                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8822  1DDC  3191  2102  319D   	fcall	_CC2500_InitSetREG
  8823                           
  8824                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8825  1DDF  319F  27A1  319D   	fcall	_CC2500_InitPATable
  8826                           
  8827                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8828  1DE2  319B  231D  319D   	fcall	_CC2500_ClearTXFIFO
  8829                           
  8830                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8831  1DE5  319B  2319  319D   	fcall	_CC2500_ClearRXFIFO
  8832                           
  8833                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8834  1DE8  319C  242F  319D   	fcall	_CC2500_FrequencyCabr
  8835                           
  8836                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8837  1DEB  319B  2321         	fcall	_CC2500_SIDLEMode
  8838  1DED  0008               	return
  8839  1DEE                     __end_of_CC2500_PowerOnInitial:	
  8840                           
  8841                           	psect	text40
  8842  1B21                     __ptext40:	
  8843 ;; *************** function _CC2500_SIDLEMode *****************
  8844 ;; Defined at:
  8845 ;;		line 216 in file "../src/CC2500_B1.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;		None               void
  8852 ;; Registers used:
  8853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;Total ram usage:        0 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    7
  8866 ;; This function calls:
  8867 ;;		_CC2500_WriteCommand
  8868 ;; This function is called by:
  8869 ;;		_CC2500_PowerOnInitial
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _CC2500_SIDLEMode
  8875  1B21                     _CC2500_SIDLEMode:	
  8876                           
  8877                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8881  1B21  3036               	movlw	54
  8882  1B22  319E  26DA         	fcall	_CC2500_WriteCommand
  8883  1B24  0008               	return
  8884  1B25                     __end_of_CC2500_SIDLEMode:	
  8885                           
  8886                           	psect	text41
  8887  1403                     __ptext41:	
  8888 ;; *************** function _CC2500_PowerRST *****************
  8889 ;; Defined at:
  8890 ;;		line 139 in file "../src/CC2500_B1.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;		None
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;		None
  8895 ;; Return value:  Size  Location     Type
  8896 ;;		None               void
  8897 ;; Registers used:
  8898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;Total ram usage:        1 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    6
  8911 ;; This function calls:
  8912 ;;		_CC2500_WriteByte
  8913 ;;		_DelayTime_1us
  8914 ;;		_RF_Timeout_Counter
  8915 ;;		_setRF_TimeoutCleared
  8916 ;; This function is called by:
  8917 ;;		_CC2500_PowerOnInitial
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _CC2500_PowerRST
  8923  1403                     _CC2500_PowerRST:	
  8924                           
  8925                           ;CC2500_B1.c: 140: RC3 = 0;
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8929  1403  0020               	movlb	0	; select bank0
  8930  1404  118E               	bcf	14,3	;volatile
  8931                           
  8932                           ;CC2500_B1.c: 141: RC4 = 0;
  8933  1405  120E               	bcf	14,4	;volatile
  8934                           
  8935                           ;CC2500_B1.c: 142: RC0 = 1;
  8936  1406  140E               	bsf	14,0	;volatile
  8937                           
  8938                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8939  1407  300A               	movlw	10
  8940  1408  00A0               	movwf	DelayTime_1us@count
  8941  1409  3000               	movlw	0
  8942  140A  00A1               	movwf	DelayTime_1us@count+1
  8943  140B  3190  20B4  3194   	fcall	_DelayTime_1us
  8944                           
  8945                           ;CC2500_B1.c: 144: RC0 = 0;
  8946  140E  0020               	movlb	0	; select bank0
  8947  140F  100E               	bcf	14,0	;volatile
  8948                           
  8949                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8950  1410  300A               	movlw	10
  8951  1411  00A0               	movwf	DelayTime_1us@count
  8952  1412  3000               	movlw	0
  8953  1413  00A1               	movwf	DelayTime_1us@count+1
  8954  1414  3190  20B4  3194   	fcall	_DelayTime_1us
  8955                           
  8956                           ;CC2500_B1.c: 146: RC0 = 1;
  8957  1417  0020               	movlb	0	; select bank0
  8958  1418  140E               	bsf	14,0	;volatile
  8959                           
  8960                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8961  1419  3028               	movlw	40
  8962  141A  00A0               	movwf	DelayTime_1us@count
  8963  141B  3000               	movlw	0
  8964  141C  00A1               	movwf	DelayTime_1us@count+1
  8965  141D  3190  20B4  3194   	fcall	_DelayTime_1us
  8966                           
  8967                           ;CC2500_B1.c: 148: RC0 = 0;
  8968  1420  0020               	movlb	0	; select bank0
  8969  1421  100E               	bcf	14,0	;volatile
  8970                           
  8971                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8972  1422  3030               	movlw	48
  8973  1423  00A6               	movwf	??_CC2500_PowerRST
  8974  1424  0826               	movf	??_CC2500_PowerRST,w
  8975  1425  0021               	movlb	1	; select bank1
  8976  1426  00CD               	movwf	_SPI0Buffer^(0+128)
  8977                           
  8978                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8979  1427  2C2B               	goto	l9056
  8980  1428                     l9054:	
  8981                           
  8982                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8983  1428  319D  25C4  3194   	fcall	_RF_Timeout_Counter
  8984  142B                     l9056:	
  8985  142B  0020               	movlb	0	; select bank0
  8986  142C  1E8E               	btfss	14,5	;volatile
  8987  142D  2C31               	goto	l9060
  8988  142E  0021               	movlb	1	; select bank1
  8989  142F  1F21               	btfss	(_RF1^(0+128)+1),6
  8990  1430  2C28               	goto	l9054
  8991  1431                     l9060:	
  8992                           
  8993                           ;CC2500_B1.c: 152: };
  8994                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8995  1431  319B  2315  3194   	fcall	_setRF_TimeoutCleared
  8996                           
  8997                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8998  1434  319E  268D  3194   	fcall	_CC2500_WriteByte
  8999                           
  9000                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9001  1437  2C3B               	goto	l9066
  9002  1438                     l9064:	
  9003                           
  9004                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9005  1438  319D  25C4  3194   	fcall	_RF_Timeout_Counter
  9006  143B                     l9066:	
  9007  143B  0020               	movlb	0	; select bank0
  9008  143C  1E8E               	btfss	14,5	;volatile
  9009  143D  2C41               	goto	l9070
  9010  143E  0021               	movlb	1	; select bank1
  9011  143F  1F21               	btfss	(_RF1^(0+128)+1),6
  9012  1440  2C38               	goto	l9064
  9013  1441                     l9070:	
  9014                           
  9015                           ;CC2500_B1.c: 157: };
  9016                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9017  1441  319B  2315         	fcall	_setRF_TimeoutCleared
  9018                           
  9019                           ;CC2500_B1.c: 159: RC4 = 0;
  9020  1443  0020               	movlb	0	; select bank0
  9021  1444  120E               	bcf	14,4	;volatile
  9022                           
  9023                           ;CC2500_B1.c: 160: RC0 = 1;
  9024  1445  140E               	bsf	14,0	;volatile
  9025  1446  0008               	return
  9026  1447                     __end_of_CC2500_PowerRST:	
  9027                           
  9028                           	psect	text42
  9029  1102                     __ptext42:	
  9030 ;; *************** function _CC2500_InitSetREG *****************
  9031 ;; Defined at:
  9032 ;;		line 166 in file "../src/CC2500_B1.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9037 ;;  temp2           1    7[BANK0 ] unsigned char 
  9038 ;;  temp1           1    6[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        4 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    7
  9055 ;; This function calls:
  9056 ;;		_CC2500_WriteREG
  9057 ;; This function is called by:
  9058 ;;		_CC2500_PowerOnInitial
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _CC2500_InitSetREG
  9064  1102                     _CC2500_InitSetREG:	
  9065                           
  9066                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9067                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9068                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9069                           
  9070                           ;incstack = 0
  9071                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9072  1102  0020               	movlb	0	; select bank0
  9073  1103  01A8               	clrf	CC2500_InitSetREG@loop_c
  9074  1104                     L3:	
  9075  1104  302F               	movlw	47
  9076  1105  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9077  1106  1803               	btfsc	3,0
  9078  1107  0008               	return
  9079                           
  9080                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9081  1108  0828               	movf	CC2500_InitSetREG@loop_c,w
  9082  1109  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9083  110A  0084               	movwf	4
  9084  110B  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9085  110C  1803               	skipnc
  9086  110D  3E01               	addlw	1
  9087  110E  0085               	movwf	5
  9088  110F  0800               	movf	0,w	;code access
  9089  1110  00A5               	movwf	??_CC2500_InitSetREG
  9090  1111  0825               	movf	??_CC2500_InitSetREG,w
  9091  1112  00A6               	movwf	CC2500_InitSetREG@temp1
  9092                           
  9093                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9094  1113  0828               	movf	CC2500_InitSetREG@loop_c,w
  9095  1114  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9096  1115  0084               	movwf	4
  9097  1116  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9098  1117  1803               	skipnc
  9099  1118  3E01               	addlw	1
  9100  1119  0085               	movwf	5
  9101  111A  0800               	movf	0,w	;code access
  9102  111B  00A5               	movwf	??_CC2500_InitSetREG
  9103  111C  0825               	movf	??_CC2500_InitSetREG,w
  9104  111D  00A7               	movwf	CC2500_InitSetREG@temp2
  9105                           
  9106                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9107  111E  0827               	movf	CC2500_InitSetREG@temp2,w
  9108  111F  00A5               	movwf	??_CC2500_InitSetREG
  9109  1120  0825               	movf	??_CC2500_InitSetREG,w
  9110  1121  00A2               	movwf	CC2500_WriteREG@value
  9111  1122  0826               	movf	CC2500_InitSetREG@temp1,w
  9112  1123  3190  206C  3191   	fcall	_CC2500_WriteREG
  9113  1126  3001               	movlw	1
  9114  1127  0020               	movlb	0	; select bank0
  9115  1128  00A5               	movwf	??_CC2500_InitSetREG
  9116  1129  0825               	movf	??_CC2500_InitSetREG,w
  9117  112A  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9118  112B  2904               	goto	L3
  9119  112C                     __end_of_CC2500_InitSetREG:	
  9120                           
  9121                           	psect	text43
  9122  1FA1                     __ptext43:	
  9123 ;; *************** function _CC2500_InitPATable *****************
  9124 ;; Defined at:
  9125 ;;		line 181 in file "../src/CC2500_B1.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9130 ;;  temp            1    6[BANK0 ] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;		None               void
  9133 ;; Registers used:
  9134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;Total ram usage:        3 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    7
  9147 ;; This function calls:
  9148 ;;		_CC2500_WriteREG
  9149 ;; This function is called by:
  9150 ;;		_CC2500_PowerOnInitial
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           
  9155                           ;psect for function _CC2500_InitPATable
  9156  1FA1                     _CC2500_InitPATable:	
  9157                           
  9158                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9159                           ;CC2500_B1.c: 183: unsigned char temp;
  9160                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9161                           
  9162                           ;incstack = 0
  9163                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9164  1FA1  0020               	movlb	0	; select bank0
  9165  1FA2  01A7               	clrf	CC2500_InitPATable@loop_d
  9166  1FA3                     L4:	
  9167  1FA3  3008               	movlw	8
  9168  1FA4  0227               	subwf	CC2500_InitPATable@loop_d,w
  9169  1FA5  1803               	btfsc	3,0
  9170  1FA6  0008               	return
  9171                           
  9172                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9173  1FA7  0827               	movf	CC2500_InitPATable@loop_d,w
  9174  1FA8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9175  1FA9  0084               	movwf	4
  9176  1FAA  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9177  1FAB  1803               	skipnc
  9178  1FAC  3E01               	addlw	1
  9179  1FAD  0085               	movwf	5
  9180  1FAE  0800               	movf	0,w	;code access
  9181  1FAF  00A5               	movwf	??_CC2500_InitPATable
  9182  1FB0  0825               	movf	??_CC2500_InitPATable,w
  9183  1FB1  00A6               	movwf	CC2500_InitPATable@temp
  9184                           
  9185                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9186  1FB2  0826               	movf	CC2500_InitPATable@temp,w
  9187  1FB3  00A5               	movwf	??_CC2500_InitPATable
  9188  1FB4  0825               	movf	??_CC2500_InitPATable,w
  9189  1FB5  00A2               	movwf	CC2500_WriteREG@value
  9190  1FB6  303E               	movlw	62
  9191  1FB7  3190  206C  319F   	fcall	_CC2500_WriteREG
  9192  1FBA  3001               	movlw	1
  9193  1FBB  0020               	movlb	0	; select bank0
  9194  1FBC  00A5               	movwf	??_CC2500_InitPATable
  9195  1FBD  0825               	movf	??_CC2500_InitPATable,w
  9196  1FBE  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9197  1FBF  2FA3               	goto	L4
  9198  1FC0                     __end_of_CC2500_InitPATable:	
  9199                           
  9200                           	psect	text44
  9201  106C                     __ptext44:	
  9202 ;; *************** function _CC2500_WriteREG *****************
  9203 ;; Defined at:
  9204 ;;		line 258 in file "../src/CC2500_B1.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  w_addr          1    wreg     unsigned char 
  9207 ;;  value           1    2[BANK0 ] unsigned char 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9210 ;; Return value:  Size  Location     Type
  9211 ;;		None               void
  9212 ;; Registers used:
  9213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9219 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;Total ram usage:        3 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    6
  9226 ;; This function calls:
  9227 ;;		_CC2500_WriteByte
  9228 ;;		_RF_Timeout_Counter
  9229 ;;		_setRF_TimeoutCleared
  9230 ;; This function is called by:
  9231 ;;		_CC2500_InitSetREG
  9232 ;;		_CC2500_InitPATable
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           
  9237                           ;psect for function _CC2500_WriteREG
  9238  106C                     _CC2500_WriteREG:	
  9239                           
  9240                           ;incstack = 0
  9241                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9242                           ;CC2500_WriteREG@w_addr stored from wreg
  9243  106C  0020               	movlb	0	; select bank0
  9244  106D  00A4               	movwf	CC2500_WriteREG@w_addr
  9245                           
  9246                           ;CC2500_B1.c: 259: RC0 = 0;
  9247  106E  100E               	bcf	14,0	;volatile
  9248                           
  9249                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9250  106F  0824               	movf	CC2500_WriteREG@w_addr,w
  9251  1070  00A3               	movwf	??_CC2500_WriteREG
  9252  1071  0823               	movf	??_CC2500_WriteREG,w
  9253  1072  0021               	movlb	1	; select bank1
  9254  1073  00CD               	movwf	_SPI0Buffer^(0+128)
  9255                           
  9256                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9257  1074  2878               	goto	l8946
  9258  1075                     l8944:	
  9259                           
  9260                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9261  1075  319D  25C4  3190   	fcall	_RF_Timeout_Counter
  9262  1078                     l8946:	
  9263  1078  0020               	movlb	0	; select bank0
  9264  1079  1E8E               	btfss	14,5	;volatile
  9265  107A  287E               	goto	l8950
  9266  107B  0021               	movlb	1	; select bank1
  9267  107C  1F21               	btfss	(_RF1^(0+128)+1),6
  9268  107D  2875               	goto	l8944
  9269  107E                     l8950:	
  9270                           
  9271                           ;CC2500_B1.c: 263: };
  9272                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9273  107E  319B  2315  3190   	fcall	_setRF_TimeoutCleared
  9274                           
  9275                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9276  1081  319E  268D  3190   	fcall	_CC2500_WriteByte
  9277                           
  9278                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9279  1084  0020               	movlb	0	; select bank0
  9280  1085  0822               	movf	CC2500_WriteREG@value,w
  9281  1086  00A3               	movwf	??_CC2500_WriteREG
  9282  1087  0823               	movf	??_CC2500_WriteREG,w
  9283  1088  0021               	movlb	1	; select bank1
  9284  1089  00CD               	movwf	_SPI0Buffer^(0+128)
  9285                           
  9286                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9287  108A  319E  268D         	fcall	_CC2500_WriteByte
  9288                           
  9289                           ;CC2500_B1.c: 269: RC0 = 1;
  9290  108C  0020               	movlb	0	; select bank0
  9291  108D  140E               	bsf	14,0	;volatile
  9292  108E  0008               	return
  9293  108F                     __end_of_CC2500_WriteREG:	
  9294                           
  9295                           	psect	text45
  9296  1C2F                     __ptext45:	
  9297 ;; *************** function _CC2500_FrequencyCabr *****************
  9298 ;; Defined at:
  9299 ;;		line 208 in file "../src/CC2500_B1.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;		None               void
  9306 ;; Registers used:
  9307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;Total ram usage:        0 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    7
  9320 ;; This function calls:
  9321 ;;		_CC2500_WriteCommand
  9322 ;;		_DelayTime_1us
  9323 ;; This function is called by:
  9324 ;;		_CC2500_PowerOnInitial
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           
  9329                           ;psect for function _CC2500_FrequencyCabr
  9330  1C2F                     _CC2500_FrequencyCabr:	
  9331                           
  9332                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9336  1C2F  3033               	movlw	51
  9337  1C30  319E  26DA  319C   	fcall	_CC2500_WriteCommand
  9338                           
  9339                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9340  1C33  30E8               	movlw	232
  9341  1C34  0020               	movlb	0	; select bank0
  9342  1C35  00A0               	movwf	DelayTime_1us@count
  9343  1C36  3003               	movlw	3
  9344  1C37  00A1               	movwf	DelayTime_1us@count+1
  9345  1C38  3190  20B4         	fcall	_DelayTime_1us
  9346  1C3A  0008               	return
  9347  1C3B                     __end_of_CC2500_FrequencyCabr:	
  9348                           
  9349                           	psect	text46
  9350  10B4                     __ptext46:	
  9351 ;; *************** function _DelayTime_1us *****************
  9352 ;; Defined at:
  9353 ;;		line 327 in file "../src/CC2500_B1.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;  count           2    0[BANK0 ] int 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  j               2    4[BANK0 ] unsigned int 
  9358 ;;  i               2    2[BANK0 ] unsigned int 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;		None               void
  9361 ;; Registers used:
  9362 ;;		wreg, status,2
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9368 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;Total ram usage:        6 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    5
  9375 ;; This function calls:
  9376 ;;		Nothing
  9377 ;; This function is called by:
  9378 ;;		_CC2500_PowerRST
  9379 ;;		_CC2500_FrequencyCabr
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           
  9384                           ;psect for function _DelayTime_1us
  9385  10B4                     _DelayTime_1us:	
  9386                           
  9387                           ;CC2500_B1.c: 328: unsigned int i, j;
  9388                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9389                           
  9390                           ;incstack = 0
  9391                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9392  10B4  3001               	movlw	1
  9393  10B5  0020               	movlb	0	; select bank0
  9394  10B6  00A2               	movwf	DelayTime_1us@i
  9395  10B7  3000               	movlw	0
  9396  10B8  00A3               	movwf	DelayTime_1us@i+1
  9397  10B9                     l347:	
  9398  10B9  0821               	movf	DelayTime_1us@count+1,w
  9399  10BA  0223               	subwf	DelayTime_1us@i+1,w
  9400  10BB  1D03               	skipz
  9401  10BC  28BF               	goto	u5465
  9402  10BD  0820               	movf	DelayTime_1us@count,w
  9403  10BE  0222               	subwf	DelayTime_1us@i,w
  9404  10BF                     u5465:	
  9405  10BF  1803               	btfsc	3,0
  9406  10C0  0008               	return
  9407                           
  9408                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9409  10C1  01A4               	clrf	DelayTime_1us@j
  9410  10C2  01A5               	clrf	DelayTime_1us@j+1
  9411  10C3  3000               	movlw	0
  9412  10C4  0225               	subwf	DelayTime_1us@j+1,w
  9413  10C5  3002               	movlw	2
  9414  10C6  1903               	skipnz
  9415  10C7  0224               	subwf	DelayTime_1us@j,w
  9416  10C8  1803               	btfsc	3,0
  9417  10C9  28D5               	goto	l6302
  9418  10CA                     l6300:	
  9419  10CA  3001               	movlw	1
  9420  10CB  07A4               	addwf	DelayTime_1us@j,f
  9421  10CC  3000               	movlw	0
  9422  10CD  3DA5               	addwfc	DelayTime_1us@j+1,f
  9423  10CE  3000               	movlw	0
  9424  10CF  0225               	subwf	DelayTime_1us@j+1,w
  9425  10D0  3002               	movlw	2
  9426  10D1  1903               	skipnz
  9427  10D2  0224               	subwf	DelayTime_1us@j,w
  9428  10D3  1C03               	skipc
  9429  10D4  28CA               	goto	l6300
  9430  10D5                     l6302:	
  9431  10D5  3001               	movlw	1
  9432  10D6  07A2               	addwf	DelayTime_1us@i,f
  9433  10D7  3000               	movlw	0
  9434  10D8  3DA3               	addwfc	DelayTime_1us@i+1,f
  9435  10D9  28B9               	goto	l347
  9436  10DA                     __end_of_DelayTime_1us:	
  9437                           
  9438                           	psect	text47
  9439  1B1D                     __ptext47:	
  9440 ;; *************** function _CC2500_ClearTXFIFO *****************
  9441 ;; Defined at:
  9442 ;;		line 194 in file "../src/CC2500_B1.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;		None
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;		None
  9447 ;; Return value:  Size  Location     Type
  9448 ;;		None               void
  9449 ;; Registers used:
  9450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;Total ram usage:        0 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    7
  9463 ;; This function calls:
  9464 ;;		_CC2500_WriteCommand
  9465 ;; This function is called by:
  9466 ;;		_CC2500_PowerOnInitial
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           
  9471                           ;psect for function _CC2500_ClearTXFIFO
  9472  1B1D                     _CC2500_ClearTXFIFO:	
  9473                           
  9474                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9475                           
  9476                           ;incstack = 0
  9477                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9478  1B1D  303B               	movlw	59
  9479  1B1E  319E  26DA         	fcall	_CC2500_WriteCommand
  9480  1B20  0008               	return
  9481  1B21                     __end_of_CC2500_ClearTXFIFO:	
  9482                           
  9483                           	psect	text48
  9484  1B19                     __ptext48:	
  9485 ;; *************** function _CC2500_ClearRXFIFO *****************
  9486 ;; Defined at:
  9487 ;;		line 201 in file "../src/CC2500_B1.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;		None               void
  9494 ;; Registers used:
  9495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;Total ram usage:        0 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    7
  9508 ;; This function calls:
  9509 ;;		_CC2500_WriteCommand
  9510 ;; This function is called by:
  9511 ;;		_CC2500_PowerOnInitial
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function _CC2500_ClearRXFIFO
  9517  1B19                     _CC2500_ClearRXFIFO:	
  9518                           
  9519                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9523  1B19  303A               	movlw	58
  9524  1B1A  319E  26DA         	fcall	_CC2500_WriteCommand
  9525  1B1C  0008               	return
  9526  1B1D                     __end_of_CC2500_ClearRXFIFO:	
  9527                           
  9528                           	psect	text49
  9529  1EDA                     __ptext49:	
  9530 ;; *************** function _CC2500_WriteCommand *****************
  9531 ;; Defined at:
  9532 ;;		line 292 in file "../src/CC2500_B1.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;  command         1    wreg     unsigned char 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  command         1    3[BANK0 ] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        2 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    6
  9553 ;; This function calls:
  9554 ;;		_CC2500_WriteByte
  9555 ;;		_RF_Timeout_Counter
  9556 ;;		_setRF_TimeoutCleared
  9557 ;; This function is called by:
  9558 ;;		_CC2500_TxData
  9559 ;;		_CC2500_RxData
  9560 ;;		_CC2500_ClearTXFIFO
  9561 ;;		_CC2500_ClearRXFIFO
  9562 ;;		_CC2500_FrequencyCabr
  9563 ;;		_CC2500_SIDLEMode
  9564 ;;		_setRF_Main
  9565 ;;		_RF_RxDisable
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           
  9570                           ;psect for function _CC2500_WriteCommand
  9571  1EDA                     _CC2500_WriteCommand:	
  9572                           
  9573                           ;incstack = 0
  9574                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9575                           ;CC2500_WriteCommand@command stored from wreg
  9576  1EDA  0020               	movlb	0	; select bank0
  9577  1EDB  00A3               	movwf	CC2500_WriteCommand@command
  9578                           
  9579                           ;CC2500_B1.c: 293: RC0 = 0;
  9580  1EDC  100E               	bcf	14,0	;volatile
  9581                           
  9582                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9583  1EDD  0823               	movf	CC2500_WriteCommand@command,w
  9584  1EDE  00A2               	movwf	??_CC2500_WriteCommand
  9585  1EDF  0822               	movf	??_CC2500_WriteCommand,w
  9586  1EE0  0021               	movlb	1	; select bank1
  9587  1EE1  00CD               	movwf	_SPI0Buffer^(0+128)
  9588                           
  9589                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9590  1EE2  2EE6               	goto	l8912
  9591  1EE3                     l8910:	
  9592                           
  9593                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9594  1EE3  319D  25C4  319E   	fcall	_RF_Timeout_Counter
  9595  1EE6                     l8912:	
  9596  1EE6  0020               	movlb	0	; select bank0
  9597  1EE7  1E8E               	btfss	14,5	;volatile
  9598  1EE8  2EEC               	goto	l8916
  9599  1EE9  0021               	movlb	1	; select bank1
  9600  1EEA  1F21               	btfss	(_RF1^(0+128)+1),6
  9601  1EEB  2EE3               	goto	l8910
  9602  1EEC                     l8916:	
  9603                           
  9604                           ;CC2500_B1.c: 298: };
  9605                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9606  1EEC  319B  2315  319E   	fcall	_setRF_TimeoutCleared
  9607                           
  9608                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9609  1EEF  319E  268D         	fcall	_CC2500_WriteByte
  9610                           
  9611                           ;CC2500_B1.c: 302: RC0 = 1;
  9612  1EF1  0020               	movlb	0	; select bank0
  9613  1EF2  140E               	bsf	14,0	;volatile
  9614  1EF3  0008               	return
  9615  1EF4                     __end_of_CC2500_WriteCommand:	
  9616                           
  9617                           	psect	text50
  9618  1B15                     __ptext50:	
  9619 ;; *************** function _setRF_TimeoutCleared *****************
  9620 ;; Defined at:
  9621 ;;		line 149 in file "../src/RF_Control_B1.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;		None               void
  9628 ;; Registers used:
  9629 ;;		status,2
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        0 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    5
  9642 ;; This function calls:
  9643 ;;		Nothing
  9644 ;; This function is called by:
  9645 ;;		_CC2500_TxData
  9646 ;;		_CC2500_RxData
  9647 ;;		_CC2500_PowerRST
  9648 ;;		_CC2500_WriteREG
  9649 ;;		_CC2500_WriteCommand
  9650 ;;		_CC2500_ReadStatus
  9651 ;;		_CC2500_ReadREG
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           
  9656                           ;psect for function _setRF_TimeoutCleared
  9657  1B15                     _setRF_TimeoutCleared:	
  9658                           
  9659                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9663  1B15  0021               	movlb	1	; select bank1
  9664  1B16  01AC               	clrf	(_RF1^(0+128)+12)
  9665  1B17  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9666  1B18  0008               	return
  9667  1B19                     __end_of_setRF_TimeoutCleared:	
  9668                           
  9669                           	psect	text51
  9670  1DC4                     __ptext51:	
  9671 ;; *************** function _RF_Timeout_Counter *****************
  9672 ;; Defined at:
  9673 ;;		line 141 in file "../src/RF_Control_B1.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        0 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    5
  9694 ;; This function calls:
  9695 ;;		Nothing
  9696 ;; This function is called by:
  9697 ;;		_CC2500_TxData
  9698 ;;		_CC2500_RxData
  9699 ;;		_CC2500_PowerRST
  9700 ;;		_CC2500_WriteREG
  9701 ;;		_CC2500_WriteCommand
  9702 ;;		_CC2500_ReadStatus
  9703 ;;		_CC2500_ReadREG
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           
  9708                           ;psect for function _RF_Timeout_Counter
  9709  1DC4                     _RF_Timeout_Counter:	
  9710                           
  9711                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9715  1DC4  3001               	movlw	1
  9716  1DC5  0021               	movlb	1	; select bank1
  9717  1DC6  07AC               	addwf	(_RF1^(0+128)+12),f
  9718  1DC7  3000               	movlw	0
  9719  1DC8  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9720                           
  9721                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9722  1DC9  300C               	movlw	12
  9723  1DCA  3EA0               	addlw	_RF1& (0+255)
  9724  1DCB  0086               	movwf	6
  9725  1DCC  0187               	clrf	7
  9726  1DCD  3F40               	moviw [0]fsr1
  9727  1DCE  3AA8               	xorlw	168
  9728  1DCF  1D03               	skipz
  9729  1DD0  2DD3               	goto	u9535
  9730  1DD1  3F41               	moviw [1]fsr1
  9731  1DD2  3A61               	xorlw	97
  9732  1DD3                     u9535:	
  9733  1DD3  1D03               	skipz
  9734  1DD4  0008               	return
  9735                           
  9736                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9737  1DD5  01AC               	clrf	(_RF1^(0+128)+12)
  9738  1DD6  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9739                           
  9740                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9741  1DD7  1721               	bsf	(_RF1^(0+128)+1),6
  9742  1DD8  0008               	return
  9743  1DD9                     __end_of_RF_Timeout_Counter:	
  9744                           
  9745                           	psect	text52
  9746  1E8D                     __ptext52:	
  9747 ;; *************** function _CC2500_WriteByte *****************
  9748 ;; Defined at:
  9749 ;;		line 226 in file "../src/CC2500_B1.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9754 ;; Return value:  Size  Location     Type
  9755 ;;		None               void
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        2 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    5
  9770 ;; This function calls:
  9771 ;;		Nothing
  9772 ;; This function is called by:
  9773 ;;		_CC2500_TxData
  9774 ;;		_CC2500_RxData
  9775 ;;		_CC2500_PowerRST
  9776 ;;		_CC2500_WriteREG
  9777 ;;		_CC2500_WriteCommand
  9778 ;;		_CC2500_ReadStatus
  9779 ;;		_CC2500_ReadREG
  9780 ;; This function uses a non-reentrant model
  9781 ;;
  9782                           
  9783                           
  9784                           ;psect for function _CC2500_WriteByte
  9785  1E8D                     _CC2500_WriteByte:	
  9786                           
  9787                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9788                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9789                           
  9790                           ;incstack = 0
  9791                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9792  1E8D  0020               	movlb	0	; select bank0
  9793  1E8E  01A1               	clrf	CC2500_WriteByte@loop_a
  9794  1E8F                     L5:	
  9795  1E8F  3008               	movlw	8
  9796  1E90  0221               	subwf	CC2500_WriteByte@loop_a,w
  9797  1E91  1803               	btfsc	3,0
  9798  1E92  0008               	return
  9799                           
  9800                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9801  1E93  0021               	movlb	1	; select bank1
  9802  1E94  1FCD               	btfss	_SPI0Buffer^(0+128),7
  9803  1E95  2E99               	goto	l303
  9804                           
  9805                           ;CC2500_B1.c: 230: RC4 = 1;
  9806  1E96  0020               	movlb	0	; select bank0
  9807  1E97  160E               	bsf	14,4	;volatile
  9808  1E98  2E9B               	goto	l304
  9809  1E99                     l303:	
  9810                           
  9811                           ;CC2500_B1.c: 231: else
  9812                           ;CC2500_B1.c: 232: RC4 = 0;
  9813  1E99  0020               	movlb	0	; select bank0
  9814  1E9A  120E               	bcf	14,4	;volatile
  9815  1E9B                     l304:	
  9816                           
  9817                           ;CC2500_B1.c: 233: RC3 = 1;
  9818  1E9B  158E               	bsf	14,3	;volatile
  9819                           
  9820                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9821  1E9C  1003               	clrc
  9822  1E9D  0021               	movlb	1	; select bank1
  9823  1E9E  0DCD               	rlf	_SPI0Buffer^(0+128),f
  9824                           
  9825                           ;CC2500_B1.c: 235: RC3 = 0;
  9826  1E9F  0020               	movlb	0	; select bank0
  9827  1EA0  118E               	bcf	14,3	;volatile
  9828  1EA1  3001               	movlw	1
  9829  1EA2  00A0               	movwf	??_CC2500_WriteByte
  9830  1EA3  0820               	movf	??_CC2500_WriteByte,w
  9831  1EA4  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9832  1EA5  2E8F               	goto	L5
  9833  1EA6                     __end_of_CC2500_WriteByte:	
  9834                           
  9835                           	psect	text53
  9836  1AF5                     __ptext53:	
  9837 ;; *************** function _RF_Initialization *****************
  9838 ;; Defined at:
  9839 ;;		line 9 in file "../src/RF_Control_B1.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;		None               void
  9846 ;; Registers used:
  9847 ;;		wreg, status,2, status,0, pclath, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;Total ram usage:        0 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    6
  9860 ;; This function calls:
  9861 ;;		_setRF_Initialization
  9862 ;; This function is called by:
  9863 ;;		_main
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           
  9868                           ;psect for function _RF_Initialization
  9869  1AF5                     _RF_Initialization:	
  9870                           
  9871                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9872                           
  9873                           ;incstack = 0
  9874                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9875  1AF5  319B  23AC         	fcall	_setRF_Initialization
  9876  1AF7  0008               	return
  9877  1AF8                     __end_of_RF_Initialization:	
  9878                           
  9879                           	psect	text54
  9880  1BAC                     __ptext54:	
  9881 ;; *************** function _setRF_Initialization *****************
  9882 ;; Defined at:
  9883 ;;		line 17 in file "../src/RF_Control_B1.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;		None               void
  9890 ;; Registers used:
  9891 ;;		wreg
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;Total ram usage:        1 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    5
  9904 ;; This function calls:
  9905 ;;		Nothing
  9906 ;; This function is called by:
  9907 ;;		_RF_Initialization
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           
  9912                           ;psect for function _setRF_Initialization
  9913  1BAC                     _setRF_Initialization:	
  9914                           
  9915                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9916                           
  9917                           ;incstack = 0
  9918                           ; Regs used in _setRF_Initialization: [wreg]
  9919  1BAC  3015               	movlw	21
  9920  1BAD  0020               	movlb	0	; select bank0
  9921  1BAE  00A0               	movwf	??_setRF_Initialization
  9922  1BAF  0820               	movf	??_setRF_Initialization,w
  9923  1BB0  0021               	movlb	1	; select bank1
  9924  1BB1  00CF               	movwf	_Tx_Length^(0+128)
  9925                           
  9926                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9927  1BB2  30C8               	movlw	200
  9928  1BB3  00A7               	movwf	(_RF1^(0+128)+7)
  9929  1BB4  3000               	movlw	0
  9930  1BB5  00A8               	movwf	(_RF1^(0+128)+8)
  9931  1BB6  0008               	return
  9932  1BB7                     __end_of_setRF_Initialization:	
  9933                           
  9934                           	psect	text55
  9935  1D3F                     __ptext55:	
  9936 ;; *************** function _Mcu_Initialization *****************
  9937 ;; Defined at:
  9938 ;;		line 30 in file "../src/MCU_B1.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        0 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    6
  9959 ;; This function calls:
  9960 ;;		_ADC_Set
  9961 ;;		_Fosc_Set
  9962 ;;		_IOC_Set
  9963 ;;		_IO_Set
  9964 ;;		_TMR1_Set
  9965 ;;		_WDT_Set
  9966 ;; This function is called by:
  9967 ;;		_main
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function _Mcu_Initialization
  9973  1D3F                     _Mcu_Initialization:	
  9974                           
  9975                           ;MCU_B1.c: 32: Fosc_Set();
  9976                           
  9977                           ;incstack = 0
  9978                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9979  1D3F  319B  2311  319D   	fcall	_Fosc_Set
  9980                           
  9981                           ;MCU_B1.c: 34: IO_Set();
  9982  1D42  319E  26C0  319D   	fcall	_IO_Set
  9983                           
  9984                           ;MCU_B1.c: 36: ;;
  9985                           ;MCU_B1.c: 38: TMR1_Set();
  9986  1D45  319C  2417  319D   	fcall	_TMR1_Set
  9987                           
  9988                           ;MCU_B1.c: 40: ADC_Set();
  9989  1D48  319B  2347  319D   	fcall	_ADC_Set
  9990                           
  9991                           ;MCU_B1.c: 42: ;;
  9992                           ;MCU_B1.c: 44: ;;
  9993                           ;MCU_B1.c: 46: IOC_Set();
  9994  1D4B  319B  23A1  319D   	fcall	_IOC_Set
  9995                           
  9996                           ;MCU_B1.c: 48: ;;
  9997                           ;MCU_B1.c: 50: ;;
  9998                           ;MCU_B1.c: 52: WDT_Set();
  9999  1D4E  319C  2423         	fcall	_WDT_Set
 10000  1D50  0008               	return
 10001  1D51                     __end_of_Mcu_Initialization:	
 10002                           
 10003                           	psect	text56
 10004  1C23                     __ptext56:	
 10005 ;; *************** function _WDT_Set *****************
 10006 ;; Defined at:
 10007 ;;		line 1102 in file "../src/MCU_B1.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;		None
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;		None
 10012 ;; Return value:  Size  Location     Type
 10013 ;;		None               void
 10014 ;; Registers used:
 10015 ;;		wreg
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;Total ram usage:        1 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    5
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_Mcu_Initialization
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _WDT_Set
 10037  1C23                     _WDT_Set:	
 10038                           
 10039                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10040                           
 10041                           ;incstack = 0
 10042                           ; Regs used in _WDT_Set: [wreg]
 10043  1C23  3017               	movlw	23
 10044  1C24  0021               	movlb	1	; select bank1
 10045  1C25  0097               	movwf	23	;volatile
 10046                           
 10047                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10048  1C26  0022               	movlb	2	; select bank2
 10049  1C27  1436               	bsf	_WDT^(0+256),0
 10050                           
 10051                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10052  1C28  300A               	movlw	10
 10053  1C29  0020               	movlb	0	; select bank0
 10054  1C2A  00A0               	movwf	??_WDT_Set
 10055  1C2B  0820               	movf	??_WDT_Set,w
 10056  1C2C  0022               	movlb	2	; select bank2
 10057  1C2D  00B7               	movwf	(_WDT^(0+256)+1)
 10058  1C2E  0008               	return
 10059  1C2F                     __end_of_WDT_Set:	
 10060                           
 10061                           	psect	text57
 10062  1C17                     __ptext57:	
 10063 ;; *************** function _TMR1_Set *****************
 10064 ;; Defined at:
 10065 ;;		line 226 in file "../src/MCU_B1.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        0 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    5
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_Mcu_Initialization
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _TMR1_Set
 10095  1C17                     _TMR1_Set:	
 10096                           
 10097                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _TMR1_Set: [wreg]
 10101  1C17  3041               	movlw	65
 10102  1C18  0020               	movlb	0	; select bank0
 10103  1C19  0098               	movwf	24	;volatile
 10104                           
 10105                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10106  1C1A  30FA               	movlw	250
 10107  1C1B  0097               	movwf	23	;volatile
 10108                           
 10109                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10110  1C1C  3038               	movlw	56
 10111  1C1D  0096               	movwf	22	;volatile
 10112                           
 10113                           ;MCU_B1.c: 230: TMR1IE = 1;
 10114  1C1E  0021               	movlb	1	; select bank1
 10115  1C1F  1411               	bsf	17,0	;volatile
 10116                           
 10117                           ;MCU_B1.c: 231: PEIE = 1;
 10118  1C20  170B               	bsf	11,6	;volatile
 10119                           
 10120                           ;MCU_B1.c: 232: GIE = 1;
 10121  1C21  178B               	bsf	11,7	;volatile
 10122  1C22  0008               	return
 10123  1C23                     __end_of_TMR1_Set:	
 10124                           
 10125                           	psect	text58
 10126  1EC0                     __ptext58:	
 10127 ;; *************** function _IO_Set *****************
 10128 ;; Defined at:
 10129 ;;		line 60 in file "../src/MCU_B1.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg, status,2
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;Total ram usage:        0 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    5
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_Mcu_Initialization
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _IO_Set
 10159  1EC0                     _IO_Set:	
 10160                           
 10161                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10162                           
 10163                           ;incstack = 0
 10164                           ; Regs used in _IO_Set: [wreg+status,2]
 10165  1EC0  30F7               	movlw	247
 10166  1EC1  0021               	movlb	1	; select bank1
 10167  1EC2  008C               	movwf	12	;volatile
 10168                           
 10169                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10170  1EC3  3004               	movlw	4
 10171  1EC4  008D               	movwf	13	;volatile
 10172                           
 10173                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10174  1EC5  3026               	movlw	38
 10175  1EC6  008E               	movwf	14	;volatile
 10176                           
 10177                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10178  1EC7  0022               	movlb	2	; select bank2
 10179  1EC8  018C               	clrf	12	;volatile
 10180                           
 10181                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10182  1EC9  018D               	clrf	13	;volatile
 10183                           
 10184                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10185  1ECA  018E               	clrf	14	;volatile
 10186                           
 10187                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10188  1ECB  300E               	movlw	14
 10189  1ECC  0023               	movlb	3	; select bank3
 10190  1ECD  008C               	movwf	12	;volatile
 10191                           
 10192                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10193  1ECE  018D               	clrf	13	;volatile
 10194                           
 10195                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10196  1ECF  018E               	clrf	14	;volatile
 10197                           
 10198                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10199  1ED0  30F7               	movlw	247
 10200  1ED1  0020               	movlb	0	; select bank0
 10201  1ED2  008C               	movwf	12	;volatile
 10202                           
 10203                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10204  1ED3  3004               	movlw	4
 10205  1ED4  008D               	movwf	13	;volatile
 10206                           
 10207                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10208  1ED5  3026               	movlw	38
 10209  1ED6  008E               	movwf	14	;volatile
 10210                           
 10211                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10212  1ED7  0024               	movlb	4	; select bank4
 10213  1ED8  018D               	clrf	13	;volatile
 10214  1ED9  0008               	return
 10215  1EDA                     __end_of_IO_Set:	
 10216                           
 10217                           	psect	text59
 10218  1BA1                     __ptext59:	
 10219 ;; *************** function _IOC_Set *****************
 10220 ;; Defined at:
 10221 ;;		line 380 in file "../src/MCU_B1.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;		None
 10226 ;; Return value:  Size  Location     Type
 10227 ;;		None               void
 10228 ;; Registers used:
 10229 ;;		wreg, status,2
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;Total ram usage:        0 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    5
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_Mcu_Initialization
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function _IOC_Set
 10251  1BA1                     _IOC_Set:	
 10252                           
 10253                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10254                           
 10255                           ;incstack = 0
 10256                           ; Regs used in _IOC_Set: [wreg+status,2]
 10257  1BA1  3004               	movlw	4
 10258  1BA2  0027               	movlb	7	; select bank7
 10259  1BA3  0094               	movwf	20	;volatile
 10260                           
 10261                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10262  1BA4  3004               	movlw	4
 10263  1BA5  0095               	movwf	21	;volatile
 10264                           
 10265                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10266  1BA6  0196               	clrf	22	;volatile
 10267                           
 10268                           ;MCU_B1.c: 387: IOCIE = 1;
 10269  1BA7  158B               	bsf	11,3	;volatile
 10270                           
 10271                           ;MCU_B1.c: 388: IOCIF = 0;
 10272  1BA8  100B               	bcf	11,0	;volatile
 10273                           
 10274                           ;MCU_B1.c: 389: PEIE = 1;
 10275  1BA9  170B               	bsf	11,6	;volatile
 10276                           
 10277                           ;MCU_B1.c: 390: GIE = 1;
 10278  1BAA  178B               	bsf	11,7	;volatile
 10279  1BAB  0008               	return
 10280  1BAC                     __end_of_IOC_Set:	
 10281                           
 10282                           	psect	text60
 10283  1B11                     __ptext60:	
 10284 ;; *************** function _Fosc_Set *****************
 10285 ;; Defined at:
 10286 ;;		line 56 in file "../src/MCU_B1.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;		None
 10291 ;; Return value:  Size  Location     Type
 10292 ;;		None               void
 10293 ;; Registers used:
 10294 ;;		wreg
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;Total ram usage:        0 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    5
 10307 ;; This function calls:
 10308 ;;		Nothing
 10309 ;; This function is called by:
 10310 ;;		_Mcu_Initialization
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           
 10315                           ;psect for function _Fosc_Set
 10316  1B11                     _Fosc_Set:	
 10317                           
 10318                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10319                           
 10320                           ;incstack = 0
 10321                           ; Regs used in _Fosc_Set: [wreg]
 10322  1B11  3078               	movlw	120
 10323  1B12  0021               	movlb	1	; select bank1
 10324  1B13  0099               	movwf	25	;volatile
 10325  1B14  0008               	return
 10326  1B15                     __end_of_Fosc_Set:	
 10327                           
 10328                           	psect	text61
 10329  1B47                     __ptext61:	
 10330 ;; *************** function _ADC_Set *****************
 10331 ;; Defined at:
 10332 ;;		line 427 in file "../src/MCU_B1.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;		None
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;		None
 10337 ;; Return value:  Size  Location     Type
 10338 ;;		None               void
 10339 ;; Registers used:
 10340 ;;		wreg
 10341 ;; Tracked objects:
 10342 ;;		On entry : 0/0
 10343 ;;		On exit  : 0/0
 10344 ;;		Unchanged: 0/0
 10345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;Total ram usage:        0 bytes
 10351 ;; Hardware stack levels used:    1
 10352 ;; Hardware stack levels required when called:    5
 10353 ;; This function calls:
 10354 ;;		Nothing
 10355 ;; This function is called by:
 10356 ;;		_Mcu_Initialization
 10357 ;; This function uses a non-reentrant model
 10358 ;;
 10359                           
 10360                           
 10361                           ;psect for function _ADC_Set
 10362  1B47                     _ADC_Set:	
 10363                           
 10364                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10365                           
 10366                           ;incstack = 0
 10367                           ; Regs used in _ADC_Set: [wreg]
 10368  1B47  30F3               	movlw	243
 10369  1B48  0021               	movlb	1	; select bank1
 10370  1B49  009E               	movwf	30	;volatile
 10371                           
 10372                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10373  1B4A  30C1               	movlw	193
 10374  1B4B  0022               	movlb	2	; select bank2
 10375  1B4C  0097               	movwf	23	;volatile
 10376  1B4D  0008               	return
 10377  1B4E                     __end_of_ADC_Set:	
 10378                           
 10379                           	psect	text62
 10380  0053                     __ptext62:	
 10381 ;; *************** function _Load_Main *****************
 10382 ;; Defined at:
 10383 ;;		line 39 in file "../src/OverLoad_B1.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;  i               2   16[BANK0 ] int 
 10388 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10389 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10390 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10391 ;;  error           1   10[BANK0 ] unsigned char 
 10392 ;; Return value:  Size  Location     Type
 10393 ;;		None               void
 10394 ;; Registers used:
 10395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10396 ;; Tracked objects:
 10397 ;;		On entry : 0/0
 10398 ;;		On exit  : 0/0
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;Total ram usage:       10 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    6
 10408 ;; This function calls:
 10409 ;;		___lwdiv
 10410 ;;		___wmul
 10411 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10412 ;;		_getDimmer_LoadGO
 10413 ;;		_getDimmer_Load_Status
 10414 ;;		_getMain_All_Error_Status
 10415 ;;		_getMain_All_LightsStatus
 10416 ;;		_getMain_Lights_Count
 10417 ;;		_setLoad_AH_AL_Restore
 10418 ;; This function is called by:
 10419 ;;		_main
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           
 10424                           ;psect for function _Load_Main
 10425  0053                     _Load_Main:	
 10426                           
 10427                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10431  0053  3000               	movlw	0
 10432  0054  3191  218C  3180   	fcall	_getMain_All_Error_Status
 10433  0057  0020               	movlb	0	; select bank0
 10434  0058  00A8               	movwf	??_Load_Main
 10435  0059  0828               	movf	??_Load_Main,w
 10436  005A  00AA               	movwf	Load_Main@error
 10437                           
 10438                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10439  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10440  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10441  005D  01AF               	clrf	Load_Main@LightsCount
 10442                           
 10443                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10444  005E  0022               	movlb	2	; select bank2
 10445  005F  1C3E               	btfss	_Load^(0+256),0
 10446  0060  29FF               	goto	l1625
 10447                           
 10448                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10449  0061  319B  2381  3180   	fcall	_getMain_All_LightsStatus
 10450  0064  3800               	iorlw	0
 10451  0065  1D03               	skipz
 10452  0066  2869               	goto	l10152
 10453                           
 10454                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10455  0067  0022               	movlb	2	; select bank2
 10456  0068  288A               	goto	l10170
 10457  0069                     l10152:	
 10458                           ;OverLoad_B1.c: 46: } else {
 10459                           
 10460                           
 10461                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10462  0069  0020               	movlb	0	; select bank0
 10463  006A  08AA               	movf	Load_Main@error,f
 10464  006B  1D03               	skipz
 10465  006C  2887               	goto	l1628
 10466  006D  319D  2577  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10467  0070  3800               	iorlw	0
 10468  0071  1D03               	skipz
 10469  0072  2887               	goto	l1628
 10470                           
 10471                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10472  0073  0022               	movlb	2	; select bank2
 10473  0074  14BE               	bsf	_Load^(0+256),1
 10474                           
 10475                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10476  0075  319B  2356  3180   	fcall	_getDimmer_LoadGO
 10477  0078  3A01               	xorlw	1
 10478  0079  1D03               	skipz
 10479  007A  2882               	goto	l1629
 10480                           
 10481                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10482  007B  0022               	movlb	2	; select bank2
 10483  007C  1DBE               	btfss	_Load^(0+256),3
 10484  007D  1BBE               	btfsc	_Load^(0+256),7
 10485  007E  288B               	goto	l1627
 10486                           
 10487                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10488  007F  15BE               	bsf	_Load^(0+256),3
 10489                           
 10490                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10491  0080  01E3               	clrf	(_Load^(0+256)+37)
 10492                           
 10493                           ;OverLoad_B1.c: 56: }
 10494                           ;OverLoad_B1.c: 57: } else {
 10495  0081  288B               	goto	l1627
 10496  0082                     l1629:	
 10497                           
 10498                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10499  0082  0022               	movlb	2	; select bank2
 10500  0083  1FBE               	btfss	_Load^(0+256),7
 10501  0084  288B               	goto	l1627
 10502                           
 10503                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10504  0085  13BE               	bcf	_Load^(0+256),7
 10505                           
 10506                           ;OverLoad_B1.c: 60: }
 10507                           ;OverLoad_B1.c: 61: }
 10508                           ;OverLoad_B1.c: 62: } else {
 10509  0086  288B               	goto	l1627
 10510  0087                     l1628:	
 10511                           
 10512                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10513  0087  0022               	movlb	2	; select bank2
 10514  0088  1CBE               	btfss	_Load^(0+256),1
 10515  0089  288B               	goto	l1627
 10516  008A                     l10170:	
 10517                           
 10518                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10519  008A  10BE               	bcf	_Load^(0+256),1
 10520  008B                     l1627:	
 10521                           
 10522                           ;OverLoad_B1.c: 65: }
 10523                           ;OverLoad_B1.c: 66: }
 10524                           ;OverLoad_B1.c: 88: }
 10525                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10526  008B  1CBE               	btfss	_Load^(0+256),1
 10527  008C  29DB               	goto	l1635
 10528                           
 10529                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10530  008D  153E               	bsf	_Load^(0+256),2
 10531                           
 10532                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10533  008E  1E3E               	btfss	_Load^(0+256),4
 10534  008F  29D9               	goto	l1636
 10535                           
 10536                           ;OverLoad_B1.c: 95: Load.Time++;
 10537  0090  3001               	movlw	1
 10538  0091  07BF               	addwf	(_Load^(0+256)+1),f
 10539  0092  3000               	movlw	0
 10540  0093  3DC0               	addwfc	((_Load+1)^(0+256)+1),f
 10541                           
 10542                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10543  0094  3000               	movlw	0
 10544  0095  0240               	subwf	((_Load+1)^(0+256)+1),w
 10545  0096  3002               	movlw	2
 10546  0097  1903               	skipnz
 10547  0098  023F               	subwf	(_Load^(0+256)+1),w
 10548  0099  1C03               	skipc
 10549  009A  0008               	return
 10550                           
 10551                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10552  009B  01BF               	clrf	(_Load^(0+256)+1)
 10553  009C  01C0               	clrf	((_Load+1)^(0+256)+1)
 10554                           
 10555                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10556  009D  123E               	bcf	_Load^(0+256),4
 10557                           
 10558                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10559  009E  3001               	movlw	1
 10560  009F  0020               	movlb	0	; select bank0
 10561  00A0  00B0               	movwf	Load_Main@i
 10562  00A1  3000               	movlw	0
 10563  00A2  00B1               	movwf	Load_Main@i+1
 10564  00A3  0831               	movf	Load_Main@i+1,w
 10565  00A4  3A80               	xorlw	128
 10566  00A5  00A8               	movwf	??_Load_Main
 10567  00A6  3080               	movlw	128
 10568  00A7  0228               	subwf	??_Load_Main,w
 10569  00A8  1D03               	skipz
 10570  00A9  28AC               	goto	u11745
 10571  00AA  3004               	movlw	4
 10572  00AB  0230               	subwf	Load_Main@i,w
 10573  00AC                     u11745:	
 10574  00AC  1803               	btfsc	3,0
 10575  00AD  28E0               	goto	l10192
 10576  00AE                     l10186:	
 10577                           
 10578                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10579  00AE  0020               	movlb	0	; select bank0
 10580  00AF  3530               	lslf	Load_Main@i,w
 10581  00B0  3E49               	addlw	(_Load+11)& (0+255)
 10582  00B1  0086               	movwf	6
 10583  00B2  3001               	movlw	1	; select bank2/3
 10584  00B3  0087               	movwf	7
 10585  00B4  3F40               	moviw [0]fsr1
 10586  00B5  00A8               	movwf	??_Load_Main
 10587  00B6  3F41               	moviw [1]fsr1
 10588  00B7  00A9               	movwf	??_Load_Main+1
 10589  00B8  0828               	movf	??_Load_Main,w
 10590  00B9  0022               	movlb	2	; select bank2
 10591  00BA  07C3               	addwf	(_Load^(0+256)+5),f
 10592  00BB  0020               	movlb	0	; select bank0
 10593  00BC  0829               	movf	??_Load_Main+1,w
 10594  00BD  0022               	movlb	2	; select bank2
 10595  00BE  3DC4               	addwfc	((_Load+1)^(0+256)+5),f
 10596                           
 10597                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10598  00BF  0020               	movlb	0	; select bank0
 10599  00C0  3530               	lslf	Load_Main@i,w
 10600  00C1  3E53               	addlw	(_Load+21)& (0+255)
 10601  00C2  0086               	movwf	6
 10602  00C3  3001               	movlw	1	; select bank2/3
 10603  00C4  0087               	movwf	7
 10604  00C5  3F40               	moviw [0]fsr1
 10605  00C6  00A8               	movwf	??_Load_Main
 10606  00C7  3F41               	moviw [1]fsr1
 10607  00C8  00A9               	movwf	??_Load_Main+1
 10608  00C9  0828               	movf	??_Load_Main,w
 10609  00CA  0022               	movlb	2	; select bank2
 10610  00CB  07C5               	addwf	(_Load^(0+256)+7),f
 10611  00CC  0020               	movlb	0	; select bank0
 10612  00CD  0829               	movf	??_Load_Main+1,w
 10613  00CE  0022               	movlb	2	; select bank2
 10614  00CF  3DC6               	addwfc	((_Load+1)^(0+256)+7),f
 10615  00D0  3001               	movlw	1
 10616  00D1  0020               	movlb	0	; select bank0
 10617  00D2  07B0               	addwf	Load_Main@i,f
 10618  00D3  3000               	movlw	0
 10619  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10620  00D5  0831               	movf	Load_Main@i+1,w
 10621  00D6  3A80               	xorlw	128
 10622  00D7  00A8               	movwf	??_Load_Main
 10623  00D8  3080               	movlw	128
 10624  00D9  0228               	subwf	??_Load_Main,w
 10625  00DA  1D03               	skipz
 10626  00DB  28DE               	goto	u11755
 10627  00DC  3004               	movlw	4
 10628  00DD  0230               	subwf	Load_Main@i,w
 10629  00DE                     u11755:	
 10630  00DE  1C03               	skipc
 10631  00DF  28AE               	goto	l10186
 10632  00E0                     l10192:	
 10633                           
 10634                           ;OverLoad_B1.c: 103: }
 10635                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10636  00E0  3003               	movlw	3
 10637  00E1  0020               	movlb	0	; select bank0
 10638  00E2  00A0               	movwf	___lwdiv@divisor
 10639  00E3  3000               	movlw	0
 10640  00E4  00A1               	movwf	___lwdiv@divisor+1
 10641  00E5  0022               	movlb	2	; select bank2
 10642  00E6  0844               	movf	((_Load+1)^(0+256)+5),w
 10643  00E7  0020               	movlb	0	; select bank0
 10644  00E8  01A3               	clrf	___lwdiv@dividend+1
 10645  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 10646  00EA  0022               	movlb	2	; select bank2
 10647  00EB  0843               	movf	(_Load^(0+256)+5),w
 10648  00EC  0020               	movlb	0	; select bank0
 10649  00ED  01A2               	clrf	___lwdiv@dividend
 10650  00EE  07A2               	addwf	___lwdiv@dividend,f
 10651  00EF  3192  225E  3180   	fcall	___lwdiv
 10652  00F2  0020               	movlb	0	; select bank0
 10653  00F3  0821               	movf	?___lwdiv+1,w
 10654  00F4  0022               	movlb	2	; select bank2
 10655  00F5  01C4               	clrf	((_Load+1)^(0+256)+5)
 10656  00F6  07C4               	addwf	((_Load+1)^(0+256)+5),f
 10657  00F7  0020               	movlb	0	; select bank0
 10658  00F8  0820               	movf	?___lwdiv,w
 10659  00F9  0022               	movlb	2	; select bank2
 10660  00FA  01C3               	clrf	(_Load^(0+256)+5)
 10661  00FB  07C3               	addwf	(_Load^(0+256)+5),f
 10662                           
 10663                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10664  00FC  3003               	movlw	3
 10665  00FD  0020               	movlb	0	; select bank0
 10666  00FE  00A0               	movwf	___lwdiv@divisor
 10667  00FF  3000               	movlw	0
 10668  0100  00A1               	movwf	___lwdiv@divisor+1
 10669  0101  0022               	movlb	2	; select bank2
 10670  0102  0846               	movf	((_Load+1)^(0+256)+7),w
 10671  0103  0020               	movlb	0	; select bank0
 10672  0104  01A3               	clrf	___lwdiv@dividend+1
 10673  0105  07A3               	addwf	___lwdiv@dividend+1,f
 10674  0106  0022               	movlb	2	; select bank2
 10675  0107  0845               	movf	(_Load^(0+256)+7),w
 10676  0108  0020               	movlb	0	; select bank0
 10677  0109  01A2               	clrf	___lwdiv@dividend
 10678  010A  07A2               	addwf	___lwdiv@dividend,f
 10679  010B  3192  225E  3180   	fcall	___lwdiv
 10680  010E  0020               	movlb	0	; select bank0
 10681  010F  0821               	movf	?___lwdiv+1,w
 10682  0110  0022               	movlb	2	; select bank2
 10683  0111  01C6               	clrf	((_Load+1)^(0+256)+7)
 10684  0112  07C6               	addwf	((_Load+1)^(0+256)+7),f
 10685  0113  0020               	movlb	0	; select bank0
 10686  0114  0820               	movf	?___lwdiv,w
 10687  0115  0022               	movlb	2	; select bank2
 10688  0116  01C5               	clrf	(_Load^(0+256)+7)
 10689  0117  07C5               	addwf	(_Load^(0+256)+7),f
 10690                           
 10691                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10692  0118  319F  272B  3180   	fcall	_setLoad_AH_AL_Restore
 10693                           
 10694                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10695  011B  0022               	movlb	2	; select bank2
 10696  011C  0846               	movf	((_Load+1)^(0+256)+7),w
 10697  011D  0244               	subwf	((_Load+1)^(0+256)+5),w
 10698  011E  1D03               	skipz
 10699  011F  2922               	goto	u11765
 10700  0120  0845               	movf	(_Load^(0+256)+7),w
 10701  0121  0243               	subwf	(_Load^(0+256)+5),w
 10702  0122                     u11765:	
 10703  0122  1C03               	skipc
 10704  0123  0008               	return
 10705                           
 10706                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10707  0124  3005               	movlw	5
 10708  0125  3E3E               	addlw	_Load& (0+255)
 10709  0126  0086               	movwf	6
 10710  0127  3001               	movlw	1	; select bank2/3
 10711  0128  0087               	movwf	7
 10712  0129  0945               	comf	(_Load^(0+256)+7),w
 10713  012A  0020               	movlb	0	; select bank0
 10714  012B  00A8               	movwf	??_Load_Main
 10715  012C  0022               	movlb	2	; select bank2
 10716  012D  0946               	comf	((_Load+1)^(0+256)+7),w
 10717  012E  0020               	movlb	0	; select bank0
 10718  012F  00A9               	movwf	??_Load_Main+1
 10719  0130  0AA8               	incf	??_Load_Main,f
 10720  0131  1903               	skipnz
 10721  0132  0AA9               	incf	??_Load_Main+1,f
 10722  0133  3F40               	moviw [0]fsr1
 10723  0134  0728               	addwf	??_Load_Main,w
 10724  0135  0022               	movlb	2	; select bank2
 10725  0136  00DD               	movwf	(_Load^(0+256)+31)
 10726  0137  3F41               	moviw [1]fsr1
 10727  0138  0020               	movlb	0	; select bank0
 10728  0139  3D29               	addwfc	??_Load_Main+1,w
 10729  013A  0022               	movlb	2	; select bank2
 10730  013B  00DE               	movwf	(_Load^(0+256)+32)
 10731                           
 10732                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10733  013C  01C3               	clrf	(_Load^(0+256)+5)
 10734  013D  01C4               	clrf	((_Load+1)^(0+256)+5)
 10735                           
 10736                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10737  013E  01C5               	clrf	(_Load^(0+256)+7)
 10738  013F  01C6               	clrf	((_Load+1)^(0+256)+7)
 10739                           
 10740                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10741  0140  1DBE               	btfss	_Load^(0+256),3
 10742  0141  299B               	goto	l10232
 10743                           
 10744                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10745  0142  3002               	movlw	2
 10746  0143  0263               	subwf	(_Load^(0+256)+37),w
 10747  0144  1803               	skipnc
 10748  0145  299B               	goto	l10232
 10749                           
 10750                           ;OverLoad_B1.c: 115: Load.Count++;
 10751  0146  3001               	movlw	1
 10752  0147  0020               	movlb	0	; select bank0
 10753  0148  00A8               	movwf	??_Load_Main
 10754  0149  0828               	movf	??_Load_Main,w
 10755  014A  0022               	movlb	2	; select bank2
 10756  014B  07E3               	addwf	(_Load^(0+256)+37),f
 10757                           
 10758                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10759  014C  319B  235E  3180   	fcall	_getDimmer_Load_Status
 10760  014F  0020               	movlb	0	; select bank0
 10761  0150  00A8               	movwf	??_Load_Main
 10762  0151  0828               	movf	??_Load_Main,w
 10763  0152  00AE               	movwf	Load_Main@Load_RunStatus
 10764                           
 10765                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10766  0153  319B  2396  3180   	fcall	_getMain_Lights_Count
 10767  0156  0020               	movlb	0	; select bank0
 10768  0157  00A8               	movwf	??_Load_Main
 10769  0158  0828               	movf	??_Load_Main,w
 10770  0159  00AF               	movwf	Load_Main@LightsCount
 10771                           
 10772                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10773  015A  0022               	movlb	2	; select bank2
 10774  015B  0863               	movf	(_Load^(0+256)+37),w
 10775  015C  3A01               	xorlw	1
 10776  015D  1D03               	skipz
 10777  015E  2963               	goto	l10218
 10778                           
 10779                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10780  015F  3074               	movlw	116
 10781  0160  00E1               	movwf	(_Load^(0+256)+35)
 10782  0161  3004               	movlw	4
 10783  0162  2970               	goto	L6
 10784  0163                     l10218:	
 10785                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10786                           
 10787  0163  0863               	movf	(_Load^(0+256)+37),w
 10788  0164  3A02               	xorlw	2
 10789  0165  1D03               	skipz
 10790  0166  299B               	goto	l10232
 10791                           
 10792                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10793  0167  0020               	movlb	0	; select bank0
 10794  0168  082F               	movf	Load_Main@LightsCount,w
 10795  0169  3A01               	xorlw	1
 10796  016A  1D03               	skipz
 10797  016B  2972               	goto	l10224
 10798                           
 10799                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10800  016C  305B               	movlw	91
 10801  016D  0022               	movlb	2	; select bank2
 10802  016E  00E1               	movwf	(_Load^(0+256)+35)
 10803  016F  3000               	movlw	0
 10804  0170                     L6:	
 10805  0170  00E2               	movwf	(_Load^(0+256)+36)
 10806                           
 10807                           ;OverLoad_B1.c: 130: } else {
 10808  0171  299B               	goto	l10232
 10809  0172                     l10224:	
 10810                           
 10811                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10812  0172  0020               	movlb	0	; select bank0
 10813  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 10814  0174  1D03               	skipz
 10815  0175  298F               	goto	l10228
 10816                           
 10817                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10818  0176  082F               	movf	Load_Main@LightsCount,w
 10819  0177  00A8               	movwf	??_Load_Main
 10820  0178  01A9               	clrf	??_Load_Main+1
 10821  0179  0828               	movf	??_Load_Main,w
 10822  017A  00A0               	movwf	___wmul@multiplier
 10823  017B  0829               	movf	??_Load_Main+1,w
 10824  017C  00A1               	movwf	___wmul@multiplier+1
 10825  017D  305B               	movlw	91
 10826  017E  00A2               	movwf	___wmul@multiplicand
 10827  017F  3000               	movlw	0
 10828  0180  00A3               	movwf	___wmul@multiplicand+1
 10829  0181  319F  2764  3180   	fcall	___wmul
 10830  0184  0020               	movlb	0	; select bank0
 10831  0185  0821               	movf	?___wmul+1,w
 10832  0186  0022               	movlb	2	; select bank2
 10833  0187  01E2               	clrf	((_Load+1)^(0+256)+35)
 10834  0188  07E2               	addwf	((_Load+1)^(0+256)+35),f
 10835  0189  0020               	movlb	0	; select bank0
 10836  018A  0820               	movf	?___wmul,w
 10837  018B  0022               	movlb	2	; select bank2
 10838  018C  01E1               	clrf	(_Load^(0+256)+35)
 10839  018D  07E1               	addwf	(_Load^(0+256)+35),f
 10840                           
 10841                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10842  018E  299B               	goto	l10232
 10843  018F                     l10228:	
 10844  018F  0020               	movlb	0	; select bank0
 10845  0190  082E               	movf	Load_Main@Load_RunStatus,w
 10846  0191  3A01               	xorlw	1
 10847  0192  1D03               	skipz
 10848  0193  299B               	goto	l10232
 10849                           
 10850                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10851  0194  0022               	movlb	2	; select bank2
 10852  0195  0847               	movf	(_Load^(0+256)+9),w
 10853  0196  3E5B               	addlw	91
 10854  0197  00E1               	movwf	(_Load^(0+256)+35)
 10855  0198  3000               	movlw	0
 10856  0199  3D48               	addwfc	((_Load+1)^(0+256)+9),w
 10857  019A  00E2               	movwf	((_Load+1)^(0+256)+35)
 10858  019B                     l10232:	
 10859                           
 10860                           ;OverLoad_B1.c: 135: }
 10861                           ;OverLoad_B1.c: 136: }
 10862                           ;OverLoad_B1.c: 137: }
 10863                           ;OverLoad_B1.c: 138: }
 10864                           ;OverLoad_B1.c: 139: }
 10865                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10866  019B  0022               	movlb	2	; select bank2
 10867  019C  0862               	movf	((_Load+1)^(0+256)+35),w
 10868  019D  025E               	subwf	((_Load+1)^(0+256)+31),w
 10869  019E  1D03               	skipz
 10870  019F  29A2               	goto	u11845
 10871  01A0  0861               	movf	(_Load^(0+256)+35),w
 10872  01A1  025D               	subwf	(_Load^(0+256)+31),w
 10873  01A2                     u11845:	
 10874  01A2  1C03               	skipc
 10875  01A3  29C1               	goto	l10248
 10876                           
 10877                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10878  01A4  0020               	movlb	0	; select bank0
 10879  01A5  082F               	movf	Load_Main@LightsCount,w
 10880  01A6  3A01               	xorlw	1
 10881  01A7  1903               	skipnz
 10882  01A8  29AB               	goto	l10238
 10883  01A9  3003               	movlw	3
 10884  01AA  29AC               	goto	L7
 10885  01AB                     l10238:	
 10886  01AB  3002               	movlw	2
 10887  01AC                     L7:	
 10888  01AC  00AB               	movwf	_Load_Main$3954
 10889  01AD  3000               	movlw	0
 10890  01AE  00AC               	movwf	_Load_Main$3954+1
 10891  01AF  082B               	movf	_Load_Main$3954,w
 10892  01B0  00A8               	movwf	??_Load_Main
 10893  01B1  0828               	movf	??_Load_Main,w
 10894  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 10895                           
 10896                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10897  01B3  3001               	movlw	1
 10898  01B4  00A8               	movwf	??_Load_Main
 10899  01B5  0828               	movf	??_Load_Main,w
 10900  01B6  0022               	movlb	2	; select bank2
 10901  01B7  07E4               	addwf	(_Load^(0+256)+38),f
 10902                           
 10903                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10904  01B8  0864               	movf	(_Load^(0+256)+38),w
 10905  01B9  0020               	movlb	0	; select bank0
 10906  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 10907  01BB  1803               	skipnc
 10908  01BC  0008               	return
 10909                           
 10910                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10911  01BD  0022               	movlb	2	; select bank2
 10912  01BE  01E4               	clrf	(_Load^(0+256)+38)
 10913                           
 10914                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10915  01BF  16BE               	bsf	_Load^(0+256),5
 10916                           
 10917                           ;OverLoad_B1.c: 168: }
 10918                           ;OverLoad_B1.c: 169: } else {
 10919  01C0  0008               	return
 10920  01C1                     l10248:	
 10921                           
 10922                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10923  01C1  01E4               	clrf	(_Load^(0+256)+38)
 10924                           
 10925                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10926  01C2  1DBE               	btfss	_Load^(0+256),3
 10927  01C3  0008               	return
 10928                           
 10929                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10930  01C4  3001               	movlw	1
 10931  01C5  0020               	movlb	0	; select bank0
 10932  01C6  00A8               	movwf	??_Load_Main
 10933  01C7  0828               	movf	??_Load_Main,w
 10934  01C8  0022               	movlb	2	; select bank2
 10935  01C9  07E5               	addwf	(_Load^(0+256)+39),f
 10936                           
 10937                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10938  01CA  3003               	movlw	3
 10939  01CB  0265               	subwf	(_Load^(0+256)+39),w
 10940  01CC  1C03               	skipc
 10941  01CD  0008               	return
 10942                           
 10943                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10944  01CE  01E5               	clrf	(_Load^(0+256)+39)
 10945                           
 10946                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10947  01CF  17BE               	bsf	_Load^(0+256),7
 10948                           
 10949                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10950  01D0  11BE               	bcf	_Load^(0+256),3
 10951                           
 10952                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10953  01D1  01E3               	clrf	(_Load^(0+256)+37)
 10954                           
 10955                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10956  01D2  085E               	movf	((_Load+1)^(0+256)+31),w
 10957  01D3  01C8               	clrf	((_Load+1)^(0+256)+9)
 10958  01D4  07C8               	addwf	((_Load+1)^(0+256)+9),f
 10959  01D5  085D               	movf	(_Load^(0+256)+31),w
 10960  01D6  01C7               	clrf	(_Load^(0+256)+9)
 10961  01D7  07C7               	addwf	(_Load^(0+256)+9),f
 10962                           
 10963                           ;OverLoad_B1.c: 182: }
 10964                           ;OverLoad_B1.c: 183: }
 10965                           ;OverLoad_B1.c: 206: }
 10966                           ;OverLoad_B1.c: 207: }
 10967                           ;OverLoad_B1.c: 208: }
 10968                           ;OverLoad_B1.c: 209: } else {
 10969  01D8  0008               	return
 10970  01D9                     l1636:	
 10971                           
 10972                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10973  01D9  163E               	bsf	_Load^(0+256),4
 10974                           
 10975                           ;OverLoad_B1.c: 211: }
 10976                           ;OverLoad_B1.c: 212: } else {
 10977  01DA  0008               	return
 10978  01DB                     l1635:	
 10979                           
 10980                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10981  01DB  1D3E               	btfss	_Load^(0+256),2
 10982  01DC  29EE               	goto	l10284
 10983                           
 10984                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10985  01DD  113E               	bcf	_Load^(0+256),2
 10986                           
 10987                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10988  01DE  123E               	bcf	_Load^(0+256),4
 10989                           
 10990                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10991  01DF  01BF               	clrf	(_Load^(0+256)+1)
 10992  01E0  01C0               	clrf	((_Load+1)^(0+256)+1)
 10993                           
 10994                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10995  01E1  319F  272B  3180   	fcall	_setLoad_AH_AL_Restore
 10996                           
 10997                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10998  01E4  0022               	movlb	2	; select bank2
 10999  01E5  01E4               	clrf	(_Load^(0+256)+38)
 11000                           
 11001                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11002  01E6  01E5               	clrf	(_Load^(0+256)+39)
 11003                           
 11004                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11005  01E7  01C3               	clrf	(_Load^(0+256)+5)
 11006  01E8  01C4               	clrf	((_Load+1)^(0+256)+5)
 11007                           
 11008                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11009  01E9  01C5               	clrf	(_Load^(0+256)+7)
 11010  01EA  01C6               	clrf	((_Load+1)^(0+256)+7)
 11011                           
 11012                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11013  01EB  11BE               	bcf	_Load^(0+256),3
 11014                           
 11015                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11016  01EC  01E3               	clrf	(_Load^(0+256)+37)
 11017                           
 11018                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11019  01ED  13BE               	bcf	_Load^(0+256),7
 11020  01EE                     l10284:	
 11021                           
 11022                           ;OverLoad_B1.c: 255: }
 11023                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11024  01EE  1EBE               	btfss	_Load^(0+256),5
 11025  01EF  0008               	return
 11026                           
 11027                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11028  01F0  3001               	movlw	1
 11029  01F1  07C1               	addwf	(_Load^(0+256)+3),f
 11030  01F2  3000               	movlw	0
 11031  01F3  3DC2               	addwfc	((_Load+1)^(0+256)+3),f
 11032                           
 11033                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11034  01F4  3001               	movlw	1
 11035  01F5  0242               	subwf	((_Load+1)^(0+256)+3),w
 11036  01F6  30F4               	movlw	244
 11037  01F7  1903               	skipnz
 11038  01F8  0241               	subwf	(_Load^(0+256)+3),w
 11039  01F9  1C03               	skipc
 11040  01FA  0008               	return
 11041                           
 11042                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11043  01FB  01C1               	clrf	(_Load^(0+256)+3)
 11044  01FC  01C2               	clrf	((_Load+1)^(0+256)+3)
 11045                           
 11046                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11047  01FD  12BE               	bcf	_Load^(0+256),5
 11048                           
 11049                           ;OverLoad_B1.c: 261: }
 11050                           ;OverLoad_B1.c: 262: }
 11051                           ;OverLoad_B1.c: 263: }
 11052                           ;OverLoad_B1.c: 264: } else {
 11053  01FE  0008               	return
 11054  01FF                     l1625:	
 11055                           
 11056                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11057  01FF  0021               	movlb	1	; select bank1
 11058  0200  1C2E               	btfss	_myMain^(0+128),0
 11059  0201  0008               	return
 11060                           
 11061                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11062  0202  0022               	movlb	2	; select bank2
 11063  0203  143E               	bsf	_Load^(0+256),0
 11064  0204  0008               	return
 11065  0205                     __end_of_Load_Main:	
 11066                           
 11067                           	psect	text63
 11068  1B96                     __ptext63:	
 11069 ;; *************** function _getMain_Lights_Count *****************
 11070 ;; Defined at:
 11071 ;;		line 459 in file "../src/Main_B1.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;		None
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;  status1         1    1[BANK0 ] unsigned char 
 11076 ;;  count           1    0[BANK0 ] unsigned char 
 11077 ;; Return value:  Size  Location     Type
 11078 ;;                  1    wreg      unsigned char 
 11079 ;; Registers used:
 11080 ;;		wreg, status,2
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;Total ram usage:        2 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    5
 11093 ;; This function calls:
 11094 ;;		Nothing
 11095 ;; This function is called by:
 11096 ;;		_Load_Main
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           
 11101                           ;psect for function _getMain_Lights_Count
 11102  1B96                     _getMain_Lights_Count:	
 11103                           
 11104                           ;Main_B1.c: 460: char count = 0;
 11105                           
 11106                           ;incstack = 0
 11107                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11108  1B96  0020               	movlb	0	; select bank0
 11109  1B97  01A0               	clrf	getMain_Lights_Count@count
 11110                           
 11111                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11112  1B98  3000               	movlw	0
 11113  1B99  0021               	movlb	1	; select bank1
 11114  1B9A  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11115  1B9B  3001               	movlw	1
 11116  1B9C  0020               	movlb	0	; select bank0
 11117  1B9D  00A1               	movwf	getMain_Lights_Count@status1
 11118                           
 11119                           ;Main_B1.c: 487: return count = status1;
 11120  1B9E  0821               	movf	getMain_Lights_Count@status1,w
 11121  1B9F  00A0               	movwf	getMain_Lights_Count@count
 11122  1BA0  0008               	return
 11123  1BA1                     __end_of_getMain_Lights_Count:	
 11124                           
 11125                           	psect	text64
 11126  1B5E                     __ptext64:	
 11127 ;; *************** function _getDimmer_Load_Status *****************
 11128 ;; Defined at:
 11129 ;;		line 1156 in file "../src/Dimmer_B1.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;		None
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  status          1    0[BANK0 ] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      unsigned char 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;Total ram usage:        1 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    5
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_Load_Main
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           
 11158                           ;psect for function _getDimmer_Load_Status
 11159  1B5E                     _getDimmer_Load_Status:	
 11160                           
 11161                           ;Dimmer_B1.c: 1157: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11162                           
 11163                           ;incstack = 0
 11164                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11165  1B5E  3000               	movlw	0
 11166  1B5F  0022               	movlb	2	; select bank2
 11167  1B60  192C               	btfsc	_Dimmer^(0+256),2
 11168  1B61  3001               	movlw	1
 11169  1B62  0020               	movlb	0	; select bank0
 11170  1B63  00A0               	movwf	getDimmer_Load_Status@status
 11171                           
 11172                           ;Dimmer_B1.c: 1158: return status;
 11173  1B64  0820               	movf	getDimmer_Load_Status@status,w
 11174  1B65  0008               	return
 11175  1B66                     __end_of_getDimmer_Load_Status:	
 11176                           
 11177                           	psect	text65
 11178  1B56                     __ptext65:	
 11179 ;; *************** function _getDimmer_LoadGO *****************
 11180 ;; Defined at:
 11181 ;;		line 1150 in file "../src/Dimmer_B1.c"
 11182 ;; Parameters:    Size  Location     Type
 11183 ;;		None
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11186 ;; Return value:  Size  Location     Type
 11187 ;;                  1    wreg      unsigned char 
 11188 ;; Registers used:
 11189 ;;		wreg, status,2
 11190 ;; Tracked objects:
 11191 ;;		On entry : 0/0
 11192 ;;		On exit  : 0/0
 11193 ;;		Unchanged: 0/0
 11194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11199 ;;Total ram usage:        1 bytes
 11200 ;; Hardware stack levels used:    1
 11201 ;; Hardware stack levels required when called:    5
 11202 ;; This function calls:
 11203 ;;		Nothing
 11204 ;; This function is called by:
 11205 ;;		_Load_Main
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           
 11210                           ;psect for function _getDimmer_LoadGO
 11211  1B56                     _getDimmer_LoadGO:	
 11212                           
 11213                           ;Dimmer_B1.c: 1151: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11214                           
 11215                           ;incstack = 0
 11216                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11217  1B56  3000               	movlw	0
 11218  1B57  0022               	movlb	2	; select bank2
 11219  1B58  18AC               	btfsc	_Dimmer^(0+256),1
 11220  1B59  3001               	movlw	1
 11221  1B5A  0020               	movlb	0	; select bank0
 11222  1B5B  00A0               	movwf	getDimmer_LoadGO@loadgo
 11223                           
 11224                           ;Dimmer_B1.c: 1152: return loadgo;
 11225  1B5C  0820               	movf	getDimmer_LoadGO@loadgo,w
 11226  1B5D  0008               	return
 11227  1B5E                     __end_of_getDimmer_LoadGO:	
 11228                           
 11229                           	psect	text66
 11230  1D77                     __ptext66:	
 11231 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11232 ;; Defined at:
 11233 ;;		line 285 in file "../src/Dimmer_B1.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  status          1    0[BANK0 ] unsigned char 
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  1    wreg      unsigned char 
 11240 ;; Registers used:
 11241 ;;		wreg, status,2, status,0
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;Total ram usage:        1 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    5
 11254 ;; This function calls:
 11255 ;;		Nothing
 11256 ;; This function is called by:
 11257 ;;		_Load_Main
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           
 11262                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11263  1D77                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11264                           
 11265                           ;Dimmer_B1.c: 286: char status = 0;
 11266                           
 11267                           ;incstack = 0
 11268                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11269  1D77  0020               	movlb	0	; select bank0
 11270  1D78  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11271                           
 11272                           ;Dimmer_B1.c: 297: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11273  1D79  3000               	movlw	0
 11274  1D7A  0021               	movlb	1	; select bank1
 11275  1D7B  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 11276  1D7C  3001               	movlw	1
 11277  1D7D  0020               	movlb	0	; select bank0
 11278  1D7E  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11279                           
 11280                           ;Dimmer_B1.c: 301: if (status == 0) {
 11281  1D7F  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11282  1D80  1D03               	skipz
 11283  1D81  2D88               	goto	l7162
 11284                           
 11285                           ;Dimmer_B1.c: 311: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11286  1D82  3000               	movlw	0
 11287  1D83  0021               	movlb	1	; select bank1
 11288  1D84  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 11289  1D85  3001               	movlw	1
 11290  1D86  0020               	movlb	0	; select bank0
 11291  1D87  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11292  1D88                     l7162:	
 11293                           
 11294                           ;Dimmer_B1.c: 313: }
 11295                           ;Dimmer_B1.c: 315: return status;
 11296  1D88  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11297  1D89  0008               	return
 11298  1D8A                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11299                           
 11300                           	psect	text67
 11301  1F64                     __ptext67:	
 11302 ;; *************** function ___wmul *****************
 11303 ;; Defined at:
 11304 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11307 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;  product         2    4[BANK0 ] unsigned int 
 11310 ;; Return value:  Size  Location     Type
 11311 ;;                  2    0[BANK0 ] unsigned int 
 11312 ;; Registers used:
 11313 ;;		wreg, status,2, status,0
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11319 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;Total ram usage:        6 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:    5
 11326 ;; This function calls:
 11327 ;;		Nothing
 11328 ;; This function is called by:
 11329 ;;		_Load_Main
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           
 11334                           ;psect for function ___wmul
 11335  1F64                     ___wmul:	
 11336                           
 11337                           ;incstack = 0
 11338                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11339  1F64  0020               	movlb	0	; select bank0
 11340  1F65  01A4               	clrf	___wmul@product
 11341  1F66  01A5               	clrf	___wmul@product+1
 11342  1F67                     l7726:	
 11343  1F67  1C20               	btfss	___wmul@multiplier,0
 11344  1F68  2F6D               	goto	l2681
 11345  1F69  0822               	movf	___wmul@multiplicand,w
 11346  1F6A  07A4               	addwf	___wmul@product,f
 11347  1F6B  0823               	movf	___wmul@multiplicand+1,w
 11348  1F6C  3DA5               	addwfc	___wmul@product+1,f
 11349  1F6D                     l2681:	
 11350  1F6D  3001               	movlw	1
 11351  1F6E                     u7675:	
 11352  1F6E  35A2               	lslf	___wmul@multiplicand,f
 11353  1F6F  0DA3               	rlf	___wmul@multiplicand+1,f
 11354  1F70  0B89               	decfsz	9,f
 11355  1F71  2F6E               	goto	u7675
 11356  1F72  3001               	movlw	1
 11357  1F73                     u7685:	
 11358  1F73  36A1               	lsrf	___wmul@multiplier+1,f
 11359  1F74  0CA0               	rrf	___wmul@multiplier,f
 11360  1F75  0B89               	decfsz	9,f
 11361  1F76  2F73               	goto	u7685
 11362  1F77  0821               	movf	___wmul@multiplier+1,w
 11363  1F78  0420               	iorwf	___wmul@multiplier,w
 11364  1F79  1D03               	skipz
 11365  1F7A  2F67               	goto	l7726
 11366  1F7B  0825               	movf	___wmul@product+1,w
 11367  1F7C  01A1               	clrf	?___wmul+1
 11368  1F7D  07A1               	addwf	?___wmul+1,f
 11369  1F7E  0824               	movf	___wmul@product,w
 11370  1F7F  01A0               	clrf	?___wmul
 11371  1F80  07A0               	addwf	?___wmul,f
 11372  1F81  0008               	return
 11373  1F82                     __end_of___wmul:	
 11374                           
 11375                           	psect	text68
 11376  125E                     __ptext68:	
 11377 ;; *************** function ___lwdiv *****************
 11378 ;; Defined at:
 11379 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;  divisor         2    0[BANK0 ] unsigned int 
 11382 ;;  dividend        2    2[BANK0 ] unsigned int 
 11383 ;; Auto vars:     Size  Location     Type
 11384 ;;  quotient        2    5[BANK0 ] unsigned int 
 11385 ;;  counter         1    7[BANK0 ] unsigned char 
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  2    0[BANK0 ] unsigned int 
 11388 ;; Registers used:
 11389 ;;		wreg, status,2, status,0
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11398 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11399 ;;Total ram usage:        8 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:    5
 11402 ;; This function calls:
 11403 ;;		Nothing
 11404 ;; This function is called by:
 11405 ;;		_Load_Main
 11406 ;;		_setRF_Main
 11407 ;; This function uses a non-reentrant model
 11408 ;;
 11409                           
 11410                           
 11411                           ;psect for function ___lwdiv
 11412  125E                     ___lwdiv:	
 11413                           
 11414                           ;incstack = 0
 11415                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11416  125E  0020               	movlb	0	; select bank0
 11417  125F  01A5               	clrf	___lwdiv@quotient
 11418  1260  01A6               	clrf	___lwdiv@quotient+1
 11419  1261  0821               	movf	___lwdiv@divisor+1,w
 11420  1262  0420               	iorwf	___lwdiv@divisor,w
 11421  1263  1903               	skipnz
 11422  1264  2A8E               	goto	l7098
 11423  1265  01A7               	clrf	___lwdiv@counter
 11424  1266  0AA7               	incf	___lwdiv@counter,f
 11425  1267                     l7086:	
 11426  1267  1BA1               	btfsc	___lwdiv@divisor+1,7
 11427  1268  2A73               	goto	l7088
 11428  1269  3001               	movlw	1
 11429  126A                     u6555:	
 11430  126A  35A0               	lslf	___lwdiv@divisor,f
 11431  126B  0DA1               	rlf	___lwdiv@divisor+1,f
 11432  126C  0B89               	decfsz	9,f
 11433  126D  2A6A               	goto	u6555
 11434  126E  3001               	movlw	1
 11435  126F  00A4               	movwf	??___lwdiv
 11436  1270  0824               	movf	??___lwdiv,w
 11437  1271  07A7               	addwf	___lwdiv@counter,f
 11438  1272  2A67               	goto	l7086
 11439  1273                     l7088:	
 11440  1273  3001               	movlw	1
 11441  1274                     u6575:	
 11442  1274  35A5               	lslf	___lwdiv@quotient,f
 11443  1275  0DA6               	rlf	___lwdiv@quotient+1,f
 11444  1276  0B89               	decfsz	9,f
 11445  1277  2A74               	goto	u6575
 11446  1278  0821               	movf	___lwdiv@divisor+1,w
 11447  1279  0223               	subwf	___lwdiv@dividend+1,w
 11448  127A  1D03               	skipz
 11449  127B  2A7E               	goto	u6585
 11450  127C  0820               	movf	___lwdiv@divisor,w
 11451  127D  0222               	subwf	___lwdiv@dividend,w
 11452  127E                     u6585:	
 11453  127E  1C03               	skipc
 11454  127F  2A85               	goto	l7094
 11455  1280  0820               	movf	___lwdiv@divisor,w
 11456  1281  02A2               	subwf	___lwdiv@dividend,f
 11457  1282  0821               	movf	___lwdiv@divisor+1,w
 11458  1283  3BA3               	subwfb	___lwdiv@dividend+1,f
 11459  1284  1425               	bsf	___lwdiv@quotient,0
 11460  1285                     l7094:	
 11461  1285  3001               	movlw	1
 11462  1286                     u6595:	
 11463  1286  36A1               	lsrf	___lwdiv@divisor+1,f
 11464  1287  0CA0               	rrf	___lwdiv@divisor,f
 11465  1288  0B89               	decfsz	9,f
 11466  1289  2A86               	goto	u6595
 11467  128A  3001               	movlw	1
 11468  128B  02A7               	subwf	___lwdiv@counter,f
 11469  128C  1D03               	btfss	3,2
 11470  128D  2A73               	goto	l7088
 11471  128E                     l7098:	
 11472  128E  0826               	movf	___lwdiv@quotient+1,w
 11473  128F  01A1               	clrf	?___lwdiv+1
 11474  1290  07A1               	addwf	?___lwdiv+1,f
 11475  1291  0825               	movf	___lwdiv@quotient,w
 11476  1292  01A0               	clrf	?___lwdiv
 11477  1293  07A0               	addwf	?___lwdiv,f
 11478  1294  0008               	return
 11479  1295                     __end_of___lwdiv:	
 11480                           
 11481                           	psect	text69
 11482  1AF2                     __ptext69:	
 11483 ;; *************** function _Load_Initialization *****************
 11484 ;; Defined at:
 11485 ;;		line 9 in file "../src/OverLoad_B1.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;		None
 11490 ;; Return value:  Size  Location     Type
 11491 ;;		None               void
 11492 ;; Registers used:
 11493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;Total ram usage:        0 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    6
 11506 ;; This function calls:
 11507 ;;		_setLoad_AH_AL_Restore
 11508 ;; This function is called by:
 11509 ;;		_main
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           
 11514                           ;psect for function _Load_Initialization
 11515  1AF2                     _Load_Initialization:	
 11516                           
 11517                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11518                           
 11519                           ;incstack = 0
 11520                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11521  1AF2  319F  272B         	fcall	_setLoad_AH_AL_Restore
 11522  1AF4  0008               	return
 11523  1AF5                     __end_of_Load_Initialization:	
 11524                           
 11525                           	psect	text70
 11526  1F2B                     __ptext70:	
 11527 ;; *************** function _setLoad_AH_AL_Restore *****************
 11528 ;; Defined at:
 11529 ;;		line 292 in file "../src/OverLoad_B1.c"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;		None
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;  i               1    1[BANK0 ] unsigned char 
 11534 ;; Return value:  Size  Location     Type
 11535 ;;		None               void
 11536 ;; Registers used:
 11537 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;Total ram usage:        2 bytes
 11548 ;; Hardware stack levels used:    1
 11549 ;; Hardware stack levels required when called:    5
 11550 ;; This function calls:
 11551 ;;		Nothing
 11552 ;; This function is called by:
 11553 ;;		_Load_Initialization
 11554 ;;		_Load_Main
 11555 ;; This function uses a non-reentrant model
 11556 ;;
 11557                           
 11558                           
 11559                           ;psect for function _setLoad_AH_AL_Restore
 11560  1F2B                     _setLoad_AH_AL_Restore:	
 11561                           
 11562                           ;OverLoad_B1.c: 293: char i;
 11563                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11564                           
 11565                           ;incstack = 0
 11566                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11567  1F2B  0020               	movlb	0	; select bank0
 11568  1F2C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11569  1F2D                     L8:	
 11570  1F2D  3005               	movlw	5
 11571  1F2E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11572  1F2F  1803               	btfsc	3,0
 11573  1F30  0008               	return
 11574                           
 11575                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11576  1F31  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11577  1F32  3E49               	addlw	(_Load+11)& (0+255)
 11578  1F33  0086               	movwf	6
 11579  1F34  3001               	movlw	1	; select bank2/3
 11580  1F35  0087               	movwf	7
 11581  1F36  3000               	movlw	0
 11582  1F37  3FC0               	movwi [0]fsr1
 11583  1F38  3FC1               	movwi [1]fsr1
 11584                           
 11585                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11586  1F39  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11587  1F3A  3E53               	addlw	(_Load+21)& (0+255)
 11588  1F3B  0086               	movwf	6
 11589  1F3C  3001               	movlw	1	; select bank2/3
 11590  1F3D  0087               	movwf	7
 11591  1F3E  30FF               	movlw	255
 11592  1F3F  3FC0               	movwi [0]fsr1
 11593  1F40  30FF               	movlw	255
 11594  1F41  3FC1               	movwi [1]fsr1
 11595  1F42  3001               	movlw	1
 11596  1F43  00A0               	movwf	??_setLoad_AH_AL_Restore
 11597  1F44  0820               	movf	??_setLoad_AH_AL_Restore,w
 11598  1F45  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11599  1F46  2F2D               	goto	L8
 11600  1F47                     __end_of_setLoad_AH_AL_Restore:	
 11601                           
 11602                           	psect	text71
 11603  1B0D                     __ptext71:	
 11604 ;; *************** function _LED_Main *****************
 11605 ;; Defined at:
 11606 ;;		line 47 in file "../src/LED_B1.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;		None
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;		None
 11611 ;; Return value:  Size  Location     Type
 11612 ;;		None               void
 11613 ;; Registers used:
 11614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;Total ram usage:        0 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; Hardware stack levels required when called:    7
 11627 ;; This function calls:
 11628 ;;		_setLED_Main
 11629 ;; This function is called by:
 11630 ;;		_main
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634                           
 11635                           ;psect for function _LED_Main
 11636  1B0D                     _LED_Main:	
 11637                           
 11638                           ;LED_B1.c: 67: setLED_Main(99);
 11639                           
 11640                           ;incstack = 0
 11641                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11642  1B0D  3063               	movlw	99
 11643  1B0E  3192  2228         	fcall	_setLED_Main
 11644  1B10  0008               	return
 11645  1B11                     __end_of_LED_Main:	
 11646                           
 11647                           	psect	text72
 11648  1228                     __ptext72:	
 11649 ;; *************** function _setLED_Main *****************
 11650 ;; Defined at:
 11651 ;;		line 229 in file "../src/LED_B1.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  led             1    wreg     unsigned char 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;  led             1    4[BANK0 ] unsigned char 
 11656 ;; Return value:  Size  Location     Type
 11657 ;;		None               void
 11658 ;; Registers used:
 11659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;Total ram usage:        3 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    6
 11672 ;; This function calls:
 11673 ;;		_LedPointSelect
 11674 ;; This function is called by:
 11675 ;;		_LED_Main
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           
 11680                           ;psect for function _setLED_Main
 11681  1228                     _setLED_Main:	
 11682                           
 11683                           ;incstack = 0
 11684                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11685                           ;setLED_Main@led stored from wreg
 11686  1228  0020               	movlb	0	; select bank0
 11687  1229  00A4               	movwf	setLED_Main@led
 11688                           
 11689                           ;LED_B1.c: 230: LedPointSelect(led);
 11690  122A  0824               	movf	setLED_Main@led,w
 11691  122B  319B  23F3  3192   	fcall	_LedPointSelect
 11692                           
 11693                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11694  122E  0021               	movlb	1	; select bank1
 11695  122F  084B               	movf	_LED^(0+128),w
 11696  1230  0086               	movwf	6
 11697  1231  3001               	movlw	1	; select bank2/3
 11698  1232  0087               	movwf	7
 11699  1233  1C81               	btfss	1,1
 11700  1234  0008               	return
 11701                           
 11702                           ;LED_B1.c: 232: LED->Time++;
 11703  1235  0A4B               	incf	_LED^(0+128),w
 11704  1236  0086               	movwf	6
 11705  1237  3001               	movlw	1	; select bank2/3
 11706  1238  0087               	movwf	7
 11707  1239  3001               	movlw	1
 11708  123A  0781               	addwf	1,f
 11709  123B  3141               	addfsr 1,1
 11710  123C  1803               	skipnc
 11711  123D  0A81               	incf	1,f
 11712                           
 11713                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11714  123E  0A4B               	incf	_LED^(0+128),w
 11715  123F  0086               	movwf	6
 11716  1240  3001               	movlw	1	; select bank2/3
 11717  1241  0087               	movwf	7
 11718  1242  3F40               	moviw [0]fsr1
 11719  1243  0020               	movlb	0	; select bank0
 11720  1244  00A2               	movwf	??_setLED_Main
 11721  1245  3F41               	moviw [1]fsr1
 11722  1246  00A3               	movwf	??_setLED_Main+1
 11723  1247  3000               	movlw	0
 11724  1248  0223               	subwf	??_setLED_Main+1,w
 11725  1249  3019               	movlw	25
 11726  124A  1903               	skipnz
 11727  124B  0222               	subwf	??_setLED_Main,w
 11728  124C  1C03               	skipc
 11729  124D  0008               	return
 11730                           
 11731                           ;LED_B1.c: 234: LED->Time = 0;
 11732  124E  0021               	movlb	1	; select bank1
 11733  124F  0A4B               	incf	_LED^(0+128),w
 11734  1250  0086               	movwf	6
 11735  1251  3001               	movlw	1	; select bank2/3
 11736  1252  0087               	movwf	7
 11737  1253  3000               	movlw	0
 11738  1254  3FC0               	movwi [0]fsr1
 11739  1255  3FC1               	movwi [1]fsr1
 11740                           
 11741                           ;LED_B1.c: 252: if (led == 99) {
 11742  1256  0020               	movlb	0	; select bank0
 11743  1257  0824               	movf	setLED_Main@led,w
 11744  1258  3A63               	xorlw	99
 11745  1259  1D03               	skipz
 11746  125A  0008               	return
 11747                           
 11748                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11749  125B  3020               	movlw	32
 11750  125C  068D               	xorwf	13,f
 11751  125D  0008               	return
 11752  125E                     __end_of_setLED_Main:	
 11753                           
 11754                           	psect	text73
 11755  1B09                     __ptext73:	
 11756 ;; *************** function _LED_Initialization *****************
 11757 ;; Defined at:
 11758 ;;		line 31 in file "../src/LED_B1.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;		None
 11763 ;; Return value:  Size  Location     Type
 11764 ;;		None               void
 11765 ;; Registers used:
 11766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        0 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    8
 11779 ;; This function calls:
 11780 ;;		_setLED_Initialization
 11781 ;; This function is called by:
 11782 ;;		_main
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function _LED_Initialization
 11788  1B09                     _LED_Initialization:	
 11789                           
 11790                           ;LED_B1.c: 42: setLED_Initialization(99);
 11791                           
 11792                           ;incstack = 0
 11793                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11794  1B09  3063               	movlw	99
 11795  1B0A  319D  252D         	fcall	_setLED_Initialization
 11796  1B0C  0008               	return
 11797  1B0D                     __end_of_LED_Initialization:	
 11798                           
 11799                           	psect	text74
 11800  1D2D                     __ptext74:	
 11801 ;; *************** function _setLED_Initialization *****************
 11802 ;; Defined at:
 11803 ;;		line 74 in file "../src/LED_B1.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;  led             1    wreg     unsigned char 
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;  led             1    4[BANK0 ] unsigned char 
 11808 ;; Return value:  Size  Location     Type
 11809 ;;		None               void
 11810 ;; Registers used:
 11811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;Total ram usage:        1 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    7
 11824 ;; This function calls:
 11825 ;;		_LedPointSelect
 11826 ;;		_setLED
 11827 ;; This function is called by:
 11828 ;;		_LED_Initialization
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           
 11833                           ;psect for function _setLED_Initialization
 11834  1D2D                     _setLED_Initialization:	
 11835                           
 11836                           ;incstack = 0
 11837                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11838                           ;setLED_Initialization@led stored from wreg
 11839  1D2D  0020               	movlb	0	; select bank0
 11840  1D2E  00A4               	movwf	setLED_Initialization@led
 11841                           
 11842                           ;LED_B1.c: 75: LedPointSelect(led);
 11843  1D2F  0824               	movf	setLED_Initialization@led,w
 11844  1D30  319B  23F3  319D   	fcall	_LedPointSelect
 11845                           
 11846                           ;LED_B1.c: 76: LED->Enable = 1;
 11847  1D33  0021               	movlb	1	; select bank1
 11848  1D34  084B               	movf	_LED^(0+128),w
 11849  1D35  0086               	movwf	6
 11850  1D36  3001               	movlw	1	; select bank2/3
 11851  1D37  0087               	movwf	7
 11852  1D38  1401               	bsf	1,0
 11853                           
 11854                           ;LED_B1.c: 77: setLED(led, 0);
 11855  1D39  0020               	movlb	0	; select bank0
 11856  1D3A  01A2               	clrf	setLED@command
 11857  1D3B  0824               	movf	setLED_Initialization@led,w
 11858  1D3C  3192  22CE         	fcall	_setLED
 11859  1D3E  0008               	return
 11860  1D3F                     __end_of_setLED_Initialization:	
 11861                           
 11862                           	psect	text75
 11863  13C2                     __ptext75:	
 11864 ;; *************** function _Flash_Memory_Main *****************
 11865 ;; Defined at:
 11866 ;;		line 976 in file "../src/MCU_B1.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  key_Status      1    7[BANK0 ] unsigned char 
 11871 ;; Return value:  Size  Location     Type
 11872 ;;		None               void
 11873 ;; Registers used:
 11874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;Total ram usage:        3 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:    8
 11887 ;; This function calls:
 11888 ;;		_Flash_Memory_Modify
 11889 ;;		_getAll_Sw_KeyStatus
 11890 ;;		_getMain_All_LightsStatus
 11891 ;; This function is called by:
 11892 ;;		_main
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           
 11897                           ;psect for function _Flash_Memory_Main
 11898  13C2                     _Flash_Memory_Main:	
 11899                           
 11900                           ;MCU_B1.c: 977: char key_Status = 0;
 11901                           
 11902                           ;incstack = 0
 11903                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11904  13C2  0020               	movlb	0	; select bank0
 11905  13C3  01A7               	clrf	Flash_Memory_Main@key_Status
 11906                           
 11907                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 11908  13C4  319C  24B3  3193   	fcall	_getAll_Sw_KeyStatus
 11909  13C7  0020               	movlb	0	; select bank0
 11910  13C8  00A6               	movwf	??_Flash_Memory_Main
 11911  13C9  0826               	movf	??_Flash_Memory_Main,w
 11912  13CA  00A7               	movwf	Flash_Memory_Main@key_Status
 11913                           
 11914                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 11915  13CB  0024               	movlb	4	; select bank4
 11916  13CC  1C44               	btfss	(_Memory^(0+512)+36),0
 11917  13CD  0008               	return
 11918                           
 11919                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11920  13CE  0020               	movlb	0	; select bank0
 11921  13CF  01A8               	clrf	_Flash_Memory_Main$3125
 11922  13D0  319B  2381  3193   	fcall	_getMain_All_LightsStatus
 11923  13D3  3800               	iorlw	0
 11924  13D4  1D03               	skipz
 11925  13D5  2BDC               	goto	l10082
 11926  13D6  0020               	movlb	0	; select bank0
 11927  13D7  08A7               	movf	Flash_Memory_Main@key_Status,f
 11928  13D8  1D03               	skipz
 11929  13D9  2BDC               	goto	l10082
 11930  13DA  01A8               	clrf	_Flash_Memory_Main$3125
 11931  13DB  0AA8               	incf	_Flash_Memory_Main$3125,f
 11932  13DC                     l10082:	
 11933  13DC  0020               	movlb	0	; select bank0
 11934  13DD  0828               	movf	_Flash_Memory_Main$3125,w
 11935  13DE  0024               	movlb	4	; select bank4
 11936  13DF  10C4               	bcf	(_Memory^(0+512)+36),1
 11937  13E0  1D03               	skipz
 11938  13E1  14C4               	bsf	(_Memory^(0+512)+36),1
 11939                           
 11940                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 11941  13E2  1CC4               	btfss	(_Memory^(0+512)+36),1
 11942  13E3  2BFD               	goto	l1247
 11943                           
 11944                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 11945  13E4  15C4               	bsf	(_Memory^(0+512)+36),3
 11946                           
 11947                           ;MCU_B1.c: 985: Memory.Time++;
 11948  13E5  3001               	movlw	1
 11949  13E6  07C2               	addwf	(_Memory^(0+512)+34),f
 11950  13E7  3000               	movlw	0
 11951  13E8  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11952                           
 11953                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 11954  13E9  3022               	movlw	34
 11955  13EA  3E20               	addlw	_Memory& (0+255)
 11956  13EB  0086               	movwf	6
 11957  13EC  3002               	movlw	2	; select bank4/5
 11958  13ED  0087               	movwf	7
 11959  13EE  3F40               	moviw [0]fsr1
 11960  13EF  3A0A               	xorlw	10
 11961  13F0  1D03               	skipz
 11962  13F1  2BF4               	goto	u11555
 11963  13F2  3F41               	moviw [1]fsr1
 11964  13F3  3A00               	xorlw	0
 11965  13F4                     u11555:	
 11966  13F4  1D03               	skipz
 11967  13F5  0008               	return
 11968                           
 11969                           ;MCU_B1.c: 987: Memory.Time = 0;
 11970  13F6  01C2               	clrf	(_Memory^(0+512)+34)
 11971  13F7  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11972                           
 11973                           ;MCU_B1.c: 988: Memory.Modify = 0;
 11974  13F8  1044               	bcf	(_Memory^(0+512)+36),0
 11975                           
 11976                           ;MCU_B1.c: 989: Memory.GO = 0;
 11977  13F9  10C4               	bcf	(_Memory^(0+512)+36),1
 11978                           
 11979                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 11980  13FA  318B  239E         	fcall	_Flash_Memory_Modify
 11981                           
 11982                           ;MCU_B1.c: 991: }
 11983                           ;MCU_B1.c: 992: } else {
 11984  13FC  0008               	return
 11985  13FD                     l1247:	
 11986                           
 11987                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 11988  13FD  1DC4               	btfss	(_Memory^(0+512)+36),3
 11989  13FE  0008               	return
 11990                           
 11991                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 11992  13FF  11C4               	bcf	(_Memory^(0+512)+36),3
 11993                           
 11994                           ;MCU_B1.c: 995: Memory.Time = 0;
 11995  1400  01C2               	clrf	(_Memory^(0+512)+34)
 11996  1401  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11997  1402  0008               	return
 11998  1403                     __end_of_Flash_Memory_Main:	
 11999                           
 12000                           	psect	text76
 12001  1CB3                     __ptext76:	
 12002 ;; *************** function _getAll_Sw_KeyStatus *****************
 12003 ;; Defined at:
 12004 ;;		line 278 in file "../src/Switch_B1.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;		None
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;  status          1    1[BANK0 ] unsigned char 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  1    wreg      unsigned char 
 12011 ;; Registers used:
 12012 ;;		wreg, status,2
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;Total ram usage:        3 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    5
 12025 ;; This function calls:
 12026 ;;		Nothing
 12027 ;; This function is called by:
 12028 ;;		_Flash_Memory_Main
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           
 12033                           ;psect for function _getAll_Sw_KeyStatus
 12034  1CB3                     _getAll_Sw_KeyStatus:	
 12035                           
 12036                           ;Switch_B1.c: 279: char status = 0;
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12040  1CB3  0020               	movlb	0	; select bank0
 12041  1CB4  01A1               	clrf	getAll_Sw_KeyStatus@status
 12042                           
 12043                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12044  1CB5  01A2               	clrf	_getAll_Sw_KeyStatus$6393
 12045  1CB6  0AA2               	incf	_getAll_Sw_KeyStatus$6393,f
 12046  1CB7  1F0C               	btfss	12,6	;volatile
 12047  1CB8  1A0C               	btfsc	12,4	;volatile
 12048  1CB9  2CBE               	goto	l9714
 12049  1CBA  1C0C               	btfss	12,0	;volatile
 12050  1CBB  1B8C               	btfsc	12,7	;volatile
 12051  1CBC  2CBE               	goto	l9714
 12052  1CBD  01A2               	clrf	_getAll_Sw_KeyStatus$6393
 12053  1CBE                     l9714:	
 12054  1CBE  0822               	movf	_getAll_Sw_KeyStatus$6393,w
 12055  1CBF  00A0               	movwf	??_getAll_Sw_KeyStatus
 12056  1CC0  0820               	movf	??_getAll_Sw_KeyStatus,w
 12057  1CC1  00A1               	movwf	getAll_Sw_KeyStatus@status
 12058                           
 12059                           ;Switch_B1.c: 302: return status;
 12060  1CC2  0821               	movf	getAll_Sw_KeyStatus@status,w
 12061  1CC3  0008               	return
 12062  1CC4                     __end_of_getAll_Sw_KeyStatus:	
 12063                           
 12064                           	psect	text77
 12065  0B9E                     __ptext77:	
 12066 ;; *************** function _Flash_Memory_Modify *****************
 12067 ;; Defined at:
 12068 ;;		line 1053 in file "../src/MCU_B1.c"
 12069 ;; Parameters:    Size  Location     Type
 12070 ;;		None
 12071 ;; Auto vars:     Size  Location     Type
 12072 ;;  i               1    5[BANK0 ] unsigned char 
 12073 ;; Return value:  Size  Location     Type
 12074 ;;		None               void
 12075 ;; Registers used:
 12076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12077 ;; Tracked objects:
 12078 ;;		On entry : 0/0
 12079 ;;		On exit  : 0/0
 12080 ;;		Unchanged: 0/0
 12081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12086 ;;Total ram usage:        2 bytes
 12087 ;; Hardware stack levels used:    1
 12088 ;; Hardware stack levels required when called:    7
 12089 ;; This function calls:
 12090 ;;		_Flash_Memory_Erasing
 12091 ;;		_Flash_Memory_Read
 12092 ;;		_Flash_Memory_Write
 12093 ;;		_setMemory_Data
 12094 ;; This function is called by:
 12095 ;;		_Flash_Memory_Main
 12096 ;; This function uses a non-reentrant model
 12097 ;;
 12098                           
 12099                           
 12100                           ;psect for function _Flash_Memory_Modify
 12101  0B9E                     _Flash_Memory_Modify:	
 12102                           
 12103                           ;MCU_B1.c: 1054: char i = 0;
 12104                           
 12105                           ;incstack = 0
 12106                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12107  0B9E  0020               	movlb	0	; select bank0
 12108  0B9F  01A5               	clrf	Flash_Memory_Modify@i
 12109                           
 12110                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12111  0BA0  01A5               	clrf	Flash_Memory_Modify@i
 12112  0BA1  3020               	movlw	32
 12113  0BA2  0225               	subwf	Flash_Memory_Modify@i,w
 12114  0BA3  1803               	btfsc	3,0
 12115  0BA4  2BBA               	goto	l9732
 12116  0BA5                     l9726:	
 12117                           
 12118                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12119  0BA5  0825               	movf	Flash_Memory_Modify@i,w
 12120  0BA6  319E  26A6  318B   	fcall	_Flash_Memory_Read
 12121  0BA9  0020               	movlb	0	; select bank0
 12122  0BAA  00A4               	movwf	??_Flash_Memory_Modify
 12123  0BAB  0825               	movf	Flash_Memory_Modify@i,w
 12124  0BAC  3E20               	addlw	_Memory& (0+255)
 12125  0BAD  0086               	movwf	6
 12126  0BAE  3002               	movlw	2	; select bank4/5
 12127  0BAF  0087               	movwf	7
 12128  0BB0  0824               	movf	??_Flash_Memory_Modify,w
 12129  0BB1  0081               	movwf	1
 12130  0BB2  3001               	movlw	1
 12131  0BB3  00A4               	movwf	??_Flash_Memory_Modify
 12132  0BB4  0824               	movf	??_Flash_Memory_Modify,w
 12133  0BB5  07A5               	addwf	Flash_Memory_Modify@i,f
 12134  0BB6  3020               	movlw	32
 12135  0BB7  0225               	subwf	Flash_Memory_Modify@i,w
 12136  0BB8  1C03               	skipc
 12137  0BB9  2BA5               	goto	l9726
 12138  0BBA                     l9732:	
 12139                           
 12140                           ;MCU_B1.c: 1057: }
 12141                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12142  0BBA  0021               	movlb	1	; select bank1
 12143  0BBB  0863               	movf	_product^(0+128),w
 12144  0BBC  0086               	movwf	6
 12145  0BBD  3002               	movlw	2	; select bank4/5
 12146  0BBE  0087               	movwf	7
 12147  0BBF  3002               	movlw	2	; select bank4/5
 12148  0BC0  3F4C               	moviw [12]fsr1
 12149  0BC1  0020               	movlb	0	; select bank0
 12150  0BC2  00A0               	movwf	setMemory_Data@data
 12151  0BC3  3000               	movlw	0
 12152  0BC4  319B  23FF  318B   	fcall	_setMemory_Data
 12153                           
 12154                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12155  0BC7  0021               	movlb	1	; select bank1
 12156  0BC8  0863               	movf	_product^(0+128),w
 12157  0BC9  0086               	movwf	6
 12158  0BCA  3002               	movlw	2	; select bank4/5
 12159  0BCB  0087               	movwf	7
 12160  0BCC  3002               	movlw	2	; select bank4/5
 12161  0BCD  3F4D               	moviw [13]fsr1
 12162  0BCE  0020               	movlb	0	; select bank0
 12163  0BCF  00A0               	movwf	setMemory_Data@data
 12164  0BD0  3001               	movlw	1
 12165  0BD1  319B  23FF  318B   	fcall	_setMemory_Data
 12166                           
 12167                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12168  0BD4  0021               	movlb	1	; select bank1
 12169  0BD5  0863               	movf	_product^(0+128),w
 12170  0BD6  0086               	movwf	6
 12171  0BD7  3002               	movlw	2	; select bank4/5
 12172  0BD8  0087               	movwf	7
 12173  0BD9  3002               	movlw	2	; select bank4/5
 12174  0BDA  3F4E               	moviw [14]fsr1
 12175  0BDB  0020               	movlb	0	; select bank0
 12176  0BDC  00A0               	movwf	setMemory_Data@data
 12177  0BDD  3002               	movlw	2
 12178  0BDE  319B  23FF  318B   	fcall	_setMemory_Data
 12179                           
 12180                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12181  0BE1  0021               	movlb	1	; select bank1
 12182  0BE2  0863               	movf	_product^(0+128),w
 12183  0BE3  0086               	movwf	6
 12184  0BE4  3002               	movlw	2	; select bank4/5
 12185  0BE5  0087               	movwf	7
 12186  0BE6  3002               	movlw	2	; select bank4/5
 12187  0BE7  3F55               	moviw [21]fsr1
 12188  0BE8  0020               	movlb	0	; select bank0
 12189  0BE9  00A0               	movwf	setMemory_Data@data
 12190  0BEA  3003               	movlw	3
 12191  0BEB  319B  23FF  318B   	fcall	_setMemory_Data
 12192                           
 12193                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12194  0BEE  0021               	movlb	1	; select bank1
 12195  0BEF  0863               	movf	_product^(0+128),w
 12196  0BF0  0086               	movwf	6
 12197  0BF1  3002               	movlw	2	; select bank4/5
 12198  0BF2  0087               	movwf	7
 12199  0BF3  3002               	movlw	2	; select bank4/5
 12200  0BF4  3F56               	moviw [22]fsr1
 12201  0BF5  0020               	movlb	0	; select bank0
 12202  0BF6  00A0               	movwf	setMemory_Data@data
 12203  0BF7  3004               	movlw	4
 12204  0BF8  319B  23FF  318B   	fcall	_setMemory_Data
 12205                           
 12206                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12207  0BFB  0021               	movlb	1	; select bank1
 12208  0BFC  0863               	movf	_product^(0+128),w
 12209  0BFD  0086               	movwf	6
 12210  0BFE  3002               	movlw	2	; select bank4/5
 12211  0BFF  0087               	movwf	7
 12212  0C00  3002               	movlw	2	; select bank4/5
 12213  0C01  3F57               	moviw [23]fsr1
 12214  0C02  0020               	movlb	0	; select bank0
 12215  0C03  00A0               	movwf	setMemory_Data@data
 12216  0C04  3005               	movlw	5
 12217  0C05  319B  23FF  318B   	fcall	_setMemory_Data
 12218                           
 12219                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12220  0C08  0021               	movlb	1	; select bank1
 12221  0C09  1EB8               	btfss	(_myMain^(0+128)+10),5
 12222  0C0A  2C15               	goto	l9740
 12223                           
 12224                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12225  0C0B  12B8               	bcf	(_myMain^(0+128)+10),5
 12226                           
 12227                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12228  0C0C  30AA               	movlw	170
 12229  0C0D  0020               	movlb	0	; select bank0
 12230  0C0E  00A4               	movwf	??_Flash_Memory_Modify
 12231  0C0F  0824               	movf	??_Flash_Memory_Modify,w
 12232  0C10  00A0               	movwf	setMemory_Data@data
 12233  0C11  301E               	movlw	30
 12234  0C12  319B  23FF  318B   	fcall	_setMemory_Data
 12235  0C15                     l9740:	
 12236                           
 12237                           ;MCU_B1.c: 1068: }
 12238                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12239  0C15  0024               	movlb	4	; select bank4
 12240  0C16  1D44               	btfss	(_Memory^(0+512)+36),2
 12241  0C17  2C1C               	goto	l1271
 12242                           
 12243                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12244  0C18  1144               	bcf	(_Memory^(0+512)+36),2
 12245                           
 12246                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12247  0C19  0021               	movlb	1	; select bank1
 12248  0C1A  11AE               	bcf	_myMain^(0+128),3
 12249                           
 12250                           ;MCU_B1.c: 1073: myMain.First = 0;
 12251  0C1B  12AE               	bcf	_myMain^(0+128),5
 12252  0C1C                     l1271:	
 12253                           
 12254                           ;MCU_B1.c: 1075: }
 12255                           ;MCU_B1.c: 1076: GIE = 0;
 12256  0C1C  138B               	bcf	11,7	;volatile
 12257                           
 12258                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12259  0C1D  319C  240B  318B   	fcall	_Flash_Memory_Erasing
 12260                           
 12261                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12262  0C20  3191  212C         	fcall	_Flash_Memory_Write
 12263                           
 12264                           ;MCU_B1.c: 1079: GIE = 1;
 12265  0C22  178B               	bsf	11,7	;volatile
 12266  0C23  0008               	return
 12267  0C24                     __end_of_Flash_Memory_Modify:	
 12268                           
 12269                           	psect	text78
 12270  1C0B                     __ptext78:	
 12271 ;; *************** function _Flash_Memory_Erasing *****************
 12272 ;; Defined at:
 12273 ;;		line 1042 in file "../src/MCU_B1.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;		None
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;		None
 12278 ;; Return value:  Size  Location     Type
 12279 ;;		None               void
 12280 ;; Registers used:
 12281 ;;		wreg, status,2, status,0, pclath, cstack
 12282 ;; Tracked objects:
 12283 ;;		On entry : 0/0
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;Total ram usage:        0 bytes
 12292 ;; Hardware stack levels used:    1
 12293 ;; Hardware stack levels required when called:    6
 12294 ;; This function calls:
 12295 ;;		_Flash_Memory_Unlock
 12296 ;; This function is called by:
 12297 ;;		_Flash_Memory_Modify
 12298 ;; This function uses a non-reentrant model
 12299 ;;
 12300                           
 12301                           
 12302                           ;psect for function _Flash_Memory_Erasing
 12303  1C0B                     _Flash_Memory_Erasing:	
 12304                           
 12305                           ;MCU_B1.c: 1043: CFGS = 0;
 12306                           
 12307                           ;incstack = 0
 12308                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12309  1C0B  0023               	movlb	3	; select bank3
 12310  1C0C  1315               	bcf	21,6	;volatile
 12311                           
 12312                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12313  1C0D  3030               	movlw	48
 12314  1C0E  0092               	movwf	18	;volatile
 12315                           
 12316                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12317  1C0F  0191               	clrf	17	;volatile
 12318                           
 12319                           ;MCU_B1.c: 1046: FREE = 1;
 12320  1C10  1615               	bsf	21,4	;volatile
 12321                           
 12322                           ;MCU_B1.c: 1047: WREN = 1;
 12323  1C11  1515               	bsf	21,2	;volatile
 12324                           
 12325                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12326  1C12  319B  2378         	fcall	_Flash_Memory_Unlock
 12327                           
 12328                           ;MCU_B1.c: 1049: WREN = 0;
 12329  1C14  0023               	movlb	3	; select bank3
 12330  1C15  1115               	bcf	21,2	;volatile
 12331  1C16  0008               	return
 12332  1C17                     __end_of_Flash_Memory_Erasing:	
 12333                           
 12334                           	psect	text79
 12335  0629                     __ptext79:	
 12336 ;; *************** function _Flash_Memory_Initialization *****************
 12337 ;; Defined at:
 12338 ;;		line 932 in file "../src/MCU_B1.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;		None
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;  value           1    5[BANK0 ] unsigned char 
 12343 ;; Return value:  Size  Location     Type
 12344 ;;		None               void
 12345 ;; Registers used:
 12346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : 0/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;Total ram usage:        2 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    7
 12359 ;; This function calls:
 12360 ;;		_Flash_Memory_Read
 12361 ;;		_Flash_Memory_Write
 12362 ;;		_setMemory_Data
 12363 ;; This function is called by:
 12364 ;;		_main
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           
 12369                           ;psect for function _Flash_Memory_Initialization
 12370  0629                     _Flash_Memory_Initialization:	
 12371                           
 12372                           ;MCU_B1.c: 933: char value = 0;
 12373                           
 12374                           ;incstack = 0
 12375                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12376  0629  0020               	movlb	0	; select bank0
 12377  062A  01A5               	clrf	Flash_Memory_Initialization@value
 12378                           
 12379                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12380  062B  301F               	movlw	31
 12381  062C  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12382  062F  3AAA               	xorlw	170
 12383  0630  1D03               	skipz
 12384  0631  2EAB               	goto	l10056
 12385                           
 12386                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12387  0632  3000               	movlw	0
 12388  0633  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12389  0636  0020               	movlb	0	; select bank0
 12390  0637  00A4               	movwf	??_Flash_Memory_Initialization
 12391  0638  0021               	movlb	1	; select bank1
 12392  0639  0863               	movf	_product^(0+128),w
 12393  063A  3E0C               	addlw	12
 12394  063B  0086               	movwf	6
 12395  063C  3002               	movlw	2	; select bank4/5
 12396  063D  0087               	movwf	7
 12397  063E  0020               	movlb	0	; select bank0
 12398  063F  0824               	movf	??_Flash_Memory_Initialization,w
 12399  0640  0081               	movwf	1
 12400                           
 12401                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12402  0641  3001               	movlw	1
 12403  0642  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12404  0645  0020               	movlb	0	; select bank0
 12405  0646  00A4               	movwf	??_Flash_Memory_Initialization
 12406  0647  0021               	movlb	1	; select bank1
 12407  0648  0863               	movf	_product^(0+128),w
 12408  0649  3E0D               	addlw	13
 12409  064A  0086               	movwf	6
 12410  064B  3002               	movlw	2	; select bank4/5
 12411  064C  0087               	movwf	7
 12412  064D  0020               	movlb	0	; select bank0
 12413  064E  0824               	movf	??_Flash_Memory_Initialization,w
 12414  064F  0081               	movwf	1
 12415                           
 12416                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12417  0650  3002               	movlw	2
 12418  0651  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12419  0654  0020               	movlb	0	; select bank0
 12420  0655  00A4               	movwf	??_Flash_Memory_Initialization
 12421  0656  0021               	movlb	1	; select bank1
 12422  0657  0863               	movf	_product^(0+128),w
 12423  0658  3E0E               	addlw	14
 12424  0659  0086               	movwf	6
 12425  065A  3002               	movlw	2	; select bank4/5
 12426  065B  0087               	movwf	7
 12427  065C  0020               	movlb	0	; select bank0
 12428  065D  0824               	movf	??_Flash_Memory_Initialization,w
 12429  065E  0081               	movwf	1
 12430                           
 12431                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12432  065F  3003               	movlw	3
 12433  0660  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12434  0663  0020               	movlb	0	; select bank0
 12435  0664  00A4               	movwf	??_Flash_Memory_Initialization
 12436  0665  0021               	movlb	1	; select bank1
 12437  0666  0863               	movf	_product^(0+128),w
 12438  0667  3E15               	addlw	21
 12439  0668  0086               	movwf	6
 12440  0669  3002               	movlw	2	; select bank4/5
 12441  066A  0087               	movwf	7
 12442  066B  0020               	movlb	0	; select bank0
 12443  066C  0824               	movf	??_Flash_Memory_Initialization,w
 12444  066D  0081               	movwf	1
 12445                           
 12446                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12447  066E  3004               	movlw	4
 12448  066F  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12449  0672  0020               	movlb	0	; select bank0
 12450  0673  00A4               	movwf	??_Flash_Memory_Initialization
 12451  0674  0021               	movlb	1	; select bank1
 12452  0675  0863               	movf	_product^(0+128),w
 12453  0676  3E16               	addlw	22
 12454  0677  0086               	movwf	6
 12455  0678  3002               	movlw	2	; select bank4/5
 12456  0679  0087               	movwf	7
 12457  067A  0020               	movlb	0	; select bank0
 12458  067B  0824               	movf	??_Flash_Memory_Initialization,w
 12459  067C  0081               	movwf	1
 12460                           
 12461                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12462  067D  3005               	movlw	5
 12463  067E  319E  26A6  3186   	fcall	_Flash_Memory_Read
 12464  0681  0020               	movlb	0	; select bank0
 12465  0682  00A4               	movwf	??_Flash_Memory_Initialization
 12466  0683  0021               	movlb	1	; select bank1
 12467  0684  0863               	movf	_product^(0+128),w
 12468  0685  3E17               	addlw	23
 12469  0686  0086               	movwf	6
 12470  0687  3002               	movlw	2	; select bank4/5
 12471  0688  0087               	movwf	7
 12472  0689  0020               	movlb	0	; select bank0
 12473  068A  0824               	movf	??_Flash_Memory_Initialization,w
 12474  068B  0081               	movwf	1
 12475                           
 12476                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12477  068C  0021               	movlb	1	; select bank1
 12478  068D  0863               	movf	_product^(0+128),w
 12479  068E  3E0C               	addlw	12
 12480  068F  0086               	movwf	6
 12481  0690  3002               	movlw	2	; select bank4/5
 12482  0691  0087               	movwf	7
 12483  0692  0801               	movf	1,w
 12484  0693  3AFF               	xorlw	255
 12485  0694  1D03               	skipz
 12486  0695  0008               	return
 12487  0696  0863               	movf	_product^(0+128),w
 12488  0697  3E0D               	addlw	13
 12489  0698  0086               	movwf	6
 12490  0699  3002               	movlw	2	; select bank4/5
 12491  069A  0087               	movwf	7
 12492  069B  0801               	movf	1,w
 12493  069C  3AFF               	xorlw	255
 12494  069D  1D03               	skipz
 12495  069E  0008               	return
 12496  069F  0863               	movf	_product^(0+128),w
 12497  06A0  3E0E               	addlw	14
 12498  06A1  0086               	movwf	6
 12499  06A2  3002               	movlw	2	; select bank4/5
 12500  06A3  0087               	movwf	7
 12501  06A4  0801               	movf	1,w
 12502  06A5  3AFF               	xorlw	255
 12503  06A6  1D03               	skipz
 12504  06A7  0008               	return
 12505                           
 12506                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12507  06A8  15AE               	bsf	_myMain^(0+128),3
 12508                           
 12509                           ;MCU_B1.c: 951: myMain.First = 1;
 12510  06A9  16AE               	bsf	_myMain^(0+128),5
 12511                           
 12512                           ;MCU_B1.c: 952: }
 12513                           ;MCU_B1.c: 953: } else {
 12514  06AA  0008               	return
 12515  06AB                     l10056:	
 12516                           
 12517                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12518  06AB  30FF               	movlw	255
 12519  06AC  0020               	movlb	0	; select bank0
 12520  06AD  00A4               	movwf	??_Flash_Memory_Initialization
 12521  06AE  0824               	movf	??_Flash_Memory_Initialization,w
 12522  06AF  00A0               	movwf	setMemory_Data@data
 12523  06B0  3000               	movlw	0
 12524  06B1  319B  23FF  3186   	fcall	_setMemory_Data
 12525                           
 12526                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12527  06B4  30FF               	movlw	255
 12528  06B5  0020               	movlb	0	; select bank0
 12529  06B6  00A4               	movwf	??_Flash_Memory_Initialization
 12530  06B7  0824               	movf	??_Flash_Memory_Initialization,w
 12531  06B8  00A0               	movwf	setMemory_Data@data
 12532  06B9  3001               	movlw	1
 12533  06BA  319B  23FF  3186   	fcall	_setMemory_Data
 12534                           
 12535                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12536  06BD  30FF               	movlw	255
 12537  06BE  0020               	movlb	0	; select bank0
 12538  06BF  00A4               	movwf	??_Flash_Memory_Initialization
 12539  06C0  0824               	movf	??_Flash_Memory_Initialization,w
 12540  06C1  00A0               	movwf	setMemory_Data@data
 12541  06C2  3002               	movlw	2
 12542  06C3  319B  23FF  3186   	fcall	_setMemory_Data
 12543                           
 12544                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12545  06C6  30FF               	movlw	255
 12546  06C7  0020               	movlb	0	; select bank0
 12547  06C8  00A4               	movwf	??_Flash_Memory_Initialization
 12548  06C9  0824               	movf	??_Flash_Memory_Initialization,w
 12549  06CA  00A0               	movwf	setMemory_Data@data
 12550  06CB  3003               	movlw	3
 12551  06CC  319B  23FF  3186   	fcall	_setMemory_Data
 12552                           
 12553                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12554  06CF  30FF               	movlw	255
 12555  06D0  0020               	movlb	0	; select bank0
 12556  06D1  00A4               	movwf	??_Flash_Memory_Initialization
 12557  06D2  0824               	movf	??_Flash_Memory_Initialization,w
 12558  06D3  00A0               	movwf	setMemory_Data@data
 12559  06D4  3004               	movlw	4
 12560  06D5  319B  23FF  3186   	fcall	_setMemory_Data
 12561                           
 12562                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12563  06D8  30FF               	movlw	255
 12564  06D9  0020               	movlb	0	; select bank0
 12565  06DA  00A4               	movwf	??_Flash_Memory_Initialization
 12566  06DB  0824               	movf	??_Flash_Memory_Initialization,w
 12567  06DC  00A0               	movwf	setMemory_Data@data
 12568  06DD  3005               	movlw	5
 12569  06DE  319B  23FF  3186   	fcall	_setMemory_Data
 12570                           
 12571                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12572  06E1  30AA               	movlw	170
 12573  06E2  0020               	movlb	0	; select bank0
 12574  06E3  00A4               	movwf	??_Flash_Memory_Initialization
 12575  06E4  0824               	movf	??_Flash_Memory_Initialization,w
 12576  06E5  00A0               	movwf	setMemory_Data@data
 12577  06E6  301F               	movlw	31
 12578  06E7  319B  23FF  3186   	fcall	_setMemory_Data
 12579                           
 12580                           ;MCU_B1.c: 966: GIE = 0;
 12581  06EA  138B               	bcf	11,7	;volatile
 12582                           
 12583                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12584  06EB  3191  212C         	fcall	_Flash_Memory_Write
 12585                           
 12586                           ;MCU_B1.c: 968: GIE = 1;
 12587  06ED  178B               	bsf	11,7	;volatile
 12588                           
 12589                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12590  06EE  0021               	movlb	1	; select bank1
 12591  06EF  15AE               	bsf	_myMain^(0+128),3
 12592                           
 12593                           ;MCU_B1.c: 970: myMain.First = 1;
 12594  06F0  16AE               	bsf	_myMain^(0+128),5
 12595                           
 12596                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12597  06F1  1638               	bsf	(_myMain^(0+128)+10),4
 12598  06F2  0008               	return
 12599  06F3                     __end_of_Flash_Memory_Initialization:	
 12600                           
 12601                           	psect	text80
 12602  1BFF                     __ptext80:	
 12603 ;; *************** function _setMemory_Data *****************
 12604 ;; Defined at:
 12605 ;;		line 1094 in file "../src/MCU_B1.c"
 12606 ;; Parameters:    Size  Location     Type
 12607 ;;  address         1    wreg     unsigned char 
 12608 ;;  data            1    0[BANK0 ] unsigned char 
 12609 ;; Auto vars:     Size  Location     Type
 12610 ;;  address         1    2[BANK0 ] unsigned char 
 12611 ;; Return value:  Size  Location     Type
 12612 ;;		None               void
 12613 ;; Registers used:
 12614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12620 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;Total ram usage:        3 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; Hardware stack levels required when called:    5
 12627 ;; This function calls:
 12628 ;;		Nothing
 12629 ;; This function is called by:
 12630 ;;		_Flash_Memory_Initialization
 12631 ;;		_Flash_Memory_Modify
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           
 12636                           ;psect for function _setMemory_Data
 12637  1BFF                     _setMemory_Data:	
 12638                           
 12639                           ;incstack = 0
 12640                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12641                           ;setMemory_Data@address stored from wreg
 12642  1BFF  0020               	movlb	0	; select bank0
 12643  1C00  00A2               	movwf	setMemory_Data@address
 12644                           
 12645                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12646  1C01  0820               	movf	setMemory_Data@data,w
 12647  1C02  00A1               	movwf	??_setMemory_Data
 12648  1C03  0822               	movf	setMemory_Data@address,w
 12649  1C04  3E20               	addlw	_Memory& (0+255)
 12650  1C05  0086               	movwf	6
 12651  1C06  3002               	movlw	2	; select bank4/5
 12652  1C07  0087               	movwf	7
 12653  1C08  0821               	movf	??_setMemory_Data,w
 12654  1C09  0081               	movwf	1
 12655  1C0A  0008               	return
 12656  1C0B                     __end_of_setMemory_Data:	
 12657                           
 12658                           	psect	text81
 12659  112C                     __ptext81:	
 12660 ;; *************** function _Flash_Memory_Write *****************
 12661 ;; Defined at:
 12662 ;;		line 1023 in file "../src/MCU_B1.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;		None
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;  i               1    1[BANK0 ] unsigned char 
 12667 ;; Return value:  Size  Location     Type
 12668 ;;		None               void
 12669 ;; Registers used:
 12670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        2 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    6
 12683 ;; This function calls:
 12684 ;;		_Flash_Memory_Unlock
 12685 ;; This function is called by:
 12686 ;;		_Flash_Memory_Initialization
 12687 ;;		_Flash_Memory_Modify
 12688 ;; This function uses a non-reentrant model
 12689 ;;
 12690                           
 12691                           
 12692                           ;psect for function _Flash_Memory_Write
 12693  112C                     _Flash_Memory_Write:	
 12694                           
 12695                           ;MCU_B1.c: 1024: char i = 0;
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12699  112C  0020               	movlb	0	; select bank0
 12700  112D  01A1               	clrf	Flash_Memory_Write@i
 12701                           
 12702                           ;MCU_B1.c: 1025: CFGS = 0;
 12703  112E  0023               	movlb	3	; select bank3
 12704  112F  1315               	bcf	21,6	;volatile
 12705                           
 12706                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12707  1130  3030               	movlw	48
 12708  1131  0092               	movwf	18	;volatile
 12709                           
 12710                           ;MCU_B1.c: 1027: PMDATH = 0;
 12711  1132  0194               	clrf	20	;volatile
 12712                           
 12713                           ;MCU_B1.c: 1028: FREE = 0;
 12714  1133  1215               	bcf	21,4	;volatile
 12715                           
 12716                           ;MCU_B1.c: 1029: LWLO = 1;
 12717  1134  1695               	bsf	21,5	;volatile
 12718                           
 12719                           ;MCU_B1.c: 1030: WREN = 1;
 12720  1135  1515               	bsf	21,2	;volatile
 12721                           
 12722                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12723  1136  0020               	movlb	0	; select bank0
 12724  1137  01A1               	clrf	Flash_Memory_Write@i
 12725  1138  3020               	movlw	32
 12726  1139  0221               	subwf	Flash_Memory_Write@i,w
 12727  113A  1803               	btfsc	3,0
 12728  113B  2954               	goto	l1261
 12729  113C                     l9518:	
 12730                           
 12731                           ;MCU_B1.c: 1032: PMADRL = i;
 12732  113C  0821               	movf	Flash_Memory_Write@i,w
 12733  113D  0023               	movlb	3	; select bank3
 12734  113E  0091               	movwf	17	;volatile
 12735                           
 12736                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12737  113F  0020               	movlb	0	; select bank0
 12738  1140  0821               	movf	Flash_Memory_Write@i,w
 12739  1141  3E20               	addlw	_Memory& (0+255)
 12740  1142  0086               	movwf	6
 12741  1143  3002               	movlw	2	; select bank4/5
 12742  1144  0087               	movwf	7
 12743  1145  0801               	movf	1,w
 12744  1146  0023               	movlb	3	; select bank3
 12745  1147  0093               	movwf	19	;volatile
 12746                           
 12747                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12748  1148  319B  2378  3191   	fcall	_Flash_Memory_Unlock
 12749  114B  3001               	movlw	1
 12750  114C  0020               	movlb	0	; select bank0
 12751  114D  00A0               	movwf	??_Flash_Memory_Write
 12752  114E  0820               	movf	??_Flash_Memory_Write,w
 12753  114F  07A1               	addwf	Flash_Memory_Write@i,f
 12754  1150  3020               	movlw	32
 12755  1151  0221               	subwf	Flash_Memory_Write@i,w
 12756  1152  1C03               	skipc
 12757  1153  293C               	goto	l9518
 12758  1154                     l1261:	
 12759                           
 12760                           ;MCU_B1.c: 1035: }
 12761                           ;MCU_B1.c: 1036: LWLO = 0;
 12762  1154  0023               	movlb	3	; select bank3
 12763  1155  1295               	bcf	21,5	;volatile
 12764                           
 12765                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12766  1156  319B  2378         	fcall	_Flash_Memory_Unlock
 12767                           
 12768                           ;MCU_B1.c: 1038: WREN = 0;
 12769  1158  0023               	movlb	3	; select bank3
 12770  1159  1115               	bcf	21,2	;volatile
 12771  115A  0008               	return
 12772  115B                     __end_of_Flash_Memory_Write:	
 12773                           
 12774                           	psect	text82
 12775  1B78                     __ptext82:	
 12776 ;; *************** function _Flash_Memory_Unlock *****************
 12777 ;; Defined at:
 12778 ;;		line 1002 in file "../src/MCU_B1.c"
 12779 ;; Parameters:    Size  Location     Type
 12780 ;;		None
 12781 ;; Auto vars:     Size  Location     Type
 12782 ;;		None
 12783 ;; Return value:  Size  Location     Type
 12784 ;;		None               void
 12785 ;; Registers used:
 12786 ;;		wreg
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;Total ram usage:        0 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; Hardware stack levels required when called:    5
 12799 ;; This function calls:
 12800 ;;		Nothing
 12801 ;; This function is called by:
 12802 ;;		_Flash_Memory_Write
 12803 ;;		_Flash_Memory_Erasing
 12804 ;; This function uses a non-reentrant model
 12805 ;;
 12806                           
 12807                           
 12808                           ;psect for function _Flash_Memory_Unlock
 12809  1B78                     _Flash_Memory_Unlock:	
 12810                           
 12811                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12812                           
 12813                           ;incstack = 0
 12814                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12815  1B78  3055               	movlw	85
 12816  1B79  0023               	movlb	3	; select bank3
 12817  1B7A  0096               	movwf	22	;volatile
 12818                           
 12819                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12820  1B7B  30AA               	movlw	170
 12821  1B7C  0096               	movwf	22	;volatile
 12822                           
 12823                           ;MCU_B1.c: 1005: WR = 1;
 12824  1B7D  1495               	bsf	21,1	;volatile
 12825                           
 12826                           ;MCU_B1.c: 1006: __nop();
 12827  1B7E  0000               	nop
 12828                           
 12829                           ;MCU_B1.c: 1007: __nop();
 12830  1B7F  0000               	nop
 12831  1B80  0008               	return
 12832  1B81                     __end_of_Flash_Memory_Unlock:	
 12833                           
 12834                           	psect	text83
 12835  1EA6                     __ptext83:	
 12836 ;; *************** function _Flash_Memory_Read *****************
 12837 ;; Defined at:
 12838 ;;		line 1011 in file "../src/MCU_B1.c"
 12839 ;; Parameters:    Size  Location     Type
 12840 ;;  address         1    wreg     unsigned char 
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;  address         1    2[BANK0 ] unsigned char 
 12843 ;;  ret             1    3[BANK0 ] unsigned char 
 12844 ;;  i               1    1[BANK0 ] unsigned char 
 12845 ;; Return value:  Size  Location     Type
 12846 ;;                  1    wreg      unsigned char 
 12847 ;; Registers used:
 12848 ;;		wreg, status,2
 12849 ;; Tracked objects:
 12850 ;;		On entry : 0/0
 12851 ;;		On exit  : 0/0
 12852 ;;		Unchanged: 0/0
 12853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12855 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;Total ram usage:        4 bytes
 12859 ;; Hardware stack levels used:    1
 12860 ;; Hardware stack levels required when called:    5
 12861 ;; This function calls:
 12862 ;;		Nothing
 12863 ;; This function is called by:
 12864 ;;		_Flash_Memory_Initialization
 12865 ;;		_Flash_Memory_Modify
 12866 ;; This function uses a non-reentrant model
 12867 ;;
 12868                           
 12869                           
 12870                           ;psect for function _Flash_Memory_Read
 12871  1EA6                     _Flash_Memory_Read:	
 12872                           
 12873                           ;incstack = 0
 12874                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12875                           ;Flash_Memory_Read@address stored from wreg
 12876  1EA6  0020               	movlb	0	; select bank0
 12877  1EA7  00A2               	movwf	Flash_Memory_Read@address
 12878                           
 12879                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 12880  1EA8  01A1               	clrf	Flash_Memory_Read@i
 12881  1EA9  01A3               	clrf	Flash_Memory_Read@ret
 12882                           
 12883                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 12884  1EAA  3030               	movlw	48
 12885  1EAB  0023               	movlb	3	; select bank3
 12886  1EAC  0092               	movwf	18	;volatile
 12887                           
 12888                           ;MCU_B1.c: 1014: PMADRL = address;
 12889  1EAD  0020               	movlb	0	; select bank0
 12890  1EAE  0822               	movf	Flash_Memory_Read@address,w
 12891  1EAF  0023               	movlb	3	; select bank3
 12892  1EB0  0091               	movwf	17	;volatile
 12893                           
 12894                           ;MCU_B1.c: 1015: CFGS = 0;
 12895  1EB1  1315               	bcf	21,6	;volatile
 12896                           
 12897                           ;MCU_B1.c: 1016: RD = 1;
 12898  1EB2  1415               	bsf	21,0	;volatile
 12899                           
 12900                           ;MCU_B1.c: 1017: i = PMDATH;
 12901  1EB3  0814               	movf	20,w	;volatile
 12902  1EB4  0020               	movlb	0	; select bank0
 12903  1EB5  00A0               	movwf	??_Flash_Memory_Read
 12904  1EB6  0820               	movf	??_Flash_Memory_Read,w
 12905  1EB7  00A1               	movwf	Flash_Memory_Read@i
 12906                           
 12907                           ;MCU_B1.c: 1018: ret = PMDATL;
 12908  1EB8  0023               	movlb	3	; select bank3
 12909  1EB9  0813               	movf	19,w	;volatile
 12910  1EBA  0020               	movlb	0	; select bank0
 12911  1EBB  00A0               	movwf	??_Flash_Memory_Read
 12912  1EBC  0820               	movf	??_Flash_Memory_Read,w
 12913  1EBD  00A3               	movwf	Flash_Memory_Read@ret
 12914                           
 12915                           ;MCU_B1.c: 1019: return ret;
 12916  1EBE  0823               	movf	Flash_Memory_Read@ret,w
 12917  1EBF  0008               	return
 12918  1EC0                     __end_of_Flash_Memory_Read:	
 12919                           
 12920                           	psect	text84
 12921  0554                     __ptext84:	
 12922 ;; *************** function _Exception_Main *****************
 12923 ;; Defined at:
 12924 ;;		line 499 in file "../src/Main_B1.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;		None
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  i               2   19[BANK0 ] int 
 12929 ;;  i               2   17[BANK0 ] int 
 12930 ;;  lights          1   21[BANK0 ] unsigned char 
 12931 ;;  error           1   16[BANK0 ] unsigned char 
 12932 ;;  count           1   15[BANK0 ] unsigned char 
 12933 ;;  status          1   14[BANK0 ] unsigned char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;		None               void
 12936 ;; Registers used:
 12937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12944 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12946 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12947 ;;Total ram usage:        9 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    7
 12950 ;; This function calls:
 12951 ;;		_getDimmerLights_Line
 12952 ;;		_getDimmerLights_Status
 12953 ;;		_getMain_All_Error_Status
 12954 ;;		_getMain_All_LightsStatus
 12955 ;;		_setBuz
 12956 ;;		_setDimmerLights_SwOff
 12957 ;;		_setLED
 12958 ;; This function is called by:
 12959 ;;		_main
 12960 ;; This function uses a non-reentrant model
 12961 ;;
 12962                           
 12963                           
 12964                           ;psect for function _Exception_Main
 12965  0554                     _Exception_Main:	
 12966                           
 12967                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12968                           
 12969                           ;incstack = 0
 12970                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12971  0554  3000               	movlw	0
 12972  0555  3191  218C  3185   	fcall	_getMain_All_Error_Status
 12973  0558  0020               	movlb	0	; select bank0
 12974  0559  00AD               	movwf	??_Exception_Main
 12975  055A  082D               	movf	??_Exception_Main,w
 12976  055B  00B0               	movwf	Exception_Main@error
 12977                           
 12978                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12979  055C  01B5               	clrf	Exception_Main@lights
 12980  055D  01AF               	clrf	Exception_Main@count
 12981  055E  0AAF               	incf	Exception_Main@count,f
 12982                           
 12983                           ;Main_B1.c: 502: char status = 0;
 12984  055F  01AE               	clrf	Exception_Main@status
 12985                           
 12986                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12987  0560  0021               	movlb	1	; select bank1
 12988  0561  1DB8               	btfss	(_myMain^(0+128)+10),3
 12989  0562  2D72               	goto	l10314
 12990                           
 12991                           ;Main_B1.c: 505: if (error == 0) {
 12992  0563  0020               	movlb	0	; select bank0
 12993  0564  08B0               	movf	Exception_Main@error,f
 12994  0565  1D03               	skipz
 12995  0566  0008               	return
 12996                           
 12997                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12998  0567  0021               	movlb	1	; select bank1
 12999  0568  11B8               	bcf	(_myMain^(0+128)+10),3
 13000                           
 13001                           ;Main_B1.c: 509: setLED(99, 10);
 13002  0569  300A               	movlw	10
 13003  056A  0020               	movlb	0	; select bank0
 13004  056B  00AD               	movwf	??_Exception_Main
 13005  056C  082D               	movf	??_Exception_Main,w
 13006  056D  00A2               	movwf	setLED@command
 13007  056E  3063               	movlw	99
 13008  056F  3192  22CE         	fcall	_setLED
 13009                           
 13010                           ;Main_B1.c: 522: }
 13011                           ;Main_B1.c: 523: } else {
 13012  0571  0008               	return
 13013  0572                     l10314:	
 13014                           
 13015                           ;Main_B1.c: 524: if (error != 0) {
 13016  0572  0020               	movlb	0	; select bank0
 13017  0573  0830               	movf	Exception_Main@error,w
 13018  0574  1903               	btfsc	3,2
 13019  0575  0008               	return
 13020                           
 13021                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13022  0576  0021               	movlb	1	; select bank1
 13023  0577  15B8               	bsf	(_myMain^(0+128)+10),3
 13024                           
 13025                           ;Main_B1.c: 527: setLED(99, 11);
 13026  0578  300B               	movlw	11
 13027  0579  0020               	movlb	0	; select bank0
 13028  057A  00AD               	movwf	??_Exception_Main
 13029  057B  082D               	movf	??_Exception_Main,w
 13030  057C  00A2               	movwf	setLED@command
 13031  057D  3063               	movlw	99
 13032  057E  3192  22CE  3185   	fcall	_setLED
 13033                           
 13034                           ;Main_B1.c: 538: switch (error) {
 13035  0581  2E1E               	goto	l10362
 13036  0582                     l10320:	
 13037                           ;Main_B1.c: 539: case 2:
 13038                           
 13039                           
 13040                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13041  0582  319B  2381  3185   	fcall	_getMain_All_LightsStatus
 13042  0585  3A01               	xorlw	1
 13043  0586  1D03               	skipz
 13044  0587  2D91               	goto	l10324
 13045                           
 13046                           ;Main_B1.c: 547: setBuz(10, 300);
 13047  0588  302C               	movlw	44
 13048  0589  0020               	movlb	0	; select bank0
 13049  058A  00A9               	movwf	setBuz@time
 13050  058B  3001               	movlw	1
 13051  058C  00AA               	movwf	setBuz@time+1
 13052  058D  300A               	movlw	10
 13053  058E  3194  24F1  3185   	fcall	_setBuz
 13054  0591                     l10324:	
 13055                           
 13056                           ;Main_B1.c: 548: }
 13057                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13058  0591  0020               	movlb	0	; select bank0
 13059  0592  01B1               	clrf	Exception_Main@i
 13060  0593  01B2               	clrf	Exception_Main@i+1
 13061  0594                     l10334:	
 13062  0594  0832               	movf	Exception_Main@i+1,w
 13063  0595  3A80               	xorlw	128
 13064  0596  00AD               	movwf	??_Exception_Main
 13065  0597  3080               	movlw	128
 13066  0598  022D               	subwf	??_Exception_Main,w
 13067  0599  1D03               	skipz
 13068  059A  2D9D               	goto	u11985
 13069  059B  082F               	movf	Exception_Main@count,w
 13070  059C  0231               	subwf	Exception_Main@i,w
 13071  059D                     u11985:	
 13072  059D  1803               	btfsc	3,0
 13073  059E  2DBF               	goto	u11980
 13074                           
 13075                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13076  059F  0020               	movlb	0	; select bank0
 13077  05A0  0831               	movf	Exception_Main@i,w
 13078  05A1  3E01               	addlw	1
 13079  05A2  319C  2491  3185   	fcall	_getDimmerLights_Status
 13080  05A5  3A01               	xorlw	1
 13081  05A6  1D03               	skipz
 13082  05A7  2DB9               	goto	l10332
 13083                           
 13084                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13085  05A8  0021               	movlb	1	; select bank1
 13086  05A9  084A               	movf	_DimmerLights^(0+128),w
 13087  05AA  0086               	movwf	6
 13088  05AB  3001               	movlw	1	; select bank2/3
 13089  05AC  0087               	movwf	7
 13090  05AD  1401               	bsf	1,0
 13091                           
 13092                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13093  05AE  0A4A               	incf	_DimmerLights^(0+128),w
 13094  05AF  0086               	movwf	6
 13095  05B0  3001               	movlw	1	; select bank2/3
 13096  05B1  0087               	movwf	7
 13097  05B2  1001               	bcf	1,0
 13098                           
 13099                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13100  05B3  0020               	movlb	0	; select bank0
 13101  05B4  0831               	movf	Exception_Main@i,w
 13102  05B5  3E01               	addlw	1
 13103  05B6  3192  2295  3185   	fcall	_setDimmerLights_SwOff
 13104  05B9                     l10332:	
 13105  05B9  3001               	movlw	1
 13106  05BA  0020               	movlb	0	; select bank0
 13107  05BB  07B1               	addwf	Exception_Main@i,f
 13108  05BC  3000               	movlw	0
 13109  05BD  3DB2               	addwfc	Exception_Main@i+1,f
 13110  05BE  2D94               	goto	l10334
 13111  05BF                     u11980:	
 13112  05BF  0020               	movlb	0	; select bank0
 13113  05C0  0008               	return
 13114  05C1                     l10336:	
 13115                           ;Main_B1.c: 561: case 3:
 13116                           
 13117                           ;Main_B1.c: 556: }
 13118                           ;Main_B1.c: 557: }
 13119                           ;Main_B1.c: 560: break;
 13120                           
 13121                           
 13122                           ;Main_B1.c: 563: setBuz(5, 300);
 13123  05C1  302C               	movlw	44
 13124  05C2  0020               	movlb	0	; select bank0
 13125  05C3  00A9               	movwf	setBuz@time
 13126  05C4  3001               	movlw	1
 13127  05C5  00AA               	movwf	setBuz@time+1
 13128  05C6  3005               	movlw	5
 13129  05C7  3194  24F1  3185   	fcall	_setBuz
 13130                           
 13131                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13132  05CA  319B  238B  3185   	fcall	_getDimmerLights_Line
 13133  05CD  0020               	movlb	0	; select bank0
 13134  05CE  00AD               	movwf	??_Exception_Main
 13135  05CF  082D               	movf	??_Exception_Main,w
 13136  05D0  00B5               	movwf	Exception_Main@lights
 13137                           
 13138                           ;Main_B1.c: 565: if (lights == 0) {
 13139  05D1  08B5               	movf	Exception_Main@lights,f
 13140  05D2  1D03               	skipz
 13141  05D3  2E03               	goto	l10354
 13142                           
 13143                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13144  05D4  01B3               	clrf	Exception_Main@i_3594
 13145  05D5  01B4               	clrf	Exception_Main@i_3594+1
 13146  05D6                     l10352:	
 13147  05D6  0834               	movf	Exception_Main@i_3594+1,w
 13148  05D7  3A80               	xorlw	128
 13149  05D8  00AD               	movwf	??_Exception_Main
 13150  05D9  3080               	movlw	128
 13151  05DA  022D               	subwf	??_Exception_Main,w
 13152  05DB  1D03               	skipz
 13153  05DC  2DDF               	goto	u12015
 13154  05DD  082F               	movf	Exception_Main@count,w
 13155  05DE  0233               	subwf	Exception_Main@i_3594,w
 13156  05DF                     u12015:	
 13157  05DF  1803               	btfsc	3,0
 13158  05E0  2E01               	goto	u12010
 13159                           
 13160                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13161  05E1  0020               	movlb	0	; select bank0
 13162  05E2  0833               	movf	Exception_Main@i_3594,w
 13163  05E3  3E01               	addlw	1
 13164  05E4  319C  2491  3185   	fcall	_getDimmerLights_Status
 13165  05E7  3A01               	xorlw	1
 13166  05E8  1D03               	skipz
 13167  05E9  2DFB               	goto	l10350
 13168                           
 13169                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13170  05EA  0021               	movlb	1	; select bank1
 13171  05EB  084A               	movf	_DimmerLights^(0+128),w
 13172  05EC  0086               	movwf	6
 13173  05ED  3001               	movlw	1	; select bank2/3
 13174  05EE  0087               	movwf	7
 13175  05EF  1401               	bsf	1,0
 13176                           
 13177                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13178  05F0  0A4A               	incf	_DimmerLights^(0+128),w
 13179  05F1  0086               	movwf	6
 13180  05F2  3001               	movlw	1	; select bank2/3
 13181  05F3  0087               	movwf	7
 13182  05F4  1001               	bcf	1,0
 13183                           
 13184                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13185  05F5  0020               	movlb	0	; select bank0
 13186  05F6  0833               	movf	Exception_Main@i_3594,w
 13187  05F7  3E01               	addlw	1
 13188  05F8  3192  2295  3185   	fcall	_setDimmerLights_SwOff
 13189  05FB                     l10350:	
 13190  05FB  3001               	movlw	1
 13191  05FC  0020               	movlb	0	; select bank0
 13192  05FD  07B3               	addwf	Exception_Main@i_3594,f
 13193  05FE  3000               	movlw	0
 13194  05FF  3DB4               	addwfc	Exception_Main@i_3594+1,f
 13195  0600  2DD6               	goto	l10352
 13196  0601                     u12010:	
 13197  0601  0020               	movlb	0	; select bank0
 13198  0602  0008               	return
 13199  0603                     l10354:	
 13200                           ;Main_B1.c: 573: }
 13201                           ;Main_B1.c: 574: }
 13202                           ;Main_B1.c: 575: } else {
 13203                           
 13204                           
 13205                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13206  0603  0020               	movlb	0	; select bank0
 13207  0604  0835               	movf	Exception_Main@lights,w
 13208  0605  319C  2491  3185   	fcall	_getDimmerLights_Status
 13209  0608  3A01               	xorlw	1
 13210  0609  1903               	btfsc	3,2
 13211  060A  2E0D               	goto	l10356
 13212  060B  0020               	movlb	0	; select bank0
 13213  060C  0008               	return
 13214  060D                     l10356:	
 13215                           
 13216                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13217  060D  0021               	movlb	1	; select bank1
 13218  060E  084A               	movf	_DimmerLights^(0+128),w
 13219  060F  0086               	movwf	6
 13220  0610  3001               	movlw	1	; select bank2/3
 13221  0611  0087               	movwf	7
 13222  0612  1401               	bsf	1,0
 13223                           
 13224                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13225  0613  0A4A               	incf	_DimmerLights^(0+128),w
 13226  0614  0086               	movwf	6
 13227  0615  3001               	movlw	1	; select bank2/3
 13228  0616  0087               	movwf	7
 13229  0617  1001               	bcf	1,0
 13230                           
 13231                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13232  0618  0020               	movlb	0	; select bank0
 13233  0619  0835               	movf	Exception_Main@lights,w
 13234  061A  3192  2295         	fcall	_setDimmerLights_SwOff
 13235  061C  0020               	movlb	0	; select bank0
 13236  061D  0008               	return
 13237  061E                     l10362:	
 13238                           ;Main_B1.c: 586: }
 13239                           
 13240                           ;Main_B1.c: 582: }
 13241                           ;Main_B1.c: 583: }
 13242                           ;Main_B1.c: 585: break;
 13243                           
 13244  061E  0020               	movlb	0	; select bank0
 13245  061F  0830               	movf	Exception_Main@error,w
 13246                           
 13247                           ; Switch size 1, requested type "space"
 13248                           ; Number of cases is 2, Range of values is 2 to 3
 13249                           ; switch strategies available:
 13250                           ; Name         Instructions Cycles
 13251                           ; simple_byte            7     4 (average)
 13252                           ; direct_byte           13     9 (fixed)
 13253                           ; jumptable            263     9 (fixed)
 13254                           ;	Chosen strategy is simple_byte
 13255  0620  3A02               	xorlw	2	; case 2
 13256  0621  1903               	skipnz
 13257  0622  2D82               	goto	l10320
 13258  0623  3A01               	xorlw	1	; case 3
 13259  0624  1903               	skipnz
 13260  0625  2DC1               	goto	l10336
 13261  0626  2E28               	goto	l1503
 13262  0627  0008               	return
 13263  0628                     l1503:	
 13264  0628  0008               	return
 13265  0629                     __end_of_Exception_Main:	
 13266                           
 13267                           	psect	text85
 13268  1B8B                     __ptext85:	
 13269 ;; *************** function _getDimmerLights_Line *****************
 13270 ;; Defined at:
 13271 ;;		line 1050 in file "../src/Dimmer_B1.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;		None
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;  line            1    0[BANK0 ] unsigned char 
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      unsigned char 
 13278 ;; Registers used:
 13279 ;;		wreg, status,2
 13280 ;; Tracked objects:
 13281 ;;		On entry : 0/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;Total ram usage:        1 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    5
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_Exception_Main
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           
 13300                           ;psect for function _getDimmerLights_Line
 13301  1B8B                     _getDimmerLights_Line:	
 13302                           
 13303                           ;Dimmer_B1.c: 1051: char line = 0;
 13304                           
 13305                           ;incstack = 0
 13306                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13307  1B8B  0020               	movlb	0	; select bank0
 13308  1B8C  01A0               	clrf	getDimmerLights_Line@line
 13309                           
 13310                           ;Dimmer_B1.c: 1053: if (DimmerLights1.Line == 1) {
 13311  1B8D  0023               	movlb	3	; select bank3
 13312  1B8E  1CC8               	btfss	(_DimmerLights1^(0+384)+1),1
 13313  1B8F  2B93               	goto	l9676
 13314                           
 13315                           ;Dimmer_B1.c: 1054: line = 1;
 13316  1B90  0020               	movlb	0	; select bank0
 13317  1B91  01A0               	clrf	getDimmerLights_Line@line
 13318  1B92  0AA0               	incf	getDimmerLights_Line@line,f
 13319  1B93                     l9676:	
 13320                           
 13321                           ;Dimmer_B1.c: 1055: }
 13322                           ;Dimmer_B1.c: 1067: return line;
 13323  1B93  0020               	movlb	0	; select bank0
 13324  1B94  0820               	movf	getDimmerLights_Line@line,w
 13325  1B95  0008               	return
 13326  1B96                     __end_of_getDimmerLights_Line:	
 13327                           
 13328                           	psect	text86
 13329  1F0F                     __ptext86:	
 13330 ;; *************** function _DimmerLights_Main *****************
 13331 ;; Defined at:
 13332 ;;		line 779 in file "../src/Dimmer_B1.c"
 13333 ;; Parameters:    Size  Location     Type
 13334 ;;		None
 13335 ;; Auto vars:     Size  Location     Type
 13336 ;;		None
 13337 ;; Return value:  Size  Location     Type
 13338 ;;		None               void
 13339 ;; Registers used:
 13340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13341 ;; Tracked objects:
 13342 ;;		On entry : 0/0
 13343 ;;		On exit  : 0/0
 13344 ;;		Unchanged: 0/0
 13345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13350 ;;Total ram usage:        0 bytes
 13351 ;; Hardware stack levels used:    1
 13352 ;; Hardware stack levels required when called:   10
 13353 ;; This function calls:
 13354 ;;		_getLoad_OK
 13355 ;;		_getMain_All_Error_Status
 13356 ;;		_getMain_All_LightsStatus
 13357 ;;		_setDimmerLights_Main
 13358 ;; This function is called by:
 13359 ;;		_main
 13360 ;; This function uses a non-reentrant model
 13361 ;;
 13362                           
 13363                           
 13364                           ;psect for function _DimmerLights_Main
 13365  1F0F                     _DimmerLights_Main:	
 13366                           
 13367                           ;Dimmer_B1.c: 782: if (Dimmer.LoadGO == 1) {
 13368                           
 13369                           ;incstack = 0
 13370                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13371  1F0F  0022               	movlb	2	; select bank2
 13372  1F10  1CAC               	btfss	_Dimmer^(0+256),1
 13373  1F11  2F27               	goto	l10036
 13374                           
 13375                           ;Dimmer_B1.c: 783: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13376  1F12  319B  234E  319F   	fcall	_getLoad_OK
 13377  1F15  3A01               	xorlw	1
 13378  1F16  1903               	skipnz
 13379  1F17  2F25               	goto	l761
 13380  1F18  3000               	movlw	0
 13381  1F19  3191  218C  319F   	fcall	_getMain_All_Error_Status
 13382  1F1C  3800               	iorlw	0
 13383  1F1D  1D03               	skipz
 13384  1F1E  2F25               	goto	l761
 13385  1F1F  319B  2381  319F   	fcall	_getMain_All_LightsStatus
 13386  1F22  3800               	iorlw	0
 13387  1F23  1D03               	skipz
 13388  1F24  2F27               	goto	l10036
 13389  1F25                     l761:	
 13390                           
 13391                           ;Dimmer_B1.c: 784: Dimmer.LoadGO = 0;
 13392  1F25  0022               	movlb	2	; select bank2
 13393  1F26  10AC               	bcf	_Dimmer^(0+256),1
 13394  1F27                     l10036:	
 13395                           
 13396                           ;Dimmer_B1.c: 785: }
 13397                           ;Dimmer_B1.c: 786: }
 13398                           ;Dimmer_B1.c: 790: setDimmerLights_Main(1);
 13399  1F27  3001               	movlw	1
 13400  1F28  3197  2795         	fcall	_setDimmerLights_Main
 13401  1F2A  0008               	return
 13402  1F2B                     __end_of_DimmerLights_Main:	
 13403                           
 13404                           	psect	text87
 13405  1795                     __ptext87:	
 13406 ;; *************** function _setDimmerLights_Main *****************
 13407 ;; Defined at:
 13408 ;;		line 808 in file "../src/Dimmer_B1.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  lights          1    wreg     unsigned char 
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;  lights          1    1[BANK1 ] unsigned char 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;		None               void
 13415 ;; Registers used:
 13416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;Total ram usage:        1 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    9
 13429 ;; This function calls:
 13430 ;;		_DimmerLights_SelectPointer
 13431 ;;		_getDimmerLights_Allow_Condition
 13432 ;;		_getMain_All_LightsStatus
 13433 ;;		_setDimmerLights_Dimming
 13434 ;;		_setDimmerLights_OnOff
 13435 ;; This function is called by:
 13436 ;;		_DimmerLights_Main
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           
 13441                           ;psect for function _setDimmerLights_Main
 13442  1795                     _setDimmerLights_Main:	
 13443                           
 13444                           ;incstack = 0
 13445                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13446                           ;setDimmerLights_Main@lights stored from wreg
 13447  1795  0021               	movlb	1	; select bank1
 13448  1796  00DC               	movwf	setDimmerLights_Main@lights^(0+128)
 13449                           
 13450                           ;Dimmer_B1.c: 810: DimmerLights_SelectPointer(lights);
 13451  1797  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13452  1798  319B  23C3  3197   	fcall	_DimmerLights_SelectPointer
 13453                           
 13454                           ;Dimmer_B1.c: 811: if (DimmerLights->Trigger == 1) {
 13455  179B  0021               	movlb	1	; select bank1
 13456  179C  084A               	movf	_DimmerLights^(0+128),w
 13457  179D  0086               	movwf	6
 13458  179E  3001               	movlw	1	; select bank2/3
 13459  179F  0087               	movwf	7
 13460  17A0  1C81               	btfss	1,1
 13461  17A1  2FC4               	goto	l9654
 13462                           
 13463                           ;Dimmer_B1.c: 812: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13464  17A2  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13465  17A3  319E  2618  3197   	fcall	_getDimmerLights_Allow_Condition
 13466  17A6  3800               	iorlw	0
 13467  17A7  1D03               	skipz
 13468  17A8  0008               	return
 13469                           
 13470                           ;Dimmer_B1.c: 813: DimmerLights->Trigger = 0;
 13471  17A9  0021               	movlb	1	; select bank1
 13472  17AA  084A               	movf	_DimmerLights^(0+128),w
 13473  17AB  0086               	movwf	6
 13474  17AC  3001               	movlw	1	; select bank2/3
 13475  17AD  0087               	movwf	7
 13476  17AE  1081               	bcf	1,1
 13477                           
 13478                           ;Dimmer_B1.c: 814: if (DimmerLights->Switch == 1) {
 13479  17AF  084A               	movf	_DimmerLights^(0+128),w
 13480  17B0  0086               	movwf	6
 13481  17B1  3001               	movlw	1	; select bank2/3
 13482  17B2  0087               	movwf	7
 13483  17B3  1D01               	btfss	1,2
 13484  17B4  2FBD               	goto	l9652
 13485                           
 13486                           ;Dimmer_B1.c: 815: setDimmerLights_OnOff(lights, 1);
 13487  17B5  0020               	movlb	0	; select bank0
 13488  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13489  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13490  17B8  0021               	movlb	1	; select bank1
 13491  17B9  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13492  17BA  3186  26F3         	fcall	_setDimmerLights_OnOff
 13493                           
 13494                           ;Dimmer_B1.c: 816: } else {
 13495  17BC  0008               	return
 13496  17BD                     l9652:	
 13497                           
 13498                           ;Dimmer_B1.c: 817: setDimmerLights_OnOff(lights, 0);
 13499  17BD  0020               	movlb	0	; select bank0
 13500  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13501  17BF  0021               	movlb	1	; select bank1
 13502  17C0  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13503  17C1  3186  26F3         	fcall	_setDimmerLights_OnOff
 13504                           
 13505                           ;Dimmer_B1.c: 818: }
 13506                           ;Dimmer_B1.c: 819: }
 13507                           ;Dimmer_B1.c: 820: } else {
 13508  17C3  0008               	return
 13509  17C4                     l9654:	
 13510                           
 13511                           ;Dimmer_B1.c: 821: if (getMain_All_LightsStatus() == 1) {
 13512  17C4  319B  2381  3197   	fcall	_getMain_All_LightsStatus
 13513  17C7  3A01               	xorlw	1
 13514  17C8  1D03               	skipz
 13515  17C9  2FF3               	goto	l9666
 13516                           
 13517                           ;Dimmer_B1.c: 822: if (DimmerLights->DimmingTrigger == 1) {
 13518  17CA  0021               	movlb	1	; select bank1
 13519  17CB  084A               	movf	_DimmerLights^(0+128),w
 13520  17CC  0086               	movwf	6
 13521  17CD  3001               	movlw	1	; select bank2/3
 13522  17CE  0087               	movwf	7
 13523  17CF  1E01               	btfss	1,4
 13524  17D0  0008               	return
 13525                           
 13526                           ;Dimmer_B1.c: 823: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13527  17D1  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13528  17D2  319E  2618  3197   	fcall	_getDimmerLights_Allow_Condition
 13529  17D5  3800               	iorlw	0
 13530  17D6  1D03               	skipz
 13531  17D7  0008               	return
 13532                           
 13533                           ;Dimmer_B1.c: 824: DimmerLights->DimmingTrigger = 0;
 13534  17D8  0021               	movlb	1	; select bank1
 13535  17D9  084A               	movf	_DimmerLights^(0+128),w
 13536  17DA  0086               	movwf	6
 13537  17DB  3001               	movlw	1	; select bank2/3
 13538  17DC  0087               	movwf	7
 13539  17DD  1201               	bcf	1,4
 13540                           
 13541                           ;Dimmer_B1.c: 825: if (DimmerLights->DimmingSwitch == 1) {
 13542  17DE  084A               	movf	_DimmerLights^(0+128),w
 13543  17DF  0086               	movwf	6
 13544  17E0  3001               	movlw	1	; select bank2/3
 13545  17E1  0087               	movwf	7
 13546  17E2  1E81               	btfss	1,5
 13547  17E3  2FEC               	goto	l9664
 13548                           
 13549                           ;Dimmer_B1.c: 826: setDimmerLights_Dimming(lights, 1);
 13550  17E4  0020               	movlb	0	; select bank0
 13551  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 13552  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 13553  17E7  0021               	movlb	1	; select bank1
 13554  17E8  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13555  17E9  3194  249B         	fcall	_setDimmerLights_Dimming
 13556                           
 13557                           ;Dimmer_B1.c: 827: } else {
 13558  17EB  0008               	return
 13559  17EC                     l9664:	
 13560                           
 13561                           ;Dimmer_B1.c: 828: setDimmerLights_Dimming(lights, 0);
 13562  17EC  0020               	movlb	0	; select bank0
 13563  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 13564  17EE  0021               	movlb	1	; select bank1
 13565  17EF  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13566  17F0  3194  249B         	fcall	_setDimmerLights_Dimming
 13567                           
 13568                           ;Dimmer_B1.c: 829: }
 13569                           ;Dimmer_B1.c: 830: }
 13570                           ;Dimmer_B1.c: 831: }
 13571                           ;Dimmer_B1.c: 832: } else {
 13572  17F2  0008               	return
 13573  17F3                     l9666:	
 13574                           
 13575                           ;Dimmer_B1.c: 833: if (DimmerLights->DimmingTrigger == 1) {
 13576  17F3  0021               	movlb	1	; select bank1
 13577  17F4  084A               	movf	_DimmerLights^(0+128),w
 13578  17F5  0086               	movwf	6
 13579  17F6  3001               	movlw	1	; select bank2/3
 13580  17F7  0087               	movwf	7
 13581  17F8  1E01               	btfss	1,4
 13582  17F9  0008               	return
 13583                           
 13584                           ;Dimmer_B1.c: 834: DimmerLights->DimmingTrigger = 0;
 13585  17FA  084A               	movf	_DimmerLights^(0+128),w
 13586  17FB  0086               	movwf	6
 13587  17FC  3001               	movlw	1	; select bank2/3
 13588  17FD  0087               	movwf	7
 13589  17FE  1201               	bcf	1,4
 13590  17FF  0008               	return
 13591  1800                     __end_of_setDimmerLights_Main:	
 13592                           
 13593                           	psect	text88
 13594  06F3                     __ptext88:	
 13595 ;; *************** function _setDimmerLights_OnOff *****************
 13596 ;; Defined at:
 13597 ;;		line 842 in file "../src/Dimmer_B1.c"
 13598 ;; Parameters:    Size  Location     Type
 13599 ;;  lights          1    wreg     unsigned char 
 13600 ;;  command         1   77[BANK0 ] unsigned char 
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  lights          1    0[BANK1 ] unsigned char 
 13603 ;; Return value:  Size  Location     Type
 13604 ;;		None               void
 13605 ;; Registers used:
 13606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13612 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;Total ram usage:        4 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    8
 13619 ;; This function calls:
 13620 ;;		_getCmd_Status
 13621 ;;		_getDelayOff_GO
 13622 ;;		_getDimmerLights_PercentToValue
 13623 ;;		_getMain_All_LightsStatus
 13624 ;;		_setCmd_Status
 13625 ;;		_setDelayOff_GO
 13626 ;;		_setDimmerIntr_ControlStatus
 13627 ;;		_setDimmerIntr_DimmingValue
 13628 ;;		_setDimmerIntr_Dimming_RF
 13629 ;;		_setDimmerIntr_MaxmumValue
 13630 ;;		_setDimmerLights_Line
 13631 ;;		_setLED
 13632 ;;		_setProductData
 13633 ;;		_setRF_DimmerLights
 13634 ;;		_setTxData
 13635 ;; This function is called by:
 13636 ;;		_setDimmerLights_Main
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           
 13641                           ;psect for function _setDimmerLights_OnOff
 13642  06F3                     _setDimmerLights_OnOff:	
 13643                           
 13644                           ;incstack = 0
 13645                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13646                           ;setDimmerLights_OnOff@lights stored from wreg
 13647  06F3  0021               	movlb	1	; select bank1
 13648  06F4  00DB               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13649                           
 13650                           ;Dimmer_B1.c: 844: if (command == 1) {
 13651  06F5  0020               	movlb	0	; select bank0
 13652  06F6  086D               	movf	setDimmerLights_OnOff@command,w
 13653  06F7  3A01               	xorlw	1
 13654  06F8  1D03               	skipz
 13655  06F9  2F58               	goto	l9426
 13656                           
 13657                           ;Dimmer_B1.c: 845: setDimmerIntr_ControlStatus(lights, 1);
 13658  06FA  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13659  06FB  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13660  06FC  0021               	movlb	1	; select bank1
 13661  06FD  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13662  06FE  319E  2644  3186   	fcall	_setDimmerIntr_ControlStatus
 13663                           
 13664                           ;Dimmer_B1.c: 848: Dimmer.Load_Status = 1;
 13665  0701  0022               	movlb	2	; select bank2
 13666  0702  152C               	bsf	_Dimmer^(0+256),2
 13667                           
 13668                           ;Dimmer_B1.c: 849: setDimmerLights_Line(lights);
 13669  0703  0021               	movlb	1	; select bank1
 13670  0704  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13671  0705  319C  24F7  3186   	fcall	_setDimmerLights_Line
 13672                           
 13673                           ;Dimmer_B1.c: 855: setLED(lights, 0);
 13674  0708  0020               	movlb	0	; select bank0
 13675  0709  01A2               	clrf	setLED@command
 13676  070A  0021               	movlb	1	; select bank1
 13677  070B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13678  070C  3192  22CE  3186   	fcall	_setLED
 13679                           
 13680                           ;Dimmer_B1.c: 856: ;;
 13681                           ;Dimmer_B1.c: 876: if (DimmerLights->DimmingRun == 1) {
 13682  070F  0021               	movlb	1	; select bank1
 13683  0710  0A4A               	incf	_DimmerLights^(0+128),w
 13684  0711  0086               	movwf	6
 13685  0712  3001               	movlw	1	; select bank2/3
 13686  0713  0087               	movwf	7
 13687  0714  1F01               	btfss	1,6
 13688  0715  2F3A               	goto	l9418
 13689                           
 13690                           ;Dimmer_B1.c: 877: DimmerLights->DimmingRun = 0;
 13691  0716  0A4A               	incf	_DimmerLights^(0+128),w
 13692  0717  0086               	movwf	6
 13693  0718  3001               	movlw	1	; select bank2/3
 13694  0719  0087               	movwf	7
 13695  071A  1301               	bcf	1,6
 13696                           
 13697                           ;Dimmer_B1.c: 878: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13698  071B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13699  071C  3E14               	addlw	20
 13700  071D  0763               	addwf	_product^(0+128),w
 13701  071E  0020               	movlb	0	; select bank0
 13702  071F  00EE               	movwf	??_setDimmerLights_OnOff
 13703  0720  086E               	movf	??_setDimmerLights_OnOff,w
 13704  0721  0086               	movwf	6
 13705  0722  3002               	movlw	2	; select bank4/5
 13706  0723  0087               	movwf	7
 13707  0724  0801               	movf	1,w
 13708  0725  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13709  0728  0020               	movlb	0	; select bank0
 13710  0729  00EF               	movwf	??_setDimmerLights_OnOff+1
 13711  072A  086F               	movf	??_setDimmerLights_OnOff+1,w
 13712  072B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13713  072C  0021               	movlb	1	; select bank1
 13714  072D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13715  072E  319B  23DB  3186   	fcall	_setDimmerIntr_MaxmumValue
 13716                           
 13717                           ;Dimmer_B1.c: 879: setDimmerIntr_Dimming_RF(lights, 1);
 13718  0731  0020               	movlb	0	; select bank0
 13719  0732  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13720  0733  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13721  0734  0021               	movlb	1	; select bank1
 13722  0735  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13723  0736  319E  265C  3186   	fcall	_setDimmerIntr_Dimming_RF
 13724                           
 13725                           ;Dimmer_B1.c: 880: } else {
 13726  0739  2F51               	goto	l9420
 13727  073A                     l9418:	
 13728                           
 13729                           ;Dimmer_B1.c: 881: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13730  073A  0021               	movlb	1	; select bank1
 13731  073B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13732  073C  3E14               	addlw	20
 13733  073D  0763               	addwf	_product^(0+128),w
 13734  073E  0020               	movlb	0	; select bank0
 13735  073F  00EE               	movwf	??_setDimmerLights_OnOff
 13736  0740  086E               	movf	??_setDimmerLights_OnOff,w
 13737  0741  0086               	movwf	6
 13738  0742  3002               	movlw	2	; select bank4/5
 13739  0743  0087               	movwf	7
 13740  0744  0801               	movf	1,w
 13741  0745  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13742  0748  0020               	movlb	0	; select bank0
 13743  0749  00EF               	movwf	??_setDimmerLights_OnOff+1
 13744  074A  086F               	movf	??_setDimmerLights_OnOff+1,w
 13745  074B  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13746  074C  0021               	movlb	1	; select bank1
 13747  074D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13748  074E  319B  23E7  3186   	fcall	_setDimmerIntr_DimmingValue
 13749  0751                     l9420:	
 13750                           
 13751                           ;Dimmer_B1.c: 884: }
 13752                           ;Dimmer_B1.c: 886: if (lights == 1) {
 13753  0751  0021               	movlb	1	; select bank1
 13754  0752  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13755  0753  3A01               	xorlw	1
 13756  0754  1D03               	skipz
 13757  0755  2F87               	goto	l9440
 13758                           
 13759                           ;Dimmer_B1.c: 888: DimmerIntr1.TuneGO = 1;
 13760  0756  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 13761                           
 13762                           ;Dimmer_B1.c: 894: }
 13763                           ;Dimmer_B1.c: 900: } else if (command == 0) {
 13764                           
 13765                           ;Dimmer_B1.c: 890: } else if (lights == 2) {
 13766  0757  2F87               	goto	l9440
 13767  0758                     l9426:	
 13768  0758  0020               	movlb	0	; select bank0
 13769  0759  08ED               	movf	setDimmerLights_OnOff@command,f
 13770  075A  1D03               	skipz
 13771  075B  2F87               	goto	l9440
 13772                           
 13773                           ;Dimmer_B1.c: 901: setDimmerIntr_ControlStatus(lights, 0);
 13774  075C  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13775  075D  0021               	movlb	1	; select bank1
 13776  075E  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13777  075F  319E  2644  3186   	fcall	_setDimmerIntr_ControlStatus
 13778                           
 13779                           ;Dimmer_B1.c: 903: Dimmer.Load_Status = 0;
 13780  0762  0022               	movlb	2	; select bank2
 13781  0763  112C               	bcf	_Dimmer^(0+256),2
 13782                           
 13783                           ;Dimmer_B1.c: 904: setDimmerLights_Line(0);
 13784  0764  3000               	movlw	0
 13785  0765  319C  24F7  3186   	fcall	_setDimmerLights_Line
 13786                           
 13787                           ;Dimmer_B1.c: 908: if (getDelayOff_GO(lights) == 1) {
 13788  0768  0021               	movlb	1	; select bank1
 13789  0769  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13790  076A  319C  24A2  3186   	fcall	_getDelayOff_GO
 13791  076D  3A01               	xorlw	1
 13792  076E  1D03               	skipz
 13793  076F  2F78               	goto	l788
 13794                           
 13795                           ;Dimmer_B1.c: 909: setDelayOff_GO(lights, 0, 0);
 13796  0770  0020               	movlb	0	; select bank0
 13797  0771  01E5               	clrf	setDelayOff_GO@command
 13798  0772  01E6               	clrf	setDelayOff_GO@value
 13799  0773  0021               	movlb	1	; select bank1
 13800  0774  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13801  0775  318C  24AB  3186   	fcall	_setDelayOff_GO
 13802  0778                     l788:	
 13803                           
 13804                           ;Dimmer_B1.c: 910: }
 13805                           ;Dimmer_B1.c: 915: setLED(lights, 1);
 13806  0778  0020               	movlb	0	; select bank0
 13807  0779  01A2               	clrf	setLED@command
 13808  077A  0AA2               	incf	setLED@command,f
 13809  077B  0021               	movlb	1	; select bank1
 13810  077C  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13811  077D  3192  22CE  3186   	fcall	_setLED
 13812                           
 13813                           ;Dimmer_B1.c: 916: ;;
 13814                           ;Dimmer_B1.c: 920: if (lights == 1) {
 13815  0780  0021               	movlb	1	; select bank1
 13816  0781  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13817  0782  3A01               	xorlw	1
 13818  0783  1D03               	skipz
 13819  0784  2F87               	goto	l9440
 13820                           
 13821                           ;Dimmer_B1.c: 921: RB1 = 0;
 13822  0785  0020               	movlb	0	; select bank0
 13823  0786  108D               	bcf	13,1	;volatile
 13824  0787                     l9440:	
 13825                           
 13826                           ;Dimmer_B1.c: 923: }
 13827                           ;Dimmer_B1.c: 934: }
 13828                           ;Dimmer_B1.c: 937: setRF_DimmerLights(lights, command);
 13829  0787  0020               	movlb	0	; select bank0
 13830  0788  086D               	movf	setDimmerLights_OnOff@command,w
 13831  0789  00EE               	movwf	??_setDimmerLights_OnOff
 13832  078A  086E               	movf	??_setDimmerLights_OnOff,w
 13833  078B  00E5               	movwf	setRF_DimmerLights@on
 13834  078C  0021               	movlb	1	; select bank1
 13835  078D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13836  078E  3197  2730  3186   	fcall	_setRF_DimmerLights
 13837                           
 13838                           ;Dimmer_B1.c: 939: if (getCmd_Status(1) == 1) {
 13839  0791  3001               	movlw	1
 13840  0792  319D  2509  3186   	fcall	_getCmd_Status
 13841  0795  3A01               	xorlw	1
 13842  0796  1D03               	skipz
 13843  0797  2FB3               	goto	l9454
 13844                           
 13845                           ;Dimmer_B1.c: 940: if (getMain_All_LightsStatus() == 0) {
 13846  0798  319B  2381  3186   	fcall	_getMain_All_LightsStatus
 13847  079B  3800               	iorlw	0
 13848  079C  1D03               	skipz
 13849  079D  0008               	return
 13850                           
 13851                           ;Dimmer_B1.c: 941: setCmd_Status(1, 0);
 13852  079E  0020               	movlb	0	; select bank0
 13853  079F  01A0               	clrf	setCmd_Status@cmd
 13854  07A0  3001               	movlw	1
 13855  07A1  319E  2674  3186   	fcall	_setCmd_Status
 13856                           
 13857                           ;Dimmer_B1.c: 942: setProductData(11, 0);
 13858  07A4  0020               	movlb	0	; select bank0
 13859  07A5  01E2               	clrf	setProductData@value
 13860  07A6  300B               	movlw	11
 13861  07A7  319B  23CF  3186   	fcall	_setProductData
 13862                           
 13863                           ;Dimmer_B1.c: 943: setProductData(17, 0);
 13864  07AA  0020               	movlb	0	; select bank0
 13865  07AB  01E2               	clrf	setProductData@value
 13866  07AC  3011               	movlw	17
 13867  07AD  319B  23CF  3186   	fcall	_setProductData
 13868                           
 13869                           ;Dimmer_B1.c: 944: setTxData();
 13870  07B0  318F  2745         	fcall	_setTxData
 13871                           
 13872                           ;Dimmer_B1.c: 945: }
 13873                           ;Dimmer_B1.c: 946: } else {
 13874  07B2  0008               	return
 13875  07B3                     l9454:	
 13876                           
 13877                           ;Dimmer_B1.c: 947: setTxData();
 13878  07B3  318F  2745         	fcall	_setTxData
 13879  07B5  0008               	return
 13880  07B6                     __end_of_setDimmerLights_OnOff:	
 13881                           
 13882                           	psect	text89
 13883  12CE                     __ptext89:	
 13884 ;; *************** function _setLED *****************
 13885 ;; Defined at:
 13886 ;;		line 81 in file "../src/LED_B1.c"
 13887 ;; Parameters:    Size  Location     Type
 13888 ;;  led             1    wreg     unsigned char 
 13889 ;;  command         1    2[BANK0 ] unsigned char 
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;  led             1    3[BANK0 ] unsigned char 
 13892 ;; Return value:  Size  Location     Type
 13893 ;;		None               void
 13894 ;; Registers used:
 13895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13896 ;; Tracked objects:
 13897 ;;		On entry : 0/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13901 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;Total ram usage:        2 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    6
 13908 ;; This function calls:
 13909 ;;		_LedPointSelect
 13910 ;; This function is called by:
 13911 ;;		_setDimmerLights_OnOff
 13912 ;;		_setLED_Initialization
 13913 ;;		_Exception_Main
 13914 ;;		_setSw_Initialization
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           
 13919                           ;psect for function _setLED
 13920  12CE                     _setLED:	
 13921                           
 13922                           ;incstack = 0
 13923                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13924                           ;setLED@led stored from wreg
 13925  12CE  0020               	movlb	0	; select bank0
 13926  12CF  00A3               	movwf	setLED@led
 13927                           
 13928                           ;LED_B1.c: 82: LedPointSelect(led);
 13929  12D0  0823               	movf	setLED@led,w
 13930  12D1  319B  23F3  3192   	fcall	_LedPointSelect
 13931                           
 13932                           ;LED_B1.c: 83: if (command == 0) {
 13933  12D4  0020               	movlb	0	; select bank0
 13934  12D5  08A2               	movf	setLED@command,f
 13935  12D6  1D03               	skipz
 13936  12D7  2ADD               	goto	l9196
 13937                           
 13938                           ;LED_B1.c: 112: if (led == 99) {
 13939  12D8  0823               	movf	setLED@led,w
 13940  12D9  3A63               	xorlw	99
 13941  12DA  1D03               	skipz
 13942  12DB  2ADD               	goto	l9196
 13943                           
 13944                           ;LED_B1.c: 116: RB5 = 1;
 13945  12DC  168D               	bsf	13,5	;volatile
 13946  12DD                     l9196:	
 13947                           
 13948                           ;LED_B1.c: 118: }
 13949                           ;LED_B1.c: 120: }
 13950                           ;LED_B1.c: 121: if (command == 1) {
 13951  12DD  0822               	movf	setLED@command,w
 13952  12DE  3A01               	xorlw	1
 13953  12DF  1D03               	skipz
 13954  12E0  2AE6               	goto	l9202
 13955                           
 13956                           ;LED_B1.c: 150: if (led == 99) {
 13957  12E1  0823               	movf	setLED@led,w
 13958  12E2  3A63               	xorlw	99
 13959  12E3  1D03               	skipz
 13960  12E4  2AE6               	goto	l9202
 13961                           
 13962                           ;LED_B1.c: 154: RB5 = 0;
 13963  12E5  128D               	bcf	13,5	;volatile
 13964  12E6                     l9202:	
 13965                           
 13966                           ;LED_B1.c: 156: }
 13967                           ;LED_B1.c: 158: }
 13968                           ;LED_B1.c: 159: if (command == 10) {
 13969  12E6  0822               	movf	setLED@command,w
 13970  12E7  3A0A               	xorlw	10
 13971  12E8  1D03               	skipz
 13972  12E9  2AFC               	goto	l9210
 13973                           
 13974                           ;LED_B1.c: 160: LED->GO = 0;
 13975  12EA  0021               	movlb	1	; select bank1
 13976  12EB  084B               	movf	_LED^(0+128),w
 13977  12EC  0086               	movwf	6
 13978  12ED  3001               	movlw	1	; select bank2/3
 13979  12EE  0087               	movwf	7
 13980  12EF  1081               	bcf	1,1
 13981                           
 13982                           ;LED_B1.c: 161: LED->Time = 0;
 13983  12F0  0A4B               	incf	_LED^(0+128),w
 13984  12F1  0086               	movwf	6
 13985  12F2  3001               	movlw	1	; select bank2/3
 13986  12F3  0087               	movwf	7
 13987  12F4  3000               	movlw	0
 13988  12F5  3FC0               	movwi [0]fsr1
 13989  12F6  3FC1               	movwi [1]fsr1
 13990                           
 13991                           ;LED_B1.c: 190: if (led == 99) {
 13992  12F7  0020               	movlb	0	; select bank0
 13993  12F8  0823               	movf	setLED@led,w
 13994  12F9  3A63               	xorlw	99
 13995  12FA  1903               	btfsc	3,2
 13996                           
 13997                           ;LED_B1.c: 194: RB5 = 1;
 13998  12FB  168D               	bsf	13,5	;volatile
 13999  12FC                     l9210:	
 14000                           
 14001                           ;LED_B1.c: 196: }
 14002                           ;LED_B1.c: 198: }
 14003                           ;LED_B1.c: 199: if (command == 11) {
 14004  12FC  0822               	movf	setLED@command,w
 14005  12FD  3A0B               	xorlw	11
 14006  12FE  1D03               	skipz
 14007  12FF  0008               	return
 14008                           
 14009                           ;LED_B1.c: 200: LED->GO = 1;
 14010  1300  0021               	movlb	1	; select bank1
 14011  1301  084B               	movf	_LED^(0+128),w
 14012  1302  0086               	movwf	6
 14013  1303  3001               	movlw	1	; select bank2/3
 14014  1304  0087               	movwf	7
 14015  1305  1481               	bsf	1,1
 14016  1306  0008               	return
 14017  1307                     __end_of_setLED:	
 14018                           
 14019                           	psect	text90
 14020  1BF3                     __ptext90:	
 14021 ;; *************** function _LedPointSelect *****************
 14022 ;; Defined at:
 14023 ;;		line 7 in file "../src/LED_B1.c"
 14024 ;; Parameters:    Size  Location     Type
 14025 ;;  led             1    wreg     unsigned char 
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;  led             1    1[BANK0 ] unsigned char 
 14028 ;; Return value:  Size  Location     Type
 14029 ;;		None               void
 14030 ;; Registers used:
 14031 ;;		wreg
 14032 ;; Tracked objects:
 14033 ;;		On entry : 0/0
 14034 ;;		On exit  : 0/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        2 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; Hardware stack levels required when called:    5
 14044 ;; This function calls:
 14045 ;;		Nothing
 14046 ;; This function is called by:
 14047 ;;		_setLED_Initialization
 14048 ;;		_setLED
 14049 ;;		_setLED_Main
 14050 ;; This function uses a non-reentrant model
 14051 ;;
 14052                           
 14053                           
 14054                           ;psect for function _LedPointSelect
 14055  1BF3                     _LedPointSelect:	
 14056                           
 14057                           ;incstack = 0
 14058                           ; Regs used in _LedPointSelect: [wreg]
 14059                           ;LedPointSelect@led stored from wreg
 14060  1BF3  0020               	movlb	0	; select bank0
 14061  1BF4  00A1               	movwf	LedPointSelect@led
 14062                           
 14063                           ;LED_B1.c: 24: if (led == 99) {
 14064  1BF5  0821               	movf	LedPointSelect@led,w
 14065  1BF6  3A63               	xorlw	99
 14066  1BF7  1D03               	skipz
 14067  1BF8  0008               	return
 14068                           
 14069                           ;LED_B1.c: 25: LED = &VarErrLED;
 14070  1BF9  306B               	movlw	_VarErrLED& (0+255)
 14071  1BFA  00A0               	movwf	??_LedPointSelect
 14072  1BFB  0820               	movf	??_LedPointSelect,w
 14073  1BFC  0021               	movlb	1	; select bank1
 14074  1BFD  00CB               	movwf	_LED^(0+128)
 14075  1BFE  0008               	return
 14076  1BFF                     __end_of_LedPointSelect:	
 14077                           
 14078                           	psect	text91
 14079  1E5C                     __ptext91:	
 14080 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14081 ;; Defined at:
 14082 ;;		line 227 in file "../src/Dimmer_B1.c"
 14083 ;; Parameters:    Size  Location     Type
 14084 ;;  lights          1    wreg     unsigned char 
 14085 ;;  command         1    0[BANK0 ] unsigned char 
 14086 ;; Auto vars:     Size  Location     Type
 14087 ;;  lights          1    2[BANK0 ] unsigned char 
 14088 ;; Return value:  Size  Location     Type
 14089 ;;		None               void
 14090 ;; Registers used:
 14091 ;;		wreg, status,2, status,0
 14092 ;; Tracked objects:
 14093 ;;		On entry : 0/0
 14094 ;;		On exit  : 0/0
 14095 ;;		Unchanged: 0/0
 14096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14097 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14100 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;Total ram usage:        3 bytes
 14102 ;; Hardware stack levels used:    1
 14103 ;; Hardware stack levels required when called:    5
 14104 ;; This function calls:
 14105 ;;		Nothing
 14106 ;; This function is called by:
 14107 ;;		_setDimmerLights_OnOff
 14108 ;;		_setRFSW_AdjControl
 14109 ;; This function uses a non-reentrant model
 14110 ;;
 14111                           
 14112                           
 14113                           ;psect for function _setDimmerIntr_Dimming_RF
 14114  1E5C                     _setDimmerIntr_Dimming_RF:	
 14115                           
 14116                           ;incstack = 0
 14117                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14118                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14119  1E5C  0020               	movlb	0	; select bank0
 14120  1E5D  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14121                           
 14122                           ;Dimmer_B1.c: 229: if (lights == 1) {
 14123  1E5E  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14124  1E5F  3A01               	xorlw	1
 14125  1E60  1D03               	skipz
 14126  1E61  0008               	return
 14127                           
 14128                           ;Dimmer_B1.c: 230: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14129  1E62  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14130  1E63  3A01               	xorlw	1
 14131  1E64  3000               	movlw	0
 14132  1E65  1903               	skipnz
 14133  1E66  3001               	movlw	1
 14134  1E67  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14135  1E68  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14136  1E69  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14137  1E6A  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14138  1E6B  0021               	movlb	1	; select bank1
 14139  1E6C  083B               	movf	_DimmerIntr1^(0+128),w
 14140  1E6D  0020               	movlb	0	; select bank0
 14141  1E6E  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14142  1E6F  39BF               	andlw	-65
 14143  1E70  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14144  1E71  0021               	movlb	1	; select bank1
 14145  1E72  00BB               	movwf	_DimmerIntr1^(0+128)
 14146  1E73  0008               	return
 14147  1E74                     __end_of_setDimmerIntr_Dimming_RF:	
 14148                           
 14149                           	psect	text92
 14150  1BE7                     __ptext92:	
 14151 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14152 ;; Defined at:
 14153 ;;		line 92 in file "../src/Dimmer_B1.c"
 14154 ;; Parameters:    Size  Location     Type
 14155 ;;  lights          1    wreg     unsigned char 
 14156 ;;  value           1   66[BANK0 ] unsigned char 
 14157 ;; Auto vars:     Size  Location     Type
 14158 ;;  lights          1   68[BANK0 ] unsigned char 
 14159 ;; Return value:  Size  Location     Type
 14160 ;;		None               void
 14161 ;; Registers used:
 14162 ;;		wreg
 14163 ;; Tracked objects:
 14164 ;;		On entry : 0/0
 14165 ;;		On exit  : 0/0
 14166 ;;		Unchanged: 0/0
 14167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14168 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;Total ram usage:        3 bytes
 14173 ;; Hardware stack levels used:    1
 14174 ;; Hardware stack levels required when called:    5
 14175 ;; This function calls:
 14176 ;;		Nothing
 14177 ;; This function is called by:
 14178 ;;		_setDimmerLights_OnOff
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           
 14183                           ;psect for function _setDimmerIntr_DimmingValue
 14184  1BE7                     _setDimmerIntr_DimmingValue:	
 14185                           
 14186                           ;incstack = 0
 14187                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14188                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14189  1BE7  0020               	movlb	0	; select bank0
 14190  1BE8  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14191                           
 14192                           ;Dimmer_B1.c: 94: if (lights == 1) {
 14193  1BE9  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14194  1BEA  3A01               	xorlw	1
 14195  1BEB  1D03               	skipz
 14196  1BEC  0008               	return
 14197                           
 14198                           ;Dimmer_B1.c: 95: DimmerIntr1.DimmingValue = value;
 14199  1BED  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14200  1BEE  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14201  1BEF  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14202  1BF0  0021               	movlb	1	; select bank1
 14203  1BF1  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14204  1BF2  0008               	return
 14205  1BF3                     __end_of_setDimmerIntr_DimmingValue:	
 14206                           
 14207                           	psect	text93
 14208  1E44                     __ptext93:	
 14209 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14210 ;; Defined at:
 14211 ;;		line 74 in file "../src/Dimmer_B1.c"
 14212 ;; Parameters:    Size  Location     Type
 14213 ;;  lights          1    wreg     unsigned char 
 14214 ;;  command         1    0[BANK0 ] unsigned char 
 14215 ;; Auto vars:     Size  Location     Type
 14216 ;;  lights          1    2[BANK0 ] unsigned char 
 14217 ;; Return value:  Size  Location     Type
 14218 ;;		None               void
 14219 ;; Registers used:
 14220 ;;		wreg, status,2, status,0
 14221 ;; Tracked objects:
 14222 ;;		On entry : 0/0
 14223 ;;		On exit  : 0/0
 14224 ;;		Unchanged: 0/0
 14225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14226 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;Total ram usage:        3 bytes
 14231 ;; Hardware stack levels used:    1
 14232 ;; Hardware stack levels required when called:    5
 14233 ;; This function calls:
 14234 ;;		Nothing
 14235 ;; This function is called by:
 14236 ;;		_setDimmerLights_OnOff
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           
 14241                           ;psect for function _setDimmerIntr_ControlStatus
 14242  1E44                     _setDimmerIntr_ControlStatus:	
 14243                           
 14244                           ;incstack = 0
 14245                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14246                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14247  1E44  0020               	movlb	0	; select bank0
 14248  1E45  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14249                           
 14250                           ;Dimmer_B1.c: 76: if (lights == 1) {
 14251  1E46  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14252  1E47  3A01               	xorlw	1
 14253  1E48  1D03               	skipz
 14254  1E49  0008               	return
 14255                           
 14256                           ;Dimmer_B1.c: 77: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14257  1E4A  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14258  1E4B  3A01               	xorlw	1
 14259  1E4C  3000               	movlw	0
 14260  1E4D  1903               	skipnz
 14261  1E4E  3001               	movlw	1
 14262  1E4F  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14263  1E50  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14264  1E51  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14265  1E52  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14266  1E53  0021               	movlb	1	; select bank1
 14267  1E54  083B               	movf	_DimmerIntr1^(0+128),w
 14268  1E55  0020               	movlb	0	; select bank0
 14269  1E56  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14270  1E57  39F7               	andlw	-9
 14271  1E58  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14272  1E59  0021               	movlb	1	; select bank1
 14273  1E5A  00BB               	movwf	_DimmerIntr1^(0+128)
 14274  1E5B  0008               	return
 14275  1E5C                     __end_of_setDimmerIntr_ControlStatus:	
 14276                           
 14277                           	psect	text94
 14278  0CAB                     __ptext94:	
 14279 ;; *************** function _setDelayOff_GO *****************
 14280 ;; Defined at:
 14281 ;;		line 87 in file "../src/DelayOff_B1.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  sw              1    wreg     unsigned char 
 14284 ;;  command         1   69[BANK0 ] unsigned char 
 14285 ;;  value           1   70[BANK0 ] unsigned char 
 14286 ;; Auto vars:     Size  Location     Type
 14287 ;;  sw              1   76[BANK0 ] unsigned char 
 14288 ;;  k               1   75[BANK0 ] unsigned char 
 14289 ;;  j               1   74[BANK0 ] unsigned char 
 14290 ;;  i               1   73[BANK0 ] unsigned char 
 14291 ;; Return value:  Size  Location     Type
 14292 ;;		None               void
 14293 ;; Registers used:
 14294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14295 ;; Tracked objects:
 14296 ;;		On entry : 0/0
 14297 ;;		On exit  : 0/0
 14298 ;;		Unchanged: 0/0
 14299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14300 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;Total ram usage:        8 bytes
 14305 ;; Hardware stack levels used:    1
 14306 ;; Hardware stack levels required when called:    6
 14307 ;; This function calls:
 14308 ;;		_DelayOffPointSelect
 14309 ;;		___bmul
 14310 ;;		_setProductData
 14311 ;; This function is called by:
 14312 ;;		_setDimmerLights_OnOff
 14313 ;;		_setRFSW_Control
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           
 14318                           ;psect for function _setDelayOff_GO
 14319  0CAB                     _setDelayOff_GO:	
 14320                           
 14321                           ;incstack = 0
 14322                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14323                           ;setDelayOff_GO@sw stored from wreg
 14324  0CAB  0020               	movlb	0	; select bank0
 14325  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14326                           
 14327                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14328  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14329  0CAE  319B  23B7  318C   	fcall	_DelayOffPointSelect
 14330                           
 14331                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14332  0CB1  0020               	movlb	0	; select bank0
 14333  0CB2  0865               	movf	setDelayOff_GO@command,w
 14334  0CB3  3A01               	xorlw	1
 14335  0CB4  3000               	movlw	0
 14336  0CB5  1903               	skipnz
 14337  0CB6  3001               	movlw	1
 14338  0CB7  00E7               	movwf	??_setDelayOff_GO
 14339  0CB8  0021               	movlb	1	; select bank1
 14340  0CB9  0849               	movf	_DelayOff^(0+128),w
 14341  0CBA  0086               	movwf	6
 14342  0CBB  3001               	movlw	1	; select bank2/3
 14343  0CBC  0087               	movwf	7
 14344  0CBD  0020               	movlb	0	; select bank0
 14345  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14346  0CBF  0801               	movf	1,w
 14347  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14348  0CC1  39FD               	andlw	-3
 14349  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14350  0CC3  0081               	movwf	1
 14351                           
 14352                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14353  0CC4  0021               	movlb	1	; select bank1
 14354  0CC5  0849               	movf	_DelayOff^(0+128),w
 14355  0CC6  3E02               	addlw	2
 14356  0CC7  0086               	movwf	6
 14357  0CC8  3001               	movlw	1	; select bank2/3
 14358  0CC9  0087               	movwf	7
 14359  0CCA  3000               	movlw	0
 14360  0CCB  3FC0               	movwi [0]fsr1
 14361  0CCC  3FC1               	movwi [1]fsr1
 14362                           
 14363                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14364  0CCD  0849               	movf	_DelayOff^(0+128),w
 14365  0CCE  3E04               	addlw	4
 14366  0CCF  0086               	movwf	6
 14367  0CD0  3001               	movlw	1	; select bank2/3
 14368  0CD1  0087               	movwf	7
 14369  0CD2  0181               	clrf	1
 14370                           
 14371                           ;DelayOff_B1.c: 94: if (command == 1) {
 14372  0CD3  0020               	movlb	0	; select bank0
 14373  0CD4  0865               	movf	setDelayOff_GO@command,w
 14374  0CD5  3A01               	xorlw	1
 14375  0CD6  1D03               	skipz
 14376  0CD7  2D2D               	goto	l8816
 14377                           
 14378                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14379  0CD8  3005               	movlw	5
 14380  0CD9  00E7               	movwf	??_setDelayOff_GO
 14381  0CDA  0867               	movf	??_setDelayOff_GO,w
 14382  0CDB  00E9               	movwf	setDelayOff_GO@i
 14383  0CDC  01EA               	clrf	setDelayOff_GO@j
 14384  0CDD  01EB               	clrf	setDelayOff_GO@k
 14385                           
 14386                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14387  0CDE  300F               	movlw	15
 14388  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14389  0CE0  00E7               	movwf	??_setDelayOff_GO
 14390  0CE1  0867               	movf	??_setDelayOff_GO,w
 14391  0CE2  3A05               	xorlw	5
 14392  0CE3  1903               	skipnz
 14393  0CE4  2CE9               	goto	l8802
 14394  0CE5  0866               	movf	setDelayOff_GO@value,w
 14395  0CE6  390F               	andlw	15
 14396  0CE7  1D03               	btfss	3,2
 14397  0CE8  2D19               	goto	l8812
 14398  0CE9                     l8802:	
 14399  0CE9  3031               	movlw	49
 14400  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14401  0CEB  1803               	skipnc
 14402  0CEC  2D19               	goto	l8812
 14403                           
 14404                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14405  0CED  0866               	movf	setDelayOff_GO@value,w
 14406  0CEE  390F               	andlw	15
 14407  0CEF  00E7               	movwf	??_setDelayOff_GO
 14408  0CF0  0867               	movf	??_setDelayOff_GO,w
 14409  0CF1  00EA               	movwf	setDelayOff_GO@j
 14410                           
 14411                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14412  0CF2  0866               	movf	setDelayOff_GO@value,w
 14413  0CF3  00E7               	movwf	??_setDelayOff_GO
 14414  0CF4  3004               	movlw	4
 14415  0CF5                     u9665:	
 14416  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14417  0CF6  0B89               	decfsz	9,f
 14418  0CF7  2CF5               	goto	u9665
 14419  0CF8  0867               	movf	??_setDelayOff_GO,w
 14420  0CF9  390F               	andlw	15
 14421  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14422  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14423  0CFC  00EB               	movwf	setDelayOff_GO@k
 14424                           
 14425                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14426  0CFD  300A               	movlw	10
 14427  0CFE  00E7               	movwf	??_setDelayOff_GO
 14428  0CFF  0867               	movf	??_setDelayOff_GO,w
 14429  0D00  00A0               	movwf	___bmul@multiplicand
 14430  0D01  086B               	movf	setDelayOff_GO@k,w
 14431  0D02  319D  251B  318C   	fcall	___bmul
 14432  0D05  0020               	movlb	0	; select bank0
 14433  0D06  076A               	addwf	setDelayOff_GO@j,w
 14434  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14435  0D08  0021               	movlb	1	; select bank1
 14436  0D09  0A49               	incf	_DelayOff^(0+128),w
 14437  0D0A  0086               	movwf	6
 14438  0D0B  3001               	movlw	1	; select bank2/3
 14439  0D0C  0087               	movwf	7
 14440  0D0D  0020               	movlb	0	; select bank0
 14441  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14442  0D0F  0081               	movwf	1
 14443                           
 14444                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14445  0D10  0866               	movf	setDelayOff_GO@value,w
 14446  0D11  00E7               	movwf	??_setDelayOff_GO
 14447  0D12  0867               	movf	??_setDelayOff_GO,w
 14448  0D13  00E2               	movwf	setProductData@value
 14449  0D14  086C               	movf	setDelayOff_GO@sw,w
 14450  0D15  3E1A               	addlw	26
 14451  0D16  319B  23CF         	fcall	_setProductData
 14452                           
 14453                           ;DelayOff_B1.c: 103: } else {
 14454  0D18  0008               	return
 14455  0D19                     l8812:	
 14456                           
 14457                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14458  0D19  3005               	movlw	5
 14459  0D1A  0020               	movlb	0	; select bank0
 14460  0D1B  00E7               	movwf	??_setDelayOff_GO
 14461  0D1C  0021               	movlb	1	; select bank1
 14462  0D1D  0A49               	incf	_DelayOff^(0+128),w
 14463  0D1E  0086               	movwf	6
 14464  0D1F  3001               	movlw	1	; select bank2/3
 14465  0D20  0087               	movwf	7
 14466  0D21  0020               	movlb	0	; select bank0
 14467  0D22  0867               	movf	??_setDelayOff_GO,w
 14468  0D23  0081               	movwf	1
 14469                           
 14470                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14471  0D24  3005               	movlw	5
 14472  0D25  00E7               	movwf	??_setDelayOff_GO
 14473  0D26  0867               	movf	??_setDelayOff_GO,w
 14474  0D27  00E2               	movwf	setProductData@value
 14475  0D28  086C               	movf	setDelayOff_GO@sw,w
 14476  0D29  3E1A               	addlw	26
 14477  0D2A  319B  23CF         	fcall	_setProductData
 14478                           
 14479                           ;DelayOff_B1.c: 106: }
 14480                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14481  0D2C  0008               	return
 14482  0D2D                     l8816:	
 14483  0D2D  0020               	movlb	0	; select bank0
 14484  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14485  0D2F  1D03               	skipz
 14486  0D30  0008               	return
 14487                           
 14488                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14489  0D31  01E2               	clrf	setProductData@value
 14490  0D32  086C               	movf	setDelayOff_GO@sw,w
 14491  0D33  3E1A               	addlw	26
 14492  0D34  319B  23CF         	fcall	_setProductData
 14493  0D36  0008               	return
 14494  0D37                     __end_of_setDelayOff_GO:	
 14495                           
 14496                           	psect	text95
 14497  1D1B                     __ptext95:	
 14498 ;; *************** function ___bmul *****************
 14499 ;; Defined at:
 14500 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;  multiplier      1    wreg     unsigned char 
 14503 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14506 ;;  product         1    2[BANK0 ] unsigned char 
 14507 ;; Return value:  Size  Location     Type
 14508 ;;                  1    wreg      unsigned char 
 14509 ;; Registers used:
 14510 ;;		wreg, status,2, status,0
 14511 ;; Tracked objects:
 14512 ;;		On entry : 0/0
 14513 ;;		On exit  : 0/0
 14514 ;;		Unchanged: 0/0
 14515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14516 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;Total ram usage:        4 bytes
 14521 ;; Hardware stack levels used:    1
 14522 ;; Hardware stack levels required when called:    5
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		_setDelayOff_GO
 14527 ;;		_DelayTimejudge
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           
 14532                           ;psect for function ___bmul
 14533  1D1B                     ___bmul:	
 14534                           
 14535                           ;incstack = 0
 14536                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14537                           ;___bmul@multiplier stored from wreg
 14538  1D1B  0020               	movlb	0	; select bank0
 14539  1D1C  00A3               	movwf	___bmul@multiplier
 14540  1D1D  01A2               	clrf	___bmul@product
 14541  1D1E                     l8480:	
 14542  1D1E  1C23               	btfss	___bmul@multiplier,0
 14543  1D1F  2D24               	goto	l8484
 14544  1D20  0820               	movf	___bmul@multiplicand,w
 14545  1D21  00A1               	movwf	??___bmul
 14546  1D22  0821               	movf	??___bmul,w
 14547  1D23  07A2               	addwf	___bmul@product,f
 14548  1D24                     l8484:	
 14549  1D24  1003               	clrc
 14550  1D25  0DA0               	rlf	___bmul@multiplicand,f
 14551  1D26  1003               	clrc
 14552  1D27  0CA3               	rrf	___bmul@multiplier,f
 14553  1D28  08A3               	movf	___bmul@multiplier,f
 14554  1D29  1D03               	skipz
 14555  1D2A  2D1E               	goto	l8480
 14556  1D2B  0822               	movf	___bmul@product,w
 14557  1D2C  0008               	return
 14558  1D2D                     __end_of___bmul:	
 14559                           
 14560                           	psect	text96
 14561  1E74                     __ptext96:	
 14562 ;; *************** function _setCmd_Status *****************
 14563 ;; Defined at:
 14564 ;;		line 651 in file "../src/Main_B1.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;  number          1    wreg     unsigned char 
 14567 ;;  cmd             1    0[BANK0 ] unsigned char 
 14568 ;; Auto vars:     Size  Location     Type
 14569 ;;  number          1    2[BANK0 ] unsigned char 
 14570 ;; Return value:  Size  Location     Type
 14571 ;;		None               void
 14572 ;; Registers used:
 14573 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14579 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;Total ram usage:        3 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:    5
 14586 ;; This function calls:
 14587 ;;		Nothing
 14588 ;; This function is called by:
 14589 ;;		_setDimmerLights_OnOff
 14590 ;;		_setControl_Lights_Table
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           
 14595                           ;psect for function _setCmd_Status
 14596  1E74                     _setCmd_Status:	
 14597                           
 14598                           ;incstack = 0
 14599                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14600                           ;setCmd_Status@number stored from wreg
 14601  1E74  0020               	movlb	0	; select bank0
 14602  1E75  00A2               	movwf	setCmd_Status@number
 14603                           
 14604                           ;Main_B1.c: 652: switch (number) {
 14605  1E76  2E86               	goto	l8970
 14606  1E77                     l8966:	
 14607                           ;Main_B1.c: 653: case 1:
 14608                           
 14609                           
 14610                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14611  1E77  0820               	movf	setCmd_Status@cmd,w
 14612  1E78  3A01               	xorlw	1
 14613  1E79  3000               	movlw	0
 14614  1E7A  1903               	skipnz
 14615  1E7B  3001               	movlw	1
 14616  1E7C  00A1               	movwf	??_setCmd_Status
 14617  1E7D  0021               	movlb	1	; select bank1
 14618  1E7E  0848               	movf	_Cmd^(0+128),w
 14619  1E7F  0020               	movlb	0	; select bank0
 14620  1E80  0621               	xorwf	??_setCmd_Status,w
 14621  1E81  39FE               	andlw	-2
 14622  1E82  0621               	xorwf	??_setCmd_Status,w
 14623  1E83  0021               	movlb	1	; select bank1
 14624  1E84  00C8               	movwf	_Cmd^(0+128)
 14625                           
 14626                           ;Main_B1.c: 656: }
 14627                           
 14628                           ;Main_B1.c: 655: break;
 14629  1E85  0008               	return
 14630  1E86                     l8970:	
 14631  1E86  0020               	movlb	0	; select bank0
 14632  1E87  0822               	movf	setCmd_Status@number,w
 14633                           
 14634                           ; Switch size 1, requested type "space"
 14635                           ; Number of cases is 1, Range of values is 1 to 1
 14636                           ; switch strategies available:
 14637                           ; Name         Instructions Cycles
 14638                           ; simple_byte            4     3 (average)
 14639                           ; direct_byte           11     9 (fixed)
 14640                           ; jumptable            263     9 (fixed)
 14641                           ;	Chosen strategy is simple_byte
 14642  1E88  3A01               	xorlw	1	; case 1
 14643  1E89  1903               	skipnz
 14644  1E8A  2E77               	goto	l8966
 14645  1E8B  2E8C               	goto	l1512
 14646  1E8C                     l1512:	
 14647  1E8C  0008               	return
 14648  1E8D                     __end_of_setCmd_Status:	
 14649                           
 14650                           	psect	text97
 14651  1B81                     __ptext97:	
 14652 ;; *************** function _getMain_All_LightsStatus *****************
 14653 ;; Defined at:
 14654 ;;		line 373 in file "../src/Main_B1.c"
 14655 ;; Parameters:    Size  Location     Type
 14656 ;;		None
 14657 ;; Auto vars:     Size  Location     Type
 14658 ;;  status          1    0[BANK0 ] unsigned char 
 14659 ;; Return value:  Size  Location     Type
 14660 ;;                  1    wreg      unsigned char 
 14661 ;; Registers used:
 14662 ;;		wreg, status,2
 14663 ;; Tracked objects:
 14664 ;;		On entry : 0/0
 14665 ;;		On exit  : 0/0
 14666 ;;		Unchanged: 0/0
 14667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;Total ram usage:        1 bytes
 14673 ;; Hardware stack levels used:    1
 14674 ;; Hardware stack levels required when called:    5
 14675 ;; This function calls:
 14676 ;;		Nothing
 14677 ;; This function is called by:
 14678 ;;		_DimmerLights_Main
 14679 ;;		_setDimmerLights_Main
 14680 ;;		_setDimmerLights_OnOff
 14681 ;;		_Flash_Memory_Main
 14682 ;;		_Exception_Main
 14683 ;;		_Load_Main
 14684 ;;		_setTemp_Main
 14685 ;;		_setControl_Lights_Table
 14686 ;; This function uses a non-reentrant model
 14687 ;;
 14688                           
 14689                           
 14690                           ;psect for function _getMain_All_LightsStatus
 14691  1B81                     _getMain_All_LightsStatus:	
 14692                           
 14693                           ;Main_B1.c: 374: char status = 0;
 14694                           
 14695                           ;incstack = 0
 14696                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14697  1B81  0020               	movlb	0	; select bank0
 14698  1B82  01A0               	clrf	getMain_All_LightsStatus@status
 14699                           
 14700                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14701  1B83  3000               	movlw	0
 14702  1B84  0023               	movlb	3	; select bank3
 14703  1B85  1848               	btfsc	(_DimmerLights1^(0+384)+1),0
 14704  1B86  3001               	movlw	1
 14705  1B87  0020               	movlb	0	; select bank0
 14706  1B88  00A0               	movwf	getMain_All_LightsStatus@status
 14707                           
 14708                           ;Main_B1.c: 420: return status;
 14709  1B89  0820               	movf	getMain_All_LightsStatus@status,w
 14710  1B8A  0008               	return
 14711  1B8B                     __end_of_getMain_All_LightsStatus:	
 14712                           
 14713                           	psect	text98
 14714  1CA2                     __ptext98:	
 14715 ;; *************** function _getDelayOff_GO *****************
 14716 ;; Defined at:
 14717 ;;		line 114 in file "../src/DelayOff_B1.c"
 14718 ;; Parameters:    Size  Location     Type
 14719 ;;  sw              1    wreg     unsigned char 
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;  sw              1    2[BANK0 ] unsigned char 
 14722 ;;  go              1    3[BANK0 ] unsigned char 
 14723 ;; Return value:  Size  Location     Type
 14724 ;;                  1    wreg      unsigned char 
 14725 ;; Registers used:
 14726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14727 ;; Tracked objects:
 14728 ;;		On entry : 0/0
 14729 ;;		On exit  : 0/0
 14730 ;;		Unchanged: 0/0
 14731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;Total ram usage:        2 bytes
 14737 ;; Hardware stack levels used:    1
 14738 ;; Hardware stack levels required when called:    6
 14739 ;; This function calls:
 14740 ;;		_DelayOffPointSelect
 14741 ;; This function is called by:
 14742 ;;		_setDimmerLights_OnOff
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           
 14747                           ;psect for function _getDelayOff_GO
 14748  1CA2                     _getDelayOff_GO:	
 14749                           
 14750                           ;incstack = 0
 14751                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14752                           ;getDelayOff_GO@sw stored from wreg
 14753  1CA2  0020               	movlb	0	; select bank0
 14754  1CA3  00A2               	movwf	getDelayOff_GO@sw
 14755                           
 14756                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14757  1CA4  0822               	movf	getDelayOff_GO@sw,w
 14758  1CA5  319B  23B7         	fcall	_DelayOffPointSelect
 14759                           
 14760                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14761  1CA7  0021               	movlb	1	; select bank1
 14762  1CA8  0849               	movf	_DelayOff^(0+128),w
 14763  1CA9  0086               	movwf	6
 14764  1CAA  3001               	movlw	1	; select bank2/3
 14765  1CAB  0087               	movwf	7
 14766  1CAC  3000               	movlw	0
 14767  1CAD  1881               	btfsc	1,1
 14768  1CAE  3001               	movlw	1
 14769  1CAF  0020               	movlb	0	; select bank0
 14770  1CB0  00A3               	movwf	getDelayOff_GO@go
 14771                           
 14772                           ;DelayOff_B1.c: 117: return go;
 14773  1CB1  0823               	movf	getDelayOff_GO@go,w
 14774  1CB2  0008               	return
 14775  1CB3                     __end_of_getDelayOff_GO:	
 14776                           
 14777                           	psect	text99
 14778  1D09                     __ptext99:	
 14779 ;; *************** function _getCmd_Status *****************
 14780 ;; Defined at:
 14781 ;;		line 659 in file "../src/Main_B1.c"
 14782 ;; Parameters:    Size  Location     Type
 14783 ;;  number          1    wreg     unsigned char 
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;  number          1    0[BANK0 ] unsigned char 
 14786 ;;  cmd             1    1[BANK0 ] unsigned char 
 14787 ;; Return value:  Size  Location     Type
 14788 ;;                  1    wreg      unsigned char 
 14789 ;; Registers used:
 14790 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14791 ;; Tracked objects:
 14792 ;;		On entry : 0/0
 14793 ;;		On exit  : 0/0
 14794 ;;		Unchanged: 0/0
 14795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;Total ram usage:        2 bytes
 14801 ;; Hardware stack levels used:    1
 14802 ;; Hardware stack levels required when called:    5
 14803 ;; This function calls:
 14804 ;;		Nothing
 14805 ;; This function is called by:
 14806 ;;		_setDimmerLights_OnOff
 14807 ;; This function uses a non-reentrant model
 14808 ;;
 14809                           
 14810                           
 14811                           ;psect for function _getCmd_Status
 14812  1D09                     _getCmd_Status:	
 14813                           
 14814                           ;incstack = 0
 14815                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14816                           ;getCmd_Status@number stored from wreg
 14817  1D09  0020               	movlb	0	; select bank0
 14818  1D0A  00A0               	movwf	getCmd_Status@number
 14819                           
 14820                           ;Main_B1.c: 660: char cmd = 0;
 14821  1D0B  01A1               	clrf	getCmd_Status@cmd
 14822                           
 14823                           ;Main_B1.c: 661: switch (number) {
 14824  1D0C  2D14               	goto	l9220
 14825  1D0D                     l9216:	
 14826                           ;Main_B1.c: 662: case 1:
 14827                           
 14828                           
 14829                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14830  1D0D  3000               	movlw	0
 14831  1D0E  0021               	movlb	1	; select bank1
 14832  1D0F  1848               	btfsc	_Cmd^(0+128),0
 14833  1D10  3001               	movlw	1
 14834  1D11  0020               	movlb	0	; select bank0
 14835  1D12  00A1               	movwf	getCmd_Status@cmd
 14836                           
 14837                           ;Main_B1.c: 665: }
 14838                           
 14839                           ;Main_B1.c: 664: break;
 14840  1D13  2D19               	goto	l9222
 14841  1D14                     l9220:	
 14842  1D14  0820               	movf	getCmd_Status@number,w
 14843                           
 14844                           ; Switch size 1, requested type "space"
 14845                           ; Number of cases is 1, Range of values is 1 to 1
 14846                           ; switch strategies available:
 14847                           ; Name         Instructions Cycles
 14848                           ; simple_byte            4     3 (average)
 14849                           ; direct_byte           11     9 (fixed)
 14850                           ; jumptable            263     9 (fixed)
 14851                           ;	Chosen strategy is simple_byte
 14852  1D15  3A01               	xorlw	1	; case 1
 14853  1D16  1903               	skipnz
 14854  1D17  2D0D               	goto	l9216
 14855  1D18  2D19               	goto	l9222
 14856  1D19                     l9222:	
 14857                           
 14858                           ;Main_B1.c: 666: return cmd;
 14859  1D19  0821               	movf	getCmd_Status@cmd,w
 14860  1D1A  0008               	return
 14861  1D1B                     __end_of_getCmd_Status:	
 14862                           
 14863                           	psect	text100
 14864  149B                     __ptext100:	
 14865 ;; *************** function _setDimmerLights_Dimming *****************
 14866 ;; Defined at:
 14867 ;;		line 953 in file "../src/Dimmer_B1.c"
 14868 ;; Parameters:    Size  Location     Type
 14869 ;;  lights          1    wreg     unsigned char 
 14870 ;;  status          1   74[BANK0 ] unsigned char 
 14871 ;; Auto vars:     Size  Location     Type
 14872 ;;  lights          1   77[BANK0 ] unsigned char 
 14873 ;;  value           1   76[BANK0 ] unsigned char 
 14874 ;; Return value:  Size  Location     Type
 14875 ;;		None               void
 14876 ;; Registers used:
 14877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14878 ;; Tracked objects:
 14879 ;;		On entry : 0/0
 14880 ;;		On exit  : 0/0
 14881 ;;		Unchanged: 0/0
 14882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14883 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;Total ram usage:        4 bytes
 14888 ;; Hardware stack levels used:    1
 14889 ;; Hardware stack levels required when called:    8
 14890 ;; This function calls:
 14891 ;;		_getDimmerIntr_DimmingValue
 14892 ;;		_getDimmerLights_ValueToPercent
 14893 ;;		_setBuz
 14894 ;;		_setDimmerIntr_Dimming_Sw
 14895 ;;		_setDimmerIntr_MaxmumValue
 14896 ;;		_setDimmerLights_Line
 14897 ;;		_setMemory_Modify
 14898 ;;		_setProductData
 14899 ;;		_setRF_DimmerLights
 14900 ;;		_setRF_TransceiveGO
 14901 ;;		_setTxData
 14902 ;; This function is called by:
 14903 ;;		_setDimmerLights_Main
 14904 ;; This function uses a non-reentrant model
 14905 ;;
 14906                           
 14907                           
 14908                           ;psect for function _setDimmerLights_Dimming
 14909  149B                     _setDimmerLights_Dimming:	
 14910                           
 14911                           ;incstack = 0
 14912                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14913                           ;setDimmerLights_Dimming@lights stored from wreg
 14914  149B  0020               	movlb	0	; select bank0
 14915  149C  00ED               	movwf	setDimmerLights_Dimming@lights
 14916                           
 14917                           ;Dimmer_B1.c: 954: if (status == 1) {
 14918  149D  086A               	movf	setDimmerLights_Dimming@status,w
 14919  149E  3A01               	xorlw	1
 14920  149F  1D03               	skipz
 14921  14A0  2CB4               	goto	l9460
 14922                           
 14923                           ;Dimmer_B1.c: 955: setDimmerIntr_Dimming_Sw(lights, 1);
 14924  14A1  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14925  14A2  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 14926  14A3  086D               	movf	setDimmerLights_Dimming@lights,w
 14927  14A4  319E  262E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14928                           
 14929                           ;Dimmer_B1.c: 958: setRF_TransceiveGO(0);
 14930  14A7  3000               	movlw	0
 14931  14A8  319D  2564  3194   	fcall	_setRF_TransceiveGO
 14932                           
 14933                           ;Dimmer_B1.c: 960: setBuz(1, 100);
 14934  14AB  3064               	movlw	100
 14935  14AC  0020               	movlb	0	; select bank0
 14936  14AD  00A9               	movwf	setBuz@time
 14937  14AE  3000               	movlw	0
 14938  14AF  00AA               	movwf	setBuz@time+1
 14939  14B0  3001               	movlw	1
 14940  14B1  3194  24F1         	fcall	_setBuz
 14941                           
 14942                           ;Dimmer_B1.c: 961: } else if (status == 0) {
 14943  14B3  0008               	return
 14944  14B4                     l9460:	
 14945  14B4  0020               	movlb	0	; select bank0
 14946  14B5  08EA               	movf	setDimmerLights_Dimming@status,f
 14947  14B6  1D03               	skipz
 14948  14B7  0008               	return
 14949                           
 14950                           ;Dimmer_B1.c: 962: setDimmerIntr_Dimming_Sw(lights, 0);
 14951  14B8  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14952  14B9  086D               	movf	setDimmerLights_Dimming@lights,w
 14953  14BA  319E  262E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14954                           
 14955                           ;Dimmer_B1.c: 965: Dimmer.Load_Status = 0;
 14956  14BD  0022               	movlb	2	; select bank2
 14957  14BE  112C               	bcf	_Dimmer^(0+256),2
 14958                           
 14959                           ;Dimmer_B1.c: 966: setDimmerLights_Line(lights);
 14960  14BF  0020               	movlb	0	; select bank0
 14961  14C0  086D               	movf	setDimmerLights_Dimming@lights,w
 14962  14C1  319C  24F7  3194   	fcall	_setDimmerLights_Line
 14963                           
 14964                           ;Dimmer_B1.c: 968: char value = getDimmerIntr_DimmingValue(lights);
 14965  14C4  0020               	movlb	0	; select bank0
 14966  14C5  086D               	movf	setDimmerLights_Dimming@lights,w
 14967  14C6  319C  2463  3194   	fcall	_getDimmerIntr_DimmingValue
 14968  14C9  0020               	movlb	0	; select bank0
 14969  14CA  00EB               	movwf	??_setDimmerLights_Dimming
 14970  14CB  086B               	movf	??_setDimmerLights_Dimming,w
 14971  14CC  00EC               	movwf	setDimmerLights_Dimming@value
 14972                           
 14973                           ;Dimmer_B1.c: 969: setDimmerIntr_MaxmumValue(lights, value);
 14974  14CD  086C               	movf	setDimmerLights_Dimming@value,w
 14975  14CE  00EB               	movwf	??_setDimmerLights_Dimming
 14976  14CF  086B               	movf	??_setDimmerLights_Dimming,w
 14977  14D0  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14978  14D1  086D               	movf	setDimmerLights_Dimming@lights,w
 14979  14D2  319B  23DB  3194   	fcall	_setDimmerIntr_MaxmumValue
 14980                           
 14981                           ;Dimmer_B1.c: 970: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 14982  14D5  0020               	movlb	0	; select bank0
 14983  14D6  086C               	movf	setDimmerLights_Dimming@value,w
 14984  14D7  3196  26CB  3194   	fcall	_getDimmerLights_ValueToPercent
 14985  14DA  0020               	movlb	0	; select bank0
 14986  14DB  00EB               	movwf	??_setDimmerLights_Dimming
 14987  14DC  086B               	movf	??_setDimmerLights_Dimming,w
 14988  14DD  00E2               	movwf	setProductData@value
 14989  14DE  086D               	movf	setDimmerLights_Dimming@lights,w
 14990  14DF  3E14               	addlw	20
 14991  14E0  319B  23CF  3194   	fcall	_setProductData
 14992                           
 14993                           ;Dimmer_B1.c: 977: setMemory_Modify(1);
 14994  14E3  3001               	movlw	1
 14995  14E4  319D  2551  3194   	fcall	_setMemory_Modify
 14996                           
 14997                           ;Dimmer_B1.c: 981: setRF_DimmerLights(lights, 1);
 14998  14E7  0020               	movlb	0	; select bank0
 14999  14E8  01E5               	clrf	setRF_DimmerLights@on
 15000  14E9  0AE5               	incf	setRF_DimmerLights@on,f
 15001  14EA  086D               	movf	setDimmerLights_Dimming@lights,w
 15002  14EB  3197  2730  3194   	fcall	_setRF_DimmerLights
 15003                           
 15004                           ;Dimmer_B1.c: 982: setTxData();
 15005  14EE  318F  2745         	fcall	_setTxData
 15006  14F0  0008               	return
 15007  14F1                     __end_of_setDimmerLights_Dimming:	
 15008                           
 15009                           	psect	text101
 15010  0F45                     __ptext101:	
 15011 ;; *************** function _setTxData *****************
 15012 ;; Defined at:
 15013 ;;		line 183 in file "../src/RF_Control_B1.c"
 15014 ;; Parameters:    Size  Location     Type
 15015 ;;		None
 15016 ;; Auto vars:     Size  Location     Type
 15017 ;;  i               1    0        unsigned char 
 15018 ;; Return value:  Size  Location     Type
 15019 ;;		None               void
 15020 ;; Registers used:
 15021 ;;		wreg, fsr1l, fsr1h, status,2
 15022 ;; Tracked objects:
 15023 ;;		On entry : 0/0
 15024 ;;		On exit  : 0/0
 15025 ;;		Unchanged: 0/0
 15026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15031 ;;Total ram usage:        1 bytes
 15032 ;; Hardware stack levels used:    1
 15033 ;; Hardware stack levels required when called:    5
 15034 ;; This function calls:
 15035 ;;		Nothing
 15036 ;; This function is called by:
 15037 ;;		_setDimmerLights_OnOff
 15038 ;;		_setDimmerLights_Dimming
 15039 ;;		_getRxData
 15040 ;;		_setControl_Lights_Table
 15041 ;;		_setRFSW_Control
 15042 ;;		_setRFSW_AdjControl
 15043 ;; This function uses a non-reentrant model
 15044 ;;
 15045                           
 15046                           
 15047                           ;psect for function _setTxData
 15048  0F45                     _setTxData:	
 15049                           
 15050                           ;RF_Control_B1.c: 184: char i;
 15051                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15052                           
 15053                           ;incstack = 0
 15054                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15055  0F45  0021               	movlb	1	; select bank1
 15056  0F46  1C20               	btfss	_RF1^(0+128),0
 15057  0F47  0008               	return
 15058                           
 15059                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15060  0F48  1520               	bsf	_RF1^(0+128),2
 15061                           
 15062                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15063  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15064  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15065                           
 15066                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15067  0F4B  3063               	movlw	99
 15068  0F4C  0020               	movlb	0	; select bank0
 15069  0F4D  00A0               	movwf	??_setTxData
 15070  0F4E  0820               	movf	??_setTxData,w
 15071  0F4F  0023               	movlb	3	; select bank3
 15072  0F50  00A0               	movwf	_RF_Data^(0+384)
 15073                           
 15074                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15075  0F51  3002               	movlw	2
 15076  0F52  0020               	movlb	0	; select bank0
 15077  0F53  00A0               	movwf	??_setTxData
 15078  0F54  0820               	movf	??_setTxData,w
 15079  0F55  0023               	movlb	3	; select bank3
 15080  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15081                           
 15082                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15083  0F57  0021               	movlb	1	; select bank1
 15084  0F58  0863               	movf	_product^(0+128),w
 15085  0F59  0086               	movwf	6
 15086  0F5A  3002               	movlw	2	; select bank4/5
 15087  0F5B  0087               	movwf	7
 15088  0F5C  3002               	movlw	2	; select bank4/5
 15089  0F5D  3F42               	moviw [2]fsr1
 15090  0F5E  0023               	movlb	3	; select bank3
 15091  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15092                           
 15093                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15094  0F60  0021               	movlb	1	; select bank1
 15095  0F61  0863               	movf	_product^(0+128),w
 15096  0F62  0086               	movwf	6
 15097  0F63  3002               	movlw	2	; select bank4/5
 15098  0F64  0087               	movwf	7
 15099  0F65  3002               	movlw	2	; select bank4/5
 15100  0F66  3F43               	moviw [3]fsr1
 15101  0F67  0023               	movlb	3	; select bank3
 15102  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15103                           
 15104                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15105  0F69  0021               	movlb	1	; select bank1
 15106  0F6A  0863               	movf	_product^(0+128),w
 15107  0F6B  0086               	movwf	6
 15108  0F6C  3002               	movlw	2	; select bank4/5
 15109  0F6D  0087               	movwf	7
 15110  0F6E  3002               	movlw	2	; select bank4/5
 15111  0F6F  3F44               	moviw [4]fsr1
 15112  0F70  0023               	movlb	3	; select bank3
 15113  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15114                           
 15115                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15116  0F72  0021               	movlb	1	; select bank1
 15117  0F73  0863               	movf	_product^(0+128),w
 15118  0F74  0086               	movwf	6
 15119  0F75  3002               	movlw	2	; select bank4/5
 15120  0F76  0087               	movwf	7
 15121  0F77  3002               	movlw	2	; select bank4/5
 15122  0F78  3F45               	moviw [5]fsr1
 15123  0F79  0023               	movlb	3	; select bank3
 15124  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15125                           
 15126                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15127  0F7B  0021               	movlb	1	; select bank1
 15128  0F7C  0863               	movf	_product^(0+128),w
 15129  0F7D  0086               	movwf	6
 15130  0F7E  3002               	movlw	2	; select bank4/5
 15131  0F7F  0087               	movwf	7
 15132  0F80  3002               	movlw	2	; select bank4/5
 15133  0F81  3F46               	moviw [6]fsr1
 15134  0F82  0023               	movlb	3	; select bank3
 15135  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15136                           
 15137                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15138  0F84  0021               	movlb	1	; select bank1
 15139  0F85  0863               	movf	_product^(0+128),w
 15140  0F86  0086               	movwf	6
 15141  0F87  3002               	movlw	2	; select bank4/5
 15142  0F88  0087               	movwf	7
 15143  0F89  3002               	movlw	2	; select bank4/5
 15144  0F8A  3F47               	moviw [7]fsr1
 15145  0F8B  0023               	movlb	3	; select bank3
 15146  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15147                           
 15148                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15149  0F8D  0021               	movlb	1	; select bank1
 15150  0F8E  0863               	movf	_product^(0+128),w
 15151  0F8F  0086               	movwf	6
 15152  0F90  3002               	movlw	2	; select bank4/5
 15153  0F91  0087               	movwf	7
 15154  0F92  3002               	movlw	2	; select bank4/5
 15155  0F93  3F48               	moviw [8]fsr1
 15156  0F94  0023               	movlb	3	; select bank3
 15157  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15158                           
 15159                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15160  0F96  0021               	movlb	1	; select bank1
 15161  0F97  0863               	movf	_product^(0+128),w
 15162  0F98  0086               	movwf	6
 15163  0F99  3002               	movlw	2	; select bank4/5
 15164  0F9A  0087               	movwf	7
 15165  0F9B  3002               	movlw	2	; select bank4/5
 15166  0F9C  3F49               	moviw [9]fsr1
 15167  0F9D  0023               	movlb	3	; select bank3
 15168  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15169                           
 15170                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15171  0F9F  0021               	movlb	1	; select bank1
 15172  0FA0  0863               	movf	_product^(0+128),w
 15173  0FA1  0086               	movwf	6
 15174  0FA2  3002               	movlw	2	; select bank4/5
 15175  0FA3  0087               	movwf	7
 15176  0FA4  3002               	movlw	2	; select bank4/5
 15177  0FA5  3F4A               	moviw [10]fsr1
 15178  0FA6  0023               	movlb	3	; select bank3
 15179  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15180                           
 15181                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15182  0FA8  0021               	movlb	1	; select bank1
 15183  0FA9  0863               	movf	_product^(0+128),w
 15184  0FAA  0086               	movwf	6
 15185  0FAB  3002               	movlw	2	; select bank4/5
 15186  0FAC  0087               	movwf	7
 15187  0FAD  3002               	movlw	2	; select bank4/5
 15188  0FAE  3F4B               	moviw [11]fsr1
 15189  0FAF  0023               	movlb	3	; select bank3
 15190  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15191                           
 15192                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15193  0FB1  0021               	movlb	1	; select bank1
 15194  0FB2  0863               	movf	_product^(0+128),w
 15195  0FB3  0086               	movwf	6
 15196  0FB4  3002               	movlw	2	; select bank4/5
 15197  0FB5  0087               	movwf	7
 15198  0FB6  3002               	movlw	2	; select bank4/5
 15199  0FB7  3F4C               	moviw [12]fsr1
 15200  0FB8  0023               	movlb	3	; select bank3
 15201  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15202                           
 15203                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15204  0FBA  0021               	movlb	1	; select bank1
 15205  0FBB  0863               	movf	_product^(0+128),w
 15206  0FBC  0086               	movwf	6
 15207  0FBD  3002               	movlw	2	; select bank4/5
 15208  0FBE  0087               	movwf	7
 15209  0FBF  3002               	movlw	2	; select bank4/5
 15210  0FC0  3F4D               	moviw [13]fsr1
 15211  0FC1  0023               	movlb	3	; select bank3
 15212  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15213                           
 15214                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15215  0FC3  0021               	movlb	1	; select bank1
 15216  0FC4  0863               	movf	_product^(0+128),w
 15217  0FC5  0086               	movwf	6
 15218  0FC6  3002               	movlw	2	; select bank4/5
 15219  0FC7  0087               	movwf	7
 15220  0FC8  3002               	movlw	2	; select bank4/5
 15221  0FC9  3F4E               	moviw [14]fsr1
 15222  0FCA  0023               	movlb	3	; select bank3
 15223  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15224                           
 15225                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15226  0FCC  0021               	movlb	1	; select bank1
 15227  0FCD  0863               	movf	_product^(0+128),w
 15228  0FCE  0086               	movwf	6
 15229  0FCF  3002               	movlw	2	; select bank4/5
 15230  0FD0  0087               	movwf	7
 15231  0FD1  3002               	movlw	2	; select bank4/5
 15232  0FD2  3F4F               	moviw [15]fsr1
 15233  0FD3  0023               	movlb	3	; select bank3
 15234  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15235                           
 15236                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15237  0FD5  0021               	movlb	1	; select bank1
 15238  0FD6  0863               	movf	_product^(0+128),w
 15239  0FD7  0086               	movwf	6
 15240  0FD8  3002               	movlw	2	; select bank4/5
 15241  0FD9  0087               	movwf	7
 15242  0FDA  3002               	movlw	2	; select bank4/5
 15243  0FDB  3F50               	moviw [16]fsr1
 15244  0FDC  0023               	movlb	3	; select bank3
 15245  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15246                           
 15247                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15248  0FDE  0021               	movlb	1	; select bank1
 15249  0FDF  0863               	movf	_product^(0+128),w
 15250  0FE0  0086               	movwf	6
 15251  0FE1  3002               	movlw	2	; select bank4/5
 15252  0FE2  0087               	movwf	7
 15253  0FE3  3002               	movlw	2	; select bank4/5
 15254  0FE4  3F51               	moviw [17]fsr1
 15255  0FE5  0023               	movlb	3	; select bank3
 15256  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15257                           
 15258                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15259  0FE7  0021               	movlb	1	; select bank1
 15260  0FE8  0863               	movf	_product^(0+128),w
 15261  0FE9  0086               	movwf	6
 15262  0FEA  3002               	movlw	2	; select bank4/5
 15263  0FEB  0087               	movwf	7
 15264  0FEC  3002               	movlw	2	; select bank4/5
 15265  0FED  3F52               	moviw [18]fsr1
 15266  0FEE  0023               	movlb	3	; select bank3
 15267  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15268                           
 15269                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15270  0FF0  0021               	movlb	1	; select bank1
 15271  0FF1  0863               	movf	_product^(0+128),w
 15272  0FF2  0086               	movwf	6
 15273  0FF3  3002               	movlw	2	; select bank4/5
 15274  0FF4  0087               	movwf	7
 15275  0FF5  3002               	movlw	2	; select bank4/5
 15276  0FF6  3F53               	moviw [19]fsr1
 15277  0FF7  0023               	movlb	3	; select bank3
 15278  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15279                           
 15280                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15281  0FF9  30D1               	movlw	209
 15282  0FFA  0020               	movlb	0	; select bank0
 15283  0FFB  00A0               	movwf	??_setTxData
 15284  0FFC  0820               	movf	??_setTxData,w
 15285  0FFD  0023               	movlb	3	; select bank3
 15286  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15287  0FFF  0008               	return
 15288  1000                     __end_of_setTxData:	
 15289                           
 15290                           	psect	text102
 15291  1D64                     __ptext102:	
 15292 ;; *************** function _setRF_TransceiveGO *****************
 15293 ;; Defined at:
 15294 ;;		line 470 in file "../src/RF_Control_B1.c"
 15295 ;; Parameters:    Size  Location     Type
 15296 ;;  command         1    wreg     unsigned char 
 15297 ;; Auto vars:     Size  Location     Type
 15298 ;;  command         1    1[BANK0 ] unsigned char 
 15299 ;; Return value:  Size  Location     Type
 15300 ;;		None               void
 15301 ;; Registers used:
 15302 ;;		wreg, status,2, status,0
 15303 ;; Tracked objects:
 15304 ;;		On entry : 0/0
 15305 ;;		On exit  : 0/0
 15306 ;;		Unchanged: 0/0
 15307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15311 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;Total ram usage:        2 bytes
 15313 ;; Hardware stack levels used:    1
 15314 ;; Hardware stack levels required when called:    5
 15315 ;; This function calls:
 15316 ;;		Nothing
 15317 ;; This function is called by:
 15318 ;;		_setDimmerLights_Dimming
 15319 ;; This function uses a non-reentrant model
 15320 ;;
 15321                           
 15322                           
 15323                           ;psect for function _setRF_TransceiveGO
 15324  1D64                     _setRF_TransceiveGO:	
 15325                           
 15326                           ;incstack = 0
 15327                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15328                           ;setRF_TransceiveGO@command stored from wreg
 15329  1D64  0020               	movlb	0	; select bank0
 15330  1D65  00A1               	movwf	setRF_TransceiveGO@command
 15331                           
 15332                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15333  1D66  0821               	movf	setRF_TransceiveGO@command,w
 15334  1D67  3A01               	xorlw	1
 15335  1D68  3000               	movlw	0
 15336  1D69  1903               	skipnz
 15337  1D6A  3001               	movlw	1
 15338  1D6B  00A0               	movwf	??_setRF_TransceiveGO
 15339  1D6C  0DA0               	rlf	??_setRF_TransceiveGO,f
 15340  1D6D  0DA0               	rlf	??_setRF_TransceiveGO,f
 15341  1D6E  0021               	movlb	1	; select bank1
 15342  1D6F  0820               	movf	_RF1^(0+128),w
 15343  1D70  0020               	movlb	0	; select bank0
 15344  1D71  0620               	xorwf	??_setRF_TransceiveGO,w
 15345  1D72  39FB               	andlw	-5
 15346  1D73  0620               	xorwf	??_setRF_TransceiveGO,w
 15347  1D74  0021               	movlb	1	; select bank1
 15348  1D75  00A0               	movwf	_RF1^(0+128)
 15349  1D76  0008               	return
 15350  1D77                     __end_of_setRF_TransceiveGO:	
 15351                           
 15352                           	psect	text103
 15353  1730                     __ptext103:	
 15354 ;; *************** function _setRF_DimmerLights *****************
 15355 ;; Defined at:
 15356 ;;		line 455 in file "../src/RF_Control_B1.c"
 15357 ;; Parameters:    Size  Location     Type
 15358 ;;  lights          1    wreg     unsigned char 
 15359 ;;  on              1   69[BANK0 ] unsigned char 
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;  lights          1   73[BANK0 ] unsigned char 
 15362 ;;  status          1   72[BANK0 ] unsigned char 
 15363 ;; Return value:  Size  Location     Type
 15364 ;;		None               void
 15365 ;; Registers used:
 15366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15367 ;; Tracked objects:
 15368 ;;		On entry : 0/0
 15369 ;;		On exit  : 0/0
 15370 ;;		Unchanged: 0/0
 15371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15372 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15376 ;;Total ram usage:        5 bytes
 15377 ;; Hardware stack levels used:    1
 15378 ;; Hardware stack levels required when called:    6
 15379 ;; This function calls:
 15380 ;;		_setProductData
 15381 ;; This function is called by:
 15382 ;;		_setDimmerLights_OnOff
 15383 ;;		_setDimmerLights_Dimming
 15384 ;;		_setRFSW_Control
 15385 ;; This function uses a non-reentrant model
 15386 ;;
 15387                           
 15388                           
 15389                           ;psect for function _setRF_DimmerLights
 15390  1730                     _setRF_DimmerLights:	
 15391                           
 15392                           ;incstack = 0
 15393                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15394                           ;setRF_DimmerLights@lights stored from wreg
 15395  1730  0020               	movlb	0	; select bank0
 15396  1731  00E9               	movwf	setRF_DimmerLights@lights
 15397                           
 15398                           ;RF_Control_B1.c: 456: char status = 1;
 15399  1732  01E8               	clrf	setRF_DimmerLights@status
 15400  1733  0AE8               	incf	setRF_DimmerLights@status,f
 15401                           
 15402                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15403  1734  0869               	movf	setRF_DimmerLights@lights,w
 15404  1735  3EFF               	addlw	-1
 15405  1736  0A89               	incf	9,f
 15406  1737  2F3A               	goto	u9700
 15407  1738                     u9705:	
 15408  1738  1003               	clrc
 15409  1739  0DE8               	rlf	setRF_DimmerLights@status,f
 15410  173A                     u9700:	
 15411  173A  3EFF               	addlw	-1
 15412  173B  1D03               	skipz
 15413  173C  2F38               	goto	u9705
 15414                           
 15415                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15416  173D  0869               	movf	setRF_DimmerLights@lights,w
 15417  173E  00E6               	movwf	??_setRF_DimmerLights
 15418  173F  0866               	movf	??_setRF_DimmerLights,w
 15419  1740  00E2               	movwf	setProductData@value
 15420  1741  300B               	movlw	11
 15421  1742  319B  23CF  3197   	fcall	_setProductData
 15422                           
 15423                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15424  1745  0020               	movlb	0	; select bank0
 15425  1746  0869               	movf	setRF_DimmerLights@lights,w
 15426  1747  3E1A               	addlw	26
 15427  1748  0021               	movlb	1	; select bank1
 15428  1749  0763               	addwf	_product^(0+128),w
 15429  174A  0020               	movlb	0	; select bank0
 15430  174B  00E6               	movwf	??_setRF_DimmerLights
 15431  174C  0866               	movf	??_setRF_DimmerLights,w
 15432  174D  0086               	movwf	6
 15433  174E  3002               	movlw	2	; select bank4/5
 15434  174F  0087               	movwf	7
 15435  1750  0801               	movf	1,w
 15436  1751  00E7               	movwf	??_setRF_DimmerLights+1
 15437  1752  0867               	movf	??_setRF_DimmerLights+1,w
 15438  1753  00E2               	movwf	setProductData@value
 15439  1754  3011               	movlw	17
 15440  1755  319B  23CF  3197   	fcall	_setProductData
 15441                           
 15442                           ;RF_Control_B1.c: 460: if (on == 1) {
 15443  1758  0020               	movlb	0	; select bank0
 15444  1759  0865               	movf	setRF_DimmerLights@on,w
 15445  175A  3A01               	xorlw	1
 15446  175B  1D03               	skipz
 15447  175C  2F7F               	goto	l8852
 15448                           
 15449                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15450  175D  0869               	movf	setRF_DimmerLights@lights,w
 15451  175E  3E14               	addlw	20
 15452  175F  0021               	movlb	1	; select bank1
 15453  1760  0763               	addwf	_product^(0+128),w
 15454  1761  0020               	movlb	0	; select bank0
 15455  1762  00E6               	movwf	??_setRF_DimmerLights
 15456  1763  0866               	movf	??_setRF_DimmerLights,w
 15457  1764  0086               	movwf	6
 15458  1765  3002               	movlw	2	; select bank4/5
 15459  1766  0087               	movwf	7
 15460  1767  0801               	movf	1,w
 15461  1768  00E7               	movwf	??_setRF_DimmerLights+1
 15462  1769  0867               	movf	??_setRF_DimmerLights+1,w
 15463  176A  00E2               	movwf	setProductData@value
 15464  176B  3009               	movlw	9
 15465  176C  319B  23CF  3197   	fcall	_setProductData
 15466                           
 15467                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15468  176F  0021               	movlb	1	; select bank1
 15469  1770  0863               	movf	_product^(0+128),w
 15470  1771  3E0F               	addlw	15
 15471  1772  0086               	movwf	6
 15472  1773  3002               	movlw	2	; select bank4/5
 15473  1774  0087               	movwf	7
 15474  1775  0801               	movf	1,w
 15475  1776  0020               	movlb	0	; select bank0
 15476  1777  0468               	iorwf	setRF_DimmerLights@status,w
 15477  1778  00E6               	movwf	??_setRF_DimmerLights
 15478  1779  0866               	movf	??_setRF_DimmerLights,w
 15479  177A  00E2               	movwf	setProductData@value
 15480  177B  300F               	movlw	15
 15481  177C  319B  23CF         	fcall	_setProductData
 15482                           
 15483                           ;RF_Control_B1.c: 463: } else {
 15484  177E  0008               	return
 15485  177F                     l8852:	
 15486                           
 15487                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15488  177F  0020               	movlb	0	; select bank0
 15489  1780  01E2               	clrf	setProductData@value
 15490  1781  3009               	movlw	9
 15491  1782  319B  23CF  3197   	fcall	_setProductData
 15492                           
 15493                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15494  1785  0021               	movlb	1	; select bank1
 15495  1786  0863               	movf	_product^(0+128),w
 15496  1787  3E0F               	addlw	15
 15497  1788  0086               	movwf	6
 15498  1789  3002               	movlw	2	; select bank4/5
 15499  178A  0087               	movwf	7
 15500  178B  0020               	movlb	0	; select bank0
 15501  178C  0968               	comf	setRF_DimmerLights@status,w
 15502  178D  0501               	andwf	1,w
 15503  178E  00E6               	movwf	??_setRF_DimmerLights
 15504  178F  0866               	movf	??_setRF_DimmerLights,w
 15505  1790  00E2               	movwf	setProductData@value
 15506  1791  300F               	movlw	15
 15507  1792  319B  23CF         	fcall	_setProductData
 15508  1794  0008               	return
 15509  1795                     __end_of_setRF_DimmerLights:	
 15510                           
 15511                           	psect	text104
 15512  1CF7                     __ptext104:	
 15513 ;; *************** function _setDimmerLights_Line *****************
 15514 ;; Defined at:
 15515 ;;		line 1027 in file "../src/Dimmer_B1.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;  lights          1    wreg     unsigned char 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;  lights          1    0[BANK0 ] unsigned char 
 15520 ;; Return value:  Size  Location     Type
 15521 ;;		None               void
 15522 ;; Registers used:
 15523 ;;		wreg
 15524 ;; Tracked objects:
 15525 ;;		On entry : 0/0
 15526 ;;		On exit  : 0/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;Total ram usage:        1 bytes
 15534 ;; Hardware stack levels used:    1
 15535 ;; Hardware stack levels required when called:    5
 15536 ;; This function calls:
 15537 ;;		Nothing
 15538 ;; This function is called by:
 15539 ;;		_setDimmerLights_OnOff
 15540 ;;		_setDimmerLights_Dimming
 15541 ;; This function uses a non-reentrant model
 15542 ;;
 15543                           
 15544                           
 15545                           ;psect for function _setDimmerLights_Line
 15546  1CF7                     _setDimmerLights_Line:	
 15547                           
 15548                           ;incstack = 0
 15549                           ; Regs used in _setDimmerLights_Line: [wreg]
 15550                           ;setDimmerLights_Line@lights stored from wreg
 15551  1CF7  0020               	movlb	0	; select bank0
 15552  1CF8  00A0               	movwf	setDimmerLights_Line@lights
 15553                           
 15554                           ;Dimmer_B1.c: 1028: Dimmer.LoadGO = 1;
 15555  1CF9  0022               	movlb	2	; select bank2
 15556  1CFA  14AC               	bsf	_Dimmer^(0+256),1
 15557                           
 15558                           ;Dimmer_B1.c: 1030: DimmerLights1.Line = 0;
 15559  1CFB  0023               	movlb	3	; select bank3
 15560  1CFC  10C8               	bcf	(_DimmerLights1^(0+384)+1),1
 15561                           
 15562                           ;Dimmer_B1.c: 1031: if (lights == 1 && lights != 0) {
 15563  1CFD  0020               	movlb	0	; select bank0
 15564  1CFE  0820               	movf	setDimmerLights_Line@lights,w
 15565  1CFF  3A01               	xorlw	1
 15566  1D00  1D03               	skipz
 15567  1D01  0008               	return
 15568  1D02  0820               	movf	setDimmerLights_Line@lights,w
 15569  1D03  1903               	btfsc	3,2
 15570  1D04  0008               	return
 15571                           
 15572                           ;Dimmer_B1.c: 1032: DimmerLights1.Line = 1;
 15573  1D05  0023               	movlb	3	; select bank3
 15574  1D06  14C8               	bsf	(_DimmerLights1^(0+384)+1),1
 15575  1D07  0020               	movlb	0	; select bank0
 15576  1D08  0008               	return
 15577  1D09                     __end_of_setDimmerLights_Line:	
 15578                           
 15579                           	psect	text105
 15580  1BDB                     __ptext105:	
 15581 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15582 ;; Defined at:
 15583 ;;		line 132 in file "../src/Dimmer_B1.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  lights          1    wreg     unsigned char 
 15586 ;;  value           1   66[BANK0 ] unsigned char 
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;  lights          1   68[BANK0 ] unsigned char 
 15589 ;; Return value:  Size  Location     Type
 15590 ;;		None               void
 15591 ;; Registers used:
 15592 ;;		wreg
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/0
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15598 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;Total ram usage:        3 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    5
 15605 ;; This function calls:
 15606 ;;		Nothing
 15607 ;; This function is called by:
 15608 ;;		_setDimmerLights_OnOff
 15609 ;;		_setDimmerLights_Dimming
 15610 ;;		_setRFSW_AdjControl
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           
 15615                           ;psect for function _setDimmerIntr_MaxmumValue
 15616  1BDB                     _setDimmerIntr_MaxmumValue:	
 15617                           
 15618                           ;incstack = 0
 15619                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15620                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15621  1BDB  0020               	movlb	0	; select bank0
 15622  1BDC  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15623                           
 15624                           ;Dimmer_B1.c: 134: if (lights == 1) {
 15625  1BDD  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15626  1BDE  3A01               	xorlw	1
 15627  1BDF  1D03               	skipz
 15628  1BE0  0008               	return
 15629                           
 15630                           ;Dimmer_B1.c: 135: DimmerIntr1.MaxmumValue = value;
 15631  1BE1  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15632  1BE2  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15633  1BE3  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15634  1BE4  0021               	movlb	1	; select bank1
 15635  1BE5  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 15636  1BE6  0008               	return
 15637  1BE7                     __end_of_setDimmerIntr_MaxmumValue:	
 15638                           
 15639                           	psect	text106
 15640  1E2E                     __ptext106:	
 15641 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15642 ;; Defined at:
 15643 ;;		line 209 in file "../src/Dimmer_B1.c"
 15644 ;; Parameters:    Size  Location     Type
 15645 ;;  lights          1    wreg     unsigned char 
 15646 ;;  command         1    0[BANK0 ] unsigned char 
 15647 ;; Auto vars:     Size  Location     Type
 15648 ;;  lights          1    2[BANK0 ] unsigned char 
 15649 ;; Return value:  Size  Location     Type
 15650 ;;		None               void
 15651 ;; Registers used:
 15652 ;;		wreg, status,2, status,0
 15653 ;; Tracked objects:
 15654 ;;		On entry : 0/0
 15655 ;;		On exit  : 0/0
 15656 ;;		Unchanged: 0/0
 15657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15658 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15661 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15662 ;;Total ram usage:        3 bytes
 15663 ;; Hardware stack levels used:    1
 15664 ;; Hardware stack levels required when called:    5
 15665 ;; This function calls:
 15666 ;;		Nothing
 15667 ;; This function is called by:
 15668 ;;		_setDimmerLights_Dimming
 15669 ;; This function uses a non-reentrant model
 15670 ;;
 15671                           
 15672                           
 15673                           ;psect for function _setDimmerIntr_Dimming_Sw
 15674  1E2E                     _setDimmerIntr_Dimming_Sw:	
 15675                           
 15676                           ;incstack = 0
 15677                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15678                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15679  1E2E  0020               	movlb	0	; select bank0
 15680  1E2F  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15681                           
 15682                           ;Dimmer_B1.c: 211: if (lights == 1) {
 15683  1E30  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15684  1E31  3A01               	xorlw	1
 15685  1E32  1D03               	skipz
 15686  1E33  0008               	return
 15687                           
 15688                           ;Dimmer_B1.c: 212: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15689  1E34  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15690  1E35  3A01               	xorlw	1
 15691  1E36  3000               	movlw	0
 15692  1E37  1903               	skipnz
 15693  1E38  3001               	movlw	1
 15694  1E39  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15695  1E3A  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15696  1E3B  0021               	movlb	1	; select bank1
 15697  1E3C  083B               	movf	_DimmerIntr1^(0+128),w
 15698  1E3D  0020               	movlb	0	; select bank0
 15699  1E3E  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15700  1E3F  39EF               	andlw	-17
 15701  1E40  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15702  1E41  0021               	movlb	1	; select bank1
 15703  1E42  00BB               	movwf	_DimmerIntr1^(0+128)
 15704  1E43  0008               	return
 15705  1E44                     __end_of_setDimmerIntr_Dimming_Sw:	
 15706                           
 15707                           	psect	text107
 15708  1C63                     __ptext107:	
 15709 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15710 ;; Defined at:
 15711 ;;		line 110 in file "../src/Dimmer_B1.c"
 15712 ;; Parameters:    Size  Location     Type
 15713 ;;  lights          1    wreg     unsigned char 
 15714 ;; Auto vars:     Size  Location     Type
 15715 ;;  lights          1    1[BANK0 ] unsigned char 
 15716 ;;  value           1    2[BANK0 ] unsigned char 
 15717 ;; Return value:  Size  Location     Type
 15718 ;;                  1    wreg      unsigned char 
 15719 ;; Registers used:
 15720 ;;		wreg, status,2
 15721 ;; Tracked objects:
 15722 ;;		On entry : 0/0
 15723 ;;		On exit  : 0/0
 15724 ;;		Unchanged: 0/0
 15725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15727 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;Total ram usage:        3 bytes
 15731 ;; Hardware stack levels used:    1
 15732 ;; Hardware stack levels required when called:    5
 15733 ;; This function calls:
 15734 ;;		Nothing
 15735 ;; This function is called by:
 15736 ;;		_setDimmerLights_Dimming
 15737 ;; This function uses a non-reentrant model
 15738 ;;
 15739                           
 15740                           
 15741                           ;psect for function _getDimmerIntr_DimmingValue
 15742  1C63                     _getDimmerIntr_DimmingValue:	
 15743                           
 15744                           ;incstack = 0
 15745                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15746                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15747  1C63  0020               	movlb	0	; select bank0
 15748  1C64  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 15749                           
 15750                           ;Dimmer_B1.c: 111: char value = 0;
 15751  1C65  01A2               	clrf	getDimmerIntr_DimmingValue@value
 15752                           
 15753                           ;Dimmer_B1.c: 113: if (lights == 1) {
 15754  1C66  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 15755  1C67  3A01               	xorlw	1
 15756  1C68  1D03               	skipz
 15757  1C69  2C70               	goto	l692
 15758                           
 15759                           ;Dimmer_B1.c: 114: value = DimmerIntr1.DimmingValue;
 15760  1C6A  0021               	movlb	1	; select bank1
 15761  1C6B  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 15762  1C6C  0020               	movlb	0	; select bank0
 15763  1C6D  00A0               	movwf	??_getDimmerIntr_DimmingValue
 15764  1C6E  0820               	movf	??_getDimmerIntr_DimmingValue,w
 15765  1C6F  00A2               	movwf	getDimmerIntr_DimmingValue@value
 15766  1C70                     l692:	
 15767                           
 15768                           ;Dimmer_B1.c: 115: }
 15769                           ;Dimmer_B1.c: 127: return value;
 15770  1C70  0822               	movf	getDimmerIntr_DimmingValue@value,w
 15771  1C71  0008               	return
 15772  1C72                     __end_of_getDimmerIntr_DimmingValue:	
 15773                           
 15774                           	psect	text108
 15775  1E18                     __ptext108:	
 15776 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15777 ;; Defined at:
 15778 ;;		line 988 in file "../src/Dimmer_B1.c"
 15779 ;; Parameters:    Size  Location     Type
 15780 ;;  lights          1    wreg     unsigned char 
 15781 ;; Auto vars:     Size  Location     Type
 15782 ;;  lights          1    0[COMMON] unsigned char 
 15783 ;;  allow           1    2[BANK0 ] unsigned char 
 15784 ;; Return value:  Size  Location     Type
 15785 ;;                  1    wreg      unsigned char 
 15786 ;; Registers used:
 15787 ;;		wreg, status,2, pclath, cstack
 15788 ;; Tracked objects:
 15789 ;;		On entry : 0/0
 15790 ;;		On exit  : 0/0
 15791 ;;		Unchanged: 0/0
 15792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;Total ram usage:        3 bytes
 15798 ;; Hardware stack levels used:    1
 15799 ;; Hardware stack levels required when called:    6
 15800 ;; This function calls:
 15801 ;;		_getLoad_OK
 15802 ;; This function is called by:
 15803 ;;		_setDimmerLights_Main
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           
 15808                           ;psect for function _getDimmerLights_Allow_Condition
 15809  1E18                     _getDimmerLights_Allow_Condition:	
 15810                           
 15811                           ;Dimmer_B1.c: 989: char allow = 0;
 15812                           
 15813                           ;incstack = 0
 15814                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15815  1E18  0020               	movlb	0	; select bank0
 15816  1E19  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 15817                           
 15818                           ;Dimmer_B1.c: 995: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15819  1E1A  01A3               	clrf	_getDimmerLights_Allow_Condition$2263
 15820  1E1B  0AA3               	incf	_getDimmerLights_Allow_Condition$2263,f
 15821  1E1C  319B  234E  319E   	fcall	_getLoad_OK
 15822  1E1F  3800               	iorlw	0
 15823  1E20  1D03               	skipz
 15824  1E21  2E27               	goto	l9396
 15825  1E22  0022               	movlb	2	; select bank2
 15826  1E23  18AC               	btfsc	_Dimmer^(0+256),1
 15827  1E24  2E27               	goto	l9396
 15828  1E25  0020               	movlb	0	; select bank0
 15829  1E26  01A3               	clrf	_getDimmerLights_Allow_Condition$2263
 15830  1E27                     l9396:	
 15831  1E27  0020               	movlb	0	; select bank0
 15832  1E28  0823               	movf	_getDimmerLights_Allow_Condition$2263,w
 15833  1E29  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15834  1E2A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15835  1E2B  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 15836                           
 15837                           ;Dimmer_B1.c: 1022: return allow;
 15838  1E2C  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 15839  1E2D  0008               	return
 15840  1E2E                     __end_of_getDimmerLights_Allow_Condition:	
 15841                           
 15842                           	psect	text109
 15843  1B4E                     __ptext109:	
 15844 ;; *************** function _getLoad_OK *****************
 15845 ;; Defined at:
 15846 ;;		line 272 in file "../src/OverLoad_B1.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;		None
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;  ok              1    0[BANK0 ] unsigned char 
 15851 ;; Return value:  Size  Location     Type
 15852 ;;                  1    wreg      unsigned char 
 15853 ;; Registers used:
 15854 ;;		wreg, status,2
 15855 ;; Tracked objects:
 15856 ;;		On entry : 0/0
 15857 ;;		On exit  : 0/0
 15858 ;;		Unchanged: 0/0
 15859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;Total ram usage:        1 bytes
 15865 ;; Hardware stack levels used:    1
 15866 ;; Hardware stack levels required when called:    5
 15867 ;; This function calls:
 15868 ;;		Nothing
 15869 ;; This function is called by:
 15870 ;;		_DimmerLights_Main
 15871 ;;		_getDimmerLights_Allow_Condition
 15872 ;; This function uses a non-reentrant model
 15873 ;;
 15874                           
 15875                           
 15876                           ;psect for function _getLoad_OK
 15877  1B4E                     _getLoad_OK:	
 15878                           
 15879                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 15880                           
 15881                           ;incstack = 0
 15882                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15883  1B4E  3000               	movlw	0
 15884  1B4F  0022               	movlb	2	; select bank2
 15885  1B50  1BBE               	btfsc	_Load^(0+256),7
 15886  1B51  3001               	movlw	1
 15887  1B52  0020               	movlb	0	; select bank0
 15888  1B53  00A0               	movwf	getLoad_OK@ok
 15889                           
 15890                           ;OverLoad_B1.c: 274: return ok;
 15891  1B54  0820               	movf	getLoad_OK@ok,w
 15892  1B55  0008               	return
 15893  1B56                     __end_of_getLoad_OK:	
 15894                           
 15895                           	psect	text110
 15896  118C                     __ptext110:	
 15897 ;; *************** function _getMain_All_Error_Status *****************
 15898 ;; Defined at:
 15899 ;;		line 424 in file "../src/Main_B1.c"
 15900 ;; Parameters:    Size  Location     Type
 15901 ;;  command         1    wreg     unsigned char 
 15902 ;; Auto vars:     Size  Location     Type
 15903 ;;  command         1    5[BANK0 ] unsigned char 
 15904 ;;  status          1    6[BANK0 ] unsigned char 
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      unsigned char 
 15907 ;; Registers used:
 15908 ;;		wreg, status,2, status,0
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15917 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;Total ram usage:        7 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:    5
 15921 ;; This function calls:
 15922 ;;		Nothing
 15923 ;; This function is called by:
 15924 ;;		_DimmerLights_Main
 15925 ;;		_Exception_Main
 15926 ;;		_Load_Main
 15927 ;;		_setTemp_Main
 15928 ;;		_getRxData
 15929 ;;		_setSw_Main
 15930 ;; This function uses a non-reentrant model
 15931 ;;
 15932                           
 15933                           
 15934                           ;psect for function _getMain_All_Error_Status
 15935  118C                     _getMain_All_Error_Status:	
 15936                           
 15937                           ;incstack = 0
 15938                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15939                           ;getMain_All_Error_Status@command stored from wreg
 15940  118C  0020               	movlb	0	; select bank0
 15941  118D  00A5               	movwf	getMain_All_Error_Status@command
 15942                           
 15943                           ;Main_B1.c: 425: char status = 0;
 15944  118E  01A6               	clrf	getMain_All_Error_Status@status
 15945                           
 15946                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 15947  118F  08A6               	movf	getMain_All_Error_Status@status,f
 15948  1190  1D03               	skipz
 15949  1191  29A6               	goto	l9168
 15950  1192  0825               	movf	getMain_All_Error_Status@command,w
 15951  1193  3A02               	xorlw	2
 15952  1194  1903               	skipnz
 15953  1195  29A6               	goto	l9168
 15954                           
 15955                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 15956  1196  0021               	movlb	1	; select bank1
 15957  1197  18D1               	btfsc	_Temp^(0+128),1
 15958  1198  299D               	goto	l9166
 15959  1199  0020               	movlb	0	; select bank0
 15960  119A  01A1               	clrf	_getMain_All_Error_Status$3582
 15961  119B  01A2               	clrf	_getMain_All_Error_Status$3582+1
 15962  119C  29A2               	goto	l1471
 15963  119D                     l9166:	
 15964  119D  3002               	movlw	2
 15965  119E  0020               	movlb	0	; select bank0
 15966  119F  00A1               	movwf	_getMain_All_Error_Status$3582
 15967  11A0  3000               	movlw	0
 15968  11A1  00A2               	movwf	_getMain_All_Error_Status$3582+1
 15969  11A2                     l1471:	
 15970  11A2  0821               	movf	_getMain_All_Error_Status$3582,w
 15971  11A3  00A0               	movwf	??_getMain_All_Error_Status
 15972  11A4  0820               	movf	??_getMain_All_Error_Status,w
 15973  11A5  00A6               	movwf	getMain_All_Error_Status@status
 15974  11A6                     l9168:	
 15975                           
 15976                           ;Main_B1.c: 438: }
 15977                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 15978  11A6  08A6               	movf	getMain_All_Error_Status@status,f
 15979  11A7  1D03               	skipz
 15980  11A8  29BD               	goto	l1472
 15981  11A9  0825               	movf	getMain_All_Error_Status@command,w
 15982  11AA  3A03               	xorlw	3
 15983  11AB  1903               	skipnz
 15984  11AC  29BD               	goto	l1472
 15985                           
 15986                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 15987  11AD  0022               	movlb	2	; select bank2
 15988  11AE  1ABE               	btfsc	_Load^(0+256),5
 15989  11AF  29B4               	goto	l9176
 15990  11B0  0020               	movlb	0	; select bank0
 15991  11B1  01A3               	clrf	_getMain_All_Error_Status$3583
 15992  11B2  01A4               	clrf	_getMain_All_Error_Status$3583+1
 15993  11B3  29B9               	goto	l1476
 15994  11B4                     l9176:	
 15995  11B4  3003               	movlw	3
 15996  11B5  0020               	movlb	0	; select bank0
 15997  11B6  00A3               	movwf	_getMain_All_Error_Status$3583
 15998  11B7  3000               	movlw	0
 15999  11B8  00A4               	movwf	_getMain_All_Error_Status$3583+1
 16000  11B9                     l1476:	
 16001  11B9  0823               	movf	_getMain_All_Error_Status$3583,w
 16002  11BA  00A0               	movwf	??_getMain_All_Error_Status
 16003  11BB  0820               	movf	??_getMain_All_Error_Status,w
 16004  11BC  00A6               	movwf	getMain_All_Error_Status@status
 16005  11BD                     l1472:	
 16006                           
 16007                           ;Main_B1.c: 445: }
 16008                           ;Main_B1.c: 455: return status;
 16009  11BD  0826               	movf	getMain_All_Error_Status@status,w
 16010  11BE  0008               	return
 16011  11BF                     __end_of_getMain_All_Error_Status:	
 16012                           
 16013                           	psect	text111
 16014  1B40                     __ptext111:	
 16015 ;; *************** function _DimmerLights_Initialization *****************
 16016 ;; Defined at:
 16017 ;;		line 640 in file "../src/Dimmer_B1.c"
 16018 ;; Parameters:    Size  Location     Type
 16019 ;;		None
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;		None
 16022 ;; Return value:  Size  Location     Type
 16023 ;;		None               void
 16024 ;; Registers used:
 16025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16026 ;; Tracked objects:
 16027 ;;		On entry : 0/0
 16028 ;;		On exit  : 0/0
 16029 ;;		Unchanged: 0/0
 16030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;Total ram usage:        0 bytes
 16036 ;; Hardware stack levels used:    1
 16037 ;; Hardware stack levels required when called:    9
 16038 ;; This function calls:
 16039 ;;		_DimmerIntr_Initialization
 16040 ;;		_setDimmerLights_Initialization
 16041 ;; This function is called by:
 16042 ;;		_main
 16043 ;; This function uses a non-reentrant model
 16044 ;;
 16045                           
 16046                           
 16047                           ;psect for function _DimmerLights_Initialization
 16048  1B40                     _DimmerLights_Initialization:	
 16049                           
 16050                           ;Dimmer_B1.c: 642: setDimmerLights_Initialization(1);
 16051                           
 16052                           ;incstack = 0
 16053                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16054  1B40  3001               	movlw	1
 16055  1B41  319A  22ED  319B   	fcall	_setDimmerLights_Initialization
 16056                           
 16057                           ;Dimmer_B1.c: 652: DimmerIntr_Initialization();
 16058  1B44  3195  25A5         	fcall	_DimmerIntr_Initialization
 16059  1B46  0008               	return
 16060  1B47                     __end_of_DimmerLights_Initialization:	
 16061                           
 16062                           	psect	text112
 16063  1AED                     __ptext112:	
 16064 ;; *************** function _setDimmerLights_Initialization *****************
 16065 ;; Defined at:
 16066 ;;		line 656 in file "../src/Dimmer_B1.c"
 16067 ;; Parameters:    Size  Location     Type
 16068 ;;  lights          1    wreg     unsigned char 
 16069 ;; Auto vars:     Size  Location     Type
 16070 ;;  lights          1    0[COMMON] unsigned char 
 16071 ;; Return value:  Size  Location     Type
 16072 ;;		None               void
 16073 ;; Registers used:
 16074 ;;		wreg
 16075 ;; Tracked objects:
 16076 ;;		On entry : 0/0
 16077 ;;		On exit  : 0/0
 16078 ;;		Unchanged: 0/0
 16079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;Total ram usage:        0 bytes
 16085 ;; Hardware stack levels used:    1
 16086 ;; Hardware stack levels required when called:    5
 16087 ;; This function calls:
 16088 ;;		Nothing
 16089 ;; This function is called by:
 16090 ;;		_DimmerLights_Initialization
 16091 ;; This function uses a non-reentrant model
 16092 ;;
 16093                           
 16094                           
 16095                           ;psect for function _setDimmerLights_Initialization
 16096  1AED                     _setDimmerLights_Initialization:	
 16097                           
 16098                           ;incstack = 0
 16099                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16100  1AED  0008               	return
 16101  1AEE                     __end_of_setDimmerLights_Initialization:	
 16102                           
 16103                           	psect	text113
 16104  15A5                     __ptext113:	
 16105 ;; *************** function _DimmerIntr_Initialization *****************
 16106 ;; Defined at:
 16107 ;;		line 7 in file "../src/Dimmer_B1.c"
 16108 ;; Parameters:    Size  Location     Type
 16109 ;;		None
 16110 ;; Auto vars:     Size  Location     Type
 16111 ;;		None
 16112 ;; Return value:  Size  Location     Type
 16113 ;;		None               void
 16114 ;; Registers used:
 16115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16116 ;; Tracked objects:
 16117 ;;		On entry : 0/0
 16118 ;;		On exit  : 0/0
 16119 ;;		Unchanged: 0/0
 16120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16124 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16125 ;;Total ram usage:        2 bytes
 16126 ;; Hardware stack levels used:    1
 16127 ;; Hardware stack levels required when called:    8
 16128 ;; This function calls:
 16129 ;;		_Division
 16130 ;;		_getDimmerLights_PercentToValue
 16131 ;;		_getDimmerLights_ValueToPercent
 16132 ;;		_setMemory_Modify
 16133 ;; This function is called by:
 16134 ;;		_DimmerLights_Initialization
 16135 ;; This function uses a non-reentrant model
 16136 ;;
 16137                           
 16138                           
 16139                           ;psect for function _DimmerIntr_Initialization
 16140  15A5                     _DimmerIntr_Initialization:	
 16141                           
 16142                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16143                           
 16144                           ;incstack = 0
 16145                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16146  15A5  3007               	movlw	7
 16147  15A6  0020               	movlb	0	; select bank0
 16148  15A7  00E2               	movwf	??_DimmerIntr_Initialization
 16149  15A8  0862               	movf	??_DimmerIntr_Initialization,w
 16150  15A9  0021               	movlb	1	; select bank1
 16151  15AA  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16152                           
 16153                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(80*0.6));
 16154  15AB  3030               	movlw	48
 16155  15AC  0020               	movlb	0	; select bank0
 16156  15AD  00E2               	movwf	??_DimmerIntr_Initialization
 16157  15AE  0862               	movf	??_DimmerIntr_Initialization,w
 16158  15AF  0021               	movlb	1	; select bank1
 16159  15B0  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16160                           
 16161                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16162  15B1  3006               	movlw	6
 16163  15B2  0020               	movlb	0	; select bank0
 16164  15B3  00E2               	movwf	??_DimmerIntr_Initialization
 16165  15B4  0862               	movf	??_DimmerIntr_Initialization,w
 16166  15B5  0021               	movlb	1	; select bank1
 16167  15B6  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16168                           
 16169                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16170  15B7  1E38               	btfss	(_myMain^(0+128)+10),4
 16171  15B8  2DC9               	goto	l9626
 16172                           
 16173                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(80*0.6)));
 16174  15B9  3030               	movlw	48
 16175  15BA  3196  26CB  3195   	fcall	_getDimmerLights_ValueToPercent
 16176  15BD  0020               	movlb	0	; select bank0
 16177  15BE  00E2               	movwf	??_DimmerIntr_Initialization
 16178  15BF  0021               	movlb	1	; select bank1
 16179  15C0  0863               	movf	_product^(0+128),w
 16180  15C1  3E15               	addlw	21
 16181  15C2  0086               	movwf	6
 16182  15C3  3002               	movlw	2	; select bank4/5
 16183  15C4  0087               	movwf	7
 16184  15C5  0020               	movlb	0	; select bank0
 16185  15C6  0862               	movf	??_DimmerIntr_Initialization,w
 16186  15C7  0081               	movwf	1
 16187                           
 16188                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16189  15C8  0021               	movlb	1	; select bank1
 16190  15C9                     l9626:	
 16191                           ;Dimmer_B1.c: 19: } else {
 16192                           
 16193                           
 16194                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16195  15C9  0863               	movf	_product^(0+128),w
 16196  15CA  3E15               	addlw	21
 16197  15CB  0086               	movwf	6
 16198  15CC  3002               	movlw	2	; select bank4/5
 16199  15CD  0087               	movwf	7
 16200  15CE  0801               	movf	1,w
 16201  15CF  3196  2666  3195   	fcall	_getDimmerLights_PercentToValue
 16202  15D2  0020               	movlb	0	; select bank0
 16203  15D3  00E2               	movwf	??_DimmerIntr_Initialization
 16204  15D4  0862               	movf	??_DimmerIntr_Initialization,w
 16205  15D5  0021               	movlb	1	; select bank1
 16206  15D6  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16207                           
 16208                           ;Dimmer_B1.c: 21: }
 16209                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 16210  15D7  3002               	movlw	2
 16211  15D8  0020               	movlb	0	; select bank0
 16212  15D9  00E2               	movwf	??_DimmerIntr_Initialization
 16213  15DA  0862               	movf	??_DimmerIntr_Initialization,w
 16214  15DB  00A5               	movwf	Division@num
 16215  15DC  0021               	movlb	1	; select bank1
 16216  15DD  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 16217  15DE  319C  2454  3195   	fcall	_Division
 16218  15E1  0020               	movlb	0	; select bank0
 16219  15E2  00E3               	movwf	??_DimmerIntr_Initialization+1
 16220  15E3  0863               	movf	??_DimmerIntr_Initialization+1,w
 16221  15E4  0021               	movlb	1	; select bank1
 16222  15E5  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 16223                           
 16224                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.Di
      +                          mmingValue);
 16225  15E6  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 16226  15E7  3AFF               	xorlw	255
 16227  15E8  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 16228  15E9  3E3C               	addlw	60
 16229  15EA  0020               	movlb	0	; select bank0
 16230  15EB  00E2               	movwf	??_DimmerIntr_Initialization
 16231  15EC  0862               	movf	??_DimmerIntr_Initialization,w
 16232  15ED  0021               	movlb	1	; select bank1
 16233  15EE  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 16234                           
 16235                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16236  15EF  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 16237  15F0  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 16238  15F1  0020               	movlb	0	; select bank0
 16239  15F2  00E2               	movwf	??_DimmerIntr_Initialization
 16240  15F3  0862               	movf	??_DimmerIntr_Initialization,w
 16241  15F4  0021               	movlb	1	; select bank1
 16242  15F5  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 16243                           
 16244                           ;Dimmer_B1.c: 33: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16245  15F6  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 16246  15F7  3E01               	addlw	1
 16247  15F8  0020               	movlb	0	; select bank0
 16248  15F9  00E2               	movwf	??_DimmerIntr_Initialization
 16249  15FA  0862               	movf	??_DimmerIntr_Initialization,w
 16250  15FB  0021               	movlb	1	; select bank1
 16251  15FC  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 16252                           
 16253                           ;Dimmer_B1.c: 66: if (myMain.InitDimmer == 1) {
 16254  15FD  1E38               	btfss	(_myMain^(0+128)+10),4
 16255  15FE  0008               	return
 16256                           
 16257                           ;Dimmer_B1.c: 67: myMain.InitDimmer = 0;
 16258  15FF  1238               	bcf	(_myMain^(0+128)+10),4
 16259                           
 16260                           ;Dimmer_B1.c: 68: myMain.SaveDimmer = 1;
 16261  1600  16B8               	bsf	(_myMain^(0+128)+10),5
 16262                           
 16263                           ;Dimmer_B1.c: 69: setMemory_Modify(1);
 16264  1601  3001               	movlw	1
 16265  1602  319D  2551         	fcall	_setMemory_Modify
 16266  1604  0008               	return
 16267  1605                     __end_of_DimmerIntr_Initialization:	
 16268                           
 16269                           	psect	text114
 16270  1D51                     __ptext114:	
 16271 ;; *************** function _setMemory_Modify *****************
 16272 ;; Defined at:
 16273 ;;		line 1083 in file "../src/MCU_B1.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;  command         1    wreg     unsigned char 
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  command         1    1[BANK0 ] unsigned char 
 16278 ;; Return value:  Size  Location     Type
 16279 ;;		None               void
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;Total ram usage:        2 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    5
 16294 ;; This function calls:
 16295 ;;		Nothing
 16296 ;; This function is called by:
 16297 ;;		_DimmerIntr_Initialization
 16298 ;;		_setDimmerLights_Dimming
 16299 ;;		_setLog_Code
 16300 ;;		_setRFSW_AdjControl
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           
 16305                           ;psect for function _setMemory_Modify
 16306  1D51                     _setMemory_Modify:	
 16307                           
 16308                           ;incstack = 0
 16309                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16310                           ;setMemory_Modify@command stored from wreg
 16311  1D51  0020               	movlb	0	; select bank0
 16312  1D52  00A1               	movwf	setMemory_Modify@command
 16313                           
 16314                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16315  1D53  0821               	movf	setMemory_Modify@command,w
 16316  1D54  3A01               	xorlw	1
 16317  1D55  3000               	movlw	0
 16318  1D56  1903               	skipnz
 16319  1D57  3001               	movlw	1
 16320  1D58  00A0               	movwf	??_setMemory_Modify
 16321  1D59  0024               	movlb	4	; select bank4
 16322  1D5A  0844               	movf	(_Memory^(0+512)+36),w
 16323  1D5B  0020               	movlb	0	; select bank0
 16324  1D5C  0620               	xorwf	??_setMemory_Modify,w
 16325  1D5D  39FE               	andlw	-2
 16326  1D5E  0620               	xorwf	??_setMemory_Modify,w
 16327  1D5F  0024               	movlb	4	; select bank4
 16328  1D60  00C4               	movwf	(_Memory^(0+512)+36)
 16329                           
 16330                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16331  1D61  01C2               	clrf	(_Memory^(0+512)+34)
 16332  1D62  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16333  1D63  0008               	return
 16334  1D64                     __end_of_setMemory_Modify:	
 16335                           
 16336                           	psect	text115
 16337  16CB                     __ptext115:	
 16338 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16339 ;; Defined at:
 16340 ;;		line 1127 in file "../src/Dimmer_B1.c"
 16341 ;; Parameters:    Size  Location     Type
 16342 ;;  value           1    wreg     unsigned char 
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;  value           1   62[BANK0 ] unsigned char 
 16345 ;;  i               3   63[BANK0 ] float 
 16346 ;; Return value:  Size  Location     Type
 16347 ;;                  1    wreg      unsigned char 
 16348 ;; Registers used:
 16349 ;;		wreg, status,2, status,0, pclath, cstack
 16350 ;; Tracked objects:
 16351 ;;		On entry : 0/0
 16352 ;;		On exit  : 0/0
 16353 ;;		Unchanged: 0/0
 16354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;Total ram usage:        6 bytes
 16360 ;; Hardware stack levels used:    1
 16361 ;; Hardware stack levels required when called:    7
 16362 ;; This function calls:
 16363 ;;		___awtoft
 16364 ;;		___ftadd
 16365 ;;		___ftdiv
 16366 ;;		___ftneg
 16367 ;;		___fttol
 16368 ;; This function is called by:
 16369 ;;		_DimmerIntr_Initialization
 16370 ;;		_setDimmerLights_Dimming
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           
 16375                           ;psect for function _getDimmerLights_ValueToPercent
 16376  16CB                     _getDimmerLights_ValueToPercent:	
 16377                           
 16378                           ;incstack = 0
 16379                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16380                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16381  16CB  0020               	movlb	0	; select bank0
 16382  16CC  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16383                           
 16384                           ;Dimmer_B1.c: 1135: float i = ((char)(80*0.6)) - ((char)(10*0.6));
 16385  16CD  3000               	movlw	0
 16386  16CE  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16387  16CF  3028               	movlw	40
 16388  16D0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16389  16D1  3042               	movlw	66
 16390  16D2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16391                           
 16392                           ;Dimmer_B1.c: 1136: i /= 100;
 16393  16D3  3000               	movlw	0
 16394  16D4  00AE               	movwf	___ftdiv@f2
 16395  16D5  30C8               	movlw	200
 16396  16D6  00AF               	movwf	___ftdiv@f2+1
 16397  16D7  3042               	movlw	66
 16398  16D8  00B0               	movwf	___ftdiv@f2+2
 16399  16D9  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16400  16DA  00B1               	movwf	___ftdiv@f1
 16401  16DB  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16402  16DC  00B2               	movwf	___ftdiv@f1+1
 16403  16DD  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16404  16DE  00B3               	movwf	___ftdiv@f1+2
 16405  16DF  318D  2537  3196   	fcall	___ftdiv
 16406  16E2  0020               	movlb	0	; select bank0
 16407  16E3  082E               	movf	?___ftdiv,w
 16408  16E4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16409  16E5  082F               	movf	?___ftdiv+1,w
 16410  16E6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16411  16E7  0830               	movf	?___ftdiv+2,w
 16412  16E8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16413                           
 16414                           ;Dimmer_B1.c: 1138: return (char) (100 - ((((char)(80*0.6)) - value) / i));
 16415  16E9  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16416  16EA  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16417  16EB  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16418  16EC  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16419  16ED  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16420  16EE  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16421  16EF  1903               	skipnz
 16422  16F0  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16423  16F1  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16424  16F2  3E30               	addlw	48
 16425  16F3  00A8               	movwf	___awtoft@c
 16426  16F4  3000               	movlw	0
 16427  16F5  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16428  16F6  00A9               	movwf	___awtoft@c+1
 16429  16F7  3190  204A  3196   	fcall	___awtoft
 16430  16FA  0020               	movlb	0	; select bank0
 16431  16FB  0828               	movf	?___awtoft,w
 16432  16FC  00B1               	movwf	___ftdiv@f1
 16433  16FD  0829               	movf	?___awtoft+1,w
 16434  16FE  00B2               	movwf	___ftdiv@f1+1
 16435  16FF  082A               	movf	?___awtoft+2,w
 16436  1700  00B3               	movwf	___ftdiv@f1+2
 16437  1701  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16438  1702  00AE               	movwf	___ftdiv@f2
 16439  1703  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16440  1704  00AF               	movwf	___ftdiv@f2+1
 16441  1705  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16442  1706  00B0               	movwf	___ftdiv@f2+2
 16443  1707  318D  2537  3196   	fcall	___ftdiv
 16444  170A  0020               	movlb	0	; select bank0
 16445  170B  082E               	movf	?___ftdiv,w
 16446  170C  00BE               	movwf	___ftneg@f1
 16447  170D  082F               	movf	?___ftdiv+1,w
 16448  170E  00BF               	movwf	___ftneg@f1+1
 16449  170F  0830               	movf	?___ftdiv+2,w
 16450  1710  00C0               	movwf	___ftneg@f1+2
 16451  1711  319B  236F  3196   	fcall	___ftneg
 16452  1714  0020               	movlb	0	; select bank0
 16453  1715  083E               	movf	?___ftneg,w
 16454  1716  00C4               	movwf	___ftadd@f2
 16455  1717  083F               	movf	?___ftneg+1,w
 16456  1718  00C5               	movwf	___ftadd@f2+1
 16457  1719  0840               	movf	?___ftneg+2,w
 16458  171A  00C6               	movwf	___ftadd@f2+2
 16459  171B  3000               	movlw	0
 16460  171C  00C1               	movwf	___ftadd@f1
 16461  171D  30C8               	movlw	200
 16462  171E  00C2               	movwf	___ftadd@f1+1
 16463  171F  3042               	movlw	66
 16464  1720  00C3               	movwf	___ftadd@f1+2
 16465  1721  3183  2389  3196   	fcall	___ftadd
 16466  1724  0020               	movlb	0	; select bank0
 16467  1725  0841               	movf	?___ftadd,w
 16468  1726  00CE               	movwf	___fttol@f1
 16469  1727  0842               	movf	?___ftadd+1,w
 16470  1728  00CF               	movwf	___fttol@f1+1
 16471  1729  0843               	movf	?___ftadd+2,w
 16472  172A  00D0               	movwf	___fttol@f1+2
 16473  172B  318C  2424         	fcall	___fttol
 16474  172D  0020               	movlb	0	; select bank0
 16475  172E  084E               	movf	?___fttol,w
 16476  172F  0008               	return
 16477  1730                     __end_of_getDimmerLights_ValueToPercent:	
 16478                           
 16479                           	psect	text116
 16480  1666                     __ptext116:	
 16481 ;; *************** function _getDimmerLights_PercentToValue *****************
 16482 ;; Defined at:
 16483 ;;		line 1111 in file "../src/Dimmer_B1.c"
 16484 ;; Parameters:    Size  Location     Type
 16485 ;;  value           1    wreg     unsigned char 
 16486 ;; Auto vars:     Size  Location     Type
 16487 ;;  value           1   62[BANK0 ] unsigned char 
 16488 ;;  i               3   63[BANK0 ] float 
 16489 ;; Return value:  Size  Location     Type
 16490 ;;                  1    wreg      unsigned char 
 16491 ;; Registers used:
 16492 ;;		wreg, status,2, status,0, pclath, cstack
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;Total ram usage:        6 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    7
 16505 ;; This function calls:
 16506 ;;		___awtoft
 16507 ;;		___ftadd
 16508 ;;		___ftdiv
 16509 ;;		___ftmul
 16510 ;;		___ftneg
 16511 ;;		___fttol
 16512 ;; This function is called by:
 16513 ;;		_DimmerIntr_Initialization
 16514 ;;		_setDimmerLights_OnOff
 16515 ;;		_setRFSW_AdjControl
 16516 ;; This function uses a non-reentrant model
 16517 ;;
 16518                           
 16519                           
 16520                           ;psect for function _getDimmerLights_PercentToValue
 16521  1666                     _getDimmerLights_PercentToValue:	
 16522                           
 16523                           ;incstack = 0
 16524                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16525                           ;getDimmerLights_PercentToValue@value stored from wreg
 16526  1666  0020               	movlb	0	; select bank0
 16527  1667  00DE               	movwf	getDimmerLights_PercentToValue@value
 16528                           
 16529                           ;Dimmer_B1.c: 1119: float i = ((char)(80*0.6)) - ((char)(10*0.6));
 16530  1668  3000               	movlw	0
 16531  1669  00DF               	movwf	getDimmerLights_PercentToValue@i
 16532  166A  3028               	movlw	40
 16533  166B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16534  166C  3042               	movlw	66
 16535  166D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16536                           
 16537                           ;Dimmer_B1.c: 1120: i /= 100;
 16538  166E  3000               	movlw	0
 16539  166F  00AE               	movwf	___ftdiv@f2
 16540  1670  30C8               	movlw	200
 16541  1671  00AF               	movwf	___ftdiv@f2+1
 16542  1672  3042               	movlw	66
 16543  1673  00B0               	movwf	___ftdiv@f2+2
 16544  1674  085F               	movf	getDimmerLights_PercentToValue@i,w
 16545  1675  00B1               	movwf	___ftdiv@f1
 16546  1676  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16547  1677  00B2               	movwf	___ftdiv@f1+1
 16548  1678  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16549  1679  00B3               	movwf	___ftdiv@f1+2
 16550  167A  318D  2537  3196   	fcall	___ftdiv
 16551  167D  0020               	movlb	0	; select bank0
 16552  167E  082E               	movf	?___ftdiv,w
 16553  167F  00DF               	movwf	getDimmerLights_PercentToValue@i
 16554  1680  082F               	movf	?___ftdiv+1,w
 16555  1681  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16556  1682  0830               	movf	?___ftdiv+2,w
 16557  1683  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16558                           
 16559                           ;Dimmer_B1.c: 1122: return (char) (((char)(80*0.6)) - ((100 - value) * i));
 16560  1684  085E               	movf	getDimmerLights_PercentToValue@value,w
 16561  1685  00DC               	movwf	??_getDimmerLights_PercentToValue
 16562  1686  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16563  1687  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16564  1688  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16565  1689  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16566  168A  1903               	skipnz
 16567  168B  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16568  168C  085C               	movf	??_getDimmerLights_PercentToValue,w
 16569  168D  3E64               	addlw	100
 16570  168E  00A8               	movwf	___awtoft@c
 16571  168F  3000               	movlw	0
 16572  1690  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16573  1691  00A9               	movwf	___awtoft@c+1
 16574  1692  3190  204A  3196   	fcall	___awtoft
 16575  1695  0020               	movlb	0	; select bank0
 16576  1696  0828               	movf	?___awtoft,w
 16577  1697  00B1               	movwf	___ftmul@f2
 16578  1698  0829               	movf	?___awtoft+1,w
 16579  1699  00B2               	movwf	___ftmul@f2+1
 16580  169A  082A               	movf	?___awtoft+2,w
 16581  169B  00B3               	movwf	___ftmul@f2+2
 16582  169C  085F               	movf	getDimmerLights_PercentToValue@i,w
 16583  169D  00AE               	movwf	___ftmul@f1
 16584  169E  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16585  169F  00AF               	movwf	___ftmul@f1+1
 16586  16A0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16587  16A1  00B0               	movwf	___ftmul@f1+2
 16588  16A2  318E  2691  3196   	fcall	___ftmul
 16589  16A5  0020               	movlb	0	; select bank0
 16590  16A6  082E               	movf	?___ftmul,w
 16591  16A7  00BE               	movwf	___ftneg@f1
 16592  16A8  082F               	movf	?___ftmul+1,w
 16593  16A9  00BF               	movwf	___ftneg@f1+1
 16594  16AA  0830               	movf	?___ftmul+2,w
 16595  16AB  00C0               	movwf	___ftneg@f1+2
 16596  16AC  319B  236F  3196   	fcall	___ftneg
 16597  16AF  0020               	movlb	0	; select bank0
 16598  16B0  083E               	movf	?___ftneg,w
 16599  16B1  00C4               	movwf	___ftadd@f2
 16600  16B2  083F               	movf	?___ftneg+1,w
 16601  16B3  00C5               	movwf	___ftadd@f2+1
 16602  16B4  0840               	movf	?___ftneg+2,w
 16603  16B5  00C6               	movwf	___ftadd@f2+2
 16604  16B6  3000               	movlw	0
 16605  16B7  00C1               	movwf	___ftadd@f1
 16606  16B8  3040               	movlw	64
 16607  16B9  00C2               	movwf	___ftadd@f1+1
 16608  16BA  3042               	movlw	66
 16609  16BB  00C3               	movwf	___ftadd@f1+2
 16610  16BC  3183  2389  3196   	fcall	___ftadd
 16611  16BF  0020               	movlb	0	; select bank0
 16612  16C0  0841               	movf	?___ftadd,w
 16613  16C1  00CE               	movwf	___fttol@f1
 16614  16C2  0842               	movf	?___ftadd+1,w
 16615  16C3  00CF               	movwf	___fttol@f1+1
 16616  16C4  0843               	movf	?___ftadd+2,w
 16617  16C5  00D0               	movwf	___fttol@f1+2
 16618  16C6  318C  2424         	fcall	___fttol
 16619  16C8  0020               	movlb	0	; select bank0
 16620  16C9  084E               	movf	?___fttol,w
 16621  16CA  0008               	return
 16622  16CB                     __end_of_getDimmerLights_PercentToValue:	
 16623                           
 16624                           	psect	text117
 16625  0C24                     __ptext117:	
 16626 ;; *************** function ___fttol *****************
 16627 ;; Defined at:
 16628 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;  f1              3   46[BANK0 ] float 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  lval            4   55[BANK0 ] unsigned long 
 16633 ;;  exp1            1   59[BANK0 ] unsigned char 
 16634 ;;  sign1           1   54[BANK0 ] unsigned char 
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  4   46[BANK0 ] long 
 16637 ;; Registers used:
 16638 ;;		wreg, status,2, status,0
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16644 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16647 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;Total ram usage:       14 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    5
 16651 ;; This function calls:
 16652 ;;		Nothing
 16653 ;; This function is called by:
 16654 ;;		_getDimmerLights_PercentToValue
 16655 ;;		_getDimmerLights_ValueToPercent
 16656 ;; This function uses a non-reentrant model
 16657 ;;
 16658                           
 16659                           
 16660                           ;psect for function ___fttol
 16661  0C24                     ___fttol:	
 16662                           
 16663                           ;incstack = 0
 16664                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16665  0C24  0020               	movlb	0	; select bank0
 16666  0C25  084E               	movf	___fttol@f1,w
 16667  0C26  00D2               	movwf	??___fttol
 16668  0C27  084F               	movf	___fttol@f1+1,w
 16669  0C28  00D3               	movwf	??___fttol+1
 16670  0C29  0850               	movf	___fttol@f1+2,w
 16671  0C2A  00D4               	movwf	??___fttol+2
 16672  0C2B  1003               	clrc
 16673  0C2C  0D53               	rlf	??___fttol+1,w
 16674  0C2D  0D54               	rlf	??___fttol+2,w
 16675  0C2E  00D5               	movwf	??___fttol+3
 16676  0C2F  0855               	movf	??___fttol+3,w
 16677  0C30  00DB               	movwf	___fttol@exp1
 16678  0C31  08DB               	movf	___fttol@exp1,f
 16679  0C32  1D03               	skipz
 16680  0C33  2C3D               	goto	l8684
 16681  0C34  3000               	movlw	0
 16682  0C35  00D1               	movwf	?___fttol+3
 16683  0C36  3000               	movlw	0
 16684  0C37  00D0               	movwf	?___fttol+2
 16685  0C38  3000               	movlw	0
 16686  0C39  00CF               	movwf	?___fttol+1
 16687  0C3A  3000               	movlw	0
 16688  0C3B  00CE               	movwf	?___fttol
 16689  0C3C  0008               	return
 16690  0C3D                     l8684:	
 16691  0C3D  084E               	movf	___fttol@f1,w
 16692  0C3E  00D2               	movwf	??___fttol
 16693  0C3F  084F               	movf	___fttol@f1+1,w
 16694  0C40  00D3               	movwf	??___fttol+1
 16695  0C41  0850               	movf	___fttol@f1+2,w
 16696  0C42  00D4               	movwf	??___fttol+2
 16697  0C43  3017               	movlw	23
 16698  0C44                     u9445:	
 16699  0C44  36D4               	lsrf	??___fttol+2,f
 16700  0C45  0CD3               	rrf	??___fttol+1,f
 16701  0C46  0CD2               	rrf	??___fttol,f
 16702  0C47  0B89               	decfsz	9,f
 16703  0C48  2C44               	goto	u9445
 16704  0C49  0852               	movf	??___fttol,w
 16705  0C4A  00D5               	movwf	??___fttol+3
 16706  0C4B  0855               	movf	??___fttol+3,w
 16707  0C4C  00D6               	movwf	___fttol@sign1
 16708  0C4D  17CF               	bsf	___fttol@f1+1,7
 16709  0C4E  30FF               	movlw	255
 16710  0C4F  05CE               	andwf	___fttol@f1,f
 16711  0C50  30FF               	movlw	255
 16712  0C51  05CF               	andwf	___fttol@f1+1,f
 16713  0C52  3000               	movlw	0
 16714  0C53  05D0               	andwf	___fttol@f1+2,f
 16715  0C54  084E               	movf	___fttol@f1,w
 16716  0C55  00D7               	movwf	___fttol@lval
 16717  0C56  084F               	movf	___fttol@f1+1,w
 16718  0C57  00D8               	movwf	___fttol@lval+1
 16719  0C58  0850               	movf	___fttol@f1+2,w
 16720  0C59  00D9               	movwf	___fttol@lval+2
 16721  0C5A  01DA               	clrf	___fttol@lval+3
 16722  0C5B  308E               	movlw	142
 16723  0C5C  02DB               	subwf	___fttol@exp1,f
 16724  0C5D  1FDB               	btfss	___fttol@exp1,7
 16725  0C5E  2C7B               	goto	l8704
 16726  0C5F  085B               	movf	___fttol@exp1,w
 16727  0C60  3A80               	xorlw	128
 16728  0C61  3E8F               	addlw	143
 16729  0C62  1803               	skipnc
 16730  0C63  2C6D               	goto	l8702
 16731  0C64  3000               	movlw	0
 16732  0C65  00D1               	movwf	?___fttol+3
 16733  0C66  3000               	movlw	0
 16734  0C67  00D0               	movwf	?___fttol+2
 16735  0C68  3000               	movlw	0
 16736  0C69  00CF               	movwf	?___fttol+1
 16737  0C6A  3000               	movlw	0
 16738  0C6B  00CE               	movwf	?___fttol
 16739  0C6C  0008               	return
 16740  0C6D                     l8702:	
 16741  0C6D  3001               	movlw	1
 16742  0C6E                     u9475:	
 16743  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16744  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16745  0C70  0CD8               	rrf	___fttol@lval+1,f
 16746  0C71  0CD7               	rrf	___fttol@lval,f
 16747  0C72  0B89               	decfsz	9,f
 16748  0C73  2C6E               	goto	u9475
 16749  0C74  3001               	movlw	1
 16750  0C75  00D2               	movwf	??___fttol
 16751  0C76  0852               	movf	??___fttol,w
 16752  0C77  07DB               	addwf	___fttol@exp1,f
 16753  0C78  1903               	btfsc	3,2
 16754  0C79  2C94               	goto	l8714
 16755  0C7A  2C6D               	goto	l8702
 16756  0C7B                     l8704:	
 16757  0C7B  3018               	movlw	24
 16758  0C7C  025B               	subwf	___fttol@exp1,w
 16759  0C7D  1C03               	skipc
 16760  0C7E  2C91               	goto	l8712
 16761  0C7F  3000               	movlw	0
 16762  0C80  00D1               	movwf	?___fttol+3
 16763  0C81  3000               	movlw	0
 16764  0C82  00D0               	movwf	?___fttol+2
 16765  0C83  3000               	movlw	0
 16766  0C84  00CF               	movwf	?___fttol+1
 16767  0C85  3000               	movlw	0
 16768  0C86  00CE               	movwf	?___fttol
 16769  0C87  0008               	return
 16770  0C88                     l8710:	
 16771  0C88  3001               	movlw	1
 16772  0C89                     u9505:	
 16773  0C89  35D7               	lslf	___fttol@lval,f
 16774  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16775  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16776  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16777  0C8D  0B89               	decfsz	9,f
 16778  0C8E  2C89               	goto	u9505
 16779  0C8F  3001               	movlw	1
 16780  0C90  02DB               	subwf	___fttol@exp1,f
 16781  0C91                     l8712:	
 16782  0C91  08DB               	movf	___fttol@exp1,f
 16783  0C92  1D03               	skipz
 16784  0C93  2C88               	goto	l8710
 16785  0C94                     l8714:	
 16786  0C94  0856               	movf	___fttol@sign1,w
 16787  0C95  1903               	btfsc	3,2
 16788  0C96  2CA2               	goto	l8718
 16789  0C97  09D7               	comf	___fttol@lval,f
 16790  0C98  09D8               	comf	___fttol@lval+1,f
 16791  0C99  09D9               	comf	___fttol@lval+2,f
 16792  0C9A  09DA               	comf	___fttol@lval+3,f
 16793  0C9B  0AD7               	incf	___fttol@lval,f
 16794  0C9C  1903               	skipnz
 16795  0C9D  0AD8               	incf	___fttol@lval+1,f
 16796  0C9E  1903               	skipnz
 16797  0C9F  0AD9               	incf	___fttol@lval+2,f
 16798  0CA0  1903               	skipnz
 16799  0CA1  0ADA               	incf	___fttol@lval+3,f
 16800  0CA2                     l8718:	
 16801  0CA2  085A               	movf	___fttol@lval+3,w
 16802  0CA3  00D1               	movwf	?___fttol+3
 16803  0CA4  0859               	movf	___fttol@lval+2,w
 16804  0CA5  00D0               	movwf	?___fttol+2
 16805  0CA6  0858               	movf	___fttol@lval+1,w
 16806  0CA7  00CF               	movwf	?___fttol+1
 16807  0CA8  0857               	movf	___fttol@lval,w
 16808  0CA9  00CE               	movwf	?___fttol
 16809  0CAA  0008               	return
 16810  0CAB                     __end_of___fttol:	
 16811                           
 16812                           	psect	text118
 16813  1B6F                     __ptext118:	
 16814 ;; *************** function ___ftneg *****************
 16815 ;; Defined at:
 16816 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16817 ;; Parameters:    Size  Location     Type
 16818 ;;  f1              3   30[BANK0 ] float 
 16819 ;; Auto vars:     Size  Location     Type
 16820 ;;		None
 16821 ;; Return value:  Size  Location     Type
 16822 ;;                  3   30[BANK0 ] float 
 16823 ;; Registers used:
 16824 ;;		wreg
 16825 ;; Tracked objects:
 16826 ;;		On entry : 0/0
 16827 ;;		On exit  : 0/0
 16828 ;;		Unchanged: 0/0
 16829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16830 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;Total ram usage:        3 bytes
 16835 ;; Hardware stack levels used:    1
 16836 ;; Hardware stack levels required when called:    5
 16837 ;; This function calls:
 16838 ;;		Nothing
 16839 ;; This function is called by:
 16840 ;;		_getDimmerLights_PercentToValue
 16841 ;;		_getDimmerLights_ValueToPercent
 16842 ;; This function uses a non-reentrant model
 16843 ;;
 16844                           
 16845                           
 16846                           ;psect for function ___ftneg
 16847  1B6F                     ___ftneg:	
 16848                           
 16849                           ;incstack = 0
 16850                           ; Regs used in ___ftneg: [wreg]
 16851  1B6F  0020               	movlb	0	; select bank0
 16852  1B70  0840               	movf	___ftneg@f1+2,w
 16853  1B71  043F               	iorwf	___ftneg@f1+1,w
 16854  1B72  043E               	iorwf	___ftneg@f1,w
 16855  1B73  1903               	skipnz
 16856  1B74  0008               	return
 16857  1B75  3080               	movlw	128
 16858  1B76  06C0               	xorwf	___ftneg@f1+2,f
 16859  1B77  0008               	return
 16860  1B78                     __end_of___ftneg:	
 16861                           
 16862                           	psect	text119
 16863  0E91                     __ptext119:	
 16864 ;; *************** function ___ftmul *****************
 16865 ;; Defined at:
 16866 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;  f1              3   14[BANK0 ] float 
 16869 ;;  f2              3   17[BANK0 ] float 
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16872 ;;  sign            1   29[BANK0 ] unsigned char 
 16873 ;;  cntr            1   28[BANK0 ] unsigned char 
 16874 ;;  exp             1   24[BANK0 ] unsigned char 
 16875 ;; Return value:  Size  Location     Type
 16876 ;;                  3   14[BANK0 ] float 
 16877 ;; Registers used:
 16878 ;;		wreg, status,2, status,0, pclath, cstack
 16879 ;; Tracked objects:
 16880 ;;		On entry : 0/0
 16881 ;;		On exit  : 0/0
 16882 ;;		Unchanged: 0/0
 16883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16884 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16887 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16888 ;;Total ram usage:       16 bytes
 16889 ;; Hardware stack levels used:    1
 16890 ;; Hardware stack levels required when called:    6
 16891 ;; This function calls:
 16892 ;;		___ftpack
 16893 ;; This function is called by:
 16894 ;;		_getDimmerLights_PercentToValue
 16895 ;; This function uses a non-reentrant model
 16896 ;;
 16897                           
 16898                           
 16899                           ;psect for function ___ftmul
 16900  0E91                     ___ftmul:	
 16901                           
 16902                           ;incstack = 0
 16903                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16904  0E91  0020               	movlb	0	; select bank0
 16905  0E92  082E               	movf	___ftmul@f1,w
 16906  0E93  00B4               	movwf	??___ftmul
 16907  0E94  082F               	movf	___ftmul@f1+1,w
 16908  0E95  00B5               	movwf	??___ftmul+1
 16909  0E96  0830               	movf	___ftmul@f1+2,w
 16910  0E97  00B6               	movwf	??___ftmul+2
 16911  0E98  1003               	clrc
 16912  0E99  0D35               	rlf	??___ftmul+1,w
 16913  0E9A  0D36               	rlf	??___ftmul+2,w
 16914  0E9B  00B7               	movwf	??___ftmul+3
 16915  0E9C  0837               	movf	??___ftmul+3,w
 16916  0E9D  00B8               	movwf	___ftmul@exp
 16917  0E9E  08B8               	movf	___ftmul@exp,f
 16918  0E9F  1D03               	skipz
 16919  0EA0  2EA8               	goto	l8626
 16920  0EA1  3000               	movlw	0
 16921  0EA2  00AE               	movwf	?___ftmul
 16922  0EA3  3000               	movlw	0
 16923  0EA4  00AF               	movwf	?___ftmul+1
 16924  0EA5  3000               	movlw	0
 16925  0EA6  00B0               	movwf	?___ftmul+2
 16926  0EA7  0008               	return
 16927  0EA8                     l8626:	
 16928  0EA8  0831               	movf	___ftmul@f2,w
 16929  0EA9  00B4               	movwf	??___ftmul
 16930  0EAA  0832               	movf	___ftmul@f2+1,w
 16931  0EAB  00B5               	movwf	??___ftmul+1
 16932  0EAC  0833               	movf	___ftmul@f2+2,w
 16933  0EAD  00B6               	movwf	??___ftmul+2
 16934  0EAE  1003               	clrc
 16935  0EAF  0D35               	rlf	??___ftmul+1,w
 16936  0EB0  0D36               	rlf	??___ftmul+2,w
 16937  0EB1  00B7               	movwf	??___ftmul+3
 16938  0EB2  0837               	movf	??___ftmul+3,w
 16939  0EB3  00BD               	movwf	___ftmul@sign
 16940  0EB4  08BD               	movf	___ftmul@sign,f
 16941  0EB5  1D03               	skipz
 16942  0EB6  2EBE               	goto	l8632
 16943  0EB7  3000               	movlw	0
 16944  0EB8  00AE               	movwf	?___ftmul
 16945  0EB9  3000               	movlw	0
 16946  0EBA  00AF               	movwf	?___ftmul+1
 16947  0EBB  3000               	movlw	0
 16948  0EBC  00B0               	movwf	?___ftmul+2
 16949  0EBD  0008               	return
 16950  0EBE                     l8632:	
 16951  0EBE  083D               	movf	___ftmul@sign,w
 16952  0EBF  3E7B               	addlw	123
 16953  0EC0  00B4               	movwf	??___ftmul
 16954  0EC1  0834               	movf	??___ftmul,w
 16955  0EC2  07B8               	addwf	___ftmul@exp,f
 16956  0EC3  082E               	movf	___ftmul@f1,w
 16957  0EC4  00B4               	movwf	??___ftmul
 16958  0EC5  082F               	movf	___ftmul@f1+1,w
 16959  0EC6  00B5               	movwf	??___ftmul+1
 16960  0EC7  0830               	movf	___ftmul@f1+2,w
 16961  0EC8  00B6               	movwf	??___ftmul+2
 16962  0EC9  3010               	movlw	16
 16963  0ECA                     u9325:	
 16964  0ECA  36B6               	lsrf	??___ftmul+2,f
 16965  0ECB  0CB5               	rrf	??___ftmul+1,f
 16966  0ECC  0CB4               	rrf	??___ftmul,f
 16967  0ECD  0B89               	decfsz	9,f
 16968  0ECE  2ECA               	goto	u9325
 16969  0ECF  0834               	movf	??___ftmul,w
 16970  0ED0  00B7               	movwf	??___ftmul+3
 16971  0ED1  0837               	movf	??___ftmul+3,w
 16972  0ED2  00BD               	movwf	___ftmul@sign
 16973  0ED3  0831               	movf	___ftmul@f2,w
 16974  0ED4  00B4               	movwf	??___ftmul
 16975  0ED5  0832               	movf	___ftmul@f2+1,w
 16976  0ED6  00B5               	movwf	??___ftmul+1
 16977  0ED7  0833               	movf	___ftmul@f2+2,w
 16978  0ED8  00B6               	movwf	??___ftmul+2
 16979  0ED9  3010               	movlw	16
 16980  0EDA                     u9335:	
 16981  0EDA  36B6               	lsrf	??___ftmul+2,f
 16982  0EDB  0CB5               	rrf	??___ftmul+1,f
 16983  0EDC  0CB4               	rrf	??___ftmul,f
 16984  0EDD  0B89               	decfsz	9,f
 16985  0EDE  2EDA               	goto	u9335
 16986  0EDF  0834               	movf	??___ftmul,w
 16987  0EE0  00B7               	movwf	??___ftmul+3
 16988  0EE1  0837               	movf	??___ftmul+3,w
 16989  0EE2  06BD               	xorwf	___ftmul@sign,f
 16990  0EE3  3080               	movlw	128
 16991  0EE4  00B4               	movwf	??___ftmul
 16992  0EE5  0834               	movf	??___ftmul,w
 16993  0EE6  05BD               	andwf	___ftmul@sign,f
 16994  0EE7  17AF               	bsf	___ftmul@f1+1,7
 16995  0EE8  17B2               	bsf	___ftmul@f2+1,7
 16996  0EE9  30FF               	movlw	255
 16997  0EEA  05B1               	andwf	___ftmul@f2,f
 16998  0EEB  30FF               	movlw	255
 16999  0EEC  05B2               	andwf	___ftmul@f2+1,f
 17000  0EED  3000               	movlw	0
 17001  0EEE  05B3               	andwf	___ftmul@f2+2,f
 17002  0EEF  3000               	movlw	0
 17003  0EF0  00B9               	movwf	___ftmul@f3_as_product
 17004  0EF1  3000               	movlw	0
 17005  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 17006  0EF3  3000               	movlw	0
 17007  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 17008  0EF5  3007               	movlw	7
 17009  0EF6  00B4               	movwf	??___ftmul
 17010  0EF7  0834               	movf	??___ftmul,w
 17011  0EF8  00BC               	movwf	___ftmul@cntr
 17012  0EF9                     l8644:	
 17013  0EF9  1C2E               	btfss	___ftmul@f1,0
 17014  0EFA  2F01               	goto	l8648
 17015  0EFB  0831               	movf	___ftmul@f2,w
 17016  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 17017  0EFD  0832               	movf	___ftmul@f2+1,w
 17018  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17019  0EFF  0833               	movf	___ftmul@f2+2,w
 17020  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17021  0F01                     l8648:	
 17022  0F01  3001               	movlw	1
 17023  0F02                     u9355:	
 17024  0F02  36B0               	lsrf	___ftmul@f1+2,f
 17025  0F03  0CAF               	rrf	___ftmul@f1+1,f
 17026  0F04  0CAE               	rrf	___ftmul@f1,f
 17027  0F05  0B89               	decfsz	9,f
 17028  0F06  2F02               	goto	u9355
 17029  0F07  3001               	movlw	1
 17030  0F08                     u9365:	
 17031  0F08  35B1               	lslf	___ftmul@f2,f
 17032  0F09  0DB2               	rlf	___ftmul@f2+1,f
 17033  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 17034  0F0B  0B89               	decfsz	9,f
 17035  0F0C  2F08               	goto	u9365
 17036  0F0D  3001               	movlw	1
 17037  0F0E  02BC               	subwf	___ftmul@cntr,f
 17038  0F0F  1D03               	btfss	3,2
 17039  0F10  2EF9               	goto	l8644
 17040  0F11  3009               	movlw	9
 17041  0F12  00B4               	movwf	??___ftmul
 17042  0F13  0834               	movf	??___ftmul,w
 17043  0F14  00BC               	movwf	___ftmul@cntr
 17044  0F15                     l8656:	
 17045  0F15  1C2E               	btfss	___ftmul@f1,0
 17046  0F16  2F1D               	goto	l8660
 17047  0F17  0831               	movf	___ftmul@f2,w
 17048  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 17049  0F19  0832               	movf	___ftmul@f2+1,w
 17050  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17051  0F1B  0833               	movf	___ftmul@f2+2,w
 17052  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17053  0F1D                     l8660:	
 17054  0F1D  3001               	movlw	1
 17055  0F1E                     u9395:	
 17056  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 17057  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 17058  0F20  0CAE               	rrf	___ftmul@f1,f
 17059  0F21  0B89               	decfsz	9,f
 17060  0F22  2F1E               	goto	u9395
 17061  0F23  3001               	movlw	1
 17062  0F24                     u9405:	
 17063  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17064  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17065  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 17066  0F27  0B89               	decfsz	9,f
 17067  0F28  2F24               	goto	u9405
 17068  0F29  3001               	movlw	1
 17069  0F2A  02BC               	subwf	___ftmul@cntr,f
 17070  0F2B  1D03               	btfss	3,2
 17071  0F2C  2F15               	goto	l8656
 17072  0F2D  0839               	movf	___ftmul@f3_as_product,w
 17073  0F2E  00A0               	movwf	___ftpack@arg
 17074  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17075  0F30  00A1               	movwf	___ftpack@arg+1
 17076  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17077  0F32  00A2               	movwf	___ftpack@arg+2
 17078  0F33  0838               	movf	___ftmul@exp,w
 17079  0F34  00B4               	movwf	??___ftmul
 17080  0F35  0834               	movf	??___ftmul,w
 17081  0F36  00A3               	movwf	___ftpack@exp
 17082  0F37  083D               	movf	___ftmul@sign,w
 17083  0F38  00B5               	movwf	??___ftmul+1
 17084  0F39  0835               	movf	??___ftmul+1,w
 17085  0F3A  00A4               	movwf	___ftpack@sign
 17086  0F3B  3196  2605         	fcall	___ftpack
 17087  0F3D  0020               	movlb	0	; select bank0
 17088  0F3E  0820               	movf	?___ftpack,w
 17089  0F3F  00AE               	movwf	?___ftmul
 17090  0F40  0821               	movf	?___ftpack+1,w
 17091  0F41  00AF               	movwf	?___ftmul+1
 17092  0F42  0822               	movf	?___ftpack+2,w
 17093  0F43  00B0               	movwf	?___ftmul+2
 17094  0F44  0008               	return
 17095  0F45                     __end_of___ftmul:	
 17096                           
 17097                           	psect	text120
 17098  0D37                     __ptext120:	
 17099 ;; *************** function ___ftdiv *****************
 17100 ;; Defined at:
 17101 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17102 ;; Parameters:    Size  Location     Type
 17103 ;;  f2              3   14[BANK0 ] float 
 17104 ;;  f1              3   17[BANK0 ] float 
 17105 ;; Auto vars:     Size  Location     Type
 17106 ;;  f3              3   25[BANK0 ] float 
 17107 ;;  sign            1   29[BANK0 ] unsigned char 
 17108 ;;  exp             1   28[BANK0 ] unsigned char 
 17109 ;;  cntr            1   24[BANK0 ] unsigned char 
 17110 ;; Return value:  Size  Location     Type
 17111 ;;                  3   14[BANK0 ] float 
 17112 ;; Registers used:
 17113 ;;		wreg, status,2, status,0, pclath, cstack
 17114 ;; Tracked objects:
 17115 ;;		On entry : 0/0
 17116 ;;		On exit  : 0/0
 17117 ;;		Unchanged: 0/0
 17118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17119 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17120 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17121 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17122 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17123 ;;Total ram usage:       16 bytes
 17124 ;; Hardware stack levels used:    1
 17125 ;; Hardware stack levels required when called:    6
 17126 ;; This function calls:
 17127 ;;		___ftpack
 17128 ;; This function is called by:
 17129 ;;		_getDimmerLights_PercentToValue
 17130 ;;		_getDimmerLights_ValueToPercent
 17131 ;; This function uses a non-reentrant model
 17132 ;;
 17133                           
 17134                           
 17135                           ;psect for function ___ftdiv
 17136  0D37                     ___ftdiv:	
 17137                           
 17138                           ;incstack = 0
 17139                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17140  0D37  0020               	movlb	0	; select bank0
 17141  0D38  0831               	movf	___ftdiv@f1,w
 17142  0D39  00B4               	movwf	??___ftdiv
 17143  0D3A  0832               	movf	___ftdiv@f1+1,w
 17144  0D3B  00B5               	movwf	??___ftdiv+1
 17145  0D3C  0833               	movf	___ftdiv@f1+2,w
 17146  0D3D  00B6               	movwf	??___ftdiv+2
 17147  0D3E  1003               	clrc
 17148  0D3F  0D35               	rlf	??___ftdiv+1,w
 17149  0D40  0D36               	rlf	??___ftdiv+2,w
 17150  0D41  00B7               	movwf	??___ftdiv+3
 17151  0D42  0837               	movf	??___ftdiv+3,w
 17152  0D43  00BC               	movwf	___ftdiv@exp
 17153  0D44  08BC               	movf	___ftdiv@exp,f
 17154  0D45  1D03               	skipz
 17155  0D46  2D4E               	goto	l8584
 17156  0D47  3000               	movlw	0
 17157  0D48  00AE               	movwf	?___ftdiv
 17158  0D49  3000               	movlw	0
 17159  0D4A  00AF               	movwf	?___ftdiv+1
 17160  0D4B  3000               	movlw	0
 17161  0D4C  00B0               	movwf	?___ftdiv+2
 17162  0D4D  0008               	return
 17163  0D4E                     l8584:	
 17164  0D4E  082E               	movf	___ftdiv@f2,w
 17165  0D4F  00B4               	movwf	??___ftdiv
 17166  0D50  082F               	movf	___ftdiv@f2+1,w
 17167  0D51  00B5               	movwf	??___ftdiv+1
 17168  0D52  0830               	movf	___ftdiv@f2+2,w
 17169  0D53  00B6               	movwf	??___ftdiv+2
 17170  0D54  1003               	clrc
 17171  0D55  0D35               	rlf	??___ftdiv+1,w
 17172  0D56  0D36               	rlf	??___ftdiv+2,w
 17173  0D57  00B7               	movwf	??___ftdiv+3
 17174  0D58  0837               	movf	??___ftdiv+3,w
 17175  0D59  00BD               	movwf	___ftdiv@sign
 17176  0D5A  08BD               	movf	___ftdiv@sign,f
 17177  0D5B  1D03               	skipz
 17178  0D5C  2D64               	goto	l8590
 17179  0D5D  3000               	movlw	0
 17180  0D5E  00AE               	movwf	?___ftdiv
 17181  0D5F  3000               	movlw	0
 17182  0D60  00AF               	movwf	?___ftdiv+1
 17183  0D61  3000               	movlw	0
 17184  0D62  00B0               	movwf	?___ftdiv+2
 17185  0D63  0008               	return
 17186  0D64                     l8590:	
 17187  0D64  3000               	movlw	0
 17188  0D65  00B9               	movwf	___ftdiv@f3
 17189  0D66  3000               	movlw	0
 17190  0D67  00BA               	movwf	___ftdiv@f3+1
 17191  0D68  3000               	movlw	0
 17192  0D69  00BB               	movwf	___ftdiv@f3+2
 17193  0D6A  3089               	movlw	137
 17194  0D6B  073D               	addwf	___ftdiv@sign,w
 17195  0D6C  00B4               	movwf	??___ftdiv
 17196  0D6D  0834               	movf	??___ftdiv,w
 17197  0D6E  02BC               	subwf	___ftdiv@exp,f
 17198  0D6F  0831               	movf	___ftdiv@f1,w
 17199  0D70  00B4               	movwf	??___ftdiv
 17200  0D71  0832               	movf	___ftdiv@f1+1,w
 17201  0D72  00B5               	movwf	??___ftdiv+1
 17202  0D73  0833               	movf	___ftdiv@f1+2,w
 17203  0D74  00B6               	movwf	??___ftdiv+2
 17204  0D75  3010               	movlw	16
 17205  0D76                     u9245:	
 17206  0D76  36B6               	lsrf	??___ftdiv+2,f
 17207  0D77  0CB5               	rrf	??___ftdiv+1,f
 17208  0D78  0CB4               	rrf	??___ftdiv,f
 17209  0D79  0B89               	decfsz	9,f
 17210  0D7A  2D76               	goto	u9245
 17211  0D7B  0834               	movf	??___ftdiv,w
 17212  0D7C  00B7               	movwf	??___ftdiv+3
 17213  0D7D  0837               	movf	??___ftdiv+3,w
 17214  0D7E  00BD               	movwf	___ftdiv@sign
 17215  0D7F  082E               	movf	___ftdiv@f2,w
 17216  0D80  00B4               	movwf	??___ftdiv
 17217  0D81  082F               	movf	___ftdiv@f2+1,w
 17218  0D82  00B5               	movwf	??___ftdiv+1
 17219  0D83  0830               	movf	___ftdiv@f2+2,w
 17220  0D84  00B6               	movwf	??___ftdiv+2
 17221  0D85  3010               	movlw	16
 17222  0D86                     u9255:	
 17223  0D86  36B6               	lsrf	??___ftdiv+2,f
 17224  0D87  0CB5               	rrf	??___ftdiv+1,f
 17225  0D88  0CB4               	rrf	??___ftdiv,f
 17226  0D89  0B89               	decfsz	9,f
 17227  0D8A  2D86               	goto	u9255
 17228  0D8B  0834               	movf	??___ftdiv,w
 17229  0D8C  00B7               	movwf	??___ftdiv+3
 17230  0D8D  0837               	movf	??___ftdiv+3,w
 17231  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17232  0D8F  3080               	movlw	128
 17233  0D90  00B4               	movwf	??___ftdiv
 17234  0D91  0834               	movf	??___ftdiv,w
 17235  0D92  05BD               	andwf	___ftdiv@sign,f
 17236  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17237  0D94  30FF               	movlw	255
 17238  0D95  05B1               	andwf	___ftdiv@f1,f
 17239  0D96  30FF               	movlw	255
 17240  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17241  0D98  3000               	movlw	0
 17242  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17243  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17244  0D9B  30FF               	movlw	255
 17245  0D9C  05AE               	andwf	___ftdiv@f2,f
 17246  0D9D  30FF               	movlw	255
 17247  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17248  0D9F  3000               	movlw	0
 17249  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17250  0DA1  3018               	movlw	24
 17251  0DA2  00B4               	movwf	??___ftdiv
 17252  0DA3  0834               	movf	??___ftdiv,w
 17253  0DA4  00B8               	movwf	___ftdiv@cntr
 17254  0DA5                     l8604:	
 17255  0DA5  3001               	movlw	1
 17256  0DA6                     u9265:	
 17257  0DA6  35B9               	lslf	___ftdiv@f3,f
 17258  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17259  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17260  0DA9  0B89               	decfsz	9,f
 17261  0DAA  2DA6               	goto	u9265
 17262  0DAB  0830               	movf	___ftdiv@f2+2,w
 17263  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17264  0DAD  1D03               	skipz
 17265  0DAE  2DB5               	goto	u9275
 17266  0DAF  082F               	movf	___ftdiv@f2+1,w
 17267  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17268  0DB1  1D03               	skipz
 17269  0DB2  2DB5               	goto	u9275
 17270  0DB3  082E               	movf	___ftdiv@f2,w
 17271  0DB4  0231               	subwf	___ftdiv@f1,w
 17272  0DB5                     u9275:	
 17273  0DB5  1C03               	skipc
 17274  0DB6  2DBE               	goto	l8612
 17275  0DB7  082E               	movf	___ftdiv@f2,w
 17276  0DB8  02B1               	subwf	___ftdiv@f1,f
 17277  0DB9  082F               	movf	___ftdiv@f2+1,w
 17278  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17279  0DBB  0830               	movf	___ftdiv@f2+2,w
 17280  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17281  0DBD  1439               	bsf	___ftdiv@f3,0
 17282  0DBE                     l8612:	
 17283  0DBE  3001               	movlw	1
 17284  0DBF                     u9285:	
 17285  0DBF  35B1               	lslf	___ftdiv@f1,f
 17286  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17287  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17288  0DC2  0B89               	decfsz	9,f
 17289  0DC3  2DBF               	goto	u9285
 17290  0DC4  3001               	movlw	1
 17291  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17292  0DC6  1D03               	btfss	3,2
 17293  0DC7  2DA5               	goto	l8604
 17294  0DC8  0839               	movf	___ftdiv@f3,w
 17295  0DC9  00A0               	movwf	___ftpack@arg
 17296  0DCA  083A               	movf	___ftdiv@f3+1,w
 17297  0DCB  00A1               	movwf	___ftpack@arg+1
 17298  0DCC  083B               	movf	___ftdiv@f3+2,w
 17299  0DCD  00A2               	movwf	___ftpack@arg+2
 17300  0DCE  083C               	movf	___ftdiv@exp,w
 17301  0DCF  00B4               	movwf	??___ftdiv
 17302  0DD0  0834               	movf	??___ftdiv,w
 17303  0DD1  00A3               	movwf	___ftpack@exp
 17304  0DD2  083D               	movf	___ftdiv@sign,w
 17305  0DD3  00B5               	movwf	??___ftdiv+1
 17306  0DD4  0835               	movf	??___ftdiv+1,w
 17307  0DD5  00A4               	movwf	___ftpack@sign
 17308  0DD6  3196  2605         	fcall	___ftpack
 17309  0DD8  0020               	movlb	0	; select bank0
 17310  0DD9  0820               	movf	?___ftpack,w
 17311  0DDA  00AE               	movwf	?___ftdiv
 17312  0DDB  0821               	movf	?___ftpack+1,w
 17313  0DDC  00AF               	movwf	?___ftdiv+1
 17314  0DDD  0822               	movf	?___ftpack+2,w
 17315  0DDE  00B0               	movwf	?___ftdiv+2
 17316  0DDF  0008               	return
 17317  0DE0                     __end_of___ftdiv:	
 17318                           
 17319                           	psect	text121
 17320  0389                     __ptext121:	
 17321 ;; *************** function ___ftadd *****************
 17322 ;; Defined at:
 17323 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17324 ;; Parameters:    Size  Location     Type
 17325 ;;  f1              3   33[BANK0 ] float 
 17326 ;;  f2              3   36[BANK0 ] float 
 17327 ;; Auto vars:     Size  Location     Type
 17328 ;;  exp1            1   45[BANK0 ] unsigned char 
 17329 ;;  exp2            1   44[BANK0 ] unsigned char 
 17330 ;;  sign            1   43[BANK0 ] unsigned char 
 17331 ;; Return value:  Size  Location     Type
 17332 ;;                  3   33[BANK0 ] float 
 17333 ;; Registers used:
 17334 ;;		wreg, status,2, status,0, pclath, cstack
 17335 ;; Tracked objects:
 17336 ;;		On entry : 0/0
 17337 ;;		On exit  : 0/0
 17338 ;;		Unchanged: 0/0
 17339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17340 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17342 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17343 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17344 ;;Total ram usage:       13 bytes
 17345 ;; Hardware stack levels used:    1
 17346 ;; Hardware stack levels required when called:    6
 17347 ;; This function calls:
 17348 ;;		___ftpack
 17349 ;; This function is called by:
 17350 ;;		_getDimmerLights_PercentToValue
 17351 ;;		_getDimmerLights_ValueToPercent
 17352 ;; This function uses a non-reentrant model
 17353 ;;
 17354                           
 17355                           
 17356                           ;psect for function ___ftadd
 17357  0389                     ___ftadd:	
 17358                           
 17359                           ;incstack = 0
 17360                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17361  0389  0020               	movlb	0	; select bank0
 17362  038A  0841               	movf	___ftadd@f1,w
 17363  038B  00C7               	movwf	??___ftadd
 17364  038C  0842               	movf	___ftadd@f1+1,w
 17365  038D  00C8               	movwf	??___ftadd+1
 17366  038E  0843               	movf	___ftadd@f1+2,w
 17367  038F  00C9               	movwf	??___ftadd+2
 17368  0390  1003               	clrc
 17369  0391  0D48               	rlf	??___ftadd+1,w
 17370  0392  0D49               	rlf	??___ftadd+2,w
 17371  0393  00CA               	movwf	??___ftadd+3
 17372  0394  084A               	movf	??___ftadd+3,w
 17373  0395  00CD               	movwf	___ftadd@exp1
 17374  0396  0844               	movf	___ftadd@f2,w
 17375  0397  00C7               	movwf	??___ftadd
 17376  0398  0845               	movf	___ftadd@f2+1,w
 17377  0399  00C8               	movwf	??___ftadd+1
 17378  039A  0846               	movf	___ftadd@f2+2,w
 17379  039B  00C9               	movwf	??___ftadd+2
 17380  039C  1003               	clrc
 17381  039D  0D48               	rlf	??___ftadd+1,w
 17382  039E  0D49               	rlf	??___ftadd+2,w
 17383  039F  00CA               	movwf	??___ftadd+3
 17384  03A0  084A               	movf	??___ftadd+3,w
 17385  03A1  00CC               	movwf	___ftadd@exp2
 17386  03A2  084D               	movf	___ftadd@exp1,w
 17387  03A3  1903               	btfsc	3,2
 17388  03A4  2BB1               	goto	l8514
 17389  03A5  084C               	movf	___ftadd@exp2,w
 17390  03A6  024D               	subwf	___ftadd@exp1,w
 17391  03A7  1803               	skipnc
 17392  03A8  2BB8               	goto	l8518
 17393  03A9  034D               	decf	___ftadd@exp1,w
 17394  03AA  3AFF               	xorlw	255
 17395  03AB  074C               	addwf	___ftadd@exp2,w
 17396  03AC  00C7               	movwf	??___ftadd
 17397  03AD  3019               	movlw	25
 17398  03AE  0247               	subwf	??___ftadd,w
 17399  03AF  1C03               	skipc
 17400  03B0  2BB8               	goto	l8518
 17401  03B1                     l8514:	
 17402  03B1  0844               	movf	___ftadd@f2,w
 17403  03B2  00C1               	movwf	?___ftadd
 17404  03B3  0845               	movf	___ftadd@f2+1,w
 17405  03B4  00C2               	movwf	?___ftadd+1
 17406  03B5  0846               	movf	___ftadd@f2+2,w
 17407  03B6  00C3               	movwf	?___ftadd+2
 17408  03B7  0008               	return
 17409  03B8                     l8518:	
 17410  03B8  084C               	movf	___ftadd@exp2,w
 17411  03B9  1903               	btfsc	3,2
 17412  03BA  0008               	return
 17413  03BB  084D               	movf	___ftadd@exp1,w
 17414  03BC  024C               	subwf	___ftadd@exp2,w
 17415  03BD  1803               	skipnc
 17416  03BE  2BC7               	goto	l8524
 17417  03BF  034C               	decf	___ftadd@exp2,w
 17418  03C0  3AFF               	xorlw	255
 17419  03C1  074D               	addwf	___ftadd@exp1,w
 17420  03C2  00C7               	movwf	??___ftadd
 17421  03C3  3019               	movlw	25
 17422  03C4  0247               	subwf	??___ftadd,w
 17423  03C5  1803               	btfsc	3,0
 17424  03C6  0008               	return
 17425  03C7                     l8524:	
 17426  03C7  3006               	movlw	6
 17427  03C8  00C7               	movwf	??___ftadd
 17428  03C9  0847               	movf	??___ftadd,w
 17429  03CA  00CB               	movwf	___ftadd@sign
 17430  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17431  03CC  17CB               	bsf	___ftadd@sign,7
 17432  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17433  03CE  174B               	bsf	___ftadd@sign,6
 17434  03CF  17C2               	bsf	___ftadd@f1+1,7
 17435  03D0  30FF               	movlw	255
 17436  03D1  05C1               	andwf	___ftadd@f1,f
 17437  03D2  30FF               	movlw	255
 17438  03D3  05C2               	andwf	___ftadd@f1+1,f
 17439  03D4  3000               	movlw	0
 17440  03D5  05C3               	andwf	___ftadd@f1+2,f
 17441  03D6  17C5               	bsf	___ftadd@f2+1,7
 17442  03D7  30FF               	movlw	255
 17443  03D8  05C4               	andwf	___ftadd@f2,f
 17444  03D9  30FF               	movlw	255
 17445  03DA  05C5               	andwf	___ftadd@f2+1,f
 17446  03DB  3000               	movlw	0
 17447  03DC  05C6               	andwf	___ftadd@f2+2,f
 17448  03DD  084C               	movf	___ftadd@exp2,w
 17449  03DE  024D               	subwf	___ftadd@exp1,w
 17450  03DF  1803               	skipnc
 17451  03E0  2C03               	goto	l8546
 17452  03E1                     l8536:	
 17453  03E1  3001               	movlw	1
 17454  03E2                     u9085:	
 17455  03E2  35C4               	lslf	___ftadd@f2,f
 17456  03E3  0DC5               	rlf	___ftadd@f2+1,f
 17457  03E4  0DC6               	rlf	___ftadd@f2+2,f
 17458  03E5  0B89               	decfsz	9,f
 17459  03E6  2BE2               	goto	u9085
 17460  03E7  3001               	movlw	1
 17461  03E8  02CC               	subwf	___ftadd@exp2,f
 17462  03E9  084C               	movf	___ftadd@exp2,w
 17463  03EA  064D               	xorwf	___ftadd@exp1,w
 17464  03EB  1903               	skipnz
 17465  03EC  2BFE               	goto	l8544
 17466  03ED  3001               	movlw	1
 17467  03EE  02CB               	subwf	___ftadd@sign,f
 17468  03EF  084B               	movf	___ftadd@sign,w
 17469  03F0  3907               	andlw	7
 17470  03F1  1903               	btfsc	3,2
 17471  03F2  2BFE               	goto	l8544
 17472  03F3  2BE1               	goto	l8536
 17473  03F4                     l8542:	
 17474  03F4  3001               	movlw	1
 17475  03F5                     u9115:	
 17476  03F5  36C3               	lsrf	___ftadd@f1+2,f
 17477  03F6  0CC2               	rrf	___ftadd@f1+1,f
 17478  03F7  0CC1               	rrf	___ftadd@f1,f
 17479  03F8  0B89               	decfsz	9,f
 17480  03F9  2BF5               	goto	u9115
 17481  03FA  3001               	movlw	1
 17482  03FB  00C7               	movwf	??___ftadd
 17483  03FC  0847               	movf	??___ftadd,w
 17484  03FD  07CD               	addwf	___ftadd@exp1,f
 17485  03FE                     l8544:	
 17486  03FE  084D               	movf	___ftadd@exp1,w
 17487  03FF  064C               	xorwf	___ftadd@exp2,w
 17488  0400  1903               	btfsc	3,2
 17489  0401  2C28               	goto	l2871
 17490  0402  2BF4               	goto	l8542
 17491  0403                     l8546:	
 17492  0403  084D               	movf	___ftadd@exp1,w
 17493  0404  024C               	subwf	___ftadd@exp2,w
 17494  0405  1803               	skipnc
 17495  0406  2C28               	goto	l2871
 17496  0407                     l8548:	
 17497  0407  3001               	movlw	1
 17498  0408                     u9145:	
 17499  0408  35C1               	lslf	___ftadd@f1,f
 17500  0409  0DC2               	rlf	___ftadd@f1+1,f
 17501  040A  0DC3               	rlf	___ftadd@f1+2,f
 17502  040B  0B89               	decfsz	9,f
 17503  040C  2C08               	goto	u9145
 17504  040D  3001               	movlw	1
 17505  040E  02CD               	subwf	___ftadd@exp1,f
 17506  040F  084C               	movf	___ftadd@exp2,w
 17507  0410  064D               	xorwf	___ftadd@exp1,w
 17508  0411  1903               	skipnz
 17509  0412  2C24               	goto	l8556
 17510  0413  3001               	movlw	1
 17511  0414  02CB               	subwf	___ftadd@sign,f
 17512  0415  084B               	movf	___ftadd@sign,w
 17513  0416  3907               	andlw	7
 17514  0417  1903               	btfsc	3,2
 17515  0418  2C24               	goto	l8556
 17516  0419  2C07               	goto	l8548
 17517  041A                     l8554:	
 17518  041A  3001               	movlw	1
 17519  041B                     u9175:	
 17520  041B  36C6               	lsrf	___ftadd@f2+2,f
 17521  041C  0CC5               	rrf	___ftadd@f2+1,f
 17522  041D  0CC4               	rrf	___ftadd@f2,f
 17523  041E  0B89               	decfsz	9,f
 17524  041F  2C1B               	goto	u9175
 17525  0420  3001               	movlw	1
 17526  0421  00C7               	movwf	??___ftadd
 17527  0422  0847               	movf	??___ftadd,w
 17528  0423  07CC               	addwf	___ftadd@exp2,f
 17529  0424                     l8556:	
 17530  0424  084D               	movf	___ftadd@exp1,w
 17531  0425  064C               	xorwf	___ftadd@exp2,w
 17532  0426  1D03               	skipz
 17533  0427  2C1A               	goto	l8554
 17534  0428                     l2871:	
 17535  0428  1FCB               	btfss	___ftadd@sign,7
 17536  0429  2C3A               	goto	l8560
 17537  042A  30FF               	movlw	255
 17538  042B  06C1               	xorwf	___ftadd@f1,f
 17539  042C  30FF               	movlw	255
 17540  042D  06C2               	xorwf	___ftadd@f1+1,f
 17541  042E  30FF               	movlw	255
 17542  042F  06C3               	xorwf	___ftadd@f1+2,f
 17543  0430  3001               	movlw	1
 17544  0431  07C1               	addwf	___ftadd@f1,f
 17545  0432  3000               	movlw	0
 17546  0433  1803               	skipnc
 17547  0434  3001               	movlw	1
 17548  0435  07C2               	addwf	___ftadd@f1+1,f
 17549  0436  3000               	movlw	0
 17550  0437  1803               	skipnc
 17551  0438  3001               	movlw	1
 17552  0439  07C3               	addwf	___ftadd@f1+2,f
 17553  043A                     l8560:	
 17554  043A  1F4B               	btfss	___ftadd@sign,6
 17555  043B  2C4C               	goto	l8564
 17556  043C  30FF               	movlw	255
 17557  043D  06C4               	xorwf	___ftadd@f2,f
 17558  043E  30FF               	movlw	255
 17559  043F  06C5               	xorwf	___ftadd@f2+1,f
 17560  0440  30FF               	movlw	255
 17561  0441  06C6               	xorwf	___ftadd@f2+2,f
 17562  0442  3001               	movlw	1
 17563  0443  07C4               	addwf	___ftadd@f2,f
 17564  0444  3000               	movlw	0
 17565  0445  1803               	skipnc
 17566  0446  3001               	movlw	1
 17567  0447  07C5               	addwf	___ftadd@f2+1,f
 17568  0448  3000               	movlw	0
 17569  0449  1803               	skipnc
 17570  044A  3001               	movlw	1
 17571  044B  07C6               	addwf	___ftadd@f2+2,f
 17572  044C                     l8564:	
 17573  044C  01CB               	clrf	___ftadd@sign
 17574  044D  0841               	movf	___ftadd@f1,w
 17575  044E  07C4               	addwf	___ftadd@f2,f
 17576  044F  0842               	movf	___ftadd@f1+1,w
 17577  0450  3DC5               	addwfc	___ftadd@f2+1,f
 17578  0451  0843               	movf	___ftadd@f1+2,w
 17579  0452  3DC6               	addwfc	___ftadd@f2+2,f
 17580  0453  1FC6               	btfss	___ftadd@f2+2,7
 17581  0454  2C67               	goto	l8574
 17582  0455  30FF               	movlw	255
 17583  0456  06C4               	xorwf	___ftadd@f2,f
 17584  0457  30FF               	movlw	255
 17585  0458  06C5               	xorwf	___ftadd@f2+1,f
 17586  0459  30FF               	movlw	255
 17587  045A  06C6               	xorwf	___ftadd@f2+2,f
 17588  045B  3001               	movlw	1
 17589  045C  07C4               	addwf	___ftadd@f2,f
 17590  045D  3000               	movlw	0
 17591  045E  1803               	skipnc
 17592  045F  3001               	movlw	1
 17593  0460  07C5               	addwf	___ftadd@f2+1,f
 17594  0461  3000               	movlw	0
 17595  0462  1803               	skipnc
 17596  0463  3001               	movlw	1
 17597  0464  07C6               	addwf	___ftadd@f2+2,f
 17598  0465  01CB               	clrf	___ftadd@sign
 17599  0466  0ACB               	incf	___ftadd@sign,f
 17600  0467                     l8574:	
 17601  0467  0844               	movf	___ftadd@f2,w
 17602  0468  00A0               	movwf	___ftpack@arg
 17603  0469  0845               	movf	___ftadd@f2+1,w
 17604  046A  00A1               	movwf	___ftpack@arg+1
 17605  046B  0846               	movf	___ftadd@f2+2,w
 17606  046C  00A2               	movwf	___ftpack@arg+2
 17607  046D  084D               	movf	___ftadd@exp1,w
 17608  046E  00C7               	movwf	??___ftadd
 17609  046F  0847               	movf	??___ftadd,w
 17610  0470  00A3               	movwf	___ftpack@exp
 17611  0471  084B               	movf	___ftadd@sign,w
 17612  0472  00C8               	movwf	??___ftadd+1
 17613  0473  0848               	movf	??___ftadd+1,w
 17614  0474  00A4               	movwf	___ftpack@sign
 17615  0475  3196  2605         	fcall	___ftpack
 17616  0477  0020               	movlb	0	; select bank0
 17617  0478  0820               	movf	?___ftpack,w
 17618  0479  00C1               	movwf	?___ftadd
 17619  047A  0821               	movf	?___ftpack+1,w
 17620  047B  00C2               	movwf	?___ftadd+1
 17621  047C  0822               	movf	?___ftpack+2,w
 17622  047D  00C3               	movwf	?___ftadd+2
 17623  047E  0008               	return
 17624  047F                     __end_of___ftadd:	
 17625                           
 17626                           	psect	text122
 17627  104A                     __ptext122:	
 17628 ;; *************** function ___awtoft *****************
 17629 ;; Defined at:
 17630 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17631 ;; Parameters:    Size  Location     Type
 17632 ;;  c               2    8[BANK0 ] int 
 17633 ;; Auto vars:     Size  Location     Type
 17634 ;;  sign            1   13[BANK0 ] unsigned char 
 17635 ;; Return value:  Size  Location     Type
 17636 ;;                  3    8[BANK0 ] float 
 17637 ;; Registers used:
 17638 ;;		wreg, status,2, status,0, pclath, cstack
 17639 ;; Tracked objects:
 17640 ;;		On entry : 0/0
 17641 ;;		On exit  : 0/0
 17642 ;;		Unchanged: 0/0
 17643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17644 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17648 ;;Total ram usage:        6 bytes
 17649 ;; Hardware stack levels used:    1
 17650 ;; Hardware stack levels required when called:    6
 17651 ;; This function calls:
 17652 ;;		___ftpack
 17653 ;; This function is called by:
 17654 ;;		_getDimmerLights_PercentToValue
 17655 ;;		_getDimmerLights_ValueToPercent
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           
 17660                           ;psect for function ___awtoft
 17661  104A                     ___awtoft:	
 17662                           
 17663                           ;incstack = 0
 17664                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17665  104A  0020               	movlb	0	; select bank0
 17666  104B  01AD               	clrf	___awtoft@sign
 17667  104C  1FA9               	btfss	___awtoft@c+1,7
 17668  104D  2855               	goto	l8502
 17669  104E  09A8               	comf	___awtoft@c,f
 17670  104F  09A9               	comf	___awtoft@c+1,f
 17671  1050  0AA8               	incf	___awtoft@c,f
 17672  1051  1903               	skipnz
 17673  1052  0AA9               	incf	___awtoft@c+1,f
 17674  1053  01AD               	clrf	___awtoft@sign
 17675  1054  0AAD               	incf	___awtoft@sign,f
 17676  1055                     l8502:	
 17677  1055  0828               	movf	___awtoft@c,w
 17678  1056  00A0               	movwf	___ftpack@arg
 17679  1057  0829               	movf	___awtoft@c+1,w
 17680  1058  00A1               	movwf	___ftpack@arg+1
 17681  1059  01A2               	clrf	___ftpack@arg+2
 17682  105A  308E               	movlw	142
 17683  105B  00AB               	movwf	??___awtoft
 17684  105C  082B               	movf	??___awtoft,w
 17685  105D  00A3               	movwf	___ftpack@exp
 17686  105E  082D               	movf	___awtoft@sign,w
 17687  105F  00AC               	movwf	??___awtoft+1
 17688  1060  082C               	movf	??___awtoft+1,w
 17689  1061  00A4               	movwf	___ftpack@sign
 17690  1062  3196  2605         	fcall	___ftpack
 17691  1064  0020               	movlb	0	; select bank0
 17692  1065  0820               	movf	?___ftpack,w
 17693  1066  00A8               	movwf	?___awtoft
 17694  1067  0821               	movf	?___ftpack+1,w
 17695  1068  00A9               	movwf	?___awtoft+1
 17696  1069  0822               	movf	?___ftpack+2,w
 17697  106A  00AA               	movwf	?___awtoft+2
 17698  106B  0008               	return
 17699  106C                     __end_of___awtoft:	
 17700                           
 17701                           	psect	text123
 17702  1605                     __ptext123:	
 17703 ;; *************** function ___ftpack *****************
 17704 ;; Defined at:
 17705 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17706 ;; Parameters:    Size  Location     Type
 17707 ;;  arg             3    0[BANK0 ] unsigned um
 17708 ;;  exp             1    3[BANK0 ] unsigned char 
 17709 ;;  sign            1    4[BANK0 ] unsigned char 
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;		None
 17712 ;; Return value:  Size  Location     Type
 17713 ;;                  3    0[BANK0 ] float 
 17714 ;; Registers used:
 17715 ;;		wreg, status,2, status,0
 17716 ;; Tracked objects:
 17717 ;;		On entry : 0/0
 17718 ;;		On exit  : 0/0
 17719 ;;		Unchanged: 0/0
 17720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17721 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17723 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17724 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;Total ram usage:        8 bytes
 17726 ;; Hardware stack levels used:    1
 17727 ;; Hardware stack levels required when called:    5
 17728 ;; This function calls:
 17729 ;;		Nothing
 17730 ;; This function is called by:
 17731 ;;		___awtoft
 17732 ;;		___ftadd
 17733 ;;		___ftdiv
 17734 ;;		___ftmul
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738                           
 17739                           ;psect for function ___ftpack
 17740  1605                     ___ftpack:	
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17744  1605  0020               	movlb	0	; select bank0
 17745  1606  0823               	movf	___ftpack@exp,w
 17746  1607  1903               	btfsc	3,2
 17747  1608  2E0E               	goto	l8370
 17748  1609  0822               	movf	___ftpack@arg+2,w
 17749  160A  0421               	iorwf	___ftpack@arg+1,w
 17750  160B  0420               	iorwf	___ftpack@arg,w
 17751  160C  1D03               	skipz
 17752  160D  2E1F               	goto	l8376
 17753  160E                     l8370:	
 17754  160E  3000               	movlw	0
 17755  160F  00A0               	movwf	?___ftpack
 17756  1610  3000               	movlw	0
 17757  1611  00A1               	movwf	?___ftpack+1
 17758  1612  3000               	movlw	0
 17759  1613  00A2               	movwf	?___ftpack+2
 17760  1614  0008               	return
 17761  1615                     l8374:	
 17762  1615  3001               	movlw	1
 17763  1616  00A5               	movwf	??___ftpack
 17764  1617  0825               	movf	??___ftpack,w
 17765  1618  07A3               	addwf	___ftpack@exp,f
 17766  1619  3001               	movlw	1
 17767  161A                     u8715:	
 17768  161A  36A2               	lsrf	___ftpack@arg+2,f
 17769  161B  0CA1               	rrf	___ftpack@arg+1,f
 17770  161C  0CA0               	rrf	___ftpack@arg,f
 17771  161D  0B89               	decfsz	9,f
 17772  161E  2E1A               	goto	u8715
 17773  161F                     l8376:	
 17774  161F  30FE               	movlw	254
 17775  1620  0522               	andwf	___ftpack@arg+2,w
 17776  1621  1903               	btfsc	3,2
 17777  1622  2E38               	goto	l2842
 17778  1623  2E15               	goto	l8374
 17779  1624                     l8378:	
 17780  1624  3001               	movlw	1
 17781  1625  00A5               	movwf	??___ftpack
 17782  1626  0825               	movf	??___ftpack,w
 17783  1627  07A3               	addwf	___ftpack@exp,f
 17784  1628  3001               	movlw	1
 17785  1629  07A0               	addwf	___ftpack@arg,f
 17786  162A  3000               	movlw	0
 17787  162B  1803               	skipnc
 17788  162C  3001               	movlw	1
 17789  162D  07A1               	addwf	___ftpack@arg+1,f
 17790  162E  3000               	movlw	0
 17791  162F  1803               	skipnc
 17792  1630  3001               	movlw	1
 17793  1631  07A2               	addwf	___ftpack@arg+2,f
 17794  1632  3001               	movlw	1
 17795  1633                     u8735:	
 17796  1633  36A2               	lsrf	___ftpack@arg+2,f
 17797  1634  0CA1               	rrf	___ftpack@arg+1,f
 17798  1635  0CA0               	rrf	___ftpack@arg,f
 17799  1636  0B89               	decfsz	9,f
 17800  1637  2E33               	goto	u8735
 17801  1638                     l2842:	
 17802  1638  30FF               	movlw	255
 17803  1639  0522               	andwf	___ftpack@arg+2,w
 17804  163A  1903               	btfsc	3,2
 17805  163B  2E45               	goto	l8386
 17806  163C  2E24               	goto	l8378
 17807  163D                     l8384:	
 17808  163D  3001               	movlw	1
 17809  163E  02A3               	subwf	___ftpack@exp,f
 17810  163F  3001               	movlw	1
 17811  1640                     u8755:	
 17812  1640  35A0               	lslf	___ftpack@arg,f
 17813  1641  0DA1               	rlf	___ftpack@arg+1,f
 17814  1642  0DA2               	rlf	___ftpack@arg+2,f
 17815  1643  0B89               	decfsz	9,f
 17816  1644  2E40               	goto	u8755
 17817  1645                     l8386:	
 17818  1645  1FA1               	btfss	___ftpack@arg+1,7
 17819  1646  2E3D               	goto	l8384
 17820  1647  1823               	btfsc	___ftpack@exp,0
 17821  1648  2E4F               	goto	l2848
 17822  1649  30FF               	movlw	255
 17823  164A  05A0               	andwf	___ftpack@arg,f
 17824  164B  307F               	movlw	127
 17825  164C  05A1               	andwf	___ftpack@arg+1,f
 17826  164D  30FF               	movlw	255
 17827  164E  05A2               	andwf	___ftpack@arg+2,f
 17828  164F                     l2848:	
 17829  164F  1003               	clrc
 17830  1650  0CA3               	rrf	___ftpack@exp,f
 17831  1651  0823               	movf	___ftpack@exp,w
 17832  1652  00A5               	movwf	??___ftpack
 17833  1653  01A6               	clrf	??___ftpack+1
 17834  1654  01A7               	clrf	??___ftpack+2
 17835  1655  3010               	movlw	16
 17836  1656                     u8785:	
 17837  1656  35A5               	lslf	??___ftpack,f
 17838  1657  0DA6               	rlf	??___ftpack+1,f
 17839  1658  0DA7               	rlf	??___ftpack+2,f
 17840  1659  0B89               	decfsz	9,f
 17841  165A  2E56               	goto	u8785
 17842  165B  0825               	movf	??___ftpack,w
 17843  165C  04A0               	iorwf	___ftpack@arg,f
 17844  165D  0826               	movf	??___ftpack+1,w
 17845  165E  04A1               	iorwf	___ftpack@arg+1,f
 17846  165F  0827               	movf	??___ftpack+2,w
 17847  1660  04A2               	iorwf	___ftpack@arg+2,f
 17848  1661  0824               	movf	___ftpack@sign,w
 17849  1662  1903               	btfsc	3,2
 17850  1663  0008               	return
 17851  1664  17A2               	bsf	___ftpack@arg+2,7
 17852  1665  0008               	return
 17853  1666                     __end_of___ftpack:	
 17854                           
 17855                           	psect	text124
 17856  1C54                     __ptext124:	
 17857 ;; *************** function _Division *****************
 17858 ;; Defined at:
 17859 ;;		line 1380 in file "../src/Dimmer_B1.c"
 17860 ;; Parameters:    Size  Location     Type
 17861 ;;  value           1    wreg     unsigned char 
 17862 ;;  num             1    5[BANK0 ] unsigned char 
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;  value           1    8[BANK0 ] unsigned char 
 17865 ;;  result          1    9[BANK0 ] unsigned char 
 17866 ;; Return value:  Size  Location     Type
 17867 ;;                  1    wreg      unsigned char 
 17868 ;; Registers used:
 17869 ;;		wreg, status,2, status,0, pclath, cstack
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;Total ram usage:        5 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    6
 17882 ;; This function calls:
 17883 ;;		___lbdiv
 17884 ;; This function is called by:
 17885 ;;		_DimmerIntr_Initialization
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _Division
 17891  1C54                     _Division:	
 17892                           
 17893                           ;incstack = 0
 17894                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 17895                           ;Division@value stored from wreg
 17896  1C54  0020               	movlb	0	; select bank0
 17897  1C55  00A8               	movwf	Division@value
 17898                           
 17899                           ;Dimmer_B1.c: 1381: char result = (char) (value / num);
 17900  1C56  0825               	movf	Division@num,w
 17901  1C57  00A6               	movwf	??_Division
 17902  1C58  0826               	movf	??_Division,w
 17903  1C59  00A0               	movwf	___lbdiv@divisor
 17904  1C5A  0828               	movf	Division@value,w
 17905  1C5B  3190  2028         	fcall	___lbdiv
 17906  1C5D  0020               	movlb	0	; select bank0
 17907  1C5E  00A7               	movwf	??_Division+1
 17908  1C5F  0827               	movf	??_Division+1,w
 17909  1C60  00A9               	movwf	Division@result
 17910                           
 17911                           ;Dimmer_B1.c: 1382: return result;
 17912  1C61  0829               	movf	Division@result,w
 17913  1C62  0008               	return
 17914  1C63                     __end_of_Division:	
 17915                           
 17916                           	psect	text125
 17917  1028                     __ptext125:	
 17918 ;; *************** function ___lbdiv *****************
 17919 ;; Defined at:
 17920 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 17921 ;; Parameters:    Size  Location     Type
 17922 ;;  dividend        1    wreg     unsigned char 
 17923 ;;  divisor         1    0[BANK0 ] unsigned char 
 17924 ;; Auto vars:     Size  Location     Type
 17925 ;;  dividend        1    2[BANK0 ] unsigned char 
 17926 ;;  quotient        1    4[BANK0 ] unsigned char 
 17927 ;;  counter         1    3[BANK0 ] unsigned char 
 17928 ;; Return value:  Size  Location     Type
 17929 ;;                  1    wreg      unsigned char 
 17930 ;; Registers used:
 17931 ;;		wreg, status,2, status,0
 17932 ;; Tracked objects:
 17933 ;;		On entry : 0/0
 17934 ;;		On exit  : 0/0
 17935 ;;		Unchanged: 0/0
 17936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17937 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17938 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17940 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17941 ;;Total ram usage:        5 bytes
 17942 ;; Hardware stack levels used:    1
 17943 ;; Hardware stack levels required when called:    5
 17944 ;; This function calls:
 17945 ;;		Nothing
 17946 ;; This function is called by:
 17947 ;;		_Division
 17948 ;; This function uses a non-reentrant model
 17949 ;;
 17950                           
 17951                           
 17952                           ;psect for function ___lbdiv
 17953  1028                     ___lbdiv:	
 17954                           
 17955                           ;incstack = 0
 17956                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 17957                           ;___lbdiv@dividend stored from wreg
 17958  1028  0020               	movlb	0	; select bank0
 17959  1029  00A2               	movwf	___lbdiv@dividend
 17960  102A  01A4               	clrf	___lbdiv@quotient
 17961  102B  0820               	movf	___lbdiv@divisor,w
 17962  102C  1903               	btfsc	3,2
 17963  102D  2848               	goto	l6654
 17964  102E  01A3               	clrf	___lbdiv@counter
 17965  102F  0AA3               	incf	___lbdiv@counter,f
 17966  1030                     l6642:	
 17967  1030  1BA0               	btfsc	___lbdiv@divisor,7
 17968  1031  2839               	goto	l6644
 17969  1032  1003               	clrc
 17970  1033  0DA0               	rlf	___lbdiv@divisor,f
 17971  1034  3001               	movlw	1
 17972  1035  00A1               	movwf	??___lbdiv
 17973  1036  0821               	movf	??___lbdiv,w
 17974  1037  07A3               	addwf	___lbdiv@counter,f
 17975  1038  2830               	goto	l6642
 17976  1039                     l6644:	
 17977  1039  1003               	clrc
 17978  103A  0DA4               	rlf	___lbdiv@quotient,f
 17979  103B  0820               	movf	___lbdiv@divisor,w
 17980  103C  0222               	subwf	___lbdiv@dividend,w
 17981  103D  1C03               	skipc
 17982  103E  2843               	goto	L10
 17983  103F  0820               	movf	___lbdiv@divisor,w
 17984  1040  02A2               	subwf	___lbdiv@dividend,f
 17985  1041  1424               	bsf	___lbdiv@quotient,0
 17986  1042  1003               	clrc
 17987  1043                     L10:	
 17988  1043  0CA0               	rrf	___lbdiv@divisor,f
 17989  1044  3001               	movlw	1
 17990  1045  02A3               	subwf	___lbdiv@counter,f
 17991  1046  1D03               	btfss	3,2
 17992  1047  2839               	goto	l6644
 17993  1048                     l6654:	
 17994  1048  0824               	movf	___lbdiv@quotient,w
 17995  1049  0008               	return
 17996  104A                     __end_of___lbdiv:	
 17997                           
 17998                           	psect	text126
 17999  1B05                     __ptext126:	
 18000 ;; *************** function _DelayOff_Main *****************
 18001 ;; Defined at:
 18002 ;;		line 41 in file "../src/DelayOff_B1.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;		None
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;		None
 18007 ;; Return value:  Size  Location     Type
 18008 ;;		None               void
 18009 ;; Registers used:
 18010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18011 ;; Tracked objects:
 18012 ;;		On entry : 0/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;Total ram usage:        0 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:    9
 18023 ;; This function calls:
 18024 ;;		_DlyOff_Main
 18025 ;; This function is called by:
 18026 ;;		_main
 18027 ;; This function uses a non-reentrant model
 18028 ;;
 18029                           
 18030                           
 18031                           ;psect for function _DelayOff_Main
 18032  1B05                     _DelayOff_Main:	
 18033                           
 18034                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18035                           
 18036                           ;incstack = 0
 18037                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18038  1B05  3001               	movlw	1
 18039  1B06  3188  20E9         	fcall	_DlyOff_Main
 18040  1B08  0008               	return
 18041  1B09                     __end_of_DelayOff_Main:	
 18042                           
 18043                           	psect	text127
 18044  08E9                     __ptext127:	
 18045 ;; *************** function _DlyOff_Main *****************
 18046 ;; Defined at:
 18047 ;;		line 61 in file "../src/DelayOff_B1.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  sw              1    wreg     unsigned char 
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;  sw              1   71[BANK0 ] unsigned char 
 18052 ;; Return value:  Size  Location     Type
 18053 ;;		None               void
 18054 ;; Registers used:
 18055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18056 ;; Tracked objects:
 18057 ;;		On entry : 0/0
 18058 ;;		On exit  : 0/0
 18059 ;;		Unchanged: 0/0
 18060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18064 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18065 ;;Total ram usage:        3 bytes
 18066 ;; Hardware stack levels used:    1
 18067 ;; Hardware stack levels required when called:    8
 18068 ;; This function calls:
 18069 ;;		_DelayOffPointSelect
 18070 ;;		_getDimmerLights_Status
 18071 ;;		_setDimmerLights_SwOff
 18072 ;;		_setDimmerLights_SwOn
 18073 ;;		_setProductData
 18074 ;; This function is called by:
 18075 ;;		_DelayOff_Main
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           
 18080                           ;psect for function _DlyOff_Main
 18081  08E9                     _DlyOff_Main:	
 18082                           
 18083                           ;incstack = 0
 18084                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18085                           ;DlyOff_Main@sw stored from wreg
 18086  08E9  0020               	movlb	0	; select bank0
 18087  08EA  00E7               	movwf	DlyOff_Main@sw
 18088                           
 18089                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18090  08EB  0867               	movf	DlyOff_Main@sw,w
 18091  08EC  319B  23B7  3188   	fcall	_DelayOffPointSelect
 18092                           
 18093                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18094  08EF  0021               	movlb	1	; select bank1
 18095  08F0  0849               	movf	_DelayOff^(0+128),w
 18096  08F1  0086               	movwf	6
 18097  08F2  3001               	movlw	1	; select bank2/3
 18098  08F3  0087               	movwf	7
 18099  08F4  1C81               	btfss	1,1
 18100  08F5  0008               	return
 18101                           
 18102                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18103  08F6  0849               	movf	_DelayOff^(0+128),w
 18104  08F7  3E02               	addlw	2
 18105  08F8  0086               	movwf	6
 18106  08F9  3001               	movlw	1	; select bank2/3
 18107  08FA  0087               	movwf	7
 18108  08FB  3001               	movlw	1
 18109  08FC  0781               	addwf	1,f
 18110  08FD  3141               	addfsr 1,1
 18111  08FE  1803               	skipnc
 18112  08FF  0A81               	incf	1,f
 18113                           
 18114                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18115  0900  0849               	movf	_DelayOff^(0+128),w
 18116  0901  3E02               	addlw	2
 18117  0902  0086               	movwf	6
 18118  0903  3001               	movlw	1	; select bank2/3
 18119  0904  0087               	movwf	7
 18120  0905  3F40               	moviw [0]fsr1
 18121  0906  0020               	movlb	0	; select bank0
 18122  0907  00E5               	movwf	??_DlyOff_Main
 18123  0908  3F41               	moviw [1]fsr1
 18124  0909  00E6               	movwf	??_DlyOff_Main+1
 18125  090A  300B               	movlw	11
 18126  090B  0266               	subwf	??_DlyOff_Main+1,w
 18127  090C  30B8               	movlw	184
 18128  090D  1903               	skipnz
 18129  090E  0265               	subwf	??_DlyOff_Main,w
 18130  090F  1C03               	skipc
 18131  0910  0008               	return
 18132                           
 18133                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18134  0911  0021               	movlb	1	; select bank1
 18135  0912  0849               	movf	_DelayOff^(0+128),w
 18136  0913  3E02               	addlw	2
 18137  0914  0086               	movwf	6
 18138  0915  3001               	movlw	1	; select bank2/3
 18139  0916  0087               	movwf	7
 18140  0917  3000               	movlw	0
 18141  0918  3FC0               	movwi [0]fsr1
 18142  0919  3FC1               	movwi [1]fsr1
 18143                           
 18144                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18145  091A  3001               	movlw	1
 18146  091B  0020               	movlb	0	; select bank0
 18147  091C  00E5               	movwf	??_DlyOff_Main
 18148  091D  0021               	movlb	1	; select bank1
 18149  091E  0849               	movf	_DelayOff^(0+128),w
 18150  091F  3E04               	addlw	4
 18151  0920  0086               	movwf	6
 18152  0921  3001               	movlw	1	; select bank2/3
 18153  0922  0087               	movwf	7
 18154  0923  0020               	movlb	0	; select bank0
 18155  0924  0865               	movf	??_DlyOff_Main,w
 18156  0925  0781               	addwf	1,f
 18157                           
 18158                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18159  0926  0021               	movlb	1	; select bank1
 18160  0927  0849               	movf	_DelayOff^(0+128),w
 18161  0928  3E04               	addlw	4
 18162  0929  0086               	movwf	6
 18163  092A  3001               	movlw	1	; select bank2/3
 18164  092B  0087               	movwf	7
 18165  092C  0A49               	incf	_DelayOff^(0+128),w
 18166  092D  0084               	movwf	4
 18167  092E  3001               	movlw	1	; select bank2/3
 18168  092F  0085               	movwf	5
 18169  0930  0800               	movf	0,w
 18170  0931  0201               	subwf	1,w
 18171  0932  1C03               	skipc
 18172  0933  0008               	return
 18173                           
 18174                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18175  0934  0849               	movf	_DelayOff^(0+128),w
 18176  0935  3E04               	addlw	4
 18177  0936  0086               	movwf	6
 18178  0937  3001               	movlw	1	; select bank2/3
 18179  0938  0087               	movwf	7
 18180  0939  0181               	clrf	1
 18181                           
 18182                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18183  093A  0849               	movf	_DelayOff^(0+128),w
 18184  093B  0086               	movwf	6
 18185  093C  3001               	movlw	1	; select bank2/3
 18186  093D  0087               	movwf	7
 18187  093E  1081               	bcf	1,1
 18188                           
 18189                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18190  093F  0020               	movlb	0	; select bank0
 18191  0940  0867               	movf	DlyOff_Main@sw,w
 18192  0941  319C  2491  3188   	fcall	_getDimmerLights_Status
 18193  0944  3A01               	xorlw	1
 18194  0945  1D03               	skipz
 18195  0946  2951               	goto	l531
 18196                           
 18197                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18198  0947  0020               	movlb	0	; select bank0
 18199  0948  0867               	movf	DlyOff_Main@sw,w
 18200  0949  3191  21F3  3188   	fcall	_setDimmerLights_SwOn
 18201                           
 18202                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18203  094C  0020               	movlb	0	; select bank0
 18204  094D  0867               	movf	DlyOff_Main@sw,w
 18205  094E  3192  2295  3188   	fcall	_setDimmerLights_SwOff
 18206  0951                     l531:	
 18207                           
 18208                           ;DelayOff_B1.c: 78: }
 18209                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18210  0951  0020               	movlb	0	; select bank0
 18211  0952  01E2               	clrf	setProductData@value
 18212  0953  0867               	movf	DlyOff_Main@sw,w
 18213  0954  3E1A               	addlw	26
 18214  0955  319B  23CF         	fcall	_setProductData
 18215  0957  0008               	return
 18216  0958                     __end_of_DlyOff_Main:	
 18217                           
 18218                           	psect	text128
 18219  1BCF                     __ptext128:	
 18220 ;; *************** function _setProductData *****************
 18221 ;; Defined at:
 18222 ;;		line 645 in file "../src/Main_B1.c"
 18223 ;; Parameters:    Size  Location     Type
 18224 ;;  address         1    wreg     unsigned char 
 18225 ;;  value           1   66[BANK0 ] unsigned char 
 18226 ;; Auto vars:     Size  Location     Type
 18227 ;;  address         1   68[BANK0 ] unsigned char 
 18228 ;; Return value:  Size  Location     Type
 18229 ;;		None               void
 18230 ;; Registers used:
 18231 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18232 ;; Tracked objects:
 18233 ;;		On entry : 0/0
 18234 ;;		On exit  : 0/0
 18235 ;;		Unchanged: 0/0
 18236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18237 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18241 ;;Total ram usage:        3 bytes
 18242 ;; Hardware stack levels used:    1
 18243 ;; Hardware stack levels required when called:    5
 18244 ;; This function calls:
 18245 ;;		Nothing
 18246 ;; This function is called by:
 18247 ;;		_DlyOff_Main
 18248 ;;		_setDelayOff_GO
 18249 ;;		_setDimmerLights_OnOff
 18250 ;;		_setDimmerLights_Dimming
 18251 ;;		_setTemp_Main
 18252 ;;		_setLog_Code
 18253 ;;		_setControl_Lights_Table
 18254 ;;		_setRFSW_AdjControl
 18255 ;;		_setRF_DimmerLights
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259                           
 18260                           ;psect for function _setProductData
 18261  1BCF                     _setProductData:	
 18262                           
 18263                           ;incstack = 0
 18264                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18265                           ;setProductData@address stored from wreg
 18266  1BCF  0020               	movlb	0	; select bank0
 18267  1BD0  00E4               	movwf	setProductData@address
 18268                           
 18269                           ;Main_B1.c: 646: _product.Data[address] = value;
 18270  1BD1  0862               	movf	setProductData@value,w
 18271  1BD2  00E3               	movwf	??_setProductData
 18272  1BD3  0864               	movf	setProductData@address,w
 18273  1BD4  3E45               	addlw	__product& (0+255)
 18274  1BD5  0086               	movwf	6
 18275  1BD6  3002               	movlw	2	; select bank4/5
 18276  1BD7  0087               	movwf	7
 18277  1BD8  0863               	movf	??_setProductData,w
 18278  1BD9  0081               	movwf	1
 18279  1BDA  0008               	return
 18280  1BDB                     __end_of_setProductData:	
 18281                           
 18282                           	psect	text129
 18283  11F3                     __ptext129:	
 18284 ;; *************** function _setDimmerLights_SwOn *****************
 18285 ;; Defined at:
 18286 ;;		line 696 in file "../src/Dimmer_B1.c"
 18287 ;; Parameters:    Size  Location     Type
 18288 ;;  sw              1    wreg     unsigned char 
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;  sw              1   13[BANK0 ] unsigned char 
 18291 ;;  idle            1   14[BANK0 ] unsigned char 
 18292 ;; Return value:  Size  Location     Type
 18293 ;;		None               void
 18294 ;; Registers used:
 18295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18296 ;; Tracked objects:
 18297 ;;		On entry : 0/0
 18298 ;;		On exit  : 0/0
 18299 ;;		Unchanged: 0/0
 18300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;Total ram usage:        2 bytes
 18306 ;; Hardware stack levels used:    1
 18307 ;; Hardware stack levels required when called:    7
 18308 ;; This function calls:
 18309 ;;		_DimmerLights_SelectPointer
 18310 ;;		_setBuz
 18311 ;; This function is called by:
 18312 ;;		_DlyOff_Main
 18313 ;;		_setControl_Lights_Table
 18314 ;;		_setRFSW_Control
 18315 ;;		_setRFSW_AdjControl
 18316 ;;		_setSw_Main
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           
 18321                           ;psect for function _setDimmerLights_SwOn
 18322  11F3                     _setDimmerLights_SwOn:	
 18323                           
 18324                           ;incstack = 0
 18325                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18326                           ;setDimmerLights_SwOn@sw stored from wreg
 18327  11F3  0020               	movlb	0	; select bank0
 18328  11F4  00AD               	movwf	setDimmerLights_SwOn@sw
 18329                           
 18330                           ;Dimmer_B1.c: 697: char idle = 0;
 18331  11F5  01AE               	clrf	setDimmerLights_SwOn@idle
 18332                           
 18333                           ;Dimmer_B1.c: 722: DimmerLights_SelectPointer(sw);
 18334  11F6  082D               	movf	setDimmerLights_SwOn@sw,w
 18335  11F7  319B  23C3  3191   	fcall	_DimmerLights_SelectPointer
 18336                           
 18337                           ;Dimmer_B1.c: 723: if (idle == 0) {
 18338  11FA  0020               	movlb	0	; select bank0
 18339  11FB  08AE               	movf	setDimmerLights_SwOn@idle,f
 18340  11FC  1D03               	skipz
 18341  11FD  0008               	return
 18342                           
 18343                           ;Dimmer_B1.c: 724: DimmerLights->SwFlag = 1;
 18344  11FE  0021               	movlb	1	; select bank1
 18345  11FF  084A               	movf	_DimmerLights^(0+128),w
 18346  1200  0086               	movwf	6
 18347  1201  3001               	movlw	1	; select bank2/3
 18348  1202  0087               	movwf	7
 18349  1203  1401               	bsf	1,0
 18350                           
 18351                           ;Dimmer_B1.c: 725: if (DimmerLights->Status == 0) {
 18352  1204  0A4A               	incf	_DimmerLights^(0+128),w
 18353  1205  0086               	movwf	6
 18354  1206  3001               	movlw	1	; select bank2/3
 18355  1207  0087               	movwf	7
 18356  1208  1801               	btfsc	1,0
 18357  1209  2A1A               	goto	l8766
 18358                           
 18359                           ;Dimmer_B1.c: 726: DimmerLights->Status = 1;
 18360  120A  0A4A               	incf	_DimmerLights^(0+128),w
 18361  120B  0086               	movwf	6
 18362  120C  3001               	movlw	1	; select bank2/3
 18363  120D  0087               	movwf	7
 18364  120E  1401               	bsf	1,0
 18365                           
 18366                           ;Dimmer_B1.c: 727: DimmerLights->Trigger = 1;
 18367  120F  084A               	movf	_DimmerLights^(0+128),w
 18368  1210  0086               	movwf	6
 18369  1211  3001               	movlw	1	; select bank2/3
 18370  1212  0087               	movwf	7
 18371  1213  1481               	bsf	1,1
 18372                           
 18373                           ;Dimmer_B1.c: 728: DimmerLights->Switch = 1;
 18374  1214  084A               	movf	_DimmerLights^(0+128),w
 18375  1215  0086               	movwf	6
 18376  1216  3001               	movlw	1	; select bank2/3
 18377  1217  0087               	movwf	7
 18378  1218  1501               	bsf	1,2
 18379                           
 18380                           ;Dimmer_B1.c: 729: } else {
 18381  1219  2A1F               	goto	l8768
 18382  121A                     l8766:	
 18383                           
 18384                           ;Dimmer_B1.c: 730: DimmerLights->Status = 0;
 18385  121A  0A4A               	incf	_DimmerLights^(0+128),w
 18386  121B  0086               	movwf	6
 18387  121C  3001               	movlw	1	; select bank2/3
 18388  121D  0087               	movwf	7
 18389  121E  1001               	bcf	1,0
 18390  121F                     l8768:	
 18391                           
 18392                           ;Dimmer_B1.c: 731: }
 18393                           ;Dimmer_B1.c: 732: setBuz(1, 100);
 18394  121F  3064               	movlw	100
 18395  1220  0020               	movlb	0	; select bank0
 18396  1221  00A9               	movwf	setBuz@time
 18397  1222  3000               	movlw	0
 18398  1223  00AA               	movwf	setBuz@time+1
 18399  1224  3001               	movlw	1
 18400  1225  3194  24F1         	fcall	_setBuz
 18401  1227  0008               	return
 18402  1228                     __end_of_setDimmerLights_SwOn:	
 18403                           
 18404                           	psect	text130
 18405  14F1                     __ptext130:	
 18406 ;; *************** function _setBuz *****************
 18407 ;; Defined at:
 18408 ;;		line 22 in file "../src/Buzzer_B1.c"
 18409 ;; Parameters:    Size  Location     Type
 18410 ;;  count           1    wreg     unsigned char 
 18411 ;;  time            2    9[BANK0 ] int 
 18412 ;; Auto vars:     Size  Location     Type
 18413 ;;  count           1   12[BANK0 ] unsigned char 
 18414 ;; Return value:  Size  Location     Type
 18415 ;;		None               void
 18416 ;; Registers used:
 18417 ;;		wreg, status,2, status,0, pclath, cstack
 18418 ;; Tracked objects:
 18419 ;;		On entry : 0/0
 18420 ;;		On exit  : 0/0
 18421 ;;		Unchanged: 0/0
 18422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18426 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18427 ;;Total ram usage:        4 bytes
 18428 ;; Hardware stack levels used:    1
 18429 ;; Hardware stack levels required when called:    6
 18430 ;; This function calls:
 18431 ;;		___awdiv
 18432 ;; This function is called by:
 18433 ;;		_setDimmerLights_SwOn
 18434 ;;		_setDimmerLights_Dimming
 18435 ;;		_my_MainTimer
 18436 ;;		_Exception_Main
 18437 ;;		_setTemp_Main
 18438 ;;		_setLog_Code
 18439 ;;		_setRFSW_Control
 18440 ;;		_setSw_Main
 18441 ;; This function uses a non-reentrant model
 18442 ;;
 18443                           
 18444                           
 18445                           ;psect for function _setBuz
 18446  14F1                     _setBuz:	
 18447                           
 18448                           ;incstack = 0
 18449                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18450                           ;setBuz@count stored from wreg
 18451  14F1  0020               	movlb	0	; select bank0
 18452  14F2  00AC               	movwf	setBuz@count
 18453                           
 18454                           ;Buzzer_B1.c: 23: time /= 20;
 18455  14F3  3014               	movlw	20
 18456  14F4  00A0               	movwf	___awdiv@divisor
 18457  14F5  3000               	movlw	0
 18458  14F6  00A1               	movwf	___awdiv@divisor+1
 18459  14F7  082A               	movf	setBuz@time+1,w
 18460  14F8  01A3               	clrf	___awdiv@dividend+1
 18461  14F9  07A3               	addwf	___awdiv@dividend+1,f
 18462  14FA  0829               	movf	setBuz@time,w
 18463  14FB  01A2               	clrf	___awdiv@dividend
 18464  14FC  07A2               	addwf	___awdiv@dividend,f
 18465  14FD  3194  2447  3194   	fcall	___awdiv
 18466  1500  0020               	movlb	0	; select bank0
 18467  1501  0821               	movf	?___awdiv+1,w
 18468  1502  01AA               	clrf	setBuz@time+1
 18469  1503  07AA               	addwf	setBuz@time+1,f
 18470  1504  0820               	movf	?___awdiv,w
 18471  1505  01A9               	clrf	setBuz@time
 18472  1506  07A9               	addwf	setBuz@time,f
 18473                           
 18474                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18475  1507  0022               	movlb	2	; select bank2
 18476  1508  1C20               	btfss	_Buz1^(0+256),0
 18477  1509  0008               	return
 18478                           
 18479                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18480  150A  18A0               	btfsc	_Buz1^(0+256),1
 18481  150B  2D22               	goto	l86
 18482                           
 18483                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18484  150C  14A0               	bsf	_Buz1^(0+256),1
 18485                           
 18486                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18487  150D  01A1               	clrf	(_Buz1^(0+256)+1)
 18488  150E  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18489                           
 18490                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18491  150F  0020               	movlb	0	; select bank0
 18492  1510  082C               	movf	setBuz@count,w
 18493  1511  00AB               	movwf	??_setBuz
 18494  1512  082B               	movf	??_setBuz,w
 18495  1513  0022               	movlb	2	; select bank2
 18496  1514  00A3               	movwf	(_Buz1^(0+256)+3)
 18497                           
 18498                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18499  1515  0020               	movlb	0	; select bank0
 18500  1516  082A               	movf	setBuz@time+1,w
 18501  1517  0022               	movlb	2	; select bank2
 18502  1518  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18503  1519  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18504  151A  0020               	movlb	0	; select bank0
 18505  151B  0829               	movf	setBuz@time,w
 18506  151C  0022               	movlb	2	; select bank2
 18507  151D  01A6               	clrf	(_Buz1^(0+256)+6)
 18508  151E  07A6               	addwf	(_Buz1^(0+256)+6),f
 18509                           
 18510                           ;Buzzer_B1.c: 30: RB3 = 1;
 18511  151F  0020               	movlb	0	; select bank0
 18512  1520  158D               	bsf	13,3	;volatile
 18513                           
 18514                           ;Buzzer_B1.c: 31: } else {
 18515  1521  0008               	return
 18516  1522                     l86:	
 18517                           
 18518                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18519  1522  19A0               	btfsc	_Buz1^(0+256),3
 18520  1523  2D36               	goto	l88
 18521                           
 18522                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18523  1524  15A0               	bsf	_Buz1^(0+256),3
 18524                           
 18525                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18526  1525  0020               	movlb	0	; select bank0
 18527  1526  082C               	movf	setBuz@count,w
 18528  1527  00AB               	movwf	??_setBuz
 18529  1528  082B               	movf	??_setBuz,w
 18530  1529  0022               	movlb	2	; select bank2
 18531  152A  00A4               	movwf	(_Buz1^(0+256)+4)
 18532                           
 18533                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18534  152B  0020               	movlb	0	; select bank0
 18535  152C  082A               	movf	setBuz@time+1,w
 18536  152D  0022               	movlb	2	; select bank2
 18537  152E  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18538  152F  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18539  1530  0020               	movlb	0	; select bank0
 18540  1531  0829               	movf	setBuz@time,w
 18541  1532  0022               	movlb	2	; select bank2
 18542  1533  01A8               	clrf	(_Buz1^(0+256)+8)
 18543  1534  07A8               	addwf	(_Buz1^(0+256)+8),f
 18544                           
 18545                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18546  1535  0008               	return
 18547  1536                     l88:	
 18548  1536  1A20               	btfsc	_Buz1^(0+256),4
 18549  1537  0008               	return
 18550                           
 18551                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18552  1538  1620               	bsf	_Buz1^(0+256),4
 18553                           
 18554                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18555  1539  0020               	movlb	0	; select bank0
 18556  153A  082C               	movf	setBuz@count,w
 18557  153B  00AB               	movwf	??_setBuz
 18558  153C  082B               	movf	??_setBuz,w
 18559  153D  0022               	movlb	2	; select bank2
 18560  153E  00A5               	movwf	(_Buz1^(0+256)+5)
 18561                           
 18562                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18563  153F  0020               	movlb	0	; select bank0
 18564  1540  082A               	movf	setBuz@time+1,w
 18565  1541  0022               	movlb	2	; select bank2
 18566  1542  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18567  1543  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18568  1544  0020               	movlb	0	; select bank0
 18569  1545  0829               	movf	setBuz@time,w
 18570  1546  0022               	movlb	2	; select bank2
 18571  1547  01AA               	clrf	(_Buz1^(0+256)+10)
 18572  1548  07AA               	addwf	(_Buz1^(0+256)+10),f
 18573  1549  0008               	return
 18574  154A                     __end_of_setBuz:	
 18575                           
 18576                           	psect	text131
 18577  1447                     __ptext131:	
 18578 ;; *************** function ___awdiv *****************
 18579 ;; Defined at:
 18580 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18581 ;; Parameters:    Size  Location     Type
 18582 ;;  divisor         2    0[BANK0 ] int 
 18583 ;;  dividend        2    2[BANK0 ] int 
 18584 ;; Auto vars:     Size  Location     Type
 18585 ;;  quotient        2    7[BANK0 ] int 
 18586 ;;  sign            1    6[BANK0 ] unsigned char 
 18587 ;;  counter         1    5[BANK0 ] unsigned char 
 18588 ;; Return value:  Size  Location     Type
 18589 ;;                  2    0[BANK0 ] int 
 18590 ;; Registers used:
 18591 ;;		wreg, status,2, status,0
 18592 ;; Tracked objects:
 18593 ;;		On entry : 0/0
 18594 ;;		On exit  : 0/0
 18595 ;;		Unchanged: 0/0
 18596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18598 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18600 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18601 ;;Total ram usage:        9 bytes
 18602 ;; Hardware stack levels used:    1
 18603 ;; Hardware stack levels required when called:    5
 18604 ;; This function calls:
 18605 ;;		Nothing
 18606 ;; This function is called by:
 18607 ;;		_setBuz
 18608 ;; This function uses a non-reentrant model
 18609 ;;
 18610                           
 18611                           
 18612                           ;psect for function ___awdiv
 18613  1447                     ___awdiv:	
 18614                           
 18615                           ;incstack = 0
 18616                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18617  1447  0020               	movlb	0	; select bank0
 18618  1448  01A6               	clrf	___awdiv@sign
 18619  1449  1FA1               	btfss	___awdiv@divisor+1,7
 18620  144A  2C52               	goto	l8404
 18621  144B  09A0               	comf	___awdiv@divisor,f
 18622  144C  09A1               	comf	___awdiv@divisor+1,f
 18623  144D  0AA0               	incf	___awdiv@divisor,f
 18624  144E  1903               	skipnz
 18625  144F  0AA1               	incf	___awdiv@divisor+1,f
 18626  1450  01A6               	clrf	___awdiv@sign
 18627  1451  0AA6               	incf	___awdiv@sign,f
 18628  1452                     l8404:	
 18629  1452  1FA3               	btfss	___awdiv@dividend+1,7
 18630  1453  2C5D               	goto	l8410
 18631  1454  09A2               	comf	___awdiv@dividend,f
 18632  1455  09A3               	comf	___awdiv@dividend+1,f
 18633  1456  0AA2               	incf	___awdiv@dividend,f
 18634  1457  1903               	skipnz
 18635  1458  0AA3               	incf	___awdiv@dividend+1,f
 18636  1459  3001               	movlw	1
 18637  145A  00A4               	movwf	??___awdiv
 18638  145B  0824               	movf	??___awdiv,w
 18639  145C  06A6               	xorwf	___awdiv@sign,f
 18640  145D                     l8410:	
 18641  145D  01A7               	clrf	___awdiv@quotient
 18642  145E  01A8               	clrf	___awdiv@quotient+1
 18643  145F  0821               	movf	___awdiv@divisor+1,w
 18644  1460  0420               	iorwf	___awdiv@divisor,w
 18645  1461  1903               	skipnz
 18646  1462  2C8C               	goto	l8432
 18647  1463  01A5               	clrf	___awdiv@counter
 18648  1464  0AA5               	incf	___awdiv@counter,f
 18649  1465                     l8420:	
 18650  1465  1BA1               	btfsc	___awdiv@divisor+1,7
 18651  1466  2C71               	goto	l8422
 18652  1467  3001               	movlw	1
 18653  1468                     u8835:	
 18654  1468  35A0               	lslf	___awdiv@divisor,f
 18655  1469  0DA1               	rlf	___awdiv@divisor+1,f
 18656  146A  0B89               	decfsz	9,f
 18657  146B  2C68               	goto	u8835
 18658  146C  3001               	movlw	1
 18659  146D  00A4               	movwf	??___awdiv
 18660  146E  0824               	movf	??___awdiv,w
 18661  146F  07A5               	addwf	___awdiv@counter,f
 18662  1470  2C65               	goto	l8420
 18663  1471                     l8422:	
 18664  1471  3001               	movlw	1
 18665  1472                     u8855:	
 18666  1472  35A7               	lslf	___awdiv@quotient,f
 18667  1473  0DA8               	rlf	___awdiv@quotient+1,f
 18668  1474  0B89               	decfsz	9,f
 18669  1475  2C72               	goto	u8855
 18670  1476  0821               	movf	___awdiv@divisor+1,w
 18671  1477  0223               	subwf	___awdiv@dividend+1,w
 18672  1478  1D03               	skipz
 18673  1479  2C7C               	goto	u8865
 18674  147A  0820               	movf	___awdiv@divisor,w
 18675  147B  0222               	subwf	___awdiv@dividend,w
 18676  147C                     u8865:	
 18677  147C  1C03               	skipc
 18678  147D  2C83               	goto	l8428
 18679  147E  0820               	movf	___awdiv@divisor,w
 18680  147F  02A2               	subwf	___awdiv@dividend,f
 18681  1480  0821               	movf	___awdiv@divisor+1,w
 18682  1481  3BA3               	subwfb	___awdiv@dividend+1,f
 18683  1482  1427               	bsf	___awdiv@quotient,0
 18684  1483                     l8428:	
 18685  1483  3001               	movlw	1
 18686  1484                     u8875:	
 18687  1484  36A1               	lsrf	___awdiv@divisor+1,f
 18688  1485  0CA0               	rrf	___awdiv@divisor,f
 18689  1486  0B89               	decfsz	9,f
 18690  1487  2C84               	goto	u8875
 18691  1488  3001               	movlw	1
 18692  1489  02A5               	subwf	___awdiv@counter,f
 18693  148A  1D03               	btfss	3,2
 18694  148B  2C71               	goto	l8422
 18695  148C                     l8432:	
 18696  148C  0826               	movf	___awdiv@sign,w
 18697  148D  1903               	btfsc	3,2
 18698  148E  2C94               	goto	l8436
 18699  148F  09A7               	comf	___awdiv@quotient,f
 18700  1490  09A8               	comf	___awdiv@quotient+1,f
 18701  1491  0AA7               	incf	___awdiv@quotient,f
 18702  1492  1903               	skipnz
 18703  1493  0AA8               	incf	___awdiv@quotient+1,f
 18704  1494                     l8436:	
 18705  1494  0828               	movf	___awdiv@quotient+1,w
 18706  1495  01A1               	clrf	?___awdiv+1
 18707  1496  07A1               	addwf	?___awdiv+1,f
 18708  1497  0827               	movf	___awdiv@quotient,w
 18709  1498  01A0               	clrf	?___awdiv
 18710  1499  07A0               	addwf	?___awdiv,f
 18711  149A  0008               	return
 18712  149B                     __end_of___awdiv:	
 18713                           
 18714                           	psect	text132
 18715  1295                     __ptext132:	
 18716 ;; *************** function _setDimmerLights_SwOff *****************
 18717 ;; Defined at:
 18718 ;;		line 737 in file "../src/Dimmer_B1.c"
 18719 ;; Parameters:    Size  Location     Type
 18720 ;;  sw              1    wreg     unsigned char 
 18721 ;; Auto vars:     Size  Location     Type
 18722 ;;  sw              1    2[BANK0 ] unsigned char 
 18723 ;; Return value:  Size  Location     Type
 18724 ;;		None               void
 18725 ;; Registers used:
 18726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18727 ;; Tracked objects:
 18728 ;;		On entry : 0/0
 18729 ;;		On exit  : 0/0
 18730 ;;		Unchanged: 0/0
 18731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;Total ram usage:        1 bytes
 18737 ;; Hardware stack levels used:    1
 18738 ;; Hardware stack levels required when called:    6
 18739 ;; This function calls:
 18740 ;;		_DimmerLights_SelectPointer
 18741 ;; This function is called by:
 18742 ;;		_DlyOff_Main
 18743 ;;		_Exception_Main
 18744 ;;		_setControl_Lights_Table
 18745 ;;		_setRFSW_Control
 18746 ;;		_setRFSW_AdjControl
 18747 ;;		_setSw_Main
 18748 ;; This function uses a non-reentrant model
 18749 ;;
 18750                           
 18751                           
 18752                           ;psect for function _setDimmerLights_SwOff
 18753  1295                     _setDimmerLights_SwOff:	
 18754                           
 18755                           ;incstack = 0
 18756                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18757                           ;setDimmerLights_SwOff@sw stored from wreg
 18758  1295  0020               	movlb	0	; select bank0
 18759  1296  00A2               	movwf	setDimmerLights_SwOff@sw
 18760                           
 18761                           ;Dimmer_B1.c: 738: DimmerLights_SelectPointer(sw);
 18762  1297  0822               	movf	setDimmerLights_SwOff@sw,w
 18763  1298  319B  23C3  3192   	fcall	_DimmerLights_SelectPointer
 18764                           
 18765                           ;Dimmer_B1.c: 740: if (DimmerLights->SwFlag == 1) {
 18766  129B  0021               	movlb	1	; select bank1
 18767  129C  084A               	movf	_DimmerLights^(0+128),w
 18768  129D  0086               	movwf	6
 18769  129E  3001               	movlw	1	; select bank2/3
 18770  129F  0087               	movwf	7
 18771  12A0  1C01               	btfss	1,0
 18772  12A1  0008               	return
 18773                           
 18774                           ;Dimmer_B1.c: 741: DimmerLights->SwFlag = 0;
 18775  12A2  084A               	movf	_DimmerLights^(0+128),w
 18776  12A3  0086               	movwf	6
 18777  12A4  3001               	movlw	1	; select bank2/3
 18778  12A5  0087               	movwf	7
 18779  12A6  1001               	bcf	1,0
 18780                           
 18781                           ;Dimmer_B1.c: 742: if (DimmerLights->Status == 1) {
 18782  12A7  0A4A               	incf	_DimmerLights^(0+128),w
 18783  12A8  0086               	movwf	6
 18784  12A9  3001               	movlw	1	; select bank2/3
 18785  12AA  0087               	movwf	7
 18786  12AB  1C01               	btfss	1,0
 18787  12AC  2AC3               	goto	l8780
 18788                           
 18789                           ;Dimmer_B1.c: 743: if (DimmerLights->DimmingSwFlag == 1) {
 18790  12AD  084A               	movf	_DimmerLights^(0+128),w
 18791  12AE  0086               	movwf	6
 18792  12AF  3001               	movlw	1	; select bank2/3
 18793  12B0  0087               	movwf	7
 18794  12B1  1D81               	btfss	1,3
 18795  12B2  0008               	return
 18796                           
 18797                           ;Dimmer_B1.c: 744: DimmerLights->DimmingSwFlag = 0;
 18798  12B3  084A               	movf	_DimmerLights^(0+128),w
 18799  12B4  0086               	movwf	6
 18800  12B5  3001               	movlw	1	; select bank2/3
 18801  12B6  0087               	movwf	7
 18802  12B7  1181               	bcf	1,3
 18803                           
 18804                           ;Dimmer_B1.c: 746: DimmerLights->DimmingTrigger = 1;
 18805  12B8  084A               	movf	_DimmerLights^(0+128),w
 18806  12B9  0086               	movwf	6
 18807  12BA  3001               	movlw	1	; select bank2/3
 18808  12BB  0087               	movwf	7
 18809  12BC  1601               	bsf	1,4
 18810                           
 18811                           ;Dimmer_B1.c: 747: DimmerLights->DimmingSwitch = 0;
 18812  12BD  084A               	movf	_DimmerLights^(0+128),w
 18813  12BE  0086               	movwf	6
 18814  12BF  3001               	movlw	1	; select bank2/3
 18815  12C0  0087               	movwf	7
 18816  12C1  1281               	bcf	1,5
 18817                           
 18818                           ;Dimmer_B1.c: 748: }
 18819                           ;Dimmer_B1.c: 749: } else {
 18820  12C2  0008               	return
 18821  12C3                     l8780:	
 18822                           
 18823                           ;Dimmer_B1.c: 751: DimmerLights->Trigger = 1;
 18824  12C3  084A               	movf	_DimmerLights^(0+128),w
 18825  12C4  0086               	movwf	6
 18826  12C5  3001               	movlw	1	; select bank2/3
 18827  12C6  0087               	movwf	7
 18828  12C7  1481               	bsf	1,1
 18829                           
 18830                           ;Dimmer_B1.c: 752: DimmerLights->Switch = 0;
 18831  12C8  084A               	movf	_DimmerLights^(0+128),w
 18832  12C9  0086               	movwf	6
 18833  12CA  3001               	movlw	1	; select bank2/3
 18834  12CB  0087               	movwf	7
 18835  12CC  1101               	bcf	1,2
 18836  12CD  0008               	return
 18837  12CE                     __end_of_setDimmerLights_SwOff:	
 18838                           
 18839                           	psect	text133
 18840  1C91                     __ptext133:	
 18841 ;; *************** function _getDimmerLights_Status *****************
 18842 ;; Defined at:
 18843 ;;		line 1078 in file "../src/Dimmer_B1.c"
 18844 ;; Parameters:    Size  Location     Type
 18845 ;;  lights          1    wreg     unsigned char 
 18846 ;; Auto vars:     Size  Location     Type
 18847 ;;  lights          1    2[BANK0 ] unsigned char 
 18848 ;;  status          1    3[BANK0 ] unsigned char 
 18849 ;; Return value:  Size  Location     Type
 18850 ;;                  1    wreg      unsigned char 
 18851 ;; Registers used:
 18852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18853 ;; Tracked objects:
 18854 ;;		On entry : 0/0
 18855 ;;		On exit  : 0/0
 18856 ;;		Unchanged: 0/0
 18857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18859 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;Total ram usage:        2 bytes
 18863 ;; Hardware stack levels used:    1
 18864 ;; Hardware stack levels required when called:    6
 18865 ;; This function calls:
 18866 ;;		_DimmerLights_SelectPointer
 18867 ;; This function is called by:
 18868 ;;		_DlyOff_Main
 18869 ;;		_Exception_Main
 18870 ;;		_setControl_Lights_Table
 18871 ;;		_setRFSW_Control
 18872 ;;		_setRFSW_AdjControl
 18873 ;; This function uses a non-reentrant model
 18874 ;;
 18875                           
 18876                           
 18877                           ;psect for function _getDimmerLights_Status
 18878  1C91                     _getDimmerLights_Status:	
 18879                           
 18880                           ;incstack = 0
 18881                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18882                           ;getDimmerLights_Status@lights stored from wreg
 18883  1C91  0020               	movlb	0	; select bank0
 18884  1C92  00A2               	movwf	getDimmerLights_Status@lights
 18885                           
 18886                           ;Dimmer_B1.c: 1079: DimmerLights_SelectPointer(lights);
 18887  1C93  0822               	movf	getDimmerLights_Status@lights,w
 18888  1C94  319B  23C3         	fcall	_DimmerLights_SelectPointer
 18889                           
 18890                           ;Dimmer_B1.c: 1080: char status = DimmerLights->Status == 1 ? 1 : 0;
 18891  1C96  0021               	movlb	1	; select bank1
 18892  1C97  0A4A               	incf	_DimmerLights^(0+128),w
 18893  1C98  0086               	movwf	6
 18894  1C99  3001               	movlw	1	; select bank2/3
 18895  1C9A  0087               	movwf	7
 18896  1C9B  3000               	movlw	0
 18897  1C9C  1801               	btfsc	1,0
 18898  1C9D  3001               	movlw	1
 18899  1C9E  0020               	movlb	0	; select bank0
 18900  1C9F  00A3               	movwf	getDimmerLights_Status@status
 18901                           
 18902                           ;Dimmer_B1.c: 1081: return status;
 18903  1CA0  0823               	movf	getDimmerLights_Status@status,w
 18904  1CA1  0008               	return
 18905  1CA2                     __end_of_getDimmerLights_Status:	
 18906                           
 18907                           	psect	text134
 18908  1BC3                     __ptext134:	
 18909 ;; *************** function _DimmerLights_SelectPointer *****************
 18910 ;; Defined at:
 18911 ;;		line 619 in file "../src/Dimmer_B1.c"
 18912 ;; Parameters:    Size  Location     Type
 18913 ;;  lights          1    wreg     unsigned char 
 18914 ;; Auto vars:     Size  Location     Type
 18915 ;;  lights          1    1[BANK0 ] unsigned char 
 18916 ;; Return value:  Size  Location     Type
 18917 ;;		None               void
 18918 ;; Registers used:
 18919 ;;		wreg
 18920 ;; Tracked objects:
 18921 ;;		On entry : 0/0
 18922 ;;		On exit  : 0/0
 18923 ;;		Unchanged: 0/0
 18924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18929 ;;Total ram usage:        2 bytes
 18930 ;; Hardware stack levels used:    1
 18931 ;; Hardware stack levels required when called:    5
 18932 ;; This function calls:
 18933 ;;		Nothing
 18934 ;; This function is called by:
 18935 ;;		_setDimmerLights_SwOn
 18936 ;;		_setDimmerLights_SwOff
 18937 ;;		_setDimmerLights_DimmingOn
 18938 ;;		_setDimmerLights_Main
 18939 ;;		_getDimmerLights_Status
 18940 ;;		_setDimmerLights_DimmingRun
 18941 ;;		_setDimmerLights_Status
 18942 ;; This function uses a non-reentrant model
 18943 ;;
 18944                           
 18945                           
 18946                           ;psect for function _DimmerLights_SelectPointer
 18947  1BC3                     _DimmerLights_SelectPointer:	
 18948                           
 18949                           ;incstack = 0
 18950                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18951                           ;DimmerLights_SelectPointer@lights stored from wreg
 18952  1BC3  0020               	movlb	0	; select bank0
 18953  1BC4  00A1               	movwf	DimmerLights_SelectPointer@lights
 18954                           
 18955                           ;Dimmer_B1.c: 621: if (lights == 1) {
 18956  1BC5  0821               	movf	DimmerLights_SelectPointer@lights,w
 18957  1BC6  3A01               	xorlw	1
 18958  1BC7  1D03               	skipz
 18959  1BC8  0008               	return
 18960                           
 18961                           ;Dimmer_B1.c: 622: DimmerLights = &DimmerLights1;
 18962  1BC9  30C7               	movlw	_DimmerLights1& (0+255)
 18963  1BCA  00A0               	movwf	??_DimmerLights_SelectPointer
 18964  1BCB  0820               	movf	??_DimmerLights_SelectPointer,w
 18965  1BCC  0021               	movlb	1	; select bank1
 18966  1BCD  00CA               	movwf	_DimmerLights^(0+128)
 18967  1BCE  0008               	return
 18968  1BCF                     __end_of_DimmerLights_SelectPointer:	
 18969                           
 18970                           	psect	text135
 18971  1B01                     __ptext135:	
 18972 ;; *************** function _DelayOff_Initialization *****************
 18973 ;; Defined at:
 18974 ;;		line 26 in file "../src/DelayOff_B1.c"
 18975 ;; Parameters:    Size  Location     Type
 18976 ;;		None
 18977 ;; Auto vars:     Size  Location     Type
 18978 ;;		None
 18979 ;; Return value:  Size  Location     Type
 18980 ;;		None               void
 18981 ;; Registers used:
 18982 ;;		wreg, status,2, status,0, pclath, cstack
 18983 ;; Tracked objects:
 18984 ;;		On entry : 0/0
 18985 ;;		On exit  : 0/0
 18986 ;;		Unchanged: 0/0
 18987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18992 ;;Total ram usage:        0 bytes
 18993 ;; Hardware stack levels used:    1
 18994 ;; Hardware stack levels required when called:    7
 18995 ;; This function calls:
 18996 ;;		_DlyOff_Initialization
 18997 ;; This function is called by:
 18998 ;;		_main
 18999 ;; This function uses a non-reentrant model
 19000 ;;
 19001                           
 19002                           
 19003                           ;psect for function _DelayOff_Initialization
 19004  1B01                     _DelayOff_Initialization:	
 19005                           
 19006                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19007                           
 19008                           ;incstack = 0
 19009                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19010  1B01  3001               	movlw	1
 19011  1B02  319B  232E         	fcall	_DlyOff_Initialization
 19012  1B04  0008               	return
 19013  1B05                     __end_of_DelayOff_Initialization:	
 19014                           
 19015                           	psect	text136
 19016  1B2E                     __ptext136:	
 19017 ;; *************** function _DlyOff_Initialization *****************
 19018 ;; Defined at:
 19019 ;;		line 56 in file "../src/DelayOff_B1.c"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;  sw              1    wreg     unsigned char 
 19022 ;; Auto vars:     Size  Location     Type
 19023 ;;  sw              1    2[BANK0 ] unsigned char 
 19024 ;; Return value:  Size  Location     Type
 19025 ;;		None               void
 19026 ;; Registers used:
 19027 ;;		wreg, status,2, status,0, pclath, cstack
 19028 ;; Tracked objects:
 19029 ;;		On entry : 0/0
 19030 ;;		On exit  : 0/0
 19031 ;;		Unchanged: 0/0
 19032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19037 ;;Total ram usage:        1 bytes
 19038 ;; Hardware stack levels used:    1
 19039 ;; Hardware stack levels required when called:    6
 19040 ;; This function calls:
 19041 ;;		_DelayOffPointSelect
 19042 ;; This function is called by:
 19043 ;;		_DelayOff_Initialization
 19044 ;; This function uses a non-reentrant model
 19045 ;;
 19046                           
 19047                           
 19048                           ;psect for function _DlyOff_Initialization
 19049  1B2E                     _DlyOff_Initialization:	
 19050                           
 19051                           ;incstack = 0
 19052                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19053                           ;DlyOff_Initialization@sw stored from wreg
 19054  1B2E  0020               	movlb	0	; select bank0
 19055  1B2F  00A2               	movwf	DlyOff_Initialization@sw
 19056                           
 19057                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19058  1B30  0822               	movf	DlyOff_Initialization@sw,w
 19059  1B31  319B  23B7         	fcall	_DelayOffPointSelect
 19060  1B33  0008               	return
 19061  1B34                     __end_of_DlyOff_Initialization:	
 19062                           
 19063                           	psect	text137
 19064  1BB7                     __ptext137:	
 19065 ;; *************** function _DelayOffPointSelect *****************
 19066 ;; Defined at:
 19067 ;;		line 7 in file "../src/DelayOff_B1.c"
 19068 ;; Parameters:    Size  Location     Type
 19069 ;;  sw              1    wreg     unsigned char 
 19070 ;; Auto vars:     Size  Location     Type
 19071 ;;  sw              1    1[BANK0 ] unsigned char 
 19072 ;; Return value:  Size  Location     Type
 19073 ;;		None               void
 19074 ;; Registers used:
 19075 ;;		wreg
 19076 ;; Tracked objects:
 19077 ;;		On entry : 0/0
 19078 ;;		On exit  : 0/0
 19079 ;;		Unchanged: 0/0
 19080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19084 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19085 ;;Total ram usage:        2 bytes
 19086 ;; Hardware stack levels used:    1
 19087 ;; Hardware stack levels required when called:    5
 19088 ;; This function calls:
 19089 ;;		Nothing
 19090 ;; This function is called by:
 19091 ;;		_DlyOff_Initialization
 19092 ;;		_DlyOff_Main
 19093 ;;		_setDelayOff_GO
 19094 ;;		_getDelayOff_GO
 19095 ;; This function uses a non-reentrant model
 19096 ;;
 19097                           
 19098                           
 19099                           ;psect for function _DelayOffPointSelect
 19100  1BB7                     _DelayOffPointSelect:	
 19101                           
 19102                           ;incstack = 0
 19103                           ; Regs used in _DelayOffPointSelect: [wreg]
 19104                           ;DelayOffPointSelect@sw stored from wreg
 19105  1BB7  0020               	movlb	0	; select bank0
 19106  1BB8  00A1               	movwf	DelayOffPointSelect@sw
 19107                           
 19108                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19109  1BB9  0821               	movf	DelayOffPointSelect@sw,w
 19110  1BBA  3A01               	xorlw	1
 19111  1BBB  1D03               	skipz
 19112  1BBC  0008               	return
 19113                           
 19114                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19115  1BBD  3066               	movlw	_DlySw1& (0+255)
 19116  1BBE  00A0               	movwf	??_DelayOffPointSelect
 19117  1BBF  0820               	movf	??_DelayOffPointSelect,w
 19118  1BC0  0021               	movlb	1	; select bank1
 19119  1BC1  00C9               	movwf	_DelayOff^(0+128)
 19120  1BC2  0008               	return
 19121  1BC3                     __end_of_DelayOffPointSelect:	
 19122                           
 19123                           	psect	text138
 19124  07B6                     __ptext138:	
 19125 ;; *************** function _Buzzer_Main *****************
 19126 ;; Defined at:
 19127 ;;		line 46 in file "../src/Buzzer_B1.c"
 19128 ;; Parameters:    Size  Location     Type
 19129 ;;		None
 19130 ;; Auto vars:     Size  Location     Type
 19131 ;;		None
 19132 ;; Return value:  Size  Location     Type
 19133 ;;		None               void
 19134 ;; Registers used:
 19135 ;;		wreg, status,2, status,0
 19136 ;; Tracked objects:
 19137 ;;		On entry : 0/0
 19138 ;;		On exit  : 0/0
 19139 ;;		Unchanged: 0/0
 19140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;Total ram usage:        1 bytes
 19146 ;; Hardware stack levels used:    1
 19147 ;; Hardware stack levels required when called:    5
 19148 ;; This function calls:
 19149 ;;		Nothing
 19150 ;; This function is called by:
 19151 ;;		_main
 19152 ;; This function uses a non-reentrant model
 19153 ;;
 19154                           
 19155                           
 19156                           ;psect for function _Buzzer_Main
 19157  07B6                     _Buzzer_Main:	
 19158                           
 19159                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19160                           
 19161                           ;incstack = 0
 19162                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19163  07B6  0022               	movlb	2	; select bank2
 19164  07B7  1CA0               	btfss	_Buz1^(0+256),1
 19165  07B8  0008               	return
 19166                           
 19167                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19168  07B9  3001               	movlw	1
 19169  07BA  07A1               	addwf	(_Buz1^(0+256)+1),f
 19170  07BB  3000               	movlw	0
 19171  07BC  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19172                           
 19173                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19174  07BD  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19175  07BE  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19176  07BF  1D03               	skipz
 19177  07C0  2FC3               	goto	u11375
 19178  07C1  0826               	movf	(_Buz1^(0+256)+6),w
 19179  07C2  0221               	subwf	(_Buz1^(0+256)+1),w
 19180  07C3                     u11375:	
 19181  07C3  1C03               	skipc
 19182  07C4  0008               	return
 19183                           
 19184                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19185  07C5  01A1               	clrf	(_Buz1^(0+256)+1)
 19186  07C6  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19187                           
 19188                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19189  07C7  12A0               	bcf	_Buz1^(0+256),5
 19190  07C8  0020               	movlb	0	; select bank0
 19191  07C9  1D8D               	btfss	13,3	;volatile
 19192  07CA  2FCD               	goto	l10000
 19193  07CB  0022               	movlb	2	; select bank2
 19194  07CC  16A0               	bsf	_Buz1^(0+256),5
 19195  07CD                     l10000:	
 19196                           
 19197                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19198  07CD  0022               	movlb	2	; select bank2
 19199  07CE  1AA0               	btfsc	_Buz1^(0+256),5
 19200  07CF  2FF9               	goto	l96
 19201                           
 19202                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19203  07D0  08A3               	movf	(_Buz1^(0+256)+3),f
 19204  07D1  1D03               	skipz
 19205  07D2  2FF5               	goto	l97
 19206                           
 19207                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19208  07D3  1DA0               	btfss	_Buz1^(0+256),3
 19209  07D4  2FE3               	goto	l98
 19210                           
 19211                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19212  07D5  11A0               	bcf	_Buz1^(0+256),3
 19213                           
 19214                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19215  07D6  0824               	movf	(_Buz1^(0+256)+4),w
 19216  07D7  0020               	movlb	0	; select bank0
 19217  07D8  00A0               	movwf	??_Buzzer_Main
 19218  07D9  0820               	movf	??_Buzzer_Main,w
 19219  07DA  0022               	movlb	2	; select bank2
 19220  07DB  00A3               	movwf	(_Buz1^(0+256)+3)
 19221                           
 19222                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19223  07DC  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19224  07DD  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19225  07DE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19226  07DF  0828               	movf	(_Buz1^(0+256)+8),w
 19227  07E0  01A6               	clrf	(_Buz1^(0+256)+6)
 19228  07E1  07A6               	addwf	(_Buz1^(0+256)+6),f
 19229                           
 19230                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19231  07E2  0008               	return
 19232  07E3                     l98:	
 19233  07E3  1E20               	btfss	_Buz1^(0+256),4
 19234  07E4  2FF3               	goto	l100
 19235                           
 19236                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19237  07E5  1220               	bcf	_Buz1^(0+256),4
 19238                           
 19239                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19240  07E6  0825               	movf	(_Buz1^(0+256)+5),w
 19241  07E7  0020               	movlb	0	; select bank0
 19242  07E8  00A0               	movwf	??_Buzzer_Main
 19243  07E9  0820               	movf	??_Buzzer_Main,w
 19244  07EA  0022               	movlb	2	; select bank2
 19245  07EB  00A3               	movwf	(_Buz1^(0+256)+3)
 19246                           
 19247                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19248  07EC  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19249  07ED  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19250  07EE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19251  07EF  082A               	movf	(_Buz1^(0+256)+10),w
 19252  07F0  01A6               	clrf	(_Buz1^(0+256)+6)
 19253  07F1  07A6               	addwf	(_Buz1^(0+256)+6),f
 19254                           
 19255                           ;Buzzer_B1.c: 62: } else {
 19256  07F2  0008               	return
 19257  07F3                     l100:	
 19258                           
 19259                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19260  07F3  10A0               	bcf	_Buz1^(0+256),1
 19261                           
 19262                           ;Buzzer_B1.c: 64: }
 19263                           ;Buzzer_B1.c: 65: } else {
 19264  07F4  0008               	return
 19265  07F5                     l97:	
 19266                           
 19267                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19268  07F5  16A0               	bsf	_Buz1^(0+256),5
 19269                           
 19270                           ;Buzzer_B1.c: 68: RB3 = 1;
 19271  07F6  0020               	movlb	0	; select bank0
 19272  07F7  158D               	bsf	13,3	;volatile
 19273                           
 19274                           ;Buzzer_B1.c: 69: }
 19275                           ;Buzzer_B1.c: 70: } else {
 19276  07F8  0008               	return
 19277  07F9                     l96:	
 19278                           
 19279                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19280  07F9  12A0               	bcf	_Buz1^(0+256),5
 19281                           
 19282                           ;Buzzer_B1.c: 73: RB3 = 0;
 19283  07FA  0020               	movlb	0	; select bank0
 19284  07FB  118D               	bcf	13,3	;volatile
 19285                           
 19286                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19287  07FC  3001               	movlw	1
 19288  07FD  0022               	movlb	2	; select bank2
 19289  07FE  02A3               	subwf	(_Buz1^(0+256)+3),f
 19290  07FF  0008               	return
 19291  0800                     __end_of_Buzzer_Main:	
 19292                           
 19293                           	psect	text139
 19294  1AEF                     __ptext139:	
 19295 ;; *************** function _Buzzer_Initialization *****************
 19296 ;; Defined at:
 19297 ;;		line 11 in file "../src/Buzzer_B1.c"
 19298 ;; Parameters:    Size  Location     Type
 19299 ;;		None
 19300 ;; Auto vars:     Size  Location     Type
 19301 ;;		None
 19302 ;; Return value:  Size  Location     Type
 19303 ;;		None               void
 19304 ;; Registers used:
 19305 ;;		None
 19306 ;; Tracked objects:
 19307 ;;		On entry : 0/0
 19308 ;;		On exit  : 0/0
 19309 ;;		Unchanged: 0/0
 19310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19315 ;;Total ram usage:        0 bytes
 19316 ;; Hardware stack levels used:    1
 19317 ;; Hardware stack levels required when called:    5
 19318 ;; This function calls:
 19319 ;;		Nothing
 19320 ;; This function is called by:
 19321 ;;		_main
 19322 ;; This function uses a non-reentrant model
 19323 ;;
 19324                           
 19325                           
 19326                           ;psect for function _Buzzer_Initialization
 19327  1AEF                     _Buzzer_Initialization:	
 19328                           
 19329                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19330                           
 19331                           ;incstack = 0
 19332                           ; Regs used in _Buzzer_Initialization: []
 19333  1AEF  0022               	movlb	2	; select bank2
 19334  1AF0  1420               	bsf	_Buz1^(0+256),0
 19335  1AF1  0008               	return
 19336  1AF2                     __end_of_Buzzer_Initialization:	
 19337                           
 19338                           	psect	intentry
 19339  0004                     __pintentry:	
 19340 ;; *************** function _ISR *****************
 19341 ;; Defined at:
 19342 ;;		line 116 in file "../src/MCU_B1.c"
 19343 ;; Parameters:    Size  Location     Type
 19344 ;;		None
 19345 ;; Auto vars:     Size  Location     Type
 19346 ;;		None
 19347 ;; Return value:  Size  Location     Type
 19348 ;;		None               void
 19349 ;; Registers used:
 19350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19351 ;; Tracked objects:
 19352 ;;		On entry : 0/0
 19353 ;;		On exit  : 0/0
 19354 ;;		Unchanged: 0/0
 19355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;Total ram usage:        1 bytes
 19361 ;; Hardware stack levels used:    1
 19362 ;; Hardware stack levels required when called:    4
 19363 ;; This function calls:
 19364 ;;		_IOC_ISR
 19365 ;;		_TMR1_ISR
 19366 ;; This function is called by:
 19367 ;;		Interrupt level 1
 19368 ;; This function uses a non-reentrant model
 19369 ;;
 19370                           
 19371  0004                     _ISR:	
 19372                           
 19373                           ;incstack = 0
 19374                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19375  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19376  0005  3180               	pagesel	$
 19377  0006  0020               	movlb	0	; select bank0
 19378  0007  087F               	movf	127,w
 19379  0008  00FC               	movwf	??_ISR
 19380                           
 19381                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19382  0009  0021               	movlb	1	; select bank1
 19383  000A  1C11               	btfss	17,0	;volatile
 19384  000B  2812               	goto	i1l8294
 19385  000C  0020               	movlb	0	; select bank0
 19386  000D  1C11               	btfss	17,0	;volatile
 19387  000E  2812               	goto	i1l8294
 19388                           
 19389                           ;MCU_B1.c: 126: TMR1_ISR();
 19390  000F  319F  2782  3180   	fcall	_TMR1_ISR
 19391  0012                     i1l8294:	
 19392                           
 19393                           ;MCU_B1.c: 127: }
 19394                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19395  0012  198B               	btfsc	11,3	;volatile
 19396  0013  1C0B               	btfss	11,0	;volatile
 19397  0014  281A               	goto	i1l1210
 19398  0015  0027               	movlb	7	; select bank7
 19399  0016  1D16               	btfss	22,2	;volatile
 19400  0017  281A               	goto	i1l1210
 19401                           
 19402                           ;MCU_B1.c: 139: IOC_ISR();
 19403  0018  319B  2366         	fcall	_IOC_ISR
 19404  001A                     i1l1210:	
 19405                           ;MCU_B1.c: 140: }
 19406                           ;MCU_B1.c: 148: return;
 19407                           
 19408  001A  087C               	movf	??_ISR,w
 19409  001B  0020               	movlb	0	; select bank0
 19410  001C  00FF               	movwf	127
 19411  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19412  001E  0009               	retfie
 19413  001F                     __end_of_ISR:	
 19414                           
 19415                           	psect	text141
 19416  1F82                     __ptext141:	
 19417 ;; *************** function _TMR1_ISR *****************
 19418 ;; Defined at:
 19419 ;;		line 236 in file "../src/MCU_B1.c"
 19420 ;; Parameters:    Size  Location     Type
 19421 ;;		None
 19422 ;; Auto vars:     Size  Location     Type
 19423 ;;		None
 19424 ;; Return value:  Size  Location     Type
 19425 ;;		None               void
 19426 ;; Registers used:
 19427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19428 ;; Tracked objects:
 19429 ;;		On entry : 0/0
 19430 ;;		On exit  : 0/0
 19431 ;;		Unchanged: 0/0
 19432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19437 ;;Total ram usage:        0 bytes
 19438 ;; Hardware stack levels used:    1
 19439 ;; Hardware stack levels required when called:    1
 19440 ;; This function calls:
 19441 ;;		_DimmerLights_TMR_1
 19442 ;; This function is called by:
 19443 ;;		_ISR
 19444 ;; This function uses a non-reentrant model
 19445 ;;
 19446                           
 19447                           
 19448                           ;psect for function _TMR1_ISR
 19449  1F82                     _TMR1_ISR:	
 19450                           
 19451                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19452                           
 19453                           ;incstack = 0
 19454                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19455  1F82  3189  2158  319F   	fcall	_DimmerLights_TMR_1
 19456                           
 19457                           ;MCU_B1.c: 268: Timer1.Count++;
 19458  1F85  3001               	movlw	1
 19459  1F86  0022               	movlb	2	; select bank2
 19460  1F87  07B2               	addwf	(_Timer1^(0+256)+1),f
 19461  1F88  3000               	movlw	0
 19462  1F89  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19463                           
 19464                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19465  1F8A  3001               	movlw	1
 19466  1F8B  3E31               	addlw	_Timer1& (0+255)
 19467  1F8C  0086               	movwf	6
 19468  1F8D  3001               	movlw	1	; select bank2/3
 19469  1F8E  0087               	movwf	7
 19470  1F8F  3F40               	moviw [0]fsr1
 19471  1F90  3AC8               	xorlw	200
 19472  1F91  1D03               	skipz
 19473  1F92  2F95               	goto	u781_25
 19474  1F93  3F41               	moviw [1]fsr1
 19475  1F94  3A00               	xorlw	0
 19476  1F95                     u781_25:	
 19477  1F95  1D03               	skipz
 19478  1F96  2F9A               	goto	i1l7800
 19479                           
 19480                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19481  1F97  01B2               	clrf	(_Timer1^(0+256)+1)
 19482  1F98  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19483                           
 19484                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19485  1F99  1431               	bsf	_Timer1^(0+256),0
 19486  1F9A                     i1l7800:	
 19487                           
 19488                           ;MCU_B1.c: 272: }
 19489                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19490  1F9A  30FA               	movlw	250
 19491  1F9B  0020               	movlb	0	; select bank0
 19492  1F9C  0097               	movwf	23	;volatile
 19493                           
 19494                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19495  1F9D  3038               	movlw	56
 19496  1F9E  0096               	movwf	22	;volatile
 19497                           
 19498                           ;MCU_B1.c: 276: TMR1IF = 0;
 19499  1F9F  1011               	bcf	17,0	;volatile
 19500  1FA0  0008               	return
 19501  1FA1                     __end_of_TMR1_ISR:	
 19502                           
 19503                           	psect	text142
 19504  0958                     __ptext142:	
 19505 ;; *************** function _DimmerLights_TMR_1 *****************
 19506 ;; Defined at:
 19507 ;;		line 1385 in file "../src/Dimmer_B1.c"
 19508 ;; Parameters:    Size  Location     Type
 19509 ;;		None
 19510 ;; Auto vars:     Size  Location     Type
 19511 ;;		None
 19512 ;; Return value:  Size  Location     Type
 19513 ;;		None               void
 19514 ;; Registers used:
 19515 ;;		wreg, status,2, status,0
 19516 ;; Tracked objects:
 19517 ;;		On entry : 0/0
 19518 ;;		On exit  : 0/0
 19519 ;;		Unchanged: 0/0
 19520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;Total ram usage:        1 bytes
 19526 ;; Hardware stack levels used:    1
 19527 ;; This function calls:
 19528 ;;		Nothing
 19529 ;; This function is called by:
 19530 ;;		_TMR1_ISR
 19531 ;; This function uses a non-reentrant model
 19532 ;;
 19533                           
 19534                           
 19535                           ;psect for function _DimmerLights_TMR_1
 19536  0958                     _DimmerLights_TMR_1:	
 19537                           
 19538                           ;Dimmer_B1.c: 1387: if (DimmerIntr1.Start == 1) {
 19539                           
 19540                           ;incstack = 0
 19541                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19542  0958  0021               	movlb	1	; select bank1
 19543  0959  1D3B               	btfss	_DimmerIntr1^(0+128),2
 19544  095A  297D               	goto	i1l845
 19545                           
 19546                           ;Dimmer_B1.c: 1388: DimmerIntr1.Count++;
 19547  095B  3001               	movlw	1
 19548  095C  00F0               	movwf	??_DimmerLights_TMR_1
 19549  095D  0870               	movf	??_DimmerLights_TMR_1,w
 19550  095E  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19551                           
 19552                           ;Dimmer_B1.c: 1390: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19553  095F  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19554  0960  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19555  0961  1D03               	skipz
 19556  0962  2965               	goto	i1l7226
 19557                           
 19558                           ;Dimmer_B1.c: 1391: DimmerIntr1.Count = 0;
 19559  0963  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19560                           
 19561                           ;Dimmer_B1.c: 1392: DimmerIntr1.Start = 0;
 19562  0964  113B               	bcf	_DimmerIntr1^(0+128),2
 19563  0965                     i1l7226:	
 19564                           
 19565                           ;Dimmer_B1.c: 1393: }
 19566                           ;Dimmer_B1.c: 1407: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19567  0965  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19568  0966  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19569  0967  1903               	btfsc	3,2
 19570                           
 19571                           ;Dimmer_B1.c: 1408: if (DimmerIntr1.ControlStatus == 1) {
 19572  0968  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19573  0969  296C               	goto	i1l7232
 19574                           
 19575                           ;Dimmer_B1.c: 1409: RB1 = 0;
 19576  096A  0020               	movlb	0	; select bank0
 19577  096B  108D               	bcf	13,1	;volatile
 19578  096C                     i1l7232:	
 19579                           
 19580                           ;Dimmer_B1.c: 1410: }
 19581                           ;Dimmer_B1.c: 1411: }
 19582                           ;Dimmer_B1.c: 1414: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19583  096C  0021               	movlb	1	; select bank1
 19584  096D  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19585  096E  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19586  096F  1903               	btfsc	3,2
 19587                           
 19588                           ;Dimmer_B1.c: 1415: if (DimmerIntr1.ControlStatus == 1) {
 19589  0970  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19590  0971  2974               	goto	i1l7238
 19591                           
 19592                           ;Dimmer_B1.c: 1416: RB1 = 1;
 19593  0972  0020               	movlb	0	; select bank0
 19594  0973  148D               	bsf	13,1	;volatile
 19595  0974                     i1l7238:	
 19596                           
 19597                           ;Dimmer_B1.c: 1417: }
 19598                           ;Dimmer_B1.c: 1418: }
 19599                           ;Dimmer_B1.c: 1421: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19600  0974  0021               	movlb	1	; select bank1
 19601  0975  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19602  0976  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19603  0977  1903               	btfsc	3,2
 19604                           
 19605                           ;Dimmer_B1.c: 1422: if (DimmerIntr1.ControlStatus == 1) {
 19606  0978  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19607  0979  298E               	goto	i1l853
 19608                           
 19609                           ;Dimmer_B1.c: 1423: RB1 = 0;
 19610  097A  0020               	movlb	0	; select bank0
 19611  097B  108D               	bcf	13,1	;volatile
 19612                           
 19613                           ;Dimmer_B1.c: 1424: }
 19614                           ;Dimmer_B1.c: 1427: }
 19615                           ;Dimmer_B1.c: 1429: } else {
 19616  097C  298E               	goto	i1l853
 19617  097D                     i1l845:	
 19618                           
 19619                           ;Dimmer_B1.c: 1430: if (DimmerIntr1.GO == 1) {
 19620  097D  1C3B               	btfss	_DimmerIntr1^(0+128),0
 19621  097E  298E               	goto	i1l853
 19622                           
 19623                           ;Dimmer_B1.c: 1431: DimmerIntr1.Count++;
 19624  097F  3001               	movlw	1
 19625  0980  00F0               	movwf	??_DimmerLights_TMR_1
 19626  0981  0870               	movf	??_DimmerLights_TMR_1,w
 19627  0982  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19628                           
 19629                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.Count == 4) {
 19630  0983  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19631  0984  3A04               	xorlw	4
 19632  0985  1D03               	skipz
 19633  0986  298E               	goto	i1l853
 19634                           
 19635                           ;Dimmer_B1.c: 1433: DimmerIntr1.Count = 0;
 19636  0987  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19637                           
 19638                           ;Dimmer_B1.c: 1434: DimmerIntr1.GO = 0;
 19639  0988  103B               	bcf	_DimmerIntr1^(0+128),0
 19640                           
 19641                           ;Dimmer_B1.c: 1435: DimmerIntr1.Start = 1;
 19642  0989  153B               	bsf	_DimmerIntr1^(0+128),2
 19643                           
 19644                           ;Dimmer_B1.c: 1437: if (DimmerIntr1.ControlStatus == 1) {
 19645  098A  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19646  098B  298E               	goto	i1l853
 19647                           
 19648                           ;Dimmer_B1.c: 1438: RB1 = 1;
 19649  098C  0020               	movlb	0	; select bank0
 19650  098D  148D               	bsf	13,1	;volatile
 19651  098E                     i1l853:	
 19652                           
 19653                           ;Dimmer_B1.c: 1439: }
 19654                           ;Dimmer_B1.c: 1440: }
 19655                           ;Dimmer_B1.c: 1441: }
 19656                           ;Dimmer_B1.c: 1442: }
 19657                           ;Dimmer_B1.c: 1444: if (DimmerIntr1.Tune == 1) {
 19658  098E  0021               	movlb	1	; select bank1
 19659  098F  1CBB               	btfss	_DimmerIntr1^(0+128),1
 19660  0990  0008               	return
 19661                           
 19662                           ;Dimmer_B1.c: 1445: DimmerIntr1.Tune = 0;
 19663  0991  10BB               	bcf	_DimmerIntr1^(0+128),1
 19664                           
 19665                           ;Dimmer_B1.c: 1446: DimmerIntr1.TuneTime++;
 19666  0992  3001               	movlw	1
 19667  0993  00F0               	movwf	??_DimmerLights_TMR_1
 19668  0994  0870               	movf	??_DimmerLights_TMR_1,w
 19669  0995  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 19670                           
 19671                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19672  0996  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 19673  0997  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 19674  0998  1C03               	skipc
 19675  0999  0008               	return
 19676                           
 19677                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneTime = 0;
 19678  099A  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 19679                           
 19680                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneGO = 1;
 19681  099B  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 19682                           
 19683                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.Dimming_Sw == 1) {
 19684  099C  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19685  099D  29B4               	goto	i1l859
 19686                           
 19687                           ;Dimmer_B1.c: 1451: if (DimmerIntr1.Dimming_Status == 0) {
 19688  099E  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 19689  099F  29AB               	goto	i1l7276
 19690                           
 19691                           ;Dimmer_B1.c: 1452: if (DimmerIntr1.DimmingValue < ((char)(80*0.6))) {
 19692  09A0  3030               	movlw	48
 19693  09A1  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19694  09A2  1803               	skipnc
 19695  09A3  29A9               	goto	i1l861
 19696                           
 19697                           ;Dimmer_B1.c: 1453: DimmerIntr1.DimmingValue++;
 19698  09A4  3001               	movlw	1
 19699  09A5  00F0               	movwf	??_DimmerLights_TMR_1
 19700  09A6  0870               	movf	??_DimmerLights_TMR_1,w
 19701  09A7  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19702                           
 19703                           ;Dimmer_B1.c: 1454: } else {
 19704  09A8  0008               	return
 19705  09A9                     i1l861:	
 19706                           
 19707                           ;Dimmer_B1.c: 1455: DimmerIntr1.Dimming_Status = 1;
 19708  09A9  16BB               	bsf	_DimmerIntr1^(0+128),5
 19709                           
 19710                           ;Dimmer_B1.c: 1456: }
 19711                           ;Dimmer_B1.c: 1457: } else {
 19712  09AA  0008               	return
 19713  09AB                     i1l7276:	
 19714                           
 19715                           ;Dimmer_B1.c: 1458: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 19716  09AB  3007               	movlw	7
 19717  09AC  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19718  09AD  1C03               	skipc
 19719  09AE  29B2               	goto	i1l864
 19720                           
 19721                           ;Dimmer_B1.c: 1459: DimmerIntr1.DimmingValue--;
 19722  09AF  3001               	movlw	1
 19723  09B0  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19724                           
 19725                           ;Dimmer_B1.c: 1460: } else {
 19726  09B1  0008               	return
 19727  09B2                     i1l864:	
 19728                           
 19729                           ;Dimmer_B1.c: 1461: DimmerIntr1.Dimming_Status = 0;
 19730  09B2  12BB               	bcf	_DimmerIntr1^(0+128),5
 19731                           
 19732                           ;Dimmer_B1.c: 1462: }
 19733                           ;Dimmer_B1.c: 1463: }
 19734                           ;Dimmer_B1.c: 1464: } else if (DimmerIntr1.Dimming_RF == 1) {
 19735  09B3  0008               	return
 19736  09B4                     i1l859:	
 19737  09B4  1F3B               	btfss	_DimmerIntr1^(0+128),6
 19738  09B5  0008               	return
 19739                           
 19740                           ;Dimmer_B1.c: 1465: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19741  09B6  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 19742  09B7  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19743  09B8  1803               	skipnc
 19744  09B9  29BF               	goto	i1l7284
 19745                           
 19746                           ;Dimmer_B1.c: 1466: DimmerIntr1.DimmingValue++;
 19747  09BA  3001               	movlw	1
 19748  09BB  00F0               	movwf	??_DimmerLights_TMR_1
 19749  09BC  0870               	movf	??_DimmerLights_TMR_1,w
 19750  09BD  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19751                           
 19752                           ;Dimmer_B1.c: 1467: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19753  09BE  0008               	return
 19754  09BF                     i1l7284:	
 19755  09BF  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19756  09C0  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 19757  09C1  1803               	skipnc
 19758  09C2  29C6               	goto	i1l870
 19759                           
 19760                           ;Dimmer_B1.c: 1468: DimmerIntr1.DimmingValue--;
 19761  09C3  3001               	movlw	1
 19762  09C4  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19763                           
 19764                           ;Dimmer_B1.c: 1469: } else {
 19765  09C5  0008               	return
 19766  09C6                     i1l870:	
 19767                           
 19768                           ;Dimmer_B1.c: 1470: DimmerIntr1.Dimming_RF = 0;
 19769  09C6  133B               	bcf	_DimmerIntr1^(0+128),6
 19770  09C7  0008               	return
 19771  09C8                     __end_of_DimmerLights_TMR_1:	
 19772                           
 19773                           	psect	text143
 19774  1B66                     __ptext143:	
 19775 ;; *************** function _IOC_ISR *****************
 19776 ;; Defined at:
 19777 ;;		line 395 in file "../src/MCU_B1.c"
 19778 ;; Parameters:    Size  Location     Type
 19779 ;;		None
 19780 ;; Auto vars:     Size  Location     Type
 19781 ;;		None
 19782 ;; Return value:  Size  Location     Type
 19783 ;;		None               void
 19784 ;; Registers used:
 19785 ;;		wreg, status,2, status,0, pclath, cstack
 19786 ;; Tracked objects:
 19787 ;;		On entry : 0/0
 19788 ;;		On exit  : 0/0
 19789 ;;		Unchanged: 0/0
 19790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19795 ;;Total ram usage:        0 bytes
 19796 ;; Hardware stack levels used:    1
 19797 ;; Hardware stack levels required when called:    3
 19798 ;; This function calls:
 19799 ;;		_DimmerLights_IOC_1
 19800 ;; This function is called by:
 19801 ;;		_ISR
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805                           
 19806                           ;psect for function _IOC_ISR
 19807  1B66                     _IOC_ISR:	
 19808                           
 19809                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 19810                           
 19811                           ;incstack = 0
 19812                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19813  1B66  0021               	movlb	1	; select bank1
 19814  1B67  1C2E               	btfss	_myMain^(0+128),0
 19815  1B68  2B6B               	goto	i1l7810
 19816                           
 19817                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 19818  1B69  3193  2343         	fcall	_DimmerLights_IOC_1
 19819  1B6B                     i1l7810:	
 19820                           
 19821                           ;MCU_B1.c: 416: }
 19822                           ;MCU_B1.c: 418: IOCBF2 = 0;
 19823  1B6B  0027               	movlb	7	; select bank7
 19824  1B6C  1116               	bcf	22,2	;volatile
 19825                           
 19826                           ;MCU_B1.c: 419: IOCIF = 0;
 19827  1B6D  100B               	bcf	11,0	;volatile
 19828  1B6E  0008               	return
 19829  1B6F                     __end_of_IOC_ISR:	
 19830                           
 19831                           	psect	text144
 19832  1343                     __ptext144:	
 19833 ;; *************** function _DimmerLights_IOC_1 *****************
 19834 ;; Defined at:
 19835 ;;		line 1477 in file "../src/Dimmer_B1.c"
 19836 ;; Parameters:    Size  Location     Type
 19837 ;;		None
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;		None
 19840 ;; Return value:  Size  Location     Type
 19841 ;;		None               void
 19842 ;; Registers used:
 19843 ;;		wreg, status,2, status,0, pclath, cstack
 19844 ;; Tracked objects:
 19845 ;;		On entry : 0/0
 19846 ;;		On exit  : 0/0
 19847 ;;		Unchanged: 0/0
 19848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19851 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19852 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;Total ram usage:        2 bytes
 19854 ;; Hardware stack levels used:    1
 19855 ;; Hardware stack levels required when called:    2
 19856 ;; This function calls:
 19857 ;;		i1_Division
 19858 ;; This function is called by:
 19859 ;;		_IOC_ISR
 19860 ;; This function uses a non-reentrant model
 19861 ;;
 19862                           
 19863                           
 19864                           ;psect for function _DimmerLights_IOC_1
 19865  1343                     _DimmerLights_IOC_1:	
 19866                           
 19867                           ;Dimmer_B1.c: 1491: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 19868                           
 19869                           ;incstack = 0
 19870                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19871  1343  0021               	movlb	1	; select bank1
 19872  1344  193B               	btfsc	_DimmerIntr1^(0+128),2
 19873  1345  0008               	return
 19874  1346  183B               	btfsc	_DimmerIntr1^(0+128),0
 19875  1347  0008               	return
 19876                           
 19877                           ;Dimmer_B1.c: 1493: if (RB2 != DimmerIntr1.Status) {
 19878  1348  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 19879  1349  0C89               	rrf	9,f
 19880  134A  3901               	andlw	1
 19881  134B  00FA               	movwf	??_DimmerLights_IOC_1
 19882  134C  3000               	movlw	0
 19883  134D  0020               	movlb	0	; select bank0
 19884  134E  190D               	btfsc	13,2	;volatile
 19885  134F  3001               	movlw	1
 19886  1350  067A               	xorwf	??_DimmerLights_IOC_1,w
 19887  1351  1903               	skipnz
 19888  1352  0008               	return
 19889                           
 19890                           ;Dimmer_B1.c: 1494: RB5 = RB5 == 1 ? 0 : 1;
 19891  1353  3020               	movlw	32
 19892  1354  068D               	xorwf	13,f
 19893                           
 19894                           ;Dimmer_B1.c: 1496: DimmerIntr1.Count = 0;
 19895  1355  0021               	movlb	1	; select bank1
 19896  1356  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19897                           
 19898                           ;Dimmer_B1.c: 1497: DimmerIntr1.GO = 1;
 19899  1357  143B               	bsf	_DimmerIntr1^(0+128),0
 19900                           
 19901                           ;Dimmer_B1.c: 1499: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19902  1358  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19903  1359  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 19904                           
 19905                           ;Dimmer_B1.c: 1500: DimmerIntr1.Tune = 1;
 19906  135A  14BB               	bsf	_DimmerIntr1^(0+128),1
 19907                           
 19908                           ;Dimmer_B1.c: 1501: }
 19909                           ;Dimmer_B1.c: 1503: if (DimmerIntr1.TuneGO == 1) {
 19910  135B  1F3C               	btfss	(_DimmerIntr1^(0+128)+1),6
 19911  135C  2B7B               	goto	i1l7314
 19912                           
 19913                           ;Dimmer_B1.c: 1504: DimmerIntr1.TuneGO = 0;
 19914  135D  133C               	bcf	(_DimmerIntr1^(0+128)+1),6
 19915                           
 19916                           ;Dimmer_B1.c: 1507: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 19917  135E  3002               	movlw	2
 19918  135F  00FA               	movwf	??_DimmerLights_IOC_1
 19919  1360  087A               	movf	??_DimmerLights_IOC_1,w
 19920  1361  00F5               	movwf	i1Division@num
 19921  1362  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19922  1363  319C  2447  3193   	fcall	i1_Division
 19923  1366  00FB               	movwf	??_DimmerLights_IOC_1+1
 19924  1367  087B               	movf	??_DimmerLights_IOC_1+1,w
 19925  1368  0021               	movlb	1	; select bank1
 19926  1369  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 19927                           
 19928                           ;Dimmer_B1.c: 1508: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 19929  136A  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 19930  136B  3AFF               	xorlw	255
 19931  136C  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 19932  136D  3E3C               	addlw	60
 19933  136E  00FA               	movwf	??_DimmerLights_IOC_1
 19934  136F  087A               	movf	??_DimmerLights_IOC_1,w
 19935  1370  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 19936                           
 19937                           ;Dimmer_B1.c: 1509: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 19938  1371  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 19939  1372  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 19940  1373  00FA               	movwf	??_DimmerLights_IOC_1
 19941  1374  087A               	movf	??_DimmerLights_IOC_1,w
 19942  1375  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 19943                           
 19944                           ;Dimmer_B1.c: 1510: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 19945  1376  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 19946  1377  3E01               	addlw	1
 19947  1378  00FA               	movwf	??_DimmerLights_IOC_1
 19948  1379  087A               	movf	??_DimmerLights_IOC_1,w
 19949  137A  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 19950  137B                     i1l7314:	
 19951                           
 19952                           ;Dimmer_B1.c: 1511: }
 19953                           ;Dimmer_B1.c: 1515: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 19954  137B  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 19955  137C  0020               	movlb	0	; select bank0
 19956  137D  1D0D               	btfss	13,2	;volatile
 19957  137E  0008               	return
 19958  137F  0021               	movlb	1	; select bank1
 19959  1380  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 19960  1381  0008               	return
 19961  1382                     __end_of_DimmerLights_IOC_1:	
 19962                           
 19963                           	psect	text145
 19964  1C47                     __ptext145:	
 19965 ;; *************** function i1_Division *****************
 19966 ;; Defined at:
 19967 ;;		line 1380 in file "../src/Dimmer_B1.c"
 19968 ;; Parameters:    Size  Location     Type
 19969 ;;  value           1    wreg     unsigned char 
 19970 ;;  num             1    5[COMMON] unsigned char 
 19971 ;; Auto vars:     Size  Location     Type
 19972 ;;  value           1    8[COMMON] unsigned char 
 19973 ;;  Division        1    9[COMMON] unsigned char 
 19974 ;; Return value:  Size  Location     Type
 19975 ;;                  1    wreg      unsigned char 
 19976 ;; Registers used:
 19977 ;;		wreg, status,2, status,0, pclath, cstack
 19978 ;; Tracked objects:
 19979 ;;		On entry : 0/0
 19980 ;;		On exit  : 0/0
 19981 ;;		Unchanged: 0/0
 19982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19983 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19984 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19985 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19986 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19987 ;;Total ram usage:        5 bytes
 19988 ;; Hardware stack levels used:    1
 19989 ;; Hardware stack levels required when called:    1
 19990 ;; This function calls:
 19991 ;;		i1___lbdiv
 19992 ;; This function is called by:
 19993 ;;		_DimmerLights_IOC_1
 19994 ;; This function uses a non-reentrant model
 19995 ;;
 19996                           
 19997                           
 19998                           ;psect for function i1_Division
 19999  1C47                     i1_Division:	
 20000                           
 20001                           ;incstack = 0
 20002                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20003                           ;i1Division@value stored from wreg
 20004  1C47  00F8               	movwf	i1Division@value
 20005                           
 20006                           ;Dimmer_B1.c: 1381: char result = (char) (value / num);
 20007  1C48  0875               	movf	i1Division@num,w
 20008  1C49  00F6               	movwf	??i1_Division
 20009  1C4A  0876               	movf	??i1_Division,w
 20010  1C4B  00F0               	movwf	i1___lbdiv@divisor
 20011  1C4C  0878               	movf	i1Division@value,w
 20012  1C4D  3190  2007         	fcall	i1___lbdiv
 20013  1C4F  00F7               	movwf	??i1_Division+1
 20014  1C50  0877               	movf	??i1_Division+1,w
 20015  1C51  00F9               	movwf	i1Division@result
 20016                           
 20017                           ;Dimmer_B1.c: 1382: return result;
 20018  1C52  0879               	movf	i1Division@result,w
 20019  1C53  0008               	return
 20020  1C54                     __end_ofi1_Division:	
 20021                           
 20022                           	psect	text146
 20023  1007                     __ptext146:	
 20024 ;; *************** function i1___lbdiv *****************
 20025 ;; Defined at:
 20026 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20027 ;; Parameters:    Size  Location     Type
 20028 ;;  dividend        1    wreg     unsigned char 
 20029 ;;  divisor         1    0[COMMON] unsigned char 
 20030 ;; Auto vars:     Size  Location     Type
 20031 ;;  dividend        1    2[COMMON] unsigned char 
 20032 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20033 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20034 ;; Return value:  Size  Location     Type
 20035 ;;                  1    wreg      unsigned char 
 20036 ;; Registers used:
 20037 ;;		wreg, status,2, status,0
 20038 ;; Tracked objects:
 20039 ;;		On entry : 0/0
 20040 ;;		On exit  : 0/0
 20041 ;;		Unchanged: 0/0
 20042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20043 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20046 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20047 ;;Total ram usage:        5 bytes
 20048 ;; Hardware stack levels used:    1
 20049 ;; This function calls:
 20050 ;;		Nothing
 20051 ;; This function is called by:
 20052 ;;		i1_Division
 20053 ;; This function uses a non-reentrant model
 20054 ;;
 20055                           
 20056                           
 20057                           ;psect for function i1___lbdiv
 20058  1007                     i1___lbdiv:	
 20059                           
 20060                           ;incstack = 0
 20061                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20062                           ;i1___lbdiv@dividend stored from wreg
 20063  1007  00F2               	movwf	i1___lbdiv@dividend
 20064  1008  01F4               	clrf	i1___lbdiv@quotient
 20065  1009  0870               	movf	i1___lbdiv@divisor,w
 20066  100A  1903               	btfsc	3,2
 20067  100B  2826               	goto	i1l6680
 20068  100C  01F3               	clrf	i1___lbdiv@counter
 20069  100D  0AF3               	incf	i1___lbdiv@counter,f
 20070  100E                     i1l6668:	
 20071  100E  1BF0               	btfsc	i1___lbdiv@divisor,7
 20072  100F  2817               	goto	i1l6670
 20073  1010  1003               	clrc
 20074  1011  0DF0               	rlf	i1___lbdiv@divisor,f
 20075  1012  3001               	movlw	1
 20076  1013  00F1               	movwf	??i1___lbdiv
 20077  1014  0871               	movf	??i1___lbdiv,w
 20078  1015  07F3               	addwf	i1___lbdiv@counter,f
 20079  1016  280E               	goto	i1l6668
 20080  1017                     i1l6670:	
 20081  1017  1003               	clrc
 20082  1018  0DF4               	rlf	i1___lbdiv@quotient,f
 20083  1019  0870               	movf	i1___lbdiv@divisor,w
 20084  101A  0272               	subwf	i1___lbdiv@dividend,w
 20085  101B  1C03               	skipc
 20086  101C  2821               	goto	L11
 20087  101D  0870               	movf	i1___lbdiv@divisor,w
 20088  101E  02F2               	subwf	i1___lbdiv@dividend,f
 20089  101F  1474               	bsf	i1___lbdiv@quotient,0
 20090  1020  1003               	clrc
 20091  1021                     L11:	
 20092  1021  0CF0               	rrf	i1___lbdiv@divisor,f
 20093  1022  3001               	movlw	1
 20094  1023  02F3               	subwf	i1___lbdiv@counter,f
 20095  1024  1D03               	btfss	3,2
 20096  1025  2817               	goto	i1l6670
 20097  1026                     i1l6680:	
 20098  1026  0874               	movf	i1___lbdiv@quotient,w
 20099  1027  0008               	return
 20100  1028                     __end_ofi1___lbdiv:	
 20101  007E                     btemp	set	126	;btemp
 20102  007E                     pic14e$flags	set	126
 20103  007E                     wtemp	set	126
 20104  007E                     wtemp0	set	126
 20105  0080                     wtemp1	set	128
 20106  0082                     wtemp2	set	130
 20107  0084                     wtemp3	set	132
 20108  0086                     wtemp4	set	134
 20109  0088                     wtemp5	set	136
 20110  007F                     wtemp6	set	127
 20111  007E                     ttemp	set	126
 20112  007E                     ttemp0	set	126
 20113  0081                     ttemp1	set	129
 20114  0084                     ttemp2	set	132
 20115  0087                     ttemp3	set	135
 20116  007F                     ttemp4	set	127
 20117  007E                     ltemp	set	126
 20118  007E                     ltemp0	set	126
 20119  0082                     ltemp1	set	130
 20120  0086                     ltemp2	set	134
 20121  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      69
    BANK2            80      0      79
    BANK3            80      0      47
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK3[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  175168
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     312
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5504
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5504
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4323
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4323
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   52119
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   52119
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47712
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5053
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   42387
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12234
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24601
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2043
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3747
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57821
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57512
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32906
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     166
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4453
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24213
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32755
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   32755
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5431
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5431
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1905
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      45       7       86.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     166      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     166      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 02 16:34:51 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1E8D                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 1522  
                                      l96 07F9                                        l88 1536  
                                      l97 07F5                                        l98 07E3  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 108F  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00CE                            setTemp_Main@AD 006C  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1B8B  
                  __end_of_setDelayOff_GO 0D37                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 1795                      _setDimmerLights_Line 1CF7  
                            ___ftadd@sign 004B                                       l100 07F3  
                                     l303 1E99                                       l304 1E9B  
                                     l235 08C1                      _setDimmerLights_SwOn 11F3  
                                     l531 0951                                       l347 10B9  
                                     l761 1F25                                       l692 1C70  
                                     l788 0778                                       _GIE 005F  
                                     _CRC 00C7                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CB                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C8              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1EA6                     _Buzzer_Initialization 1AEF  
                         __end_of_ADC_Set 1B4E                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1E5C               _setDimmerIntr_ControlStatus 1E44  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1B6F  
                   _setDimmerLights_OnOff 06F3          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l2123 049F                                      l2124 04F0  
                                    l1261 1154                                      l1503 0628  
                                    l1271 0C1C                                      l1247 13FD  
                                    l2119 0550                                      l1512 1E8C  
                                    l2164 0AAA                                      l2149 1C77  
                                    l1471 11A2                                      l1472 11BD  
                                    l2192 0A39                                      l1448 1341  
                                    l1625 01FF                                      l1635 01DB  
                                    l1627 008B                                      l2179 11EF  
                                    l1476 11B9                                      l1636 01D9  
                                    l1628 0087                                      l1629 0082  
                         __end_of_IOC_Set 1BAC                                      l2477 1E0A  
                                    l2681 1F6D                                      l2497 0381  
                                    l1793 0E00                                      l2842 1638  
                                    l2499 024D                                      l1787 0E8D  
                                    l6300 10CA                                      l6302 10D5  
                                    l1798 0E85                                      l2871 0428  
                                    l2848 164F                            _Load_Main$3954 002B  
                                    l7070 1CF1                                      l7162 1D88  
                                    l9004 0B35                     _setDimmerLights_SwOff 1295  
                                    l7094 1285                                      l7086 1267  
                                    l7088 1273                                      l9032 10A2  
                                    l9008 0B3A                                      l8410 145D  
                                    l6642 1030                                      l9210 12FC  
                                    l9202 12E6                                      l7098 128E  
                                    l9026 1099                                      l9018 0B8A  
                                    l8420 1465                                      l8404 1452  
                                    l6644 1039                                      l9220 1D14  
                                    l9060 1431                                      l9028 109C  
                                    l8422 1471                                      l6654 1048  
                                    l8502 1055                                      l9222 1D19  
                                    l9070 1441                                      l9054 1428  
                                    l9310 08D4                                      l9302 08C7  
                                    l8432 148C                                      l9216 1D0D  
                                    l9064 1438                                      l9056 142B  
                                    l9312 08D7                                      l9304 08CA  
                                    l7632 1E15                                      l7392 1FD3  
                                    l8370 160E                                      l8514 03B1  
                                    l9066 143B                                      l7386 1FCB  
                                    l8436 1494                                      l8428 1483  
                                    l8524 03C7                                      l8612 0DBE  
                                    l8604 0DA5                                      l9420 0751  
                                    l9340 082E                                      l9316 08DD  
                                    l9308 08D0                                      l9260 0A22  
                                    l7628 1E0F                                      l7388 1FCE  
                                    l8374 1615                                      l8542 03F4  
                                    l8518 03B8                                      l8710 0C88  
                                    l8702 0C6D                                      l9166 119D  
                                    l7726 1F67                                      l9334 0825  
                                    l9262 0A26                                      l9254 09DE  
                                    l8384 163D                                      l8376 161F  
                                    l8560 043A                                      l8544 03FE  
                                    l8536 03E1                                      l8632 0EBE  
                                    l8712 0C91                                      l8704 0C7B  
                                    l9176 11B4                                      l9168 11A6  
                                    l8480 1D1E                                      l9440 0787  
                                    l9336 0828                                      l9280 0890  
                                    l9256 09E5                                      l9248 09C9  
                                    l7920 0AF2                                      l8386 1645  
                                    l8378 1624                                      l8554 041A  
                                    l8546 0403                                      l8626 0EA8  
                                    l8714 0C94                                      l8802 0CE9  
                                    l9418 073A                                      l9426 0758  
                                    l9258 0A00                                      l9266 0A2A  
                                    l8564 044C                                      l8556 0424  
                                    l8548 0407                                      l8660 0F1D  
                                    l8644 0EF9                                      l9460 14B4  
                                    l8484 1D24                                      l8812 0D19  
                                    l9196 12DD                                      l9356 0840  
                                    l9284 0896                                      l7916 0AEA  
                                    l7908 0ACB                     _myMain_Initialization 1D9D  
                                    l8574 0467                                      l8590 0D64  
                                    l8718 0CA2                                      l9454 07B3  
                                    l9518 113C                                      l8910 1EE3  
                                    l9358 0859                                      l9278 088D  
                                    l8584 0D4E                                      l8656 0F15  
                                    l8648 0F01                                      l8816 0D2D  
                                    l8912 1EE6                                      l9560 0A50  
                                    l7936 0B19                                      l9626 15C9  
                                    l9714 1CBE                                      l9298 08A8  
                                    l8780 12C3                                      l8684 0C3D  
                                    l9396 1E27                                      l8852 177F  
                                    l9652 17BD                                      l9740 0C15  
                                    l9732 0BBA                                      l8916 1EEC  
                                    l6996 1CE0                                      l9572 0A68  
                                    l9804 0E5D                                      l8766 121A  
                                    l9654 17C4                                      l9726 0BA5  
                                    l8950 107E                                      l8934 1F57  
                                    l9814 0E72                                      l8768 121F  
                                    l9664 17EC                                      l8944 1075  
                                    l8936 1F5D                                      l9576 0A71  
                                    l9912 0237                                      l9816 0E74  
                                    _CFGS 0CAE                                      l8970 1E86  
                                    l9666 17F3                                      l8946 1078  
                                    l9850 04EB                                      l9676 1B93  
                                    l9588 0A86                                      l9772 0E12  
                                    l8966 1E77                                      l9766 0E03  
                                    l9774 0E15                                      l8992 13B5  
                                    l9864 04FF                                      l9952 02F5  
                                    l9928 0280                              __CFG_WDTE$ON 0000  
                                    l9938 02B5                                      l9962 0329  
                                    l9892 0549                                      l9878 0531  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u6245 1DFD  
                                    u5465 10BF                                      u8025 0B09  
                                    u9115 03F5                                      u6555 126A  
                                    u8075 117F                                      u6575 1274  
                                    u9145 0408                                      u6585 127E  
                                    u6595 1286                                      u9085 03E2  
                                    u9245 0D76                                      u9405 0F24  
                                    u9325 0ECA                                      u9175 041B  
                                    u9255 0D86                                      u9335 0EDA  
                                    u9265 0DA6                                      u9505 0C89  
                                    u8715 161A                                      u9275 0DB5  
                                    u9355 0F02                                      u7675 1F6E  
                                    u9700 173A                                      u9285 0DBF  
                                    u9365 0F08                                      u9445 0C44  
                                    u7685 1F73                                      u8735 1633  
                                    u9535 1DD3                                      u9705 1738  
                                    u8835 1468                                      u8755 1640  
                                    u9395 0F1E                                      u9475 0C6E  
                                    u8855 1472                                      u7975 0ADA  
                                    u8865 147C                                      u8785 1656  
                                    u9665 0CF5                                      u8875 1484  
                                    _LWLO 0CAD                                      _RSSI 013A  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F0F                _setDimmerLights_DimmingRun 1EF4  
                                    _Buz1 0120                                      _Load 013E  
                                    _Temp 00D1                                      _main 154A  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0958  
                         __end_of_RF_Main 1AFB                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C2F  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B9E  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2263 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1E2E  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E18                    _getDimmerLights_Status 1C91  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1B11  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0138  
                                   l10000 07CD                                     l10120 1321  
                                   l10036 1F27                                     l10320 0582  
                                   l10056 06AB                                     l10224 0172  
                                   l10232 019B                                     l10152 0069  
                                   l10314 0572                                     l10082 13DC  
                                   l10218 0163                                     l10170 008A  
                                   l10332 05B9                                     l10324 0591  
                                   l10228 018F                                     l10350 05FB  
                                   l10334 0594                                     l10238 01AB  
                                   l10430 156E                                     l10352 05D6  
                                   l10336 05C1                                     l10248 01C1  
                                   l10192 00E0                                     l10354 0603  
                                   l10362 061E                                     l10186 00AE  
                                   l10434 1579                                     l10356 060D  
                                   l10284 01EE                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00DF  
                         __end_of___awdiv 149B                           __end_of___lbdiv 104A  
                         __end_of___ftadd 047F                           __end_of___ftdiv 0DE0  
                         __end_of___ftneg 1B78                                     u11025 0E46  
                                   u12010 0601                           __end_of___ftmul 0F45  
                                   u11045 0E64                                     u12015 05DF  
                                   u11135 04C3                           ___awdiv@divisor 0020  
                                   u11165 0520                                     _T1CON 0018  
                         __end_of___fttol 0CAB                                     u11605 1339  
                                   u11375 07C3                                     u11555 13F4  
                                   u11745 00AC                                     u11755 00DE  
                                   u11845 01A2                                     u11765 0122  
                                   u11980 05BF                                     _IOCBF 0396  
                                   u11985 059D                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1295  
                                   i1l861 09A9                                     i1l853 098E  
                                   i1l845 097D                                     i1l870 09C6  
                                   i1l864 09B2                                     i1l859 09B4  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E03                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1730   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16CB                                     _Light 0139  
                         i1Division@value 0078                          __end_of_TMR1_ISR 1FA1  
                             ?i1_Division 0075                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C23  
                                   _getAD 1FC0                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 0812  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BA1                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1D3F                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 1CB3                        _setRF_DimmerLights 1730  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0066  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1C63  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 15A5  
                     ?_setRF_DimmerLights 0065                          __end_of_Fosc_Set 1B15  
          getMain_All_LightsStatus@status 0020                        ??_setMemory_Modify 0020  
            setDimmerLights_OnOff@command 006D                            _Exception_Main 0554  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                    _setSw_Initialization 1C81                                    ??_main 0070  
                           ___fttol@sign1 0056                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0062  
            ??_DimmerLights_SelectPointer 0020                   _setControl_Lights_Table 09C8  
                          _setMemory_Data 1BFF                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 0720  
      setDimmerIntr_ControlStatus@command 0020                   _setDimmerLights_Dimming 149B  
                               ??_IOC_ISR 007C                                 ??_IOC_Set 0020  
                             _DimmerIntr1 00BB                  _getMain_All_LightsStatus 1B81  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1DC4  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08E9                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1B5E                                 ??_WDT_Set 0020  
                        __end_of___awtoft 106C                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1666                  _getMain_All_Error_Status 118C  
                                  _IOCBF2 1CB2                                    i1l1210 001A  
                                  i1l7232 096C                                    i1l7314 137B  
                                  i1l7226 0965                                    i1l7238 0974  
                                  i1l7284 09BF                                    i1l7276 09AB  
                                  i1l6670 1017                                    i1l6680 1026  
                                  i1l7800 1F9A                                    i1l7810 1B6B  
                                  i1l6668 100E                                    i1l8294 0012  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0022  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B2  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  u781_25 1F95                                    _IO_Set 1EC0  
                                  _WDTCON 0097                        DelayTime_1us@count 0020  
                    Exception_Main@i_3594 0033            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0063             __end_of_CC2500_PowerOnInitial 1DEE  
                                  _Dimmer 012C                                    _DlySw1 0166  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1D1B  
              __end_of_Mcu_Initialization 1D51                       __end_of_Buzzer_Main 0800  
                                  _Memory 0220                          i1Division@result 0079  
                                  _Timer1 0131                                    ___bmul 1D1B  
                  __end_of_Exception_Main 0629                      Exception_Main@lights 0035  
                                  ___wmul 1F64                       __size_ofi1_Division 000D  
                               ??___awdiv 0024                                 ??___lbdiv 0021  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 013D  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1D8A  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1D77  
                                  _s_data 00D0                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 12CE                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1C0B  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 14F1                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 1AF5  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1E74  
        __end_of_setDimmerIntr_Dimming_Sw 1E44                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___lbdiv 1028                 _setDimmerLights_DimmingOn 10DA  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1D9D               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003F                     __end_of_SwPointSelect 1C47  
             __size_of_DimmerLights_TMR_1 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 0067                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E03               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5352 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1FE0  
                           __end_of_getAD 1FE0                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1B09  
                         _getSw_KeyStatus 1CE6                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1B96  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1BDB                __end_of_set_TimeoutCleared 1B2E  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BCF                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1AFB                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 07B6                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1B01  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B01                             ??_Switch_Main 0032  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00CA  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 154A                            _getDelayOff_GO 1CA2  
                     _CC2500_WriteCommand 1EDA                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1605             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0AAC  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B4E  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B47                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 115B        __end_of_DimmerLights_SelectPointer 1BCF  
              _DimmerLights_SelectPointer 1BC3                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1BB7                        _setRFSW_AdjControl 0B1E  
                  __end_of_setProductData 1BDB             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1B66                                   _IOC_Set 1BA1  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 13C2  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1EA6  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1AF8                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1C23           __end_of_setControl_Lights_Table 0A3A  
                         setRF_Main@error 00DE                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 14F1                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1C3B  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1CD5                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1CB3  
          __end_of_getDimmerLights_Status 1CA2                         __end_of_getRxData 0AAC  
                 __end_of_getSw_KeyStatus 1CF7                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1447  
                                 ___lbdiv 1028                                   ___ftadd 0389  
                                 ___ftdiv 0D37                                   ___ftneg 1B6F  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0C24                       __end_of_Switch_Main 1007  
                      __end_ofi1_Division 1C54                                   ___lwdiv 125E  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1CD5                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1307                                   __ptext2 1D9D  
                                 __ptext3 115B                                   __ptext4 0AAC  
                                 __ptext5 1FC0                                   __ptext6 0800  
                                 __ptext7 0002                                   __ptext8 1AFE  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 1403  
               __end_of_Flash_Memory_Read 1EC0                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 047F                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1B05                         _DimmerLights_Main 1F0F  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1B34  
              __end_of_CC2500_ClearRXFIFO 1B1D                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1B21                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00E3  
                          _LedPointSelect 1BF3                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1BB7  
                                 clrloop0 1B3B            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B29                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1102  
                           _DelayTime_1us 10B4                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 115B        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B34                __end_of_setRF_TransceiveGO 1D77  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1B35  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 108F  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1D2D  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0812  
                           _CC2500_TxData 087D                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0B9E                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1E74  
                     _Flash_Memory_Unlock 1B78                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F2B                        _Mcu_Initialization 1D3F  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1B19  
                    __end_of_my_MainTimer 1343                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1BFF  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        setDimmerIntr_DimmingValue@lights 0064          getDimmerIntr_DimmingValue@lights 0021  
                               i1___lbdiv 1007                 __end_of_CC2500_InitSetREG 112C  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0020  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 10B4                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0022           getMain_All_Error_Status@command 0025  
                             ___ftdiv@exp 003C         __end_of_setDimmerLights_DimmingOn 1102  
                        ??_Exception_Main 002D                             i1Division@num 0075  
                          __end_of_IO_Set 1EDA                      _setRF_Initialization 1BAC  
                      _setMemory_LoopSave 1D8A                               _Switch_Main 1000  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1CE6                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1DD9  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1CC4                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D2D  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1F82                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 1307                             __pbitbssBANK1 0720  
           __size_of_setDimmerLights_Line 0012             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 154A                __end_of_DimmerLights_IOC_1 1382  
                    _CC2500_FrequencyCabr 1C2F                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1382  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 09C8  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1B56  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                              ?i1___lbdiv 0070              ?_setDimmerIntr_ControlStatus 0020  
              __end_of_CC2500_InitPATable 1FC0           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 0E91                            ??_RF_RxDisable 0024  
  __end_of_getDimmerLights_PercentToValue 16CB   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 1666                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005E  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1B29  
       __end_of_setDimmerIntr_MaxmumValue 1BE7                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 016B  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0031                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1AFE  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00CC                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0030  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1B8B  
                               _Tx_Length 00CF                               __pdataBANK4 0245  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 11BF                          _CC2500_SIDLEMode 1B21  
              __size_of_DimmerLights_Main 001C                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
                               ___latbits 0003                          _setMemory_Modify 1D51  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00DB                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 15A5  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 01C7                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F47  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00E3                            getRxData@error 00DC  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1B15  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0031  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1D09                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1AEE  
                               _getBuz_GO 1CC4                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 06F3               _Flash_Memory_Initialization 0629  
                                ?___awdiv 0020                                 __ptext100 149B  
                               __ptext101 0F45                                  ?___lbdiv 0020  
                               __ptext110 118C                                 __ptext102 1D64  
                               __ptext111 1B40                                 __ptext103 1730  
                               __ptext120 0D37                                 __ptext112 1AED  
                               __ptext104 1CF7                                 __ptext121 0389  
                               __ptext113 15A5                                 __ptext105 1BDB  
                               __ptext130 14F1                                 __ptext122 104A  
                               __ptext114 1D51                                 __ptext106 1E2E  
                               __ptext131 1447                                 __ptext123 1605  
                               __ptext115 16CB                                 __ptext107 1C63  
                               __ptext132 1295                                 __ptext124 1C54  
                               __ptext116 1666                                 __ptext108 1E18  
                               __ptext141 1F82                                 __ptext133 1C91  
                               __ptext125 1028                                 __ptext117 0C24  
                               __ptext109 1B4E                                  ?___ftadd 0041  
                               __ptext142 0958                                 __ptext134 1BC3  
                               __ptext126 1B05                                 __ptext118 1B6F  
                               __ptext143 1B66                                 __ptext135 1B01  
                               __ptext127 08E9                                 __ptext119 0E91  
                               __ptext144 1343                                 __ptext136 1B2E  
                               __ptext128 1BCF                                 __ptext145 1C47  
                               __ptext137 1BB7                                 __ptext129 11F3  
                               __ptext146 1007                                 __ptext138 07B6  
                               __ptext139 1AEF                                 _getRxData 0A3A  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 13C2                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AF2                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1E18  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1C72              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1C63                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C3                                 _r_address 013C  
           __end_of_setDimmerLights_OnOff 07B6            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 12CE  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1DB0  
                             ??i1___lbdiv 0071                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                             _SwPointSelect 1C3B  
                     __end_of_setLED_Main 125E                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1AFE  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1B0D                           SwPointSelect@sw 0021  
                               clear_ram0 1B3A                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1307  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1B47  
                  _Flash_Memory_Main$3125 0028               _DimmerLights_Initialization 1B40  
                      _CC2500_ClearRXFIFO 1B19                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B1D                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1DC4  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 112C                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1F82  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1C17  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1D64                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1C81                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1EF4                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 0800                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C9  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1C17  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11F3  
                   _DlyOff_Initialization 1B2E         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1C54  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1E5C               setDimmerLights_OnOff@lights 00DB  
                _setDimmerIntr_Dimming_Sw 1E2E                                  _Fosc_Set 1B11  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0B1E                        __end_of_getLoad_OK 1B56  
                   _Switch_Initialization 1B25         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 118C  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1E8D                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 013B                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3582 0021  
           _getMain_All_Error_Status$3583 0023                  __end_of_getDimmer_LoadGO 1B5E  
                     _Load_Initialization 1AF2          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 104A  
                        ??_LedPointSelect 0020                                  ___ftpack 1605  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00DD  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1228  
              __end_of_setRF_DimmerLights 1795            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1B66  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1AFB                                  __ptext11 1AEE  
                                __ptext20 1DEE                                  __ptext12 1000  
                                __ptext21 1B25                                  __ptext13 0205  
                                __ptext30 0B1E                                  __ptext22 1C81  
                                __ptext14 1DB0                                  __ptext31 1EF4  
                                __ptext23 1AF8                                  __ptext15 10DA  
                                __ptext40 1B21                                  __ptext32 1CD5  
                                __ptext24 047F                                  __ptext16 1CE6  
                                __ptext41 1403                                  __ptext33 1CC4  
                                __ptext25 0A3A                                  __ptext17 1C3B  
                                __ptext50 1B15                                  __ptext42 1102  
                                __ptext34 1C72                                  __ptext26 11BF  
                                __ptext18 1E03                                  __ptext51 1DC4  
                                __ptext43 1FA1                                  __ptext35 087D  
                                __ptext27 1D8A                                  __ptext19 1B29  
                                __ptext60 1B11                                  __ptext52 1E8D  
                                __ptext44 106C                                  __ptext36 0812  
                                __ptext28 09C8                                  __ptext61 1B47  
                                __ptext53 1AF5                                  __ptext45 1C2F  
                                __ptext37 108F                                  __ptext29 1382  
                                __ptext70 1F2B                                  __ptext62 0053  
                                __ptext54 1BAC                                  __ptext46 10B4  
                                __ptext38 1F47                                  __ptext71 1B0D  
                                __ptext63 1B96                                  __ptext55 1D3F  
                                __ptext47 1B1D                                  __ptext39 1DD9  
                                __ptext80 1BFF                                  __ptext72 1228  
                                __ptext64 1B5E                                  __ptext56 1C23  
                                __ptext48 1B19                                  __ptext81 112C  
                                __ptext73 1B09                                  __ptext65 1B56  
                                __ptext57 1C17                                  __ptext49 1EDA  
                                __ptext90 1BF3                                  __ptext82 1B78  
                                __ptext74 1D2D                                  __ptext66 1D77  
                                __ptext58 1EC0                                  __ptext91 1E5C  
                                __ptext83 1EA6                                  __ptext75 13C2  
                                __ptext67 1F64                                  __ptext59 1BA1  
                                __ptext92 1BE7                                  __ptext84 0554  
                                __ptext76 1CB3                                  __ptext68 125E  
                                __ptext93 1E44                                  __ptext85 1B8B  
                                __ptext77 0B9E                                  __ptext69 1AF2  
                                __ptext94 0CAB                                  __ptext86 1F0F  
                                __ptext78 1C0B                                  __ptext95 1D1B  
                                __ptext87 1795                                  __ptext79 0629  
                                __ptext96 1E74                                  __ptext88 06F3  
                                __ptext97 1B81                                  __ptext89 12CE  
                                __ptext98 1CA2                                  __ptext99 1D09  
                                __product 0245                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1B96  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D09  
                      _DimmerLights_IOC_1 1343              __end_of_setDimmerLights_SwOn 1228  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1DB0  
      __size_of_DimmerIntr_Initialization 0060                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 0958                  __end_of_CC2500_SIDLEMode 1B25  
              setDimmerLights_Main@lights 00DC               __end_of_DelayOffPointSelect 1BC3  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1F47  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1FA1  
                __end_of_setMemory_Modify 1D64                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 0554                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00DB  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1DD9  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6393 0022  
                                main@argc 00DF                                  main@argv 00E1  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6390 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1403  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1BF3                _setDimmerIntr_DimmingValue 1BE7  
             __end_of_Flash_Memory_Modify 0C24              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 11BF               __end_of_Flash_Memory_Unlock 1B81  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 106C  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0029                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1AEE   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1AED                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1AF5  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1C0B  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00CD  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1B05                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B09                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAB  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0072  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1C47  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 10DA  
                 __end_of_CC2500_ReadByte 1F64              __end_of_setSw_Initialization 1C91  
                         _Timeout_Counter 1DEE           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1C72  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1B0D  
          __end_of_setTemp_Initialization 1AEF                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1AF8  
                   __end_of_CC2500_RxData 087D                     __end_of_CC2500_TxData 08E9  
                   _setLoad_AH_AL_Restore 1F2B                   __end_of_CC2500_PowerRST 1447  
