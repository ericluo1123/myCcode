

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Mar 27 11:17:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	intentry,global,class=CODE,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	dabs	1,0x7E,2
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020D                     	;# 
   246  0210                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  029A                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0090                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  0116                     	;# 
   331  0117                     	;# 
   332  011D                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0194                     	;# 
   342  0195                     	;# 
   343  0196                     	;# 
   344  0197                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019C                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020D                     	;# 
   357  0210                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  0394                     	;# 
   382  0395                     	;# 
   383  0396                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0116                     	;# 
   442  0117                     	;# 
   443  011D                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0197                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020D                     	;# 
   468  0210                     	;# 
   469  0211                     	;# 
   470  0211                     	;# 
   471  0212                     	;# 
   472  0212                     	;# 
   473  0213                     	;# 
   474  0213                     	;# 
   475  0214                     	;# 
   476  0214                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0216                     	;# 
   481  0216                     	;# 
   482  0217                     	;# 
   483  0217                     	;# 
   484  0291                     	;# 
   485  0291                     	;# 
   486  0292                     	;# 
   487  0293                     	;# 
   488  0298                     	;# 
   489  0298                     	;# 
   490  0299                     	;# 
   491  029A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0FE4                     	;# 
   496  0FE5                     	;# 
   497  0FE6                     	;# 
   498  0FE7                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEF                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0008                     	;# 
   515  0009                     	;# 
   516  000A                     	;# 
   517  000B                     	;# 
   518  000C                     	;# 
   519  000D                     	;# 
   520  000E                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  010C                     	;# 
   550  010D                     	;# 
   551  010E                     	;# 
   552  0116                     	;# 
   553  0117                     	;# 
   554  011D                     	;# 
   555  018C                     	;# 
   556  018D                     	;# 
   557  018E                     	;# 
   558  0191                     	;# 
   559  0191                     	;# 
   560  0192                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0194                     	;# 
   564  0195                     	;# 
   565  0196                     	;# 
   566  0197                     	;# 
   567  0199                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020D                     	;# 
   579  0210                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0291                     	;# 
   596  0291                     	;# 
   597  0292                     	;# 
   598  0293                     	;# 
   599  0298                     	;# 
   600  0298                     	;# 
   601  0299                     	;# 
   602  029A                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000D                     	;# 
   631  000E                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0090                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  011D                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019C                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020D                     	;# 
   690  0210                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  0010                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  008E                     	;# 
   758  0090                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0197                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019C                     	;# 
   797  019D                     	;# 
   798  019E                     	;# 
   799  019F                     	;# 
   800  020D                     	;# 
   801  0210                     	;# 
   802  0211                     	;# 
   803  0211                     	;# 
   804  0212                     	;# 
   805  0212                     	;# 
   806  0213                     	;# 
   807  0213                     	;# 
   808  0214                     	;# 
   809  0214                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0217                     	;# 
   817  0291                     	;# 
   818  0291                     	;# 
   819  0292                     	;# 
   820  0293                     	;# 
   821  0298                     	;# 
   822  0298                     	;# 
   823  0299                     	;# 
   824  029A                     	;# 
   825  0394                     	;# 
   826  0395                     	;# 
   827  0396                     	;# 
   828  0FE4                     	;# 
   829  0FE5                     	;# 
   830  0FE6                     	;# 
   831  0FE7                     	;# 
   832  0FE8                     	;# 
   833  0FE9                     	;# 
   834  0FEA                     	;# 
   835  0FEB                     	;# 
   836  0FED                     	;# 
   837  0FEE                     	;# 
   838  0FEF                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0008                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0016                     	;# 
   860  0017                     	;# 
   861  0018                     	;# 
   862  0019                     	;# 
   863  001A                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  008C                     	;# 
   867  008D                     	;# 
   868  008E                     	;# 
   869  0090                     	;# 
   870  0091                     	;# 
   871  0092                     	;# 
   872  0095                     	;# 
   873  0096                     	;# 
   874  0097                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  010C                     	;# 
   883  010D                     	;# 
   884  010E                     	;# 
   885  0116                     	;# 
   886  0117                     	;# 
   887  011D                     	;# 
   888  018C                     	;# 
   889  018D                     	;# 
   890  018E                     	;# 
   891  0191                     	;# 
   892  0191                     	;# 
   893  0192                     	;# 
   894  0193                     	;# 
   895  0193                     	;# 
   896  0194                     	;# 
   897  0195                     	;# 
   898  0196                     	;# 
   899  0197                     	;# 
   900  0199                     	;# 
   901  019A                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019D                     	;# 
   909  019E                     	;# 
   910  019F                     	;# 
   911  020D                     	;# 
   912  0210                     	;# 
   913  0211                     	;# 
   914  0211                     	;# 
   915  0212                     	;# 
   916  0212                     	;# 
   917  0213                     	;# 
   918  0213                     	;# 
   919  0214                     	;# 
   920  0214                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0216                     	;# 
   925  0216                     	;# 
   926  0217                     	;# 
   927  0217                     	;# 
   928  0291                     	;# 
   929  0291                     	;# 
   930  0292                     	;# 
   931  0293                     	;# 
   932  0298                     	;# 
   933  0298                     	;# 
   934  0299                     	;# 
   935  029A                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE9                     	;# 
   945  0FEA                     	;# 
   946  0FEB                     	;# 
   947  0FED                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000D                     	;# 
   964  000E                     	;# 
   965  0010                     	;# 
   966  0011                     	;# 
   967  0012                     	;# 
   968  0015                     	;# 
   969  0016                     	;# 
   970  0016                     	;# 
   971  0017                     	;# 
   972  0018                     	;# 
   973  0019                     	;# 
   974  001A                     	;# 
   975  001B                     	;# 
   976  001C                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0090                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0095                     	;# 
   984  0096                     	;# 
   985  0097                     	;# 
   986  0099                     	;# 
   987  009A                     	;# 
   988  009B                     	;# 
   989  009B                     	;# 
   990  009C                     	;# 
   991  009D                     	;# 
   992  009E                     	;# 
   993  010C                     	;# 
   994  010D                     	;# 
   995  010E                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0197                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020D                     	;# 
  1023  0210                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0291                     	;# 
  1040  0291                     	;# 
  1041  0292                     	;# 
  1042  0293                     	;# 
  1043  0298                     	;# 
  1044  0298                     	;# 
  1045  0299                     	;# 
  1046  029A                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  0FE4                     	;# 
  1051  0FE5                     	;# 
  1052  0FE6                     	;# 
  1053  0FE7                     	;# 
  1054  0FE8                     	;# 
  1055  0FE9                     	;# 
  1056  0FEA                     	;# 
  1057  0FEB                     	;# 
  1058  0FED                     	;# 
  1059  0FEE                     	;# 
  1060  0FEF                     	;# 
  1061  0000                     	;# 
  1062  0001                     	;# 
  1063  0002                     	;# 
  1064  0003                     	;# 
  1065  0004                     	;# 
  1066  0005                     	;# 
  1067  0006                     	;# 
  1068  0007                     	;# 
  1069  0008                     	;# 
  1070  0009                     	;# 
  1071  000A                     	;# 
  1072  000B                     	;# 
  1073  000C                     	;# 
  1074  000D                     	;# 
  1075  000E                     	;# 
  1076  0010                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0097                     	;# 
  1097  0099                     	;# 
  1098  009A                     	;# 
  1099  009B                     	;# 
  1100  009B                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009E                     	;# 
  1104  010C                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  0116                     	;# 
  1108  0117                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  018E                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0197                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020D                     	;# 
  1134  0210                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  0394                     	;# 
  1159  0395                     	;# 
  1160  0396                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  0010                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0015                     	;# 
  1191  0016                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  008C                     	;# 
  1200  008D                     	;# 
  1201  008E                     	;# 
  1202  0090                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010D                     	;# 
  1217  010E                     	;# 
  1218  0116                     	;# 
  1219  0117                     	;# 
  1220  011D                     	;# 
  1221  018C                     	;# 
  1222  018D                     	;# 
  1223  018E                     	;# 
  1224  0191                     	;# 
  1225  0191                     	;# 
  1226  0192                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0197                     	;# 
  1233  0199                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019C                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020D                     	;# 
  1245  0210                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0298                     	;# 
  1266  0298                     	;# 
  1267  0299                     	;# 
  1268  029A                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0FE4                     	;# 
  1273  0FE5                     	;# 
  1274  0FE6                     	;# 
  1275  0FE7                     	;# 
  1276  0FE8                     	;# 
  1277  0FE9                     	;# 
  1278  0FEA                     	;# 
  1279  0FEB                     	;# 
  1280  0FED                     	;# 
  1281  0FEE                     	;# 
  1282  0FEF                     	;# 
  1283  0000                     	;# 
  1284  0001                     	;# 
  1285  0002                     	;# 
  1286  0003                     	;# 
  1287  0004                     	;# 
  1288  0005                     	;# 
  1289  0006                     	;# 
  1290  0007                     	;# 
  1291  0008                     	;# 
  1292  0009                     	;# 
  1293  000A                     	;# 
  1294  000B                     	;# 
  1295  000C                     	;# 
  1296  000D                     	;# 
  1297  000E                     	;# 
  1298  0010                     	;# 
  1299  0011                     	;# 
  1300  0012                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0090                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0095                     	;# 
  1317  0096                     	;# 
  1318  0097                     	;# 
  1319  0099                     	;# 
  1320  009A                     	;# 
  1321  009B                     	;# 
  1322  009B                     	;# 
  1323  009C                     	;# 
  1324  009D                     	;# 
  1325  009E                     	;# 
  1326  010C                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  011D                     	;# 
  1332  018C                     	;# 
  1333  018D                     	;# 
  1334  018E                     	;# 
  1335  0191                     	;# 
  1336  0191                     	;# 
  1337  0192                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0194                     	;# 
  1341  0195                     	;# 
  1342  0196                     	;# 
  1343  0197                     	;# 
  1344  0199                     	;# 
  1345  019A                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020D                     	;# 
  1356  0210                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0212                     	;# 
  1361  0213                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0214                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0216                     	;# 
  1369  0216                     	;# 
  1370  0217                     	;# 
  1371  0217                     	;# 
  1372  0291                     	;# 
  1373  0291                     	;# 
  1374  0292                     	;# 
  1375  0293                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  0394                     	;# 
  1381  0395                     	;# 
  1382  0396                     	;# 
  1383  0FE4                     	;# 
  1384  0FE5                     	;# 
  1385  0FE6                     	;# 
  1386  0FE7                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEF                     	;# 
  1394  0000                     	;# 
  1395  0001                     	;# 
  1396  0002                     	;# 
  1397  0003                     	;# 
  1398  0004                     	;# 
  1399  0005                     	;# 
  1400  0006                     	;# 
  1401  0007                     	;# 
  1402  0008                     	;# 
  1403  0009                     	;# 
  1404  000A                     	;# 
  1405  000B                     	;# 
  1406  000C                     	;# 
  1407  000D                     	;# 
  1408  000E                     	;# 
  1409  0010                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008D                     	;# 
  1423  008E                     	;# 
  1424  0090                     	;# 
  1425  0091                     	;# 
  1426  0092                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  010C                     	;# 
  1438  010D                     	;# 
  1439  010E                     	;# 
  1440  0116                     	;# 
  1441  0117                     	;# 
  1442  011D                     	;# 
  1443  018C                     	;# 
  1444  018D                     	;# 
  1445  018E                     	;# 
  1446  0191                     	;# 
  1447  0191                     	;# 
  1448  0192                     	;# 
  1449  0193                     	;# 
  1450  0193                     	;# 
  1451  0194                     	;# 
  1452  0195                     	;# 
  1453  0196                     	;# 
  1454  0197                     	;# 
  1455  0199                     	;# 
  1456  019A                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019C                     	;# 
  1463  019D                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  020D                     	;# 
  1467  0210                     	;# 
  1468  0211                     	;# 
  1469  0211                     	;# 
  1470  0212                     	;# 
  1471  0212                     	;# 
  1472  0213                     	;# 
  1473  0213                     	;# 
  1474  0214                     	;# 
  1475  0214                     	;# 
  1476  0215                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0216                     	;# 
  1480  0216                     	;# 
  1481  0217                     	;# 
  1482  0217                     	;# 
  1483  0291                     	;# 
  1484  0291                     	;# 
  1485  0292                     	;# 
  1486  0293                     	;# 
  1487  0298                     	;# 
  1488  0298                     	;# 
  1489  0299                     	;# 
  1490  029A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000D                     	;# 
  1519  000E                     	;# 
  1520  0010                     	;# 
  1521  0011                     	;# 
  1522  0012                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008D                     	;# 
  1534  008E                     	;# 
  1535  0090                     	;# 
  1536  0091                     	;# 
  1537  0092                     	;# 
  1538  0095                     	;# 
  1539  0096                     	;# 
  1540  0097                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  010C                     	;# 
  1549  010D                     	;# 
  1550  010E                     	;# 
  1551  0116                     	;# 
  1552  0117                     	;# 
  1553  011D                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0194                     	;# 
  1563  0195                     	;# 
  1564  0196                     	;# 
  1565  0197                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020D                     	;# 
  1578  0210                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0298                     	;# 
  1599  0298                     	;# 
  1600  0299                     	;# 
  1601  029A                     	;# 
  1602  0394                     	;# 
  1603  0395                     	;# 
  1604  0396                     	;# 
  1605  0FE4                     	;# 
  1606  0FE5                     	;# 
  1607  0FE6                     	;# 
  1608  0FE7                     	;# 
  1609  0FE8                     	;# 
  1610  0FE9                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;# 
  1616  0000                     	;# 
  1617  0001                     	;# 
  1618  0002                     	;# 
  1619  0003                     	;# 
  1620  0004                     	;# 
  1621  0005                     	;# 
  1622  0006                     	;# 
  1623  0007                     	;# 
  1624  0008                     	;# 
  1625  0009                     	;# 
  1626  000A                     	;# 
  1627  000B                     	;# 
  1628  000C                     	;# 
  1629  000D                     	;# 
  1630  000E                     	;# 
  1631  0010                     	;# 
  1632  0011                     	;# 
  1633  0012                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008D                     	;# 
  1645  008E                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0092                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  0116                     	;# 
  1663  0117                     	;# 
  1664  011D                     	;# 
  1665  018C                     	;# 
  1666  018D                     	;# 
  1667  018E                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0197                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0291                     	;# 
  1706  0291                     	;# 
  1707  0292                     	;# 
  1708  0293                     	;# 
  1709  0298                     	;# 
  1710  0298                     	;# 
  1711  0299                     	;# 
  1712  029A                     	;# 
  1713  0394                     	;# 
  1714  0395                     	;# 
  1715  0396                     	;# 
  1716  0FE4                     	;# 
  1717  0FE5                     	;# 
  1718  0FE6                     	;# 
  1719  0FE7                     	;# 
  1720  0FE8                     	;# 
  1721  0FE9                     	;# 
  1722  0FEA                     	;# 
  1723  0FEB                     	;# 
  1724  0FED                     	;# 
  1725  0FEE                     	;# 
  1726  0FEF                     	;# 
  1727  0000                     	;# 
  1728  0001                     	;# 
  1729  0002                     	;# 
  1730  0003                     	;# 
  1731  0004                     	;# 
  1732  0005                     	;# 
  1733  0006                     	;# 
  1734  0007                     	;# 
  1735  0008                     	;# 
  1736  0009                     	;# 
  1737  000A                     	;# 
  1738  000B                     	;# 
  1739  000C                     	;# 
  1740  000D                     	;# 
  1741  000E                     	;# 
  1742  0010                     	;# 
  1743  0011                     	;# 
  1744  0012                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  008C                     	;# 
  1755  008D                     	;# 
  1756  008E                     	;# 
  1757  0090                     	;# 
  1758  0091                     	;# 
  1759  0092                     	;# 
  1760  0095                     	;# 
  1761  0096                     	;# 
  1762  0097                     	;# 
  1763  0099                     	;# 
  1764  009A                     	;# 
  1765  009B                     	;# 
  1766  009B                     	;# 
  1767  009C                     	;# 
  1768  009D                     	;# 
  1769  009E                     	;# 
  1770  010C                     	;# 
  1771  010D                     	;# 
  1772  010E                     	;# 
  1773  0116                     	;# 
  1774  0117                     	;# 
  1775  011D                     	;# 
  1776  018C                     	;# 
  1777  018D                     	;# 
  1778  018E                     	;# 
  1779  0191                     	;# 
  1780  0191                     	;# 
  1781  0192                     	;# 
  1782  0193                     	;# 
  1783  0193                     	;# 
  1784  0194                     	;# 
  1785  0195                     	;# 
  1786  0196                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  019A                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019C                     	;# 
  1795  019C                     	;# 
  1796  019D                     	;# 
  1797  019E                     	;# 
  1798  019F                     	;# 
  1799  020D                     	;# 
  1800  0210                     	;# 
  1801  0211                     	;# 
  1802  0211                     	;# 
  1803  0212                     	;# 
  1804  0212                     	;# 
  1805  0213                     	;# 
  1806  0213                     	;# 
  1807  0214                     	;# 
  1808  0214                     	;# 
  1809  0215                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0216                     	;# 
  1813  0216                     	;# 
  1814  0217                     	;# 
  1815  0217                     	;# 
  1816  0291                     	;# 
  1817  0291                     	;# 
  1818  0292                     	;# 
  1819  0293                     	;# 
  1820  0298                     	;# 
  1821  0298                     	;# 
  1822  0299                     	;# 
  1823  029A                     	;# 
  1824  0394                     	;# 
  1825  0395                     	;# 
  1826  0396                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0010                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0015                     	;# 
  1857  0016                     	;# 
  1858  0016                     	;# 
  1859  0017                     	;# 
  1860  0018                     	;# 
  1861  0019                     	;# 
  1862  001A                     	;# 
  1863  001B                     	;# 
  1864  001C                     	;# 
  1865  008C                     	;# 
  1866  008D                     	;# 
  1867  008E                     	;# 
  1868  0090                     	;# 
  1869  0091                     	;# 
  1870  0092                     	;# 
  1871  0095                     	;# 
  1872  0096                     	;# 
  1873  0097                     	;# 
  1874  0099                     	;# 
  1875  009A                     	;# 
  1876  009B                     	;# 
  1877  009B                     	;# 
  1878  009C                     	;# 
  1879  009D                     	;# 
  1880  009E                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  011D                     	;# 
  1887  018C                     	;# 
  1888  018D                     	;# 
  1889  018E                     	;# 
  1890  0191                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0197                     	;# 
  1899  0199                     	;# 
  1900  019A                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019C                     	;# 
  1906  019C                     	;# 
  1907  019D                     	;# 
  1908  019E                     	;# 
  1909  019F                     	;# 
  1910  020D                     	;# 
  1911  0210                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0298                     	;# 
  1932  0298                     	;# 
  1933  0299                     	;# 
  1934  029A                     	;# 
  1935  0394                     	;# 
  1936  0395                     	;# 
  1937  0396                     	;# 
  1938  0FE4                     	;# 
  1939  0FE5                     	;# 
  1940  0FE6                     	;# 
  1941  0FE7                     	;# 
  1942  0FE8                     	;# 
  1943  0FE9                     	;# 
  1944  0FEA                     	;# 
  1945  0FEB                     	;# 
  1946  0FED                     	;# 
  1947  0FEE                     	;# 
  1948  0FEF                     	;# 
  1949  0000                     	;# 
  1950  0001                     	;# 
  1951  0002                     	;# 
  1952  0003                     	;# 
  1953  0004                     	;# 
  1954  0005                     	;# 
  1955  0006                     	;# 
  1956  0007                     	;# 
  1957  0008                     	;# 
  1958  0009                     	;# 
  1959  000A                     	;# 
  1960  000B                     	;# 
  1961  000C                     	;# 
  1962  000D                     	;# 
  1963  000E                     	;# 
  1964  0010                     	;# 
  1965  0011                     	;# 
  1966  0012                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  001A                     	;# 
  1974  001B                     	;# 
  1975  001C                     	;# 
  1976  008C                     	;# 
  1977  008D                     	;# 
  1978  008E                     	;# 
  1979  0090                     	;# 
  1980  0091                     	;# 
  1981  0092                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0097                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  010C                     	;# 
  1993  010D                     	;# 
  1994  010E                     	;# 
  1995  0116                     	;# 
  1996  0117                     	;# 
  1997  011D                     	;# 
  1998  018C                     	;# 
  1999  018D                     	;# 
  2000  018E                     	;# 
  2001  0191                     	;# 
  2002  0191                     	;# 
  2003  0192                     	;# 
  2004  0193                     	;# 
  2005  0193                     	;# 
  2006  0194                     	;# 
  2007  0195                     	;# 
  2008  0196                     	;# 
  2009  0197                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019C                     	;# 
  2017  019C                     	;# 
  2018  019D                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  020D                     	;# 
  2022  0210                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0291                     	;# 
  2039  0291                     	;# 
  2040  0292                     	;# 
  2041  0293                     	;# 
  2042  0298                     	;# 
  2043  0298                     	;# 
  2044  0299                     	;# 
  2045  029A                     	;# 
  2046  0394                     	;# 
  2047  0395                     	;# 
  2048  0396                     	;# 
  2049  0FE4                     	;# 
  2050  0FE5                     	;# 
  2051  0FE6                     	;# 
  2052  0FE7                     	;# 
  2053  0FE8                     	;# 
  2054  0FE9                     	;# 
  2055  0FEA                     	;# 
  2056  0FEB                     	;# 
  2057  0FED                     	;# 
  2058  0FEE                     	;# 
  2059  0FEF                     	;# 
  2060  0000                     	;# 
  2061  0001                     	;# 
  2062  0002                     	;# 
  2063  0003                     	;# 
  2064  0004                     	;# 
  2065  0005                     	;# 
  2066  0006                     	;# 
  2067  0007                     	;# 
  2068  0008                     	;# 
  2069  0009                     	;# 
  2070  000A                     	;# 
  2071  000B                     	;# 
  2072  000C                     	;# 
  2073  000D                     	;# 
  2074  000E                     	;# 
  2075  0010                     	;# 
  2076  0011                     	;# 
  2077  0012                     	;# 
  2078  0015                     	;# 
  2079  0016                     	;# 
  2080  0016                     	;# 
  2081  0017                     	;# 
  2082  0018                     	;# 
  2083  0019                     	;# 
  2084  001A                     	;# 
  2085  001B                     	;# 
  2086  001C                     	;# 
  2087  008C                     	;# 
  2088  008D                     	;# 
  2089  008E                     	;# 
  2090  0090                     	;# 
  2091  0091                     	;# 
  2092  0092                     	;# 
  2093  0095                     	;# 
  2094  0096                     	;# 
  2095  0097                     	;# 
  2096  0099                     	;# 
  2097  009A                     	;# 
  2098  009B                     	;# 
  2099  009B                     	;# 
  2100  009C                     	;# 
  2101  009D                     	;# 
  2102  009E                     	;# 
  2103  010C                     	;# 
  2104  010D                     	;# 
  2105  010E                     	;# 
  2106  0116                     	;# 
  2107  0117                     	;# 
  2108  011D                     	;# 
  2109  018C                     	;# 
  2110  018D                     	;# 
  2111  018E                     	;# 
  2112  0191                     	;# 
  2113  0191                     	;# 
  2114  0192                     	;# 
  2115  0193                     	;# 
  2116  0193                     	;# 
  2117  0194                     	;# 
  2118  0195                     	;# 
  2119  0196                     	;# 
  2120  0197                     	;# 
  2121  0199                     	;# 
  2122  019A                     	;# 
  2123  019B                     	;# 
  2124  019B                     	;# 
  2125  019B                     	;# 
  2126  019B                     	;# 
  2127  019C                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020D                     	;# 
  2133  0210                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0291                     	;# 
  2150  0291                     	;# 
  2151  0292                     	;# 
  2152  0293                     	;# 
  2153  0298                     	;# 
  2154  0298                     	;# 
  2155  0299                     	;# 
  2156  029A                     	;# 
  2157  0394                     	;# 
  2158  0395                     	;# 
  2159  0396                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171                           
  2172                           	psect	idataBANK4
  2173  1FE0                     __pidataBANK4:	
  2174                           
  2175                           ;initializer for __product
  2176  1FE0  3463               	retlw	99
  2177  1FE1  3402               	retlw	2
  2178  1FE2  3400               	retlw	0
  2179  1FE3  3400               	retlw	0
  2180  1FE4  3400               	retlw	0
  2181  1FE5  3400               	retlw	0
  2182  1FE6  3400               	retlw	0
  2183  1FE7  3400               	retlw	0
  2184  1FE8  3400               	retlw	0
  2185  1FE9  3400               	retlw	0
  2186  1FEA  3400               	retlw	0
  2187  1FEB  3400               	retlw	0
  2188  1FEC  34FF               	retlw	255
  2189  1FED  34FF               	retlw	255
  2190  1FEE  34FF               	retlw	255
  2191  1FEF  3400               	retlw	0
  2192  1FF0  3400               	retlw	0
  2193  1FF1  3400               	retlw	0
  2194  1FF2  3400               	retlw	0
  2195  1FF3  3400               	retlw	0
  2196  1FF4  3400               	retlw	0
  2197  1FF5  3400               	retlw	0
  2198  1FF6  3400               	retlw	0
  2199  1FF7  3400               	retlw	0
  2200  1FF8  3400               	retlw	0
  2201  1FF9  3400               	retlw	0
  2202  1FFA  3400               	retlw	0
  2203  1FFB  3400               	retlw	0
  2204  1FFC  3400               	retlw	0
  2205  1FFD  3400               	retlw	0
  2206  1FFE  3400               	retlw	0
  2207  1FFF  3400               	retlw	0
  2208                           
  2209                           	psect	stringtext
  2210  1000                     __pstringtext:	
  2211  1000                     _CC2500_registers_address:	
  2212  1000  3403               	retlw	3
  2213  1001  3416               	retlw	22
  2214  1002  3417               	retlw	23
  2215  1003  341E               	retlw	30
  2216  1004  341F               	retlw	31
  2217  1005  3420               	retlw	32
  2218  1006  342A               	retlw	42
  2219  1007  342B               	retlw	43
  2220  1008  340B               	retlw	11
  2221  1009  340C               	retlw	12
  2222  100A  340D               	retlw	13
  2223  100B  340E               	retlw	14
  2224  100C  340F               	retlw	15
  2225  100D  3410               	retlw	16
  2226  100E  3411               	retlw	17
  2227  100F  3412               	retlw	18
  2228  1010  3413               	retlw	19
  2229  1011  3414               	retlw	20
  2230  1012  340A               	retlw	10
  2231  1013  3415               	retlw	21
  2232  1014  3421               	retlw	33
  2233  1015  3422               	retlw	34
  2234  1016  3418               	retlw	24
  2235  1017  3419               	retlw	25
  2236  1018  341A               	retlw	26
  2237  1019  341B               	retlw	27
  2238  101A  341C               	retlw	28
  2239  101B  341D               	retlw	29
  2240  101C  3423               	retlw	35
  2241  101D  3424               	retlw	36
  2242  101E  3425               	retlw	37
  2243  101F  3426               	retlw	38
  2244  1020  3429               	retlw	41
  2245  1021  342C               	retlw	44
  2246  1022  342D               	retlw	45
  2247  1023  342E               	retlw	46
  2248  1024  3400               	retlw	0
  2249  1025  3401               	retlw	1
  2250  1026  3402               	retlw	2
  2251  1027  3407               	retlw	7
  2252  1028  3408               	retlw	8
  2253  1029  3409               	retlw	9
  2254  102A  3406               	retlw	6
  2255  102B  3404               	retlw	4
  2256  102C  3405               	retlw	5
  2257  102D  3427               	retlw	39
  2258  102E  3428               	retlw	40
  2259  102F                     __end_of_CC2500_registers_address:	
  2260  102F                     _CC2500_rfSettings:	
  2261  102F  3407               	retlw	7
  2262  1030  3407               	retlw	7
  2263  1031  3430               	retlw	48
  2264  1032  3487               	retlw	135
  2265  1033  346B               	retlw	107
  2266  1034  34F8               	retlw	248
  2267  1035  347F               	retlw	127
  2268  1036  343F               	retlw	63
  2269  1037  3409               	retlw	9
  2270  1038  3400               	retlw	0
  2271  1039  345C               	retlw	92
  2272  103A  34A7               	retlw	167
  2273  103B  3462               	retlw	98
  2274  103C  3486               	retlw	134
  2275  103D  3483               	retlw	131
  2276  103E  3403               	retlw	3
  2277  103F  3422               	retlw	34
  2278  1040  34F8               	retlw	248
  2279  1041  3400               	retlw	0
  2280  1042  3444               	retlw	68
  2281  1043  34B6               	retlw	182
  2282  1044  3410               	retlw	16
  2283  1045  3418               	retlw	24
  2284  1046  341D               	retlw	29
  2285  1047  341C               	retlw	28
  2286  1048  34C7               	retlw	199
  2287  1049  3400               	retlw	0
  2288  104A  34B2               	retlw	178
  2289  104B  34EA               	retlw	234
  2290  104C  340A               	retlw	10
  2291  104D  3400               	retlw	0
  2292  104E  3411               	retlw	17
  2293  104F  3459               	retlw	89
  2294  1050  3488               	retlw	136
  2295  1051  3431               	retlw	49
  2296  1052  340B               	retlw	11
  2297  1053  342F               	retlw	47
  2298  1054  342E               	retlw	46
  2299  1055  3406               	retlw	6
  2300  1056  3404               	retlw	4
  2301  1057  3405               	retlw	5
  2302  1058  3400               	retlw	0
  2303  1059  3430               	retlw	48
  2304  105A  34D3               	retlw	211
  2305  105B  3491               	retlw	145
  2306  105C  3441               	retlw	65
  2307  105D  3400               	retlw	0
  2308  105E                     __end_of_CC2500_rfSettings:	
  2309  105E                     _CC2500_patable_vaule:	
  2310  105E  34FE               	retlw	254
  2311  105F  34FE               	retlw	254
  2312  1060  34FE               	retlw	254
  2313  1061  34FE               	retlw	254
  2314  1062  34FE               	retlw	254
  2315  1063  34FE               	retlw	254
  2316  1064  34FE               	retlw	254
  2317  1065  34FE               	retlw	254
  2318  1066                     __end_of_CC2500_patable_vaule:	
  2319                           
  2320                           	psect	nvCOMMON
  2321  007B                     __pnvCOMMON:	
  2322  007B                     _product:	
  2323  007B                     	ds	1
  2324  000C                     _PORTA	set	12
  2325  000D                     _PORTB	set	13
  2326  000E                     _PORTC	set	14
  2327  0018                     _T1CON	set	24
  2328  0017                     _TMR1H	set	23
  2329  0016                     _TMR1L	set	22
  2330  005F                     _GIE	set	95
  2331  005B                     _IOCIE	set	91
  2332  0058                     _IOCIF	set	88
  2333  005E                     _PEIE	set	94
  2334  0060                     _RA0	set	96
  2335  0064                     _RA4	set	100
  2336  0066                     _RA6	set	102
  2337  0067                     _RA7	set	103
  2338  0068                     _RB0	set	104
  2339  0069                     _RB1	set	105
  2340  006A                     _RB2	set	106
  2341  006B                     _RB3	set	107
  2342  006D                     _RB5	set	109
  2343  0070                     _RC0	set	112
  2344  0071                     _RC1	set	113
  2345  0073                     _RC3	set	115
  2346  0074                     _RC4	set	116
  2347  0075                     _RC5	set	117
  2348  0088                     _TMR1IF	set	136
  2349  009D                     _ADCON0	set	157
  2350  009E                     _ADCON1	set	158
  2351  009C                     _ADRESH	set	156
  2352  009B                     _ADRESL	set	155
  2353  0099                     _OSCCON	set	153
  2354  008C                     _TRISA	set	140
  2355  008D                     _TRISB	set	141
  2356  008E                     _TRISC	set	142
  2357  0097                     _WDTCON	set	151
  2358  04E9                     _GO_nDONE	set	1257
  2359  0488                     _TMR1IE	set	1160
  2360  0117                     _FVRCON	set	279
  2361  010C                     _LATA	set	268
  2362  010D                     _LATB	set	269
  2363  010E                     _LATC	set	270
  2364  018C                     _ANSELA	set	396
  2365  018D                     _ANSELB	set	397
  2366  018E                     _ANSELC	set	398
  2367  0192                     _PMADRH	set	402
  2368  0191                     _PMADRL	set	401
  2369  0196                     _PMCON2	set	406
  2370  0194                     _PMDATH	set	404
  2371  0193                     _PMDATL	set	403
  2372  0CAE                     _CFGS	set	3246
  2373  0CAC                     _FREE	set	3244
  2374  0CAD                     _LWLO	set	3245
  2375  0CA8                     _RD	set	3240
  2376  0CA9                     _WR	set	3241
  2377  0CAA                     _WREN	set	3242
  2378  020D                     _WPUB	set	525
  2379  0396                     _IOCBF	set	918
  2380  0395                     _IOCBN	set	917
  2381  0394                     _IOCBP	set	916
  2382  1CB2                     _IOCBF2	set	7346
  2383                           
  2384                           ; #config settings
  2385  0000                     
  2386                           	psect	cinit
  2387  0021                     start_initialization:	
  2388  0021                     __initialization:	
  2389                           
  2390                           ; Clear objects allocated to BITCOMMON
  2391  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BANK0
  2394  0022  01EC               	clrf	__pbssBANK0& (0+127)
  2395  0023  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2396                           
  2397                           ; Clear objects allocated to BANK1
  2398  0024  30A0               	movlw	low __pbssBANK1
  2399  0025  0084               	movwf	4
  2400  0026  3000               	movlw	high __pbssBANK1
  2401  0027  0085               	movwf	5
  2402  0028  3050               	movlw	80
  2403  0029  319B  236F  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK2
  2406  002C  3020               	movlw	low __pbssBANK2
  2407  002D  0084               	movwf	4
  2408  002E  3001               	movlw	high __pbssBANK2
  2409  002F  0085               	movwf	5
  2410  0030  304A               	movlw	74
  2411  0031  319B  236F  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK3
  2414  0034  30A0               	movlw	low __pbssBANK3
  2415  0035  0084               	movwf	4
  2416  0036  3001               	movlw	high __pbssBANK3
  2417  0037  0085               	movwf	5
  2418  0038  304C               	movlw	76
  2419  0039  319B  236F  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Clear objects allocated to BANK4
  2422  003C  3040               	movlw	low __pbssBANK4
  2423  003D  0084               	movwf	4
  2424  003E  3002               	movlw	high __pbssBANK4
  2425  003F  0085               	movwf	5
  2426  0040  3010               	movlw	16
  2427  0041  319B  236F  3180   	fcall	clear_ram0
  2428                           
  2429                           ; Initialize objects allocated to BANK4
  2430  0044  30E0               	movlw	low __pidataBANK4
  2431  0045  0084               	movwf	4
  2432  0046  309F               	movlw	(high __pidataBANK4)| (0+128)
  2433  0047  0085               	movwf	5
  2434  0048  3020               	movlw	low __pdataBANK4
  2435  0049  0086               	movwf	6
  2436  004A  3002               	movlw	high __pdataBANK4
  2437  004B  0087               	movwf	7
  2438  004C  3020               	movlw	32
  2439  004D  319B  2369         	fcall	init_ram
  2440  004F                     end_of_initialization:	
  2441                           ;End of C runtime variable initialization code
  2442                           
  2443  004F                     __end_of__initialization:	
  2444  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2445  0050  0020               	movlb	0
  2446  0051  3196  2EE6         	ljmp	_main	;jump to C main() function
  2447                           
  2448                           	psect	bitbssCOMMON
  2449  03D0                     __pbitbssCOMMON:	
  2450  03D0                     _Receive_OK:	
  2451  03D0                     	ds	1
  2452  03D1                     _Transceive_OK:	
  2453  03D1                     	ds	1
  2454                           
  2455                           	psect	bssBANK0
  2456  006C                     __pbssBANK0:	
  2457  006C                     _DimmerLights:	
  2458  006C                     	ds	1
  2459  006D                     _Sw:	
  2460  006D                     	ds	1
  2461                           
  2462                           	psect	bssBANK1
  2463  00A0                     __pbssBANK1:	
  2464  00A0                     _DimmerIntr1:	
  2465  00A0                     	ds	16
  2466  00B0                     _RF1:	
  2467  00B0                     	ds	15
  2468  00BF                     _myMain:	
  2469  00BF                     	ds	13
  2470  00CC                     _Buz1:	
  2471  00CC                     	ds	12
  2472  00D8                     _CRC:	
  2473  00D8                     	ds	1
  2474  00D9                     _Cmd:	
  2475  00D9                     	ds	1
  2476  00DA                     _DelayOff:	
  2477  00DA                     	ds	1
  2478  00DB                     _LED:	
  2479  00DB                     	ds	1
  2480  00DC                     _Rx_Length:	
  2481  00DC                     	ds	1
  2482  00DD                     _SPI0Buffer:	
  2483  00DD                     	ds	1
  2484  00DE                     _SwDetect:	
  2485  00DE                     	ds	1
  2486  00DF                     _Tx_Length:	
  2487  00DF                     	ds	1
  2488  00E0                     _r_data:	
  2489  00E0                     	ds	1
  2490  00E1                     _s_data:	
  2491  00E1                     	ds	1
  2492  00E2                     _Temp:	
  2493  00E2                     	ds	14
  2494                           
  2495                           	psect	bssBANK2
  2496  0120                     __pbssBANK2:	
  2497  0120                     _Dimmer:	
  2498  0120                     	ds	5
  2499  0125                     _Timer1:	
  2500  0125                     	ds	3
  2501  0128                     _RF_Count:	
  2502  0128                     	ds	2
  2503  012A                     _WDT:	
  2504  012A                     	ds	2
  2505  012C                     _DimmerIntr:	
  2506  012C                     	ds	1
  2507  012D                     _Light:	
  2508  012D                     	ds	1
  2509  012E                     _RSSI:	
  2510  012E                     	ds	1
  2511  012F                     _r_address:	
  2512  012F                     	ds	1
  2513  0130                     _Load:	
  2514  0130                     	ds	40
  2515  0158                     _DimmerLights1:	
  2516  0158                     	ds	9
  2517  0161                     _DlySw1:	
  2518  0161                     	ds	5
  2519  0166                     _VarErrLED:	
  2520  0166                     	ds	4
  2521                           
  2522                           	psect	bssBANK3
  2523  01A0                     __pbssBANK3:	
  2524  01A0                     _RF_Data:	
  2525  01A0                     	ds	30
  2526  01BE                     _Memory:	
  2527  01BE                     	ds	37
  2528  01E3                     _Sw1:	
  2529  01E3                     	ds	9
  2530                           
  2531                           	psect	bssBANK4
  2532  0240                     __pbssBANK4:	
  2533  0240                     _u1:	
  2534  0240                     	ds	16
  2535                           
  2536                           	psect	dataBANK4
  2537  0220                     __pdataBANK4:	
  2538  0220                     __product:	
  2539  0220                     	ds	32
  2540                           
  2541                           	psect	clrtext
  2542  1B6F                     clear_ram0:	
  2543                           ;	Called with FSR0 containing the base address, and
  2544                           ;	WREG with the size to clear
  2545                           
  2546  1B6F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2547  1B70                     clrloop0:	
  2548  1B70  0180               	clrf	0	;clear RAM location pointed to by FSR
  2549  1B71  3101               	addfsr 0,1
  2550  1B72  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2551  1B73  2B70               	goto	clrloop0	;have we reached the end yet?
  2552  1B74  3400               	retlw	0	;all done for this memory range, return
  2553                           
  2554                           	psect	inittext
  2555  1B69                     init_ram:	
  2556  1B69  00FE               	movwf	126
  2557  1B6A                     initloop:	
  2558  1B6A  0012               	moviw fsr0++
  2559  1B6B  001E               	movwi fsr1++
  2560  1B6C  0BFE               	decfsz	126,f
  2561  1B6D  2B6A               	goto	initloop
  2562  1B6E  3400               	retlw	0
  2563                           
  2564                           	psect	cstackBANK2
  2565  016A                     __pcstackBANK2:	
  2566  016A                     ?_main:	
  2567  016A                     main@argc:	
  2568                           ; 2 bytes @ 0x0
  2569                           
  2570                           
  2571                           ; 2 bytes @ 0x0
  2572  016A                     	ds	2
  2573  016C                     main@argv:	
  2574                           
  2575                           ; 2 bytes @ 0x2
  2576  016C                     	ds	2
  2577                           
  2578                           	psect	cstackCOMMON
  2579  0070                     __pcstackCOMMON:	
  2580  0070                     ?_CC2500_WriteCommand:	
  2581  0070                     ?_RF_Timeout_Counter:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_setRF_TimeoutCleared:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_WriteByte:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_ReadStatus:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_ReadByte:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_PowerRST:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_InitSetREG:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_InitPATable:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_ClearTXFIFO:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ClearRXFIFO:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_FrequencyCabr:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_SIDLEMode:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_DlyOff_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_DlyOff_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setDimmerLights_SwOn:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_SwOff:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setMemory_Modify:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setDimmerLights_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setDimmerLights_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DimmerLights_DimmingFunction:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_Line:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_DimmerIntr_ValueCalculate:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_DimmingClose:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setTxData:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setRF_TransceiveGO:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setLED_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Fosc_Set:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_IO_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_TMR1_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_ADC_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_IOC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_WDT_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_ISR:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_Timeout_Counter:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_set_TimeoutCleared:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Flash_Memory_Write:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Flash_Memory_Modify:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_WDT_Clearing:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_myMain_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Temp_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Load_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Switch_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_RF_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_getLoad_AD:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_getTemp_AD:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_my_MainTimer:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Temp_Main:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Load_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Switch_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_RF_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Exception_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setLoad_AH_AL_Restore:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setTemp_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setTemp_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setOverTemp_ADV_Restore:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRF_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_RF_RxDisable:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setData:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getRxData:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLog_Code:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setControl_Lights_Table:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_Control:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_AdjControl:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_AdjControl:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_Buzzer_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_Buzzer_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_TxData:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_RxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_CC2500_PowerOnInitial:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOffPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOff_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DelayOff_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerIntr_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DimmerLights_SelectPointer:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DimmerLights_Initialization:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerLights_DimmingOn:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_Main:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_TMR_1:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ??_DimmerLights_TMR_1:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_IOC_1:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ??_DimmerLights_IOC_1:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_LedPointSelect:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_LED_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_LED_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Mcu_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_ISR:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Flash_Memory_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Flash_Memory_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Flash_Memory_Unlock:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Flash_Memory_Erasing:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setMemory_LoopSave:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_WDT_Main:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_setRF_Learn:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_TouchPower:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_SwPointSelect:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_getDimmerLights_Status:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_getDimmerLights_ValueToPercent:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getDimmerLights_PercentToValue:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getLoad_OK:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getMain_All_Error_Status:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getMain_All_LightsStatus:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_Allow_Condition:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getCmd_Status:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_Flash_Memory_Read:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getAll_Sw_KeyStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getRF_KeyStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getSw_KeyStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDelayOff_GO:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getDimmerIntr_DimmingValue:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmerLights_Line:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_LoadGO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmer_Load_Status:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getMain_Lights_Count:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     setDimmerLights_Initialization@lights:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     getDimmerLights_Allow_Condition@lights:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     getSw_KeyStatus@sw:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950                           
  2951                           ; 1 bytes @ 0x0
  2952  0070                     	ds	1
  2953  0071                     ??_TMR1_ISR:	
  2954  0071                     ??_IOC_ISR:	
  2955                           ; 0 bytes @ 0x1
  2956                           
  2957  0071                     ??_ISR:	
  2958                           ; 0 bytes @ 0x1
  2959                           
  2960                           
  2961                           ; 0 bytes @ 0x1
  2962  0071                     	ds	1
  2963  0072                     ??_RF_Timeout_Counter:	
  2964  0072                     ??_setRF_TimeoutCleared:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0072                     ??_CC2500_WriteByte:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     ??_CC2500_ReadByte:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0072                     ?_DelayTime_1us:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0072                     ??_setMemory_Modify:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0072                     ??_setDimmerLights_Initialization:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0072                     ??_getLoad_OK:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0072                     ??_getMain_All_Error_Status:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0072                     ??_getMain_All_LightsStatus:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0072                     ??_setDimmerLights_Line:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0072                     ??_getCmd_Status:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0072                     ?_setCmd_Status:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0072                     ??_setTxData:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0072                     ??_setRF_TransceiveGO:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0072                     ??_Fosc_Set:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0072                     ??_IO_Set:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0072                     ??_TMR1_Set:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0072                     ??_ADC_Set:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0072                     ??_IOC_Set:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0072                     ??_WDT_Set:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0072                     ??_Timeout_Counter:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0072                     ??_set_TimeoutCleared:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0072                     ??_Flash_Memory_Read:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0072                     ?_setMemory_Data:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0072                     ??_Flash_Memory_Write:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0072                     ??_getAll_Sw_KeyStatus:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0072                     ??_WDT_Clearing:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0072                     ??_myMain_Initialization:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0072                     ??_Temp_Initialization:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0072                     ??_setLoad_AH_AL_Restore:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0072                     ??_setTemp_Initialization:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0072                     ??_setOverTemp_ADV_Restore:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0072                     ??_setRF_Initialization:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0072                     ??_getRF_KeyStatus:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0072                     ??_RF_RxDisable:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0072                     ??_setData:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0072                     ??_getSw_KeyStatus:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0072                     ??_Buzzer_Initialization:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0072                     ??_Buzzer_Main:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0072                     ??_DelayOffPointSelect:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0072                     ?_setDimmerIntr_ControlStatus:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0072                     ??_getDimmerIntr_DimmingValue:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0072                     ??_getDimmerIntr_Dimming_Sw:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0072                     ?_setDimmerIntr_Dimming_RF:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0072                     ??_DimmerLights_SelectPointer:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0072                     ??_getDimmerLights_Line:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0072                     ??_getDimmer_LoadGO:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0072                     ??_getDimmer_Load_Status:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0072                     ??_LedPointSelect:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0072                     ??_Flash_Memory_Unlock:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0072                     ??_Flash_Memory_Erasing:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0072                     ??_setMemory_LoopSave:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0072                     ??_WDT_Main:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0072                     ??_getMain_Lights_Count:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0072                     ??_setRF_Learn:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0072                     ??_TouchPower:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0072                     ??_SwPointSelect:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0072                     ?___bmul:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0072                     ?___lbdiv:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0072                     ?_getBuz_GO:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0072                     ?_getAD:	
  3151                           ; 2 bytes @ 0x2
  3152                           
  3153  0072                     ?___wmul:	
  3154                           ; 2 bytes @ 0x2
  3155                           
  3156  0072                     ?___awdiv:	
  3157                           ; 2 bytes @ 0x2
  3158                           
  3159  0072                     ?___lwdiv:	
  3160                           ; 2 bytes @ 0x2
  3161                           
  3162  0072                     ?___ftpack:	
  3163                           ; 2 bytes @ 0x2
  3164                           
  3165  0072                     setDimmerIntr_ControlStatus@command:	
  3166                           ; 3 bytes @ 0x2
  3167                           
  3168  0072                     setDimmerIntr_Dimming_Sw@command:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0072                     getDimmerIntr_Dimming_Sw@lights:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0072                     setDimmerIntr_Dimming_RF@command:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0072                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0072                     setDimmerLights_Line@lights:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183  0072                     getDimmerLights_Line@line:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186  0072                     getDimmer_LoadGO@loadgo:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189  0072                     getDimmer_Load_Status@status:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192  0072                     getAD@adcon1:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0072                     setMemory_Data@data:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0072                     getMain_All_LightsStatus@status:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0072                     setCmd_Status@cmd:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0072                     getCmd_Status@number:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0072                     getLoad_OK@ok:	
  3208                           ; 1 bytes @ 0x2
  3209                           
  3210  0072                     ___bmul@multiplicand:	
  3211                           ; 1 bytes @ 0x2
  3212                           
  3213  0072                     ___lbdiv@divisor:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0072                     DelayTime_1us@count:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0072                     ___wmul@multiplier:	
  3220                           ; 2 bytes @ 0x2
  3221                           
  3222  0072                     ___awdiv@divisor:	
  3223                           ; 2 bytes @ 0x2
  3224                           
  3225  0072                     ___lwdiv@divisor:	
  3226                           ; 2 bytes @ 0x2
  3227                           
  3228  0072                     ___ftpack@arg:	
  3229                           ; 2 bytes @ 0x2
  3230                           
  3231                           
  3232                           ; 3 bytes @ 0x2
  3233  0072                     	ds	1
  3234  0073                     ??_getDimmerLights_Allow_Condition:	
  3235  0073                     ??_setCmd_Status:	
  3236                           ; 0 bytes @ 0x3
  3237                           
  3238  0073                     ??_setMemory_Data:	
  3239                           ; 0 bytes @ 0x3
  3240                           
  3241  0073                     ??_RF_Initialization:	
  3242                           ; 0 bytes @ 0x3
  3243                           
  3244  0073                     ??_setDimmerIntr_ControlStatus:	
  3245                           ; 0 bytes @ 0x3
  3246                           
  3247  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3248                           ; 0 bytes @ 0x3
  3249                           
  3250  0073                     ??_setDimmerIntr_Dimming_RF:	
  3251                           ; 0 bytes @ 0x3
  3252                           
  3253  0073                     ??_Mcu_Initialization:	
  3254                           ; 0 bytes @ 0x3
  3255                           
  3256  0073                     ??___bmul:	
  3257                           ; 0 bytes @ 0x3
  3258                           
  3259  0073                     ??___lbdiv:	
  3260                           ; 0 bytes @ 0x3
  3261                           
  3262  0073                     CC2500_WriteByte@loop_a:	
  3263                           ; 0 bytes @ 0x3
  3264                           
  3265  0073                     CC2500_ReadByte@loop_b:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0073                     DelayOffPointSelect@sw:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271  0073                     getDimmerIntr_DimmingValue@lights:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0073                     getDimmerIntr_Dimming_Sw@status:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0073                     DimmerLights_SelectPointer@lights:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0073                     LedPointSelect@led:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0073                     Flash_Memory_Read@i:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0073                     Flash_Memory_Write@i:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0073                     setMemory_Modify@command:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0073                     setMemory_LoopSave@command:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295  0073                     getMain_Lights_Count@status1:	
  3296                           ; 1 bytes @ 0x3
  3297                           
  3298  0073                     getCmd_Status@cmd:	
  3299                           ; 1 bytes @ 0x3
  3300                           
  3301  0073                     setLoad_AH_AL_Restore@i:	
  3302                           ; 1 bytes @ 0x3
  3303                           
  3304  0073                     setRF_Learn@command:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0073                     getRF_KeyStatus@key:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0073                     setRF_TransceiveGO@command:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0073                     SwPointSelect@sw:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0073                     getSw_KeyStatus@status:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0073                     getAll_Sw_KeyStatus@status:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0073                     _getMain_All_Error_Status$4005:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0073                     setOverTemp_ADV_Restore@i:	
  3326                           ; 2 bytes @ 0x3
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x3
  3330  0073                     	ds	1
  3331  0074                     ??_CC2500_WriteCommand:	
  3332  0074                     ??_CC2500_ReadStatus:	
  3333                           ; 0 bytes @ 0x4
  3334                           
  3335  0074                     ??_DelayTime_1us:	
  3336                           ; 0 bytes @ 0x4
  3337                           
  3338  0074                     ?_CC2500_WriteREG:	
  3339                           ; 0 bytes @ 0x4
  3340                           
  3341  0074                     ??_DlyOff_Initialization:	
  3342                           ; 0 bytes @ 0x4
  3343                           
  3344  0074                     ??_getDimmerLights_Status:	
  3345                           ; 0 bytes @ 0x4
  3346                           
  3347  0074                     ??_setDimmerLights_SwOff:	
  3348                           ; 0 bytes @ 0x4
  3349                           
  3350  0074                     ?_setLED:	
  3351                           ; 0 bytes @ 0x4
  3352                           
  3353  0074                     ??_setLED_Main:	
  3354                           ; 0 bytes @ 0x4
  3355                           
  3356  0074                     ??_Load_Initialization:	
  3357                           ; 0 bytes @ 0x4
  3358                           
  3359  0074                     ??_getBuz_GO:	
  3360                           ; 0 bytes @ 0x4
  3361                           
  3362  0074                     ??_getDelayOff_GO:	
  3363                           ; 0 bytes @ 0x4
  3364                           
  3365  0074                     ??_setDimmerLights_DimmingOn:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0074                     ?_setDimmerLights_DimmingRun:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0074                     CC2500_WriteREG@value:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0074                     DlyOff_Initialization@sw:	
  3375                           ; 1 bytes @ 0x4
  3376                           
  3377  0074                     getDelayOff_GO@sw:	
  3378                           ; 1 bytes @ 0x4
  3379                           
  3380  0074                     setDimmerIntr_ControlStatus@lights:	
  3381                           ; 1 bytes @ 0x4
  3382                           
  3383  0074                     getDimmerIntr_DimmingValue@value:	
  3384                           ; 1 bytes @ 0x4
  3385                           
  3386  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3387                           ; 1 bytes @ 0x4
  3388                           
  3389  0074                     setDimmerIntr_Dimming_RF@lights:	
  3390                           ; 1 bytes @ 0x4
  3391                           
  3392  0074                     setDimmerLights_SwOff@sw:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395  0074                     setDimmerLights_DimmingOn@sw:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398  0074                     getDimmerLights_Allow_Condition@allow:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401  0074                     getDimmerLights_Status@lights:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0074                     setDimmerLights_DimmingRun@command:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0074                     setLED@command:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0074                     Flash_Memory_Read@address:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413  0074                     setMemory_Data@address:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416  0074                     getMain_Lights_Count@count:	
  3417                           ; 1 bytes @ 0x4
  3418                           
  3419  0074                     setCmd_Status@number:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0074                     _getRF_KeyStatus$6009:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0074                     _getSw_KeyStatus$7185:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0074                     _getAll_Sw_KeyStatus$7188:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0074                     ___bmul@product:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0074                     ___lbdiv@dividend:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0074                     DelayTime_1us@i:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0074                     ___wmul@multiplicand:	
  3441                           ; 2 bytes @ 0x4
  3442                           
  3443  0074                     ___awdiv@dividend:	
  3444                           ; 2 bytes @ 0x4
  3445                           
  3446  0074                     ___lwdiv@dividend:	
  3447                           ; 2 bytes @ 0x4
  3448                           
  3449                           
  3450                           ; 2 bytes @ 0x4
  3451  0074                     	ds	1
  3452  0075                     ??_CC2500_WriteREG:	
  3453  0075                     ??_setLED:	
  3454                           ; 0 bytes @ 0x5
  3455                           
  3456  0075                     ??_setDimmerLights_DimmingClose:	
  3457                           ; 0 bytes @ 0x5
  3458                           
  3459  0075                     ??_DelayOff_Initialization:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0075                     ??_setDimmerLights_DimmingRun:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0075                     ??_getAD:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0075                     CC2500_WriteCommand@command:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0075                     CC2500_ReadStatus@status_addr:	
  3472                           ; 1 bytes @ 0x5
  3473                           
  3474  0075                     getDelayOff_GO@go:	
  3475                           ; 1 bytes @ 0x5
  3476                           
  3477  0075                     _getDimmerLights_Allow_Condition$2553:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0075                     getDimmerLights_Status@status:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0075                     setLED@led:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0075                     getAD@adcon0:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489  0075                     Flash_Memory_Read@ret:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492  0075                     ___bmul@multiplier:	
  3493                           ; 1 bytes @ 0x5
  3494                           
  3495  0075                     ___ftpack@exp:	
  3496                           ; 1 bytes @ 0x5
  3497                           
  3498  0075                     ___lbdiv@counter:	
  3499                           ; 1 bytes @ 0x5
  3500                           
  3501  0075                     _getMain_All_Error_Status$4006:	
  3502                           ; 1 bytes @ 0x5
  3503                           
  3504                           
  3505                           ; 2 bytes @ 0x5
  3506  0075                     	ds	1
  3507  0076                     ??_CC2500_ClearTXFIFO:	
  3508  0076                     ??_CC2500_ClearRXFIFO:	
  3509                           ; 0 bytes @ 0x6
  3510                           
  3511  0076                     ??_CC2500_SIDLEMode:	
  3512                           ; 0 bytes @ 0x6
  3513                           
  3514  0076                     ??_setLED_Initialization:	
  3515                           ; 0 bytes @ 0x6
  3516                           
  3517  0076                     ??_Flash_Memory_Modify:	
  3518                           ; 0 bytes @ 0x6
  3519                           
  3520  0076                     ??_getLoad_AD:	
  3521                           ; 0 bytes @ 0x6
  3522                           
  3523  0076                     ??_getTemp_AD:	
  3524                           ; 0 bytes @ 0x6
  3525                           
  3526  0076                     ??_setRF_AdjControl:	
  3527                           ; 0 bytes @ 0x6
  3528                           
  3529  0076                     ??_setSw_Initialization:	
  3530                           ; 0 bytes @ 0x6
  3531                           
  3532  0076                     ??_CC2500_TxData:	
  3533                           ; 0 bytes @ 0x6
  3534                           
  3535  0076                     ??_CC2500_RxData:	
  3536                           ; 0 bytes @ 0x6
  3537                           
  3538  0076                     ??_Flash_Memory_Initialization:	
  3539                           ; 0 bytes @ 0x6
  3540                           
  3541  0076                     ??___wmul:	
  3542                           ; 0 bytes @ 0x6
  3543                           
  3544  0076                     ??___awdiv:	
  3545                           ; 0 bytes @ 0x6
  3546                           
  3547  0076                     ??___lwdiv:	
  3548                           ; 0 bytes @ 0x6
  3549                           
  3550  0076                     CC2500_WriteREG@w_addr:	
  3551                           ; 0 bytes @ 0x6
  3552                           
  3553  0076                     setDimmerLights_DimmingRun@lights:	
  3554                           ; 1 bytes @ 0x6
  3555                           
  3556  0076                     setLED_Initialization@led:	
  3557                           ; 1 bytes @ 0x6
  3558                           
  3559  0076                     setLED_Main@led:	
  3560                           ; 1 bytes @ 0x6
  3561                           
  3562  0076                     setSw_Initialization@sw:	
  3563                           ; 1 bytes @ 0x6
  3564                           
  3565  0076                     ___ftpack@sign:	
  3566                           ; 1 bytes @ 0x6
  3567                           
  3568  0076                     ___lbdiv@quotient:	
  3569                           ; 1 bytes @ 0x6
  3570                           
  3571  0076                     getBuz_GO@i:	
  3572                           ; 1 bytes @ 0x6
  3573                           
  3574  0076                     DelayTime_1us@j:	
  3575                           ; 2 bytes @ 0x6
  3576                           
  3577  0076                     ___wmul@product:	
  3578                           ; 2 bytes @ 0x6
  3579                           
  3580                           
  3581                           ; 2 bytes @ 0x6
  3582  0076                     	ds	1
  3583  0077                     ??_CC2500_InitSetREG:	
  3584  0077                     ??_CC2500_InitPATable:	
  3585                           ; 0 bytes @ 0x7
  3586                           
  3587  0077                     ??_Switch_Initialization:	
  3588                           ; 0 bytes @ 0x7
  3589                           
  3590  0077                     ??___ftpack:	
  3591                           ; 0 bytes @ 0x7
  3592                           
  3593  0077                     ??_setBuz:	
  3594                           ; 0 bytes @ 0x7
  3595                           
  3596  0077                     ??_LED_Initialization:	
  3597                           ; 0 bytes @ 0x7
  3598                           
  3599  0077                     ??_LED_Main:	
  3600                           ; 0 bytes @ 0x7
  3601                           
  3602  0077                     ?_Division:	
  3603                           ; 0 bytes @ 0x7
  3604                           
  3605  0077                     CC2500_TxData@loop_e:	
  3606                           ; 1 bytes @ 0x7
  3607                           
  3608  0077                     CC2500_RxData@loop_f:	
  3609                           ; 1 bytes @ 0x7
  3610                           
  3611  0077                     Division@num:	
  3612                           ; 1 bytes @ 0x7
  3613                           
  3614  0077                     Flash_Memory_Initialization@value:	
  3615                           ; 1 bytes @ 0x7
  3616                           
  3617  0077                     Flash_Memory_Modify@i:	
  3618                           ; 1 bytes @ 0x7
  3619                           
  3620  0077                     getMain_All_Error_Status@command:	
  3621                           ; 1 bytes @ 0x7
  3622                           
  3623  0077                     getTemp_AD@channel:	
  3624                           ; 1 bytes @ 0x7
  3625                           
  3626  0077                     setRF_AdjControl@status:	
  3627                           ; 1 bytes @ 0x7
  3628                           
  3629  0077                     ___lwdiv@quotient:	
  3630                           ; 1 bytes @ 0x7
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x7
  3634  0077                     	ds	1
  3635  0078                     ??_CC2500_PowerRST:	
  3636  0078                     ??_CC2500_FrequencyCabr:	
  3637                           ; 0 bytes @ 0x8
  3638                           
  3639  0078                     ??_Division:	
  3640                           ; 0 bytes @ 0x8
  3641                           
  3642  0078                     ??_Flash_Memory_Main:	
  3643                           ; 0 bytes @ 0x8
  3644                           
  3645  0078                     setBuz@count:	
  3646                           ; 0 bytes @ 0x8
  3647                           
  3648  0078                     CC2500_InitPATable@temp:	
  3649                           ; 1 bytes @ 0x8
  3650                           
  3651  0078                     getMain_All_Error_Status@status:	
  3652                           ; 1 bytes @ 0x8
  3653                           
  3654  0078                     setRF_AdjControl@dimmingStatus:	
  3655                           ; 1 bytes @ 0x8
  3656                           
  3657  0078                     getTemp_AD@ADRES:	
  3658                           ; 1 bytes @ 0x8
  3659                           
  3660                           
  3661                           ; 2 bytes @ 0x8
  3662  0078                     	ds	1
  3663  0079                     ??_setDimmerLights_SwOn:	
  3664  0079                     ??_my_MainTimer:	
  3665                           ; 0 bytes @ 0x9
  3666                           
  3667  0079                     ??_Exception_Main:	
  3668                           ; 0 bytes @ 0x9
  3669                           
  3670  0079                     CC2500_InitPATable@loop_d:	
  3671                           ; 0 bytes @ 0x9
  3672                           
  3673  0079                     setRF_AdjControl@sw:	
  3674                           ; 1 bytes @ 0x9
  3675                           
  3676  0079                     ___lwdiv@counter:	
  3677                           ; 1 bytes @ 0x9
  3678                           
  3679                           
  3680                           ; 1 bytes @ 0x9
  3681  0079                     	ds	1
  3682  007A                     ??_setDimmerLights_Main:	
  3683  007A                     ??_Temp_Main:	
  3684                           ; 0 bytes @ 0xA
  3685                           
  3686  007A                     ??_Switch_Main:	
  3687                           ; 0 bytes @ 0xA
  3688                           
  3689  007A                     ??_RF_Main:	
  3690                           ; 0 bytes @ 0xA
  3691                           
  3692  007A                     ??_setControl_Lights_Table:	
  3693                           ; 0 bytes @ 0xA
  3694                           
  3695  007A                     ??_CC2500_PowerOnInitial:	
  3696                           ; 0 bytes @ 0xA
  3697                           
  3698  007A                     ??_DelayOff_Main:	
  3699                           ; 0 bytes @ 0xA
  3700                           
  3701  007A                     ??_DimmerLights_Initialization:	
  3702                           ; 0 bytes @ 0xA
  3703                           
  3704  007A                     ??_DimmerLights_Main:	
  3705                           ; 0 bytes @ 0xA
  3706                           
  3707  007A                     ??_main:	
  3708                           ; 0 bytes @ 0xA
  3709                           
  3710  007A                     ??___ftneg:	
  3711                           ; 0 bytes @ 0xA
  3712                           
  3713                           
  3714                           	psect	cstackBANK0
  3715  0020                     __pcstackBANK0:	
  3716                           ; 0 bytes @ 0xA
  3717                           
  3718  0020                     ??_Load_Main:	
  3719  0020                     ?___awtoft:	
  3720                           ; 0 bytes @ 0x0
  3721                           
  3722  0020                     CC2500_InitSetREG@temp1:	
  3723                           ; 3 bytes @ 0x0
  3724                           
  3725  0020                     Division@value:	
  3726                           ; 1 bytes @ 0x0
  3727                           
  3728  0020                     Flash_Memory_Main@key_Status:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731  0020                     getLoad_AD@channel:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734  0020                     ___awdiv@counter:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737  0020                     ___awtoft@c:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740                           
  3741                           ; 2 bytes @ 0x0
  3742  0020                     	ds	1
  3743  0021                     CC2500_InitSetREG@temp2:	
  3744  0021                     Division@result:	
  3745                           ; 1 bytes @ 0x1
  3746                           
  3747  0021                     _Flash_Memory_Main$3505:	
  3748                           ; 1 bytes @ 0x1
  3749                           
  3750  0021                     getLoad_AD@k:	
  3751                           ; 1 bytes @ 0x1
  3752                           
  3753  0021                     ___awdiv@sign:	
  3754                           ; 1 bytes @ 0x1
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x1
  3758  0021                     	ds	1
  3759  0022                     ??_DimmerIntr_ValueCalculate:	
  3760  0022                     CC2500_InitSetREG@loop_c:	
  3761                           ; 0 bytes @ 0x2
  3762                           
  3763  0022                     getLoad_AD@j:	
  3764                           ; 1 bytes @ 0x2
  3765                           
  3766  0022                     Load_Main@error:	
  3767                           ; 1 bytes @ 0x2
  3768                           
  3769  0022                     ___awdiv@quotient:	
  3770                           ; 1 bytes @ 0x2
  3771                           
  3772                           
  3773                           ; 2 bytes @ 0x2
  3774  0022                     	ds	1
  3775  0023                     ??___awtoft:	
  3776  0023                     getLoad_AD@ADRES:	
  3777                           ; 0 bytes @ 0x3
  3778                           
  3779  0023                     _Load_Main$4420:	
  3780                           ; 2 bytes @ 0x3
  3781                           
  3782                           
  3783                           ; 2 bytes @ 0x3
  3784  0023                     	ds	1
  3785  0024                     ?_setBuz:	
  3786  0024                     DimmerIntr_ValueCalculate@lights:	
  3787                           ; 0 bytes @ 0x4
  3788                           
  3789  0024                     setBuz@time:	
  3790                           ; 1 bytes @ 0x4
  3791                           
  3792                           
  3793                           ; 2 bytes @ 0x4
  3794  0024                     	ds	1
  3795  0025                     ??_DimmerLights_DimmingFunction:	
  3796  0025                     getLoad_AD@i:	
  3797                           ; 0 bytes @ 0x5
  3798                           
  3799  0025                     Load_Main@ErrorCountValue:	
  3800                           ; 1 bytes @ 0x5
  3801                           
  3802  0025                     ___awtoft@sign:	
  3803                           ; 1 bytes @ 0x5
  3804                           
  3805                           
  3806                           ; 1 bytes @ 0x5
  3807  0025                     	ds	1
  3808  0026                     ?___ftdiv:	
  3809  0026                     ?___ftmul:	
  3810                           ; 3 bytes @ 0x6
  3811                           
  3812  0026                     setDimmerLights_SwOn@idle:	
  3813                           ; 3 bytes @ 0x6
  3814                           
  3815  0026                     DimmerLights_DimmingFunction@lights:	
  3816                           ; 1 bytes @ 0x6
  3817                           
  3818  0026                     Exception_Main@status:	
  3819                           ; 1 bytes @ 0x6
  3820                           
  3821  0026                     Load_Main@Load_RunStatus:	
  3822                           ; 1 bytes @ 0x6
  3823                           
  3824  0026                     ___ftdiv@f2:	
  3825                           ; 1 bytes @ 0x6
  3826                           
  3827  0026                     ___ftmul@f1:	
  3828                           ; 3 bytes @ 0x6
  3829                           
  3830                           
  3831                           ; 3 bytes @ 0x6
  3832  0026                     	ds	1
  3833  0027                     setDimmerLights_SwOn@dimmingStatus:	
  3834  0027                     Exception_Main@count:	
  3835                           ; 1 bytes @ 0x7
  3836                           
  3837  0027                     Load_Main@LightsCount:	
  3838                           ; 1 bytes @ 0x7
  3839                           
  3840                           
  3841                           ; 1 bytes @ 0x7
  3842  0027                     	ds	1
  3843  0028                     setDimmerLights_SwOn@sw:	
  3844  0028                     Exception_Main@error:	
  3845                           ; 1 bytes @ 0x8
  3846                           
  3847  0028                     Load_Main@i:	
  3848                           ; 1 bytes @ 0x8
  3849                           
  3850                           
  3851                           ; 2 bytes @ 0x8
  3852  0028                     	ds	1
  3853  0029                     ??_setSw_Main:	
  3854  0029                     Exception_Main@i:	
  3855                           ; 0 bytes @ 0x9
  3856                           
  3857  0029                     ___ftdiv@f1:	
  3858                           ; 2 bytes @ 0x9
  3859                           
  3860  0029                     ___ftmul@f2:	
  3861                           ; 3 bytes @ 0x9
  3862                           
  3863                           
  3864                           ; 3 bytes @ 0x9
  3865  0029                     	ds	2
  3866  002B                     setSw_Main@sw:	
  3867  002B                     Exception_Main@i_4017:	
  3868                           ; 1 bytes @ 0xB
  3869                           
  3870                           
  3871                           ; 2 bytes @ 0xB
  3872  002B                     	ds	1
  3873  002C                     ??___ftdiv:	
  3874  002C                     ??___ftmul:	
  3875                           ; 0 bytes @ 0xC
  3876                           
  3877                           
  3878                           ; 0 bytes @ 0xC
  3879  002C                     	ds	1
  3880  002D                     Exception_Main@lights:	
  3881                           
  3882                           ; 1 bytes @ 0xD
  3883  002D                     	ds	3
  3884  0030                     ___ftdiv@cntr:	
  3885  0030                     ___ftmul@exp:	
  3886                           ; 1 bytes @ 0x10
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x10
  3890  0030                     	ds	1
  3891  0031                     ___ftdiv@f3:	
  3892  0031                     ___ftmul@f3_as_product:	
  3893                           ; 3 bytes @ 0x11
  3894                           
  3895                           
  3896                           ; 3 bytes @ 0x11
  3897  0031                     	ds	3
  3898  0034                     ___ftdiv@exp:	
  3899  0034                     ___ftmul@cntr:	
  3900                           ; 1 bytes @ 0x14
  3901                           
  3902                           
  3903                           ; 1 bytes @ 0x14
  3904  0034                     	ds	1
  3905  0035                     ___ftdiv@sign:	
  3906  0035                     ___ftmul@sign:	
  3907                           ; 1 bytes @ 0x15
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x15
  3911  0035                     	ds	1
  3912  0036                     ?___ftneg:	
  3913  0036                     ___ftneg@f1:	
  3914                           ; 3 bytes @ 0x16
  3915                           
  3916                           
  3917                           ; 3 bytes @ 0x16
  3918  0036                     	ds	3
  3919  0039                     ?___ftadd:	
  3920  0039                     ___ftadd@f1:	
  3921                           ; 3 bytes @ 0x19
  3922                           
  3923                           
  3924                           ; 3 bytes @ 0x19
  3925  0039                     	ds	3
  3926  003C                     ___ftadd@f2:	
  3927                           
  3928                           ; 3 bytes @ 0x1C
  3929  003C                     	ds	3
  3930  003F                     ??___ftadd:	
  3931                           
  3932                           ; 0 bytes @ 0x1F
  3933  003F                     	ds	4
  3934  0043                     ___ftadd@sign:	
  3935                           
  3936                           ; 1 bytes @ 0x23
  3937  0043                     	ds	1
  3938  0044                     ___ftadd@exp2:	
  3939                           
  3940                           ; 1 bytes @ 0x24
  3941  0044                     	ds	1
  3942  0045                     ___ftadd@exp1:	
  3943                           
  3944                           ; 1 bytes @ 0x25
  3945  0045                     	ds	1
  3946  0046                     ?___fttol:	
  3947  0046                     ___fttol@f1:	
  3948                           ; 4 bytes @ 0x26
  3949                           
  3950                           
  3951                           ; 3 bytes @ 0x26
  3952  0046                     	ds	4
  3953  004A                     ??___fttol:	
  3954                           
  3955                           ; 0 bytes @ 0x2A
  3956  004A                     	ds	4
  3957  004E                     ___fttol@sign1:	
  3958                           
  3959                           ; 1 bytes @ 0x2E
  3960  004E                     	ds	1
  3961  004F                     ___fttol@lval:	
  3962                           
  3963                           ; 4 bytes @ 0x2F
  3964  004F                     	ds	4
  3965  0053                     ___fttol@exp1:	
  3966                           
  3967                           ; 1 bytes @ 0x33
  3968  0053                     	ds	1
  3969  0054                     ??_getDimmerLights_ValueToPercent:	
  3970  0054                     ??_getDimmerLights_PercentToValue:	
  3971                           ; 0 bytes @ 0x34
  3972                           
  3973                           
  3974                           ; 0 bytes @ 0x34
  3975  0054                     	ds	2
  3976  0056                     getDimmerLights_PercentToValue@value:	
  3977  0056                     getDimmerLights_ValueToPercent@value:	
  3978                           ; 1 bytes @ 0x36
  3979                           
  3980                           
  3981                           ; 1 bytes @ 0x36
  3982  0056                     	ds	1
  3983  0057                     getDimmerLights_PercentToValue@i:	
  3984  0057                     getDimmerLights_ValueToPercent@i:	
  3985                           ; 3 bytes @ 0x37
  3986                           
  3987                           
  3988                           ; 3 bytes @ 0x37
  3989  0057                     	ds	3
  3990  005A                     ?_setProductData:	
  3991  005A                     ??_DimmerIntr_Initialization:	
  3992                           ; 0 bytes @ 0x3A
  3993                           
  3994  005A                     ?_setDimmerIntr_DimmingValue:	
  3995                           ; 0 bytes @ 0x3A
  3996                           
  3997  005A                     ?_setDimmerIntr_MaxmumValue:	
  3998                           ; 0 bytes @ 0x3A
  3999                           
  4000  005A                     setDimmerIntr_DimmingValue@value:	
  4001                           ; 0 bytes @ 0x3A
  4002                           
  4003  005A                     setDimmerIntr_MaxmumValue@value:	
  4004                           ; 1 bytes @ 0x3A
  4005                           
  4006  005A                     setProductData@value:	
  4007                           ; 1 bytes @ 0x3A
  4008                           
  4009                           
  4010                           ; 1 bytes @ 0x3A
  4011  005A                     	ds	1
  4012  005B                     ??_setProductData:	
  4013  005B                     ??_setDimmerIntr_DimmingValue:	
  4014                           ; 0 bytes @ 0x3B
  4015                           
  4016  005B                     ??_setDimmerIntr_MaxmumValue:	
  4017                           ; 0 bytes @ 0x3B
  4018                           
  4019                           
  4020                           ; 0 bytes @ 0x3B
  4021  005B                     	ds	1
  4022  005C                     setDimmerIntr_DimmingValue@lights:	
  4023  005C                     setDimmerIntr_MaxmumValue@lights:	
  4024                           ; 1 bytes @ 0x3C
  4025                           
  4026  005C                     setProductData@address:	
  4027                           ; 1 bytes @ 0x3C
  4028                           
  4029                           
  4030                           ; 1 bytes @ 0x3C
  4031  005C                     	ds	1
  4032  005D                     ??_DlyOff_Main:	
  4033  005D                     ?_setRF_DimmerLights:	
  4034                           ; 0 bytes @ 0x3D
  4035                           
  4036  005D                     ??_setTemp_Main:	
  4037                           ; 0 bytes @ 0x3D
  4038                           
  4039  005D                     ??_setLog_Code:	
  4040                           ; 0 bytes @ 0x3D
  4041                           
  4042  005D                     ??_setRFSW_AdjControl:	
  4043                           ; 0 bytes @ 0x3D
  4044                           
  4045  005D                     ?_setDelayOff_GO:	
  4046                           ; 0 bytes @ 0x3D
  4047                           
  4048  005D                     setDelayOff_GO@command:	
  4049                           ; 0 bytes @ 0x3D
  4050                           
  4051  005D                     setRF_DimmerLights@on:	
  4052                           ; 1 bytes @ 0x3D
  4053                           
  4054                           
  4055                           ; 1 bytes @ 0x3D
  4056  005D                     	ds	1
  4057  005E                     ??_setRF_DimmerLights:	
  4058  005E                     setDelayOff_GO@value:	
  4059                           ; 0 bytes @ 0x3E
  4060                           
  4061                           
  4062                           ; 1 bytes @ 0x3E
  4063  005E                     	ds	1
  4064  005F                     ??_setDelayOff_GO:	
  4065  005F                     DlyOff_Main@sw:	
  4066                           ; 0 bytes @ 0x3F
  4067                           
  4068  005F                     setTemp_Main@error:	
  4069                           ; 1 bytes @ 0x3F
  4070                           
  4071  005F                     setRFSW_AdjControl@status:	
  4072                           ; 1 bytes @ 0x3F
  4073                           
  4074                           
  4075                           ; 1 bytes @ 0x3F
  4076  005F                     	ds	1
  4077  0060                     setTemp_Main@TempGO:	
  4078  0060                     setRFSW_AdjControl@sw:	
  4079                           ; 1 bytes @ 0x40
  4080                           
  4081  0060                     setRF_DimmerLights@status:	
  4082                           ; 1 bytes @ 0x40
  4083                           
  4084                           
  4085                           ; 1 bytes @ 0x40
  4086  0060                     	ds	1
  4087  0061                     setDelayOff_GO@i:	
  4088  0061                     setRF_DimmerLights@lights:	
  4089                           ; 1 bytes @ 0x41
  4090                           
  4091  0061                     setTemp_Main@SafeValue:	
  4092                           ; 1 bytes @ 0x41
  4093                           
  4094                           
  4095                           ; 2 bytes @ 0x41
  4096  0061                     	ds	1
  4097  0062                     ?_setDimmerLights_Dimming:	
  4098  0062                     setDelayOff_GO@j:	
  4099                           ; 0 bytes @ 0x42
  4100                           
  4101  0062                     setDimmerLights_Dimming@status:	
  4102                           ; 1 bytes @ 0x42
  4103                           
  4104                           
  4105                           ; 1 bytes @ 0x42
  4106  0062                     	ds	1
  4107  0063                     ??_setDimmerLights_Dimming:	
  4108  0063                     setDelayOff_GO@k:	
  4109                           ; 0 bytes @ 0x43
  4110                           
  4111  0063                     setTemp_Main@DangerValue:	
  4112                           ; 1 bytes @ 0x43
  4113                           
  4114                           
  4115                           ; 2 bytes @ 0x43
  4116  0063                     	ds	1
  4117  0064                     setDelayOff_GO@sw:	
  4118  0064                     setDimmerLights_Dimming@value:	
  4119                           ; 1 bytes @ 0x44
  4120                           
  4121                           
  4122                           ; 1 bytes @ 0x44
  4123  0064                     	ds	1
  4124  0065                     ?_setDimmerLights_OnOff:	
  4125  0065                     ??_setRFSW_Control:	
  4126                           ; 0 bytes @ 0x45
  4127                           
  4128  0065                     setDimmerLights_OnOff@command:	
  4129                           ; 0 bytes @ 0x45
  4130                           
  4131  0065                     setDimmerLights_Dimming@lights:	
  4132                           ; 1 bytes @ 0x45
  4133                           
  4134  0065                     setTemp_Main@AD:	
  4135                           ; 1 bytes @ 0x45
  4136                           
  4137                           
  4138                           ; 2 bytes @ 0x45
  4139  0065                     	ds	1
  4140  0066                     ??_setDimmerLights_OnOff:	
  4141  0066                     setRFSW_Control@status:	
  4142                           ; 0 bytes @ 0x46
  4143                           
  4144                           
  4145                           ; 1 bytes @ 0x46
  4146  0066                     	ds	1
  4147  0067                     setRFSW_Control@sw:	
  4148                           
  4149                           ; 1 bytes @ 0x47
  4150  0067                     	ds	1
  4151  0068                     ??_getRxData:	
  4152  0068                     setDimmerLights_OnOff@lights:	
  4153                           ; 0 bytes @ 0x48
  4154                           
  4155                           
  4156                           ; 1 bytes @ 0x48
  4157  0068                     	ds	1
  4158  0069                     setDimmerLights_Main@lights:	
  4159  0069                     getRxData@error:	
  4160                           ; 1 bytes @ 0x49
  4161                           
  4162                           
  4163                           ; 1 bytes @ 0x49
  4164  0069                     	ds	1
  4165  006A                     ??_setRF_Main:	
  4166                           
  4167                           ; 0 bytes @ 0x4A
  4168  006A                     	ds	1
  4169  006B                     setRF_Main@error:	
  4170                           
  4171                           ; 1 bytes @ 0x4B
  4172  006B                     	ds	1
  4173                           
  4174                           	psect	maintext
  4175  16E6                     __pmaintext:	
  4176 ;;
  4177 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4178 ;;
  4179 ;; *************** function _main *****************
  4180 ;; Defined at:
  4181 ;;		line 7 in file "../src/Main_B1.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  argc            2    0[BANK2 ] int 
  4184 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  2    0[BANK2 ] int 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 17F/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4196 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;Total ram usage:        4 bytes
  4201 ;; Hardware stack levels required when called:   11
  4202 ;; This function calls:
  4203 ;;		_Buzzer_Initialization
  4204 ;;		_Buzzer_Main
  4205 ;;		_CC2500_PowerOnInitial
  4206 ;;		_DelayOff_Initialization
  4207 ;;		_DelayOff_Main
  4208 ;;		_DimmerLights_Initialization
  4209 ;;		_DimmerLights_Main
  4210 ;;		_Exception_Main
  4211 ;;		_Flash_Memory_Initialization
  4212 ;;		_Flash_Memory_Main
  4213 ;;		_LED_Initialization
  4214 ;;		_LED_Main
  4215 ;;		_Load_Initialization
  4216 ;;		_Load_Main
  4217 ;;		_Mcu_Initialization
  4218 ;;		_RF_Initialization
  4219 ;;		_RF_Main
  4220 ;;		_Switch_Initialization
  4221 ;;		_Switch_Main
  4222 ;;		_Temp_Initialization
  4223 ;;		_Temp_Main
  4224 ;;		_WDT_Main
  4225 ;;		_getLoad_AD
  4226 ;;		_getTemp_AD
  4227 ;;		_myMain_Initialization
  4228 ;;		_my_MainTimer
  4229 ;; This function is called by:
  4230 ;;		Startup code after reset
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           
  4235                           ;psect for function _main
  4236  16E6                     _main:	
  4237                           
  4238                           ;Main_B1.c: 8: myMain_Initialization();
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4242  16E6  319C  24AB  3196   	fcall	_myMain_Initialization
  4243                           
  4244                           ;Main_B1.c: 9: Mcu_Initialization();
  4245  16E9  319D  25BA  3196   	fcall	_Mcu_Initialization
  4246                           
  4247                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4248  16EC  3185  25FB  3196   	fcall	_Flash_Memory_Initialization
  4249                           
  4250                           ;Main_B1.c: 11: LED_Initialization();
  4251  16EF  319B  233A  3196   	fcall	_LED_Initialization
  4252                           
  4253                           ;Main_B1.c: 12: Buzzer_Initialization();
  4254  16F2  319B  2320  3196   	fcall	_Buzzer_Initialization
  4255                           
  4256                           ;Main_B1.c: 14: ;;
  4257                           ;Main_B1.c: 15: Temp_Initialization();
  4258  16F5  319B  232C  3196   	fcall	_Temp_Initialization
  4259                           
  4260                           ;Main_B1.c: 16: Load_Initialization();
  4261  16F8  319B  2323  3196   	fcall	_Load_Initialization
  4262                           
  4263                           ;Main_B1.c: 17: ;;
  4264                           ;Main_B1.c: 18: DelayOff_Initialization();
  4265  16FB  319B  2332  3196   	fcall	_DelayOff_Initialization
  4266                           
  4267                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4268  16FE  319B  2375  3196   	fcall	_DimmerLights_Initialization
  4269                           
  4270                           ;Main_B1.c: 21: ;;
  4271                           ;Main_B1.c: 22: ;;
  4272                           ;Main_B1.c: 23: ;;
  4273                           ;Main_B1.c: 24: Switch_Initialization();
  4274  1701  319B  2356  3196   	fcall	_Switch_Initialization
  4275                           
  4276                           ;Main_B1.c: 25: RF_Initialization();
  4277  1704  319B  2326  3196   	fcall	_RF_Initialization
  4278                           
  4279                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4280  1707  319E  265A  3196   	fcall	_CC2500_PowerOnInitial
  4281  170A                     l10187:	
  4282                           ;Main_B1.c: 27: ;;
  4283                           ;Main_B1.c: 28: ;;
  4284                           ;Main_B1.c: 30: while (1) {
  4285                           
  4286                           
  4287                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4288  170A  0021               	movlb	1	; select bank1
  4289  170B  1C3F               	btfss	_myMain^(0+128),0
  4290  170C  2F15               	goto	l10191
  4291                           
  4292                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4293  170D  3005               	movlw	5
  4294  170E  318B  2366  3196   	fcall	_getLoad_AD
  4295                           
  4296                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4297  1711  3009               	movlw	9
  4298  1712  3188  2096  3196   	fcall	_getTemp_AD
  4299  1715                     l10191:	
  4300                           
  4301                           ;Main_B1.c: 57: }
  4302                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4303  1715  0022               	movlb	2	; select bank2
  4304  1716  1C25               	btfss	_Timer1^(0+256),0
  4305  1717  2F0A               	goto	l10187
  4306                           
  4307                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4308  1718  1025               	bcf	_Timer1^(0+256),0
  4309                           
  4310                           ;Main_B1.c: 96: my_MainTimer();
  4311  1719  3193  2333  3196   	fcall	_my_MainTimer
  4312                           
  4313                           ;Main_B1.c: 97: WDT_Main();
  4314  171C  319D  2555  3196   	fcall	_WDT_Main
  4315                           
  4316                           ;Main_B1.c: 98: ;;
  4317                           ;Main_B1.c: 99: ;;
  4318                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4319  171F  0021               	movlb	1	; select bank1
  4320  1720  1C3F               	btfss	_myMain^(0+128),0
  4321  1721  2F0A               	goto	l10187
  4322                           
  4323                           ;Main_B1.c: 101: Flash_Memory_Main();
  4324  1722  3193  23E5  3196   	fcall	_Flash_Memory_Main
  4325                           
  4326                           ;Main_B1.c: 103: LED_Main();
  4327  1725  319B  233E  3196   	fcall	_LED_Main
  4328                           
  4329                           ;Main_B1.c: 104: Buzzer_Main();
  4330  1728  3194  24AE  3196   	fcall	_Buzzer_Main
  4331                           
  4332                           ;Main_B1.c: 106: ;;
  4333                           ;Main_B1.c: 107: Temp_Main();
  4334  172B  319B  232F  3196   	fcall	_Temp_Main
  4335                           
  4336                           ;Main_B1.c: 108: Load_Main();
  4337  172E  3180  2053  3196   	fcall	_Load_Main
  4338                           
  4339                           ;Main_B1.c: 109: ;;
  4340                           ;Main_B1.c: 111: ;;
  4341                           ;Main_B1.c: 112: DimmerLights_Main();
  4342  1731  319F  27C0  3196   	fcall	_DimmerLights_Main
  4343                           
  4344                           ;Main_B1.c: 113: Switch_Main();
  4345  1734  319B  239F  3196   	fcall	_Switch_Main
  4346                           
  4347                           ;Main_B1.c: 114: ;;
  4348                           ;Main_B1.c: 115: ;;
  4349                           ;Main_B1.c: 117: RF_Main();
  4350  1737  319B  2329  3196   	fcall	_RF_Main
  4351                           
  4352                           ;Main_B1.c: 118: DelayOff_Main();
  4353  173A  319B  2336  3196   	fcall	_DelayOff_Main
  4354                           
  4355                           ;Main_B1.c: 119: ;;
  4356                           ;Main_B1.c: 120: ;;
  4357                           ;Main_B1.c: 121: Exception_Main();
  4358  173D  3185  252B  3196   	fcall	_Exception_Main
  4359  1740  2F0A               	goto	l10187
  4360  1741                     __end_of_main:	
  4361                           ;Main_B1.c: 128: }
  4362                           ;Main_B1.c: 129: }
  4363                           ;Main_B1.c: 163: }
  4364                           ;Main_B1.c: 164: return (0);
  4365                           ;	Return value of _main is never used
  4366                           
  4367                           
  4368                           	psect	text1
  4369  1333                     __ptext1:	
  4370 ;; *************** function _my_MainTimer *****************
  4371 ;; Defined at:
  4372 ;;		line 185 in file "../src/Main_B1.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;		None               void
  4379 ;; Registers used:
  4380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;Total ram usage:        1 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    5
  4393 ;; This function calls:
  4394 ;;		_setBuz
  4395 ;; This function is called by:
  4396 ;;		_main
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _my_MainTimer
  4402  1333                     _my_MainTimer:	
  4403                           
  4404                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4408  1333  0021               	movlb	1	; select bank1
  4409  1334  183F               	btfsc	_myMain^(0+128),0
  4410  1335  2B4B               	goto	l9873
  4411                           
  4412                           ;Main_B1.c: 188: myMain.PowerCount++;
  4413  1336  3001               	movlw	1
  4414  1337  00F9               	movwf	??_my_MainTimer
  4415  1338  0879               	movf	??_my_MainTimer,w
  4416  1339  07C0               	addwf	(_myMain^(0+128)+1),f
  4417                           
  4418                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4419  133A  0840               	movf	(_myMain^(0+128)+1),w
  4420  133B  3A4B               	xorlw	75
  4421  133C  1D03               	skipz
  4422  133D  0008               	return
  4423                           
  4424                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4425  133E  01C0               	clrf	(_myMain^(0+128)+1)
  4426                           
  4427                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4428  133F  143F               	bsf	_myMain^(0+128),0
  4429                           
  4430                           ;Main_B1.c: 196: setBuz(3, 50);
  4431  1340  3032               	movlw	50
  4432  1341  0020               	movlb	0	; select bank0
  4433  1342  00A4               	movwf	setBuz@time
  4434  1343  3000               	movlw	0
  4435  1344  00A5               	movwf	setBuz@time+1
  4436  1345  3003               	movlw	3
  4437  1346  3195  253E         	fcall	_setBuz
  4438                           
  4439                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4440  1348  0021               	movlb	1	; select bank1
  4441  1349  163F               	bsf	_myMain^(0+128),4
  4442                           
  4443                           ;Main_B1.c: 206: }
  4444                           ;Main_B1.c: 207: } else {
  4445  134A  0008               	return
  4446  134B                     l9873:	
  4447                           
  4448                           ;Main_B1.c: 208: myMain.PowerCount++;
  4449  134B  3001               	movlw	1
  4450  134C  00F9               	movwf	??_my_MainTimer
  4451  134D  0879               	movf	??_my_MainTimer,w
  4452  134E  07C0               	addwf	(_myMain^(0+128)+1),f
  4453                           
  4454                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4455  134F  0840               	movf	(_myMain^(0+128)+1),w
  4456  1350  3A32               	xorlw	50
  4457  1351  1903               	btfsc	3,2
  4458                           
  4459                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4460  1352  01C0               	clrf	(_myMain^(0+128)+1)
  4461                           
  4462                           ;Main_B1.c: 232: }
  4463                           ;Main_B1.c: 234: myMain.Count1++;
  4464  1353  3001               	movlw	1
  4465  1354  07C3               	addwf	(_myMain^(0+128)+4),f
  4466  1355  3000               	movlw	0
  4467  1356  3DC4               	addwfc	((_myMain+1)^(0+128)+4),f
  4468                           
  4469                           ;Main_B1.c: 235: if (myMain.Count1 == (1000 / 20)) {
  4470  1357  3004               	movlw	4
  4471  1358  3EBF               	addlw	_myMain& (0+255)
  4472  1359  0086               	movwf	6
  4473  135A  0187               	clrf	7
  4474  135B  3F40               	moviw [0]fsr1
  4475  135C  3A32               	xorlw	50
  4476  135D  1D03               	skipz
  4477  135E  2B61               	goto	u10655
  4478  135F  3F41               	moviw [1]fsr1
  4479  1360  3A00               	xorlw	0
  4480  1361                     u10655:	
  4481  1361  1D03               	skipz
  4482  1362  0008               	return
  4483                           
  4484                           ;Main_B1.c: 236: myMain.Count1 = 0;
  4485  1363  01C3               	clrf	(_myMain^(0+128)+4)
  4486  1364  01C4               	clrf	((_myMain+1)^(0+128)+4)
  4487                           
  4488                           ;Main_B1.c: 248: if (myMain.Flag) {
  4489  1365  1CBF               	btfss	_myMain^(0+128),1
  4490  1366  2B69               	goto	l1500
  4491                           
  4492                           ;Main_B1.c: 249: myMain.Flag = 0;
  4493  1367  10BF               	bcf	_myMain^(0+128),1
  4494                           
  4495                           ;Main_B1.c: 258: } else {
  4496  1368  0008               	return
  4497  1369                     l1500:	
  4498                           
  4499                           ;Main_B1.c: 259: myMain.Flag = 1;
  4500  1369  14BF               	bsf	_myMain^(0+128),1
  4501  136A  0008               	return
  4502  136B                     __end_of_my_MainTimer:	
  4503                           
  4504                           	psect	text2
  4505  1CAB                     __ptext2:	
  4506 ;; *************** function _myMain_Initialization *****************
  4507 ;; Defined at:
  4508 ;;		line 170 in file "../src/Main_B1.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;		None               void
  4515 ;; Registers used:
  4516 ;;		wreg, fsr1l, fsr1h
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;Total ram usage:        1 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    3
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function _myMain_Initialization
  4538  1CAB                     _myMain_Initialization:	
  4539                           
  4540                           ;Main_B1.c: 173: product = &_product;
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4544  1CAB  3020               	movlw	__product& (0+255)
  4545  1CAC  00F2               	movwf	??_myMain_Initialization
  4546  1CAD  0872               	movf	??_myMain_Initialization,w
  4547  1CAE  00FB               	movwf	_product
  4548                           
  4549                           ;Main_B1.c: 174: product->Data[20] = 209;
  4550  1CAF  30D1               	movlw	209
  4551  1CB0  00F2               	movwf	??_myMain_Initialization
  4552  1CB1  087B               	movf	_product,w
  4553  1CB2  3E14               	addlw	20
  4554  1CB3  0086               	movwf	6
  4555  1CB4  3002               	movlw	2	; select bank4/5
  4556  1CB5  0087               	movwf	7
  4557  1CB6  0872               	movf	??_myMain_Initialization,w
  4558  1CB7  0081               	movwf	1
  4559  1CB8  0008               	return
  4560  1CB9                     __end_of_myMain_Initialization:	
  4561                           
  4562                           	psect	text3
  4563  0896                     __ptext3:	
  4564 ;; *************** function _getTemp_AD *****************
  4565 ;; Defined at:
  4566 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  channel         1    wreg     unsigned char 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  channel         1    7[COMMON] unsigned char 
  4571 ;;  ADRES           2    8[COMMON] unsigned int 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;		None               void
  4574 ;; Registers used:
  4575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;Total ram usage:        4 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    5
  4588 ;; This function calls:
  4589 ;;		_getAD
  4590 ;; This function is called by:
  4591 ;;		_main
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           
  4596                           ;psect for function _getTemp_AD
  4597  0896                     _getTemp_AD:	
  4598                           
  4599                           ;incstack = 0
  4600                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4601                           ;getTemp_AD@channel stored from wreg
  4602  0896  00F7               	movwf	getTemp_AD@channel
  4603                           
  4604                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4605  0897  01F8               	clrf	getTemp_AD@ADRES
  4606  0898  01F9               	clrf	getTemp_AD@ADRES+1
  4607                           
  4608                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4609  0899  0021               	movlb	1	; select bank1
  4610  089A  1D62               	btfss	_Temp^(0+128),2
  4611  089B  0008               	return
  4612                           
  4613                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4614  089C  30F0               	movlw	240
  4615  089D  00F6               	movwf	??_getTemp_AD
  4616  089E  0876               	movf	??_getTemp_AD,w
  4617  089F  00F2               	movwf	getAD@adcon1
  4618  08A0  0877               	movf	getTemp_AD@channel,w
  4619  08A1  319F  2716  3188   	fcall	_getAD
  4620  08A4  0873               	movf	?_getAD+1,w
  4621  08A5  01F9               	clrf	getTemp_AD@ADRES+1
  4622  08A6  07F9               	addwf	getTemp_AD@ADRES+1,f
  4623  08A7  0872               	movf	?_getAD,w
  4624  08A8  01F8               	clrf	getTemp_AD@ADRES
  4625  08A9  07F8               	addwf	getTemp_AD@ADRES,f
  4626                           
  4627                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4628  08AA  0879               	movf	getTemp_AD@ADRES+1,w
  4629  08AB  0478               	iorwf	getTemp_AD@ADRES,w
  4630  08AC  1903               	skipnz
  4631  08AD  0008               	return
  4632                           
  4633                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4634  08AE  0879               	movf	getTemp_AD@ADRES+1,w
  4635  08AF  0021               	movlb	1	; select bank1
  4636  08B0  0267               	subwf	((_Temp+1)^(0+128)+4),w
  4637  08B1  1D03               	skipz
  4638  08B2  28B5               	goto	u8145
  4639  08B3  0878               	movf	getTemp_AD@ADRES,w
  4640  08B4  0266               	subwf	(_Temp^(0+128)+4),w
  4641  08B5                     u8145:	
  4642  08B5  1803               	skipnc
  4643  08B6  28BE               	goto	l8205
  4644                           
  4645                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4646  08B7  0879               	movf	getTemp_AD@ADRES+1,w
  4647  08B8  01E7               	clrf	((_Temp+1)^(0+128)+4)
  4648  08B9  07E7               	addwf	((_Temp+1)^(0+128)+4),f
  4649  08BA  0878               	movf	getTemp_AD@ADRES,w
  4650  08BB  01E6               	clrf	(_Temp^(0+128)+4)
  4651  08BC  07E6               	addwf	(_Temp^(0+128)+4),f
  4652                           
  4653                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4654  08BD  0008               	return
  4655  08BE                     l8205:	
  4656  08BE  0879               	movf	getTemp_AD@ADRES+1,w
  4657  08BF  0269               	subwf	((_Temp+1)^(0+128)+6),w
  4658  08C0  1D03               	skipz
  4659  08C1  28C4               	goto	u8155
  4660  08C2  0878               	movf	getTemp_AD@ADRES,w
  4661  08C3  0268               	subwf	(_Temp^(0+128)+6),w
  4662  08C4                     u8155:	
  4663  08C4  1803               	skipnc
  4664  08C5  28CD               	goto	l8209
  4665                           
  4666                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4667  08C6  0879               	movf	getTemp_AD@ADRES+1,w
  4668  08C7  01E9               	clrf	((_Temp+1)^(0+128)+6)
  4669  08C8  07E9               	addwf	((_Temp+1)^(0+128)+6),f
  4670  08C9  0878               	movf	getTemp_AD@ADRES,w
  4671  08CA  01E8               	clrf	(_Temp^(0+128)+6)
  4672  08CB  07E8               	addwf	(_Temp^(0+128)+6),f
  4673                           
  4674                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4675  08CC  0008               	return
  4676  08CD                     l8209:	
  4677  08CD  0879               	movf	getTemp_AD@ADRES+1,w
  4678  08CE  026B               	subwf	((_Temp+1)^(0+128)+8),w
  4679  08CF  1D03               	skipz
  4680  08D0  28D3               	goto	u8165
  4681  08D1  0878               	movf	getTemp_AD@ADRES,w
  4682  08D2  026A               	subwf	(_Temp^(0+128)+8),w
  4683  08D3                     u8165:	
  4684  08D3  1803               	skipnc
  4685  08D4  28DC               	goto	l8213
  4686                           
  4687                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4688  08D5  0879               	movf	getTemp_AD@ADRES+1,w
  4689  08D6  01EB               	clrf	((_Temp+1)^(0+128)+8)
  4690  08D7  07EB               	addwf	((_Temp+1)^(0+128)+8),f
  4691  08D8  0878               	movf	getTemp_AD@ADRES,w
  4692  08D9  01EA               	clrf	(_Temp^(0+128)+8)
  4693  08DA  07EA               	addwf	(_Temp^(0+128)+8),f
  4694                           
  4695                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4696  08DB  0008               	return
  4697  08DC                     l8213:	
  4698  08DC  0879               	movf	getTemp_AD@ADRES+1,w
  4699  08DD  026D               	subwf	((_Temp+1)^(0+128)+10),w
  4700  08DE  1D03               	skipz
  4701  08DF  28E2               	goto	u8175
  4702  08E0  0878               	movf	getTemp_AD@ADRES,w
  4703  08E1  026C               	subwf	(_Temp^(0+128)+10),w
  4704  08E2                     u8175:	
  4705  08E2  1803               	skipnc
  4706  08E3  28EB               	goto	l8217
  4707                           
  4708                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4709  08E4  0879               	movf	getTemp_AD@ADRES+1,w
  4710  08E5  01ED               	clrf	((_Temp+1)^(0+128)+10)
  4711  08E6  07ED               	addwf	((_Temp+1)^(0+128)+10),f
  4712  08E7  0878               	movf	getTemp_AD@ADRES,w
  4713  08E8  01EC               	clrf	(_Temp^(0+128)+10)
  4714  08E9  07EC               	addwf	(_Temp^(0+128)+10),f
  4715                           
  4716                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4717  08EA  0008               	return
  4718  08EB                     l8217:	
  4719  08EB  0879               	movf	getTemp_AD@ADRES+1,w
  4720  08EC  026F               	subwf	((_Temp+1)^(0+128)+12),w
  4721  08ED  1D03               	skipz
  4722  08EE  28F1               	goto	u8185
  4723  08EF  0878               	movf	getTemp_AD@ADRES,w
  4724  08F0  026E               	subwf	(_Temp^(0+128)+12),w
  4725  08F1                     u8185:	
  4726  08F1  1803               	skipnc
  4727  08F2  0008               	return
  4728                           
  4729                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4730  08F3  0879               	movf	getTemp_AD@ADRES+1,w
  4731  08F4  01EF               	clrf	((_Temp+1)^(0+128)+12)
  4732  08F5  07EF               	addwf	((_Temp+1)^(0+128)+12),f
  4733  08F6  0878               	movf	getTemp_AD@ADRES,w
  4734  08F7  01EE               	clrf	(_Temp^(0+128)+12)
  4735  08F8  07EE               	addwf	(_Temp^(0+128)+12),f
  4736  08F9  0008               	return
  4737  08FA                     __end_of_getTemp_AD:	
  4738                           
  4739                           	psect	text4
  4740  0B66                     __ptext4:	
  4741 ;; *************** function _getLoad_AD *****************
  4742 ;; Defined at:
  4743 ;;		line 16 in file "../src/OverLoad_B1.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  channel         1    wreg     unsigned char 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  channel         1    0[BANK0 ] unsigned char 
  4748 ;;  ADRES           2    3[BANK0 ] unsigned int 
  4749 ;;  i               1    5[BANK0 ] unsigned char 
  4750 ;;  j               1    2[BANK0 ] unsigned char 
  4751 ;;  k               1    1[BANK0 ] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;		None               void
  4754 ;; Registers used:
  4755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;Total ram usage:        8 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    5
  4768 ;; This function calls:
  4769 ;;		_getAD
  4770 ;; This function is called by:
  4771 ;;		_main
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           
  4776                           ;psect for function _getLoad_AD
  4777  0B66                     _getLoad_AD:	
  4778                           
  4779                           ;incstack = 0
  4780                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4781                           ;getLoad_AD@channel stored from wreg
  4782  0B66  0020               	movlb	0	; select bank0
  4783  0B67  00A0               	movwf	getLoad_AD@channel
  4784                           
  4785                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4786  0B68  01A5               	clrf	getLoad_AD@i
  4787  0B69  01A2               	clrf	getLoad_AD@j
  4788  0B6A  01A1               	clrf	getLoad_AD@k
  4789                           
  4790                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4791  0B6B  01A3               	clrf	getLoad_AD@ADRES
  4792  0B6C  01A4               	clrf	getLoad_AD@ADRES+1
  4793                           
  4794                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4795  0B6D  0022               	movlb	2	; select bank2
  4796  0B6E  1E30               	btfss	_Load^(0+256),4
  4797  0B6F  0008               	return
  4798                           
  4799                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4800  0B70  30F3               	movlw	243
  4801  0B71  00F6               	movwf	??_getLoad_AD
  4802  0B72  0876               	movf	??_getLoad_AD,w
  4803  0B73  00F2               	movwf	getAD@adcon1
  4804  0B74  0020               	movlb	0	; select bank0
  4805  0B75  0820               	movf	getLoad_AD@channel,w
  4806  0B76  319F  2716  318B   	fcall	_getAD
  4807  0B79  0873               	movf	?_getAD+1,w
  4808  0B7A  0020               	movlb	0	; select bank0
  4809  0B7B  01A4               	clrf	getLoad_AD@ADRES+1
  4810  0B7C  07A4               	addwf	getLoad_AD@ADRES+1,f
  4811  0B7D  0872               	movf	?_getAD,w
  4812  0B7E  01A3               	clrf	getLoad_AD@ADRES
  4813  0B7F  07A3               	addwf	getLoad_AD@ADRES,f
  4814                           
  4815                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4816  0B80  01A5               	clrf	getLoad_AD@i
  4817  0B81  3004               	movlw	4
  4818  0B82  0225               	subwf	getLoad_AD@i,w
  4819  0B83  1803               	btfsc	3,0
  4820  0B84  2BAC               	goto	l8173
  4821  0B85                     l8161:	
  4822                           
  4823                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4824  0B85  3525               	lslf	getLoad_AD@i,w
  4825  0B86  3E3B               	addlw	(_Load+11)& (0+255)
  4826  0B87  0086               	movwf	6
  4827  0B88  3001               	movlw	1	; select bank2/3
  4828  0B89  0087               	movwf	7
  4829  0B8A  3F40               	moviw [0]fsr1
  4830  0B8B  00F6               	movwf	??_getLoad_AD
  4831  0B8C  3F41               	moviw [1]fsr1
  4832  0B8D  00F7               	movwf	??_getLoad_AD+1
  4833  0B8E  0824               	movf	getLoad_AD@ADRES+1,w
  4834  0B8F  0277               	subwf	??_getLoad_AD+1,w
  4835  0B90  1D03               	skipz
  4836  0B91  2B94               	goto	u8045
  4837  0B92  0823               	movf	getLoad_AD@ADRES,w
  4838  0B93  0276               	subwf	??_getLoad_AD,w
  4839  0B94                     u8045:	
  4840  0B94  1803               	skipnc
  4841  0B95  2BA4               	goto	l8169
  4842  0B96  08A2               	movf	getLoad_AD@j,f
  4843  0B97  1D03               	skipz
  4844  0B98  2BA4               	goto	l8169
  4845                           
  4846                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4847  0B99  3525               	lslf	getLoad_AD@i,w
  4848  0B9A  3E3B               	addlw	(_Load+11)& (0+255)
  4849  0B9B  0086               	movwf	6
  4850  0B9C  3001               	movlw	1	; select bank2/3
  4851  0B9D  0087               	movwf	7
  4852  0B9E  0823               	movf	getLoad_AD@ADRES,w
  4853  0B9F  3FC0               	movwi [0]fsr1
  4854  0BA0  0824               	movf	getLoad_AD@ADRES+1,w
  4855  0BA1  3FC1               	movwi [1]fsr1
  4856                           
  4857                           ;OverLoad_B1.c: 25: j = 1;
  4858  0BA2  01A2               	clrf	getLoad_AD@j
  4859  0BA3  0AA2               	incf	getLoad_AD@j,f
  4860  0BA4                     l8169:	
  4861  0BA4  3001               	movlw	1
  4862  0BA5  00F6               	movwf	??_getLoad_AD
  4863  0BA6  0876               	movf	??_getLoad_AD,w
  4864  0BA7  07A5               	addwf	getLoad_AD@i,f
  4865  0BA8  3004               	movlw	4
  4866  0BA9  0225               	subwf	getLoad_AD@i,w
  4867  0BAA  1C03               	skipc
  4868  0BAB  2B85               	goto	l8161
  4869  0BAC                     l8173:	
  4870                           
  4871                           ;OverLoad_B1.c: 26: }
  4872                           ;OverLoad_B1.c: 27: }
  4873                           ;OverLoad_B1.c: 28: if (j == 0) {
  4874  0BAC  08A2               	movf	getLoad_AD@j,f
  4875  0BAD  1D03               	skipz
  4876  0BAE  0008               	return
  4877                           
  4878                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4879  0BAF  01A5               	clrf	getLoad_AD@i
  4880  0BB0                     L1:	
  4881  0BB0  3004               	movlw	4
  4882  0BB1  0225               	subwf	getLoad_AD@i,w
  4883  0BB2  1803               	btfsc	3,0
  4884  0BB3  0008               	return
  4885                           
  4886                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4887  0BB4  3525               	lslf	getLoad_AD@i,w
  4888  0BB5  3E45               	addlw	(_Load+21)& (0+255)
  4889  0BB6  0086               	movwf	6
  4890  0BB7  3001               	movlw	1	; select bank2/3
  4891  0BB8  0087               	movwf	7
  4892  0BB9  3F40               	moviw [0]fsr1
  4893  0BBA  00F6               	movwf	??_getLoad_AD
  4894  0BBB  3F41               	moviw [1]fsr1
  4895  0BBC  00F7               	movwf	??_getLoad_AD+1
  4896  0BBD  0877               	movf	??_getLoad_AD+1,w
  4897  0BBE  0224               	subwf	getLoad_AD@ADRES+1,w
  4898  0BBF  1D03               	skipz
  4899  0BC0  2BC3               	goto	u8095
  4900  0BC1  0876               	movf	??_getLoad_AD,w
  4901  0BC2  0223               	subwf	getLoad_AD@ADRES,w
  4902  0BC3                     u8095:	
  4903  0BC3  1803               	skipnc
  4904  0BC4  2BD3               	goto	l8189
  4905  0BC5  08A1               	movf	getLoad_AD@k,f
  4906  0BC6  1D03               	skipz
  4907  0BC7  2BD3               	goto	l8189
  4908                           
  4909                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4910  0BC8  3525               	lslf	getLoad_AD@i,w
  4911  0BC9  3E45               	addlw	(_Load+21)& (0+255)
  4912  0BCA  0086               	movwf	6
  4913  0BCB  3001               	movlw	1	; select bank2/3
  4914  0BCC  0087               	movwf	7
  4915  0BCD  0823               	movf	getLoad_AD@ADRES,w
  4916  0BCE  3FC0               	movwi [0]fsr1
  4917  0BCF  0824               	movf	getLoad_AD@ADRES+1,w
  4918  0BD0  3FC1               	movwi [1]fsr1
  4919                           
  4920                           ;OverLoad_B1.c: 32: k = 1;
  4921  0BD1  01A1               	clrf	getLoad_AD@k
  4922  0BD2  0AA1               	incf	getLoad_AD@k,f
  4923  0BD3                     l8189:	
  4924  0BD3  3001               	movlw	1
  4925  0BD4  00F6               	movwf	??_getLoad_AD
  4926  0BD5  0876               	movf	??_getLoad_AD,w
  4927  0BD6  07A5               	addwf	getLoad_AD@i,f
  4928  0BD7  2BB0               	goto	L1
  4929  0BD8                     __end_of_getLoad_AD:	
  4930                           
  4931                           	psect	text5
  4932  1F16                     __ptext5:	
  4933 ;; *************** function _getAD *****************
  4934 ;; Defined at:
  4935 ;;		line 462 in file "../src/MCU_B1.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  adcon0          1    wreg     unsigned char 
  4938 ;;  adcon1          1    2[COMMON] unsigned char 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  adcon0          1    5[COMMON] unsigned char 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  2    2[COMMON] int 
  4943 ;; Registers used:
  4944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:        4 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    4
  4957 ;; This function calls:
  4958 ;;		_Timeout_Counter
  4959 ;;		_set_TimeoutCleared
  4960 ;; This function is called by:
  4961 ;;		_getLoad_AD
  4962 ;;		_getTemp_AD
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _getAD
  4968  1F16                     _getAD:	
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4972                           ;getAD@adcon0 stored from wreg
  4973  1F16  00F5               	movwf	getAD@adcon0
  4974                           
  4975                           ;MCU_B1.c: 463: ADCON0 = adcon0;
  4976  1F17  0875               	movf	getAD@adcon0,w
  4977  1F18  0021               	movlb	1	; select bank1
  4978  1F19  009D               	movwf	29	;volatile
  4979                           
  4980                           ;MCU_B1.c: 464: ADCON1 = adcon1;
  4981  1F1A  0872               	movf	getAD@adcon1,w
  4982  1F1B  009E               	movwf	30	;volatile
  4983                           
  4984                           ;MCU_B1.c: 465: GO_nDONE = 1;
  4985  1F1C  149D               	bsf	29,1	;volatile
  4986                           
  4987                           ;MCU_B1.c: 466: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4988  1F1D  2F21               	goto	l7637
  4989  1F1E                     l7635:	
  4990                           
  4991                           ;MCU_B1.c: 467: Timeout_Counter();
  4992  1F1E  319E  266F  319F   	fcall	_Timeout_Counter
  4993  1F21                     l7637:	
  4994  1F21  0021               	movlb	1	; select bank1
  4995  1F22  1C9D               	btfss	29,1	;volatile
  4996  1F23  2F26               	goto	l7641
  4997  1F24  1D49               	btfss	(_myMain^(0+128)+10),2
  4998  1F25  2F1E               	goto	l7635
  4999  1F26                     l7641:	
  5000                           
  5001                           ;MCU_B1.c: 468: };
  5002                           ;MCU_B1.c: 469: set_TimeoutCleared();
  5003  1F26  319B  2364         	fcall	_set_TimeoutCleared
  5004                           
  5005                           ;MCU_B1.c: 470: return ((ADRESH*256)+ADRESL);
  5006  1F28  0021               	movlb	1	; select bank1
  5007  1F29  081C               	movf	28,w	;volatile
  5008  1F2A  01F3               	clrf	?_getAD+1
  5009  1F2B  07F3               	addwf	?_getAD+1,f
  5010  1F2C  081B               	movf	27,w	;volatile
  5011  1F2D  01F2               	clrf	?_getAD
  5012  1F2E  07F2               	addwf	?_getAD,f
  5013  1F2F  0008               	return
  5014  1F30                     __end_of_getAD:	
  5015                           
  5016                           	psect	text6
  5017  1D55                     __ptext6:	
  5018 ;; *************** function _WDT_Main *****************
  5019 ;; Defined at:
  5020 ;;		line 1120 in file "../src/MCU_B1.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;		None
  5025 ;; Return value:  Size  Location     Type
  5026 ;;		None               void
  5027 ;; Registers used:
  5028 ;;		wreg, status,2, status,0, pclath, cstack
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;Total ram usage:        1 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; Hardware stack levels required when called:    4
  5041 ;; This function calls:
  5042 ;;		_WDT_Clearing
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _WDT_Main
  5050  1D55                     _WDT_Main:	
  5051                           
  5052                           ;MCU_B1.c: 1121: if (WDT.Enable == 1) {
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5056  1D55  0022               	movlb	2	; select bank2
  5057  1D56  1C2A               	btfss	_WDT^(0+256),0
  5058  1D57  0008               	return
  5059                           
  5060                           ;MCU_B1.c: 1122: if (WDT.Timer-- > 0) {
  5061  1D58  3001               	movlw	1
  5062  1D59  02AB               	subwf	(_WDT^(0+256)+1),f
  5063  1D5A  082B               	movf	(_WDT^(0+256)+1),w
  5064  1D5B  3AFF               	xorlw	255
  5065  1D5C  1903               	skipnz
  5066  1D5D  0008               	return
  5067                           
  5068                           ;MCU_B1.c: 1123: WDT.Timer = 100;
  5069  1D5E  3064               	movlw	100
  5070  1D5F  00F2               	movwf	??_WDT_Main
  5071  1D60  0872               	movf	??_WDT_Main,w
  5072  1D61  00AB               	movwf	(_WDT^(0+256)+1)
  5073                           
  5074                           ;MCU_B1.c: 1124: WDT_Clearing();
  5075  1D62  3180  2002         	fcall	_WDT_Clearing
  5076  1D64  0008               	return
  5077  1D65                     __end_of_WDT_Main:	
  5078                           
  5079                           	psect	text7
  5080  0002                     __ptext7:	
  5081 ;; *************** function _WDT_Clearing *****************
  5082 ;; Defined at:
  5083 ;;		line 1130 in file "../src/MCU_B1.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;		None               void
  5090 ;; Registers used:
  5091 ;;		None
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;Total ram usage:        0 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    3
  5104 ;; This function calls:
  5105 ;;		Nothing
  5106 ;; This function is called by:
  5107 ;;		_WDT_Main
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           
  5112                           ;psect for function _WDT_Clearing
  5113  0002                     _WDT_Clearing:	
  5114                           
  5115                           ;incstack = 0
  5116                           ; Regs used in _WDT_Clearing: []
  5117  0002  0064               	clrwdt	;# 
  5118  0003  0008               	return
  5119  0004                     __end_of_WDT_Clearing:	
  5120                           
  5121                           	psect	text8
  5122  1B2F                     __ptext8:	
  5123 ;; *************** function _Temp_Main *****************
  5124 ;; Defined at:
  5125 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;		None               void
  5132 ;; Registers used:
  5133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    6
  5146 ;; This function calls:
  5147 ;;		_setTemp_Main
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _Temp_Main
  5155  1B2F                     _Temp_Main:	
  5156                           
  5157                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5161  1B2F  3184  245A         	fcall	_setTemp_Main
  5162  1B31  0008               	return
  5163  1B32                     __end_of_Temp_Main:	
  5164                           
  5165                           	psect	text9
  5166  045A                     __ptext9:	
  5167 ;; *************** function _setTemp_Main *****************
  5168 ;; Defined at:
  5169 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  AD              2   69[BANK0 ] int 
  5174 ;;  DangerValue     2   67[BANK0 ] unsigned int 
  5175 ;;  SafeValue       2   65[BANK0 ] unsigned int 
  5176 ;;  TempGO          1   64[BANK0 ] unsigned char 
  5177 ;;  error           1   63[BANK0 ] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;		None               void
  5180 ;; Registers used:
  5181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;Total ram usage:       10 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    5
  5194 ;; This function calls:
  5195 ;;		___lwdiv
  5196 ;;		_getMain_All_Error_Status
  5197 ;;		_getMain_All_LightsStatus
  5198 ;;		_setBuz
  5199 ;;		_setOverTemp_ADV_Restore
  5200 ;;		_setProductData
  5201 ;; This function is called by:
  5202 ;;		_Temp_Main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _setTemp_Main
  5208  045A                     _setTemp_Main:	
  5209                           
  5210                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5214  045A  3000               	movlw	0
  5215  045B  3191  21C6  3184   	fcall	_getMain_All_Error_Status
  5216  045E  0020               	movlb	0	; select bank0
  5217  045F  00DD               	movwf	??_setTemp_Main
  5218  0460  085D               	movf	??_setTemp_Main,w
  5219  0461  00DF               	movwf	setTemp_Main@error
  5220                           
  5221                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5222  0462  01E1               	clrf	setTemp_Main@SafeValue
  5223  0463  01E2               	clrf	setTemp_Main@SafeValue+1
  5224  0464  01E3               	clrf	setTemp_Main@DangerValue
  5225  0465  01E4               	clrf	setTemp_Main@DangerValue+1
  5226                           
  5227                           ;OverTemperature_B1.c: 75: int AD = 0;
  5228  0466  01E5               	clrf	setTemp_Main@AD
  5229  0467  01E6               	clrf	setTemp_Main@AD+1
  5230                           
  5231                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5232  0468  319B  23A6  3184   	fcall	_getMain_All_LightsStatus
  5233  046B  0020               	movlb	0	; select bank0
  5234  046C  00DD               	movwf	??_setTemp_Main
  5235  046D  085D               	movf	??_setTemp_Main,w
  5236  046E  00E0               	movwf	setTemp_Main@TempGO
  5237                           
  5238                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5239  046F  0021               	movlb	1	; select bank1
  5240  0470  1C62               	btfss	_Temp^(0+128),0
  5241  0471  2D27               	goto	l1853
  5242                           
  5243                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5244  0472  1962               	btfsc	_Temp^(0+128),2
  5245  0473  2C91               	goto	l9565
  5246                           
  5247                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5248  0474  0020               	movlb	0	; select bank0
  5249  0475  0860               	movf	setTemp_Main@TempGO,w
  5250  0476  3A01               	xorlw	1
  5251  0477  1D03               	skipz
  5252  0478  2C7C               	goto	l1859
  5253  0479  0021               	movlb	1	; select bank1
  5254  047A  1CE2               	btfss	_Temp^(0+128),1
  5255  047B  2C7F               	goto	l9557
  5256  047C                     l1859:	
  5257  047C  0021               	movlb	1	; select bank1
  5258  047D  1CE2               	btfss	_Temp^(0+128),1
  5259  047E  2C8E               	goto	l9563
  5260  047F                     l9557:	
  5261                           
  5262                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5263  047F  3001               	movlw	1
  5264  0480  07E3               	addwf	(_Temp^(0+128)+1),f
  5265  0481  3000               	movlw	0
  5266  0482  3DE4               	addwfc	((_Temp+1)^(0+128)+1),f
  5267                           
  5268                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5269  0483  3000               	movlw	0
  5270  0484  0264               	subwf	((_Temp+1)^(0+128)+1),w
  5271  0485  30FA               	movlw	250
  5272  0486  1903               	skipnz
  5273  0487  0263               	subwf	(_Temp^(0+128)+1),w
  5274  0488  1C03               	skipc
  5275  0489  0008               	return
  5276                           
  5277                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5278  048A  01E3               	clrf	(_Temp^(0+128)+1)
  5279  048B  01E4               	clrf	((_Temp+1)^(0+128)+1)
  5280                           
  5281                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5282  048C  1562               	bsf	_Temp^(0+128),2
  5283                           
  5284                           ;OverTemperature_B1.c: 92: }
  5285                           ;OverTemperature_B1.c: 93: } else {
  5286  048D  0008               	return
  5287  048E                     l9563:	
  5288                           
  5289                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5290  048E  01E3               	clrf	(_Temp^(0+128)+1)
  5291  048F  01E4               	clrf	((_Temp+1)^(0+128)+1)
  5292                           
  5293                           ;OverTemperature_B1.c: 95: }
  5294                           ;OverTemperature_B1.c: 96: } else {
  5295  0490  0008               	return
  5296  0491                     l9565:	
  5297                           
  5298                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5299  0491  3001               	movlw	1
  5300  0492  07E3               	addwf	(_Temp^(0+128)+1),f
  5301  0493  3000               	movlw	0
  5302  0494  3DE4               	addwfc	((_Temp+1)^(0+128)+1),f
  5303                           
  5304                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5305  0495  3000               	movlw	0
  5306  0496  0264               	subwf	((_Temp+1)^(0+128)+1),w
  5307  0497  3005               	movlw	5
  5308  0498  1903               	skipnz
  5309  0499  0263               	subwf	(_Temp^(0+128)+1),w
  5310  049A  1C03               	skipc
  5311  049B  0008               	return
  5312                           
  5313                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5314  049C  01E3               	clrf	(_Temp^(0+128)+1)
  5315  049D  01E4               	clrf	((_Temp+1)^(0+128)+1)
  5316                           
  5317                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5318  049E  3003               	movlw	3
  5319  049F  00F2               	movwf	___lwdiv@divisor
  5320  04A0  3000               	movlw	0
  5321  04A1  00F3               	movwf	___lwdiv@divisor+1
  5322  04A2  300A               	movlw	10
  5323  04A3  3EE2               	addlw	_Temp& (0+255)
  5324  04A4  0086               	movwf	6
  5325  04A5  0187               	clrf	7
  5326  04A6  3008               	movlw	8
  5327  04A7  3EE2               	addlw	_Temp& (0+255)
  5328  04A8  0084               	movwf	4
  5329  04A9  0185               	clrf	5
  5330  04AA  3F00               	moviw [0]fsr0
  5331  04AB  0768               	addwf	(_Temp^(0+128)+6),w
  5332  04AC  0020               	movlb	0	; select bank0
  5333  04AD  00DD               	movwf	??_setTemp_Main
  5334  04AE  3F01               	moviw [1]fsr0
  5335  04AF  0021               	movlb	1	; select bank1
  5336  04B0  3D69               	addwfc	((_Temp+1)^(0+128)+6),w
  5337  04B1  0020               	movlb	0	; select bank0
  5338  04B2  00DE               	movwf	??_setTemp_Main+1
  5339  04B3  3F40               	moviw [0]fsr1
  5340  04B4  075D               	addwf	??_setTemp_Main,w
  5341  04B5  00F4               	movwf	___lwdiv@dividend
  5342  04B6  3F41               	moviw [1]fsr1
  5343  04B7  3D5E               	addwfc	??_setTemp_Main+1,w
  5344  04B8  00F5               	movwf	___lwdiv@dividend+1
  5345  04B9  3192  2257  3184   	fcall	___lwdiv
  5346  04BC  0873               	movf	?___lwdiv+1,w
  5347  04BD  0020               	movlb	0	; select bank0
  5348  04BE  01E6               	clrf	setTemp_Main@AD+1
  5349  04BF  07E6               	addwf	setTemp_Main@AD+1,f
  5350  04C0  0872               	movf	?___lwdiv,w
  5351  04C1  01E5               	clrf	setTemp_Main@AD
  5352  04C2  07E5               	addwf	setTemp_Main@AD,f
  5353                           
  5354                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5355  04C3  319E  26C9  3184   	fcall	_setOverTemp_ADV_Restore
  5356                           
  5357                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5358  04C6  0020               	movlb	0	; select bank0
  5359  04C7  0866               	movf	setTemp_Main@AD+1,w
  5360  04C8  3A80               	xorlw	128
  5361  04C9  00DD               	movwf	??_setTemp_Main
  5362  04CA  3080               	movlw	128
  5363  04CB  025D               	subwf	??_setTemp_Main,w
  5364  04CC  1D03               	skipz
  5365  04CD  2CD0               	goto	u10125
  5366  04CE  3001               	movlw	1
  5367  04CF  0265               	subwf	setTemp_Main@AD,w
  5368  04D0                     u10125:	
  5369  04D0  1C03               	skipc
  5370  04D1  0008               	return
  5371                           
  5372                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5373  04D2  0021               	movlb	1	; select bank1
  5374  04D3  1162               	bcf	_Temp^(0+128),2
  5375                           
  5376                           ;OverTemperature_B1.c: 123: SafeValue = 0x205;
  5377  04D4  3005               	movlw	5
  5378  04D5  0020               	movlb	0	; select bank0
  5379  04D6  00E1               	movwf	setTemp_Main@SafeValue
  5380  04D7  3002               	movlw	2
  5381  04D8  00E2               	movwf	setTemp_Main@SafeValue+1
  5382                           
  5383                           ;OverTemperature_B1.c: 124: DangerValue = 0x1ba;
  5384  04D9  30BA               	movlw	186
  5385  04DA  00E3               	movwf	setTemp_Main@DangerValue
  5386  04DB  3001               	movlw	1
  5387  04DC  00E4               	movwf	setTemp_Main@DangerValue+1
  5388                           
  5389                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5390  04DD  0021               	movlb	1	; select bank1
  5391  04DE  1CE2               	btfss	_Temp^(0+128),1
  5392  04DF  2CFE               	goto	l9595
  5393                           
  5394                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5395  04E0  0020               	movlb	0	; select bank0
  5396  04E1  0862               	movf	setTemp_Main@SafeValue+1,w
  5397  04E2  0266               	subwf	setTemp_Main@AD+1,w
  5398  04E3  1D03               	skipz
  5399  04E4  2CE7               	goto	u10145
  5400  04E5  0861               	movf	setTemp_Main@SafeValue,w
  5401  04E6  0265               	subwf	setTemp_Main@AD,w
  5402  04E7                     u10145:	
  5403  04E7  1C03               	skipc
  5404  04E8  2D13               	goto	l9605
  5405                           
  5406                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5407  04E9  3001               	movlw	1
  5408  04EA  00DD               	movwf	??_setTemp_Main
  5409  04EB  085D               	movf	??_setTemp_Main,w
  5410  04EC  0021               	movlb	1	; select bank1
  5411  04ED  07E5               	addwf	(_Temp^(0+128)+3),f
  5412                           
  5413                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5414  04EE  3003               	movlw	3
  5415  04EF  0265               	subwf	(_Temp^(0+128)+3),w
  5416  04F0  1C03               	skipc
  5417  04F1  2D15               	goto	l9607
  5418                           
  5419                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5420  04F2  01E5               	clrf	(_Temp^(0+128)+3)
  5421                           
  5422                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5423  04F3  10E2               	bcf	_Temp^(0+128),1
  5424                           
  5425                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5426  04F4  3064               	movlw	100
  5427  04F5  0020               	movlb	0	; select bank0
  5428  04F6  00A4               	movwf	setBuz@time
  5429  04F7  3000               	movlw	0
  5430  04F8  00A5               	movwf	setBuz@time+1
  5431  04F9  3002               	movlw	2
  5432  04FA  3195  253E  3184   	fcall	_setBuz
  5433                           
  5434                           ;OverTemperature_B1.c: 137: }
  5435                           ;OverTemperature_B1.c: 138: } else {
  5436  04FD  2D15               	goto	l9607
  5437  04FE                     l9595:	
  5438                           ;OverTemperature_B1.c: 140: }
  5439                           ;OverTemperature_B1.c: 141: } else {
  5440                           
  5441                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5442                           
  5443                           
  5444                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5445  04FE  0020               	movlb	0	; select bank0
  5446  04FF  0866               	movf	setTemp_Main@AD+1,w
  5447  0500  0264               	subwf	setTemp_Main@DangerValue+1,w
  5448  0501  1D03               	skipz
  5449  0502  2D05               	goto	u10165
  5450  0503  0865               	movf	setTemp_Main@AD,w
  5451  0504  0263               	subwf	setTemp_Main@DangerValue,w
  5452  0505                     u10165:	
  5453  0505  1C03               	skipc
  5454  0506  2D13               	goto	l9605
  5455                           
  5456                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5457  0507  3001               	movlw	1
  5458  0508  00DD               	movwf	??_setTemp_Main
  5459  0509  085D               	movf	??_setTemp_Main,w
  5460  050A  0021               	movlb	1	; select bank1
  5461  050B  07E5               	addwf	(_Temp^(0+128)+3),f
  5462                           
  5463                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5464  050C  3003               	movlw	3
  5465  050D  0265               	subwf	(_Temp^(0+128)+3),w
  5466  050E  1C03               	skipc
  5467  050F  2D15               	goto	l9607
  5468                           
  5469                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5470  0510  01E5               	clrf	(_Temp^(0+128)+3)
  5471                           
  5472                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5473  0511  14E2               	bsf	_Temp^(0+128),1
  5474                           
  5475                           ;OverTemperature_B1.c: 147: }
  5476                           ;OverTemperature_B1.c: 148: } else {
  5477  0512  2D15               	goto	l9607
  5478  0513                     l9605:	
  5479                           
  5480                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5481  0513  0021               	movlb	1	; select bank1
  5482  0514  01E5               	clrf	(_Temp^(0+128)+3)
  5483  0515                     l9607:	
  5484                           
  5485                           ;OverTemperature_B1.c: 150: }
  5486                           ;OverTemperature_B1.c: 151: }
  5487                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5488  0515  0020               	movlb	0	; select bank0
  5489  0516  0866               	movf	setTemp_Main@AD+1,w
  5490  0517  00DD               	movwf	??_setTemp_Main
  5491  0518  085D               	movf	??_setTemp_Main,w
  5492  0519  00DA               	movwf	setProductData@value
  5493  051A  3018               	movlw	24
  5494  051B  319C  243A  3184   	fcall	_setProductData
  5495                           
  5496                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5497  051E  0020               	movlb	0	; select bank0
  5498  051F  0865               	movf	setTemp_Main@AD,w
  5499  0520  00DD               	movwf	??_setTemp_Main
  5500  0521  085D               	movf	??_setTemp_Main,w
  5501  0522  00DA               	movwf	setProductData@value
  5502  0523  3019               	movlw	25
  5503  0524  319C  243A         	fcall	_setProductData
  5504                           
  5505                           ;OverTemperature_B1.c: 169: }
  5506                           ;OverTemperature_B1.c: 170: }
  5507                           ;OverTemperature_B1.c: 171: }
  5508                           ;OverTemperature_B1.c: 174: } else {
  5509  0526  0008               	return
  5510  0527                     l1853:	
  5511                           
  5512                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5513  0527  1C3F               	btfss	_myMain^(0+128),0
  5514  0528  0008               	return
  5515                           
  5516                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5517  0529  1462               	bsf	_Temp^(0+128),0
  5518  052A  0008               	return
  5519  052B                     __end_of_setTemp_Main:	
  5520                           
  5521                           	psect	text10
  5522  1EC9                     __ptext10:	
  5523 ;; *************** function _setOverTemp_ADV_Restore *****************
  5524 ;; Defined at:
  5525 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;		None
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  i               2    3[COMMON] int 
  5530 ;; Return value:  Size  Location     Type
  5531 ;;		None               void
  5532 ;; Registers used:
  5533 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;Total ram usage:        3 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    3
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_setTemp_Main
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function _setOverTemp_ADV_Restore
  5555  1EC9                     _setOverTemp_ADV_Restore:	
  5556                           
  5557                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5558                           
  5559                           ;incstack = 0
  5560                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5561  1EC9  01F3               	clrf	setOverTemp_ADV_Restore@i
  5562  1ECA  01F4               	clrf	setOverTemp_ADV_Restore@i+1
  5563  1ECB                     L2:	
  5564  1ECB  0874               	movf	setOverTemp_ADV_Restore@i+1,w
  5565  1ECC  3A80               	xorlw	128
  5566  1ECD  00F2               	movwf	??_setOverTemp_ADV_Restore
  5567  1ECE  3080               	movlw	128
  5568  1ECF  0272               	subwf	??_setOverTemp_ADV_Restore,w
  5569  1ED0  1D03               	skipz
  5570  1ED1  2ED4               	goto	u6355
  5571  1ED2  3005               	movlw	5
  5572  1ED3  0273               	subwf	setOverTemp_ADV_Restore@i,w
  5573  1ED4                     u6355:	
  5574  1ED4  1803               	btfsc	3,0
  5575  1ED5  0008               	return
  5576                           
  5577                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5578  1ED6  3573               	lslf	setOverTemp_ADV_Restore@i,w
  5579  1ED7  3EE6               	addlw	(_Temp+4)& (0+255)
  5580  1ED8  0086               	movwf	6
  5581  1ED9  0187               	clrf	7
  5582  1EDA  3000               	movlw	0
  5583  1EDB  3FC0               	movwi [0]fsr1
  5584  1EDC  3FC1               	movwi [1]fsr1
  5585  1EDD  3001               	movlw	1
  5586  1EDE  07F3               	addwf	setOverTemp_ADV_Restore@i,f
  5587  1EDF  3000               	movlw	0
  5588  1EE0  3DF4               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5589  1EE1  2ECB               	goto	L2
  5590  1EE2                     __end_of_setOverTemp_ADV_Restore:	
  5591                           
  5592                           	psect	text11
  5593  1B2C                     __ptext11:	
  5594 ;; *************** function _Temp_Initialization *****************
  5595 ;; Defined at:
  5596 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;		None
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;		None               void
  5603 ;; Registers used:
  5604 ;;		status,2, status,0, pclath, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;Total ram usage:        0 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    4
  5617 ;; This function calls:
  5618 ;;		_setTemp_Initialization
  5619 ;; This function is called by:
  5620 ;;		_main
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           
  5625                           ;psect for function _Temp_Initialization
  5626  1B2C                     _Temp_Initialization:	
  5627                           
  5628                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5629                           
  5630                           ;incstack = 0
  5631                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5632  1B2C  319B  231F         	fcall	_setTemp_Initialization
  5633  1B2E  0008               	return
  5634  1B2F                     __end_of_Temp_Initialization:	
  5635                           
  5636                           	psect	text12
  5637  1B1F                     __ptext12:	
  5638 ;; *************** function _setTemp_Initialization *****************
  5639 ;; Defined at:
  5640 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;		None               void
  5647 ;; Registers used:
  5648 ;;		None
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    3
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_Temp_Initialization
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _setTemp_Initialization
  5670  1B1F                     _setTemp_Initialization:	
  5671                           
  5672                           ;incstack = 0
  5673                           ; Regs used in _setTemp_Initialization: []
  5674  1B1F  0008               	return
  5675  1B20                     __end_of_setTemp_Initialization:	
  5676                           
  5677                           	psect	text13
  5678  1B9F                     __ptext13:	
  5679 ;; *************** function _Switch_Main *****************
  5680 ;; Defined at:
  5681 ;;		line 76 in file "../src/Switch_B1.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;		None               void
  5688 ;; Registers used:
  5689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;Total ram usage:        0 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    7
  5702 ;; This function calls:
  5703 ;;		_TouchPower
  5704 ;;		_setSw_Main
  5705 ;; This function is called by:
  5706 ;;		_main
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _Switch_Main
  5712  1B9F                     _Switch_Main:	
  5713                           
  5714                           ;Switch_B1.c: 79: setSw_Main(1);
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5718  1B9F  3001               	movlw	1
  5719  1BA0  3181  21F3  319B   	fcall	_setSw_Main
  5720                           
  5721                           ;Switch_B1.c: 91: TouchPower();
  5722  1BA3  319E  2684         	fcall	_TouchPower
  5723  1BA5  0008               	return
  5724  1BA6                     __end_of_Switch_Main:	
  5725                           
  5726                           	psect	text14
  5727  01F3                     __ptext14:	
  5728 ;; *************** function _setSw_Main *****************
  5729 ;; Defined at:
  5730 ;;		line 117 in file "../src/Switch_B1.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  sw              1    wreg     unsigned char 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  sw              1   11[BANK0 ] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;		None               void
  5737 ;; Registers used:
  5738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;Total ram usage:        3 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    6
  5751 ;; This function calls:
  5752 ;;		_SwPointSelect
  5753 ;;		_getMain_All_Error_Status
  5754 ;;		_getSw_KeyStatus
  5755 ;;		_setBuz
  5756 ;;		_setDimmerLights_DimmingOn
  5757 ;;		_setDimmerLights_SwOff
  5758 ;;		_setDimmerLights_SwOn
  5759 ;;		_setRF_Learn
  5760 ;; This function is called by:
  5761 ;;		_Switch_Main
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function _setSw_Main
  5767  01F3                     _setSw_Main:	
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5771                           ;setSw_Main@sw stored from wreg
  5772  01F3  0020               	movlb	0	; select bank0
  5773  01F4  00AB               	movwf	setSw_Main@sw
  5774                           
  5775                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5776  01F5  082B               	movf	setSw_Main@sw,w
  5777  01F6  319C  242F  3181   	fcall	_SwPointSelect
  5778                           
  5779                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5780  01F9  0020               	movlb	0	; select bank0
  5781  01FA  086D               	movf	_Sw,w
  5782  01FB  0086               	movwf	6
  5783  01FC  3001               	movlw	1	; select bank2/3
  5784  01FD  0087               	movwf	7
  5785  01FE  1C01               	btfss	1,0
  5786  01FF  2B5A               	goto	l2606
  5787                           
  5788                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5789  0200  3000               	movlw	0
  5790  0201  3191  21C6  3181   	fcall	_getMain_All_Error_Status
  5791  0204  3800               	iorlw	0
  5792  0205  1D03               	skipz
  5793  0206  2A22               	goto	l9701
  5794                           
  5795                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5796  0207  0020               	movlb	0	; select bank0
  5797  0208  0A6D               	incf	_Sw,w
  5798  0209  0086               	movwf	6
  5799  020A  3001               	movlw	1	; select bank2/3
  5800  020B  0087               	movwf	7
  5801  020C  1081               	bcf	1,1
  5802                           
  5803                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5804  020D  082B               	movf	setSw_Main@sw,w
  5805  020E  319D  2598  3181   	fcall	_getSw_KeyStatus
  5806  0211  3A01               	xorlw	1
  5807  0212  3000               	movlw	0
  5808  0213  1903               	skipnz
  5809  0214  3001               	movlw	1
  5810  0215  0020               	movlb	0	; select bank0
  5811  0216  00A9               	movwf	??_setSw_Main
  5812  0217  086D               	movf	_Sw,w
  5813  0218  0086               	movwf	6
  5814  0219  3001               	movlw	1	; select bank2/3
  5815  021A  0087               	movwf	7
  5816  021B  0DA9               	rlf	??_setSw_Main,f
  5817  021C  0801               	movf	1,w
  5818  021D  0629               	xorwf	??_setSw_Main,w
  5819  021E  39FD               	andlw	-3
  5820  021F  0629               	xorwf	??_setSw_Main,w
  5821  0220  0081               	movwf	1
  5822                           
  5823                           ;Switch_B1.c: 124: } else {
  5824  0221  2A38               	goto	l2608
  5825  0222                     l9701:	
  5826                           
  5827                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5828  0222  0020               	movlb	0	; select bank0
  5829  0223  0A6D               	incf	_Sw,w
  5830  0224  0086               	movwf	6
  5831  0225  3001               	movlw	1	; select bank2/3
  5832  0226  0087               	movwf	7
  5833  0227  1881               	btfsc	1,1
  5834  0228  2A38               	goto	l2608
  5835                           
  5836                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5837  0229  0A6D               	incf	_Sw,w
  5838  022A  0086               	movwf	6
  5839  022B  3001               	movlw	1	; select bank2/3
  5840  022C  0087               	movwf	7
  5841  022D  1481               	bsf	1,1
  5842                           
  5843                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5844  022E  086D               	movf	_Sw,w
  5845  022F  0086               	movwf	6
  5846  0230  3001               	movlw	1	; select bank2/3
  5847  0231  0087               	movwf	7
  5848  0232  1081               	bcf	1,1
  5849                           
  5850                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5851  0233  086D               	movf	_Sw,w
  5852  0234  0086               	movwf	6
  5853  0235  3001               	movlw	1	; select bank2/3
  5854  0236  0087               	movwf	7
  5855  0237  1501               	bsf	1,2
  5856  0238                     l2608:	
  5857                           
  5858                           ;Switch_B1.c: 130: }
  5859                           ;Switch_B1.c: 131: }
  5860                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5861  0238  086D               	movf	_Sw,w
  5862  0239  0086               	movwf	6
  5863  023A  3001               	movlw	1	; select bank2/3
  5864  023B  0087               	movwf	7
  5865  023C  1C81               	btfss	1,1
  5866  023D  2B07               	goto	l9751
  5867                           
  5868                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5869  023E  086D               	movf	_Sw,w
  5870  023F  0086               	movwf	6
  5871  0240  3001               	movlw	1	; select bank2/3
  5872  0241  0087               	movwf	7
  5873  0242  1901               	btfsc	1,2
  5874  0243  2A65               	goto	l9717
  5875                           
  5876                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5877  0244  3001               	movlw	1
  5878  0245  00A9               	movwf	??_setSw_Main
  5879  0246  086D               	movf	_Sw,w
  5880  0247  3E02               	addlw	2
  5881  0248  0086               	movwf	6
  5882  0249  3001               	movlw	1	; select bank2/3
  5883  024A  0087               	movwf	7
  5884  024B  0829               	movf	??_setSw_Main,w
  5885  024C  0781               	addwf	1,f
  5886                           
  5887                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  5888  024D  086D               	movf	_Sw,w
  5889  024E  3E02               	addlw	2
  5890  024F  0086               	movwf	6
  5891  0250  3001               	movlw	1	; select bank2/3
  5892  0251  0087               	movwf	7
  5893  0252  3005               	movlw	5
  5894  0253  0201               	subwf	1,w
  5895  0254  1C03               	skipc
  5896  0255  0008               	return
  5897                           
  5898                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5899  0256  086D               	movf	_Sw,w
  5900  0257  3E02               	addlw	2
  5901  0258  0086               	movwf	6
  5902  0259  3001               	movlw	1	; select bank2/3
  5903  025A  0087               	movwf	7
  5904  025B  0181               	clrf	1
  5905                           
  5906                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5907  025C  086D               	movf	_Sw,w
  5908  025D  0086               	movwf	6
  5909  025E  3001               	movlw	1	; select bank2/3
  5910  025F  0087               	movwf	7
  5911  0260  1501               	bsf	1,2
  5912                           
  5913                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5914  0261  082B               	movf	setSw_Main@sw,w
  5915  0262  3194  24F4         	fcall	_setDimmerLights_SwOn
  5916                           
  5917                           ;Switch_B1.c: 147: }
  5918                           ;Switch_B1.c: 148: } else {
  5919  0264  0008               	return
  5920  0265                     l9717:	
  5921                           
  5922                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5923  0265  0020               	movlb	0	; select bank0
  5924  0266  086D               	movf	_Sw,w
  5925  0267  0086               	movwf	6
  5926  0268  3001               	movlw	1	; select bank2/3
  5927  0269  0087               	movwf	7
  5928  026A  1981               	btfsc	1,3
  5929  026B  2A97               	goto	l9727
  5930                           
  5931                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5932  026C  086D               	movf	_Sw,w
  5933  026D  3E03               	addlw	3
  5934  026E  0086               	movwf	6
  5935  026F  3001               	movlw	1	; select bank2/3
  5936  0270  0087               	movwf	7
  5937  0271  3001               	movlw	1
  5938  0272  0781               	addwf	1,f
  5939  0273  3141               	addfsr 1,1
  5940  0274  1803               	skipnc
  5941  0275  0A81               	incf	1,f
  5942                           
  5943                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  5944  0276  086D               	movf	_Sw,w
  5945  0277  3E03               	addlw	3
  5946  0278  0086               	movwf	6
  5947  0279  3001               	movlw	1	; select bank2/3
  5948  027A  0087               	movwf	7
  5949  027B  3F40               	moviw [0]fsr1
  5950  027C  00A9               	movwf	??_setSw_Main
  5951  027D  3F41               	moviw [1]fsr1
  5952  027E  00AA               	movwf	??_setSw_Main+1
  5953  027F  3000               	movlw	0
  5954  0280  022A               	subwf	??_setSw_Main+1,w
  5955  0281  304B               	movlw	75
  5956  0282  1903               	skipnz
  5957  0283  0229               	subwf	??_setSw_Main,w
  5958  0284  1C03               	skipc
  5959  0285  0008               	return
  5960                           
  5961                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5962  0286  086D               	movf	_Sw,w
  5963  0287  3E03               	addlw	3
  5964  0288  0086               	movwf	6
  5965  0289  3001               	movlw	1	; select bank2/3
  5966  028A  0087               	movwf	7
  5967  028B  3000               	movlw	0
  5968  028C  3FC0               	movwi [0]fsr1
  5969  028D  3FC1               	movwi [1]fsr1
  5970                           
  5971                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  5972  028E  086D               	movf	_Sw,w
  5973  028F  0086               	movwf	6
  5974  0290  3001               	movlw	1	; select bank2/3
  5975  0291  0087               	movwf	7
  5976  0292  1581               	bsf	1,3
  5977                           
  5978                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  5979  0293  082B               	movf	setSw_Main@sw,w
  5980  0294  3191  211F         	fcall	_setDimmerLights_DimmingOn
  5981                           
  5982                           ;Switch_B1.c: 162: }
  5983                           ;Switch_B1.c: 163: } else {
  5984  0296  0008               	return
  5985  0297                     l9727:	
  5986                           
  5987                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  5988  0297  0020               	movlb	0	; select bank0
  5989  0298  086D               	movf	_Sw,w
  5990  0299  0086               	movwf	6
  5991  029A  3001               	movlw	1	; select bank2/3
  5992  029B  0087               	movwf	7
  5993  029C  1A01               	btfsc	1,4
  5994  029D  2AD5               	goto	l9741
  5995                           
  5996                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  5997  029E  086D               	movf	_Sw,w
  5998  029F  3E05               	addlw	5
  5999  02A0  0086               	movwf	6
  6000  02A1  3001               	movlw	1	; select bank2/3
  6001  02A2  0087               	movwf	7
  6002  02A3  3001               	movlw	1
  6003  02A4  0781               	addwf	1,f
  6004  02A5  3141               	addfsr 1,1
  6005  02A6  1803               	skipnc
  6006  02A7  0A81               	incf	1,f
  6007                           
  6008                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6009  02A8  086D               	movf	_Sw,w
  6010  02A9  3E05               	addlw	5
  6011  02AA  0086               	movwf	6
  6012  02AB  3001               	movlw	1	; select bank2/3
  6013  02AC  0087               	movwf	7
  6014  02AD  3F40               	moviw [0]fsr1
  6015  02AE  00A9               	movwf	??_setSw_Main
  6016  02AF  3F41               	moviw [1]fsr1
  6017  02B0  00AA               	movwf	??_setSw_Main+1
  6018  02B1  3000               	movlw	0
  6019  02B2  022A               	subwf	??_setSw_Main+1,w
  6020  02B3  304B               	movlw	75
  6021  02B4  1903               	skipnz
  6022  02B5  0229               	subwf	??_setSw_Main,w
  6023  02B6  1C03               	skipc
  6024  02B7  0008               	return
  6025                           
  6026                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6027  02B8  086D               	movf	_Sw,w
  6028  02B9  3E05               	addlw	5
  6029  02BA  0086               	movwf	6
  6030  02BB  3001               	movlw	1	; select bank2/3
  6031  02BC  0087               	movwf	7
  6032  02BD  3000               	movlw	0
  6033  02BE  3FC0               	movwi [0]fsr1
  6034  02BF  3FC1               	movwi [1]fsr1
  6035                           
  6036                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6037  02C0  086D               	movf	_Sw,w
  6038  02C1  0086               	movwf	6
  6039  02C2  3001               	movlw	1	; select bank2/3
  6040  02C3  0087               	movwf	7
  6041  02C4  1601               	bsf	1,4
  6042                           
  6043                           ;Switch_B1.c: 172: setRF_Learn(1);
  6044  02C5  3001               	movlw	1
  6045  02C6  319D  25A9  3181   	fcall	_setRF_Learn
  6046                           
  6047                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6048  02C9  0021               	movlb	1	; select bank1
  6049  02CA  1EBF               	btfss	_myMain^(0+128),5
  6050  02CB  0008               	return
  6051                           
  6052                           ;Switch_B1.c: 174: setBuz(2, 100);
  6053  02CC  3064               	movlw	100
  6054  02CD  0020               	movlb	0	; select bank0
  6055  02CE  00A4               	movwf	setBuz@time
  6056  02CF  3000               	movlw	0
  6057  02D0  00A5               	movwf	setBuz@time+1
  6058  02D1  3002               	movlw	2
  6059  02D2  3195  253E         	fcall	_setBuz
  6060                           
  6061                           ;Switch_B1.c: 175: }
  6062                           ;Switch_B1.c: 179: }
  6063                           ;Switch_B1.c: 180: } else {
  6064  02D4  0008               	return
  6065  02D5                     l9741:	
  6066                           
  6067                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6068  02D5  0020               	movlb	0	; select bank0
  6069  02D6  086D               	movf	_Sw,w
  6070  02D7  0086               	movwf	6
  6071  02D8  3001               	movlw	1	; select bank2/3
  6072  02D9  0087               	movwf	7
  6073  02DA  1A81               	btfsc	1,5
  6074  02DB  0008               	return
  6075                           
  6076                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6077  02DC  086D               	movf	_Sw,w
  6078  02DD  3E07               	addlw	7
  6079  02DE  0086               	movwf	6
  6080  02DF  3001               	movlw	1	; select bank2/3
  6081  02E0  0087               	movwf	7
  6082  02E1  3001               	movlw	1
  6083  02E2  0781               	addwf	1,f
  6084  02E3  3141               	addfsr 1,1
  6085  02E4  1803               	skipnc
  6086  02E5  0A81               	incf	1,f
  6087                           
  6088                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6089  02E6  086D               	movf	_Sw,w
  6090  02E7  3E07               	addlw	7
  6091  02E8  0086               	movwf	6
  6092  02E9  3001               	movlw	1	; select bank2/3
  6093  02EA  0087               	movwf	7
  6094  02EB  3F40               	moviw [0]fsr1
  6095  02EC  00A9               	movwf	??_setSw_Main
  6096  02ED  3F41               	moviw [1]fsr1
  6097  02EE  00AA               	movwf	??_setSw_Main+1
  6098  02EF  3000               	movlw	0
  6099  02F0  022A               	subwf	??_setSw_Main+1,w
  6100  02F1  3096               	movlw	150
  6101  02F2  1903               	skipnz
  6102  02F3  0229               	subwf	??_setSw_Main,w
  6103  02F4  1C03               	skipc
  6104  02F5  0008               	return
  6105                           
  6106                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6107  02F6  086D               	movf	_Sw,w
  6108  02F7  3E07               	addlw	7
  6109  02F8  0086               	movwf	6
  6110  02F9  3001               	movlw	1	; select bank2/3
  6111  02FA  0087               	movwf	7
  6112  02FB  3000               	movlw	0
  6113  02FC  3FC0               	movwi [0]fsr1
  6114  02FD  3FC1               	movwi [1]fsr1
  6115                           
  6116                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6117  02FE  086D               	movf	_Sw,w
  6118  02FF  0086               	movwf	6
  6119  0300  3001               	movlw	1	; select bank2/3
  6120  0301  0087               	movwf	7
  6121  0302  1681               	bsf	1,5
  6122                           
  6123                           ;Switch_B1.c: 188: setRF_Learn(0);
  6124  0303  3000               	movlw	0
  6125  0304  319D  25A9         	fcall	_setRF_Learn
  6126                           
  6127                           ;Switch_B1.c: 191: }
  6128                           ;Switch_B1.c: 192: }
  6129                           ;Switch_B1.c: 193: }
  6130                           ;Switch_B1.c: 195: }
  6131                           ;Switch_B1.c: 196: }
  6132                           ;Switch_B1.c: 197: } else {
  6133  0306  0008               	return
  6134  0307                     l9751:	
  6135                           
  6136                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6137  0307  0020               	movlb	0	; select bank0
  6138  0308  086D               	movf	_Sw,w
  6139  0309  0086               	movwf	6
  6140  030A  3001               	movlw	1	; select bank2/3
  6141  030B  0087               	movwf	7
  6142  030C  1D01               	btfss	1,2
  6143  030D  0008               	return
  6144                           
  6145                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6146  030E  3001               	movlw	1
  6147  030F  00A9               	movwf	??_setSw_Main
  6148  0310  086D               	movf	_Sw,w
  6149  0311  3E02               	addlw	2
  6150  0312  0086               	movwf	6
  6151  0313  3001               	movlw	1	; select bank2/3
  6152  0314  0087               	movwf	7
  6153  0315  0829               	movf	??_setSw_Main,w
  6154  0316  0781               	addwf	1,f
  6155                           
  6156                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6157  0317  086D               	movf	_Sw,w
  6158  0318  3E02               	addlw	2
  6159  0319  0086               	movwf	6
  6160  031A  3001               	movlw	1	; select bank2/3
  6161  031B  0087               	movwf	7
  6162  031C  3005               	movlw	5
  6163  031D  0201               	subwf	1,w
  6164  031E  1C03               	skipc
  6165  031F  0008               	return
  6166                           
  6167                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6168  0320  086D               	movf	_Sw,w
  6169  0321  3E02               	addlw	2
  6170  0322  0086               	movwf	6
  6171  0323  3001               	movlw	1	; select bank2/3
  6172  0324  0087               	movwf	7
  6173  0325  0181               	clrf	1
  6174                           
  6175                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6176  0326  086D               	movf	_Sw,w
  6177  0327  0086               	movwf	6
  6178  0328  3001               	movlw	1	; select bank2/3
  6179  0329  0087               	movwf	7
  6180  032A  1101               	bcf	1,2
  6181                           
  6182                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6183  032B  086D               	movf	_Sw,w
  6184  032C  3E03               	addlw	3
  6185  032D  0086               	movwf	6
  6186  032E  3001               	movlw	1	; select bank2/3
  6187  032F  0087               	movwf	7
  6188  0330  3000               	movlw	0
  6189  0331  3FC0               	movwi [0]fsr1
  6190  0332  3FC1               	movwi [1]fsr1
  6191                           
  6192                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6193  0333  086D               	movf	_Sw,w
  6194  0334  0086               	movwf	6
  6195  0335  3001               	movlw	1	; select bank2/3
  6196  0336  0087               	movwf	7
  6197  0337  1181               	bcf	1,3
  6198                           
  6199                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6200  0338  086D               	movf	_Sw,w
  6201  0339  0086               	movwf	6
  6202  033A  3001               	movlw	1	; select bank2/3
  6203  033B  0087               	movwf	7
  6204  033C  1201               	bcf	1,4
  6205                           
  6206                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6207  033D  086D               	movf	_Sw,w
  6208  033E  0086               	movwf	6
  6209  033F  3001               	movlw	1	; select bank2/3
  6210  0340  0087               	movwf	7
  6211  0341  1281               	bcf	1,5
  6212                           
  6213                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6214  0342  086D               	movf	_Sw,w
  6215  0343  3E05               	addlw	5
  6216  0344  0086               	movwf	6
  6217  0345  3001               	movlw	1	; select bank2/3
  6218  0346  0087               	movwf	7
  6219  0347  3000               	movlw	0
  6220  0348  3FC0               	movwi [0]fsr1
  6221  0349  3FC1               	movwi [1]fsr1
  6222                           
  6223                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6224  034A  086D               	movf	_Sw,w
  6225  034B  3E07               	addlw	7
  6226  034C  0086               	movwf	6
  6227  034D  3001               	movlw	1	; select bank2/3
  6228  034E  0087               	movwf	7
  6229  034F  3000               	movlw	0
  6230  0350  3FC0               	movwi [0]fsr1
  6231  0351  3FC1               	movwi [1]fsr1
  6232                           
  6233                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6234  0352  082B               	movf	setSw_Main@sw,w
  6235  0353  3192  22FB  3181   	fcall	_setDimmerLights_SwOff
  6236                           
  6237                           ;Switch_B1.c: 220: setRF_Learn(0);
  6238  0356  3000               	movlw	0
  6239  0357  319D  25A9         	fcall	_setRF_Learn
  6240                           
  6241                           ;Switch_B1.c: 222: }
  6242                           ;Switch_B1.c: 223: }
  6243                           ;Switch_B1.c: 224: }
  6244                           ;Switch_B1.c: 225: } else {
  6245  0359  0008               	return
  6246  035A                     l2606:	
  6247                           
  6248                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6249  035A  0021               	movlb	1	; select bank1
  6250  035B  1C3F               	btfss	_myMain^(0+128),0
  6251  035C  0008               	return
  6252                           
  6253                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6254  035D  0020               	movlb	0	; select bank0
  6255  035E  086D               	movf	_Sw,w
  6256  035F  0086               	movwf	6
  6257  0360  3001               	movlw	1	; select bank2/3
  6258  0361  0087               	movwf	7
  6259  0362  1401               	bsf	1,0
  6260  0363  0008               	return
  6261  0364                     __end_of_setSw_Main:	
  6262                           
  6263                           	psect	text15
  6264  1DA9                     __ptext15:	
  6265 ;; *************** function _setRF_Learn *****************
  6266 ;; Defined at:
  6267 ;;		line 33 in file "../src/RF_Control_B1.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  command         1    wreg     unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  command         1    3[COMMON] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;Total ram usage:        2 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    3
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		_setSw_Main
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _setRF_Learn
  6297  1DA9                     _setRF_Learn:	
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6301                           ;setRF_Learn@command stored from wreg
  6302  1DA9  00F3               	movwf	setRF_Learn@command
  6303                           
  6304                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6305  1DAA  0873               	movf	setRF_Learn@command,w
  6306  1DAB  3A01               	xorlw	1
  6307  1DAC  3000               	movlw	0
  6308  1DAD  1903               	skipnz
  6309  1DAE  3001               	movlw	1
  6310  1DAF  00F2               	movwf	??_setRF_Learn
  6311  1DB0  0EF2               	swapf	??_setRF_Learn,f
  6312  1DB1  0DF2               	rlf	??_setRF_Learn,f
  6313  1DB2  0DF2               	rlf	??_setRF_Learn,f
  6314  1DB3  0021               	movlb	1	; select bank1
  6315  1DB4  0830               	movf	_RF1^(0+128),w
  6316  1DB5  0672               	xorwf	??_setRF_Learn,w
  6317  1DB6  39BF               	andlw	-65
  6318  1DB7  0672               	xorwf	??_setRF_Learn,w
  6319  1DB8  00B0               	movwf	_RF1^(0+128)
  6320  1DB9  0008               	return
  6321  1DBA                     __end_of_setRF_Learn:	
  6322                           
  6323                           	psect	text16
  6324  111F                     __ptext16:	
  6325 ;; *************** function _setDimmerLights_DimmingOn *****************
  6326 ;; Defined at:
  6327 ;;		line 818 in file "../src/Dimmer_B1.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  sw              1    wreg     unsigned char 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;  sw              1    4[COMMON] unsigned char 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;		None               void
  6334 ;; Registers used:
  6335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6345 ;;Total ram usage:        1 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    4
  6348 ;; This function calls:
  6349 ;;		_DimmerLights_SelectPointer
  6350 ;; This function is called by:
  6351 ;;		_setSw_Main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _setDimmerLights_DimmingOn
  6357  111F                     _setDimmerLights_DimmingOn:	
  6358                           
  6359                           ;incstack = 0
  6360                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6361                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6362  111F  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6363                           
  6364                           ;Dimmer_B1.c: 824: DimmerLights_SelectPointer(sw);
  6365  1120  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6366  1121  319B  23F8  3191   	fcall	_DimmerLights_SelectPointer
  6367                           
  6368                           ;Dimmer_B1.c: 825: if (DimmerLights->Trigger == 0) {
  6369  1124  0020               	movlb	0	; select bank0
  6370  1125  086C               	movf	_DimmerLights,w
  6371  1126  0086               	movwf	6
  6372  1127  3001               	movlw	1	; select bank2/3
  6373  1128  0087               	movwf	7
  6374  1129  1881               	btfsc	1,1
  6375  112A  0008               	return
  6376                           
  6377                           ;Dimmer_B1.c: 826: if (DimmerLights->SwFlag == 1) {
  6378  112B  086C               	movf	_DimmerLights,w
  6379  112C  0086               	movwf	6
  6380  112D  3001               	movlw	1	; select bank2/3
  6381  112E  0087               	movwf	7
  6382  112F  1C01               	btfss	1,0
  6383  1130  0008               	return
  6384                           
  6385                           ;Dimmer_B1.c: 827: DimmerLights->Status = 1;
  6386  1131  0A6C               	incf	_DimmerLights,w
  6387  1132  0086               	movwf	6
  6388  1133  3001               	movlw	1	; select bank2/3
  6389  1134  0087               	movwf	7
  6390  1135  1401               	bsf	1,0
  6391                           
  6392                           ;Dimmer_B1.c: 829: DimmerLights->DimmingSwFlag = 1;
  6393  1136  086C               	movf	_DimmerLights,w
  6394  1137  0086               	movwf	6
  6395  1138  3001               	movlw	1	; select bank2/3
  6396  1139  0087               	movwf	7
  6397  113A  1581               	bsf	1,3
  6398                           
  6399                           ;Dimmer_B1.c: 830: DimmerLights->DimmingTrigger = 1;
  6400  113B  086C               	movf	_DimmerLights,w
  6401  113C  0086               	movwf	6
  6402  113D  3001               	movlw	1	; select bank2/3
  6403  113E  0087               	movwf	7
  6404  113F  1601               	bsf	1,4
  6405                           
  6406                           ;Dimmer_B1.c: 831: DimmerLights->DimmingSwitch = 1;
  6407  1140  086C               	movf	_DimmerLights,w
  6408  1141  0086               	movwf	6
  6409  1142  3001               	movlw	1	; select bank2/3
  6410  1143  0087               	movwf	7
  6411  1144  1681               	bsf	1,5
  6412  1145  0008               	return
  6413  1146                     __end_of_setDimmerLights_DimmingOn:	
  6414                           
  6415                           	psect	text17
  6416  1D98                     __ptext17:	
  6417 ;; *************** function _getSw_KeyStatus *****************
  6418 ;; Defined at:
  6419 ;;		line 238 in file "../src/Switch_B1.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  sw              1    wreg     unsigned char 
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  sw              1    0[COMMON] unsigned char 
  6424 ;;  status          1    3[COMMON] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      unsigned char 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;Total ram usage:        3 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    3
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_setSw_Main
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _getSw_KeyStatus
  6450  1D98                     _getSw_KeyStatus:	
  6451                           
  6452                           ;Switch_B1.c: 239: char status = 0;
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6456  1D98  01F3               	clrf	getSw_KeyStatus@status
  6457                           
  6458                           ;Switch_B1.c: 279: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6459  1D99  01F4               	clrf	_getSw_KeyStatus$7185
  6460  1D9A  0AF4               	incf	_getSw_KeyStatus$7185,f
  6461  1D9B  0020               	movlb	0	; select bank0
  6462  1D9C  1F0C               	btfss	12,6	;volatile
  6463  1D9D  1A0C               	btfsc	12,4	;volatile
  6464  1D9E  2DA3               	goto	l7319
  6465  1D9F  1C0C               	btfss	12,0	;volatile
  6466  1DA0  1B8C               	btfsc	12,7	;volatile
  6467  1DA1  2DA3               	goto	l7319
  6468  1DA2  01F4               	clrf	_getSw_KeyStatus$7185
  6469  1DA3                     l7319:	
  6470  1DA3  0874               	movf	_getSw_KeyStatus$7185,w
  6471  1DA4  00F2               	movwf	??_getSw_KeyStatus
  6472  1DA5  0872               	movf	??_getSw_KeyStatus,w
  6473  1DA6  00F3               	movwf	getSw_KeyStatus@status
  6474                           
  6475                           ;Switch_B1.c: 283: return status;
  6476  1DA7  0873               	movf	getSw_KeyStatus@status,w
  6477  1DA8  0008               	return
  6478  1DA9                     __end_of_getSw_KeyStatus:	
  6479                           
  6480                           	psect	text18
  6481  1C2F                     __ptext18:	
  6482 ;; *************** function _SwPointSelect *****************
  6483 ;; Defined at:
  6484 ;;		line 25 in file "../src/Switch_B1.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;  sw              1    wreg     unsigned char 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  sw              1    3[COMMON] unsigned char 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;		None               void
  6491 ;; Registers used:
  6492 ;;		wreg
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;Total ram usage:        2 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    3
  6505 ;; This function calls:
  6506 ;;		Nothing
  6507 ;; This function is called by:
  6508 ;;		_setSw_Main
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _SwPointSelect
  6514  1C2F                     _SwPointSelect:	
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _SwPointSelect: [wreg]
  6518                           ;SwPointSelect@sw stored from wreg
  6519  1C2F  00F3               	movwf	SwPointSelect@sw
  6520                           
  6521                           ;Switch_B1.c: 28: if (sw == 1) {
  6522  1C30  0873               	movf	SwPointSelect@sw,w
  6523  1C31  3A01               	xorlw	1
  6524  1C32  1D03               	skipz
  6525  1C33  0008               	return
  6526                           
  6527                           ;Switch_B1.c: 29: Sw = &Sw1;
  6528  1C34  30E3               	movlw	_Sw1& (0+255)
  6529  1C35  00F2               	movwf	??_SwPointSelect
  6530  1C36  0872               	movf	??_SwPointSelect,w
  6531  1C37  0020               	movlb	0	; select bank0
  6532  1C38  00ED               	movwf	_Sw
  6533  1C39  0008               	return
  6534  1C3A                     __end_of_SwPointSelect:	
  6535                           
  6536                           	psect	text19
  6537  1E84                     __ptext19:	
  6538 ;; *************** function _TouchPower *****************
  6539 ;; Defined at:
  6540 ;;		line 10 in file "../src/Switch_B1.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;		None               void
  6547 ;; Registers used:
  6548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    4
  6561 ;; This function calls:
  6562 ;;		_Timeout_Counter
  6563 ;;		_set_TimeoutCleared
  6564 ;; This function is called by:
  6565 ;;		_Switch_Main
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _TouchPower
  6571  1E84                     _TouchPower:	
  6572                           
  6573                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6574                           
  6575                           ;incstack = 0
  6576                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6577  1E84  0021               	movlb	1	; select bank1
  6578  1E85  1C3F               	btfss	_myMain^(0+128),0
  6579  1E86  0008               	return
  6580                           
  6581                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6582  1E87  0020               	movlb	0	; select bank0
  6583  1E88  180D               	btfsc	13,0	;volatile
  6584  1E89  0008               	return
  6585  1E8A  2E90               	goto	l7879
  6586  1E8B                     l2586:	
  6587                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6588                           
  6589                           
  6590                           ;Switch_B1.c: 14: RB0 = 1;
  6591  1E8B  0020               	movlb	0	; select bank0
  6592  1E8C  140D               	bsf	13,0	;volatile
  6593                           
  6594                           ;Switch_B1.c: 15: Timeout_Counter();
  6595  1E8D  319E  266F  319E   	fcall	_Timeout_Counter
  6596  1E90                     l7879:	
  6597  1E90  0020               	movlb	0	; select bank0
  6598  1E91  180D               	btfsc	13,0	;volatile
  6599  1E92  2E96               	goto	l7883
  6600  1E93  0021               	movlb	1	; select bank1
  6601  1E94  1D49               	btfss	(_myMain^(0+128)+10),2
  6602  1E95  2E8B               	goto	l2586
  6603  1E96                     l7883:	
  6604                           
  6605                           ;Switch_B1.c: 16: }
  6606                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6607  1E96  319B  2364         	fcall	_set_TimeoutCleared
  6608  1E98  0008               	return
  6609  1E99                     __end_of_TouchPower:	
  6610                           
  6611                           	psect	text20
  6612  1B64                     __ptext20:	
  6613 ;; *************** function _set_TimeoutCleared *****************
  6614 ;; Defined at:
  6615 ;;		line 287 in file "../src/Main_B1.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;		None               void
  6622 ;; Registers used:
  6623 ;;		status,2
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;Total ram usage:        0 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    3
  6636 ;; This function calls:
  6637 ;;		Nothing
  6638 ;; This function is called by:
  6639 ;;		_getAD
  6640 ;;		_TouchPower
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _set_TimeoutCleared
  6646  1B64                     _set_TimeoutCleared:	
  6647                           
  6648                           ;Main_B1.c: 288: myMain.Timeout = 0;
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _set_TimeoutCleared: [status,2]
  6652  1B64  0021               	movlb	1	; select bank1
  6653  1B65  1149               	bcf	(_myMain^(0+128)+10),2
  6654                           
  6655                           ;Main_B1.c: 289: myMain.Timeout_Counter = 0;
  6656  1B66  01CA               	clrf	(_myMain^(0+128)+11)
  6657  1B67  01CB               	clrf	((_myMain+1)^(0+128)+11)
  6658  1B68  0008               	return
  6659  1B69                     __end_of_set_TimeoutCleared:	
  6660                           
  6661                           	psect	text21
  6662  1E6F                     __ptext21:	
  6663 ;; *************** function _Timeout_Counter *****************
  6664 ;; Defined at:
  6665 ;;		line 278 in file "../src/Main_B1.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;		None
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;		None
  6670 ;; Return value:  Size  Location     Type
  6671 ;;		None               void
  6672 ;; Registers used:
  6673 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;Total ram usage:        0 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    3
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_getAD
  6690 ;;		_TouchPower
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _Timeout_Counter
  6696  1E6F                     _Timeout_Counter:	
  6697                           
  6698                           ;Main_B1.c: 279: myMain.Timeout_Counter++;
  6699                           
  6700                           ;incstack = 0
  6701                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6702  1E6F  3001               	movlw	1
  6703  1E70  0021               	movlb	1	; select bank1
  6704  1E71  07CA               	addwf	(_myMain^(0+128)+11),f
  6705  1E72  3000               	movlw	0
  6706  1E73  3DCB               	addwfc	((_myMain+1)^(0+128)+11),f
  6707                           
  6708                           ;Main_B1.c: 280: if (myMain.Timeout_Counter == 25000) {
  6709  1E74  300B               	movlw	11
  6710  1E75  3EBF               	addlw	_myMain& (0+255)
  6711  1E76  0086               	movwf	6
  6712  1E77  0187               	clrf	7
  6713  1E78  3F40               	moviw [0]fsr1
  6714  1E79  3AA8               	xorlw	168
  6715  1E7A  1D03               	skipz
  6716  1E7B  2E7E               	goto	u6325
  6717  1E7C  3F41               	moviw [1]fsr1
  6718  1E7D  3A61               	xorlw	97
  6719  1E7E                     u6325:	
  6720  1E7E  1D03               	skipz
  6721  1E7F  0008               	return
  6722                           
  6723                           ;Main_B1.c: 281: myMain.Timeout_Counter = 0;
  6724  1E80  01CA               	clrf	(_myMain^(0+128)+11)
  6725  1E81  01CB               	clrf	((_myMain+1)^(0+128)+11)
  6726                           
  6727                           ;Main_B1.c: 282: myMain.Timeout = 1;
  6728  1E82  1549               	bsf	(_myMain^(0+128)+10),2
  6729  1E83  0008               	return
  6730  1E84                     __end_of_Timeout_Counter:	
  6731                           
  6732                           	psect	text22
  6733  1B56                     __ptext22:	
  6734 ;; *************** function _Switch_Initialization *****************
  6735 ;; Defined at:
  6736 ;;		line 46 in file "../src/Switch_B1.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;		None
  6741 ;; Return value:  Size  Location     Type
  6742 ;;		None               void
  6743 ;; Registers used:
  6744 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;Total ram usage:        0 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    6
  6757 ;; This function calls:
  6758 ;;		_setSw_Initialization
  6759 ;; This function is called by:
  6760 ;;		_main
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           
  6765                           ;psect for function _Switch_Initialization
  6766  1B56                     _Switch_Initialization:	
  6767                           
  6768                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6769                           
  6770                           ;incstack = 0
  6771                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6772  1B56  3001               	movlw	1
  6773  1B57  319C  249D         	fcall	_setSw_Initialization
  6774  1B59  0008               	return
  6775  1B5A                     __end_of_Switch_Initialization:	
  6776                           
  6777                           	psect	text23
  6778  1C9D                     __ptext23:	
  6779 ;; *************** function _setSw_Initialization *****************
  6780 ;; Defined at:
  6781 ;;		line 66 in file "../src/Switch_B1.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  sw              1    wreg     unsigned char 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  sw              1    6[COMMON] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;		None               void
  6788 ;; Registers used:
  6789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    5
  6802 ;; This function calls:
  6803 ;;		_setLED
  6804 ;; This function is called by:
  6805 ;;		_Switch_Initialization
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function _setSw_Initialization
  6811  1C9D                     _setSw_Initialization:	
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6815                           ;setSw_Initialization@sw stored from wreg
  6816  1C9D  00F6               	movwf	setSw_Initialization@sw
  6817                           
  6818                           ;Switch_B1.c: 68: setLED(sw, 1);
  6819  1C9E  01F4               	clrf	setLED@command
  6820  1C9F  0AF4               	incf	setLED@command,f
  6821  1CA0  0876               	movf	setSw_Initialization@sw,w
  6822  1CA1  3193  236B  319C   	fcall	_setLED
  6823                           
  6824                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6825  1CA4  01F4               	clrf	setLED@command
  6826  1CA5  0AF4               	incf	setLED@command,f
  6827  1CA6  0876               	movf	setSw_Initialization@sw,w
  6828  1CA7  3E01               	addlw	1
  6829  1CA8  3193  236B         	fcall	_setLED
  6830  1CAA  0008               	return
  6831  1CAB                     __end_of_setSw_Initialization:	
  6832                           
  6833                           	psect	text24
  6834  1B29                     __ptext24:	
  6835 ;; *************** function _RF_Main *****************
  6836 ;; Defined at:
  6837 ;;		line 26 in file "../src/RF_Control_B1.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;		None               void
  6844 ;; Registers used:
  6845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;Total ram usage:        0 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:   10
  6858 ;; This function calls:
  6859 ;;		_setRF_Main
  6860 ;; This function is called by:
  6861 ;;		_main
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           
  6866                           ;psect for function _RF_Main
  6867  1B29                     _RF_Main:	
  6868                           
  6869                           ;RF_Control_B1.c: 28: setRF_Main();
  6870                           
  6871                           ;incstack = 0
  6872                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6873  1B29  3186  26BF         	fcall	_setRF_Main
  6874  1B2B  0008               	return
  6875  1B2C                     __end_of_RF_Main:	
  6876                           
  6877                           	psect	text25
  6878  06BF                     __ptext25:	
  6879 ;; *************** function _setRF_Main *****************
  6880 ;; Defined at:
  6881 ;;		line 53 in file "../src/RF_Control_B1.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  error           1   75[BANK0 ] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;Total ram usage:        2 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    9
  6902 ;; This function calls:
  6903 ;;		_CC2500_PowerOnInitial
  6904 ;;		_CC2500_RxData
  6905 ;;		_CC2500_TxData
  6906 ;;		_CC2500_WriteCommand
  6907 ;;		_RF_RxDisable
  6908 ;;		___lwdiv
  6909 ;;		_getBuz_GO
  6910 ;;		_getRF_KeyStatus
  6911 ;;		_getRxData
  6912 ;;		_setData
  6913 ;; This function is called by:
  6914 ;;		_RF_Main
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           
  6919                           ;psect for function _setRF_Main
  6920  06BF                     _setRF_Main:	
  6921                           
  6922                           ;RF_Control_B1.c: 54: char error = 0;
  6923                           
  6924                           ;incstack = 0
  6925                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6926  06BF  0020               	movlb	0	; select bank0
  6927  06C0  01EB               	clrf	setRF_Main@error
  6928                           
  6929                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6930  06C1  0021               	movlb	1	; select bank1
  6931  06C2  1C30               	btfss	_RF1^(0+128),0
  6932  06C3  2F7A               	goto	l2204
  6933                           
  6934                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6935  06C4  319D  2535  3186   	fcall	_getBuz_GO
  6936  06C7  0873               	movf	?_getBuz_GO+1,w
  6937  06C8  0472               	iorwf	?_getBuz_GO,w
  6938  06C9  1D03               	skipz
  6939  06CA  2F5F               	goto	l9671
  6940                           
  6941                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6942  06CB  319D  2587  3186   	fcall	_getRF_KeyStatus
  6943  06CE  3A01               	xorlw	1
  6944  06CF  3000               	movlw	0
  6945  06D0  1903               	skipnz
  6946  06D1  3001               	movlw	1
  6947  06D2  0020               	movlb	0	; select bank0
  6948  06D3  00EA               	movwf	??_setRF_Main
  6949  06D4  0CEA               	rrf	??_setRF_Main,f
  6950  06D5  0CEA               	rrf	??_setRF_Main,f
  6951  06D6  0021               	movlb	1	; select bank1
  6952  06D7  0830               	movf	_RF1^(0+128),w
  6953  06D8  0020               	movlb	0	; select bank0
  6954  06D9  066A               	xorwf	??_setRF_Main,w
  6955  06DA  397F               	andlw	-129
  6956  06DB  066A               	xorwf	??_setRF_Main,w
  6957  06DC  0021               	movlb	1	; select bank1
  6958  06DD  00B0               	movwf	_RF1^(0+128)
  6959                           
  6960                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6961  06DE  1FB0               	btfss	_RF1^(0+128),7
  6962  06DF  2EE2               	goto	l2208
  6963  06E0  1F30               	btfss	_RF1^(0+128),6
  6964  06E1  2F5F               	goto	l9671
  6965  06E2                     l2208:	
  6966                           
  6967                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6968  06E2  1D30               	btfss	_RF1^(0+128),2
  6969  06E3  2F26               	goto	l2209
  6970                           
  6971                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6972  06E4  1B30               	btfsc	_RF1^(0+128),6
  6973  06E5  2F21               	goto	l9643
  6974                           
  6975                           ;RF_Control_B1.c: 68: RF1.Count++;
  6976  06E6  3001               	movlw	1
  6977  06E7  07B3               	addwf	(_RF1^(0+128)+3),f
  6978  06E8  3000               	movlw	0
  6979  06E9  3DB4               	addwfc	((_RF1+1)^(0+128)+3),f
  6980                           
  6981                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6982  06EA  3014               	movlw	20
  6983  06EB  00F2               	movwf	___lwdiv@divisor
  6984  06EC  3000               	movlw	0
  6985  06ED  00F3               	movwf	___lwdiv@divisor+1
  6986  06EE  0839               	movf	((_RF1+1)^(0+128)+8),w
  6987  06EF  01F5               	clrf	___lwdiv@dividend+1
  6988  06F0  07F5               	addwf	___lwdiv@dividend+1,f
  6989  06F1  0838               	movf	(_RF1^(0+128)+8),w
  6990  06F2  01F4               	clrf	___lwdiv@dividend
  6991  06F3  07F4               	addwf	___lwdiv@dividend,f
  6992  06F4  3192  2257  3186   	fcall	___lwdiv
  6993  06F7  0873               	movf	?___lwdiv+1,w
  6994  06F8  0021               	movlb	1	; select bank1
  6995  06F9  0234               	subwf	((_RF1+1)^(0+128)+3),w
  6996  06FA  1D03               	skipz
  6997  06FB  2EFE               	goto	u10255
  6998  06FC  0872               	movf	?___lwdiv,w
  6999  06FD  0233               	subwf	(_RF1^(0+128)+3),w
  7000  06FE                     u10255:	
  7001  06FE  1C03               	skipc
  7002  06FF  2F5F               	goto	l9671
  7003                           
  7004                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7005  0700  3014               	movlw	20
  7006  0701  00F2               	movwf	___lwdiv@divisor
  7007  0702  3000               	movlw	0
  7008  0703  00F3               	movwf	___lwdiv@divisor+1
  7009  0704  0839               	movf	((_RF1+1)^(0+128)+8),w
  7010  0705  01F5               	clrf	___lwdiv@dividend+1
  7011  0706  07F5               	addwf	___lwdiv@dividend+1,f
  7012  0707  0838               	movf	(_RF1^(0+128)+8),w
  7013  0708  01F4               	clrf	___lwdiv@dividend
  7014  0709  07F4               	addwf	___lwdiv@dividend,f
  7015  070A  3192  2257  3186   	fcall	___lwdiv
  7016  070D  0873               	movf	?___lwdiv+1,w
  7017  070E  0021               	movlb	1	; select bank1
  7018  070F  01B4               	clrf	((_RF1+1)^(0+128)+3)
  7019  0710  07B4               	addwf	((_RF1+1)^(0+128)+3),f
  7020  0711  0872               	movf	?___lwdiv,w
  7021  0712  01B3               	clrf	(_RF1^(0+128)+3)
  7022  0713  07B3               	addwf	(_RF1^(0+128)+3),f
  7023                           
  7024                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7025  0714  1130               	bcf	_RF1^(0+128),2
  7026                           
  7027                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7028  0715  01BB               	clrf	(_RF1^(0+128)+11)
  7029  0716  01BC               	clrf	((_RF1+1)^(0+128)+11)
  7030                           
  7031                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7032  0717  319B  23B6  3186   	fcall	_RF_RxDisable
  7033                           
  7034                           ;RF_Control_B1.c: 75: setData();
  7035  071A  3194  246A  3186   	fcall	_setData
  7036                           
  7037                           ;RF_Control_B1.c: 76: CC2500_TxData();
  7038  071D  318A  228F  3186   	fcall	_CC2500_TxData
  7039                           
  7040                           ;RF_Control_B1.c: 78: }
  7041                           ;RF_Control_B1.c: 79: } else {
  7042  0720  2F5F               	goto	l9671
  7043  0721                     l9643:	
  7044                           
  7045                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7046  0721  0021               	movlb	1	; select bank1
  7047  0722  01B3               	clrf	(_RF1^(0+128)+3)
  7048  0723  01B4               	clrf	((_RF1+1)^(0+128)+3)
  7049                           
  7050                           ;RF_Control_B1.c: 81: RF1.TransceiveGO = 0;
  7051  0724  1130               	bcf	_RF1^(0+128),2
  7052                           
  7053                           ;RF_Control_B1.c: 82: }
  7054                           ;RF_Control_B1.c: 83: } else {
  7055  0725  2F5F               	goto	l9671
  7056  0726                     l2209:	
  7057                           
  7058                           ;RF_Control_B1.c: 84: if (RF1.RxStatus == 1) {
  7059  0726  1DB0               	btfss	_RF1^(0+128),3
  7060  0727  2F35               	goto	l9657
  7061                           
  7062                           ;RF_Control_B1.c: 86: CC2500_RxData();
  7063  0728  3188  2034  3186   	fcall	_CC2500_RxData
  7064                           
  7065                           ;RF_Control_B1.c: 88: if (RF1.ReceiveGO == 1) {
  7066  072B  0021               	movlb	1	; select bank1
  7067  072C  1CB0               	btfss	_RF1^(0+128),1
  7068  072D  2F5F               	goto	l9671
  7069                           
  7070                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  7071  072E  10B0               	bcf	_RF1^(0+128),1
  7072                           
  7073                           ;RF_Control_B1.c: 90: RF1.CorrectionCounter = 0;
  7074  072F  01BB               	clrf	(_RF1^(0+128)+11)
  7075  0730  01BC               	clrf	((_RF1+1)^(0+128)+11)
  7076                           
  7077                           ;RF_Control_B1.c: 98: getRxData();
  7078  0731  3197  2741  3186   	fcall	_getRxData
  7079                           
  7080                           ;RF_Control_B1.c: 101: }
  7081                           ;RF_Control_B1.c: 102: } else {
  7082  0734  2F5F               	goto	l9671
  7083  0735                     l9657:	
  7084                           
  7085                           ;RF_Control_B1.c: 103: RF1.Count++;
  7086  0735  3001               	movlw	1
  7087  0736  0021               	movlb	1	; select bank1
  7088  0737  07B3               	addwf	(_RF1^(0+128)+3),f
  7089  0738  3000               	movlw	0
  7090  0739  3DB4               	addwfc	((_RF1+1)^(0+128)+3),f
  7091                           
  7092                           ;RF_Control_B1.c: 104: if (RF1.Count >= (RF1.RunTime / 20)) {
  7093  073A  3014               	movlw	20
  7094  073B  00F2               	movwf	___lwdiv@divisor
  7095  073C  3000               	movlw	0
  7096  073D  00F3               	movwf	___lwdiv@divisor+1
  7097  073E  0839               	movf	((_RF1+1)^(0+128)+8),w
  7098  073F  01F5               	clrf	___lwdiv@dividend+1
  7099  0740  07F5               	addwf	___lwdiv@dividend+1,f
  7100  0741  0838               	movf	(_RF1^(0+128)+8),w
  7101  0742  01F4               	clrf	___lwdiv@dividend
  7102  0743  07F4               	addwf	___lwdiv@dividend,f
  7103  0744  3192  2257  3186   	fcall	___lwdiv
  7104  0747  0873               	movf	?___lwdiv+1,w
  7105  0748  0021               	movlb	1	; select bank1
  7106  0749  0234               	subwf	((_RF1+1)^(0+128)+3),w
  7107  074A  1D03               	skipz
  7108  074B  2F4E               	goto	u10285
  7109  074C  0872               	movf	?___lwdiv,w
  7110  074D  0233               	subwf	(_RF1^(0+128)+3),w
  7111  074E                     u10285:	
  7112  074E  1C03               	skipc
  7113  074F  2F5F               	goto	l9671
  7114                           
  7115                           ;RF_Control_B1.c: 105: RF1.Count = 0;
  7116  0750  01B3               	clrf	(_RF1^(0+128)+3)
  7117  0751  01B4               	clrf	((_RF1+1)^(0+128)+3)
  7118                           
  7119                           ;RF_Control_B1.c: 107: RF1.RxStatus = 1;
  7120  0752  15B0               	bsf	_RF1^(0+128),3
  7121                           
  7122                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x36);
  7123  0753  3036               	movlw	54
  7124  0754  319E  26FC  3186   	fcall	_CC2500_WriteCommand
  7125                           
  7126                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x3A);
  7127  0757  303A               	movlw	58
  7128  0758  319E  26FC  3186   	fcall	_CC2500_WriteCommand
  7129                           
  7130                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x34);
  7131  075B  3034               	movlw	52
  7132  075C  319E  26FC  3186   	fcall	_CC2500_WriteCommand
  7133  075F                     l9671:	
  7134                           
  7135                           ;RF_Control_B1.c: 112: }
  7136                           ;RF_Control_B1.c: 113: }
  7137                           ;RF_Control_B1.c: 114: }
  7138                           ;RF_Control_B1.c: 115: }
  7139                           ;RF_Control_B1.c: 116: }
  7140                           ;RF_Control_B1.c: 118: RF1.CorrectionCounter++;
  7141  075F  3001               	movlw	1
  7142  0760  0021               	movlb	1	; select bank1
  7143  0761  07BB               	addwf	(_RF1^(0+128)+11),f
  7144  0762  3000               	movlw	0
  7145  0763  3DBC               	addwfc	((_RF1+1)^(0+128)+11),f
  7146                           
  7147                           ;RF_Control_B1.c: 119: if (RF1.CorrectionCounter > (60000 / 20)) {
  7148  0764  300B               	movlw	11
  7149  0765  023C               	subwf	((_RF1+1)^(0+128)+11),w
  7150  0766  30B9               	movlw	185
  7151  0767  1903               	skipnz
  7152  0768  023B               	subwf	(_RF1^(0+128)+11),w
  7153  0769  1C03               	skipc
  7154  076A  2F73               	goto	l9683
  7155                           
  7156                           ;RF_Control_B1.c: 120: RF1.CorrectionCounter = 0;
  7157  076B  01BB               	clrf	(_RF1^(0+128)+11)
  7158  076C  01BC               	clrf	((_RF1+1)^(0+128)+11)
  7159                           
  7160                           ;RF_Control_B1.c: 122: RF1.RxStatus = 0;
  7161  076D  11B0               	bcf	_RF1^(0+128),3
  7162                           
  7163                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  7164  076E  10B0               	bcf	_RF1^(0+128),1
  7165                           
  7166                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x36);
  7167  076F  3036               	movlw	54
  7168  0770  319E  26FC  3186   	fcall	_CC2500_WriteCommand
  7169  0773                     l9683:	
  7170                           
  7171                           ;RF_Control_B1.c: 126: }
  7172                           ;RF_Control_B1.c: 128: if (RF1.Timeout == 1) {
  7173  0773  0021               	movlb	1	; select bank1
  7174  0774  1F31               	btfss	(_RF1^(0+128)+1),6
  7175  0775  0008               	return
  7176                           
  7177                           ;RF_Control_B1.c: 129: RF1.Timeout = 0;
  7178  0776  1331               	bcf	(_RF1^(0+128)+1),6
  7179                           
  7180                           ;RF_Control_B1.c: 130: CC2500_PowerOnInitial();
  7181  0777  319E  265A         	fcall	_CC2500_PowerOnInitial
  7182                           
  7183                           ;RF_Control_B1.c: 131: }
  7184                           ;RF_Control_B1.c: 133: } else {
  7185  0779  0008               	return
  7186  077A                     l2204:	
  7187                           
  7188                           ;RF_Control_B1.c: 134: if (myMain.PowerON == 1) {
  7189  077A  1C3F               	btfss	_myMain^(0+128),0
  7190  077B  0008               	return
  7191                           
  7192                           ;RF_Control_B1.c: 135: RF1.Enable = 1;
  7193  077C  1430               	bsf	_RF1^(0+128),0
  7194  077D  0008               	return
  7195  077E                     __end_of_setRF_Main:	
  7196                           
  7197                           	psect	text26
  7198  146A                     __ptext26:	
  7199 ;; *************** function _setData *****************
  7200 ;; Defined at:
  7201 ;;		line 188 in file "../src/RF_Control_B1.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, fsr1l, fsr1h, status,2
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;Total ram usage:        1 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    3
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_setRF_Main
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _setData
  7231  146A                     _setData:	
  7232                           
  7233                           ;RF_Control_B1.c: 212: RF_Data[0] = 0x63;
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  7237  146A  3063               	movlw	99
  7238  146B  00F2               	movwf	??_setData
  7239  146C  0872               	movf	??_setData,w
  7240  146D  0023               	movlb	3	; select bank3
  7241  146E  00A0               	movwf	_RF_Data^(0+384)
  7242                           
  7243                           ;RF_Control_B1.c: 213: RF_Data[1] = 0x02;
  7244  146F  3002               	movlw	2
  7245  1470  00F2               	movwf	??_setData
  7246  1471  0872               	movf	??_setData,w
  7247  1472  00A1               	movwf	(_RF_Data^(0+384)+1)
  7248                           
  7249                           ;RF_Control_B1.c: 215: RF_Data[2] = 0;
  7250  1473  01A2               	clrf	(_RF_Data^(0+384)+2)
  7251                           
  7252                           ;RF_Control_B1.c: 216: RF_Data[3] = 0;
  7253  1474  01A3               	clrf	(_RF_Data^(0+384)+3)
  7254                           
  7255                           ;RF_Control_B1.c: 217: RF_Data[4] = 0;
  7256  1475  01A4               	clrf	(_RF_Data^(0+384)+4)
  7257                           
  7258                           ;RF_Control_B1.c: 218: RF_Data[5] = 0;
  7259  1476  01A5               	clrf	(_RF_Data^(0+384)+5)
  7260                           
  7261                           ;RF_Control_B1.c: 219: RF_Data[6] = 0;
  7262  1477  01A6               	clrf	(_RF_Data^(0+384)+6)
  7263                           
  7264                           ;RF_Control_B1.c: 220: RF_Data[7] = 0;
  7265  1478  01A7               	clrf	(_RF_Data^(0+384)+7)
  7266                           
  7267                           ;RF_Control_B1.c: 221: RF_Data[8] = 0;
  7268  1479  01A8               	clrf	(_RF_Data^(0+384)+8)
  7269                           
  7270                           ;RF_Control_B1.c: 222: RF_Data[9] = product->Data[9];
  7271  147A  087B               	movf	_product,w
  7272  147B  0086               	movwf	6
  7273  147C  3002               	movlw	2	; select bank4/5
  7274  147D  0087               	movwf	7
  7275  147E  3002               	movlw	2	; select bank4/5
  7276  147F  3F49               	moviw [9]fsr1
  7277  1480  00A9               	movwf	(_RF_Data^(0+384)+9)
  7278                           
  7279                           ;RF_Control_B1.c: 223: RF_Data[10] = 0;
  7280  1481  01AA               	clrf	(_RF_Data^(0+384)+10)
  7281                           
  7282                           ;RF_Control_B1.c: 224: RF_Data[11] = product->Data[11];
  7283  1482  087B               	movf	_product,w
  7284  1483  0086               	movwf	6
  7285  1484  3002               	movlw	2	; select bank4/5
  7286  1485  0087               	movwf	7
  7287  1486  3002               	movlw	2	; select bank4/5
  7288  1487  3F4B               	moviw [11]fsr1
  7289  1488  00AB               	movwf	(_RF_Data^(0+384)+11)
  7290                           
  7291                           ;RF_Control_B1.c: 225: RF_Data[12] = product->Data[12];
  7292  1489  087B               	movf	_product,w
  7293  148A  0086               	movwf	6
  7294  148B  3002               	movlw	2	; select bank4/5
  7295  148C  0087               	movwf	7
  7296  148D  3002               	movlw	2	; select bank4/5
  7297  148E  3F4C               	moviw [12]fsr1
  7298  148F  00AC               	movwf	(_RF_Data^(0+384)+12)
  7299                           
  7300                           ;RF_Control_B1.c: 226: RF_Data[13] = product->Data[13];
  7301  1490  087B               	movf	_product,w
  7302  1491  0086               	movwf	6
  7303  1492  3002               	movlw	2	; select bank4/5
  7304  1493  0087               	movwf	7
  7305  1494  3002               	movlw	2	; select bank4/5
  7306  1495  3F4D               	moviw [13]fsr1
  7307  1496  00AD               	movwf	(_RF_Data^(0+384)+13)
  7308                           
  7309                           ;RF_Control_B1.c: 227: RF_Data[14] = product->Data[14];
  7310  1497  087B               	movf	_product,w
  7311  1498  0086               	movwf	6
  7312  1499  3002               	movlw	2	; select bank4/5
  7313  149A  0087               	movwf	7
  7314  149B  3002               	movlw	2	; select bank4/5
  7315  149C  3F4E               	moviw [14]fsr1
  7316  149D  00AE               	movwf	(_RF_Data^(0+384)+14)
  7317                           
  7318                           ;RF_Control_B1.c: 228: RF_Data[15] = product->Data[15];
  7319  149E  087B               	movf	_product,w
  7320  149F  0086               	movwf	6
  7321  14A0  3002               	movlw	2	; select bank4/5
  7322  14A1  0087               	movwf	7
  7323  14A2  3002               	movlw	2	; select bank4/5
  7324  14A3  3F4F               	moviw [15]fsr1
  7325  14A4  00AF               	movwf	(_RF_Data^(0+384)+15)
  7326                           
  7327                           ;RF_Control_B1.c: 229: RF_Data[16] = 0;
  7328  14A5  01B0               	clrf	(_RF_Data^(0+384)+16)
  7329                           
  7330                           ;RF_Control_B1.c: 230: RF_Data[17] = 0;
  7331  14A6  01B1               	clrf	(_RF_Data^(0+384)+17)
  7332                           
  7333                           ;RF_Control_B1.c: 231: RF_Data[18] = 0;
  7334  14A7  01B2               	clrf	(_RF_Data^(0+384)+18)
  7335                           
  7336                           ;RF_Control_B1.c: 232: RF_Data[19] = 0;
  7337  14A8  01B3               	clrf	(_RF_Data^(0+384)+19)
  7338                           
  7339                           ;RF_Control_B1.c: 233: RF_Data[20] = 209;
  7340  14A9  30D1               	movlw	209
  7341  14AA  00F2               	movwf	??_setData
  7342  14AB  0872               	movf	??_setData,w
  7343  14AC  00B4               	movwf	(_RF_Data^(0+384)+20)
  7344  14AD  0008               	return
  7345  14AE                     __end_of_setData:	
  7346                           
  7347                           	psect	text27
  7348  1741                     __ptext27:	
  7349 ;; *************** function _getRxData *****************
  7350 ;; Defined at:
  7351 ;;		line 256 in file "../src/RF_Control_B1.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  error           1   73[BANK0 ] unsigned char 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;		None               void
  7358 ;; Registers used:
  7359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;Total ram usage:        2 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    8
  7372 ;; This function calls:
  7373 ;;		_getMain_All_Error_Status
  7374 ;;		_setControl_Lights_Table
  7375 ;;		_setLog_Code
  7376 ;;		_setTxData
  7377 ;; This function is called by:
  7378 ;;		_setRF_Main
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function _getRxData
  7384  1741                     _getRxData:	
  7385                           
  7386                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7387                           
  7388                           ;incstack = 0
  7389                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7390  1741  0023               	movlb	3	; select bank3
  7391  1742  0820               	movf	_RF_Data^(0+384),w
  7392  1743  3AAA               	xorlw	170
  7393  1744  1D03               	skipz
  7394  1745  2F57               	goto	l9345
  7395  1746  0821               	movf	(_RF_Data^(0+384)+1),w
  7396  1747  3A01               	xorlw	1
  7397  1748  1D03               	skipz
  7398  1749  2F57               	goto	l9345
  7399                           
  7400                           ;RF_Control_B1.c: 259: product->Data[2] = 0x55;
  7401  174A  3055               	movlw	85
  7402  174B  0020               	movlb	0	; select bank0
  7403  174C  00E8               	movwf	??_getRxData
  7404  174D  087B               	movf	_product,w
  7405  174E  3E02               	addlw	2
  7406  174F  0086               	movwf	6
  7407  1750  3002               	movlw	2	; select bank4/5
  7408  1751  0087               	movwf	7
  7409  1752  0868               	movf	??_getRxData,w
  7410  1753  0081               	movwf	1
  7411                           
  7412                           ;RF_Control_B1.c: 260: setTxData();
  7413  1754  319B  2383         	fcall	_setTxData
  7414                           
  7415                           ;RF_Control_B1.c: 264: } else {
  7416  1756  0008               	return
  7417  1757                     l9345:	
  7418                           
  7419                           ;RF_Control_B1.c: 265: char error = getMain_All_Error_Status(0);
  7420  1757  3000               	movlw	0
  7421  1758  3191  21C6  3197   	fcall	_getMain_All_Error_Status
  7422  175B  0020               	movlb	0	; select bank0
  7423  175C  00E8               	movwf	??_getRxData
  7424  175D  0868               	movf	??_getRxData,w
  7425  175E  00E9               	movwf	getRxData@error
  7426                           
  7427                           ;RF_Control_B1.c: 266: if (error == 0) {
  7428  175F  08E9               	movf	getRxData@error,f
  7429  1760  1D03               	skipz
  7430  1761  2F9E               	goto	l2252
  7431                           
  7432                           ;RF_Control_B1.c: 267: if (RF1.Learn == 1) {
  7433  1762  0021               	movlb	1	; select bank1
  7434  1763  1F30               	btfss	_RF1^(0+128),6
  7435  1764  2F70               	goto	l9357
  7436                           
  7437                           ;RF_Control_B1.c: 269: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7438  1765  0023               	movlb	3	; select bank3
  7439  1766  08A0               	movf	_RF_Data^(0+384),f
  7440  1767  1D03               	skipz
  7441  1768  0008               	return
  7442  1769  0821               	movf	(_RF_Data^(0+384)+1),w
  7443  176A  3A64               	xorlw	100
  7444  176B  1D03               	skipz
  7445  176C  0008               	return
  7446                           
  7447                           ;RF_Control_B1.c: 270: setLog_Code();
  7448  176D  3188  2000         	fcall	_setLog_Code
  7449                           
  7450                           ;RF_Control_B1.c: 271: }
  7451                           ;RF_Control_B1.c: 289: } else {
  7452  176F  0008               	return
  7453  1770                     l9357:	
  7454                           
  7455                           ;RF_Control_B1.c: 290: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7456  1770  0023               	movlb	3	; select bank3
  7457  1771  0834               	movf	(_RF_Data^(0+384)+20),w
  7458  1772  3AD1               	xorlw	209
  7459  1773  1903               	skipnz
  7460  1774  2F79               	goto	l9361
  7461  1775  0834               	movf	(_RF_Data^(0+384)+20),w
  7462  1776  3A0A               	xorlw	10
  7463  1777  1D03               	skipz
  7464  1778  0008               	return
  7465  1779                     l9361:	
  7466                           
  7467                           ;RF_Control_B1.c: 292: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7468  1779  08A0               	movf	_RF_Data^(0+384),f
  7469  177A  1D03               	skipz
  7470  177B  0008               	return
  7471  177C  0821               	movf	(_RF_Data^(0+384)+1),w
  7472  177D  3A02               	xorlw	2
  7473  177E  1D03               	skipz
  7474  177F  0008               	return
  7475                           
  7476                           ;RF_Control_B1.c: 294: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7477  1780  087B               	movf	_product,w
  7478  1781  3E0C               	addlw	12
  7479  1782  0086               	movwf	6
  7480  1783  3002               	movlw	2	; select bank4/5
  7481  1784  0087               	movwf	7
  7482  1785  082C               	movf	(_RF_Data^(0+384)+12),w
  7483  1786  0601               	xorwf	1,w
  7484  1787  1D03               	skipz
  7485  1788  0008               	return
  7486  1789  087B               	movf	_product,w
  7487  178A  3E0D               	addlw	13
  7488  178B  0086               	movwf	6
  7489  178C  3002               	movlw	2	; select bank4/5
  7490  178D  0087               	movwf	7
  7491  178E  082D               	movf	(_RF_Data^(0+384)+13),w
  7492  178F  0601               	xorwf	1,w
  7493  1790  1D03               	skipz
  7494  1791  0008               	return
  7495  1792  087B               	movf	_product,w
  7496  1793  3E0E               	addlw	14
  7497  1794  0086               	movwf	6
  7498  1795  3002               	movlw	2	; select bank4/5
  7499  1796  0087               	movwf	7
  7500  1797  082E               	movf	(_RF_Data^(0+384)+14),w
  7501  1798  0601               	xorwf	1,w
  7502  1799  1D03               	skipz
  7503  179A  0008               	return
  7504                           
  7505                           ;RF_Control_B1.c: 295: setControl_Lights_Table();
  7506  179B  318B  23D8         	fcall	_setControl_Lights_Table
  7507                           
  7508                           ;RF_Control_B1.c: 296: }
  7509                           ;RF_Control_B1.c: 299: }
  7510                           ;RF_Control_B1.c: 310: }
  7511                           ;RF_Control_B1.c: 311: }
  7512                           ;RF_Control_B1.c: 312: } else {
  7513  179D  0008               	return
  7514  179E                     l2252:	
  7515                           
  7516                           ;RF_Control_B1.c: 313: __nop();
  7517  179E  0000               	nop
  7518  179F  0008               	return
  7519  17A0                     __end_of_getRxData:	
  7520                           
  7521                           	psect	text28
  7522  0800                     __ptext28:	
  7523 ;; *************** function _setLog_Code *****************
  7524 ;; Defined at:
  7525 ;;		line 319 in file "../src/RF_Control_B1.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;		None
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;		None
  7530 ;; Return value:  Size  Location     Type
  7531 ;;		None               void
  7532 ;; Registers used:
  7533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;Total ram usage:        1 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    5
  7546 ;; This function calls:
  7547 ;;		_setBuz
  7548 ;;		_setMemory_LoopSave
  7549 ;;		_setMemory_Modify
  7550 ;;		_setProductData
  7551 ;; This function is called by:
  7552 ;;		_getRxData
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _setLog_Code
  7558  0800                     _setLog_Code:	
  7559                           
  7560                           ;RF_Control_B1.c: 320: RF1.Learn = 0;
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7564  0800  0021               	movlb	1	; select bank1
  7565  0801  1330               	bcf	_RF1^(0+128),6
  7566                           
  7567                           ;RF_Control_B1.c: 321: setProductData(12, RF_Data[12]);
  7568  0802  0023               	movlb	3	; select bank3
  7569  0803  082C               	movf	(_RF_Data^(0+384)+12),w
  7570  0804  0020               	movlb	0	; select bank0
  7571  0805  00DD               	movwf	??_setLog_Code
  7572  0806  085D               	movf	??_setLog_Code,w
  7573  0807  00DA               	movwf	setProductData@value
  7574  0808  300C               	movlw	12
  7575  0809  319C  243A  3188   	fcall	_setProductData
  7576                           
  7577                           ;RF_Control_B1.c: 322: setProductData(13, RF_Data[13]);
  7578  080C  0023               	movlb	3	; select bank3
  7579  080D  082D               	movf	(_RF_Data^(0+384)+13),w
  7580  080E  0020               	movlb	0	; select bank0
  7581  080F  00DD               	movwf	??_setLog_Code
  7582  0810  085D               	movf	??_setLog_Code,w
  7583  0811  00DA               	movwf	setProductData@value
  7584  0812  300D               	movlw	13
  7585  0813  319C  243A  3188   	fcall	_setProductData
  7586                           
  7587                           ;RF_Control_B1.c: 323: setProductData(14, RF_Data[14]);
  7588  0816  0023               	movlb	3	; select bank3
  7589  0817  082E               	movf	(_RF_Data^(0+384)+14),w
  7590  0818  0020               	movlb	0	; select bank0
  7591  0819  00DD               	movwf	??_setLog_Code
  7592  081A  085D               	movf	??_setLog_Code,w
  7593  081B  00DA               	movwf	setProductData@value
  7594  081C  300E               	movlw	14
  7595  081D  319C  243A  3188   	fcall	_setProductData
  7596                           
  7597                           ;RF_Control_B1.c: 324: setBuz(1, 100);
  7598  0820  3064               	movlw	100
  7599  0821  0020               	movlb	0	; select bank0
  7600  0822  00A4               	movwf	setBuz@time
  7601  0823  3000               	movlw	0
  7602  0824  00A5               	movwf	setBuz@time+1
  7603  0825  3001               	movlw	1
  7604  0826  3195  253E  3188   	fcall	_setBuz
  7605                           
  7606                           ;RF_Control_B1.c: 325: if (myMain.First == 1) {
  7607  0829  0021               	movlb	1	; select bank1
  7608  082A  1EBF               	btfss	_myMain^(0+128),5
  7609  082B  2830               	goto	l2265
  7610                           
  7611                           ;RF_Control_B1.c: 326: setMemory_LoopSave(1);
  7612  082C  3001               	movlw	1
  7613  082D  319D  2545  3188   	fcall	_setMemory_LoopSave
  7614  0830                     l2265:	
  7615                           
  7616                           ;RF_Control_B1.c: 327: }
  7617                           ;RF_Control_B1.c: 328: setMemory_Modify(1);
  7618  0830  3001               	movlw	1
  7619  0831  319C  24F5         	fcall	_setMemory_Modify
  7620  0833  0008               	return
  7621  0834                     __end_of_setLog_Code:	
  7622                           
  7623                           	psect	text29
  7624  1D45                     __ptext29:	
  7625 ;; *************** function _setMemory_LoopSave *****************
  7626 ;; Defined at:
  7627 ;;		line 1093 in file "../src/MCU_B1.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  command         1    wreg     unsigned char 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  command         1    3[COMMON] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;		None               void
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;Total ram usage:        2 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    3
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_setLog_Code
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function _setMemory_LoopSave
  7657  1D45                     _setMemory_LoopSave:	
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7661                           ;setMemory_LoopSave@command stored from wreg
  7662  1D45  00F3               	movwf	setMemory_LoopSave@command
  7663                           
  7664                           ;MCU_B1.c: 1094: Memory.LoopSave = command == 1 ? 1 : 0;
  7665  1D46  0873               	movf	setMemory_LoopSave@command,w
  7666  1D47  3A01               	xorlw	1
  7667  1D48  3000               	movlw	0
  7668  1D49  1903               	skipnz
  7669  1D4A  3001               	movlw	1
  7670  1D4B  00F2               	movwf	??_setMemory_LoopSave
  7671  1D4C  0DF2               	rlf	??_setMemory_LoopSave,f
  7672  1D4D  0DF2               	rlf	??_setMemory_LoopSave,f
  7673  1D4E  0023               	movlb	3	; select bank3
  7674  1D4F  0862               	movf	(_Memory^(0+384)+36),w
  7675  1D50  0672               	xorwf	??_setMemory_LoopSave,w
  7676  1D51  39FB               	andlw	-5
  7677  1D52  0672               	xorwf	??_setMemory_LoopSave,w
  7678  1D53  00E2               	movwf	(_Memory^(0+384)+36)
  7679  1D54  0008               	return
  7680  1D55                     __end_of_setMemory_LoopSave:	
  7681                           
  7682                           	psect	text30
  7683  0BD8                     __ptext30:	
  7684 ;; *************** function _setControl_Lights_Table *****************
  7685 ;; Defined at:
  7686 ;;		line 332 in file "../src/RF_Control_B1.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;		None               void
  7693 ;; Registers used:
  7694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        0 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    7
  7707 ;; This function calls:
  7708 ;;		_getDimmerLights_Status
  7709 ;;		_getMain_All_LightsStatus
  7710 ;;		_setCmd_Status
  7711 ;;		_setDimmerLights_SwOff
  7712 ;;		_setDimmerLights_SwOn
  7713 ;;		_setProductData
  7714 ;;		_setRFSW_AdjControl
  7715 ;;		_setRFSW_Control
  7716 ;;		_setRF_AdjControl
  7717 ;;		_setTxData
  7718 ;; This function is called by:
  7719 ;;		_getRxData
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _setControl_Lights_Table
  7725  0BD8                     _setControl_Lights_Table:	
  7726                           
  7727                           ;RF_Control_B1.c: 334: switch (RF_Data[15]) {
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7731  0BD8  2C3C               	goto	l9081
  7732  0BD9                     l9057:	
  7733                           ;RF_Control_B1.c: 336: case 0x00:
  7734                           
  7735                           
  7736                           ;RF_Control_B1.c: 337: if (getMain_All_LightsStatus() == 1) {
  7737  0BD9  319B  23A6  318B   	fcall	_getMain_All_LightsStatus
  7738  0BDC  3A01               	xorlw	1
  7739  0BDD  1D03               	skipz
  7740  0BDE  2BF4               	goto	l9065
  7741                           
  7742                           ;RF_Control_B1.c: 340: if (getDimmerLights_Status(1) == 1) {
  7743  0BDF  3001               	movlw	1
  7744  0BE0  319C  24B9  318B   	fcall	_getDimmerLights_Status
  7745  0BE3  3A01               	xorlw	1
  7746  0BE4  1D03               	skipz
  7747  0BE5  2BEE               	goto	l9063
  7748                           
  7749                           ;RF_Control_B1.c: 341: setDimmerLights_SwOn(1);
  7750  0BE6  3001               	movlw	1
  7751  0BE7  3194  24F4  318B   	fcall	_setDimmerLights_SwOn
  7752                           
  7753                           ;RF_Control_B1.c: 342: setDimmerLights_SwOff(1);
  7754  0BEA  3001               	movlw	1
  7755  0BEB  3192  22FB  318B   	fcall	_setDimmerLights_SwOff
  7756  0BEE                     l9063:	
  7757                           
  7758                           ;RF_Control_B1.c: 343: }
  7759                           ;RF_Control_B1.c: 358: setCmd_Status(1, 1);
  7760  0BEE  01F2               	clrf	setCmd_Status@cmd
  7761  0BEF  0AF2               	incf	setCmd_Status@cmd,f
  7762  0BF0  3001               	movlw	1
  7763  0BF1  319E  2606         	fcall	_setCmd_Status
  7764                           
  7765                           ;RF_Control_B1.c: 359: } else {
  7766  0BF3  0008               	return
  7767  0BF4                     l9065:	
  7768                           
  7769                           ;RF_Control_B1.c: 360: setProductData(9, 0);
  7770  0BF4  0020               	movlb	0	; select bank0
  7771  0BF5  01DA               	clrf	setProductData@value
  7772  0BF6  3009               	movlw	9
  7773  0BF7  319C  243A  318B   	fcall	_setProductData
  7774                           
  7775                           ;RF_Control_B1.c: 361: setProductData(11, 0);
  7776  0BFA  0020               	movlb	0	; select bank0
  7777  0BFB  01DA               	clrf	setProductData@value
  7778  0BFC  300B               	movlw	11
  7779  0BFD  319C  243A  318B   	fcall	_setProductData
  7780                           
  7781                           ;RF_Control_B1.c: 362: setProductData(15, 0);
  7782  0C00  0020               	movlb	0	; select bank0
  7783  0C01  01DA               	clrf	setProductData@value
  7784  0C02  300F               	movlw	15
  7785  0C03  319C  243A  318B   	fcall	_setProductData
  7786                           
  7787                           ;RF_Control_B1.c: 363: setProductData(17, 0);
  7788  0C06  0020               	movlb	0	; select bank0
  7789  0C07  01DA               	clrf	setProductData@value
  7790  0C08  3011               	movlw	17
  7791  0C09  319C  243A  318B   	fcall	_setProductData
  7792                           
  7793                           ;RF_Control_B1.c: 364: setTxData();
  7794  0C0C  319B  2383         	fcall	_setTxData
  7795                           
  7796                           ;RF_Control_B1.c: 365: }
  7797                           ;RF_Control_B1.c: 366: break;
  7798  0C0E  0008               	return
  7799  0C0F                     l9069:	
  7800                           ;RF_Control_B1.c: 368: case 0x20:
  7801                           
  7802                           
  7803                           ;RF_Control_B1.c: 369: setProductData(9, 0);
  7804  0C0F  0020               	movlb	0	; select bank0
  7805  0C10  01DA               	clrf	setProductData@value
  7806  0C11  3009               	movlw	9
  7807  0C12  319C  243A  318B   	fcall	_setProductData
  7808                           
  7809                           ;RF_Control_B1.c: 370: setProductData(11, 0);
  7810  0C15  0020               	movlb	0	; select bank0
  7811  0C16  01DA               	clrf	setProductData@value
  7812  0C17  300B               	movlw	11
  7813  0C18  319C  243A  318B   	fcall	_setProductData
  7814                           
  7815                           ;RF_Control_B1.c: 371: setProductData(15, product->Data[15]);
  7816  0C1B  087B               	movf	_product,w
  7817  0C1C  0086               	movwf	6
  7818  0C1D  3002               	movlw	2	; select bank4/5
  7819  0C1E  0087               	movwf	7
  7820  0C1F  3002               	movlw	2	; select bank4/5
  7821  0C20  3F4F               	moviw [15]fsr1
  7822  0C21  0020               	movlb	0	; select bank0
  7823  0C22  00DA               	movwf	setProductData@value
  7824  0C23  300F               	movlw	15
  7825  0C24  319C  243A  318B   	fcall	_setProductData
  7826                           
  7827                           ;RF_Control_B1.c: 372: setProductData(17, 0);
  7828  0C27  0020               	movlb	0	; select bank0
  7829  0C28  01DA               	clrf	setProductData@value
  7830  0C29  3011               	movlw	17
  7831  0C2A  319C  243A  318B   	fcall	_setProductData
  7832                           
  7833                           ;RF_Control_B1.c: 373: setTxData();
  7834  0C2D  319B  2383         	fcall	_setTxData
  7835                           
  7836                           ;RF_Control_B1.c: 374: break;
  7837  0C2F  0008               	return
  7838  0C30                     l9073:	
  7839                           ;RF_Control_B1.c: 377: case 0x01:
  7840                           
  7841                           
  7842                           ;RF_Control_B1.c: 378: setRFSW_Control(1);
  7843  0C30  3001               	movlw	1
  7844  0C31  3193  23A5         	fcall	_setRFSW_Control
  7845                           
  7846                           ;RF_Control_B1.c: 379: break;
  7847  0C33  0008               	return
  7848  0C34                     l9075:	
  7849                           ;RF_Control_B1.c: 383: case 0x11:
  7850                           
  7851                           
  7852                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7853  0C34  3001               	movlw	1
  7854  0C35  318C  24D6         	fcall	_setRFSW_AdjControl
  7855                           
  7856                           ;RF_Control_B1.c: 385: break;
  7857  0C37  0008               	return
  7858  0C38                     l9077:	
  7859                           ;RF_Control_B1.c: 387: case 0xd1:
  7860                           
  7861                           
  7862                           ;RF_Control_B1.c: 388: setRF_AdjControl(1);
  7863  0C38  3001               	movlw	1
  7864  0C39  3192  228D         	fcall	_setRF_AdjControl
  7865                           
  7866                           ;RF_Control_B1.c: 422: }
  7867                           
  7868                           ;RF_Control_B1.c: 389: break;
  7869  0C3B  0008               	return
  7870  0C3C                     l9081:	
  7871  0C3C  0023               	movlb	3	; select bank3
  7872  0C3D  082F               	movf	(_RF_Data^(0+384)+15),w
  7873                           
  7874                           ; Switch size 1, requested type "space"
  7875                           ; Number of cases is 5, Range of values is 0 to 209
  7876                           ; switch strategies available:
  7877                           ; Name         Instructions Cycles
  7878                           ; simple_byte           16     9 (average)
  7879                           ; jumptable            260     6 (fixed)
  7880                           ;	Chosen strategy is simple_byte
  7881  0C3E  3A00               	xorlw	0	; case 0
  7882  0C3F  1903               	skipnz
  7883  0C40  2BD9               	goto	l9057
  7884  0C41  3A01               	xorlw	1	; case 1
  7885  0C42  1903               	skipnz
  7886  0C43  2C30               	goto	l9073
  7887  0C44  3A10               	xorlw	16	; case 17
  7888  0C45  1903               	skipnz
  7889  0C46  2C34               	goto	l9075
  7890  0C47  3A31               	xorlw	49	; case 32
  7891  0C48  1903               	skipnz
  7892  0C49  2C0F               	goto	l9069
  7893  0C4A  3AF1               	xorlw	241	; case 209
  7894  0C4B  1903               	skipnz
  7895  0C4C  2C38               	goto	l9077
  7896  0C4D  2C4E               	goto	l2279
  7897  0C4E                     l2279:	
  7898  0C4E  0008               	return
  7899  0C4F                     __end_of_setControl_Lights_Table:	
  7900                           
  7901                           	psect	text31
  7902  128D                     __ptext31:	
  7903 ;; *************** function _setRF_AdjControl *****************
  7904 ;; Defined at:
  7905 ;;		line 501 in file "../src/RF_Control_B1.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  sw              1    wreg     unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  sw              1    9[COMMON] unsigned char 
  7910 ;;  dimmingStatu    1    8[COMMON] unsigned char 
  7911 ;;  status          1    7[COMMON] unsigned char 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;		None               void
  7914 ;; Registers used:
  7915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;Total ram usage:        4 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    5
  7928 ;; This function calls:
  7929 ;;		_DimmerLights_SelectPointer
  7930 ;;		_getDimmerIntr_Dimming_Sw
  7931 ;;		_getDimmerLights_Status
  7932 ;; This function is called by:
  7933 ;;		_setControl_Lights_Table
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           
  7938                           ;psect for function _setRF_AdjControl
  7939  128D                     _setRF_AdjControl:	
  7940                           
  7941                           ;incstack = 0
  7942                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7943                           ;setRF_AdjControl@sw stored from wreg
  7944  128D  00F9               	movwf	setRF_AdjControl@sw
  7945                           
  7946                           ;RF_Control_B1.c: 502: char status = 0;
  7947  128E  01F7               	clrf	setRF_AdjControl@status
  7948                           
  7949                           ;RF_Control_B1.c: 504: status = getDimmerLights_Status(sw);
  7950  128F  0879               	movf	setRF_AdjControl@sw,w
  7951  1290  319C  24B9  3192   	fcall	_getDimmerLights_Status
  7952  1293  00F6               	movwf	??_setRF_AdjControl
  7953  1294  0876               	movf	??_setRF_AdjControl,w
  7954  1295  00F7               	movwf	setRF_AdjControl@status
  7955                           
  7956                           ;RF_Control_B1.c: 505: char dimmingStatus = 0;
  7957  1296  01F8               	clrf	setRF_AdjControl@dimmingStatus
  7958                           
  7959                           ;RF_Control_B1.c: 506: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  7960  1297  0879               	movf	setRF_AdjControl@sw,w
  7961  1298  319C  2476  3192   	fcall	_getDimmerIntr_Dimming_Sw
  7962  129B  00F6               	movwf	??_setRF_AdjControl
  7963  129C  0876               	movf	??_setRF_AdjControl,w
  7964  129D  00F8               	movwf	setRF_AdjControl@dimmingStatus
  7965                           
  7966                           ;RF_Control_B1.c: 508: if (status == 1) {
  7967  129E  0877               	movf	setRF_AdjControl@status,w
  7968  129F  3A01               	xorlw	1
  7969  12A0  1D03               	skipz
  7970  12A1  0008               	return
  7971                           
  7972                           ;RF_Control_B1.c: 509: if (dimmingStatus == 0) {
  7973  12A2  08F8               	movf	setRF_AdjControl@dimmingStatus,f
  7974  12A3  1D03               	skipz
  7975  12A4  2AB4               	goto	l6627
  7976                           
  7977                           ;RF_Control_B1.c: 510: DimmerLights_SelectPointer(sw);
  7978  12A5  0879               	movf	setRF_AdjControl@sw,w
  7979  12A6  319B  23F8         	fcall	_DimmerLights_SelectPointer
  7980                           
  7981                           ;RF_Control_B1.c: 511: DimmerLights->DimmingTrigger = 1;
  7982  12A8  0020               	movlb	0	; select bank0
  7983  12A9  086C               	movf	_DimmerLights,w
  7984  12AA  0086               	movwf	6
  7985  12AB  3001               	movlw	1	; select bank2/3
  7986  12AC  0087               	movwf	7
  7987  12AD  1601               	bsf	1,4
  7988                           
  7989                           ;RF_Control_B1.c: 512: DimmerLights->DimmingSwitch = 1;
  7990  12AE  086C               	movf	_DimmerLights,w
  7991  12AF  0086               	movwf	6
  7992  12B0  3001               	movlw	1	; select bank2/3
  7993  12B1  0087               	movwf	7
  7994  12B2  1681               	bsf	1,5
  7995                           
  7996                           ;RF_Control_B1.c: 514: } else {
  7997  12B3  0008               	return
  7998  12B4                     l6627:	
  7999                           
  8000                           ;RF_Control_B1.c: 515: DimmerLights_SelectPointer(sw);
  8001  12B4  0879               	movf	setRF_AdjControl@sw,w
  8002  12B5  319B  23F8         	fcall	_DimmerLights_SelectPointer
  8003                           
  8004                           ;RF_Control_B1.c: 516: DimmerLights->DimmingTrigger = 1;
  8005  12B7  0020               	movlb	0	; select bank0
  8006  12B8  086C               	movf	_DimmerLights,w
  8007  12B9  0086               	movwf	6
  8008  12BA  3001               	movlw	1	; select bank2/3
  8009  12BB  0087               	movwf	7
  8010  12BC  1601               	bsf	1,4
  8011                           
  8012                           ;RF_Control_B1.c: 517: DimmerLights->DimmingSwitch = 0;
  8013  12BD  086C               	movf	_DimmerLights,w
  8014  12BE  0086               	movwf	6
  8015  12BF  3001               	movlw	1	; select bank2/3
  8016  12C0  0087               	movwf	7
  8017  12C1  1281               	bcf	1,5
  8018  12C2  0008               	return
  8019  12C3                     __end_of_setRF_AdjControl:	
  8020                           
  8021                           	psect	text32
  8022  13A5                     __ptext32:	
  8023 ;; *************** function _setRFSW_Control *****************
  8024 ;; Defined at:
  8025 ;;		line 430 in file "../src/RF_Control_B1.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  sw              1    wreg     unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  sw              1   71[BANK0 ] unsigned char 
  8030 ;;  status          1   70[BANK0 ] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;		None               void
  8033 ;; Registers used:
  8034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;Total ram usage:        3 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    6
  8047 ;; This function calls:
  8048 ;;		_getDimmerLights_Status
  8049 ;;		_setBuz
  8050 ;;		_setDelayOff_GO
  8051 ;;		_setDimmerLights_SwOff
  8052 ;;		_setDimmerLights_SwOn
  8053 ;;		_setRF_DimmerLights
  8054 ;;		_setTxData
  8055 ;; This function is called by:
  8056 ;;		_setControl_Lights_Table
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _setRFSW_Control
  8062  13A5                     _setRFSW_Control:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8066                           ;setRFSW_Control@sw stored from wreg
  8067  13A5  0020               	movlb	0	; select bank0
  8068  13A6  00E7               	movwf	setRFSW_Control@sw
  8069                           
  8070                           ;RF_Control_B1.c: 431: char status = 0;
  8071  13A7  01E6               	clrf	setRFSW_Control@status
  8072                           
  8073                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  8074  13A8  0023               	movlb	3	; select bank3
  8075  13A9  0830               	movf	(_RF_Data^(0+384)+16),w
  8076  13AA  3A80               	xorlw	128
  8077  13AB  1D03               	skipz
  8078  13AC  2BD8               	goto	l8893
  8079                           
  8080                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  8081  13AD  0020               	movlb	0	; select bank0
  8082  13AE  01DD               	clrf	setDelayOff_GO@command
  8083  13AF  0ADD               	incf	setDelayOff_GO@command,f
  8084  13B0  0023               	movlb	3	; select bank3
  8085  13B1  0831               	movf	(_RF_Data^(0+384)+17),w
  8086  13B2  0020               	movlb	0	; select bank0
  8087  13B3  00E5               	movwf	??_setRFSW_Control
  8088  13B4  0865               	movf	??_setRFSW_Control,w
  8089  13B5  00DE               	movwf	setDelayOff_GO@value
  8090  13B6  0867               	movf	setRFSW_Control@sw,w
  8091  13B7  318D  255D  3193   	fcall	_setDelayOff_GO
  8092                           
  8093                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  8094  13BA  0020               	movlb	0	; select bank0
  8095  13BB  0867               	movf	setRFSW_Control@sw,w
  8096  13BC  319C  24B9  3193   	fcall	_getDimmerLights_Status
  8097  13BF  3A01               	xorlw	1
  8098  13C0  1D03               	skipz
  8099  13C1  2BD8               	goto	l8893
  8100                           
  8101                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  8102  13C2  3064               	movlw	100
  8103  13C3  0020               	movlb	0	; select bank0
  8104  13C4  00A4               	movwf	setBuz@time
  8105  13C5  3000               	movlw	0
  8106  13C6  00A5               	movwf	setBuz@time+1
  8107  13C7  3001               	movlw	1
  8108  13C8  3195  253E  3193   	fcall	_setBuz
  8109                           
  8110                           ;RF_Control_B1.c: 437: setRF_DimmerLights(sw, 1);
  8111  13CB  0020               	movlb	0	; select bank0
  8112  13CC  01DD               	clrf	setRF_DimmerLights@on
  8113  13CD  0ADD               	incf	setRF_DimmerLights@on,f
  8114  13CE  0867               	movf	setRFSW_Control@sw,w
  8115  13CF  318A  2229  3193   	fcall	_setRF_DimmerLights
  8116                           
  8117                           ;RF_Control_B1.c: 438: setTxData();
  8118  13D2  319B  2383  3193   	fcall	_setTxData
  8119                           
  8120                           ;RF_Control_B1.c: 439: status = 1;
  8121  13D5  0020               	movlb	0	; select bank0
  8122  13D6  01E6               	clrf	setRFSW_Control@status
  8123  13D7  0AE6               	incf	setRFSW_Control@status,f
  8124  13D8                     l8893:	
  8125                           
  8126                           ;RF_Control_B1.c: 440: }
  8127                           ;RF_Control_B1.c: 441: }
  8128                           ;RF_Control_B1.c: 443: if (status == 0) {
  8129  13D8  0020               	movlb	0	; select bank0
  8130  13D9  08E6               	movf	setRFSW_Control@status,f
  8131  13DA  1D03               	skipz
  8132  13DB  0008               	return
  8133                           
  8134                           ;RF_Control_B1.c: 445: setDimmerLights_SwOn(sw);
  8135  13DC  0867               	movf	setRFSW_Control@sw,w
  8136  13DD  3194  24F4  3193   	fcall	_setDimmerLights_SwOn
  8137                           
  8138                           ;RF_Control_B1.c: 446: setDimmerLights_SwOff(sw);
  8139  13E0  0020               	movlb	0	; select bank0
  8140  13E1  0867               	movf	setRFSW_Control@sw,w
  8141  13E2  3192  22FB         	fcall	_setDimmerLights_SwOff
  8142  13E4  0008               	return
  8143  13E5                     __end_of_setRFSW_Control:	
  8144                           
  8145                           	psect	text33
  8146  0CD6                     __ptext33:	
  8147 ;; *************** function _setRFSW_AdjControl *****************
  8148 ;; Defined at:
  8149 ;;		line 453 in file "../src/RF_Control_B1.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  sw              1    wreg     unsigned char 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  sw              1   64[BANK0 ] unsigned char 
  8154 ;;  status          1   63[BANK0 ] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;		None               void
  8157 ;; Registers used:
  8158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;Total ram usage:        4 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    6
  8171 ;; This function calls:
  8172 ;;		_getDimmerLights_PercentToValue
  8173 ;;		_getDimmerLights_Status
  8174 ;;		_setBuz
  8175 ;;		_setDimmerIntr_Dimming_RF
  8176 ;;		_setDimmerIntr_MaxmumValue
  8177 ;;		_setDimmerLights_DimmingRun
  8178 ;;		_setDimmerLights_SwOff
  8179 ;;		_setDimmerLights_SwOn
  8180 ;;		_setMemory_Modify
  8181 ;;		_setProductData
  8182 ;;		_setTxData
  8183 ;; This function is called by:
  8184 ;;		_setControl_Lights_Table
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _setRFSW_AdjControl
  8190  0CD6                     _setRFSW_AdjControl:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8194                           ;setRFSW_AdjControl@sw stored from wreg
  8195  0CD6  0020               	movlb	0	; select bank0
  8196  0CD7  00E0               	movwf	setRFSW_AdjControl@sw
  8197                           
  8198                           ;RF_Control_B1.c: 454: char status = 0;
  8199  0CD8  01DF               	clrf	setRFSW_AdjControl@status
  8200                           
  8201                           ;RF_Control_B1.c: 456: status = getDimmerLights_Status(sw);
  8202  0CD9  0860               	movf	setRFSW_AdjControl@sw,w
  8203  0CDA  319C  24B9  318C   	fcall	_getDimmerLights_Status
  8204  0CDD  0020               	movlb	0	; select bank0
  8205  0CDE  00DD               	movwf	??_setRFSW_AdjControl
  8206  0CDF  085D               	movf	??_setRFSW_AdjControl,w
  8207  0CE0  00DF               	movwf	setRFSW_AdjControl@status
  8208                           
  8209                           ;RF_Control_B1.c: 458: if (RF_Data[9] > 0x64) {
  8210  0CE1  3065               	movlw	101
  8211  0CE2  0023               	movlb	3	; select bank3
  8212  0CE3  0229               	subwf	(_RF_Data^(0+384)+9),w
  8213  0CE4  1C03               	skipc
  8214  0CE5  2CED               	goto	l8905
  8215                           
  8216                           ;RF_Control_B1.c: 459: RF_Data[9] = 0x64;
  8217  0CE6  3064               	movlw	100
  8218  0CE7  0020               	movlb	0	; select bank0
  8219  0CE8  00DD               	movwf	??_setRFSW_AdjControl
  8220  0CE9  085D               	movf	??_setRFSW_AdjControl,w
  8221  0CEA  0023               	movlb	3	; select bank3
  8222  0CEB  00A9               	movwf	(_RF_Data^(0+384)+9)
  8223                           
  8224                           ;RF_Control_B1.c: 460: } else if (RF_Data[9] < 0x01) {
  8225  0CEC  2CF2               	goto	l8909
  8226  0CED                     l8905:	
  8227  0CED  08A9               	movf	(_RF_Data^(0+384)+9),f
  8228  0CEE  1D03               	skipz
  8229  0CEF  2CF2               	goto	l8909
  8230                           
  8231                           ;RF_Control_B1.c: 461: RF_Data[9] = 0x01;
  8232  0CF0  01A9               	clrf	(_RF_Data^(0+384)+9)
  8233  0CF1  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8234  0CF2                     l8909:	
  8235                           
  8236                           ;RF_Control_B1.c: 462: }
  8237                           ;RF_Control_B1.c: 463: setProductData(9, RF_Data[9]);
  8238  0CF2  0829               	movf	(_RF_Data^(0+384)+9),w
  8239  0CF3  0020               	movlb	0	; select bank0
  8240  0CF4  00DD               	movwf	??_setRFSW_AdjControl
  8241  0CF5  085D               	movf	??_setRFSW_AdjControl,w
  8242  0CF6  00DA               	movwf	setProductData@value
  8243  0CF7  3009               	movlw	9
  8244  0CF8  319C  243A  318C   	fcall	_setProductData
  8245                           
  8246                           ;RF_Control_B1.c: 464: setProductData(11, sw);
  8247  0CFB  0020               	movlb	0	; select bank0
  8248  0CFC  0860               	movf	setRFSW_AdjControl@sw,w
  8249  0CFD  00DD               	movwf	??_setRFSW_AdjControl
  8250  0CFE  085D               	movf	??_setRFSW_AdjControl,w
  8251  0CFF  00DA               	movwf	setProductData@value
  8252  0D00  300B               	movlw	11
  8253  0D01  319C  243A  318C   	fcall	_setProductData
  8254                           
  8255                           ;RF_Control_B1.c: 465: setProductData(17, product->Data[26 + sw]);
  8256  0D04  0020               	movlb	0	; select bank0
  8257  0D05  0860               	movf	setRFSW_AdjControl@sw,w
  8258  0D06  3E1A               	addlw	26
  8259  0D07  077B               	addwf	_product,w
  8260  0D08  00DD               	movwf	??_setRFSW_AdjControl
  8261  0D09  085D               	movf	??_setRFSW_AdjControl,w
  8262  0D0A  0086               	movwf	6
  8263  0D0B  3002               	movlw	2	; select bank4/5
  8264  0D0C  0087               	movwf	7
  8265  0D0D  0801               	movf	1,w
  8266  0D0E  00DE               	movwf	??_setRFSW_AdjControl+1
  8267  0D0F  085E               	movf	??_setRFSW_AdjControl+1,w
  8268  0D10  00DA               	movwf	setProductData@value
  8269  0D11  3011               	movlw	17
  8270  0D12  319C  243A  318C   	fcall	_setProductData
  8271                           
  8272                           ;RF_Control_B1.c: 466: setProductData((20 + sw), RF_Data[9]);
  8273  0D15  0023               	movlb	3	; select bank3
  8274  0D16  0829               	movf	(_RF_Data^(0+384)+9),w
  8275  0D17  0020               	movlb	0	; select bank0
  8276  0D18  00DD               	movwf	??_setRFSW_AdjControl
  8277  0D19  085D               	movf	??_setRFSW_AdjControl,w
  8278  0D1A  00DA               	movwf	setProductData@value
  8279  0D1B  0860               	movf	setRFSW_AdjControl@sw,w
  8280  0D1C  3E14               	addlw	20
  8281  0D1D  319C  243A  318C   	fcall	_setProductData
  8282                           
  8283                           ;RF_Control_B1.c: 474: setMemory_Modify(1);
  8284  0D20  3001               	movlw	1
  8285  0D21  319C  24F5  318C   	fcall	_setMemory_Modify
  8286                           
  8287                           ;RF_Control_B1.c: 478: if (status == 1) {
  8288  0D24  0020               	movlb	0	; select bank0
  8289  0D25  085F               	movf	setRFSW_AdjControl@status,w
  8290  0D26  3A01               	xorlw	1
  8291  0D27  1D03               	skipz
  8292  0D28  2D49               	goto	l8921
  8293                           
  8294                           ;RF_Control_B1.c: 480: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8295  0D29  0023               	movlb	3	; select bank3
  8296  0D2A  0829               	movf	(_RF_Data^(0+384)+9),w
  8297  0D2B  3188  20FA  318C   	fcall	_getDimmerLights_PercentToValue
  8298  0D2E  0020               	movlb	0	; select bank0
  8299  0D2F  00DD               	movwf	??_setRFSW_AdjControl
  8300  0D30  085D               	movf	??_setRFSW_AdjControl,w
  8301  0D31  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  8302  0D32  0860               	movf	setRFSW_AdjControl@sw,w
  8303  0D33  319C  2446  318C   	fcall	_setDimmerIntr_MaxmumValue
  8304                           
  8305                           ;RF_Control_B1.c: 481: setDimmerIntr_Dimming_RF(sw, 1);
  8306  0D36  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  8307  0D37  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  8308  0D38  0020               	movlb	0	; select bank0
  8309  0D39  0860               	movf	setRFSW_AdjControl@sw,w
  8310  0D3A  319E  2630  318C   	fcall	_setDimmerIntr_Dimming_RF
  8311                           
  8312                           ;RF_Control_B1.c: 483: setTxData();
  8313  0D3D  319B  2383  318C   	fcall	_setTxData
  8314                           
  8315                           ;RF_Control_B1.c: 485: setBuz(1, 100);
  8316  0D40  3064               	movlw	100
  8317  0D41  0020               	movlb	0	; select bank0
  8318  0D42  00A4               	movwf	setBuz@time
  8319  0D43  3000               	movlw	0
  8320  0D44  00A5               	movwf	setBuz@time+1
  8321  0D45  3001               	movlw	1
  8322  0D46  3195  253E         	fcall	_setBuz
  8323                           
  8324                           ;RF_Control_B1.c: 486: } else if (status == 0) {
  8325  0D48  0008               	return
  8326  0D49                     l8921:	
  8327  0D49  0020               	movlb	0	; select bank0
  8328  0D4A  08DF               	movf	setRFSW_AdjControl@status,f
  8329  0D4B  1D03               	skipz
  8330  0D4C  0008               	return
  8331                           
  8332                           ;RF_Control_B1.c: 490: setDimmerLights_DimmingRun(sw, 1);
  8333  0D4D  01F4               	clrf	setDimmerLights_DimmingRun@command
  8334  0D4E  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  8335  0D4F  0860               	movf	setRFSW_AdjControl@sw,w
  8336  0D50  319E  26B1  318C   	fcall	_setDimmerLights_DimmingRun
  8337                           
  8338                           ;RF_Control_B1.c: 491: setDimmerLights_SwOn(sw);
  8339  0D53  0020               	movlb	0	; select bank0
  8340  0D54  0860               	movf	setRFSW_AdjControl@sw,w
  8341  0D55  3194  24F4  318C   	fcall	_setDimmerLights_SwOn
  8342                           
  8343                           ;RF_Control_B1.c: 492: setDimmerLights_SwOff(sw);
  8344  0D58  0020               	movlb	0	; select bank0
  8345  0D59  0860               	movf	setRFSW_AdjControl@sw,w
  8346  0D5A  3192  22FB         	fcall	_setDimmerLights_SwOff
  8347  0D5C  0008               	return
  8348  0D5D                     __end_of_setRFSW_AdjControl:	
  8349                           
  8350                           	psect	text34
  8351  1EB1                     __ptext34:	
  8352 ;; *************** function _setDimmerLights_DimmingRun *****************
  8353 ;; Defined at:
  8354 ;;		line 1214 in file "../src/Dimmer_B1.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;  lights          1    wreg     unsigned char 
  8357 ;;  command         1    4[COMMON] unsigned char 
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  lights          1    6[COMMON] unsigned char 
  8360 ;; Return value:  Size  Location     Type
  8361 ;;		None               void
  8362 ;; Registers used:
  8363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8369 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;Total ram usage:        3 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    4
  8376 ;; This function calls:
  8377 ;;		_DimmerLights_SelectPointer
  8378 ;; This function is called by:
  8379 ;;		_setRFSW_AdjControl
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function _setDimmerLights_DimmingRun
  8385  1EB1                     _setDimmerLights_DimmingRun:	
  8386                           
  8387                           ;incstack = 0
  8388                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8389                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8390  1EB1  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8391                           
  8392                           ;Dimmer_B1.c: 1215: DimmerLights_SelectPointer(lights);
  8393  1EB2  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8394  1EB3  319B  23F8         	fcall	_DimmerLights_SelectPointer
  8395                           
  8396                           ;Dimmer_B1.c: 1216: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8397  1EB5  0874               	movf	setDimmerLights_DimmingRun@command,w
  8398  1EB6  3A01               	xorlw	1
  8399  1EB7  3000               	movlw	0
  8400  1EB8  1903               	skipnz
  8401  1EB9  3001               	movlw	1
  8402  1EBA  00F5               	movwf	??_setDimmerLights_DimmingRun
  8403  1EBB  0020               	movlb	0	; select bank0
  8404  1EBC  0A6C               	incf	_DimmerLights,w
  8405  1EBD  0086               	movwf	6
  8406  1EBE  3001               	movlw	1	; select bank2/3
  8407  1EBF  0087               	movwf	7
  8408  1EC0  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8409  1EC1  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8410  1EC2  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8411  1EC3  0801               	movf	1,w
  8412  1EC4  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8413  1EC5  39BF               	andlw	-65
  8414  1EC6  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8415  1EC7  0081               	movwf	1
  8416  1EC8  0008               	return
  8417  1EC9                     __end_of_setDimmerLights_DimmingRun:	
  8418                           
  8419                           	psect	text35
  8420  1D87                     __ptext35:	
  8421 ;; *************** function _getRF_KeyStatus *****************
  8422 ;; Defined at:
  8423 ;;		line 167 in file "../src/RF_Control_B1.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  key             1    3[COMMON] unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      unsigned char 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        3 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    3
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_setRF_Main
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _getRF_KeyStatus
  8453  1D87                     _getRF_KeyStatus:	
  8454                           
  8455                           ;RF_Control_B1.c: 168: char key = 0;
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8459  1D87  01F3               	clrf	getRF_KeyStatus@key
  8460                           
  8461                           ;RF_Control_B1.c: 182: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8462  1D88  01F4               	clrf	_getRF_KeyStatus$6009
  8463  1D89  0AF4               	incf	_getRF_KeyStatus$6009,f
  8464  1D8A  0020               	movlb	0	; select bank0
  8465  1D8B  1F0C               	btfss	12,6	;volatile
  8466  1D8C  1A0C               	btfsc	12,4	;volatile
  8467  1D8D  2D92               	goto	l7217
  8468  1D8E  1C0C               	btfss	12,0	;volatile
  8469  1D8F  1B8C               	btfsc	12,7	;volatile
  8470  1D90  2D92               	goto	l7217
  8471  1D91  01F4               	clrf	_getRF_KeyStatus$6009
  8472  1D92                     l7217:	
  8473  1D92  0874               	movf	_getRF_KeyStatus$6009,w
  8474  1D93  00F2               	movwf	??_getRF_KeyStatus
  8475  1D94  0872               	movf	??_getRF_KeyStatus,w
  8476  1D95  00F3               	movwf	getRF_KeyStatus@key
  8477                           
  8478                           ;RF_Control_B1.c: 184: return key;
  8479  1D96  0873               	movf	getRF_KeyStatus@key,w
  8480  1D97  0008               	return
  8481  1D98                     __end_of_getRF_KeyStatus:	
  8482                           
  8483                           	psect	text36
  8484  1D35                     __ptext36:	
  8485 ;; *************** function _getBuz_GO *****************
  8486 ;; Defined at:
  8487 ;;		line 82 in file "../src/Buzzer_B1.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;		None
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  i               2    6[COMMON] int 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  2    2[COMMON] int 
  8494 ;; Registers used:
  8495 ;;		wreg, status,2, status,0
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;Total ram usage:        6 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    3
  8508 ;; This function calls:
  8509 ;;		Nothing
  8510 ;; This function is called by:
  8511 ;;		_setRF_Main
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           
  8516                           ;psect for function _getBuz_GO
  8517  1D35                     _getBuz_GO:	
  8518                           
  8519                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8520                           
  8521                           ;incstack = 0
  8522                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8523  1D35  0021               	movlb	1	; select bank1
  8524  1D36  0C4C               	rrf	_Buz1^(0+128),w
  8525  1D37  3901               	andlw	1
  8526  1D38  00F4               	movwf	??_getBuz_GO
  8527  1D39  01F5               	clrf	??_getBuz_GO+1
  8528  1D3A  0874               	movf	??_getBuz_GO,w
  8529  1D3B  00F6               	movwf	getBuz_GO@i
  8530  1D3C  0875               	movf	??_getBuz_GO+1,w
  8531  1D3D  00F7               	movwf	getBuz_GO@i+1
  8532                           
  8533                           ;Buzzer_B1.c: 84: return i;
  8534  1D3E  0877               	movf	getBuz_GO@i+1,w
  8535  1D3F  01F3               	clrf	?_getBuz_GO+1
  8536  1D40  07F3               	addwf	?_getBuz_GO+1,f
  8537  1D41  0876               	movf	getBuz_GO@i,w
  8538  1D42  01F2               	clrf	?_getBuz_GO
  8539  1D43  07F2               	addwf	?_getBuz_GO,f
  8540  1D44  0008               	return
  8541  1D45                     __end_of_getBuz_GO:	
  8542                           
  8543                           	psect	text37
  8544  1BB6                     __ptext37:	
  8545 ;; *************** function _RF_RxDisable *****************
  8546 ;; Defined at:
  8547 ;;		line 155 in file "../src/RF_Control_B1.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;		None
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;		None
  8552 ;; Return value:  Size  Location     Type
  8553 ;;		None               void
  8554 ;; Registers used:
  8555 ;;		None
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;Total ram usage:        0 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    3
  8568 ;; This function calls:
  8569 ;;		Nothing
  8570 ;; This function is called by:
  8571 ;;		_setRF_Main
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           
  8576                           ;psect for function _RF_RxDisable
  8577  1BB6                     _RF_RxDisable:	
  8578                           
  8579                           ;RF_Control_B1.c: 156: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8580                           
  8581                           ;incstack = 0
  8582                           ; Regs used in _RF_RxDisable: []
  8583  1BB6  0021               	movlb	1	; select bank1
  8584  1BB7  18B0               	btfsc	_RF1^(0+128),1
  8585  1BB8  2BBB               	goto	l2234
  8586  1BB9  1DB0               	btfss	_RF1^(0+128),3
  8587  1BBA  0008               	return
  8588  1BBB                     l2234:	
  8589                           
  8590                           ;RF_Control_B1.c: 157: RF1.RxStatus = 0;
  8591  1BBB  11B0               	bcf	_RF1^(0+128),3
  8592                           
  8593                           ;RF_Control_B1.c: 158: RF1.ReceiveGO = 0;
  8594  1BBC  10B0               	bcf	_RF1^(0+128),1
  8595  1BBD  0008               	return
  8596  1BBE                     __end_of_RF_RxDisable:	
  8597                           
  8598                           	psect	text38
  8599  0A8F                     __ptext38:	
  8600 ;; *************** function _CC2500_TxData *****************
  8601 ;; Defined at:
  8602 ;;		line 32 in file "../src/CC2500_B1.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  loop_e          1    7[COMMON] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;		None               void
  8609 ;; Registers used:
  8610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    5
  8623 ;; This function calls:
  8624 ;;		_CC2500_WriteByte
  8625 ;;		_CC2500_WriteCommand
  8626 ;;		_RF_Timeout_Counter
  8627 ;;		_setRF_TimeoutCleared
  8628 ;; This function is called by:
  8629 ;;		_setRF_Main
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _CC2500_TxData
  8635  0A8F                     _CC2500_TxData:	
  8636                           
  8637                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8638                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8642  0A8F  3036               	movlw	54
  8643  0A90  319E  26FC  318A   	fcall	_CC2500_WriteCommand
  8644                           
  8645                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8646  0A93  303B               	movlw	59
  8647  0A94  319E  26FC  318A   	fcall	_CC2500_WriteCommand
  8648                           
  8649                           ;CC2500_B1.c: 38: RC0 = 0;
  8650  0A97  0020               	movlb	0	; select bank0
  8651  0A98  100E               	bcf	14,0	;volatile
  8652                           
  8653                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8654  0A99  307F               	movlw	127
  8655  0A9A  00F6               	movwf	??_CC2500_TxData
  8656  0A9B  0876               	movf	??_CC2500_TxData,w
  8657  0A9C  0021               	movlb	1	; select bank1
  8658  0A9D  00DD               	movwf	_SPI0Buffer^(0+128)
  8659                           
  8660                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8661  0A9E  2AA2               	goto	l9091
  8662  0A9F                     l9089:	
  8663                           
  8664                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8665  0A9F  319E  2645  318A   	fcall	_RF_Timeout_Counter
  8666  0AA2                     l9091:	
  8667  0AA2  0020               	movlb	0	; select bank0
  8668  0AA3  1E8E               	btfss	14,5	;volatile
  8669  0AA4  2AA8               	goto	l9095
  8670  0AA5  0021               	movlb	1	; select bank1
  8671  0AA6  1F31               	btfss	(_RF1^(0+128)+1),6
  8672  0AA7  2A9F               	goto	l9089
  8673  0AA8                     l9095:	
  8674                           
  8675                           ;CC2500_B1.c: 42: };
  8676                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8677  0AA8  319B  2346  318A   	fcall	_setRF_TimeoutCleared
  8678                           
  8679                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8680  0AAB  319E  2699  318A   	fcall	_CC2500_WriteByte
  8681                           
  8682                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8683  0AAE  0021               	movlb	1	; select bank1
  8684  0AAF  085F               	movf	_Tx_Length^(0+128),w
  8685  0AB0  00F6               	movwf	??_CC2500_TxData
  8686  0AB1  0876               	movf	??_CC2500_TxData,w
  8687  0AB2  00DD               	movwf	_SPI0Buffer^(0+128)
  8688                           
  8689                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8690  0AB3  319E  2699  318A   	fcall	_CC2500_WriteByte
  8691                           
  8692                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8693  0AB6  01F7               	clrf	CC2500_TxData@loop_e
  8694  0AB7                     l9109:	
  8695  0AB7  0021               	movlb	1	; select bank1
  8696  0AB8  085F               	movf	_Tx_Length^(0+128),w
  8697  0AB9  0277               	subwf	CC2500_TxData@loop_e,w
  8698  0ABA  1803               	btfsc	3,0
  8699  0ABB  2ACE               	goto	l239
  8700                           
  8701                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8702  0ABC  0877               	movf	CC2500_TxData@loop_e,w
  8703  0ABD  3EA0               	addlw	_RF_Data& (0+255)
  8704  0ABE  0086               	movwf	6
  8705  0ABF  3001               	movlw	1	; select bank3/4
  8706  0AC0  0087               	movwf	7
  8707  0AC1  0801               	movf	1,w
  8708  0AC2  00F6               	movwf	??_CC2500_TxData
  8709  0AC3  0876               	movf	??_CC2500_TxData,w
  8710  0AC4  0021               	movlb	1	; select bank1
  8711  0AC5  00DD               	movwf	_SPI0Buffer^(0+128)
  8712                           
  8713                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8714  0AC6  319E  2699  318A   	fcall	_CC2500_WriteByte
  8715  0AC9  3001               	movlw	1
  8716  0ACA  00F6               	movwf	??_CC2500_TxData
  8717  0ACB  0876               	movf	??_CC2500_TxData,w
  8718  0ACC  07F7               	addwf	CC2500_TxData@loop_e,f
  8719  0ACD  2AB7               	goto	l9109
  8720  0ACE                     l239:	
  8721                           
  8722                           ;CC2500_B1.c: 51: }
  8723                           ;CC2500_B1.c: 52: RC0 = 1;
  8724  0ACE  0020               	movlb	0	; select bank0
  8725  0ACF  140E               	bsf	14,0	;volatile
  8726                           
  8727                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8728  0AD0  3035               	movlw	53
  8729  0AD1  319E  26FC  318A   	fcall	_CC2500_WriteCommand
  8730                           
  8731                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8732  0AD4  2AD8               	goto	l9115
  8733  0AD5                     l9113:	
  8734                           
  8735                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8736  0AD5  319E  2645  318A   	fcall	_RF_Timeout_Counter
  8737  0AD8                     l9115:	
  8738  0AD8  0020               	movlb	0	; select bank0
  8739  0AD9  188E               	btfsc	14,1	;volatile
  8740  0ADA  2ADE               	goto	l9119
  8741  0ADB  0021               	movlb	1	; select bank1
  8742  0ADC  1F31               	btfss	(_RF1^(0+128)+1),6
  8743  0ADD  2AD5               	goto	l9113
  8744  0ADE                     l9119:	
  8745                           
  8746                           ;CC2500_B1.c: 56: };
  8747                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8748  0ADE  319B  2346  318A   	fcall	_setRF_TimeoutCleared
  8749                           
  8750                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8751  0AE1  2AE5               	goto	l9123
  8752  0AE2                     l9121:	
  8753                           
  8754                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8755  0AE2  319E  2645  318A   	fcall	_RF_Timeout_Counter
  8756  0AE5                     l9123:	
  8757  0AE5  0020               	movlb	0	; select bank0
  8758  0AE6  1C8E               	btfss	14,1	;volatile
  8759  0AE7  2AEB               	goto	l9127
  8760  0AE8  0021               	movlb	1	; select bank1
  8761  0AE9  1F31               	btfss	(_RF1^(0+128)+1),6
  8762  0AEA  2AE2               	goto	l9121
  8763  0AEB                     l9127:	
  8764                           
  8765                           ;CC2500_B1.c: 61: };
  8766                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8767  0AEB  319B  2346  318A   	fcall	_setRF_TimeoutCleared
  8768                           
  8769                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8770  0AEE  3036               	movlw	54
  8771  0AEF  319E  26FC  318A   	fcall	_CC2500_WriteCommand
  8772                           
  8773                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8774  0AF2  303B               	movlw	59
  8775  0AF3  319E  26FC         	fcall	_CC2500_WriteCommand
  8776                           
  8777                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8778  0AF5  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8779  0AF6  0008               	return
  8780  0AF7                     __end_of_CC2500_TxData:	
  8781                           
  8782                           	psect	text39
  8783  0834                     __ptext39:	
  8784 ;; *************** function _CC2500_RxData *****************
  8785 ;; Defined at:
  8786 ;;		line 73 in file "../src/CC2500_B1.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;		None
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;  loop_f          1    7[COMMON] unsigned char 
  8791 ;; Return value:  Size  Location     Type
  8792 ;;		None               void
  8793 ;; Registers used:
  8794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        2 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    5
  8807 ;; This function calls:
  8808 ;;		_CC2500_ReadByte
  8809 ;;		_CC2500_ReadStatus
  8810 ;;		_CC2500_WriteByte
  8811 ;;		_CC2500_WriteCommand
  8812 ;;		_RF_Timeout_Counter
  8813 ;;		_setRF_TimeoutCleared
  8814 ;; This function is called by:
  8815 ;;		_setRF_Main
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           
  8820                           ;psect for function _CC2500_RxData
  8821  0834                     _CC2500_RxData:	
  8822                           
  8823                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8824                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8825                           
  8826                           ;incstack = 0
  8827                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8828  0834  0020               	movlb	0	; select bank0
  8829  0835  188E               	btfsc	14,1	;volatile
  8830  0836  0008               	return
  8831                           
  8832                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8833  0837  303B               	movlw	59
  8834  0838  3190  20D7  3188   	fcall	_CC2500_ReadStatus
  8835                           
  8836                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8837  083B  0021               	movlb	1	; select bank1
  8838  083C  0861               	movf	_s_data^(0+128),w
  8839  083D  1903               	btfsc	3,2
  8840  083E  0008               	return
  8841                           
  8842                           ;CC2500_B1.c: 90: RC0 = 0;
  8843  083F  0020               	movlb	0	; select bank0
  8844  0840  100E               	bcf	14,0	;volatile
  8845                           
  8846                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8847  0841  30FF               	movlw	255
  8848  0842  00F6               	movwf	??_CC2500_RxData
  8849  0843  0876               	movf	??_CC2500_RxData,w
  8850  0844  0021               	movlb	1	; select bank1
  8851  0845  00DD               	movwf	_SPI0Buffer^(0+128)
  8852                           
  8853                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8854  0846  284A               	goto	l9147
  8855  0847                     l9145:	
  8856                           
  8857                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8858  0847  319E  2645  3188   	fcall	_RF_Timeout_Counter
  8859  084A                     l9147:	
  8860  084A  0020               	movlb	0	; select bank0
  8861  084B  1E8E               	btfss	14,5	;volatile
  8862  084C  2850               	goto	l9151
  8863  084D  0021               	movlb	1	; select bank1
  8864  084E  1F31               	btfss	(_RF1^(0+128)+1),6
  8865  084F  2847               	goto	l9145
  8866  0850                     l9151:	
  8867                           
  8868                           ;CC2500_B1.c: 95: };
  8869                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8870  0850  319B  2346  3188   	fcall	_setRF_TimeoutCleared
  8871                           
  8872                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8873  0853  319E  2699  3188   	fcall	_CC2500_WriteByte
  8874                           
  8875                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8876  0856  319F  274B  3188   	fcall	_CC2500_ReadByte
  8877                           
  8878                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8879  0859  0021               	movlb	1	; select bank1
  8880  085A  085D               	movf	_SPI0Buffer^(0+128),w
  8881  085B  00F6               	movwf	??_CC2500_RxData
  8882  085C  0876               	movf	??_CC2500_RxData,w
  8883  085D  00DC               	movwf	_Rx_Length^(0+128)
  8884                           
  8885                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8886  085E  01F7               	clrf	CC2500_RxData@loop_f
  8887  085F                     l9167:	
  8888  085F  085C               	movf	_Rx_Length^(0+128),w
  8889  0860  0277               	subwf	CC2500_RxData@loop_f,w
  8890  0861  1803               	btfsc	3,0
  8891  0862  2875               	goto	l9169
  8892                           
  8893                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8894  0863  319F  274B  3188   	fcall	_CC2500_ReadByte
  8895                           
  8896                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8897  0866  0021               	movlb	1	; select bank1
  8898  0867  085D               	movf	_SPI0Buffer^(0+128),w
  8899  0868  00F6               	movwf	??_CC2500_RxData
  8900  0869  0877               	movf	CC2500_RxData@loop_f,w
  8901  086A  3EA0               	addlw	_RF_Data& (0+255)
  8902  086B  0086               	movwf	6
  8903  086C  3001               	movlw	1	; select bank3/4
  8904  086D  0087               	movwf	7
  8905  086E  0876               	movf	??_CC2500_RxData,w
  8906  086F  0081               	movwf	1
  8907  0870  3001               	movlw	1
  8908  0871  00F6               	movwf	??_CC2500_RxData
  8909  0872  0876               	movf	??_CC2500_RxData,w
  8910  0873  07F7               	addwf	CC2500_RxData@loop_f,f
  8911  0874  285F               	goto	l9167
  8912  0875                     l9169:	
  8913                           
  8914                           ;CC2500_B1.c: 104: }
  8915                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8916  0875  319F  274B  3188   	fcall	_CC2500_ReadByte
  8917                           
  8918                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8919  0878  0021               	movlb	1	; select bank1
  8920  0879  085D               	movf	_SPI0Buffer^(0+128),w
  8921  087A  00F6               	movwf	??_CC2500_RxData
  8922  087B  0876               	movf	??_CC2500_RxData,w
  8923  087C  0022               	movlb	2	; select bank2
  8924  087D  00AE               	movwf	_RSSI^(0+256)
  8925                           
  8926                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8927  087E  319F  274B  3188   	fcall	_CC2500_ReadByte
  8928                           
  8929                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8930  0881  0021               	movlb	1	; select bank1
  8931  0882  085D               	movf	_SPI0Buffer^(0+128),w
  8932  0883  00F6               	movwf	??_CC2500_RxData
  8933  0884  0876               	movf	??_CC2500_RxData,w
  8934  0885  00D8               	movwf	_CRC^(0+128)
  8935                           
  8936                           ;CC2500_B1.c: 109: RC0 = 1;
  8937  0886  0020               	movlb	0	; select bank0
  8938  0887  140E               	bsf	14,0	;volatile
  8939                           
  8940                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8941  0888  0021               	movlb	1	; select bank1
  8942  0889  1BD8               	btfsc	_CRC^(0+128),7
  8943                           
  8944                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8945  088A  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8946                           
  8947                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8948  088B  11B0               	bcf	_RF1^(0+128),3
  8949                           
  8950                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8951  088C  14B0               	bsf	_RF1^(0+128),1
  8952                           
  8953                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8954  088D  3036               	movlw	54
  8955  088E  319E  26FC  3188   	fcall	_CC2500_WriteCommand
  8956                           
  8957                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8958  0891  303A               	movlw	58
  8959  0892  319E  26FC         	fcall	_CC2500_WriteCommand
  8960  0894  0021               	movlb	1	; select bank1
  8961  0895  0008               	return
  8962  0896                     __end_of_CC2500_RxData:	
  8963                           
  8964                           	psect	text40
  8965  10D7                     __ptext40:	
  8966 ;; *************** function _CC2500_ReadStatus *****************
  8967 ;; Defined at:
  8968 ;;		line 308 in file "../src/CC2500_B1.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  status_addr     1    wreg     unsigned char 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  status_addr     1    5[COMMON] unsigned char 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;		None               void
  8975 ;; Registers used:
  8976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;Total ram usage:        2 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    4
  8989 ;; This function calls:
  8990 ;;		_CC2500_ReadByte
  8991 ;;		_CC2500_WriteByte
  8992 ;;		_RF_Timeout_Counter
  8993 ;;		_setRF_TimeoutCleared
  8994 ;; This function is called by:
  8995 ;;		_CC2500_RxData
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           
  9000                           ;psect for function _CC2500_ReadStatus
  9001  10D7                     _CC2500_ReadStatus:	
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9005                           ;CC2500_ReadStatus@status_addr stored from wreg
  9006  10D7  00F5               	movwf	CC2500_ReadStatus@status_addr
  9007                           
  9008                           ;CC2500_B1.c: 309: RC0 = 0;
  9009  10D8  0020               	movlb	0	; select bank0
  9010  10D9  100E               	bcf	14,0	;volatile
  9011                           
  9012                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9013  10DA  0875               	movf	CC2500_ReadStatus@status_addr,w
  9014  10DB  3EC0               	addlw	192
  9015  10DC  00F4               	movwf	??_CC2500_ReadStatus
  9016  10DD  0874               	movf	??_CC2500_ReadStatus,w
  9017  10DE  0021               	movlb	1	; select bank1
  9018  10DF  00DD               	movwf	_SPI0Buffer^(0+128)
  9019                           
  9020                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  9021  10E0  28E4               	goto	l8931
  9022  10E1                     l8929:	
  9023                           
  9024                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9025  10E1  319E  2645  3190   	fcall	_RF_Timeout_Counter
  9026  10E4                     l8931:	
  9027  10E4  0020               	movlb	0	; select bank0
  9028  10E5  1E8E               	btfss	14,5	;volatile
  9029  10E6  28EA               	goto	l8935
  9030  10E7  0021               	movlb	1	; select bank1
  9031  10E8  1F31               	btfss	(_RF1^(0+128)+1),6
  9032  10E9  28E1               	goto	l8929
  9033  10EA                     l8935:	
  9034                           
  9035                           ;CC2500_B1.c: 314: };
  9036                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9037  10EA  319B  2346  3190   	fcall	_setRF_TimeoutCleared
  9038                           
  9039                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9040  10ED  319E  2699  3190   	fcall	_CC2500_WriteByte
  9041                           
  9042                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9043  10F0  319F  274B         	fcall	_CC2500_ReadByte
  9044                           
  9045                           ;CC2500_B1.c: 319: RC0 = 1;
  9046  10F2  0020               	movlb	0	; select bank0
  9047  10F3  140E               	bsf	14,0	;volatile
  9048                           
  9049                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9050  10F4  0021               	movlb	1	; select bank1
  9051  10F5  085D               	movf	_SPI0Buffer^(0+128),w
  9052  10F6  00F4               	movwf	??_CC2500_ReadStatus
  9053  10F7  0874               	movf	??_CC2500_ReadStatus,w
  9054  10F8  00E1               	movwf	_s_data^(0+128)
  9055  10F9  0008               	return
  9056  10FA                     __end_of_CC2500_ReadStatus:	
  9057                           
  9058                           	psect	text41
  9059  1F4B                     __ptext41:	
  9060 ;; *************** function _CC2500_ReadByte *****************
  9061 ;; Defined at:
  9062 ;;		line 242 in file "../src/CC2500_B1.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  loop_b          1    3[COMMON] unsigned char 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;		None               void
  9069 ;; Registers used:
  9070 ;;		wreg, status,2, status,0
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;Total ram usage:        2 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    3
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_CC2500_RxData
  9087 ;;		_CC2500_ReadStatus
  9088 ;;		_CC2500_ReadREG
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function _CC2500_ReadByte
  9094  1F4B                     _CC2500_ReadByte:	
  9095                           
  9096                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9097                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9098                           
  9099                           ;incstack = 0
  9100                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9101  1F4B  01F3               	clrf	CC2500_ReadByte@loop_b
  9102  1F4C                     L3:	
  9103  1F4C  3008               	movlw	8
  9104  1F4D  0273               	subwf	CC2500_ReadByte@loop_b,w
  9105  1F4E  1803               	btfsc	3,0
  9106  1F4F  0008               	return
  9107                           
  9108                           ;CC2500_B1.c: 245: RC3 = 1;
  9109  1F50  0020               	movlb	0	; select bank0
  9110  1F51  158E               	bsf	14,3	;volatile
  9111                           
  9112                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9113  1F52  1003               	clrc
  9114  1F53  0021               	movlb	1	; select bank1
  9115  1F54  0DDD               	rlf	_SPI0Buffer^(0+128),f
  9116                           
  9117                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9118  1F55  0020               	movlb	0	; select bank0
  9119  1F56  1E8E               	btfss	14,5	;volatile
  9120  1F57  2F5B               	goto	l6497
  9121                           
  9122                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9123  1F58  0021               	movlb	1	; select bank1
  9124  1F59  145D               	bsf	_SPI0Buffer^(0+128),0
  9125  1F5A  2F60               	goto	l6499
  9126  1F5B                     l6497:	
  9127                           
  9128                           ;CC2500_B1.c: 249: else
  9129                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9130  1F5B  30FE               	movlw	254
  9131  1F5C  00F2               	movwf	??_CC2500_ReadByte
  9132  1F5D  0872               	movf	??_CC2500_ReadByte,w
  9133  1F5E  0021               	movlb	1	; select bank1
  9134  1F5F  05DD               	andwf	_SPI0Buffer^(0+128),f
  9135  1F60                     l6499:	
  9136                           
  9137                           ;CC2500_B1.c: 251: RC3 = 0;
  9138  1F60  0020               	movlb	0	; select bank0
  9139  1F61  118E               	bcf	14,3	;volatile
  9140  1F62  3001               	movlw	1
  9141  1F63  00F2               	movwf	??_CC2500_ReadByte
  9142  1F64  0872               	movf	??_CC2500_ReadByte,w
  9143  1F65  07F3               	addwf	CC2500_ReadByte@loop_b,f
  9144  1F66  2F4C               	goto	L3
  9145  1F67                     __end_of_CC2500_ReadByte:	
  9146                           
  9147                           	psect	text42
  9148  1E5A                     __ptext42:	
  9149 ;; *************** function _CC2500_PowerOnInitial *****************
  9150 ;; Defined at:
  9151 ;;		line 126 in file "../src/CC2500_B1.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;		None
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;		None               void
  9158 ;; Registers used:
  9159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;Total ram usage:        0 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    6
  9172 ;; This function calls:
  9173 ;;		_CC2500_ClearRXFIFO
  9174 ;;		_CC2500_ClearTXFIFO
  9175 ;;		_CC2500_FrequencyCabr
  9176 ;;		_CC2500_InitPATable
  9177 ;;		_CC2500_InitSetREG
  9178 ;;		_CC2500_PowerRST
  9179 ;;		_CC2500_SIDLEMode
  9180 ;; This function is called by:
  9181 ;;		_main
  9182 ;;		_setRF_Main
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function _CC2500_PowerOnInitial
  9188  1E5A                     _CC2500_PowerOnInitial:	
  9189                           
  9190                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9194  1E5A  3194  2426  319E   	fcall	_CC2500_PowerRST
  9195                           
  9196                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9197  1E5D  3191  2170  319E   	fcall	_CC2500_InitSetREG
  9198                           
  9199                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9200  1E60  319F  2784  319E   	fcall	_CC2500_InitPATable
  9201                           
  9202                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9203  1E63  319B  234E  319E   	fcall	_CC2500_ClearTXFIFO
  9204                           
  9205                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9206  1E66  319B  234A  319E   	fcall	_CC2500_ClearRXFIFO
  9207                           
  9208                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9209  1E69  319C  2424  319E   	fcall	_CC2500_FrequencyCabr
  9210                           
  9211                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9212  1E6C  319B  2352         	fcall	_CC2500_SIDLEMode
  9213  1E6E  0008               	return
  9214  1E6F                     __end_of_CC2500_PowerOnInitial:	
  9215                           
  9216                           	psect	text43
  9217  1B52                     __ptext43:	
  9218 ;; *************** function _CC2500_SIDLEMode *****************
  9219 ;; Defined at:
  9220 ;;		line 216 in file "../src/CC2500_B1.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;		None
  9225 ;; Return value:  Size  Location     Type
  9226 ;;		None               void
  9227 ;; Registers used:
  9228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;Total ram usage:        0 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    5
  9241 ;; This function calls:
  9242 ;;		_CC2500_WriteCommand
  9243 ;; This function is called by:
  9244 ;;		_CC2500_PowerOnInitial
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _CC2500_SIDLEMode
  9250  1B52                     _CC2500_SIDLEMode:	
  9251                           
  9252                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9253                           
  9254                           ;incstack = 0
  9255                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9256  1B52  3036               	movlw	54
  9257  1B53  319E  26FC         	fcall	_CC2500_WriteCommand
  9258  1B55  0008               	return
  9259  1B56                     __end_of_CC2500_SIDLEMode:	
  9260                           
  9261                           	psect	text44
  9262  1426                     __ptext44:	
  9263 ;; *************** function _CC2500_PowerRST *****************
  9264 ;; Defined at:
  9265 ;;		line 139 in file "../src/CC2500_B1.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;		None
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;		None
  9270 ;; Return value:  Size  Location     Type
  9271 ;;		None               void
  9272 ;; Registers used:
  9273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;Total ram usage:        1 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    4
  9286 ;; This function calls:
  9287 ;;		_CC2500_WriteByte
  9288 ;;		_DelayTime_1us
  9289 ;;		_RF_Timeout_Counter
  9290 ;;		_setRF_TimeoutCleared
  9291 ;; This function is called by:
  9292 ;;		_CC2500_PowerOnInitial
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _CC2500_PowerRST
  9298  1426                     _CC2500_PowerRST:	
  9299                           
  9300                           ;CC2500_B1.c: 140: RC3 = 0;
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9304  1426  0020               	movlb	0	; select bank0
  9305  1427  118E               	bcf	14,3	;volatile
  9306                           
  9307                           ;CC2500_B1.c: 141: RC4 = 0;
  9308  1428  120E               	bcf	14,4	;volatile
  9309                           
  9310                           ;CC2500_B1.c: 142: RC0 = 1;
  9311  1429  140E               	bsf	14,0	;volatile
  9312                           
  9313                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9314  142A  300A               	movlw	10
  9315  142B  00F2               	movwf	DelayTime_1us@count
  9316  142C  3000               	movlw	0
  9317  142D  00F3               	movwf	DelayTime_1us@count+1
  9318  142E  3190  20FA  3194   	fcall	_DelayTime_1us
  9319                           
  9320                           ;CC2500_B1.c: 144: RC0 = 0;
  9321  1431  0020               	movlb	0	; select bank0
  9322  1432  100E               	bcf	14,0	;volatile
  9323                           
  9324                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9325  1433  300A               	movlw	10
  9326  1434  00F2               	movwf	DelayTime_1us@count
  9327  1435  3000               	movlw	0
  9328  1436  00F3               	movwf	DelayTime_1us@count+1
  9329  1437  3190  20FA  3194   	fcall	_DelayTime_1us
  9330                           
  9331                           ;CC2500_B1.c: 146: RC0 = 1;
  9332  143A  0020               	movlb	0	; select bank0
  9333  143B  140E               	bsf	14,0	;volatile
  9334                           
  9335                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9336  143C  3028               	movlw	40
  9337  143D  00F2               	movwf	DelayTime_1us@count
  9338  143E  3000               	movlw	0
  9339  143F  00F3               	movwf	DelayTime_1us@count+1
  9340  1440  3190  20FA  3194   	fcall	_DelayTime_1us
  9341                           
  9342                           ;CC2500_B1.c: 148: RC0 = 0;
  9343  1443  0020               	movlb	0	; select bank0
  9344  1444  100E               	bcf	14,0	;volatile
  9345                           
  9346                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9347  1445  3030               	movlw	48
  9348  1446  00F8               	movwf	??_CC2500_PowerRST
  9349  1447  0878               	movf	??_CC2500_PowerRST,w
  9350  1448  0021               	movlb	1	; select bank1
  9351  1449  00DD               	movwf	_SPI0Buffer^(0+128)
  9352                           
  9353                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9354  144A  2C4E               	goto	l8959
  9355  144B                     l8957:	
  9356                           
  9357                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9358  144B  319E  2645  3194   	fcall	_RF_Timeout_Counter
  9359  144E                     l8959:	
  9360  144E  0020               	movlb	0	; select bank0
  9361  144F  1E8E               	btfss	14,5	;volatile
  9362  1450  2C54               	goto	l8963
  9363  1451  0021               	movlb	1	; select bank1
  9364  1452  1F31               	btfss	(_RF1^(0+128)+1),6
  9365  1453  2C4B               	goto	l8957
  9366  1454                     l8963:	
  9367                           
  9368                           ;CC2500_B1.c: 152: };
  9369                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9370  1454  319B  2346  3194   	fcall	_setRF_TimeoutCleared
  9371                           
  9372                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9373  1457  319E  2699  3194   	fcall	_CC2500_WriteByte
  9374                           
  9375                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9376  145A  2C5E               	goto	l8969
  9377  145B                     l8967:	
  9378                           
  9379                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9380  145B  319E  2645  3194   	fcall	_RF_Timeout_Counter
  9381  145E                     l8969:	
  9382  145E  0020               	movlb	0	; select bank0
  9383  145F  1E8E               	btfss	14,5	;volatile
  9384  1460  2C64               	goto	l8973
  9385  1461  0021               	movlb	1	; select bank1
  9386  1462  1F31               	btfss	(_RF1^(0+128)+1),6
  9387  1463  2C5B               	goto	l8967
  9388  1464                     l8973:	
  9389                           
  9390                           ;CC2500_B1.c: 157: };
  9391                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9392  1464  319B  2346         	fcall	_setRF_TimeoutCleared
  9393                           
  9394                           ;CC2500_B1.c: 159: RC4 = 0;
  9395  1466  0020               	movlb	0	; select bank0
  9396  1467  120E               	bcf	14,4	;volatile
  9397                           
  9398                           ;CC2500_B1.c: 160: RC0 = 1;
  9399  1468  140E               	bsf	14,0	;volatile
  9400  1469  0008               	return
  9401  146A                     __end_of_CC2500_PowerRST:	
  9402                           
  9403                           	psect	text45
  9404  1170                     __ptext45:	
  9405 ;; *************** function _CC2500_InitSetREG *****************
  9406 ;; Defined at:
  9407 ;;		line 166 in file "../src/CC2500_B1.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9412 ;;  temp2           1    1[BANK0 ] unsigned char 
  9413 ;;  temp1           1    0[BANK0 ] unsigned char 
  9414 ;; Return value:  Size  Location     Type
  9415 ;;		None               void
  9416 ;; Registers used:
  9417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;Total ram usage:        4 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    5
  9430 ;; This function calls:
  9431 ;;		_CC2500_WriteREG
  9432 ;; This function is called by:
  9433 ;;		_CC2500_PowerOnInitial
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           
  9438                           ;psect for function _CC2500_InitSetREG
  9439  1170                     _CC2500_InitSetREG:	
  9440                           
  9441                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9442                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9443                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9444                           
  9445                           ;incstack = 0
  9446                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9447  1170  0020               	movlb	0	; select bank0
  9448  1171  01A2               	clrf	CC2500_InitSetREG@loop_c
  9449  1172                     L4:	
  9450  1172  302F               	movlw	47
  9451  1173  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9452  1174  1803               	btfsc	3,0
  9453  1175  0008               	return
  9454                           
  9455                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9456  1176  0822               	movf	CC2500_InitSetREG@loop_c,w
  9457  1177  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9458  1178  0084               	movwf	4
  9459  1179  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9460  117A  1803               	skipnc
  9461  117B  3E01               	addlw	1
  9462  117C  0085               	movwf	5
  9463  117D  0800               	movf	0,w	;code access
  9464  117E  00F7               	movwf	??_CC2500_InitSetREG
  9465  117F  0877               	movf	??_CC2500_InitSetREG,w
  9466  1180  00A0               	movwf	CC2500_InitSetREG@temp1
  9467                           
  9468                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9469  1181  0822               	movf	CC2500_InitSetREG@loop_c,w
  9470  1182  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9471  1183  0084               	movwf	4
  9472  1184  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9473  1185  1803               	skipnc
  9474  1186  3E01               	addlw	1
  9475  1187  0085               	movwf	5
  9476  1188  0800               	movf	0,w	;code access
  9477  1189  00F7               	movwf	??_CC2500_InitSetREG
  9478  118A  0877               	movf	??_CC2500_InitSetREG,w
  9479  118B  00A1               	movwf	CC2500_InitSetREG@temp2
  9480                           
  9481                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9482  118C  0821               	movf	CC2500_InitSetREG@temp2,w
  9483  118D  00F7               	movwf	??_CC2500_InitSetREG
  9484  118E  0877               	movf	??_CC2500_InitSetREG,w
  9485  118F  00F4               	movwf	CC2500_WriteREG@value
  9486  1190  0820               	movf	CC2500_InitSetREG@temp1,w
  9487  1191  3190  20B5  3191   	fcall	_CC2500_WriteREG
  9488  1194  3001               	movlw	1
  9489  1195  00F7               	movwf	??_CC2500_InitSetREG
  9490  1196  0877               	movf	??_CC2500_InitSetREG,w
  9491  1197  0020               	movlb	0	; select bank0
  9492  1198  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9493  1199  2972               	goto	L4
  9494  119A                     __end_of_CC2500_InitSetREG:	
  9495                           
  9496                           	psect	text46
  9497  1F84                     __ptext46:	
  9498 ;; *************** function _CC2500_InitPATable *****************
  9499 ;; Defined at:
  9500 ;;		line 181 in file "../src/CC2500_B1.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  loop_d          1    9[COMMON] unsigned char 
  9505 ;;  temp            1    8[COMMON] unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;		None               void
  9508 ;; Registers used:
  9509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;Total ram usage:        3 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    5
  9522 ;; This function calls:
  9523 ;;		_CC2500_WriteREG
  9524 ;; This function is called by:
  9525 ;;		_CC2500_PowerOnInitial
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           
  9530                           ;psect for function _CC2500_InitPATable
  9531  1F84                     _CC2500_InitPATable:	
  9532                           
  9533                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9534                           ;CC2500_B1.c: 183: unsigned char temp;
  9535                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9539  1F84  01F9               	clrf	CC2500_InitPATable@loop_d
  9540  1F85                     L5:	
  9541  1F85  3008               	movlw	8
  9542  1F86  0279               	subwf	CC2500_InitPATable@loop_d,w
  9543  1F87  1803               	btfsc	3,0
  9544  1F88  0008               	return
  9545                           
  9546                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9547  1F89  0879               	movf	CC2500_InitPATable@loop_d,w
  9548  1F8A  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9549  1F8B  0084               	movwf	4
  9550  1F8C  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9551  1F8D  1803               	skipnc
  9552  1F8E  3E01               	addlw	1
  9553  1F8F  0085               	movwf	5
  9554  1F90  0800               	movf	0,w	;code access
  9555  1F91  00F7               	movwf	??_CC2500_InitPATable
  9556  1F92  0877               	movf	??_CC2500_InitPATable,w
  9557  1F93  00F8               	movwf	CC2500_InitPATable@temp
  9558                           
  9559                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9560  1F94  0878               	movf	CC2500_InitPATable@temp,w
  9561  1F95  00F7               	movwf	??_CC2500_InitPATable
  9562  1F96  0877               	movf	??_CC2500_InitPATable,w
  9563  1F97  00F4               	movwf	CC2500_WriteREG@value
  9564  1F98  303E               	movlw	62
  9565  1F99  3190  20B5  319F   	fcall	_CC2500_WriteREG
  9566  1F9C  3001               	movlw	1
  9567  1F9D  00F7               	movwf	??_CC2500_InitPATable
  9568  1F9E  0877               	movf	??_CC2500_InitPATable,w
  9569  1F9F  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9570  1FA0  2F85               	goto	L5
  9571  1FA1                     __end_of_CC2500_InitPATable:	
  9572                           
  9573                           	psect	text47
  9574  10B5                     __ptext47:	
  9575 ;; *************** function _CC2500_WriteREG *****************
  9576 ;; Defined at:
  9577 ;;		line 258 in file "../src/CC2500_B1.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  w_addr          1    wreg     unsigned char 
  9580 ;;  value           1    4[COMMON] unsigned char 
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;  w_addr          1    6[COMMON] unsigned char 
  9583 ;; Return value:  Size  Location     Type
  9584 ;;		None               void
  9585 ;; Registers used:
  9586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        3 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    4
  9599 ;; This function calls:
  9600 ;;		_CC2500_WriteByte
  9601 ;;		_RF_Timeout_Counter
  9602 ;;		_setRF_TimeoutCleared
  9603 ;; This function is called by:
  9604 ;;		_CC2500_InitSetREG
  9605 ;;		_CC2500_InitPATable
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function _CC2500_WriteREG
  9611  10B5                     _CC2500_WriteREG:	
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9615                           ;CC2500_WriteREG@w_addr stored from wreg
  9616  10B5  00F6               	movwf	CC2500_WriteREG@w_addr
  9617                           
  9618                           ;CC2500_B1.c: 259: RC0 = 0;
  9619  10B6  0020               	movlb	0	; select bank0
  9620  10B7  100E               	bcf	14,0	;volatile
  9621                           
  9622                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9623  10B8  0876               	movf	CC2500_WriteREG@w_addr,w
  9624  10B9  00F5               	movwf	??_CC2500_WriteREG
  9625  10BA  0875               	movf	??_CC2500_WriteREG,w
  9626  10BB  0021               	movlb	1	; select bank1
  9627  10BC  00DD               	movwf	_SPI0Buffer^(0+128)
  9628                           
  9629                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9630  10BD  28C1               	goto	l8855
  9631  10BE                     l8853:	
  9632                           
  9633                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9634  10BE  319E  2645  3190   	fcall	_RF_Timeout_Counter
  9635  10C1                     l8855:	
  9636  10C1  0020               	movlb	0	; select bank0
  9637  10C2  1E8E               	btfss	14,5	;volatile
  9638  10C3  28C7               	goto	l8859
  9639  10C4  0021               	movlb	1	; select bank1
  9640  10C5  1F31               	btfss	(_RF1^(0+128)+1),6
  9641  10C6  28BE               	goto	l8853
  9642  10C7                     l8859:	
  9643                           
  9644                           ;CC2500_B1.c: 263: };
  9645                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9646  10C7  319B  2346  3190   	fcall	_setRF_TimeoutCleared
  9647                           
  9648                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9649  10CA  319E  2699  3190   	fcall	_CC2500_WriteByte
  9650                           
  9651                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9652  10CD  0874               	movf	CC2500_WriteREG@value,w
  9653  10CE  00F5               	movwf	??_CC2500_WriteREG
  9654  10CF  0875               	movf	??_CC2500_WriteREG,w
  9655  10D0  0021               	movlb	1	; select bank1
  9656  10D1  00DD               	movwf	_SPI0Buffer^(0+128)
  9657                           
  9658                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9659  10D2  319E  2699         	fcall	_CC2500_WriteByte
  9660                           
  9661                           ;CC2500_B1.c: 269: RC0 = 1;
  9662  10D4  0020               	movlb	0	; select bank0
  9663  10D5  140E               	bsf	14,0	;volatile
  9664  10D6  0008               	return
  9665  10D7                     __end_of_CC2500_WriteREG:	
  9666                           
  9667                           	psect	text48
  9668  1C24                     __ptext48:	
  9669 ;; *************** function _CC2500_FrequencyCabr *****************
  9670 ;; Defined at:
  9671 ;;		line 208 in file "../src/CC2500_B1.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;		None
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;		None               void
  9678 ;; Registers used:
  9679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:        0 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    5
  9692 ;; This function calls:
  9693 ;;		_CC2500_WriteCommand
  9694 ;;		_DelayTime_1us
  9695 ;; This function is called by:
  9696 ;;		_CC2500_PowerOnInitial
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           
  9701                           ;psect for function _CC2500_FrequencyCabr
  9702  1C24                     _CC2500_FrequencyCabr:	
  9703                           
  9704                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9708  1C24  3033               	movlw	51
  9709  1C25  319E  26FC  319C   	fcall	_CC2500_WriteCommand
  9710                           
  9711                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9712  1C28  30E8               	movlw	232
  9713  1C29  00F2               	movwf	DelayTime_1us@count
  9714  1C2A  3003               	movlw	3
  9715  1C2B  00F3               	movwf	DelayTime_1us@count+1
  9716  1C2C  3190  20FA         	fcall	_DelayTime_1us
  9717  1C2E  0008               	return
  9718  1C2F                     __end_of_CC2500_FrequencyCabr:	
  9719                           
  9720                           	psect	text49
  9721  10FA                     __ptext49:	
  9722 ;; *************** function _DelayTime_1us *****************
  9723 ;; Defined at:
  9724 ;;		line 327 in file "../src/CC2500_B1.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  count           2    2[COMMON] int 
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;  j               2    6[COMMON] unsigned int 
  9729 ;;  i               2    4[COMMON] unsigned int 
  9730 ;; Return value:  Size  Location     Type
  9731 ;;		None               void
  9732 ;; Registers used:
  9733 ;;		wreg, status,2
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;Total ram usage:        6 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    3
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		_CC2500_PowerRST
  9750 ;;		_CC2500_FrequencyCabr
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           
  9755                           ;psect for function _DelayTime_1us
  9756  10FA                     _DelayTime_1us:	
  9757                           
  9758                           ;CC2500_B1.c: 328: unsigned int i, j;
  9759                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9760                           
  9761                           ;incstack = 0
  9762                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9763  10FA  3001               	movlw	1
  9764  10FB  00F4               	movwf	DelayTime_1us@i
  9765  10FC  3000               	movlw	0
  9766  10FD  00F5               	movwf	DelayTime_1us@i+1
  9767  10FE                     l351:	
  9768  10FE  0873               	movf	DelayTime_1us@count+1,w
  9769  10FF  0275               	subwf	DelayTime_1us@i+1,w
  9770  1100  1D03               	skipz
  9771  1101  2904               	goto	u5595
  9772  1102  0872               	movf	DelayTime_1us@count,w
  9773  1103  0274               	subwf	DelayTime_1us@i,w
  9774  1104                     u5595:	
  9775  1104  1803               	btfsc	3,0
  9776  1105  0008               	return
  9777                           
  9778                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9779  1106  01F6               	clrf	DelayTime_1us@j
  9780  1107  01F7               	clrf	DelayTime_1us@j+1
  9781  1108  3000               	movlw	0
  9782  1109  0277               	subwf	DelayTime_1us@j+1,w
  9783  110A  3002               	movlw	2
  9784  110B  1903               	skipnz
  9785  110C  0276               	subwf	DelayTime_1us@j,w
  9786  110D  1803               	btfsc	3,0
  9787  110E  291A               	goto	l6513
  9788  110F                     l6511:	
  9789  110F  3001               	movlw	1
  9790  1110  07F6               	addwf	DelayTime_1us@j,f
  9791  1111  3000               	movlw	0
  9792  1112  3DF7               	addwfc	DelayTime_1us@j+1,f
  9793  1113  3000               	movlw	0
  9794  1114  0277               	subwf	DelayTime_1us@j+1,w
  9795  1115  3002               	movlw	2
  9796  1116  1903               	skipnz
  9797  1117  0276               	subwf	DelayTime_1us@j,w
  9798  1118  1C03               	skipc
  9799  1119  290F               	goto	l6511
  9800  111A                     l6513:	
  9801  111A  3001               	movlw	1
  9802  111B  07F4               	addwf	DelayTime_1us@i,f
  9803  111C  3000               	movlw	0
  9804  111D  3DF5               	addwfc	DelayTime_1us@i+1,f
  9805  111E  28FE               	goto	l351
  9806  111F                     __end_of_DelayTime_1us:	
  9807                           
  9808                           	psect	text50
  9809  1B4E                     __ptext50:	
  9810 ;; *************** function _CC2500_ClearTXFIFO *****************
  9811 ;; Defined at:
  9812 ;;		line 194 in file "../src/CC2500_B1.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;		None
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;		None               void
  9819 ;; Registers used:
  9820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;Total ram usage:        0 bytes
  9831 ;; Hardware stack levels used:    1
  9832 ;; Hardware stack levels required when called:    5
  9833 ;; This function calls:
  9834 ;;		_CC2500_WriteCommand
  9835 ;; This function is called by:
  9836 ;;		_CC2500_PowerOnInitial
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           
  9841                           ;psect for function _CC2500_ClearTXFIFO
  9842  1B4E                     _CC2500_ClearTXFIFO:	
  9843                           
  9844                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9848  1B4E  303B               	movlw	59
  9849  1B4F  319E  26FC         	fcall	_CC2500_WriteCommand
  9850  1B51  0008               	return
  9851  1B52                     __end_of_CC2500_ClearTXFIFO:	
  9852                           
  9853                           	psect	text51
  9854  1B4A                     __ptext51:	
  9855 ;; *************** function _CC2500_ClearRXFIFO *****************
  9856 ;; Defined at:
  9857 ;;		line 201 in file "../src/CC2500_B1.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;		None               void
  9864 ;; Registers used:
  9865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;Total ram usage:        0 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    5
  9878 ;; This function calls:
  9879 ;;		_CC2500_WriteCommand
  9880 ;; This function is called by:
  9881 ;;		_CC2500_PowerOnInitial
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function _CC2500_ClearRXFIFO
  9887  1B4A                     _CC2500_ClearRXFIFO:	
  9888                           
  9889                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9890                           
  9891                           ;incstack = 0
  9892                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9893  1B4A  303A               	movlw	58
  9894  1B4B  319E  26FC         	fcall	_CC2500_WriteCommand
  9895  1B4D  0008               	return
  9896  1B4E                     __end_of_CC2500_ClearRXFIFO:	
  9897                           
  9898                           	psect	text52
  9899  1EFC                     __ptext52:	
  9900 ;; *************** function _CC2500_WriteCommand *****************
  9901 ;; Defined at:
  9902 ;;		line 292 in file "../src/CC2500_B1.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;  command         1    wreg     unsigned char 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  command         1    5[COMMON] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;		None               void
  9909 ;; Registers used:
  9910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;Total ram usage:        2 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    4
  9923 ;; This function calls:
  9924 ;;		_CC2500_WriteByte
  9925 ;;		_RF_Timeout_Counter
  9926 ;;		_setRF_TimeoutCleared
  9927 ;; This function is called by:
  9928 ;;		_CC2500_TxData
  9929 ;;		_CC2500_RxData
  9930 ;;		_CC2500_ClearTXFIFO
  9931 ;;		_CC2500_ClearRXFIFO
  9932 ;;		_CC2500_FrequencyCabr
  9933 ;;		_CC2500_SIDLEMode
  9934 ;;		_setRF_Main
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           
  9939                           ;psect for function _CC2500_WriteCommand
  9940  1EFC                     _CC2500_WriteCommand:	
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9944                           ;CC2500_WriteCommand@command stored from wreg
  9945  1EFC  00F5               	movwf	CC2500_WriteCommand@command
  9946                           
  9947                           ;CC2500_B1.c: 293: RC0 = 0;
  9948  1EFD  0020               	movlb	0	; select bank0
  9949  1EFE  100E               	bcf	14,0	;volatile
  9950                           
  9951                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9952  1EFF  0875               	movf	CC2500_WriteCommand@command,w
  9953  1F00  00F4               	movwf	??_CC2500_WriteCommand
  9954  1F01  0874               	movf	??_CC2500_WriteCommand,w
  9955  1F02  0021               	movlb	1	; select bank1
  9956  1F03  00DD               	movwf	_SPI0Buffer^(0+128)
  9957                           
  9958                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9959  1F04  2F08               	goto	l8839
  9960  1F05                     l8837:	
  9961                           
  9962                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9963  1F05  319E  2645  319E   	fcall	_RF_Timeout_Counter
  9964  1F08                     l8839:	
  9965  1F08  0020               	movlb	0	; select bank0
  9966  1F09  1E8E               	btfss	14,5	;volatile
  9967  1F0A  2F0E               	goto	l8843
  9968  1F0B  0021               	movlb	1	; select bank1
  9969  1F0C  1F31               	btfss	(_RF1^(0+128)+1),6
  9970  1F0D  2F05               	goto	l8837
  9971  1F0E                     l8843:	
  9972                           
  9973                           ;CC2500_B1.c: 298: };
  9974                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9975  1F0E  319B  2346  319E   	fcall	_setRF_TimeoutCleared
  9976                           
  9977                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9978  1F11  319E  2699         	fcall	_CC2500_WriteByte
  9979                           
  9980                           ;CC2500_B1.c: 302: RC0 = 1;
  9981  1F13  0020               	movlb	0	; select bank0
  9982  1F14  140E               	bsf	14,0	;volatile
  9983  1F15  0008               	return
  9984  1F16                     __end_of_CC2500_WriteCommand:	
  9985                           
  9986                           	psect	text53
  9987  1B46                     __ptext53:	
  9988 ;; *************** function _setRF_TimeoutCleared *****************
  9989 ;; Defined at:
  9990 ;;		line 150 in file "../src/RF_Control_B1.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;		None               void
  9997 ;; Registers used:
  9998 ;;		status,2
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        0 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    3
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_CC2500_TxData
 10015 ;;		_CC2500_RxData
 10016 ;;		_CC2500_PowerRST
 10017 ;;		_CC2500_WriteREG
 10018 ;;		_CC2500_WriteCommand
 10019 ;;		_CC2500_ReadStatus
 10020 ;;		_CC2500_ReadREG
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           
 10025                           ;psect for function _setRF_TimeoutCleared
 10026  1B46                     _setRF_TimeoutCleared:	
 10027                           
 10028                           ;RF_Control_B1.c: 151: RF1.TimeoutCount = 0;
 10029                           
 10030                           ;incstack = 0
 10031                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10032  1B46  0021               	movlb	1	; select bank1
 10033  1B47  01BD               	clrf	(_RF1^(0+128)+13)
 10034  1B48  01BE               	clrf	((_RF1+1)^(0+128)+13)
 10035  1B49  0008               	return
 10036  1B4A                     __end_of_setRF_TimeoutCleared:	
 10037                           
 10038                           	psect	text54
 10039  1E45                     __ptext54:	
 10040 ;; *************** function _RF_Timeout_Counter *****************
 10041 ;; Defined at:
 10042 ;;		line 142 in file "../src/RF_Control_B1.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;		None
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;		None
 10047 ;; Return value:  Size  Location     Type
 10048 ;;		None               void
 10049 ;; Registers used:
 10050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10051 ;; Tracked objects:
 10052 ;;		On entry : 0/0
 10053 ;;		On exit  : 0/0
 10054 ;;		Unchanged: 0/0
 10055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;Total ram usage:        0 bytes
 10061 ;; Hardware stack levels used:    1
 10062 ;; Hardware stack levels required when called:    3
 10063 ;; This function calls:
 10064 ;;		Nothing
 10065 ;; This function is called by:
 10066 ;;		_CC2500_TxData
 10067 ;;		_CC2500_RxData
 10068 ;;		_CC2500_PowerRST
 10069 ;;		_CC2500_WriteREG
 10070 ;;		_CC2500_WriteCommand
 10071 ;;		_CC2500_ReadStatus
 10072 ;;		_CC2500_ReadREG
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           
 10077                           ;psect for function _RF_Timeout_Counter
 10078  1E45                     _RF_Timeout_Counter:	
 10079                           
 10080                           ;RF_Control_B1.c: 143: RF1.TimeoutCount++;
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10084  1E45  3001               	movlw	1
 10085  1E46  0021               	movlb	1	; select bank1
 10086  1E47  07BD               	addwf	(_RF1^(0+128)+13),f
 10087  1E48  3000               	movlw	0
 10088  1E49  3DBE               	addwfc	((_RF1+1)^(0+128)+13),f
 10089                           
 10090                           ;RF_Control_B1.c: 144: if (RF1.TimeoutCount == 25000) {
 10091  1E4A  300D               	movlw	13
 10092  1E4B  3EB0               	addlw	_RF1& (0+255)
 10093  1E4C  0086               	movwf	6
 10094  1E4D  0187               	clrf	7
 10095  1E4E  3F40               	moviw [0]fsr1
 10096  1E4F  3AA8               	xorlw	168
 10097  1E50  1D03               	skipz
 10098  1E51  2E54               	goto	u9005
 10099  1E52  3F41               	moviw [1]fsr1
 10100  1E53  3A61               	xorlw	97
 10101  1E54                     u9005:	
 10102  1E54  1D03               	skipz
 10103  1E55  0008               	return
 10104                           
 10105                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10106  1E56  01BD               	clrf	(_RF1^(0+128)+13)
 10107  1E57  01BE               	clrf	((_RF1+1)^(0+128)+13)
 10108                           
 10109                           ;RF_Control_B1.c: 146: RF1.Timeout = 1;
 10110  1E58  1731               	bsf	(_RF1^(0+128)+1),6
 10111  1E59  0008               	return
 10112  1E5A                     __end_of_RF_Timeout_Counter:	
 10113                           
 10114                           	psect	text55
 10115  1E99                     __ptext55:	
 10116 ;; *************** function _CC2500_WriteByte *****************
 10117 ;; Defined at:
 10118 ;;		line 226 in file "../src/CC2500_B1.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  loop_a          1    3[COMMON] unsigned char 
 10123 ;; Return value:  Size  Location     Type
 10124 ;;		None               void
 10125 ;; Registers used:
 10126 ;;		wreg, status,2, status,0
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;Total ram usage:        2 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    3
 10139 ;; This function calls:
 10140 ;;		Nothing
 10141 ;; This function is called by:
 10142 ;;		_CC2500_TxData
 10143 ;;		_CC2500_RxData
 10144 ;;		_CC2500_PowerRST
 10145 ;;		_CC2500_WriteREG
 10146 ;;		_CC2500_WriteCommand
 10147 ;;		_CC2500_ReadStatus
 10148 ;;		_CC2500_ReadREG
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           
 10153                           ;psect for function _CC2500_WriteByte
 10154  1E99                     _CC2500_WriteByte:	
 10155                           
 10156                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10157                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10158                           
 10159                           ;incstack = 0
 10160                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10161  1E99  01F3               	clrf	CC2500_WriteByte@loop_a
 10162  1E9A                     L6:	
 10163  1E9A  3008               	movlw	8
 10164  1E9B  0273               	subwf	CC2500_WriteByte@loop_a,w
 10165  1E9C  1803               	btfsc	3,0
 10166  1E9D  0008               	return
 10167                           
 10168                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10169  1E9E  0021               	movlb	1	; select bank1
 10170  1E9F  1FDD               	btfss	_SPI0Buffer^(0+128),7
 10171  1EA0  2EA4               	goto	l307
 10172                           
 10173                           ;CC2500_B1.c: 230: RC4 = 1;
 10174  1EA1  0020               	movlb	0	; select bank0
 10175  1EA2  160E               	bsf	14,4	;volatile
 10176  1EA3  2EA6               	goto	l308
 10177  1EA4                     l307:	
 10178                           
 10179                           ;CC2500_B1.c: 231: else
 10180                           ;CC2500_B1.c: 232: RC4 = 0;
 10181  1EA4  0020               	movlb	0	; select bank0
 10182  1EA5  120E               	bcf	14,4	;volatile
 10183  1EA6                     l308:	
 10184                           
 10185                           ;CC2500_B1.c: 233: RC3 = 1;
 10186  1EA6  158E               	bsf	14,3	;volatile
 10187                           
 10188                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10189  1EA7  1003               	clrc
 10190  1EA8  0021               	movlb	1	; select bank1
 10191  1EA9  0DDD               	rlf	_SPI0Buffer^(0+128),f
 10192                           
 10193                           ;CC2500_B1.c: 235: RC3 = 0;
 10194  1EAA  0020               	movlb	0	; select bank0
 10195  1EAB  118E               	bcf	14,3	;volatile
 10196  1EAC  3001               	movlw	1
 10197  1EAD  00F2               	movwf	??_CC2500_WriteByte
 10198  1EAE  0872               	movf	??_CC2500_WriteByte,w
 10199  1EAF  07F3               	addwf	CC2500_WriteByte@loop_a,f
 10200  1EB0  2E9A               	goto	L6
 10201  1EB1                     __end_of_CC2500_WriteByte:	
 10202                           
 10203                           	psect	text56
 10204  1B26                     __ptext56:	
 10205 ;; *************** function _RF_Initialization *****************
 10206 ;; Defined at:
 10207 ;;		line 9 in file "../src/RF_Control_B1.c"
 10208 ;; Parameters:    Size  Location     Type
 10209 ;;		None
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;		None
 10212 ;; Return value:  Size  Location     Type
 10213 ;;		None               void
 10214 ;; Registers used:
 10215 ;;		wreg, status,2, status,0, pclath, cstack
 10216 ;; Tracked objects:
 10217 ;;		On entry : 0/0
 10218 ;;		On exit  : 0/0
 10219 ;;		Unchanged: 0/0
 10220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;Total ram usage:        0 bytes
 10226 ;; Hardware stack levels used:    1
 10227 ;; Hardware stack levels required when called:    4
 10228 ;; This function calls:
 10229 ;;		_setRF_Initialization
 10230 ;; This function is called by:
 10231 ;;		_main
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           
 10236                           ;psect for function _RF_Initialization
 10237  1B26                     _RF_Initialization:	
 10238                           
 10239                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10243  1B26  319B  23E3         	fcall	_setRF_Initialization
 10244  1B28  0008               	return
 10245  1B29                     __end_of_RF_Initialization:	
 10246                           
 10247                           	psect	text57
 10248  1BE3                     __ptext57:	
 10249 ;; *************** function _setRF_Initialization *****************
 10250 ;; Defined at:
 10251 ;;		line 17 in file "../src/RF_Control_B1.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;		None
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;		None
 10256 ;; Return value:  Size  Location     Type
 10257 ;;		None               void
 10258 ;; Registers used:
 10259 ;;		wreg
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;Total ram usage:        1 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    3
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_RF_Initialization
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _setRF_Initialization
 10281  1BE3                     _setRF_Initialization:	
 10282                           
 10283                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10284                           
 10285                           ;incstack = 0
 10286                           ; Regs used in _setRF_Initialization: [wreg]
 10287  1BE3  3015               	movlw	21
 10288  1BE4  00F2               	movwf	??_setRF_Initialization
 10289  1BE5  0872               	movf	??_setRF_Initialization,w
 10290  1BE6  0021               	movlb	1	; select bank1
 10291  1BE7  00DF               	movwf	_Tx_Length^(0+128)
 10292                           
 10293                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10294  1BE8  30C8               	movlw	200
 10295  1BE9  00B8               	movwf	(_RF1^(0+128)+8)
 10296  1BEA  3000               	movlw	0
 10297  1BEB  00B9               	movwf	(_RF1^(0+128)+9)
 10298  1BEC  0008               	return
 10299  1BED                     __end_of_setRF_Initialization:	
 10300                           
 10301                           	psect	text58
 10302  1DBA                     __ptext58:	
 10303 ;; *************** function _Mcu_Initialization *****************
 10304 ;; Defined at:
 10305 ;;		line 30 in file "../src/MCU_B1.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;		None
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;		None
 10310 ;; Return value:  Size  Location     Type
 10311 ;;		None               void
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0, pclath, cstack
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;Total ram usage:        0 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    4
 10326 ;; This function calls:
 10327 ;;		_ADC_Set
 10328 ;;		_Fosc_Set
 10329 ;;		_IOC_Set
 10330 ;;		_IO_Set
 10331 ;;		_TMR1_Set
 10332 ;;		_WDT_Set
 10333 ;; This function is called by:
 10334 ;;		_main
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _Mcu_Initialization
 10340  1DBA                     _Mcu_Initialization:	
 10341                           
 10342                           ;MCU_B1.c: 32: Fosc_Set();
 10343                           
 10344                           ;incstack = 0
 10345                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10346  1DBA  319B  2342  319D   	fcall	_Fosc_Set
 10347                           
 10348                           ;MCU_B1.c: 34: IO_Set();
 10349  1DBD  319E  26E2  319D   	fcall	_IO_Set
 10350                           
 10351                           ;MCU_B1.c: 36: ;;
 10352                           ;MCU_B1.c: 38: TMR1_Set();
 10353  1DC0  3190  2066  319D   	fcall	_TMR1_Set
 10354                           
 10355                           ;MCU_B1.c: 40: ADC_Set();
 10356  1DC3  319B  2398  319D   	fcall	_ADC_Set
 10357                           
 10358                           ;MCU_B1.c: 42: ;;
 10359                           ;MCU_B1.c: 44: ;;
 10360                           ;MCU_B1.c: 46: IOC_Set();
 10361  1DC6  319C  2419  319D   	fcall	_IOC_Set
 10362                           
 10363                           ;MCU_B1.c: 48: ;;
 10364                           ;MCU_B1.c: 50: ;;
 10365                           ;MCU_B1.c: 52: WDT_Set();
 10366  1DC9  319B  23D9         	fcall	_WDT_Set
 10367  1DCB  0008               	return
 10368  1DCC                     __end_of_Mcu_Initialization:	
 10369                           
 10370                           	psect	text59
 10371  1BD9                     __ptext59:	
 10372 ;; *************** function _WDT_Set *****************
 10373 ;; Defined at:
 10374 ;;		line 1106 in file "../src/MCU_B1.c"
 10375 ;; Parameters:    Size  Location     Type
 10376 ;;		None
 10377 ;; Auto vars:     Size  Location     Type
 10378 ;;		None
 10379 ;; Return value:  Size  Location     Type
 10380 ;;		None               void
 10381 ;; Registers used:
 10382 ;;		wreg
 10383 ;; Tracked objects:
 10384 ;;		On entry : 0/0
 10385 ;;		On exit  : 0/0
 10386 ;;		Unchanged: 0/0
 10387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;Total ram usage:        1 bytes
 10393 ;; Hardware stack levels used:    1
 10394 ;; Hardware stack levels required when called:    3
 10395 ;; This function calls:
 10396 ;;		Nothing
 10397 ;; This function is called by:
 10398 ;;		_Mcu_Initialization
 10399 ;; This function uses a non-reentrant model
 10400 ;;
 10401                           
 10402                           
 10403                           ;psect for function _WDT_Set
 10404  1BD9                     _WDT_Set:	
 10405                           
 10406                           ;MCU_B1.c: 1113: WDTCON = 0b00010111;;
 10407                           
 10408                           ;incstack = 0
 10409                           ; Regs used in _WDT_Set: [wreg]
 10410  1BD9  3017               	movlw	23
 10411  1BDA  0021               	movlb	1	; select bank1
 10412  1BDB  0097               	movwf	23	;volatile
 10413                           
 10414                           ;MCU_B1.c: 1115: WDT.Enable = 1;
 10415  1BDC  0022               	movlb	2	; select bank2
 10416  1BDD  142A               	bsf	_WDT^(0+256),0
 10417                           
 10418                           ;MCU_B1.c: 1116: WDT.Timer = 10;
 10419  1BDE  300A               	movlw	10
 10420  1BDF  00F2               	movwf	??_WDT_Set
 10421  1BE0  0872               	movf	??_WDT_Set,w
 10422  1BE1  00AB               	movwf	(_WDT^(0+256)+1)
 10423  1BE2  0008               	return
 10424  1BE3                     __end_of_WDT_Set:	
 10425                           
 10426                           	psect	text60
 10427  1066                     __ptext60:	
 10428 ;; *************** function _TMR1_Set *****************
 10429 ;; Defined at:
 10430 ;;		line 226 in file "../src/MCU_B1.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;		None
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;		None
 10435 ;; Return value:  Size  Location     Type
 10436 ;;		None               void
 10437 ;; Registers used:
 10438 ;;		wreg
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;Total ram usage:        0 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; Hardware stack levels required when called:    3
 10451 ;; This function calls:
 10452 ;;		Nothing
 10453 ;; This function is called by:
 10454 ;;		_Mcu_Initialization
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458                           
 10459                           ;psect for function _TMR1_Set
 10460  1066                     _TMR1_Set:	
 10461                           
 10462                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10463                           
 10464                           ;incstack = 0
 10465                           ; Regs used in _TMR1_Set: [wreg]
 10466  1066  3041               	movlw	65
 10467  1067  0020               	movlb	0	; select bank0
 10468  1068  0098               	movwf	24	;volatile
 10469                           
 10470                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10471  1069  30FA               	movlw	250
 10472  106A  0097               	movwf	23	;volatile
 10473                           
 10474                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10475  106B  3038               	movlw	56
 10476  106C  0096               	movwf	22	;volatile
 10477                           
 10478                           ;MCU_B1.c: 230: TMR1IE = 1;
 10479  106D  0021               	movlb	1	; select bank1
 10480  106E  1411               	bsf	17,0	;volatile
 10481                           
 10482                           ;MCU_B1.c: 231: PEIE = 1;
 10483  106F  170B               	bsf	11,6	;volatile
 10484                           
 10485                           ;MCU_B1.c: 232: GIE = 1;
 10486  1070  178B               	bsf	11,7	;volatile
 10487  1071  0008               	return
 10488  1072                     __end_of_TMR1_Set:	
 10489                           
 10490                           	psect	text61
 10491  1EE2                     __ptext61:	
 10492 ;; *************** function _IO_Set *****************
 10493 ;; Defined at:
 10494 ;;		line 60 in file "../src/MCU_B1.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;		None
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;		None
 10499 ;; Return value:  Size  Location     Type
 10500 ;;		None               void
 10501 ;; Registers used:
 10502 ;;		wreg, status,2
 10503 ;; Tracked objects:
 10504 ;;		On entry : 0/0
 10505 ;;		On exit  : 0/0
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;Total ram usage:        0 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; Hardware stack levels required when called:    3
 10515 ;; This function calls:
 10516 ;;		Nothing
 10517 ;; This function is called by:
 10518 ;;		_Mcu_Initialization
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           
 10523                           ;psect for function _IO_Set
 10524  1EE2                     _IO_Set:	
 10525                           
 10526                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10527                           
 10528                           ;incstack = 0
 10529                           ; Regs used in _IO_Set: [wreg+status,2]
 10530  1EE2  30F7               	movlw	247
 10531  1EE3  0021               	movlb	1	; select bank1
 10532  1EE4  008C               	movwf	12	;volatile
 10533                           
 10534                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10535  1EE5  3004               	movlw	4
 10536  1EE6  008D               	movwf	13	;volatile
 10537                           
 10538                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10539  1EE7  3026               	movlw	38
 10540  1EE8  008E               	movwf	14	;volatile
 10541                           
 10542                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10543  1EE9  0022               	movlb	2	; select bank2
 10544  1EEA  018C               	clrf	12	;volatile
 10545                           
 10546                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10547  1EEB  018D               	clrf	13	;volatile
 10548                           
 10549                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10550  1EEC  018E               	clrf	14	;volatile
 10551                           
 10552                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10553  1EED  300E               	movlw	14
 10554  1EEE  0023               	movlb	3	; select bank3
 10555  1EEF  008C               	movwf	12	;volatile
 10556                           
 10557                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10558  1EF0  018D               	clrf	13	;volatile
 10559                           
 10560                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10561  1EF1  018E               	clrf	14	;volatile
 10562                           
 10563                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10564  1EF2  30F7               	movlw	247
 10565  1EF3  0020               	movlb	0	; select bank0
 10566  1EF4  008C               	movwf	12	;volatile
 10567                           
 10568                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10569  1EF5  3004               	movlw	4
 10570  1EF6  008D               	movwf	13	;volatile
 10571                           
 10572                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10573  1EF7  3026               	movlw	38
 10574  1EF8  008E               	movwf	14	;volatile
 10575                           
 10576                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10577  1EF9  0024               	movlb	4	; select bank4
 10578  1EFA  018D               	clrf	13	;volatile
 10579  1EFB  0008               	return
 10580  1EFC                     __end_of_IO_Set:	
 10581                           
 10582                           	psect	text62
 10583  1C19                     __ptext62:	
 10584 ;; *************** function _IOC_Set *****************
 10585 ;; Defined at:
 10586 ;;		line 380 in file "../src/MCU_B1.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		wreg, status,2
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    3
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_Mcu_Initialization
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _IOC_Set
 10616  1C19                     _IOC_Set:	
 10617                           
 10618                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _IOC_Set: [wreg+status,2]
 10622  1C19  3004               	movlw	4
 10623  1C1A  0027               	movlb	7	; select bank7
 10624  1C1B  0094               	movwf	20	;volatile
 10625                           
 10626                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10627  1C1C  3004               	movlw	4
 10628  1C1D  0095               	movwf	21	;volatile
 10629                           
 10630                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10631  1C1E  0196               	clrf	22	;volatile
 10632                           
 10633                           ;MCU_B1.c: 387: IOCIE = 1;
 10634  1C1F  158B               	bsf	11,3	;volatile
 10635                           
 10636                           ;MCU_B1.c: 388: IOCIF = 0;
 10637  1C20  100B               	bcf	11,0	;volatile
 10638                           
 10639                           ;MCU_B1.c: 389: PEIE = 1;
 10640  1C21  170B               	bsf	11,6	;volatile
 10641                           
 10642                           ;MCU_B1.c: 390: GIE = 1;
 10643  1C22  178B               	bsf	11,7	;volatile
 10644  1C23  0008               	return
 10645  1C24                     __end_of_IOC_Set:	
 10646                           
 10647                           	psect	text63
 10648  1B42                     __ptext63:	
 10649 ;; *************** function _Fosc_Set *****************
 10650 ;; Defined at:
 10651 ;;		line 56 in file "../src/MCU_B1.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;		None
 10656 ;; Return value:  Size  Location     Type
 10657 ;;		None               void
 10658 ;; Registers used:
 10659 ;;		wreg
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        0 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    3
 10672 ;; This function calls:
 10673 ;;		Nothing
 10674 ;; This function is called by:
 10675 ;;		_Mcu_Initialization
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _Fosc_Set
 10681  1B42                     _Fosc_Set:	
 10682                           
 10683                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10684                           
 10685                           ;incstack = 0
 10686                           ; Regs used in _Fosc_Set: [wreg]
 10687  1B42  3078               	movlw	120
 10688  1B43  0021               	movlb	1	; select bank1
 10689  1B44  0099               	movwf	25	;volatile
 10690  1B45  0008               	return
 10691  1B46                     __end_of_Fosc_Set:	
 10692                           
 10693                           	psect	text64
 10694  1B98                     __ptext64:	
 10695 ;; *************** function _ADC_Set *****************
 10696 ;; Defined at:
 10697 ;;		line 428 in file "../src/MCU_B1.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;		None
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;		None
 10702 ;; Return value:  Size  Location     Type
 10703 ;;		None               void
 10704 ;; Registers used:
 10705 ;;		wreg
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        0 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    3
 10718 ;; This function calls:
 10719 ;;		Nothing
 10720 ;; This function is called by:
 10721 ;;		_Mcu_Initialization
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           
 10726                           ;psect for function _ADC_Set
 10727  1B98                     _ADC_Set:	
 10728                           
 10729                           ;MCU_B1.c: 429: ADCON1 = 0xf3;
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in _ADC_Set: [wreg]
 10733  1B98  30F3               	movlw	243
 10734  1B99  0021               	movlb	1	; select bank1
 10735  1B9A  009E               	movwf	30	;volatile
 10736                           
 10737                           ;MCU_B1.c: 430: FVRCON = 0xc1;
 10738  1B9B  30C1               	movlw	193
 10739  1B9C  0022               	movlb	2	; select bank2
 10740  1B9D  0097               	movwf	23	;volatile
 10741  1B9E  0008               	return
 10742  1B9F                     __end_of_ADC_Set:	
 10743                           
 10744                           	psect	text65
 10745  0053                     __ptext65:	
 10746 ;; *************** function _Load_Main *****************
 10747 ;; Defined at:
 10748 ;;		line 40 in file "../src/OverLoad_B1.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;		None
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;  i               2    8[BANK0 ] int 
 10753 ;;  LightsCount     1    7[BANK0 ] unsigned char 
 10754 ;;  Load_RunStat    1    6[BANK0 ] unsigned char 
 10755 ;;  ErrorCountVa    1    5[BANK0 ] unsigned char 
 10756 ;;  error           1    2[BANK0 ] unsigned char 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;		None               void
 10759 ;; Registers used:
 10760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;Total ram usage:       10 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    4
 10773 ;; This function calls:
 10774 ;;		___lwdiv
 10775 ;;		___wmul
 10776 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10777 ;;		_getDimmer_LoadGO
 10778 ;;		_getDimmer_Load_Status
 10779 ;;		_getMain_All_Error_Status
 10780 ;;		_getMain_All_LightsStatus
 10781 ;;		_getMain_Lights_Count
 10782 ;;		_setLoad_AH_AL_Restore
 10783 ;; This function is called by:
 10784 ;;		_main
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _Load_Main
 10790  0053                     _Load_Main:	
 10791                           
 10792                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10796  0053  3000               	movlw	0
 10797  0054  3191  21C6  3180   	fcall	_getMain_All_Error_Status
 10798  0057  0020               	movlb	0	; select bank0
 10799  0058  00A0               	movwf	??_Load_Main
 10800  0059  0820               	movf	??_Load_Main,w
 10801  005A  00A2               	movwf	Load_Main@error
 10802                           
 10803                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10804  005B  01A6               	clrf	Load_Main@Load_RunStatus
 10805  005C  01A5               	clrf	Load_Main@ErrorCountValue
 10806  005D  01A7               	clrf	Load_Main@LightsCount
 10807                           
 10808                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10809  005E  0022               	movlb	2	; select bank2
 10810  005F  1C30               	btfss	_Load^(0+256),0
 10811  0060  29ED               	goto	l1679
 10812                           
 10813                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10814  0061  319B  23A6  3180   	fcall	_getMain_All_LightsStatus
 10815  0064  3800               	iorlw	0
 10816  0065  1D03               	skipz
 10817  0066  2869               	goto	l9905
 10818                           
 10819                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10820  0067  0022               	movlb	2	; select bank2
 10821  0068  288A               	goto	l9923
 10822  0069                     l9905:	
 10823                           ;OverLoad_B1.c: 47: } else {
 10824                           
 10825                           
 10826                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10827  0069  0020               	movlb	0	; select bank0
 10828  006A  08A2               	movf	Load_Main@error,f
 10829  006B  1D03               	skipz
 10830  006C  2887               	goto	l1682
 10831  006D  319C  24E6  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10832  0070  3800               	iorlw	0
 10833  0071  1D03               	skipz
 10834  0072  2887               	goto	l1682
 10835                           
 10836                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10837  0073  0022               	movlb	2	; select bank2
 10838  0074  14B0               	bsf	_Load^(0+256),1
 10839                           
 10840                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10841  0075  319B  238A  3180   	fcall	_getDimmer_LoadGO
 10842  0078  3A01               	xorlw	1
 10843  0079  1D03               	skipz
 10844  007A  2882               	goto	l1683
 10845                           
 10846                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10847  007B  0022               	movlb	2	; select bank2
 10848  007C  1DB0               	btfss	_Load^(0+256),3
 10849  007D  1BB0               	btfsc	_Load^(0+256),7
 10850  007E  288B               	goto	l1681
 10851                           
 10852                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10853  007F  15B0               	bsf	_Load^(0+256),3
 10854                           
 10855                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10856  0080  01D5               	clrf	(_Load^(0+256)+37)
 10857                           
 10858                           ;OverLoad_B1.c: 57: }
 10859                           ;OverLoad_B1.c: 58: } else {
 10860  0081  288B               	goto	l1681
 10861  0082                     l1683:	
 10862                           
 10863                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10864  0082  0022               	movlb	2	; select bank2
 10865  0083  1FB0               	btfss	_Load^(0+256),7
 10866  0084  288B               	goto	l1681
 10867                           
 10868                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10869  0085  13B0               	bcf	_Load^(0+256),7
 10870                           
 10871                           ;OverLoad_B1.c: 61: }
 10872                           ;OverLoad_B1.c: 62: }
 10873                           ;OverLoad_B1.c: 63: } else {
 10874  0086  288B               	goto	l1681
 10875  0087                     l1682:	
 10876                           
 10877                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10878  0087  0022               	movlb	2	; select bank2
 10879  0088  1CB0               	btfss	_Load^(0+256),1
 10880  0089  288B               	goto	l1681
 10881  008A                     l9923:	
 10882                           
 10883                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10884  008A  10B0               	bcf	_Load^(0+256),1
 10885  008B                     l1681:	
 10886                           
 10887                           ;OverLoad_B1.c: 66: }
 10888                           ;OverLoad_B1.c: 67: }
 10889                           ;OverLoad_B1.c: 89: }
 10890                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10891  008B  1CB0               	btfss	_Load^(0+256),1
 10892  008C  29C9               	goto	l1689
 10893                           
 10894                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10895  008D  1530               	bsf	_Load^(0+256),2
 10896                           
 10897                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10898  008E  1E30               	btfss	_Load^(0+256),4
 10899  008F  29C7               	goto	l1690
 10900                           
 10901                           ;OverLoad_B1.c: 96: Load.Time++;
 10902  0090  3001               	movlw	1
 10903  0091  07B1               	addwf	(_Load^(0+256)+1),f
 10904  0092  3000               	movlw	0
 10905  0093  3DB2               	addwfc	((_Load+1)^(0+256)+1),f
 10906                           
 10907                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10908  0094  3000               	movlw	0
 10909  0095  0232               	subwf	((_Load+1)^(0+256)+1),w
 10910  0096  3002               	movlw	2
 10911  0097  1903               	skipnz
 10912  0098  0231               	subwf	(_Load^(0+256)+1),w
 10913  0099  1C03               	skipc
 10914  009A  0008               	return
 10915                           
 10916                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10917  009B  01B1               	clrf	(_Load^(0+256)+1)
 10918  009C  01B2               	clrf	((_Load+1)^(0+256)+1)
 10919                           
 10920                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10921  009D  1230               	bcf	_Load^(0+256),4
 10922                           
 10923                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10924  009E  3001               	movlw	1
 10925  009F  0020               	movlb	0	; select bank0
 10926  00A0  00A8               	movwf	Load_Main@i
 10927  00A1  3000               	movlw	0
 10928  00A2  00A9               	movwf	Load_Main@i+1
 10929  00A3  0829               	movf	Load_Main@i+1,w
 10930  00A4  3A80               	xorlw	128
 10931  00A5  00A0               	movwf	??_Load_Main
 10932  00A6  3080               	movlw	128
 10933  00A7  0220               	subwf	??_Load_Main,w
 10934  00A8  1D03               	skipz
 10935  00A9  28AC               	goto	u10795
 10936  00AA  3004               	movlw	4
 10937  00AB  0228               	subwf	Load_Main@i,w
 10938  00AC                     u10795:	
 10939  00AC  1803               	btfsc	3,0
 10940  00AD  28E0               	goto	l9945
 10941  00AE                     l9939:	
 10942                           
 10943                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10944  00AE  0020               	movlb	0	; select bank0
 10945  00AF  3528               	lslf	Load_Main@i,w
 10946  00B0  3E3B               	addlw	(_Load+11)& (0+255)
 10947  00B1  0086               	movwf	6
 10948  00B2  3001               	movlw	1	; select bank2/3
 10949  00B3  0087               	movwf	7
 10950  00B4  3F40               	moviw [0]fsr1
 10951  00B5  00A0               	movwf	??_Load_Main
 10952  00B6  3F41               	moviw [1]fsr1
 10953  00B7  00A1               	movwf	??_Load_Main+1
 10954  00B8  0820               	movf	??_Load_Main,w
 10955  00B9  0022               	movlb	2	; select bank2
 10956  00BA  07B5               	addwf	(_Load^(0+256)+5),f
 10957  00BB  0020               	movlb	0	; select bank0
 10958  00BC  0821               	movf	??_Load_Main+1,w
 10959  00BD  0022               	movlb	2	; select bank2
 10960  00BE  3DB6               	addwfc	((_Load+1)^(0+256)+5),f
 10961                           
 10962                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10963  00BF  0020               	movlb	0	; select bank0
 10964  00C0  3528               	lslf	Load_Main@i,w
 10965  00C1  3E45               	addlw	(_Load+21)& (0+255)
 10966  00C2  0086               	movwf	6
 10967  00C3  3001               	movlw	1	; select bank2/3
 10968  00C4  0087               	movwf	7
 10969  00C5  3F40               	moviw [0]fsr1
 10970  00C6  00A0               	movwf	??_Load_Main
 10971  00C7  3F41               	moviw [1]fsr1
 10972  00C8  00A1               	movwf	??_Load_Main+1
 10973  00C9  0820               	movf	??_Load_Main,w
 10974  00CA  0022               	movlb	2	; select bank2
 10975  00CB  07B7               	addwf	(_Load^(0+256)+7),f
 10976  00CC  0020               	movlb	0	; select bank0
 10977  00CD  0821               	movf	??_Load_Main+1,w
 10978  00CE  0022               	movlb	2	; select bank2
 10979  00CF  3DB8               	addwfc	((_Load+1)^(0+256)+7),f
 10980  00D0  3001               	movlw	1
 10981  00D1  0020               	movlb	0	; select bank0
 10982  00D2  07A8               	addwf	Load_Main@i,f
 10983  00D3  3000               	movlw	0
 10984  00D4  3DA9               	addwfc	Load_Main@i+1,f
 10985  00D5  0829               	movf	Load_Main@i+1,w
 10986  00D6  3A80               	xorlw	128
 10987  00D7  00A0               	movwf	??_Load_Main
 10988  00D8  3080               	movlw	128
 10989  00D9  0220               	subwf	??_Load_Main,w
 10990  00DA  1D03               	skipz
 10991  00DB  28DE               	goto	u10805
 10992  00DC  3004               	movlw	4
 10993  00DD  0228               	subwf	Load_Main@i,w
 10994  00DE                     u10805:	
 10995  00DE  1C03               	skipc
 10996  00DF  28AE               	goto	l9939
 10997  00E0                     l9945:	
 10998                           
 10999                           ;OverLoad_B1.c: 104: }
 11000                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11001  00E0  3003               	movlw	3
 11002  00E1  00F2               	movwf	___lwdiv@divisor
 11003  00E2  3000               	movlw	0
 11004  00E3  00F3               	movwf	___lwdiv@divisor+1
 11005  00E4  0022               	movlb	2	; select bank2
 11006  00E5  0836               	movf	((_Load+1)^(0+256)+5),w
 11007  00E6  01F5               	clrf	___lwdiv@dividend+1
 11008  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 11009  00E8  0835               	movf	(_Load^(0+256)+5),w
 11010  00E9  01F4               	clrf	___lwdiv@dividend
 11011  00EA  07F4               	addwf	___lwdiv@dividend,f
 11012  00EB  3192  2257  3180   	fcall	___lwdiv
 11013  00EE  0873               	movf	?___lwdiv+1,w
 11014  00EF  0022               	movlb	2	; select bank2
 11015  00F0  01B6               	clrf	((_Load+1)^(0+256)+5)
 11016  00F1  07B6               	addwf	((_Load+1)^(0+256)+5),f
 11017  00F2  0872               	movf	?___lwdiv,w
 11018  00F3  01B5               	clrf	(_Load^(0+256)+5)
 11019  00F4  07B5               	addwf	(_Load^(0+256)+5),f
 11020                           
 11021                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11022  00F5  3003               	movlw	3
 11023  00F6  00F2               	movwf	___lwdiv@divisor
 11024  00F7  3000               	movlw	0
 11025  00F8  00F3               	movwf	___lwdiv@divisor+1
 11026  00F9  0838               	movf	((_Load+1)^(0+256)+7),w
 11027  00FA  01F5               	clrf	___lwdiv@dividend+1
 11028  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 11029  00FC  0837               	movf	(_Load^(0+256)+7),w
 11030  00FD  01F4               	clrf	___lwdiv@dividend
 11031  00FE  07F4               	addwf	___lwdiv@dividend,f
 11032  00FF  3192  2257  3180   	fcall	___lwdiv
 11033  0102  0873               	movf	?___lwdiv+1,w
 11034  0103  0022               	movlb	2	; select bank2
 11035  0104  01B8               	clrf	((_Load+1)^(0+256)+7)
 11036  0105  07B8               	addwf	((_Load+1)^(0+256)+7),f
 11037  0106  0872               	movf	?___lwdiv,w
 11038  0107  01B7               	clrf	(_Load^(0+256)+7)
 11039  0108  07B7               	addwf	(_Load^(0+256)+7),f
 11040                           
 11041                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11042  0109  319F  2730  3180   	fcall	_setLoad_AH_AL_Restore
 11043                           
 11044                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11045  010C  0022               	movlb	2	; select bank2
 11046  010D  0838               	movf	((_Load+1)^(0+256)+7),w
 11047  010E  0236               	subwf	((_Load+1)^(0+256)+5),w
 11048  010F  1D03               	skipz
 11049  0110  2913               	goto	u10815
 11050  0111  0837               	movf	(_Load^(0+256)+7),w
 11051  0112  0235               	subwf	(_Load^(0+256)+5),w
 11052  0113                     u10815:	
 11053  0113  1C03               	skipc
 11054  0114  0008               	return
 11055                           
 11056                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11057  0115  3005               	movlw	5
 11058  0116  3E30               	addlw	_Load& (0+255)
 11059  0117  0086               	movwf	6
 11060  0118  3001               	movlw	1	; select bank2/3
 11061  0119  0087               	movwf	7
 11062  011A  0937               	comf	(_Load^(0+256)+7),w
 11063  011B  0020               	movlb	0	; select bank0
 11064  011C  00A0               	movwf	??_Load_Main
 11065  011D  0022               	movlb	2	; select bank2
 11066  011E  0938               	comf	((_Load+1)^(0+256)+7),w
 11067  011F  0020               	movlb	0	; select bank0
 11068  0120  00A1               	movwf	??_Load_Main+1
 11069  0121  0AA0               	incf	??_Load_Main,f
 11070  0122  1903               	skipnz
 11071  0123  0AA1               	incf	??_Load_Main+1,f
 11072  0124  3F40               	moviw [0]fsr1
 11073  0125  0720               	addwf	??_Load_Main,w
 11074  0126  0022               	movlb	2	; select bank2
 11075  0127  00CF               	movwf	(_Load^(0+256)+31)
 11076  0128  3F41               	moviw [1]fsr1
 11077  0129  0020               	movlb	0	; select bank0
 11078  012A  3D21               	addwfc	??_Load_Main+1,w
 11079  012B  0022               	movlb	2	; select bank2
 11080  012C  00D0               	movwf	(_Load^(0+256)+32)
 11081                           
 11082                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11083  012D  01B5               	clrf	(_Load^(0+256)+5)
 11084  012E  01B6               	clrf	((_Load+1)^(0+256)+5)
 11085                           
 11086                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11087  012F  01B7               	clrf	(_Load^(0+256)+7)
 11088  0130  01B8               	clrf	((_Load+1)^(0+256)+7)
 11089                           
 11090                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11091  0131  1DB0               	btfss	_Load^(0+256),3
 11092  0132  2989               	goto	l9985
 11093                           
 11094                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11095  0133  3002               	movlw	2
 11096  0134  0255               	subwf	(_Load^(0+256)+37),w
 11097  0135  1803               	skipnc
 11098  0136  2989               	goto	l9985
 11099                           
 11100                           ;OverLoad_B1.c: 117: Load.Count++;
 11101  0137  3001               	movlw	1
 11102  0138  0020               	movlb	0	; select bank0
 11103  0139  00A0               	movwf	??_Load_Main
 11104  013A  0820               	movf	??_Load_Main,w
 11105  013B  0022               	movlb	2	; select bank2
 11106  013C  07D5               	addwf	(_Load^(0+256)+37),f
 11107                           
 11108                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11109  013D  319B  2391  3180   	fcall	_getDimmer_Load_Status
 11110  0140  0020               	movlb	0	; select bank0
 11111  0141  00A0               	movwf	??_Load_Main
 11112  0142  0820               	movf	??_Load_Main,w
 11113  0143  00A6               	movwf	Load_Main@Load_RunStatus
 11114                           
 11115                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11116  0144  319C  246A  3180   	fcall	_getMain_Lights_Count
 11117  0147  0020               	movlb	0	; select bank0
 11118  0148  00A0               	movwf	??_Load_Main
 11119  0149  0820               	movf	??_Load_Main,w
 11120  014A  00A7               	movwf	Load_Main@LightsCount
 11121                           
 11122                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11123  014B  0022               	movlb	2	; select bank2
 11124  014C  0855               	movf	(_Load^(0+256)+37),w
 11125  014D  3A01               	xorlw	1
 11126  014E  1D03               	skipz
 11127  014F  2954               	goto	l9971
 11128                           
 11129                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11130  0150  3014               	movlw	20
 11131  0151  00D3               	movwf	(_Load^(0+256)+35)
 11132  0152  3005               	movlw	5
 11133  0153  2961               	goto	L7
 11134  0154                     l9971:	
 11135                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11136                           
 11137  0154  0855               	movf	(_Load^(0+256)+37),w
 11138  0155  3A02               	xorlw	2
 11139  0156  1D03               	skipz
 11140  0157  2989               	goto	l9985
 11141                           
 11142                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11143  0158  0020               	movlb	0	; select bank0
 11144  0159  0827               	movf	Load_Main@LightsCount,w
 11145  015A  3A01               	xorlw	1
 11146  015B  1D03               	skipz
 11147  015C  2963               	goto	l9977
 11148                           
 11149                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11150  015D  3075               	movlw	117
 11151  015E  0022               	movlb	2	; select bank2
 11152  015F  00D3               	movwf	(_Load^(0+256)+35)
 11153  0160  3000               	movlw	0
 11154  0161                     L7:	
 11155  0161  00D4               	movwf	(_Load^(0+256)+36)
 11156                           
 11157                           ;OverLoad_B1.c: 132: } else {
 11158  0162  2989               	goto	l9985
 11159  0163                     l9977:	
 11160                           
 11161                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11162  0163  0020               	movlb	0	; select bank0
 11163  0164  08A6               	movf	Load_Main@Load_RunStatus,f
 11164  0165  1D03               	skipz
 11165  0166  297D               	goto	l9981
 11166                           
 11167                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11168  0167  0827               	movf	Load_Main@LightsCount,w
 11169  0168  00A0               	movwf	??_Load_Main
 11170  0169  01A1               	clrf	??_Load_Main+1
 11171  016A  0820               	movf	??_Load_Main,w
 11172  016B  00F2               	movwf	___wmul@multiplier
 11173  016C  0821               	movf	??_Load_Main+1,w
 11174  016D  00F3               	movwf	___wmul@multiplier+1
 11175  016E  3075               	movlw	117
 11176  016F  00F4               	movwf	___wmul@multiplicand
 11177  0170  3000               	movlw	0
 11178  0171  00F5               	movwf	___wmul@multiplicand+1
 11179  0172  319F  2767  3180   	fcall	___wmul
 11180  0175  0873               	movf	?___wmul+1,w
 11181  0176  0022               	movlb	2	; select bank2
 11182  0177  01D4               	clrf	((_Load+1)^(0+256)+35)
 11183  0178  07D4               	addwf	((_Load+1)^(0+256)+35),f
 11184  0179  0872               	movf	?___wmul,w
 11185  017A  01D3               	clrf	(_Load^(0+256)+35)
 11186  017B  07D3               	addwf	(_Load^(0+256)+35),f
 11187                           
 11188                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11189  017C  2989               	goto	l9985
 11190  017D                     l9981:	
 11191  017D  0020               	movlb	0	; select bank0
 11192  017E  0826               	movf	Load_Main@Load_RunStatus,w
 11193  017F  3A01               	xorlw	1
 11194  0180  1D03               	skipz
 11195  0181  2989               	goto	l9985
 11196                           
 11197                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11198  0182  0022               	movlb	2	; select bank2
 11199  0183  0839               	movf	(_Load^(0+256)+9),w
 11200  0184  3E75               	addlw	117
 11201  0185  00D3               	movwf	(_Load^(0+256)+35)
 11202  0186  3000               	movlw	0
 11203  0187  3D3A               	addwfc	((_Load+1)^(0+256)+9),w
 11204  0188  00D4               	movwf	((_Load+1)^(0+256)+35)
 11205  0189                     l9985:	
 11206                           
 11207                           ;OverLoad_B1.c: 137: }
 11208                           ;OverLoad_B1.c: 138: }
 11209                           ;OverLoad_B1.c: 139: }
 11210                           ;OverLoad_B1.c: 140: }
 11211                           ;OverLoad_B1.c: 141: }
 11212                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11213  0189  0022               	movlb	2	; select bank2
 11214  018A  0854               	movf	((_Load+1)^(0+256)+35),w
 11215  018B  0250               	subwf	((_Load+1)^(0+256)+31),w
 11216  018C  1D03               	skipz
 11217  018D  2990               	goto	u10895
 11218  018E  0853               	movf	(_Load^(0+256)+35),w
 11219  018F  024F               	subwf	(_Load^(0+256)+31),w
 11220  0190                     u10895:	
 11221  0190  1C03               	skipc
 11222  0191  29AF               	goto	l10001
 11223                           
 11224                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11225  0192  0020               	movlb	0	; select bank0
 11226  0193  0827               	movf	Load_Main@LightsCount,w
 11227  0194  3A01               	xorlw	1
 11228  0195  1903               	skipnz
 11229  0196  2999               	goto	l9991
 11230  0197  3003               	movlw	3
 11231  0198  299A               	goto	L8
 11232  0199                     l9991:	
 11233  0199  3002               	movlw	2
 11234  019A                     L8:	
 11235  019A  00A3               	movwf	_Load_Main$4420
 11236  019B  3000               	movlw	0
 11237  019C  00A4               	movwf	_Load_Main$4420+1
 11238  019D  0823               	movf	_Load_Main$4420,w
 11239  019E  00A0               	movwf	??_Load_Main
 11240  019F  0820               	movf	??_Load_Main,w
 11241  01A0  00A5               	movwf	Load_Main@ErrorCountValue
 11242                           
 11243                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11244  01A1  3001               	movlw	1
 11245  01A2  00A0               	movwf	??_Load_Main
 11246  01A3  0820               	movf	??_Load_Main,w
 11247  01A4  0022               	movlb	2	; select bank2
 11248  01A5  07D6               	addwf	(_Load^(0+256)+38),f
 11249                           
 11250                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11251  01A6  0856               	movf	(_Load^(0+256)+38),w
 11252  01A7  0020               	movlb	0	; select bank0
 11253  01A8  0225               	subwf	Load_Main@ErrorCountValue,w
 11254  01A9  1803               	skipnc
 11255  01AA  0008               	return
 11256                           
 11257                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11258  01AB  0022               	movlb	2	; select bank2
 11259  01AC  01D6               	clrf	(_Load^(0+256)+38)
 11260                           
 11261                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11262  01AD  16B0               	bsf	_Load^(0+256),5
 11263                           
 11264                           ;OverLoad_B1.c: 170: }
 11265                           ;OverLoad_B1.c: 171: } else {
 11266  01AE  0008               	return
 11267  01AF                     l10001:	
 11268                           
 11269                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11270  01AF  01D6               	clrf	(_Load^(0+256)+38)
 11271                           
 11272                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11273  01B0  1DB0               	btfss	_Load^(0+256),3
 11274  01B1  0008               	return
 11275                           
 11276                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11277  01B2  3001               	movlw	1
 11278  01B3  0020               	movlb	0	; select bank0
 11279  01B4  00A0               	movwf	??_Load_Main
 11280  01B5  0820               	movf	??_Load_Main,w
 11281  01B6  0022               	movlb	2	; select bank2
 11282  01B7  07D7               	addwf	(_Load^(0+256)+39),f
 11283                           
 11284                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11285  01B8  3003               	movlw	3
 11286  01B9  0257               	subwf	(_Load^(0+256)+39),w
 11287  01BA  1C03               	skipc
 11288  01BB  0008               	return
 11289                           
 11290                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11291  01BC  01D7               	clrf	(_Load^(0+256)+39)
 11292                           
 11293                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11294  01BD  17B0               	bsf	_Load^(0+256),7
 11295                           
 11296                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11297  01BE  11B0               	bcf	_Load^(0+256),3
 11298                           
 11299                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11300  01BF  01D5               	clrf	(_Load^(0+256)+37)
 11301                           
 11302                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11303  01C0  0850               	movf	((_Load+1)^(0+256)+31),w
 11304  01C1  01BA               	clrf	((_Load+1)^(0+256)+9)
 11305  01C2  07BA               	addwf	((_Load+1)^(0+256)+9),f
 11306  01C3  084F               	movf	(_Load^(0+256)+31),w
 11307  01C4  01B9               	clrf	(_Load^(0+256)+9)
 11308  01C5  07B9               	addwf	(_Load^(0+256)+9),f
 11309                           
 11310                           ;OverLoad_B1.c: 184: }
 11311                           ;OverLoad_B1.c: 185: }
 11312                           ;OverLoad_B1.c: 208: }
 11313                           ;OverLoad_B1.c: 209: }
 11314                           ;OverLoad_B1.c: 210: }
 11315                           ;OverLoad_B1.c: 211: } else {
 11316  01C6  0008               	return
 11317  01C7                     l1690:	
 11318                           
 11319                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11320  01C7  1630               	bsf	_Load^(0+256),4
 11321                           
 11322                           ;OverLoad_B1.c: 213: }
 11323                           ;OverLoad_B1.c: 214: } else {
 11324  01C8  0008               	return
 11325  01C9                     l1689:	
 11326                           
 11327                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11328  01C9  1D30               	btfss	_Load^(0+256),2
 11329  01CA  29DC               	goto	l10037
 11330                           
 11331                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11332  01CB  1130               	bcf	_Load^(0+256),2
 11333                           
 11334                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11335  01CC  1230               	bcf	_Load^(0+256),4
 11336                           
 11337                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11338  01CD  01B1               	clrf	(_Load^(0+256)+1)
 11339  01CE  01B2               	clrf	((_Load+1)^(0+256)+1)
 11340                           
 11341                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11342  01CF  319F  2730  3180   	fcall	_setLoad_AH_AL_Restore
 11343                           
 11344                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11345  01D2  0022               	movlb	2	; select bank2
 11346  01D3  01D6               	clrf	(_Load^(0+256)+38)
 11347                           
 11348                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11349  01D4  01D7               	clrf	(_Load^(0+256)+39)
 11350                           
 11351                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11352  01D5  01B5               	clrf	(_Load^(0+256)+5)
 11353  01D6  01B6               	clrf	((_Load+1)^(0+256)+5)
 11354                           
 11355                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11356  01D7  01B7               	clrf	(_Load^(0+256)+7)
 11357  01D8  01B8               	clrf	((_Load+1)^(0+256)+7)
 11358                           
 11359                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11360  01D9  11B0               	bcf	_Load^(0+256),3
 11361                           
 11362                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11363  01DA  01D5               	clrf	(_Load^(0+256)+37)
 11364                           
 11365                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11366  01DB  13B0               	bcf	_Load^(0+256),7
 11367  01DC                     l10037:	
 11368                           
 11369                           ;OverLoad_B1.c: 257: }
 11370                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11371  01DC  1EB0               	btfss	_Load^(0+256),5
 11372  01DD  0008               	return
 11373                           
 11374                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11375  01DE  3001               	movlw	1
 11376  01DF  07B3               	addwf	(_Load^(0+256)+3),f
 11377  01E0  3000               	movlw	0
 11378  01E1  3DB4               	addwfc	((_Load+1)^(0+256)+3),f
 11379                           
 11380                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11381  01E2  3001               	movlw	1
 11382  01E3  0234               	subwf	((_Load+1)^(0+256)+3),w
 11383  01E4  30F4               	movlw	244
 11384  01E5  1903               	skipnz
 11385  01E6  0233               	subwf	(_Load^(0+256)+3),w
 11386  01E7  1C03               	skipc
 11387  01E8  0008               	return
 11388                           
 11389                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11390  01E9  01B3               	clrf	(_Load^(0+256)+3)
 11391  01EA  01B4               	clrf	((_Load+1)^(0+256)+3)
 11392                           
 11393                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11394  01EB  12B0               	bcf	_Load^(0+256),5
 11395                           
 11396                           ;OverLoad_B1.c: 263: }
 11397                           ;OverLoad_B1.c: 264: }
 11398                           ;OverLoad_B1.c: 265: }
 11399                           ;OverLoad_B1.c: 266: } else {
 11400  01EC  0008               	return
 11401  01ED                     l1679:	
 11402                           
 11403                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11404  01ED  0021               	movlb	1	; select bank1
 11405  01EE  1C3F               	btfss	_myMain^(0+128),0
 11406  01EF  0008               	return
 11407                           
 11408                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11409  01F0  0022               	movlb	2	; select bank2
 11410  01F1  1430               	bsf	_Load^(0+256),0
 11411  01F2  0008               	return
 11412  01F3                     __end_of_Load_Main:	
 11413                           
 11414                           	psect	text66
 11415  1C6A                     __ptext66:	
 11416 ;; *************** function _getMain_Lights_Count *****************
 11417 ;; Defined at:
 11418 ;;		line 465 in file "../src/Main_B1.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;		None
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;  count           1    4[COMMON] unsigned char 
 11423 ;;  status1         1    3[COMMON] unsigned char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  1    wreg      unsigned char 
 11426 ;; Registers used:
 11427 ;;		wreg, status,2
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;Total ram usage:        3 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    3
 11440 ;; This function calls:
 11441 ;;		Nothing
 11442 ;; This function is called by:
 11443 ;;		_Load_Main
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           
 11448                           ;psect for function _getMain_Lights_Count
 11449  1C6A                     _getMain_Lights_Count:	
 11450                           
 11451                           ;Main_B1.c: 466: char count = 0;
 11452                           
 11453                           ;incstack = 0
 11454                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11455  1C6A  01F4               	clrf	getMain_Lights_Count@count
 11456                           
 11457                           ;Main_B1.c: 470: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11458  1C6B  3000               	movlw	0
 11459  1C6C  0021               	movlb	1	; select bank1
 11460  1C6D  19A0               	btfsc	_DimmerIntr1^(0+128),3
 11461  1C6E  3001               	movlw	1
 11462  1C6F  00F3               	movwf	getMain_Lights_Count@status1
 11463                           
 11464                           ;Main_B1.c: 493: count = status1;
 11465  1C70  0873               	movf	getMain_Lights_Count@status1,w
 11466  1C71  00F2               	movwf	??_getMain_Lights_Count
 11467  1C72  0872               	movf	??_getMain_Lights_Count,w
 11468  1C73  00F4               	movwf	getMain_Lights_Count@count
 11469                           
 11470                           ;Main_B1.c: 501: return count;
 11471  1C74  0874               	movf	getMain_Lights_Count@count,w
 11472  1C75  0008               	return
 11473  1C76                     __end_of_getMain_Lights_Count:	
 11474                           
 11475                           	psect	text67
 11476  1B91                     __ptext67:	
 11477 ;; *************** function _getDimmer_Load_Status *****************
 11478 ;; Defined at:
 11479 ;;		line 1286 in file "../src/Dimmer_B1.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;		None
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;  status          1    2[COMMON] unsigned char 
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  1    wreg      unsigned char 
 11486 ;; Registers used:
 11487 ;;		wreg, status,2
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;Total ram usage:        1 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:    3
 11500 ;; This function calls:
 11501 ;;		Nothing
 11502 ;; This function is called by:
 11503 ;;		_Load_Main
 11504 ;; This function uses a non-reentrant model
 11505 ;;
 11506                           
 11507                           
 11508                           ;psect for function _getDimmer_Load_Status
 11509  1B91                     _getDimmer_Load_Status:	
 11510                           
 11511                           ;Dimmer_B1.c: 1287: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11512                           
 11513                           ;incstack = 0
 11514                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11515  1B91  3000               	movlw	0
 11516  1B92  0022               	movlb	2	; select bank2
 11517  1B93  1920               	btfsc	_Dimmer^(0+256),2
 11518  1B94  3001               	movlw	1
 11519  1B95  00F2               	movwf	getDimmer_Load_Status@status
 11520                           
 11521                           ;Dimmer_B1.c: 1288: return status;
 11522  1B96  0872               	movf	getDimmer_Load_Status@status,w
 11523  1B97  0008               	return
 11524  1B98                     __end_of_getDimmer_Load_Status:	
 11525                           
 11526                           	psect	text68
 11527  1B8A                     __ptext68:	
 11528 ;; *************** function _getDimmer_LoadGO *****************
 11529 ;; Defined at:
 11530 ;;		line 1280 in file "../src/Dimmer_B1.c"
 11531 ;; Parameters:    Size  Location     Type
 11532 ;;		None
 11533 ;; Auto vars:     Size  Location     Type
 11534 ;;  loadgo          1    2[COMMON] unsigned char 
 11535 ;; Return value:  Size  Location     Type
 11536 ;;                  1    wreg      unsigned char 
 11537 ;; Registers used:
 11538 ;;		wreg, status,2
 11539 ;; Tracked objects:
 11540 ;;		On entry : 0/0
 11541 ;;		On exit  : 0/0
 11542 ;;		Unchanged: 0/0
 11543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;Total ram usage:        1 bytes
 11549 ;; Hardware stack levels used:    1
 11550 ;; Hardware stack levels required when called:    3
 11551 ;; This function calls:
 11552 ;;		Nothing
 11553 ;; This function is called by:
 11554 ;;		_Load_Main
 11555 ;; This function uses a non-reentrant model
 11556 ;;
 11557                           
 11558                           
 11559                           ;psect for function _getDimmer_LoadGO
 11560  1B8A                     _getDimmer_LoadGO:	
 11561                           
 11562                           ;Dimmer_B1.c: 1281: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11563                           
 11564                           ;incstack = 0
 11565                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11566  1B8A  3000               	movlw	0
 11567  1B8B  0022               	movlb	2	; select bank2
 11568  1B8C  18A0               	btfsc	_Dimmer^(0+256),1
 11569  1B8D  3001               	movlw	1
 11570  1B8E  00F2               	movwf	getDimmer_LoadGO@loadgo
 11571                           
 11572                           ;Dimmer_B1.c: 1282: return loadgo;
 11573  1B8F  0872               	movf	getDimmer_LoadGO@loadgo,w
 11574  1B90  0008               	return
 11575  1B91                     __end_of_getDimmer_LoadGO:	
 11576                           
 11577                           	psect	text69
 11578  1CE6                     __ptext69:	
 11579 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11580 ;; Defined at:
 11581 ;;		line 320 in file "../src/Dimmer_B1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  status          1    2[COMMON] unsigned char 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  1    wreg      unsigned char 
 11588 ;; Registers used:
 11589 ;;		wreg, status,2, status,0
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        1 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    3
 11602 ;; This function calls:
 11603 ;;		Nothing
 11604 ;; This function is called by:
 11605 ;;		_Load_Main
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           
 11610                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11611  1CE6                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11612                           
 11613                           ;Dimmer_B1.c: 321: char status = 0;
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11617  1CE6  01F2               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11618                           
 11619                           ;Dimmer_B1.c: 332: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11620  1CE7  3000               	movlw	0
 11621  1CE8  0021               	movlb	1	; select bank1
 11622  1CE9  1A20               	btfsc	_DimmerIntr1^(0+128),4
 11623  1CEA  3001               	movlw	1
 11624  1CEB  00F2               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11625                           
 11626                           ;Dimmer_B1.c: 336: if (status == 0) {
 11627  1CEC  08F2               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11628  1CED  1D03               	skipz
 11629  1CEE  2CF3               	goto	l7407
 11630                           
 11631                           ;Dimmer_B1.c: 346: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11632  1CEF  3000               	movlw	0
 11633  1CF0  1B20               	btfsc	_DimmerIntr1^(0+128),6
 11634  1CF1  3001               	movlw	1
 11635  1CF2  00F2               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11636  1CF3                     l7407:	
 11637                           
 11638                           ;Dimmer_B1.c: 348: }
 11639                           ;Dimmer_B1.c: 350: return status;
 11640  1CF3  0872               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11641  1CF4  0008               	return
 11642  1CF5                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11643                           
 11644                           	psect	text70
 11645  1F67                     __ptext70:	
 11646 ;; *************** function ___wmul *****************
 11647 ;; Defined at:
 11648 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;  multiplier      2    2[COMMON] unsigned int 
 11651 ;;  multiplicand    2    4[COMMON] unsigned int 
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;  product         2    6[COMMON] unsigned int 
 11654 ;; Return value:  Size  Location     Type
 11655 ;;                  2    2[COMMON] unsigned int 
 11656 ;; Registers used:
 11657 ;;		wreg, status,2, status,0
 11658 ;; Tracked objects:
 11659 ;;		On entry : 0/0
 11660 ;;		On exit  : 0/0
 11661 ;;		Unchanged: 0/0
 11662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;Total ram usage:        6 bytes
 11668 ;; Hardware stack levels used:    1
 11669 ;; Hardware stack levels required when called:    3
 11670 ;; This function calls:
 11671 ;;		Nothing
 11672 ;; This function is called by:
 11673 ;;		_Load_Main
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           
 11678                           ;psect for function ___wmul
 11679  1F67                     ___wmul:	
 11680                           
 11681                           ;incstack = 0
 11682                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11683  1F67  01F6               	clrf	___wmul@product
 11684  1F68  01F7               	clrf	___wmul@product+1
 11685  1F69                     l7977:	
 11686  1F69  1C72               	btfss	___wmul@multiplier,0
 11687  1F6A  2F6F               	goto	l2794
 11688  1F6B  0874               	movf	___wmul@multiplicand,w
 11689  1F6C  07F6               	addwf	___wmul@product,f
 11690  1F6D  0875               	movf	___wmul@multiplicand+1,w
 11691  1F6E  3DF7               	addwfc	___wmul@product+1,f
 11692  1F6F                     l2794:	
 11693  1F6F  3001               	movlw	1
 11694  1F70                     u7745:	
 11695  1F70  35F4               	lslf	___wmul@multiplicand,f
 11696  1F71  0DF5               	rlf	___wmul@multiplicand+1,f
 11697  1F72  0B89               	decfsz	9,f
 11698  1F73  2F70               	goto	u7745
 11699  1F74  3001               	movlw	1
 11700  1F75                     u7755:	
 11701  1F75  36F3               	lsrf	___wmul@multiplier+1,f
 11702  1F76  0CF2               	rrf	___wmul@multiplier,f
 11703  1F77  0B89               	decfsz	9,f
 11704  1F78  2F75               	goto	u7755
 11705  1F79  0873               	movf	___wmul@multiplier+1,w
 11706  1F7A  0472               	iorwf	___wmul@multiplier,w
 11707  1F7B  1D03               	skipz
 11708  1F7C  2F69               	goto	l7977
 11709  1F7D  0877               	movf	___wmul@product+1,w
 11710  1F7E  01F3               	clrf	?___wmul+1
 11711  1F7F  07F3               	addwf	?___wmul+1,f
 11712  1F80  0876               	movf	___wmul@product,w
 11713  1F81  01F2               	clrf	?___wmul
 11714  1F82  07F2               	addwf	?___wmul,f
 11715  1F83  0008               	return
 11716  1F84                     __end_of___wmul:	
 11717                           
 11718                           	psect	text71
 11719  1257                     __ptext71:	
 11720 ;; *************** function ___lwdiv *****************
 11721 ;; Defined at:
 11722 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;  divisor         2    2[COMMON] unsigned int 
 11725 ;;  dividend        2    4[COMMON] unsigned int 
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;  quotient        2    7[COMMON] unsigned int 
 11728 ;;  counter         1    9[COMMON] unsigned char 
 11729 ;; Return value:  Size  Location     Type
 11730 ;;                  2    2[COMMON] unsigned int 
 11731 ;; Registers used:
 11732 ;;		wreg, status,2, status,0
 11733 ;; Tracked objects:
 11734 ;;		On entry : 0/0
 11735 ;;		On exit  : 0/0
 11736 ;;		Unchanged: 0/0
 11737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11738 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;Total ram usage:        8 bytes
 11743 ;; Hardware stack levels used:    1
 11744 ;; Hardware stack levels required when called:    3
 11745 ;; This function calls:
 11746 ;;		Nothing
 11747 ;; This function is called by:
 11748 ;;		_Load_Main
 11749 ;;		_setTemp_Main
 11750 ;;		_setRF_Main
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754                           
 11755                           ;psect for function ___lwdiv
 11756  1257                     ___lwdiv:	
 11757                           
 11758                           ;incstack = 0
 11759                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11760  1257  01F7               	clrf	___lwdiv@quotient
 11761  1258  01F8               	clrf	___lwdiv@quotient+1
 11762  1259  0873               	movf	___lwdiv@divisor+1,w
 11763  125A  0472               	iorwf	___lwdiv@divisor,w
 11764  125B  1903               	skipnz
 11765  125C  2A86               	goto	l7347
 11766  125D  01F9               	clrf	___lwdiv@counter
 11767  125E  0AF9               	incf	___lwdiv@counter,f
 11768  125F                     l7335:	
 11769  125F  1BF3               	btfsc	___lwdiv@divisor+1,7
 11770  1260  2A6B               	goto	l7337
 11771  1261  3001               	movlw	1
 11772  1262                     u6625:	
 11773  1262  35F2               	lslf	___lwdiv@divisor,f
 11774  1263  0DF3               	rlf	___lwdiv@divisor+1,f
 11775  1264  0B89               	decfsz	9,f
 11776  1265  2A62               	goto	u6625
 11777  1266  3001               	movlw	1
 11778  1267  00F6               	movwf	??___lwdiv
 11779  1268  0876               	movf	??___lwdiv,w
 11780  1269  07F9               	addwf	___lwdiv@counter,f
 11781  126A  2A5F               	goto	l7335
 11782  126B                     l7337:	
 11783  126B  3001               	movlw	1
 11784  126C                     u6645:	
 11785  126C  35F7               	lslf	___lwdiv@quotient,f
 11786  126D  0DF8               	rlf	___lwdiv@quotient+1,f
 11787  126E  0B89               	decfsz	9,f
 11788  126F  2A6C               	goto	u6645
 11789  1270  0873               	movf	___lwdiv@divisor+1,w
 11790  1271  0275               	subwf	___lwdiv@dividend+1,w
 11791  1272  1D03               	skipz
 11792  1273  2A76               	goto	u6655
 11793  1274  0872               	movf	___lwdiv@divisor,w
 11794  1275  0274               	subwf	___lwdiv@dividend,w
 11795  1276                     u6655:	
 11796  1276  1C03               	skipc
 11797  1277  2A7D               	goto	l7343
 11798  1278  0872               	movf	___lwdiv@divisor,w
 11799  1279  02F4               	subwf	___lwdiv@dividend,f
 11800  127A  0873               	movf	___lwdiv@divisor+1,w
 11801  127B  3BF5               	subwfb	___lwdiv@dividend+1,f
 11802  127C  1477               	bsf	___lwdiv@quotient,0
 11803  127D                     l7343:	
 11804  127D  3001               	movlw	1
 11805  127E                     u6665:	
 11806  127E  36F3               	lsrf	___lwdiv@divisor+1,f
 11807  127F  0CF2               	rrf	___lwdiv@divisor,f
 11808  1280  0B89               	decfsz	9,f
 11809  1281  2A7E               	goto	u6665
 11810  1282  3001               	movlw	1
 11811  1283  02F9               	subwf	___lwdiv@counter,f
 11812  1284  1D03               	btfss	3,2
 11813  1285  2A6B               	goto	l7337
 11814  1286                     l7347:	
 11815  1286  0878               	movf	___lwdiv@quotient+1,w
 11816  1287  01F3               	clrf	?___lwdiv+1
 11817  1288  07F3               	addwf	?___lwdiv+1,f
 11818  1289  0877               	movf	___lwdiv@quotient,w
 11819  128A  01F2               	clrf	?___lwdiv
 11820  128B  07F2               	addwf	?___lwdiv,f
 11821  128C  0008               	return
 11822  128D                     __end_of___lwdiv:	
 11823                           
 11824                           	psect	text72
 11825  1B23                     __ptext72:	
 11826 ;; *************** function _Load_Initialization *****************
 11827 ;; Defined at:
 11828 ;;		line 9 in file "../src/OverLoad_B1.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;		None
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;		None
 11833 ;; Return value:  Size  Location     Type
 11834 ;;		None               void
 11835 ;; Registers used:
 11836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11837 ;; Tracked objects:
 11838 ;;		On entry : 0/0
 11839 ;;		On exit  : 0/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;Total ram usage:        0 bytes
 11847 ;; Hardware stack levels used:    1
 11848 ;; Hardware stack levels required when called:    4
 11849 ;; This function calls:
 11850 ;;		_setLoad_AH_AL_Restore
 11851 ;; This function is called by:
 11852 ;;		_main
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           
 11857                           ;psect for function _Load_Initialization
 11858  1B23                     _Load_Initialization:	
 11859                           
 11860                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11861                           
 11862                           ;incstack = 0
 11863                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11864  1B23  319F  2730         	fcall	_setLoad_AH_AL_Restore
 11865  1B25  0008               	return
 11866  1B26                     __end_of_Load_Initialization:	
 11867                           
 11868                           	psect	text73
 11869  1F30                     __ptext73:	
 11870 ;; *************** function _setLoad_AH_AL_Restore *****************
 11871 ;; Defined at:
 11872 ;;		line 294 in file "../src/OverLoad_B1.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;		None
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;  i               1    3[COMMON] unsigned char 
 11877 ;; Return value:  Size  Location     Type
 11878 ;;		None               void
 11879 ;; Registers used:
 11880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11881 ;; Tracked objects:
 11882 ;;		On entry : 0/0
 11883 ;;		On exit  : 0/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;Total ram usage:        2 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    3
 11893 ;; This function calls:
 11894 ;;		Nothing
 11895 ;; This function is called by:
 11896 ;;		_Load_Initialization
 11897 ;;		_Load_Main
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _setLoad_AH_AL_Restore
 11903  1F30                     _setLoad_AH_AL_Restore:	
 11904                           
 11905                           ;OverLoad_B1.c: 295: char i;
 11906                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11907                           
 11908                           ;incstack = 0
 11909                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11910  1F30  01F3               	clrf	setLoad_AH_AL_Restore@i
 11911  1F31                     L9:	
 11912  1F31  3005               	movlw	5
 11913  1F32  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11914  1F33  1803               	btfsc	3,0
 11915  1F34  0008               	return
 11916                           
 11917                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11918  1F35  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11919  1F36  3E3B               	addlw	(_Load+11)& (0+255)
 11920  1F37  0086               	movwf	6
 11921  1F38  3001               	movlw	1	; select bank2/3
 11922  1F39  0087               	movwf	7
 11923  1F3A  3000               	movlw	0
 11924  1F3B  3FC0               	movwi [0]fsr1
 11925  1F3C  3FC1               	movwi [1]fsr1
 11926                           
 11927                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11928  1F3D  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11929  1F3E  3E45               	addlw	(_Load+21)& (0+255)
 11930  1F3F  0086               	movwf	6
 11931  1F40  3001               	movlw	1	; select bank2/3
 11932  1F41  0087               	movwf	7
 11933  1F42  30FF               	movlw	255
 11934  1F43  3FC0               	movwi [0]fsr1
 11935  1F44  30FF               	movlw	255
 11936  1F45  3FC1               	movwi [1]fsr1
 11937  1F46  3001               	movlw	1
 11938  1F47  00F2               	movwf	??_setLoad_AH_AL_Restore
 11939  1F48  0872               	movf	??_setLoad_AH_AL_Restore,w
 11940  1F49  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11941  1F4A  2F31               	goto	L9
 11942  1F4B                     __end_of_setLoad_AH_AL_Restore:	
 11943                           
 11944                           	psect	text74
 11945  1B3E                     __ptext74:	
 11946 ;; *************** function _LED_Main *****************
 11947 ;; Defined at:
 11948 ;;		line 47 in file "../src/LED_B1.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;		None
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;		None
 11953 ;; Return value:  Size  Location     Type
 11954 ;;		None               void
 11955 ;; Registers used:
 11956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;Total ram usage:        0 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    5
 11969 ;; This function calls:
 11970 ;;		_setLED_Main
 11971 ;; This function is called by:
 11972 ;;		_main
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           
 11977                           ;psect for function _LED_Main
 11978  1B3E                     _LED_Main:	
 11979                           
 11980                           ;LED_B1.c: 67: setLED_Main(99);
 11981                           
 11982                           ;incstack = 0
 11983                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11984  1B3E  3063               	movlw	99
 11985  1B3F  3192  2224         	fcall	_setLED_Main
 11986  1B41  0008               	return
 11987  1B42                     __end_of_LED_Main:	
 11988                           
 11989                           	psect	text75
 11990  1224                     __ptext75:	
 11991 ;; *************** function _setLED_Main *****************
 11992 ;; Defined at:
 11993 ;;		line 229 in file "../src/LED_B1.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  led             1    wreg     unsigned char 
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;  led             1    6[COMMON] unsigned char 
 11998 ;; Return value:  Size  Location     Type
 11999 ;;		None               void
 12000 ;; Registers used:
 12001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;Total ram usage:        3 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    4
 12014 ;; This function calls:
 12015 ;;		_LedPointSelect
 12016 ;; This function is called by:
 12017 ;;		_LED_Main
 12018 ;; This function uses a non-reentrant model
 12019 ;;
 12020                           
 12021                           
 12022                           ;psect for function _setLED_Main
 12023  1224                     _setLED_Main:	
 12024                           
 12025                           ;incstack = 0
 12026                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12027                           ;setLED_Main@led stored from wreg
 12028  1224  00F6               	movwf	setLED_Main@led
 12029                           
 12030                           ;LED_B1.c: 230: LedPointSelect(led);
 12031  1225  0876               	movf	setLED_Main@led,w
 12032  1226  319C  2403  3192   	fcall	_LedPointSelect
 12033                           
 12034                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12035  1229  0021               	movlb	1	; select bank1
 12036  122A  085B               	movf	_LED^(0+128),w
 12037  122B  0086               	movwf	6
 12038  122C  3001               	movlw	1	; select bank2/3
 12039  122D  0087               	movwf	7
 12040  122E  1C81               	btfss	1,1
 12041  122F  0008               	return
 12042                           
 12043                           ;LED_B1.c: 232: LED->Time++;
 12044  1230  0A5B               	incf	_LED^(0+128),w
 12045  1231  0086               	movwf	6
 12046  1232  3001               	movlw	1	; select bank2/3
 12047  1233  0087               	movwf	7
 12048  1234  3001               	movlw	1
 12049  1235  0781               	addwf	1,f
 12050  1236  3141               	addfsr 1,1
 12051  1237  1803               	skipnc
 12052  1238  0A81               	incf	1,f
 12053                           
 12054                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12055  1239  0A5B               	incf	_LED^(0+128),w
 12056  123A  0086               	movwf	6
 12057  123B  3001               	movlw	1	; select bank2/3
 12058  123C  0087               	movwf	7
 12059  123D  3F40               	moviw [0]fsr1
 12060  123E  00F4               	movwf	??_setLED_Main
 12061  123F  3F41               	moviw [1]fsr1
 12062  1240  00F5               	movwf	??_setLED_Main+1
 12063  1241  3000               	movlw	0
 12064  1242  0275               	subwf	??_setLED_Main+1,w
 12065  1243  3019               	movlw	25
 12066  1244  1903               	skipnz
 12067  1245  0274               	subwf	??_setLED_Main,w
 12068  1246  1C03               	skipc
 12069  1247  0008               	return
 12070                           
 12071                           ;LED_B1.c: 234: LED->Time = 0;
 12072  1248  0A5B               	incf	_LED^(0+128),w
 12073  1249  0086               	movwf	6
 12074  124A  3001               	movlw	1	; select bank2/3
 12075  124B  0087               	movwf	7
 12076  124C  3000               	movlw	0
 12077  124D  3FC0               	movwi [0]fsr1
 12078  124E  3FC1               	movwi [1]fsr1
 12079                           
 12080                           ;LED_B1.c: 252: if (led == 99) {
 12081  124F  0876               	movf	setLED_Main@led,w
 12082  1250  3A63               	xorlw	99
 12083  1251  1D03               	skipz
 12084  1252  0008               	return
 12085                           
 12086                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12087  1253  3020               	movlw	32
 12088  1254  0020               	movlb	0	; select bank0
 12089  1255  068D               	xorwf	13,f
 12090  1256  0008               	return
 12091  1257                     __end_of_setLED_Main:	
 12092                           
 12093                           	psect	text76
 12094  1B3A                     __ptext76:	
 12095 ;; *************** function _LED_Initialization *****************
 12096 ;; Defined at:
 12097 ;;		line 31 in file "../src/LED_B1.c"
 12098 ;; Parameters:    Size  Location     Type
 12099 ;;		None
 12100 ;; Auto vars:     Size  Location     Type
 12101 ;;		None
 12102 ;; Return value:  Size  Location     Type
 12103 ;;		None               void
 12104 ;; Registers used:
 12105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12106 ;; Tracked objects:
 12107 ;;		On entry : 0/0
 12108 ;;		On exit  : 0/0
 12109 ;;		Unchanged: 0/0
 12110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;Total ram usage:        0 bytes
 12116 ;; Hardware stack levels used:    1
 12117 ;; Hardware stack levels required when called:    6
 12118 ;; This function calls:
 12119 ;;		_setLED_Initialization
 12120 ;; This function is called by:
 12121 ;;		_main
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function _LED_Initialization
 12127  1B3A                     _LED_Initialization:	
 12128                           
 12129                           ;LED_B1.c: 42: setLED_Initialization(99);
 12130                           
 12131                           ;incstack = 0
 12132                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12133  1B3A  3063               	movlw	99
 12134  1B3B  319D  2525         	fcall	_setLED_Initialization
 12135  1B3D  0008               	return
 12136  1B3E                     __end_of_LED_Initialization:	
 12137                           
 12138                           	psect	text77
 12139  1D25                     __ptext77:	
 12140 ;; *************** function _setLED_Initialization *****************
 12141 ;; Defined at:
 12142 ;;		line 74 in file "../src/LED_B1.c"
 12143 ;; Parameters:    Size  Location     Type
 12144 ;;  led             1    wreg     unsigned char 
 12145 ;; Auto vars:     Size  Location     Type
 12146 ;;  led             1    6[COMMON] unsigned char 
 12147 ;; Return value:  Size  Location     Type
 12148 ;;		None               void
 12149 ;; Registers used:
 12150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;Total ram usage:        1 bytes
 12161 ;; Hardware stack levels used:    1
 12162 ;; Hardware stack levels required when called:    5
 12163 ;; This function calls:
 12164 ;;		_LedPointSelect
 12165 ;;		_setLED
 12166 ;; This function is called by:
 12167 ;;		_LED_Initialization
 12168 ;; This function uses a non-reentrant model
 12169 ;;
 12170                           
 12171                           
 12172                           ;psect for function _setLED_Initialization
 12173  1D25                     _setLED_Initialization:	
 12174                           
 12175                           ;incstack = 0
 12176                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12177                           ;setLED_Initialization@led stored from wreg
 12178  1D25  00F6               	movwf	setLED_Initialization@led
 12179                           
 12180                           ;LED_B1.c: 75: LedPointSelect(led);
 12181  1D26  0876               	movf	setLED_Initialization@led,w
 12182  1D27  319C  2403  319D   	fcall	_LedPointSelect
 12183                           
 12184                           ;LED_B1.c: 76: LED->Enable = 1;
 12185  1D2A  0021               	movlb	1	; select bank1
 12186  1D2B  085B               	movf	_LED^(0+128),w
 12187  1D2C  0086               	movwf	6
 12188  1D2D  3001               	movlw	1	; select bank2/3
 12189  1D2E  0087               	movwf	7
 12190  1D2F  1401               	bsf	1,0
 12191                           
 12192                           ;LED_B1.c: 77: setLED(led, 0);
 12193  1D30  01F4               	clrf	setLED@command
 12194  1D31  0876               	movf	setLED_Initialization@led,w
 12195  1D32  3193  236B         	fcall	_setLED
 12196  1D34  0008               	return
 12197  1D35                     __end_of_setLED_Initialization:	
 12198                           
 12199                           	psect	text78
 12200  13E5                     __ptext78:	
 12201 ;; *************** function _Flash_Memory_Main *****************
 12202 ;; Defined at:
 12203 ;;		line 979 in file "../src/MCU_B1.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;		None
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  key_Status      1    0[BANK0 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;		None               void
 12210 ;; Registers used:
 12211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;Total ram usage:        3 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    6
 12224 ;; This function calls:
 12225 ;;		_Flash_Memory_Modify
 12226 ;;		_getAll_Sw_KeyStatus
 12227 ;;		_getMain_All_LightsStatus
 12228 ;; This function is called by:
 12229 ;;		_main
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           
 12234                           ;psect for function _Flash_Memory_Main
 12235  13E5                     _Flash_Memory_Main:	
 12236                           
 12237                           ;MCU_B1.c: 980: char key_Status = 0;
 12238                           
 12239                           ;incstack = 0
 12240                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12241  13E5  0020               	movlb	0	; select bank0
 12242  13E6  01A0               	clrf	Flash_Memory_Main@key_Status
 12243                           
 12244                           ;MCU_B1.c: 982: key_Status = getAll_Sw_KeyStatus();
 12245  13E7  319D  2576  3193   	fcall	_getAll_Sw_KeyStatus
 12246  13EA  00F8               	movwf	??_Flash_Memory_Main
 12247  13EB  0878               	movf	??_Flash_Memory_Main,w
 12248  13EC  0020               	movlb	0	; select bank0
 12249  13ED  00A0               	movwf	Flash_Memory_Main@key_Status
 12250                           
 12251                           ;MCU_B1.c: 984: if (Memory.Modify == 1) {
 12252  13EE  0023               	movlb	3	; select bank3
 12253  13EF  1C62               	btfss	(_Memory^(0+384)+36),0
 12254  13F0  0008               	return
 12255                           
 12256                           ;MCU_B1.c: 985: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12257  13F1  0020               	movlb	0	; select bank0
 12258  13F2  01A1               	clrf	_Flash_Memory_Main$3505
 12259  13F3  319B  23A6  3193   	fcall	_getMain_All_LightsStatus
 12260  13F6  3800               	iorlw	0
 12261  13F7  1D03               	skipz
 12262  13F8  2BFF               	goto	l9837
 12263  13F9  0020               	movlb	0	; select bank0
 12264  13FA  08A0               	movf	Flash_Memory_Main@key_Status,f
 12265  13FB  1D03               	skipz
 12266  13FC  2BFF               	goto	l9837
 12267  13FD  01A1               	clrf	_Flash_Memory_Main$3505
 12268  13FE  0AA1               	incf	_Flash_Memory_Main$3505,f
 12269  13FF                     l9837:	
 12270  13FF  0020               	movlb	0	; select bank0
 12271  1400  0821               	movf	_Flash_Memory_Main$3505,w
 12272  1401  0023               	movlb	3	; select bank3
 12273  1402  10E2               	bcf	(_Memory^(0+384)+36),1
 12274  1403  1D03               	skipz
 12275  1404  14E2               	bsf	(_Memory^(0+384)+36),1
 12276                           
 12277                           ;MCU_B1.c: 986: if (Memory.GO == 1) {
 12278  1405  1CE2               	btfss	(_Memory^(0+384)+36),1
 12279  1406  2C20               	goto	l1297
 12280                           
 12281                           ;MCU_B1.c: 987: Memory.Runtime = 1;
 12282  1407  15E2               	bsf	(_Memory^(0+384)+36),3
 12283                           
 12284                           ;MCU_B1.c: 988: Memory.Time++;
 12285  1408  3001               	movlw	1
 12286  1409  07E0               	addwf	(_Memory^(0+384)+34),f
 12287  140A  3000               	movlw	0
 12288  140B  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 12289                           
 12290                           ;MCU_B1.c: 989: if (Memory.Time == (200 / 20)) {
 12291  140C  3022               	movlw	34
 12292  140D  3EBE               	addlw	_Memory& (0+255)
 12293  140E  0086               	movwf	6
 12294  140F  3001               	movlw	1	; select bank3/4
 12295  1410  0087               	movwf	7
 12296  1411  3F40               	moviw [0]fsr1
 12297  1412  3A0A               	xorlw	10
 12298  1413  1D03               	skipz
 12299  1414  2C17               	goto	u10605
 12300  1415  3F41               	moviw [1]fsr1
 12301  1416  3A00               	xorlw	0
 12302  1417                     u10605:	
 12303  1417  1D03               	skipz
 12304  1418  0008               	return
 12305                           
 12306                           ;MCU_B1.c: 990: Memory.Time = 0;
 12307  1419  01E0               	clrf	(_Memory^(0+384)+34)
 12308  141A  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12309                           
 12310                           ;MCU_B1.c: 991: Memory.Modify = 0;
 12311  141B  1062               	bcf	(_Memory^(0+384)+36),0
 12312                           
 12313                           ;MCU_B1.c: 992: Memory.GO = 0;
 12314  141C  10E2               	bcf	(_Memory^(0+384)+36),1
 12315                           
 12316                           ;MCU_B1.c: 993: Flash_Memory_Modify();
 12317  141D  3187  277E         	fcall	_Flash_Memory_Modify
 12318                           
 12319                           ;MCU_B1.c: 994: }
 12320                           ;MCU_B1.c: 995: } else {
 12321  141F  0008               	return
 12322  1420                     l1297:	
 12323                           
 12324                           ;MCU_B1.c: 996: if (Memory.Runtime == 1) {
 12325  1420  1DE2               	btfss	(_Memory^(0+384)+36),3
 12326  1421  0008               	return
 12327                           
 12328                           ;MCU_B1.c: 997: Memory.Runtime = 0;
 12329  1422  11E2               	bcf	(_Memory^(0+384)+36),3
 12330                           
 12331                           ;MCU_B1.c: 998: Memory.Time = 0;
 12332  1423  01E0               	clrf	(_Memory^(0+384)+34)
 12333  1424  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12334  1425  0008               	return
 12335  1426                     __end_of_Flash_Memory_Main:	
 12336                           
 12337                           	psect	text79
 12338  1D76                     __ptext79:	
 12339 ;; *************** function _getAll_Sw_KeyStatus *****************
 12340 ;; Defined at:
 12341 ;;		line 286 in file "../src/Switch_B1.c"
 12342 ;; Parameters:    Size  Location     Type
 12343 ;;		None
 12344 ;; Auto vars:     Size  Location     Type
 12345 ;;  status          1    3[COMMON] unsigned char 
 12346 ;; Return value:  Size  Location     Type
 12347 ;;                  1    wreg      unsigned char 
 12348 ;; Registers used:
 12349 ;;		wreg, status,2
 12350 ;; Tracked objects:
 12351 ;;		On entry : 0/0
 12352 ;;		On exit  : 0/0
 12353 ;;		Unchanged: 0/0
 12354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;Total ram usage:        3 bytes
 12360 ;; Hardware stack levels used:    1
 12361 ;; Hardware stack levels required when called:    3
 12362 ;; This function calls:
 12363 ;;		Nothing
 12364 ;; This function is called by:
 12365 ;;		_Flash_Memory_Main
 12366 ;; This function uses a non-reentrant model
 12367 ;;
 12368                           
 12369                           
 12370                           ;psect for function _getAll_Sw_KeyStatus
 12371  1D76                     _getAll_Sw_KeyStatus:	
 12372                           
 12373                           ;Switch_B1.c: 287: char status = 0;
 12374                           
 12375                           ;incstack = 0
 12376                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12377  1D76  01F3               	clrf	getAll_Sw_KeyStatus@status
 12378                           
 12379                           ;Switch_B1.c: 311: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12380  1D77  01F4               	clrf	_getAll_Sw_KeyStatus$7188
 12381  1D78  0AF4               	incf	_getAll_Sw_KeyStatus$7188,f
 12382  1D79  0020               	movlb	0	; select bank0
 12383  1D7A  1F0C               	btfss	12,6	;volatile
 12384  1D7B  1A0C               	btfsc	12,4	;volatile
 12385  1D7C  2D81               	goto	l9503
 12386  1D7D  1C0C               	btfss	12,0	;volatile
 12387  1D7E  1B8C               	btfsc	12,7	;volatile
 12388  1D7F  2D81               	goto	l9503
 12389  1D80  01F4               	clrf	_getAll_Sw_KeyStatus$7188
 12390  1D81                     l9503:	
 12391  1D81  0874               	movf	_getAll_Sw_KeyStatus$7188,w
 12392  1D82  00F2               	movwf	??_getAll_Sw_KeyStatus
 12393  1D83  0872               	movf	??_getAll_Sw_KeyStatus,w
 12394  1D84  00F3               	movwf	getAll_Sw_KeyStatus@status
 12395                           
 12396                           ;Switch_B1.c: 315: return status;
 12397  1D85  0873               	movf	getAll_Sw_KeyStatus@status,w
 12398  1D86  0008               	return
 12399  1D87                     __end_of_getAll_Sw_KeyStatus:	
 12400                           
 12401                           	psect	text80
 12402  077E                     __ptext80:	
 12403 ;; *************** function _Flash_Memory_Modify *****************
 12404 ;; Defined at:
 12405 ;;		line 1056 in file "../src/MCU_B1.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;		None
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;  i               1    7[COMMON] unsigned char 
 12410 ;; Return value:  Size  Location     Type
 12411 ;;		None               void
 12412 ;; Registers used:
 12413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;Total ram usage:        2 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:    5
 12426 ;; This function calls:
 12427 ;;		_Flash_Memory_Erasing
 12428 ;;		_Flash_Memory_Read
 12429 ;;		_Flash_Memory_Write
 12430 ;;		_setMemory_Data
 12431 ;; This function is called by:
 12432 ;;		_Flash_Memory_Main
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function _Flash_Memory_Modify
 12438  077E                     _Flash_Memory_Modify:	
 12439                           
 12440                           ;MCU_B1.c: 1057: char i = 0;
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12444  077E  01F7               	clrf	Flash_Memory_Modify@i
 12445                           
 12446                           ;MCU_B1.c: 1058: for (i = 0; i < 32; i++) {
 12447  077F  01F7               	clrf	Flash_Memory_Modify@i
 12448  0780  3020               	movlw	32
 12449  0781  0277               	subwf	Flash_Memory_Modify@i,w
 12450  0782  1803               	btfsc	3,0
 12451  0783  2F98               	goto	l9521
 12452  0784                     l9515:	
 12453                           
 12454                           ;MCU_B1.c: 1059: Memory.Data[i] = Flash_Memory_Read(i);
 12455  0784  0877               	movf	Flash_Memory_Modify@i,w
 12456  0785  319D  25F2  3187   	fcall	_Flash_Memory_Read
 12457  0788  00F6               	movwf	??_Flash_Memory_Modify
 12458  0789  0877               	movf	Flash_Memory_Modify@i,w
 12459  078A  3EBE               	addlw	_Memory& (0+255)
 12460  078B  0086               	movwf	6
 12461  078C  3001               	movlw	1	; select bank3/4
 12462  078D  0087               	movwf	7
 12463  078E  0876               	movf	??_Flash_Memory_Modify,w
 12464  078F  0081               	movwf	1
 12465  0790  3001               	movlw	1
 12466  0791  00F6               	movwf	??_Flash_Memory_Modify
 12467  0792  0876               	movf	??_Flash_Memory_Modify,w
 12468  0793  07F7               	addwf	Flash_Memory_Modify@i,f
 12469  0794  3020               	movlw	32
 12470  0795  0277               	subwf	Flash_Memory_Modify@i,w
 12471  0796  1C03               	skipc
 12472  0797  2F84               	goto	l9515
 12473  0798                     l9521:	
 12474                           
 12475                           ;MCU_B1.c: 1060: }
 12476                           ;MCU_B1.c: 1061: setMemory_Data(6, product->Data[11]);
 12477  0798  087B               	movf	_product,w
 12478  0799  0086               	movwf	6
 12479  079A  3002               	movlw	2	; select bank4/5
 12480  079B  0087               	movwf	7
 12481  079C  3002               	movlw	2	; select bank4/5
 12482  079D  3F4B               	moviw [11]fsr1
 12483  079E  00F2               	movwf	setMemory_Data@data
 12484  079F  3006               	movlw	6
 12485  07A0  319C  240E  3187   	fcall	_setMemory_Data
 12486                           
 12487                           ;MCU_B1.c: 1062: setMemory_Data(0, product->Data[12]);
 12488  07A3  087B               	movf	_product,w
 12489  07A4  0086               	movwf	6
 12490  07A5  3002               	movlw	2	; select bank4/5
 12491  07A6  0087               	movwf	7
 12492  07A7  3002               	movlw	2	; select bank4/5
 12493  07A8  3F4C               	moviw [12]fsr1
 12494  07A9  00F2               	movwf	setMemory_Data@data
 12495  07AA  3000               	movlw	0
 12496  07AB  319C  240E  3187   	fcall	_setMemory_Data
 12497                           
 12498                           ;MCU_B1.c: 1063: setMemory_Data(1, product->Data[13]);
 12499  07AE  087B               	movf	_product,w
 12500  07AF  0086               	movwf	6
 12501  07B0  3002               	movlw	2	; select bank4/5
 12502  07B1  0087               	movwf	7
 12503  07B2  3002               	movlw	2	; select bank4/5
 12504  07B3  3F4D               	moviw [13]fsr1
 12505  07B4  00F2               	movwf	setMemory_Data@data
 12506  07B5  3001               	movlw	1
 12507  07B6  319C  240E  3187   	fcall	_setMemory_Data
 12508                           
 12509                           ;MCU_B1.c: 1064: setMemory_Data(2, product->Data[14]);
 12510  07B9  087B               	movf	_product,w
 12511  07BA  0086               	movwf	6
 12512  07BB  3002               	movlw	2	; select bank4/5
 12513  07BC  0087               	movwf	7
 12514  07BD  3002               	movlw	2	; select bank4/5
 12515  07BE  3F4E               	moviw [14]fsr1
 12516  07BF  00F2               	movwf	setMemory_Data@data
 12517  07C0  3002               	movlw	2
 12518  07C1  319C  240E  3187   	fcall	_setMemory_Data
 12519                           
 12520                           ;MCU_B1.c: 1066: setMemory_Data(3, product->Data[21]);
 12521  07C4  087B               	movf	_product,w
 12522  07C5  0086               	movwf	6
 12523  07C6  3002               	movlw	2	; select bank4/5
 12524  07C7  0087               	movwf	7
 12525  07C8  3002               	movlw	2	; select bank4/5
 12526  07C9  3F55               	moviw [21]fsr1
 12527  07CA  00F2               	movwf	setMemory_Data@data
 12528  07CB  3003               	movlw	3
 12529  07CC  319C  240E  3187   	fcall	_setMemory_Data
 12530                           
 12531                           ;MCU_B1.c: 1067: setMemory_Data(4, product->Data[22]);
 12532  07CF  087B               	movf	_product,w
 12533  07D0  0086               	movwf	6
 12534  07D1  3002               	movlw	2	; select bank4/5
 12535  07D2  0087               	movwf	7
 12536  07D3  3002               	movlw	2	; select bank4/5
 12537  07D4  3F56               	moviw [22]fsr1
 12538  07D5  00F2               	movwf	setMemory_Data@data
 12539  07D6  3004               	movlw	4
 12540  07D7  319C  240E  3187   	fcall	_setMemory_Data
 12541                           
 12542                           ;MCU_B1.c: 1068: setMemory_Data(5, product->Data[23]);
 12543  07DA  087B               	movf	_product,w
 12544  07DB  0086               	movwf	6
 12545  07DC  3002               	movlw	2	; select bank4/5
 12546  07DD  0087               	movwf	7
 12547  07DE  3002               	movlw	2	; select bank4/5
 12548  07DF  3F57               	moviw [23]fsr1
 12549  07E0  00F2               	movwf	setMemory_Data@data
 12550  07E1  3005               	movlw	5
 12551  07E2  319C  240E  3187   	fcall	_setMemory_Data
 12552                           
 12553                           ;MCU_B1.c: 1069: if (myMain.SaveDimmer == 1) {
 12554  07E5  0021               	movlb	1	; select bank1
 12555  07E6  1EC9               	btfss	(_myMain^(0+128)+10),5
 12556  07E7  2FF1               	goto	l9529
 12557                           
 12558                           ;MCU_B1.c: 1070: myMain.SaveDimmer = 0;
 12559  07E8  12C9               	bcf	(_myMain^(0+128)+10),5
 12560                           
 12561                           ;MCU_B1.c: 1071: setMemory_Data(30, 0xaa);
 12562  07E9  30AA               	movlw	170
 12563  07EA  00F6               	movwf	??_Flash_Memory_Modify
 12564  07EB  0876               	movf	??_Flash_Memory_Modify,w
 12565  07EC  00F2               	movwf	setMemory_Data@data
 12566  07ED  301E               	movlw	30
 12567  07EE  319C  240E  3187   	fcall	_setMemory_Data
 12568  07F1                     l9529:	
 12569                           
 12570                           ;MCU_B1.c: 1072: }
 12571                           ;MCU_B1.c: 1074: if (Memory.LoopSave == 1) {
 12572  07F1  0023               	movlb	3	; select bank3
 12573  07F2  1D62               	btfss	(_Memory^(0+384)+36),2
 12574  07F3  2FF8               	goto	l1321
 12575                           
 12576                           ;MCU_B1.c: 1075: Memory.LoopSave = 0;
 12577  07F4  1162               	bcf	(_Memory^(0+384)+36),2
 12578                           
 12579                           ;MCU_B1.c: 1076: myMain.FirstOpen = 0;
 12580  07F5  0021               	movlb	1	; select bank1
 12581  07F6  11BF               	bcf	_myMain^(0+128),3
 12582                           
 12583                           ;MCU_B1.c: 1077: myMain.First = 0;
 12584  07F7  12BF               	bcf	_myMain^(0+128),5
 12585  07F8                     l1321:	
 12586                           
 12587                           ;MCU_B1.c: 1079: }
 12588                           ;MCU_B1.c: 1080: GIE = 0;
 12589  07F8  138B               	bcf	11,7	;volatile
 12590                           
 12591                           ;MCU_B1.c: 1081: Flash_Memory_Erasing();
 12592  07F9  319C  245E  3187   	fcall	_Flash_Memory_Erasing
 12593                           
 12594                           ;MCU_B1.c: 1082: Flash_Memory_Write();
 12595  07FC  3191  2146         	fcall	_Flash_Memory_Write
 12596                           
 12597                           ;MCU_B1.c: 1083: GIE = 1;
 12598  07FE  178B               	bsf	11,7	;volatile
 12599  07FF  0008               	return
 12600  0800                     __end_of_Flash_Memory_Modify:	
 12601                           
 12602                           	psect	text81
 12603  1C5E                     __ptext81:	
 12604 ;; *************** function _Flash_Memory_Erasing *****************
 12605 ;; Defined at:
 12606 ;;		line 1045 in file "../src/MCU_B1.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;		None
 12609 ;; Auto vars:     Size  Location     Type
 12610 ;;		None
 12611 ;; Return value:  Size  Location     Type
 12612 ;;		None               void
 12613 ;; Registers used:
 12614 ;;		wreg, status,2, status,0, pclath, cstack
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;Total ram usage:        0 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; Hardware stack levels required when called:    4
 12627 ;; This function calls:
 12628 ;;		_Flash_Memory_Unlock
 12629 ;; This function is called by:
 12630 ;;		_Flash_Memory_Modify
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           
 12635                           ;psect for function _Flash_Memory_Erasing
 12636  1C5E                     _Flash_Memory_Erasing:	
 12637                           
 12638                           ;MCU_B1.c: 1046: CFGS = 0;
 12639                           
 12640                           ;incstack = 0
 12641                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12642  1C5E  0023               	movlb	3	; select bank3
 12643  1C5F  1315               	bcf	21,6	;volatile
 12644                           
 12645                           ;MCU_B1.c: 1047: PMADRH = 0x30;
 12646  1C60  3030               	movlw	48
 12647  1C61  0092               	movwf	18	;volatile
 12648                           
 12649                           ;MCU_B1.c: 1048: PMADRL = 0x00;
 12650  1C62  0191               	clrf	17	;volatile
 12651                           
 12652                           ;MCU_B1.c: 1049: FREE = 1;
 12653  1C63  1615               	bsf	21,4	;volatile
 12654                           
 12655                           ;MCU_B1.c: 1050: WREN = 1;
 12656  1C64  1515               	bsf	21,2	;volatile
 12657                           
 12658                           ;MCU_B1.c: 1051: Flash_Memory_Unlock();
 12659  1C65  319B  23D0         	fcall	_Flash_Memory_Unlock
 12660                           
 12661                           ;MCU_B1.c: 1052: WREN = 0;
 12662  1C67  0023               	movlb	3	; select bank3
 12663  1C68  1115               	bcf	21,2	;volatile
 12664  1C69  0008               	return
 12665  1C6A                     __end_of_Flash_Memory_Erasing:	
 12666                           
 12667                           	psect	text82
 12668  05FB                     __ptext82:	
 12669 ;; *************** function _Flash_Memory_Initialization *****************
 12670 ;; Defined at:
 12671 ;;		line 933 in file "../src/MCU_B1.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;		None
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  value           1    7[COMMON] unsigned char 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;		None               void
 12678 ;; Registers used:
 12679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;Total ram usage:        2 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    5
 12692 ;; This function calls:
 12693 ;;		_Flash_Memory_Read
 12694 ;;		_Flash_Memory_Write
 12695 ;;		_setMemory_Data
 12696 ;; This function is called by:
 12697 ;;		_main
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           
 12702                           ;psect for function _Flash_Memory_Initialization
 12703  05FB                     _Flash_Memory_Initialization:	
 12704                           
 12705                           ;MCU_B1.c: 934: char value = 0;
 12706                           
 12707                           ;incstack = 0
 12708                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12709  05FB  01F7               	clrf	Flash_Memory_Initialization@value
 12710                           
 12711                           ;MCU_B1.c: 935: if (Flash_Memory_Read(31) == 0xaa) {
 12712  05FC  301F               	movlw	31
 12713  05FD  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12714  0600  3AAA               	xorlw	170
 12715  0601  1D03               	skipz
 12716  0602  2E76               	goto	l9811
 12717                           
 12718                           ;MCU_B1.c: 936: product->Data[11] = Flash_Memory_Read(6);
 12719  0603  3006               	movlw	6
 12720  0604  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12721  0607  00F6               	movwf	??_Flash_Memory_Initialization
 12722  0608  087B               	movf	_product,w
 12723  0609  3E0B               	addlw	11
 12724  060A  0086               	movwf	6
 12725  060B  3002               	movlw	2	; select bank4/5
 12726  060C  0087               	movwf	7
 12727  060D  0876               	movf	??_Flash_Memory_Initialization,w
 12728  060E  0081               	movwf	1
 12729                           
 12730                           ;MCU_B1.c: 937: product->Data[12] = Flash_Memory_Read(0);
 12731  060F  3000               	movlw	0
 12732  0610  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12733  0613  00F6               	movwf	??_Flash_Memory_Initialization
 12734  0614  087B               	movf	_product,w
 12735  0615  3E0C               	addlw	12
 12736  0616  0086               	movwf	6
 12737  0617  3002               	movlw	2	; select bank4/5
 12738  0618  0087               	movwf	7
 12739  0619  0876               	movf	??_Flash_Memory_Initialization,w
 12740  061A  0081               	movwf	1
 12741                           
 12742                           ;MCU_B1.c: 938: product->Data[13] = Flash_Memory_Read(1);
 12743  061B  3001               	movlw	1
 12744  061C  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12745  061F  00F6               	movwf	??_Flash_Memory_Initialization
 12746  0620  087B               	movf	_product,w
 12747  0621  3E0D               	addlw	13
 12748  0622  0086               	movwf	6
 12749  0623  3002               	movlw	2	; select bank4/5
 12750  0624  0087               	movwf	7
 12751  0625  0876               	movf	??_Flash_Memory_Initialization,w
 12752  0626  0081               	movwf	1
 12753                           
 12754                           ;MCU_B1.c: 939: product->Data[14] = Flash_Memory_Read(2);
 12755  0627  3002               	movlw	2
 12756  0628  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12757  062B  00F6               	movwf	??_Flash_Memory_Initialization
 12758  062C  087B               	movf	_product,w
 12759  062D  3E0E               	addlw	14
 12760  062E  0086               	movwf	6
 12761  062F  3002               	movlw	2	; select bank4/5
 12762  0630  0087               	movwf	7
 12763  0631  0876               	movf	??_Flash_Memory_Initialization,w
 12764  0632  0081               	movwf	1
 12765                           
 12766                           ;MCU_B1.c: 942: product->Data[21] = Flash_Memory_Read(3);
 12767  0633  3003               	movlw	3
 12768  0634  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12769  0637  00F6               	movwf	??_Flash_Memory_Initialization
 12770  0638  087B               	movf	_product,w
 12771  0639  3E15               	addlw	21
 12772  063A  0086               	movwf	6
 12773  063B  3002               	movlw	2	; select bank4/5
 12774  063C  0087               	movwf	7
 12775  063D  0876               	movf	??_Flash_Memory_Initialization,w
 12776  063E  0081               	movwf	1
 12777                           
 12778                           ;MCU_B1.c: 943: product->Data[22] = Flash_Memory_Read(4);
 12779  063F  3004               	movlw	4
 12780  0640  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12781  0643  00F6               	movwf	??_Flash_Memory_Initialization
 12782  0644  087B               	movf	_product,w
 12783  0645  3E16               	addlw	22
 12784  0646  0086               	movwf	6
 12785  0647  3002               	movlw	2	; select bank4/5
 12786  0648  0087               	movwf	7
 12787  0649  0876               	movf	??_Flash_Memory_Initialization,w
 12788  064A  0081               	movwf	1
 12789                           
 12790                           ;MCU_B1.c: 944: product->Data[23] = Flash_Memory_Read(5);
 12791  064B  3005               	movlw	5
 12792  064C  319D  25F2  3185   	fcall	_Flash_Memory_Read
 12793  064F  00F6               	movwf	??_Flash_Memory_Initialization
 12794  0650  087B               	movf	_product,w
 12795  0651  3E17               	addlw	23
 12796  0652  0086               	movwf	6
 12797  0653  3002               	movlw	2	; select bank4/5
 12798  0654  0087               	movwf	7
 12799  0655  0876               	movf	??_Flash_Memory_Initialization,w
 12800  0656  0081               	movwf	1
 12801                           
 12802                           ;MCU_B1.c: 951: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12803  0657  087B               	movf	_product,w
 12804  0658  3E0C               	addlw	12
 12805  0659  0086               	movwf	6
 12806  065A  3002               	movlw	2	; select bank4/5
 12807  065B  0087               	movwf	7
 12808  065C  0801               	movf	1,w
 12809  065D  3AFF               	xorlw	255
 12810  065E  1D03               	skipz
 12811  065F  0008               	return
 12812  0660  087B               	movf	_product,w
 12813  0661  3E0D               	addlw	13
 12814  0662  0086               	movwf	6
 12815  0663  3002               	movlw	2	; select bank4/5
 12816  0664  0087               	movwf	7
 12817  0665  0801               	movf	1,w
 12818  0666  3AFF               	xorlw	255
 12819  0667  1D03               	skipz
 12820  0668  0008               	return
 12821  0669  087B               	movf	_product,w
 12822  066A  3E0E               	addlw	14
 12823  066B  0086               	movwf	6
 12824  066C  3002               	movlw	2	; select bank4/5
 12825  066D  0087               	movwf	7
 12826  066E  0801               	movf	1,w
 12827  066F  3AFF               	xorlw	255
 12828  0670  1D03               	skipz
 12829  0671  0008               	return
 12830                           
 12831                           ;MCU_B1.c: 952: myMain.FirstOpen = 1;
 12832  0672  0021               	movlb	1	; select bank1
 12833  0673  15BF               	bsf	_myMain^(0+128),3
 12834                           
 12835                           ;MCU_B1.c: 953: myMain.First = 1;
 12836  0674  16BF               	bsf	_myMain^(0+128),5
 12837                           
 12838                           ;MCU_B1.c: 954: }
 12839                           ;MCU_B1.c: 955: } else {
 12840  0675  0008               	return
 12841  0676                     l9811:	
 12842                           
 12843                           ;MCU_B1.c: 957: setMemory_Data(0, 0xff);
 12844  0676  30FF               	movlw	255
 12845  0677  00F6               	movwf	??_Flash_Memory_Initialization
 12846  0678  0876               	movf	??_Flash_Memory_Initialization,w
 12847  0679  00F2               	movwf	setMemory_Data@data
 12848  067A  3000               	movlw	0
 12849  067B  319C  240E  3185   	fcall	_setMemory_Data
 12850                           
 12851                           ;MCU_B1.c: 958: setMemory_Data(1, 0xff);
 12852  067E  30FF               	movlw	255
 12853  067F  00F6               	movwf	??_Flash_Memory_Initialization
 12854  0680  0876               	movf	??_Flash_Memory_Initialization,w
 12855  0681  00F2               	movwf	setMemory_Data@data
 12856  0682  3001               	movlw	1
 12857  0683  319C  240E  3185   	fcall	_setMemory_Data
 12858                           
 12859                           ;MCU_B1.c: 959: setMemory_Data(2, 0xff);
 12860  0686  30FF               	movlw	255
 12861  0687  00F6               	movwf	??_Flash_Memory_Initialization
 12862  0688  0876               	movf	??_Flash_Memory_Initialization,w
 12863  0689  00F2               	movwf	setMemory_Data@data
 12864  068A  3002               	movlw	2
 12865  068B  319C  240E  3185   	fcall	_setMemory_Data
 12866                           
 12867                           ;MCU_B1.c: 960: setMemory_Data(3, 0xff);
 12868  068E  30FF               	movlw	255
 12869  068F  00F6               	movwf	??_Flash_Memory_Initialization
 12870  0690  0876               	movf	??_Flash_Memory_Initialization,w
 12871  0691  00F2               	movwf	setMemory_Data@data
 12872  0692  3003               	movlw	3
 12873  0693  319C  240E  3185   	fcall	_setMemory_Data
 12874                           
 12875                           ;MCU_B1.c: 961: setMemory_Data(4, 0xff);
 12876  0696  30FF               	movlw	255
 12877  0697  00F6               	movwf	??_Flash_Memory_Initialization
 12878  0698  0876               	movf	??_Flash_Memory_Initialization,w
 12879  0699  00F2               	movwf	setMemory_Data@data
 12880  069A  3004               	movlw	4
 12881  069B  319C  240E  3185   	fcall	_setMemory_Data
 12882                           
 12883                           ;MCU_B1.c: 962: setMemory_Data(5, 0xff);
 12884  069E  30FF               	movlw	255
 12885  069F  00F6               	movwf	??_Flash_Memory_Initialization
 12886  06A0  0876               	movf	??_Flash_Memory_Initialization,w
 12887  06A1  00F2               	movwf	setMemory_Data@data
 12888  06A2  3005               	movlw	5
 12889  06A3  319C  240E  3185   	fcall	_setMemory_Data
 12890                           
 12891                           ;MCU_B1.c: 963: setMemory_Data(6, 0xff);
 12892  06A6  30FF               	movlw	255
 12893  06A7  00F6               	movwf	??_Flash_Memory_Initialization
 12894  06A8  0876               	movf	??_Flash_Memory_Initialization,w
 12895  06A9  00F2               	movwf	setMemory_Data@data
 12896  06AA  3006               	movlw	6
 12897  06AB  319C  240E  3185   	fcall	_setMemory_Data
 12898                           
 12899                           ;MCU_B1.c: 964: setMemory_Data(31, 0xaa);
 12900  06AE  30AA               	movlw	170
 12901  06AF  00F6               	movwf	??_Flash_Memory_Initialization
 12902  06B0  0876               	movf	??_Flash_Memory_Initialization,w
 12903  06B1  00F2               	movwf	setMemory_Data@data
 12904  06B2  301F               	movlw	31
 12905  06B3  319C  240E  3185   	fcall	_setMemory_Data
 12906                           
 12907                           ;MCU_B1.c: 969: GIE = 0;
 12908  06B6  138B               	bcf	11,7	;volatile
 12909                           
 12910                           ;MCU_B1.c: 970: Flash_Memory_Write();
 12911  06B7  3191  2146         	fcall	_Flash_Memory_Write
 12912                           
 12913                           ;MCU_B1.c: 971: GIE = 1;
 12914  06B9  178B               	bsf	11,7	;volatile
 12915                           
 12916                           ;MCU_B1.c: 972: myMain.FirstOpen = 1;
 12917  06BA  0021               	movlb	1	; select bank1
 12918  06BB  15BF               	bsf	_myMain^(0+128),3
 12919                           
 12920                           ;MCU_B1.c: 973: myMain.First = 1;
 12921  06BC  16BF               	bsf	_myMain^(0+128),5
 12922                           
 12923                           ;MCU_B1.c: 974: myMain.InitDimmer = 1;
 12924  06BD  1649               	bsf	(_myMain^(0+128)+10),4
 12925  06BE  0008               	return
 12926  06BF                     __end_of_Flash_Memory_Initialization:	
 12927                           
 12928                           	psect	text83
 12929  1C0E                     __ptext83:	
 12930 ;; *************** function _setMemory_Data *****************
 12931 ;; Defined at:
 12932 ;;		line 1098 in file "../src/MCU_B1.c"
 12933 ;; Parameters:    Size  Location     Type
 12934 ;;  address         1    wreg     unsigned char 
 12935 ;;  data            1    2[COMMON] unsigned char 
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  address         1    4[COMMON] unsigned char 
 12938 ;; Return value:  Size  Location     Type
 12939 ;;		None               void
 12940 ;; Registers used:
 12941 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12942 ;; Tracked objects:
 12943 ;;		On entry : 0/0
 12944 ;;		On exit  : 0/0
 12945 ;;		Unchanged: 0/0
 12946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12947 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12949 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12950 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12951 ;;Total ram usage:        3 bytes
 12952 ;; Hardware stack levels used:    1
 12953 ;; Hardware stack levels required when called:    3
 12954 ;; This function calls:
 12955 ;;		Nothing
 12956 ;; This function is called by:
 12957 ;;		_Flash_Memory_Initialization
 12958 ;;		_Flash_Memory_Modify
 12959 ;; This function uses a non-reentrant model
 12960 ;;
 12961                           
 12962                           
 12963                           ;psect for function _setMemory_Data
 12964  1C0E                     _setMemory_Data:	
 12965                           
 12966                           ;incstack = 0
 12967                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12968                           ;setMemory_Data@address stored from wreg
 12969  1C0E  00F4               	movwf	setMemory_Data@address
 12970                           
 12971                           ;MCU_B1.c: 1099: Memory.Data[address] = data;
 12972  1C0F  0872               	movf	setMemory_Data@data,w
 12973  1C10  00F3               	movwf	??_setMemory_Data
 12974  1C11  0874               	movf	setMemory_Data@address,w
 12975  1C12  3EBE               	addlw	_Memory& (0+255)
 12976  1C13  0086               	movwf	6
 12977  1C14  3001               	movlw	1	; select bank3/4
 12978  1C15  0087               	movwf	7
 12979  1C16  0873               	movf	??_setMemory_Data,w
 12980  1C17  0081               	movwf	1
 12981  1C18  0008               	return
 12982  1C19                     __end_of_setMemory_Data:	
 12983                           
 12984                           	psect	text84
 12985  1146                     __ptext84:	
 12986 ;; *************** function _Flash_Memory_Write *****************
 12987 ;; Defined at:
 12988 ;;		line 1026 in file "../src/MCU_B1.c"
 12989 ;; Parameters:    Size  Location     Type
 12990 ;;		None
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;  i               1    3[COMMON] unsigned char 
 12993 ;; Return value:  Size  Location     Type
 12994 ;;		None               void
 12995 ;; Registers used:
 12996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12997 ;; Tracked objects:
 12998 ;;		On entry : 0/0
 12999 ;;		On exit  : 0/0
 13000 ;;		Unchanged: 0/0
 13001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;Total ram usage:        2 bytes
 13007 ;; Hardware stack levels used:    1
 13008 ;; Hardware stack levels required when called:    4
 13009 ;; This function calls:
 13010 ;;		_Flash_Memory_Unlock
 13011 ;; This function is called by:
 13012 ;;		_Flash_Memory_Initialization
 13013 ;;		_Flash_Memory_Modify
 13014 ;; This function uses a non-reentrant model
 13015 ;;
 13016                           
 13017                           
 13018                           ;psect for function _Flash_Memory_Write
 13019  1146                     _Flash_Memory_Write:	
 13020                           
 13021                           ;MCU_B1.c: 1027: char i = 0;
 13022                           
 13023                           ;incstack = 0
 13024                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13025  1146  01F3               	clrf	Flash_Memory_Write@i
 13026                           
 13027                           ;MCU_B1.c: 1028: CFGS = 0;
 13028  1147  0023               	movlb	3	; select bank3
 13029  1148  1315               	bcf	21,6	;volatile
 13030                           
 13031                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 13032  1149  3030               	movlw	48
 13033  114A  0092               	movwf	18	;volatile
 13034                           
 13035                           ;MCU_B1.c: 1030: PMDATH = 0;
 13036  114B  0194               	clrf	20	;volatile
 13037                           
 13038                           ;MCU_B1.c: 1031: FREE = 0;
 13039  114C  1215               	bcf	21,4	;volatile
 13040                           
 13041                           ;MCU_B1.c: 1032: LWLO = 1;
 13042  114D  1695               	bsf	21,5	;volatile
 13043                           
 13044                           ;MCU_B1.c: 1033: WREN = 1;
 13045  114E  1515               	bsf	21,2	;volatile
 13046                           
 13047                           ;MCU_B1.c: 1034: for (i = 0; i < 32; i++) {
 13048  114F  01F3               	clrf	Flash_Memory_Write@i
 13049  1150  3020               	movlw	32
 13050  1151  0273               	subwf	Flash_Memory_Write@i,w
 13051  1152  1803               	btfsc	3,0
 13052  1153  2969               	goto	l1311
 13053  1154                     l9309:	
 13054                           
 13055                           ;MCU_B1.c: 1035: PMADRL = i;
 13056  1154  0873               	movf	Flash_Memory_Write@i,w
 13057  1155  0023               	movlb	3	; select bank3
 13058  1156  0091               	movwf	17	;volatile
 13059                           
 13060                           ;MCU_B1.c: 1036: PMDATL = Memory.Data[i];
 13061  1157  0873               	movf	Flash_Memory_Write@i,w
 13062  1158  3EBE               	addlw	_Memory& (0+255)
 13063  1159  0086               	movwf	6
 13064  115A  3001               	movlw	1	; select bank3/4
 13065  115B  0087               	movwf	7
 13066  115C  0801               	movf	1,w
 13067  115D  0093               	movwf	19	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13070  115E  319B  23D0  3191   	fcall	_Flash_Memory_Unlock
 13071  1161  3001               	movlw	1
 13072  1162  00F2               	movwf	??_Flash_Memory_Write
 13073  1163  0872               	movf	??_Flash_Memory_Write,w
 13074  1164  07F3               	addwf	Flash_Memory_Write@i,f
 13075  1165  3020               	movlw	32
 13076  1166  0273               	subwf	Flash_Memory_Write@i,w
 13077  1167  1C03               	skipc
 13078  1168  2954               	goto	l9309
 13079  1169                     l1311:	
 13080                           
 13081                           ;MCU_B1.c: 1038: }
 13082                           ;MCU_B1.c: 1039: LWLO = 0;
 13083  1169  0023               	movlb	3	; select bank3
 13084  116A  1295               	bcf	21,5	;volatile
 13085                           
 13086                           ;MCU_B1.c: 1040: Flash_Memory_Unlock();
 13087  116B  319B  23D0         	fcall	_Flash_Memory_Unlock
 13088                           
 13089                           ;MCU_B1.c: 1041: WREN = 0;
 13090  116D  0023               	movlb	3	; select bank3
 13091  116E  1115               	bcf	21,2	;volatile
 13092  116F  0008               	return
 13093  1170                     __end_of_Flash_Memory_Write:	
 13094                           
 13095                           	psect	text85
 13096  1BD0                     __ptext85:	
 13097 ;; *************** function _Flash_Memory_Unlock *****************
 13098 ;; Defined at:
 13099 ;;		line 1005 in file "../src/MCU_B1.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;		None
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;		None
 13104 ;; Return value:  Size  Location     Type
 13105 ;;		None               void
 13106 ;; Registers used:
 13107 ;;		wreg
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;Total ram usage:        0 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    3
 13120 ;; This function calls:
 13121 ;;		Nothing
 13122 ;; This function is called by:
 13123 ;;		_Flash_Memory_Write
 13124 ;;		_Flash_Memory_Erasing
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           
 13129                           ;psect for function _Flash_Memory_Unlock
 13130  1BD0                     _Flash_Memory_Unlock:	
 13131                           
 13132                           ;MCU_B1.c: 1006: PMCON2 = 0x55;
 13133                           
 13134                           ;incstack = 0
 13135                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13136  1BD0  3055               	movlw	85
 13137  1BD1  0023               	movlb	3	; select bank3
 13138  1BD2  0096               	movwf	22	;volatile
 13139                           
 13140                           ;MCU_B1.c: 1007: PMCON2 = 0xaa;
 13141  1BD3  30AA               	movlw	170
 13142  1BD4  0096               	movwf	22	;volatile
 13143                           
 13144                           ;MCU_B1.c: 1008: WR = 1;
 13145  1BD5  1495               	bsf	21,1	;volatile
 13146                           
 13147                           ;MCU_B1.c: 1009: __nop();
 13148  1BD6  0000               	nop
 13149                           
 13150                           ;MCU_B1.c: 1010: __nop();
 13151  1BD7  0000               	nop
 13152  1BD8  0008               	return
 13153  1BD9                     __end_of_Flash_Memory_Unlock:	
 13154                           
 13155                           	psect	text86
 13156  1DF2                     __ptext86:	
 13157 ;; *************** function _Flash_Memory_Read *****************
 13158 ;; Defined at:
 13159 ;;		line 1014 in file "../src/MCU_B1.c"
 13160 ;; Parameters:    Size  Location     Type
 13161 ;;  address         1    wreg     unsigned char 
 13162 ;; Auto vars:     Size  Location     Type
 13163 ;;  address         1    4[COMMON] unsigned char 
 13164 ;;  ret             1    5[COMMON] unsigned char 
 13165 ;;  i               1    3[COMMON] unsigned char 
 13166 ;; Return value:  Size  Location     Type
 13167 ;;                  1    wreg      unsigned char 
 13168 ;; Registers used:
 13169 ;;		wreg, status,2
 13170 ;; Tracked objects:
 13171 ;;		On entry : 0/0
 13172 ;;		On exit  : 0/0
 13173 ;;		Unchanged: 0/0
 13174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;Total ram usage:        4 bytes
 13180 ;; Hardware stack levels used:    1
 13181 ;; Hardware stack levels required when called:    3
 13182 ;; This function calls:
 13183 ;;		Nothing
 13184 ;; This function is called by:
 13185 ;;		_Flash_Memory_Initialization
 13186 ;;		_Flash_Memory_Modify
 13187 ;; This function uses a non-reentrant model
 13188 ;;
 13189                           
 13190                           
 13191                           ;psect for function _Flash_Memory_Read
 13192  1DF2                     _Flash_Memory_Read:	
 13193                           
 13194                           ;incstack = 0
 13195                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13196                           ;Flash_Memory_Read@address stored from wreg
 13197  1DF2  00F4               	movwf	Flash_Memory_Read@address
 13198                           
 13199                           ;MCU_B1.c: 1015: char i = 0, ret = 0;
 13200  1DF3  01F3               	clrf	Flash_Memory_Read@i
 13201  1DF4  01F5               	clrf	Flash_Memory_Read@ret
 13202                           
 13203                           ;MCU_B1.c: 1016: PMADRH = 0x30;
 13204  1DF5  3030               	movlw	48
 13205  1DF6  0023               	movlb	3	; select bank3
 13206  1DF7  0092               	movwf	18	;volatile
 13207                           
 13208                           ;MCU_B1.c: 1017: PMADRL = address;
 13209  1DF8  0874               	movf	Flash_Memory_Read@address,w
 13210  1DF9  0091               	movwf	17	;volatile
 13211                           
 13212                           ;MCU_B1.c: 1018: CFGS = 0;
 13213  1DFA  1315               	bcf	21,6	;volatile
 13214                           
 13215                           ;MCU_B1.c: 1019: RD = 1;
 13216  1DFB  1415               	bsf	21,0	;volatile
 13217                           
 13218                           ;MCU_B1.c: 1020: i = PMDATH;
 13219  1DFC  0814               	movf	20,w	;volatile
 13220  1DFD  00F2               	movwf	??_Flash_Memory_Read
 13221  1DFE  0872               	movf	??_Flash_Memory_Read,w
 13222  1DFF  00F3               	movwf	Flash_Memory_Read@i
 13223                           
 13224                           ;MCU_B1.c: 1021: ret = PMDATL;
 13225  1E00  0813               	movf	19,w	;volatile
 13226  1E01  00F2               	movwf	??_Flash_Memory_Read
 13227  1E02  0872               	movf	??_Flash_Memory_Read,w
 13228  1E03  00F5               	movwf	Flash_Memory_Read@ret
 13229                           
 13230                           ;MCU_B1.c: 1022: return ret;
 13231  1E04  0875               	movf	Flash_Memory_Read@ret,w
 13232  1E05  0008               	return
 13233  1E06                     __end_of_Flash_Memory_Read:	
 13234                           
 13235                           	psect	text87
 13236  052B                     __ptext87:	
 13237 ;; *************** function _Exception_Main *****************
 13238 ;; Defined at:
 13239 ;;		line 505 in file "../src/Main_B1.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;		None
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;  i               2   11[BANK0 ] int 
 13244 ;;  i               2    9[BANK0 ] int 
 13245 ;;  lights          1   13[BANK0 ] unsigned char 
 13246 ;;  error           1    8[BANK0 ] unsigned char 
 13247 ;;  count           1    7[BANK0 ] unsigned char 
 13248 ;;  status          1    6[BANK0 ] unsigned char 
 13249 ;; Return value:  Size  Location     Type
 13250 ;;		None               void
 13251 ;; Registers used:
 13252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;Total ram usage:        9 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    5
 13265 ;; This function calls:
 13266 ;;		_getDimmerLights_Line
 13267 ;;		_getDimmerLights_Status
 13268 ;;		_getMain_All_Error_Status
 13269 ;;		_getMain_All_LightsStatus
 13270 ;;		_setBuz
 13271 ;;		_setDimmerLights_SwOff
 13272 ;;		_setLED
 13273 ;; This function is called by:
 13274 ;;		_main
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           
 13279                           ;psect for function _Exception_Main
 13280  052B                     _Exception_Main:	
 13281                           
 13282                           ;Main_B1.c: 506: char error = getMain_All_Error_Status(0);
 13283                           
 13284                           ;incstack = 0
 13285                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13286  052B  3000               	movlw	0
 13287  052C  3191  21C6  3185   	fcall	_getMain_All_Error_Status
 13288  052F  00F9               	movwf	??_Exception_Main
 13289  0530  0879               	movf	??_Exception_Main,w
 13290  0531  0020               	movlb	0	; select bank0
 13291  0532  00A8               	movwf	Exception_Main@error
 13292                           
 13293                           ;Main_B1.c: 507: char lights = 0, count = 1;
 13294  0533  01AD               	clrf	Exception_Main@lights
 13295  0534  01A7               	clrf	Exception_Main@count
 13296  0535  0AA7               	incf	Exception_Main@count,f
 13297                           
 13298                           ;Main_B1.c: 508: char status = 0;
 13299  0536  01A6               	clrf	Exception_Main@status
 13300                           
 13301                           ;Main_B1.c: 510: if (myMain.Error_Run == 1) {
 13302  0537  0021               	movlb	1	; select bank1
 13303  0538  1DC9               	btfss	(_myMain^(0+128)+10),3
 13304  0539  2D48               	goto	l10067
 13305                           
 13306                           ;Main_B1.c: 511: if (error == 0) {
 13307  053A  0020               	movlb	0	; select bank0
 13308  053B  08A8               	movf	Exception_Main@error,f
 13309  053C  1D03               	skipz
 13310  053D  0008               	return
 13311                           
 13312                           ;Main_B1.c: 512: myMain.Error_Run = 0;
 13313  053E  0021               	movlb	1	; select bank1
 13314  053F  11C9               	bcf	(_myMain^(0+128)+10),3
 13315                           
 13316                           ;Main_B1.c: 515: setLED(99, 10);
 13317  0540  300A               	movlw	10
 13318  0541  00F9               	movwf	??_Exception_Main
 13319  0542  0879               	movf	??_Exception_Main,w
 13320  0543  00F4               	movwf	setLED@command
 13321  0544  3063               	movlw	99
 13322  0545  3193  236B         	fcall	_setLED
 13323                           
 13324                           ;Main_B1.c: 528: }
 13325                           ;Main_B1.c: 529: } else {
 13326  0547  0008               	return
 13327  0548                     l10067:	
 13328                           
 13329                           ;Main_B1.c: 530: if (error != 0) {
 13330  0548  0020               	movlb	0	; select bank0
 13331  0549  0828               	movf	Exception_Main@error,w
 13332  054A  1903               	btfsc	3,2
 13333  054B  0008               	return
 13334                           
 13335                           ;Main_B1.c: 531: myMain.Error_Run = 1;
 13336  054C  0021               	movlb	1	; select bank1
 13337  054D  15C9               	bsf	(_myMain^(0+128)+10),3
 13338                           
 13339                           ;Main_B1.c: 533: setLED(99, 11);
 13340  054E  300B               	movlw	11
 13341  054F  00F9               	movwf	??_Exception_Main
 13342  0550  0879               	movf	??_Exception_Main,w
 13343  0551  00F4               	movwf	setLED@command
 13344  0552  3063               	movlw	99
 13345  0553  3193  236B  3185   	fcall	_setLED
 13346                           
 13347                           ;Main_B1.c: 544: switch (error) {
 13348  0556  2DF0               	goto	l10115
 13349  0557                     l10073:	
 13350                           ;Main_B1.c: 545: case 2:
 13351                           
 13352                           
 13353                           ;Main_B1.c: 552: if (getMain_All_LightsStatus() == 1) {
 13354  0557  319B  23A6  3185   	fcall	_getMain_All_LightsStatus
 13355  055A  3A01               	xorlw	1
 13356  055B  1D03               	skipz
 13357  055C  2D66               	goto	l10077
 13358                           
 13359                           ;Main_B1.c: 553: setBuz(10, 300);
 13360  055D  302C               	movlw	44
 13361  055E  0020               	movlb	0	; select bank0
 13362  055F  00A4               	movwf	setBuz@time
 13363  0560  3001               	movlw	1
 13364  0561  00A5               	movwf	setBuz@time+1
 13365  0562  300A               	movlw	10
 13366  0563  3195  253E  3185   	fcall	_setBuz
 13367  0566                     l10077:	
 13368                           
 13369                           ;Main_B1.c: 554: }
 13370                           ;Main_B1.c: 556: for (int i = 0; i < count; i++) {
 13371  0566  0020               	movlb	0	; select bank0
 13372  0567  01A9               	clrf	Exception_Main@i
 13373  0568  01AA               	clrf	Exception_Main@i+1
 13374  0569                     l10087:	
 13375  0569  082A               	movf	Exception_Main@i+1,w
 13376  056A  3A80               	xorlw	128
 13377  056B  00F9               	movwf	??_Exception_Main
 13378  056C  3080               	movlw	128
 13379  056D  0279               	subwf	??_Exception_Main,w
 13380  056E  1D03               	skipz
 13381  056F  2D72               	goto	u11035
 13382  0570  0827               	movf	Exception_Main@count,w
 13383  0571  0229               	subwf	Exception_Main@i,w
 13384  0572                     u11035:	
 13385  0572  1803               	btfsc	3,0
 13386  0573  2D93               	goto	u11030
 13387                           
 13388                           ;Main_B1.c: 558: if (getDimmerLights_Status(i + 1) == 1) {
 13389  0574  0020               	movlb	0	; select bank0
 13390  0575  0829               	movf	Exception_Main@i,w
 13391  0576  3E01               	addlw	1
 13392  0577  319C  24B9  3185   	fcall	_getDimmerLights_Status
 13393  057A  3A01               	xorlw	1
 13394  057B  1D03               	skipz
 13395  057C  2D8D               	goto	l10085
 13396                           
 13397                           ;Main_B1.c: 559: DimmerLights->SwFlag = 1;
 13398  057D  0020               	movlb	0	; select bank0
 13399  057E  086C               	movf	_DimmerLights,w
 13400  057F  0086               	movwf	6
 13401  0580  3001               	movlw	1	; select bank2/3
 13402  0581  0087               	movwf	7
 13403  0582  1401               	bsf	1,0
 13404                           
 13405                           ;Main_B1.c: 560: DimmerLights->Status = 0;
 13406  0583  0A6C               	incf	_DimmerLights,w
 13407  0584  0086               	movwf	6
 13408  0585  3001               	movlw	1	; select bank2/3
 13409  0586  0087               	movwf	7
 13410  0587  1001               	bcf	1,0
 13411                           
 13412                           ;Main_B1.c: 561: setDimmerLights_SwOff(i + 1);
 13413  0588  0829               	movf	Exception_Main@i,w
 13414  0589  3E01               	addlw	1
 13415  058A  3192  22FB  3185   	fcall	_setDimmerLights_SwOff
 13416  058D                     l10085:	
 13417  058D  3001               	movlw	1
 13418  058E  0020               	movlb	0	; select bank0
 13419  058F  07A9               	addwf	Exception_Main@i,f
 13420  0590  3000               	movlw	0
 13421  0591  3DAA               	addwfc	Exception_Main@i+1,f
 13422  0592  2D69               	goto	l10087
 13423  0593                     u11030:	
 13424  0593  0020               	movlb	0	; select bank0
 13425  0594  0008               	return
 13426  0595                     l10089:	
 13427                           ;Main_B1.c: 567: case 3:
 13428                           
 13429                           ;Main_B1.c: 562: }
 13430                           ;Main_B1.c: 563: }
 13431                           ;Main_B1.c: 566: break;
 13432                           
 13433                           
 13434                           ;Main_B1.c: 569: setBuz(5, 300);
 13435  0595  302C               	movlw	44
 13436  0596  0020               	movlb	0	; select bank0
 13437  0597  00A4               	movwf	setBuz@time
 13438  0598  3001               	movlw	1
 13439  0599  00A5               	movwf	setBuz@time+1
 13440  059A  3005               	movlw	5
 13441  059B  3195  253E  3185   	fcall	_setBuz
 13442                           
 13443                           ;Main_B1.c: 570: lights = getDimmerLights_Line();
 13444  059E  319B  23AE  3185   	fcall	_getDimmerLights_Line
 13445  05A1  00F9               	movwf	??_Exception_Main
 13446  05A2  0879               	movf	??_Exception_Main,w
 13447  05A3  0020               	movlb	0	; select bank0
 13448  05A4  00AD               	movwf	Exception_Main@lights
 13449                           
 13450                           ;Main_B1.c: 571: if (lights == 0) {
 13451  05A5  08AD               	movf	Exception_Main@lights,f
 13452  05A6  1D03               	skipz
 13453  05A7  2DD6               	goto	l10107
 13454                           
 13455                           ;Main_B1.c: 573: for (int i = 0; i < count; i++) {
 13456  05A8  01AB               	clrf	Exception_Main@i_4017
 13457  05A9  01AC               	clrf	Exception_Main@i_4017+1
 13458  05AA                     l10105:	
 13459  05AA  082C               	movf	Exception_Main@i_4017+1,w
 13460  05AB  3A80               	xorlw	128
 13461  05AC  00F9               	movwf	??_Exception_Main
 13462  05AD  3080               	movlw	128
 13463  05AE  0279               	subwf	??_Exception_Main,w
 13464  05AF  1D03               	skipz
 13465  05B0  2DB3               	goto	u11065
 13466  05B1  0827               	movf	Exception_Main@count,w
 13467  05B2  022B               	subwf	Exception_Main@i_4017,w
 13468  05B3                     u11065:	
 13469  05B3  1803               	btfsc	3,0
 13470  05B4  2DD4               	goto	u11060
 13471                           
 13472                           ;Main_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 13473  05B5  0020               	movlb	0	; select bank0
 13474  05B6  082B               	movf	Exception_Main@i_4017,w
 13475  05B7  3E01               	addlw	1
 13476  05B8  319C  24B9  3185   	fcall	_getDimmerLights_Status
 13477  05BB  3A01               	xorlw	1
 13478  05BC  1D03               	skipz
 13479  05BD  2DCE               	goto	l10103
 13480                           
 13481                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 13482  05BE  0020               	movlb	0	; select bank0
 13483  05BF  086C               	movf	_DimmerLights,w
 13484  05C0  0086               	movwf	6
 13485  05C1  3001               	movlw	1	; select bank2/3
 13486  05C2  0087               	movwf	7
 13487  05C3  1401               	bsf	1,0
 13488                           
 13489                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 13490  05C4  0A6C               	incf	_DimmerLights,w
 13491  05C5  0086               	movwf	6
 13492  05C6  3001               	movlw	1	; select bank2/3
 13493  05C7  0087               	movwf	7
 13494  05C8  1001               	bcf	1,0
 13495                           
 13496                           ;Main_B1.c: 578: setDimmerLights_SwOff(i + 1);
 13497  05C9  082B               	movf	Exception_Main@i_4017,w
 13498  05CA  3E01               	addlw	1
 13499  05CB  3192  22FB  3185   	fcall	_setDimmerLights_SwOff
 13500  05CE                     l10103:	
 13501  05CE  3001               	movlw	1
 13502  05CF  0020               	movlb	0	; select bank0
 13503  05D0  07AB               	addwf	Exception_Main@i_4017,f
 13504  05D1  3000               	movlw	0
 13505  05D2  3DAC               	addwfc	Exception_Main@i_4017+1,f
 13506  05D3  2DAA               	goto	l10105
 13507  05D4                     u11060:	
 13508  05D4  0020               	movlb	0	; select bank0
 13509  05D5  0008               	return
 13510  05D6                     l10107:	
 13511                           ;Main_B1.c: 579: }
 13512                           ;Main_B1.c: 580: }
 13513                           ;Main_B1.c: 581: } else {
 13514                           
 13515                           
 13516                           ;Main_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 13517  05D6  0020               	movlb	0	; select bank0
 13518  05D7  082D               	movf	Exception_Main@lights,w
 13519  05D8  319C  24B9  3185   	fcall	_getDimmerLights_Status
 13520  05DB  3A01               	xorlw	1
 13521  05DC  1903               	btfsc	3,2
 13522  05DD  2DE0               	goto	l10109
 13523  05DE  0020               	movlb	0	; select bank0
 13524  05DF  0008               	return
 13525  05E0                     l10109:	
 13526                           
 13527                           ;Main_B1.c: 585: DimmerLights->SwFlag = 1;
 13528  05E0  0020               	movlb	0	; select bank0
 13529  05E1  086C               	movf	_DimmerLights,w
 13530  05E2  0086               	movwf	6
 13531  05E3  3001               	movlw	1	; select bank2/3
 13532  05E4  0087               	movwf	7
 13533  05E5  1401               	bsf	1,0
 13534                           
 13535                           ;Main_B1.c: 586: DimmerLights->Status = 0;
 13536  05E6  0A6C               	incf	_DimmerLights,w
 13537  05E7  0086               	movwf	6
 13538  05E8  3001               	movlw	1	; select bank2/3
 13539  05E9  0087               	movwf	7
 13540  05EA  1001               	bcf	1,0
 13541                           
 13542                           ;Main_B1.c: 587: setDimmerLights_SwOff(lights);
 13543  05EB  082D               	movf	Exception_Main@lights,w
 13544  05EC  3192  22FB         	fcall	_setDimmerLights_SwOff
 13545  05EE  0020               	movlb	0	; select bank0
 13546  05EF  0008               	return
 13547  05F0                     l10115:	
 13548                           ;Main_B1.c: 592: }
 13549                           
 13550                           ;Main_B1.c: 588: }
 13551                           ;Main_B1.c: 589: }
 13552                           ;Main_B1.c: 591: break;
 13553                           
 13554  05F0  0020               	movlb	0	; select bank0
 13555  05F1  0828               	movf	Exception_Main@error,w
 13556                           
 13557                           ; Switch size 1, requested type "space"
 13558                           ; Number of cases is 2, Range of values is 2 to 3
 13559                           ; switch strategies available:
 13560                           ; Name         Instructions Cycles
 13561                           ; simple_byte            7     4 (average)
 13562                           ; direct_byte           13     9 (fixed)
 13563                           ; jumptable            263     9 (fixed)
 13564                           ;	Chosen strategy is simple_byte
 13565  05F2  3A02               	xorlw	2	; case 2
 13566  05F3  1903               	skipnz
 13567  05F4  2D57               	goto	l10073
 13568  05F5  3A01               	xorlw	1	; case 3
 13569  05F6  1903               	skipnz
 13570  05F7  2D95               	goto	l10089
 13571  05F8  2DFA               	goto	l1555
 13572  05F9  0008               	return
 13573  05FA                     l1555:	
 13574  05FA  0008               	return
 13575  05FB                     __end_of_Exception_Main:	
 13576                           
 13577                           	psect	text88
 13578  1BAE                     __ptext88:	
 13579 ;; *************** function _getDimmerLights_Line *****************
 13580 ;; Defined at:
 13581 ;;		line 1180 in file "../src/Dimmer_B1.c"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;		None
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  line            1    2[COMMON] unsigned char 
 13586 ;; Return value:  Size  Location     Type
 13587 ;;                  1    wreg      unsigned char 
 13588 ;; Registers used:
 13589 ;;		wreg, status,2
 13590 ;; Tracked objects:
 13591 ;;		On entry : 0/0
 13592 ;;		On exit  : 0/0
 13593 ;;		Unchanged: 0/0
 13594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;Total ram usage:        1 bytes
 13600 ;; Hardware stack levels used:    1
 13601 ;; Hardware stack levels required when called:    3
 13602 ;; This function calls:
 13603 ;;		Nothing
 13604 ;; This function is called by:
 13605 ;;		_Exception_Main
 13606 ;; This function uses a non-reentrant model
 13607 ;;
 13608                           
 13609                           
 13610                           ;psect for function _getDimmerLights_Line
 13611  1BAE                     _getDimmerLights_Line:	
 13612                           
 13613                           ;Dimmer_B1.c: 1181: char line = 0;
 13614                           
 13615                           ;incstack = 0
 13616                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13617  1BAE  01F2               	clrf	getDimmerLights_Line@line
 13618                           
 13619                           ;Dimmer_B1.c: 1183: if (DimmerLights1.Line == 1) {
 13620  1BAF  0022               	movlb	2	; select bank2
 13621  1BB0  1CD9               	btfss	(_DimmerLights1^(0+256)+1),1
 13622  1BB1  2BB4               	goto	l7487
 13623                           
 13624                           ;Dimmer_B1.c: 1184: line = 1;
 13625  1BB2  01F2               	clrf	getDimmerLights_Line@line
 13626  1BB3  0AF2               	incf	getDimmerLights_Line@line,f
 13627  1BB4                     l7487:	
 13628                           
 13629                           ;Dimmer_B1.c: 1185: }
 13630                           ;Dimmer_B1.c: 1197: return line;
 13631  1BB4  0872               	movf	getDimmerLights_Line@line,w
 13632  1BB5  0008               	return
 13633  1BB6                     __end_of_getDimmerLights_Line:	
 13634                           
 13635                           	psect	text89
 13636  1FC0                     __ptext89:	
 13637 ;; *************** function _DimmerLights_Main *****************
 13638 ;; Defined at:
 13639 ;;		line 839 in file "../src/Dimmer_B1.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;		None
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;		None
 13644 ;; Return value:  Size  Location     Type
 13645 ;;		None               void
 13646 ;; Registers used:
 13647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;Total ram usage:        0 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; Hardware stack levels required when called:    8
 13660 ;; This function calls:
 13661 ;;		_DimmerLights_DimmingFunction
 13662 ;;		_getLoad_OK
 13663 ;;		_getMain_All_Error_Status
 13664 ;;		_getMain_All_LightsStatus
 13665 ;;		_setDimmerLights_Main
 13666 ;; This function is called by:
 13667 ;;		_main
 13668 ;; This function uses a non-reentrant model
 13669 ;;
 13670                           
 13671                           
 13672                           ;psect for function _DimmerLights_Main
 13673  1FC0                     _DimmerLights_Main:	
 13674                           
 13675                           ;Dimmer_B1.c: 842: if (Dimmer.LoadGO == 1) {
 13676                           
 13677                           ;incstack = 0
 13678                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13679  1FC0  0022               	movlb	2	; select bank2
 13680  1FC1  1CA0               	btfss	_Dimmer^(0+256),1
 13681  1FC2  2FD8               	goto	l9793
 13682                           
 13683                           ;Dimmer_B1.c: 843: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13684  1FC3  319B  237C  319F   	fcall	_getLoad_OK
 13685  1FC6  3A01               	xorlw	1
 13686  1FC7  1903               	skipnz
 13687  1FC8  2FD6               	goto	l783
 13688  1FC9  3000               	movlw	0
 13689  1FCA  3191  21C6  319F   	fcall	_getMain_All_Error_Status
 13690  1FCD  3800               	iorlw	0
 13691  1FCE  1D03               	skipz
 13692  1FCF  2FD6               	goto	l783
 13693  1FD0  319B  23A6  319F   	fcall	_getMain_All_LightsStatus
 13694  1FD3  3800               	iorlw	0
 13695  1FD4  1D03               	skipz
 13696  1FD5  2FD8               	goto	l9793
 13697  1FD6                     l783:	
 13698                           
 13699                           ;Dimmer_B1.c: 844: Dimmer.LoadGO = 0;
 13700  1FD6  0022               	movlb	2	; select bank2
 13701  1FD7  10A0               	bcf	_Dimmer^(0+256),1
 13702  1FD8                     l9793:	
 13703                           
 13704                           ;Dimmer_B1.c: 845: }
 13705                           ;Dimmer_B1.c: 846: }
 13706                           ;Dimmer_B1.c: 851: setDimmerLights_Main(1);
 13707  1FD8  3001               	movlw	1
 13708  1FD9  3189  21C4  319F   	fcall	_setDimmerLights_Main
 13709                           
 13710                           ;Dimmer_B1.c: 854: DimmerLights_DimmingFunction(1);
 13711  1FDC  3001               	movlw	1
 13712  1FDD  3195  2591         	fcall	_DimmerLights_DimmingFunction
 13713  1FDF  0008               	return
 13714  1FE0                     __end_of_DimmerLights_Main:	
 13715                           
 13716                           	psect	text90
 13717  09C4                     __ptext90:	
 13718 ;; *************** function _setDimmerLights_Main *****************
 13719 ;; Defined at:
 13720 ;;		line 886 in file "../src/Dimmer_B1.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  lights          1    wreg     unsigned char 
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  lights          1   73[BANK0 ] unsigned char 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;		None               void
 13727 ;; Registers used:
 13728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        1 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    7
 13741 ;; This function calls:
 13742 ;;		_DimmerLights_SelectPointer
 13743 ;;		_getDimmerLights_Allow_Condition
 13744 ;;		_getMain_All_LightsStatus
 13745 ;;		_setDimmerLights_Dimming
 13746 ;;		_setDimmerLights_OnOff
 13747 ;; This function is called by:
 13748 ;;		_DimmerLights_Main
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           
 13753                           ;psect for function _setDimmerLights_Main
 13754  09C4                     _setDimmerLights_Main:	
 13755                           
 13756                           ;incstack = 0
 13757                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13758                           ;setDimmerLights_Main@lights stored from wreg
 13759  09C4  0020               	movlb	0	; select bank0
 13760  09C5  00E9               	movwf	setDimmerLights_Main@lights
 13761                           
 13762                           ;Dimmer_B1.c: 888: DimmerLights_SelectPointer(lights);
 13763  09C6  0869               	movf	setDimmerLights_Main@lights,w
 13764  09C7  319B  23F8  3189   	fcall	_DimmerLights_SelectPointer
 13765                           
 13766                           ;Dimmer_B1.c: 889: if (DimmerLights->Trigger == 1) {
 13767  09CA  0020               	movlb	0	; select bank0
 13768  09CB  086C               	movf	_DimmerLights,w
 13769  09CC  0086               	movwf	6
 13770  09CD  3001               	movlw	1	; select bank2/3
 13771  09CE  0087               	movwf	7
 13772  09CF  1C81               	btfss	1,1
 13773  09D0  29F0               	goto	l9431
 13774                           
 13775                           ;Dimmer_B1.c: 890: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13776  09D1  0869               	movf	setDimmerLights_Main@lights,w
 13777  09D2  319D  25CC  3189   	fcall	_getDimmerLights_Allow_Condition
 13778  09D5  3800               	iorlw	0
 13779  09D6  1D03               	skipz
 13780  09D7  0008               	return
 13781                           
 13782                           ;Dimmer_B1.c: 891: DimmerLights->Trigger = 0;
 13783  09D8  0020               	movlb	0	; select bank0
 13784  09D9  086C               	movf	_DimmerLights,w
 13785  09DA  0086               	movwf	6
 13786  09DB  3001               	movlw	1	; select bank2/3
 13787  09DC  0087               	movwf	7
 13788  09DD  1081               	bcf	1,1
 13789                           
 13790                           ;Dimmer_B1.c: 892: if (DimmerLights->Switch == 1) {
 13791  09DE  086C               	movf	_DimmerLights,w
 13792  09DF  0086               	movwf	6
 13793  09E0  3001               	movlw	1	; select bank2/3
 13794  09E1  0087               	movwf	7
 13795  09E2  1D01               	btfss	1,2
 13796  09E3  29EA               	goto	l9429
 13797                           
 13798                           ;Dimmer_B1.c: 893: setDimmerLights_OnOff(lights, 1);
 13799  09E4  01E5               	clrf	setDimmerLights_OnOff@command
 13800  09E5  0AE5               	incf	setDimmerLights_OnOff@command,f
 13801  09E6  0869               	movf	setDimmerLights_Main@lights,w
 13802  09E7  318F  2746         	fcall	_setDimmerLights_OnOff
 13803                           
 13804                           ;Dimmer_B1.c: 894: } else {
 13805  09E9  0008               	return
 13806  09EA                     l9429:	
 13807                           
 13808                           ;Dimmer_B1.c: 895: setDimmerLights_OnOff(lights, 0);
 13809  09EA  0020               	movlb	0	; select bank0
 13810  09EB  01E5               	clrf	setDimmerLights_OnOff@command
 13811  09EC  0869               	movf	setDimmerLights_Main@lights,w
 13812  09ED  318F  2746         	fcall	_setDimmerLights_OnOff
 13813                           
 13814                           ;Dimmer_B1.c: 896: }
 13815                           ;Dimmer_B1.c: 897: }
 13816                           ;Dimmer_B1.c: 898: } else {
 13817  09EF  0008               	return
 13818  09F0                     l9431:	
 13819                           
 13820                           ;Dimmer_B1.c: 899: if (getMain_All_LightsStatus() == 1) {
 13821  09F0  319B  23A6  3189   	fcall	_getMain_All_LightsStatus
 13822  09F3  3A01               	xorlw	1
 13823  09F4  1D03               	skipz
 13824  09F5  2A1C               	goto	l9443
 13825                           
 13826                           ;Dimmer_B1.c: 900: if (DimmerLights->DimmingTrigger == 1) {
 13827  09F6  0020               	movlb	0	; select bank0
 13828  09F7  086C               	movf	_DimmerLights,w
 13829  09F8  0086               	movwf	6
 13830  09F9  3001               	movlw	1	; select bank2/3
 13831  09FA  0087               	movwf	7
 13832  09FB  1E01               	btfss	1,4
 13833  09FC  0008               	return
 13834                           
 13835                           ;Dimmer_B1.c: 901: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13836  09FD  0869               	movf	setDimmerLights_Main@lights,w
 13837  09FE  319D  25CC  3189   	fcall	_getDimmerLights_Allow_Condition
 13838  0A01  3800               	iorlw	0
 13839  0A02  1D03               	skipz
 13840  0A03  0008               	return
 13841                           
 13842                           ;Dimmer_B1.c: 902: DimmerLights->DimmingTrigger = 0;
 13843  0A04  0020               	movlb	0	; select bank0
 13844  0A05  086C               	movf	_DimmerLights,w
 13845  0A06  0086               	movwf	6
 13846  0A07  3001               	movlw	1	; select bank2/3
 13847  0A08  0087               	movwf	7
 13848  0A09  1201               	bcf	1,4
 13849                           
 13850                           ;Dimmer_B1.c: 903: if (DimmerLights->DimmingSwitch == 1) {
 13851  0A0A  086C               	movf	_DimmerLights,w
 13852  0A0B  0086               	movwf	6
 13853  0A0C  3001               	movlw	1	; select bank2/3
 13854  0A0D  0087               	movwf	7
 13855  0A0E  1E81               	btfss	1,5
 13856  0A0F  2A16               	goto	l9441
 13857                           
 13858                           ;Dimmer_B1.c: 904: setDimmerLights_Dimming(lights, 1);
 13859  0A10  01E2               	clrf	setDimmerLights_Dimming@status
 13860  0A11  0AE2               	incf	setDimmerLights_Dimming@status,f
 13861  0A12  0869               	movf	setDimmerLights_Main@lights,w
 13862  0A13  3196  2638         	fcall	_setDimmerLights_Dimming
 13863                           
 13864                           ;Dimmer_B1.c: 905: } else {
 13865  0A15  0008               	return
 13866  0A16                     l9441:	
 13867                           
 13868                           ;Dimmer_B1.c: 906: setDimmerLights_Dimming(lights, 0);
 13869  0A16  0020               	movlb	0	; select bank0
 13870  0A17  01E2               	clrf	setDimmerLights_Dimming@status
 13871  0A18  0869               	movf	setDimmerLights_Main@lights,w
 13872  0A19  3196  2638         	fcall	_setDimmerLights_Dimming
 13873                           
 13874                           ;Dimmer_B1.c: 907: }
 13875                           ;Dimmer_B1.c: 908: }
 13876                           ;Dimmer_B1.c: 909: }
 13877                           ;Dimmer_B1.c: 910: } else {
 13878  0A1B  0008               	return
 13879  0A1C                     l9443:	
 13880                           
 13881                           ;Dimmer_B1.c: 911: if (DimmerLights->DimmingTrigger == 1) {
 13882  0A1C  0020               	movlb	0	; select bank0
 13883  0A1D  086C               	movf	_DimmerLights,w
 13884  0A1E  0086               	movwf	6
 13885  0A1F  3001               	movlw	1	; select bank2/3
 13886  0A20  0087               	movwf	7
 13887  0A21  1E01               	btfss	1,4
 13888  0A22  0008               	return
 13889                           
 13890                           ;Dimmer_B1.c: 912: DimmerLights->DimmingTrigger = 0;
 13891  0A23  086C               	movf	_DimmerLights,w
 13892  0A24  0086               	movwf	6
 13893  0A25  3001               	movlw	1	; select bank2/3
 13894  0A26  0087               	movwf	7
 13895  0A27  1201               	bcf	1,4
 13896  0A28  0008               	return
 13897  0A29                     __end_of_setDimmerLights_Main:	
 13898                           
 13899                           	psect	text91
 13900  0F46                     __ptext91:	
 13901 ;; *************** function _setDimmerLights_OnOff *****************
 13902 ;; Defined at:
 13903 ;;		line 963 in file "../src/Dimmer_B1.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;  lights          1    wreg     unsigned char 
 13906 ;;  command         1   69[BANK0 ] unsigned char 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  lights          1   72[BANK0 ] unsigned char 
 13909 ;; Return value:  Size  Location     Type
 13910 ;;		None               void
 13911 ;; Registers used:
 13912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13913 ;; Tracked objects:
 13914 ;;		On entry : 0/0
 13915 ;;		On exit  : 0/0
 13916 ;;		Unchanged: 0/0
 13917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13918 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13922 ;;Total ram usage:        4 bytes
 13923 ;; Hardware stack levels used:    1
 13924 ;; Hardware stack levels required when called:    6
 13925 ;; This function calls:
 13926 ;;		_DimmerIntr_ValueCalculate
 13927 ;;		_getCmd_Status
 13928 ;;		_getDelayOff_GO
 13929 ;;		_getDimmerLights_PercentToValue
 13930 ;;		_getMain_All_LightsStatus
 13931 ;;		_setCmd_Status
 13932 ;;		_setDelayOff_GO
 13933 ;;		_setDimmerIntr_ControlStatus
 13934 ;;		_setDimmerIntr_DimmingValue
 13935 ;;		_setDimmerIntr_Dimming_RF
 13936 ;;		_setDimmerIntr_MaxmumValue
 13937 ;;		_setDimmerLights_DimmingClose
 13938 ;;		_setDimmerLights_Line
 13939 ;;		_setLED
 13940 ;;		_setProductData
 13941 ;;		_setRF_DimmerLights
 13942 ;;		_setTxData
 13943 ;; This function is called by:
 13944 ;;		_setDimmerLights_Main
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           
 13949                           ;psect for function _setDimmerLights_OnOff
 13950  0F46                     _setDimmerLights_OnOff:	
 13951                           
 13952                           ;incstack = 0
 13953                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13954                           ;setDimmerLights_OnOff@lights stored from wreg
 13955  0F46  0020               	movlb	0	; select bank0
 13956  0F47  00E8               	movwf	setDimmerLights_OnOff@lights
 13957                           
 13958                           ;Dimmer_B1.c: 965: if (command == 1) {
 13959  0F48  0865               	movf	setDimmerLights_OnOff@command,w
 13960  0F49  3A01               	xorlw	1
 13961  0F4A  1D03               	skipz
 13962  0F4B  2FA6               	goto	l9213
 13963                           
 13964                           ;Dimmer_B1.c: 967: setDimmerIntr_ControlStatus(lights, 1);
 13965  0F4C  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13966  0F4D  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13967  0F4E  0868               	movf	setDimmerLights_OnOff@lights,w
 13968  0F4F  319E  261B  318F   	fcall	_setDimmerIntr_ControlStatus
 13969                           
 13970                           ;Dimmer_B1.c: 970: Dimmer.Load_Status = 1;
 13971  0F52  0022               	movlb	2	; select bank2
 13972  0F53  1520               	bsf	_Dimmer^(0+256),2
 13973                           
 13974                           ;Dimmer_B1.c: 971: setDimmerLights_Line(lights);
 13975  0F54  0020               	movlb	0	; select bank0
 13976  0F55  0868               	movf	setDimmerLights_OnOff@lights,w
 13977  0F56  319C  2490  318F   	fcall	_setDimmerLights_Line
 13978                           
 13979                           ;Dimmer_B1.c: 977: setLED(lights, 0);
 13980  0F59  01F4               	clrf	setLED@command
 13981  0F5A  0020               	movlb	0	; select bank0
 13982  0F5B  0868               	movf	setDimmerLights_OnOff@lights,w
 13983  0F5C  3193  236B  318F   	fcall	_setLED
 13984                           
 13985                           ;Dimmer_B1.c: 978: ;;
 13986                           ;Dimmer_B1.c: 998: if (DimmerLights->DimmingRun == 1) {
 13987  0F5F  0020               	movlb	0	; select bank0
 13988  0F60  0A6C               	incf	_DimmerLights,w
 13989  0F61  0086               	movwf	6
 13990  0F62  3001               	movlw	1	; select bank2/3
 13991  0F63  0087               	movwf	7
 13992  0F64  1F01               	btfss	1,6
 13993  0F65  2F87               	goto	l9205
 13994                           
 13995                           ;Dimmer_B1.c: 999: DimmerLights->DimmingRun = 0;
 13996  0F66  0A6C               	incf	_DimmerLights,w
 13997  0F67  0086               	movwf	6
 13998  0F68  3001               	movlw	1	; select bank2/3
 13999  0F69  0087               	movwf	7
 14000  0F6A  1301               	bcf	1,6
 14001                           
 14002                           ;Dimmer_B1.c: 1000: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14003  0F6B  0868               	movf	setDimmerLights_OnOff@lights,w
 14004  0F6C  3E14               	addlw	20
 14005  0F6D  077B               	addwf	_product,w
 14006  0F6E  00E6               	movwf	??_setDimmerLights_OnOff
 14007  0F6F  0866               	movf	??_setDimmerLights_OnOff,w
 14008  0F70  0086               	movwf	6
 14009  0F71  3002               	movlw	2	; select bank4/5
 14010  0F72  0087               	movwf	7
 14011  0F73  0801               	movf	1,w
 14012  0F74  3188  20FA  318F   	fcall	_getDimmerLights_PercentToValue
 14013  0F77  0020               	movlb	0	; select bank0
 14014  0F78  00E7               	movwf	??_setDimmerLights_OnOff+1
 14015  0F79  0867               	movf	??_setDimmerLights_OnOff+1,w
 14016  0F7A  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14017  0F7B  0868               	movf	setDimmerLights_OnOff@lights,w
 14018  0F7C  319C  2446  318F   	fcall	_setDimmerIntr_MaxmumValue
 14019                           
 14020                           ;Dimmer_B1.c: 1001: setDimmerIntr_Dimming_RF(lights, 1);
 14021  0F7F  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 14022  0F80  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 14023  0F81  0020               	movlb	0	; select bank0
 14024  0F82  0868               	movf	setDimmerLights_OnOff@lights,w
 14025  0F83  319E  2630  318F   	fcall	_setDimmerIntr_Dimming_RF
 14026                           
 14027                           ;Dimmer_B1.c: 1002: } else {
 14028  0F86  2F9C               	goto	l9207
 14029  0F87                     l9205:	
 14030                           
 14031                           ;Dimmer_B1.c: 1005: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pr
      +                          oduct->Data[20 + lights]));
 14032  0F87  0020               	movlb	0	; select bank0
 14033  0F88  0868               	movf	setDimmerLights_OnOff@lights,w
 14034  0F89  3E14               	addlw	20
 14035  0F8A  077B               	addwf	_product,w
 14036  0F8B  00E6               	movwf	??_setDimmerLights_OnOff
 14037  0F8C  0866               	movf	??_setDimmerLights_OnOff,w
 14038  0F8D  0086               	movwf	6
 14039  0F8E  3002               	movlw	2	; select bank4/5
 14040  0F8F  0087               	movwf	7
 14041  0F90  0801               	movf	1,w
 14042  0F91  3188  20FA  318F   	fcall	_getDimmerLights_PercentToValue
 14043  0F94  0020               	movlb	0	; select bank0
 14044  0F95  00E7               	movwf	??_setDimmerLights_OnOff+1
 14045  0F96  0867               	movf	??_setDimmerLights_OnOff+1,w
 14046  0F97  00DA               	movwf	setDimmerIntr_DimmingValue@value
 14047  0F98  0868               	movf	setDimmerLights_OnOff@lights,w
 14048  0F99  319C  2452  318F   	fcall	_setDimmerIntr_DimmingValue
 14049  0F9C                     l9207:	
 14050                           
 14051                           ;Dimmer_B1.c: 1011: }
 14052                           ;Dimmer_B1.c: 1013: if (lights == 1) {
 14053  0F9C  0020               	movlb	0	; select bank0
 14054  0F9D  0868               	movf	setDimmerLights_OnOff@lights,w
 14055  0F9E  3A01               	xorlw	1
 14056  0F9F  1D03               	skipz
 14057  0FA0  2FD0               	goto	l9227
 14058                           
 14059                           ;Dimmer_B1.c: 1016: DimmerIntr_ValueCalculate(1);
 14060  0FA1  3001               	movlw	1
 14061  0FA2  3191  219A  318F   	fcall	_DimmerIntr_ValueCalculate
 14062                           
 14063                           ;Dimmer_B1.c: 1023: }
 14064                           ;Dimmer_B1.c: 1029: } else if (command == 0) {
 14065                           
 14066                           ;Dimmer_B1.c: 1018: } else if (lights == 2) {
 14067  0FA5  2FD0               	goto	l9227
 14068  0FA6                     l9213:	
 14069  0FA6  0020               	movlb	0	; select bank0
 14070  0FA7  08E5               	movf	setDimmerLights_OnOff@command,f
 14071  0FA8  1D03               	skipz
 14072  0FA9  2FD0               	goto	l9227
 14073                           
 14074                           ;Dimmer_B1.c: 1031: setDimmerIntr_ControlStatus(lights, 0);
 14075  0FAA  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14076  0FAB  0868               	movf	setDimmerLights_OnOff@lights,w
 14077  0FAC  319E  261B  318F   	fcall	_setDimmerIntr_ControlStatus
 14078                           
 14079                           ;Dimmer_B1.c: 1033: Dimmer.Load_Status = 0;
 14080  0FAF  0022               	movlb	2	; select bank2
 14081  0FB0  1120               	bcf	_Dimmer^(0+256),2
 14082                           
 14083                           ;Dimmer_B1.c: 1034: setDimmerLights_Line(0);
 14084  0FB1  3000               	movlw	0
 14085  0FB2  319C  2490  318F   	fcall	_setDimmerLights_Line
 14086                           
 14087                           ;Dimmer_B1.c: 1038: if (getDelayOff_GO(lights) == 1) {
 14088  0FB5  0020               	movlb	0	; select bank0
 14089  0FB6  0868               	movf	setDimmerLights_OnOff@lights,w
 14090  0FB7  319C  24D7  318F   	fcall	_getDelayOff_GO
 14091  0FBA  3A01               	xorlw	1
 14092  0FBB  1D03               	skipz
 14093  0FBC  2FC4               	goto	l823
 14094                           
 14095                           ;Dimmer_B1.c: 1039: setDelayOff_GO(lights, 0, 0);
 14096  0FBD  0020               	movlb	0	; select bank0
 14097  0FBE  01DD               	clrf	setDelayOff_GO@command
 14098  0FBF  01DE               	clrf	setDelayOff_GO@value
 14099  0FC0  0868               	movf	setDimmerLights_OnOff@lights,w
 14100  0FC1  318D  255D  318F   	fcall	_setDelayOff_GO
 14101  0FC4                     l823:	
 14102                           
 14103                           ;Dimmer_B1.c: 1040: }
 14104                           ;Dimmer_B1.c: 1045: setLED(lights, 1);
 14105  0FC4  01F4               	clrf	setLED@command
 14106  0FC5  0AF4               	incf	setLED@command,f
 14107  0FC6  0020               	movlb	0	; select bank0
 14108  0FC7  0868               	movf	setDimmerLights_OnOff@lights,w
 14109  0FC8  3193  236B  318F   	fcall	_setLED
 14110                           
 14111                           ;Dimmer_B1.c: 1046: ;;
 14112                           ;Dimmer_B1.c: 1050: if (lights == 1) {
 14113  0FCB  0020               	movlb	0	; select bank0
 14114  0FCC  0868               	movf	setDimmerLights_OnOff@lights,w
 14115  0FCD  3A01               	xorlw	1
 14116  0FCE  1903               	btfsc	3,2
 14117                           
 14118                           ;Dimmer_B1.c: 1051: RB1 = 0;
 14119  0FCF  108D               	bcf	13,1	;volatile
 14120  0FD0                     l9227:	
 14121                           
 14122                           ;Dimmer_B1.c: 1053: }
 14123                           ;Dimmer_B1.c: 1064: }
 14124                           ;Dimmer_B1.c: 1066: setDimmerLights_DimmingClose();
 14125  0FD0  319B  235F  318F   	fcall	_setDimmerLights_DimmingClose
 14126                           
 14127                           ;Dimmer_B1.c: 1068: setRF_DimmerLights(lights, command);
 14128  0FD3  0020               	movlb	0	; select bank0
 14129  0FD4  0865               	movf	setDimmerLights_OnOff@command,w
 14130  0FD5  00E6               	movwf	??_setDimmerLights_OnOff
 14131  0FD6  0866               	movf	??_setDimmerLights_OnOff,w
 14132  0FD7  00DD               	movwf	setRF_DimmerLights@on
 14133  0FD8  0868               	movf	setDimmerLights_OnOff@lights,w
 14134  0FD9  318A  2229  318F   	fcall	_setRF_DimmerLights
 14135                           
 14136                           ;Dimmer_B1.c: 1070: if (getCmd_Status(1) == 1) {
 14137  0FDC  3001               	movlw	1
 14138  0FDD  319D  2515  318F   	fcall	_getCmd_Status
 14139  0FE0  3A01               	xorlw	1
 14140  0FE1  1D03               	skipz
 14141  0FE2  2FFD               	goto	l9243
 14142                           
 14143                           ;Dimmer_B1.c: 1071: if (getMain_All_LightsStatus() == 0) {
 14144  0FE3  319B  23A6  318F   	fcall	_getMain_All_LightsStatus
 14145  0FE6  3800               	iorlw	0
 14146  0FE7  1D03               	skipz
 14147  0FE8  0008               	return
 14148                           
 14149                           ;Dimmer_B1.c: 1072: setCmd_Status(1, 0);
 14150  0FE9  01F2               	clrf	setCmd_Status@cmd
 14151  0FEA  3001               	movlw	1
 14152  0FEB  319E  2606  318F   	fcall	_setCmd_Status
 14153                           
 14154                           ;Dimmer_B1.c: 1073: setProductData(11, 0);
 14155  0FEE  0020               	movlb	0	; select bank0
 14156  0FEF  01DA               	clrf	setProductData@value
 14157  0FF0  300B               	movlw	11
 14158  0FF1  319C  243A  318F   	fcall	_setProductData
 14159                           
 14160                           ;Dimmer_B1.c: 1074: setProductData(17, 0);
 14161  0FF4  0020               	movlb	0	; select bank0
 14162  0FF5  01DA               	clrf	setProductData@value
 14163  0FF6  3011               	movlw	17
 14164  0FF7  319C  243A  318F   	fcall	_setProductData
 14165                           
 14166                           ;Dimmer_B1.c: 1075: setTxData();
 14167  0FFA  319B  2383         	fcall	_setTxData
 14168                           
 14169                           ;Dimmer_B1.c: 1076: }
 14170                           ;Dimmer_B1.c: 1077: } else {
 14171  0FFC  0008               	return
 14172  0FFD                     l9243:	
 14173                           
 14174                           ;Dimmer_B1.c: 1078: setTxData();
 14175  0FFD  319B  2383         	fcall	_setTxData
 14176  0FFF  0008               	return
 14177  1000                     __end_of_setDimmerLights_OnOff:	
 14178                           
 14179                           	psect	text92
 14180  136B                     __ptext92:	
 14181 ;; *************** function _setLED *****************
 14182 ;; Defined at:
 14183 ;;		line 81 in file "../src/LED_B1.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  led             1    wreg     unsigned char 
 14186 ;;  command         1    4[COMMON] unsigned char 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  led             1    5[COMMON] unsigned char 
 14189 ;; Return value:  Size  Location     Type
 14190 ;;		None               void
 14191 ;; Registers used:
 14192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14198 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;Total ram usage:        2 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    4
 14205 ;; This function calls:
 14206 ;;		_LedPointSelect
 14207 ;; This function is called by:
 14208 ;;		_setDimmerLights_OnOff
 14209 ;;		_setLED_Initialization
 14210 ;;		_Exception_Main
 14211 ;;		_setSw_Initialization
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           
 14216                           ;psect for function _setLED
 14217  136B                     _setLED:	
 14218                           
 14219                           ;incstack = 0
 14220                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14221                           ;setLED@led stored from wreg
 14222  136B  00F5               	movwf	setLED@led
 14223                           
 14224                           ;LED_B1.c: 82: LedPointSelect(led);
 14225  136C  0875               	movf	setLED@led,w
 14226  136D  319C  2403  3193   	fcall	_LedPointSelect
 14227                           
 14228                           ;LED_B1.c: 83: if (command == 0) {
 14229  1370  08F4               	movf	setLED@command,f
 14230  1371  1D03               	skipz
 14231  1372  2B79               	goto	l6803
 14232                           
 14233                           ;LED_B1.c: 112: if (led == 99) {
 14234  1373  0875               	movf	setLED@led,w
 14235  1374  3A63               	xorlw	99
 14236  1375  1D03               	skipz
 14237  1376  2B79               	goto	l6803
 14238                           
 14239                           ;LED_B1.c: 116: RB5 = 1;
 14240  1377  0020               	movlb	0	; select bank0
 14241  1378  168D               	bsf	13,5	;volatile
 14242  1379                     l6803:	
 14243                           
 14244                           ;LED_B1.c: 118: }
 14245                           ;LED_B1.c: 120: }
 14246                           ;LED_B1.c: 121: if (command == 1) {
 14247  1379  0874               	movf	setLED@command,w
 14248  137A  3A01               	xorlw	1
 14249  137B  1D03               	skipz
 14250  137C  2B83               	goto	l6809
 14251                           
 14252                           ;LED_B1.c: 150: if (led == 99) {
 14253  137D  0875               	movf	setLED@led,w
 14254  137E  3A63               	xorlw	99
 14255  137F  1D03               	skipz
 14256  1380  2B83               	goto	l6809
 14257                           
 14258                           ;LED_B1.c: 154: RB5 = 0;
 14259  1381  0020               	movlb	0	; select bank0
 14260  1382  128D               	bcf	13,5	;volatile
 14261  1383                     l6809:	
 14262                           
 14263                           ;LED_B1.c: 156: }
 14264                           ;LED_B1.c: 158: }
 14265                           ;LED_B1.c: 159: if (command == 10) {
 14266  1383  0874               	movf	setLED@command,w
 14267  1384  3A0A               	xorlw	10
 14268  1385  1D03               	skipz
 14269  1386  2B9A               	goto	l6817
 14270                           
 14271                           ;LED_B1.c: 160: LED->GO = 0;
 14272  1387  0021               	movlb	1	; select bank1
 14273  1388  085B               	movf	_LED^(0+128),w
 14274  1389  0086               	movwf	6
 14275  138A  3001               	movlw	1	; select bank2/3
 14276  138B  0087               	movwf	7
 14277  138C  1081               	bcf	1,1
 14278                           
 14279                           ;LED_B1.c: 161: LED->Time = 0;
 14280  138D  0A5B               	incf	_LED^(0+128),w
 14281  138E  0086               	movwf	6
 14282  138F  3001               	movlw	1	; select bank2/3
 14283  1390  0087               	movwf	7
 14284  1391  3000               	movlw	0
 14285  1392  3FC0               	movwi [0]fsr1
 14286  1393  3FC1               	movwi [1]fsr1
 14287                           
 14288                           ;LED_B1.c: 190: if (led == 99) {
 14289  1394  0875               	movf	setLED@led,w
 14290  1395  3A63               	xorlw	99
 14291  1396  1D03               	skipz
 14292  1397  2B9A               	goto	l6817
 14293                           
 14294                           ;LED_B1.c: 194: RB5 = 1;
 14295  1398  0020               	movlb	0	; select bank0
 14296  1399  168D               	bsf	13,5	;volatile
 14297  139A                     l6817:	
 14298                           
 14299                           ;LED_B1.c: 196: }
 14300                           ;LED_B1.c: 198: }
 14301                           ;LED_B1.c: 199: if (command == 11) {
 14302  139A  0874               	movf	setLED@command,w
 14303  139B  3A0B               	xorlw	11
 14304  139C  1D03               	skipz
 14305  139D  0008               	return
 14306                           
 14307                           ;LED_B1.c: 200: LED->GO = 1;
 14308  139E  0021               	movlb	1	; select bank1
 14309  139F  085B               	movf	_LED^(0+128),w
 14310  13A0  0086               	movwf	6
 14311  13A1  3001               	movlw	1	; select bank2/3
 14312  13A2  0087               	movwf	7
 14313  13A3  1481               	bsf	1,1
 14314  13A4  0008               	return
 14315  13A5                     __end_of_setLED:	
 14316                           
 14317                           	psect	text93
 14318  1C03                     __ptext93:	
 14319 ;; *************** function _LedPointSelect *****************
 14320 ;; Defined at:
 14321 ;;		line 7 in file "../src/LED_B1.c"
 14322 ;; Parameters:    Size  Location     Type
 14323 ;;  led             1    wreg     unsigned char 
 14324 ;; Auto vars:     Size  Location     Type
 14325 ;;  led             1    3[COMMON] unsigned char 
 14326 ;; Return value:  Size  Location     Type
 14327 ;;		None               void
 14328 ;; Registers used:
 14329 ;;		wreg
 14330 ;; Tracked objects:
 14331 ;;		On entry : 0/0
 14332 ;;		On exit  : 0/0
 14333 ;;		Unchanged: 0/0
 14334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;Total ram usage:        2 bytes
 14340 ;; Hardware stack levels used:    1
 14341 ;; Hardware stack levels required when called:    3
 14342 ;; This function calls:
 14343 ;;		Nothing
 14344 ;; This function is called by:
 14345 ;;		_setLED_Initialization
 14346 ;;		_setLED
 14347 ;;		_setLED_Main
 14348 ;; This function uses a non-reentrant model
 14349 ;;
 14350                           
 14351                           
 14352                           ;psect for function _LedPointSelect
 14353  1C03                     _LedPointSelect:	
 14354                           
 14355                           ;incstack = 0
 14356                           ; Regs used in _LedPointSelect: [wreg]
 14357                           ;LedPointSelect@led stored from wreg
 14358  1C03  00F3               	movwf	LedPointSelect@led
 14359                           
 14360                           ;LED_B1.c: 24: if (led == 99) {
 14361  1C04  0873               	movf	LedPointSelect@led,w
 14362  1C05  3A63               	xorlw	99
 14363  1C06  1D03               	skipz
 14364  1C07  0008               	return
 14365                           
 14366                           ;LED_B1.c: 25: LED = &VarErrLED;
 14367  1C08  3066               	movlw	_VarErrLED& (0+255)
 14368  1C09  00F2               	movwf	??_LedPointSelect
 14369  1C0A  0872               	movf	??_LedPointSelect,w
 14370  1C0B  0021               	movlb	1	; select bank1
 14371  1C0C  00DB               	movwf	_LED^(0+128)
 14372  1C0D  0008               	return
 14373  1C0E                     __end_of_LedPointSelect:	
 14374                           
 14375                           	psect	text94
 14376  1B5F                     __ptext94:	
 14377 ;; *************** function _setDimmerLights_DimmingClose *****************
 14378 ;; Defined at:
 14379 ;;		line 1833 in file "../src/Dimmer_B1.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;		None
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;		None
 14384 ;; Return value:  Size  Location     Type
 14385 ;;		None               void
 14386 ;; Registers used:
 14387 ;;		wreg, status,2, status,0, pclath, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;Total ram usage:        0 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    4
 14400 ;; This function calls:
 14401 ;;		_setDimmerIntr_Dimming_Sw
 14402 ;; This function is called by:
 14403 ;;		_setDimmerLights_OnOff
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           
 14408                           ;psect for function _setDimmerLights_DimmingClose
 14409  1B5F                     _setDimmerLights_DimmingClose:	
 14410                           
 14411                           ;Dimmer_B1.c: 1835: setDimmerIntr_Dimming_Sw(1, 0);
 14412                           
 14413                           ;incstack = 0
 14414                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14415  1B5F  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14416  1B60  3001               	movlw	1
 14417  1B61  319D  25DF         	fcall	_setDimmerIntr_Dimming_Sw
 14418  1B63  0008               	return
 14419  1B64                     __end_of_setDimmerLights_DimmingClose:	
 14420                           
 14421                           	psect	text95
 14422  1E30                     __ptext95:	
 14423 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14424 ;; Defined at:
 14425 ;;		line 262 in file "../src/Dimmer_B1.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;  lights          1    wreg     unsigned char 
 14428 ;;  command         1    2[COMMON] unsigned char 
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;  lights          1    4[COMMON] unsigned char 
 14431 ;; Return value:  Size  Location     Type
 14432 ;;		None               void
 14433 ;; Registers used:
 14434 ;;		wreg, status,2, status,0
 14435 ;; Tracked objects:
 14436 ;;		On entry : 0/0
 14437 ;;		On exit  : 0/0
 14438 ;;		Unchanged: 0/0
 14439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14440 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;Total ram usage:        3 bytes
 14445 ;; Hardware stack levels used:    1
 14446 ;; Hardware stack levels required when called:    3
 14447 ;; This function calls:
 14448 ;;		Nothing
 14449 ;; This function is called by:
 14450 ;;		_setDimmerLights_OnOff
 14451 ;;		_setRFSW_AdjControl
 14452 ;;		_DimmerLights_AssignationDimming
 14453 ;; This function uses a non-reentrant model
 14454 ;;
 14455                           
 14456                           
 14457                           ;psect for function _setDimmerIntr_Dimming_RF
 14458  1E30                     _setDimmerIntr_Dimming_RF:	
 14459                           
 14460                           ;incstack = 0
 14461                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14462                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14463  1E30  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14464                           
 14465                           ;Dimmer_B1.c: 264: if (lights == 1) {
 14466  1E31  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14467  1E32  3A01               	xorlw	1
 14468  1E33  1D03               	skipz
 14469  1E34  0008               	return
 14470                           
 14471                           ;Dimmer_B1.c: 265: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14472  1E35  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14473  1E36  3A01               	xorlw	1
 14474  1E37  3000               	movlw	0
 14475  1E38  1903               	skipnz
 14476  1E39  3001               	movlw	1
 14477  1E3A  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14478  1E3B  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14479  1E3C  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14480  1E3D  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14481  1E3E  0021               	movlb	1	; select bank1
 14482  1E3F  0820               	movf	_DimmerIntr1^(0+128),w
 14483  1E40  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14484  1E41  39BF               	andlw	-65
 14485  1E42  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14486  1E43  00A0               	movwf	_DimmerIntr1^(0+128)
 14487  1E44  0008               	return
 14488  1E45                     __end_of_setDimmerIntr_Dimming_RF:	
 14489                           
 14490                           	psect	text96
 14491  1C52                     __ptext96:	
 14492 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14493 ;; Defined at:
 14494 ;;		line 109 in file "../src/Dimmer_B1.c"
 14495 ;; Parameters:    Size  Location     Type
 14496 ;;  lights          1    wreg     unsigned char 
 14497 ;;  value           1   58[BANK0 ] unsigned char 
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;  lights          1   60[BANK0 ] unsigned char 
 14500 ;; Return value:  Size  Location     Type
 14501 ;;		None               void
 14502 ;; Registers used:
 14503 ;;		wreg
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14509 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;Total ram usage:        3 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    3
 14516 ;; This function calls:
 14517 ;;		Nothing
 14518 ;; This function is called by:
 14519 ;;		_setDimmerLights_OnOff
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           
 14524                           ;psect for function _setDimmerIntr_DimmingValue
 14525  1C52                     _setDimmerIntr_DimmingValue:	
 14526                           
 14527                           ;incstack = 0
 14528                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14529                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14530  1C52  0020               	movlb	0	; select bank0
 14531  1C53  00DC               	movwf	setDimmerIntr_DimmingValue@lights
 14532                           
 14533                           ;Dimmer_B1.c: 111: if (lights == 1) {
 14534  1C54  085C               	movf	setDimmerIntr_DimmingValue@lights,w
 14535  1C55  3A01               	xorlw	1
 14536  1C56  1D03               	skipz
 14537  1C57  0008               	return
 14538                           
 14539                           ;Dimmer_B1.c: 112: DimmerIntr1.DimmingValue = value;
 14540  1C58  085A               	movf	setDimmerIntr_DimmingValue@value,w
 14541  1C59  00DB               	movwf	??_setDimmerIntr_DimmingValue
 14542  1C5A  085B               	movf	??_setDimmerIntr_DimmingValue,w
 14543  1C5B  0021               	movlb	1	; select bank1
 14544  1C5C  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 14545  1C5D  0008               	return
 14546  1C5E                     __end_of_setDimmerIntr_DimmingValue:	
 14547                           
 14548                           	psect	text97
 14549  1E1B                     __ptext97:	
 14550 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14551 ;; Defined at:
 14552 ;;		line 91 in file "../src/Dimmer_B1.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;  lights          1    wreg     unsigned char 
 14555 ;;  command         1    2[COMMON] unsigned char 
 14556 ;; Auto vars:     Size  Location     Type
 14557 ;;  lights          1    4[COMMON] unsigned char 
 14558 ;; Return value:  Size  Location     Type
 14559 ;;		None               void
 14560 ;; Registers used:
 14561 ;;		wreg, status,2, status,0
 14562 ;; Tracked objects:
 14563 ;;		On entry : 0/0
 14564 ;;		On exit  : 0/0
 14565 ;;		Unchanged: 0/0
 14566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14567 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;Total ram usage:        3 bytes
 14572 ;; Hardware stack levels used:    1
 14573 ;; Hardware stack levels required when called:    3
 14574 ;; This function calls:
 14575 ;;		Nothing
 14576 ;; This function is called by:
 14577 ;;		_setDimmerLights_OnOff
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           
 14582                           ;psect for function _setDimmerIntr_ControlStatus
 14583  1E1B                     _setDimmerIntr_ControlStatus:	
 14584                           
 14585                           ;incstack = 0
 14586                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14587                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14588  1E1B  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14589                           
 14590                           ;Dimmer_B1.c: 93: if (lights == 1) {
 14591  1E1C  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14592  1E1D  3A01               	xorlw	1
 14593  1E1E  1D03               	skipz
 14594  1E1F  0008               	return
 14595                           
 14596                           ;Dimmer_B1.c: 94: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14597  1E20  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14598  1E21  3A01               	xorlw	1
 14599  1E22  3000               	movlw	0
 14600  1E23  1903               	skipnz
 14601  1E24  3001               	movlw	1
 14602  1E25  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14603  1E26  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14604  1E27  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14605  1E28  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14606  1E29  0021               	movlb	1	; select bank1
 14607  1E2A  0820               	movf	_DimmerIntr1^(0+128),w
 14608  1E2B  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14609  1E2C  39F7               	andlw	-9
 14610  1E2D  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14611  1E2E  00A0               	movwf	_DimmerIntr1^(0+128)
 14612  1E2F  0008               	return
 14613  1E30                     __end_of_setDimmerIntr_ControlStatus:	
 14614                           
 14615                           	psect	text98
 14616  0D5D                     __ptext98:	
 14617 ;; *************** function _setDelayOff_GO *****************
 14618 ;; Defined at:
 14619 ;;		line 87 in file "../src/DelayOff_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;  sw              1    wreg     unsigned char 
 14622 ;;  command         1   61[BANK0 ] unsigned char 
 14623 ;;  value           1   62[BANK0 ] unsigned char 
 14624 ;; Auto vars:     Size  Location     Type
 14625 ;;  sw              1   68[BANK0 ] unsigned char 
 14626 ;;  k               1   67[BANK0 ] unsigned char 
 14627 ;;  j               1   66[BANK0 ] unsigned char 
 14628 ;;  i               1   65[BANK0 ] unsigned char 
 14629 ;; Return value:  Size  Location     Type
 14630 ;;		None               void
 14631 ;; Registers used:
 14632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14638 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;Total ram usage:        8 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    4
 14645 ;; This function calls:
 14646 ;;		_DelayOffPointSelect
 14647 ;;		___bmul
 14648 ;;		_setProductData
 14649 ;; This function is called by:
 14650 ;;		_setDimmerLights_OnOff
 14651 ;;		_setRFSW_Control
 14652 ;; This function uses a non-reentrant model
 14653 ;;
 14654                           
 14655                           
 14656                           ;psect for function _setDelayOff_GO
 14657  0D5D                     _setDelayOff_GO:	
 14658                           
 14659                           ;incstack = 0
 14660                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14661                           ;setDelayOff_GO@sw stored from wreg
 14662  0D5D  0020               	movlb	0	; select bank0
 14663  0D5E  00E4               	movwf	setDelayOff_GO@sw
 14664                           
 14665                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14666  0D5F  0864               	movf	setDelayOff_GO@sw,w
 14667  0D60  319B  23ED  318D   	fcall	_DelayOffPointSelect
 14668                           
 14669                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14670  0D63  0020               	movlb	0	; select bank0
 14671  0D64  085D               	movf	setDelayOff_GO@command,w
 14672  0D65  3A01               	xorlw	1
 14673  0D66  3000               	movlw	0
 14674  0D67  1903               	skipnz
 14675  0D68  3001               	movlw	1
 14676  0D69  00DF               	movwf	??_setDelayOff_GO
 14677  0D6A  0021               	movlb	1	; select bank1
 14678  0D6B  085A               	movf	_DelayOff^(0+128),w
 14679  0D6C  0086               	movwf	6
 14680  0D6D  3001               	movlw	1	; select bank2/3
 14681  0D6E  0087               	movwf	7
 14682  0D6F  0020               	movlb	0	; select bank0
 14683  0D70  0DDF               	rlf	??_setDelayOff_GO,f
 14684  0D71  0801               	movf	1,w
 14685  0D72  065F               	xorwf	??_setDelayOff_GO,w
 14686  0D73  39FD               	andlw	-3
 14687  0D74  065F               	xorwf	??_setDelayOff_GO,w
 14688  0D75  0081               	movwf	1
 14689                           
 14690                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14691  0D76  0021               	movlb	1	; select bank1
 14692  0D77  085A               	movf	_DelayOff^(0+128),w
 14693  0D78  3E02               	addlw	2
 14694  0D79  0086               	movwf	6
 14695  0D7A  3001               	movlw	1	; select bank2/3
 14696  0D7B  0087               	movwf	7
 14697  0D7C  3000               	movlw	0
 14698  0D7D  3FC0               	movwi [0]fsr1
 14699  0D7E  3FC1               	movwi [1]fsr1
 14700                           
 14701                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14702  0D7F  085A               	movf	_DelayOff^(0+128),w
 14703  0D80  3E04               	addlw	4
 14704  0D81  0086               	movwf	6
 14705  0D82  3001               	movlw	1	; select bank2/3
 14706  0D83  0087               	movwf	7
 14707  0D84  0181               	clrf	1
 14708                           
 14709                           ;DelayOff_B1.c: 94: if (command == 1) {
 14710  0D85  0020               	movlb	0	; select bank0
 14711  0D86  085D               	movf	setDelayOff_GO@command,w
 14712  0D87  3A01               	xorlw	1
 14713  0D88  1D03               	skipz
 14714  0D89  2DDF               	goto	l6391
 14715                           
 14716                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14717  0D8A  3005               	movlw	5
 14718  0D8B  00DF               	movwf	??_setDelayOff_GO
 14719  0D8C  085F               	movf	??_setDelayOff_GO,w
 14720  0D8D  00E1               	movwf	setDelayOff_GO@i
 14721  0D8E  01E2               	clrf	setDelayOff_GO@j
 14722  0D8F  01E3               	clrf	setDelayOff_GO@k
 14723                           
 14724                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14725  0D90  300F               	movlw	15
 14726  0D91  055E               	andwf	setDelayOff_GO@value,w
 14727  0D92  00DF               	movwf	??_setDelayOff_GO
 14728  0D93  085F               	movf	??_setDelayOff_GO,w
 14729  0D94  3A05               	xorlw	5
 14730  0D95  1903               	skipnz
 14731  0D96  2D9B               	goto	l6377
 14732  0D97  085E               	movf	setDelayOff_GO@value,w
 14733  0D98  390F               	andlw	15
 14734  0D99  1D03               	btfss	3,2
 14735  0D9A  2DCB               	goto	l6387
 14736  0D9B                     l6377:	
 14737  0D9B  3031               	movlw	49
 14738  0D9C  025E               	subwf	setDelayOff_GO@value,w
 14739  0D9D  1803               	skipnc
 14740  0D9E  2DCB               	goto	l6387
 14741                           
 14742                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14743  0D9F  085E               	movf	setDelayOff_GO@value,w
 14744  0DA0  390F               	andlw	15
 14745  0DA1  00DF               	movwf	??_setDelayOff_GO
 14746  0DA2  085F               	movf	??_setDelayOff_GO,w
 14747  0DA3  00E2               	movwf	setDelayOff_GO@j
 14748                           
 14749                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14750  0DA4  085E               	movf	setDelayOff_GO@value,w
 14751  0DA5  00DF               	movwf	??_setDelayOff_GO
 14752  0DA6  3004               	movlw	4
 14753  0DA7                     u5425:	
 14754  0DA7  36DF               	lsrf	??_setDelayOff_GO,f
 14755  0DA8  0B89               	decfsz	9,f
 14756  0DA9  2DA7               	goto	u5425
 14757  0DAA  085F               	movf	??_setDelayOff_GO,w
 14758  0DAB  390F               	andlw	15
 14759  0DAC  00E0               	movwf	??_setDelayOff_GO+1
 14760  0DAD  0860               	movf	??_setDelayOff_GO+1,w
 14761  0DAE  00E3               	movwf	setDelayOff_GO@k
 14762                           
 14763                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14764  0DAF  300A               	movlw	10
 14765  0DB0  00DF               	movwf	??_setDelayOff_GO
 14766  0DB1  085F               	movf	??_setDelayOff_GO,w
 14767  0DB2  00F2               	movwf	___bmul@multiplicand
 14768  0DB3  0863               	movf	setDelayOff_GO@k,w
 14769  0DB4  319D  2565  318D   	fcall	___bmul
 14770  0DB7  0020               	movlb	0	; select bank0
 14771  0DB8  0762               	addwf	setDelayOff_GO@j,w
 14772  0DB9  00E0               	movwf	??_setDelayOff_GO+1
 14773  0DBA  0021               	movlb	1	; select bank1
 14774  0DBB  0A5A               	incf	_DelayOff^(0+128),w
 14775  0DBC  0086               	movwf	6
 14776  0DBD  3001               	movlw	1	; select bank2/3
 14777  0DBE  0087               	movwf	7
 14778  0DBF  0020               	movlb	0	; select bank0
 14779  0DC0  0860               	movf	??_setDelayOff_GO+1,w
 14780  0DC1  0081               	movwf	1
 14781                           
 14782                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14783  0DC2  085E               	movf	setDelayOff_GO@value,w
 14784  0DC3  00DF               	movwf	??_setDelayOff_GO
 14785  0DC4  085F               	movf	??_setDelayOff_GO,w
 14786  0DC5  00DA               	movwf	setProductData@value
 14787  0DC6  0864               	movf	setDelayOff_GO@sw,w
 14788  0DC7  3E1A               	addlw	26
 14789  0DC8  319C  243A         	fcall	_setProductData
 14790                           
 14791                           ;DelayOff_B1.c: 103: } else {
 14792  0DCA  0008               	return
 14793  0DCB                     l6387:	
 14794                           
 14795                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14796  0DCB  3005               	movlw	5
 14797  0DCC  0020               	movlb	0	; select bank0
 14798  0DCD  00DF               	movwf	??_setDelayOff_GO
 14799  0DCE  0021               	movlb	1	; select bank1
 14800  0DCF  0A5A               	incf	_DelayOff^(0+128),w
 14801  0DD0  0086               	movwf	6
 14802  0DD1  3001               	movlw	1	; select bank2/3
 14803  0DD2  0087               	movwf	7
 14804  0DD3  0020               	movlb	0	; select bank0
 14805  0DD4  085F               	movf	??_setDelayOff_GO,w
 14806  0DD5  0081               	movwf	1
 14807                           
 14808                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14809  0DD6  3005               	movlw	5
 14810  0DD7  00DF               	movwf	??_setDelayOff_GO
 14811  0DD8  085F               	movf	??_setDelayOff_GO,w
 14812  0DD9  00DA               	movwf	setProductData@value
 14813  0DDA  0864               	movf	setDelayOff_GO@sw,w
 14814  0DDB  3E1A               	addlw	26
 14815  0DDC  319C  243A         	fcall	_setProductData
 14816                           
 14817                           ;DelayOff_B1.c: 106: }
 14818                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14819  0DDE  0008               	return
 14820  0DDF                     l6391:	
 14821  0DDF  0020               	movlb	0	; select bank0
 14822  0DE0  08DD               	movf	setDelayOff_GO@command,f
 14823  0DE1  1D03               	skipz
 14824  0DE2  0008               	return
 14825                           
 14826                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14827  0DE3  01DA               	clrf	setProductData@value
 14828  0DE4  0864               	movf	setDelayOff_GO@sw,w
 14829  0DE5  3E1A               	addlw	26
 14830  0DE6  319C  243A         	fcall	_setProductData
 14831  0DE8  0008               	return
 14832  0DE9                     __end_of_setDelayOff_GO:	
 14833                           
 14834                           	psect	text99
 14835  1D65                     __ptext99:	
 14836 ;; *************** function ___bmul *****************
 14837 ;; Defined at:
 14838 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;  multiplier      1    wreg     unsigned char 
 14841 ;;  multiplicand    1    2[COMMON] unsigned char 
 14842 ;; Auto vars:     Size  Location     Type
 14843 ;;  multiplier      1    5[COMMON] unsigned char 
 14844 ;;  product         1    4[COMMON] unsigned char 
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  1    wreg      unsigned char 
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14854 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;Total ram usage:        4 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    3
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		_setDelayOff_GO
 14865 ;;		_DelayTimejudge
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           
 14870                           ;psect for function ___bmul
 14871  1D65                     ___bmul:	
 14872                           
 14873                           ;incstack = 0
 14874                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14875                           ;___bmul@multiplier stored from wreg
 14876  1D65  00F5               	movwf	___bmul@multiplier
 14877  1D66  01F4               	clrf	___bmul@product
 14878  1D67                     l6051:	
 14879  1D67  1C75               	btfss	___bmul@multiplier,0
 14880  1D68  2D6D               	goto	l6055
 14881  1D69  0872               	movf	___bmul@multiplicand,w
 14882  1D6A  00F3               	movwf	??___bmul
 14883  1D6B  0873               	movf	??___bmul,w
 14884  1D6C  07F4               	addwf	___bmul@product,f
 14885  1D6D                     l6055:	
 14886  1D6D  1003               	clrc
 14887  1D6E  0DF2               	rlf	___bmul@multiplicand,f
 14888  1D6F  1003               	clrc
 14889  1D70  0CF5               	rrf	___bmul@multiplier,f
 14890  1D71  08F5               	movf	___bmul@multiplier,f
 14891  1D72  1D03               	skipz
 14892  1D73  2D67               	goto	l6051
 14893  1D74  0874               	movf	___bmul@product,w
 14894  1D75  0008               	return
 14895  1D76                     __end_of___bmul:	
 14896                           
 14897                           	psect	text100
 14898  1E06                     __ptext100:	
 14899 ;; *************** function _setCmd_Status *****************
 14900 ;; Defined at:
 14901 ;;		line 657 in file "../src/Main_B1.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;  number          1    wreg     unsigned char 
 14904 ;;  cmd             1    2[COMMON] unsigned char 
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  number          1    4[COMMON] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;		None               void
 14909 ;; Registers used:
 14910 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        3 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    3
 14923 ;; This function calls:
 14924 ;;		Nothing
 14925 ;; This function is called by:
 14926 ;;		_setDimmerLights_OnOff
 14927 ;;		_setControl_Lights_Table
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function _setCmd_Status
 14933  1E06                     _setCmd_Status:	
 14934                           
 14935                           ;incstack = 0
 14936                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14937                           ;setCmd_Status@number stored from wreg
 14938  1E06  00F4               	movwf	setCmd_Status@number
 14939                           
 14940                           ;Main_B1.c: 658: switch (number) {
 14941  1E07  2E15               	goto	l6555
 14942  1E08                     l6551:	
 14943                           ;Main_B1.c: 659: case 1:
 14944                           
 14945                           
 14946                           ;Main_B1.c: 660: Cmd.all_off = cmd == 1 ? 1 : 0;
 14947  1E08  0872               	movf	setCmd_Status@cmd,w
 14948  1E09  3A01               	xorlw	1
 14949  1E0A  3000               	movlw	0
 14950  1E0B  1903               	skipnz
 14951  1E0C  3001               	movlw	1
 14952  1E0D  00F3               	movwf	??_setCmd_Status
 14953  1E0E  0021               	movlb	1	; select bank1
 14954  1E0F  0859               	movf	_Cmd^(0+128),w
 14955  1E10  0673               	xorwf	??_setCmd_Status,w
 14956  1E11  39FE               	andlw	-2
 14957  1E12  0673               	xorwf	??_setCmd_Status,w
 14958  1E13  00D9               	movwf	_Cmd^(0+128)
 14959                           
 14960                           ;Main_B1.c: 662: }
 14961                           
 14962                           ;Main_B1.c: 661: break;
 14963  1E14  0008               	return
 14964  1E15                     l6555:	
 14965  1E15  0874               	movf	setCmd_Status@number,w
 14966                           
 14967                           ; Switch size 1, requested type "space"
 14968                           ; Number of cases is 1, Range of values is 1 to 1
 14969                           ; switch strategies available:
 14970                           ; Name         Instructions Cycles
 14971                           ; simple_byte            4     3 (average)
 14972                           ; direct_byte           11     9 (fixed)
 14973                           ; jumptable            263     9 (fixed)
 14974                           ;	Chosen strategy is simple_byte
 14975  1E16  3A01               	xorlw	1	; case 1
 14976  1E17  1903               	skipnz
 14977  1E18  2E08               	goto	l6551
 14978  1E19  2E1A               	goto	l1564
 14979  1E1A                     l1564:	
 14980  1E1A  0008               	return
 14981  1E1B                     __end_of_setCmd_Status:	
 14982                           
 14983                           	psect	text101
 14984  1BA6                     __ptext101:	
 14985 ;; *************** function _getMain_All_LightsStatus *****************
 14986 ;; Defined at:
 14987 ;;		line 379 in file "../src/Main_B1.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;		None
 14990 ;; Auto vars:     Size  Location     Type
 14991 ;;  status          1    2[COMMON] unsigned char 
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  1    wreg      unsigned char 
 14994 ;; Registers used:
 14995 ;;		wreg, status,2
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;Total ram usage:        1 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; Hardware stack levels required when called:    3
 15008 ;; This function calls:
 15009 ;;		Nothing
 15010 ;; This function is called by:
 15011 ;;		_DimmerLights_Main
 15012 ;;		_setDimmerLights_Main
 15013 ;;		_setDimmerLights_OnOff
 15014 ;;		_Flash_Memory_Main
 15015 ;;		_Exception_Main
 15016 ;;		_Load_Main
 15017 ;;		_setTemp_Main
 15018 ;;		_setControl_Lights_Table
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022                           
 15023                           ;psect for function _getMain_All_LightsStatus
 15024  1BA6                     _getMain_All_LightsStatus:	
 15025                           
 15026                           ;Main_B1.c: 380: char status = 0;
 15027                           
 15028                           ;incstack = 0
 15029                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15030  1BA6  01F2               	clrf	getMain_All_LightsStatus@status
 15031                           
 15032                           ;Main_B1.c: 387: status = DimmerLights1.Status == 1 ? 1 : 0;
 15033  1BA7  3000               	movlw	0
 15034  1BA8  0022               	movlb	2	; select bank2
 15035  1BA9  1859               	btfsc	(_DimmerLights1^(0+256)+1),0
 15036  1BAA  3001               	movlw	1
 15037  1BAB  00F2               	movwf	getMain_All_LightsStatus@status
 15038                           
 15039                           ;Main_B1.c: 426: return status;
 15040  1BAC  0872               	movf	getMain_All_LightsStatus@status,w
 15041  1BAD  0008               	return
 15042  1BAE                     __end_of_getMain_All_LightsStatus:	
 15043                           
 15044                           	psect	text102
 15045  1CD7                     __ptext102:	
 15046 ;; *************** function _getDelayOff_GO *****************
 15047 ;; Defined at:
 15048 ;;		line 114 in file "../src/DelayOff_B1.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  sw              1    wreg     unsigned char 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  sw              1    4[COMMON] unsigned char 
 15053 ;;  go              1    5[COMMON] unsigned char 
 15054 ;; Return value:  Size  Location     Type
 15055 ;;                  1    wreg      unsigned char 
 15056 ;; Registers used:
 15057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15058 ;; Tracked objects:
 15059 ;;		On entry : 0/0
 15060 ;;		On exit  : 0/0
 15061 ;;		Unchanged: 0/0
 15062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;Total ram usage:        2 bytes
 15068 ;; Hardware stack levels used:    1
 15069 ;; Hardware stack levels required when called:    4
 15070 ;; This function calls:
 15071 ;;		_DelayOffPointSelect
 15072 ;; This function is called by:
 15073 ;;		_setDimmerLights_OnOff
 15074 ;; This function uses a non-reentrant model
 15075 ;;
 15076                           
 15077                           
 15078                           ;psect for function _getDelayOff_GO
 15079  1CD7                     _getDelayOff_GO:	
 15080                           
 15081                           ;incstack = 0
 15082                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15083                           ;getDelayOff_GO@sw stored from wreg
 15084  1CD7  00F4               	movwf	getDelayOff_GO@sw
 15085                           
 15086                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15087  1CD8  0874               	movf	getDelayOff_GO@sw,w
 15088  1CD9  319B  23ED         	fcall	_DelayOffPointSelect
 15089                           
 15090                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15091  1CDB  0021               	movlb	1	; select bank1
 15092  1CDC  085A               	movf	_DelayOff^(0+128),w
 15093  1CDD  0086               	movwf	6
 15094  1CDE  3001               	movlw	1	; select bank2/3
 15095  1CDF  0087               	movwf	7
 15096  1CE0  3000               	movlw	0
 15097  1CE1  1881               	btfsc	1,1
 15098  1CE2  3001               	movlw	1
 15099  1CE3  00F5               	movwf	getDelayOff_GO@go
 15100                           
 15101                           ;DelayOff_B1.c: 117: return go;
 15102  1CE4  0875               	movf	getDelayOff_GO@go,w
 15103  1CE5  0008               	return
 15104  1CE6                     __end_of_getDelayOff_GO:	
 15105                           
 15106                           	psect	text103
 15107  1D15                     __ptext103:	
 15108 ;; *************** function _getCmd_Status *****************
 15109 ;; Defined at:
 15110 ;;		line 665 in file "../src/Main_B1.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;  number          1    wreg     unsigned char 
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;  number          1    2[COMMON] unsigned char 
 15115 ;;  cmd             1    3[COMMON] unsigned char 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  1    wreg      unsigned char 
 15118 ;; Registers used:
 15119 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;Total ram usage:        2 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    3
 15132 ;; This function calls:
 15133 ;;		Nothing
 15134 ;; This function is called by:
 15135 ;;		_setDimmerLights_OnOff
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           
 15140                           ;psect for function _getCmd_Status
 15141  1D15                     _getCmd_Status:	
 15142                           
 15143                           ;incstack = 0
 15144                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15145                           ;getCmd_Status@number stored from wreg
 15146  1D15  00F2               	movwf	getCmd_Status@number
 15147                           
 15148                           ;Main_B1.c: 666: char cmd = 0;
 15149  1D16  01F3               	clrf	getCmd_Status@cmd
 15150                           
 15151                           ;Main_B1.c: 667: switch (number) {
 15152  1D17  2D1E               	goto	l6841
 15153  1D18                     l6837:	
 15154                           ;Main_B1.c: 668: case 1:
 15155                           
 15156                           
 15157                           ;Main_B1.c: 669: cmd = Cmd.all_off == 1 ? 1 : 0;
 15158  1D18  3000               	movlw	0
 15159  1D19  0021               	movlb	1	; select bank1
 15160  1D1A  1859               	btfsc	_Cmd^(0+128),0
 15161  1D1B  3001               	movlw	1
 15162  1D1C  00F3               	movwf	getCmd_Status@cmd
 15163                           
 15164                           ;Main_B1.c: 671: }
 15165                           
 15166                           ;Main_B1.c: 670: break;
 15167  1D1D  2D23               	goto	l6843
 15168  1D1E                     l6841:	
 15169  1D1E  0872               	movf	getCmd_Status@number,w
 15170                           
 15171                           ; Switch size 1, requested type "space"
 15172                           ; Number of cases is 1, Range of values is 1 to 1
 15173                           ; switch strategies available:
 15174                           ; Name         Instructions Cycles
 15175                           ; simple_byte            4     3 (average)
 15176                           ; direct_byte           11     9 (fixed)
 15177                           ; jumptable            263     9 (fixed)
 15178                           ;	Chosen strategy is simple_byte
 15179  1D1F  3A01               	xorlw	1	; case 1
 15180  1D20  1903               	skipnz
 15181  1D21  2D18               	goto	l6837
 15182  1D22  2D23               	goto	l6843
 15183  1D23                     l6843:	
 15184                           
 15185                           ;Main_B1.c: 672: return cmd;
 15186  1D23  0873               	movf	getCmd_Status@cmd,w
 15187  1D24  0008               	return
 15188  1D25                     __end_of_getCmd_Status:	
 15189                           
 15190                           	psect	text104
 15191  1638                     __ptext104:	
 15192 ;; *************** function _setDimmerLights_Dimming *****************
 15193 ;; Defined at:
 15194 ;;		line 1084 in file "../src/Dimmer_B1.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;  lights          1    wreg     unsigned char 
 15197 ;;  status          1   66[BANK0 ] unsigned char 
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;  lights          1   69[BANK0 ] unsigned char 
 15200 ;;  value           1   68[BANK0 ] unsigned char 
 15201 ;; Return value:  Size  Location     Type
 15202 ;;		None               void
 15203 ;; Registers used:
 15204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15205 ;; Tracked objects:
 15206 ;;		On entry : 0/0
 15207 ;;		On exit  : 0/0
 15208 ;;		Unchanged: 0/0
 15209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15210 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;Total ram usage:        4 bytes
 15215 ;; Hardware stack levels used:    1
 15216 ;; Hardware stack levels required when called:    6
 15217 ;; This function calls:
 15218 ;;		_getDimmerIntr_DimmingValue
 15219 ;;		_getDimmerLights_ValueToPercent
 15220 ;;		_setBuz
 15221 ;;		_setDimmerIntr_Dimming_Sw
 15222 ;;		_setDimmerIntr_MaxmumValue
 15223 ;;		_setDimmerLights_Line
 15224 ;;		_setMemory_Modify
 15225 ;;		_setProductData
 15226 ;;		_setRF_DimmerLights
 15227 ;;		_setRF_TransceiveGO
 15228 ;;		_setTxData
 15229 ;; This function is called by:
 15230 ;;		_setDimmerLights_Main
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234                           
 15235                           ;psect for function _setDimmerLights_Dimming
 15236  1638                     _setDimmerLights_Dimming:	
 15237                           
 15238                           ;incstack = 0
 15239                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15240                           ;setDimmerLights_Dimming@lights stored from wreg
 15241  1638  0020               	movlb	0	; select bank0
 15242  1639  00E5               	movwf	setDimmerLights_Dimming@lights
 15243                           
 15244                           ;Dimmer_B1.c: 1085: setDimmerIntr_Dimming_Sw(lights, status);
 15245  163A  0862               	movf	setDimmerLights_Dimming@status,w
 15246  163B  00E3               	movwf	??_setDimmerLights_Dimming
 15247  163C  0863               	movf	??_setDimmerLights_Dimming,w
 15248  163D  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 15249  163E  0865               	movf	setDimmerLights_Dimming@lights,w
 15250  163F  319D  25DF  3196   	fcall	_setDimmerIntr_Dimming_Sw
 15251                           
 15252                           ;Dimmer_B1.c: 1086: if (status == 1) {
 15253  1642  0020               	movlb	0	; select bank0
 15254  1643  0862               	movf	setDimmerLights_Dimming@status,w
 15255  1644  3A01               	xorlw	1
 15256  1645  1D03               	skipz
 15257  1646  2E54               	goto	l9251
 15258                           
 15259                           ;Dimmer_B1.c: 1088: setRF_TransceiveGO(0);
 15260  1647  3000               	movlw	0
 15261  1648  319D  2505  3196   	fcall	_setRF_TransceiveGO
 15262                           
 15263                           ;Dimmer_B1.c: 1090: setBuz(1, 100);
 15264  164B  3064               	movlw	100
 15265  164C  0020               	movlb	0	; select bank0
 15266  164D  00A4               	movwf	setBuz@time
 15267  164E  3000               	movlw	0
 15268  164F  00A5               	movwf	setBuz@time+1
 15269  1650  3001               	movlw	1
 15270  1651  3195  253E         	fcall	_setBuz
 15271                           
 15272                           ;Dimmer_B1.c: 1091: } else if (status == 0) {
 15273  1653  0008               	return
 15274  1654                     l9251:	
 15275  1654  0020               	movlb	0	; select bank0
 15276  1655  08E2               	movf	setDimmerLights_Dimming@status,f
 15277  1656  1D03               	skipz
 15278  1657  0008               	return
 15279                           
 15280                           ;Dimmer_B1.c: 1094: Dimmer.Load_Status = 0;
 15281  1658  0022               	movlb	2	; select bank2
 15282  1659  1120               	bcf	_Dimmer^(0+256),2
 15283                           
 15284                           ;Dimmer_B1.c: 1095: setDimmerLights_Line(lights);
 15285  165A  0020               	movlb	0	; select bank0
 15286  165B  0865               	movf	setDimmerLights_Dimming@lights,w
 15287  165C  319C  2490  3196   	fcall	_setDimmerLights_Line
 15288                           
 15289                           ;Dimmer_B1.c: 1097: char value = getDimmerIntr_DimmingValue(lights);
 15290  165F  0020               	movlb	0	; select bank0
 15291  1660  0865               	movf	setDimmerLights_Dimming@lights,w
 15292  1661  319C  2483  3196   	fcall	_getDimmerIntr_DimmingValue
 15293  1664  0020               	movlb	0	; select bank0
 15294  1665  00E3               	movwf	??_setDimmerLights_Dimming
 15295  1666  0863               	movf	??_setDimmerLights_Dimming,w
 15296  1667  00E4               	movwf	setDimmerLights_Dimming@value
 15297                           
 15298                           ;Dimmer_B1.c: 1098: setDimmerIntr_MaxmumValue(lights, value);
 15299  1668  0864               	movf	setDimmerLights_Dimming@value,w
 15300  1669  00E3               	movwf	??_setDimmerLights_Dimming
 15301  166A  0863               	movf	??_setDimmerLights_Dimming,w
 15302  166B  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15303  166C  0865               	movf	setDimmerLights_Dimming@lights,w
 15304  166D  319C  2446  3196   	fcall	_setDimmerIntr_MaxmumValue
 15305                           
 15306                           ;Dimmer_B1.c: 1099: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15307  1670  0020               	movlb	0	; select bank0
 15308  1671  0864               	movf	setDimmerLights_Dimming@value,w
 15309  1672  3189  215F  3196   	fcall	_getDimmerLights_ValueToPercent
 15310  1675  0020               	movlb	0	; select bank0
 15311  1676  00E3               	movwf	??_setDimmerLights_Dimming
 15312  1677  0863               	movf	??_setDimmerLights_Dimming,w
 15313  1678  00DA               	movwf	setProductData@value
 15314  1679  0865               	movf	setDimmerLights_Dimming@lights,w
 15315  167A  3E14               	addlw	20
 15316  167B  319C  243A  3196   	fcall	_setProductData
 15317                           
 15318                           ;Dimmer_B1.c: 1106: setMemory_Modify(1);
 15319  167E  3001               	movlw	1
 15320  167F  319C  24F5  3196   	fcall	_setMemory_Modify
 15321                           
 15322                           ;Dimmer_B1.c: 1110: setRF_DimmerLights(lights, 1);
 15323  1682  0020               	movlb	0	; select bank0
 15324  1683  01DD               	clrf	setRF_DimmerLights@on
 15325  1684  0ADD               	incf	setRF_DimmerLights@on,f
 15326  1685  0865               	movf	setDimmerLights_Dimming@lights,w
 15327  1686  318A  2229  3196   	fcall	_setRF_DimmerLights
 15328                           
 15329                           ;Dimmer_B1.c: 1111: setTxData();
 15330  1689  319B  2383         	fcall	_setTxData
 15331  168B  0008               	return
 15332  168C                     __end_of_setDimmerLights_Dimming:	
 15333                           
 15334                           	psect	text105
 15335  1B83                     __ptext105:	
 15336 ;; *************** function _setTxData *****************
 15337 ;; Defined at:
 15338 ;;		line 237 in file "../src/RF_Control_B1.c"
 15339 ;; Parameters:    Size  Location     Type
 15340 ;;		None
 15341 ;; Auto vars:     Size  Location     Type
 15342 ;;  i               1    0        unsigned char 
 15343 ;; Return value:  Size  Location     Type
 15344 ;;		None               void
 15345 ;; Registers used:
 15346 ;;		status,2
 15347 ;; Tracked objects:
 15348 ;;		On entry : 0/0
 15349 ;;		On exit  : 0/0
 15350 ;;		Unchanged: 0/0
 15351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;Total ram usage:        0 bytes
 15357 ;; Hardware stack levels used:    1
 15358 ;; Hardware stack levels required when called:    3
 15359 ;; This function calls:
 15360 ;;		Nothing
 15361 ;; This function is called by:
 15362 ;;		_setDimmerLights_OnOff
 15363 ;;		_setDimmerLights_Dimming
 15364 ;;		_getRxData
 15365 ;;		_setControl_Lights_Table
 15366 ;;		_setRFSW_Control
 15367 ;;		_setRFSW_AdjControl
 15368 ;; This function uses a non-reentrant model
 15369 ;;
 15370                           
 15371                           
 15372                           ;psect for function _setTxData
 15373  1B83                     _setTxData:	
 15374                           
 15375                           ;RF_Control_B1.c: 238: char i;
 15376                           ;RF_Control_B1.c: 239: if (RF1.Enable == 1) {
 15377                           
 15378                           ;incstack = 0
 15379                           ; Regs used in _setTxData: [status,2]
 15380  1B83  0021               	movlb	1	; select bank1
 15381  1B84  1C30               	btfss	_RF1^(0+128),0
 15382  1B85  0008               	return
 15383                           
 15384                           ;RF_Control_B1.c: 241: RF1.TransceiveGO = 1;
 15385  1B86  1530               	bsf	_RF1^(0+128),2
 15386                           
 15387                           ;RF_Control_B1.c: 242: RF1.Count = 0;
 15388  1B87  01B3               	clrf	(_RF1^(0+128)+3)
 15389  1B88  01B4               	clrf	((_RF1+1)^(0+128)+3)
 15390  1B89  0008               	return
 15391  1B8A                     __end_of_setTxData:	
 15392                           
 15393                           	psect	text106
 15394  1D05                     __ptext106:	
 15395 ;; *************** function _setRF_TransceiveGO *****************
 15396 ;; Defined at:
 15397 ;;		line 575 in file "../src/RF_Control_B1.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;  command         1    wreg     unsigned char 
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;  command         1    3[COMMON] unsigned char 
 15402 ;; Return value:  Size  Location     Type
 15403 ;;		None               void
 15404 ;; Registers used:
 15405 ;;		wreg, status,2, status,0
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;Total ram usage:        2 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    3
 15418 ;; This function calls:
 15419 ;;		Nothing
 15420 ;; This function is called by:
 15421 ;;		_setDimmerLights_Dimming
 15422 ;; This function uses a non-reentrant model
 15423 ;;
 15424                           
 15425                           
 15426                           ;psect for function _setRF_TransceiveGO
 15427  1D05                     _setRF_TransceiveGO:	
 15428                           
 15429                           ;incstack = 0
 15430                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15431                           ;setRF_TransceiveGO@command stored from wreg
 15432  1D05  00F3               	movwf	setRF_TransceiveGO@command
 15433                           
 15434                           ;RF_Control_B1.c: 576: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15435  1D06  0873               	movf	setRF_TransceiveGO@command,w
 15436  1D07  3A01               	xorlw	1
 15437  1D08  3000               	movlw	0
 15438  1D09  1903               	skipnz
 15439  1D0A  3001               	movlw	1
 15440  1D0B  00F2               	movwf	??_setRF_TransceiveGO
 15441  1D0C  0DF2               	rlf	??_setRF_TransceiveGO,f
 15442  1D0D  0DF2               	rlf	??_setRF_TransceiveGO,f
 15443  1D0E  0021               	movlb	1	; select bank1
 15444  1D0F  0830               	movf	_RF1^(0+128),w
 15445  1D10  0672               	xorwf	??_setRF_TransceiveGO,w
 15446  1D11  39FB               	andlw	-5
 15447  1D12  0672               	xorwf	??_setRF_TransceiveGO,w
 15448  1D13  00B0               	movwf	_RF1^(0+128)
 15449  1D14  0008               	return
 15450  1D15                     __end_of_setRF_TransceiveGO:	
 15451                           
 15452                           	psect	text107
 15453  0A29                     __ptext107:	
 15454 ;; *************** function _setRF_DimmerLights *****************
 15455 ;; Defined at:
 15456 ;;		line 550 in file "../src/RF_Control_B1.c"
 15457 ;; Parameters:    Size  Location     Type
 15458 ;;  lights          1    wreg     unsigned char 
 15459 ;;  on              1   61[BANK0 ] unsigned char 
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;  lights          1   65[BANK0 ] unsigned char 
 15462 ;;  status          1   64[BANK0 ] unsigned char 
 15463 ;; Return value:  Size  Location     Type
 15464 ;;		None               void
 15465 ;; Registers used:
 15466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15467 ;; Tracked objects:
 15468 ;;		On entry : 0/0
 15469 ;;		On exit  : 0/0
 15470 ;;		Unchanged: 0/0
 15471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15472 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15474 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;Total ram usage:        5 bytes
 15477 ;; Hardware stack levels used:    1
 15478 ;; Hardware stack levels required when called:    4
 15479 ;; This function calls:
 15480 ;;		_setProductData
 15481 ;; This function is called by:
 15482 ;;		_setDimmerLights_OnOff
 15483 ;;		_setDimmerLights_Dimming
 15484 ;;		_setRFSW_Control
 15485 ;; This function uses a non-reentrant model
 15486 ;;
 15487                           
 15488                           
 15489                           ;psect for function _setRF_DimmerLights
 15490  0A29                     _setRF_DimmerLights:	
 15491                           
 15492                           ;incstack = 0
 15493                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15494                           ;setRF_DimmerLights@lights stored from wreg
 15495  0A29  0020               	movlb	0	; select bank0
 15496  0A2A  00E1               	movwf	setRF_DimmerLights@lights
 15497                           
 15498                           ;RF_Control_B1.c: 551: char status = 1;
 15499  0A2B  01E0               	clrf	setRF_DimmerLights@status
 15500  0A2C  0AE0               	incf	setRF_DimmerLights@status,f
 15501                           
 15502                           ;RF_Control_B1.c: 552: switch (lights) {
 15503  0A2D  2A34               	goto	l6423
 15504  0A2E                     l6417:	
 15505                           ;RF_Control_B1.c: 553: case 2:
 15506                           
 15507  0A2E  2A31               	goto	L10
 15508  0A2F                     l6419:	
 15509                           ;RF_Control_B1.c: 556: case 3:
 15510                           
 15511                           ;RF_Control_B1.c: 555: break;
 15512                           
 15513                           ;RF_Control_B1.c: 554: status <<= 1;
 15514                           
 15515                           
 15516                           ;RF_Control_B1.c: 557: status <<= 2;
 15517  0A2F  1003               	clrc
 15518  0A30  0DE0               	rlf	setRF_DimmerLights@status,f
 15519  0A31                     L10:	
 15520  0A31  1003               	clrc
 15521  0A32  0DE0               	rlf	setRF_DimmerLights@status,f
 15522                           
 15523                           ;RF_Control_B1.c: 559: }
 15524                           
 15525                           ;RF_Control_B1.c: 558: break;
 15526  0A33  2A3C               	goto	l2311
 15527  0A34                     l6423:	
 15528  0A34  0861               	movf	setRF_DimmerLights@lights,w
 15529                           
 15530                           ; Switch size 1, requested type "space"
 15531                           ; Number of cases is 2, Range of values is 2 to 3
 15532                           ; switch strategies available:
 15533                           ; Name         Instructions Cycles
 15534                           ; simple_byte            7     4 (average)
 15535                           ; direct_byte           13     9 (fixed)
 15536                           ; jumptable            263     9 (fixed)
 15537                           ;	Chosen strategy is simple_byte
 15538  0A35  3A02               	xorlw	2	; case 2
 15539  0A36  1903               	skipnz
 15540  0A37  2A2E               	goto	l6417
 15541  0A38  3A01               	xorlw	1	; case 3
 15542  0A39  1903               	skipnz
 15543  0A3A  2A2F               	goto	l6419
 15544  0A3B  2A3C               	goto	l2311
 15545  0A3C                     l2311:	
 15546                           
 15547                           ;RF_Control_B1.c: 560: status = ~status;
 15548  0A3C  09E0               	comf	setRF_DimmerLights@status,f
 15549                           
 15550                           ;RF_Control_B1.c: 562: setProductData(11, lights);
 15551  0A3D  0861               	movf	setRF_DimmerLights@lights,w
 15552  0A3E  00DE               	movwf	??_setRF_DimmerLights
 15553  0A3F  085E               	movf	??_setRF_DimmerLights,w
 15554  0A40  00DA               	movwf	setProductData@value
 15555  0A41  300B               	movlw	11
 15556  0A42  319C  243A  318A   	fcall	_setProductData
 15557                           
 15558                           ;RF_Control_B1.c: 563: setProductData(17, product->Data[26 + lights]);
 15559  0A45  0020               	movlb	0	; select bank0
 15560  0A46  0861               	movf	setRF_DimmerLights@lights,w
 15561  0A47  3E1A               	addlw	26
 15562  0A48  077B               	addwf	_product,w
 15563  0A49  00DE               	movwf	??_setRF_DimmerLights
 15564  0A4A  085E               	movf	??_setRF_DimmerLights,w
 15565  0A4B  0086               	movwf	6
 15566  0A4C  3002               	movlw	2	; select bank4/5
 15567  0A4D  0087               	movwf	7
 15568  0A4E  0801               	movf	1,w
 15569  0A4F  00DF               	movwf	??_setRF_DimmerLights+1
 15570  0A50  085F               	movf	??_setRF_DimmerLights+1,w
 15571  0A51  00DA               	movwf	setProductData@value
 15572  0A52  3011               	movlw	17
 15573  0A53  319C  243A  318A   	fcall	_setProductData
 15574                           
 15575                           ;RF_Control_B1.c: 564: if (on == 1) {
 15576  0A56  0020               	movlb	0	; select bank0
 15577  0A57  085D               	movf	setRF_DimmerLights@on,w
 15578  0A58  3A01               	xorlw	1
 15579  0A59  1D03               	skipz
 15580  0A5A  2A7A               	goto	l6431
 15581                           
 15582                           ;RF_Control_B1.c: 565: setProductData(9, product->Data[20 + lights]);
 15583  0A5B  0861               	movf	setRF_DimmerLights@lights,w
 15584  0A5C  3E14               	addlw	20
 15585  0A5D  077B               	addwf	_product,w
 15586  0A5E  00DE               	movwf	??_setRF_DimmerLights
 15587  0A5F  085E               	movf	??_setRF_DimmerLights,w
 15588  0A60  0086               	movwf	6
 15589  0A61  3002               	movlw	2	; select bank4/5
 15590  0A62  0087               	movwf	7
 15591  0A63  0801               	movf	1,w
 15592  0A64  00DF               	movwf	??_setRF_DimmerLights+1
 15593  0A65  085F               	movf	??_setRF_DimmerLights+1,w
 15594  0A66  00DA               	movwf	setProductData@value
 15595  0A67  3009               	movlw	9
 15596  0A68  319C  243A  318A   	fcall	_setProductData
 15597                           
 15598                           ;RF_Control_B1.c: 566: setProductData(15, (product->Data[15] | lights));
 15599  0A6B  087B               	movf	_product,w
 15600  0A6C  3E0F               	addlw	15
 15601  0A6D  0086               	movwf	6
 15602  0A6E  3002               	movlw	2	; select bank4/5
 15603  0A6F  0087               	movwf	7
 15604  0A70  0801               	movf	1,w
 15605  0A71  0020               	movlb	0	; select bank0
 15606  0A72  0461               	iorwf	setRF_DimmerLights@lights,w
 15607  0A73  00DE               	movwf	??_setRF_DimmerLights
 15608  0A74  085E               	movf	??_setRF_DimmerLights,w
 15609  0A75  00DA               	movwf	setProductData@value
 15610  0A76  300F               	movlw	15
 15611  0A77  319C  243A         	fcall	_setProductData
 15612                           
 15613                           ;RF_Control_B1.c: 567: } else {
 15614  0A79  0008               	return
 15615  0A7A                     l6431:	
 15616                           
 15617                           ;RF_Control_B1.c: 568: setProductData(9, 0x00);
 15618  0A7A  0020               	movlb	0	; select bank0
 15619  0A7B  01DA               	clrf	setProductData@value
 15620  0A7C  3009               	movlw	9
 15621  0A7D  319C  243A  318A   	fcall	_setProductData
 15622                           
 15623                           ;RF_Control_B1.c: 569: setProductData(15, (product->Data[15] & status));
 15624  0A80  087B               	movf	_product,w
 15625  0A81  3E0F               	addlw	15
 15626  0A82  0086               	movwf	6
 15627  0A83  3002               	movlw	2	; select bank4/5
 15628  0A84  0087               	movwf	7
 15629  0A85  0801               	movf	1,w
 15630  0A86  0020               	movlb	0	; select bank0
 15631  0A87  0560               	andwf	setRF_DimmerLights@status,w
 15632  0A88  00DE               	movwf	??_setRF_DimmerLights
 15633  0A89  085E               	movf	??_setRF_DimmerLights,w
 15634  0A8A  00DA               	movwf	setProductData@value
 15635  0A8B  300F               	movlw	15
 15636  0A8C  319C  243A         	fcall	_setProductData
 15637  0A8E  0008               	return
 15638  0A8F                     __end_of_setRF_DimmerLights:	
 15639                           
 15640                           	psect	text108
 15641  1C90                     __ptext108:	
 15642 ;; *************** function _setDimmerLights_Line *****************
 15643 ;; Defined at:
 15644 ;;		line 1157 in file "../src/Dimmer_B1.c"
 15645 ;; Parameters:    Size  Location     Type
 15646 ;;  lights          1    wreg     unsigned char 
 15647 ;; Auto vars:     Size  Location     Type
 15648 ;;  lights          1    2[COMMON] unsigned char 
 15649 ;; Return value:  Size  Location     Type
 15650 ;;		None               void
 15651 ;; Registers used:
 15652 ;;		wreg
 15653 ;; Tracked objects:
 15654 ;;		On entry : 0/0
 15655 ;;		On exit  : 0/0
 15656 ;;		Unchanged: 0/0
 15657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15662 ;;Total ram usage:        1 bytes
 15663 ;; Hardware stack levels used:    1
 15664 ;; Hardware stack levels required when called:    3
 15665 ;; This function calls:
 15666 ;;		Nothing
 15667 ;; This function is called by:
 15668 ;;		_setDimmerLights_OnOff
 15669 ;;		_setDimmerLights_Dimming
 15670 ;; This function uses a non-reentrant model
 15671 ;;
 15672                           
 15673                           
 15674                           ;psect for function _setDimmerLights_Line
 15675  1C90                     _setDimmerLights_Line:	
 15676                           
 15677                           ;incstack = 0
 15678                           ; Regs used in _setDimmerLights_Line: [wreg]
 15679                           ;setDimmerLights_Line@lights stored from wreg
 15680  1C90  00F2               	movwf	setDimmerLights_Line@lights
 15681                           
 15682                           ;Dimmer_B1.c: 1158: Dimmer.LoadGO = 1;
 15683  1C91  0022               	movlb	2	; select bank2
 15684  1C92  14A0               	bsf	_Dimmer^(0+256),1
 15685                           
 15686                           ;Dimmer_B1.c: 1160: DimmerLights1.Line = 0;
 15687  1C93  10D9               	bcf	(_DimmerLights1^(0+256)+1),1
 15688                           
 15689                           ;Dimmer_B1.c: 1161: if (lights == 1 && lights != 0) {
 15690  1C94  0872               	movf	setDimmerLights_Line@lights,w
 15691  1C95  3A01               	xorlw	1
 15692  1C96  1D03               	skipz
 15693  1C97  0008               	return
 15694  1C98  0872               	movf	setDimmerLights_Line@lights,w
 15695  1C99  1903               	btfsc	3,2
 15696  1C9A  0008               	return
 15697                           
 15698                           ;Dimmer_B1.c: 1162: DimmerLights1.Line = 1;
 15699  1C9B  14D9               	bsf	(_DimmerLights1^(0+256)+1),1
 15700  1C9C  0008               	return
 15701  1C9D                     __end_of_setDimmerLights_Line:	
 15702                           
 15703                           	psect	text109
 15704  1C46                     __ptext109:	
 15705 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15706 ;; Defined at:
 15707 ;;		line 147 in file "../src/Dimmer_B1.c"
 15708 ;; Parameters:    Size  Location     Type
 15709 ;;  lights          1    wreg     unsigned char 
 15710 ;;  value           1   58[BANK0 ] unsigned char 
 15711 ;; Auto vars:     Size  Location     Type
 15712 ;;  lights          1   60[BANK0 ] unsigned char 
 15713 ;; Return value:  Size  Location     Type
 15714 ;;		None               void
 15715 ;; Registers used:
 15716 ;;		wreg
 15717 ;; Tracked objects:
 15718 ;;		On entry : 0/0
 15719 ;;		On exit  : 0/0
 15720 ;;		Unchanged: 0/0
 15721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15722 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15725 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15726 ;;Total ram usage:        3 bytes
 15727 ;; Hardware stack levels used:    1
 15728 ;; Hardware stack levels required when called:    3
 15729 ;; This function calls:
 15730 ;;		Nothing
 15731 ;; This function is called by:
 15732 ;;		_setDimmerLights_OnOff
 15733 ;;		_setDimmerLights_Dimming
 15734 ;;		_setRFSW_AdjControl
 15735 ;;		_DimmerLights_AssignationDimming
 15736 ;; This function uses a non-reentrant model
 15737 ;;
 15738                           
 15739                           
 15740                           ;psect for function _setDimmerIntr_MaxmumValue
 15741  1C46                     _setDimmerIntr_MaxmumValue:	
 15742                           
 15743                           ;incstack = 0
 15744                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15745                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15746  1C46  0020               	movlb	0	; select bank0
 15747  1C47  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 15748                           
 15749                           ;Dimmer_B1.c: 149: if (lights == 1) {
 15750  1C48  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15751  1C49  3A01               	xorlw	1
 15752  1C4A  1D03               	skipz
 15753  1C4B  0008               	return
 15754                           
 15755                           ;Dimmer_B1.c: 150: DimmerIntr1.MaxmumValue = value;
 15756  1C4C  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15757  1C4D  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15758  1C4E  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15759  1C4F  0021               	movlb	1	; select bank1
 15760  1C50  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 15761  1C51  0008               	return
 15762  1C52                     __end_of_setDimmerIntr_MaxmumValue:	
 15763                           
 15764                           	psect	text110
 15765  1DDF                     __ptext110:	
 15766 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15767 ;; Defined at:
 15768 ;;		line 223 in file "../src/Dimmer_B1.c"
 15769 ;; Parameters:    Size  Location     Type
 15770 ;;  lights          1    wreg     unsigned char 
 15771 ;;  command         1    2[COMMON] unsigned char 
 15772 ;; Auto vars:     Size  Location     Type
 15773 ;;  lights          1    4[COMMON] unsigned char 
 15774 ;; Return value:  Size  Location     Type
 15775 ;;		None               void
 15776 ;; Registers used:
 15777 ;;		wreg, status,2, status,0
 15778 ;; Tracked objects:
 15779 ;;		On entry : 0/0
 15780 ;;		On exit  : 0/0
 15781 ;;		Unchanged: 0/0
 15782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15783 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;Total ram usage:        3 bytes
 15788 ;; Hardware stack levels used:    1
 15789 ;; Hardware stack levels required when called:    3
 15790 ;; This function calls:
 15791 ;;		Nothing
 15792 ;; This function is called by:
 15793 ;;		_setDimmerLights_Dimming
 15794 ;;		_setDimmerLights_DimmingClose
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           
 15799                           ;psect for function _setDimmerIntr_Dimming_Sw
 15800  1DDF                     _setDimmerIntr_Dimming_Sw:	
 15801                           
 15802                           ;incstack = 0
 15803                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15804                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15805  1DDF  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15806                           
 15807                           ;Dimmer_B1.c: 225: if (lights == 1) {
 15808  1DE0  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15809  1DE1  3A01               	xorlw	1
 15810  1DE2  1D03               	skipz
 15811  1DE3  0008               	return
 15812                           
 15813                           ;Dimmer_B1.c: 226: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15814  1DE4  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15815  1DE5  3A01               	xorlw	1
 15816  1DE6  3000               	movlw	0
 15817  1DE7  1903               	skipnz
 15818  1DE8  3001               	movlw	1
 15819  1DE9  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15820  1DEA  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15821  1DEB  0021               	movlb	1	; select bank1
 15822  1DEC  0820               	movf	_DimmerIntr1^(0+128),w
 15823  1DED  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15824  1DEE  39EF               	andlw	-17
 15825  1DEF  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15826  1DF0  00A0               	movwf	_DimmerIntr1^(0+128)
 15827  1DF1  0008               	return
 15828  1DF2                     __end_of_setDimmerIntr_Dimming_Sw:	
 15829                           
 15830                           	psect	text111
 15831  1C83                     __ptext111:	
 15832 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15833 ;; Defined at:
 15834 ;;		line 127 in file "../src/Dimmer_B1.c"
 15835 ;; Parameters:    Size  Location     Type
 15836 ;;  lights          1    wreg     unsigned char 
 15837 ;; Auto vars:     Size  Location     Type
 15838 ;;  lights          1    3[COMMON] unsigned char 
 15839 ;;  value           1    4[COMMON] unsigned char 
 15840 ;; Return value:  Size  Location     Type
 15841 ;;                  1    wreg      unsigned char 
 15842 ;; Registers used:
 15843 ;;		wreg, status,2
 15844 ;; Tracked objects:
 15845 ;;		On entry : 0/0
 15846 ;;		On exit  : 0/0
 15847 ;;		Unchanged: 0/0
 15848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;Total ram usage:        3 bytes
 15854 ;; Hardware stack levels used:    1
 15855 ;; Hardware stack levels required when called:    3
 15856 ;; This function calls:
 15857 ;;		Nothing
 15858 ;; This function is called by:
 15859 ;;		_setDimmerLights_Dimming
 15860 ;; This function uses a non-reentrant model
 15861 ;;
 15862                           
 15863                           
 15864                           ;psect for function _getDimmerIntr_DimmingValue
 15865  1C83                     _getDimmerIntr_DimmingValue:	
 15866                           
 15867                           ;incstack = 0
 15868                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15869                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15870  1C83  00F3               	movwf	getDimmerIntr_DimmingValue@lights
 15871                           
 15872                           ;Dimmer_B1.c: 128: char value = 0;
 15873  1C84  01F4               	clrf	getDimmerIntr_DimmingValue@value
 15874                           
 15875                           ;Dimmer_B1.c: 130: if (lights == 1) {
 15876  1C85  0873               	movf	getDimmerIntr_DimmingValue@lights,w
 15877  1C86  3A01               	xorlw	1
 15878  1C87  1D03               	skipz
 15879  1C88  2C8E               	goto	l708
 15880                           
 15881                           ;Dimmer_B1.c: 131: value = DimmerIntr1.DimmingValue;
 15882  1C89  0021               	movlb	1	; select bank1
 15883  1C8A  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 15884  1C8B  00F2               	movwf	??_getDimmerIntr_DimmingValue
 15885  1C8C  0872               	movf	??_getDimmerIntr_DimmingValue,w
 15886  1C8D  00F4               	movwf	getDimmerIntr_DimmingValue@value
 15887  1C8E                     l708:	
 15888                           
 15889                           ;Dimmer_B1.c: 132: }
 15890                           ;Dimmer_B1.c: 144: return value;
 15891  1C8E  0874               	movf	getDimmerIntr_DimmingValue@value,w
 15892  1C8F  0008               	return
 15893  1C90                     __end_of_getDimmerIntr_DimmingValue:	
 15894                           
 15895                           	psect	text112
 15896  1DCC                     __ptext112:	
 15897 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15898 ;; Defined at:
 15899 ;;		line 1117 in file "../src/Dimmer_B1.c"
 15900 ;; Parameters:    Size  Location     Type
 15901 ;;  lights          1    wreg     unsigned char 
 15902 ;; Auto vars:     Size  Location     Type
 15903 ;;  lights          1    0[COMMON] unsigned char 
 15904 ;;  allow           1    4[COMMON] unsigned char 
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      unsigned char 
 15907 ;; Registers used:
 15908 ;;		wreg, status,2, pclath, cstack
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15917 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;Total ram usage:        3 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:    4
 15921 ;; This function calls:
 15922 ;;		_getLoad_OK
 15923 ;; This function is called by:
 15924 ;;		_setDimmerLights_Main
 15925 ;; This function uses a non-reentrant model
 15926 ;;
 15927                           
 15928                           
 15929                           ;psect for function _getDimmerLights_Allow_Condition
 15930  1DCC                     _getDimmerLights_Allow_Condition:	
 15931                           
 15932                           ;Dimmer_B1.c: 1118: char allow = 0;
 15933                           
 15934                           ;incstack = 0
 15935                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15936  1DCC  01F4               	clrf	getDimmerLights_Allow_Condition@allow
 15937                           
 15938                           ;Dimmer_B1.c: 1124: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15939  1DCD  01F5               	clrf	_getDimmerLights_Allow_Condition$2553
 15940  1DCE  0AF5               	incf	_getDimmerLights_Allow_Condition$2553,f
 15941  1DCF  319B  237C  319D   	fcall	_getLoad_OK
 15942  1DD2  3800               	iorlw	0
 15943  1DD3  1D03               	skipz
 15944  1DD4  2DD9               	goto	l7023
 15945  1DD5  0022               	movlb	2	; select bank2
 15946  1DD6  18A0               	btfsc	_Dimmer^(0+256),1
 15947  1DD7  2DD9               	goto	l7023
 15948  1DD8  01F5               	clrf	_getDimmerLights_Allow_Condition$2553
 15949  1DD9                     l7023:	
 15950  1DD9  0875               	movf	_getDimmerLights_Allow_Condition$2553,w
 15951  1DDA  00F3               	movwf	??_getDimmerLights_Allow_Condition
 15952  1DDB  0873               	movf	??_getDimmerLights_Allow_Condition,w
 15953  1DDC  00F4               	movwf	getDimmerLights_Allow_Condition@allow
 15954                           
 15955                           ;Dimmer_B1.c: 1152: return allow;
 15956  1DDD  0874               	movf	getDimmerLights_Allow_Condition@allow,w
 15957  1DDE  0008               	return
 15958  1DDF                     __end_of_getDimmerLights_Allow_Condition:	
 15959                           
 15960                           	psect	text113
 15961  1B7C                     __ptext113:	
 15962 ;; *************** function _getLoad_OK *****************
 15963 ;; Defined at:
 15964 ;;		line 274 in file "../src/OverLoad_B1.c"
 15965 ;; Parameters:    Size  Location     Type
 15966 ;;		None
 15967 ;; Auto vars:     Size  Location     Type
 15968 ;;  ok              1    2[COMMON] unsigned char 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  1    wreg      unsigned char 
 15971 ;; Registers used:
 15972 ;;		wreg, status,2
 15973 ;; Tracked objects:
 15974 ;;		On entry : 0/0
 15975 ;;		On exit  : 0/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15982 ;;Total ram usage:        1 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; Hardware stack levels required when called:    3
 15985 ;; This function calls:
 15986 ;;		Nothing
 15987 ;; This function is called by:
 15988 ;;		_DimmerLights_Main
 15989 ;;		_getDimmerLights_Allow_Condition
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           
 15994                           ;psect for function _getLoad_OK
 15995  1B7C                     _getLoad_OK:	
 15996                           
 15997                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 15998                           
 15999                           ;incstack = 0
 16000                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16001  1B7C  3000               	movlw	0
 16002  1B7D  0022               	movlb	2	; select bank2
 16003  1B7E  1BB0               	btfsc	_Load^(0+256),7
 16004  1B7F  3001               	movlw	1
 16005  1B80  00F2               	movwf	getLoad_OK@ok
 16006                           
 16007                           ;OverLoad_B1.c: 276: return ok;
 16008  1B81  0872               	movf	getLoad_OK@ok,w
 16009  1B82  0008               	return
 16010  1B83                     __end_of_getLoad_OK:	
 16011                           
 16012                           	psect	text114
 16013  11C6                     __ptext114:	
 16014 ;; *************** function _getMain_All_Error_Status *****************
 16015 ;; Defined at:
 16016 ;;		line 430 in file "../src/Main_B1.c"
 16017 ;; Parameters:    Size  Location     Type
 16018 ;;  command         1    wreg     unsigned char 
 16019 ;; Auto vars:     Size  Location     Type
 16020 ;;  command         1    7[COMMON] unsigned char 
 16021 ;;  status          1    8[COMMON] unsigned char 
 16022 ;; Return value:  Size  Location     Type
 16023 ;;                  1    wreg      unsigned char 
 16024 ;; Registers used:
 16025 ;;		wreg, status,2, status,0
 16026 ;; Tracked objects:
 16027 ;;		On entry : 0/0
 16028 ;;		On exit  : 0/0
 16029 ;;		Unchanged: 0/0
 16030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;Total ram usage:        7 bytes
 16036 ;; Hardware stack levels used:    1
 16037 ;; Hardware stack levels required when called:    3
 16038 ;; This function calls:
 16039 ;;		Nothing
 16040 ;; This function is called by:
 16041 ;;		_DimmerLights_Main
 16042 ;;		_Exception_Main
 16043 ;;		_Load_Main
 16044 ;;		_setTemp_Main
 16045 ;;		_getRxData
 16046 ;;		_setSw_Main
 16047 ;; This function uses a non-reentrant model
 16048 ;;
 16049                           
 16050                           
 16051                           ;psect for function _getMain_All_Error_Status
 16052  11C6                     _getMain_All_Error_Status:	
 16053                           
 16054                           ;incstack = 0
 16055                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16056                           ;getMain_All_Error_Status@command stored from wreg
 16057  11C6  00F7               	movwf	getMain_All_Error_Status@command
 16058                           
 16059                           ;Main_B1.c: 431: char status = 0;
 16060  11C7  01F8               	clrf	getMain_All_Error_Status@status
 16061                           
 16062                           ;Main_B1.c: 442: if (status == 0 && command != 2) {
 16063  11C8  08F8               	movf	getMain_All_Error_Status@status,f
 16064  11C9  1D03               	skipz
 16065  11CA  29DD               	goto	l6775
 16066  11CB  0877               	movf	getMain_All_Error_Status@command,w
 16067  11CC  3A02               	xorlw	2
 16068  11CD  1903               	skipnz
 16069  11CE  29DD               	goto	l6775
 16070                           
 16071                           ;Main_B1.c: 443: status = Temp.ERROR == 1 ? 2 : 0;
 16072  11CF  0021               	movlb	1	; select bank1
 16073  11D0  18E2               	btfsc	_Temp^(0+128),1
 16074  11D1  29D5               	goto	l6773
 16075  11D2  01F3               	clrf	_getMain_All_Error_Status$4005
 16076  11D3  01F4               	clrf	_getMain_All_Error_Status$4005+1
 16077  11D4  29D9               	goto	l1523
 16078  11D5                     l6773:	
 16079  11D5  3002               	movlw	2
 16080  11D6  00F3               	movwf	_getMain_All_Error_Status$4005
 16081  11D7  3000               	movlw	0
 16082  11D8  00F4               	movwf	_getMain_All_Error_Status$4005+1
 16083  11D9                     l1523:	
 16084  11D9  0873               	movf	_getMain_All_Error_Status$4005,w
 16085  11DA  00F2               	movwf	??_getMain_All_Error_Status
 16086  11DB  0872               	movf	??_getMain_All_Error_Status,w
 16087  11DC  00F8               	movwf	getMain_All_Error_Status@status
 16088  11DD                     l6775:	
 16089                           
 16090                           ;Main_B1.c: 444: }
 16091                           ;Main_B1.c: 449: if (status == 0 && command != 3) {
 16092  11DD  08F8               	movf	getMain_All_Error_Status@status,f
 16093  11DE  1D03               	skipz
 16094  11DF  29F2               	goto	l1524
 16095  11E0  0877               	movf	getMain_All_Error_Status@command,w
 16096  11E1  3A03               	xorlw	3
 16097  11E2  1903               	skipnz
 16098  11E3  29F2               	goto	l1524
 16099                           
 16100                           ;Main_B1.c: 450: status = Load.ERROR == 1 ? 3 : 0;
 16101  11E4  0022               	movlb	2	; select bank2
 16102  11E5  1AB0               	btfsc	_Load^(0+256),5
 16103  11E6  29EA               	goto	l6783
 16104  11E7  01F5               	clrf	_getMain_All_Error_Status$4006
 16105  11E8  01F6               	clrf	_getMain_All_Error_Status$4006+1
 16106  11E9  29EE               	goto	l1528
 16107  11EA                     l6783:	
 16108  11EA  3003               	movlw	3
 16109  11EB  00F5               	movwf	_getMain_All_Error_Status$4006
 16110  11EC  3000               	movlw	0
 16111  11ED  00F6               	movwf	_getMain_All_Error_Status$4006+1
 16112  11EE                     l1528:	
 16113  11EE  0875               	movf	_getMain_All_Error_Status$4006,w
 16114  11EF  00F2               	movwf	??_getMain_All_Error_Status
 16115  11F0  0872               	movf	??_getMain_All_Error_Status,w
 16116  11F1  00F8               	movwf	getMain_All_Error_Status@status
 16117  11F2                     l1524:	
 16118                           
 16119                           ;Main_B1.c: 451: }
 16120                           ;Main_B1.c: 461: return status;
 16121  11F2  0878               	movf	getMain_All_Error_Status@status,w
 16122  11F3  0008               	return
 16123  11F4                     __end_of_getMain_All_Error_Status:	
 16124                           
 16125                           	psect	text115
 16126  1591                     __ptext115:	
 16127 ;; *************** function _DimmerLights_DimmingFunction *****************
 16128 ;; Defined at:
 16129 ;;		line 1880 in file "../src/Dimmer_B1.c"
 16130 ;; Parameters:    Size  Location     Type
 16131 ;;  lights          1    wreg     unsigned char 
 16132 ;; Auto vars:     Size  Location     Type
 16133 ;;  lights          1    6[BANK0 ] unsigned char 
 16134 ;; Return value:  Size  Location     Type
 16135 ;;		None               void
 16136 ;; Registers used:
 16137 ;;		wreg, status,2, status,0, pclath, cstack
 16138 ;; Tracked objects:
 16139 ;;		On entry : 0/0
 16140 ;;		On exit  : 0/0
 16141 ;;		Unchanged: 0/0
 16142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;Total ram usage:        2 bytes
 16148 ;; Hardware stack levels used:    1
 16149 ;; Hardware stack levels required when called:    6
 16150 ;; This function calls:
 16151 ;;		_DimmerIntr_ValueCalculate
 16152 ;; This function is called by:
 16153 ;;		_DimmerLights_Main
 16154 ;; This function uses a non-reentrant model
 16155 ;;
 16156                           
 16157                           
 16158                           ;psect for function _DimmerLights_DimmingFunction
 16159  1591                     _DimmerLights_DimmingFunction:	
 16160                           
 16161                           ;incstack = 0
 16162                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 16163                           ;DimmerLights_DimmingFunction@lights stored from wreg
 16164  1591  0020               	movlb	0	; select bank0
 16165  1592  00A6               	movwf	DimmerLights_DimmingFunction@lights
 16166                           
 16167                           ;Dimmer_B1.c: 1882: if (lights == 1) {
 16168  1593  0826               	movf	DimmerLights_DimmingFunction@lights,w
 16169  1594  3A01               	xorlw	1
 16170  1595  1D03               	skipz
 16171  1596  0008               	return
 16172                           
 16173                           ;Dimmer_B1.c: 1883: if (DimmerIntr1.Tune == 1) {
 16174  1597  0021               	movlb	1	; select bank1
 16175  1598  1CA0               	btfss	_DimmerIntr1^(0+128),1
 16176  1599  0008               	return
 16177                           
 16178                           ;Dimmer_B1.c: 1884: DimmerIntr1.Tune = 0;
 16179  159A  10A0               	bcf	_DimmerIntr1^(0+128),1
 16180                           
 16181                           ;Dimmer_B1.c: 1885: DimmerIntr1.TuneTime++;
 16182  159B  3001               	movlw	1
 16183  159C  0020               	movlb	0	; select bank0
 16184  159D  00A5               	movwf	??_DimmerLights_DimmingFunction
 16185  159E  0825               	movf	??_DimmerLights_DimmingFunction,w
 16186  159F  0021               	movlb	1	; select bank1
 16187  15A0  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 16188                           
 16189                           ;Dimmer_B1.c: 1886: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 16190  15A1  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 16191  15A2  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 16192  15A3  1C03               	skipc
 16193  15A4  0008               	return
 16194                           
 16195                           ;Dimmer_B1.c: 1887: DimmerIntr1.TuneTime = 0;
 16196  15A5  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 16197                           
 16198                           ;Dimmer_B1.c: 1888: DimmerIntr1.TuneGO = 1;
 16199  15A6  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 16200                           
 16201                           ;Dimmer_B1.c: 1889: if (DimmerIntr1.Dimming_Sw == 1) {
 16202  15A7  1E20               	btfss	_DimmerIntr1^(0+128),4
 16203  15A8  2DC7               	goto	l911
 16204                           
 16205                           ;Dimmer_B1.c: 1890: if (DimmerIntr1.Dimming_Status == 0) {
 16206  15A9  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 16207  15AA  2DBB               	goto	l9471
 16208                           
 16209                           ;Dimmer_B1.c: 1891: if (DimmerIntr1.DimmingValue < ((char)(87*0.6))) {
 16210  15AB  3034               	movlw	52
 16211  15AC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 16212  15AD  1803               	skipnc
 16213  15AE  2DB9               	goto	l913
 16214                           
 16215                           ;Dimmer_B1.c: 1892: DimmerIntr1.DimmingValue++;
 16216  15AF  3001               	movlw	1
 16217  15B0  0020               	movlb	0	; select bank0
 16218  15B1  00A5               	movwf	??_DimmerLights_DimmingFunction
 16219  15B2  0825               	movf	??_DimmerLights_DimmingFunction,w
 16220  15B3  0021               	movlb	1	; select bank1
 16221  15B4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 16222                           
 16223                           ;Dimmer_B1.c: 1893: DimmerIntr_ValueCalculate(1);
 16224  15B5  3001               	movlw	1
 16225  15B6  3191  219A         	fcall	_DimmerIntr_ValueCalculate
 16226                           
 16227                           ;Dimmer_B1.c: 1894: } else {
 16228  15B8  0008               	return
 16229  15B9                     l913:	
 16230                           
 16231                           ;Dimmer_B1.c: 1895: DimmerIntr1.Dimming_Status = 1;
 16232  15B9  16A0               	bsf	_DimmerIntr1^(0+128),5
 16233                           
 16234                           ;Dimmer_B1.c: 1896: }
 16235                           ;Dimmer_B1.c: 1897: } else {
 16236  15BA  0008               	return
 16237  15BB                     l9471:	
 16238                           
 16239                           ;Dimmer_B1.c: 1898: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 16240  15BB  3007               	movlw	7
 16241  15BC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 16242  15BD  1C03               	skipc
 16243  15BE  2DC5               	goto	l916
 16244                           
 16245                           ;Dimmer_B1.c: 1899: DimmerIntr1.DimmingValue--;
 16246  15BF  3001               	movlw	1
 16247  15C0  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 16248                           
 16249                           ;Dimmer_B1.c: 1900: DimmerIntr_ValueCalculate(1);
 16250  15C1  3001               	movlw	1
 16251  15C2  3191  219A         	fcall	_DimmerIntr_ValueCalculate
 16252                           
 16253                           ;Dimmer_B1.c: 1901: } else {
 16254  15C4  0008               	return
 16255  15C5                     l916:	
 16256                           
 16257                           ;Dimmer_B1.c: 1902: DimmerIntr1.Dimming_Status = 0;
 16258  15C5  12A0               	bcf	_DimmerIntr1^(0+128),5
 16259                           
 16260                           ;Dimmer_B1.c: 1903: }
 16261                           ;Dimmer_B1.c: 1904: }
 16262                           ;Dimmer_B1.c: 1905: } else if (DimmerIntr1.Dimming_RF == 1) {
 16263  15C6  0008               	return
 16264  15C7                     l911:	
 16265  15C7  1F20               	btfss	_DimmerIntr1^(0+128),6
 16266  15C8  0008               	return
 16267                           
 16268                           ;Dimmer_B1.c: 1906: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 16269  15C9  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 16270  15CA  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 16271  15CB  1803               	skipnc
 16272  15CC  2DD7               	goto	l9483
 16273                           
 16274                           ;Dimmer_B1.c: 1907: DimmerIntr1.DimmingValue++;
 16275  15CD  3001               	movlw	1
 16276  15CE  0020               	movlb	0	; select bank0
 16277  15CF  00A5               	movwf	??_DimmerLights_DimmingFunction
 16278  15D0  0825               	movf	??_DimmerLights_DimmingFunction,w
 16279  15D1  0021               	movlb	1	; select bank1
 16280  15D2  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 16281                           
 16282                           ;Dimmer_B1.c: 1908: DimmerIntr_ValueCalculate(1);
 16283  15D3  3001               	movlw	1
 16284  15D4  3191  219A         	fcall	_DimmerIntr_ValueCalculate
 16285                           
 16286                           ;Dimmer_B1.c: 1909: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 16287  15D6  0008               	return
 16288  15D7                     l9483:	
 16289  15D7  0021               	movlb	1	; select bank1
 16290  15D8  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 16291  15D9  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 16292  15DA  1803               	skipnc
 16293  15DB  2DE2               	goto	l922
 16294                           
 16295                           ;Dimmer_B1.c: 1910: DimmerIntr1.DimmingValue--;
 16296  15DC  3001               	movlw	1
 16297  15DD  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 16298                           
 16299                           ;Dimmer_B1.c: 1911: DimmerIntr_ValueCalculate(1);
 16300  15DE  3001               	movlw	1
 16301  15DF  3191  219A         	fcall	_DimmerIntr_ValueCalculate
 16302                           
 16303                           ;Dimmer_B1.c: 1912: } else {
 16304  15E1  0008               	return
 16305  15E2                     l922:	
 16306                           
 16307                           ;Dimmer_B1.c: 1913: DimmerIntr1.Dimming_RF = 0;
 16308  15E2  1320               	bcf	_DimmerIntr1^(0+128),6
 16309  15E3  0008               	return
 16310  15E4                     __end_of_DimmerLights_DimmingFunction:	
 16311                           
 16312                           	psect	text116
 16313  119A                     __ptext116:	
 16314 ;; *************** function _DimmerIntr_ValueCalculate *****************
 16315 ;; Defined at:
 16316 ;;		line 1848 in file "../src/Dimmer_B1.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  lights          1    wreg     unsigned char 
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;  lights          1    4[BANK0 ] unsigned char 
 16321 ;; Return value:  Size  Location     Type
 16322 ;;		None               void
 16323 ;; Registers used:
 16324 ;;		wreg, status,2, status,0, pclath, cstack
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;Total ram usage:        3 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    5
 16337 ;; This function calls:
 16338 ;;		_Division
 16339 ;; This function is called by:
 16340 ;;		_setDimmerLights_OnOff
 16341 ;;		_DimmerLights_DimmingFunction
 16342 ;; This function uses a non-reentrant model
 16343 ;;
 16344                           
 16345                           
 16346                           ;psect for function _DimmerIntr_ValueCalculate
 16347  119A                     _DimmerIntr_ValueCalculate:	
 16348                           
 16349                           ;incstack = 0
 16350                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg+status,2+status,0+pclath+cstack]
 16351                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 16352  119A  0020               	movlb	0	; select bank0
 16353  119B  00A4               	movwf	DimmerIntr_ValueCalculate@lights
 16354                           
 16355                           ;Dimmer_B1.c: 1850: if (lights == 1) {
 16356  119C  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 16357  119D  3A01               	xorlw	1
 16358  119E  1D03               	skipz
 16359  119F  0008               	return
 16360                           
 16361                           ;Dimmer_B1.c: 1855: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 16362  11A0  3002               	movlw	2
 16363  11A1  00A2               	movwf	??_DimmerIntr_ValueCalculate
 16364  11A2  0822               	movf	??_DimmerIntr_ValueCalculate,w
 16365  11A3  00F7               	movwf	Division@num
 16366  11A4  0021               	movlb	1	; select bank1
 16367  11A5  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 16368  11A6  319C  24C8         	fcall	_Division
 16369  11A8  0020               	movlb	0	; select bank0
 16370  11A9  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 16371  11AA  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 16372  11AB  0021               	movlb	1	; select bank1
 16373  11AC  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 16374                           
 16375                           ;Dimmer_B1.c: 1856: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 16376  11AD  0325               	decf	(_DimmerIntr1^(0+128)+5),w
 16377  11AE  3AFF               	xorlw	255
 16378  11AF  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 16379  11B0  3E3C               	addlw	60
 16380  11B1  0020               	movlb	0	; select bank0
 16381  11B2  00A2               	movwf	??_DimmerIntr_ValueCalculate
 16382  11B3  0822               	movf	??_DimmerIntr_ValueCalculate,w
 16383  11B4  0021               	movlb	1	; select bank1
 16384  11B5  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 16385                           
 16386                           ;Dimmer_B1.c: 1857: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 16387  11B6  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 16388  11B7  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 16389  11B8  0020               	movlb	0	; select bank0
 16390  11B9  00A2               	movwf	??_DimmerIntr_ValueCalculate
 16391  11BA  0822               	movf	??_DimmerIntr_ValueCalculate,w
 16392  11BB  0021               	movlb	1	; select bank1
 16393  11BC  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 16394                           
 16395                           ;Dimmer_B1.c: 1858: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 16396  11BD  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 16397  11BE  3E05               	addlw	5
 16398  11BF  0020               	movlb	0	; select bank0
 16399  11C0  00A2               	movwf	??_DimmerIntr_ValueCalculate
 16400  11C1  0822               	movf	??_DimmerIntr_ValueCalculate,w
 16401  11C2  0021               	movlb	1	; select bank1
 16402  11C3  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 16403                           
 16404                           ;Dimmer_B1.c: 1860: DimmerIntr1.Calculate = 1;
 16405  11C4  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 16406  11C5  0008               	return
 16407  11C6                     __end_of_DimmerIntr_ValueCalculate:	
 16408                           
 16409                           	psect	text117
 16410  1B75                     __ptext117:	
 16411 ;; *************** function _DimmerLights_Initialization *****************
 16412 ;; Defined at:
 16413 ;;		line 675 in file "../src/Dimmer_B1.c"
 16414 ;; Parameters:    Size  Location     Type
 16415 ;;		None
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;		None
 16418 ;; Return value:  Size  Location     Type
 16419 ;;		None               void
 16420 ;; Registers used:
 16421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16422 ;; Tracked objects:
 16423 ;;		On entry : 0/0
 16424 ;;		On exit  : 0/0
 16425 ;;		Unchanged: 0/0
 16426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;Total ram usage:        0 bytes
 16432 ;; Hardware stack levels used:    1
 16433 ;; Hardware stack levels required when called:    7
 16434 ;; This function calls:
 16435 ;;		_DimmerIntr_Initialization
 16436 ;;		_setDimmerLights_Initialization
 16437 ;; This function is called by:
 16438 ;;		_main
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           
 16443                           ;psect for function _DimmerLights_Initialization
 16444  1B75                     _DimmerLights_Initialization:	
 16445                           
 16446                           ;Dimmer_B1.c: 677: setDimmerLights_Initialization(1);
 16447                           
 16448                           ;incstack = 0
 16449                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16450  1B75  3001               	movlw	1
 16451  1B76  319B  231E  319B   	fcall	_setDimmerLights_Initialization
 16452                           
 16453                           ;Dimmer_B1.c: 687: DimmerIntr_Initialization();
 16454  1B79  3196  268C         	fcall	_DimmerIntr_Initialization
 16455  1B7B  0008               	return
 16456  1B7C                     __end_of_DimmerLights_Initialization:	
 16457                           
 16458                           	psect	text118
 16459  1B1E                     __ptext118:	
 16460 ;; *************** function _setDimmerLights_Initialization *****************
 16461 ;; Defined at:
 16462 ;;		line 691 in file "../src/Dimmer_B1.c"
 16463 ;; Parameters:    Size  Location     Type
 16464 ;;  lights          1    wreg     unsigned char 
 16465 ;; Auto vars:     Size  Location     Type
 16466 ;;  lights          1    0[COMMON] unsigned char 
 16467 ;; Return value:  Size  Location     Type
 16468 ;;		None               void
 16469 ;; Registers used:
 16470 ;;		wreg
 16471 ;; Tracked objects:
 16472 ;;		On entry : 0/0
 16473 ;;		On exit  : 0/0
 16474 ;;		Unchanged: 0/0
 16475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;Total ram usage:        0 bytes
 16481 ;; Hardware stack levels used:    1
 16482 ;; Hardware stack levels required when called:    3
 16483 ;; This function calls:
 16484 ;;		Nothing
 16485 ;; This function is called by:
 16486 ;;		_DimmerLights_Initialization
 16487 ;; This function uses a non-reentrant model
 16488 ;;
 16489                           
 16490                           
 16491                           ;psect for function _setDimmerLights_Initialization
 16492  1B1E                     _setDimmerLights_Initialization:	
 16493                           
 16494                           ;incstack = 0
 16495                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16496  1B1E  0008               	return
 16497  1B1F                     __end_of_setDimmerLights_Initialization:	
 16498                           
 16499                           	psect	text119
 16500  168C                     __ptext119:	
 16501 ;; *************** function _DimmerIntr_Initialization *****************
 16502 ;; Defined at:
 16503 ;;		line 7 in file "../src/Dimmer_B1.c"
 16504 ;; Parameters:    Size  Location     Type
 16505 ;;		None
 16506 ;; Auto vars:     Size  Location     Type
 16507 ;;		None
 16508 ;; Return value:  Size  Location     Type
 16509 ;;		None               void
 16510 ;; Registers used:
 16511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16512 ;; Tracked objects:
 16513 ;;		On entry : 0/0
 16514 ;;		On exit  : 0/0
 16515 ;;		Unchanged: 0/0
 16516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;Total ram usage:        2 bytes
 16522 ;; Hardware stack levels used:    1
 16523 ;; Hardware stack levels required when called:    6
 16524 ;; This function calls:
 16525 ;;		_Division
 16526 ;;		_getDimmerLights_PercentToValue
 16527 ;;		_getDimmerLights_ValueToPercent
 16528 ;;		_setMemory_Modify
 16529 ;; This function is called by:
 16530 ;;		_DimmerLights_Initialization
 16531 ;; This function uses a non-reentrant model
 16532 ;;
 16533                           
 16534                           
 16535                           ;psect for function _DimmerIntr_Initialization
 16536  168C                     _DimmerIntr_Initialization:	
 16537                           
 16538                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 16539                           
 16540                           ;incstack = 0
 16541                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16542  168C  3003               	movlw	3
 16543  168D  0020               	movlb	0	; select bank0
 16544  168E  00DA               	movwf	??_DimmerIntr_Initialization
 16545  168F  085A               	movf	??_DimmerIntr_Initialization,w
 16546  1690  0021               	movlb	1	; select bank1
 16547  1691  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 16548                           
 16549                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16550  1692  3034               	movlw	52
 16551  1693  0020               	movlb	0	; select bank0
 16552  1694  00DA               	movwf	??_DimmerIntr_Initialization
 16553  1695  085A               	movf	??_DimmerIntr_Initialization,w
 16554  1696  0021               	movlb	1	; select bank1
 16555  1697  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 16556                           
 16557                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16558  1698  3006               	movlw	6
 16559  1699  0020               	movlb	0	; select bank0
 16560  169A  00DA               	movwf	??_DimmerIntr_Initialization
 16561  169B  085A               	movf	??_DimmerIntr_Initialization,w
 16562  169C  0021               	movlb	1	; select bank1
 16563  169D  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 16564                           
 16565                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 16566  169E  10A0               	bcf	_DimmerIntr1^(0+128),1
 16567                           
 16568                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16569  169F  3034               	movlw	52
 16570  16A0  3189  215F  3196   	fcall	_getDimmerLights_ValueToPercent
 16571  16A3  0020               	movlb	0	; select bank0
 16572  16A4  00DA               	movwf	??_DimmerIntr_Initialization
 16573  16A5  087B               	movf	_product,w
 16574  16A6  3E15               	addlw	21
 16575  16A7  0086               	movwf	6
 16576  16A8  3002               	movlw	2	; select bank4/5
 16577  16A9  0087               	movwf	7
 16578  16AA  085A               	movf	??_DimmerIntr_Initialization,w
 16579  16AB  0081               	movwf	1
 16580                           
 16581                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16582  16AC  087B               	movf	_product,w
 16583  16AD  3E15               	addlw	21
 16584  16AE  0086               	movwf	6
 16585  16AF  3002               	movlw	2	; select bank4/5
 16586  16B0  0087               	movwf	7
 16587  16B1  0801               	movf	1,w
 16588  16B2  3188  20FA  3196   	fcall	_getDimmerLights_PercentToValue
 16589  16B5  0020               	movlb	0	; select bank0
 16590  16B6  00DA               	movwf	??_DimmerIntr_Initialization
 16591  16B7  085A               	movf	??_DimmerIntr_Initialization,w
 16592  16B8  0021               	movlb	1	; select bank1
 16593  16B9  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 16594                           
 16595                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16596  16BA  3002               	movlw	2
 16597  16BB  0020               	movlb	0	; select bank0
 16598  16BC  00DA               	movwf	??_DimmerIntr_Initialization
 16599  16BD  085A               	movf	??_DimmerIntr_Initialization,w
 16600  16BE  00F7               	movwf	Division@num
 16601  16BF  3034               	movlw	52
 16602  16C0  319C  24C8  3196   	fcall	_Division
 16603  16C3  0020               	movlb	0	; select bank0
 16604  16C4  00DB               	movwf	??_DimmerIntr_Initialization+1
 16605  16C5  085B               	movf	??_DimmerIntr_Initialization+1,w
 16606  16C6  0021               	movlb	1	; select bank1
 16607  16C7  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 16608                           
 16609                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16610  16C8  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 16611  16C9  3E08               	addlw	8
 16612  16CA  0020               	movlb	0	; select bank0
 16613  16CB  00DA               	movwf	??_DimmerIntr_Initialization
 16614  16CC  085A               	movf	??_DimmerIntr_Initialization,w
 16615  16CD  0021               	movlb	1	; select bank1
 16616  16CE  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 16617                           
 16618                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16619  16CF  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 16620  16D0  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 16621  16D1  0020               	movlb	0	; select bank0
 16622  16D2  00DA               	movwf	??_DimmerIntr_Initialization
 16623  16D3  085A               	movf	??_DimmerIntr_Initialization,w
 16624  16D4  0021               	movlb	1	; select bank1
 16625  16D5  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 16626                           
 16627                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16628  16D6  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 16629  16D7  3E01               	addlw	1
 16630  16D8  0020               	movlb	0	; select bank0
 16631  16D9  00DA               	movwf	??_DimmerIntr_Initialization
 16632  16DA  085A               	movf	??_DimmerIntr_Initialization,w
 16633  16DB  0021               	movlb	1	; select bank1
 16634  16DC  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 16635                           
 16636                           ;Dimmer_B1.c: 33: DimmerIntr1.Calculate = 1;
 16637  16DD  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 16638                           
 16639                           ;Dimmer_B1.c: 83: if (myMain.InitDimmer == 1) {
 16640  16DE  1E49               	btfss	(_myMain^(0+128)+10),4
 16641  16DF  0008               	return
 16642                           
 16643                           ;Dimmer_B1.c: 84: myMain.InitDimmer = 0;
 16644  16E0  1249               	bcf	(_myMain^(0+128)+10),4
 16645                           
 16646                           ;Dimmer_B1.c: 85: myMain.SaveDimmer = 1;
 16647  16E1  16C9               	bsf	(_myMain^(0+128)+10),5
 16648                           
 16649                           ;Dimmer_B1.c: 86: setMemory_Modify(1);
 16650  16E2  3001               	movlw	1
 16651  16E3  319C  24F5         	fcall	_setMemory_Modify
 16652  16E5  0008               	return
 16653  16E6                     __end_of_DimmerIntr_Initialization:	
 16654                           
 16655                           	psect	text120
 16656  1CF5                     __ptext120:	
 16657 ;; *************** function _setMemory_Modify *****************
 16658 ;; Defined at:
 16659 ;;		line 1087 in file "../src/MCU_B1.c"
 16660 ;; Parameters:    Size  Location     Type
 16661 ;;  command         1    wreg     unsigned char 
 16662 ;; Auto vars:     Size  Location     Type
 16663 ;;  command         1    3[COMMON] unsigned char 
 16664 ;; Return value:  Size  Location     Type
 16665 ;;		None               void
 16666 ;; Registers used:
 16667 ;;		wreg, status,2, status,0
 16668 ;; Tracked objects:
 16669 ;;		On entry : 0/0
 16670 ;;		On exit  : 0/0
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;Total ram usage:        2 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; Hardware stack levels required when called:    3
 16680 ;; This function calls:
 16681 ;;		Nothing
 16682 ;; This function is called by:
 16683 ;;		_DimmerIntr_Initialization
 16684 ;;		_setDimmerLights_Dimming
 16685 ;;		_setLog_Code
 16686 ;;		_setRFSW_AdjControl
 16687 ;;		_DimmerLights_AssignationDimming
 16688 ;; This function uses a non-reentrant model
 16689 ;;
 16690                           
 16691                           
 16692                           ;psect for function _setMemory_Modify
 16693  1CF5                     _setMemory_Modify:	
 16694                           
 16695                           ;incstack = 0
 16696                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16697                           ;setMemory_Modify@command stored from wreg
 16698  1CF5  00F3               	movwf	setMemory_Modify@command
 16699                           
 16700                           ;MCU_B1.c: 1088: Memory.Modify = command == 1 ? 1 : 0;
 16701  1CF6  0873               	movf	setMemory_Modify@command,w
 16702  1CF7  3A01               	xorlw	1
 16703  1CF8  3000               	movlw	0
 16704  1CF9  1903               	skipnz
 16705  1CFA  3001               	movlw	1
 16706  1CFB  00F2               	movwf	??_setMemory_Modify
 16707  1CFC  0023               	movlb	3	; select bank3
 16708  1CFD  0862               	movf	(_Memory^(0+384)+36),w
 16709  1CFE  0672               	xorwf	??_setMemory_Modify,w
 16710  1CFF  39FE               	andlw	-2
 16711  1D00  0672               	xorwf	??_setMemory_Modify,w
 16712  1D01  00E2               	movwf	(_Memory^(0+384)+36)
 16713                           
 16714                           ;MCU_B1.c: 1089: Memory.Time = 0;
 16715  1D02  01E0               	clrf	(_Memory^(0+384)+34)
 16716  1D03  01E1               	clrf	((_Memory+1)^(0+384)+34)
 16717  1D04  0008               	return
 16718  1D05                     __end_of_setMemory_Modify:	
 16719                           
 16720                           	psect	text121
 16721  095F                     __ptext121:	
 16722 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16723 ;; Defined at:
 16724 ;;		line 1257 in file "../src/Dimmer_B1.c"
 16725 ;; Parameters:    Size  Location     Type
 16726 ;;  value           1    wreg     unsigned char 
 16727 ;; Auto vars:     Size  Location     Type
 16728 ;;  value           1   54[BANK0 ] unsigned char 
 16729 ;;  i               3   55[BANK0 ] float 
 16730 ;; Return value:  Size  Location     Type
 16731 ;;                  1    wreg      unsigned char 
 16732 ;; Registers used:
 16733 ;;		wreg, status,2, status,0, pclath, cstack
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        6 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    5
 16746 ;; This function calls:
 16747 ;;		___awtoft
 16748 ;;		___ftadd
 16749 ;;		___ftdiv
 16750 ;;		___ftneg
 16751 ;;		___fttol
 16752 ;; This function is called by:
 16753 ;;		_DimmerIntr_Initialization
 16754 ;;		_setDimmerLights_Dimming
 16755 ;; This function uses a non-reentrant model
 16756 ;;
 16757                           
 16758                           
 16759                           ;psect for function _getDimmerLights_ValueToPercent
 16760  095F                     _getDimmerLights_ValueToPercent:	
 16761                           
 16762                           ;incstack = 0
 16763                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16764                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16765  095F  0020               	movlb	0	; select bank0
 16766  0960  00D6               	movwf	getDimmerLights_ValueToPercent@value
 16767                           
 16768                           ;Dimmer_B1.c: 1265: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16769  0961  3000               	movlw	0
 16770  0962  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16771  0963  3038               	movlw	56
 16772  0964  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16773  0965  3042               	movlw	66
 16774  0966  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16775                           
 16776                           ;Dimmer_B1.c: 1266: i /= 100;
 16777  0967  3000               	movlw	0
 16778  0968  00A6               	movwf	___ftdiv@f2
 16779  0969  30C8               	movlw	200
 16780  096A  00A7               	movwf	___ftdiv@f2+1
 16781  096B  3042               	movlw	66
 16782  096C  00A8               	movwf	___ftdiv@f2+2
 16783  096D  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16784  096E  00A9               	movwf	___ftdiv@f1
 16785  096F  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16786  0970  00AA               	movwf	___ftdiv@f1+1
 16787  0971  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16788  0972  00AB               	movwf	___ftdiv@f1+2
 16789  0973  318D  25E9  3189   	fcall	___ftdiv
 16790  0976  0020               	movlb	0	; select bank0
 16791  0977  0826               	movf	?___ftdiv,w
 16792  0978  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16793  0979  0827               	movf	?___ftdiv+1,w
 16794  097A  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16795  097B  0828               	movf	?___ftdiv+2,w
 16796  097C  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16797                           
 16798                           ;Dimmer_B1.c: 1268: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 16799  097D  0856               	movf	getDimmerLights_ValueToPercent@value,w
 16800  097E  00D4               	movwf	??_getDimmerLights_ValueToPercent
 16801  097F  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 16802  0980  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 16803  0981  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 16804  0982  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 16805  0983  1903               	skipnz
 16806  0984  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 16807  0985  0854               	movf	??_getDimmerLights_ValueToPercent,w
 16808  0986  3E34               	addlw	52
 16809  0987  00A0               	movwf	___awtoft@c
 16810  0988  3000               	movlw	0
 16811  0989  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16812  098A  00A1               	movwf	___awtoft@c+1
 16813  098B  3190  2093  3189   	fcall	___awtoft
 16814  098E  0020               	movlb	0	; select bank0
 16815  098F  0820               	movf	?___awtoft,w
 16816  0990  00A9               	movwf	___ftdiv@f1
 16817  0991  0821               	movf	?___awtoft+1,w
 16818  0992  00AA               	movwf	___ftdiv@f1+1
 16819  0993  0822               	movf	?___awtoft+2,w
 16820  0994  00AB               	movwf	___ftdiv@f1+2
 16821  0995  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16822  0996  00A6               	movwf	___ftdiv@f2
 16823  0997  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16824  0998  00A7               	movwf	___ftdiv@f2+1
 16825  0999  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16826  099A  00A8               	movwf	___ftdiv@f2+2
 16827  099B  318D  25E9  3189   	fcall	___ftdiv
 16828  099E  0020               	movlb	0	; select bank0
 16829  099F  0826               	movf	?___ftdiv,w
 16830  09A0  00B6               	movwf	___ftneg@f1
 16831  09A1  0827               	movf	?___ftdiv+1,w
 16832  09A2  00B7               	movwf	___ftneg@f1+1
 16833  09A3  0828               	movf	?___ftdiv+2,w
 16834  09A4  00B8               	movwf	___ftneg@f1+2
 16835  09A5  319B  23C7  3189   	fcall	___ftneg
 16836  09A8  0020               	movlb	0	; select bank0
 16837  09A9  0836               	movf	?___ftneg,w
 16838  09AA  00BC               	movwf	___ftadd@f2
 16839  09AB  0837               	movf	?___ftneg+1,w
 16840  09AC  00BD               	movwf	___ftadd@f2+1
 16841  09AD  0838               	movf	?___ftneg+2,w
 16842  09AE  00BE               	movwf	___ftadd@f2+2
 16843  09AF  3000               	movlw	0
 16844  09B0  00B9               	movwf	___ftadd@f1
 16845  09B1  30C8               	movlw	200
 16846  09B2  00BA               	movwf	___ftadd@f1+1
 16847  09B3  3042               	movlw	66
 16848  09B4  00BB               	movwf	___ftadd@f1+2
 16849  09B5  3183  2364  3189   	fcall	___ftadd
 16850  09B8  0020               	movlb	0	; select bank0
 16851  09B9  0839               	movf	?___ftadd,w
 16852  09BA  00C6               	movwf	___fttol@f1
 16853  09BB  083A               	movf	?___ftadd+1,w
 16854  09BC  00C7               	movwf	___fttol@f1+1
 16855  09BD  083B               	movf	?___ftadd+2,w
 16856  09BE  00C8               	movwf	___fttol@f1+2
 16857  09BF  318C  244F         	fcall	___fttol
 16858  09C1  0020               	movlb	0	; select bank0
 16859  09C2  0846               	movf	?___fttol,w
 16860  09C3  0008               	return
 16861  09C4                     __end_of_getDimmerLights_ValueToPercent:	
 16862                           
 16863                           	psect	text122
 16864  08FA                     __ptext122:	
 16865 ;; *************** function _getDimmerLights_PercentToValue *****************
 16866 ;; Defined at:
 16867 ;;		line 1241 in file "../src/Dimmer_B1.c"
 16868 ;; Parameters:    Size  Location     Type
 16869 ;;  value           1    wreg     unsigned char 
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;  value           1   54[BANK0 ] unsigned char 
 16872 ;;  i               3   55[BANK0 ] float 
 16873 ;; Return value:  Size  Location     Type
 16874 ;;                  1    wreg      unsigned char 
 16875 ;; Registers used:
 16876 ;;		wreg, status,2, status,0, pclath, cstack
 16877 ;; Tracked objects:
 16878 ;;		On entry : 0/0
 16879 ;;		On exit  : 0/0
 16880 ;;		Unchanged: 0/0
 16881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;Total ram usage:        6 bytes
 16887 ;; Hardware stack levels used:    1
 16888 ;; Hardware stack levels required when called:    5
 16889 ;; This function calls:
 16890 ;;		___awtoft
 16891 ;;		___ftadd
 16892 ;;		___ftdiv
 16893 ;;		___ftmul
 16894 ;;		___ftneg
 16895 ;;		___fttol
 16896 ;; This function is called by:
 16897 ;;		_DimmerIntr_Initialization
 16898 ;;		_setDimmerLights_OnOff
 16899 ;;		_setRFSW_AdjControl
 16900 ;;		_DimmerLights_AssignationDimming
 16901 ;; This function uses a non-reentrant model
 16902 ;;
 16903                           
 16904                           
 16905                           ;psect for function _getDimmerLights_PercentToValue
 16906  08FA                     _getDimmerLights_PercentToValue:	
 16907                           
 16908                           ;incstack = 0
 16909                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16910                           ;getDimmerLights_PercentToValue@value stored from wreg
 16911  08FA  0020               	movlb	0	; select bank0
 16912  08FB  00D6               	movwf	getDimmerLights_PercentToValue@value
 16913                           
 16914                           ;Dimmer_B1.c: 1249: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16915  08FC  3000               	movlw	0
 16916  08FD  00D7               	movwf	getDimmerLights_PercentToValue@i
 16917  08FE  3038               	movlw	56
 16918  08FF  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 16919  0900  3042               	movlw	66
 16920  0901  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 16921                           
 16922                           ;Dimmer_B1.c: 1250: i /= 100;
 16923  0902  3000               	movlw	0
 16924  0903  00A6               	movwf	___ftdiv@f2
 16925  0904  30C8               	movlw	200
 16926  0905  00A7               	movwf	___ftdiv@f2+1
 16927  0906  3042               	movlw	66
 16928  0907  00A8               	movwf	___ftdiv@f2+2
 16929  0908  0857               	movf	getDimmerLights_PercentToValue@i,w
 16930  0909  00A9               	movwf	___ftdiv@f1
 16931  090A  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 16932  090B  00AA               	movwf	___ftdiv@f1+1
 16933  090C  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 16934  090D  00AB               	movwf	___ftdiv@f1+2
 16935  090E  318D  25E9  3188   	fcall	___ftdiv
 16936  0911  0020               	movlb	0	; select bank0
 16937  0912  0826               	movf	?___ftdiv,w
 16938  0913  00D7               	movwf	getDimmerLights_PercentToValue@i
 16939  0914  0827               	movf	?___ftdiv+1,w
 16940  0915  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 16941  0916  0828               	movf	?___ftdiv+2,w
 16942  0917  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 16943                           
 16944                           ;Dimmer_B1.c: 1252: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 16945  0918  0856               	movf	getDimmerLights_PercentToValue@value,w
 16946  0919  00D4               	movwf	??_getDimmerLights_PercentToValue
 16947  091A  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 16948  091B  09D4               	comf	??_getDimmerLights_PercentToValue,f
 16949  091C  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 16950  091D  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 16951  091E  1903               	skipnz
 16952  091F  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 16953  0920  0854               	movf	??_getDimmerLights_PercentToValue,w
 16954  0921  3E64               	addlw	100
 16955  0922  00A0               	movwf	___awtoft@c
 16956  0923  3000               	movlw	0
 16957  0924  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16958  0925  00A1               	movwf	___awtoft@c+1
 16959  0926  3190  2093  3188   	fcall	___awtoft
 16960  0929  0020               	movlb	0	; select bank0
 16961  092A  0820               	movf	?___awtoft,w
 16962  092B  00A9               	movwf	___ftmul@f2
 16963  092C  0821               	movf	?___awtoft+1,w
 16964  092D  00AA               	movwf	___ftmul@f2+1
 16965  092E  0822               	movf	?___awtoft+2,w
 16966  092F  00AB               	movwf	___ftmul@f2+2
 16967  0930  0857               	movf	getDimmerLights_PercentToValue@i,w
 16968  0931  00A6               	movwf	___ftmul@f1
 16969  0932  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 16970  0933  00A7               	movwf	___ftmul@f1+1
 16971  0934  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 16972  0935  00A8               	movwf	___ftmul@f1+2
 16973  0936  318E  2692  3188   	fcall	___ftmul
 16974  0939  0020               	movlb	0	; select bank0
 16975  093A  0826               	movf	?___ftmul,w
 16976  093B  00B6               	movwf	___ftneg@f1
 16977  093C  0827               	movf	?___ftmul+1,w
 16978  093D  00B7               	movwf	___ftneg@f1+1
 16979  093E  0828               	movf	?___ftmul+2,w
 16980  093F  00B8               	movwf	___ftneg@f1+2
 16981  0940  319B  23C7  3188   	fcall	___ftneg
 16982  0943  0020               	movlb	0	; select bank0
 16983  0944  0836               	movf	?___ftneg,w
 16984  0945  00BC               	movwf	___ftadd@f2
 16985  0946  0837               	movf	?___ftneg+1,w
 16986  0947  00BD               	movwf	___ftadd@f2+1
 16987  0948  0838               	movf	?___ftneg+2,w
 16988  0949  00BE               	movwf	___ftadd@f2+2
 16989  094A  3000               	movlw	0
 16990  094B  00B9               	movwf	___ftadd@f1
 16991  094C  3050               	movlw	80
 16992  094D  00BA               	movwf	___ftadd@f1+1
 16993  094E  3042               	movlw	66
 16994  094F  00BB               	movwf	___ftadd@f1+2
 16995  0950  3183  2364  3188   	fcall	___ftadd
 16996  0953  0020               	movlb	0	; select bank0
 16997  0954  0839               	movf	?___ftadd,w
 16998  0955  00C6               	movwf	___fttol@f1
 16999  0956  083A               	movf	?___ftadd+1,w
 17000  0957  00C7               	movwf	___fttol@f1+1
 17001  0958  083B               	movf	?___ftadd+2,w
 17002  0959  00C8               	movwf	___fttol@f1+2
 17003  095A  318C  244F         	fcall	___fttol
 17004  095C  0020               	movlb	0	; select bank0
 17005  095D  0846               	movf	?___fttol,w
 17006  095E  0008               	return
 17007  095F                     __end_of_getDimmerLights_PercentToValue:	
 17008                           
 17009                           	psect	text123
 17010  0C4F                     __ptext123:	
 17011 ;; *************** function ___fttol *****************
 17012 ;; Defined at:
 17013 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17014 ;; Parameters:    Size  Location     Type
 17015 ;;  f1              3   38[BANK0 ] float 
 17016 ;; Auto vars:     Size  Location     Type
 17017 ;;  lval            4   47[BANK0 ] unsigned long 
 17018 ;;  exp1            1   51[BANK0 ] unsigned char 
 17019 ;;  sign1           1   46[BANK0 ] unsigned char 
 17020 ;; Return value:  Size  Location     Type
 17021 ;;                  4   38[BANK0 ] long 
 17022 ;; Registers used:
 17023 ;;		wreg, status,2, status,0
 17024 ;; Tracked objects:
 17025 ;;		On entry : 0/0
 17026 ;;		On exit  : 0/0
 17027 ;;		Unchanged: 0/0
 17028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17029 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;Total ram usage:       14 bytes
 17034 ;; Hardware stack levels used:    1
 17035 ;; Hardware stack levels required when called:    3
 17036 ;; This function calls:
 17037 ;;		Nothing
 17038 ;; This function is called by:
 17039 ;;		_getDimmerLights_PercentToValue
 17040 ;;		_getDimmerLights_ValueToPercent
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           
 17045                           ;psect for function ___fttol
 17046  0C4F                     ___fttol:	
 17047                           
 17048                           ;incstack = 0
 17049                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17050  0C4F  0020               	movlb	0	; select bank0
 17051  0C50  0846               	movf	___fttol@f1,w
 17052  0C51  00CA               	movwf	??___fttol
 17053  0C52  0847               	movf	___fttol@f1+1,w
 17054  0C53  00CB               	movwf	??___fttol+1
 17055  0C54  0848               	movf	___fttol@f1+2,w
 17056  0C55  00CC               	movwf	??___fttol+2
 17057  0C56  1003               	clrc
 17058  0C57  0D4B               	rlf	??___fttol+1,w
 17059  0C58  0D4C               	rlf	??___fttol+2,w
 17060  0C59  00CD               	movwf	??___fttol+3
 17061  0C5A  084D               	movf	??___fttol+3,w
 17062  0C5B  00D3               	movwf	___fttol@exp1
 17063  0C5C  08D3               	movf	___fttol@exp1,f
 17064  0C5D  1D03               	skipz
 17065  0C5E  2C68               	goto	l6255
 17066  0C5F  3000               	movlw	0
 17067  0C60  00C9               	movwf	?___fttol+3
 17068  0C61  3000               	movlw	0
 17069  0C62  00C8               	movwf	?___fttol+2
 17070  0C63  3000               	movlw	0
 17071  0C64  00C7               	movwf	?___fttol+1
 17072  0C65  3000               	movlw	0
 17073  0C66  00C6               	movwf	?___fttol
 17074  0C67  0008               	return
 17075  0C68                     l6255:	
 17076  0C68  0846               	movf	___fttol@f1,w
 17077  0C69  00CA               	movwf	??___fttol
 17078  0C6A  0847               	movf	___fttol@f1+1,w
 17079  0C6B  00CB               	movwf	??___fttol+1
 17080  0C6C  0848               	movf	___fttol@f1+2,w
 17081  0C6D  00CC               	movwf	??___fttol+2
 17082  0C6E  3017               	movlw	23
 17083  0C6F                     u5195:	
 17084  0C6F  36CC               	lsrf	??___fttol+2,f
 17085  0C70  0CCB               	rrf	??___fttol+1,f
 17086  0C71  0CCA               	rrf	??___fttol,f
 17087  0C72  0B89               	decfsz	9,f
 17088  0C73  2C6F               	goto	u5195
 17089  0C74  084A               	movf	??___fttol,w
 17090  0C75  00CD               	movwf	??___fttol+3
 17091  0C76  084D               	movf	??___fttol+3,w
 17092  0C77  00CE               	movwf	___fttol@sign1
 17093  0C78  17C7               	bsf	___fttol@f1+1,7
 17094  0C79  30FF               	movlw	255
 17095  0C7A  05C6               	andwf	___fttol@f1,f
 17096  0C7B  30FF               	movlw	255
 17097  0C7C  05C7               	andwf	___fttol@f1+1,f
 17098  0C7D  3000               	movlw	0
 17099  0C7E  05C8               	andwf	___fttol@f1+2,f
 17100  0C7F  0846               	movf	___fttol@f1,w
 17101  0C80  00CF               	movwf	___fttol@lval
 17102  0C81  0847               	movf	___fttol@f1+1,w
 17103  0C82  00D0               	movwf	___fttol@lval+1
 17104  0C83  0848               	movf	___fttol@f1+2,w
 17105  0C84  00D1               	movwf	___fttol@lval+2
 17106  0C85  01D2               	clrf	___fttol@lval+3
 17107  0C86  308E               	movlw	142
 17108  0C87  02D3               	subwf	___fttol@exp1,f
 17109  0C88  1FD3               	btfss	___fttol@exp1,7
 17110  0C89  2CA6               	goto	l6275
 17111  0C8A  0853               	movf	___fttol@exp1,w
 17112  0C8B  3A80               	xorlw	128
 17113  0C8C  3E8F               	addlw	143
 17114  0C8D  1803               	skipnc
 17115  0C8E  2C98               	goto	l6273
 17116  0C8F  3000               	movlw	0
 17117  0C90  00C9               	movwf	?___fttol+3
 17118  0C91  3000               	movlw	0
 17119  0C92  00C8               	movwf	?___fttol+2
 17120  0C93  3000               	movlw	0
 17121  0C94  00C7               	movwf	?___fttol+1
 17122  0C95  3000               	movlw	0
 17123  0C96  00C6               	movwf	?___fttol
 17124  0C97  0008               	return
 17125  0C98                     l6273:	
 17126  0C98  3001               	movlw	1
 17127  0C99                     u5225:	
 17128  0C99  36D2               	lsrf	___fttol@lval+3,f
 17129  0C9A  0CD1               	rrf	___fttol@lval+2,f
 17130  0C9B  0CD0               	rrf	___fttol@lval+1,f
 17131  0C9C  0CCF               	rrf	___fttol@lval,f
 17132  0C9D  0B89               	decfsz	9,f
 17133  0C9E  2C99               	goto	u5225
 17134  0C9F  3001               	movlw	1
 17135  0CA0  00CA               	movwf	??___fttol
 17136  0CA1  084A               	movf	??___fttol,w
 17137  0CA2  07D3               	addwf	___fttol@exp1,f
 17138  0CA3  1903               	btfsc	3,2
 17139  0CA4  2CBF               	goto	l6285
 17140  0CA5  2C98               	goto	l6273
 17141  0CA6                     l6275:	
 17142  0CA6  3018               	movlw	24
 17143  0CA7  0253               	subwf	___fttol@exp1,w
 17144  0CA8  1C03               	skipc
 17145  0CA9  2CBC               	goto	l6283
 17146  0CAA  3000               	movlw	0
 17147  0CAB  00C9               	movwf	?___fttol+3
 17148  0CAC  3000               	movlw	0
 17149  0CAD  00C8               	movwf	?___fttol+2
 17150  0CAE  3000               	movlw	0
 17151  0CAF  00C7               	movwf	?___fttol+1
 17152  0CB0  3000               	movlw	0
 17153  0CB1  00C6               	movwf	?___fttol
 17154  0CB2  0008               	return
 17155  0CB3                     l6281:	
 17156  0CB3  3001               	movlw	1
 17157  0CB4                     u5255:	
 17158  0CB4  35CF               	lslf	___fttol@lval,f
 17159  0CB5  0DD0               	rlf	___fttol@lval+1,f
 17160  0CB6  0DD1               	rlf	___fttol@lval+2,f
 17161  0CB7  0DD2               	rlf	___fttol@lval+3,f
 17162  0CB8  0B89               	decfsz	9,f
 17163  0CB9  2CB4               	goto	u5255
 17164  0CBA  3001               	movlw	1
 17165  0CBB  02D3               	subwf	___fttol@exp1,f
 17166  0CBC                     l6283:	
 17167  0CBC  08D3               	movf	___fttol@exp1,f
 17168  0CBD  1D03               	skipz
 17169  0CBE  2CB3               	goto	l6281
 17170  0CBF                     l6285:	
 17171  0CBF  084E               	movf	___fttol@sign1,w
 17172  0CC0  1903               	btfsc	3,2
 17173  0CC1  2CCD               	goto	l6289
 17174  0CC2  09CF               	comf	___fttol@lval,f
 17175  0CC3  09D0               	comf	___fttol@lval+1,f
 17176  0CC4  09D1               	comf	___fttol@lval+2,f
 17177  0CC5  09D2               	comf	___fttol@lval+3,f
 17178  0CC6  0ACF               	incf	___fttol@lval,f
 17179  0CC7  1903               	skipnz
 17180  0CC8  0AD0               	incf	___fttol@lval+1,f
 17181  0CC9  1903               	skipnz
 17182  0CCA  0AD1               	incf	___fttol@lval+2,f
 17183  0CCB  1903               	skipnz
 17184  0CCC  0AD2               	incf	___fttol@lval+3,f
 17185  0CCD                     l6289:	
 17186  0CCD  0852               	movf	___fttol@lval+3,w
 17187  0CCE  00C9               	movwf	?___fttol+3
 17188  0CCF  0851               	movf	___fttol@lval+2,w
 17189  0CD0  00C8               	movwf	?___fttol+2
 17190  0CD1  0850               	movf	___fttol@lval+1,w
 17191  0CD2  00C7               	movwf	?___fttol+1
 17192  0CD3  084F               	movf	___fttol@lval,w
 17193  0CD4  00C6               	movwf	?___fttol
 17194  0CD5  0008               	return
 17195  0CD6                     __end_of___fttol:	
 17196                           
 17197                           	psect	text124
 17198  1BC7                     __ptext124:	
 17199 ;; *************** function ___ftneg *****************
 17200 ;; Defined at:
 17201 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17202 ;; Parameters:    Size  Location     Type
 17203 ;;  f1              3   22[BANK0 ] float 
 17204 ;; Auto vars:     Size  Location     Type
 17205 ;;		None
 17206 ;; Return value:  Size  Location     Type
 17207 ;;                  3   22[BANK0 ] float 
 17208 ;; Registers used:
 17209 ;;		wreg
 17210 ;; Tracked objects:
 17211 ;;		On entry : 0/0
 17212 ;;		On exit  : 0/0
 17213 ;;		Unchanged: 0/0
 17214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17215 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17218 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;Total ram usage:        3 bytes
 17220 ;; Hardware stack levels used:    1
 17221 ;; Hardware stack levels required when called:    3
 17222 ;; This function calls:
 17223 ;;		Nothing
 17224 ;; This function is called by:
 17225 ;;		_getDimmerLights_PercentToValue
 17226 ;;		_getDimmerLights_ValueToPercent
 17227 ;; This function uses a non-reentrant model
 17228 ;;
 17229                           
 17230                           
 17231                           ;psect for function ___ftneg
 17232  1BC7                     ___ftneg:	
 17233                           
 17234                           ;incstack = 0
 17235                           ; Regs used in ___ftneg: [wreg]
 17236  1BC7  0020               	movlb	0	; select bank0
 17237  1BC8  0838               	movf	___ftneg@f1+2,w
 17238  1BC9  0437               	iorwf	___ftneg@f1+1,w
 17239  1BCA  0436               	iorwf	___ftneg@f1,w
 17240  1BCB  1903               	skipnz
 17241  1BCC  0008               	return
 17242  1BCD  3080               	movlw	128
 17243  1BCE  06B8               	xorwf	___ftneg@f1+2,f
 17244  1BCF  0008               	return
 17245  1BD0                     __end_of___ftneg:	
 17246                           
 17247                           	psect	text125
 17248  0E92                     __ptext125:	
 17249 ;; *************** function ___ftmul *****************
 17250 ;; Defined at:
 17251 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17252 ;; Parameters:    Size  Location     Type
 17253 ;;  f1              3    6[BANK0 ] float 
 17254 ;;  f2              3    9[BANK0 ] float 
 17255 ;; Auto vars:     Size  Location     Type
 17256 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 17257 ;;  sign            1   21[BANK0 ] unsigned char 
 17258 ;;  cntr            1   20[BANK0 ] unsigned char 
 17259 ;;  exp             1   16[BANK0 ] unsigned char 
 17260 ;; Return value:  Size  Location     Type
 17261 ;;                  3    6[BANK0 ] float 
 17262 ;; Registers used:
 17263 ;;		wreg, status,2, status,0, pclath, cstack
 17264 ;; Tracked objects:
 17265 ;;		On entry : 0/0
 17266 ;;		On exit  : 0/0
 17267 ;;		Unchanged: 0/0
 17268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17269 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;Total ram usage:       16 bytes
 17274 ;; Hardware stack levels used:    1
 17275 ;; Hardware stack levels required when called:    4
 17276 ;; This function calls:
 17277 ;;		___ftpack
 17278 ;; This function is called by:
 17279 ;;		_getDimmerLights_PercentToValue
 17280 ;; This function uses a non-reentrant model
 17281 ;;
 17282                           
 17283                           
 17284                           ;psect for function ___ftmul
 17285  0E92                     ___ftmul:	
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17289  0E92  0020               	movlb	0	; select bank0
 17290  0E93  0826               	movf	___ftmul@f1,w
 17291  0E94  00AC               	movwf	??___ftmul
 17292  0E95  0827               	movf	___ftmul@f1+1,w
 17293  0E96  00AD               	movwf	??___ftmul+1
 17294  0E97  0828               	movf	___ftmul@f1+2,w
 17295  0E98  00AE               	movwf	??___ftmul+2
 17296  0E99  1003               	clrc
 17297  0E9A  0D2D               	rlf	??___ftmul+1,w
 17298  0E9B  0D2E               	rlf	??___ftmul+2,w
 17299  0E9C  00AF               	movwf	??___ftmul+3
 17300  0E9D  082F               	movf	??___ftmul+3,w
 17301  0E9E  00B0               	movwf	___ftmul@exp
 17302  0E9F  08B0               	movf	___ftmul@exp,f
 17303  0EA0  1D03               	skipz
 17304  0EA1  2EA9               	goto	l6197
 17305  0EA2  3000               	movlw	0
 17306  0EA3  00A6               	movwf	?___ftmul
 17307  0EA4  3000               	movlw	0
 17308  0EA5  00A7               	movwf	?___ftmul+1
 17309  0EA6  3000               	movlw	0
 17310  0EA7  00A8               	movwf	?___ftmul+2
 17311  0EA8  0008               	return
 17312  0EA9                     l6197:	
 17313  0EA9  0829               	movf	___ftmul@f2,w
 17314  0EAA  00AC               	movwf	??___ftmul
 17315  0EAB  082A               	movf	___ftmul@f2+1,w
 17316  0EAC  00AD               	movwf	??___ftmul+1
 17317  0EAD  082B               	movf	___ftmul@f2+2,w
 17318  0EAE  00AE               	movwf	??___ftmul+2
 17319  0EAF  1003               	clrc
 17320  0EB0  0D2D               	rlf	??___ftmul+1,w
 17321  0EB1  0D2E               	rlf	??___ftmul+2,w
 17322  0EB2  00AF               	movwf	??___ftmul+3
 17323  0EB3  082F               	movf	??___ftmul+3,w
 17324  0EB4  00B5               	movwf	___ftmul@sign
 17325  0EB5  08B5               	movf	___ftmul@sign,f
 17326  0EB6  1D03               	skipz
 17327  0EB7  2EBF               	goto	l6203
 17328  0EB8  3000               	movlw	0
 17329  0EB9  00A6               	movwf	?___ftmul
 17330  0EBA  3000               	movlw	0
 17331  0EBB  00A7               	movwf	?___ftmul+1
 17332  0EBC  3000               	movlw	0
 17333  0EBD  00A8               	movwf	?___ftmul+2
 17334  0EBE  0008               	return
 17335  0EBF                     l6203:	
 17336  0EBF  0835               	movf	___ftmul@sign,w
 17337  0EC0  3E7B               	addlw	123
 17338  0EC1  00AC               	movwf	??___ftmul
 17339  0EC2  082C               	movf	??___ftmul,w
 17340  0EC3  07B0               	addwf	___ftmul@exp,f
 17341  0EC4  0826               	movf	___ftmul@f1,w
 17342  0EC5  00AC               	movwf	??___ftmul
 17343  0EC6  0827               	movf	___ftmul@f1+1,w
 17344  0EC7  00AD               	movwf	??___ftmul+1
 17345  0EC8  0828               	movf	___ftmul@f1+2,w
 17346  0EC9  00AE               	movwf	??___ftmul+2
 17347  0ECA  3010               	movlw	16
 17348  0ECB                     u5075:	
 17349  0ECB  36AE               	lsrf	??___ftmul+2,f
 17350  0ECC  0CAD               	rrf	??___ftmul+1,f
 17351  0ECD  0CAC               	rrf	??___ftmul,f
 17352  0ECE  0B89               	decfsz	9,f
 17353  0ECF  2ECB               	goto	u5075
 17354  0ED0  082C               	movf	??___ftmul,w
 17355  0ED1  00AF               	movwf	??___ftmul+3
 17356  0ED2  082F               	movf	??___ftmul+3,w
 17357  0ED3  00B5               	movwf	___ftmul@sign
 17358  0ED4  0829               	movf	___ftmul@f2,w
 17359  0ED5  00AC               	movwf	??___ftmul
 17360  0ED6  082A               	movf	___ftmul@f2+1,w
 17361  0ED7  00AD               	movwf	??___ftmul+1
 17362  0ED8  082B               	movf	___ftmul@f2+2,w
 17363  0ED9  00AE               	movwf	??___ftmul+2
 17364  0EDA  3010               	movlw	16
 17365  0EDB                     u5085:	
 17366  0EDB  36AE               	lsrf	??___ftmul+2,f
 17367  0EDC  0CAD               	rrf	??___ftmul+1,f
 17368  0EDD  0CAC               	rrf	??___ftmul,f
 17369  0EDE  0B89               	decfsz	9,f
 17370  0EDF  2EDB               	goto	u5085
 17371  0EE0  082C               	movf	??___ftmul,w
 17372  0EE1  00AF               	movwf	??___ftmul+3
 17373  0EE2  082F               	movf	??___ftmul+3,w
 17374  0EE3  06B5               	xorwf	___ftmul@sign,f
 17375  0EE4  3080               	movlw	128
 17376  0EE5  00AC               	movwf	??___ftmul
 17377  0EE6  082C               	movf	??___ftmul,w
 17378  0EE7  05B5               	andwf	___ftmul@sign,f
 17379  0EE8  17A7               	bsf	___ftmul@f1+1,7
 17380  0EE9  17AA               	bsf	___ftmul@f2+1,7
 17381  0EEA  30FF               	movlw	255
 17382  0EEB  05A9               	andwf	___ftmul@f2,f
 17383  0EEC  30FF               	movlw	255
 17384  0EED  05AA               	andwf	___ftmul@f2+1,f
 17385  0EEE  3000               	movlw	0
 17386  0EEF  05AB               	andwf	___ftmul@f2+2,f
 17387  0EF0  3000               	movlw	0
 17388  0EF1  00B1               	movwf	___ftmul@f3_as_product
 17389  0EF2  3000               	movlw	0
 17390  0EF3  00B2               	movwf	___ftmul@f3_as_product+1
 17391  0EF4  3000               	movlw	0
 17392  0EF5  00B3               	movwf	___ftmul@f3_as_product+2
 17393  0EF6  3007               	movlw	7
 17394  0EF7  00AC               	movwf	??___ftmul
 17395  0EF8  082C               	movf	??___ftmul,w
 17396  0EF9  00B4               	movwf	___ftmul@cntr
 17397  0EFA                     l6215:	
 17398  0EFA  1C26               	btfss	___ftmul@f1,0
 17399  0EFB  2F02               	goto	l6219
 17400  0EFC  0829               	movf	___ftmul@f2,w
 17401  0EFD  07B1               	addwf	___ftmul@f3_as_product,f
 17402  0EFE  082A               	movf	___ftmul@f2+1,w
 17403  0EFF  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 17404  0F00  082B               	movf	___ftmul@f2+2,w
 17405  0F01  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 17406  0F02                     l6219:	
 17407  0F02  3001               	movlw	1
 17408  0F03                     u5105:	
 17409  0F03  36A8               	lsrf	___ftmul@f1+2,f
 17410  0F04  0CA7               	rrf	___ftmul@f1+1,f
 17411  0F05  0CA6               	rrf	___ftmul@f1,f
 17412  0F06  0B89               	decfsz	9,f
 17413  0F07  2F03               	goto	u5105
 17414  0F08  3001               	movlw	1
 17415  0F09                     u5115:	
 17416  0F09  35A9               	lslf	___ftmul@f2,f
 17417  0F0A  0DAA               	rlf	___ftmul@f2+1,f
 17418  0F0B  0DAB               	rlf	___ftmul@f2+2,f
 17419  0F0C  0B89               	decfsz	9,f
 17420  0F0D  2F09               	goto	u5115
 17421  0F0E  3001               	movlw	1
 17422  0F0F  02B4               	subwf	___ftmul@cntr,f
 17423  0F10  1D03               	btfss	3,2
 17424  0F11  2EFA               	goto	l6215
 17425  0F12  3009               	movlw	9
 17426  0F13  00AC               	movwf	??___ftmul
 17427  0F14  082C               	movf	??___ftmul,w
 17428  0F15  00B4               	movwf	___ftmul@cntr
 17429  0F16                     l6227:	
 17430  0F16  1C26               	btfss	___ftmul@f1,0
 17431  0F17  2F1E               	goto	l6231
 17432  0F18  0829               	movf	___ftmul@f2,w
 17433  0F19  07B1               	addwf	___ftmul@f3_as_product,f
 17434  0F1A  082A               	movf	___ftmul@f2+1,w
 17435  0F1B  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 17436  0F1C  082B               	movf	___ftmul@f2+2,w
 17437  0F1D  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 17438  0F1E                     l6231:	
 17439  0F1E  3001               	movlw	1
 17440  0F1F                     u5145:	
 17441  0F1F  36A8               	lsrf	___ftmul@f1+2,f
 17442  0F20  0CA7               	rrf	___ftmul@f1+1,f
 17443  0F21  0CA6               	rrf	___ftmul@f1,f
 17444  0F22  0B89               	decfsz	9,f
 17445  0F23  2F1F               	goto	u5145
 17446  0F24  3001               	movlw	1
 17447  0F25                     u5155:	
 17448  0F25  36B3               	lsrf	___ftmul@f3_as_product+2,f
 17449  0F26  0CB2               	rrf	___ftmul@f3_as_product+1,f
 17450  0F27  0CB1               	rrf	___ftmul@f3_as_product,f
 17451  0F28  0B89               	decfsz	9,f
 17452  0F29  2F25               	goto	u5155
 17453  0F2A  3001               	movlw	1
 17454  0F2B  02B4               	subwf	___ftmul@cntr,f
 17455  0F2C  1D03               	btfss	3,2
 17456  0F2D  2F16               	goto	l6227
 17457  0F2E  0831               	movf	___ftmul@f3_as_product,w
 17458  0F2F  00F2               	movwf	___ftpack@arg
 17459  0F30  0832               	movf	___ftmul@f3_as_product+1,w
 17460  0F31  00F3               	movwf	___ftpack@arg+1
 17461  0F32  0833               	movf	___ftmul@f3_as_product+2,w
 17462  0F33  00F4               	movwf	___ftpack@arg+2
 17463  0F34  0830               	movf	___ftmul@exp,w
 17464  0F35  00AC               	movwf	??___ftmul
 17465  0F36  082C               	movf	??___ftmul,w
 17466  0F37  00F5               	movwf	___ftpack@exp
 17467  0F38  0835               	movf	___ftmul@sign,w
 17468  0F39  00AD               	movwf	??___ftmul+1
 17469  0F3A  082D               	movf	??___ftmul+1,w
 17470  0F3B  00F6               	movwf	___ftpack@sign
 17471  0F3C  3197  27A0         	fcall	___ftpack
 17472  0F3E  0872               	movf	?___ftpack,w
 17473  0F3F  0020               	movlb	0	; select bank0
 17474  0F40  00A6               	movwf	?___ftmul
 17475  0F41  0873               	movf	?___ftpack+1,w
 17476  0F42  00A7               	movwf	?___ftmul+1
 17477  0F43  0874               	movf	?___ftpack+2,w
 17478  0F44  00A8               	movwf	?___ftmul+2
 17479  0F45  0008               	return
 17480  0F46                     __end_of___ftmul:	
 17481                           
 17482                           	psect	text126
 17483  0DE9                     __ptext126:	
 17484 ;; *************** function ___ftdiv *****************
 17485 ;; Defined at:
 17486 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17487 ;; Parameters:    Size  Location     Type
 17488 ;;  f2              3    6[BANK0 ] float 
 17489 ;;  f1              3    9[BANK0 ] float 
 17490 ;; Auto vars:     Size  Location     Type
 17491 ;;  f3              3   17[BANK0 ] float 
 17492 ;;  sign            1   21[BANK0 ] unsigned char 
 17493 ;;  exp             1   20[BANK0 ] unsigned char 
 17494 ;;  cntr            1   16[BANK0 ] unsigned char 
 17495 ;; Return value:  Size  Location     Type
 17496 ;;                  3    6[BANK0 ] float 
 17497 ;; Registers used:
 17498 ;;		wreg, status,2, status,0, pclath, cstack
 17499 ;; Tracked objects:
 17500 ;;		On entry : 0/0
 17501 ;;		On exit  : 0/0
 17502 ;;		Unchanged: 0/0
 17503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17504 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;Total ram usage:       16 bytes
 17509 ;; Hardware stack levels used:    1
 17510 ;; Hardware stack levels required when called:    4
 17511 ;; This function calls:
 17512 ;;		___ftpack
 17513 ;; This function is called by:
 17514 ;;		_getDimmerLights_PercentToValue
 17515 ;;		_getDimmerLights_ValueToPercent
 17516 ;; This function uses a non-reentrant model
 17517 ;;
 17518                           
 17519                           
 17520                           ;psect for function ___ftdiv
 17521  0DE9                     ___ftdiv:	
 17522                           
 17523                           ;incstack = 0
 17524                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17525  0DE9  0020               	movlb	0	; select bank0
 17526  0DEA  0829               	movf	___ftdiv@f1,w
 17527  0DEB  00AC               	movwf	??___ftdiv
 17528  0DEC  082A               	movf	___ftdiv@f1+1,w
 17529  0DED  00AD               	movwf	??___ftdiv+1
 17530  0DEE  082B               	movf	___ftdiv@f1+2,w
 17531  0DEF  00AE               	movwf	??___ftdiv+2
 17532  0DF0  1003               	clrc
 17533  0DF1  0D2D               	rlf	??___ftdiv+1,w
 17534  0DF2  0D2E               	rlf	??___ftdiv+2,w
 17535  0DF3  00AF               	movwf	??___ftdiv+3
 17536  0DF4  082F               	movf	??___ftdiv+3,w
 17537  0DF5  00B4               	movwf	___ftdiv@exp
 17538  0DF6  08B4               	movf	___ftdiv@exp,f
 17539  0DF7  1D03               	skipz
 17540  0DF8  2E00               	goto	l6155
 17541  0DF9  3000               	movlw	0
 17542  0DFA  00A6               	movwf	?___ftdiv
 17543  0DFB  3000               	movlw	0
 17544  0DFC  00A7               	movwf	?___ftdiv+1
 17545  0DFD  3000               	movlw	0
 17546  0DFE  00A8               	movwf	?___ftdiv+2
 17547  0DFF  0008               	return
 17548  0E00                     l6155:	
 17549  0E00  0826               	movf	___ftdiv@f2,w
 17550  0E01  00AC               	movwf	??___ftdiv
 17551  0E02  0827               	movf	___ftdiv@f2+1,w
 17552  0E03  00AD               	movwf	??___ftdiv+1
 17553  0E04  0828               	movf	___ftdiv@f2+2,w
 17554  0E05  00AE               	movwf	??___ftdiv+2
 17555  0E06  1003               	clrc
 17556  0E07  0D2D               	rlf	??___ftdiv+1,w
 17557  0E08  0D2E               	rlf	??___ftdiv+2,w
 17558  0E09  00AF               	movwf	??___ftdiv+3
 17559  0E0A  082F               	movf	??___ftdiv+3,w
 17560  0E0B  00B5               	movwf	___ftdiv@sign
 17561  0E0C  08B5               	movf	___ftdiv@sign,f
 17562  0E0D  1D03               	skipz
 17563  0E0E  2E16               	goto	l6161
 17564  0E0F  3000               	movlw	0
 17565  0E10  00A6               	movwf	?___ftdiv
 17566  0E11  3000               	movlw	0
 17567  0E12  00A7               	movwf	?___ftdiv+1
 17568  0E13  3000               	movlw	0
 17569  0E14  00A8               	movwf	?___ftdiv+2
 17570  0E15  0008               	return
 17571  0E16                     l6161:	
 17572  0E16  3000               	movlw	0
 17573  0E17  00B1               	movwf	___ftdiv@f3
 17574  0E18  3000               	movlw	0
 17575  0E19  00B2               	movwf	___ftdiv@f3+1
 17576  0E1A  3000               	movlw	0
 17577  0E1B  00B3               	movwf	___ftdiv@f3+2
 17578  0E1C  3089               	movlw	137
 17579  0E1D  0735               	addwf	___ftdiv@sign,w
 17580  0E1E  00AC               	movwf	??___ftdiv
 17581  0E1F  082C               	movf	??___ftdiv,w
 17582  0E20  02B4               	subwf	___ftdiv@exp,f
 17583  0E21  0829               	movf	___ftdiv@f1,w
 17584  0E22  00AC               	movwf	??___ftdiv
 17585  0E23  082A               	movf	___ftdiv@f1+1,w
 17586  0E24  00AD               	movwf	??___ftdiv+1
 17587  0E25  082B               	movf	___ftdiv@f1+2,w
 17588  0E26  00AE               	movwf	??___ftdiv+2
 17589  0E27  3010               	movlw	16
 17590  0E28                     u4995:	
 17591  0E28  36AE               	lsrf	??___ftdiv+2,f
 17592  0E29  0CAD               	rrf	??___ftdiv+1,f
 17593  0E2A  0CAC               	rrf	??___ftdiv,f
 17594  0E2B  0B89               	decfsz	9,f
 17595  0E2C  2E28               	goto	u4995
 17596  0E2D  082C               	movf	??___ftdiv,w
 17597  0E2E  00AF               	movwf	??___ftdiv+3
 17598  0E2F  082F               	movf	??___ftdiv+3,w
 17599  0E30  00B5               	movwf	___ftdiv@sign
 17600  0E31  0826               	movf	___ftdiv@f2,w
 17601  0E32  00AC               	movwf	??___ftdiv
 17602  0E33  0827               	movf	___ftdiv@f2+1,w
 17603  0E34  00AD               	movwf	??___ftdiv+1
 17604  0E35  0828               	movf	___ftdiv@f2+2,w
 17605  0E36  00AE               	movwf	??___ftdiv+2
 17606  0E37  3010               	movlw	16
 17607  0E38                     u5005:	
 17608  0E38  36AE               	lsrf	??___ftdiv+2,f
 17609  0E39  0CAD               	rrf	??___ftdiv+1,f
 17610  0E3A  0CAC               	rrf	??___ftdiv,f
 17611  0E3B  0B89               	decfsz	9,f
 17612  0E3C  2E38               	goto	u5005
 17613  0E3D  082C               	movf	??___ftdiv,w
 17614  0E3E  00AF               	movwf	??___ftdiv+3
 17615  0E3F  082F               	movf	??___ftdiv+3,w
 17616  0E40  06B5               	xorwf	___ftdiv@sign,f
 17617  0E41  3080               	movlw	128
 17618  0E42  00AC               	movwf	??___ftdiv
 17619  0E43  082C               	movf	??___ftdiv,w
 17620  0E44  05B5               	andwf	___ftdiv@sign,f
 17621  0E45  17AA               	bsf	___ftdiv@f1+1,7
 17622  0E46  30FF               	movlw	255
 17623  0E47  05A9               	andwf	___ftdiv@f1,f
 17624  0E48  30FF               	movlw	255
 17625  0E49  05AA               	andwf	___ftdiv@f1+1,f
 17626  0E4A  3000               	movlw	0
 17627  0E4B  05AB               	andwf	___ftdiv@f1+2,f
 17628  0E4C  17A7               	bsf	___ftdiv@f2+1,7
 17629  0E4D  30FF               	movlw	255
 17630  0E4E  05A6               	andwf	___ftdiv@f2,f
 17631  0E4F  30FF               	movlw	255
 17632  0E50  05A7               	andwf	___ftdiv@f2+1,f
 17633  0E51  3000               	movlw	0
 17634  0E52  05A8               	andwf	___ftdiv@f2+2,f
 17635  0E53  3018               	movlw	24
 17636  0E54  00AC               	movwf	??___ftdiv
 17637  0E55  082C               	movf	??___ftdiv,w
 17638  0E56  00B0               	movwf	___ftdiv@cntr
 17639  0E57                     l6175:	
 17640  0E57  3001               	movlw	1
 17641  0E58                     u5015:	
 17642  0E58  35B1               	lslf	___ftdiv@f3,f
 17643  0E59  0DB2               	rlf	___ftdiv@f3+1,f
 17644  0E5A  0DB3               	rlf	___ftdiv@f3+2,f
 17645  0E5B  0B89               	decfsz	9,f
 17646  0E5C  2E58               	goto	u5015
 17647  0E5D  0828               	movf	___ftdiv@f2+2,w
 17648  0E5E  022B               	subwf	___ftdiv@f1+2,w
 17649  0E5F  1D03               	skipz
 17650  0E60  2E67               	goto	u5025
 17651  0E61  0827               	movf	___ftdiv@f2+1,w
 17652  0E62  022A               	subwf	___ftdiv@f1+1,w
 17653  0E63  1D03               	skipz
 17654  0E64  2E67               	goto	u5025
 17655  0E65  0826               	movf	___ftdiv@f2,w
 17656  0E66  0229               	subwf	___ftdiv@f1,w
 17657  0E67                     u5025:	
 17658  0E67  1C03               	skipc
 17659  0E68  2E70               	goto	l6183
 17660  0E69  0826               	movf	___ftdiv@f2,w
 17661  0E6A  02A9               	subwf	___ftdiv@f1,f
 17662  0E6B  0827               	movf	___ftdiv@f2+1,w
 17663  0E6C  3BAA               	subwfb	___ftdiv@f1+1,f
 17664  0E6D  0828               	movf	___ftdiv@f2+2,w
 17665  0E6E  3BAB               	subwfb	___ftdiv@f1+2,f
 17666  0E6F  1431               	bsf	___ftdiv@f3,0
 17667  0E70                     l6183:	
 17668  0E70  3001               	movlw	1
 17669  0E71                     u5035:	
 17670  0E71  35A9               	lslf	___ftdiv@f1,f
 17671  0E72  0DAA               	rlf	___ftdiv@f1+1,f
 17672  0E73  0DAB               	rlf	___ftdiv@f1+2,f
 17673  0E74  0B89               	decfsz	9,f
 17674  0E75  2E71               	goto	u5035
 17675  0E76  3001               	movlw	1
 17676  0E77  02B0               	subwf	___ftdiv@cntr,f
 17677  0E78  1D03               	btfss	3,2
 17678  0E79  2E57               	goto	l6175
 17679  0E7A  0831               	movf	___ftdiv@f3,w
 17680  0E7B  00F2               	movwf	___ftpack@arg
 17681  0E7C  0832               	movf	___ftdiv@f3+1,w
 17682  0E7D  00F3               	movwf	___ftpack@arg+1
 17683  0E7E  0833               	movf	___ftdiv@f3+2,w
 17684  0E7F  00F4               	movwf	___ftpack@arg+2
 17685  0E80  0834               	movf	___ftdiv@exp,w
 17686  0E81  00AC               	movwf	??___ftdiv
 17687  0E82  082C               	movf	??___ftdiv,w
 17688  0E83  00F5               	movwf	___ftpack@exp
 17689  0E84  0835               	movf	___ftdiv@sign,w
 17690  0E85  00AD               	movwf	??___ftdiv+1
 17691  0E86  082D               	movf	??___ftdiv+1,w
 17692  0E87  00F6               	movwf	___ftpack@sign
 17693  0E88  3197  27A0         	fcall	___ftpack
 17694  0E8A  0872               	movf	?___ftpack,w
 17695  0E8B  0020               	movlb	0	; select bank0
 17696  0E8C  00A6               	movwf	?___ftdiv
 17697  0E8D  0873               	movf	?___ftpack+1,w
 17698  0E8E  00A7               	movwf	?___ftdiv+1
 17699  0E8F  0874               	movf	?___ftpack+2,w
 17700  0E90  00A8               	movwf	?___ftdiv+2
 17701  0E91  0008               	return
 17702  0E92                     __end_of___ftdiv:	
 17703                           
 17704                           	psect	text127
 17705  0364                     __ptext127:	
 17706 ;; *************** function ___ftadd *****************
 17707 ;; Defined at:
 17708 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17709 ;; Parameters:    Size  Location     Type
 17710 ;;  f1              3   25[BANK0 ] float 
 17711 ;;  f2              3   28[BANK0 ] float 
 17712 ;; Auto vars:     Size  Location     Type
 17713 ;;  exp1            1   37[BANK0 ] unsigned char 
 17714 ;;  exp2            1   36[BANK0 ] unsigned char 
 17715 ;;  sign            1   35[BANK0 ] unsigned char 
 17716 ;; Return value:  Size  Location     Type
 17717 ;;                  3   25[BANK0 ] float 
 17718 ;; Registers used:
 17719 ;;		wreg, status,2, status,0, pclath, cstack
 17720 ;; Tracked objects:
 17721 ;;		On entry : 0/0
 17722 ;;		On exit  : 0/0
 17723 ;;		Unchanged: 0/0
 17724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17725 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17726 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;Total ram usage:       13 bytes
 17730 ;; Hardware stack levels used:    1
 17731 ;; Hardware stack levels required when called:    4
 17732 ;; This function calls:
 17733 ;;		___ftpack
 17734 ;; This function is called by:
 17735 ;;		_getDimmerLights_PercentToValue
 17736 ;;		_getDimmerLights_ValueToPercent
 17737 ;; This function uses a non-reentrant model
 17738 ;;
 17739                           
 17740                           
 17741                           ;psect for function ___ftadd
 17742  0364                     ___ftadd:	
 17743                           
 17744                           ;incstack = 0
 17745                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17746  0364  0020               	movlb	0	; select bank0
 17747  0365  0839               	movf	___ftadd@f1,w
 17748  0366  00BF               	movwf	??___ftadd
 17749  0367  083A               	movf	___ftadd@f1+1,w
 17750  0368  00C0               	movwf	??___ftadd+1
 17751  0369  083B               	movf	___ftadd@f1+2,w
 17752  036A  00C1               	movwf	??___ftadd+2
 17753  036B  1003               	clrc
 17754  036C  0D40               	rlf	??___ftadd+1,w
 17755  036D  0D41               	rlf	??___ftadd+2,w
 17756  036E  00C2               	movwf	??___ftadd+3
 17757  036F  0842               	movf	??___ftadd+3,w
 17758  0370  00C5               	movwf	___ftadd@exp1
 17759  0371  083C               	movf	___ftadd@f2,w
 17760  0372  00BF               	movwf	??___ftadd
 17761  0373  083D               	movf	___ftadd@f2+1,w
 17762  0374  00C0               	movwf	??___ftadd+1
 17763  0375  083E               	movf	___ftadd@f2+2,w
 17764  0376  00C1               	movwf	??___ftadd+2
 17765  0377  1003               	clrc
 17766  0378  0D40               	rlf	??___ftadd+1,w
 17767  0379  0D41               	rlf	??___ftadd+2,w
 17768  037A  00C2               	movwf	??___ftadd+3
 17769  037B  0842               	movf	??___ftadd+3,w
 17770  037C  00C4               	movwf	___ftadd@exp2
 17771  037D  0845               	movf	___ftadd@exp1,w
 17772  037E  1903               	btfsc	3,2
 17773  037F  2B8C               	goto	l6085
 17774  0380  0844               	movf	___ftadd@exp2,w
 17775  0381  0245               	subwf	___ftadd@exp1,w
 17776  0382  1803               	skipnc
 17777  0383  2B93               	goto	l6089
 17778  0384  0345               	decf	___ftadd@exp1,w
 17779  0385  3AFF               	xorlw	255
 17780  0386  0744               	addwf	___ftadd@exp2,w
 17781  0387  00BF               	movwf	??___ftadd
 17782  0388  3019               	movlw	25
 17783  0389  023F               	subwf	??___ftadd,w
 17784  038A  1C03               	skipc
 17785  038B  2B93               	goto	l6089
 17786  038C                     l6085:	
 17787  038C  083C               	movf	___ftadd@f2,w
 17788  038D  00B9               	movwf	?___ftadd
 17789  038E  083D               	movf	___ftadd@f2+1,w
 17790  038F  00BA               	movwf	?___ftadd+1
 17791  0390  083E               	movf	___ftadd@f2+2,w
 17792  0391  00BB               	movwf	?___ftadd+2
 17793  0392  0008               	return
 17794  0393                     l6089:	
 17795  0393  0844               	movf	___ftadd@exp2,w
 17796  0394  1903               	btfsc	3,2
 17797  0395  0008               	return
 17798  0396  0845               	movf	___ftadd@exp1,w
 17799  0397  0244               	subwf	___ftadd@exp2,w
 17800  0398  1803               	skipnc
 17801  0399  2BA2               	goto	l6095
 17802  039A  0344               	decf	___ftadd@exp2,w
 17803  039B  3AFF               	xorlw	255
 17804  039C  0745               	addwf	___ftadd@exp1,w
 17805  039D  00BF               	movwf	??___ftadd
 17806  039E  3019               	movlw	25
 17807  039F  023F               	subwf	??___ftadd,w
 17808  03A0  1803               	btfsc	3,0
 17809  03A1  0008               	return
 17810  03A2                     l6095:	
 17811  03A2  3006               	movlw	6
 17812  03A3  00BF               	movwf	??___ftadd
 17813  03A4  083F               	movf	??___ftadd,w
 17814  03A5  00C3               	movwf	___ftadd@sign
 17815  03A6  1BBB               	btfsc	___ftadd@f1+2,7
 17816  03A7  17C3               	bsf	___ftadd@sign,7
 17817  03A8  1BBE               	btfsc	___ftadd@f2+2,7
 17818  03A9  1743               	bsf	___ftadd@sign,6
 17819  03AA  17BA               	bsf	___ftadd@f1+1,7
 17820  03AB  30FF               	movlw	255
 17821  03AC  05B9               	andwf	___ftadd@f1,f
 17822  03AD  30FF               	movlw	255
 17823  03AE  05BA               	andwf	___ftadd@f1+1,f
 17824  03AF  3000               	movlw	0
 17825  03B0  05BB               	andwf	___ftadd@f1+2,f
 17826  03B1  17BD               	bsf	___ftadd@f2+1,7
 17827  03B2  30FF               	movlw	255
 17828  03B3  05BC               	andwf	___ftadd@f2,f
 17829  03B4  30FF               	movlw	255
 17830  03B5  05BD               	andwf	___ftadd@f2+1,f
 17831  03B6  3000               	movlw	0
 17832  03B7  05BE               	andwf	___ftadd@f2+2,f
 17833  03B8  0844               	movf	___ftadd@exp2,w
 17834  03B9  0245               	subwf	___ftadd@exp1,w
 17835  03BA  1803               	skipnc
 17836  03BB  2BDE               	goto	l6117
 17837  03BC                     l6107:	
 17838  03BC  3001               	movlw	1
 17839  03BD                     u4835:	
 17840  03BD  35BC               	lslf	___ftadd@f2,f
 17841  03BE  0DBD               	rlf	___ftadd@f2+1,f
 17842  03BF  0DBE               	rlf	___ftadd@f2+2,f
 17843  03C0  0B89               	decfsz	9,f
 17844  03C1  2BBD               	goto	u4835
 17845  03C2  3001               	movlw	1
 17846  03C3  02C4               	subwf	___ftadd@exp2,f
 17847  03C4  0844               	movf	___ftadd@exp2,w
 17848  03C5  0645               	xorwf	___ftadd@exp1,w
 17849  03C6  1903               	skipnz
 17850  03C7  2BD9               	goto	l6115
 17851  03C8  3001               	movlw	1
 17852  03C9  02C3               	subwf	___ftadd@sign,f
 17853  03CA  0843               	movf	___ftadd@sign,w
 17854  03CB  3907               	andlw	7
 17855  03CC  1903               	btfsc	3,2
 17856  03CD  2BD9               	goto	l6115
 17857  03CE  2BBC               	goto	l6107
 17858  03CF                     l6113:	
 17859  03CF  3001               	movlw	1
 17860  03D0                     u4865:	
 17861  03D0  36BB               	lsrf	___ftadd@f1+2,f
 17862  03D1  0CBA               	rrf	___ftadd@f1+1,f
 17863  03D2  0CB9               	rrf	___ftadd@f1,f
 17864  03D3  0B89               	decfsz	9,f
 17865  03D4  2BD0               	goto	u4865
 17866  03D5  3001               	movlw	1
 17867  03D6  00BF               	movwf	??___ftadd
 17868  03D7  083F               	movf	??___ftadd,w
 17869  03D8  07C5               	addwf	___ftadd@exp1,f
 17870  03D9                     l6115:	
 17871  03D9  0845               	movf	___ftadd@exp1,w
 17872  03DA  0644               	xorwf	___ftadd@exp2,w
 17873  03DB  1903               	btfsc	3,2
 17874  03DC  2C03               	goto	l2984
 17875  03DD  2BCF               	goto	l6113
 17876  03DE                     l6117:	
 17877  03DE  0845               	movf	___ftadd@exp1,w
 17878  03DF  0244               	subwf	___ftadd@exp2,w
 17879  03E0  1803               	skipnc
 17880  03E1  2C03               	goto	l2984
 17881  03E2                     l6119:	
 17882  03E2  3001               	movlw	1
 17883  03E3                     u4895:	
 17884  03E3  35B9               	lslf	___ftadd@f1,f
 17885  03E4  0DBA               	rlf	___ftadd@f1+1,f
 17886  03E5  0DBB               	rlf	___ftadd@f1+2,f
 17887  03E6  0B89               	decfsz	9,f
 17888  03E7  2BE3               	goto	u4895
 17889  03E8  3001               	movlw	1
 17890  03E9  02C5               	subwf	___ftadd@exp1,f
 17891  03EA  0844               	movf	___ftadd@exp2,w
 17892  03EB  0645               	xorwf	___ftadd@exp1,w
 17893  03EC  1903               	skipnz
 17894  03ED  2BFF               	goto	l6127
 17895  03EE  3001               	movlw	1
 17896  03EF  02C3               	subwf	___ftadd@sign,f
 17897  03F0  0843               	movf	___ftadd@sign,w
 17898  03F1  3907               	andlw	7
 17899  03F2  1903               	btfsc	3,2
 17900  03F3  2BFF               	goto	l6127
 17901  03F4  2BE2               	goto	l6119
 17902  03F5                     l6125:	
 17903  03F5  3001               	movlw	1
 17904  03F6                     u4925:	
 17905  03F6  36BE               	lsrf	___ftadd@f2+2,f
 17906  03F7  0CBD               	rrf	___ftadd@f2+1,f
 17907  03F8  0CBC               	rrf	___ftadd@f2,f
 17908  03F9  0B89               	decfsz	9,f
 17909  03FA  2BF6               	goto	u4925
 17910  03FB  3001               	movlw	1
 17911  03FC  00BF               	movwf	??___ftadd
 17912  03FD  083F               	movf	??___ftadd,w
 17913  03FE  07C4               	addwf	___ftadd@exp2,f
 17914  03FF                     l6127:	
 17915  03FF  0845               	movf	___ftadd@exp1,w
 17916  0400  0644               	xorwf	___ftadd@exp2,w
 17917  0401  1D03               	skipz
 17918  0402  2BF5               	goto	l6125
 17919  0403                     l2984:	
 17920  0403  1FC3               	btfss	___ftadd@sign,7
 17921  0404  2C15               	goto	l6131
 17922  0405  30FF               	movlw	255
 17923  0406  06B9               	xorwf	___ftadd@f1,f
 17924  0407  30FF               	movlw	255
 17925  0408  06BA               	xorwf	___ftadd@f1+1,f
 17926  0409  30FF               	movlw	255
 17927  040A  06BB               	xorwf	___ftadd@f1+2,f
 17928  040B  3001               	movlw	1
 17929  040C  07B9               	addwf	___ftadd@f1,f
 17930  040D  3000               	movlw	0
 17931  040E  1803               	skipnc
 17932  040F  3001               	movlw	1
 17933  0410  07BA               	addwf	___ftadd@f1+1,f
 17934  0411  3000               	movlw	0
 17935  0412  1803               	skipnc
 17936  0413  3001               	movlw	1
 17937  0414  07BB               	addwf	___ftadd@f1+2,f
 17938  0415                     l6131:	
 17939  0415  1F43               	btfss	___ftadd@sign,6
 17940  0416  2C27               	goto	l6135
 17941  0417  30FF               	movlw	255
 17942  0418  06BC               	xorwf	___ftadd@f2,f
 17943  0419  30FF               	movlw	255
 17944  041A  06BD               	xorwf	___ftadd@f2+1,f
 17945  041B  30FF               	movlw	255
 17946  041C  06BE               	xorwf	___ftadd@f2+2,f
 17947  041D  3001               	movlw	1
 17948  041E  07BC               	addwf	___ftadd@f2,f
 17949  041F  3000               	movlw	0
 17950  0420  1803               	skipnc
 17951  0421  3001               	movlw	1
 17952  0422  07BD               	addwf	___ftadd@f2+1,f
 17953  0423  3000               	movlw	0
 17954  0424  1803               	skipnc
 17955  0425  3001               	movlw	1
 17956  0426  07BE               	addwf	___ftadd@f2+2,f
 17957  0427                     l6135:	
 17958  0427  01C3               	clrf	___ftadd@sign
 17959  0428  0839               	movf	___ftadd@f1,w
 17960  0429  07BC               	addwf	___ftadd@f2,f
 17961  042A  083A               	movf	___ftadd@f1+1,w
 17962  042B  3DBD               	addwfc	___ftadd@f2+1,f
 17963  042C  083B               	movf	___ftadd@f1+2,w
 17964  042D  3DBE               	addwfc	___ftadd@f2+2,f
 17965  042E  1FBE               	btfss	___ftadd@f2+2,7
 17966  042F  2C42               	goto	l6145
 17967  0430  30FF               	movlw	255
 17968  0431  06BC               	xorwf	___ftadd@f2,f
 17969  0432  30FF               	movlw	255
 17970  0433  06BD               	xorwf	___ftadd@f2+1,f
 17971  0434  30FF               	movlw	255
 17972  0435  06BE               	xorwf	___ftadd@f2+2,f
 17973  0436  3001               	movlw	1
 17974  0437  07BC               	addwf	___ftadd@f2,f
 17975  0438  3000               	movlw	0
 17976  0439  1803               	skipnc
 17977  043A  3001               	movlw	1
 17978  043B  07BD               	addwf	___ftadd@f2+1,f
 17979  043C  3000               	movlw	0
 17980  043D  1803               	skipnc
 17981  043E  3001               	movlw	1
 17982  043F  07BE               	addwf	___ftadd@f2+2,f
 17983  0440  01C3               	clrf	___ftadd@sign
 17984  0441  0AC3               	incf	___ftadd@sign,f
 17985  0442                     l6145:	
 17986  0442  083C               	movf	___ftadd@f2,w
 17987  0443  00F2               	movwf	___ftpack@arg
 17988  0444  083D               	movf	___ftadd@f2+1,w
 17989  0445  00F3               	movwf	___ftpack@arg+1
 17990  0446  083E               	movf	___ftadd@f2+2,w
 17991  0447  00F4               	movwf	___ftpack@arg+2
 17992  0448  0845               	movf	___ftadd@exp1,w
 17993  0449  00BF               	movwf	??___ftadd
 17994  044A  083F               	movf	??___ftadd,w
 17995  044B  00F5               	movwf	___ftpack@exp
 17996  044C  0843               	movf	___ftadd@sign,w
 17997  044D  00C0               	movwf	??___ftadd+1
 17998  044E  0840               	movf	??___ftadd+1,w
 17999  044F  00F6               	movwf	___ftpack@sign
 18000  0450  3197  27A0         	fcall	___ftpack
 18001  0452  0872               	movf	?___ftpack,w
 18002  0453  0020               	movlb	0	; select bank0
 18003  0454  00B9               	movwf	?___ftadd
 18004  0455  0873               	movf	?___ftpack+1,w
 18005  0456  00BA               	movwf	?___ftadd+1
 18006  0457  0874               	movf	?___ftpack+2,w
 18007  0458  00BB               	movwf	?___ftadd+2
 18008  0459  0008               	return
 18009  045A                     __end_of___ftadd:	
 18010                           
 18011                           	psect	text128
 18012  1093                     __ptext128:	
 18013 ;; *************** function ___awtoft *****************
 18014 ;; Defined at:
 18015 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18016 ;; Parameters:    Size  Location     Type
 18017 ;;  c               2    0[BANK0 ] int 
 18018 ;; Auto vars:     Size  Location     Type
 18019 ;;  sign            1    5[BANK0 ] unsigned char 
 18020 ;; Return value:  Size  Location     Type
 18021 ;;                  3    0[BANK0 ] float 
 18022 ;; Registers used:
 18023 ;;		wreg, status,2, status,0, pclath, cstack
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18031 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18032 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18033 ;;Total ram usage:        6 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; Hardware stack levels required when called:    4
 18036 ;; This function calls:
 18037 ;;		___ftpack
 18038 ;; This function is called by:
 18039 ;;		_getDimmerLights_PercentToValue
 18040 ;;		_getDimmerLights_ValueToPercent
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044                           
 18045                           ;psect for function ___awtoft
 18046  1093                     ___awtoft:	
 18047                           
 18048                           ;incstack = 0
 18049                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18050  1093  0020               	movlb	0	; select bank0
 18051  1094  01A5               	clrf	___awtoft@sign
 18052  1095  1FA1               	btfss	___awtoft@c+1,7
 18053  1096  289E               	goto	l8751
 18054  1097  09A0               	comf	___awtoft@c,f
 18055  1098  09A1               	comf	___awtoft@c+1,f
 18056  1099  0AA0               	incf	___awtoft@c,f
 18057  109A  1903               	skipnz
 18058  109B  0AA1               	incf	___awtoft@c+1,f
 18059  109C  01A5               	clrf	___awtoft@sign
 18060  109D  0AA5               	incf	___awtoft@sign,f
 18061  109E                     l8751:	
 18062  109E  0820               	movf	___awtoft@c,w
 18063  109F  00F2               	movwf	___ftpack@arg
 18064  10A0  0821               	movf	___awtoft@c+1,w
 18065  10A1  00F3               	movwf	___ftpack@arg+1
 18066  10A2  01F4               	clrf	___ftpack@arg+2
 18067  10A3  308E               	movlw	142
 18068  10A4  00A3               	movwf	??___awtoft
 18069  10A5  0823               	movf	??___awtoft,w
 18070  10A6  00F5               	movwf	___ftpack@exp
 18071  10A7  0825               	movf	___awtoft@sign,w
 18072  10A8  00A4               	movwf	??___awtoft+1
 18073  10A9  0824               	movf	??___awtoft+1,w
 18074  10AA  00F6               	movwf	___ftpack@sign
 18075  10AB  3197  27A0         	fcall	___ftpack
 18076  10AD  0872               	movf	?___ftpack,w
 18077  10AE  0020               	movlb	0	; select bank0
 18078  10AF  00A0               	movwf	?___awtoft
 18079  10B0  0873               	movf	?___ftpack+1,w
 18080  10B1  00A1               	movwf	?___awtoft+1
 18081  10B2  0874               	movf	?___ftpack+2,w
 18082  10B3  00A2               	movwf	?___awtoft+2
 18083  10B4  0008               	return
 18084  10B5                     __end_of___awtoft:	
 18085                           
 18086                           	psect	text129
 18087  17A0                     __ptext129:	
 18088 ;; *************** function ___ftpack *****************
 18089 ;; Defined at:
 18090 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18091 ;; Parameters:    Size  Location     Type
 18092 ;;  arg             3    2[COMMON] unsigned um
 18093 ;;  exp             1    5[COMMON] unsigned char 
 18094 ;;  sign            1    6[COMMON] unsigned char 
 18095 ;; Auto vars:     Size  Location     Type
 18096 ;;		None
 18097 ;; Return value:  Size  Location     Type
 18098 ;;                  3    2[COMMON] float 
 18099 ;; Registers used:
 18100 ;;		wreg, status,2, status,0
 18101 ;; Tracked objects:
 18102 ;;		On entry : 0/0
 18103 ;;		On exit  : 0/0
 18104 ;;		Unchanged: 0/0
 18105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18106 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18109 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18110 ;;Total ram usage:        8 bytes
 18111 ;; Hardware stack levels used:    1
 18112 ;; Hardware stack levels required when called:    3
 18113 ;; This function calls:
 18114 ;;		Nothing
 18115 ;; This function is called by:
 18116 ;;		___awtoft
 18117 ;;		___ftadd
 18118 ;;		___ftdiv
 18119 ;;		___ftmul
 18120 ;; This function uses a non-reentrant model
 18121 ;;
 18122                           
 18123                           
 18124                           ;psect for function ___ftpack
 18125  17A0                     ___ftpack:	
 18126                           
 18127                           ;incstack = 0
 18128                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18129  17A0  0875               	movf	___ftpack@exp,w
 18130  17A1  1903               	btfsc	3,2
 18131  17A2  2FA8               	goto	l5931
 18132  17A3  0874               	movf	___ftpack@arg+2,w
 18133  17A4  0473               	iorwf	___ftpack@arg+1,w
 18134  17A5  0472               	iorwf	___ftpack@arg,w
 18135  17A6  1D03               	skipz
 18136  17A7  2FB9               	goto	l5937
 18137  17A8                     l5931:	
 18138  17A8  3000               	movlw	0
 18139  17A9  00F2               	movwf	?___ftpack
 18140  17AA  3000               	movlw	0
 18141  17AB  00F3               	movwf	?___ftpack+1
 18142  17AC  3000               	movlw	0
 18143  17AD  00F4               	movwf	?___ftpack+2
 18144  17AE  0008               	return
 18145  17AF                     l5935:	
 18146  17AF  3001               	movlw	1
 18147  17B0  00F7               	movwf	??___ftpack
 18148  17B1  0877               	movf	??___ftpack,w
 18149  17B2  07F5               	addwf	___ftpack@exp,f
 18150  17B3  3001               	movlw	1
 18151  17B4                     u4455:	
 18152  17B4  36F4               	lsrf	___ftpack@arg+2,f
 18153  17B5  0CF3               	rrf	___ftpack@arg+1,f
 18154  17B6  0CF2               	rrf	___ftpack@arg,f
 18155  17B7  0B89               	decfsz	9,f
 18156  17B8  2FB4               	goto	u4455
 18157  17B9                     l5937:	
 18158  17B9  30FE               	movlw	254
 18159  17BA  0574               	andwf	___ftpack@arg+2,w
 18160  17BB  1903               	btfsc	3,2
 18161  17BC  2FD2               	goto	l2955
 18162  17BD  2FAF               	goto	l5935
 18163  17BE                     l5939:	
 18164  17BE  3001               	movlw	1
 18165  17BF  00F7               	movwf	??___ftpack
 18166  17C0  0877               	movf	??___ftpack,w
 18167  17C1  07F5               	addwf	___ftpack@exp,f
 18168  17C2  3001               	movlw	1
 18169  17C3  07F2               	addwf	___ftpack@arg,f
 18170  17C4  3000               	movlw	0
 18171  17C5  1803               	skipnc
 18172  17C6  3001               	movlw	1
 18173  17C7  07F3               	addwf	___ftpack@arg+1,f
 18174  17C8  3000               	movlw	0
 18175  17C9  1803               	skipnc
 18176  17CA  3001               	movlw	1
 18177  17CB  07F4               	addwf	___ftpack@arg+2,f
 18178  17CC  3001               	movlw	1
 18179  17CD                     u4475:	
 18180  17CD  36F4               	lsrf	___ftpack@arg+2,f
 18181  17CE  0CF3               	rrf	___ftpack@arg+1,f
 18182  17CF  0CF2               	rrf	___ftpack@arg,f
 18183  17D0  0B89               	decfsz	9,f
 18184  17D1  2FCD               	goto	u4475
 18185  17D2                     l2955:	
 18186  17D2  30FF               	movlw	255
 18187  17D3  0574               	andwf	___ftpack@arg+2,w
 18188  17D4  1903               	btfsc	3,2
 18189  17D5  2FDF               	goto	l5947
 18190  17D6  2FBE               	goto	l5939
 18191  17D7                     l5945:	
 18192  17D7  3001               	movlw	1
 18193  17D8  02F5               	subwf	___ftpack@exp,f
 18194  17D9  3001               	movlw	1
 18195  17DA                     u4495:	
 18196  17DA  35F2               	lslf	___ftpack@arg,f
 18197  17DB  0DF3               	rlf	___ftpack@arg+1,f
 18198  17DC  0DF4               	rlf	___ftpack@arg+2,f
 18199  17DD  0B89               	decfsz	9,f
 18200  17DE  2FDA               	goto	u4495
 18201  17DF                     l5947:	
 18202  17DF  1FF3               	btfss	___ftpack@arg+1,7
 18203  17E0  2FD7               	goto	l5945
 18204  17E1  1875               	btfsc	___ftpack@exp,0
 18205  17E2  2FE9               	goto	l2961
 18206  17E3  30FF               	movlw	255
 18207  17E4  05F2               	andwf	___ftpack@arg,f
 18208  17E5  307F               	movlw	127
 18209  17E6  05F3               	andwf	___ftpack@arg+1,f
 18210  17E7  30FF               	movlw	255
 18211  17E8  05F4               	andwf	___ftpack@arg+2,f
 18212  17E9                     l2961:	
 18213  17E9  1003               	clrc
 18214  17EA  0CF5               	rrf	___ftpack@exp,f
 18215  17EB  0875               	movf	___ftpack@exp,w
 18216  17EC  00F7               	movwf	??___ftpack
 18217  17ED  01F8               	clrf	??___ftpack+1
 18218  17EE  01F9               	clrf	??___ftpack+2
 18219  17EF  3010               	movlw	16
 18220  17F0                     u4525:	
 18221  17F0  35F7               	lslf	??___ftpack,f
 18222  17F1  0DF8               	rlf	??___ftpack+1,f
 18223  17F2  0DF9               	rlf	??___ftpack+2,f
 18224  17F3  0B89               	decfsz	9,f
 18225  17F4  2FF0               	goto	u4525
 18226  17F5  0877               	movf	??___ftpack,w
 18227  17F6  04F2               	iorwf	___ftpack@arg,f
 18228  17F7  0878               	movf	??___ftpack+1,w
 18229  17F8  04F3               	iorwf	___ftpack@arg+1,f
 18230  17F9  0879               	movf	??___ftpack+2,w
 18231  17FA  04F4               	iorwf	___ftpack@arg+2,f
 18232  17FB  0876               	movf	___ftpack@sign,w
 18233  17FC  1903               	btfsc	3,2
 18234  17FD  0008               	return
 18235  17FE  17F4               	bsf	___ftpack@arg+2,7
 18236  17FF  0008               	return
 18237  1800                     __end_of___ftpack:	
 18238                           
 18239                           	psect	text130
 18240  1CC8                     __ptext130:	
 18241 ;; *************** function _Division *****************
 18242 ;; Defined at:
 18243 ;;		line 2015 in file "../src/Dimmer_B1.c"
 18244 ;; Parameters:    Size  Location     Type
 18245 ;;  value           1    wreg     unsigned char 
 18246 ;;  num             1    7[COMMON] unsigned char 
 18247 ;; Auto vars:     Size  Location     Type
 18248 ;;  value           1    0[BANK0 ] unsigned char 
 18249 ;;  result          1    1[BANK0 ] unsigned char 
 18250 ;; Return value:  Size  Location     Type
 18251 ;;                  1    wreg      unsigned char 
 18252 ;; Registers used:
 18253 ;;		wreg, status,2, status,0, pclath, cstack
 18254 ;; Tracked objects:
 18255 ;;		On entry : 0/0
 18256 ;;		On exit  : 0/0
 18257 ;;		Unchanged: 0/0
 18258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18259 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18262 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18263 ;;Total ram usage:        5 bytes
 18264 ;; Hardware stack levels used:    1
 18265 ;; Hardware stack levels required when called:    4
 18266 ;; This function calls:
 18267 ;;		___lbdiv
 18268 ;; This function is called by:
 18269 ;;		_DimmerIntr_Initialization
 18270 ;;		_DimmerIntr_ValueCalculate
 18271 ;; This function uses a non-reentrant model
 18272 ;;
 18273                           
 18274                           
 18275                           ;psect for function _Division
 18276  1CC8                     _Division:	
 18277                           
 18278                           ;incstack = 0
 18279                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18280                           ;Division@value stored from wreg
 18281  1CC8  0020               	movlb	0	; select bank0
 18282  1CC9  00A0               	movwf	Division@value
 18283                           
 18284                           ;Dimmer_B1.c: 2016: char result = (char) (value / num);
 18285  1CCA  0877               	movf	Division@num,w
 18286  1CCB  00F8               	movwf	??_Division
 18287  1CCC  0878               	movf	??_Division,w
 18288  1CCD  00F2               	movwf	___lbdiv@divisor
 18289  1CCE  0820               	movf	Division@value,w
 18290  1CCF  3190  2072         	fcall	___lbdiv
 18291  1CD1  00F9               	movwf	??_Division+1
 18292  1CD2  0879               	movf	??_Division+1,w
 18293  1CD3  0020               	movlb	0	; select bank0
 18294  1CD4  00A1               	movwf	Division@result
 18295                           
 18296                           ;Dimmer_B1.c: 2017: return result;
 18297  1CD5  0821               	movf	Division@result,w
 18298  1CD6  0008               	return
 18299  1CD7                     __end_of_Division:	
 18300                           
 18301                           	psect	text131
 18302  1072                     __ptext131:	
 18303 ;; *************** function ___lbdiv *****************
 18304 ;; Defined at:
 18305 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18306 ;; Parameters:    Size  Location     Type
 18307 ;;  dividend        1    wreg     unsigned char 
 18308 ;;  divisor         1    2[COMMON] unsigned char 
 18309 ;; Auto vars:     Size  Location     Type
 18310 ;;  dividend        1    4[COMMON] unsigned char 
 18311 ;;  quotient        1    6[COMMON] unsigned char 
 18312 ;;  counter         1    5[COMMON] unsigned char 
 18313 ;; Return value:  Size  Location     Type
 18314 ;;                  1    wreg      unsigned char 
 18315 ;; Registers used:
 18316 ;;		wreg, status,2, status,0
 18317 ;; Tracked objects:
 18318 ;;		On entry : 0/0
 18319 ;;		On exit  : 0/0
 18320 ;;		Unchanged: 0/0
 18321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18322 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;Total ram usage:        5 bytes
 18327 ;; Hardware stack levels used:    1
 18328 ;; Hardware stack levels required when called:    3
 18329 ;; This function calls:
 18330 ;;		Nothing
 18331 ;; This function is called by:
 18332 ;;		_Division
 18333 ;; This function uses a non-reentrant model
 18334 ;;
 18335                           
 18336                           
 18337                           ;psect for function ___lbdiv
 18338  1072                     ___lbdiv:	
 18339                           
 18340                           ;incstack = 0
 18341                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18342                           ;___lbdiv@dividend stored from wreg
 18343  1072  00F4               	movwf	___lbdiv@dividend
 18344  1073  01F6               	clrf	___lbdiv@quotient
 18345  1074  0872               	movf	___lbdiv@divisor,w
 18346  1075  1903               	btfsc	3,2
 18347  1076  2891               	goto	l8829
 18348  1077  01F5               	clrf	___lbdiv@counter
 18349  1078  0AF5               	incf	___lbdiv@counter,f
 18350  1079                     l8817:	
 18351  1079  1BF2               	btfsc	___lbdiv@divisor,7
 18352  107A  2882               	goto	l8819
 18353  107B  1003               	clrc
 18354  107C  0DF2               	rlf	___lbdiv@divisor,f
 18355  107D  3001               	movlw	1
 18356  107E  00F3               	movwf	??___lbdiv
 18357  107F  0873               	movf	??___lbdiv,w
 18358  1080  07F5               	addwf	___lbdiv@counter,f
 18359  1081  2879               	goto	l8817
 18360  1082                     l8819:	
 18361  1082  1003               	clrc
 18362  1083  0DF6               	rlf	___lbdiv@quotient,f
 18363  1084  0872               	movf	___lbdiv@divisor,w
 18364  1085  0274               	subwf	___lbdiv@dividend,w
 18365  1086  1C03               	skipc
 18366  1087  288C               	goto	L11
 18367  1088  0872               	movf	___lbdiv@divisor,w
 18368  1089  02F4               	subwf	___lbdiv@dividend,f
 18369  108A  1476               	bsf	___lbdiv@quotient,0
 18370  108B  1003               	clrc
 18371  108C                     L11:	
 18372  108C  0CF2               	rrf	___lbdiv@divisor,f
 18373  108D  3001               	movlw	1
 18374  108E  02F5               	subwf	___lbdiv@counter,f
 18375  108F  1D03               	btfss	3,2
 18376  1090  2882               	goto	l8819
 18377  1091                     l8829:	
 18378  1091  0876               	movf	___lbdiv@quotient,w
 18379  1092  0008               	return
 18380  1093                     __end_of___lbdiv:	
 18381                           
 18382                           	psect	text132
 18383  1B36                     __ptext132:	
 18384 ;; *************** function _DelayOff_Main *****************
 18385 ;; Defined at:
 18386 ;;		line 41 in file "../src/DelayOff_B1.c"
 18387 ;; Parameters:    Size  Location     Type
 18388 ;;		None
 18389 ;; Auto vars:     Size  Location     Type
 18390 ;;		None
 18391 ;; Return value:  Size  Location     Type
 18392 ;;		None               void
 18393 ;; Registers used:
 18394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18395 ;; Tracked objects:
 18396 ;;		On entry : 0/0
 18397 ;;		On exit  : 0/0
 18398 ;;		Unchanged: 0/0
 18399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18404 ;;Total ram usage:        0 bytes
 18405 ;; Hardware stack levels used:    1
 18406 ;; Hardware stack levels required when called:    7
 18407 ;; This function calls:
 18408 ;;		_DlyOff_Main
 18409 ;; This function is called by:
 18410 ;;		_main
 18411 ;; This function uses a non-reentrant model
 18412 ;;
 18413                           
 18414                           
 18415                           ;psect for function _DelayOff_Main
 18416  1B36                     _DelayOff_Main:	
 18417                           
 18418                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18419                           
 18420                           ;incstack = 0
 18421                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18422  1B36  3001               	movlw	1
 18423  1B37  318A  22F7         	fcall	_DlyOff_Main
 18424  1B39  0008               	return
 18425  1B3A                     __end_of_DelayOff_Main:	
 18426                           
 18427                           	psect	text133
 18428  0AF7                     __ptext133:	
 18429 ;; *************** function _DlyOff_Main *****************
 18430 ;; Defined at:
 18431 ;;		line 61 in file "../src/DelayOff_B1.c"
 18432 ;; Parameters:    Size  Location     Type
 18433 ;;  sw              1    wreg     unsigned char 
 18434 ;; Auto vars:     Size  Location     Type
 18435 ;;  sw              1   63[BANK0 ] unsigned char 
 18436 ;; Return value:  Size  Location     Type
 18437 ;;		None               void
 18438 ;; Registers used:
 18439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18440 ;; Tracked objects:
 18441 ;;		On entry : 0/0
 18442 ;;		On exit  : 0/0
 18443 ;;		Unchanged: 0/0
 18444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18448 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18449 ;;Total ram usage:        3 bytes
 18450 ;; Hardware stack levels used:    1
 18451 ;; Hardware stack levels required when called:    6
 18452 ;; This function calls:
 18453 ;;		_DelayOffPointSelect
 18454 ;;		_getDimmerLights_Status
 18455 ;;		_setDimmerLights_SwOff
 18456 ;;		_setDimmerLights_SwOn
 18457 ;;		_setProductData
 18458 ;; This function is called by:
 18459 ;;		_DelayOff_Main
 18460 ;; This function uses a non-reentrant model
 18461 ;;
 18462                           
 18463                           
 18464                           ;psect for function _DlyOff_Main
 18465  0AF7                     _DlyOff_Main:	
 18466                           
 18467                           ;incstack = 0
 18468                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18469                           ;DlyOff_Main@sw stored from wreg
 18470  0AF7  0020               	movlb	0	; select bank0
 18471  0AF8  00DF               	movwf	DlyOff_Main@sw
 18472                           
 18473                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18474  0AF9  085F               	movf	DlyOff_Main@sw,w
 18475  0AFA  319B  23ED  318A   	fcall	_DelayOffPointSelect
 18476                           
 18477                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18478  0AFD  0021               	movlb	1	; select bank1
 18479  0AFE  085A               	movf	_DelayOff^(0+128),w
 18480  0AFF  0086               	movwf	6
 18481  0B00  3001               	movlw	1	; select bank2/3
 18482  0B01  0087               	movwf	7
 18483  0B02  1C81               	btfss	1,1
 18484  0B03  0008               	return
 18485                           
 18486                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18487  0B04  085A               	movf	_DelayOff^(0+128),w
 18488  0B05  3E02               	addlw	2
 18489  0B06  0086               	movwf	6
 18490  0B07  3001               	movlw	1	; select bank2/3
 18491  0B08  0087               	movwf	7
 18492  0B09  3001               	movlw	1
 18493  0B0A  0781               	addwf	1,f
 18494  0B0B  3141               	addfsr 1,1
 18495  0B0C  1803               	skipnc
 18496  0B0D  0A81               	incf	1,f
 18497                           
 18498                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 18499  0B0E  085A               	movf	_DelayOff^(0+128),w
 18500  0B0F  3E02               	addlw	2
 18501  0B10  0086               	movwf	6
 18502  0B11  3001               	movlw	1	; select bank2/3
 18503  0B12  0087               	movwf	7
 18504  0B13  3F40               	moviw [0]fsr1
 18505  0B14  0020               	movlb	0	; select bank0
 18506  0B15  00DD               	movwf	??_DlyOff_Main
 18507  0B16  3F41               	moviw [1]fsr1
 18508  0B17  00DE               	movwf	??_DlyOff_Main+1
 18509  0B18  3009               	movlw	9
 18510  0B19  025E               	subwf	??_DlyOff_Main+1,w
 18511  0B1A  30C4               	movlw	196
 18512  0B1B  1903               	skipnz
 18513  0B1C  025D               	subwf	??_DlyOff_Main,w
 18514  0B1D  1C03               	skipc
 18515  0B1E  0008               	return
 18516                           
 18517                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18518  0B1F  0021               	movlb	1	; select bank1
 18519  0B20  085A               	movf	_DelayOff^(0+128),w
 18520  0B21  3E02               	addlw	2
 18521  0B22  0086               	movwf	6
 18522  0B23  3001               	movlw	1	; select bank2/3
 18523  0B24  0087               	movwf	7
 18524  0B25  3000               	movlw	0
 18525  0B26  3FC0               	movwi [0]fsr1
 18526  0B27  3FC1               	movwi [1]fsr1
 18527                           
 18528                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18529  0B28  3001               	movlw	1
 18530  0B29  0020               	movlb	0	; select bank0
 18531  0B2A  00DD               	movwf	??_DlyOff_Main
 18532  0B2B  0021               	movlb	1	; select bank1
 18533  0B2C  085A               	movf	_DelayOff^(0+128),w
 18534  0B2D  3E04               	addlw	4
 18535  0B2E  0086               	movwf	6
 18536  0B2F  3001               	movlw	1	; select bank2/3
 18537  0B30  0087               	movwf	7
 18538  0B31  0020               	movlb	0	; select bank0
 18539  0B32  085D               	movf	??_DlyOff_Main,w
 18540  0B33  0781               	addwf	1,f
 18541                           
 18542                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18543  0B34  0021               	movlb	1	; select bank1
 18544  0B35  085A               	movf	_DelayOff^(0+128),w
 18545  0B36  3E04               	addlw	4
 18546  0B37  0086               	movwf	6
 18547  0B38  3001               	movlw	1	; select bank2/3
 18548  0B39  0087               	movwf	7
 18549  0B3A  0A5A               	incf	_DelayOff^(0+128),w
 18550  0B3B  0084               	movwf	4
 18551  0B3C  3001               	movlw	1	; select bank2/3
 18552  0B3D  0085               	movwf	5
 18553  0B3E  0800               	movf	0,w
 18554  0B3F  0201               	subwf	1,w
 18555  0B40  1C03               	skipc
 18556  0B41  0008               	return
 18557                           
 18558                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18559  0B42  085A               	movf	_DelayOff^(0+128),w
 18560  0B43  3E04               	addlw	4
 18561  0B44  0086               	movwf	6
 18562  0B45  3001               	movlw	1	; select bank2/3
 18563  0B46  0087               	movwf	7
 18564  0B47  0181               	clrf	1
 18565                           
 18566                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18567  0B48  085A               	movf	_DelayOff^(0+128),w
 18568  0B49  0086               	movwf	6
 18569  0B4A  3001               	movlw	1	; select bank2/3
 18570  0B4B  0087               	movwf	7
 18571  0B4C  1081               	bcf	1,1
 18572                           
 18573                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18574  0B4D  0020               	movlb	0	; select bank0
 18575  0B4E  085F               	movf	DlyOff_Main@sw,w
 18576  0B4F  319C  24B9  318A   	fcall	_getDimmerLights_Status
 18577  0B52  3A01               	xorlw	1
 18578  0B53  1D03               	skipz
 18579  0B54  2B5F               	goto	l539
 18580                           
 18581                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18582  0B55  0020               	movlb	0	; select bank0
 18583  0B56  085F               	movf	DlyOff_Main@sw,w
 18584  0B57  3194  24F4  318A   	fcall	_setDimmerLights_SwOn
 18585                           
 18586                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18587  0B5A  0020               	movlb	0	; select bank0
 18588  0B5B  085F               	movf	DlyOff_Main@sw,w
 18589  0B5C  3192  22FB  318A   	fcall	_setDimmerLights_SwOff
 18590  0B5F                     l539:	
 18591                           
 18592                           ;DelayOff_B1.c: 78: }
 18593                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18594  0B5F  0020               	movlb	0	; select bank0
 18595  0B60  01DA               	clrf	setProductData@value
 18596  0B61  085F               	movf	DlyOff_Main@sw,w
 18597  0B62  3E1A               	addlw	26
 18598  0B63  319C  243A         	fcall	_setProductData
 18599  0B65  0008               	return
 18600  0B66                     __end_of_DlyOff_Main:	
 18601                           
 18602                           	psect	text134
 18603  1C3A                     __ptext134:	
 18604 ;; *************** function _setProductData *****************
 18605 ;; Defined at:
 18606 ;;		line 651 in file "../src/Main_B1.c"
 18607 ;; Parameters:    Size  Location     Type
 18608 ;;  address         1    wreg     unsigned char 
 18609 ;;  value           1   58[BANK0 ] unsigned char 
 18610 ;; Auto vars:     Size  Location     Type
 18611 ;;  address         1   60[BANK0 ] unsigned char 
 18612 ;; Return value:  Size  Location     Type
 18613 ;;		None               void
 18614 ;; Registers used:
 18615 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18616 ;; Tracked objects:
 18617 ;;		On entry : 0/0
 18618 ;;		On exit  : 0/0
 18619 ;;		Unchanged: 0/0
 18620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18621 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18624 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18625 ;;Total ram usage:        3 bytes
 18626 ;; Hardware stack levels used:    1
 18627 ;; Hardware stack levels required when called:    3
 18628 ;; This function calls:
 18629 ;;		Nothing
 18630 ;; This function is called by:
 18631 ;;		_DlyOff_Main
 18632 ;;		_setDelayOff_GO
 18633 ;;		_setDimmerLights_OnOff
 18634 ;;		_setDimmerLights_Dimming
 18635 ;;		_setTemp_Main
 18636 ;;		_setLog_Code
 18637 ;;		_setControl_Lights_Table
 18638 ;;		_setRFSW_AdjControl
 18639 ;;		_setRF_DimmerLights
 18640 ;; This function uses a non-reentrant model
 18641 ;;
 18642                           
 18643                           
 18644                           ;psect for function _setProductData
 18645  1C3A                     _setProductData:	
 18646                           
 18647                           ;incstack = 0
 18648                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18649                           ;setProductData@address stored from wreg
 18650  1C3A  0020               	movlb	0	; select bank0
 18651  1C3B  00DC               	movwf	setProductData@address
 18652                           
 18653                           ;Main_B1.c: 652: _product.Data[address] = value;
 18654  1C3C  085A               	movf	setProductData@value,w
 18655  1C3D  00DB               	movwf	??_setProductData
 18656  1C3E  085C               	movf	setProductData@address,w
 18657  1C3F  3E20               	addlw	__product& (0+255)
 18658  1C40  0086               	movwf	6
 18659  1C41  3002               	movlw	2	; select bank4/5
 18660  1C42  0087               	movwf	7
 18661  1C43  085B               	movf	??_setProductData,w
 18662  1C44  0081               	movwf	1
 18663  1C45  0008               	return
 18664  1C46                     __end_of_setProductData:	
 18665                           
 18666                           	psect	text135
 18667  14F4                     __ptext135:	
 18668 ;; *************** function _setDimmerLights_SwOn *****************
 18669 ;; Defined at:
 18670 ;;		line 731 in file "../src/Dimmer_B1.c"
 18671 ;; Parameters:    Size  Location     Type
 18672 ;;  sw              1    wreg     unsigned char 
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;  sw              1    8[BANK0 ] unsigned char 
 18675 ;;  dimmingStatu    1    7[BANK0 ] unsigned char 
 18676 ;;  idle            1    6[BANK0 ] unsigned char 
 18677 ;; Return value:  Size  Location     Type
 18678 ;;		None               void
 18679 ;; Registers used:
 18680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18681 ;; Tracked objects:
 18682 ;;		On entry : 0/0
 18683 ;;		On exit  : 0/0
 18684 ;;		Unchanged: 0/0
 18685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18689 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18690 ;;Total ram usage:        4 bytes
 18691 ;; Hardware stack levels used:    1
 18692 ;; Hardware stack levels required when called:    5
 18693 ;; This function calls:
 18694 ;;		_DimmerLights_SelectPointer
 18695 ;;		_getDimmerIntr_Dimming_Sw
 18696 ;;		_setBuz
 18697 ;; This function is called by:
 18698 ;;		_DlyOff_Main
 18699 ;;		_setControl_Lights_Table
 18700 ;;		_setRFSW_Control
 18701 ;;		_setRFSW_AdjControl
 18702 ;;		_setSw_Main
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           
 18707                           ;psect for function _setDimmerLights_SwOn
 18708  14F4                     _setDimmerLights_SwOn:	
 18709                           
 18710                           ;incstack = 0
 18711                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18712                           ;setDimmerLights_SwOn@sw stored from wreg
 18713  14F4  0020               	movlb	0	; select bank0
 18714  14F5  00A8               	movwf	setDimmerLights_SwOn@sw
 18715                           
 18716                           ;Dimmer_B1.c: 732: char idle = 0;
 18717  14F6  01A6               	clrf	setDimmerLights_SwOn@idle
 18718                           
 18719                           ;Dimmer_B1.c: 734: char dimmingStatus = 0;
 18720  14F7  01A7               	clrf	setDimmerLights_SwOn@dimmingStatus
 18721                           
 18722                           ;Dimmer_B1.c: 735: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 18723  14F8  0828               	movf	setDimmerLights_SwOn@sw,w
 18724  14F9  319C  2476  3194   	fcall	_getDimmerIntr_Dimming_Sw
 18725  14FC  00F9               	movwf	??_setDimmerLights_SwOn
 18726  14FD  0879               	movf	??_setDimmerLights_SwOn,w
 18727  14FE  0020               	movlb	0	; select bank0
 18728  14FF  00A7               	movwf	setDimmerLights_SwOn@dimmingStatus
 18729                           
 18730                           ;Dimmer_B1.c: 762: DimmerLights_SelectPointer(sw);
 18731  1500  0828               	movf	setDimmerLights_SwOn@sw,w
 18732  1501  319B  23F8  3194   	fcall	_DimmerLights_SelectPointer
 18733                           
 18734                           ;Dimmer_B1.c: 763: if (idle == 0) {
 18735  1504  0020               	movlb	0	; select bank0
 18736  1505  08A6               	movf	setDimmerLights_SwOn@idle,f
 18737  1506  1D03               	skipz
 18738  1507  0008               	return
 18739                           
 18740                           ;Dimmer_B1.c: 765: if (dimmingStatus == 0) {
 18741  1508  08A7               	movf	setDimmerLights_SwOn@dimmingStatus,f
 18742  1509  1D03               	skipz
 18743  150A  2D2C               	goto	l8795
 18744                           
 18745                           ;Dimmer_B1.c: 766: DimmerLights->SwFlag = 1;
 18746  150B  086C               	movf	_DimmerLights,w
 18747  150C  0086               	movwf	6
 18748  150D  3001               	movlw	1	; select bank2/3
 18749  150E  0087               	movwf	7
 18750  150F  1401               	bsf	1,0
 18751                           
 18752                           ;Dimmer_B1.c: 767: if (DimmerLights->Status == 0) {
 18753  1510  0A6C               	incf	_DimmerLights,w
 18754  1511  0086               	movwf	6
 18755  1512  3001               	movlw	1	; select bank2/3
 18756  1513  0087               	movwf	7
 18757  1514  1801               	btfsc	1,0
 18758  1515  2D26               	goto	l8793
 18759                           
 18760                           ;Dimmer_B1.c: 768: DimmerLights->Status = 1;
 18761  1516  0A6C               	incf	_DimmerLights,w
 18762  1517  0086               	movwf	6
 18763  1518  3001               	movlw	1	; select bank2/3
 18764  1519  0087               	movwf	7
 18765  151A  1401               	bsf	1,0
 18766                           
 18767                           ;Dimmer_B1.c: 771: DimmerLights->Trigger = 1;
 18768  151B  086C               	movf	_DimmerLights,w
 18769  151C  0086               	movwf	6
 18770  151D  3001               	movlw	1	; select bank2/3
 18771  151E  0087               	movwf	7
 18772  151F  1481               	bsf	1,1
 18773                           
 18774                           ;Dimmer_B1.c: 772: DimmerLights->Switch = 1;
 18775  1520  086C               	movf	_DimmerLights,w
 18776  1521  0086               	movwf	6
 18777  1522  3001               	movlw	1	; select bank2/3
 18778  1523  0087               	movwf	7
 18779  1524  1501               	bsf	1,2
 18780                           
 18781                           ;Dimmer_B1.c: 779: } else {
 18782  1525  2D36               	goto	l8797
 18783  1526                     l8793:	
 18784                           
 18785                           ;Dimmer_B1.c: 780: DimmerLights->Status = 0;
 18786  1526  0A6C               	incf	_DimmerLights,w
 18787  1527  0086               	movwf	6
 18788  1528  3001               	movlw	1	; select bank2/3
 18789  1529  0087               	movwf	7
 18790  152A  1001               	bcf	1,0
 18791                           
 18792                           ;Dimmer_B1.c: 781: }
 18793                           ;Dimmer_B1.c: 782: } else {
 18794  152B  2D36               	goto	l8797
 18795  152C                     l8795:	
 18796                           
 18797                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 1;
 18798  152C  086C               	movf	_DimmerLights,w
 18799  152D  0086               	movwf	6
 18800  152E  3001               	movlw	1	; select bank2/3
 18801  152F  0087               	movwf	7
 18802  1530  1601               	bsf	1,4
 18803                           
 18804                           ;Dimmer_B1.c: 784: DimmerLights->DimmingSwitch = 0;
 18805  1531  086C               	movf	_DimmerLights,w
 18806  1532  0086               	movwf	6
 18807  1533  3001               	movlw	1	; select bank2/3
 18808  1534  0087               	movwf	7
 18809  1535  1281               	bcf	1,5
 18810  1536                     l8797:	
 18811                           
 18812                           ;Dimmer_B1.c: 785: }
 18813                           ;Dimmer_B1.c: 786: setBuz(1, 100);
 18814  1536  3064               	movlw	100
 18815  1537  00A4               	movwf	setBuz@time
 18816  1538  3000               	movlw	0
 18817  1539  00A5               	movwf	setBuz@time+1
 18818  153A  3001               	movlw	1
 18819  153B  3195  253E         	fcall	_setBuz
 18820  153D  0008               	return
 18821  153E                     __end_of_setDimmerLights_SwOn:	
 18822                           
 18823                           	psect	text136
 18824  153E                     __ptext136:	
 18825 ;; *************** function _setBuz *****************
 18826 ;; Defined at:
 18827 ;;		line 22 in file "../src/Buzzer_B1.c"
 18828 ;; Parameters:    Size  Location     Type
 18829 ;;  count           1    wreg     unsigned char 
 18830 ;;  time            2    4[BANK0 ] int 
 18831 ;; Auto vars:     Size  Location     Type
 18832 ;;  count           1    8[COMMON] unsigned char 
 18833 ;; Return value:  Size  Location     Type
 18834 ;;		None               void
 18835 ;; Registers used:
 18836 ;;		wreg, status,2, status,0, pclath, cstack
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : 0/0
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18845 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18846 ;;Total ram usage:        4 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; Hardware stack levels required when called:    4
 18849 ;; This function calls:
 18850 ;;		___awdiv
 18851 ;; This function is called by:
 18852 ;;		_setDimmerLights_SwOn
 18853 ;;		_setDimmerLights_Dimming
 18854 ;;		_my_MainTimer
 18855 ;;		_Exception_Main
 18856 ;;		_setTemp_Main
 18857 ;;		_setLog_Code
 18858 ;;		_setRFSW_Control
 18859 ;;		_setRFSW_AdjControl
 18860 ;;		_setSw_Main
 18861 ;; This function uses a non-reentrant model
 18862 ;;
 18863                           
 18864                           
 18865                           ;psect for function _setBuz
 18866  153E                     _setBuz:	
 18867                           
 18868                           ;incstack = 0
 18869                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18870                           ;setBuz@count stored from wreg
 18871  153E  00F8               	movwf	setBuz@count
 18872                           
 18873                           ;Buzzer_B1.c: 23: time /= 20;
 18874  153F  3014               	movlw	20
 18875  1540  00F2               	movwf	___awdiv@divisor
 18876  1541  3000               	movlw	0
 18877  1542  00F3               	movwf	___awdiv@divisor+1
 18878  1543  0020               	movlb	0	; select bank0
 18879  1544  0825               	movf	setBuz@time+1,w
 18880  1545  01F5               	clrf	___awdiv@dividend+1
 18881  1546  07F5               	addwf	___awdiv@dividend+1,f
 18882  1547  0824               	movf	setBuz@time,w
 18883  1548  01F4               	clrf	___awdiv@dividend
 18884  1549  07F4               	addwf	___awdiv@dividend,f
 18885  154A  3195  25E4  3195   	fcall	___awdiv
 18886  154D  0873               	movf	?___awdiv+1,w
 18887  154E  0020               	movlb	0	; select bank0
 18888  154F  01A5               	clrf	setBuz@time+1
 18889  1550  07A5               	addwf	setBuz@time+1,f
 18890  1551  0872               	movf	?___awdiv,w
 18891  1552  01A4               	clrf	setBuz@time
 18892  1553  07A4               	addwf	setBuz@time,f
 18893                           
 18894                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18895  1554  0021               	movlb	1	; select bank1
 18896  1555  1C4C               	btfss	_Buz1^(0+128),0
 18897  1556  0008               	return
 18898                           
 18899                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18900  1557  18CC               	btfsc	_Buz1^(0+128),1
 18901  1558  2D6D               	goto	l88
 18902                           
 18903                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18904  1559  14CC               	bsf	_Buz1^(0+128),1
 18905                           
 18906                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18907  155A  01CD               	clrf	(_Buz1^(0+128)+1)
 18908  155B  01CE               	clrf	((_Buz1+1)^(0+128)+1)
 18909                           
 18910                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18911  155C  0878               	movf	setBuz@count,w
 18912  155D  00F7               	movwf	??_setBuz
 18913  155E  0877               	movf	??_setBuz,w
 18914  155F  00CF               	movwf	(_Buz1^(0+128)+3)
 18915                           
 18916                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18917  1560  0020               	movlb	0	; select bank0
 18918  1561  0825               	movf	setBuz@time+1,w
 18919  1562  0021               	movlb	1	; select bank1
 18920  1563  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 18921  1564  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 18922  1565  0020               	movlb	0	; select bank0
 18923  1566  0824               	movf	setBuz@time,w
 18924  1567  0021               	movlb	1	; select bank1
 18925  1568  01D2               	clrf	(_Buz1^(0+128)+6)
 18926  1569  07D2               	addwf	(_Buz1^(0+128)+6),f
 18927                           
 18928                           ;Buzzer_B1.c: 30: RB3 = 1;
 18929  156A  0020               	movlb	0	; select bank0
 18930  156B  158D               	bsf	13,3	;volatile
 18931                           
 18932                           ;Buzzer_B1.c: 31: } else {
 18933  156C  0008               	return
 18934  156D                     l88:	
 18935                           
 18936                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18937  156D  19CC               	btfsc	_Buz1^(0+128),3
 18938  156E  2D7F               	goto	l90
 18939                           
 18940                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18941  156F  15CC               	bsf	_Buz1^(0+128),3
 18942                           
 18943                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18944  1570  0878               	movf	setBuz@count,w
 18945  1571  00F7               	movwf	??_setBuz
 18946  1572  0877               	movf	??_setBuz,w
 18947  1573  00D0               	movwf	(_Buz1^(0+128)+4)
 18948                           
 18949                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18950  1574  0020               	movlb	0	; select bank0
 18951  1575  0825               	movf	setBuz@time+1,w
 18952  1576  0021               	movlb	1	; select bank1
 18953  1577  01D5               	clrf	((_Buz1+1)^(0+128)+8)
 18954  1578  07D5               	addwf	((_Buz1+1)^(0+128)+8),f
 18955  1579  0020               	movlb	0	; select bank0
 18956  157A  0824               	movf	setBuz@time,w
 18957  157B  0021               	movlb	1	; select bank1
 18958  157C  01D4               	clrf	(_Buz1^(0+128)+8)
 18959  157D  07D4               	addwf	(_Buz1^(0+128)+8),f
 18960                           
 18961                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18962  157E  0008               	return
 18963  157F                     l90:	
 18964  157F  1A4C               	btfsc	_Buz1^(0+128),4
 18965  1580  0008               	return
 18966                           
 18967                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18968  1581  164C               	bsf	_Buz1^(0+128),4
 18969                           
 18970                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18971  1582  0878               	movf	setBuz@count,w
 18972  1583  00F7               	movwf	??_setBuz
 18973  1584  0877               	movf	??_setBuz,w
 18974  1585  00D1               	movwf	(_Buz1^(0+128)+5)
 18975                           
 18976                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18977  1586  0020               	movlb	0	; select bank0
 18978  1587  0825               	movf	setBuz@time+1,w
 18979  1588  0021               	movlb	1	; select bank1
 18980  1589  01D7               	clrf	((_Buz1+1)^(0+128)+10)
 18981  158A  07D7               	addwf	((_Buz1+1)^(0+128)+10),f
 18982  158B  0020               	movlb	0	; select bank0
 18983  158C  0824               	movf	setBuz@time,w
 18984  158D  0021               	movlb	1	; select bank1
 18985  158E  01D6               	clrf	(_Buz1^(0+128)+10)
 18986  158F  07D6               	addwf	(_Buz1^(0+128)+10),f
 18987  1590  0008               	return
 18988  1591                     __end_of_setBuz:	
 18989                           
 18990                           	psect	text137
 18991  15E4                     __ptext137:	
 18992 ;; *************** function ___awdiv *****************
 18993 ;; Defined at:
 18994 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18995 ;; Parameters:    Size  Location     Type
 18996 ;;  divisor         2    2[COMMON] int 
 18997 ;;  dividend        2    4[COMMON] int 
 18998 ;; Auto vars:     Size  Location     Type
 18999 ;;  quotient        2    2[BANK0 ] int 
 19000 ;;  sign            1    1[BANK0 ] unsigned char 
 19001 ;;  counter         1    0[BANK0 ] unsigned char 
 19002 ;; Return value:  Size  Location     Type
 19003 ;;                  2    2[COMMON] int 
 19004 ;; Registers used:
 19005 ;;		wreg, status,2, status,0
 19006 ;; Tracked objects:
 19007 ;;		On entry : 0/0
 19008 ;;		On exit  : 0/0
 19009 ;;		Unchanged: 0/0
 19010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19012 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19013 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19014 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19015 ;;Total ram usage:        9 bytes
 19016 ;; Hardware stack levels used:    1
 19017 ;; Hardware stack levels required when called:    3
 19018 ;; This function calls:
 19019 ;;		Nothing
 19020 ;; This function is called by:
 19021 ;;		_setBuz
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           
 19026                           ;psect for function ___awdiv
 19027  15E4                     ___awdiv:	
 19028                           
 19029                           ;incstack = 0
 19030                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19031  15E4  0020               	movlb	0	; select bank0
 19032  15E5  01A1               	clrf	___awdiv@sign
 19033  15E6  1FF3               	btfss	___awdiv@divisor+1,7
 19034  15E7  2DEF               	goto	l8679
 19035  15E8  09F2               	comf	___awdiv@divisor,f
 19036  15E9  09F3               	comf	___awdiv@divisor+1,f
 19037  15EA  0AF2               	incf	___awdiv@divisor,f
 19038  15EB  1903               	skipnz
 19039  15EC  0AF3               	incf	___awdiv@divisor+1,f
 19040  15ED  01A1               	clrf	___awdiv@sign
 19041  15EE  0AA1               	incf	___awdiv@sign,f
 19042  15EF                     l8679:	
 19043  15EF  1FF5               	btfss	___awdiv@dividend+1,7
 19044  15F0  2DFA               	goto	l8685
 19045  15F1  09F4               	comf	___awdiv@dividend,f
 19046  15F2  09F5               	comf	___awdiv@dividend+1,f
 19047  15F3  0AF4               	incf	___awdiv@dividend,f
 19048  15F4  1903               	skipnz
 19049  15F5  0AF5               	incf	___awdiv@dividend+1,f
 19050  15F6  3001               	movlw	1
 19051  15F7  00F6               	movwf	??___awdiv
 19052  15F8  0876               	movf	??___awdiv,w
 19053  15F9  06A1               	xorwf	___awdiv@sign,f
 19054  15FA                     l8685:	
 19055  15FA  01A2               	clrf	___awdiv@quotient
 19056  15FB  01A3               	clrf	___awdiv@quotient+1
 19057  15FC  0873               	movf	___awdiv@divisor+1,w
 19058  15FD  0472               	iorwf	___awdiv@divisor,w
 19059  15FE  1903               	skipnz
 19060  15FF  2E29               	goto	l8707
 19061  1600  01A0               	clrf	___awdiv@counter
 19062  1601  0AA0               	incf	___awdiv@counter,f
 19063  1602                     l8695:	
 19064  1602  1BF3               	btfsc	___awdiv@divisor+1,7
 19065  1603  2E0E               	goto	l8697
 19066  1604  3001               	movlw	1
 19067  1605                     u8885:	
 19068  1605  35F2               	lslf	___awdiv@divisor,f
 19069  1606  0DF3               	rlf	___awdiv@divisor+1,f
 19070  1607  0B89               	decfsz	9,f
 19071  1608  2E05               	goto	u8885
 19072  1609  3001               	movlw	1
 19073  160A  00F6               	movwf	??___awdiv
 19074  160B  0876               	movf	??___awdiv,w
 19075  160C  07A0               	addwf	___awdiv@counter,f
 19076  160D  2E02               	goto	l8695
 19077  160E                     l8697:	
 19078  160E  3001               	movlw	1
 19079  160F                     u8905:	
 19080  160F  35A2               	lslf	___awdiv@quotient,f
 19081  1610  0DA3               	rlf	___awdiv@quotient+1,f
 19082  1611  0B89               	decfsz	9,f
 19083  1612  2E0F               	goto	u8905
 19084  1613  0873               	movf	___awdiv@divisor+1,w
 19085  1614  0275               	subwf	___awdiv@dividend+1,w
 19086  1615  1D03               	skipz
 19087  1616  2E19               	goto	u8915
 19088  1617  0872               	movf	___awdiv@divisor,w
 19089  1618  0274               	subwf	___awdiv@dividend,w
 19090  1619                     u8915:	
 19091  1619  1C03               	skipc
 19092  161A  2E20               	goto	l8703
 19093  161B  0872               	movf	___awdiv@divisor,w
 19094  161C  02F4               	subwf	___awdiv@dividend,f
 19095  161D  0873               	movf	___awdiv@divisor+1,w
 19096  161E  3BF5               	subwfb	___awdiv@dividend+1,f
 19097  161F  1422               	bsf	___awdiv@quotient,0
 19098  1620                     l8703:	
 19099  1620  3001               	movlw	1
 19100  1621                     u8925:	
 19101  1621  36F3               	lsrf	___awdiv@divisor+1,f
 19102  1622  0CF2               	rrf	___awdiv@divisor,f
 19103  1623  0B89               	decfsz	9,f
 19104  1624  2E21               	goto	u8925
 19105  1625  3001               	movlw	1
 19106  1626  02A0               	subwf	___awdiv@counter,f
 19107  1627  1D03               	btfss	3,2
 19108  1628  2E0E               	goto	l8697
 19109  1629                     l8707:	
 19110  1629  0821               	movf	___awdiv@sign,w
 19111  162A  1903               	btfsc	3,2
 19112  162B  2E31               	goto	l8711
 19113  162C  09A2               	comf	___awdiv@quotient,f
 19114  162D  09A3               	comf	___awdiv@quotient+1,f
 19115  162E  0AA2               	incf	___awdiv@quotient,f
 19116  162F  1903               	skipnz
 19117  1630  0AA3               	incf	___awdiv@quotient+1,f
 19118  1631                     l8711:	
 19119  1631  0823               	movf	___awdiv@quotient+1,w
 19120  1632  01F3               	clrf	?___awdiv+1
 19121  1633  07F3               	addwf	?___awdiv+1,f
 19122  1634  0822               	movf	___awdiv@quotient,w
 19123  1635  01F2               	clrf	?___awdiv
 19124  1636  07F2               	addwf	?___awdiv,f
 19125  1637  0008               	return
 19126  1638                     __end_of___awdiv:	
 19127                           
 19128                           	psect	text138
 19129  1C76                     __ptext138:	
 19130 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 19131 ;; Defined at:
 19132 ;;		line 241 in file "../src/Dimmer_B1.c"
 19133 ;; Parameters:    Size  Location     Type
 19134 ;;  lights          1    wreg     unsigned char 
 19135 ;; Auto vars:     Size  Location     Type
 19136 ;;  lights          1    2[COMMON] unsigned char 
 19137 ;;  status          1    3[COMMON] unsigned char 
 19138 ;; Return value:  Size  Location     Type
 19139 ;;                  1    wreg      unsigned char 
 19140 ;; Registers used:
 19141 ;;		wreg, status,2
 19142 ;; Tracked objects:
 19143 ;;		On entry : 0/0
 19144 ;;		On exit  : 0/0
 19145 ;;		Unchanged: 0/0
 19146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19151 ;;Total ram usage:        2 bytes
 19152 ;; Hardware stack levels used:    1
 19153 ;; Hardware stack levels required when called:    3
 19154 ;; This function calls:
 19155 ;;		Nothing
 19156 ;; This function is called by:
 19157 ;;		_setDimmerLights_SwOn
 19158 ;;		_setRF_AdjControl
 19159 ;; This function uses a non-reentrant model
 19160 ;;
 19161                           
 19162                           
 19163                           ;psect for function _getDimmerIntr_Dimming_Sw
 19164  1C76                     _getDimmerIntr_Dimming_Sw:	
 19165                           
 19166                           ;incstack = 0
 19167                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 19168                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 19169  1C76  00F2               	movwf	getDimmerIntr_Dimming_Sw@lights
 19170                           
 19171                           ;Dimmer_B1.c: 242: char status = 0;
 19172  1C77  01F3               	clrf	getDimmerIntr_Dimming_Sw@status
 19173                           
 19174                           ;Dimmer_B1.c: 244: if (lights == 1) {
 19175  1C78  0872               	movf	getDimmerIntr_Dimming_Sw@lights,w
 19176  1C79  3A01               	xorlw	1
 19177  1C7A  1D03               	skipz
 19178  1C7B  2C81               	goto	l6041
 19179                           
 19180                           ;Dimmer_B1.c: 245: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 19181  1C7C  3000               	movlw	0
 19182  1C7D  0021               	movlb	1	; select bank1
 19183  1C7E  1A20               	btfsc	_DimmerIntr1^(0+128),4
 19184  1C7F  3001               	movlw	1
 19185  1C80  00F3               	movwf	getDimmerIntr_Dimming_Sw@status
 19186  1C81                     l6041:	
 19187                           
 19188                           ;Dimmer_B1.c: 246: }
 19189                           ;Dimmer_B1.c: 259: return status;
 19190  1C81  0873               	movf	getDimmerIntr_Dimming_Sw@status,w
 19191  1C82  0008               	return
 19192  1C83                     __end_of_getDimmerIntr_Dimming_Sw:	
 19193                           
 19194                           	psect	text139
 19195  12FB                     __ptext139:	
 19196 ;; *************** function _setDimmerLights_SwOff *****************
 19197 ;; Defined at:
 19198 ;;		line 791 in file "../src/Dimmer_B1.c"
 19199 ;; Parameters:    Size  Location     Type
 19200 ;;  sw              1    wreg     unsigned char 
 19201 ;; Auto vars:     Size  Location     Type
 19202 ;;  sw              1    4[COMMON] unsigned char 
 19203 ;; Return value:  Size  Location     Type
 19204 ;;		None               void
 19205 ;; Registers used:
 19206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19207 ;; Tracked objects:
 19208 ;;		On entry : 0/0
 19209 ;;		On exit  : 0/0
 19210 ;;		Unchanged: 0/0
 19211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19216 ;;Total ram usage:        1 bytes
 19217 ;; Hardware stack levels used:    1
 19218 ;; Hardware stack levels required when called:    4
 19219 ;; This function calls:
 19220 ;;		_DimmerLights_SelectPointer
 19221 ;; This function is called by:
 19222 ;;		_DlyOff_Main
 19223 ;;		_Exception_Main
 19224 ;;		_setControl_Lights_Table
 19225 ;;		_setRFSW_Control
 19226 ;;		_setRFSW_AdjControl
 19227 ;;		_setSw_Main
 19228 ;; This function uses a non-reentrant model
 19229 ;;
 19230                           
 19231                           
 19232                           ;psect for function _setDimmerLights_SwOff
 19233  12FB                     _setDimmerLights_SwOff:	
 19234                           
 19235                           ;incstack = 0
 19236                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19237                           ;setDimmerLights_SwOff@sw stored from wreg
 19238  12FB  00F4               	movwf	setDimmerLights_SwOff@sw
 19239                           
 19240                           ;Dimmer_B1.c: 793: DimmerLights_SelectPointer(sw);
 19241  12FC  0874               	movf	setDimmerLights_SwOff@sw,w
 19242  12FD  319B  23F8  3192   	fcall	_DimmerLights_SelectPointer
 19243                           
 19244                           ;Dimmer_B1.c: 795: if (DimmerLights->SwFlag == 1) {
 19245  1300  0020               	movlb	0	; select bank0
 19246  1301  086C               	movf	_DimmerLights,w
 19247  1302  0086               	movwf	6
 19248  1303  3001               	movlw	1	; select bank2/3
 19249  1304  0087               	movwf	7
 19250  1305  1C01               	btfss	1,0
 19251  1306  0008               	return
 19252                           
 19253                           ;Dimmer_B1.c: 796: DimmerLights->SwFlag = 0;
 19254  1307  086C               	movf	_DimmerLights,w
 19255  1308  0086               	movwf	6
 19256  1309  3001               	movlw	1	; select bank2/3
 19257  130A  0087               	movwf	7
 19258  130B  1001               	bcf	1,0
 19259                           
 19260                           ;Dimmer_B1.c: 797: if (DimmerLights->Status == 1) {
 19261  130C  0A6C               	incf	_DimmerLights,w
 19262  130D  0086               	movwf	6
 19263  130E  3001               	movlw	1	; select bank2/3
 19264  130F  0087               	movwf	7
 19265  1310  1C01               	btfss	1,0
 19266  1311  2B28               	goto	l6355
 19267                           
 19268                           ;Dimmer_B1.c: 798: if (DimmerLights->DimmingSwFlag == 1) {
 19269  1312  086C               	movf	_DimmerLights,w
 19270  1313  0086               	movwf	6
 19271  1314  3001               	movlw	1	; select bank2/3
 19272  1315  0087               	movwf	7
 19273  1316  1D81               	btfss	1,3
 19274  1317  0008               	return
 19275                           
 19276                           ;Dimmer_B1.c: 799: DimmerLights->DimmingSwFlag = 0;
 19277  1318  086C               	movf	_DimmerLights,w
 19278  1319  0086               	movwf	6
 19279  131A  3001               	movlw	1	; select bank2/3
 19280  131B  0087               	movwf	7
 19281  131C  1181               	bcf	1,3
 19282                           
 19283                           ;Dimmer_B1.c: 801: DimmerLights->DimmingTrigger = 1;
 19284  131D  086C               	movf	_DimmerLights,w
 19285  131E  0086               	movwf	6
 19286  131F  3001               	movlw	1	; select bank2/3
 19287  1320  0087               	movwf	7
 19288  1321  1601               	bsf	1,4
 19289                           
 19290                           ;Dimmer_B1.c: 802: DimmerLights->DimmingSwitch = 0;
 19291  1322  086C               	movf	_DimmerLights,w
 19292  1323  0086               	movwf	6
 19293  1324  3001               	movlw	1	; select bank2/3
 19294  1325  0087               	movwf	7
 19295  1326  1281               	bcf	1,5
 19296                           
 19297                           ;Dimmer_B1.c: 803: }
 19298                           ;Dimmer_B1.c: 804: } else {
 19299  1327  0008               	return
 19300  1328                     l6355:	
 19301                           
 19302                           ;Dimmer_B1.c: 807: DimmerLights->Trigger = 1;
 19303  1328  086C               	movf	_DimmerLights,w
 19304  1329  0086               	movwf	6
 19305  132A  3001               	movlw	1	; select bank2/3
 19306  132B  0087               	movwf	7
 19307  132C  1481               	bsf	1,1
 19308                           
 19309                           ;Dimmer_B1.c: 808: DimmerLights->Switch = 0;
 19310  132D  086C               	movf	_DimmerLights,w
 19311  132E  0086               	movwf	6
 19312  132F  3001               	movlw	1	; select bank2/3
 19313  1330  0087               	movwf	7
 19314  1331  1101               	bcf	1,2
 19315  1332  0008               	return
 19316  1333                     __end_of_setDimmerLights_SwOff:	
 19317                           
 19318                           	psect	text140
 19319  1CB9                     __ptext140:	
 19320 ;; *************** function _getDimmerLights_Status *****************
 19321 ;; Defined at:
 19322 ;;		line 1208 in file "../src/Dimmer_B1.c"
 19323 ;; Parameters:    Size  Location     Type
 19324 ;;  lights          1    wreg     unsigned char 
 19325 ;; Auto vars:     Size  Location     Type
 19326 ;;  lights          1    4[COMMON] unsigned char 
 19327 ;;  status          1    5[COMMON] unsigned char 
 19328 ;; Return value:  Size  Location     Type
 19329 ;;                  1    wreg      unsigned char 
 19330 ;; Registers used:
 19331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19332 ;; Tracked objects:
 19333 ;;		On entry : 0/0
 19334 ;;		On exit  : 0/0
 19335 ;;		Unchanged: 0/0
 19336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19341 ;;Total ram usage:        2 bytes
 19342 ;; Hardware stack levels used:    1
 19343 ;; Hardware stack levels required when called:    4
 19344 ;; This function calls:
 19345 ;;		_DimmerLights_SelectPointer
 19346 ;; This function is called by:
 19347 ;;		_DlyOff_Main
 19348 ;;		_Exception_Main
 19349 ;;		_setControl_Lights_Table
 19350 ;;		_setRFSW_Control
 19351 ;;		_setRFSW_AdjControl
 19352 ;;		_setRF_AdjControl
 19353 ;;		_DimmerLights_AssignationDimming
 19354 ;; This function uses a non-reentrant model
 19355 ;;
 19356                           
 19357                           
 19358                           ;psect for function _getDimmerLights_Status
 19359  1CB9                     _getDimmerLights_Status:	
 19360                           
 19361                           ;incstack = 0
 19362                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19363                           ;getDimmerLights_Status@lights stored from wreg
 19364  1CB9  00F4               	movwf	getDimmerLights_Status@lights
 19365                           
 19366                           ;Dimmer_B1.c: 1209: DimmerLights_SelectPointer(lights);
 19367  1CBA  0874               	movf	getDimmerLights_Status@lights,w
 19368  1CBB  319B  23F8         	fcall	_DimmerLights_SelectPointer
 19369                           
 19370                           ;Dimmer_B1.c: 1210: char status = DimmerLights->Status == 1 ? 1 : 0;
 19371  1CBD  0020               	movlb	0	; select bank0
 19372  1CBE  0A6C               	incf	_DimmerLights,w
 19373  1CBF  0086               	movwf	6
 19374  1CC0  3001               	movlw	1	; select bank2/3
 19375  1CC1  0087               	movwf	7
 19376  1CC2  3000               	movlw	0
 19377  1CC3  1801               	btfsc	1,0
 19378  1CC4  3001               	movlw	1
 19379  1CC5  00F5               	movwf	getDimmerLights_Status@status
 19380                           
 19381                           ;Dimmer_B1.c: 1211: return status;
 19382  1CC6  0875               	movf	getDimmerLights_Status@status,w
 19383  1CC7  0008               	return
 19384  1CC8                     __end_of_getDimmerLights_Status:	
 19385                           
 19386                           	psect	text141
 19387  1BF8                     __ptext141:	
 19388 ;; *************** function _DimmerLights_SelectPointer *****************
 19389 ;; Defined at:
 19390 ;;		line 654 in file "../src/Dimmer_B1.c"
 19391 ;; Parameters:    Size  Location     Type
 19392 ;;  lights          1    wreg     unsigned char 
 19393 ;; Auto vars:     Size  Location     Type
 19394 ;;  lights          1    3[COMMON] unsigned char 
 19395 ;; Return value:  Size  Location     Type
 19396 ;;		None               void
 19397 ;; Registers used:
 19398 ;;		wreg
 19399 ;; Tracked objects:
 19400 ;;		On entry : 0/0
 19401 ;;		On exit  : 0/0
 19402 ;;		Unchanged: 0/0
 19403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19408 ;;Total ram usage:        2 bytes
 19409 ;; Hardware stack levels used:    1
 19410 ;; Hardware stack levels required when called:    3
 19411 ;; This function calls:
 19412 ;;		Nothing
 19413 ;; This function is called by:
 19414 ;;		_setDimmerLights_SwOn
 19415 ;;		_setDimmerLights_SwOff
 19416 ;;		_setDimmerLights_DimmingOn
 19417 ;;		_setDimmerLights_Main
 19418 ;;		_getDimmerLights_Status
 19419 ;;		_setDimmerLights_DimmingRun
 19420 ;;		_setRF_AdjControl
 19421 ;;		_DimmerLights_TwoPhase_Main
 19422 ;;		_setDimmerLights_Status
 19423 ;; This function uses a non-reentrant model
 19424 ;;
 19425                           
 19426                           
 19427                           ;psect for function _DimmerLights_SelectPointer
 19428  1BF8                     _DimmerLights_SelectPointer:	
 19429                           
 19430                           ;incstack = 0
 19431                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19432                           ;DimmerLights_SelectPointer@lights stored from wreg
 19433  1BF8  00F3               	movwf	DimmerLights_SelectPointer@lights
 19434                           
 19435                           ;Dimmer_B1.c: 656: if (lights == 1) {
 19436  1BF9  0873               	movf	DimmerLights_SelectPointer@lights,w
 19437  1BFA  3A01               	xorlw	1
 19438  1BFB  1D03               	skipz
 19439  1BFC  0008               	return
 19440                           
 19441                           ;Dimmer_B1.c: 657: DimmerLights = &DimmerLights1;
 19442  1BFD  3058               	movlw	_DimmerLights1& (0+255)
 19443  1BFE  00F2               	movwf	??_DimmerLights_SelectPointer
 19444  1BFF  0872               	movf	??_DimmerLights_SelectPointer,w
 19445  1C00  0020               	movlb	0	; select bank0
 19446  1C01  00EC               	movwf	_DimmerLights
 19447  1C02  0008               	return
 19448  1C03                     __end_of_DimmerLights_SelectPointer:	
 19449                           
 19450                           	psect	text142
 19451  1B32                     __ptext142:	
 19452 ;; *************** function _DelayOff_Initialization *****************
 19453 ;; Defined at:
 19454 ;;		line 26 in file "../src/DelayOff_B1.c"
 19455 ;; Parameters:    Size  Location     Type
 19456 ;;		None
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;		None
 19459 ;; Return value:  Size  Location     Type
 19460 ;;		None               void
 19461 ;; Registers used:
 19462 ;;		wreg, status,2, status,0, pclath, cstack
 19463 ;; Tracked objects:
 19464 ;;		On entry : 0/0
 19465 ;;		On exit  : 0/0
 19466 ;;		Unchanged: 0/0
 19467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19472 ;;Total ram usage:        0 bytes
 19473 ;; Hardware stack levels used:    1
 19474 ;; Hardware stack levels required when called:    5
 19475 ;; This function calls:
 19476 ;;		_DlyOff_Initialization
 19477 ;; This function is called by:
 19478 ;;		_main
 19479 ;; This function uses a non-reentrant model
 19480 ;;
 19481                           
 19482                           
 19483                           ;psect for function _DelayOff_Initialization
 19484  1B32                     _DelayOff_Initialization:	
 19485                           
 19486                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19487                           
 19488                           ;incstack = 0
 19489                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19490  1B32  3001               	movlw	1
 19491  1B33  319B  235A         	fcall	_DlyOff_Initialization
 19492  1B35  0008               	return
 19493  1B36                     __end_of_DelayOff_Initialization:	
 19494                           
 19495                           	psect	text143
 19496  1B5A                     __ptext143:	
 19497 ;; *************** function _DlyOff_Initialization *****************
 19498 ;; Defined at:
 19499 ;;		line 56 in file "../src/DelayOff_B1.c"
 19500 ;; Parameters:    Size  Location     Type
 19501 ;;  sw              1    wreg     unsigned char 
 19502 ;; Auto vars:     Size  Location     Type
 19503 ;;  sw              1    4[COMMON] unsigned char 
 19504 ;; Return value:  Size  Location     Type
 19505 ;;		None               void
 19506 ;; Registers used:
 19507 ;;		wreg, status,2, status,0, pclath, cstack
 19508 ;; Tracked objects:
 19509 ;;		On entry : 0/0
 19510 ;;		On exit  : 0/0
 19511 ;;		Unchanged: 0/0
 19512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19517 ;;Total ram usage:        1 bytes
 19518 ;; Hardware stack levels used:    1
 19519 ;; Hardware stack levels required when called:    4
 19520 ;; This function calls:
 19521 ;;		_DelayOffPointSelect
 19522 ;; This function is called by:
 19523 ;;		_DelayOff_Initialization
 19524 ;; This function uses a non-reentrant model
 19525 ;;
 19526                           
 19527                           
 19528                           ;psect for function _DlyOff_Initialization
 19529  1B5A                     _DlyOff_Initialization:	
 19530                           
 19531                           ;incstack = 0
 19532                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19533                           ;DlyOff_Initialization@sw stored from wreg
 19534  1B5A  00F4               	movwf	DlyOff_Initialization@sw
 19535                           
 19536                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19537  1B5B  0874               	movf	DlyOff_Initialization@sw,w
 19538  1B5C  319B  23ED         	fcall	_DelayOffPointSelect
 19539  1B5E  0008               	return
 19540  1B5F                     __end_of_DlyOff_Initialization:	
 19541                           
 19542                           	psect	text144
 19543  1BED                     __ptext144:	
 19544 ;; *************** function _DelayOffPointSelect *****************
 19545 ;; Defined at:
 19546 ;;		line 7 in file "../src/DelayOff_B1.c"
 19547 ;; Parameters:    Size  Location     Type
 19548 ;;  sw              1    wreg     unsigned char 
 19549 ;; Auto vars:     Size  Location     Type
 19550 ;;  sw              1    3[COMMON] unsigned char 
 19551 ;; Return value:  Size  Location     Type
 19552 ;;		None               void
 19553 ;; Registers used:
 19554 ;;		wreg
 19555 ;; Tracked objects:
 19556 ;;		On entry : 0/0
 19557 ;;		On exit  : 0/0
 19558 ;;		Unchanged: 0/0
 19559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19564 ;;Total ram usage:        2 bytes
 19565 ;; Hardware stack levels used:    1
 19566 ;; Hardware stack levels required when called:    3
 19567 ;; This function calls:
 19568 ;;		Nothing
 19569 ;; This function is called by:
 19570 ;;		_DlyOff_Initialization
 19571 ;;		_DlyOff_Main
 19572 ;;		_setDelayOff_GO
 19573 ;;		_getDelayOff_GO
 19574 ;; This function uses a non-reentrant model
 19575 ;;
 19576                           
 19577                           
 19578                           ;psect for function _DelayOffPointSelect
 19579  1BED                     _DelayOffPointSelect:	
 19580                           
 19581                           ;incstack = 0
 19582                           ; Regs used in _DelayOffPointSelect: [wreg]
 19583                           ;DelayOffPointSelect@sw stored from wreg
 19584  1BED  00F3               	movwf	DelayOffPointSelect@sw
 19585                           
 19586                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19587  1BEE  0873               	movf	DelayOffPointSelect@sw,w
 19588  1BEF  3A01               	xorlw	1
 19589  1BF0  1D03               	skipz
 19590  1BF1  0008               	return
 19591                           
 19592                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19593  1BF2  3061               	movlw	_DlySw1& (0+255)
 19594  1BF3  00F2               	movwf	??_DelayOffPointSelect
 19595  1BF4  0872               	movf	??_DelayOffPointSelect,w
 19596  1BF5  0021               	movlb	1	; select bank1
 19597  1BF6  00DA               	movwf	_DelayOff^(0+128)
 19598  1BF7  0008               	return
 19599  1BF8                     __end_of_DelayOffPointSelect:	
 19600                           
 19601                           	psect	text145
 19602  14AE                     __ptext145:	
 19603 ;; *************** function _Buzzer_Main *****************
 19604 ;; Defined at:
 19605 ;;		line 46 in file "../src/Buzzer_B1.c"
 19606 ;; Parameters:    Size  Location     Type
 19607 ;;		None
 19608 ;; Auto vars:     Size  Location     Type
 19609 ;;		None
 19610 ;; Return value:  Size  Location     Type
 19611 ;;		None               void
 19612 ;; Registers used:
 19613 ;;		wreg, status,2, status,0
 19614 ;; Tracked objects:
 19615 ;;		On entry : 0/0
 19616 ;;		On exit  : 0/0
 19617 ;;		Unchanged: 0/0
 19618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19623 ;;Total ram usage:        1 bytes
 19624 ;; Hardware stack levels used:    1
 19625 ;; Hardware stack levels required when called:    3
 19626 ;; This function calls:
 19627 ;;		Nothing
 19628 ;; This function is called by:
 19629 ;;		_main
 19630 ;; This function uses a non-reentrant model
 19631 ;;
 19632                           
 19633                           
 19634                           ;psect for function _Buzzer_Main
 19635  14AE                     _Buzzer_Main:	
 19636                           
 19637                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19638                           
 19639                           ;incstack = 0
 19640                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19641  14AE  0021               	movlb	1	; select bank1
 19642  14AF  1CCC               	btfss	_Buz1^(0+128),1
 19643  14B0  0008               	return
 19644                           
 19645                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19646  14B1  3001               	movlw	1
 19647  14B2  07CD               	addwf	(_Buz1^(0+128)+1),f
 19648  14B3  3000               	movlw	0
 19649  14B4  3DCE               	addwfc	((_Buz1+1)^(0+128)+1),f
 19650                           
 19651                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19652  14B5  0853               	movf	((_Buz1+1)^(0+128)+6),w
 19653  14B6  024E               	subwf	((_Buz1+1)^(0+128)+1),w
 19654  14B7  1D03               	skipz
 19655  14B8  2CBB               	goto	u7785
 19656  14B9  0852               	movf	(_Buz1^(0+128)+6),w
 19657  14BA  024D               	subwf	(_Buz1^(0+128)+1),w
 19658  14BB                     u7785:	
 19659  14BB  1C03               	skipc
 19660  14BC  0008               	return
 19661                           
 19662                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19663  14BD  01CD               	clrf	(_Buz1^(0+128)+1)
 19664  14BE  01CE               	clrf	((_Buz1+1)^(0+128)+1)
 19665                           
 19666                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19667  14BF  12CC               	bcf	_Buz1^(0+128),5
 19668  14C0  0020               	movlb	0	; select bank0
 19669  14C1  1D8D               	btfss	13,3	;volatile
 19670  14C2  2CC5               	goto	l7997
 19671  14C3  0021               	movlb	1	; select bank1
 19672  14C4  16CC               	bsf	_Buz1^(0+128),5
 19673  14C5                     l7997:	
 19674                           
 19675                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19676  14C5  0021               	movlb	1	; select bank1
 19677  14C6  1ACC               	btfsc	_Buz1^(0+128),5
 19678  14C7  2CED               	goto	l98
 19679                           
 19680                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19681  14C8  08CF               	movf	(_Buz1^(0+128)+3),f
 19682  14C9  1D03               	skipz
 19683  14CA  2CE9               	goto	l99
 19684                           
 19685                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19686  14CB  1DCC               	btfss	_Buz1^(0+128),3
 19687  14CC  2CD9               	goto	l100
 19688                           
 19689                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19690  14CD  11CC               	bcf	_Buz1^(0+128),3
 19691                           
 19692                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19693  14CE  0850               	movf	(_Buz1^(0+128)+4),w
 19694  14CF  00F2               	movwf	??_Buzzer_Main
 19695  14D0  0872               	movf	??_Buzzer_Main,w
 19696  14D1  00CF               	movwf	(_Buz1^(0+128)+3)
 19697                           
 19698                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19699  14D2  0855               	movf	((_Buz1+1)^(0+128)+8),w
 19700  14D3  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 19701  14D4  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 19702  14D5  0854               	movf	(_Buz1^(0+128)+8),w
 19703  14D6  01D2               	clrf	(_Buz1^(0+128)+6)
 19704  14D7  07D2               	addwf	(_Buz1^(0+128)+6),f
 19705                           
 19706                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19707  14D8  0008               	return
 19708  14D9                     l100:	
 19709  14D9  1E4C               	btfss	_Buz1^(0+128),4
 19710  14DA  2CE7               	goto	l102
 19711                           
 19712                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19713  14DB  124C               	bcf	_Buz1^(0+128),4
 19714                           
 19715                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19716  14DC  0851               	movf	(_Buz1^(0+128)+5),w
 19717  14DD  00F2               	movwf	??_Buzzer_Main
 19718  14DE  0872               	movf	??_Buzzer_Main,w
 19719  14DF  00CF               	movwf	(_Buz1^(0+128)+3)
 19720                           
 19721                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19722  14E0  0857               	movf	((_Buz1+1)^(0+128)+10),w
 19723  14E1  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 19724  14E2  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 19725  14E3  0856               	movf	(_Buz1^(0+128)+10),w
 19726  14E4  01D2               	clrf	(_Buz1^(0+128)+6)
 19727  14E5  07D2               	addwf	(_Buz1^(0+128)+6),f
 19728                           
 19729                           ;Buzzer_B1.c: 62: } else {
 19730  14E6  0008               	return
 19731  14E7                     l102:	
 19732                           
 19733                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19734  14E7  10CC               	bcf	_Buz1^(0+128),1
 19735                           
 19736                           ;Buzzer_B1.c: 64: }
 19737                           ;Buzzer_B1.c: 65: } else {
 19738  14E8  0008               	return
 19739  14E9                     l99:	
 19740                           
 19741                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19742  14E9  16CC               	bsf	_Buz1^(0+128),5
 19743                           
 19744                           ;Buzzer_B1.c: 68: RB3 = 1;
 19745  14EA  0020               	movlb	0	; select bank0
 19746  14EB  158D               	bsf	13,3	;volatile
 19747                           
 19748                           ;Buzzer_B1.c: 69: }
 19749                           ;Buzzer_B1.c: 70: } else {
 19750  14EC  0008               	return
 19751  14ED                     l98:	
 19752                           
 19753                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19754  14ED  12CC               	bcf	_Buz1^(0+128),5
 19755                           
 19756                           ;Buzzer_B1.c: 73: RB3 = 0;
 19757  14EE  0020               	movlb	0	; select bank0
 19758  14EF  118D               	bcf	13,3	;volatile
 19759                           
 19760                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19761  14F0  3001               	movlw	1
 19762  14F1  0021               	movlb	1	; select bank1
 19763  14F2  02CF               	subwf	(_Buz1^(0+128)+3),f
 19764  14F3  0008               	return
 19765  14F4                     __end_of_Buzzer_Main:	
 19766                           
 19767                           	psect	text146
 19768  1B20                     __ptext146:	
 19769 ;; *************** function _Buzzer_Initialization *****************
 19770 ;; Defined at:
 19771 ;;		line 11 in file "../src/Buzzer_B1.c"
 19772 ;; Parameters:    Size  Location     Type
 19773 ;;		None
 19774 ;; Auto vars:     Size  Location     Type
 19775 ;;		None
 19776 ;; Return value:  Size  Location     Type
 19777 ;;		None               void
 19778 ;; Registers used:
 19779 ;;		None
 19780 ;; Tracked objects:
 19781 ;;		On entry : 0/0
 19782 ;;		On exit  : 0/0
 19783 ;;		Unchanged: 0/0
 19784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;Total ram usage:        0 bytes
 19790 ;; Hardware stack levels used:    1
 19791 ;; Hardware stack levels required when called:    3
 19792 ;; This function calls:
 19793 ;;		Nothing
 19794 ;; This function is called by:
 19795 ;;		_main
 19796 ;; This function uses a non-reentrant model
 19797 ;;
 19798                           
 19799                           
 19800                           ;psect for function _Buzzer_Initialization
 19801  1B20                     _Buzzer_Initialization:	
 19802                           
 19803                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19804                           
 19805                           ;incstack = 0
 19806                           ; Regs used in _Buzzer_Initialization: []
 19807  1B20  0021               	movlb	1	; select bank1
 19808  1B21  144C               	bsf	_Buz1^(0+128),0
 19809  1B22  0008               	return
 19810  1B23                     __end_of_Buzzer_Initialization:	
 19811                           
 19812                           	psect	intentry
 19813  0004                     __pintentry:	
 19814 ;; *************** function _ISR *****************
 19815 ;; Defined at:
 19816 ;;		line 116 in file "../src/MCU_B1.c"
 19817 ;; Parameters:    Size  Location     Type
 19818 ;;		None
 19819 ;; Auto vars:     Size  Location     Type
 19820 ;;		None
 19821 ;; Return value:  Size  Location     Type
 19822 ;;		None               void
 19823 ;; Registers used:
 19824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19825 ;; Tracked objects:
 19826 ;;		On entry : 0/0
 19827 ;;		On exit  : 0/0
 19828 ;;		Unchanged: 0/0
 19829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19833 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19834 ;;Total ram usage:        1 bytes
 19835 ;; Hardware stack levels used:    1
 19836 ;; Hardware stack levels required when called:    2
 19837 ;; This function calls:
 19838 ;;		_IOC_ISR
 19839 ;;		_TMR1_ISR
 19840 ;; This function is called by:
 19841 ;;		Interrupt level 1
 19842 ;; This function uses a non-reentrant model
 19843 ;;
 19844                           
 19845  0004                     _ISR:	
 19846                           
 19847                           ;incstack = 0
 19848                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19849  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19850  0005  3180               	pagesel	$
 19851  0006  0020               	movlb	0	; select bank0
 19852  0007  087F               	movf	127,w
 19853  0008  00F1               	movwf	??_ISR
 19854                           
 19855                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19856  0009  0021               	movlb	1	; select bank1
 19857  000A  1C11               	btfss	17,0	;volatile
 19858  000B  2812               	goto	i1l8593
 19859  000C  0020               	movlb	0	; select bank0
 19860  000D  1C11               	btfss	17,0	;volatile
 19861  000E  2812               	goto	i1l8593
 19862                           
 19863                           ;MCU_B1.c: 126: TMR1_ISR();
 19864  000F  319F  27A1  3180   	fcall	_TMR1_ISR
 19865  0012                     i1l8593:	
 19866                           
 19867                           ;MCU_B1.c: 127: }
 19868                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19869  0012  198B               	btfsc	11,3	;volatile
 19870  0013  1C0B               	btfss	11,0	;volatile
 19871  0014  281A               	goto	i1l1260
 19872  0015  0027               	movlb	7	; select bank7
 19873  0016  1D16               	btfss	22,2	;volatile
 19874  0017  281A               	goto	i1l1260
 19875                           
 19876                           ;MCU_B1.c: 139: IOC_ISR();
 19877  0018  319B  23BE         	fcall	_IOC_ISR
 19878  001A                     i1l1260:	
 19879                           ;MCU_B1.c: 140: }
 19880                           ;MCU_B1.c: 148: return;
 19881                           
 19882  001A  0871               	movf	??_ISR,w
 19883  001B  0020               	movlb	0	; select bank0
 19884  001C  00FF               	movwf	127
 19885  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19886  001E  0009               	retfie
 19887  001F                     __end_of_ISR:	
 19888                           
 19889                           	psect	text148
 19890  1FA1                     __ptext148:	
 19891 ;; *************** function _TMR1_ISR *****************
 19892 ;; Defined at:
 19893 ;;		line 236 in file "../src/MCU_B1.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;		None
 19896 ;; Auto vars:     Size  Location     Type
 19897 ;;		None
 19898 ;; Return value:  Size  Location     Type
 19899 ;;		None               void
 19900 ;; Registers used:
 19901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19902 ;; Tracked objects:
 19903 ;;		On entry : 0/0
 19904 ;;		On exit  : 0/0
 19905 ;;		Unchanged: 0/0
 19906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19911 ;;Total ram usage:        0 bytes
 19912 ;; Hardware stack levels used:    1
 19913 ;; Hardware stack levels required when called:    1
 19914 ;; This function calls:
 19915 ;;		_DimmerLights_TMR_1
 19916 ;; This function is called by:
 19917 ;;		_ISR
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           
 19922                           ;psect for function _TMR1_ISR
 19923  1FA1                     _TMR1_ISR:	
 19924                           
 19925                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19926                           
 19927                           ;incstack = 0
 19928                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19929  1FA1  3192  22C3  319F   	fcall	_DimmerLights_TMR_1
 19930                           
 19931                           ;MCU_B1.c: 268: Timer1.Count++;
 19932  1FA4  3001               	movlw	1
 19933  1FA5  0022               	movlb	2	; select bank2
 19934  1FA6  07A6               	addwf	(_Timer1^(0+256)+1),f
 19935  1FA7  3000               	movlw	0
 19936  1FA8  3DA7               	addwfc	((_Timer1+1)^(0+256)+1),f
 19937                           
 19938                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19939  1FA9  3001               	movlw	1
 19940  1FAA  3E25               	addlw	_Timer1& (0+255)
 19941  1FAB  0086               	movwf	6
 19942  1FAC  3001               	movlw	1	; select bank2/3
 19943  1FAD  0087               	movwf	7
 19944  1FAE  3F40               	moviw [0]fsr1
 19945  1FAF  3AC8               	xorlw	200
 19946  1FB0  1D03               	skipz
 19947  1FB1  2FB4               	goto	u788_25
 19948  1FB2  3F41               	moviw [1]fsr1
 19949  1FB3  3A00               	xorlw	0
 19950  1FB4                     u788_25:	
 19951  1FB4  1D03               	skipz
 19952  1FB5  2FB9               	goto	i1l8053
 19953                           
 19954                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19955  1FB6  01A6               	clrf	(_Timer1^(0+256)+1)
 19956  1FB7  01A7               	clrf	((_Timer1+1)^(0+256)+1)
 19957                           
 19958                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19959  1FB8  1425               	bsf	_Timer1^(0+256),0
 19960  1FB9                     i1l8053:	
 19961                           
 19962                           ;MCU_B1.c: 272: }
 19963                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19964  1FB9  30FA               	movlw	250
 19965  1FBA  0020               	movlb	0	; select bank0
 19966  1FBB  0097               	movwf	23	;volatile
 19967                           
 19968                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19969  1FBC  3038               	movlw	56
 19970  1FBD  0096               	movwf	22	;volatile
 19971                           
 19972                           ;MCU_B1.c: 276: TMR1IF = 0;
 19973  1FBE  1011               	bcf	17,0	;volatile
 19974  1FBF  0008               	return
 19975  1FC0                     __end_of_TMR1_ISR:	
 19976                           
 19977                           	psect	text149
 19978  12C3                     __ptext149:	
 19979 ;; *************** function _DimmerLights_TMR_1 *****************
 19980 ;; Defined at:
 19981 ;;		line 1521 in file "../src/Dimmer_B1.c"
 19982 ;; Parameters:    Size  Location     Type
 19983 ;;		None
 19984 ;; Auto vars:     Size  Location     Type
 19985 ;;		None
 19986 ;; Return value:  Size  Location     Type
 19987 ;;		None               void
 19988 ;; Registers used:
 19989 ;;		wreg, status,2, status,0
 19990 ;; Tracked objects:
 19991 ;;		On entry : 0/0
 19992 ;;		On exit  : 0/0
 19993 ;;		Unchanged: 0/0
 19994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19999 ;;Total ram usage:        1 bytes
 20000 ;; Hardware stack levels used:    1
 20001 ;; This function calls:
 20002 ;;		Nothing
 20003 ;; This function is called by:
 20004 ;;		_TMR1_ISR
 20005 ;; This function uses a non-reentrant model
 20006 ;;
 20007                           
 20008                           
 20009                           ;psect for function _DimmerLights_TMR_1
 20010  12C3                     _DimmerLights_TMR_1:	
 20011                           
 20012                           ;Dimmer_B1.c: 1524: if (DimmerIntr1.Start == 1) {
 20013                           
 20014                           ;incstack = 0
 20015                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20016  12C3  0021               	movlb	1	; select bank1
 20017  12C4  1D20               	btfss	_DimmerIntr1^(0+128),2
 20018  12C5  2AE9               	goto	i1l877
 20019                           
 20020                           ;Dimmer_B1.c: 1525: DimmerIntr1.Count++;
 20021  12C6  3001               	movlw	1
 20022  12C7  00F0               	movwf	??_DimmerLights_TMR_1
 20023  12C8  0870               	movf	??_DimmerLights_TMR_1,w
 20024  12C9  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 20025                           
 20026                           ;Dimmer_B1.c: 1527: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd_Value) {
 20027  12CA  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 20028  12CB  062F               	xorwf	(_DimmerIntr1^(0+128)+15),w
 20029  12CC  1D03               	skipz
 20030  12CD  2AD0               	goto	i1l7513
 20031                           
 20032                           ;Dimmer_B1.c: 1528: DimmerIntr1.Count = 0;
 20033  12CE  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 20034                           
 20035                           ;Dimmer_B1.c: 1529: DimmerIntr1.Start = 0;
 20036  12CF  1120               	bcf	_DimmerIntr1^(0+128),2
 20037  12D0                     i1l7513:	
 20038                           
 20039                           ;Dimmer_B1.c: 1530: }
 20040                           ;Dimmer_B1.c: 1534: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 20041  12D0  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 20042  12D1  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 20043  12D2  1903               	btfsc	3,2
 20044                           
 20045                           ;Dimmer_B1.c: 1535: if (DimmerIntr1.ControlStatus == 1) {
 20046  12D3  1DA0               	btfss	_DimmerIntr1^(0+128),3
 20047  12D4  2AD7               	goto	i1l7519
 20048                           
 20049                           ;Dimmer_B1.c: 1536: RB1 = 0;
 20050  12D5  0020               	movlb	0	; select bank0
 20051  12D6  108D               	bcf	13,1	;volatile
 20052  12D7                     i1l7519:	
 20053                           
 20054                           ;Dimmer_B1.c: 1537: }
 20055                           ;Dimmer_B1.c: 1538: }
 20056                           ;Dimmer_B1.c: 1541: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3_Value) {
 20057  12D7  0021               	movlb	1	; select bank1
 20058  12D8  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 20059  12D9  062D               	xorwf	(_DimmerIntr1^(0+128)+13),w
 20060  12DA  1903               	btfsc	3,2
 20061                           
 20062                           ;Dimmer_B1.c: 1542: if (DimmerIntr1.ControlStatus == 1) {
 20063  12DB  1DA0               	btfss	_DimmerIntr1^(0+128),3
 20064  12DC  2ADF               	goto	i1l7525
 20065                           
 20066                           ;Dimmer_B1.c: 1543: RB1 = 1;
 20067  12DD  0020               	movlb	0	; select bank0
 20068  12DE  148D               	bsf	13,1	;volatile
 20069  12DF                     i1l7525:	
 20070                           
 20071                           ;Dimmer_B1.c: 1544: }
 20072                           ;Dimmer_B1.c: 1545: }
 20073                           ;Dimmer_B1.c: 1548: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4_Value) {
 20074  12DF  0021               	movlb	1	; select bank1
 20075  12E0  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 20076  12E1  062E               	xorwf	(_DimmerIntr1^(0+128)+14),w
 20077  12E2  1D03               	skipz
 20078  12E3  0008               	return
 20079                           
 20080                           ;Dimmer_B1.c: 1549: if (DimmerIntr1.ControlStatus == 1) {
 20081  12E4  1DA0               	btfss	_DimmerIntr1^(0+128),3
 20082  12E5  0008               	return
 20083                           
 20084                           ;Dimmer_B1.c: 1550: RB1 = 0;
 20085  12E6  0020               	movlb	0	; select bank0
 20086  12E7  108D               	bcf	13,1	;volatile
 20087                           
 20088                           ;Dimmer_B1.c: 1551: }
 20089                           ;Dimmer_B1.c: 1554: }
 20090                           ;Dimmer_B1.c: 1556: } else {
 20091  12E8  0008               	return
 20092  12E9                     i1l877:	
 20093                           
 20094                           ;Dimmer_B1.c: 1557: if (DimmerIntr1.GO == 1) {
 20095  12E9  1C20               	btfss	_DimmerIntr1^(0+128),0
 20096  12EA  0008               	return
 20097                           
 20098                           ;Dimmer_B1.c: 1558: DimmerIntr1.Count++;
 20099  12EB  3001               	movlw	1
 20100  12EC  00F0               	movwf	??_DimmerLights_TMR_1
 20101  12ED  0870               	movf	??_DimmerLights_TMR_1,w
 20102  12EE  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 20103                           
 20104                           ;Dimmer_B1.c: 1559: if (DimmerIntr1.Count == 7) {
 20105  12EF  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 20106  12F0  3A07               	xorlw	7
 20107  12F1  1D03               	skipz
 20108  12F2  0008               	return
 20109                           
 20110                           ;Dimmer_B1.c: 1560: DimmerIntr1.Count = 0;
 20111  12F3  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 20112                           
 20113                           ;Dimmer_B1.c: 1561: DimmerIntr1.GO = 0;
 20114  12F4  1020               	bcf	_DimmerIntr1^(0+128),0
 20115                           
 20116                           ;Dimmer_B1.c: 1562: DimmerIntr1.Start = 1;
 20117  12F5  1520               	bsf	_DimmerIntr1^(0+128),2
 20118                           
 20119                           ;Dimmer_B1.c: 1564: if (DimmerIntr1.ControlStatus == 1) {
 20120  12F6  1DA0               	btfss	_DimmerIntr1^(0+128),3
 20121  12F7  0008               	return
 20122                           
 20123                           ;Dimmer_B1.c: 1565: RB1 = 1;
 20124  12F8  0020               	movlb	0	; select bank0
 20125  12F9  148D               	bsf	13,1	;volatile
 20126  12FA  0008               	return
 20127  12FB                     __end_of_DimmerLights_TMR_1:	
 20128                           
 20129                           	psect	text150
 20130  1BBE                     __ptext150:	
 20131 ;; *************** function _IOC_ISR *****************
 20132 ;; Defined at:
 20133 ;;		line 395 in file "../src/MCU_B1.c"
 20134 ;; Parameters:    Size  Location     Type
 20135 ;;		None
 20136 ;; Auto vars:     Size  Location     Type
 20137 ;;		None
 20138 ;; Return value:  Size  Location     Type
 20139 ;;		None               void
 20140 ;; Registers used:
 20141 ;;		wreg, status,2, status,0, pclath, cstack
 20142 ;; Tracked objects:
 20143 ;;		On entry : 0/0
 20144 ;;		On exit  : 0/0
 20145 ;;		Unchanged: 0/0
 20146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20151 ;;Total ram usage:        0 bytes
 20152 ;; Hardware stack levels used:    1
 20153 ;; Hardware stack levels required when called:    1
 20154 ;; This function calls:
 20155 ;;		_DimmerLights_IOC_1
 20156 ;; This function is called by:
 20157 ;;		_ISR
 20158 ;; This function uses a non-reentrant model
 20159 ;;
 20160                           
 20161                           
 20162                           ;psect for function _IOC_ISR
 20163  1BBE                     _IOC_ISR:	
 20164                           
 20165                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20166                           
 20167                           ;incstack = 0
 20168                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20169  1BBE  0021               	movlb	1	; select bank1
 20170  1BBF  1C3F               	btfss	_myMain^(0+128),0
 20171  1BC0  2BC3               	goto	i1l8063
 20172                           
 20173                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20174  1BC1  3191  21F4         	fcall	_DimmerLights_IOC_1
 20175  1BC3                     i1l8063:	
 20176                           
 20177                           ;MCU_B1.c: 417: }
 20178                           ;MCU_B1.c: 419: IOCBF2 = 0;
 20179  1BC3  0027               	movlb	7	; select bank7
 20180  1BC4  1116               	bcf	22,2	;volatile
 20181                           
 20182                           ;MCU_B1.c: 420: IOCIF = 0;
 20183  1BC5  100B               	bcf	11,0	;volatile
 20184  1BC6  0008               	return
 20185  1BC7                     __end_of_IOC_ISR:	
 20186                           
 20187                           	psect	text151
 20188  11F4                     __ptext151:	
 20189 ;; *************** function _DimmerLights_IOC_1 *****************
 20190 ;; Defined at:
 20191 ;;		line 1607 in file "../src/Dimmer_B1.c"
 20192 ;; Parameters:    Size  Location     Type
 20193 ;;		None
 20194 ;; Auto vars:     Size  Location     Type
 20195 ;;		None
 20196 ;; Return value:  Size  Location     Type
 20197 ;;		None               void
 20198 ;; Registers used:
 20199 ;;		wreg, status,2, status,0
 20200 ;; Tracked objects:
 20201 ;;		On entry : 0/0
 20202 ;;		On exit  : 0/0
 20203 ;;		Unchanged: 0/0
 20204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20209 ;;Total ram usage:        1 bytes
 20210 ;; Hardware stack levels used:    1
 20211 ;; This function calls:
 20212 ;;		Nothing
 20213 ;; This function is called by:
 20214 ;;		_IOC_ISR
 20215 ;; This function uses a non-reentrant model
 20216 ;;
 20217                           
 20218                           
 20219                           ;psect for function _DimmerLights_IOC_1
 20220  11F4                     _DimmerLights_IOC_1:	
 20221                           
 20222                           ;Dimmer_B1.c: 1621: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20223                           
 20224                           ;incstack = 0
 20225                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0]
 20226  11F4  0021               	movlb	1	; select bank1
 20227  11F5  1920               	btfsc	_DimmerIntr1^(0+128),2
 20228  11F6  0008               	return
 20229  11F7  1820               	btfsc	_DimmerIntr1^(0+128),0
 20230  11F8  0008               	return
 20231                           
 20232                           ;Dimmer_B1.c: 1623: if (RB2 != DimmerIntr1.Status) {
 20233  11F9  0E21               	swapf	(_DimmerIntr1^(0+128)+1),w
 20234  11FA  0C89               	rrf	9,f
 20235  11FB  3901               	andlw	1
 20236  11FC  00F0               	movwf	??_DimmerLights_IOC_1
 20237  11FD  3000               	movlw	0
 20238  11FE  0020               	movlb	0	; select bank0
 20239  11FF  190D               	btfsc	13,2	;volatile
 20240  1200  3001               	movlw	1
 20241  1201  0670               	xorwf	??_DimmerLights_IOC_1,w
 20242  1202  1903               	skipnz
 20243  1203  0008               	return
 20244                           
 20245                           ;Dimmer_B1.c: 1626: DimmerIntr1.Count = 0;
 20246  1204  0021               	movlb	1	; select bank1
 20247  1205  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 20248                           
 20249                           ;Dimmer_B1.c: 1627: DimmerIntr1.GO = 1;
 20250  1206  1420               	bsf	_DimmerIntr1^(0+128),0
 20251                           
 20252                           ;Dimmer_B1.c: 1629: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20253  1207  1E20               	btfss	_DimmerIntr1^(0+128),4
 20254  1208  1B20               	btfsc	_DimmerIntr1^(0+128),6
 20255                           
 20256                           ;Dimmer_B1.c: 1630: DimmerIntr1.Tune = 1;
 20257  1209  14A0               	bsf	_DimmerIntr1^(0+128),1
 20258                           
 20259                           ;Dimmer_B1.c: 1631: }
 20260                           ;Dimmer_B1.c: 1633: if (DimmerIntr1.Calculate == 1) {
 20261  120A  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 20262  120B  2A1D               	goto	i1l7563
 20263                           
 20264                           ;Dimmer_B1.c: 1634: DimmerIntr1.Calculate = 0;
 20265  120C  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 20266                           
 20267                           ;Dimmer_B1.c: 1635: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 20268  120D  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 20269  120E  00F0               	movwf	??_DimmerLights_IOC_1
 20270  120F  0870               	movf	??_DimmerLights_IOC_1,w
 20271  1210  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 20272                           
 20273                           ;Dimmer_B1.c: 1636: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 20274  1211  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 20275  1212  00F0               	movwf	??_DimmerLights_IOC_1
 20276  1213  0870               	movf	??_DimmerLights_IOC_1,w
 20277  1214  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 20278                           
 20279                           ;Dimmer_B1.c: 1637: DimmerIntr1.TuneValue3_Value = DimmerIntr1.TuneValue3;
 20280  1215  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 20281  1216  00F0               	movwf	??_DimmerLights_IOC_1
 20282  1217  0870               	movf	??_DimmerLights_IOC_1,w
 20283  1218  00AD               	movwf	(_DimmerIntr1^(0+128)+13)
 20284                           
 20285                           ;Dimmer_B1.c: 1638: DimmerIntr1.TuneValue4_Value = DimmerIntr1.TuneValue4;
 20286  1219  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 20287  121A  00F0               	movwf	??_DimmerLights_IOC_1
 20288  121B  0870               	movf	??_DimmerLights_IOC_1,w
 20289  121C  00AE               	movwf	(_DimmerIntr1^(0+128)+14)
 20290  121D                     i1l7563:	
 20291                           
 20292                           ;Dimmer_B1.c: 1639: }
 20293                           ;Dimmer_B1.c: 1644: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20294  121D  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 20295  121E  0020               	movlb	0	; select bank0
 20296  121F  1D0D               	btfss	13,2	;volatile
 20297  1220  0008               	return
 20298  1221  0021               	movlb	1	; select bank1
 20299  1222  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 20300  1223  0008               	return
 20301  1224                     __end_of_DimmerLights_IOC_1:	
 20302  007E                     btemp	set	126	;btemp
 20303  007E                     pic14e$flags	set	126
 20304  007E                     wtemp	set	126
 20305  007E                     wtemp0	set	126
 20306  0080                     wtemp1	set	128
 20307  0082                     wtemp2	set	130
 20308  0084                     wtemp3	set	132
 20309  0086                     wtemp4	set	134
 20310  0088                     wtemp5	set	136
 20311  007F                     wtemp6	set	127
 20312  007E                     ttemp	set	126
 20313  007E                     ttemp0	set	126
 20314  0081                     ttemp1	set	129
 20315  0084                     ttemp2	set	132
 20316  0087                     ttemp3	set	135
 20317  007F                     ttemp4	set	127
 20318  007E                     ltemp	set	126
 20319  007E                     ltemp0	set	126
 20320  0082                     ltemp1	set	130
 20321  0086                     ltemp2	set	134
 20322  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         248
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      4      78
    BANK3            80      0      76
    BANK4            80      0      48
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights1(BANK2[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_getTemp_AD
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->___lwdiv
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setControl_Lights_Table->_setRF_AdjControl
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerIntr_ValueCalculate->_Division
    _DimmerIntr_Initialization->_Division
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _DimmerIntr_ValueCalculate->_Division
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  161549
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              6 COMMON     4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              6 COMMON     2     2      0
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6395
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    6395
                                             61 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4523
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4523
                                              9 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   49292
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   49292
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44861
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4671
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   39995
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     271
                                              6 COMMON     4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11188
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23338
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2333
                                              0 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      47
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2251
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3528
                                              9 COMMON     1     1      0
                                              6 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   51074
       _DimmerLights_DimmingFunction
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   50142
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   28825
                                             69 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     222
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     311
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20970
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3161
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              3 COMMON     3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0     711
                                              5 BANK0      2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            3     3      0     680
                                              2 BANK0      3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27796
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27796
                                             58 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Division                                             5     4      1     649
                                              7 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              5     4      1     345
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5116
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5116
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 4     4      0    2114
                                              9 COMMON     1     1      0
                                              6 BANK0      3     3      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
         _Division
           ___lbdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
           _Division
             ___lbdiv
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      30      13       60.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     174      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     174      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Mar 27 11:17:48 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1E1B                            ___bmul@product 0074  
               getMain_Lights_Count@count 0074                                        l90 157F  
                                      l88 156D                                        l98 14ED  
                                      l99 14E9                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10D7                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _u1 0240  
                                      _Sw 006D                            setTemp_Main@AD 0065  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1BAE  
                  __end_of_setDelayOff_GO 0DE9                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                    setRF_AdjControl@status 0077  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 09C4  
                    _setDimmerLights_Line 1C90                              ___ftadd@sign 0043  
                                     l100 14D9                                       l102 14E7  
                                     l307 1EA4                      _setDimmerLights_SwOn 14F4  
                                     l308 1EA6                                       l351 10FE  
                                     l239 0ACE                                       l539 0B5F  
                                     l708 1C8E                                       l911 15C7  
                                     l823 0FC4                                       l913 15B9  
                                     l922 15E2                                       l916 15C5  
                                     l783 1FD6                                       _GIE 005F  
                                     _CRC 00D8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00DB                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00B0  
                                     _ISR 0004                                       _WDT 012A  
                                     _Cmd 00D9              getDimmerLights_Status@lights 0074  
                                     _Sw1 01E3                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 1EB1                     _Buzzer_Initialization 1B20  
                         __end_of_ADC_Set 1B9F                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 1E30               _setDimmerIntr_ControlStatus 1E1B  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0030                           __end_of_IOC_ISR 1BC7  
                   _setDimmerLights_OnOff 0F46          setDimmerLights_DimmingRun@lights 0076  
                              Load_Main@i 0028                              ___ftdiv@sign 0035  
                                    l1311 1169                                      l1321 07F8  
                                    l2204 077A                                      l1500 1369  
                                    l2311 0A3C                                      l2208 06E2  
                                    l2209 0726                                      l2234 1BBB  
                                    l1523 11D9                                      l1524 11F2  
                                    l2252 179E                                      l1528 11EE  
                                    l1297 1420                                      l2265 0830  
                          _Load_Main$4420 0023                                      l1555 05FA  
                                    l1564 1E1A                           __end_of_IOC_Set 1C24  
                                    l2606 035A                                      l2279 0C4E  
                                    l2608 0238                                      l1681 008B  
                                    l1690 01C7                                      l1682 0087  
                                    l1683 0082                                      l1853 0527  
                                    l1679 01ED                                      l6041 1C81  
                                    l6113 03CF                                      l1689 01C9  
                                    l2586 1E8B                                      l6131 0415  
                                    l6115 03D9                                      l6107 03BC  
                                    l6203 0EBF                                      l6051 1D67  
                                    l1859 047C                                      l6125 03F5  
                                    l6117 03DE                                      l6135 0427  
                                    l6127 03FF                                      l6119 03E2  
                                    l6231 0F1E                                      l6215 0EFA  
                                    l7023 1DD9                                      l6055 1D6D  
                                    l2961 17E9                                      l6145 0442  
                                    l6161 0E16                                      l2794 1F6F  
                                    l2955 17D2                                      l6155 0E00  
                                    l6227 0F16                                      l6219 0F02  
                                    l6085 038C                                      l6095 03A2  
                                    l6183 0E70                                      l6175 0E57  
                                    l6255 0C68                                      l6431 0A7A  
                                    l6423 0A34                                      l6511 110F  
                                    l2984 0403                                      l6089 0393  
                                    l6281 0CB3                                      l6273 0C98  
                                    l6417 0A2E                                      l6513 111A  
                                    l7217 1D92                                      l6355 1328  
                                    l6283 0CBC                                      l6275 0CA6  
                                    l6419 0A2F                     _setDimmerLights_SwOff 12FB  
                                    l6197 0EA9                                      l6285 0CBF  
                                    l8213 08DC                                      l8205 08BE  
                                    l6551 1E08                                      l6391 0DDF  
                                    l7343 127D                                      l7335 125F  
                                    l7407 1CF3                                      l7319 1DA3  
                                    l6289 0CCD                                      l6377 0D9B  
                                    l7337 126B                                      l9121 0AE2  
                                    l9113 0AD5                                      l8161 0B85  
                                    l8217 08EB                                      l8209 08CD  
                                    l5931 17A8                                      l6555 1E15  
                                    l6387 0DCB                                      l6803 1379  
                                    l7347 1286                                      l9123 0AE5  
                                    l9115 0AD8                                      l6627 12B4  
                                    l9205 0F87                                      l9213 0FA6  
                                    l9109 0AB7                                      l8173 0BAC  
                                    l5935 17AF                                      l9207 0F9C  
                                    l9151 0850                                      l9127 0AEB  
                                    l9119 0ADE                                      l9063 0BEE  
                                    l5945 17D7                                      l5937 17B9  
                                    l6841 1D1E                                      l6817 139A  
                                    l6809 1383                                      l6497 1F5B  
                                    l9145 0847                                      l9073 0C30  
                                    l9065 0BF4                                      l9057 0BD9  
                                    l9081 0C3C                                      l7641 1F26  
                                    l8169 0BA4                                      l5947 17DF  
                                    l5939 17BE                                      l9251 1654  
                                    l6843 1D23                                      l9243 0FFD  
                                    l9227 0FD0                                      l6499 1F60  
                                    l9147 084A                                      l9091 0AA2  
                                    l9075 0C34                                      l7635 1F1E  
                                    l6773 11D5                                      l6837 1D18  
                                    l9309 1154                                      l9077 0C38  
                                    l9069 0C0F                                      l7637 1F21  
                                    l8189 0BD3                                      l8711 1631  
                                    l8703 1620                                      l6783 11EA  
                                    l6775 11DD                                      l9431 09F0  
                                    l7487 1BB4                                      l9503 1D81  
                                    l9167 085F                                      l9095 0AA8  
                                    l9441 0A16                                      l9521 0798  
                                    l9169 0875                                      l9089 0A9F  
                                    l9361 1779                                      l9345 1757  
                                    l8707 1629                                      l9443 0A1C  
                                    l9515 0784                                      l9429 09EA  
                                    l9357 1770                                      l9701 0222  
                                    l9605 0513                     _myMain_Initialization 1CAB  
                                    l8751 109E                                      l9471 15BB  
                                    l9607 0515                                      l8817 1079  
                                    l9529 07F1                                      l8921 0D49  
                                    l8905 0CED                                      l8819 1082  
                                    l9483 15D7                                      l9811 0676  
                                    l8843 1F0E                                      l8931 10E4  
                                    l9643 0721                                      l7883 1E96  
                                    l9563 048E                                      l8685 15FA  
                                    l8829 1091                                      l8837 1F05  
                                    l8853 10BE                                      l8909 0CF2  
                                    l9741 02D5                                      l9717 0265  
                                    l9557 047F                                      l9565 0491  
                                    l8695 1602                                      l8679 15EF  
                                    l8839 1F08                                      l8855 10C1  
                                    l8935 10EA                                      l9671 075F  
                                    l7879 1E90                                      l9727 0297  
                                    l9751 0307                                      l8697 160E  
                                    l8793 1526                                      l7977 1F69  
                                    l9905 0069                                      l8929 10E1  
                                    l9657 0735                                      _CFGS 0CAE  
                                    l8795 152C                                      l9923 008A  
                                    l8859 10C7                                      l8963 1454  
                                    l9683 0773                                      l9595 04FE  
                                    l7997 14C5                                      l8797 1536  
                                    l9837 13FF                                      l8973 1464  
                                    l8957 144B                                      l8893 13D8  
                                    l8967 145B                                      l8959 144E  
                            __CFG_WDTE$ON 0000                                      l9793 1FD8  
                                    l9945 00E0                                      l8969 145E  
                                    l9873 134B                                      l9971 0154  
                                    l9939 00AE                                      l9981 017D  
                                    l9991 0199                                      l9977 0163  
                                    l9985 0189                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5005 0E38  
                                    u5015 0E58                                      u5025 0E67  
                                    u5105 0F03                                      u5035 0E71  
                                    u5115 0F09                                      u5145 0F1F  
                                    u5225 0C99                                      u5155 0F25  
                                    u5075 0ECB                                      _PEIE 005E  
                                    u4525 17F0                                      u5085 0EDB  
                                    u4455 17B4                                      u5255 0CB4  
                                    u5425 0DA7                                      u4475 17CD  
                                    u5195 0C6F                                      u6325 1E7E  
                                    u4495 17DA                                      u4835 03BD  
                                    u6355 1ED4                                      u4925 03F6  
                                    u9005 1E54                                      u8045 0B94  
                                    u4865 03D0                                      u6625 1262  
                                    u8145 08B5                                      u5595 1104  
                                    u8155 08C4                                      u6645 126C  
                                    u8165 08D3                                      u4895 03E3  
                                    u6655 1276                                      u8095 0BC3  
                                    u8175 08E2                                      u6665 127E  
                                    u8185 08F1                                      u4995 0E28  
                                    u7745 1F70                                      u7755 1F75  
                                    u7785 14BB                                      u8905 160F  
                                    u8915 1619                                      u8925 1621  
                                    _LWLO 0CAD                                      u8885 1605  
                                    _RSSI 012E                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1EC9  
              _setDimmerLights_DimmingRun 1EB1                                      _Buz1 00CC  
                                    _Load 0130                                      _Temp 00E2  
                                    _main 16E6                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0B66                           __end_of_RF_Main 1B2C  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1BE3                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
       setDimmerLights_SwOn@dimmingStatus 0027      __end_of_DimmerLights_DimmingFunction 15E4  
   __size_of_DimmerLights_DimmingFunction 0053              _DimmerLights_DimmingFunction 1591  
              __end_of_setRFSW_AdjControl 0D5D                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2553 0075  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                ?_DimmerIntr_ValueCalculate 0070  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 1DDF  __size_of_getDimmerLights_Allow_Condition 0013  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1DCC                    _getDimmerLights_Status 1CB9  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1B42  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 012C  
                                   l10001 01AF                                     l10103 05CE  
                                   l10105 05AA                                     l10107 05D6  
                                   l10115 05F0                                     l10109 05E0  
                                   l10037 01DC                                     l10073 0557  
                                   l10067 0548                                     l10085 058D  
                                   l10077 0566                                     l10087 0569  
                                   l10191 1715                                     l10089 0595  
                                   l10187 170A                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005D  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 016A  
                         __end_of___awdiv 1638                           __end_of___lbdiv 1093  
                         __end_of___ftadd 045A                           __end_of___ftdiv 0E92  
                         __end_of___ftneg 1BD0                                     u10125 04D0  
                                   u11030 0593                                     u10145 04E7  
                                   u11035 0572                                     u11060 05D4  
                         __end_of___ftmul 0F46                                     u10165 0505  
                                   u10255 06FE                                     u11065 05B3  
                         ___awdiv@divisor 0072                                     u10605 1417  
                                   u10285 074E                                     _T1CON 0018  
                         __end_of___fttol 0CD6                                     u10805 00DE  
                                   u10815 0113                                     u10655 1361  
                                   u10795 00AC                                     u10895 0190  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 128D  
                                   i1l877 12E9                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1E84  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 09C4  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 095F  
                                   _Light 012D                          __end_of_TMR1_ISR 1FC0  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1072        DimmerLights_DimmingFunction@lights 0026  
                                   _getAD 1F16                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076                           __end_of_setData 14AE  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 1D65               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1C76  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1D35  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 1D76                        _setRF_DimmerLights 0A29  
                         ___lbdiv@divisor 0072               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0075  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 005F  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1CD7                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 1741                       ?_setRF_DimmerLights 005D  
                        __end_of_Fosc_Set 1B46            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0065  
                          _Exception_Main 052B                          ?_CC2500_WriteREG 0074  
       __end_of_DimmerIntr_ValueCalculate 11C6                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1C9D                                    ??_main 007A  
                           ___fttol@sign1 004E                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 005A  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0BD8  
                          _setMemory_Data 1C0E                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 1638  
                               ??_IOC_ISR 0071                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00A0                  _getMain_All_LightsStatus 1BA6  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1E45  
                 ??_Switch_Initialization 0077                    ?_setDimmerLights_OnOff 0065  
                    ??_setRF_DimmerLights 005E                                    ?_getAD 0072  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0AF7                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
        __end_of_getDimmerIntr_Dimming_Sw 1C83                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1B91  
                               ??_WDT_Set 0072                          __end_of___awtoft 10B5  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1800  
                _getMain_All_Error_Status 11C6                                    _IOCBF2 1CB2  
                                  i1l1260 001A                                    i1l8053 1FB9  
                                  i1l8063 1BC3                                    i1l7513 12D0  
                                  i1l7525 12DF                                    i1l7519 12D7  
                                  i1l7563 121D                                    i1l8593 0012  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0074  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01A0  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1EE2                                    u788_25 1FB4  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 1B64  
   __size_of_setDimmerLights_DimmingClose 0005              _setDimmerLights_DimmingClose 1B5F  
                    Exception_Main@i_4017 002B                        DelayTime_1us@count 0072  
                      setRF_AdjControl@sw 0079            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 005B             __end_of_CC2500_PowerOnInitial 1E6F  
                                  _Dimmer 0120                                    _DlySw1 0161  
                        _setRF_AdjControl 128D                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1D25  
              __end_of_Mcu_Initialization 1DCC                       __end_of_Buzzer_Main 14F4  
                                  _Memory 01BE                                    _Timer1 0125  
                                  ___bmul 1D65                    __end_of_Exception_Main 05FB  
                    Exception_Main@lights 002D                                    ___wmul 1F67  
                               ??___awdiv 0076                                 ??___lbdiv 0073  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 000B  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00E0  
                    Exception_Main@status 0026   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CF5  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 000F         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1CE6  
                                  _s_data 00E1                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 136B                                    _myMain 00BF  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1C19  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 153E                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0027               __end_of_Load_Initialization 1B26  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 1E45  
        __end_of_setDimmerIntr_Dimming_Sw 1DF2                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 111F                                 ??_setData 0072  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1D55               getMain_Lights_Count@status1 0073  
             __size_of_DimmerLights_IOC_1 0030                     __end_of_SwPointSelect 1C3A  
             __size_of_DimmerLights_TMR_1 0038              __size_of_Flash_Memory_Modify 0082  
                 __size_of_LedPointSelect 000B           setDimmerIntr_Dimming_Sw@command 0072  
                      setTemp_Main@TempGO 0060                          ___lbdiv@dividend 0074  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E84               __size_of_CC2500_InitPATable 001D  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 005A  
         getDimmerIntr_DimmingValue@value 0074                                 ?_LED_Main 0070  
                              ___ftadd@f1 0039                                ___ftadd@f2 003C  
                    _getRF_KeyStatus$6009 0074                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0031             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1FE0                             __end_of_getAD 1F30  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1B3A                           _getSw_KeyStatus 1D98  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072            ??_DimmerLights_DimmingFunction 0025  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0063             ??_Flash_Memory_Initialization 0076  
                        ___lbdiv@quotient 0076                      _getMain_Lights_Count 1C6A  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F3  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1C46                __end_of_set_TimeoutCleared 1B69  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 005F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C3A                      __size_of_setLED_Main 0033  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1B2C                        ??_CC2500_WriteByte 0072  
                               ?_Division 0077                                __pbssBANK0 006C  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0240  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14AE  
                       ??_setRFSW_Control 0065               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1B32                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B32  
                              __pnvCOMMON 007B                             ??_Switch_Main 007A  
                          DelayTime_1us@i 0074                            DelayTime_1us@j 0076  
                    ??_LED_Initialization 0077                              _DimmerLights 006C  
                       LedPointSelect@led 0073     getAll_DimmerIntr_Dimming_Sw_RF@status 0072  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 16E6                            _getDelayOff_GO 1CD7  
                     _CC2500_WriteCommand 1EFC                      ?_Temp_Initialization 0070  
                                 ?___bmul 0072                          ??_setDelayOff_GO 005F  
       __end_of_DimmerIntr_Initialization 16E6             ??_DimmerLights_Initialization 007A  
                                 ?___wmul 0072                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 000D  
                              _getLoad_AD 0B66                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1B7C                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 0007               ??_DimmerIntr_ValueCalculate 0022  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B98  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 0896  
      __end_of_DimmerLights_SelectPointer 1C03                _DimmerLights_SelectPointer 1BF8  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1BED  
                      _setRFSW_AdjControl 0CD6                    __end_of_setProductData 1C46  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 1BBE  
                                 _IOC_Set 1C19                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0062     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 13E5  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1DF2  
                  __size_of_CC2500_RxData 0062                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1B29                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0078  
                                 _WDT_Set 1BD9           __end_of_setControl_Lights_Table 0C4F  
                         setRF_Main@error 006B                    __size_of_setCmd_Status 0015  
                              ??_Fosc_Set 0072                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 168C                   ??_setLoad_AH_AL_Restore 0072  
                     getCmd_Status@number 0072              __end_of_CC2500_FrequencyCabr 1C2F  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0074  
       __size_of_setDimmerIntr_Dimming_RF 0015         __size_of_setDimmerIntr_Dimming_Sw 0013  
                       __end_of_getBuz_GO 1D45                 ?_setDimmerIntr_Dimming_RF 0072  
                     ??_Flash_Memory_Main 0078                 ?_setDimmerIntr_Dimming_Sw 0072  
                     ??_Flash_Memory_Read 0072                    __end_of_getDelayOff_GO 1CE6  
          __end_of_getDimmerLights_Status 1CC8                         __end_of_getRxData 17A0  
                 __end_of_getSw_KeyStatus 1DA9                  _CC2500_registers_address 1000  
                   ??_Temp_Initialization 0072                      ??_setRFSW_AdjControl 005D  
                          ??_setTemp_Main 005D                           __size_of___bmul 0011  
                     setProductData@value 005A                                   ___awdiv 15E4  
          ??_setDimmerLights_DimmingClose 0075                                   ___lbdiv 1072  
                                 ___ftadd 0364                                   ___ftdiv 0DE9  
                                 ___ftneg 1BC7                           __size_of___wmul 001D  
                                 ___ftmul 0E92                                   ___fttol 0C4F  
                     __end_of_Switch_Main 1BA6                                   ___lwdiv 1257  
              ??_getMain_All_LightsStatus 0072                   ??_Buzzer_Initialization 0072  
                         _getRF_KeyStatus 1D87                                ??___awtoft 0023  
                              ??___ftpack 0077                           __size_of_setLED 003A  
                    setRFSW_AdjControl@sw 0060           DimmerIntr_ValueCalculate@lights 0024  
                         __size_of_setBuz 0053                                   __ptext1 1333  
                                 __ptext2 1CAB                                   __ptext3 0896  
                                 __ptext4 0B66                                   __ptext5 1F16  
                                 __ptext6 1D55                                   __ptext7 0002  
                                 __ptext8 1B2F                                   __ptext9 045A  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0066  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 1426  
               __end_of_Flash_Memory_Read 1E06                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 06BF                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1B36                  __end_of_setRF_AdjControl 12C3  
                       _DimmerLights_Main 1FC0                                   _setData 146A  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1B5F  
              __end_of_CC2500_ClearRXFIFO 1B4E                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1B52                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 007B  
                          _LedPointSelect 1C03                 getAll_Sw_KeyStatus@status 0073  
                         getTemp_AD@ADRES 0078                       _DelayOffPointSelect 1BED  
                                 clrloop0 1B70            __size_of_Switch_Initialization 0004  
               _DimmerIntr_ValueCalculate 119A             __end_of_Switch_Initialization 1B5A  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0075  
                       _CC2500_InitSetREG 1170                             _DelayTime_1us 10FA  
                       __end_of_setTxData 1B8A                __end_of_Flash_Memory_Write 1170  
      __size_of_setDimmerLights_DimmingOn 0027                                   init_ram 1B69  
              __end_of_setRF_TransceiveGO 1D15                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 007A                      Flash_Memory_Read@ret 0075  
                                 initloop 1B6A                                _setSw_Main 01F3  
                   CC2500_ReadByte@loop_b 0073                    setDimmerLights_SwOn@sw 0028  
                       _CC2500_ReadStatus 10D7                      Flash_Memory_Modify@i 0077  
                   _setLED_Initialization 1D25                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0076                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001C                             _CC2500_RxData 0834  
                           _CC2500_TxData 0A8F                       ??_CC2500_InitSetREG 0077  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 077E                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0072  
                            __pstringtext 1000                             _setCmd_Status 1E06  
                     _Flash_Memory_Unlock 1BD0                       ??_CC2500_ReadStatus 0074  
                 CC2500_InitSetREG@loop_c 0022                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0076  
                 setTemp_Main@DangerValue 0063                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1FE0                        _Mcu_Initialization 1DBA  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 0019  
            __end_of_setRF_TimeoutCleared 1B4A                      __end_of_my_MainTimer 136B  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C0E                  __size_of_CC2500_WriteREG 0022  
                Load_Main@ErrorCountValue 0025          setDimmerIntr_DimmingValue@lights 005C  
        getDimmerIntr_DimmingValue@lights 0073                 __end_of_CC2500_InitSetREG 119A  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0066                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 10FA                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1146  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1EFC  
                    _setRF_Initialization 1BE3                        _setMemory_LoopSave 1D45  
                             _Switch_Main 1B9F                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1D98  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1E5A               ??_DimmerIntr_Initialization 005A  
                    ??_Mcu_Initialization 0073               __end_of_getAll_Sw_KeyStatus 1D87  
                   ??_DelayOffPointSelect 0072                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0072                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1D76       __size_of_getDimmerIntr_DimmingValue 000D  
                    setRF_DimmerLights@on 005D                            __end_of___wmul 1F84  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 0008  
        DimmerLights_SelectPointer@lights 0073                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0065                            __end_of_setLED 13A5  
           __size_of_setDimmerLights_Line 000D             __size_of_setDimmerLights_SwOn 004A  
                          __end_of_setBuz 1591                __end_of_DimmerLights_IOC_1 1224  
                    _CC2500_FrequencyCabr 1C24                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 13A5  
                       __size_of_WDT_Main 0010                __end_of_DimmerLights_TMR_1 12FB  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0010                          _getDimmer_LoadGO 1B8A  
                   ??_Flash_Memory_Modify 0076              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0072                __end_of_CC2500_InitPATable 1FA1  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0072  
                   ??_Flash_Memory_Unlock 0072                      __end_of_setTemp_Main 052B  
                          ??_RF_RxDisable 0072    __end_of_getDimmerLights_PercentToValue 095F  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 08FA  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 0056                       __size_of_getLoad_OK 0007  
           setRF_AdjControl@dimmingStatus 0078                        _set_TimeoutCleared 1B64  
       __end_of_setDimmerIntr_MaxmumValue 1C52                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0166  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0064                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                                 _Temp_Main 1B2F  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0072  
                               _Rx_Length 00DC                     setProductData@address 005C  
                     Exception_Main@count 0027                       Exception_Main@error 0028  
                                ??___bmul 0073                                  ??___wmul 0076  
                  __size_of_SwPointSelect 000B          __end_of_getMain_All_LightsStatus 1BAE  
                               _Tx_Length 00DF                               __pdataBANK4 0220  
                                ??_setLED 0075                                  ?_ADC_Set 0070  
                                ??_setBuz 0077                           ??_DelayOff_Main 007A  
                       ??_CC2500_ReadByte 0072               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 11F4                          _CC2500_SIDLEMode 1B52  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0072  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0074  
          getDimmerIntr_Dimming_Sw@lights 0072                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 0026            getDimmerIntr_Dimming_Sw@status 0073  
                               ___latbits 0003                          _setMemory_Modify 1CF5  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK2 016A                 setRF_TransceiveGO@command 0073  
                    ??_set_TimeoutCleared 0072                 _DimmerIntr_Initialization 168C  
                         ??_DelayTime_1us 0074                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 005F                         ??_CC2500_PowerRST 0078  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0073                              ??_TouchPower 0072  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0023  
          setDimmerIntr_MaxmumValue@value 005A               setDimmerLights_DimmingOn@sw 0074  
                       ??_CC2500_WriteREG 0075                             ??_setRF_Learn 0072  
                           _DimmerLights1 0158                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 005D            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1F4B  
                setRFSW_AdjControl@status 005F                           ??_CC2500_TxData 0076  
                          getRxData@error 0069               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1B46                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0029                                ?_Temp_Main 0070  
      __size_of_DimmerIntr_ValueCalculate 002C                       __size_of_setRF_Main 00BF  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1D15                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 1B1F  
                               _getBuz_GO 1D35                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 06BF               _Flash_Memory_Initialization 05FB  
                                ?___awdiv 0072                                 __ptext100 1E06  
                               __ptext101 1BA6                                  ?___lbdiv 0072  
                               __ptext110 1DDF                                 __ptext102 1CD7  
                               __ptext111 1C83                                 __ptext103 1D15  
                               __ptext120 1CF5                                 __ptext112 1DCC  
                               __ptext104 1638                                 __ptext121 095F  
                               __ptext113 1B7C                                 __ptext105 1B83  
                               __ptext130 1CC8                                 __ptext122 08FA  
                               __ptext114 11C6                                 __ptext106 1D05  
                               __ptext131 1072                                 __ptext123 0C4F  
                               __ptext115 1591                                 __ptext107 0A29  
                               __ptext140 1CB9                                 __ptext132 1B36  
                               __ptext124 1BC7                                 __ptext116 119A  
                               __ptext108 1C90                                 __ptext141 1BF8  
                               __ptext133 0AF7                                 __ptext125 0E92  
                               __ptext117 1B75                                 __ptext109 1C46  
                                ?___ftadd 0039                                 __ptext150 1BBE  
                               __ptext142 1B32                                 __ptext134 1C3A  
                               __ptext126 0DE9                                 __ptext118 1B1E  
                               __ptext151 11F4                                 __ptext143 1B5A  
                               __ptext135 14F4                                 __ptext127 0364  
                               __ptext119 168C                                 __ptext144 1BED  
                               __ptext136 153E                                 __ptext128 1093  
                               __ptext145 14AE                                 __ptext137 15E4  
                               __ptext129 17A0                                 __ptext146 1B20  
                               __ptext138 1C76                                 __ptext139 12FB  
                               __ptext148 1FA1                                 __ptext149 12C3  
                               _getRxData 1741                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___ftmul 0026  
                                ?___fttol 0046                     __size_of_my_MainTimer 0038  
                                ?___lwdiv 0072                   __end_of_setRFSW_Control 13E5  
                        ??_setProductData 005B                   _setOverTemp_ADV_Restore 1EC9  
           __size_of_setSw_Initialization 000E            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1B23                             ??_setLog_Code 005D  
                getDimmerLights_Line@line 0072                        __end_of_TouchPower 1E99  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1C90              ??_setDimmerIntr_DimmingValue 005B  
              _getDimmerIntr_DimmingValue 1C83                    CC2500_WriteByte@loop_a 0073  
                                ?_setData 0070            __size_of_setDimmerLights_OnOff 00BA  
                       ?_setRF_AdjControl 0070                                 _r_address 012F  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 0038  
          __size_of_myMain_Initialization 000E             __end_of_setDimmerLights_SwOff 1333  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1CB9  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0077  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 1C2F  
                     __end_of_setLED_Main 1257                          ??_getDelayOff_GO 0074  
                  ??_setRF_Initialization 0072               __end_of_Temp_Initialization 1B2F  
                       _CC2500_rfSettings 102F                            ___wmul@product 0076  
                                _LED_Main 1B3E                           SwPointSelect@sw 0073  
                               clear_ram0 1B6F                  CC2500_InitPATable@loop_d 0079  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1333  
                               _setTxData 1B83       __end_of_DimmerLights_Initialization 1B7C  
             _DimmerLights_Initialization 1B75                    _Flash_Memory_Main$3505 0021  
                      _CC2500_ClearRXFIFO 1B4A                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B4E                  _getDimmerIntr_Dimming_Sw 1C76  
                setRF_DimmerLights@lights 0061                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1DBA                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 0060  
    __size_of_setDimmerIntr_ControlStatus 0015               __size_of_setRFSW_AdjControl 0087  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1146  
                              ?_getRxData 0070                              ??_getLoad_AD 0076  
                                _TMR1_ISR 1FA1                    CC2500_InitSetREG@temp1 0020  
                  CC2500_InitSetREG@temp2 0021                              ??_getLoad_OK 0072  
                                _TMR1_Set 1066                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1D05  
                                _RF_Count 0128                      __end_of_RF_RxDisable 1BBE  
                            ??_getTemp_AD 0076               __end_of_CC2500_WriteCommand 1F16  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1D55  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0073  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0072  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00D1  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00DA                              setSw_Main@sw 002B  
                             ??_Load_Main 0020                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0078                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1C6A                            ?_SwPointSelect 0070  
                             getAD@adcon0 0075                               getAD@adcon1 0072  
                          setLED_Main@led 0076                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 0834                     _DlyOff_Initialization 1B5A  
       __size_of_getMain_All_LightsStatus 0008                      ??_CC2500_ClearRXFIFO 0076  
                                _Division 1CC8                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1E30  
             setDimmerLights_OnOff@lights 0068                  _setDimmerIntr_Dimming_Sw 1DDF  
                                _Fosc_Set 1B42                          __size_of_WDT_Set 000A  
                   setRFSW_Control@status 0066                        __end_of_getLoad_AD 0BD8  
                      __end_of_getLoad_OK 1B83                     _Switch_Initialization 1B56  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 08FA                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E99  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 000B  
                    ??_setRF_TransceiveGO 0072                                  _SwDetect 00DE  
                             ??_Temp_Main 007A                          getCmd_Status@cmd 0073  
                        setCmd_Status@cmd 0072                         setRFSW_Control@sw 0067  
           _getMain_All_Error_Status$4005 0073             _getMain_All_Error_Status$4006 0075  
                __end_of_getDimmer_LoadGO 1B91                       _Load_Initialization 1B23  
        ??_getDimmerLights_ValueToPercent 0054           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0075                 ??_setOverTemp_ADV_Restore 0072  
                            _setTemp_Main 045A                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0036  
                setDimmerLights_SwOn@idle 0026                                  ___awtoft 1093  
                        ??_LedPointSelect 0072                                  ___ftpack 17A0  
           __size_of_getMain_Lights_Count 000C                    getDimmer_LoadGO@loadgo 0072  
                       getTemp_AD@channel 0077                              ??_setRF_Main 006A  
                    CC2500_WriteREG@value 0074                               _setLED_Main 1224  
              __end_of_setRF_DimmerLights 0A8F            __size_of_getDimmer_Load_Status 0007  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0075  
                        getDelayOff_GO@sw 0074             __end_of_getDimmer_Load_Status 1B98  
                        setDelayOff_GO@sw 0064                           ___lwdiv@divisor 0072  
                        __size_of_setData 0044                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1EC9  
                                __ptext11 1B2C                                  __ptext20 1B64  
                                __ptext12 1B1F                                  __ptext21 1E6F  
                                __ptext13 1B9F                                  __ptext30 0BD8  
                                __ptext22 1B56                                  __ptext14 01F3  
                                __ptext31 128D                                  __ptext23 1C9D  
                                __ptext15 1DA9                                  __ptext40 10D7  
                                __ptext32 13A5                                  __ptext24 1B29  
                                __ptext16 111F                                  __ptext41 1F4B  
                                __ptext33 0CD6                                  __ptext25 06BF  
                                __ptext17 1D98                                  __ptext50 1B4E  
                                __ptext42 1E5A                                  __ptext34 1EB1  
                                __ptext26 146A                                  __ptext18 1C2F  
                                __ptext51 1B4A                                  __ptext43 1B52  
                                __ptext35 1D87                                  __ptext27 1741  
                                __ptext19 1E84                                  __ptext60 1066  
                                __ptext52 1EFC                                  __ptext44 1426  
                                __ptext36 1D35                                  __ptext28 0800  
                                __ptext61 1EE2                                  __ptext53 1B46  
                                __ptext45 1170                                  __ptext37 1BB6  
                                __ptext29 1D45                                  __ptext70 1F67  
                                __ptext62 1C19                                  __ptext54 1E45  
                                __ptext46 1F84                                  __ptext38 0A8F  
                                __ptext71 1257                                  __ptext63 1B42  
                                __ptext55 1E99                                  __ptext47 10B5  
                                __ptext39 0834                                  __ptext80 077E  
                                __ptext72 1B23                                  __ptext64 1B98  
                                __ptext56 1B26                                  __ptext48 1C24  
                                __ptext81 1C5E                                  __ptext73 1F30  
                                __ptext65 0053                                  __ptext57 1BE3  
                                __ptext49 10FA                                  __ptext90 09C4  
                                __ptext82 05FB                                  __ptext74 1B3E  
                                __ptext66 1C6A                                  __ptext58 1DBA  
                                __ptext91 0F46                                  __ptext83 1C0E  
                                __ptext75 1224                                  __ptext67 1B91  
                                __ptext59 1BD9                                  __ptext92 136B  
                                __ptext84 1146                                  __ptext76 1B3A  
                                __ptext68 1B8A                                  __ptext93 1C03  
                                __ptext85 1BD0                                  __ptext77 1D25  
                                __ptext69 1CE6                                  __ptext94 1B5F  
                                __ptext86 1DF2                                  __ptext78 13E5  
                                __ptext95 1E30                                  __ptext87 052B  
                                __ptext79 1D76                                  __ptext96 1C52  
                                __ptext88 1BAE                                  __ptext97 1E1B  
                                __ptext89 1FC0                                  __ptext98 0D5D  
                                __ptext99 1D65                                  __product 0220  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1BB6              __end_of_setDimmerLights_Main 0A29  
            __end_of_setDimmerLights_Line 1C9D                        _DimmerLights_IOC_1 11F4  
            __end_of_setDimmerLights_SwOn 153E                              ??_setSw_Main 0029  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 1DA9        __size_of_DimmerIntr_Initialization 005A  
                         ??_getCmd_Status 0072                        _DimmerLights_TMR_1 12C3  
                __end_of_CC2500_SIDLEMode 1B56                setDimmerLights_Main@lights 0069  
             __end_of_DelayOffPointSelect 1BF8                  setOverTemp_ADV_Restore@i 0073  
              CC2500_WriteCommand@command 0075                           _CC2500_ReadByte 1F4B  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1F84  
                __end_of_setMemory_Modify 1D05                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 077E                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 105E                               ??_getRxData 0068  
                            getLoad_OK@ok 0072                __end_of_RF_Timeout_Counter 1E5A  
             Flash_Memory_Main@key_Status 0020                  _getAll_Sw_KeyStatus$7188 0074  
                                main@argc 016A                                  main@argv 016C  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$7185 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 1426  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 0064  
      __end_of_setDimmerIntr_DimmingValue 1C5E                _setDimmerIntr_DimmingValue 1C52  
             __end_of_Flash_Memory_Modify 0800              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 0800               __end_of_Flash_Memory_Unlock 1BD9  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 10B5  
                      __end_of_setSw_Main 0364                     ??_Load_Initialization 0074  
                    ??_DimmerLights_IOC_1 0070           getDimmerLights_PercentToValue@i 0057  
     __size_of_setDimmerLights_DimmingRun 0018                             _Transceive_OK 03D1  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0021           __end_of_setOverTemp_ADV_Restore 1EE2  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
                   setTemp_Main@SafeValue 0061    __end_of_setDimmerLights_Initialization 1B1F  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1B1E  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                         getLoad_AD@ADRES 0023                     __size_of_RF_RxDisable 0008  
                       _RF_Initialization 1B26                               getLoad_AD@i 0025  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1C5E                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00DD                   __size_of_Exception_Main 00D0  
                           Division@value 0020           __end_of_DelayOff_Initialization 1B36  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B3A  
                     ??_RF_Initialization 0073                   __size_of_setMemory_Data 000B  
                          _setDelayOff_GO 0D5D               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0077          __size_of_setDimmerLights_Dimming 0054  
             getDimmer_Load_Status@status 0072      __size_of_Flash_Memory_Initialization 00C4  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 005D  
                   setMemory_Data@address 0074                     __end_of_DelayTime_1us 111F  
              ??_getDimmerIntr_Dimming_Sw 0072                   __end_of_CC2500_ReadByte 1F67  
            __end_of_setSw_Initialization 1CAB                           _Timeout_Counter 1E6F  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1BB6          Flash_Memory_Initialization@value 0077  
              __end_of_LED_Initialization 1B3E            __end_of_setTemp_Initialization 1B20  
                             Division@num 0077                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1B29                 __size_of_setRF_AdjControl 0036  
                   __end_of_CC2500_RxData 0896                     __end_of_CC2500_TxData 0AF7  
                   _setLoad_AH_AL_Restore 1F30                   __end_of_CC2500_PowerRST 146A  
