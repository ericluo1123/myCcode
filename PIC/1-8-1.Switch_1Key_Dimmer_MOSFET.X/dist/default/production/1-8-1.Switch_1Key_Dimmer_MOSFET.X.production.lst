

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Mar 11 15:24:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text147,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1F54                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1F54  3463               	retlw	99
  2172  1F55  3402               	retlw	2
  2173  1F56  3400               	retlw	0
  2174  1F57  3400               	retlw	0
  2175  1F58  3400               	retlw	0
  2176  1F59  3400               	retlw	0
  2177  1F5A  3400               	retlw	0
  2178  1F5B  3400               	retlw	0
  2179  1F5C  3400               	retlw	0
  2180  1F5D  3400               	retlw	0
  2181  1F5E  3400               	retlw	0
  2182  1F5F  3400               	retlw	0
  2183  1F60  34FF               	retlw	255
  2184  1F61  34FF               	retlw	255
  2185  1F62  34FF               	retlw	255
  2186  1F63  3400               	retlw	0
  2187  1F64  3400               	retlw	0
  2188  1F65  3400               	retlw	0
  2189  1F66  3400               	retlw	0
  2190  1F67  3400               	retlw	0
  2191  1F68  3400               	retlw	0
  2192  1F69  3400               	retlw	0
  2193  1F6A  3400               	retlw	0
  2194  1F6B  3400               	retlw	0
  2195  1F6C  3400               	retlw	0
  2196  1F6D  3400               	retlw	0
  2197  1F6E  3400               	retlw	0
  2198  1F6F  3400               	retlw	0
  2199  1F70  3400               	retlw	0
  2200  1F71  3400               	retlw	0
  2201  1F72  3400               	retlw	0
  2202  1F73  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1000                     __pstringtext:	
  2206  1000                     _CC2500_registers_address:	
  2207  1000  3403               	retlw	3
  2208  1001  3416               	retlw	22
  2209  1002  3417               	retlw	23
  2210  1003  341E               	retlw	30
  2211  1004  341F               	retlw	31
  2212  1005  3420               	retlw	32
  2213  1006  342A               	retlw	42
  2214  1007  342B               	retlw	43
  2215  1008  340B               	retlw	11
  2216  1009  340C               	retlw	12
  2217  100A  340D               	retlw	13
  2218  100B  340E               	retlw	14
  2219  100C  340F               	retlw	15
  2220  100D  3410               	retlw	16
  2221  100E  3411               	retlw	17
  2222  100F  3412               	retlw	18
  2223  1010  3413               	retlw	19
  2224  1011  3414               	retlw	20
  2225  1012  340A               	retlw	10
  2226  1013  3415               	retlw	21
  2227  1014  3421               	retlw	33
  2228  1015  3422               	retlw	34
  2229  1016  3418               	retlw	24
  2230  1017  3419               	retlw	25
  2231  1018  341A               	retlw	26
  2232  1019  341B               	retlw	27
  2233  101A  341C               	retlw	28
  2234  101B  341D               	retlw	29
  2235  101C  3423               	retlw	35
  2236  101D  3424               	retlw	36
  2237  101E  3425               	retlw	37
  2238  101F  3426               	retlw	38
  2239  1020  3429               	retlw	41
  2240  1021  342C               	retlw	44
  2241  1022  342D               	retlw	45
  2242  1023  342E               	retlw	46
  2243  1024  3400               	retlw	0
  2244  1025  3401               	retlw	1
  2245  1026  3402               	retlw	2
  2246  1027  3407               	retlw	7
  2247  1028  3408               	retlw	8
  2248  1029  3409               	retlw	9
  2249  102A  3406               	retlw	6
  2250  102B  3404               	retlw	4
  2251  102C  3405               	retlw	5
  2252  102D  3427               	retlw	39
  2253  102E  3428               	retlw	40
  2254  102F                     __end_of_CC2500_registers_address:	
  2255  102F                     _CC2500_rfSettings:	
  2256  102F  3407               	retlw	7
  2257  1030  3407               	retlw	7
  2258  1031  3430               	retlw	48
  2259  1032  3487               	retlw	135
  2260  1033  346B               	retlw	107
  2261  1034  34F8               	retlw	248
  2262  1035  347F               	retlw	127
  2263  1036  343F               	retlw	63
  2264  1037  3409               	retlw	9
  2265  1038  3400               	retlw	0
  2266  1039  345C               	retlw	92
  2267  103A  34A7               	retlw	167
  2268  103B  3462               	retlw	98
  2269  103C  3486               	retlw	134
  2270  103D  3483               	retlw	131
  2271  103E  3403               	retlw	3
  2272  103F  3422               	retlw	34
  2273  1040  34F8               	retlw	248
  2274  1041  3400               	retlw	0
  2275  1042  3444               	retlw	68
  2276  1043  34B6               	retlw	182
  2277  1044  3410               	retlw	16
  2278  1045  3418               	retlw	24
  2279  1046  341D               	retlw	29
  2280  1047  341C               	retlw	28
  2281  1048  34C7               	retlw	199
  2282  1049  3400               	retlw	0
  2283  104A  34B2               	retlw	178
  2284  104B  34EA               	retlw	234
  2285  104C  340A               	retlw	10
  2286  104D  3400               	retlw	0
  2287  104E  3411               	retlw	17
  2288  104F  3459               	retlw	89
  2289  1050  3488               	retlw	136
  2290  1051  3431               	retlw	49
  2291  1052  340B               	retlw	11
  2292  1053  342F               	retlw	47
  2293  1054  342E               	retlw	46
  2294  1055  3406               	retlw	6
  2295  1056  3404               	retlw	4
  2296  1057  3405               	retlw	5
  2297  1058  3400               	retlw	0
  2298  1059  3430               	retlw	48
  2299  105A  34D3               	retlw	211
  2300  105B  3491               	retlw	145
  2301  105C  3441               	retlw	65
  2302  105D  3400               	retlw	0
  2303  105E                     __end_of_CC2500_rfSettings:	
  2304  105E                     _CC2500_patable_vaule:	
  2305  105E  34FE               	retlw	254
  2306  105F  34FE               	retlw	254
  2307  1060  34FE               	retlw	254
  2308  1061  34FE               	retlw	254
  2309  1062  34FE               	retlw	254
  2310  1063  34FE               	retlw	254
  2311  1064  34FE               	retlw	254
  2312  1065  34FE               	retlw	254
  2313  1066                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EC                     __pnvBANK1:	
  2317  00EC                     _product:	
  2318  00EC                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0073                     _RC3	set	115
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  0396                     _IOCBF	set	918
  2375  0395                     _IOCBN	set	917
  2376  0394                     _IOCBP	set	916
  2377  1CB2                     _IOCBF2	set	7346
  2378                           
  2379                           ; #config settings
  2380  0000                     
  2381                           	psect	cinit
  2382  0021                     start_initialization:	
  2383  0021                     __initialization:	
  2384                           
  2385                           ; Clear objects allocated to BITCOMMON
  2386  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BITBANK1
  2389  0022  0021               	movlb	1	; select bank1
  2390  0023  01ED               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  0024  30A0               	movlw	low __pbssBANK1
  2394  0025  0084               	movwf	4
  2395  0026  3000               	movlw	high __pbssBANK1
  2396  0027  0085               	movwf	5
  2397  0028  3044               	movlw	68
  2398  0029  319A  229F  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  002C  3020               	movlw	low __pbssBANK2
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK2
  2404  002F  0085               	movwf	5
  2405  0030  304F               	movlw	79
  2406  0031  319A  229F  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  0034  30A0               	movlw	low __pbssBANK3
  2410  0035  0084               	movwf	4
  2411  0036  3001               	movlw	high __pbssBANK3
  2412  0037  0085               	movwf	5
  2413  0038  304C               	movlw	76
  2414  0039  319A  229F  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Initialize objects allocated to BANK4
  2417  003C  3054               	movlw	low __pidataBANK4
  2418  003D  0084               	movwf	4
  2419  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2420  003F  0085               	movwf	5
  2421  0040  3020               	movlw	low __pdataBANK4
  2422  0041  0086               	movwf	6
  2423  0042  3002               	movlw	high __pdataBANK4
  2424  0043  0087               	movwf	7
  2425  0044  3020               	movlw	32
  2426  0045  319A  2299         	fcall	init_ram
  2427  0047                     end_of_initialization:	
  2428                           ;End of C runtime variable initialization code
  2429                           
  2430  0047                     __end_of__initialization:	
  2431  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2432  0048  0020               	movlb	0
  2433  0049  3195  2D54         	ljmp	_main	;jump to C main() function
  2434                           
  2435                           	psect	bitbssCOMMON
  2436  03E8                     __pbitbssCOMMON:	
  2437  03E8                     _Transceive_OK:	
  2438  03E8                     	ds	1
  2439                           
  2440                           	psect	bitbssBANK1
  2441  0768                     __pbitbssBANK1:	
  2442  0768                     _Receive_OK:	
  2443  0768                     	ds	1
  2444                           
  2445                           	psect	bssBANK1
  2446  00A0                     __pbssBANK1:	
  2447  00A0                     _RF1:	
  2448  00A0                     	ds	15
  2449  00AF                     _myMain:	
  2450  00AF                     	ds	13
  2451  00BC                     _DimmerIntr1:	
  2452  00BC                     	ds	12
  2453  00C8                     _WDT:	
  2454  00C8                     	ds	2
  2455  00CA                     _CRC:	
  2456  00CA                     	ds	1
  2457  00CB                     _Cmd:	
  2458  00CB                     	ds	1
  2459  00CC                     _DelayOff:	
  2460  00CC                     	ds	1
  2461  00CD                     _DimmerIntr:	
  2462  00CD                     	ds	1
  2463  00CE                     _DimmerLights:	
  2464  00CE                     	ds	1
  2465  00CF                     _LED:	
  2466  00CF                     	ds	1
  2467  00D0                     _Light:	
  2468  00D0                     	ds	1
  2469  00D1                     _RSSI:	
  2470  00D1                     	ds	1
  2471  00D2                     _Rx_Length:	
  2472  00D2                     	ds	1
  2473  00D3                     _SPI0Buffer:	
  2474  00D3                     	ds	1
  2475  00D4                     _Sw:	
  2476  00D4                     	ds	1
  2477  00D5                     _SwDetect:	
  2478  00D5                     	ds	1
  2479  00D6                     _Tx_Length:	
  2480  00D6                     	ds	1
  2481  00D7                     _r_address:	
  2482  00D7                     	ds	1
  2483  00D8                     _r_data:	
  2484  00D8                     	ds	1
  2485  00D9                     _s_data:	
  2486  00D9                     	ds	1
  2487  00DA                     _Temp:	
  2488  00DA                     	ds	10
  2489                           
  2490                           	psect	bssBANK2
  2491  0120                     __pbssBANK2:	
  2492  0120                     _Buz1:	
  2493  0120                     	ds	12
  2494  012C                     _Dimmer:	
  2495  012C                     	ds	5
  2496  0131                     _Timer1:	
  2497  0131                     	ds	3
  2498  0134                     _RF_Count:	
  2499  0134                     	ds	2
  2500  0136                     _Load:	
  2501  0136                     	ds	40
  2502  015E                     _DimmerLights1:	
  2503  015E                     	ds	8
  2504  0166                     _DlySw1:	
  2505  0166                     	ds	5
  2506  016B                     _VarErrLED:	
  2507  016B                     	ds	4
  2508                           
  2509                           	psect	bssBANK3
  2510  01A0                     __pbssBANK3:	
  2511  01A0                     _RF_Data:	
  2512  01A0                     	ds	30
  2513  01BE                     _Memory:	
  2514  01BE                     	ds	37
  2515  01E3                     _Sw1:	
  2516  01E3                     	ds	9
  2517                           
  2518                           	psect	dataBANK4
  2519  0220                     __pdataBANK4:	
  2520  0220                     __product:	
  2521  0220                     	ds	32
  2522                           
  2523                           	psect	clrtext
  2524  1A9F                     clear_ram0:	
  2525                           ;	Called with FSR0 containing the base address, and
  2526                           ;	WREG with the size to clear
  2527                           
  2528  1A9F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2529  1AA0                     clrloop0:	
  2530  1AA0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2531  1AA1  3101               	addfsr 0,1
  2532  1AA2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2533  1AA3  2AA0               	goto	clrloop0	;have we reached the end yet?
  2534  1AA4  3400               	retlw	0	;all done for this memory range, return
  2535                           
  2536                           	psect	inittext
  2537  1A99                     init_ram:	
  2538  1A99  00FE               	movwf	126
  2539  1A9A                     initloop:	
  2540  1A9A  0012               	moviw fsr0++
  2541  1A9B  001E               	movwi fsr1++
  2542  1A9C  0BFE               	decfsz	126,f
  2543  1A9D  2A9A               	goto	initloop
  2544  1A9E  3400               	retlw	0
  2545                           
  2546                           	psect	cstackBANK1
  2547  00E4                     __pcstackBANK1:	
  2548  00E4                     ??_getRxData:	
  2549  00E4                     setDimmerLights_OnOff@lights:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552                           
  2553                           ; 1 bytes @ 0x0
  2554  00E4                     	ds	1
  2555  00E5                     setDimmerLights_Main@lights:	
  2556  00E5                     getRxData@error:	
  2557                           ; 1 bytes @ 0x1
  2558                           
  2559                           
  2560                           ; 1 bytes @ 0x1
  2561  00E5                     	ds	1
  2562  00E6                     ??_setRF_Main:	
  2563                           
  2564                           ; 0 bytes @ 0x2
  2565  00E6                     	ds	1
  2566  00E7                     setRF_Main@error:	
  2567                           
  2568                           ; 1 bytes @ 0x3
  2569  00E7                     	ds	1
  2570  00E8                     ?_main:	
  2571  00E8                     main@argc:	
  2572                           ; 2 bytes @ 0x4
  2573                           
  2574                           
  2575                           ; 2 bytes @ 0x4
  2576  00E8                     	ds	2
  2577  00EA                     main@argv:	
  2578                           
  2579                           ; 2 bytes @ 0x6
  2580  00EA                     	ds	2
  2581                           
  2582                           	psect	cstackCOMMON
  2583  0070                     __pcstackCOMMON:	
  2584  0070                     ?_CC2500_WriteCommand:	
  2585  0070                     ?_RF_Timeout_Counter:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRF_TimeoutCleared:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_WriteByte:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_ReadStatus:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ReadByte:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_PowerRST:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_InitSetREG:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_InitPATable:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ClearTXFIFO:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ClearRXFIFO:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_FrequencyCabr:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_SIDLEMode:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_DlyOff_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_DlyOff_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_SwOn:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_SwOff:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setMemory_Modify:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_Line:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setTxData:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setRF_TransceiveGO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setLED_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setLED_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_Fosc_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_IO_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_TMR1_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_ADC_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IOC_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_WDT_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_TMR1_ISR:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_IOC_ISR:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Timeout_Counter:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_set_TimeoutCleared:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Write:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Modify:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_WDT_Clearing:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_myMain_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Temp_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Load_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Switch_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RF_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getLoad_AD:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getTemp_AD:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_my_MainTimer:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Temp_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Load_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Switch_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_RF_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Exception_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setLoad_AH_AL_Restore:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setTemp_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setTemp_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setRF_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setRF_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_RxDisable:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_getRxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setLog_Code:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setControl_Lights_Table:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setRFSW_Control:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setRFSW_AdjControl:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setRF_AdjControl:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setSw_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setSw_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Buzzer_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Buzzer_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_CC2500_TxData:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_CC2500_RxData:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_PowerOnInitial:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DelayOffPointSelect:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DelayOff_Initialization:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOff_Main:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DimmerIntr_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DimmerLights_SelectPointer:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerLights_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setDimmerLights_DimmingOn:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_Main:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DimmerLights_TMR_1:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ??_DimmerLights_TMR_1:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerLights_IOC_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_LedPointSelect:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_LED_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_LED_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Mcu_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_ISR:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Flash_Memory_Initialization:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Flash_Memory_Main:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Flash_Memory_Unlock:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Flash_Memory_Erasing:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_setMemory_LoopSave:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_WDT_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setRF_Learn:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_TouchPower:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_SwPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_getDimmerLights_Status:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_getDimmerLights_ValueToPercent:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDimmerLights_PercentToValue:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getLoad_OK:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getMain_All_Error_Status:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getMain_All_LightsStatus:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getDimmerLights_Allow_Condition:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getCmd_Status:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_Flash_Memory_Read:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getAll_Sw_KeyStatus:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getRF_KeyStatus:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getSw_KeyStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDelayOff_GO:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getDimmerIntr_DimmingValue:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getDimmerLights_Line:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getDimmer_LoadGO:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmer_Load_Status:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getMain_Lights_Count:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?i1___lbdiv:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     setDimmerLights_Initialization@lights:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     getDimmerLights_Allow_Condition@lights:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     getSw_KeyStatus@sw:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     i1___lbdiv@divisor:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0x0
  2941  0070                     	ds	1
  2942  0071                     ??_TMR1_ISR:	
  2943  0071                     ??i1___lbdiv:	
  2944                           ; 0 bytes @ 0x1
  2945                           
  2946                           
  2947                           ; 0 bytes @ 0x1
  2948  0071                     	ds	1
  2949  0072                     i1___lbdiv@dividend:	
  2950                           
  2951                           ; 1 bytes @ 0x2
  2952  0072                     	ds	1
  2953  0073                     i1___lbdiv@counter:	
  2954                           
  2955                           ; 1 bytes @ 0x3
  2956  0073                     	ds	1
  2957  0074                     i1___lbdiv@quotient:	
  2958                           
  2959                           ; 1 bytes @ 0x4
  2960  0074                     	ds	1
  2961  0075                     ?i1_Division:	
  2962  0075                     i1Division@num:	
  2963                           ; 1 bytes @ 0x5
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x5
  2967  0075                     	ds	1
  2968  0076                     ??i1_Division:	
  2969                           
  2970                           ; 0 bytes @ 0x6
  2971  0076                     	ds	2
  2972  0078                     i1Division@value:	
  2973                           
  2974                           ; 1 bytes @ 0x8
  2975  0078                     	ds	1
  2976  0079                     i1Division@result:	
  2977                           
  2978                           ; 1 bytes @ 0x9
  2979  0079                     	ds	1
  2980  007A                     ??_DimmerLights_IOC_1:	
  2981                           
  2982                           ; 0 bytes @ 0xA
  2983  007A                     	ds	2
  2984  007C                     ??_IOC_ISR:	
  2985  007C                     ??_ISR:	
  2986                           ; 0 bytes @ 0xC
  2987                           
  2988                           
  2989                           ; 0 bytes @ 0xC
  2990  007C                     	ds	1
  2991                           
  2992                           	psect	cstackBANK0
  2993  0020                     __pcstackBANK0:	
  2994  0020                     ??_RF_Timeout_Counter:	
  2995  0020                     ??_setRF_TimeoutCleared:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_CC2500_WriteByte:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_CC2500_ReadByte:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ?_DelayTime_1us:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_setMemory_Modify:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_setDimmerLights_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_getLoad_OK:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_getMain_All_Error_Status:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_getMain_All_LightsStatus:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setDimmerLights_Line:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getCmd_Status:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ?_setCmd_Status:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_setTxData:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_setRF_TransceiveGO:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_Fosc_Set:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_IO_Set:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_TMR1_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_ADC_Set:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_IOC_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_WDT_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Timeout_Counter:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_set_TimeoutCleared:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Flash_Memory_Read:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ?_setMemory_Data:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Flash_Memory_Write:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_getAll_Sw_KeyStatus:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_WDT_Clearing:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_myMain_Initialization:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_Temp_Initialization:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_setLoad_AH_AL_Restore:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_setTemp_Initialization:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_setRF_Initialization:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_getRF_KeyStatus:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_getSw_KeyStatus:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_Buzzer_Initialization:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_Buzzer_Main:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_DelayOffPointSelect:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ?_setDimmerIntr_ControlStatus:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_getDimmerIntr_DimmingValue:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ?_setDimmerIntr_Dimming_RF:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_DimmerLights_SelectPointer:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getDimmerLights_Line:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_getDimmer_LoadGO:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getDimmer_Load_Status:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_LedPointSelect:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_Flash_Memory_Unlock:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_Flash_Memory_Erasing:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_setMemory_LoopSave:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_WDT_Main:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_getMain_Lights_Count:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_setRF_Learn:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_TouchPower:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_SwPointSelect:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ?___bmul:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ?___lbdiv:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0020                     ?_getBuz_GO:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0020                     ?_getAD:	
  3170                           ; 2 bytes @ 0x0
  3171                           
  3172  0020                     ?___wmul:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___awdiv:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     ?___lwdiv:	
  3179                           ; 2 bytes @ 0x0
  3180                           
  3181  0020                     ?___ftpack:	
  3182                           ; 2 bytes @ 0x0
  3183                           
  3184  0020                     setDimmerIntr_ControlStatus@command:	
  3185                           ; 3 bytes @ 0x0
  3186                           
  3187  0020                     setDimmerIntr_Dimming_Sw@command:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     setDimmerIntr_Dimming_RF@command:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     setDimmerLights_Line@lights:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     getDimmerLights_Line@line:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getDimmer_LoadGO@loadgo:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getDimmer_Load_Status@status:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     getAD@adcon1:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     setMemory_Data@data:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     getMain_All_LightsStatus@status:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     getMain_Lights_Count@count:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0020                     setCmd_Status@cmd:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0020                     getCmd_Status@number:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0020                     getLoad_OK@ok:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0020                     ___bmul@multiplicand:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0020                     ___lbdiv@divisor:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0020                     DelayTime_1us@count:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0020                     ___wmul@multiplier:	
  3239                           ; 2 bytes @ 0x0
  3240                           
  3241  0020                     ___awdiv@divisor:	
  3242                           ; 2 bytes @ 0x0
  3243                           
  3244  0020                     ___lwdiv@divisor:	
  3245                           ; 2 bytes @ 0x0
  3246                           
  3247  0020                     ___ftpack@arg:	
  3248                           ; 2 bytes @ 0x0
  3249                           
  3250                           
  3251                           ; 3 bytes @ 0x0
  3252  0020                     	ds	1
  3253  0021                     ??_getDimmerLights_Allow_Condition:	
  3254  0021                     ??_setCmd_Status:	
  3255                           ; 0 bytes @ 0x1
  3256                           
  3257  0021                     ??_setMemory_Data:	
  3258                           ; 0 bytes @ 0x1
  3259                           
  3260  0021                     ??_RF_Initialization:	
  3261                           ; 0 bytes @ 0x1
  3262                           
  3263  0021                     ??_setDimmerIntr_ControlStatus:	
  3264                           ; 0 bytes @ 0x1
  3265                           
  3266  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3267                           ; 0 bytes @ 0x1
  3268                           
  3269  0021                     ??_setDimmerIntr_Dimming_RF:	
  3270                           ; 0 bytes @ 0x1
  3271                           
  3272  0021                     ??_Mcu_Initialization:	
  3273                           ; 0 bytes @ 0x1
  3274                           
  3275  0021                     ??___bmul:	
  3276                           ; 0 bytes @ 0x1
  3277                           
  3278  0021                     ??___lbdiv:	
  3279                           ; 0 bytes @ 0x1
  3280                           
  3281  0021                     CC2500_WriteByte@loop_a:	
  3282                           ; 0 bytes @ 0x1
  3283                           
  3284  0021                     CC2500_ReadByte@loop_b:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     DelayOffPointSelect@sw:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     getDimmerIntr_DimmingValue@lights:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     DimmerLights_SelectPointer@lights:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     LedPointSelect@led:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     Flash_Memory_Read@i:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     Flash_Memory_Write@i:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     setMemory_Modify@command:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     setMemory_LoopSave@command:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311  0021                     getMain_Lights_Count@status1:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314  0021                     getCmd_Status@cmd:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317  0021                     setLoad_AH_AL_Restore@i:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     setRF_Learn@command:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323  0021                     getRF_KeyStatus@key:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326  0021                     setRF_TransceiveGO@command:	
  3327                           ; 1 bytes @ 0x1
  3328                           
  3329  0021                     SwPointSelect@sw:	
  3330                           ; 1 bytes @ 0x1
  3331                           
  3332  0021                     getSw_KeyStatus@status:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335  0021                     getAll_Sw_KeyStatus@status:	
  3336                           ; 1 bytes @ 0x1
  3337                           
  3338  0021                     _getMain_All_Error_Status$3618:	
  3339                           ; 1 bytes @ 0x1
  3340                           
  3341                           
  3342                           ; 2 bytes @ 0x1
  3343  0021                     	ds	1
  3344  0022                     ??_CC2500_WriteCommand:	
  3345  0022                     ??_CC2500_ReadStatus:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ??_DelayTime_1us:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ?_CC2500_WriteREG:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     ??_DlyOff_Initialization:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     ??_getDimmerLights_Status:	
  3358                           ; 0 bytes @ 0x2
  3359                           
  3360  0022                     ??_setDimmerLights_SwOff:	
  3361                           ; 0 bytes @ 0x2
  3362                           
  3363  0022                     ?_setLED:	
  3364                           ; 0 bytes @ 0x2
  3365                           
  3366  0022                     ??_setLED_Main:	
  3367                           ; 0 bytes @ 0x2
  3368                           
  3369  0022                     ??_Load_Initialization:	
  3370                           ; 0 bytes @ 0x2
  3371                           
  3372  0022                     ??_getBuz_GO:	
  3373                           ; 0 bytes @ 0x2
  3374                           
  3375  0022                     ??_getDelayOff_GO:	
  3376                           ; 0 bytes @ 0x2
  3377                           
  3378  0022                     ??_setDimmerLights_DimmingOn:	
  3379                           ; 0 bytes @ 0x2
  3380                           
  3381  0022                     ?_setDimmerLights_DimmingRun:	
  3382                           ; 0 bytes @ 0x2
  3383                           
  3384  0022                     CC2500_WriteREG@value:	
  3385                           ; 0 bytes @ 0x2
  3386                           
  3387  0022                     DlyOff_Initialization@sw:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     getDelayOff_GO@sw:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     setDimmerIntr_ControlStatus@lights:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     getDimmerIntr_DimmingValue@value:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     setDimmerIntr_Dimming_RF@lights:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     setDimmerLights_SwOff@sw:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     setDimmerLights_DimmingOn@sw:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     getDimmerLights_Allow_Condition@allow:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     getDimmerLights_Status@lights:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0022                     setDimmerLights_DimmingRun@command:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0022                     setLED@command:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0022                     Flash_Memory_Read@address:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0022                     setMemory_Data@address:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0022                     setCmd_Status@number:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0022                     _getRF_KeyStatus$5415:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0022                     _getSw_KeyStatus$6472:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0022                     _getAll_Sw_KeyStatus$6475:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0022                     ___bmul@product:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0022                     ___lbdiv@dividend:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0022                     DelayTime_1us@i:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0022                     ___wmul@multiplicand:	
  3451                           ; 2 bytes @ 0x2
  3452                           
  3453  0022                     ___awdiv@dividend:	
  3454                           ; 2 bytes @ 0x2
  3455                           
  3456  0022                     ___lwdiv@dividend:	
  3457                           ; 2 bytes @ 0x2
  3458                           
  3459                           
  3460                           ; 2 bytes @ 0x2
  3461  0022                     	ds	1
  3462  0023                     ??_CC2500_WriteREG:	
  3463  0023                     ??_setLED:	
  3464                           ; 0 bytes @ 0x3
  3465                           
  3466  0023                     ??_DelayOff_Initialization:	
  3467                           ; 0 bytes @ 0x3
  3468                           
  3469  0023                     ??_setDimmerLights_DimmingRun:	
  3470                           ; 0 bytes @ 0x3
  3471                           
  3472  0023                     ??_getAD:	
  3473                           ; 0 bytes @ 0x3
  3474                           
  3475  0023                     CC2500_WriteCommand@command:	
  3476                           ; 0 bytes @ 0x3
  3477                           
  3478  0023                     CC2500_ReadStatus@status_addr:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     getDelayOff_GO@go:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     _getDimmerLights_Allow_Condition$2285:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     getDimmerLights_Status@status:	
  3488                           ; 1 bytes @ 0x3
  3489                           
  3490  0023                     setLED@led:	
  3491                           ; 1 bytes @ 0x3
  3492                           
  3493  0023                     getAD@adcon0:	
  3494                           ; 1 bytes @ 0x3
  3495                           
  3496  0023                     Flash_Memory_Read@ret:	
  3497                           ; 1 bytes @ 0x3
  3498                           
  3499  0023                     ___bmul@multiplier:	
  3500                           ; 1 bytes @ 0x3
  3501                           
  3502  0023                     ___ftpack@exp:	
  3503                           ; 1 bytes @ 0x3
  3504                           
  3505  0023                     ___lbdiv@counter:	
  3506                           ; 1 bytes @ 0x3
  3507                           
  3508  0023                     _getMain_All_Error_Status$3619:	
  3509                           ; 1 bytes @ 0x3
  3510                           
  3511                           
  3512                           ; 2 bytes @ 0x3
  3513  0023                     	ds	1
  3514  0024                     ??_CC2500_ClearTXFIFO:	
  3515  0024                     ??_CC2500_ClearRXFIFO:	
  3516                           ; 0 bytes @ 0x4
  3517                           
  3518  0024                     ??_CC2500_SIDLEMode:	
  3519                           ; 0 bytes @ 0x4
  3520                           
  3521  0024                     ??_setLED_Initialization:	
  3522                           ; 0 bytes @ 0x4
  3523                           
  3524  0024                     ??_Flash_Memory_Modify:	
  3525                           ; 0 bytes @ 0x4
  3526                           
  3527  0024                     ??_getLoad_AD:	
  3528                           ; 0 bytes @ 0x4
  3529                           
  3530  0024                     ??_getTemp_AD:	
  3531                           ; 0 bytes @ 0x4
  3532                           
  3533  0024                     ??_RF_RxDisable:	
  3534                           ; 0 bytes @ 0x4
  3535                           
  3536  0024                     ??_setRF_AdjControl:	
  3537                           ; 0 bytes @ 0x4
  3538                           
  3539  0024                     ??_setSw_Initialization:	
  3540                           ; 0 bytes @ 0x4
  3541                           
  3542  0024                     ??_CC2500_TxData:	
  3543                           ; 0 bytes @ 0x4
  3544                           
  3545  0024                     ??_CC2500_RxData:	
  3546                           ; 0 bytes @ 0x4
  3547                           
  3548  0024                     ??_Flash_Memory_Initialization:	
  3549                           ; 0 bytes @ 0x4
  3550                           
  3551  0024                     ??___wmul:	
  3552                           ; 0 bytes @ 0x4
  3553                           
  3554  0024                     ??___awdiv:	
  3555                           ; 0 bytes @ 0x4
  3556                           
  3557  0024                     ??___lwdiv:	
  3558                           ; 0 bytes @ 0x4
  3559                           
  3560  0024                     CC2500_WriteREG@w_addr:	
  3561                           ; 0 bytes @ 0x4
  3562                           
  3563  0024                     setDimmerLights_DimmingRun@lights:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0024                     setLED_Initialization@led:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0024                     setLED_Main@led:	
  3570                           ; 1 bytes @ 0x4
  3571                           
  3572  0024                     setSw_Initialization@sw:	
  3573                           ; 1 bytes @ 0x4
  3574                           
  3575  0024                     ___ftpack@sign:	
  3576                           ; 1 bytes @ 0x4
  3577                           
  3578  0024                     ___lbdiv@quotient:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0024                     getBuz_GO@i:	
  3582                           ; 1 bytes @ 0x4
  3583                           
  3584  0024                     DelayTime_1us@j:	
  3585                           ; 2 bytes @ 0x4
  3586                           
  3587  0024                     ___wmul@product:	
  3588                           ; 2 bytes @ 0x4
  3589                           
  3590                           
  3591                           ; 2 bytes @ 0x4
  3592  0024                     	ds	1
  3593  0025                     ??_CC2500_InitSetREG:	
  3594  0025                     ??_CC2500_InitPATable:	
  3595                           ; 0 bytes @ 0x5
  3596                           
  3597  0025                     ??_Switch_Initialization:	
  3598                           ; 0 bytes @ 0x5
  3599                           
  3600  0025                     ??___ftpack:	
  3601                           ; 0 bytes @ 0x5
  3602                           
  3603  0025                     ??_LED_Initialization:	
  3604                           ; 0 bytes @ 0x5
  3605                           
  3606  0025                     ??_LED_Main:	
  3607                           ; 0 bytes @ 0x5
  3608                           
  3609  0025                     ?_Division:	
  3610                           ; 0 bytes @ 0x5
  3611                           
  3612  0025                     CC2500_TxData@loop_e:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0025                     CC2500_RxData@loop_f:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618  0025                     Division@num:	
  3619                           ; 1 bytes @ 0x5
  3620                           
  3621  0025                     Flash_Memory_Initialization@value:	
  3622                           ; 1 bytes @ 0x5
  3623                           
  3624  0025                     Flash_Memory_Modify@i:	
  3625                           ; 1 bytes @ 0x5
  3626                           
  3627  0025                     getMain_All_Error_Status@command:	
  3628                           ; 1 bytes @ 0x5
  3629                           
  3630  0025                     getTemp_AD@channel:	
  3631                           ; 1 bytes @ 0x5
  3632                           
  3633  0025                     setRF_AdjControl@status:	
  3634                           ; 1 bytes @ 0x5
  3635                           
  3636  0025                     ___awdiv@counter:	
  3637                           ; 1 bytes @ 0x5
  3638                           
  3639  0025                     ___lwdiv@counter:	
  3640                           ; 1 bytes @ 0x5
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x5
  3644  0025                     	ds	1
  3645  0026                     ??_CC2500_PowerRST:	
  3646  0026                     ??_CC2500_FrequencyCabr:	
  3647                           ; 0 bytes @ 0x6
  3648                           
  3649  0026                     ??_Division:	
  3650                           ; 0 bytes @ 0x6
  3651                           
  3652  0026                     ??_Flash_Memory_Main:	
  3653                           ; 0 bytes @ 0x6
  3654                           
  3655  0026                     CC2500_InitSetREG@temp1:	
  3656                           ; 0 bytes @ 0x6
  3657                           
  3658  0026                     CC2500_InitPATable@temp:	
  3659                           ; 1 bytes @ 0x6
  3660                           
  3661  0026                     getMain_All_Error_Status@status:	
  3662                           ; 1 bytes @ 0x6
  3663                           
  3664  0026                     getLoad_AD@channel:	
  3665                           ; 1 bytes @ 0x6
  3666                           
  3667  0026                     setRF_AdjControl@sw:	
  3668                           ; 1 bytes @ 0x6
  3669                           
  3670  0026                     ___awdiv@sign:	
  3671                           ; 1 bytes @ 0x6
  3672                           
  3673  0026                     getTemp_AD@ADRES:	
  3674                           ; 1 bytes @ 0x6
  3675                           
  3676  0026                     ___lwdiv@quotient:	
  3677                           ; 2 bytes @ 0x6
  3678                           
  3679                           
  3680                           ; 2 bytes @ 0x6
  3681  0026                     	ds	1
  3682  0027                     CC2500_InitSetREG@temp2:	
  3683  0027                     CC2500_InitPATable@loop_d:	
  3684                           ; 1 bytes @ 0x7
  3685                           
  3686  0027                     Flash_Memory_Main@key_Status:	
  3687                           ; 1 bytes @ 0x7
  3688                           
  3689  0027                     getLoad_AD@k:	
  3690                           ; 1 bytes @ 0x7
  3691                           
  3692  0027                     ___awdiv@quotient:	
  3693                           ; 1 bytes @ 0x7
  3694                           
  3695                           
  3696                           ; 2 bytes @ 0x7
  3697  0027                     	ds	1
  3698  0028                     ??_Load_Main:	
  3699  0028                     ?___awtoft:	
  3700                           ; 0 bytes @ 0x8
  3701                           
  3702  0028                     CC2500_InitSetREG@loop_c:	
  3703                           ; 3 bytes @ 0x8
  3704                           
  3705  0028                     Division@value:	
  3706                           ; 1 bytes @ 0x8
  3707                           
  3708  0028                     _Flash_Memory_Main$3155:	
  3709                           ; 1 bytes @ 0x8
  3710                           
  3711  0028                     getLoad_AD@j:	
  3712                           ; 1 bytes @ 0x8
  3713                           
  3714  0028                     ___awtoft@c:	
  3715                           ; 1 bytes @ 0x8
  3716                           
  3717                           
  3718                           ; 2 bytes @ 0x8
  3719  0028                     	ds	1
  3720  0029                     ?_setBuz:	
  3721  0029                     ??_CC2500_PowerOnInitial:	
  3722                           ; 0 bytes @ 0x9
  3723                           
  3724  0029                     Division@result:	
  3725                           ; 0 bytes @ 0x9
  3726                           
  3727  0029                     setBuz@time:	
  3728                           ; 1 bytes @ 0x9
  3729                           
  3730  0029                     getLoad_AD@ADRES:	
  3731                           ; 2 bytes @ 0x9
  3732                           
  3733                           
  3734                           ; 2 bytes @ 0x9
  3735  0029                     	ds	1
  3736  002A                     Load_Main@error:	
  3737                           
  3738                           ; 1 bytes @ 0xA
  3739  002A                     	ds	1
  3740  002B                     ??_setBuz:	
  3741  002B                     ??___awtoft:	
  3742                           ; 0 bytes @ 0xB
  3743                           
  3744  002B                     getLoad_AD@i:	
  3745                           ; 0 bytes @ 0xB
  3746                           
  3747  002B                     _Load_Main$3994:	
  3748                           ; 1 bytes @ 0xB
  3749                           
  3750                           
  3751                           ; 2 bytes @ 0xB
  3752  002B                     	ds	1
  3753  002C                     setBuz@count:	
  3754                           
  3755                           ; 1 bytes @ 0xC
  3756  002C                     	ds	1
  3757  002D                     ??_setDimmerLights_SwOn:	
  3758  002D                     ??_my_MainTimer:	
  3759                           ; 0 bytes @ 0xD
  3760                           
  3761  002D                     ??_Exception_Main:	
  3762                           ; 0 bytes @ 0xD
  3763                           
  3764  002D                     setDimmerLights_SwOn@sw:	
  3765                           ; 0 bytes @ 0xD
  3766                           
  3767  002D                     Load_Main@ErrorCountValue:	
  3768                           ; 1 bytes @ 0xD
  3769                           
  3770  002D                     ___awtoft@sign:	
  3771                           ; 1 bytes @ 0xD
  3772                           
  3773                           
  3774                           ; 1 bytes @ 0xD
  3775  002D                     	ds	1
  3776  002E                     ?___ftdiv:	
  3777  002E                     ?___ftmul:	
  3778                           ; 3 bytes @ 0xE
  3779                           
  3780  002E                     setDimmerLights_SwOn@idle:	
  3781                           ; 3 bytes @ 0xE
  3782                           
  3783  002E                     Exception_Main@status:	
  3784                           ; 1 bytes @ 0xE
  3785                           
  3786  002E                     Load_Main@Load_RunStatus:	
  3787                           ; 1 bytes @ 0xE
  3788                           
  3789  002E                     ___ftdiv@f2:	
  3790                           ; 1 bytes @ 0xE
  3791                           
  3792  002E                     ___ftmul@f1:	
  3793                           ; 3 bytes @ 0xE
  3794                           
  3795                           
  3796                           ; 3 bytes @ 0xE
  3797  002E                     	ds	1
  3798  002F                     ??_setSw_Main:	
  3799  002F                     Exception_Main@count:	
  3800                           ; 0 bytes @ 0xF
  3801                           
  3802  002F                     Load_Main@LightsCount:	
  3803                           ; 1 bytes @ 0xF
  3804                           
  3805                           
  3806                           ; 1 bytes @ 0xF
  3807  002F                     	ds	1
  3808  0030                     Exception_Main@error:	
  3809  0030                     Load_Main@i:	
  3810                           ; 1 bytes @ 0x10
  3811                           
  3812                           
  3813                           ; 2 bytes @ 0x10
  3814  0030                     	ds	1
  3815  0031                     setSw_Main@sw:	
  3816  0031                     Exception_Main@i:	
  3817                           ; 1 bytes @ 0x11
  3818                           
  3819  0031                     ___ftdiv@f1:	
  3820                           ; 2 bytes @ 0x11
  3821                           
  3822  0031                     ___ftmul@f2:	
  3823                           ; 3 bytes @ 0x11
  3824                           
  3825                           
  3826                           ; 3 bytes @ 0x11
  3827  0031                     	ds	1
  3828  0032                     ??_Switch_Main:	
  3829                           
  3830                           ; 0 bytes @ 0x12
  3831  0032                     	ds	1
  3832  0033                     Exception_Main@i_3630:	
  3833                           
  3834                           ; 2 bytes @ 0x13
  3835  0033                     	ds	1
  3836  0034                     ??___ftdiv:	
  3837  0034                     ??___ftmul:	
  3838                           ; 0 bytes @ 0x14
  3839                           
  3840                           
  3841                           ; 0 bytes @ 0x14
  3842  0034                     	ds	1
  3843  0035                     Exception_Main@lights:	
  3844                           
  3845                           ; 1 bytes @ 0x15
  3846  0035                     	ds	3
  3847  0038                     ___ftdiv@cntr:	
  3848  0038                     ___ftmul@exp:	
  3849                           ; 1 bytes @ 0x18
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x18
  3853  0038                     	ds	1
  3854  0039                     ___ftdiv@f3:	
  3855  0039                     ___ftmul@f3_as_product:	
  3856                           ; 3 bytes @ 0x19
  3857                           
  3858                           
  3859                           ; 3 bytes @ 0x19
  3860  0039                     	ds	3
  3861  003C                     ___ftdiv@exp:	
  3862  003C                     ___ftmul@cntr:	
  3863                           ; 1 bytes @ 0x1C
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x1C
  3867  003C                     	ds	1
  3868  003D                     ___ftdiv@sign:	
  3869  003D                     ___ftmul@sign:	
  3870                           ; 1 bytes @ 0x1D
  3871                           
  3872                           
  3873                           ; 1 bytes @ 0x1D
  3874  003D                     	ds	1
  3875  003E                     ?___ftneg:	
  3876  003E                     ___ftneg@f1:	
  3877                           ; 3 bytes @ 0x1E
  3878                           
  3879                           
  3880                           ; 3 bytes @ 0x1E
  3881  003E                     	ds	3
  3882  0041                     ??___ftneg:	
  3883  0041                     ?___ftadd:	
  3884                           ; 0 bytes @ 0x21
  3885                           
  3886  0041                     ___ftadd@f1:	
  3887                           ; 3 bytes @ 0x21
  3888                           
  3889                           
  3890                           ; 3 bytes @ 0x21
  3891  0041                     	ds	3
  3892  0044                     ___ftadd@f2:	
  3893                           
  3894                           ; 3 bytes @ 0x24
  3895  0044                     	ds	3
  3896  0047                     ??___ftadd:	
  3897                           
  3898                           ; 0 bytes @ 0x27
  3899  0047                     	ds	4
  3900  004B                     ___ftadd@sign:	
  3901                           
  3902                           ; 1 bytes @ 0x2B
  3903  004B                     	ds	1
  3904  004C                     ___ftadd@exp2:	
  3905                           
  3906                           ; 1 bytes @ 0x2C
  3907  004C                     	ds	1
  3908  004D                     ___ftadd@exp1:	
  3909                           
  3910                           ; 1 bytes @ 0x2D
  3911  004D                     	ds	1
  3912  004E                     ?___fttol:	
  3913  004E                     ___fttol@f1:	
  3914                           ; 4 bytes @ 0x2E
  3915                           
  3916                           
  3917                           ; 3 bytes @ 0x2E
  3918  004E                     	ds	4
  3919  0052                     ??___fttol:	
  3920                           
  3921                           ; 0 bytes @ 0x32
  3922  0052                     	ds	4
  3923  0056                     ___fttol@sign1:	
  3924                           
  3925                           ; 1 bytes @ 0x36
  3926  0056                     	ds	1
  3927  0057                     ___fttol@lval:	
  3928                           
  3929                           ; 4 bytes @ 0x37
  3930  0057                     	ds	4
  3931  005B                     ___fttol@exp1:	
  3932                           
  3933                           ; 1 bytes @ 0x3B
  3934  005B                     	ds	1
  3935  005C                     ??_getDimmerLights_ValueToPercent:	
  3936  005C                     ??_getDimmerLights_PercentToValue:	
  3937                           ; 0 bytes @ 0x3C
  3938                           
  3939                           
  3940                           ; 0 bytes @ 0x3C
  3941  005C                     	ds	2
  3942  005E                     getDimmerLights_PercentToValue@value:	
  3943  005E                     getDimmerLights_ValueToPercent@value:	
  3944                           ; 1 bytes @ 0x3E
  3945                           
  3946                           
  3947                           ; 1 bytes @ 0x3E
  3948  005E                     	ds	1
  3949  005F                     getDimmerLights_PercentToValue@i:	
  3950  005F                     getDimmerLights_ValueToPercent@i:	
  3951                           ; 3 bytes @ 0x3F
  3952                           
  3953                           
  3954                           ; 3 bytes @ 0x3F
  3955  005F                     	ds	3
  3956  0062                     ?_setProductData:	
  3957  0062                     ??_DimmerIntr_Initialization:	
  3958                           ; 0 bytes @ 0x42
  3959                           
  3960  0062                     ?_setDimmerIntr_DimmingValue:	
  3961                           ; 0 bytes @ 0x42
  3962                           
  3963  0062                     ?_setDimmerIntr_MaxmumValue:	
  3964                           ; 0 bytes @ 0x42
  3965                           
  3966  0062                     setDimmerIntr_DimmingValue@value:	
  3967                           ; 0 bytes @ 0x42
  3968                           
  3969  0062                     setDimmerIntr_MaxmumValue@value:	
  3970                           ; 1 bytes @ 0x42
  3971                           
  3972  0062                     setProductData@value:	
  3973                           ; 1 bytes @ 0x42
  3974                           
  3975                           
  3976                           ; 1 bytes @ 0x42
  3977  0062                     	ds	1
  3978  0063                     ??_setProductData:	
  3979  0063                     ??_setDimmerIntr_DimmingValue:	
  3980                           ; 0 bytes @ 0x43
  3981                           
  3982  0063                     ??_setDimmerIntr_MaxmumValue:	
  3983                           ; 0 bytes @ 0x43
  3984                           
  3985                           
  3986                           ; 0 bytes @ 0x43
  3987  0063                     	ds	1
  3988  0064                     ??_DimmerLights_Initialization:	
  3989  0064                     setDimmerIntr_DimmingValue@lights:	
  3990                           ; 0 bytes @ 0x44
  3991                           
  3992  0064                     setDimmerIntr_MaxmumValue@lights:	
  3993                           ; 1 bytes @ 0x44
  3994                           
  3995  0064                     setProductData@address:	
  3996                           ; 1 bytes @ 0x44
  3997                           
  3998                           
  3999                           ; 1 bytes @ 0x44
  4000  0064                     	ds	1
  4001  0065                     ??_DlyOff_Main:	
  4002  0065                     ?_setRF_DimmerLights:	
  4003                           ; 0 bytes @ 0x45
  4004                           
  4005  0065                     ??_setTemp_Main:	
  4006                           ; 0 bytes @ 0x45
  4007                           
  4008  0065                     ??_setLog_Code:	
  4009                           ; 0 bytes @ 0x45
  4010                           
  4011  0065                     ??_setRFSW_AdjControl:	
  4012                           ; 0 bytes @ 0x45
  4013                           
  4014  0065                     ?_setDelayOff_GO:	
  4015                           ; 0 bytes @ 0x45
  4016                           
  4017  0065                     setDelayOff_GO@command:	
  4018                           ; 0 bytes @ 0x45
  4019                           
  4020  0065                     setRF_DimmerLights@on:	
  4021                           ; 1 bytes @ 0x45
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x45
  4025  0065                     	ds	1
  4026  0066                     ??_setRF_DimmerLights:	
  4027  0066                     setDelayOff_GO@value:	
  4028                           ; 0 bytes @ 0x46
  4029                           
  4030  0066                     setTemp_Main@error:	
  4031                           ; 1 bytes @ 0x46
  4032                           
  4033                           
  4034                           ; 1 bytes @ 0x46
  4035  0066                     	ds	1
  4036  0067                     ??_setDelayOff_GO:	
  4037  0067                     DlyOff_Main@sw:	
  4038                           ; 0 bytes @ 0x47
  4039                           
  4040  0067                     setTemp_Main@TempGO:	
  4041                           ; 1 bytes @ 0x47
  4042                           
  4043  0067                     setRFSW_AdjControl@status:	
  4044                           ; 1 bytes @ 0x47
  4045                           
  4046                           
  4047                           ; 1 bytes @ 0x47
  4048  0067                     	ds	1
  4049  0068                     ??_DelayOff_Main:	
  4050  0068                     setRFSW_AdjControl@sw:	
  4051                           ; 0 bytes @ 0x48
  4052                           
  4053  0068                     setRF_DimmerLights@status:	
  4054                           ; 1 bytes @ 0x48
  4055                           
  4056  0068                     setTemp_Main@SafeValue:	
  4057                           ; 1 bytes @ 0x48
  4058                           
  4059                           
  4060                           ; 2 bytes @ 0x48
  4061  0068                     	ds	1
  4062  0069                     setDelayOff_GO@i:	
  4063  0069                     setRF_DimmerLights@lights:	
  4064                           ; 1 bytes @ 0x49
  4065                           
  4066                           
  4067                           ; 1 bytes @ 0x49
  4068  0069                     	ds	1
  4069  006A                     ?_setDimmerLights_Dimming:	
  4070  006A                     setDelayOff_GO@j:	
  4071                           ; 0 bytes @ 0x4A
  4072                           
  4073  006A                     setDimmerLights_Dimming@status:	
  4074                           ; 1 bytes @ 0x4A
  4075                           
  4076  006A                     setTemp_Main@DangerValue:	
  4077                           ; 1 bytes @ 0x4A
  4078                           
  4079                           
  4080                           ; 2 bytes @ 0x4A
  4081  006A                     	ds	1
  4082  006B                     ??_setDimmerLights_Dimming:	
  4083  006B                     setDelayOff_GO@k:	
  4084                           ; 0 bytes @ 0x4B
  4085                           
  4086                           
  4087                           ; 1 bytes @ 0x4B
  4088  006B                     	ds	1
  4089  006C                     setDelayOff_GO@sw:	
  4090  006C                     setDimmerLights_Dimming@value:	
  4091                           ; 1 bytes @ 0x4C
  4092                           
  4093  006C                     setTemp_Main@AD:	
  4094                           ; 1 bytes @ 0x4C
  4095                           
  4096                           
  4097                           ; 2 bytes @ 0x4C
  4098  006C                     	ds	1
  4099  006D                     ?_setDimmerLights_OnOff:	
  4100  006D                     ??_setRFSW_Control:	
  4101                           ; 0 bytes @ 0x4D
  4102                           
  4103  006D                     setDimmerLights_OnOff@command:	
  4104                           ; 0 bytes @ 0x4D
  4105                           
  4106  006D                     setDimmerLights_Dimming@lights:	
  4107                           ; 1 bytes @ 0x4D
  4108                           
  4109                           
  4110                           ; 1 bytes @ 0x4D
  4111  006D                     	ds	1
  4112  006E                     ??_setDimmerLights_OnOff:	
  4113  006E                     ??_Temp_Main:	
  4114                           ; 0 bytes @ 0x4E
  4115                           
  4116  006E                     setRFSW_Control@status:	
  4117                           ; 0 bytes @ 0x4E
  4118                           
  4119                           
  4120                           ; 1 bytes @ 0x4E
  4121  006E                     	ds	1
  4122  006F                     setRFSW_Control@sw:	
  4123                           
  4124                           ; 1 bytes @ 0x4F
  4125  006F                     	ds	1
  4126  0070                     ??_setDimmerLights_Main:	
  4127  0070                     ??_RF_Main:	
  4128                           ; 0 bytes @ 0x50
  4129                           
  4130  0070                     ??_setControl_Lights_Table:	
  4131                           ; 0 bytes @ 0x50
  4132                           
  4133  0070                     ??_DimmerLights_Main:	
  4134                           ; 0 bytes @ 0x50
  4135                           
  4136  0070                     ??_main:	
  4137                           ; 0 bytes @ 0x50
  4138                           
  4139                           
  4140                           	psect	maintext
  4141  1554                     __pmaintext:	
  4142                           ; 0 bytes @ 0x50
  4143 ;;
  4144 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4145 ;;
  4146 ;; *************** function _main *****************
  4147 ;; Defined at:
  4148 ;;		line 7 in file "../src/Main_B1.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  argc            2    4[BANK1 ] int 
  4151 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  2    4[BANK1 ] int 
  4156 ;; Registers used:
  4157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 17F/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4163 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;Total ram usage:        4 bytes
  4168 ;; Hardware stack levels required when called:   13
  4169 ;; This function calls:
  4170 ;;		_Buzzer_Initialization
  4171 ;;		_Buzzer_Main
  4172 ;;		_CC2500_PowerOnInitial
  4173 ;;		_DelayOff_Initialization
  4174 ;;		_DelayOff_Main
  4175 ;;		_DimmerLights_Initialization
  4176 ;;		_DimmerLights_Main
  4177 ;;		_Exception_Main
  4178 ;;		_Flash_Memory_Initialization
  4179 ;;		_Flash_Memory_Main
  4180 ;;		_LED_Initialization
  4181 ;;		_LED_Main
  4182 ;;		_Load_Initialization
  4183 ;;		_Load_Main
  4184 ;;		_Mcu_Initialization
  4185 ;;		_RF_Initialization
  4186 ;;		_RF_Main
  4187 ;;		_Switch_Initialization
  4188 ;;		_Switch_Main
  4189 ;;		_Temp_Initialization
  4190 ;;		_Temp_Main
  4191 ;;		_WDT_Main
  4192 ;;		_getLoad_AD
  4193 ;;		_getTemp_AD
  4194 ;;		_myMain_Initialization
  4195 ;;		_my_MainTimer
  4196 ;; This function is called by:
  4197 ;;		Startup code after reset
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _main
  4203  1554                     _main:	
  4204                           
  4205                           ;Main_B1.c: 8: myMain_Initialization();
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4209  1554  319D  2511  3195   	fcall	_myMain_Initialization
  4210                           
  4211                           ;Main_B1.c: 9: Mcu_Initialization();
  4212  1557  319C  24A1  3195   	fcall	_Mcu_Initialization
  4213                           
  4214                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4215  155A  3186  2621  3195   	fcall	_Flash_Memory_Initialization
  4216                           
  4217                           ;Main_B1.c: 11: LED_Initialization();
  4218  155D  319A  226E  3195   	fcall	_LED_Initialization
  4219                           
  4220                           ;Main_B1.c: 12: Buzzer_Initialization();
  4221  1560  319A  2254  3195   	fcall	_Buzzer_Initialization
  4222                           
  4223                           ;Main_B1.c: 14: ;;
  4224                           ;Main_B1.c: 15: Temp_Initialization();
  4225  1563  319A  2260  3195   	fcall	_Temp_Initialization
  4226                           
  4227                           ;Main_B1.c: 16: Load_Initialization();
  4228  1566  319A  2257  3195   	fcall	_Load_Initialization
  4229                           
  4230                           ;Main_B1.c: 17: ;;
  4231                           ;Main_B1.c: 18: DelayOff_Initialization();
  4232  1569  319A  2266  3195   	fcall	_DelayOff_Initialization
  4233                           
  4234                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4235  156C  319A  22A5  3195   	fcall	_DimmerLights_Initialization
  4236                           
  4237                           ;Main_B1.c: 21: ;;
  4238                           ;Main_B1.c: 22: ;;
  4239                           ;Main_B1.c: 23: ;;
  4240                           ;Main_B1.c: 24: Switch_Initialization();
  4241  156F  319A  228A  3195   	fcall	_Switch_Initialization
  4242                           
  4243                           ;Main_B1.c: 25: RF_Initialization();
  4244  1572  319A  225A  3195   	fcall	_RF_Initialization
  4245                           
  4246                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4247  1575  319D  254D  3195   	fcall	_CC2500_PowerOnInitial
  4248  1578                     l10940:	
  4249                           ;Main_B1.c: 27: ;;
  4250                           ;Main_B1.c: 28: ;;
  4251                           ;Main_B1.c: 30: while (1) {
  4252                           
  4253                           
  4254                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4255  1578  0021               	movlb	1	; select bank1
  4256  1579  1C2F               	btfss	_myMain^(0+128),0
  4257  157A  2D83               	goto	l10944
  4258                           
  4259                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4260  157B  3005               	movlw	5
  4261  157C  318A  2221  3195   	fcall	_getLoad_AD
  4262                           
  4263                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4264  157F  3009               	movlw	9
  4265  1580  3191  212E  3195   	fcall	_getTemp_AD
  4266  1583                     l10944:	
  4267                           
  4268                           ;Main_B1.c: 57: }
  4269                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4270  1583  0022               	movlb	2	; select bank2
  4271  1584  1C31               	btfss	_Timer1^(0+256),0
  4272  1585  2D78               	goto	l10940
  4273                           
  4274                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4275  1586  1031               	bcf	_Timer1^(0+256),0
  4276                           
  4277                           ;Main_B1.c: 96: my_MainTimer();
  4278  1587  3193  23CC  3195   	fcall	_my_MainTimer
  4279                           
  4280                           ;Main_B1.c: 97: WDT_Main();
  4281  158A  319C  24B3  3195   	fcall	_WDT_Main
  4282                           
  4283                           ;Main_B1.c: 98: ;;
  4284                           ;Main_B1.c: 99: ;;
  4285                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4286  158D  0021               	movlb	1	; select bank1
  4287  158E  1C2F               	btfss	_myMain^(0+128),0
  4288  158F  2D78               	goto	l10940
  4289                           
  4290                           ;Main_B1.c: 101: Flash_Memory_Main();
  4291  1590  3193  238B  3195   	fcall	_Flash_Memory_Main
  4292                           
  4293                           ;Main_B1.c: 103: LED_Main();
  4294  1593  319A  2272  3195   	fcall	_LED_Main
  4295                           
  4296                           ;Main_B1.c: 104: Buzzer_Main();
  4297  1596  3187  27AE  3195   	fcall	_Buzzer_Main
  4298                           
  4299                           ;Main_B1.c: 106: ;;
  4300                           ;Main_B1.c: 107: Temp_Main();
  4301  1599  319A  2263  3195   	fcall	_Temp_Main
  4302                           
  4303                           ;Main_B1.c: 108: Load_Main();
  4304  159C  3180  204B  3195   	fcall	_Load_Main
  4305                           
  4306                           ;Main_B1.c: 109: ;;
  4307                           ;Main_B1.c: 111: ;;
  4308                           ;Main_B1.c: 112: DimmerLights_Main();
  4309  159F  319E  2683  3195   	fcall	_DimmerLights_Main
  4310                           
  4311                           ;Main_B1.c: 113: Switch_Main();
  4312  15A2  319A  22B3  3195   	fcall	_Switch_Main
  4313                           
  4314                           ;Main_B1.c: 114: ;;
  4315                           ;Main_B1.c: 115: ;;
  4316                           ;Main_B1.c: 117: RF_Main();
  4317  15A5  319A  225D  3195   	fcall	_RF_Main
  4318                           
  4319                           ;Main_B1.c: 118: DelayOff_Main();
  4320  15A8  319A  226A  3195   	fcall	_DelayOff_Main
  4321                           
  4322                           ;Main_B1.c: 119: ;;
  4323                           ;Main_B1.c: 120: ;;
  4324                           ;Main_B1.c: 121: Exception_Main();
  4325  15AB  3185  254C  3195   	fcall	_Exception_Main
  4326  15AE  2D78               	goto	l10940
  4327  15AF                     __end_of_main:	
  4328                           ;Main_B1.c: 128: }
  4329                           ;Main_B1.c: 129: }
  4330                           ;Main_B1.c: 163: }
  4331                           ;Main_B1.c: 164: return (0);
  4332                           ;	Return value of _main is never used
  4333                           
  4334                           
  4335                           	psect	text1
  4336  13CC                     __ptext1:	
  4337 ;; *************** function _my_MainTimer *****************
  4338 ;; Defined at:
  4339 ;;		line 185 in file "../src/Main_B1.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;		None               void
  4346 ;; Registers used:
  4347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;Total ram usage:        1 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    7
  4360 ;; This function calls:
  4361 ;;		_setBuz
  4362 ;;		_setTxData
  4363 ;; This function is called by:
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _my_MainTimer
  4370  13CC                     _my_MainTimer:	
  4371                           
  4372                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4376  13CC  0021               	movlb	1	; select bank1
  4377  13CD  182F               	btfsc	_myMain^(0+128),0
  4378  13CE  2BE6               	goto	l10620
  4379                           
  4380                           ;Main_B1.c: 188: myMain.PowerCount++;
  4381  13CF  3001               	movlw	1
  4382  13D0  0020               	movlb	0	; select bank0
  4383  13D1  00AD               	movwf	??_my_MainTimer
  4384  13D2  082D               	movf	??_my_MainTimer,w
  4385  13D3  0021               	movlb	1	; select bank1
  4386  13D4  07B0               	addwf	(_myMain^(0+128)+1),f
  4387                           
  4388                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4389  13D5  0830               	movf	(_myMain^(0+128)+1),w
  4390  13D6  3A4B               	xorlw	75
  4391  13D7  1D03               	skipz
  4392  13D8  0008               	return
  4393                           
  4394                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4395  13D9  01B0               	clrf	(_myMain^(0+128)+1)
  4396                           
  4397                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4398  13DA  142F               	bsf	_myMain^(0+128),0
  4399                           
  4400                           ;Main_B1.c: 196: setBuz(3, 50);
  4401  13DB  3032               	movlw	50
  4402  13DC  0020               	movlb	0	; select bank0
  4403  13DD  00A9               	movwf	setBuz@time
  4404  13DE  3000               	movlw	0
  4405  13DF  00AA               	movwf	setBuz@time+1
  4406  13E0  3003               	movlw	3
  4407  13E1  3194  24FB         	fcall	_setBuz
  4408                           
  4409                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4410  13E3  0021               	movlb	1	; select bank1
  4411  13E4  162F               	bsf	_myMain^(0+128),4
  4412                           
  4413                           ;Main_B1.c: 206: }
  4414                           ;Main_B1.c: 207: } else {
  4415  13E5  0008               	return
  4416  13E6                     l10620:	
  4417                           
  4418                           ;Main_B1.c: 208: myMain.PowerCount++;
  4419  13E6  3001               	movlw	1
  4420  13E7  0020               	movlb	0	; select bank0
  4421  13E8  00AD               	movwf	??_my_MainTimer
  4422  13E9  082D               	movf	??_my_MainTimer,w
  4423  13EA  0021               	movlb	1	; select bank1
  4424  13EB  07B0               	addwf	(_myMain^(0+128)+1),f
  4425                           
  4426                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4427  13EC  0830               	movf	(_myMain^(0+128)+1),w
  4428  13ED  3A32               	xorlw	50
  4429  13EE  1D03               	skipz
  4430  13EF  2BF4               	goto	l10628
  4431                           
  4432                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4433  13F0  01B0               	clrf	(_myMain^(0+128)+1)
  4434                           
  4435                           ;Main_B1.c: 222: setTxData();
  4436  13F1  318E  2682  3193   	fcall	_setTxData
  4437  13F4                     l10628:	
  4438                           
  4439                           ;Main_B1.c: 226: }
  4440                           ;Main_B1.c: 228: myMain.Count1++;
  4441  13F4  3001               	movlw	1
  4442  13F5  0021               	movlb	1	; select bank1
  4443  13F6  07B3               	addwf	(_myMain^(0+128)+4),f
  4444  13F7  3000               	movlw	0
  4445  13F8  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4446                           
  4447                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4448  13F9  3004               	movlw	4
  4449  13FA  3EAF               	addlw	_myMain& (0+255)
  4450  13FB  0086               	movwf	6
  4451  13FC  0187               	clrf	7
  4452  13FD  3F40               	moviw [0]fsr1
  4453  13FE  3A32               	xorlw	50
  4454  13FF  1D03               	skipz
  4455  1400  2C03               	goto	u12305
  4456  1401  3F41               	moviw [1]fsr1
  4457  1402  3A00               	xorlw	0
  4458  1403                     u12305:	
  4459  1403  1D03               	skipz
  4460  1404  0008               	return
  4461                           
  4462                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4463  1405  01B3               	clrf	(_myMain^(0+128)+4)
  4464  1406  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4465                           
  4466                           ;Main_B1.c: 242: if (myMain.Flag) {
  4467  1407  1CAF               	btfss	_myMain^(0+128),1
  4468  1408  2C0B               	goto	l1447
  4469                           
  4470                           ;Main_B1.c: 243: myMain.Flag = 0;
  4471  1409  10AF               	bcf	_myMain^(0+128),1
  4472                           
  4473                           ;Main_B1.c: 252: } else {
  4474  140A  0008               	return
  4475  140B                     l1447:	
  4476                           
  4477                           ;Main_B1.c: 253: myMain.Flag = 1;
  4478  140B  14AF               	bsf	_myMain^(0+128),1
  4479  140C  0008               	return
  4480  140D                     __end_of_my_MainTimer:	
  4481                           
  4482                           	psect	text2
  4483  1D11                     __ptext2:	
  4484 ;; *************** function _myMain_Initialization *****************
  4485 ;; Defined at:
  4486 ;;		line 170 in file "../src/Main_B1.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;		None               void
  4493 ;; Registers used:
  4494 ;;		wreg, fsr1l, fsr1h
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;Total ram usage:        1 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    5
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_main
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           
  4515                           ;psect for function _myMain_Initialization
  4516  1D11                     _myMain_Initialization:	
  4517                           
  4518                           ;Main_B1.c: 173: product = &_product;
  4519                           
  4520                           ;incstack = 0
  4521                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4522  1D11  3020               	movlw	__product& (0+255)
  4523  1D12  0020               	movlb	0	; select bank0
  4524  1D13  00A0               	movwf	??_myMain_Initialization
  4525  1D14  0820               	movf	??_myMain_Initialization,w
  4526  1D15  0021               	movlb	1	; select bank1
  4527  1D16  00EC               	movwf	_product^(0+128)
  4528                           
  4529                           ;Main_B1.c: 174: product->Data[20] = 209;
  4530  1D17  30D1               	movlw	209
  4531  1D18  0020               	movlb	0	; select bank0
  4532  1D19  00A0               	movwf	??_myMain_Initialization
  4533  1D1A  0021               	movlb	1	; select bank1
  4534  1D1B  086C               	movf	_product^(0+128),w
  4535  1D1C  3E14               	addlw	20
  4536  1D1D  0086               	movwf	6
  4537  1D1E  3002               	movlw	2	; select bank4/5
  4538  1D1F  0087               	movwf	7
  4539  1D20  0020               	movlb	0	; select bank0
  4540  1D21  0820               	movf	??_myMain_Initialization,w
  4541  1D22  0081               	movwf	1
  4542  1D23  0008               	return
  4543  1D24                     __end_of_myMain_Initialization:	
  4544                           
  4545                           	psect	text3
  4546  112E                     __ptext3:	
  4547 ;; *************** function _getTemp_AD *****************
  4548 ;; Defined at:
  4549 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  channel         1    wreg     unsigned char 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  channel         1    5[BANK0 ] unsigned char 
  4554 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;		None               void
  4557 ;; Registers used:
  4558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4565 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;Total ram usage:        4 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    7
  4571 ;; This function calls:
  4572 ;;		_getAD
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           
  4579                           ;psect for function _getTemp_AD
  4580  112E                     _getTemp_AD:	
  4581                           
  4582                           ;incstack = 0
  4583                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4584                           ;getTemp_AD@channel stored from wreg
  4585  112E  0020               	movlb	0	; select bank0
  4586  112F  00A5               	movwf	getTemp_AD@channel
  4587                           
  4588                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4589  1130  01A6               	clrf	getTemp_AD@ADRES
  4590  1131  01A7               	clrf	getTemp_AD@ADRES+1
  4591                           
  4592                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4593  1132  0021               	movlb	1	; select bank1
  4594  1133  1D5A               	btfss	_Temp^(0+128),2
  4595  1134  0008               	return
  4596                           
  4597                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4598  1135  30F0               	movlw	240
  4599  1136  0020               	movlb	0	; select bank0
  4600  1137  00A4               	movwf	??_getTemp_AD
  4601  1138  0824               	movf	??_getTemp_AD,w
  4602  1139  00A0               	movwf	getAD@adcon1
  4603  113A  0825               	movf	getTemp_AD@channel,w
  4604  113B  319F  2734  3191   	fcall	_getAD
  4605  113E  0020               	movlb	0	; select bank0
  4606  113F  0821               	movf	?_getAD+1,w
  4607  1140  01A7               	clrf	getTemp_AD@ADRES+1
  4608  1141  07A7               	addwf	getTemp_AD@ADRES+1,f
  4609  1142  0820               	movf	?_getAD,w
  4610  1143  01A6               	clrf	getTemp_AD@ADRES
  4611  1144  07A6               	addwf	getTemp_AD@ADRES,f
  4612                           
  4613                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4614  1145  0827               	movf	getTemp_AD@ADRES+1,w
  4615  1146  0426               	iorwf	getTemp_AD@ADRES,w
  4616  1147  1903               	skipnz
  4617  1148  0008               	return
  4618                           
  4619                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4620  1149  0827               	movf	getTemp_AD@ADRES+1,w
  4621  114A  0021               	movlb	1	; select bank1
  4622  114B  0263               	subwf	((_Temp+1)^(0+128)+8),w
  4623  114C  1D03               	skipz
  4624  114D  2952               	goto	u12265
  4625  114E  0020               	movlb	0	; select bank0
  4626  114F  0826               	movf	getTemp_AD@ADRES,w
  4627  1150  0021               	movlb	1	; select bank1
  4628  1151  0262               	subwf	(_Temp^(0+128)+8),w
  4629  1152                     u12265:	
  4630  1152  1803               	skipnc
  4631  1153  0008               	return
  4632                           
  4633                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4634  1154  0020               	movlb	0	; select bank0
  4635  1155  0827               	movf	getTemp_AD@ADRES+1,w
  4636  1156  0021               	movlb	1	; select bank1
  4637  1157  01E3               	clrf	((_Temp+1)^(0+128)+8)
  4638  1158  07E3               	addwf	((_Temp+1)^(0+128)+8),f
  4639  1159  0020               	movlb	0	; select bank0
  4640  115A  0826               	movf	getTemp_AD@ADRES,w
  4641  115B  0021               	movlb	1	; select bank1
  4642  115C  01E2               	clrf	(_Temp^(0+128)+8)
  4643  115D  07E2               	addwf	(_Temp^(0+128)+8),f
  4644  115E  0008               	return
  4645  115F                     __end_of_getTemp_AD:	
  4646                           
  4647                           	psect	text4
  4648  0A21                     __ptext4:	
  4649 ;; *************** function _getLoad_AD *****************
  4650 ;; Defined at:
  4651 ;;		line 16 in file "../src/OverLoad_B1.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  channel         1    wreg     unsigned char 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  channel         1    6[BANK0 ] unsigned char 
  4656 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4657 ;;  i               1   11[BANK0 ] unsigned char 
  4658 ;;  j               1    8[BANK0 ] unsigned char 
  4659 ;;  k               1    7[BANK0 ] unsigned char 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;		None               void
  4662 ;; Registers used:
  4663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;Total ram usage:        8 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    7
  4676 ;; This function calls:
  4677 ;;		_getAD
  4678 ;; This function is called by:
  4679 ;;		_main
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           
  4684                           ;psect for function _getLoad_AD
  4685  0A21                     _getLoad_AD:	
  4686                           
  4687                           ;incstack = 0
  4688                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4689                           ;getLoad_AD@channel stored from wreg
  4690  0A21  0020               	movlb	0	; select bank0
  4691  0A22  00A6               	movwf	getLoad_AD@channel
  4692                           
  4693                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4694  0A23  01AB               	clrf	getLoad_AD@i
  4695  0A24  01A8               	clrf	getLoad_AD@j
  4696  0A25  01A7               	clrf	getLoad_AD@k
  4697                           
  4698                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4699  0A26  01A9               	clrf	getLoad_AD@ADRES
  4700  0A27  01AA               	clrf	getLoad_AD@ADRES+1
  4701                           
  4702                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4703  0A28  0022               	movlb	2	; select bank2
  4704  0A29  1E36               	btfss	_Load^(0+256),4
  4705  0A2A  0008               	return
  4706                           
  4707                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4708  0A2B  30F3               	movlw	243
  4709  0A2C  0020               	movlb	0	; select bank0
  4710  0A2D  00A4               	movwf	??_getLoad_AD
  4711  0A2E  0824               	movf	??_getLoad_AD,w
  4712  0A2F  00A0               	movwf	getAD@adcon1
  4713  0A30  0826               	movf	getLoad_AD@channel,w
  4714  0A31  319F  2734  318A   	fcall	_getAD
  4715  0A34  0020               	movlb	0	; select bank0
  4716  0A35  0821               	movf	?_getAD+1,w
  4717  0A36  01AA               	clrf	getLoad_AD@ADRES+1
  4718  0A37  07AA               	addwf	getLoad_AD@ADRES+1,f
  4719  0A38  0820               	movf	?_getAD,w
  4720  0A39  01A9               	clrf	getLoad_AD@ADRES
  4721  0A3A  07A9               	addwf	getLoad_AD@ADRES,f
  4722                           
  4723                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4724  0A3B  01AB               	clrf	getLoad_AD@i
  4725  0A3C  3004               	movlw	4
  4726  0A3D  022B               	subwf	getLoad_AD@i,w
  4727  0A3E  1803               	btfsc	3,0
  4728  0A3F  2A67               	goto	l10574
  4729  0A40                     l10562:	
  4730                           
  4731                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4732  0A40  352B               	lslf	getLoad_AD@i,w
  4733  0A41  3E41               	addlw	(_Load+11)& (0+255)
  4734  0A42  0086               	movwf	6
  4735  0A43  3001               	movlw	1	; select bank2/3
  4736  0A44  0087               	movwf	7
  4737  0A45  3F40               	moviw [0]fsr1
  4738  0A46  00A4               	movwf	??_getLoad_AD
  4739  0A47  3F41               	moviw [1]fsr1
  4740  0A48  00A5               	movwf	??_getLoad_AD+1
  4741  0A49  082A               	movf	getLoad_AD@ADRES+1,w
  4742  0A4A  0225               	subwf	??_getLoad_AD+1,w
  4743  0A4B  1D03               	skipz
  4744  0A4C  2A4F               	goto	u12165
  4745  0A4D  0829               	movf	getLoad_AD@ADRES,w
  4746  0A4E  0224               	subwf	??_getLoad_AD,w
  4747  0A4F                     u12165:	
  4748  0A4F  1803               	skipnc
  4749  0A50  2A5F               	goto	l10570
  4750  0A51  08A8               	movf	getLoad_AD@j,f
  4751  0A52  1D03               	skipz
  4752  0A53  2A5F               	goto	l10570
  4753                           
  4754                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4755  0A54  352B               	lslf	getLoad_AD@i,w
  4756  0A55  3E41               	addlw	(_Load+11)& (0+255)
  4757  0A56  0086               	movwf	6
  4758  0A57  3001               	movlw	1	; select bank2/3
  4759  0A58  0087               	movwf	7
  4760  0A59  0829               	movf	getLoad_AD@ADRES,w
  4761  0A5A  3FC0               	movwi [0]fsr1
  4762  0A5B  082A               	movf	getLoad_AD@ADRES+1,w
  4763  0A5C  3FC1               	movwi [1]fsr1
  4764                           
  4765                           ;OverLoad_B1.c: 25: j = 1;
  4766  0A5D  01A8               	clrf	getLoad_AD@j
  4767  0A5E  0AA8               	incf	getLoad_AD@j,f
  4768  0A5F                     l10570:	
  4769  0A5F  3001               	movlw	1
  4770  0A60  00A4               	movwf	??_getLoad_AD
  4771  0A61  0824               	movf	??_getLoad_AD,w
  4772  0A62  07AB               	addwf	getLoad_AD@i,f
  4773  0A63  3004               	movlw	4
  4774  0A64  022B               	subwf	getLoad_AD@i,w
  4775  0A65  1C03               	skipc
  4776  0A66  2A40               	goto	l10562
  4777  0A67                     l10574:	
  4778                           
  4779                           ;OverLoad_B1.c: 26: }
  4780                           ;OverLoad_B1.c: 27: }
  4781                           ;OverLoad_B1.c: 28: if (j == 0) {
  4782  0A67  08A8               	movf	getLoad_AD@j,f
  4783  0A68  1D03               	skipz
  4784  0A69  0008               	return
  4785                           
  4786                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4787  0A6A  01AB               	clrf	getLoad_AD@i
  4788  0A6B                     L1:	
  4789  0A6B  3004               	movlw	4
  4790  0A6C  022B               	subwf	getLoad_AD@i,w
  4791  0A6D  1803               	btfsc	3,0
  4792  0A6E  0008               	return
  4793                           
  4794                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4795  0A6F  352B               	lslf	getLoad_AD@i,w
  4796  0A70  3E4B               	addlw	(_Load+21)& (0+255)
  4797  0A71  0086               	movwf	6
  4798  0A72  3001               	movlw	1	; select bank2/3
  4799  0A73  0087               	movwf	7
  4800  0A74  3F40               	moviw [0]fsr1
  4801  0A75  00A4               	movwf	??_getLoad_AD
  4802  0A76  3F41               	moviw [1]fsr1
  4803  0A77  00A5               	movwf	??_getLoad_AD+1
  4804  0A78  0825               	movf	??_getLoad_AD+1,w
  4805  0A79  022A               	subwf	getLoad_AD@ADRES+1,w
  4806  0A7A  1D03               	skipz
  4807  0A7B  2A7E               	goto	u12215
  4808  0A7C  0824               	movf	??_getLoad_AD,w
  4809  0A7D  0229               	subwf	getLoad_AD@ADRES,w
  4810  0A7E                     u12215:	
  4811  0A7E  1803               	skipnc
  4812  0A7F  2A8E               	goto	l10590
  4813  0A80  08A7               	movf	getLoad_AD@k,f
  4814  0A81  1D03               	skipz
  4815  0A82  2A8E               	goto	l10590
  4816                           
  4817                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4818  0A83  352B               	lslf	getLoad_AD@i,w
  4819  0A84  3E4B               	addlw	(_Load+21)& (0+255)
  4820  0A85  0086               	movwf	6
  4821  0A86  3001               	movlw	1	; select bank2/3
  4822  0A87  0087               	movwf	7
  4823  0A88  0829               	movf	getLoad_AD@ADRES,w
  4824  0A89  3FC0               	movwi [0]fsr1
  4825  0A8A  082A               	movf	getLoad_AD@ADRES+1,w
  4826  0A8B  3FC1               	movwi [1]fsr1
  4827                           
  4828                           ;OverLoad_B1.c: 32: k = 1;
  4829  0A8C  01A7               	clrf	getLoad_AD@k
  4830  0A8D  0AA7               	incf	getLoad_AD@k,f
  4831  0A8E                     l10590:	
  4832  0A8E  3001               	movlw	1
  4833  0A8F  00A4               	movwf	??_getLoad_AD
  4834  0A90  0824               	movf	??_getLoad_AD,w
  4835  0A91  07AB               	addwf	getLoad_AD@i,f
  4836  0A92  2A6B               	goto	L1
  4837  0A93                     __end_of_getLoad_AD:	
  4838                           
  4839                           	psect	text5
  4840  1F34                     __ptext5:	
  4841 ;; *************** function _getAD *****************
  4842 ;; Defined at:
  4843 ;;		line 461 in file "../src/MCU_B1.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  adcon0          1    wreg     unsigned char 
  4846 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  2    0[BANK0 ] int 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4858 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;Total ram usage:        4 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    6
  4865 ;; This function calls:
  4866 ;;		_Timeout_Counter
  4867 ;;		_set_TimeoutCleared
  4868 ;; This function is called by:
  4869 ;;		_getLoad_AD
  4870 ;;		_getTemp_AD
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _getAD
  4876  1F34                     _getAD:	
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4880                           ;getAD@adcon0 stored from wreg
  4881  1F34  0020               	movlb	0	; select bank0
  4882  1F35  00A3               	movwf	getAD@adcon0
  4883                           
  4884                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4885  1F36  0823               	movf	getAD@adcon0,w
  4886  1F37  0021               	movlb	1	; select bank1
  4887  1F38  009D               	movwf	29	;volatile
  4888                           
  4889                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4890  1F39  0020               	movlb	0	; select bank0
  4891  1F3A  0820               	movf	getAD@adcon1,w
  4892  1F3B  0021               	movlb	1	; select bank1
  4893  1F3C  009E               	movwf	30	;volatile
  4894                           
  4895                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4896  1F3D  149D               	bsf	29,1	;volatile
  4897                           
  4898                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4899  1F3E  2F42               	goto	l10046
  4900  1F3F                     l10044:	
  4901                           
  4902                           ;MCU_B1.c: 466: Timeout_Counter();
  4903  1F3F  319D  2562  319F   	fcall	_Timeout_Counter
  4904  1F42                     l10046:	
  4905  1F42  0021               	movlb	1	; select bank1
  4906  1F43  1C9D               	btfss	29,1	;volatile
  4907  1F44  2F47               	goto	l10050
  4908  1F45  1D39               	btfss	(_myMain^(0+128)+10),2
  4909  1F46  2F3F               	goto	l10044
  4910  1F47                     l10050:	
  4911                           
  4912                           ;MCU_B1.c: 467: };
  4913                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4914  1F47  319A  228E         	fcall	_set_TimeoutCleared
  4915                           
  4916                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4917  1F49  0021               	movlb	1	; select bank1
  4918  1F4A  081C               	movf	28,w	;volatile
  4919  1F4B  0020               	movlb	0	; select bank0
  4920  1F4C  01A1               	clrf	?_getAD+1
  4921  1F4D  07A1               	addwf	?_getAD+1,f
  4922  1F4E  0021               	movlb	1	; select bank1
  4923  1F4F  081B               	movf	27,w	;volatile
  4924  1F50  0020               	movlb	0	; select bank0
  4925  1F51  01A0               	clrf	?_getAD
  4926  1F52  07A0               	addwf	?_getAD,f
  4927  1F53  0008               	return
  4928  1F54                     __end_of_getAD:	
  4929                           
  4930                           	psect	text6
  4931  1CB3                     __ptext6:	
  4932 ;; *************** function _WDT_Main *****************
  4933 ;; Defined at:
  4934 ;;		line 1116 in file "../src/MCU_B1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        1 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		_WDT_Clearing
  4957 ;; This function is called by:
  4958 ;;		_main
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _WDT_Main
  4964  1CB3                     _WDT_Main:	
  4965                           
  4966                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4967                           
  4968                           ;incstack = 0
  4969                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4970  1CB3  0021               	movlb	1	; select bank1
  4971  1CB4  1C48               	btfss	_WDT^(0+128),0
  4972  1CB5  0008               	return
  4973                           
  4974                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4975  1CB6  3001               	movlw	1
  4976  1CB7  02C9               	subwf	(_WDT^(0+128)+1),f
  4977  1CB8  0849               	movf	(_WDT^(0+128)+1),w
  4978  1CB9  3AFF               	xorlw	255
  4979  1CBA  1903               	skipnz
  4980  1CBB  0008               	return
  4981                           
  4982                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4983  1CBC  3064               	movlw	100
  4984  1CBD  0020               	movlb	0	; select bank0
  4985  1CBE  00A0               	movwf	??_WDT_Main
  4986  1CBF  0820               	movf	??_WDT_Main,w
  4987  1CC0  0021               	movlb	1	; select bank1
  4988  1CC1  00C9               	movwf	(_WDT^(0+128)+1)
  4989                           
  4990                           ;MCU_B1.c: 1120: WDT_Clearing();
  4991  1CC2  3180  2002         	fcall	_WDT_Clearing
  4992  1CC4  0008               	return
  4993  1CC5                     __end_of_WDT_Main:	
  4994                           
  4995                           	psect	text7
  4996  0002                     __ptext7:	
  4997 ;; *************** function _WDT_Clearing *****************
  4998 ;; Defined at:
  4999 ;;		line 1126 in file "../src/MCU_B1.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;		None
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;		None               void
  5006 ;; Registers used:
  5007 ;;		None
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;Total ram usage:        0 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    5
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_WDT_Main
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _WDT_Clearing
  5029  0002                     _WDT_Clearing:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _WDT_Clearing: []
  5033  0002  0064               	clrwdt	;# 
  5034  0003  0008               	return
  5035  0004                     __end_of_WDT_Clearing:	
  5036                           
  5037                           	psect	text8
  5038  1A63                     __ptext8:	
  5039 ;; *************** function _Temp_Main *****************
  5040 ;; Defined at:
  5041 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;		None               void
  5048 ;; Registers used:
  5049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5059 ;;Total ram usage:        0 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    8
  5062 ;; This function calls:
  5063 ;;		_setTemp_Main
  5064 ;; This function is called by:
  5065 ;;		_main
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           
  5070                           ;psect for function _Temp_Main
  5071  1A63                     _Temp_Main:	
  5072                           
  5073                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5074                           
  5075                           ;incstack = 0
  5076                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5077  1A63  3186  26EB         	fcall	_setTemp_Main
  5078  1A65  0008               	return
  5079  1A66                     __end_of_Temp_Main:	
  5080                           
  5081                           	psect	text9
  5082  06EB                     __ptext9:	
  5083 ;; *************** function _setTemp_Main *****************
  5084 ;; Defined at:
  5085 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;		None
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  AD              2   76[BANK0 ] unsigned int 
  5090 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5091 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5092 ;;  TempGO          1   71[BANK0 ] unsigned char 
  5093 ;;  error           1   70[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        9 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    7
  5110 ;; This function calls:
  5111 ;;		_getMain_All_Error_Status
  5112 ;;		_getMain_All_LightsStatus
  5113 ;;		_setBuz
  5114 ;;		_setProductData
  5115 ;; This function is called by:
  5116 ;;		_Temp_Main
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _setTemp_Main
  5122  06EB                     _setTemp_Main:	
  5123                           
  5124                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5125                           
  5126                           ;incstack = 0
  5127                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5128  06EB  3000               	movlw	0
  5129  06EC  3191  215F  3186   	fcall	_getMain_All_Error_Status
  5130  06EF  0020               	movlb	0	; select bank0
  5131  06F0  00E5               	movwf	??_setTemp_Main
  5132  06F1  0865               	movf	??_setTemp_Main,w
  5133  06F2  00E6               	movwf	setTemp_Main@error
  5134                           
  5135                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5136  06F3  01E8               	clrf	setTemp_Main@SafeValue
  5137  06F4  01E9               	clrf	setTemp_Main@SafeValue+1
  5138  06F5  01EA               	clrf	setTemp_Main@DangerValue
  5139  06F6  01EB               	clrf	setTemp_Main@DangerValue+1
  5140                           
  5141                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5142  06F7  319A  22E5  3186   	fcall	_getMain_All_LightsStatus
  5143  06FA  0020               	movlb	0	; select bank0
  5144  06FB  00E5               	movwf	??_setTemp_Main
  5145  06FC  0865               	movf	??_setTemp_Main,w
  5146  06FD  00E7               	movwf	setTemp_Main@TempGO
  5147                           
  5148                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5149  06FE  0021               	movlb	1	; select bank1
  5150  06FF  1C5A               	btfss	_Temp^(0+128),0
  5151  0700  2FAA               	goto	l1786
  5152                           
  5153                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5154  0701  195A               	btfsc	_Temp^(0+128),2
  5155  0702  2F20               	goto	l10150
  5156                           
  5157                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5158  0703  0020               	movlb	0	; select bank0
  5159  0704  0867               	movf	setTemp_Main@TempGO,w
  5160  0705  3A01               	xorlw	1
  5161  0706  1D03               	skipz
  5162  0707  2F0B               	goto	l1792
  5163  0708  0021               	movlb	1	; select bank1
  5164  0709  1CDA               	btfss	_Temp^(0+128),1
  5165  070A  2F0E               	goto	l10142
  5166  070B                     l1792:	
  5167  070B  0021               	movlb	1	; select bank1
  5168  070C  1CDA               	btfss	_Temp^(0+128),1
  5169  070D  2F1D               	goto	l10148
  5170  070E                     l10142:	
  5171                           
  5172                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5173  070E  3001               	movlw	1
  5174  070F  07DB               	addwf	(_Temp^(0+128)+1),f
  5175  0710  3000               	movlw	0
  5176  0711  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5177                           
  5178                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5179  0712  3000               	movlw	0
  5180  0713  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5181  0714  30FA               	movlw	250
  5182  0715  1903               	skipnz
  5183  0716  025B               	subwf	(_Temp^(0+128)+1),w
  5184  0717  1C03               	skipc
  5185  0718  0008               	return
  5186                           
  5187                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5188  0719  01DB               	clrf	(_Temp^(0+128)+1)
  5189  071A  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5190                           
  5191                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5192  071B  155A               	bsf	_Temp^(0+128),2
  5193                           
  5194                           ;OverTemperature_B1.c: 83: }
  5195                           ;OverTemperature_B1.c: 84: } else {
  5196  071C  0008               	return
  5197  071D                     l10148:	
  5198                           
  5199                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5200  071D  01DB               	clrf	(_Temp^(0+128)+1)
  5201  071E  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5202                           
  5203                           ;OverTemperature_B1.c: 86: }
  5204                           ;OverTemperature_B1.c: 87: } else {
  5205  071F  0008               	return
  5206  0720                     l10150:	
  5207                           
  5208                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5209  0720  3001               	movlw	1
  5210  0721  07DB               	addwf	(_Temp^(0+128)+1),f
  5211  0722  3000               	movlw	0
  5212  0723  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5213                           
  5214                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5215  0724  3000               	movlw	0
  5216  0725  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5217  0726  3005               	movlw	5
  5218  0727  1903               	skipnz
  5219  0728  025B               	subwf	(_Temp^(0+128)+1),w
  5220  0729  1C03               	skipc
  5221  072A  0008               	return
  5222                           
  5223                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5224  072B  01DB               	clrf	(_Temp^(0+128)+1)
  5225  072C  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5226                           
  5227                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5228  072D  3008               	movlw	8
  5229  072E  3EDA               	addlw	_Temp& (0+255)
  5230  072F  0086               	movwf	6
  5231  0730  0187               	clrf	7
  5232  0731  0016               	moviw fsr1++
  5233  0732  0401               	iorwf	1,w
  5234  0733  1903               	skipnz
  5235  0734  2FA2               	goto	l1797
  5236                           
  5237                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5238  0735  115A               	bcf	_Temp^(0+128),2
  5239                           
  5240                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5241  0736  0863               	movf	((_Temp+1)^(0+128)+8),w
  5242  0737  0020               	movlb	0	; select bank0
  5243  0738  01ED               	clrf	setTemp_Main@AD+1
  5244  0739  07ED               	addwf	setTemp_Main@AD+1,f
  5245  073A  0021               	movlb	1	; select bank1
  5246  073B  0862               	movf	(_Temp^(0+128)+8),w
  5247  073C  0020               	movlb	0	; select bank0
  5248  073D  01EC               	clrf	setTemp_Main@AD
  5249  073E  07EC               	addwf	setTemp_Main@AD,f
  5250                           
  5251                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5252  073F  3090               	movlw	144
  5253  0740  00E8               	movwf	setTemp_Main@SafeValue
  5254  0741  3001               	movlw	1
  5255  0742  00E9               	movwf	setTemp_Main@SafeValue+1
  5256                           
  5257                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5258  0743  3059               	movlw	89
  5259  0744  00EA               	movwf	setTemp_Main@DangerValue
  5260  0745  3001               	movlw	1
  5261  0746  00EB               	movwf	setTemp_Main@DangerValue+1
  5262                           
  5263                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5264  0747  0021               	movlb	1	; select bank1
  5265  0748  1CDA               	btfss	_Temp^(0+128),1
  5266  0749  2F68               	goto	l10180
  5267                           
  5268                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5269  074A  0020               	movlb	0	; select bank0
  5270  074B  0869               	movf	setTemp_Main@SafeValue+1,w
  5271  074C  026D               	subwf	setTemp_Main@AD+1,w
  5272  074D  1D03               	skipz
  5273  074E  2F51               	goto	u11485
  5274  074F  0868               	movf	setTemp_Main@SafeValue,w
  5275  0750  026C               	subwf	setTemp_Main@AD,w
  5276  0751                     u11485:	
  5277  0751  1C03               	skipc
  5278  0752  2F7D               	goto	l10190
  5279                           
  5280                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5281  0753  3001               	movlw	1
  5282  0754  00E5               	movwf	??_setTemp_Main
  5283  0755  0865               	movf	??_setTemp_Main,w
  5284  0756  0021               	movlb	1	; select bank1
  5285  0757  07DD               	addwf	(_Temp^(0+128)+3),f
  5286                           
  5287                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5288  0758  3003               	movlw	3
  5289  0759  025D               	subwf	(_Temp^(0+128)+3),w
  5290  075A  1C03               	skipc
  5291  075B  2F7F               	goto	l10192
  5292                           
  5293                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5294  075C  01DD               	clrf	(_Temp^(0+128)+3)
  5295                           
  5296                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5297  075D  10DA               	bcf	_Temp^(0+128),1
  5298                           
  5299                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5300  075E  3064               	movlw	100
  5301  075F  0020               	movlb	0	; select bank0
  5302  0760  00A9               	movwf	setBuz@time
  5303  0761  3000               	movlw	0
  5304  0762  00AA               	movwf	setBuz@time+1
  5305  0763  3002               	movlw	2
  5306  0764  3194  24FB  3186   	fcall	_setBuz
  5307                           
  5308                           ;OverTemperature_B1.c: 126: }
  5309                           ;OverTemperature_B1.c: 127: } else {
  5310  0767  2F7F               	goto	l10192
  5311  0768                     l10180:	
  5312                           ;OverTemperature_B1.c: 129: }
  5313                           ;OverTemperature_B1.c: 130: } else {
  5314                           
  5315                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5316                           
  5317                           
  5318                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5319  0768  0020               	movlb	0	; select bank0
  5320  0769  086D               	movf	setTemp_Main@AD+1,w
  5321  076A  026B               	subwf	setTemp_Main@DangerValue+1,w
  5322  076B  1D03               	skipz
  5323  076C  2F6F               	goto	u11505
  5324  076D  086C               	movf	setTemp_Main@AD,w
  5325  076E  026A               	subwf	setTemp_Main@DangerValue,w
  5326  076F                     u11505:	
  5327  076F  1C03               	skipc
  5328  0770  2F7D               	goto	l10190
  5329                           
  5330                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5331  0771  3001               	movlw	1
  5332  0772  00E5               	movwf	??_setTemp_Main
  5333  0773  0865               	movf	??_setTemp_Main,w
  5334  0774  0021               	movlb	1	; select bank1
  5335  0775  07DD               	addwf	(_Temp^(0+128)+3),f
  5336                           
  5337                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5338  0776  3003               	movlw	3
  5339  0777  025D               	subwf	(_Temp^(0+128)+3),w
  5340  0778  1C03               	skipc
  5341  0779  2F7F               	goto	l10192
  5342                           
  5343                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5344  077A  01DD               	clrf	(_Temp^(0+128)+3)
  5345                           
  5346                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5347  077B  14DA               	bsf	_Temp^(0+128),1
  5348                           
  5349                           ;OverTemperature_B1.c: 136: }
  5350                           ;OverTemperature_B1.c: 137: } else {
  5351  077C  2F7F               	goto	l10192
  5352  077D                     l10190:	
  5353                           
  5354                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5355  077D  0021               	movlb	1	; select bank1
  5356  077E  01DD               	clrf	(_Temp^(0+128)+3)
  5357  077F                     l10192:	
  5358                           
  5359                           ;OverTemperature_B1.c: 139: }
  5360                           ;OverTemperature_B1.c: 140: }
  5361                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5362  077F  0020               	movlb	0	; select bank0
  5363  0780  086D               	movf	setTemp_Main@AD+1,w
  5364  0781  00E5               	movwf	??_setTemp_Main
  5365  0782  0865               	movf	??_setTemp_Main,w
  5366  0783  00E2               	movwf	setProductData@value
  5367  0784  3018               	movlw	24
  5368  0785  319B  233E  3186   	fcall	_setProductData
  5369                           
  5370                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5371  0788  0020               	movlb	0	; select bank0
  5372  0789  086C               	movf	setTemp_Main@AD,w
  5373  078A  00E5               	movwf	??_setTemp_Main
  5374  078B  0865               	movf	??_setTemp_Main,w
  5375  078C  00E2               	movwf	setProductData@value
  5376  078D  3019               	movlw	25
  5377  078E  319B  233E  3186   	fcall	_setProductData
  5378                           
  5379                           ;OverTemperature_B1.c: 154: setProductData(2, AD >> 8);
  5380  0791  0020               	movlb	0	; select bank0
  5381  0792  086D               	movf	setTemp_Main@AD+1,w
  5382  0793  00E5               	movwf	??_setTemp_Main
  5383  0794  0865               	movf	??_setTemp_Main,w
  5384  0795  00E2               	movwf	setProductData@value
  5385  0796  3002               	movlw	2
  5386  0797  319B  233E  3186   	fcall	_setProductData
  5387                           
  5388                           ;OverTemperature_B1.c: 155: setProductData(3, AD);
  5389  079A  0020               	movlb	0	; select bank0
  5390  079B  086C               	movf	setTemp_Main@AD,w
  5391  079C  00E5               	movwf	??_setTemp_Main
  5392  079D  0865               	movf	??_setTemp_Main,w
  5393  079E  00E2               	movwf	setProductData@value
  5394  079F  3003               	movlw	3
  5395  07A0  319B  233E         	fcall	_setProductData
  5396  07A2                     l1797:	
  5397                           
  5398                           ;OverTemperature_B1.c: 158: }
  5399                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5400  07A2  0021               	movlb	1	; select bank1
  5401  07A3  01DE               	clrf	(_Temp^(0+128)+4)
  5402  07A4  01DF               	clrf	((_Temp+1)^(0+128)+4)
  5403                           
  5404                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5405  07A5  01E0               	clrf	(_Temp^(0+128)+6)
  5406  07A6  01E1               	clrf	((_Temp+1)^(0+128)+6)
  5407                           
  5408                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5409  07A7  01E2               	clrf	(_Temp^(0+128)+8)
  5410  07A8  01E3               	clrf	((_Temp+1)^(0+128)+8)
  5411                           
  5412                           ;OverTemperature_B1.c: 162: }
  5413                           ;OverTemperature_B1.c: 163: }
  5414                           ;OverTemperature_B1.c: 166: } else {
  5415  07A9  0008               	return
  5416  07AA                     l1786:	
  5417                           
  5418                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5419  07AA  1C2F               	btfss	_myMain^(0+128),0
  5420  07AB  0008               	return
  5421                           
  5422                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5423  07AC  145A               	bsf	_Temp^(0+128),0
  5424  07AD  0008               	return
  5425  07AE                     __end_of_setTemp_Main:	
  5426                           
  5427                           	psect	text10
  5428  1A60                     __ptext10:	
  5429 ;; *************** function _Temp_Initialization *****************
  5430 ;; Defined at:
  5431 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;		None               void
  5438 ;; Registers used:
  5439 ;;		status,2, status,0, pclath, cstack
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    6
  5452 ;; This function calls:
  5453 ;;		_setTemp_Initialization
  5454 ;; This function is called by:
  5455 ;;		_main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _Temp_Initialization
  5461  1A60                     _Temp_Initialization:	
  5462                           
  5463                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5467  1A60  319A  2253         	fcall	_setTemp_Initialization
  5468  1A62  0008               	return
  5469  1A63                     __end_of_Temp_Initialization:	
  5470                           
  5471                           	psect	text11
  5472  1A53                     __ptext11:	
  5473 ;; *************** function _setTemp_Initialization *****************
  5474 ;; Defined at:
  5475 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;		None               void
  5482 ;; Registers used:
  5483 ;;		None
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    5
  5496 ;; This function calls:
  5497 ;;		Nothing
  5498 ;; This function is called by:
  5499 ;;		_Temp_Initialization
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           
  5504                           ;psect for function _setTemp_Initialization
  5505  1A53                     _setTemp_Initialization:	
  5506                           
  5507                           ;incstack = 0
  5508                           ; Regs used in _setTemp_Initialization: []
  5509  1A53  0008               	return
  5510  1A54                     __end_of_setTemp_Initialization:	
  5511                           
  5512                           	psect	text12
  5513  1AB3                     __ptext12:	
  5514 ;; *************** function _Switch_Main *****************
  5515 ;; Defined at:
  5516 ;;		line 76 in file "../src/Switch_B1.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;Total ram usage:        0 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    9
  5537 ;; This function calls:
  5538 ;;		_TouchPower
  5539 ;;		_setSw_Main
  5540 ;; This function is called by:
  5541 ;;		_main
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _Switch_Main
  5547  1AB3                     _Switch_Main:	
  5548                           
  5549                           ;Switch_B1.c: 79: setSw_Main(1);
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5553  1AB3  3001               	movlw	1
  5554  1AB4  3181  21FD  319A   	fcall	_setSw_Main
  5555                           
  5556                           ;Switch_B1.c: 91: TouchPower();
  5557  1AB7  319D  2577         	fcall	_TouchPower
  5558  1AB9  0008               	return
  5559  1ABA                     __end_of_Switch_Main:	
  5560                           
  5561                           	psect	text13
  5562  01FD                     __ptext13:	
  5563 ;; *************** function _setSw_Main *****************
  5564 ;; Defined at:
  5565 ;;		line 117 in file "../src/Switch_B1.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  sw              1    wreg     unsigned char 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  sw              1   17[BANK0 ] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;		None               void
  5572 ;; Registers used:
  5573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;Total ram usage:        3 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    8
  5586 ;; This function calls:
  5587 ;;		_SwPointSelect
  5588 ;;		_getMain_All_Error_Status
  5589 ;;		_getSw_KeyStatus
  5590 ;;		_setBuz
  5591 ;;		_setDimmerLights_DimmingOn
  5592 ;;		_setDimmerLights_SwOff
  5593 ;;		_setDimmerLights_SwOn
  5594 ;;		_setRF_Learn
  5595 ;; This function is called by:
  5596 ;;		_Switch_Main
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           
  5601                           ;psect for function _setSw_Main
  5602  01FD                     _setSw_Main:	
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5606                           ;setSw_Main@sw stored from wreg
  5607  01FD  0020               	movlb	0	; select bank0
  5608  01FE  00B1               	movwf	setSw_Main@sw
  5609                           
  5610                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5611  01FF  0831               	movf	setSw_Main@sw,w
  5612  0200  319B  239E  3181   	fcall	_SwPointSelect
  5613                           
  5614                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5615  0203  0021               	movlb	1	; select bank1
  5616  0204  0854               	movf	_Sw^(0+128),w
  5617  0205  0086               	movwf	6
  5618  0206  3001               	movlw	1	; select bank2/3
  5619  0207  0087               	movwf	7
  5620  0208  1C01               	btfss	1,0
  5621  0209  2B79               	goto	l2511
  5622                           
  5623                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5624  020A  3000               	movlw	0
  5625  020B  3191  215F  3181   	fcall	_getMain_All_Error_Status
  5626  020E  3800               	iorlw	0
  5627  020F  1D03               	skipz
  5628  0210  2A2F               	goto	l10308
  5629                           
  5630                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5631  0211  0021               	movlb	1	; select bank1
  5632  0212  0A54               	incf	_Sw^(0+128),w
  5633  0213  0086               	movwf	6
  5634  0214  3001               	movlw	1	; select bank2/3
  5635  0215  0087               	movwf	7
  5636  0216  1081               	bcf	1,1
  5637                           
  5638                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5639  0217  0020               	movlb	0	; select bank0
  5640  0218  0831               	movf	setSw_Main@sw,w
  5641  0219  319C  245A  3181   	fcall	_getSw_KeyStatus
  5642  021C  3A01               	xorlw	1
  5643  021D  3000               	movlw	0
  5644  021E  1903               	skipnz
  5645  021F  3001               	movlw	1
  5646  0220  0020               	movlb	0	; select bank0
  5647  0221  00AF               	movwf	??_setSw_Main
  5648  0222  0021               	movlb	1	; select bank1
  5649  0223  0854               	movf	_Sw^(0+128),w
  5650  0224  0086               	movwf	6
  5651  0225  3001               	movlw	1	; select bank2/3
  5652  0226  0087               	movwf	7
  5653  0227  0020               	movlb	0	; select bank0
  5654  0228  0DAF               	rlf	??_setSw_Main,f
  5655  0229  0801               	movf	1,w
  5656  022A  062F               	xorwf	??_setSw_Main,w
  5657  022B  39FD               	andlw	-3
  5658  022C  062F               	xorwf	??_setSw_Main,w
  5659  022D  0081               	movwf	1
  5660                           
  5661                           ;Switch_B1.c: 124: } else {
  5662  022E  2A45               	goto	l2513
  5663  022F                     l10308:	
  5664                           
  5665                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5666  022F  0021               	movlb	1	; select bank1
  5667  0230  0A54               	incf	_Sw^(0+128),w
  5668  0231  0086               	movwf	6
  5669  0232  3001               	movlw	1	; select bank2/3
  5670  0233  0087               	movwf	7
  5671  0234  1881               	btfsc	1,1
  5672  0235  2A45               	goto	l2513
  5673                           
  5674                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5675  0236  0A54               	incf	_Sw^(0+128),w
  5676  0237  0086               	movwf	6
  5677  0238  3001               	movlw	1	; select bank2/3
  5678  0239  0087               	movwf	7
  5679  023A  1481               	bsf	1,1
  5680                           
  5681                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5682  023B  0854               	movf	_Sw^(0+128),w
  5683  023C  0086               	movwf	6
  5684  023D  3001               	movlw	1	; select bank2/3
  5685  023E  0087               	movwf	7
  5686  023F  1081               	bcf	1,1
  5687                           
  5688                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5689  0240  0854               	movf	_Sw^(0+128),w
  5690  0241  0086               	movwf	6
  5691  0242  3001               	movlw	1	; select bank2/3
  5692  0243  0087               	movwf	7
  5693  0244  1501               	bsf	1,2
  5694  0245                     l2513:	
  5695                           
  5696                           ;Switch_B1.c: 130: }
  5697                           ;Switch_B1.c: 131: }
  5698                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5699  0245  0021               	movlb	1	; select bank1
  5700  0246  0854               	movf	_Sw^(0+128),w
  5701  0247  0086               	movwf	6
  5702  0248  3001               	movlw	1	; select bank2/3
  5703  0249  0087               	movwf	7
  5704  024A  1C81               	btfss	1,1
  5705  024B  2B21               	goto	l10358
  5706                           
  5707                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5708  024C  0854               	movf	_Sw^(0+128),w
  5709  024D  0086               	movwf	6
  5710  024E  3001               	movlw	1	; select bank2/3
  5711  024F  0087               	movwf	7
  5712  0250  1901               	btfsc	1,2
  5713  0251  2A78               	goto	l10324
  5714                           
  5715                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5716  0252  3001               	movlw	1
  5717  0253  0020               	movlb	0	; select bank0
  5718  0254  00AF               	movwf	??_setSw_Main
  5719  0255  0021               	movlb	1	; select bank1
  5720  0256  0854               	movf	_Sw^(0+128),w
  5721  0257  3E02               	addlw	2
  5722  0258  0086               	movwf	6
  5723  0259  3001               	movlw	1	; select bank2/3
  5724  025A  0087               	movwf	7
  5725  025B  0020               	movlb	0	; select bank0
  5726  025C  082F               	movf	??_setSw_Main,w
  5727  025D  0781               	addwf	1,f
  5728                           
  5729                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5730  025E  0021               	movlb	1	; select bank1
  5731  025F  0854               	movf	_Sw^(0+128),w
  5732  0260  3E02               	addlw	2
  5733  0261  0086               	movwf	6
  5734  0262  3001               	movlw	1	; select bank2/3
  5735  0263  0087               	movwf	7
  5736  0264  3003               	movlw	3
  5737  0265  0201               	subwf	1,w
  5738  0266  1C03               	skipc
  5739  0267  0008               	return
  5740                           
  5741                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5742  0268  0854               	movf	_Sw^(0+128),w
  5743  0269  3E02               	addlw	2
  5744  026A  0086               	movwf	6
  5745  026B  3001               	movlw	1	; select bank2/3
  5746  026C  0087               	movwf	7
  5747  026D  0181               	clrf	1
  5748                           
  5749                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5750  026E  0854               	movf	_Sw^(0+128),w
  5751  026F  0086               	movwf	6
  5752  0270  3001               	movlw	1	; select bank2/3
  5753  0271  0087               	movwf	7
  5754  0272  1501               	bsf	1,2
  5755                           
  5756                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5757  0273  0020               	movlb	0	; select bank0
  5758  0274  0831               	movf	setSw_Main@sw,w
  5759  0275  3191  21FA         	fcall	_setDimmerLights_SwOn
  5760                           
  5761                           ;Switch_B1.c: 146: }
  5762                           ;Switch_B1.c: 147: } else {
  5763  0277  0008               	return
  5764  0278                     l10324:	
  5765                           
  5766                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5767  0278  0021               	movlb	1	; select bank1
  5768  0279  0854               	movf	_Sw^(0+128),w
  5769  027A  0086               	movwf	6
  5770  027B  3001               	movlw	1	; select bank2/3
  5771  027C  0087               	movwf	7
  5772  027D  1981               	btfsc	1,3
  5773  027E  2AAD               	goto	l10334
  5774                           
  5775                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5776  027F  0854               	movf	_Sw^(0+128),w
  5777  0280  3E03               	addlw	3
  5778  0281  0086               	movwf	6
  5779  0282  3001               	movlw	1	; select bank2/3
  5780  0283  0087               	movwf	7
  5781  0284  3001               	movlw	1
  5782  0285  0781               	addwf	1,f
  5783  0286  3141               	addfsr 1,1
  5784  0287  1803               	skipnc
  5785  0288  0A81               	incf	1,f
  5786                           
  5787                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5788  0289  0854               	movf	_Sw^(0+128),w
  5789  028A  3E03               	addlw	3
  5790  028B  0086               	movwf	6
  5791  028C  3001               	movlw	1	; select bank2/3
  5792  028D  0087               	movwf	7
  5793  028E  3F40               	moviw [0]fsr1
  5794  028F  0020               	movlb	0	; select bank0
  5795  0290  00AF               	movwf	??_setSw_Main
  5796  0291  3F41               	moviw [1]fsr1
  5797  0292  00B0               	movwf	??_setSw_Main+1
  5798  0293  3000               	movlw	0
  5799  0294  0230               	subwf	??_setSw_Main+1,w
  5800  0295  304B               	movlw	75
  5801  0296  1903               	skipnz
  5802  0297  022F               	subwf	??_setSw_Main,w
  5803  0298  1C03               	skipc
  5804  0299  0008               	return
  5805                           
  5806                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5807  029A  0021               	movlb	1	; select bank1
  5808  029B  0854               	movf	_Sw^(0+128),w
  5809  029C  3E03               	addlw	3
  5810  029D  0086               	movwf	6
  5811  029E  3001               	movlw	1	; select bank2/3
  5812  029F  0087               	movwf	7
  5813  02A0  3000               	movlw	0
  5814  02A1  3FC0               	movwi [0]fsr1
  5815  02A2  3FC1               	movwi [1]fsr1
  5816                           
  5817                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5818  02A3  0854               	movf	_Sw^(0+128),w
  5819  02A4  0086               	movwf	6
  5820  02A5  3001               	movlw	1	; select bank2/3
  5821  02A6  0087               	movwf	7
  5822  02A7  1581               	bsf	1,3
  5823                           
  5824                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5825  02A8  0020               	movlb	0	; select bank0
  5826  02A9  0831               	movf	setSw_Main@sw,w
  5827  02AA  3190  20AD         	fcall	_setDimmerLights_DimmingOn
  5828                           
  5829                           ;Switch_B1.c: 161: }
  5830                           ;Switch_B1.c: 162: } else {
  5831  02AC  0008               	return
  5832  02AD                     l10334:	
  5833                           
  5834                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5835  02AD  0021               	movlb	1	; select bank1
  5836  02AE  0854               	movf	_Sw^(0+128),w
  5837  02AF  0086               	movwf	6
  5838  02B0  3001               	movlw	1	; select bank2/3
  5839  02B1  0087               	movwf	7
  5840  02B2  1A01               	btfsc	1,4
  5841  02B3  2AED               	goto	l10348
  5842                           
  5843                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5844  02B4  0854               	movf	_Sw^(0+128),w
  5845  02B5  3E05               	addlw	5
  5846  02B6  0086               	movwf	6
  5847  02B7  3001               	movlw	1	; select bank2/3
  5848  02B8  0087               	movwf	7
  5849  02B9  3001               	movlw	1
  5850  02BA  0781               	addwf	1,f
  5851  02BB  3141               	addfsr 1,1
  5852  02BC  1803               	skipnc
  5853  02BD  0A81               	incf	1,f
  5854                           
  5855                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5856  02BE  0854               	movf	_Sw^(0+128),w
  5857  02BF  3E05               	addlw	5
  5858  02C0  0086               	movwf	6
  5859  02C1  3001               	movlw	1	; select bank2/3
  5860  02C2  0087               	movwf	7
  5861  02C3  3F40               	moviw [0]fsr1
  5862  02C4  0020               	movlb	0	; select bank0
  5863  02C5  00AF               	movwf	??_setSw_Main
  5864  02C6  3F41               	moviw [1]fsr1
  5865  02C7  00B0               	movwf	??_setSw_Main+1
  5866  02C8  3000               	movlw	0
  5867  02C9  0230               	subwf	??_setSw_Main+1,w
  5868  02CA  304B               	movlw	75
  5869  02CB  1903               	skipnz
  5870  02CC  022F               	subwf	??_setSw_Main,w
  5871  02CD  1C03               	skipc
  5872  02CE  0008               	return
  5873                           
  5874                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5875  02CF  0021               	movlb	1	; select bank1
  5876  02D0  0854               	movf	_Sw^(0+128),w
  5877  02D1  3E05               	addlw	5
  5878  02D2  0086               	movwf	6
  5879  02D3  3001               	movlw	1	; select bank2/3
  5880  02D4  0087               	movwf	7
  5881  02D5  3000               	movlw	0
  5882  02D6  3FC0               	movwi [0]fsr1
  5883  02D7  3FC1               	movwi [1]fsr1
  5884                           
  5885                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5886  02D8  0854               	movf	_Sw^(0+128),w
  5887  02D9  0086               	movwf	6
  5888  02DA  3001               	movlw	1	; select bank2/3
  5889  02DB  0087               	movwf	7
  5890  02DC  1601               	bsf	1,4
  5891                           
  5892                           ;Switch_B1.c: 171: setRF_Learn(1);
  5893  02DD  3001               	movlw	1
  5894  02DE  319D  2524  3181   	fcall	_setRF_Learn
  5895                           
  5896                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5897  02E1  0021               	movlb	1	; select bank1
  5898  02E2  1EAF               	btfss	_myMain^(0+128),5
  5899  02E3  0008               	return
  5900                           
  5901                           ;Switch_B1.c: 173: setBuz(2, 100);
  5902  02E4  3064               	movlw	100
  5903  02E5  0020               	movlb	0	; select bank0
  5904  02E6  00A9               	movwf	setBuz@time
  5905  02E7  3000               	movlw	0
  5906  02E8  00AA               	movwf	setBuz@time+1
  5907  02E9  3002               	movlw	2
  5908  02EA  3194  24FB         	fcall	_setBuz
  5909                           
  5910                           ;Switch_B1.c: 174: }
  5911                           ;Switch_B1.c: 178: }
  5912                           ;Switch_B1.c: 179: } else {
  5913  02EC  0008               	return
  5914  02ED                     l10348:	
  5915                           
  5916                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5917  02ED  0021               	movlb	1	; select bank1
  5918  02EE  0854               	movf	_Sw^(0+128),w
  5919  02EF  0086               	movwf	6
  5920  02F0  3001               	movlw	1	; select bank2/3
  5921  02F1  0087               	movwf	7
  5922  02F2  1A81               	btfsc	1,5
  5923  02F3  0008               	return
  5924                           
  5925                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5926  02F4  0854               	movf	_Sw^(0+128),w
  5927  02F5  3E07               	addlw	7
  5928  02F6  0086               	movwf	6
  5929  02F7  3001               	movlw	1	; select bank2/3
  5930  02F8  0087               	movwf	7
  5931  02F9  3001               	movlw	1
  5932  02FA  0781               	addwf	1,f
  5933  02FB  3141               	addfsr 1,1
  5934  02FC  1803               	skipnc
  5935  02FD  0A81               	incf	1,f
  5936                           
  5937                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5938  02FE  0854               	movf	_Sw^(0+128),w
  5939  02FF  3E07               	addlw	7
  5940  0300  0086               	movwf	6
  5941  0301  3001               	movlw	1	; select bank2/3
  5942  0302  0087               	movwf	7
  5943  0303  3F40               	moviw [0]fsr1
  5944  0304  0020               	movlb	0	; select bank0
  5945  0305  00AF               	movwf	??_setSw_Main
  5946  0306  3F41               	moviw [1]fsr1
  5947  0307  00B0               	movwf	??_setSw_Main+1
  5948  0308  3000               	movlw	0
  5949  0309  0230               	subwf	??_setSw_Main+1,w
  5950  030A  3096               	movlw	150
  5951  030B  1903               	skipnz
  5952  030C  022F               	subwf	??_setSw_Main,w
  5953  030D  1C03               	skipc
  5954  030E  0008               	return
  5955                           
  5956                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5957  030F  0021               	movlb	1	; select bank1
  5958  0310  0854               	movf	_Sw^(0+128),w
  5959  0311  3E07               	addlw	7
  5960  0312  0086               	movwf	6
  5961  0313  3001               	movlw	1	; select bank2/3
  5962  0314  0087               	movwf	7
  5963  0315  3000               	movlw	0
  5964  0316  3FC0               	movwi [0]fsr1
  5965  0317  3FC1               	movwi [1]fsr1
  5966                           
  5967                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5968  0318  0854               	movf	_Sw^(0+128),w
  5969  0319  0086               	movwf	6
  5970  031A  3001               	movlw	1	; select bank2/3
  5971  031B  0087               	movwf	7
  5972  031C  1681               	bsf	1,5
  5973                           
  5974                           ;Switch_B1.c: 187: setRF_Learn(0);
  5975  031D  3000               	movlw	0
  5976  031E  319D  2524         	fcall	_setRF_Learn
  5977                           
  5978                           ;Switch_B1.c: 190: }
  5979                           ;Switch_B1.c: 191: }
  5980                           ;Switch_B1.c: 192: }
  5981                           ;Switch_B1.c: 194: }
  5982                           ;Switch_B1.c: 195: }
  5983                           ;Switch_B1.c: 196: } else {
  5984  0320  0008               	return
  5985  0321                     l10358:	
  5986                           
  5987                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5988  0321  0021               	movlb	1	; select bank1
  5989  0322  0854               	movf	_Sw^(0+128),w
  5990  0323  0086               	movwf	6
  5991  0324  3001               	movlw	1	; select bank2/3
  5992  0325  0087               	movwf	7
  5993  0326  1D01               	btfss	1,2
  5994  0327  0008               	return
  5995                           
  5996                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5997  0328  3001               	movlw	1
  5998  0329  0020               	movlb	0	; select bank0
  5999  032A  00AF               	movwf	??_setSw_Main
  6000  032B  0021               	movlb	1	; select bank1
  6001  032C  0854               	movf	_Sw^(0+128),w
  6002  032D  3E02               	addlw	2
  6003  032E  0086               	movwf	6
  6004  032F  3001               	movlw	1	; select bank2/3
  6005  0330  0087               	movwf	7
  6006  0331  0020               	movlb	0	; select bank0
  6007  0332  082F               	movf	??_setSw_Main,w
  6008  0333  0781               	addwf	1,f
  6009                           
  6010                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6011  0334  0021               	movlb	1	; select bank1
  6012  0335  0854               	movf	_Sw^(0+128),w
  6013  0336  3E02               	addlw	2
  6014  0337  0086               	movwf	6
  6015  0338  3001               	movlw	1	; select bank2/3
  6016  0339  0087               	movwf	7
  6017  033A  3003               	movlw	3
  6018  033B  0201               	subwf	1,w
  6019  033C  1C03               	skipc
  6020  033D  0008               	return
  6021                           
  6022                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6023  033E  0854               	movf	_Sw^(0+128),w
  6024  033F  3E02               	addlw	2
  6025  0340  0086               	movwf	6
  6026  0341  3001               	movlw	1	; select bank2/3
  6027  0342  0087               	movwf	7
  6028  0343  0181               	clrf	1
  6029                           
  6030                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6031  0344  0854               	movf	_Sw^(0+128),w
  6032  0345  0086               	movwf	6
  6033  0346  3001               	movlw	1	; select bank2/3
  6034  0347  0087               	movwf	7
  6035  0348  1101               	bcf	1,2
  6036                           
  6037                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6038  0349  0854               	movf	_Sw^(0+128),w
  6039  034A  3E03               	addlw	3
  6040  034B  0086               	movwf	6
  6041  034C  3001               	movlw	1	; select bank2/3
  6042  034D  0087               	movwf	7
  6043  034E  3000               	movlw	0
  6044  034F  3FC0               	movwi [0]fsr1
  6045  0350  3FC1               	movwi [1]fsr1
  6046                           
  6047                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6048  0351  0854               	movf	_Sw^(0+128),w
  6049  0352  0086               	movwf	6
  6050  0353  3001               	movlw	1	; select bank2/3
  6051  0354  0087               	movwf	7
  6052  0355  1181               	bcf	1,3
  6053                           
  6054                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6055  0356  0854               	movf	_Sw^(0+128),w
  6056  0357  0086               	movwf	6
  6057  0358  3001               	movlw	1	; select bank2/3
  6058  0359  0087               	movwf	7
  6059  035A  1201               	bcf	1,4
  6060                           
  6061                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6062  035B  0854               	movf	_Sw^(0+128),w
  6063  035C  0086               	movwf	6
  6064  035D  3001               	movlw	1	; select bank2/3
  6065  035E  0087               	movwf	7
  6066  035F  1281               	bcf	1,5
  6067                           
  6068                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6069  0360  0854               	movf	_Sw^(0+128),w
  6070  0361  3E05               	addlw	5
  6071  0362  0086               	movwf	6
  6072  0363  3001               	movlw	1	; select bank2/3
  6073  0364  0087               	movwf	7
  6074  0365  3000               	movlw	0
  6075  0366  3FC0               	movwi [0]fsr1
  6076  0367  3FC1               	movwi [1]fsr1
  6077                           
  6078                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6079  0368  0854               	movf	_Sw^(0+128),w
  6080  0369  3E07               	addlw	7
  6081  036A  0086               	movwf	6
  6082  036B  3001               	movlw	1	; select bank2/3
  6083  036C  0087               	movwf	7
  6084  036D  3000               	movlw	0
  6085  036E  3FC0               	movwi [0]fsr1
  6086  036F  3FC1               	movwi [1]fsr1
  6087                           
  6088                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6089  0370  0020               	movlb	0	; select bank0
  6090  0371  0831               	movf	setSw_Main@sw,w
  6091  0372  3192  229C  3181   	fcall	_setDimmerLights_SwOff
  6092                           
  6093                           ;Switch_B1.c: 219: setRF_Learn(0);
  6094  0375  3000               	movlw	0
  6095  0376  319D  2524         	fcall	_setRF_Learn
  6096                           
  6097                           ;Switch_B1.c: 221: }
  6098                           ;Switch_B1.c: 222: }
  6099                           ;Switch_B1.c: 223: }
  6100                           ;Switch_B1.c: 224: } else {
  6101  0378  0008               	return
  6102  0379                     l2511:	
  6103                           
  6104                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6105  0379  1C2F               	btfss	_myMain^(0+128),0
  6106  037A  0008               	return
  6107                           
  6108                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6109  037B  0854               	movf	_Sw^(0+128),w
  6110  037C  0086               	movwf	6
  6111  037D  3001               	movlw	1	; select bank2/3
  6112  037E  0087               	movwf	7
  6113  037F  1401               	bsf	1,0
  6114  0380  0008               	return
  6115  0381                     __end_of_setSw_Main:	
  6116                           
  6117                           	psect	text14
  6118  1D24                     __ptext14:	
  6119 ;; *************** function _setRF_Learn *****************
  6120 ;; Defined at:
  6121 ;;		line 33 in file "../src/RF_Control_B1.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  command         1    wreg     unsigned char 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;  command         1    1[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, status,0
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        2 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_setSw_Main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _setRF_Learn
  6151  1D24                     _setRF_Learn:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6155                           ;setRF_Learn@command stored from wreg
  6156  1D24  0020               	movlb	0	; select bank0
  6157  1D25  00A1               	movwf	setRF_Learn@command
  6158                           
  6159                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6160  1D26  0821               	movf	setRF_Learn@command,w
  6161  1D27  3A01               	xorlw	1
  6162  1D28  3000               	movlw	0
  6163  1D29  1903               	skipnz
  6164  1D2A  3001               	movlw	1
  6165  1D2B  00A0               	movwf	??_setRF_Learn
  6166  1D2C  0EA0               	swapf	??_setRF_Learn,f
  6167  1D2D  0DA0               	rlf	??_setRF_Learn,f
  6168  1D2E  0DA0               	rlf	??_setRF_Learn,f
  6169  1D2F  0021               	movlb	1	; select bank1
  6170  1D30  0820               	movf	_RF1^(0+128),w
  6171  1D31  0020               	movlb	0	; select bank0
  6172  1D32  0620               	xorwf	??_setRF_Learn,w
  6173  1D33  39BF               	andlw	-65
  6174  1D34  0620               	xorwf	??_setRF_Learn,w
  6175  1D35  0021               	movlb	1	; select bank1
  6176  1D36  00A0               	movwf	_RF1^(0+128)
  6177  1D37  0008               	return
  6178  1D38                     __end_of_setRF_Learn:	
  6179                           
  6180                           	psect	text15
  6181  10AD                     __ptext15:	
  6182 ;; *************** function _setDimmerLights_DimmingOn *****************
  6183 ;; Defined at:
  6184 ;;		line 760 in file "../src/Dimmer_B1.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;  sw              1    wreg     unsigned char 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  sw              1    2[BANK0 ] unsigned char 
  6189 ;; Return value:  Size  Location     Type
  6190 ;;		None               void
  6191 ;; Registers used:
  6192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6193 ;; Tracked objects:
  6194 ;;		On entry : 0/0
  6195 ;;		On exit  : 0/0
  6196 ;;		Unchanged: 0/0
  6197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;Total ram usage:        1 bytes
  6203 ;; Hardware stack levels used:    1
  6204 ;; Hardware stack levels required when called:    6
  6205 ;; This function calls:
  6206 ;;		_DimmerLights_SelectPointer
  6207 ;; This function is called by:
  6208 ;;		_setSw_Main
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           
  6213                           ;psect for function _setDimmerLights_DimmingOn
  6214  10AD                     _setDimmerLights_DimmingOn:	
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6218                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6219  10AD  0020               	movlb	0	; select bank0
  6220  10AE  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6221                           
  6222                           ;Dimmer_B1.c: 766: DimmerLights_SelectPointer(sw);
  6223  10AF  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6224  10B0  319B  2332  3190   	fcall	_DimmerLights_SelectPointer
  6225                           
  6226                           ;Dimmer_B1.c: 767: if (DimmerLights->Trigger == 0) {
  6227  10B3  0021               	movlb	1	; select bank1
  6228  10B4  084E               	movf	_DimmerLights^(0+128),w
  6229  10B5  0086               	movwf	6
  6230  10B6  3001               	movlw	1	; select bank2/3
  6231  10B7  0087               	movwf	7
  6232  10B8  1881               	btfsc	1,1
  6233  10B9  0008               	return
  6234                           
  6235                           ;Dimmer_B1.c: 768: if (DimmerLights->SwFlag == 1) {
  6236  10BA  084E               	movf	_DimmerLights^(0+128),w
  6237  10BB  0086               	movwf	6
  6238  10BC  3001               	movlw	1	; select bank2/3
  6239  10BD  0087               	movwf	7
  6240  10BE  1C01               	btfss	1,0
  6241  10BF  0008               	return
  6242                           
  6243                           ;Dimmer_B1.c: 769: DimmerLights->Status = 1;
  6244  10C0  0A4E               	incf	_DimmerLights^(0+128),w
  6245  10C1  0086               	movwf	6
  6246  10C2  3001               	movlw	1	; select bank2/3
  6247  10C3  0087               	movwf	7
  6248  10C4  1401               	bsf	1,0
  6249                           
  6250                           ;Dimmer_B1.c: 771: DimmerLights->DimmingSwFlag = 1;
  6251  10C5  084E               	movf	_DimmerLights^(0+128),w
  6252  10C6  0086               	movwf	6
  6253  10C7  3001               	movlw	1	; select bank2/3
  6254  10C8  0087               	movwf	7
  6255  10C9  1581               	bsf	1,3
  6256                           
  6257                           ;Dimmer_B1.c: 772: DimmerLights->DimmingTrigger = 1;
  6258  10CA  084E               	movf	_DimmerLights^(0+128),w
  6259  10CB  0086               	movwf	6
  6260  10CC  3001               	movlw	1	; select bank2/3
  6261  10CD  0087               	movwf	7
  6262  10CE  1601               	bsf	1,4
  6263                           
  6264                           ;Dimmer_B1.c: 773: DimmerLights->DimmingSwitch = 1;
  6265  10CF  084E               	movf	_DimmerLights^(0+128),w
  6266  10D0  0086               	movwf	6
  6267  10D1  3001               	movlw	1	; select bank2/3
  6268  10D2  0087               	movwf	7
  6269  10D3  1681               	bsf	1,5
  6270  10D4  0008               	return
  6271  10D5                     __end_of_setDimmerLights_DimmingOn:	
  6272                           
  6273                           	psect	text16
  6274  1C5A                     __ptext16:	
  6275 ;; *************** function _getSw_KeyStatus *****************
  6276 ;; Defined at:
  6277 ;;		line 237 in file "../src/Switch_B1.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  sw              1    wreg     unsigned char 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  sw              1    0[COMMON] unsigned char 
  6282 ;;  status          1    1[BANK0 ] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  1    wreg      unsigned char 
  6285 ;; Registers used:
  6286 ;;		wreg, status,2
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;Total ram usage:        3 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    5
  6299 ;; This function calls:
  6300 ;;		Nothing
  6301 ;; This function is called by:
  6302 ;;		_setSw_Main
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           
  6307                           ;psect for function _getSw_KeyStatus
  6308  1C5A                     _getSw_KeyStatus:	
  6309                           
  6310                           ;Switch_B1.c: 238: char status = 0;
  6311                           
  6312                           ;incstack = 0
  6313                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6314  1C5A  0020               	movlb	0	; select bank0
  6315  1C5B  01A1               	clrf	getSw_KeyStatus@status
  6316                           
  6317                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6318  1C5C  01A2               	clrf	_getSw_KeyStatus$6472
  6319  1C5D  0AA2               	incf	_getSw_KeyStatus$6472,f
  6320  1C5E  1F0C               	btfss	12,6	;volatile
  6321  1C5F  1A0C               	btfsc	12,4	;volatile
  6322  1C60  2C65               	goto	l9764
  6323  1C61  1C0C               	btfss	12,0	;volatile
  6324  1C62  1B8C               	btfsc	12,7	;volatile
  6325  1C63  2C65               	goto	l9764
  6326  1C64  01A2               	clrf	_getSw_KeyStatus$6472
  6327  1C65                     l9764:	
  6328  1C65  0822               	movf	_getSw_KeyStatus$6472,w
  6329  1C66  00A0               	movwf	??_getSw_KeyStatus
  6330  1C67  0820               	movf	??_getSw_KeyStatus,w
  6331  1C68  00A1               	movwf	getSw_KeyStatus@status
  6332                           
  6333                           ;Switch_B1.c: 275: return status;
  6334  1C69  0821               	movf	getSw_KeyStatus@status,w
  6335  1C6A  0008               	return
  6336  1C6B                     __end_of_getSw_KeyStatus:	
  6337                           
  6338                           	psect	text17
  6339  1B9E                     __ptext17:	
  6340 ;; *************** function _SwPointSelect *****************
  6341 ;; Defined at:
  6342 ;;		line 25 in file "../src/Switch_B1.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  sw              1    wreg     unsigned char 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  sw              1    1[BANK0 ] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;		None               void
  6349 ;; Registers used:
  6350 ;;		wreg
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;Total ram usage:        2 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    5
  6363 ;; This function calls:
  6364 ;;		Nothing
  6365 ;; This function is called by:
  6366 ;;		_setSw_Main
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           
  6371                           ;psect for function _SwPointSelect
  6372  1B9E                     _SwPointSelect:	
  6373                           
  6374                           ;incstack = 0
  6375                           ; Regs used in _SwPointSelect: [wreg]
  6376                           ;SwPointSelect@sw stored from wreg
  6377  1B9E  0020               	movlb	0	; select bank0
  6378  1B9F  00A1               	movwf	SwPointSelect@sw
  6379                           
  6380                           ;Switch_B1.c: 28: if (sw == 1) {
  6381  1BA0  0821               	movf	SwPointSelect@sw,w
  6382  1BA1  3A01               	xorlw	1
  6383  1BA2  1D03               	skipz
  6384  1BA3  0008               	return
  6385                           
  6386                           ;Switch_B1.c: 29: Sw = &Sw1;
  6387  1BA4  30E3               	movlw	_Sw1& (0+255)
  6388  1BA5  00A0               	movwf	??_SwPointSelect
  6389  1BA6  0820               	movf	??_SwPointSelect,w
  6390  1BA7  0021               	movlb	1	; select bank1
  6391  1BA8  00D4               	movwf	_Sw^(0+128)
  6392  1BA9  0008               	return
  6393  1BAA                     __end_of_SwPointSelect:	
  6394                           
  6395                           	psect	text18
  6396  1D77                     __ptext18:	
  6397 ;; *************** function _TouchPower *****************
  6398 ;; Defined at:
  6399 ;;		line 10 in file "../src/Switch_B1.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;		None               void
  6406 ;; Registers used:
  6407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    6
  6420 ;; This function calls:
  6421 ;;		_Timeout_Counter
  6422 ;;		_set_TimeoutCleared
  6423 ;; This function is called by:
  6424 ;;		_Switch_Main
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           
  6429                           ;psect for function _TouchPower
  6430  1D77                     _TouchPower:	
  6431                           
  6432                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6433                           
  6434                           ;incstack = 0
  6435                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6436  1D77  0021               	movlb	1	; select bank1
  6437  1D78  1C2F               	btfss	_myMain^(0+128),0
  6438  1D79  0008               	return
  6439                           
  6440                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6441  1D7A  0020               	movlb	0	; select bank0
  6442  1D7B  180D               	btfsc	13,0	;volatile
  6443  1D7C  0008               	return
  6444  1D7D  2D83               	goto	l10290
  6445  1D7E                     l2491:	
  6446                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6447                           
  6448                           
  6449                           ;Switch_B1.c: 14: RB0 = 1;
  6450  1D7E  0020               	movlb	0	; select bank0
  6451  1D7F  140D               	bsf	13,0	;volatile
  6452                           
  6453                           ;Switch_B1.c: 15: Timeout_Counter();
  6454  1D80  319D  2562  319D   	fcall	_Timeout_Counter
  6455  1D83                     l10290:	
  6456  1D83  0020               	movlb	0	; select bank0
  6457  1D84  180D               	btfsc	13,0	;volatile
  6458  1D85  2D89               	goto	l10294
  6459  1D86  0021               	movlb	1	; select bank1
  6460  1D87  1D39               	btfss	(_myMain^(0+128)+10),2
  6461  1D88  2D7E               	goto	l2491
  6462  1D89                     l10294:	
  6463                           
  6464                           ;Switch_B1.c: 16: }
  6465                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6466  1D89  319A  228E         	fcall	_set_TimeoutCleared
  6467  1D8B  0008               	return
  6468  1D8C                     __end_of_TouchPower:	
  6469                           
  6470                           	psect	text19
  6471  1A8E                     __ptext19:	
  6472 ;; *************** function _set_TimeoutCleared *****************
  6473 ;; Defined at:
  6474 ;;		line 281 in file "../src/Main_B1.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		status,2
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    5
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_getAD
  6499 ;;		_TouchPower
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _set_TimeoutCleared
  6505  1A8E                     _set_TimeoutCleared:	
  6506                           
  6507                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _set_TimeoutCleared: [status,2]
  6511  1A8E  0021               	movlb	1	; select bank1
  6512  1A8F  1139               	bcf	(_myMain^(0+128)+10),2
  6513                           
  6514                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6515  1A90  01BA               	clrf	(_myMain^(0+128)+11)
  6516  1A91  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6517  1A92  0008               	return
  6518  1A93                     __end_of_set_TimeoutCleared:	
  6519                           
  6520                           	psect	text20
  6521  1D62                     __ptext20:	
  6522 ;; *************** function _Timeout_Counter *****************
  6523 ;; Defined at:
  6524 ;;		line 272 in file "../src/Main_B1.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;		None
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;		None
  6529 ;; Return value:  Size  Location     Type
  6530 ;;		None               void
  6531 ;; Registers used:
  6532 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;Total ram usage:        0 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    5
  6545 ;; This function calls:
  6546 ;;		Nothing
  6547 ;; This function is called by:
  6548 ;;		_getAD
  6549 ;;		_TouchPower
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           
  6554                           ;psect for function _Timeout_Counter
  6555  1D62                     _Timeout_Counter:	
  6556                           
  6557                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6558                           
  6559                           ;incstack = 0
  6560                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6561  1D62  3001               	movlw	1
  6562  1D63  0021               	movlb	1	; select bank1
  6563  1D64  07BA               	addwf	(_myMain^(0+128)+11),f
  6564  1D65  3000               	movlw	0
  6565  1D66  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6566                           
  6567                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6568  1D67  300B               	movlw	11
  6569  1D68  3EAF               	addlw	_myMain& (0+255)
  6570  1D69  0086               	movwf	6
  6571  1D6A  0187               	clrf	7
  6572  1D6B  3F40               	moviw [0]fsr1
  6573  1D6C  3AA8               	xorlw	168
  6574  1D6D  1D03               	skipz
  6575  1D6E  2D71               	goto	u10545
  6576  1D6F  3F41               	moviw [1]fsr1
  6577  1D70  3A61               	xorlw	97
  6578  1D71                     u10545:	
  6579  1D71  1D03               	skipz
  6580  1D72  0008               	return
  6581                           
  6582                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6583  1D73  01BA               	clrf	(_myMain^(0+128)+11)
  6584  1D74  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6585                           
  6586                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6587  1D75  1539               	bsf	(_myMain^(0+128)+10),2
  6588  1D76  0008               	return
  6589  1D77                     __end_of_Timeout_Counter:	
  6590                           
  6591                           	psect	text21
  6592  1A8A                     __ptext21:	
  6593 ;; *************** function _Switch_Initialization *****************
  6594 ;; Defined at:
  6595 ;;		line 46 in file "../src/Switch_B1.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;		None               void
  6602 ;; Registers used:
  6603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;Total ram usage:        0 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    8
  6616 ;; This function calls:
  6617 ;;		_setSw_Initialization
  6618 ;; This function is called by:
  6619 ;;		_main
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _Switch_Initialization
  6625  1A8A                     _Switch_Initialization:	
  6626                           
  6627                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6631  1A8A  3001               	movlw	1
  6632  1A8B  319B  23E4         	fcall	_setSw_Initialization
  6633  1A8D  0008               	return
  6634  1A8E                     __end_of_Switch_Initialization:	
  6635                           
  6636                           	psect	text22
  6637  1BE4                     __ptext22:	
  6638 ;; *************** function _setSw_Initialization *****************
  6639 ;; Defined at:
  6640 ;;		line 66 in file "../src/Switch_B1.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;  sw              1    wreg     unsigned char 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  sw              1    4[BANK0 ] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;		None               void
  6647 ;; Registers used:
  6648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;Total ram usage:        1 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    7
  6661 ;; This function calls:
  6662 ;;		_setLED
  6663 ;; This function is called by:
  6664 ;;		_Switch_Initialization
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _setSw_Initialization
  6670  1BE4                     _setSw_Initialization:	
  6671                           
  6672                           ;incstack = 0
  6673                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6674                           ;setSw_Initialization@sw stored from wreg
  6675  1BE4  0020               	movlb	0	; select bank0
  6676  1BE5  00A4               	movwf	setSw_Initialization@sw
  6677                           
  6678                           ;Switch_B1.c: 68: setLED(sw, 1);
  6679  1BE6  01A2               	clrf	setLED@command
  6680  1BE7  0AA2               	incf	setLED@command,f
  6681  1BE8  0824               	movf	setSw_Initialization@sw,w
  6682  1BE9  3192  22D5  319B   	fcall	_setLED
  6683                           
  6684                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6685  1BEC  0020               	movlb	0	; select bank0
  6686  1BED  01A2               	clrf	setLED@command
  6687  1BEE  0AA2               	incf	setLED@command,f
  6688  1BEF  0824               	movf	setSw_Initialization@sw,w
  6689  1BF0  3E01               	addlw	1
  6690  1BF1  3192  22D5         	fcall	_setLED
  6691  1BF3  0008               	return
  6692  1BF4                     __end_of_setSw_Initialization:	
  6693                           
  6694                           	psect	text23
  6695  1A5D                     __ptext23:	
  6696 ;; *************** function _RF_Main *****************
  6697 ;; Defined at:
  6698 ;;		line 26 in file "../src/RF_Control_B1.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;		None
  6703 ;; Return value:  Size  Location     Type
  6704 ;;		None               void
  6705 ;; Registers used:
  6706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;Total ram usage:        0 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:   12
  6719 ;; This function calls:
  6720 ;;		_setRF_Main
  6721 ;; This function is called by:
  6722 ;;		_main
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _RF_Main
  6728  1A5D                     _RF_Main:	
  6729                           
  6730                           ;RF_Control_B1.c: 28: setRF_Main();
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6734  1A5D  3184  2477         	fcall	_setRF_Main
  6735  1A5F  0008               	return
  6736  1A60                     __end_of_RF_Main:	
  6737                           
  6738                           	psect	text24
  6739  0477                     __ptext24:	
  6740 ;; *************** function _setRF_Main *****************
  6741 ;; Defined at:
  6742 ;;		line 53 in file "../src/RF_Control_B1.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;  error           1    3[BANK1 ] unsigned char 
  6747 ;; Return value:  Size  Location     Type
  6748 ;;		None               void
  6749 ;; Registers used:
  6750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;Total ram usage:        2 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; Hardware stack levels required when called:   11
  6763 ;; This function calls:
  6764 ;;		_CC2500_PowerOnInitial
  6765 ;;		_CC2500_RxData
  6766 ;;		_CC2500_TxData
  6767 ;;		_CC2500_WriteCommand
  6768 ;;		_RF_RxDisable
  6769 ;;		___lwdiv
  6770 ;;		_getBuz_GO
  6771 ;;		_getRF_KeyStatus
  6772 ;;		_getRxData
  6773 ;; This function is called by:
  6774 ;;		_RF_Main
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function _setRF_Main
  6780  0477                     _setRF_Main:	
  6781                           
  6782                           ;RF_Control_B1.c: 54: char error = 0;
  6783                           
  6784                           ;incstack = 0
  6785                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6786  0477  0021               	movlb	1	; select bank1
  6787  0478  01E7               	clrf	setRF_Main@error^(0+128)
  6788                           
  6789                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6790  0479  1C20               	btfss	_RF1^(0+128),0
  6791  047A  2D48               	goto	l2122
  6792                           
  6793                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6794  047B  319C  2438  3184   	fcall	_getBuz_GO
  6795  047E  0020               	movlb	0	; select bank0
  6796  047F  0821               	movf	?_getBuz_GO+1,w
  6797  0480  0420               	iorwf	?_getBuz_GO,w
  6798  0481  1D03               	skipz
  6799  0482  2D29               	goto	l10260
  6800                           
  6801                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6802  0483  319C  2449  3184   	fcall	_getRF_KeyStatus
  6803  0486  3A01               	xorlw	1
  6804  0487  3000               	movlw	0
  6805  0488  1903               	skipnz
  6806  0489  3001               	movlw	1
  6807  048A  0021               	movlb	1	; select bank1
  6808  048B  00E6               	movwf	??_setRF_Main^(0+128)
  6809  048C  0CE6               	rrf	??_setRF_Main^(0+128),f
  6810  048D  0CE6               	rrf	??_setRF_Main^(0+128),f
  6811  048E  0820               	movf	_RF1^(0+128),w
  6812  048F  0666               	xorwf	??_setRF_Main^(0+128),w
  6813  0490  397F               	andlw	-129
  6814  0491  0666               	xorwf	??_setRF_Main^(0+128),w
  6815  0492  00A0               	movwf	_RF1^(0+128)
  6816                           
  6817                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6818  0493  1FA0               	btfss	_RF1^(0+128),7
  6819  0494  2C97               	goto	l2126
  6820  0495  1F20               	btfss	_RF1^(0+128),6
  6821  0496  2D29               	goto	l10260
  6822  0497                     l2126:	
  6823                           
  6824                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6825  0497  1D20               	btfss	_RF1^(0+128),2
  6826  0498  2CE8               	goto	l2127
  6827                           
  6828                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6829  0499  1B20               	btfsc	_RF1^(0+128),6
  6830  049A  2CE3               	goto	l10232
  6831                           
  6832                           ;RF_Control_B1.c: 68: RF1.Count++;
  6833  049B  3001               	movlw	1
  6834  049C  07A3               	addwf	(_RF1^(0+128)+3),f
  6835  049D  3000               	movlw	0
  6836  049E  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6837                           
  6838                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6839  049F  3014               	movlw	20
  6840  04A0  0020               	movlb	0	; select bank0
  6841  04A1  00A0               	movwf	___lwdiv@divisor
  6842  04A2  3000               	movlw	0
  6843  04A3  00A1               	movwf	___lwdiv@divisor+1
  6844  04A4  0021               	movlb	1	; select bank1
  6845  04A5  0829               	movf	((_RF1+1)^(0+128)+8),w
  6846  04A6  0020               	movlb	0	; select bank0
  6847  04A7  01A3               	clrf	___lwdiv@dividend+1
  6848  04A8  07A3               	addwf	___lwdiv@dividend+1,f
  6849  04A9  0021               	movlb	1	; select bank1
  6850  04AA  0828               	movf	(_RF1^(0+128)+8),w
  6851  04AB  0020               	movlb	0	; select bank0
  6852  04AC  01A2               	clrf	___lwdiv@dividend
  6853  04AD  07A2               	addwf	___lwdiv@dividend,f
  6854  04AE  3192  2265  3184   	fcall	___lwdiv
  6855  04B1  0020               	movlb	0	; select bank0
  6856  04B2  0821               	movf	?___lwdiv+1,w
  6857  04B3  0021               	movlb	1	; select bank1
  6858  04B4  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6859  04B5  1D03               	skipz
  6860  04B6  2CBB               	goto	u11595
  6861  04B7  0020               	movlb	0	; select bank0
  6862  04B8  0820               	movf	?___lwdiv,w
  6863  04B9  0021               	movlb	1	; select bank1
  6864  04BA  0223               	subwf	(_RF1^(0+128)+3),w
  6865  04BB                     u11595:	
  6866  04BB  1C03               	skipc
  6867  04BC  2D29               	goto	l10260
  6868                           
  6869                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6870  04BD  3014               	movlw	20
  6871  04BE  0020               	movlb	0	; select bank0
  6872  04BF  00A0               	movwf	___lwdiv@divisor
  6873  04C0  3000               	movlw	0
  6874  04C1  00A1               	movwf	___lwdiv@divisor+1
  6875  04C2  0021               	movlb	1	; select bank1
  6876  04C3  0829               	movf	((_RF1+1)^(0+128)+8),w
  6877  04C4  0020               	movlb	0	; select bank0
  6878  04C5  01A3               	clrf	___lwdiv@dividend+1
  6879  04C6  07A3               	addwf	___lwdiv@dividend+1,f
  6880  04C7  0021               	movlb	1	; select bank1
  6881  04C8  0828               	movf	(_RF1^(0+128)+8),w
  6882  04C9  0020               	movlb	0	; select bank0
  6883  04CA  01A2               	clrf	___lwdiv@dividend
  6884  04CB  07A2               	addwf	___lwdiv@dividend,f
  6885  04CC  3192  2265  3184   	fcall	___lwdiv
  6886  04CF  0020               	movlb	0	; select bank0
  6887  04D0  0821               	movf	?___lwdiv+1,w
  6888  04D1  0021               	movlb	1	; select bank1
  6889  04D2  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6890  04D3  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  6891  04D4  0020               	movlb	0	; select bank0
  6892  04D5  0820               	movf	?___lwdiv,w
  6893  04D6  0021               	movlb	1	; select bank1
  6894  04D7  01A3               	clrf	(_RF1^(0+128)+3)
  6895  04D8  07A3               	addwf	(_RF1^(0+128)+3),f
  6896                           
  6897                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6898  04D9  1120               	bcf	_RF1^(0+128),2
  6899                           
  6900                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6901  04DA  01AB               	clrf	(_RF1^(0+128)+11)
  6902  04DB  01AC               	clrf	((_RF1+1)^(0+128)+11)
  6903                           
  6904                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6905  04DC  319B  23D5  3184   	fcall	_RF_RxDisable
  6906                           
  6907                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6908  04DF  3188  20D6  3184   	fcall	_CC2500_TxData
  6909                           
  6910                           ;RF_Control_B1.c: 77: }
  6911                           ;RF_Control_B1.c: 78: } else {
  6912  04E2  2D29               	goto	l10260
  6913  04E3                     l10232:	
  6914                           
  6915                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6916  04E3  0021               	movlb	1	; select bank1
  6917  04E4  01A3               	clrf	(_RF1^(0+128)+3)
  6918  04E5  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6919                           
  6920                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6921  04E6  1120               	bcf	_RF1^(0+128),2
  6922                           
  6923                           ;RF_Control_B1.c: 81: }
  6924                           ;RF_Control_B1.c: 82: } else {
  6925  04E7  2D29               	goto	l10260
  6926  04E8                     l2127:	
  6927                           
  6928                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6929  04E8  1DA0               	btfss	_RF1^(0+128),3
  6930  04E9  2CF7               	goto	l10246
  6931                           
  6932                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6933  04EA  3188  206B  3184   	fcall	_CC2500_RxData
  6934                           
  6935                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6936  04ED  0021               	movlb	1	; select bank1
  6937  04EE  1CA0               	btfss	_RF1^(0+128),1
  6938  04EF  2D29               	goto	l10260
  6939                           
  6940                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6941  04F0  10A0               	bcf	_RF1^(0+128),1
  6942                           
  6943                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6944  04F1  01AB               	clrf	(_RF1^(0+128)+11)
  6945  04F2  01AC               	clrf	((_RF1+1)^(0+128)+11)
  6946                           
  6947                           ;RF_Control_B1.c: 97: getRxData();
  6948  04F3  3196  266D  3184   	fcall	_getRxData
  6949                           
  6950                           ;RF_Control_B1.c: 100: }
  6951                           ;RF_Control_B1.c: 101: } else {
  6952  04F6  2D29               	goto	l10260
  6953  04F7                     l10246:	
  6954                           
  6955                           ;RF_Control_B1.c: 102: RF1.Count++;
  6956  04F7  3001               	movlw	1
  6957  04F8  0021               	movlb	1	; select bank1
  6958  04F9  07A3               	addwf	(_RF1^(0+128)+3),f
  6959  04FA  3000               	movlw	0
  6960  04FB  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6961                           
  6962                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6963  04FC  3014               	movlw	20
  6964  04FD  0020               	movlb	0	; select bank0
  6965  04FE  00A0               	movwf	___lwdiv@divisor
  6966  04FF  3000               	movlw	0
  6967  0500  00A1               	movwf	___lwdiv@divisor+1
  6968  0501  0021               	movlb	1	; select bank1
  6969  0502  0829               	movf	((_RF1+1)^(0+128)+8),w
  6970  0503  0020               	movlb	0	; select bank0
  6971  0504  01A3               	clrf	___lwdiv@dividend+1
  6972  0505  07A3               	addwf	___lwdiv@dividend+1,f
  6973  0506  0021               	movlb	1	; select bank1
  6974  0507  0828               	movf	(_RF1^(0+128)+8),w
  6975  0508  0020               	movlb	0	; select bank0
  6976  0509  01A2               	clrf	___lwdiv@dividend
  6977  050A  07A2               	addwf	___lwdiv@dividend,f
  6978  050B  3192  2265  3184   	fcall	___lwdiv
  6979  050E  0020               	movlb	0	; select bank0
  6980  050F  0821               	movf	?___lwdiv+1,w
  6981  0510  0021               	movlb	1	; select bank1
  6982  0511  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6983  0512  1D03               	skipz
  6984  0513  2D18               	goto	u11625
  6985  0514  0020               	movlb	0	; select bank0
  6986  0515  0820               	movf	?___lwdiv,w
  6987  0516  0021               	movlb	1	; select bank1
  6988  0517  0223               	subwf	(_RF1^(0+128)+3),w
  6989  0518                     u11625:	
  6990  0518  1C03               	skipc
  6991  0519  2D29               	goto	l10260
  6992                           
  6993                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6994  051A  01A3               	clrf	(_RF1^(0+128)+3)
  6995  051B  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6996                           
  6997                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6998  051C  15A0               	bsf	_RF1^(0+128),3
  6999                           
  7000                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7001  051D  3036               	movlw	54
  7002  051E  319E  264E  3184   	fcall	_CC2500_WriteCommand
  7003                           
  7004                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7005  0521  303A               	movlw	58
  7006  0522  319E  264E  3184   	fcall	_CC2500_WriteCommand
  7007                           
  7008                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7009  0525  3034               	movlw	52
  7010  0526  319E  264E  3184   	fcall	_CC2500_WriteCommand
  7011  0529                     l10260:	
  7012                           
  7013                           ;RF_Control_B1.c: 111: }
  7014                           ;RF_Control_B1.c: 112: }
  7015                           ;RF_Control_B1.c: 113: }
  7016                           ;RF_Control_B1.c: 114: }
  7017                           ;RF_Control_B1.c: 115: }
  7018                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7019  0529  3001               	movlw	1
  7020  052A  0021               	movlb	1	; select bank1
  7021  052B  07AB               	addwf	(_RF1^(0+128)+11),f
  7022  052C  3000               	movlw	0
  7023  052D  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7024                           
  7025                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7026  052E  300B               	movlw	11
  7027  052F  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7028  0530  30B9               	movlw	185
  7029  0531  1903               	skipnz
  7030  0532  022B               	subwf	(_RF1^(0+128)+11),w
  7031  0533  1C03               	skipc
  7032  0534  2D41               	goto	l10274
  7033                           
  7034                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7035  0535  01AB               	clrf	(_RF1^(0+128)+11)
  7036  0536  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7037                           
  7038                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7039  0537  11A0               	bcf	_RF1^(0+128),3
  7040                           
  7041                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7042  0538  10A0               	bcf	_RF1^(0+128),1
  7043                           
  7044                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7045  0539  3036               	movlw	54
  7046  053A  319E  264E  3184   	fcall	_CC2500_WriteCommand
  7047                           
  7048                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7049  053D  303A               	movlw	58
  7050  053E  319E  264E  3184   	fcall	_CC2500_WriteCommand
  7051  0541                     l10274:	
  7052                           
  7053                           ;RF_Control_B1.c: 125: }
  7054                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7055  0541  0021               	movlb	1	; select bank1
  7056  0542  1F21               	btfss	(_RF1^(0+128)+1),6
  7057  0543  0008               	return
  7058                           
  7059                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7060  0544  1321               	bcf	(_RF1^(0+128)+1),6
  7061                           
  7062                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7063  0545  319D  254D         	fcall	_CC2500_PowerOnInitial
  7064                           
  7065                           ;RF_Control_B1.c: 130: }
  7066                           ;RF_Control_B1.c: 132: } else {
  7067  0547  0008               	return
  7068  0548                     l2122:	
  7069                           
  7070                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7071  0548  1C2F               	btfss	_myMain^(0+128),0
  7072  0549  0008               	return
  7073                           
  7074                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7075  054A  1420               	bsf	_RF1^(0+128),0
  7076  054B  0008               	return
  7077  054C                     __end_of_setRF_Main:	
  7078                           
  7079                           	psect	text25
  7080  166D                     __ptext25:	
  7081 ;; *************** function _getRxData *****************
  7082 ;; Defined at:
  7083 ;;		line 227 in file "../src/RF_Control_B1.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;		None
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  error           1    1[BANK1 ] unsigned char 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;		None               void
  7090 ;; Registers used:
  7091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;Total ram usage:        2 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:   10
  7104 ;; This function calls:
  7105 ;;		_getMain_All_Error_Status
  7106 ;;		_setControl_Lights_Table
  7107 ;;		_setLog_Code
  7108 ;;		_setTxData
  7109 ;; This function is called by:
  7110 ;;		_setRF_Main
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           
  7115                           ;psect for function _getRxData
  7116  166D                     _getRxData:	
  7117                           
  7118                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7119                           
  7120                           ;incstack = 0
  7121                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7122  166D  0023               	movlb	3	; select bank3
  7123  166E  0820               	movf	_RF_Data^(0+384),w
  7124  166F  3AAA               	xorlw	170
  7125  1670  1D03               	skipz
  7126  1671  2E83               	goto	l9718
  7127  1672  0821               	movf	(_RF_Data^(0+384)+1),w
  7128  1673  3A01               	xorlw	1
  7129  1674  1D03               	skipz
  7130  1675  2E83               	goto	l9718
  7131                           
  7132                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7133  1676  3055               	movlw	85
  7134  1677  0021               	movlb	1	; select bank1
  7135  1678  00E4               	movwf	??_getRxData^(0+128)
  7136  1679  086C               	movf	_product^(0+128),w
  7137  167A  3E02               	addlw	2
  7138  167B  0086               	movwf	6
  7139  167C  3002               	movlw	2	; select bank4/5
  7140  167D  0087               	movwf	7
  7141  167E  0864               	movf	??_getRxData^(0+128),w
  7142  167F  0081               	movwf	1
  7143                           
  7144                           ;RF_Control_B1.c: 231: setTxData();
  7145  1680  318E  2682         	fcall	_setTxData
  7146                           
  7147                           ;RF_Control_B1.c: 235: } else {
  7148  1682  0008               	return
  7149  1683                     l9718:	
  7150                           
  7151                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7152  1683  3000               	movlw	0
  7153  1684  3191  215F  3196   	fcall	_getMain_All_Error_Status
  7154  1687  0021               	movlb	1	; select bank1
  7155  1688  00E4               	movwf	??_getRxData^(0+128)
  7156  1689  0864               	movf	??_getRxData^(0+128),w
  7157  168A  00E5               	movwf	getRxData@error^(0+128)
  7158                           
  7159                           ;RF_Control_B1.c: 237: if (error == 0) {
  7160  168B  08E5               	movf	getRxData@error^(0+128),f
  7161  168C  1D03               	skipz
  7162  168D  2ECF               	goto	l2167
  7163                           
  7164                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7165  168E  1F20               	btfss	_RF1^(0+128),6
  7166  168F  2E9B               	goto	l9730
  7167                           
  7168                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7169  1690  0023               	movlb	3	; select bank3
  7170  1691  08A0               	movf	_RF_Data^(0+384),f
  7171  1692  1D03               	skipz
  7172  1693  0008               	return
  7173  1694  0821               	movf	(_RF_Data^(0+384)+1),w
  7174  1695  3A64               	xorlw	100
  7175  1696  1D03               	skipz
  7176  1697  0008               	return
  7177                           
  7178                           ;RF_Control_B1.c: 241: setLog_Code();
  7179  1698  3191  21C6         	fcall	_setLog_Code
  7180                           
  7181                           ;RF_Control_B1.c: 242: }
  7182                           ;RF_Control_B1.c: 243: } else {
  7183  169A  0008               	return
  7184  169B                     l9730:	
  7185                           
  7186                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7187  169B  0023               	movlb	3	; select bank3
  7188  169C  0834               	movf	(_RF_Data^(0+384)+20),w
  7189  169D  3AD1               	xorlw	209
  7190  169E  1903               	skipnz
  7191  169F  2EA4               	goto	l9734
  7192  16A0  0834               	movf	(_RF_Data^(0+384)+20),w
  7193  16A1  3A0A               	xorlw	10
  7194  16A2  1D03               	skipz
  7195  16A3  0008               	return
  7196  16A4                     l9734:	
  7197                           
  7198                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7199  16A4  08A0               	movf	_RF_Data^(0+384),f
  7200  16A5  1D03               	skipz
  7201  16A6  0008               	return
  7202  16A7  0821               	movf	(_RF_Data^(0+384)+1),w
  7203  16A8  3A02               	xorlw	2
  7204  16A9  1D03               	skipz
  7205  16AA  0008               	return
  7206                           
  7207                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7208  16AB  0021               	movlb	1	; select bank1
  7209  16AC  086C               	movf	_product^(0+128),w
  7210  16AD  3E0C               	addlw	12
  7211  16AE  0086               	movwf	6
  7212  16AF  3002               	movlw	2	; select bank4/5
  7213  16B0  0087               	movwf	7
  7214  16B1  0023               	movlb	3	; select bank3
  7215  16B2  082C               	movf	(_RF_Data^(0+384)+12),w
  7216  16B3  0601               	xorwf	1,w
  7217  16B4  1D03               	skipz
  7218  16B5  0008               	return
  7219  16B6  0021               	movlb	1	; select bank1
  7220  16B7  086C               	movf	_product^(0+128),w
  7221  16B8  3E0D               	addlw	13
  7222  16B9  0086               	movwf	6
  7223  16BA  3002               	movlw	2	; select bank4/5
  7224  16BB  0087               	movwf	7
  7225  16BC  0023               	movlb	3	; select bank3
  7226  16BD  082D               	movf	(_RF_Data^(0+384)+13),w
  7227  16BE  0601               	xorwf	1,w
  7228  16BF  1D03               	skipz
  7229  16C0  0008               	return
  7230  16C1  0021               	movlb	1	; select bank1
  7231  16C2  086C               	movf	_product^(0+128),w
  7232  16C3  3E0E               	addlw	14
  7233  16C4  0086               	movwf	6
  7234  16C5  3002               	movlw	2	; select bank4/5
  7235  16C6  0087               	movwf	7
  7236  16C7  0023               	movlb	3	; select bank3
  7237  16C8  082E               	movf	(_RF_Data^(0+384)+14),w
  7238  16C9  0601               	xorwf	1,w
  7239  16CA  1D03               	skipz
  7240  16CB  0008               	return
  7241                           
  7242                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7243  16CC  318A  2293         	fcall	_setControl_Lights_Table
  7244                           
  7245                           ;RF_Control_B1.c: 250: }
  7246                           ;RF_Control_B1.c: 253: }
  7247                           ;RF_Control_B1.c: 264: }
  7248                           ;RF_Control_B1.c: 265: }
  7249                           ;RF_Control_B1.c: 266: } else {
  7250  16CE  0008               	return
  7251  16CF                     l2167:	
  7252                           
  7253                           ;RF_Control_B1.c: 267: __nop();
  7254  16CF  0000               	nop
  7255  16D0  0008               	return
  7256  16D1                     __end_of_getRxData:	
  7257                           
  7258                           	psect	text26
  7259  11C6                     __ptext26:	
  7260 ;; *************** function _setLog_Code *****************
  7261 ;; Defined at:
  7262 ;;		line 273 in file "../src/RF_Control_B1.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;		None
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;		None
  7267 ;; Return value:  Size  Location     Type
  7268 ;;		None               void
  7269 ;; Registers used:
  7270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;Total ram usage:        1 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    7
  7283 ;; This function calls:
  7284 ;;		_setBuz
  7285 ;;		_setMemory_LoopSave
  7286 ;;		_setMemory_Modify
  7287 ;;		_setProductData
  7288 ;; This function is called by:
  7289 ;;		_getRxData
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           
  7294                           ;psect for function _setLog_Code
  7295  11C6                     _setLog_Code:	
  7296                           
  7297                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7298                           
  7299                           ;incstack = 0
  7300                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7301  11C6  0021               	movlb	1	; select bank1
  7302  11C7  1320               	bcf	_RF1^(0+128),6
  7303                           
  7304                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7305  11C8  0023               	movlb	3	; select bank3
  7306  11C9  082C               	movf	(_RF_Data^(0+384)+12),w
  7307  11CA  0020               	movlb	0	; select bank0
  7308  11CB  00E5               	movwf	??_setLog_Code
  7309  11CC  0865               	movf	??_setLog_Code,w
  7310  11CD  00E2               	movwf	setProductData@value
  7311  11CE  300C               	movlw	12
  7312  11CF  319B  233E  3191   	fcall	_setProductData
  7313                           
  7314                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7315  11D2  0023               	movlb	3	; select bank3
  7316  11D3  082D               	movf	(_RF_Data^(0+384)+13),w
  7317  11D4  0020               	movlb	0	; select bank0
  7318  11D5  00E5               	movwf	??_setLog_Code
  7319  11D6  0865               	movf	??_setLog_Code,w
  7320  11D7  00E2               	movwf	setProductData@value
  7321  11D8  300D               	movlw	13
  7322  11D9  319B  233E  3191   	fcall	_setProductData
  7323                           
  7324                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7325  11DC  0023               	movlb	3	; select bank3
  7326  11DD  082E               	movf	(_RF_Data^(0+384)+14),w
  7327  11DE  0020               	movlb	0	; select bank0
  7328  11DF  00E5               	movwf	??_setLog_Code
  7329  11E0  0865               	movf	??_setLog_Code,w
  7330  11E1  00E2               	movwf	setProductData@value
  7331  11E2  300E               	movlw	14
  7332  11E3  319B  233E  3191   	fcall	_setProductData
  7333                           
  7334                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7335  11E6  3064               	movlw	100
  7336  11E7  0020               	movlb	0	; select bank0
  7337  11E8  00A9               	movwf	setBuz@time
  7338  11E9  3000               	movlw	0
  7339  11EA  00AA               	movwf	setBuz@time+1
  7340  11EB  3001               	movlw	1
  7341  11EC  3194  24FB  3191   	fcall	_setBuz
  7342                           
  7343                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7344  11EF  0021               	movlb	1	; select bank1
  7345  11F0  1EAF               	btfss	_myMain^(0+128),5
  7346  11F1  29F6               	goto	l2180
  7347                           
  7348                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7349  11F2  3001               	movlw	1
  7350  11F3  319C  24FE  3191   	fcall	_setMemory_LoopSave
  7351  11F6                     l2180:	
  7352                           
  7353                           ;RF_Control_B1.c: 281: }
  7354                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7355  11F6  3001               	movlw	1
  7356  11F7  319C  24C5         	fcall	_setMemory_Modify
  7357  11F9  0008               	return
  7358  11FA                     __end_of_setLog_Code:	
  7359                           
  7360                           	psect	text27
  7361  1CFE                     __ptext27:	
  7362 ;; *************** function _setMemory_LoopSave *****************
  7363 ;; Defined at:
  7364 ;;		line 1089 in file "../src/MCU_B1.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  command         1    wreg     unsigned char 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  command         1    1[BANK0 ] unsigned char 
  7369 ;; Return value:  Size  Location     Type
  7370 ;;		None               void
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;Total ram usage:        2 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    5
  7385 ;; This function calls:
  7386 ;;		Nothing
  7387 ;; This function is called by:
  7388 ;;		_setLog_Code
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function _setMemory_LoopSave
  7394  1CFE                     _setMemory_LoopSave:	
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7398                           ;setMemory_LoopSave@command stored from wreg
  7399  1CFE  0020               	movlb	0	; select bank0
  7400  1CFF  00A1               	movwf	setMemory_LoopSave@command
  7401                           
  7402                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7403  1D00  0821               	movf	setMemory_LoopSave@command,w
  7404  1D01  3A01               	xorlw	1
  7405  1D02  3000               	movlw	0
  7406  1D03  1903               	skipnz
  7407  1D04  3001               	movlw	1
  7408  1D05  00A0               	movwf	??_setMemory_LoopSave
  7409  1D06  0DA0               	rlf	??_setMemory_LoopSave,f
  7410  1D07  0DA0               	rlf	??_setMemory_LoopSave,f
  7411  1D08  0023               	movlb	3	; select bank3
  7412  1D09  0862               	movf	(_Memory^(0+384)+36),w
  7413  1D0A  0020               	movlb	0	; select bank0
  7414  1D0B  0620               	xorwf	??_setMemory_LoopSave,w
  7415  1D0C  39FB               	andlw	-5
  7416  1D0D  0620               	xorwf	??_setMemory_LoopSave,w
  7417  1D0E  0023               	movlb	3	; select bank3
  7418  1D0F  00E2               	movwf	(_Memory^(0+384)+36)
  7419  1D10  0008               	return
  7420  1D11                     __end_of_setMemory_LoopSave:	
  7421                           
  7422                           	psect	text28
  7423  0A93                     __ptext28:	
  7424 ;; *************** function _setControl_Lights_Table *****************
  7425 ;; Defined at:
  7426 ;;		line 286 in file "../src/RF_Control_B1.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;		None
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;		None
  7431 ;; Return value:  Size  Location     Type
  7432 ;;		None               void
  7433 ;; Registers used:
  7434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;Total ram usage:        0 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    9
  7447 ;; This function calls:
  7448 ;;		_getDimmerLights_Status
  7449 ;;		_getMain_All_LightsStatus
  7450 ;;		_setCmd_Status
  7451 ;;		_setDimmerLights_SwOff
  7452 ;;		_setDimmerLights_SwOn
  7453 ;;		_setProductData
  7454 ;;		_setRFSW_AdjControl
  7455 ;;		_setRFSW_Control
  7456 ;;		_setRF_AdjControl
  7457 ;;		_setTxData
  7458 ;; This function is called by:
  7459 ;;		_getRxData
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _setControl_Lights_Table
  7465  0A93                     _setControl_Lights_Table:	
  7466                           
  7467                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7471  0A93  2AF9               	goto	l9358
  7472  0A94                     l9338:	
  7473                           ;RF_Control_B1.c: 290: case 0x00:
  7474                           
  7475                           
  7476                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7477  0A94  319A  22E5  318A   	fcall	_getMain_All_LightsStatus
  7478  0A97  3A01               	xorlw	1
  7479  0A98  1D03               	skipz
  7480  0A99  2AB0               	goto	l9346
  7481                           
  7482                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7483  0A9A  3001               	movlw	1
  7484  0A9B  319B  23F4  318A   	fcall	_getDimmerLights_Status
  7485  0A9E  3A01               	xorlw	1
  7486  0A9F  1D03               	skipz
  7487  0AA0  2AA9               	goto	l9344
  7488                           
  7489                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7490  0AA1  3001               	movlw	1
  7491  0AA2  3191  21FA  318A   	fcall	_setDimmerLights_SwOn
  7492                           
  7493                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7494  0AA5  3001               	movlw	1
  7495  0AA6  3192  229C  318A   	fcall	_setDimmerLights_SwOff
  7496  0AA9                     l9344:	
  7497                           
  7498                           ;RF_Control_B1.c: 297: }
  7499                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7500  0AA9  0020               	movlb	0	; select bank0
  7501  0AAA  01A0               	clrf	setCmd_Status@cmd
  7502  0AAB  0AA0               	incf	setCmd_Status@cmd,f
  7503  0AAC  3001               	movlw	1
  7504  0AAD  319D  25E8         	fcall	_setCmd_Status
  7505                           
  7506                           ;RF_Control_B1.c: 313: } else {
  7507  0AAF  0008               	return
  7508  0AB0                     l9346:	
  7509                           
  7510                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7511  0AB0  0020               	movlb	0	; select bank0
  7512  0AB1  01E2               	clrf	setProductData@value
  7513  0AB2  3009               	movlw	9
  7514  0AB3  319B  233E  318A   	fcall	_setProductData
  7515                           
  7516                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7517  0AB6  0020               	movlb	0	; select bank0
  7518  0AB7  01E2               	clrf	setProductData@value
  7519  0AB8  300B               	movlw	11
  7520  0AB9  319B  233E  318A   	fcall	_setProductData
  7521                           
  7522                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7523  0ABC  0020               	movlb	0	; select bank0
  7524  0ABD  01E2               	clrf	setProductData@value
  7525  0ABE  300F               	movlw	15
  7526  0ABF  319B  233E  318A   	fcall	_setProductData
  7527                           
  7528                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7529  0AC2  0020               	movlb	0	; select bank0
  7530  0AC3  01E2               	clrf	setProductData@value
  7531  0AC4  3011               	movlw	17
  7532  0AC5  319B  233E  318A   	fcall	_setProductData
  7533                           
  7534                           ;RF_Control_B1.c: 318: setTxData();
  7535  0AC8  318E  2682         	fcall	_setTxData
  7536                           
  7537                           ;RF_Control_B1.c: 319: }
  7538                           ;RF_Control_B1.c: 320: break;
  7539  0ACA  0008               	return
  7540  0ACB                     l9348:	
  7541                           ;RF_Control_B1.c: 322: case 0x20:
  7542                           
  7543                           
  7544                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7545  0ACB  0020               	movlb	0	; select bank0
  7546  0ACC  01E2               	clrf	setProductData@value
  7547  0ACD  3009               	movlw	9
  7548  0ACE  319B  233E  318A   	fcall	_setProductData
  7549                           
  7550                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7551  0AD1  0020               	movlb	0	; select bank0
  7552  0AD2  01E2               	clrf	setProductData@value
  7553  0AD3  300B               	movlw	11
  7554  0AD4  319B  233E  318A   	fcall	_setProductData
  7555                           
  7556                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7557  0AD7  0021               	movlb	1	; select bank1
  7558  0AD8  086C               	movf	_product^(0+128),w
  7559  0AD9  0086               	movwf	6
  7560  0ADA  3002               	movlw	2	; select bank4/5
  7561  0ADB  0087               	movwf	7
  7562  0ADC  3002               	movlw	2	; select bank4/5
  7563  0ADD  3F4F               	moviw [15]fsr1
  7564  0ADE  0020               	movlb	0	; select bank0
  7565  0ADF  00E2               	movwf	setProductData@value
  7566  0AE0  300F               	movlw	15
  7567  0AE1  319B  233E  318A   	fcall	_setProductData
  7568                           
  7569                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7570  0AE4  0020               	movlb	0	; select bank0
  7571  0AE5  01E2               	clrf	setProductData@value
  7572  0AE6  3011               	movlw	17
  7573  0AE7  319B  233E  318A   	fcall	_setProductData
  7574                           
  7575                           ;RF_Control_B1.c: 327: setTxData();
  7576  0AEA  318E  2682         	fcall	_setTxData
  7577                           
  7578                           ;RF_Control_B1.c: 328: break;
  7579  0AEC  0008               	return
  7580  0AED                     l9350:	
  7581                           ;RF_Control_B1.c: 331: case 0x01:
  7582                           
  7583                           
  7584                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7585  0AED  3001               	movlw	1
  7586  0AEE  3193  234B         	fcall	_setRFSW_Control
  7587                           
  7588                           ;RF_Control_B1.c: 333: break;
  7589  0AF0  0008               	return
  7590  0AF1                     l9352:	
  7591                           ;RF_Control_B1.c: 337: case 0x11:
  7592                           
  7593                           
  7594                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7595  0AF1  3001               	movlw	1
  7596  0AF2  318B  230C         	fcall	_setRFSW_AdjControl
  7597                           
  7598                           ;RF_Control_B1.c: 339: break;
  7599  0AF4  0008               	return
  7600  0AF5                     l9354:	
  7601                           ;RF_Control_B1.c: 341: case 0xd1:
  7602                           
  7603                           
  7604                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7605  0AF5  3001               	movlw	1
  7606  0AF6  3191  2192         	fcall	_setRF_AdjControl
  7607                           
  7608                           ;RF_Control_B1.c: 372: }
  7609                           
  7610                           ;RF_Control_B1.c: 343: break;
  7611  0AF8  0008               	return
  7612  0AF9                     l9358:	
  7613  0AF9  0023               	movlb	3	; select bank3
  7614  0AFA  082F               	movf	(_RF_Data^(0+384)+15),w
  7615                           
  7616                           ; Switch size 1, requested type "space"
  7617                           ; Number of cases is 5, Range of values is 0 to 209
  7618                           ; switch strategies available:
  7619                           ; Name         Instructions Cycles
  7620                           ; simple_byte           16     9 (average)
  7621                           ; jumptable            260     6 (fixed)
  7622                           ;	Chosen strategy is simple_byte
  7623  0AFB  3A00               	xorlw	0	; case 0
  7624  0AFC  1903               	skipnz
  7625  0AFD  2A94               	goto	l9338
  7626  0AFE  3A01               	xorlw	1	; case 1
  7627  0AFF  1903               	skipnz
  7628  0B00  2AED               	goto	l9350
  7629  0B01  3A10               	xorlw	16	; case 17
  7630  0B02  1903               	skipnz
  7631  0B03  2AF1               	goto	l9352
  7632  0B04  3A31               	xorlw	49	; case 32
  7633  0B05  1903               	skipnz
  7634  0B06  2ACB               	goto	l9348
  7635  0B07  3AF1               	xorlw	241	; case 209
  7636  0B08  1903               	skipnz
  7637  0B09  2AF5               	goto	l9354
  7638  0B0A  2B0B               	goto	l2194
  7639  0B0B                     l2194:	
  7640  0B0B  0008               	return
  7641  0B0C                     __end_of_setControl_Lights_Table:	
  7642                           
  7643                           	psect	text29
  7644  1192                     __ptext29:	
  7645 ;; *************** function _setRF_AdjControl *****************
  7646 ;; Defined at:
  7647 ;;		line 443 in file "../src/RF_Control_B1.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  sw              1    wreg     unsigned char 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  sw              1    6[BANK0 ] unsigned char 
  7652 ;;  status          1    5[BANK0 ] unsigned char 
  7653 ;; Return value:  Size  Location     Type
  7654 ;;		None               void
  7655 ;; Registers used:
  7656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7666 ;;Total ram usage:        3 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    7
  7669 ;; This function calls:
  7670 ;;		_DimmerLights_SelectPointer
  7671 ;;		_getDimmerLights_Status
  7672 ;; This function is called by:
  7673 ;;		_setControl_Lights_Table
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           
  7678                           ;psect for function _setRF_AdjControl
  7679  1192                     _setRF_AdjControl:	
  7680                           
  7681                           ;incstack = 0
  7682                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7683                           ;setRF_AdjControl@sw stored from wreg
  7684  1192  0020               	movlb	0	; select bank0
  7685  1193  00A6               	movwf	setRF_AdjControl@sw
  7686                           
  7687                           ;RF_Control_B1.c: 444: char status = 0;
  7688  1194  01A5               	clrf	setRF_AdjControl@status
  7689                           
  7690                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7691  1195  0826               	movf	setRF_AdjControl@sw,w
  7692  1196  319B  23F4  3191   	fcall	_getDimmerLights_Status
  7693  1199  0020               	movlb	0	; select bank0
  7694  119A  00A4               	movwf	??_setRF_AdjControl
  7695  119B  0824               	movf	??_setRF_AdjControl,w
  7696  119C  00A5               	movwf	setRF_AdjControl@status
  7697                           
  7698                           ;RF_Control_B1.c: 448: if (status == 1) {
  7699  119D  0825               	movf	setRF_AdjControl@status,w
  7700  119E  3A01               	xorlw	1
  7701  119F  1D03               	skipz
  7702  11A0  0008               	return
  7703                           
  7704                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7705  11A1  0021               	movlb	1	; select bank1
  7706  11A2  1822               	btfsc	(_RF1^(0+128)+2),0
  7707  11A3  29BA               	goto	l2213
  7708                           
  7709                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7710  11A4  1422               	bsf	(_RF1^(0+128)+2),0
  7711                           
  7712                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7713  11A5  0020               	movlb	0	; select bank0
  7714  11A6  0826               	movf	setRF_AdjControl@sw,w
  7715  11A7  319B  2332         	fcall	_DimmerLights_SelectPointer
  7716                           
  7717                           ;RF_Control_B1.c: 453: DimmerLights->DimmingSwFlag = 1;
  7718  11A9  0021               	movlb	1	; select bank1
  7719  11AA  084E               	movf	_DimmerLights^(0+128),w
  7720  11AB  0086               	movwf	6
  7721  11AC  3001               	movlw	1	; select bank2/3
  7722  11AD  0087               	movwf	7
  7723  11AE  1581               	bsf	1,3
  7724                           
  7725                           ;RF_Control_B1.c: 454: DimmerLights->DimmingTrigger = 1;
  7726  11AF  084E               	movf	_DimmerLights^(0+128),w
  7727  11B0  0086               	movwf	6
  7728  11B1  3001               	movlw	1	; select bank2/3
  7729  11B2  0087               	movwf	7
  7730  11B3  1601               	bsf	1,4
  7731                           
  7732                           ;RF_Control_B1.c: 455: DimmerLights->DimmingSwitch = 1;
  7733  11B4  084E               	movf	_DimmerLights^(0+128),w
  7734  11B5  0086               	movwf	6
  7735  11B6  3001               	movlw	1	; select bank2/3
  7736  11B7  0087               	movwf	7
  7737  11B8  1681               	bsf	1,5
  7738                           
  7739                           ;RF_Control_B1.c: 457: } else {
  7740  11B9  0008               	return
  7741  11BA                     l2213:	
  7742                           
  7743                           ;RF_Control_B1.c: 458: RF1.flagDimming = 0;
  7744  11BA  1022               	bcf	(_RF1^(0+128)+2),0
  7745                           
  7746                           ;RF_Control_B1.c: 459: DimmerLights->DimmingTrigger = 1;
  7747  11BB  084E               	movf	_DimmerLights^(0+128),w
  7748  11BC  0086               	movwf	6
  7749  11BD  3001               	movlw	1	; select bank2/3
  7750  11BE  0087               	movwf	7
  7751  11BF  1601               	bsf	1,4
  7752                           
  7753                           ;RF_Control_B1.c: 460: DimmerLights->DimmingSwitch = 0;
  7754  11C0  084E               	movf	_DimmerLights^(0+128),w
  7755  11C1  0086               	movwf	6
  7756  11C2  3001               	movlw	1	; select bank2/3
  7757  11C3  0087               	movwf	7
  7758  11C4  1281               	bcf	1,5
  7759  11C5  0008               	return
  7760  11C6                     __end_of_setRF_AdjControl:	
  7761                           
  7762                           	psect	text30
  7763  134B                     __ptext30:	
  7764 ;; *************** function _setRFSW_Control *****************
  7765 ;; Defined at:
  7766 ;;		line 380 in file "../src/RF_Control_B1.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;  sw              1    wreg     unsigned char 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;  sw              1   79[BANK0 ] unsigned char 
  7771 ;;  status          1   78[BANK0 ] unsigned char 
  7772 ;; Return value:  Size  Location     Type
  7773 ;;		None               void
  7774 ;; Registers used:
  7775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;Total ram usage:        3 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    8
  7788 ;; This function calls:
  7789 ;;		_getDimmerLights_Status
  7790 ;;		_setBuz
  7791 ;;		_setDelayOff_GO
  7792 ;;		_setDimmerLights_SwOff
  7793 ;;		_setDimmerLights_SwOn
  7794 ;;		_setRF_DimmerLights
  7795 ;;		_setTxData
  7796 ;; This function is called by:
  7797 ;;		_setControl_Lights_Table
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _setRFSW_Control
  7803  134B                     _setRFSW_Control:	
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7807                           ;setRFSW_Control@sw stored from wreg
  7808  134B  0020               	movlb	0	; select bank0
  7809  134C  00EF               	movwf	setRFSW_Control@sw
  7810                           
  7811                           ;RF_Control_B1.c: 381: char status = 0;
  7812  134D  01EE               	clrf	setRFSW_Control@status
  7813                           
  7814                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7815  134E  0023               	movlb	3	; select bank3
  7816  134F  0830               	movf	(_RF_Data^(0+384)+16),w
  7817  1350  3A80               	xorlw	128
  7818  1351  1D03               	skipz
  7819  1352  2B7E               	goto	l9062
  7820                           
  7821                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7822  1353  0020               	movlb	0	; select bank0
  7823  1354  01E5               	clrf	setDelayOff_GO@command
  7824  1355  0AE5               	incf	setDelayOff_GO@command,f
  7825  1356  0023               	movlb	3	; select bank3
  7826  1357  0831               	movf	(_RF_Data^(0+384)+17),w
  7827  1358  0020               	movlb	0	; select bank0
  7828  1359  00ED               	movwf	??_setRFSW_Control
  7829  135A  086D               	movf	??_setRFSW_Control,w
  7830  135B  00E6               	movwf	setDelayOff_GO@value
  7831  135C  086F               	movf	setRFSW_Control@sw,w
  7832  135D  318C  2499  3193   	fcall	_setDelayOff_GO
  7833                           
  7834                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7835  1360  0020               	movlb	0	; select bank0
  7836  1361  086F               	movf	setRFSW_Control@sw,w
  7837  1362  319B  23F4  3193   	fcall	_getDimmerLights_Status
  7838  1365  3A01               	xorlw	1
  7839  1366  1D03               	skipz
  7840  1367  2B7E               	goto	l9062
  7841                           
  7842                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7843  1368  3064               	movlw	100
  7844  1369  0020               	movlb	0	; select bank0
  7845  136A  00A9               	movwf	setBuz@time
  7846  136B  3000               	movlw	0
  7847  136C  00AA               	movwf	setBuz@time+1
  7848  136D  3001               	movlw	1
  7849  136E  3194  24FB  3193   	fcall	_setBuz
  7850                           
  7851                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  7852  1371  0020               	movlb	0	; select bank0
  7853  1372  01E5               	clrf	setRF_DimmerLights@on
  7854  1373  0AE5               	incf	setRF_DimmerLights@on,f
  7855  1374  086F               	movf	setRFSW_Control@sw,w
  7856  1375  3197  279B  3193   	fcall	_setRF_DimmerLights
  7857                           
  7858                           ;RF_Control_B1.c: 388: setTxData();
  7859  1378  318E  2682  3193   	fcall	_setTxData
  7860                           
  7861                           ;RF_Control_B1.c: 389: status = 1;
  7862  137B  0020               	movlb	0	; select bank0
  7863  137C  01EE               	clrf	setRFSW_Control@status
  7864  137D  0AEE               	incf	setRFSW_Control@status,f
  7865  137E                     l9062:	
  7866                           
  7867                           ;RF_Control_B1.c: 390: }
  7868                           ;RF_Control_B1.c: 391: }
  7869                           ;RF_Control_B1.c: 393: if (status == 0) {
  7870  137E  0020               	movlb	0	; select bank0
  7871  137F  08EE               	movf	setRFSW_Control@status,f
  7872  1380  1D03               	skipz
  7873  1381  0008               	return
  7874                           
  7875                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7876  1382  086F               	movf	setRFSW_Control@sw,w
  7877  1383  3191  21FA  3193   	fcall	_setDimmerLights_SwOn
  7878                           
  7879                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7880  1386  0020               	movlb	0	; select bank0
  7881  1387  086F               	movf	setRFSW_Control@sw,w
  7882  1388  3192  229C         	fcall	_setDimmerLights_SwOff
  7883  138A  0008               	return
  7884  138B                     __end_of_setRFSW_Control:	
  7885                           
  7886                           	psect	text31
  7887  0B0C                     __ptext31:	
  7888 ;; *************** function _setRFSW_AdjControl *****************
  7889 ;; Defined at:
  7890 ;;		line 402 in file "../src/RF_Control_B1.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  sw              1    wreg     unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  sw              1   72[BANK0 ] unsigned char 
  7895 ;;  status          1   71[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;		None               void
  7898 ;; Registers used:
  7899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;Total ram usage:        4 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    8
  7912 ;; This function calls:
  7913 ;;		_getDimmerLights_PercentToValue
  7914 ;;		_getDimmerLights_Status
  7915 ;;		_setDimmerIntr_Dimming_RF
  7916 ;;		_setDimmerIntr_MaxmumValue
  7917 ;;		_setDimmerLights_DimmingRun
  7918 ;;		_setDimmerLights_SwOff
  7919 ;;		_setDimmerLights_SwOn
  7920 ;;		_setMemory_Modify
  7921 ;;		_setProductData
  7922 ;;		_setTxData
  7923 ;; This function is called by:
  7924 ;;		_setControl_Lights_Table
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           
  7929                           ;psect for function _setRFSW_AdjControl
  7930  0B0C                     _setRFSW_AdjControl:	
  7931                           
  7932                           ;incstack = 0
  7933                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7934                           ;setRFSW_AdjControl@sw stored from wreg
  7935  0B0C  0020               	movlb	0	; select bank0
  7936  0B0D  00E8               	movwf	setRFSW_AdjControl@sw
  7937                           
  7938                           ;RF_Control_B1.c: 403: char status = 0;
  7939  0B0E  01E7               	clrf	setRFSW_AdjControl@status
  7940                           
  7941                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  7942  0B0F  0868               	movf	setRFSW_AdjControl@sw,w
  7943  0B10  319B  23F4  318B   	fcall	_getDimmerLights_Status
  7944  0B13  0020               	movlb	0	; select bank0
  7945  0B14  00E5               	movwf	??_setRFSW_AdjControl
  7946  0B15  0865               	movf	??_setRFSW_AdjControl,w
  7947  0B16  00E7               	movwf	setRFSW_AdjControl@status
  7948                           
  7949                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  7950  0B17  3065               	movlw	101
  7951  0B18  0023               	movlb	3	; select bank3
  7952  0B19  0229               	subwf	(_RF_Data^(0+384)+9),w
  7953  0B1A  1C03               	skipc
  7954  0B1B  2B23               	goto	l9074
  7955                           
  7956                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  7957  0B1C  3064               	movlw	100
  7958  0B1D  0020               	movlb	0	; select bank0
  7959  0B1E  00E5               	movwf	??_setRFSW_AdjControl
  7960  0B1F  0865               	movf	??_setRFSW_AdjControl,w
  7961  0B20  0023               	movlb	3	; select bank3
  7962  0B21  00A9               	movwf	(_RF_Data^(0+384)+9)
  7963                           
  7964                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  7965  0B22  2B28               	goto	l9078
  7966  0B23                     l9074:	
  7967  0B23  08A9               	movf	(_RF_Data^(0+384)+9),f
  7968  0B24  1D03               	skipz
  7969  0B25  2B28               	goto	l9078
  7970                           
  7971                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  7972  0B26  01A9               	clrf	(_RF_Data^(0+384)+9)
  7973  0B27  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7974  0B28                     l9078:	
  7975                           
  7976                           ;RF_Control_B1.c: 411: }
  7977                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  7978  0B28  0829               	movf	(_RF_Data^(0+384)+9),w
  7979  0B29  0020               	movlb	0	; select bank0
  7980  0B2A  00E5               	movwf	??_setRFSW_AdjControl
  7981  0B2B  0865               	movf	??_setRFSW_AdjControl,w
  7982  0B2C  00E2               	movwf	setProductData@value
  7983  0B2D  3009               	movlw	9
  7984  0B2E  319B  233E  318B   	fcall	_setProductData
  7985                           
  7986                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  7987  0B31  0020               	movlb	0	; select bank0
  7988  0B32  0868               	movf	setRFSW_AdjControl@sw,w
  7989  0B33  00E5               	movwf	??_setRFSW_AdjControl
  7990  0B34  0865               	movf	??_setRFSW_AdjControl,w
  7991  0B35  00E2               	movwf	setProductData@value
  7992  0B36  300B               	movlw	11
  7993  0B37  319B  233E  318B   	fcall	_setProductData
  7994                           
  7995                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  7996  0B3A  0020               	movlb	0	; select bank0
  7997  0B3B  0868               	movf	setRFSW_AdjControl@sw,w
  7998  0B3C  3E1A               	addlw	26
  7999  0B3D  0021               	movlb	1	; select bank1
  8000  0B3E  076C               	addwf	_product^(0+128),w
  8001  0B3F  0020               	movlb	0	; select bank0
  8002  0B40  00E5               	movwf	??_setRFSW_AdjControl
  8003  0B41  0865               	movf	??_setRFSW_AdjControl,w
  8004  0B42  0086               	movwf	6
  8005  0B43  3002               	movlw	2	; select bank4/5
  8006  0B44  0087               	movwf	7
  8007  0B45  0801               	movf	1,w
  8008  0B46  00E6               	movwf	??_setRFSW_AdjControl+1
  8009  0B47  0866               	movf	??_setRFSW_AdjControl+1,w
  8010  0B48  00E2               	movwf	setProductData@value
  8011  0B49  3011               	movlw	17
  8012  0B4A  319B  233E  318B   	fcall	_setProductData
  8013                           
  8014                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8015  0B4D  0023               	movlb	3	; select bank3
  8016  0B4E  0829               	movf	(_RF_Data^(0+384)+9),w
  8017  0B4F  0020               	movlb	0	; select bank0
  8018  0B50  00E5               	movwf	??_setRFSW_AdjControl
  8019  0B51  0865               	movf	??_setRFSW_AdjControl,w
  8020  0B52  00E2               	movwf	setProductData@value
  8021  0B53  0868               	movf	setRFSW_AdjControl@sw,w
  8022  0B54  3E14               	addlw	20
  8023  0B55  319B  233E  318B   	fcall	_setProductData
  8024                           
  8025                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8026  0B58  3001               	movlw	1
  8027  0B59  319C  24C5  318B   	fcall	_setMemory_Modify
  8028                           
  8029                           ;RF_Control_B1.c: 427: if (status == 1) {
  8030  0B5C  0020               	movlb	0	; select bank0
  8031  0B5D  0867               	movf	setRFSW_AdjControl@status,w
  8032  0B5E  3A01               	xorlw	1
  8033  0B5F  1D03               	skipz
  8034  0B60  2B78               	goto	l9088
  8035                           
  8036                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8037  0B61  0023               	movlb	3	; select bank3
  8038  0B62  0829               	movf	(_RF_Data^(0+384)+9),w
  8039  0B63  3196  26D1  318B   	fcall	_getDimmerLights_PercentToValue
  8040  0B66  0020               	movlb	0	; select bank0
  8041  0B67  00E5               	movwf	??_setRFSW_AdjControl
  8042  0B68  0865               	movf	??_setRFSW_AdjControl,w
  8043  0B69  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8044  0B6A  0868               	movf	setRFSW_AdjControl@sw,w
  8045  0B6B  319B  234A  318B   	fcall	_setDimmerIntr_MaxmumValue
  8046                           
  8047                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8048  0B6E  0020               	movlb	0	; select bank0
  8049  0B6F  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8050  0B70  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8051  0B71  0868               	movf	setRFSW_AdjControl@sw,w
  8052  0B72  319D  25D0  318B   	fcall	_setDimmerIntr_Dimming_RF
  8053                           
  8054                           ;RF_Control_B1.c: 430: setTxData();
  8055  0B75  318E  2682         	fcall	_setTxData
  8056                           
  8057                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8058  0B77  0008               	return
  8059  0B78                     l9088:	
  8060  0B78  0020               	movlb	0	; select bank0
  8061  0B79  08E7               	movf	setRFSW_AdjControl@status,f
  8062  0B7A  1D03               	skipz
  8063  0B7B  0008               	return
  8064                           
  8065                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8066  0B7C  01A2               	clrf	setDimmerLights_DimmingRun@command
  8067  0B7D  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8068  0B7E  0868               	movf	setRFSW_AdjControl@sw,w
  8069  0B7F  319E  2668  318B   	fcall	_setDimmerLights_DimmingRun
  8070                           
  8071                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8072  0B82  0020               	movlb	0	; select bank0
  8073  0B83  0868               	movf	setRFSW_AdjControl@sw,w
  8074  0B84  3191  21FA  318B   	fcall	_setDimmerLights_SwOn
  8075                           
  8076                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8077  0B87  0020               	movlb	0	; select bank0
  8078  0B88  0868               	movf	setRFSW_AdjControl@sw,w
  8079  0B89  3192  229C         	fcall	_setDimmerLights_SwOff
  8080  0B8B  0008               	return
  8081  0B8C                     __end_of_setRFSW_AdjControl:	
  8082                           
  8083                           	psect	text32
  8084  1E68                     __ptext32:	
  8085 ;; *************** function _setDimmerLights_DimmingRun *****************
  8086 ;; Defined at:
  8087 ;;		line 1086 in file "../src/Dimmer_B1.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  lights          1    wreg     unsigned char 
  8090 ;;  command         1    2[BANK0 ] unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  lights          1    4[BANK0 ] unsigned char 
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8102 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;Total ram usage:        3 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    6
  8109 ;; This function calls:
  8110 ;;		_DimmerLights_SelectPointer
  8111 ;; This function is called by:
  8112 ;;		_setRFSW_AdjControl
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _setDimmerLights_DimmingRun
  8118  1E68                     _setDimmerLights_DimmingRun:	
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8122                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8123  1E68  0020               	movlb	0	; select bank0
  8124  1E69  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8125                           
  8126                           ;Dimmer_B1.c: 1087: DimmerLights_SelectPointer(lights);
  8127  1E6A  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8128  1E6B  319B  2332         	fcall	_DimmerLights_SelectPointer
  8129                           
  8130                           ;Dimmer_B1.c: 1088: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8131  1E6D  0020               	movlb	0	; select bank0
  8132  1E6E  0822               	movf	setDimmerLights_DimmingRun@command,w
  8133  1E6F  3A01               	xorlw	1
  8134  1E70  3000               	movlw	0
  8135  1E71  1903               	skipnz
  8136  1E72  3001               	movlw	1
  8137  1E73  00A3               	movwf	??_setDimmerLights_DimmingRun
  8138  1E74  0021               	movlb	1	; select bank1
  8139  1E75  0A4E               	incf	_DimmerLights^(0+128),w
  8140  1E76  0086               	movwf	6
  8141  1E77  3001               	movlw	1	; select bank2/3
  8142  1E78  0087               	movwf	7
  8143  1E79  0020               	movlb	0	; select bank0
  8144  1E7A  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8145  1E7B  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8146  1E7C  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8147  1E7D  0801               	movf	1,w
  8148  1E7E  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8149  1E7F  39BF               	andlw	-65
  8150  1E80  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8151  1E81  0081               	movwf	1
  8152  1E82  0008               	return
  8153  1E83                     __end_of_setDimmerLights_DimmingRun:	
  8154                           
  8155                           	psect	text33
  8156  1C49                     __ptext33:	
  8157 ;; *************** function _getRF_KeyStatus *****************
  8158 ;; Defined at:
  8159 ;;		line 166 in file "../src/RF_Control_B1.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;		None
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  key             1    1[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      unsigned char 
  8166 ;; Registers used:
  8167 ;;		wreg, status,2
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:        3 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    5
  8180 ;; This function calls:
  8181 ;;		Nothing
  8182 ;; This function is called by:
  8183 ;;		_setRF_Main
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           
  8188                           ;psect for function _getRF_KeyStatus
  8189  1C49                     _getRF_KeyStatus:	
  8190                           
  8191                           ;RF_Control_B1.c: 167: char key = 0;
  8192                           
  8193                           ;incstack = 0
  8194                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8195  1C49  0020               	movlb	0	; select bank0
  8196  1C4A  01A1               	clrf	getRF_KeyStatus@key
  8197                           
  8198                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8199  1C4B  01A2               	clrf	_getRF_KeyStatus$5415
  8200  1C4C  0AA2               	incf	_getRF_KeyStatus$5415,f
  8201  1C4D  1F0C               	btfss	12,6	;volatile
  8202  1C4E  1A0C               	btfsc	12,4	;volatile
  8203  1C4F  2C54               	goto	l9698
  8204  1C50  1C0C               	btfss	12,0	;volatile
  8205  1C51  1B8C               	btfsc	12,7	;volatile
  8206  1C52  2C54               	goto	l9698
  8207  1C53  01A2               	clrf	_getRF_KeyStatus$5415
  8208  1C54                     l9698:	
  8209  1C54  0822               	movf	_getRF_KeyStatus$5415,w
  8210  1C55  00A0               	movwf	??_getRF_KeyStatus
  8211  1C56  0820               	movf	??_getRF_KeyStatus,w
  8212  1C57  00A1               	movwf	getRF_KeyStatus@key
  8213                           
  8214                           ;RF_Control_B1.c: 179: return key;
  8215  1C58  0821               	movf	getRF_KeyStatus@key,w
  8216  1C59  0008               	return
  8217  1C5A                     __end_of_getRF_KeyStatus:	
  8218                           
  8219                           	psect	text34
  8220  1C38                     __ptext34:	
  8221 ;; *************** function _getBuz_GO *****************
  8222 ;; Defined at:
  8223 ;;		line 82 in file "../src/Buzzer_B1.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;		None
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  i               2    4[BANK0 ] int 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  2    0[BANK0 ] int 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8237 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;Total ram usage:        6 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    5
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		_setRF_Main
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           
  8252                           ;psect for function _getBuz_GO
  8253  1C38                     _getBuz_GO:	
  8254                           
  8255                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8256                           
  8257                           ;incstack = 0
  8258                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8259  1C38  0022               	movlb	2	; select bank2
  8260  1C39  0C20               	rrf	_Buz1^(0+256),w
  8261  1C3A  3901               	andlw	1
  8262  1C3B  0020               	movlb	0	; select bank0
  8263  1C3C  00A2               	movwf	??_getBuz_GO
  8264  1C3D  01A3               	clrf	??_getBuz_GO+1
  8265  1C3E  0822               	movf	??_getBuz_GO,w
  8266  1C3F  00A4               	movwf	getBuz_GO@i
  8267  1C40  0823               	movf	??_getBuz_GO+1,w
  8268  1C41  00A5               	movwf	getBuz_GO@i+1
  8269                           
  8270                           ;Buzzer_B1.c: 84: return i;
  8271  1C42  0825               	movf	getBuz_GO@i+1,w
  8272  1C43  01A1               	clrf	?_getBuz_GO+1
  8273  1C44  07A1               	addwf	?_getBuz_GO+1,f
  8274  1C45  0824               	movf	getBuz_GO@i,w
  8275  1C46  01A0               	clrf	?_getBuz_GO
  8276  1C47  07A0               	addwf	?_getBuz_GO,f
  8277  1C48  0008               	return
  8278  1C49                     __end_of_getBuz_GO:	
  8279                           
  8280                           	psect	text35
  8281  1BD5                     __ptext35:	
  8282 ;; *************** function _RF_RxDisable *****************
  8283 ;; Defined at:
  8284 ;;		line 154 in file "../src/RF_Control_B1.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;		None
  8289 ;; Return value:  Size  Location     Type
  8290 ;;		None               void
  8291 ;; Registers used:
  8292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;Total ram usage:        0 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    7
  8305 ;; This function calls:
  8306 ;;		_CC2500_WriteCommand
  8307 ;; This function is called by:
  8308 ;;		_setRF_Main
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function _RF_RxDisable
  8314  1BD5                     _RF_RxDisable:	
  8315                           
  8316                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8317                           
  8318                           ;incstack = 0
  8319                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8320  1BD5  0021               	movlb	1	; select bank1
  8321  1BD6  18A0               	btfsc	_RF1^(0+128),1
  8322  1BD7  2BDA               	goto	l2152
  8323  1BD8  1DA0               	btfss	_RF1^(0+128),3
  8324  1BD9  0008               	return
  8325  1BDA                     l2152:	
  8326                           
  8327                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8328  1BDA  11A0               	bcf	_RF1^(0+128),3
  8329                           
  8330                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8331  1BDB  10A0               	bcf	_RF1^(0+128),1
  8332                           
  8333                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8334  1BDC  3036               	movlw	54
  8335  1BDD  319E  264E  319B   	fcall	_CC2500_WriteCommand
  8336                           
  8337                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8338  1BE0  303A               	movlw	58
  8339  1BE1  319E  264E         	fcall	_CC2500_WriteCommand
  8340  1BE3  0008               	return
  8341  1BE4                     __end_of_RF_RxDisable:	
  8342                           
  8343                           	psect	text36
  8344  08D6                     __ptext36:	
  8345 ;; *************** function _CC2500_TxData *****************
  8346 ;; Defined at:
  8347 ;;		line 32 in file "../src/CC2500_B1.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;		None               void
  8354 ;; Registers used:
  8355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;Total ram usage:        2 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    7
  8368 ;; This function calls:
  8369 ;;		_CC2500_WriteByte
  8370 ;;		_CC2500_WriteCommand
  8371 ;;		_RF_Timeout_Counter
  8372 ;;		_setRF_TimeoutCleared
  8373 ;; This function is called by:
  8374 ;;		_setRF_Main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function _CC2500_TxData
  8380  08D6                     _CC2500_TxData:	
  8381                           
  8382                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8383                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8387  08D6  3036               	movlw	54
  8388  08D7  319E  264E  3188   	fcall	_CC2500_WriteCommand
  8389                           
  8390                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8391  08DA  303B               	movlw	59
  8392  08DB  319E  264E  3188   	fcall	_CC2500_WriteCommand
  8393                           
  8394                           ;CC2500_B1.c: 38: RC0 = 0;
  8395  08DE  0020               	movlb	0	; select bank0
  8396  08DF  100E               	bcf	14,0	;volatile
  8397                           
  8398                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8399  08E0  307F               	movlw	127
  8400  08E1  00A4               	movwf	??_CC2500_TxData
  8401  08E2  0824               	movf	??_CC2500_TxData,w
  8402  08E3  0021               	movlb	1	; select bank1
  8403  08E4  00D3               	movwf	_SPI0Buffer^(0+128)
  8404                           
  8405                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8406  08E5  28E9               	goto	l9398
  8407  08E6                     l9396:	
  8408                           
  8409                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8410  08E6  319D  2538  3188   	fcall	_RF_Timeout_Counter
  8411  08E9                     l9398:	
  8412  08E9  0020               	movlb	0	; select bank0
  8413  08EA  1E8E               	btfss	14,5	;volatile
  8414  08EB  28EF               	goto	l9402
  8415  08EC  0021               	movlb	1	; select bank1
  8416  08ED  1F21               	btfss	(_RF1^(0+128)+1),6
  8417  08EE  28E6               	goto	l9396
  8418  08EF                     l9402:	
  8419                           
  8420                           ;CC2500_B1.c: 42: };
  8421                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8422  08EF  319A  227A  3188   	fcall	_setRF_TimeoutCleared
  8423                           
  8424                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8425  08F2  319E  2601  3188   	fcall	_CC2500_WriteByte
  8426                           
  8427                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8428  08F5  0021               	movlb	1	; select bank1
  8429  08F6  0856               	movf	_Tx_Length^(0+128),w
  8430  08F7  0020               	movlb	0	; select bank0
  8431  08F8  00A4               	movwf	??_CC2500_TxData
  8432  08F9  0824               	movf	??_CC2500_TxData,w
  8433  08FA  0021               	movlb	1	; select bank1
  8434  08FB  00D3               	movwf	_SPI0Buffer^(0+128)
  8435                           
  8436                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8437  08FC  319E  2601  3188   	fcall	_CC2500_WriteByte
  8438                           
  8439                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8440  08FF  0020               	movlb	0	; select bank0
  8441  0900  01A5               	clrf	CC2500_TxData@loop_e
  8442  0901                     l9416:	
  8443  0901  0021               	movlb	1	; select bank1
  8444  0902  0856               	movf	_Tx_Length^(0+128),w
  8445  0903  0020               	movlb	0	; select bank0
  8446  0904  0225               	subwf	CC2500_TxData@loop_e,w
  8447  0905  1803               	btfsc	3,0
  8448  0906  291A               	goto	l235
  8449                           
  8450                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8451  0907  0825               	movf	CC2500_TxData@loop_e,w
  8452  0908  3EA0               	addlw	_RF_Data& (0+255)
  8453  0909  0086               	movwf	6
  8454  090A  3001               	movlw	1	; select bank3/4
  8455  090B  0087               	movwf	7
  8456  090C  0801               	movf	1,w
  8457  090D  00A4               	movwf	??_CC2500_TxData
  8458  090E  0824               	movf	??_CC2500_TxData,w
  8459  090F  0021               	movlb	1	; select bank1
  8460  0910  00D3               	movwf	_SPI0Buffer^(0+128)
  8461                           
  8462                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8463  0911  319E  2601  3188   	fcall	_CC2500_WriteByte
  8464  0914  3001               	movlw	1
  8465  0915  0020               	movlb	0	; select bank0
  8466  0916  00A4               	movwf	??_CC2500_TxData
  8467  0917  0824               	movf	??_CC2500_TxData,w
  8468  0918  07A5               	addwf	CC2500_TxData@loop_e,f
  8469  0919  2901               	goto	l9416
  8470  091A                     l235:	
  8471                           
  8472                           ;CC2500_B1.c: 51: }
  8473                           ;CC2500_B1.c: 52: RC0 = 1;
  8474  091A  140E               	bsf	14,0	;volatile
  8475                           
  8476                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8477  091B  3035               	movlw	53
  8478  091C  319E  264E  3188   	fcall	_CC2500_WriteCommand
  8479                           
  8480                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8481  091F  2923               	goto	l9422
  8482  0920                     l9420:	
  8483                           
  8484                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8485  0920  319D  2538  3188   	fcall	_RF_Timeout_Counter
  8486  0923                     l9422:	
  8487  0923  0020               	movlb	0	; select bank0
  8488  0924  188E               	btfsc	14,1	;volatile
  8489  0925  2929               	goto	l9426
  8490  0926  0021               	movlb	1	; select bank1
  8491  0927  1F21               	btfss	(_RF1^(0+128)+1),6
  8492  0928  2920               	goto	l9420
  8493  0929                     l9426:	
  8494                           
  8495                           ;CC2500_B1.c: 56: };
  8496                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8497  0929  319A  227A  3188   	fcall	_setRF_TimeoutCleared
  8498                           
  8499                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8500  092C  2930               	goto	l9430
  8501  092D                     l9428:	
  8502                           
  8503                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8504  092D  319D  2538  3188   	fcall	_RF_Timeout_Counter
  8505  0930                     l9430:	
  8506  0930  0020               	movlb	0	; select bank0
  8507  0931  1C8E               	btfss	14,1	;volatile
  8508  0932  2936               	goto	l9434
  8509  0933  0021               	movlb	1	; select bank1
  8510  0934  1F21               	btfss	(_RF1^(0+128)+1),6
  8511  0935  292D               	goto	l9428
  8512  0936                     l9434:	
  8513                           
  8514                           ;CC2500_B1.c: 61: };
  8515                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8516  0936  319A  227A  3188   	fcall	_setRF_TimeoutCleared
  8517                           
  8518                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8519  0939  3036               	movlw	54
  8520  093A  319E  264E  3188   	fcall	_CC2500_WriteCommand
  8521                           
  8522                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8523  093D  303B               	movlw	59
  8524  093E  319E  264E         	fcall	_CC2500_WriteCommand
  8525                           
  8526                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8527  0940  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8528  0941  0008               	return
  8529  0942                     __end_of_CC2500_TxData:	
  8530                           
  8531                           	psect	text37
  8532  086B                     __ptext37:	
  8533 ;; *************** function _CC2500_RxData *****************
  8534 ;; Defined at:
  8535 ;;		line 73 in file "../src/CC2500_B1.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;		None               void
  8542 ;; Registers used:
  8543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:        2 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    7
  8556 ;; This function calls:
  8557 ;;		_CC2500_ReadByte
  8558 ;;		_CC2500_ReadStatus
  8559 ;;		_CC2500_WriteByte
  8560 ;;		_CC2500_WriteCommand
  8561 ;;		_RF_Timeout_Counter
  8562 ;;		_setRF_TimeoutCleared
  8563 ;; This function is called by:
  8564 ;;		_setRF_Main
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           
  8569                           ;psect for function _CC2500_RxData
  8570  086B                     _CC2500_RxData:	
  8571                           
  8572                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8573                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8574                           
  8575                           ;incstack = 0
  8576                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8577  086B  0020               	movlb	0	; select bank0
  8578  086C  188E               	btfsc	14,1	;volatile
  8579  086D  0008               	return
  8580                           
  8581                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8582  086E  303B               	movlw	59
  8583  086F  319F  27DB  3188   	fcall	_CC2500_ReadStatus
  8584                           
  8585                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8586  0872  0021               	movlb	1	; select bank1
  8587  0873  0859               	movf	_s_data^(0+128),w
  8588  0874  1903               	btfsc	3,2
  8589  0875  0008               	return
  8590                           
  8591                           ;CC2500_B1.c: 90: RC0 = 0;
  8592  0876  0020               	movlb	0	; select bank0
  8593  0877  100E               	bcf	14,0	;volatile
  8594                           
  8595                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8596  0878  30FF               	movlw	255
  8597  0879  00A4               	movwf	??_CC2500_RxData
  8598  087A  0824               	movf	??_CC2500_RxData,w
  8599  087B  0021               	movlb	1	; select bank1
  8600  087C  00D3               	movwf	_SPI0Buffer^(0+128)
  8601                           
  8602                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8603  087D  2881               	goto	l9454
  8604  087E                     l9452:	
  8605                           
  8606                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8607  087E  319D  2538  3188   	fcall	_RF_Timeout_Counter
  8608  0881                     l9454:	
  8609  0881  0020               	movlb	0	; select bank0
  8610  0882  1E8E               	btfss	14,5	;volatile
  8611  0883  2887               	goto	l9458
  8612  0884  0021               	movlb	1	; select bank1
  8613  0885  1F21               	btfss	(_RF1^(0+128)+1),6
  8614  0886  287E               	goto	l9452
  8615  0887                     l9458:	
  8616                           
  8617                           ;CC2500_B1.c: 95: };
  8618                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8619  0887  319A  227A  3188   	fcall	_setRF_TimeoutCleared
  8620                           
  8621                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8622  088A  319E  2601  3188   	fcall	_CC2500_WriteByte
  8623                           
  8624                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8625  088D  319E  26BB  3188   	fcall	_CC2500_ReadByte
  8626                           
  8627                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8628  0890  0021               	movlb	1	; select bank1
  8629  0891  0853               	movf	_SPI0Buffer^(0+128),w
  8630  0892  0020               	movlb	0	; select bank0
  8631  0893  00A4               	movwf	??_CC2500_RxData
  8632  0894  0824               	movf	??_CC2500_RxData,w
  8633  0895  0021               	movlb	1	; select bank1
  8634  0896  00D2               	movwf	_Rx_Length^(0+128)
  8635                           
  8636                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8637  0897  0020               	movlb	0	; select bank0
  8638  0898  01A5               	clrf	CC2500_RxData@loop_f
  8639  0899                     l9474:	
  8640  0899  0021               	movlb	1	; select bank1
  8641  089A  0852               	movf	_Rx_Length^(0+128),w
  8642  089B  0020               	movlb	0	; select bank0
  8643  089C  0225               	subwf	CC2500_RxData@loop_f,w
  8644  089D  1803               	btfsc	3,0
  8645  089E  28B2               	goto	l9476
  8646                           
  8647                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8648  089F  319E  26BB  3188   	fcall	_CC2500_ReadByte
  8649                           
  8650                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8651  08A2  0021               	movlb	1	; select bank1
  8652  08A3  0853               	movf	_SPI0Buffer^(0+128),w
  8653  08A4  0020               	movlb	0	; select bank0
  8654  08A5  00A4               	movwf	??_CC2500_RxData
  8655  08A6  0825               	movf	CC2500_RxData@loop_f,w
  8656  08A7  3EA0               	addlw	_RF_Data& (0+255)
  8657  08A8  0086               	movwf	6
  8658  08A9  3001               	movlw	1	; select bank3/4
  8659  08AA  0087               	movwf	7
  8660  08AB  0824               	movf	??_CC2500_RxData,w
  8661  08AC  0081               	movwf	1
  8662  08AD  3001               	movlw	1
  8663  08AE  00A4               	movwf	??_CC2500_RxData
  8664  08AF  0824               	movf	??_CC2500_RxData,w
  8665  08B0  07A5               	addwf	CC2500_RxData@loop_f,f
  8666  08B1  2899               	goto	l9474
  8667  08B2                     l9476:	
  8668                           
  8669                           ;CC2500_B1.c: 104: }
  8670                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8671  08B2  319E  26BB  3188   	fcall	_CC2500_ReadByte
  8672                           
  8673                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8674  08B5  0021               	movlb	1	; select bank1
  8675  08B6  0853               	movf	_SPI0Buffer^(0+128),w
  8676  08B7  0020               	movlb	0	; select bank0
  8677  08B8  00A4               	movwf	??_CC2500_RxData
  8678  08B9  0824               	movf	??_CC2500_RxData,w
  8679  08BA  0021               	movlb	1	; select bank1
  8680  08BB  00D1               	movwf	_RSSI^(0+128)
  8681                           
  8682                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8683  08BC  319E  26BB  3188   	fcall	_CC2500_ReadByte
  8684                           
  8685                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8686  08BF  0021               	movlb	1	; select bank1
  8687  08C0  0853               	movf	_SPI0Buffer^(0+128),w
  8688  08C1  0020               	movlb	0	; select bank0
  8689  08C2  00A4               	movwf	??_CC2500_RxData
  8690  08C3  0824               	movf	??_CC2500_RxData,w
  8691  08C4  0021               	movlb	1	; select bank1
  8692  08C5  00CA               	movwf	_CRC^(0+128)
  8693                           
  8694                           ;CC2500_B1.c: 109: RC0 = 1;
  8695  08C6  0020               	movlb	0	; select bank0
  8696  08C7  140E               	bsf	14,0	;volatile
  8697                           
  8698                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8699  08C8  0021               	movlb	1	; select bank1
  8700  08C9  1BCA               	btfsc	_CRC^(0+128),7
  8701                           
  8702                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8703  08CA  146D               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8704                           
  8705                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8706  08CB  11A0               	bcf	_RF1^(0+128),3
  8707                           
  8708                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8709  08CC  14A0               	bsf	_RF1^(0+128),1
  8710                           
  8711                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8712  08CD  3036               	movlw	54
  8713  08CE  319E  264E  3188   	fcall	_CC2500_WriteCommand
  8714                           
  8715                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8716  08D1  303A               	movlw	58
  8717  08D2  319E  264E         	fcall	_CC2500_WriteCommand
  8718  08D4  0021               	movlb	1	; select bank1
  8719  08D5  0008               	return
  8720  08D6                     __end_of_CC2500_RxData:	
  8721                           
  8722                           	psect	text38
  8723  1FDB                     __ptext38:	
  8724 ;; *************** function _CC2500_ReadStatus *****************
  8725 ;; Defined at:
  8726 ;;		line 308 in file "../src/CC2500_B1.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;  status_addr     1    wreg     unsigned char 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8731 ;; Return value:  Size  Location     Type
  8732 ;;		None               void
  8733 ;; Registers used:
  8734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;Total ram usage:        2 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    6
  8747 ;; This function calls:
  8748 ;;		_CC2500_ReadByte
  8749 ;;		_CC2500_WriteByte
  8750 ;;		_RF_Timeout_Counter
  8751 ;;		_setRF_TimeoutCleared
  8752 ;; This function is called by:
  8753 ;;		_CC2500_RxData
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           
  8758                           ;psect for function _CC2500_ReadStatus
  8759  1FDB                     _CC2500_ReadStatus:	
  8760                           
  8761                           ;incstack = 0
  8762                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8763                           ;CC2500_ReadStatus@status_addr stored from wreg
  8764  1FDB  0020               	movlb	0	; select bank0
  8765  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  8766                           
  8767                           ;CC2500_B1.c: 309: RC0 = 0;
  8768  1FDD  100E               	bcf	14,0	;volatile
  8769                           
  8770                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8771  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  8772  1FDF  3EC0               	addlw	192
  8773  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  8774  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  8775  1FE2  0021               	movlb	1	; select bank1
  8776  1FE3  00D3               	movwf	_SPI0Buffer^(0+128)
  8777                           
  8778                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8779  1FE4  2FE8               	goto	l9118
  8780  1FE5                     l9116:	
  8781                           
  8782                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8783  1FE5  319D  2538  319F   	fcall	_RF_Timeout_Counter
  8784  1FE8                     l9118:	
  8785  1FE8  0020               	movlb	0	; select bank0
  8786  1FE9  1E8E               	btfss	14,5	;volatile
  8787  1FEA  2FEE               	goto	l9122
  8788  1FEB  0021               	movlb	1	; select bank1
  8789  1FEC  1F21               	btfss	(_RF1^(0+128)+1),6
  8790  1FED  2FE5               	goto	l9116
  8791  1FEE                     l9122:	
  8792                           
  8793                           ;CC2500_B1.c: 314: };
  8794                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8795  1FEE  319A  227A  319F   	fcall	_setRF_TimeoutCleared
  8796                           
  8797                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8798  1FF1  319E  2601  319F   	fcall	_CC2500_WriteByte
  8799                           
  8800                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8801  1FF4  319E  26BB         	fcall	_CC2500_ReadByte
  8802                           
  8803                           ;CC2500_B1.c: 319: RC0 = 1;
  8804  1FF6  0020               	movlb	0	; select bank0
  8805  1FF7  140E               	bsf	14,0	;volatile
  8806                           
  8807                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8808  1FF8  0021               	movlb	1	; select bank1
  8809  1FF9  0853               	movf	_SPI0Buffer^(0+128),w
  8810  1FFA  0020               	movlb	0	; select bank0
  8811  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  8812  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  8813  1FFD  0021               	movlb	1	; select bank1
  8814  1FFE  00D9               	movwf	_s_data^(0+128)
  8815  1FFF  0008               	return
  8816  2000                     __end_of_CC2500_ReadStatus:	
  8817                           
  8818                           	psect	text39
  8819  1EBB                     __ptext39:	
  8820 ;; *************** function _CC2500_ReadByte *****************
  8821 ;; Defined at:
  8822 ;;		line 242 in file "../src/CC2500_B1.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;		None
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8827 ;; Return value:  Size  Location     Type
  8828 ;;		None               void
  8829 ;; Registers used:
  8830 ;;		wreg, status,2, status,0
  8831 ;; Tracked objects:
  8832 ;;		On entry : 0/0
  8833 ;;		On exit  : 0/0
  8834 ;;		Unchanged: 0/0
  8835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;Total ram usage:        2 bytes
  8841 ;; Hardware stack levels used:    1
  8842 ;; Hardware stack levels required when called:    5
  8843 ;; This function calls:
  8844 ;;		Nothing
  8845 ;; This function is called by:
  8846 ;;		_CC2500_RxData
  8847 ;;		_CC2500_ReadStatus
  8848 ;;		_CC2500_ReadREG
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _CC2500_ReadByte
  8854  1EBB                     _CC2500_ReadByte:	
  8855                           
  8856                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8857                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8861  1EBB  0020               	movlb	0	; select bank0
  8862  1EBC  01A1               	clrf	CC2500_ReadByte@loop_b
  8863  1EBD                     L2:	
  8864  1EBD  3008               	movlw	8
  8865  1EBE  0221               	subwf	CC2500_ReadByte@loop_b,w
  8866  1EBF  1803               	btfsc	3,0
  8867  1EC0  0008               	return
  8868                           
  8869                           ;CC2500_B1.c: 245: RC3 = 1;
  8870  1EC1  158E               	bsf	14,3	;volatile
  8871                           
  8872                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8873  1EC2  1003               	clrc
  8874  1EC3  0021               	movlb	1	; select bank1
  8875  1EC4  0DD3               	rlf	_SPI0Buffer^(0+128),f
  8876                           
  8877                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8878  1EC5  0020               	movlb	0	; select bank0
  8879  1EC6  1E8E               	btfss	14,5	;volatile
  8880  1EC7  2ECB               	goto	l8992
  8881                           
  8882                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8883  1EC8  0021               	movlb	1	; select bank1
  8884  1EC9  1453               	bsf	_SPI0Buffer^(0+128),0
  8885  1ECA  2ED1               	goto	l8994
  8886  1ECB                     l8992:	
  8887                           
  8888                           ;CC2500_B1.c: 249: else
  8889                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8890  1ECB  30FE               	movlw	254
  8891  1ECC  0020               	movlb	0	; select bank0
  8892  1ECD  00A0               	movwf	??_CC2500_ReadByte
  8893  1ECE  0820               	movf	??_CC2500_ReadByte,w
  8894  1ECF  0021               	movlb	1	; select bank1
  8895  1ED0  05D3               	andwf	_SPI0Buffer^(0+128),f
  8896  1ED1                     l8994:	
  8897                           
  8898                           ;CC2500_B1.c: 251: RC3 = 0;
  8899  1ED1  0020               	movlb	0	; select bank0
  8900  1ED2  118E               	bcf	14,3	;volatile
  8901  1ED3  3001               	movlw	1
  8902  1ED4  00A0               	movwf	??_CC2500_ReadByte
  8903  1ED5  0820               	movf	??_CC2500_ReadByte,w
  8904  1ED6  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8905  1ED7  2EBD               	goto	L2
  8906  1ED8                     __end_of_CC2500_ReadByte:	
  8907                           
  8908                           	psect	text40
  8909  1D4D                     __ptext40:	
  8910 ;; *************** function _CC2500_PowerOnInitial *****************
  8911 ;; Defined at:
  8912 ;;		line 126 in file "../src/CC2500_B1.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;		None
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;		None
  8917 ;; Return value:  Size  Location     Type
  8918 ;;		None               void
  8919 ;; Registers used:
  8920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;Total ram usage:        0 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    8
  8933 ;; This function calls:
  8934 ;;		_CC2500_ClearRXFIFO
  8935 ;;		_CC2500_ClearTXFIFO
  8936 ;;		_CC2500_FrequencyCabr
  8937 ;;		_CC2500_InitPATable
  8938 ;;		_CC2500_InitSetREG
  8939 ;;		_CC2500_PowerRST
  8940 ;;		_CC2500_SIDLEMode
  8941 ;; This function is called by:
  8942 ;;		_main
  8943 ;;		_setRF_Main
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           
  8948                           ;psect for function _CC2500_PowerOnInitial
  8949  1D4D                     _CC2500_PowerOnInitial:	
  8950                           
  8951                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8952                           
  8953                           ;incstack = 0
  8954                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8955  1D4D  3194  240D  319D   	fcall	_CC2500_PowerRST
  8956                           
  8957                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8958  1D50  3190  20D5  319D   	fcall	_CC2500_InitSetREG
  8959                           
  8960                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8961  1D53  319F  2715  319D   	fcall	_CC2500_InitPATable
  8962                           
  8963                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8964  1D56  319A  2282  319D   	fcall	_CC2500_ClearTXFIFO
  8965                           
  8966                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8967  1D59  319A  227E  319D   	fcall	_CC2500_ClearRXFIFO
  8968                           
  8969                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8970  1D5C  319B  2392  319D   	fcall	_CC2500_FrequencyCabr
  8971                           
  8972                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8973  1D5F  319A  2286         	fcall	_CC2500_SIDLEMode
  8974  1D61  0008               	return
  8975  1D62                     __end_of_CC2500_PowerOnInitial:	
  8976                           
  8977                           	psect	text41
  8978  1A86                     __ptext41:	
  8979 ;; *************** function _CC2500_SIDLEMode *****************
  8980 ;; Defined at:
  8981 ;;		line 216 in file "../src/CC2500_B1.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;		None               void
  8988 ;; Registers used:
  8989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;Total ram usage:        0 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; Hardware stack levels required when called:    7
  9002 ;; This function calls:
  9003 ;;		_CC2500_WriteCommand
  9004 ;; This function is called by:
  9005 ;;		_CC2500_PowerOnInitial
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function _CC2500_SIDLEMode
  9011  1A86                     _CC2500_SIDLEMode:	
  9012                           
  9013                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9014                           
  9015                           ;incstack = 0
  9016                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9017  1A86  3036               	movlw	54
  9018  1A87  319E  264E         	fcall	_CC2500_WriteCommand
  9019  1A89  0008               	return
  9020  1A8A                     __end_of_CC2500_SIDLEMode:	
  9021                           
  9022                           	psect	text42
  9023  140D                     __ptext42:	
  9024 ;; *************** function _CC2500_PowerRST *****************
  9025 ;; Defined at:
  9026 ;;		line 139 in file "../src/CC2500_B1.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;		None
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;		None
  9031 ;; Return value:  Size  Location     Type
  9032 ;;		None               void
  9033 ;; Registers used:
  9034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;Total ram usage:        1 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    6
  9047 ;; This function calls:
  9048 ;;		_CC2500_WriteByte
  9049 ;;		_DelayTime_1us
  9050 ;;		_RF_Timeout_Counter
  9051 ;;		_setRF_TimeoutCleared
  9052 ;; This function is called by:
  9053 ;;		_CC2500_PowerOnInitial
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           
  9058                           ;psect for function _CC2500_PowerRST
  9059  140D                     _CC2500_PowerRST:	
  9060                           
  9061                           ;CC2500_B1.c: 140: RC3 = 0;
  9062                           
  9063                           ;incstack = 0
  9064                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9065  140D  0020               	movlb	0	; select bank0
  9066  140E  118E               	bcf	14,3	;volatile
  9067                           
  9068                           ;CC2500_B1.c: 141: RC4 = 0;
  9069  140F  120E               	bcf	14,4	;volatile
  9070                           
  9071                           ;CC2500_B1.c: 142: RC0 = 1;
  9072  1410  140E               	bsf	14,0	;volatile
  9073                           
  9074                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9075  1411  300A               	movlw	10
  9076  1412  00A0               	movwf	DelayTime_1us@count
  9077  1413  3000               	movlw	0
  9078  1414  00A1               	movwf	DelayTime_1us@count+1
  9079  1415  3190  2087  3194   	fcall	_DelayTime_1us
  9080                           
  9081                           ;CC2500_B1.c: 144: RC0 = 0;
  9082  1418  0020               	movlb	0	; select bank0
  9083  1419  100E               	bcf	14,0	;volatile
  9084                           
  9085                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9086  141A  300A               	movlw	10
  9087  141B  00A0               	movwf	DelayTime_1us@count
  9088  141C  3000               	movlw	0
  9089  141D  00A1               	movwf	DelayTime_1us@count+1
  9090  141E  3190  2087  3194   	fcall	_DelayTime_1us
  9091                           
  9092                           ;CC2500_B1.c: 146: RC0 = 1;
  9093  1421  0020               	movlb	0	; select bank0
  9094  1422  140E               	bsf	14,0	;volatile
  9095                           
  9096                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9097  1423  3028               	movlw	40
  9098  1424  00A0               	movwf	DelayTime_1us@count
  9099  1425  3000               	movlw	0
  9100  1426  00A1               	movwf	DelayTime_1us@count+1
  9101  1427  3190  2087  3194   	fcall	_DelayTime_1us
  9102                           
  9103                           ;CC2500_B1.c: 148: RC0 = 0;
  9104  142A  0020               	movlb	0	; select bank0
  9105  142B  100E               	bcf	14,0	;volatile
  9106                           
  9107                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9108  142C  3030               	movlw	48
  9109  142D  00A6               	movwf	??_CC2500_PowerRST
  9110  142E  0826               	movf	??_CC2500_PowerRST,w
  9111  142F  0021               	movlb	1	; select bank1
  9112  1430  00D3               	movwf	_SPI0Buffer^(0+128)
  9113                           
  9114                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9115  1431  2C35               	goto	l9146
  9116  1432                     l9144:	
  9117                           
  9118                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9119  1432  319D  2538  3194   	fcall	_RF_Timeout_Counter
  9120  1435                     l9146:	
  9121  1435  0020               	movlb	0	; select bank0
  9122  1436  1E8E               	btfss	14,5	;volatile
  9123  1437  2C3B               	goto	l9150
  9124  1438  0021               	movlb	1	; select bank1
  9125  1439  1F21               	btfss	(_RF1^(0+128)+1),6
  9126  143A  2C32               	goto	l9144
  9127  143B                     l9150:	
  9128                           
  9129                           ;CC2500_B1.c: 152: };
  9130                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9131  143B  319A  227A  3194   	fcall	_setRF_TimeoutCleared
  9132                           
  9133                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9134  143E  319E  2601  3194   	fcall	_CC2500_WriteByte
  9135                           
  9136                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9137  1441  2C45               	goto	l9156
  9138  1442                     l9154:	
  9139                           
  9140                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9141  1442  319D  2538  3194   	fcall	_RF_Timeout_Counter
  9142  1445                     l9156:	
  9143  1445  0020               	movlb	0	; select bank0
  9144  1446  1E8E               	btfss	14,5	;volatile
  9145  1447  2C4B               	goto	l9160
  9146  1448  0021               	movlb	1	; select bank1
  9147  1449  1F21               	btfss	(_RF1^(0+128)+1),6
  9148  144A  2C42               	goto	l9154
  9149  144B                     l9160:	
  9150                           
  9151                           ;CC2500_B1.c: 157: };
  9152                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9153  144B  319A  227A         	fcall	_setRF_TimeoutCleared
  9154                           
  9155                           ;CC2500_B1.c: 159: RC4 = 0;
  9156  144D  0020               	movlb	0	; select bank0
  9157  144E  120E               	bcf	14,4	;volatile
  9158                           
  9159                           ;CC2500_B1.c: 160: RC0 = 1;
  9160  144F  140E               	bsf	14,0	;volatile
  9161  1450  0008               	return
  9162  1451                     __end_of_CC2500_PowerRST:	
  9163                           
  9164                           	psect	text43
  9165  10D5                     __ptext43:	
  9166 ;; *************** function _CC2500_InitSetREG *****************
  9167 ;; Defined at:
  9168 ;;		line 166 in file "../src/CC2500_B1.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;		None
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9173 ;;  temp2           1    7[BANK0 ] unsigned char 
  9174 ;;  temp1           1    6[BANK0 ] unsigned char 
  9175 ;; Return value:  Size  Location     Type
  9176 ;;		None               void
  9177 ;; Registers used:
  9178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;Total ram usage:        4 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    7
  9191 ;; This function calls:
  9192 ;;		_CC2500_WriteREG
  9193 ;; This function is called by:
  9194 ;;		_CC2500_PowerOnInitial
  9195 ;; This function uses a non-reentrant model
  9196 ;;
  9197                           
  9198                           
  9199                           ;psect for function _CC2500_InitSetREG
  9200  10D5                     _CC2500_InitSetREG:	
  9201                           
  9202                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9203                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9204                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9205                           
  9206                           ;incstack = 0
  9207                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9208  10D5  0020               	movlb	0	; select bank0
  9209  10D6  01A8               	clrf	CC2500_InitSetREG@loop_c
  9210  10D7                     L3:	
  9211  10D7  302F               	movlw	47
  9212  10D8  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9213  10D9  1803               	btfsc	3,0
  9214  10DA  0008               	return
  9215                           
  9216                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9217  10DB  0828               	movf	CC2500_InitSetREG@loop_c,w
  9218  10DC  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9219  10DD  0084               	movwf	4
  9220  10DE  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9221  10DF  1803               	skipnc
  9222  10E0  3E01               	addlw	1
  9223  10E1  0085               	movwf	5
  9224  10E2  0800               	movf	0,w	;code access
  9225  10E3  00A5               	movwf	??_CC2500_InitSetREG
  9226  10E4  0825               	movf	??_CC2500_InitSetREG,w
  9227  10E5  00A6               	movwf	CC2500_InitSetREG@temp1
  9228                           
  9229                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9230  10E6  0828               	movf	CC2500_InitSetREG@loop_c,w
  9231  10E7  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9232  10E8  0084               	movwf	4
  9233  10E9  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9234  10EA  1803               	skipnc
  9235  10EB  3E01               	addlw	1
  9236  10EC  0085               	movwf	5
  9237  10ED  0800               	movf	0,w	;code access
  9238  10EE  00A5               	movwf	??_CC2500_InitSetREG
  9239  10EF  0825               	movf	??_CC2500_InitSetREG,w
  9240  10F0  00A7               	movwf	CC2500_InitSetREG@temp2
  9241                           
  9242                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9243  10F1  0827               	movf	CC2500_InitSetREG@temp2,w
  9244  10F2  00A5               	movwf	??_CC2500_InitSetREG
  9245  10F3  0825               	movf	??_CC2500_InitSetREG,w
  9246  10F4  00A2               	movwf	CC2500_WriteREG@value
  9247  10F5  0826               	movf	CC2500_InitSetREG@temp1,w
  9248  10F6  319F  27B8  3190   	fcall	_CC2500_WriteREG
  9249  10F9  3001               	movlw	1
  9250  10FA  0020               	movlb	0	; select bank0
  9251  10FB  00A5               	movwf	??_CC2500_InitSetREG
  9252  10FC  0825               	movf	??_CC2500_InitSetREG,w
  9253  10FD  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9254  10FE  28D7               	goto	L3
  9255  10FF                     __end_of_CC2500_InitSetREG:	
  9256                           
  9257                           	psect	text44
  9258  1F15                     __ptext44:	
  9259 ;; *************** function _CC2500_InitPATable *****************
  9260 ;; Defined at:
  9261 ;;		line 181 in file "../src/CC2500_B1.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9266 ;;  temp            1    6[BANK0 ] unsigned char 
  9267 ;; Return value:  Size  Location     Type
  9268 ;;		None               void
  9269 ;; Registers used:
  9270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;Total ram usage:        3 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    7
  9283 ;; This function calls:
  9284 ;;		_CC2500_WriteREG
  9285 ;; This function is called by:
  9286 ;;		_CC2500_PowerOnInitial
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _CC2500_InitPATable
  9292  1F15                     _CC2500_InitPATable:	
  9293                           
  9294                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9295                           ;CC2500_B1.c: 183: unsigned char temp;
  9296                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9297                           
  9298                           ;incstack = 0
  9299                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9300  1F15  0020               	movlb	0	; select bank0
  9301  1F16  01A7               	clrf	CC2500_InitPATable@loop_d
  9302  1F17                     L4:	
  9303  1F17  3008               	movlw	8
  9304  1F18  0227               	subwf	CC2500_InitPATable@loop_d,w
  9305  1F19  1803               	btfsc	3,0
  9306  1F1A  0008               	return
  9307                           
  9308                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9309  1F1B  0827               	movf	CC2500_InitPATable@loop_d,w
  9310  1F1C  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9311  1F1D  0084               	movwf	4
  9312  1F1E  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9313  1F1F  1803               	skipnc
  9314  1F20  3E01               	addlw	1
  9315  1F21  0085               	movwf	5
  9316  1F22  0800               	movf	0,w	;code access
  9317  1F23  00A5               	movwf	??_CC2500_InitPATable
  9318  1F24  0825               	movf	??_CC2500_InitPATable,w
  9319  1F25  00A6               	movwf	CC2500_InitPATable@temp
  9320                           
  9321                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9322  1F26  0826               	movf	CC2500_InitPATable@temp,w
  9323  1F27  00A5               	movwf	??_CC2500_InitPATable
  9324  1F28  0825               	movf	??_CC2500_InitPATable,w
  9325  1F29  00A2               	movwf	CC2500_WriteREG@value
  9326  1F2A  303E               	movlw	62
  9327  1F2B  319F  27B8  319F   	fcall	_CC2500_WriteREG
  9328  1F2E  3001               	movlw	1
  9329  1F2F  0020               	movlb	0	; select bank0
  9330  1F30  00A5               	movwf	??_CC2500_InitPATable
  9331  1F31  0825               	movf	??_CC2500_InitPATable,w
  9332  1F32  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9333  1F33  2F17               	goto	L4
  9334  1F34                     __end_of_CC2500_InitPATable:	
  9335                           
  9336                           	psect	text45
  9337  1FB8                     __ptext45:	
  9338 ;; *************** function _CC2500_WriteREG *****************
  9339 ;; Defined at:
  9340 ;;		line 258 in file "../src/CC2500_B1.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  w_addr          1    wreg     unsigned char 
  9343 ;;  value           1    2[BANK0 ] unsigned char 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9346 ;; Return value:  Size  Location     Type
  9347 ;;		None               void
  9348 ;; Registers used:
  9349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9350 ;; Tracked objects:
  9351 ;;		On entry : 0/0
  9352 ;;		On exit  : 0/0
  9353 ;;		Unchanged: 0/0
  9354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9355 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;Total ram usage:        3 bytes
  9360 ;; Hardware stack levels used:    1
  9361 ;; Hardware stack levels required when called:    6
  9362 ;; This function calls:
  9363 ;;		_CC2500_WriteByte
  9364 ;;		_RF_Timeout_Counter
  9365 ;;		_setRF_TimeoutCleared
  9366 ;; This function is called by:
  9367 ;;		_CC2500_InitSetREG
  9368 ;;		_CC2500_InitPATable
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _CC2500_WriteREG
  9374  1FB8                     _CC2500_WriteREG:	
  9375                           
  9376                           ;incstack = 0
  9377                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9378                           ;CC2500_WriteREG@w_addr stored from wreg
  9379  1FB8  0020               	movlb	0	; select bank0
  9380  1FB9  00A4               	movwf	CC2500_WriteREG@w_addr
  9381                           
  9382                           ;CC2500_B1.c: 259: RC0 = 0;
  9383  1FBA  100E               	bcf	14,0	;volatile
  9384                           
  9385                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9386  1FBB  0824               	movf	CC2500_WriteREG@w_addr,w
  9387  1FBC  00A3               	movwf	??_CC2500_WriteREG
  9388  1FBD  0823               	movf	??_CC2500_WriteREG,w
  9389  1FBE  0021               	movlb	1	; select bank1
  9390  1FBF  00D3               	movwf	_SPI0Buffer^(0+128)
  9391                           
  9392                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9393  1FC0  2FC4               	goto	l9016
  9394  1FC1                     l9014:	
  9395                           
  9396                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9397  1FC1  319D  2538  319F   	fcall	_RF_Timeout_Counter
  9398  1FC4                     l9016:	
  9399  1FC4  0020               	movlb	0	; select bank0
  9400  1FC5  1E8E               	btfss	14,5	;volatile
  9401  1FC6  2FCA               	goto	l9020
  9402  1FC7  0021               	movlb	1	; select bank1
  9403  1FC8  1F21               	btfss	(_RF1^(0+128)+1),6
  9404  1FC9  2FC1               	goto	l9014
  9405  1FCA                     l9020:	
  9406                           
  9407                           ;CC2500_B1.c: 263: };
  9408                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9409  1FCA  319A  227A  319F   	fcall	_setRF_TimeoutCleared
  9410                           
  9411                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9412  1FCD  319E  2601  319F   	fcall	_CC2500_WriteByte
  9413                           
  9414                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9415  1FD0  0020               	movlb	0	; select bank0
  9416  1FD1  0822               	movf	CC2500_WriteREG@value,w
  9417  1FD2  00A3               	movwf	??_CC2500_WriteREG
  9418  1FD3  0823               	movf	??_CC2500_WriteREG,w
  9419  1FD4  0021               	movlb	1	; select bank1
  9420  1FD5  00D3               	movwf	_SPI0Buffer^(0+128)
  9421                           
  9422                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9423  1FD6  319E  2601         	fcall	_CC2500_WriteByte
  9424                           
  9425                           ;CC2500_B1.c: 269: RC0 = 1;
  9426  1FD8  0020               	movlb	0	; select bank0
  9427  1FD9  140E               	bsf	14,0	;volatile
  9428  1FDA  0008               	return
  9429  1FDB                     __end_of_CC2500_WriteREG:	
  9430                           
  9431                           	psect	text46
  9432  1B92                     __ptext46:	
  9433 ;; *************** function _CC2500_FrequencyCabr *****************
  9434 ;; Defined at:
  9435 ;;		line 208 in file "../src/CC2500_B1.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    7
  9456 ;; This function calls:
  9457 ;;		_CC2500_WriteCommand
  9458 ;;		_DelayTime_1us
  9459 ;; This function is called by:
  9460 ;;		_CC2500_PowerOnInitial
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function _CC2500_FrequencyCabr
  9466  1B92                     _CC2500_FrequencyCabr:	
  9467                           
  9468                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9472  1B92  3033               	movlw	51
  9473  1B93  319E  264E  319B   	fcall	_CC2500_WriteCommand
  9474                           
  9475                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9476  1B96  30E8               	movlw	232
  9477  1B97  0020               	movlb	0	; select bank0
  9478  1B98  00A0               	movwf	DelayTime_1us@count
  9479  1B99  3003               	movlw	3
  9480  1B9A  00A1               	movwf	DelayTime_1us@count+1
  9481  1B9B  3190  2087         	fcall	_DelayTime_1us
  9482  1B9D  0008               	return
  9483  1B9E                     __end_of_CC2500_FrequencyCabr:	
  9484                           
  9485                           	psect	text47
  9486  1087                     __ptext47:	
  9487 ;; *************** function _DelayTime_1us *****************
  9488 ;; Defined at:
  9489 ;;		line 327 in file "../src/CC2500_B1.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  count           2    0[BANK0 ] int 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  j               2    4[BANK0 ] unsigned int 
  9494 ;;  i               2    2[BANK0 ] unsigned int 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, status,2
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        6 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    5
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_CC2500_PowerRST
  9515 ;;		_CC2500_FrequencyCabr
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           
  9520                           ;psect for function _DelayTime_1us
  9521  1087                     _DelayTime_1us:	
  9522                           
  9523                           ;CC2500_B1.c: 328: unsigned int i, j;
  9524                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9525                           
  9526                           ;incstack = 0
  9527                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9528  1087  3001               	movlw	1
  9529  1088  0020               	movlb	0	; select bank0
  9530  1089  00A2               	movwf	DelayTime_1us@i
  9531  108A  3000               	movlw	0
  9532  108B  00A3               	movwf	DelayTime_1us@i+1
  9533  108C                     l347:	
  9534  108C  0821               	movf	DelayTime_1us@count+1,w
  9535  108D  0223               	subwf	DelayTime_1us@i+1,w
  9536  108E  1D03               	skipz
  9537  108F  2892               	goto	u9785
  9538  1090  0820               	movf	DelayTime_1us@count,w
  9539  1091  0222               	subwf	DelayTime_1us@i,w
  9540  1092                     u9785:	
  9541  1092  1803               	btfsc	3,0
  9542  1093  0008               	return
  9543                           
  9544                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9545  1094  01A4               	clrf	DelayTime_1us@j
  9546  1095  01A5               	clrf	DelayTime_1us@j+1
  9547  1096  3000               	movlw	0
  9548  1097  0225               	subwf	DelayTime_1us@j+1,w
  9549  1098  3002               	movlw	2
  9550  1099  1903               	skipnz
  9551  109A  0224               	subwf	DelayTime_1us@j,w
  9552  109B  1803               	btfsc	3,0
  9553  109C  28A8               	goto	l9008
  9554  109D                     l9006:	
  9555  109D  3001               	movlw	1
  9556  109E  07A4               	addwf	DelayTime_1us@j,f
  9557  109F  3000               	movlw	0
  9558  10A0  3DA5               	addwfc	DelayTime_1us@j+1,f
  9559  10A1  3000               	movlw	0
  9560  10A2  0225               	subwf	DelayTime_1us@j+1,w
  9561  10A3  3002               	movlw	2
  9562  10A4  1903               	skipnz
  9563  10A5  0224               	subwf	DelayTime_1us@j,w
  9564  10A6  1C03               	skipc
  9565  10A7  289D               	goto	l9006
  9566  10A8                     l9008:	
  9567  10A8  3001               	movlw	1
  9568  10A9  07A2               	addwf	DelayTime_1us@i,f
  9569  10AA  3000               	movlw	0
  9570  10AB  3DA3               	addwfc	DelayTime_1us@i+1,f
  9571  10AC  288C               	goto	l347
  9572  10AD                     __end_of_DelayTime_1us:	
  9573                           
  9574                           	psect	text48
  9575  1A82                     __ptext48:	
  9576 ;; *************** function _CC2500_ClearTXFIFO *****************
  9577 ;; Defined at:
  9578 ;;		line 194 in file "../src/CC2500_B1.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;		None
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;		None               void
  9585 ;; Registers used:
  9586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        0 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    7
  9599 ;; This function calls:
  9600 ;;		_CC2500_WriteCommand
  9601 ;; This function is called by:
  9602 ;;		_CC2500_PowerOnInitial
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _CC2500_ClearTXFIFO
  9608  1A82                     _CC2500_ClearTXFIFO:	
  9609                           
  9610                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9614  1A82  303B               	movlw	59
  9615  1A83  319E  264E         	fcall	_CC2500_WriteCommand
  9616  1A85  0008               	return
  9617  1A86                     __end_of_CC2500_ClearTXFIFO:	
  9618                           
  9619                           	psect	text49
  9620  1A7E                     __ptext49:	
  9621 ;; *************** function _CC2500_ClearRXFIFO *****************
  9622 ;; Defined at:
  9623 ;;		line 201 in file "../src/CC2500_B1.c"
  9624 ;; Parameters:    Size  Location     Type
  9625 ;;		None
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;		None
  9628 ;; Return value:  Size  Location     Type
  9629 ;;		None               void
  9630 ;; Registers used:
  9631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;Total ram usage:        0 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    7
  9644 ;; This function calls:
  9645 ;;		_CC2500_WriteCommand
  9646 ;; This function is called by:
  9647 ;;		_CC2500_PowerOnInitial
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           
  9652                           ;psect for function _CC2500_ClearRXFIFO
  9653  1A7E                     _CC2500_ClearRXFIFO:	
  9654                           
  9655                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9659  1A7E  303A               	movlw	58
  9660  1A7F  319E  264E         	fcall	_CC2500_WriteCommand
  9661  1A81  0008               	return
  9662  1A82                     __end_of_CC2500_ClearRXFIFO:	
  9663                           
  9664                           	psect	text50
  9665  1E4E                     __ptext50:	
  9666 ;; *************** function _CC2500_WriteCommand *****************
  9667 ;; Defined at:
  9668 ;;		line 292 in file "../src/CC2500_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  command         1    wreg     unsigned char 
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  command         1    3[BANK0 ] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        2 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    6
  9689 ;; This function calls:
  9690 ;;		_CC2500_WriteByte
  9691 ;;		_RF_Timeout_Counter
  9692 ;;		_setRF_TimeoutCleared
  9693 ;; This function is called by:
  9694 ;;		_CC2500_TxData
  9695 ;;		_CC2500_RxData
  9696 ;;		_CC2500_ClearTXFIFO
  9697 ;;		_CC2500_ClearRXFIFO
  9698 ;;		_CC2500_FrequencyCabr
  9699 ;;		_CC2500_SIDLEMode
  9700 ;;		_setRF_Main
  9701 ;;		_RF_RxDisable
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           
  9706                           ;psect for function _CC2500_WriteCommand
  9707  1E4E                     _CC2500_WriteCommand:	
  9708                           
  9709                           ;incstack = 0
  9710                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9711                           ;CC2500_WriteCommand@command stored from wreg
  9712  1E4E  0020               	movlb	0	; select bank0
  9713  1E4F  00A3               	movwf	CC2500_WriteCommand@command
  9714                           
  9715                           ;CC2500_B1.c: 293: RC0 = 0;
  9716  1E50  100E               	bcf	14,0	;volatile
  9717                           
  9718                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9719  1E51  0823               	movf	CC2500_WriteCommand@command,w
  9720  1E52  00A2               	movwf	??_CC2500_WriteCommand
  9721  1E53  0822               	movf	??_CC2500_WriteCommand,w
  9722  1E54  0021               	movlb	1	; select bank1
  9723  1E55  00D3               	movwf	_SPI0Buffer^(0+128)
  9724                           
  9725                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9726  1E56  2E5A               	goto	l8970
  9727  1E57                     l8968:	
  9728                           
  9729                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9730  1E57  319D  2538  319E   	fcall	_RF_Timeout_Counter
  9731  1E5A                     l8970:	
  9732  1E5A  0020               	movlb	0	; select bank0
  9733  1E5B  1E8E               	btfss	14,5	;volatile
  9734  1E5C  2E60               	goto	l8974
  9735  1E5D  0021               	movlb	1	; select bank1
  9736  1E5E  1F21               	btfss	(_RF1^(0+128)+1),6
  9737  1E5F  2E57               	goto	l8968
  9738  1E60                     l8974:	
  9739                           
  9740                           ;CC2500_B1.c: 298: };
  9741                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9742  1E60  319A  227A  319E   	fcall	_setRF_TimeoutCleared
  9743                           
  9744                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9745  1E63  319E  2601         	fcall	_CC2500_WriteByte
  9746                           
  9747                           ;CC2500_B1.c: 302: RC0 = 1;
  9748  1E65  0020               	movlb	0	; select bank0
  9749  1E66  140E               	bsf	14,0	;volatile
  9750  1E67  0008               	return
  9751  1E68                     __end_of_CC2500_WriteCommand:	
  9752                           
  9753                           	psect	text51
  9754  1A7A                     __ptext51:	
  9755 ;; *************** function _setRF_TimeoutCleared *****************
  9756 ;; Defined at:
  9757 ;;		line 149 in file "../src/RF_Control_B1.c"
  9758 ;; Parameters:    Size  Location     Type
  9759 ;;		None
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;		None
  9762 ;; Return value:  Size  Location     Type
  9763 ;;		None               void
  9764 ;; Registers used:
  9765 ;;		status,2
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;Total ram usage:        0 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    5
  9778 ;; This function calls:
  9779 ;;		Nothing
  9780 ;; This function is called by:
  9781 ;;		_CC2500_TxData
  9782 ;;		_CC2500_RxData
  9783 ;;		_CC2500_PowerRST
  9784 ;;		_CC2500_WriteREG
  9785 ;;		_CC2500_WriteCommand
  9786 ;;		_CC2500_ReadStatus
  9787 ;;		_CC2500_ReadREG
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function _setRF_TimeoutCleared
  9793  1A7A                     _setRF_TimeoutCleared:	
  9794                           
  9795                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9796                           
  9797                           ;incstack = 0
  9798                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9799  1A7A  0021               	movlb	1	; select bank1
  9800  1A7B  01AD               	clrf	(_RF1^(0+128)+13)
  9801  1A7C  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9802  1A7D  0008               	return
  9803  1A7E                     __end_of_setRF_TimeoutCleared:	
  9804                           
  9805                           	psect	text52
  9806  1D38                     __ptext52:	
  9807 ;; *************** function _RF_Timeout_Counter *****************
  9808 ;; Defined at:
  9809 ;;		line 141 in file "../src/RF_Control_B1.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;		None
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;		None
  9814 ;; Return value:  Size  Location     Type
  9815 ;;		None               void
  9816 ;; Registers used:
  9817 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;Total ram usage:        0 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    5
  9830 ;; This function calls:
  9831 ;;		Nothing
  9832 ;; This function is called by:
  9833 ;;		_CC2500_TxData
  9834 ;;		_CC2500_RxData
  9835 ;;		_CC2500_PowerRST
  9836 ;;		_CC2500_WriteREG
  9837 ;;		_CC2500_WriteCommand
  9838 ;;		_CC2500_ReadStatus
  9839 ;;		_CC2500_ReadREG
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           
  9844                           ;psect for function _RF_Timeout_Counter
  9845  1D38                     _RF_Timeout_Counter:	
  9846                           
  9847                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9848                           
  9849                           ;incstack = 0
  9850                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9851  1D38  3001               	movlw	1
  9852  1D39  0021               	movlb	1	; select bank1
  9853  1D3A  07AD               	addwf	(_RF1^(0+128)+13),f
  9854  1D3B  3000               	movlw	0
  9855  1D3C  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
  9856                           
  9857                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9858  1D3D  300D               	movlw	13
  9859  1D3E  3EA0               	addlw	_RF1& (0+255)
  9860  1D3F  0086               	movwf	6
  9861  1D40  0187               	clrf	7
  9862  1D41  3F40               	moviw [0]fsr1
  9863  1D42  3AA8               	xorlw	168
  9864  1D43  1D03               	skipz
  9865  1D44  2D47               	goto	u9515
  9866  1D45  3F41               	moviw [1]fsr1
  9867  1D46  3A61               	xorlw	97
  9868  1D47                     u9515:	
  9869  1D47  1D03               	skipz
  9870  1D48  0008               	return
  9871                           
  9872                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9873  1D49  01AD               	clrf	(_RF1^(0+128)+13)
  9874  1D4A  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9875                           
  9876                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9877  1D4B  1721               	bsf	(_RF1^(0+128)+1),6
  9878  1D4C  0008               	return
  9879  1D4D                     __end_of_RF_Timeout_Counter:	
  9880                           
  9881                           	psect	text53
  9882  1E01                     __ptext53:	
  9883 ;; *************** function _CC2500_WriteByte *****************
  9884 ;; Defined at:
  9885 ;;		line 226 in file "../src/CC2500_B1.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;		None
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9890 ;; Return value:  Size  Location     Type
  9891 ;;		None               void
  9892 ;; Registers used:
  9893 ;;		wreg, status,2, status,0
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;Total ram usage:        2 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    5
  9906 ;; This function calls:
  9907 ;;		Nothing
  9908 ;; This function is called by:
  9909 ;;		_CC2500_TxData
  9910 ;;		_CC2500_RxData
  9911 ;;		_CC2500_PowerRST
  9912 ;;		_CC2500_WriteREG
  9913 ;;		_CC2500_WriteCommand
  9914 ;;		_CC2500_ReadStatus
  9915 ;;		_CC2500_ReadREG
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           
  9920                           ;psect for function _CC2500_WriteByte
  9921  1E01                     _CC2500_WriteByte:	
  9922                           
  9923                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9924                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9925                           
  9926                           ;incstack = 0
  9927                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9928  1E01  0020               	movlb	0	; select bank0
  9929  1E02  01A1               	clrf	CC2500_WriteByte@loop_a
  9930  1E03                     L5:	
  9931  1E03  3008               	movlw	8
  9932  1E04  0221               	subwf	CC2500_WriteByte@loop_a,w
  9933  1E05  1803               	btfsc	3,0
  9934  1E06  0008               	return
  9935                           
  9936                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9937  1E07  0021               	movlb	1	; select bank1
  9938  1E08  1FD3               	btfss	_SPI0Buffer^(0+128),7
  9939  1E09  2E0D               	goto	l303
  9940                           
  9941                           ;CC2500_B1.c: 230: RC4 = 1;
  9942  1E0A  0020               	movlb	0	; select bank0
  9943  1E0B  160E               	bsf	14,4	;volatile
  9944  1E0C  2E0F               	goto	l304
  9945  1E0D                     l303:	
  9946                           
  9947                           ;CC2500_B1.c: 231: else
  9948                           ;CC2500_B1.c: 232: RC4 = 0;
  9949  1E0D  0020               	movlb	0	; select bank0
  9950  1E0E  120E               	bcf	14,4	;volatile
  9951  1E0F                     l304:	
  9952                           
  9953                           ;CC2500_B1.c: 233: RC3 = 1;
  9954  1E0F  158E               	bsf	14,3	;volatile
  9955                           
  9956                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9957  1E10  1003               	clrc
  9958  1E11  0021               	movlb	1	; select bank1
  9959  1E12  0DD3               	rlf	_SPI0Buffer^(0+128),f
  9960                           
  9961                           ;CC2500_B1.c: 235: RC3 = 0;
  9962  1E13  0020               	movlb	0	; select bank0
  9963  1E14  118E               	bcf	14,3	;volatile
  9964  1E15  3001               	movlw	1
  9965  1E16  00A0               	movwf	??_CC2500_WriteByte
  9966  1E17  0820               	movf	??_CC2500_WriteByte,w
  9967  1E18  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9968  1E19  2E03               	goto	L5
  9969  1E1A                     __end_of_CC2500_WriteByte:	
  9970                           
  9971                           	psect	text54
  9972  1A5A                     __ptext54:	
  9973 ;; *************** function _RF_Initialization *****************
  9974 ;; Defined at:
  9975 ;;		line 9 in file "../src/RF_Control_B1.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;		None
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;		None
  9980 ;; Return value:  Size  Location     Type
  9981 ;;		None               void
  9982 ;; Registers used:
  9983 ;;		wreg, status,2, status,0, pclath, cstack
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;Total ram usage:        0 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; Hardware stack levels required when called:    6
  9996 ;; This function calls:
  9997 ;;		_setRF_Initialization
  9998 ;; This function is called by:
  9999 ;;		_main
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           
 10004                           ;psect for function _RF_Initialization
 10005  1A5A                     _RF_Initialization:	
 10006                           
 10007                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10008                           
 10009                           ;incstack = 0
 10010                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10011  1A5A  319B  231B         	fcall	_setRF_Initialization
 10012  1A5C  0008               	return
 10013  1A5D                     __end_of_RF_Initialization:	
 10014                           
 10015                           	psect	text55
 10016  1B1B                     __ptext55:	
 10017 ;; *************** function _setRF_Initialization *****************
 10018 ;; Defined at:
 10019 ;;		line 17 in file "../src/RF_Control_B1.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;		None               void
 10026 ;; Registers used:
 10027 ;;		wreg
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;Total ram usage:        1 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    5
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_RF_Initialization
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           
 10048                           ;psect for function _setRF_Initialization
 10049  1B1B                     _setRF_Initialization:	
 10050                           
 10051                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10052                           
 10053                           ;incstack = 0
 10054                           ; Regs used in _setRF_Initialization: [wreg]
 10055  1B1B  3015               	movlw	21
 10056  1B1C  0020               	movlb	0	; select bank0
 10057  1B1D  00A0               	movwf	??_setRF_Initialization
 10058  1B1E  0820               	movf	??_setRF_Initialization,w
 10059  1B1F  0021               	movlb	1	; select bank1
 10060  1B20  00D6               	movwf	_Tx_Length^(0+128)
 10061                           
 10062                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10063  1B21  30C8               	movlw	200
 10064  1B22  00A8               	movwf	(_RF1^(0+128)+8)
 10065  1B23  3000               	movlw	0
 10066  1B24  00A9               	movwf	(_RF1^(0+128)+9)
 10067  1B25  0008               	return
 10068  1B26                     __end_of_setRF_Initialization:	
 10069                           
 10070                           	psect	text56
 10071  1CA1                     __ptext56:	
 10072 ;; *************** function _Mcu_Initialization *****************
 10073 ;; Defined at:
 10074 ;;		line 30 in file "../src/MCU_B1.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;		None
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;		None
 10079 ;; Return value:  Size  Location     Type
 10080 ;;		None               void
 10081 ;; Registers used:
 10082 ;;		wreg, status,2, status,0, pclath, cstack
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;Total ram usage:        0 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    6
 10095 ;; This function calls:
 10096 ;;		_ADC_Set
 10097 ;;		_Fosc_Set
 10098 ;;		_IOC_Set
 10099 ;;		_IO_Set
 10100 ;;		_TMR1_Set
 10101 ;;		_WDT_Set
 10102 ;; This function is called by:
 10103 ;;		_main
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           
 10108                           ;psect for function _Mcu_Initialization
 10109  1CA1                     _Mcu_Initialization:	
 10110                           
 10111                           ;MCU_B1.c: 32: Fosc_Set();
 10112                           
 10113                           ;incstack = 0
 10114                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10115  1CA1  319A  2276  319C   	fcall	_Fosc_Set
 10116                           
 10117                           ;MCU_B1.c: 34: IO_Set();
 10118  1CA4  319E  2634  319C   	fcall	_IO_Set
 10119                           
 10120                           ;MCU_B1.c: 36: ;;
 10121                           ;MCU_B1.c: 38: TMR1_Set();
 10122  1CA7  319B  2386  319C   	fcall	_TMR1_Set
 10123                           
 10124                           ;MCU_B1.c: 40: ADC_Set();
 10125  1CAA  319A  22AC  319C   	fcall	_ADC_Set
 10126                           
 10127                           ;MCU_B1.c: 42: ;;
 10128                           ;MCU_B1.c: 44: ;;
 10129                           ;MCU_B1.c: 46: IOC_Set();
 10130  1CAD  319B  2305  319C   	fcall	_IOC_Set
 10131                           
 10132                           ;MCU_B1.c: 48: ;;
 10133                           ;MCU_B1.c: 50: ;;
 10134                           ;MCU_B1.c: 52: WDT_Set();
 10135  1CB0  319B  2310         	fcall	_WDT_Set
 10136  1CB2  0008               	return
 10137  1CB3                     __end_of_Mcu_Initialization:	
 10138                           
 10139                           	psect	text57
 10140  1B10                     __ptext57:	
 10141 ;; *************** function _WDT_Set *****************
 10142 ;; Defined at:
 10143 ;;		line 1102 in file "../src/MCU_B1.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;		None
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;		None
 10148 ;; Return value:  Size  Location     Type
 10149 ;;		None               void
 10150 ;; Registers used:
 10151 ;;		wreg
 10152 ;; Tracked objects:
 10153 ;;		On entry : 0/0
 10154 ;;		On exit  : 0/0
 10155 ;;		Unchanged: 0/0
 10156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;Total ram usage:        1 bytes
 10162 ;; Hardware stack levels used:    1
 10163 ;; Hardware stack levels required when called:    5
 10164 ;; This function calls:
 10165 ;;		Nothing
 10166 ;; This function is called by:
 10167 ;;		_Mcu_Initialization
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           
 10172                           ;psect for function _WDT_Set
 10173  1B10                     _WDT_Set:	
 10174                           
 10175                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10176                           
 10177                           ;incstack = 0
 10178                           ; Regs used in _WDT_Set: [wreg]
 10179  1B10  3017               	movlw	23
 10180  1B11  0021               	movlb	1	; select bank1
 10181  1B12  0097               	movwf	23	;volatile
 10182                           
 10183                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10184  1B13  1448               	bsf	_WDT^(0+128),0
 10185                           
 10186                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10187  1B14  300A               	movlw	10
 10188  1B15  0020               	movlb	0	; select bank0
 10189  1B16  00A0               	movwf	??_WDT_Set
 10190  1B17  0820               	movf	??_WDT_Set,w
 10191  1B18  0021               	movlb	1	; select bank1
 10192  1B19  00C9               	movwf	(_WDT^(0+128)+1)
 10193  1B1A  0008               	return
 10194  1B1B                     __end_of_WDT_Set:	
 10195                           
 10196                           	psect	text58
 10197  1B86                     __ptext58:	
 10198 ;; *************** function _TMR1_Set *****************
 10199 ;; Defined at:
 10200 ;;		line 226 in file "../src/MCU_B1.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;		None
 10205 ;; Return value:  Size  Location     Type
 10206 ;;		None               void
 10207 ;; Registers used:
 10208 ;;		wreg
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;Total ram usage:        0 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    5
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_Mcu_Initialization
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           
 10229                           ;psect for function _TMR1_Set
 10230  1B86                     _TMR1_Set:	
 10231                           
 10232                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10233                           
 10234                           ;incstack = 0
 10235                           ; Regs used in _TMR1_Set: [wreg]
 10236  1B86  3041               	movlw	65
 10237  1B87  0020               	movlb	0	; select bank0
 10238  1B88  0098               	movwf	24	;volatile
 10239                           
 10240                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10241  1B89  30FA               	movlw	250
 10242  1B8A  0097               	movwf	23	;volatile
 10243                           
 10244                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10245  1B8B  3038               	movlw	56
 10246  1B8C  0096               	movwf	22	;volatile
 10247                           
 10248                           ;MCU_B1.c: 230: TMR1IE = 1;
 10249  1B8D  0021               	movlb	1	; select bank1
 10250  1B8E  1411               	bsf	17,0	;volatile
 10251                           
 10252                           ;MCU_B1.c: 231: PEIE = 1;
 10253  1B8F  170B               	bsf	11,6	;volatile
 10254                           
 10255                           ;MCU_B1.c: 232: GIE = 1;
 10256  1B90  178B               	bsf	11,7	;volatile
 10257  1B91  0008               	return
 10258  1B92                     __end_of_TMR1_Set:	
 10259                           
 10260                           	psect	text59
 10261  1E34                     __ptext59:	
 10262 ;; *************** function _IO_Set *****************
 10263 ;; Defined at:
 10264 ;;		line 60 in file "../src/MCU_B1.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;		None
 10267 ;; Auto vars:     Size  Location     Type
 10268 ;;		None
 10269 ;; Return value:  Size  Location     Type
 10270 ;;		None               void
 10271 ;; Registers used:
 10272 ;;		wreg, status,2
 10273 ;; Tracked objects:
 10274 ;;		On entry : 0/0
 10275 ;;		On exit  : 0/0
 10276 ;;		Unchanged: 0/0
 10277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;Total ram usage:        0 bytes
 10283 ;; Hardware stack levels used:    1
 10284 ;; Hardware stack levels required when called:    5
 10285 ;; This function calls:
 10286 ;;		Nothing
 10287 ;; This function is called by:
 10288 ;;		_Mcu_Initialization
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           
 10293                           ;psect for function _IO_Set
 10294  1E34                     _IO_Set:	
 10295                           
 10296                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10297                           
 10298                           ;incstack = 0
 10299                           ; Regs used in _IO_Set: [wreg+status,2]
 10300  1E34  30F7               	movlw	247
 10301  1E35  0021               	movlb	1	; select bank1
 10302  1E36  008C               	movwf	12	;volatile
 10303                           
 10304                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10305  1E37  3004               	movlw	4
 10306  1E38  008D               	movwf	13	;volatile
 10307                           
 10308                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10309  1E39  3026               	movlw	38
 10310  1E3A  008E               	movwf	14	;volatile
 10311                           
 10312                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10313  1E3B  0022               	movlb	2	; select bank2
 10314  1E3C  018C               	clrf	12	;volatile
 10315                           
 10316                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10317  1E3D  018D               	clrf	13	;volatile
 10318                           
 10319                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10320  1E3E  018E               	clrf	14	;volatile
 10321                           
 10322                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10323  1E3F  300E               	movlw	14
 10324  1E40  0023               	movlb	3	; select bank3
 10325  1E41  008C               	movwf	12	;volatile
 10326                           
 10327                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10328  1E42  018D               	clrf	13	;volatile
 10329                           
 10330                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10331  1E43  018E               	clrf	14	;volatile
 10332                           
 10333                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10334  1E44  30F7               	movlw	247
 10335  1E45  0020               	movlb	0	; select bank0
 10336  1E46  008C               	movwf	12	;volatile
 10337                           
 10338                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10339  1E47  3004               	movlw	4
 10340  1E48  008D               	movwf	13	;volatile
 10341                           
 10342                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10343  1E49  3026               	movlw	38
 10344  1E4A  008E               	movwf	14	;volatile
 10345                           
 10346                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10347  1E4B  0024               	movlb	4	; select bank4
 10348  1E4C  018D               	clrf	13	;volatile
 10349  1E4D  0008               	return
 10350  1E4E                     __end_of_IO_Set:	
 10351                           
 10352                           	psect	text60
 10353  1B05                     __ptext60:	
 10354 ;; *************** function _IOC_Set *****************
 10355 ;; Defined at:
 10356 ;;		line 380 in file "../src/MCU_B1.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;		None               void
 10363 ;; Registers used:
 10364 ;;		wreg, status,2
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;Total ram usage:        0 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    5
 10377 ;; This function calls:
 10378 ;;		Nothing
 10379 ;; This function is called by:
 10380 ;;		_Mcu_Initialization
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           
 10385                           ;psect for function _IOC_Set
 10386  1B05                     _IOC_Set:	
 10387                           
 10388                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10389                           
 10390                           ;incstack = 0
 10391                           ; Regs used in _IOC_Set: [wreg+status,2]
 10392  1B05  3004               	movlw	4
 10393  1B06  0027               	movlb	7	; select bank7
 10394  1B07  0094               	movwf	20	;volatile
 10395                           
 10396                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10397  1B08  3004               	movlw	4
 10398  1B09  0095               	movwf	21	;volatile
 10399                           
 10400                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10401  1B0A  0196               	clrf	22	;volatile
 10402                           
 10403                           ;MCU_B1.c: 387: IOCIE = 1;
 10404  1B0B  158B               	bsf	11,3	;volatile
 10405                           
 10406                           ;MCU_B1.c: 388: IOCIF = 0;
 10407  1B0C  100B               	bcf	11,0	;volatile
 10408                           
 10409                           ;MCU_B1.c: 389: PEIE = 1;
 10410  1B0D  170B               	bsf	11,6	;volatile
 10411                           
 10412                           ;MCU_B1.c: 390: GIE = 1;
 10413  1B0E  178B               	bsf	11,7	;volatile
 10414  1B0F  0008               	return
 10415  1B10                     __end_of_IOC_Set:	
 10416                           
 10417                           	psect	text61
 10418  1A76                     __ptext61:	
 10419 ;; *************** function _Fosc_Set *****************
 10420 ;; Defined at:
 10421 ;;		line 56 in file "../src/MCU_B1.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;		None
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;		None               void
 10428 ;; Registers used:
 10429 ;;		wreg
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:        0 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    5
 10442 ;; This function calls:
 10443 ;;		Nothing
 10444 ;; This function is called by:
 10445 ;;		_Mcu_Initialization
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function _Fosc_Set
 10451  1A76                     _Fosc_Set:	
 10452                           
 10453                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in _Fosc_Set: [wreg]
 10457  1A76  3078               	movlw	120
 10458  1A77  0021               	movlb	1	; select bank1
 10459  1A78  0099               	movwf	25	;volatile
 10460  1A79  0008               	return
 10461  1A7A                     __end_of_Fosc_Set:	
 10462                           
 10463                           	psect	text62
 10464  1AAC                     __ptext62:	
 10465 ;; *************** function _ADC_Set *****************
 10466 ;; Defined at:
 10467 ;;		line 427 in file "../src/MCU_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_Mcu_Initialization
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _ADC_Set
 10497  1AAC                     _ADC_Set:	
 10498                           
 10499                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _ADC_Set: [wreg]
 10503  1AAC  30F3               	movlw	243
 10504  1AAD  0021               	movlb	1	; select bank1
 10505  1AAE  009E               	movwf	30	;volatile
 10506                           
 10507                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10508  1AAF  30C1               	movlw	193
 10509  1AB0  0022               	movlb	2	; select bank2
 10510  1AB1  0097               	movwf	23	;volatile
 10511  1AB2  0008               	return
 10512  1AB3                     __end_of_ADC_Set:	
 10513                           
 10514                           	psect	text63
 10515  004B                     __ptext63:	
 10516 ;; *************** function _Load_Main *****************
 10517 ;; Defined at:
 10518 ;;		line 40 in file "../src/OverLoad_B1.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  i               2   16[BANK0 ] int 
 10523 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10524 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10525 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10526 ;;  error           1   10[BANK0 ] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;		None               void
 10529 ;; Registers used:
 10530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;Total ram usage:       10 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    6
 10543 ;; This function calls:
 10544 ;;		___lwdiv
 10545 ;;		___wmul
 10546 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10547 ;;		_getDimmer_LoadGO
 10548 ;;		_getDimmer_Load_Status
 10549 ;;		_getMain_All_Error_Status
 10550 ;;		_getMain_All_LightsStatus
 10551 ;;		_getMain_Lights_Count
 10552 ;;		_setLoad_AH_AL_Restore
 10553 ;; This function is called by:
 10554 ;;		_main
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _Load_Main
 10560  004B                     _Load_Main:	
 10561                           
 10562                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10566  004B  3000               	movlw	0
 10567  004C  3191  215F  3180   	fcall	_getMain_All_Error_Status
 10568  004F  0020               	movlb	0	; select bank0
 10569  0050  00A8               	movwf	??_Load_Main
 10570  0051  0828               	movf	??_Load_Main,w
 10571  0052  00AA               	movwf	Load_Main@error
 10572                           
 10573                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10574  0053  01AE               	clrf	Load_Main@Load_RunStatus
 10575  0054  01AD               	clrf	Load_Main@ErrorCountValue
 10576  0055  01AF               	clrf	Load_Main@LightsCount
 10577                           
 10578                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10579  0056  0022               	movlb	2	; select bank2
 10580  0057  1C36               	btfss	_Load^(0+256),0
 10581  0058  29F7               	goto	l1624
 10582                           
 10583                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10584  0059  319A  22E5  3180   	fcall	_getMain_All_LightsStatus
 10585  005C  3800               	iorlw	0
 10586  005D  1D03               	skipz
 10587  005E  2861               	goto	l10654
 10588                           
 10589                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10590  005F  0022               	movlb	2	; select bank2
 10591  0060  2882               	goto	l10672
 10592  0061                     l10654:	
 10593                           ;OverLoad_B1.c: 47: } else {
 10594                           
 10595                           
 10596                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10597  0061  0020               	movlb	0	; select bank0
 10598  0062  08AA               	movf	Load_Main@error,f
 10599  0063  1D03               	skipz
 10600  0064  287F               	goto	l1627
 10601  0065  319C  24EB  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10602  0068  3800               	iorlw	0
 10603  0069  1D03               	skipz
 10604  006A  287F               	goto	l1627
 10605                           
 10606                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10607  006B  0022               	movlb	2	; select bank2
 10608  006C  14B6               	bsf	_Load^(0+256),1
 10609                           
 10610                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10611  006D  319A  22C2  3180   	fcall	_getDimmer_LoadGO
 10612  0070  3A01               	xorlw	1
 10613  0071  1D03               	skipz
 10614  0072  287A               	goto	l1628
 10615                           
 10616                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10617  0073  0022               	movlb	2	; select bank2
 10618  0074  1DB6               	btfss	_Load^(0+256),3
 10619  0075  1BB6               	btfsc	_Load^(0+256),7
 10620  0076  2883               	goto	l1626
 10621                           
 10622                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10623  0077  15B6               	bsf	_Load^(0+256),3
 10624                           
 10625                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10626  0078  01DB               	clrf	(_Load^(0+256)+37)
 10627                           
 10628                           ;OverLoad_B1.c: 57: }
 10629                           ;OverLoad_B1.c: 58: } else {
 10630  0079  2883               	goto	l1626
 10631  007A                     l1628:	
 10632                           
 10633                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10634  007A  0022               	movlb	2	; select bank2
 10635  007B  1FB6               	btfss	_Load^(0+256),7
 10636  007C  2883               	goto	l1626
 10637                           
 10638                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10639  007D  13B6               	bcf	_Load^(0+256),7
 10640                           
 10641                           ;OverLoad_B1.c: 61: }
 10642                           ;OverLoad_B1.c: 62: }
 10643                           ;OverLoad_B1.c: 63: } else {
 10644  007E  2883               	goto	l1626
 10645  007F                     l1627:	
 10646                           
 10647                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10648  007F  0022               	movlb	2	; select bank2
 10649  0080  1CB6               	btfss	_Load^(0+256),1
 10650  0081  2883               	goto	l1626
 10651  0082                     l10672:	
 10652                           
 10653                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10654  0082  10B6               	bcf	_Load^(0+256),1
 10655  0083                     l1626:	
 10656                           
 10657                           ;OverLoad_B1.c: 66: }
 10658                           ;OverLoad_B1.c: 67: }
 10659                           ;OverLoad_B1.c: 89: }
 10660                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10661  0083  1CB6               	btfss	_Load^(0+256),1
 10662  0084  29D3               	goto	l1634
 10663                           
 10664                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10665  0085  1536               	bsf	_Load^(0+256),2
 10666                           
 10667                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10668  0086  1E36               	btfss	_Load^(0+256),4
 10669  0087  29D1               	goto	l1635
 10670                           
 10671                           ;OverLoad_B1.c: 96: Load.Time++;
 10672  0088  3001               	movlw	1
 10673  0089  07B7               	addwf	(_Load^(0+256)+1),f
 10674  008A  3000               	movlw	0
 10675  008B  3DB8               	addwfc	((_Load+1)^(0+256)+1),f
 10676                           
 10677                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10678  008C  3000               	movlw	0
 10679  008D  0238               	subwf	((_Load+1)^(0+256)+1),w
 10680  008E  3002               	movlw	2
 10681  008F  1903               	skipnz
 10682  0090  0237               	subwf	(_Load^(0+256)+1),w
 10683  0091  1C03               	skipc
 10684  0092  0008               	return
 10685                           
 10686                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10687  0093  01B7               	clrf	(_Load^(0+256)+1)
 10688  0094  01B8               	clrf	((_Load+1)^(0+256)+1)
 10689                           
 10690                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10691  0095  1236               	bcf	_Load^(0+256),4
 10692                           
 10693                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10694  0096  3001               	movlw	1
 10695  0097  0020               	movlb	0	; select bank0
 10696  0098  00B0               	movwf	Load_Main@i
 10697  0099  3000               	movlw	0
 10698  009A  00B1               	movwf	Load_Main@i+1
 10699  009B  0831               	movf	Load_Main@i+1,w
 10700  009C  3A80               	xorlw	128
 10701  009D  00A8               	movwf	??_Load_Main
 10702  009E  3080               	movlw	128
 10703  009F  0228               	subwf	??_Load_Main,w
 10704  00A0  1D03               	skipz
 10705  00A1  28A4               	goto	u12445
 10706  00A2  3004               	movlw	4
 10707  00A3  0230               	subwf	Load_Main@i,w
 10708  00A4                     u12445:	
 10709  00A4  1803               	btfsc	3,0
 10710  00A5  28D8               	goto	l10694
 10711  00A6                     l10688:	
 10712                           
 10713                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10714  00A6  0020               	movlb	0	; select bank0
 10715  00A7  3530               	lslf	Load_Main@i,w
 10716  00A8  3E41               	addlw	(_Load+11)& (0+255)
 10717  00A9  0086               	movwf	6
 10718  00AA  3001               	movlw	1	; select bank2/3
 10719  00AB  0087               	movwf	7
 10720  00AC  3F40               	moviw [0]fsr1
 10721  00AD  00A8               	movwf	??_Load_Main
 10722  00AE  3F41               	moviw [1]fsr1
 10723  00AF  00A9               	movwf	??_Load_Main+1
 10724  00B0  0828               	movf	??_Load_Main,w
 10725  00B1  0022               	movlb	2	; select bank2
 10726  00B2  07BB               	addwf	(_Load^(0+256)+5),f
 10727  00B3  0020               	movlb	0	; select bank0
 10728  00B4  0829               	movf	??_Load_Main+1,w
 10729  00B5  0022               	movlb	2	; select bank2
 10730  00B6  3DBC               	addwfc	((_Load+1)^(0+256)+5),f
 10731                           
 10732                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10733  00B7  0020               	movlb	0	; select bank0
 10734  00B8  3530               	lslf	Load_Main@i,w
 10735  00B9  3E4B               	addlw	(_Load+21)& (0+255)
 10736  00BA  0086               	movwf	6
 10737  00BB  3001               	movlw	1	; select bank2/3
 10738  00BC  0087               	movwf	7
 10739  00BD  3F40               	moviw [0]fsr1
 10740  00BE  00A8               	movwf	??_Load_Main
 10741  00BF  3F41               	moviw [1]fsr1
 10742  00C0  00A9               	movwf	??_Load_Main+1
 10743  00C1  0828               	movf	??_Load_Main,w
 10744  00C2  0022               	movlb	2	; select bank2
 10745  00C3  07BD               	addwf	(_Load^(0+256)+7),f
 10746  00C4  0020               	movlb	0	; select bank0
 10747  00C5  0829               	movf	??_Load_Main+1,w
 10748  00C6  0022               	movlb	2	; select bank2
 10749  00C7  3DBE               	addwfc	((_Load+1)^(0+256)+7),f
 10750  00C8  3001               	movlw	1
 10751  00C9  0020               	movlb	0	; select bank0
 10752  00CA  07B0               	addwf	Load_Main@i,f
 10753  00CB  3000               	movlw	0
 10754  00CC  3DB1               	addwfc	Load_Main@i+1,f
 10755  00CD  0831               	movf	Load_Main@i+1,w
 10756  00CE  3A80               	xorlw	128
 10757  00CF  00A8               	movwf	??_Load_Main
 10758  00D0  3080               	movlw	128
 10759  00D1  0228               	subwf	??_Load_Main,w
 10760  00D2  1D03               	skipz
 10761  00D3  28D6               	goto	u12455
 10762  00D4  3004               	movlw	4
 10763  00D5  0230               	subwf	Load_Main@i,w
 10764  00D6                     u12455:	
 10765  00D6  1C03               	skipc
 10766  00D7  28A6               	goto	l10688
 10767  00D8                     l10694:	
 10768                           
 10769                           ;OverLoad_B1.c: 104: }
 10770                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10771  00D8  3003               	movlw	3
 10772  00D9  0020               	movlb	0	; select bank0
 10773  00DA  00A0               	movwf	___lwdiv@divisor
 10774  00DB  3000               	movlw	0
 10775  00DC  00A1               	movwf	___lwdiv@divisor+1
 10776  00DD  0022               	movlb	2	; select bank2
 10777  00DE  083C               	movf	((_Load+1)^(0+256)+5),w
 10778  00DF  0020               	movlb	0	; select bank0
 10779  00E0  01A3               	clrf	___lwdiv@dividend+1
 10780  00E1  07A3               	addwf	___lwdiv@dividend+1,f
 10781  00E2  0022               	movlb	2	; select bank2
 10782  00E3  083B               	movf	(_Load^(0+256)+5),w
 10783  00E4  0020               	movlb	0	; select bank0
 10784  00E5  01A2               	clrf	___lwdiv@dividend
 10785  00E6  07A2               	addwf	___lwdiv@dividend,f
 10786  00E7  3192  2265  3180   	fcall	___lwdiv
 10787  00EA  0020               	movlb	0	; select bank0
 10788  00EB  0821               	movf	?___lwdiv+1,w
 10789  00EC  0022               	movlb	2	; select bank2
 10790  00ED  01BC               	clrf	((_Load+1)^(0+256)+5)
 10791  00EE  07BC               	addwf	((_Load+1)^(0+256)+5),f
 10792  00EF  0020               	movlb	0	; select bank0
 10793  00F0  0820               	movf	?___lwdiv,w
 10794  00F1  0022               	movlb	2	; select bank2
 10795  00F2  01BB               	clrf	(_Load^(0+256)+5)
 10796  00F3  07BB               	addwf	(_Load^(0+256)+5),f
 10797                           
 10798                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10799  00F4  3003               	movlw	3
 10800  00F5  0020               	movlb	0	; select bank0
 10801  00F6  00A0               	movwf	___lwdiv@divisor
 10802  00F7  3000               	movlw	0
 10803  00F8  00A1               	movwf	___lwdiv@divisor+1
 10804  00F9  0022               	movlb	2	; select bank2
 10805  00FA  083E               	movf	((_Load+1)^(0+256)+7),w
 10806  00FB  0020               	movlb	0	; select bank0
 10807  00FC  01A3               	clrf	___lwdiv@dividend+1
 10808  00FD  07A3               	addwf	___lwdiv@dividend+1,f
 10809  00FE  0022               	movlb	2	; select bank2
 10810  00FF  083D               	movf	(_Load^(0+256)+7),w
 10811  0100  0020               	movlb	0	; select bank0
 10812  0101  01A2               	clrf	___lwdiv@dividend
 10813  0102  07A2               	addwf	___lwdiv@dividend,f
 10814  0103  3192  2265  3180   	fcall	___lwdiv
 10815  0106  0020               	movlb	0	; select bank0
 10816  0107  0821               	movf	?___lwdiv+1,w
 10817  0108  0022               	movlb	2	; select bank2
 10818  0109  01BE               	clrf	((_Load+1)^(0+256)+7)
 10819  010A  07BE               	addwf	((_Load+1)^(0+256)+7),f
 10820  010B  0020               	movlb	0	; select bank0
 10821  010C  0820               	movf	?___lwdiv,w
 10822  010D  0022               	movlb	2	; select bank2
 10823  010E  01BD               	clrf	(_Load^(0+256)+7)
 10824  010F  07BD               	addwf	(_Load^(0+256)+7),f
 10825                           
 10826                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 10827  0110  319E  269F  3180   	fcall	_setLoad_AH_AL_Restore
 10828                           
 10829                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 10830  0113  0022               	movlb	2	; select bank2
 10831  0114  083E               	movf	((_Load+1)^(0+256)+7),w
 10832  0115  023C               	subwf	((_Load+1)^(0+256)+5),w
 10833  0116  1D03               	skipz
 10834  0117  291A               	goto	u12465
 10835  0118  083D               	movf	(_Load^(0+256)+7),w
 10836  0119  023B               	subwf	(_Load^(0+256)+5),w
 10837  011A                     u12465:	
 10838  011A  1C03               	skipc
 10839  011B  0008               	return
 10840                           
 10841                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 10842  011C  3005               	movlw	5
 10843  011D  3E36               	addlw	_Load& (0+255)
 10844  011E  0086               	movwf	6
 10845  011F  3001               	movlw	1	; select bank2/3
 10846  0120  0087               	movwf	7
 10847  0121  093D               	comf	(_Load^(0+256)+7),w
 10848  0122  0020               	movlb	0	; select bank0
 10849  0123  00A8               	movwf	??_Load_Main
 10850  0124  0022               	movlb	2	; select bank2
 10851  0125  093E               	comf	((_Load+1)^(0+256)+7),w
 10852  0126  0020               	movlb	0	; select bank0
 10853  0127  00A9               	movwf	??_Load_Main+1
 10854  0128  0AA8               	incf	??_Load_Main,f
 10855  0129  1903               	skipnz
 10856  012A  0AA9               	incf	??_Load_Main+1,f
 10857  012B  3F40               	moviw [0]fsr1
 10858  012C  0728               	addwf	??_Load_Main,w
 10859  012D  0022               	movlb	2	; select bank2
 10860  012E  00D5               	movwf	(_Load^(0+256)+31)
 10861  012F  3F41               	moviw [1]fsr1
 10862  0130  0020               	movlb	0	; select bank0
 10863  0131  3D29               	addwfc	??_Load_Main+1,w
 10864  0132  0022               	movlb	2	; select bank2
 10865  0133  00D6               	movwf	(_Load^(0+256)+32)
 10866                           
 10867                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 10868  0134  01BB               	clrf	(_Load^(0+256)+5)
 10869  0135  01BC               	clrf	((_Load+1)^(0+256)+5)
 10870                           
 10871                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 10872  0136  01BD               	clrf	(_Load^(0+256)+7)
 10873  0137  01BE               	clrf	((_Load+1)^(0+256)+7)
 10874                           
 10875                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 10876  0138  1DB6               	btfss	_Load^(0+256),3
 10877  0139  2993               	goto	l10734
 10878                           
 10879                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 10880  013A  3002               	movlw	2
 10881  013B  025B               	subwf	(_Load^(0+256)+37),w
 10882  013C  1803               	skipnc
 10883  013D  2993               	goto	l10734
 10884                           
 10885                           ;OverLoad_B1.c: 117: Load.Count++;
 10886  013E  3001               	movlw	1
 10887  013F  0020               	movlb	0	; select bank0
 10888  0140  00A8               	movwf	??_Load_Main
 10889  0141  0828               	movf	??_Load_Main,w
 10890  0142  0022               	movlb	2	; select bank2
 10891  0143  07DB               	addwf	(_Load^(0+256)+37),f
 10892                           
 10893                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 10894  0144  3187  27F8  3180   	fcall	_getDimmer_Load_Status
 10895  0147  0020               	movlb	0	; select bank0
 10896  0148  00A8               	movwf	??_Load_Main
 10897  0149  0828               	movf	??_Load_Main,w
 10898  014A  00AE               	movwf	Load_Main@Load_RunStatus
 10899                           
 10900                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 10901  014B  319A  22FA  3180   	fcall	_getMain_Lights_Count
 10902  014E  0020               	movlb	0	; select bank0
 10903  014F  00A8               	movwf	??_Load_Main
 10904  0150  0828               	movf	??_Load_Main,w
 10905  0151  00AF               	movwf	Load_Main@LightsCount
 10906                           
 10907                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 10908  0152  0022               	movlb	2	; select bank2
 10909  0153  085B               	movf	(_Load^(0+256)+37),w
 10910  0154  3A01               	xorlw	1
 10911  0155  1D03               	skipz
 10912  0156  295B               	goto	l10720
 10913                           
 10914                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 10915  0157  3014               	movlw	20
 10916  0158  00D9               	movwf	(_Load^(0+256)+35)
 10917  0159  3005               	movlw	5
 10918  015A  2968               	goto	L6
 10919  015B                     l10720:	
 10920                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 10921                           
 10922  015B  085B               	movf	(_Load^(0+256)+37),w
 10923  015C  3A02               	xorlw	2
 10924  015D  1D03               	skipz
 10925  015E  2993               	goto	l10734
 10926                           
 10927                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 10928  015F  0020               	movlb	0	; select bank0
 10929  0160  082F               	movf	Load_Main@LightsCount,w
 10930  0161  3A01               	xorlw	1
 10931  0162  1D03               	skipz
 10932  0163  296A               	goto	l10726
 10933                           
 10934                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 10935  0164  3075               	movlw	117
 10936  0165  0022               	movlb	2	; select bank2
 10937  0166  00D9               	movwf	(_Load^(0+256)+35)
 10938  0167  3000               	movlw	0
 10939  0168                     L6:	
 10940  0168  00DA               	movwf	(_Load^(0+256)+36)
 10941                           
 10942                           ;OverLoad_B1.c: 132: } else {
 10943  0169  2993               	goto	l10734
 10944  016A                     l10726:	
 10945                           
 10946                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 10947  016A  0020               	movlb	0	; select bank0
 10948  016B  08AE               	movf	Load_Main@Load_RunStatus,f
 10949  016C  1D03               	skipz
 10950  016D  2987               	goto	l10730
 10951                           
 10952                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 10953  016E  082F               	movf	Load_Main@LightsCount,w
 10954  016F  00A8               	movwf	??_Load_Main
 10955  0170  01A9               	clrf	??_Load_Main+1
 10956  0171  0828               	movf	??_Load_Main,w
 10957  0172  00A0               	movwf	___wmul@multiplier
 10958  0173  0829               	movf	??_Load_Main+1,w
 10959  0174  00A1               	movwf	___wmul@multiplier+1
 10960  0175  3075               	movlw	117
 10961  0176  00A2               	movwf	___wmul@multiplicand
 10962  0177  3000               	movlw	0
 10963  0178  00A3               	movwf	___wmul@multiplicand+1
 10964  0179  319E  26D8  3180   	fcall	___wmul
 10965  017C  0020               	movlb	0	; select bank0
 10966  017D  0821               	movf	?___wmul+1,w
 10967  017E  0022               	movlb	2	; select bank2
 10968  017F  01DA               	clrf	((_Load+1)^(0+256)+35)
 10969  0180  07DA               	addwf	((_Load+1)^(0+256)+35),f
 10970  0181  0020               	movlb	0	; select bank0
 10971  0182  0820               	movf	?___wmul,w
 10972  0183  0022               	movlb	2	; select bank2
 10973  0184  01D9               	clrf	(_Load^(0+256)+35)
 10974  0185  07D9               	addwf	(_Load^(0+256)+35),f
 10975                           
 10976                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 10977  0186  2993               	goto	l10734
 10978  0187                     l10730:	
 10979  0187  0020               	movlb	0	; select bank0
 10980  0188  082E               	movf	Load_Main@Load_RunStatus,w
 10981  0189  3A01               	xorlw	1
 10982  018A  1D03               	skipz
 10983  018B  2993               	goto	l10734
 10984                           
 10985                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 10986  018C  0022               	movlb	2	; select bank2
 10987  018D  083F               	movf	(_Load^(0+256)+9),w
 10988  018E  3E75               	addlw	117
 10989  018F  00D9               	movwf	(_Load^(0+256)+35)
 10990  0190  3000               	movlw	0
 10991  0191  3D40               	addwfc	((_Load+1)^(0+256)+9),w
 10992  0192  00DA               	movwf	((_Load+1)^(0+256)+35)
 10993  0193                     l10734:	
 10994                           
 10995                           ;OverLoad_B1.c: 137: }
 10996                           ;OverLoad_B1.c: 138: }
 10997                           ;OverLoad_B1.c: 139: }
 10998                           ;OverLoad_B1.c: 140: }
 10999                           ;OverLoad_B1.c: 141: }
 11000                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11001  0193  0022               	movlb	2	; select bank2
 11002  0194  085A               	movf	((_Load+1)^(0+256)+35),w
 11003  0195  0256               	subwf	((_Load+1)^(0+256)+31),w
 11004  0196  1D03               	skipz
 11005  0197  299A               	goto	u12545
 11006  0198  0859               	movf	(_Load^(0+256)+35),w
 11007  0199  0255               	subwf	(_Load^(0+256)+31),w
 11008  019A                     u12545:	
 11009  019A  1C03               	skipc
 11010  019B  29B9               	goto	l10750
 11011                           
 11012                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11013  019C  0020               	movlb	0	; select bank0
 11014  019D  082F               	movf	Load_Main@LightsCount,w
 11015  019E  3A01               	xorlw	1
 11016  019F  1903               	skipnz
 11017  01A0  29A3               	goto	l10740
 11018  01A1  3003               	movlw	3
 11019  01A2  29A4               	goto	L7
 11020  01A3                     l10740:	
 11021  01A3  3002               	movlw	2
 11022  01A4                     L7:	
 11023  01A4  00AB               	movwf	_Load_Main$3994
 11024  01A5  3000               	movlw	0
 11025  01A6  00AC               	movwf	_Load_Main$3994+1
 11026  01A7  082B               	movf	_Load_Main$3994,w
 11027  01A8  00A8               	movwf	??_Load_Main
 11028  01A9  0828               	movf	??_Load_Main,w
 11029  01AA  00AD               	movwf	Load_Main@ErrorCountValue
 11030                           
 11031                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11032  01AB  3001               	movlw	1
 11033  01AC  00A8               	movwf	??_Load_Main
 11034  01AD  0828               	movf	??_Load_Main,w
 11035  01AE  0022               	movlb	2	; select bank2
 11036  01AF  07DC               	addwf	(_Load^(0+256)+38),f
 11037                           
 11038                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11039  01B0  085C               	movf	(_Load^(0+256)+38),w
 11040  01B1  0020               	movlb	0	; select bank0
 11041  01B2  022D               	subwf	Load_Main@ErrorCountValue,w
 11042  01B3  1803               	skipnc
 11043  01B4  0008               	return
 11044                           
 11045                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11046  01B5  0022               	movlb	2	; select bank2
 11047  01B6  01DC               	clrf	(_Load^(0+256)+38)
 11048                           
 11049                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11050  01B7  16B6               	bsf	_Load^(0+256),5
 11051                           
 11052                           ;OverLoad_B1.c: 170: }
 11053                           ;OverLoad_B1.c: 171: } else {
 11054  01B8  0008               	return
 11055  01B9                     l10750:	
 11056                           
 11057                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11058  01B9  01DC               	clrf	(_Load^(0+256)+38)
 11059                           
 11060                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11061  01BA  1DB6               	btfss	_Load^(0+256),3
 11062  01BB  0008               	return
 11063                           
 11064                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11065  01BC  3001               	movlw	1
 11066  01BD  0020               	movlb	0	; select bank0
 11067  01BE  00A8               	movwf	??_Load_Main
 11068  01BF  0828               	movf	??_Load_Main,w
 11069  01C0  0022               	movlb	2	; select bank2
 11070  01C1  07DD               	addwf	(_Load^(0+256)+39),f
 11071                           
 11072                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11073  01C2  3003               	movlw	3
 11074  01C3  025D               	subwf	(_Load^(0+256)+39),w
 11075  01C4  1C03               	skipc
 11076  01C5  0008               	return
 11077                           
 11078                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11079  01C6  01DD               	clrf	(_Load^(0+256)+39)
 11080                           
 11081                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11082  01C7  17B6               	bsf	_Load^(0+256),7
 11083                           
 11084                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11085  01C8  11B6               	bcf	_Load^(0+256),3
 11086                           
 11087                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11088  01C9  01DB               	clrf	(_Load^(0+256)+37)
 11089                           
 11090                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11091  01CA  0856               	movf	((_Load+1)^(0+256)+31),w
 11092  01CB  01C0               	clrf	((_Load+1)^(0+256)+9)
 11093  01CC  07C0               	addwf	((_Load+1)^(0+256)+9),f
 11094  01CD  0855               	movf	(_Load^(0+256)+31),w
 11095  01CE  01BF               	clrf	(_Load^(0+256)+9)
 11096  01CF  07BF               	addwf	(_Load^(0+256)+9),f
 11097                           
 11098                           ;OverLoad_B1.c: 184: }
 11099                           ;OverLoad_B1.c: 185: }
 11100                           ;OverLoad_B1.c: 208: }
 11101                           ;OverLoad_B1.c: 209: }
 11102                           ;OverLoad_B1.c: 210: }
 11103                           ;OverLoad_B1.c: 211: } else {
 11104  01D0  0008               	return
 11105  01D1                     l1635:	
 11106                           
 11107                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11108  01D1  1636               	bsf	_Load^(0+256),4
 11109                           
 11110                           ;OverLoad_B1.c: 213: }
 11111                           ;OverLoad_B1.c: 214: } else {
 11112  01D2  0008               	return
 11113  01D3                     l1634:	
 11114                           
 11115                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11116  01D3  1D36               	btfss	_Load^(0+256),2
 11117  01D4  29E6               	goto	l10786
 11118                           
 11119                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11120  01D5  1136               	bcf	_Load^(0+256),2
 11121                           
 11122                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11123  01D6  1236               	bcf	_Load^(0+256),4
 11124                           
 11125                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11126  01D7  01B7               	clrf	(_Load^(0+256)+1)
 11127  01D8  01B8               	clrf	((_Load+1)^(0+256)+1)
 11128                           
 11129                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11130  01D9  319E  269F  3180   	fcall	_setLoad_AH_AL_Restore
 11131                           
 11132                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11133  01DC  0022               	movlb	2	; select bank2
 11134  01DD  01DC               	clrf	(_Load^(0+256)+38)
 11135                           
 11136                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11137  01DE  01DD               	clrf	(_Load^(0+256)+39)
 11138                           
 11139                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11140  01DF  01BB               	clrf	(_Load^(0+256)+5)
 11141  01E0  01BC               	clrf	((_Load+1)^(0+256)+5)
 11142                           
 11143                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11144  01E1  01BD               	clrf	(_Load^(0+256)+7)
 11145  01E2  01BE               	clrf	((_Load+1)^(0+256)+7)
 11146                           
 11147                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11148  01E3  11B6               	bcf	_Load^(0+256),3
 11149                           
 11150                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11151  01E4  01DB               	clrf	(_Load^(0+256)+37)
 11152                           
 11153                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11154  01E5  13B6               	bcf	_Load^(0+256),7
 11155  01E6                     l10786:	
 11156                           
 11157                           ;OverLoad_B1.c: 257: }
 11158                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11159  01E6  1EB6               	btfss	_Load^(0+256),5
 11160  01E7  0008               	return
 11161                           
 11162                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11163  01E8  3001               	movlw	1
 11164  01E9  07B9               	addwf	(_Load^(0+256)+3),f
 11165  01EA  3000               	movlw	0
 11166  01EB  3DBA               	addwfc	((_Load+1)^(0+256)+3),f
 11167                           
 11168                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11169  01EC  3001               	movlw	1
 11170  01ED  023A               	subwf	((_Load+1)^(0+256)+3),w
 11171  01EE  30F4               	movlw	244
 11172  01EF  1903               	skipnz
 11173  01F0  0239               	subwf	(_Load^(0+256)+3),w
 11174  01F1  1C03               	skipc
 11175  01F2  0008               	return
 11176                           
 11177                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11178  01F3  01B9               	clrf	(_Load^(0+256)+3)
 11179  01F4  01BA               	clrf	((_Load+1)^(0+256)+3)
 11180                           
 11181                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11182  01F5  12B6               	bcf	_Load^(0+256),5
 11183                           
 11184                           ;OverLoad_B1.c: 263: }
 11185                           ;OverLoad_B1.c: 264: }
 11186                           ;OverLoad_B1.c: 265: }
 11187                           ;OverLoad_B1.c: 266: } else {
 11188  01F6  0008               	return
 11189  01F7                     l1624:	
 11190                           
 11191                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11192  01F7  0021               	movlb	1	; select bank1
 11193  01F8  1C2F               	btfss	_myMain^(0+128),0
 11194  01F9  0008               	return
 11195                           
 11196                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11197  01FA  0022               	movlb	2	; select bank2
 11198  01FB  1436               	bsf	_Load^(0+256),0
 11199  01FC  0008               	return
 11200  01FD                     __end_of_Load_Main:	
 11201                           
 11202                           	psect	text64
 11203  1AFA                     __ptext64:	
 11204 ;; *************** function _getMain_Lights_Count *****************
 11205 ;; Defined at:
 11206 ;;		line 459 in file "../src/Main_B1.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;		None
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;  status1         1    1[BANK0 ] unsigned char 
 11211 ;;  count           1    0[BANK0 ] unsigned char 
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      unsigned char 
 11214 ;; Registers used:
 11215 ;;		wreg, status,2
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;Total ram usage:        2 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    5
 11228 ;; This function calls:
 11229 ;;		Nothing
 11230 ;; This function is called by:
 11231 ;;		_Load_Main
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           
 11236                           ;psect for function _getMain_Lights_Count
 11237  1AFA                     _getMain_Lights_Count:	
 11238                           
 11239                           ;Main_B1.c: 460: char count = 0;
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11243  1AFA  0020               	movlb	0	; select bank0
 11244  1AFB  01A0               	clrf	getMain_Lights_Count@count
 11245                           
 11246                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11247  1AFC  3000               	movlw	0
 11248  1AFD  0021               	movlb	1	; select bank1
 11249  1AFE  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11250  1AFF  3001               	movlw	1
 11251  1B00  0020               	movlb	0	; select bank0
 11252  1B01  00A1               	movwf	getMain_Lights_Count@status1
 11253                           
 11254                           ;Main_B1.c: 487: return count = status1;
 11255  1B02  0821               	movf	getMain_Lights_Count@status1,w
 11256  1B03  00A0               	movwf	getMain_Lights_Count@count
 11257  1B04  0008               	return
 11258  1B05                     __end_of_getMain_Lights_Count:	
 11259                           
 11260                           	psect	text65
 11261  07F8                     __ptext65:	
 11262 ;; *************** function _getDimmer_Load_Status *****************
 11263 ;; Defined at:
 11264 ;;		line 1158 in file "../src/Dimmer_B1.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;		None
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  status          1    0[BANK0 ] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  1    wreg      unsigned char 
 11271 ;; Registers used:
 11272 ;;		wreg, status,2
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;Total ram usage:        1 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    5
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_Load_Main
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           
 11293                           ;psect for function _getDimmer_Load_Status
 11294  07F8                     _getDimmer_Load_Status:	
 11295                           
 11296                           ;Dimmer_B1.c: 1159: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11297                           
 11298                           ;incstack = 0
 11299                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11300  07F8  3000               	movlw	0
 11301  07F9  0022               	movlb	2	; select bank2
 11302  07FA  192C               	btfsc	_Dimmer^(0+256),2
 11303  07FB  3001               	movlw	1
 11304  07FC  0020               	movlb	0	; select bank0
 11305  07FD  00A0               	movwf	getDimmer_Load_Status@status
 11306                           
 11307                           ;Dimmer_B1.c: 1160: return status;
 11308  07FE  0820               	movf	getDimmer_Load_Status@status,w
 11309  07FF  0008               	return
 11310  0800                     __end_of_getDimmer_Load_Status:	
 11311                           
 11312                           	psect	text66
 11313  1AC2                     __ptext66:	
 11314 ;; *************** function _getDimmer_LoadGO *****************
 11315 ;; Defined at:
 11316 ;;		line 1152 in file "../src/Dimmer_B1.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;		None
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11321 ;; Return value:  Size  Location     Type
 11322 ;;                  1    wreg      unsigned char 
 11323 ;; Registers used:
 11324 ;;		wreg, status,2
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;Total ram usage:        1 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    5
 11337 ;; This function calls:
 11338 ;;		Nothing
 11339 ;; This function is called by:
 11340 ;;		_Load_Main
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _getDimmer_LoadGO
 11346  1AC2                     _getDimmer_LoadGO:	
 11347                           
 11348                           ;Dimmer_B1.c: 1153: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11349                           
 11350                           ;incstack = 0
 11351                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11352  1AC2  3000               	movlw	0
 11353  1AC3  0022               	movlb	2	; select bank2
 11354  1AC4  18AC               	btfsc	_Dimmer^(0+256),1
 11355  1AC5  3001               	movlw	1
 11356  1AC6  0020               	movlb	0	; select bank0
 11357  1AC7  00A0               	movwf	getDimmer_LoadGO@loadgo
 11358                           
 11359                           ;Dimmer_B1.c: 1154: return loadgo;
 11360  1AC8  0820               	movf	getDimmer_LoadGO@loadgo,w
 11361  1AC9  0008               	return
 11362  1ACA                     __end_of_getDimmer_LoadGO:	
 11363                           
 11364                           	psect	text67
 11365  1CEB                     __ptext67:	
 11366 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11367 ;; Defined at:
 11368 ;;		line 286 in file "../src/Dimmer_B1.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;		None
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  status          1    0[BANK0 ] unsigned char 
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  1    wreg      unsigned char 
 11375 ;; Registers used:
 11376 ;;		wreg, status,2, status,0
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;Total ram usage:        1 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    5
 11389 ;; This function calls:
 11390 ;;		Nothing
 11391 ;; This function is called by:
 11392 ;;		_Load_Main
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11398  1CEB                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11399                           
 11400                           ;Dimmer_B1.c: 287: char status = 0;
 11401                           
 11402                           ;incstack = 0
 11403                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11404  1CEB  0020               	movlb	0	; select bank0
 11405  1CEC  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11406                           
 11407                           ;Dimmer_B1.c: 298: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11408  1CED  3000               	movlw	0
 11409  1CEE  0021               	movlb	1	; select bank1
 11410  1CEF  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11411  1CF0  3001               	movlw	1
 11412  1CF1  0020               	movlb	0	; select bank0
 11413  1CF2  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11414                           
 11415                           ;Dimmer_B1.c: 302: if (status == 0) {
 11416  1CF3  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11417  1CF4  1D03               	skipz
 11418  1CF5  2CFC               	goto	l9848
 11419                           
 11420                           ;Dimmer_B1.c: 312: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11421  1CF6  3000               	movlw	0
 11422  1CF7  0021               	movlb	1	; select bank1
 11423  1CF8  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11424  1CF9  3001               	movlw	1
 11425  1CFA  0020               	movlb	0	; select bank0
 11426  1CFB  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11427  1CFC                     l9848:	
 11428                           
 11429                           ;Dimmer_B1.c: 314: }
 11430                           ;Dimmer_B1.c: 316: return status;
 11431  1CFC  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11432  1CFD  0008               	return
 11433  1CFE                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11434                           
 11435                           	psect	text68
 11436  1ED8                     __ptext68:	
 11437 ;; *************** function ___wmul *****************
 11438 ;; Defined at:
 11439 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11442 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;  product         2    4[BANK0 ] unsigned int 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  2    0[BANK0 ] unsigned int 
 11447 ;; Registers used:
 11448 ;;		wreg, status,2, status,0
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11454 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;Total ram usage:        6 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:    5
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_Load_Main
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           
 11469                           ;psect for function ___wmul
 11470  1ED8                     ___wmul:	
 11471                           
 11472                           ;incstack = 0
 11473                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11474  1ED8  0020               	movlb	0	; select bank0
 11475  1ED9  01A4               	clrf	___wmul@product
 11476  1EDA  01A5               	clrf	___wmul@product+1
 11477  1EDB                     l10388:	
 11478  1EDB  1C20               	btfss	___wmul@multiplier,0
 11479  1EDC  2EE1               	goto	l2695
 11480  1EDD  0822               	movf	___wmul@multiplicand,w
 11481  1EDE  07A4               	addwf	___wmul@product,f
 11482  1EDF  0823               	movf	___wmul@multiplicand+1,w
 11483  1EE0  3DA5               	addwfc	___wmul@product+1,f
 11484  1EE1                     l2695:	
 11485  1EE1  3001               	movlw	1
 11486  1EE2                     u11875:	
 11487  1EE2  35A2               	lslf	___wmul@multiplicand,f
 11488  1EE3  0DA3               	rlf	___wmul@multiplicand+1,f
 11489  1EE4  0B89               	decfsz	9,f
 11490  1EE5  2EE2               	goto	u11875
 11491  1EE6  3001               	movlw	1
 11492  1EE7                     u11885:	
 11493  1EE7  36A1               	lsrf	___wmul@multiplier+1,f
 11494  1EE8  0CA0               	rrf	___wmul@multiplier,f
 11495  1EE9  0B89               	decfsz	9,f
 11496  1EEA  2EE7               	goto	u11885
 11497  1EEB  0821               	movf	___wmul@multiplier+1,w
 11498  1EEC  0420               	iorwf	___wmul@multiplier,w
 11499  1EED  1D03               	skipz
 11500  1EEE  2EDB               	goto	l10388
 11501  1EEF  0825               	movf	___wmul@product+1,w
 11502  1EF0  01A1               	clrf	?___wmul+1
 11503  1EF1  07A1               	addwf	?___wmul+1,f
 11504  1EF2  0824               	movf	___wmul@product,w
 11505  1EF3  01A0               	clrf	?___wmul
 11506  1EF4  07A0               	addwf	?___wmul,f
 11507  1EF5  0008               	return
 11508  1EF6                     __end_of___wmul:	
 11509                           
 11510                           	psect	text69
 11511  1265                     __ptext69:	
 11512 ;; *************** function ___lwdiv *****************
 11513 ;; Defined at:
 11514 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  divisor         2    0[BANK0 ] unsigned int 
 11517 ;;  dividend        2    2[BANK0 ] unsigned int 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;  quotient        2    6[BANK0 ] unsigned int 
 11520 ;;  counter         1    5[BANK0 ] unsigned char 
 11521 ;; Return value:  Size  Location     Type
 11522 ;;                  2    0[BANK0 ] unsigned int 
 11523 ;; Registers used:
 11524 ;;		wreg, status,2, status,0
 11525 ;; Tracked objects:
 11526 ;;		On entry : 0/0
 11527 ;;		On exit  : 0/0
 11528 ;;		Unchanged: 0/0
 11529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11530 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;Total ram usage:        8 bytes
 11535 ;; Hardware stack levels used:    1
 11536 ;; Hardware stack levels required when called:    5
 11537 ;; This function calls:
 11538 ;;		Nothing
 11539 ;; This function is called by:
 11540 ;;		_Load_Main
 11541 ;;		_setRF_Main
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           
 11546                           ;psect for function ___lwdiv
 11547  1265                     ___lwdiv:	
 11548                           
 11549                           ;incstack = 0
 11550                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11551  1265  0020               	movlb	0	; select bank0
 11552  1266  01A6               	clrf	___lwdiv@quotient
 11553  1267  01A7               	clrf	___lwdiv@quotient+1
 11554  1268  0821               	movf	___lwdiv@divisor+1,w
 11555  1269  0420               	iorwf	___lwdiv@divisor,w
 11556  126A  1903               	skipnz
 11557  126B  2A95               	goto	l9792
 11558  126C  01A5               	clrf	___lwdiv@counter
 11559  126D  0AA5               	incf	___lwdiv@counter,f
 11560  126E                     l9780:	
 11561  126E  1BA1               	btfsc	___lwdiv@divisor+1,7
 11562  126F  2A7A               	goto	l9782
 11563  1270  3001               	movlw	1
 11564  1271                     u10825:	
 11565  1271  35A0               	lslf	___lwdiv@divisor,f
 11566  1272  0DA1               	rlf	___lwdiv@divisor+1,f
 11567  1273  0B89               	decfsz	9,f
 11568  1274  2A71               	goto	u10825
 11569  1275  3001               	movlw	1
 11570  1276  00A4               	movwf	??___lwdiv
 11571  1277  0824               	movf	??___lwdiv,w
 11572  1278  07A5               	addwf	___lwdiv@counter,f
 11573  1279  2A6E               	goto	l9780
 11574  127A                     l9782:	
 11575  127A  3001               	movlw	1
 11576  127B                     u10845:	
 11577  127B  35A6               	lslf	___lwdiv@quotient,f
 11578  127C  0DA7               	rlf	___lwdiv@quotient+1,f
 11579  127D  0B89               	decfsz	9,f
 11580  127E  2A7B               	goto	u10845
 11581  127F  0821               	movf	___lwdiv@divisor+1,w
 11582  1280  0223               	subwf	___lwdiv@dividend+1,w
 11583  1281  1D03               	skipz
 11584  1282  2A85               	goto	u10855
 11585  1283  0820               	movf	___lwdiv@divisor,w
 11586  1284  0222               	subwf	___lwdiv@dividend,w
 11587  1285                     u10855:	
 11588  1285  1C03               	skipc
 11589  1286  2A8C               	goto	l9788
 11590  1287  0820               	movf	___lwdiv@divisor,w
 11591  1288  02A2               	subwf	___lwdiv@dividend,f
 11592  1289  0821               	movf	___lwdiv@divisor+1,w
 11593  128A  3BA3               	subwfb	___lwdiv@dividend+1,f
 11594  128B  1426               	bsf	___lwdiv@quotient,0
 11595  128C                     l9788:	
 11596  128C  3001               	movlw	1
 11597  128D                     u10865:	
 11598  128D  36A1               	lsrf	___lwdiv@divisor+1,f
 11599  128E  0CA0               	rrf	___lwdiv@divisor,f
 11600  128F  0B89               	decfsz	9,f
 11601  1290  2A8D               	goto	u10865
 11602  1291  3001               	movlw	1
 11603  1292  02A5               	subwf	___lwdiv@counter,f
 11604  1293  1D03               	btfss	3,2
 11605  1294  2A7A               	goto	l9782
 11606  1295                     l9792:	
 11607  1295  0827               	movf	___lwdiv@quotient+1,w
 11608  1296  01A1               	clrf	?___lwdiv+1
 11609  1297  07A1               	addwf	?___lwdiv+1,f
 11610  1298  0826               	movf	___lwdiv@quotient,w
 11611  1299  01A0               	clrf	?___lwdiv
 11612  129A  07A0               	addwf	?___lwdiv,f
 11613  129B  0008               	return
 11614  129C                     __end_of___lwdiv:	
 11615                           
 11616                           	psect	text70
 11617  1A57                     __ptext70:	
 11618 ;; *************** function _Load_Initialization *****************
 11619 ;; Defined at:
 11620 ;;		line 9 in file "../src/OverLoad_B1.c"
 11621 ;; Parameters:    Size  Location     Type
 11622 ;;		None
 11623 ;; Auto vars:     Size  Location     Type
 11624 ;;		None
 11625 ;; Return value:  Size  Location     Type
 11626 ;;		None               void
 11627 ;; Registers used:
 11628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11629 ;; Tracked objects:
 11630 ;;		On entry : 0/0
 11631 ;;		On exit  : 0/0
 11632 ;;		Unchanged: 0/0
 11633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;Total ram usage:        0 bytes
 11639 ;; Hardware stack levels used:    1
 11640 ;; Hardware stack levels required when called:    6
 11641 ;; This function calls:
 11642 ;;		_setLoad_AH_AL_Restore
 11643 ;; This function is called by:
 11644 ;;		_main
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           
 11649                           ;psect for function _Load_Initialization
 11650  1A57                     _Load_Initialization:	
 11651                           
 11652                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11653                           
 11654                           ;incstack = 0
 11655                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11656  1A57  319E  269F         	fcall	_setLoad_AH_AL_Restore
 11657  1A59  0008               	return
 11658  1A5A                     __end_of_Load_Initialization:	
 11659                           
 11660                           	psect	text71
 11661  1E9F                     __ptext71:	
 11662 ;; *************** function _setLoad_AH_AL_Restore *****************
 11663 ;; Defined at:
 11664 ;;		line 294 in file "../src/OverLoad_B1.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;		None
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;  i               1    1[BANK0 ] unsigned char 
 11669 ;; Return value:  Size  Location     Type
 11670 ;;		None               void
 11671 ;; Registers used:
 11672 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;Total ram usage:        2 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    5
 11685 ;; This function calls:
 11686 ;;		Nothing
 11687 ;; This function is called by:
 11688 ;;		_Load_Initialization
 11689 ;;		_Load_Main
 11690 ;; This function uses a non-reentrant model
 11691 ;;
 11692                           
 11693                           
 11694                           ;psect for function _setLoad_AH_AL_Restore
 11695  1E9F                     _setLoad_AH_AL_Restore:	
 11696                           
 11697                           ;OverLoad_B1.c: 295: char i;
 11698                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11699                           
 11700                           ;incstack = 0
 11701                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11702  1E9F  0020               	movlb	0	; select bank0
 11703  1EA0  01A1               	clrf	setLoad_AH_AL_Restore@i
 11704  1EA1                     L8:	
 11705  1EA1  3005               	movlw	5
 11706  1EA2  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11707  1EA3  1803               	btfsc	3,0
 11708  1EA4  0008               	return
 11709                           
 11710                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11711  1EA5  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11712  1EA6  3E41               	addlw	(_Load+11)& (0+255)
 11713  1EA7  0086               	movwf	6
 11714  1EA8  3001               	movlw	1	; select bank2/3
 11715  1EA9  0087               	movwf	7
 11716  1EAA  3000               	movlw	0
 11717  1EAB  3FC0               	movwi [0]fsr1
 11718  1EAC  3FC1               	movwi [1]fsr1
 11719                           
 11720                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11721  1EAD  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11722  1EAE  3E4B               	addlw	(_Load+21)& (0+255)
 11723  1EAF  0086               	movwf	6
 11724  1EB0  3001               	movlw	1	; select bank2/3
 11725  1EB1  0087               	movwf	7
 11726  1EB2  30FF               	movlw	255
 11727  1EB3  3FC0               	movwi [0]fsr1
 11728  1EB4  30FF               	movlw	255
 11729  1EB5  3FC1               	movwi [1]fsr1
 11730  1EB6  3001               	movlw	1
 11731  1EB7  00A0               	movwf	??_setLoad_AH_AL_Restore
 11732  1EB8  0820               	movf	??_setLoad_AH_AL_Restore,w
 11733  1EB9  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11734  1EBA  2EA1               	goto	L8
 11735  1EBB                     __end_of_setLoad_AH_AL_Restore:	
 11736                           
 11737                           	psect	text72
 11738  1A72                     __ptext72:	
 11739 ;; *************** function _LED_Main *****************
 11740 ;; Defined at:
 11741 ;;		line 47 in file "../src/LED_B1.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;		None
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;		None
 11746 ;; Return value:  Size  Location     Type
 11747 ;;		None               void
 11748 ;; Registers used:
 11749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;Total ram usage:        0 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; Hardware stack levels required when called:    7
 11762 ;; This function calls:
 11763 ;;		_setLED_Main
 11764 ;; This function is called by:
 11765 ;;		_main
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           
 11770                           ;psect for function _LED_Main
 11771  1A72                     _LED_Main:	
 11772                           
 11773                           ;LED_B1.c: 67: setLED_Main(99);
 11774                           
 11775                           ;incstack = 0
 11776                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11777  1A72  3063               	movlw	99
 11778  1A73  3192  222F         	fcall	_setLED_Main
 11779  1A75  0008               	return
 11780  1A76                     __end_of_LED_Main:	
 11781                           
 11782                           	psect	text73
 11783  122F                     __ptext73:	
 11784 ;; *************** function _setLED_Main *****************
 11785 ;; Defined at:
 11786 ;;		line 229 in file "../src/LED_B1.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;  led             1    wreg     unsigned char 
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;  led             1    4[BANK0 ] unsigned char 
 11791 ;; Return value:  Size  Location     Type
 11792 ;;		None               void
 11793 ;; Registers used:
 11794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : 0/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;Total ram usage:        3 bytes
 11805 ;; Hardware stack levels used:    1
 11806 ;; Hardware stack levels required when called:    6
 11807 ;; This function calls:
 11808 ;;		_LedPointSelect
 11809 ;; This function is called by:
 11810 ;;		_LED_Main
 11811 ;; This function uses a non-reentrant model
 11812 ;;
 11813                           
 11814                           
 11815                           ;psect for function _setLED_Main
 11816  122F                     _setLED_Main:	
 11817                           
 11818                           ;incstack = 0
 11819                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11820                           ;setLED_Main@led stored from wreg
 11821  122F  0020               	movlb	0	; select bank0
 11822  1230  00A4               	movwf	setLED_Main@led
 11823                           
 11824                           ;LED_B1.c: 230: LedPointSelect(led);
 11825  1231  0824               	movf	setLED_Main@led,w
 11826  1232  319B  2362  3192   	fcall	_LedPointSelect
 11827                           
 11828                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11829  1235  0021               	movlb	1	; select bank1
 11830  1236  084F               	movf	_LED^(0+128),w
 11831  1237  0086               	movwf	6
 11832  1238  3001               	movlw	1	; select bank2/3
 11833  1239  0087               	movwf	7
 11834  123A  1C81               	btfss	1,1
 11835  123B  0008               	return
 11836                           
 11837                           ;LED_B1.c: 232: LED->Time++;
 11838  123C  0A4F               	incf	_LED^(0+128),w
 11839  123D  0086               	movwf	6
 11840  123E  3001               	movlw	1	; select bank2/3
 11841  123F  0087               	movwf	7
 11842  1240  3001               	movlw	1
 11843  1241  0781               	addwf	1,f
 11844  1242  3141               	addfsr 1,1
 11845  1243  1803               	skipnc
 11846  1244  0A81               	incf	1,f
 11847                           
 11848                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11849  1245  0A4F               	incf	_LED^(0+128),w
 11850  1246  0086               	movwf	6
 11851  1247  3001               	movlw	1	; select bank2/3
 11852  1248  0087               	movwf	7
 11853  1249  3F40               	moviw [0]fsr1
 11854  124A  0020               	movlb	0	; select bank0
 11855  124B  00A2               	movwf	??_setLED_Main
 11856  124C  3F41               	moviw [1]fsr1
 11857  124D  00A3               	movwf	??_setLED_Main+1
 11858  124E  3000               	movlw	0
 11859  124F  0223               	subwf	??_setLED_Main+1,w
 11860  1250  3019               	movlw	25
 11861  1251  1903               	skipnz
 11862  1252  0222               	subwf	??_setLED_Main,w
 11863  1253  1C03               	skipc
 11864  1254  0008               	return
 11865                           
 11866                           ;LED_B1.c: 234: LED->Time = 0;
 11867  1255  0021               	movlb	1	; select bank1
 11868  1256  0A4F               	incf	_LED^(0+128),w
 11869  1257  0086               	movwf	6
 11870  1258  3001               	movlw	1	; select bank2/3
 11871  1259  0087               	movwf	7
 11872  125A  3000               	movlw	0
 11873  125B  3FC0               	movwi [0]fsr1
 11874  125C  3FC1               	movwi [1]fsr1
 11875                           
 11876                           ;LED_B1.c: 252: if (led == 99) {
 11877  125D  0020               	movlb	0	; select bank0
 11878  125E  0824               	movf	setLED_Main@led,w
 11879  125F  3A63               	xorlw	99
 11880  1260  1D03               	skipz
 11881  1261  0008               	return
 11882                           
 11883                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11884  1262  3020               	movlw	32
 11885  1263  068D               	xorwf	13,f
 11886  1264  0008               	return
 11887  1265                     __end_of_setLED_Main:	
 11888                           
 11889                           	psect	text74
 11890  1A6E                     __ptext74:	
 11891 ;; *************** function _LED_Initialization *****************
 11892 ;; Defined at:
 11893 ;;		line 31 in file "../src/LED_B1.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;		None
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;		None
 11898 ;; Return value:  Size  Location     Type
 11899 ;;		None               void
 11900 ;; Registers used:
 11901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11902 ;; Tracked objects:
 11903 ;;		On entry : 0/0
 11904 ;;		On exit  : 0/0
 11905 ;;		Unchanged: 0/0
 11906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;Total ram usage:        0 bytes
 11912 ;; Hardware stack levels used:    1
 11913 ;; Hardware stack levels required when called:    8
 11914 ;; This function calls:
 11915 ;;		_setLED_Initialization
 11916 ;; This function is called by:
 11917 ;;		_main
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           
 11922                           ;psect for function _LED_Initialization
 11923  1A6E                     _LED_Initialization:	
 11924                           
 11925                           ;LED_B1.c: 42: setLED_Initialization(99);
 11926                           
 11927                           ;incstack = 0
 11928                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11929  1A6E  3063               	movlw	99
 11930  1A6F  319C  248F         	fcall	_setLED_Initialization
 11931  1A71  0008               	return
 11932  1A72                     __end_of_LED_Initialization:	
 11933                           
 11934                           	psect	text75
 11935  1C8F                     __ptext75:	
 11936 ;; *************** function _setLED_Initialization *****************
 11937 ;; Defined at:
 11938 ;;		line 74 in file "../src/LED_B1.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;  led             1    wreg     unsigned char 
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;  led             1    4[BANK0 ] unsigned char 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;		None               void
 11945 ;; Registers used:
 11946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;Total ram usage:        1 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    7
 11959 ;; This function calls:
 11960 ;;		_LedPointSelect
 11961 ;;		_setLED
 11962 ;; This function is called by:
 11963 ;;		_LED_Initialization
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           
 11968                           ;psect for function _setLED_Initialization
 11969  1C8F                     _setLED_Initialization:	
 11970                           
 11971                           ;incstack = 0
 11972                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11973                           ;setLED_Initialization@led stored from wreg
 11974  1C8F  0020               	movlb	0	; select bank0
 11975  1C90  00A4               	movwf	setLED_Initialization@led
 11976                           
 11977                           ;LED_B1.c: 75: LedPointSelect(led);
 11978  1C91  0824               	movf	setLED_Initialization@led,w
 11979  1C92  319B  2362  319C   	fcall	_LedPointSelect
 11980                           
 11981                           ;LED_B1.c: 76: LED->Enable = 1;
 11982  1C95  0021               	movlb	1	; select bank1
 11983  1C96  084F               	movf	_LED^(0+128),w
 11984  1C97  0086               	movwf	6
 11985  1C98  3001               	movlw	1	; select bank2/3
 11986  1C99  0087               	movwf	7
 11987  1C9A  1401               	bsf	1,0
 11988                           
 11989                           ;LED_B1.c: 77: setLED(led, 0);
 11990  1C9B  0020               	movlb	0	; select bank0
 11991  1C9C  01A2               	clrf	setLED@command
 11992  1C9D  0824               	movf	setLED_Initialization@led,w
 11993  1C9E  3192  22D5         	fcall	_setLED
 11994  1CA0  0008               	return
 11995  1CA1                     __end_of_setLED_Initialization:	
 11996                           
 11997                           	psect	text76
 11998  138B                     __ptext76:	
 11999 ;; *************** function _Flash_Memory_Main *****************
 12000 ;; Defined at:
 12001 ;;		line 976 in file "../src/MCU_B1.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12006 ;; Return value:  Size  Location     Type
 12007 ;;		None               void
 12008 ;; Registers used:
 12009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;Total ram usage:        3 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    8
 12022 ;; This function calls:
 12023 ;;		_Flash_Memory_Modify
 12024 ;;		_getAll_Sw_KeyStatus
 12025 ;;		_getMain_All_LightsStatus
 12026 ;; This function is called by:
 12027 ;;		_main
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031                           
 12032                           ;psect for function _Flash_Memory_Main
 12033  138B                     _Flash_Memory_Main:	
 12034                           
 12035                           ;MCU_B1.c: 977: char key_Status = 0;
 12036                           
 12037                           ;incstack = 0
 12038                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12039  138B  0020               	movlb	0	; select bank0
 12040  138C  01A7               	clrf	Flash_Memory_Main@key_Status
 12041                           
 12042                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12043  138D  319C  2427  3193   	fcall	_getAll_Sw_KeyStatus
 12044  1390  0020               	movlb	0	; select bank0
 12045  1391  00A6               	movwf	??_Flash_Memory_Main
 12046  1392  0826               	movf	??_Flash_Memory_Main,w
 12047  1393  00A7               	movwf	Flash_Memory_Main@key_Status
 12048                           
 12049                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12050  1394  0023               	movlb	3	; select bank3
 12051  1395  1C62               	btfss	(_Memory^(0+384)+36),0
 12052  1396  0008               	return
 12053                           
 12054                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12055  1397  0020               	movlb	0	; select bank0
 12056  1398  01A8               	clrf	_Flash_Memory_Main$3155
 12057  1399  319A  22E5  3193   	fcall	_getMain_All_LightsStatus
 12058  139C  3800               	iorlw	0
 12059  139D  1D03               	skipz
 12060  139E  2BA5               	goto	l10508
 12061  139F  0020               	movlb	0	; select bank0
 12062  13A0  08A7               	movf	Flash_Memory_Main@key_Status,f
 12063  13A1  1D03               	skipz
 12064  13A2  2BA5               	goto	l10508
 12065  13A3  01A8               	clrf	_Flash_Memory_Main$3155
 12066  13A4  0AA8               	incf	_Flash_Memory_Main$3155,f
 12067  13A5                     l10508:	
 12068  13A5  0020               	movlb	0	; select bank0
 12069  13A6  0828               	movf	_Flash_Memory_Main$3155,w
 12070  13A7  0023               	movlb	3	; select bank3
 12071  13A8  10E2               	bcf	(_Memory^(0+384)+36),1
 12072  13A9  1D03               	skipz
 12073  13AA  14E2               	bsf	(_Memory^(0+384)+36),1
 12074                           
 12075                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12076  13AB  1CE2               	btfss	(_Memory^(0+384)+36),1
 12077  13AC  2BC6               	goto	l1244
 12078                           
 12079                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12080  13AD  15E2               	bsf	(_Memory^(0+384)+36),3
 12081                           
 12082                           ;MCU_B1.c: 985: Memory.Time++;
 12083  13AE  3001               	movlw	1
 12084  13AF  07E0               	addwf	(_Memory^(0+384)+34),f
 12085  13B0  3000               	movlw	0
 12086  13B1  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 12087                           
 12088                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12089  13B2  3022               	movlw	34
 12090  13B3  3EBE               	addlw	_Memory& (0+255)
 12091  13B4  0086               	movwf	6
 12092  13B5  3001               	movlw	1	; select bank3/4
 12093  13B6  0087               	movwf	7
 12094  13B7  3F40               	moviw [0]fsr1
 12095  13B8  3A0A               	xorlw	10
 12096  13B9  1D03               	skipz
 12097  13BA  2BBD               	goto	u12105
 12098  13BB  3F41               	moviw [1]fsr1
 12099  13BC  3A00               	xorlw	0
 12100  13BD                     u12105:	
 12101  13BD  1D03               	skipz
 12102  13BE  0008               	return
 12103                           
 12104                           ;MCU_B1.c: 987: Memory.Time = 0;
 12105  13BF  01E0               	clrf	(_Memory^(0+384)+34)
 12106  13C0  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12107                           
 12108                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12109  13C1  1062               	bcf	(_Memory^(0+384)+36),0
 12110                           
 12111                           ;MCU_B1.c: 989: Memory.GO = 0;
 12112  13C2  10E2               	bcf	(_Memory^(0+384)+36),1
 12113                           
 12114                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12115  13C3  318B  238C         	fcall	_Flash_Memory_Modify
 12116                           
 12117                           ;MCU_B1.c: 991: }
 12118                           ;MCU_B1.c: 992: } else {
 12119  13C5  0008               	return
 12120  13C6                     l1244:	
 12121                           
 12122                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12123  13C6  1DE2               	btfss	(_Memory^(0+384)+36),3
 12124  13C7  0008               	return
 12125                           
 12126                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12127  13C8  11E2               	bcf	(_Memory^(0+384)+36),3
 12128                           
 12129                           ;MCU_B1.c: 995: Memory.Time = 0;
 12130  13C9  01E0               	clrf	(_Memory^(0+384)+34)
 12131  13CA  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12132  13CB  0008               	return
 12133  13CC                     __end_of_Flash_Memory_Main:	
 12134                           
 12135                           	psect	text77
 12136  1C27                     __ptext77:	
 12137 ;; *************** function _getAll_Sw_KeyStatus *****************
 12138 ;; Defined at:
 12139 ;;		line 278 in file "../src/Switch_B1.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;  status          1    1[BANK0 ] unsigned char 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  1    wreg      unsigned char 
 12146 ;; Registers used:
 12147 ;;		wreg, status,2
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;Total ram usage:        3 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    5
 12160 ;; This function calls:
 12161 ;;		Nothing
 12162 ;; This function is called by:
 12163 ;;		_Flash_Memory_Main
 12164 ;; This function uses a non-reentrant model
 12165 ;;
 12166                           
 12167                           
 12168                           ;psect for function _getAll_Sw_KeyStatus
 12169  1C27                     _getAll_Sw_KeyStatus:	
 12170                           
 12171                           ;Switch_B1.c: 279: char status = 0;
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12175  1C27  0020               	movlb	0	; select bank0
 12176  1C28  01A1               	clrf	getAll_Sw_KeyStatus@status
 12177                           
 12178                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12179  1C29  01A2               	clrf	_getAll_Sw_KeyStatus$6475
 12180  1C2A  0AA2               	incf	_getAll_Sw_KeyStatus$6475,f
 12181  1C2B  1F0C               	btfss	12,6	;volatile
 12182  1C2C  1A0C               	btfsc	12,4	;volatile
 12183  1C2D  2C32               	goto	l10070
 12184  1C2E  1C0C               	btfss	12,0	;volatile
 12185  1C2F  1B8C               	btfsc	12,7	;volatile
 12186  1C30  2C32               	goto	l10070
 12187  1C31  01A2               	clrf	_getAll_Sw_KeyStatus$6475
 12188  1C32                     l10070:	
 12189  1C32  0822               	movf	_getAll_Sw_KeyStatus$6475,w
 12190  1C33  00A0               	movwf	??_getAll_Sw_KeyStatus
 12191  1C34  0820               	movf	??_getAll_Sw_KeyStatus,w
 12192  1C35  00A1               	movwf	getAll_Sw_KeyStatus@status
 12193                           
 12194                           ;Switch_B1.c: 302: return status;
 12195  1C36  0821               	movf	getAll_Sw_KeyStatus@status,w
 12196  1C37  0008               	return
 12197  1C38                     __end_of_getAll_Sw_KeyStatus:	
 12198                           
 12199                           	psect	text78
 12200  0B8C                     __ptext78:	
 12201 ;; *************** function _Flash_Memory_Modify *****************
 12202 ;; Defined at:
 12203 ;;		line 1053 in file "../src/MCU_B1.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;		None
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  i               1    5[BANK0 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;		None               void
 12210 ;; Registers used:
 12211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;Total ram usage:        2 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    7
 12224 ;; This function calls:
 12225 ;;		_Flash_Memory_Erasing
 12226 ;;		_Flash_Memory_Read
 12227 ;;		_Flash_Memory_Write
 12228 ;;		_setMemory_Data
 12229 ;; This function is called by:
 12230 ;;		_Flash_Memory_Main
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           
 12235                           ;psect for function _Flash_Memory_Modify
 12236  0B8C                     _Flash_Memory_Modify:	
 12237                           
 12238                           ;MCU_B1.c: 1054: char i = 0;
 12239                           
 12240                           ;incstack = 0
 12241                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12242  0B8C  0020               	movlb	0	; select bank0
 12243  0B8D  01A5               	clrf	Flash_Memory_Modify@i
 12244                           
 12245                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12246  0B8E  01A5               	clrf	Flash_Memory_Modify@i
 12247  0B8F  3020               	movlw	32
 12248  0B90  0225               	subwf	Flash_Memory_Modify@i,w
 12249  0B91  1803               	btfsc	3,0
 12250  0B92  2BA8               	goto	l10088
 12251  0B93                     l10082:	
 12252                           
 12253                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12254  0B93  0825               	movf	Flash_Memory_Modify@i,w
 12255  0B94  319E  261A  318B   	fcall	_Flash_Memory_Read
 12256  0B97  0020               	movlb	0	; select bank0
 12257  0B98  00A4               	movwf	??_Flash_Memory_Modify
 12258  0B99  0825               	movf	Flash_Memory_Modify@i,w
 12259  0B9A  3EBE               	addlw	_Memory& (0+255)
 12260  0B9B  0086               	movwf	6
 12261  0B9C  3001               	movlw	1	; select bank3/4
 12262  0B9D  0087               	movwf	7
 12263  0B9E  0824               	movf	??_Flash_Memory_Modify,w
 12264  0B9F  0081               	movwf	1
 12265  0BA0  3001               	movlw	1
 12266  0BA1  00A4               	movwf	??_Flash_Memory_Modify
 12267  0BA2  0824               	movf	??_Flash_Memory_Modify,w
 12268  0BA3  07A5               	addwf	Flash_Memory_Modify@i,f
 12269  0BA4  3020               	movlw	32
 12270  0BA5  0225               	subwf	Flash_Memory_Modify@i,w
 12271  0BA6  1C03               	skipc
 12272  0BA7  2B93               	goto	l10082
 12273  0BA8                     l10088:	
 12274                           
 12275                           ;MCU_B1.c: 1057: }
 12276                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12277  0BA8  0021               	movlb	1	; select bank1
 12278  0BA9  086C               	movf	_product^(0+128),w
 12279  0BAA  0086               	movwf	6
 12280  0BAB  3002               	movlw	2	; select bank4/5
 12281  0BAC  0087               	movwf	7
 12282  0BAD  3002               	movlw	2	; select bank4/5
 12283  0BAE  3F4C               	moviw [12]fsr1
 12284  0BAF  0020               	movlb	0	; select bank0
 12285  0BB0  00A0               	movwf	setMemory_Data@data
 12286  0BB1  3000               	movlw	0
 12287  0BB2  319B  236E  318B   	fcall	_setMemory_Data
 12288                           
 12289                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12290  0BB5  0021               	movlb	1	; select bank1
 12291  0BB6  086C               	movf	_product^(0+128),w
 12292  0BB7  0086               	movwf	6
 12293  0BB8  3002               	movlw	2	; select bank4/5
 12294  0BB9  0087               	movwf	7
 12295  0BBA  3002               	movlw	2	; select bank4/5
 12296  0BBB  3F4D               	moviw [13]fsr1
 12297  0BBC  0020               	movlb	0	; select bank0
 12298  0BBD  00A0               	movwf	setMemory_Data@data
 12299  0BBE  3001               	movlw	1
 12300  0BBF  319B  236E  318B   	fcall	_setMemory_Data
 12301                           
 12302                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12303  0BC2  0021               	movlb	1	; select bank1
 12304  0BC3  086C               	movf	_product^(0+128),w
 12305  0BC4  0086               	movwf	6
 12306  0BC5  3002               	movlw	2	; select bank4/5
 12307  0BC6  0087               	movwf	7
 12308  0BC7  3002               	movlw	2	; select bank4/5
 12309  0BC8  3F4E               	moviw [14]fsr1
 12310  0BC9  0020               	movlb	0	; select bank0
 12311  0BCA  00A0               	movwf	setMemory_Data@data
 12312  0BCB  3002               	movlw	2
 12313  0BCC  319B  236E  318B   	fcall	_setMemory_Data
 12314                           
 12315                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12316  0BCF  0021               	movlb	1	; select bank1
 12317  0BD0  086C               	movf	_product^(0+128),w
 12318  0BD1  0086               	movwf	6
 12319  0BD2  3002               	movlw	2	; select bank4/5
 12320  0BD3  0087               	movwf	7
 12321  0BD4  3002               	movlw	2	; select bank4/5
 12322  0BD5  3F55               	moviw [21]fsr1
 12323  0BD6  0020               	movlb	0	; select bank0
 12324  0BD7  00A0               	movwf	setMemory_Data@data
 12325  0BD8  3003               	movlw	3
 12326  0BD9  319B  236E  318B   	fcall	_setMemory_Data
 12327                           
 12328                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12329  0BDC  0021               	movlb	1	; select bank1
 12330  0BDD  086C               	movf	_product^(0+128),w
 12331  0BDE  0086               	movwf	6
 12332  0BDF  3002               	movlw	2	; select bank4/5
 12333  0BE0  0087               	movwf	7
 12334  0BE1  3002               	movlw	2	; select bank4/5
 12335  0BE2  3F56               	moviw [22]fsr1
 12336  0BE3  0020               	movlb	0	; select bank0
 12337  0BE4  00A0               	movwf	setMemory_Data@data
 12338  0BE5  3004               	movlw	4
 12339  0BE6  319B  236E  318B   	fcall	_setMemory_Data
 12340                           
 12341                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12342  0BE9  0021               	movlb	1	; select bank1
 12343  0BEA  086C               	movf	_product^(0+128),w
 12344  0BEB  0086               	movwf	6
 12345  0BEC  3002               	movlw	2	; select bank4/5
 12346  0BED  0087               	movwf	7
 12347  0BEE  3002               	movlw	2	; select bank4/5
 12348  0BEF  3F57               	moviw [23]fsr1
 12349  0BF0  0020               	movlb	0	; select bank0
 12350  0BF1  00A0               	movwf	setMemory_Data@data
 12351  0BF2  3005               	movlw	5
 12352  0BF3  319B  236E  318B   	fcall	_setMemory_Data
 12353                           
 12354                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12355  0BF6  0021               	movlb	1	; select bank1
 12356  0BF7  1EB9               	btfss	(_myMain^(0+128)+10),5
 12357  0BF8  2C03               	goto	l10096
 12358                           
 12359                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12360  0BF9  12B9               	bcf	(_myMain^(0+128)+10),5
 12361                           
 12362                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12363  0BFA  30AA               	movlw	170
 12364  0BFB  0020               	movlb	0	; select bank0
 12365  0BFC  00A4               	movwf	??_Flash_Memory_Modify
 12366  0BFD  0824               	movf	??_Flash_Memory_Modify,w
 12367  0BFE  00A0               	movwf	setMemory_Data@data
 12368  0BFF  301E               	movlw	30
 12369  0C00  319B  236E  318B   	fcall	_setMemory_Data
 12370  0C03                     l10096:	
 12371                           
 12372                           ;MCU_B1.c: 1068: }
 12373                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12374  0C03  0023               	movlb	3	; select bank3
 12375  0C04  1D62               	btfss	(_Memory^(0+384)+36),2
 12376  0C05  2C0A               	goto	l1268
 12377                           
 12378                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12379  0C06  1162               	bcf	(_Memory^(0+384)+36),2
 12380                           
 12381                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12382  0C07  0021               	movlb	1	; select bank1
 12383  0C08  11AF               	bcf	_myMain^(0+128),3
 12384                           
 12385                           ;MCU_B1.c: 1073: myMain.First = 0;
 12386  0C09  12AF               	bcf	_myMain^(0+128),5
 12387  0C0A                     l1268:	
 12388                           
 12389                           ;MCU_B1.c: 1075: }
 12390                           ;MCU_B1.c: 1076: GIE = 0;
 12391  0C0A  138B               	bcf	11,7	;volatile
 12392                           
 12393                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12394  0C0B  319B  237A  318B   	fcall	_Flash_Memory_Erasing
 12395                           
 12396                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12397  0C0E  3190  20FF         	fcall	_Flash_Memory_Write
 12398                           
 12399                           ;MCU_B1.c: 1079: GIE = 1;
 12400  0C10  178B               	bsf	11,7	;volatile
 12401  0C11  0008               	return
 12402  0C12                     __end_of_Flash_Memory_Modify:	
 12403                           
 12404                           	psect	text79
 12405  1B7A                     __ptext79:	
 12406 ;; *************** function _Flash_Memory_Erasing *****************
 12407 ;; Defined at:
 12408 ;;		line 1042 in file "../src/MCU_B1.c"
 12409 ;; Parameters:    Size  Location     Type
 12410 ;;		None
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;		None
 12413 ;; Return value:  Size  Location     Type
 12414 ;;		None               void
 12415 ;; Registers used:
 12416 ;;		wreg, status,2, status,0, pclath, cstack
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;Total ram usage:        0 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    6
 12429 ;; This function calls:
 12430 ;;		_Flash_Memory_Unlock
 12431 ;; This function is called by:
 12432 ;;		_Flash_Memory_Modify
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function _Flash_Memory_Erasing
 12438  1B7A                     _Flash_Memory_Erasing:	
 12439                           
 12440                           ;MCU_B1.c: 1043: CFGS = 0;
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12444  1B7A  0023               	movlb	3	; select bank3
 12445  1B7B  1315               	bcf	21,6	;volatile
 12446                           
 12447                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12448  1B7C  3030               	movlw	48
 12449  1B7D  0092               	movwf	18	;volatile
 12450                           
 12451                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12452  1B7E  0191               	clrf	17	;volatile
 12453                           
 12454                           ;MCU_B1.c: 1046: FREE = 1;
 12455  1B7F  1615               	bsf	21,4	;volatile
 12456                           
 12457                           ;MCU_B1.c: 1047: WREN = 1;
 12458  1B80  1515               	bsf	21,2	;volatile
 12459                           
 12460                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12461  1B81  319A  22DC         	fcall	_Flash_Memory_Unlock
 12462                           
 12463                           ;MCU_B1.c: 1049: WREN = 0;
 12464  1B83  0023               	movlb	3	; select bank3
 12465  1B84  1115               	bcf	21,2	;volatile
 12466  1B85  0008               	return
 12467  1B86                     __end_of_Flash_Memory_Erasing:	
 12468                           
 12469                           	psect	text80
 12470  0621                     __ptext80:	
 12471 ;; *************** function _Flash_Memory_Initialization *****************
 12472 ;; Defined at:
 12473 ;;		line 932 in file "../src/MCU_B1.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;		None
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  value           1    5[BANK0 ] unsigned char 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;		None               void
 12480 ;; Registers used:
 12481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;Total ram usage:        2 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    7
 12494 ;; This function calls:
 12495 ;;		_Flash_Memory_Read
 12496 ;;		_Flash_Memory_Write
 12497 ;;		_setMemory_Data
 12498 ;; This function is called by:
 12499 ;;		_main
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _Flash_Memory_Initialization
 12505  0621                     _Flash_Memory_Initialization:	
 12506                           
 12507                           ;MCU_B1.c: 933: char value = 0;
 12508                           
 12509                           ;incstack = 0
 12510                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12511  0621  0020               	movlb	0	; select bank0
 12512  0622  01A5               	clrf	Flash_Memory_Initialization@value
 12513                           
 12514                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12515  0623  301F               	movlw	31
 12516  0624  319E  261A  3186   	fcall	_Flash_Memory_Read
 12517  0627  3AAA               	xorlw	170
 12518  0628  1D03               	skipz
 12519  0629  2EA3               	goto	l10482
 12520                           
 12521                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12522  062A  3000               	movlw	0
 12523  062B  319E  261A  3186   	fcall	_Flash_Memory_Read
 12524  062E  0020               	movlb	0	; select bank0
 12525  062F  00A4               	movwf	??_Flash_Memory_Initialization
 12526  0630  0021               	movlb	1	; select bank1
 12527  0631  086C               	movf	_product^(0+128),w
 12528  0632  3E0C               	addlw	12
 12529  0633  0086               	movwf	6
 12530  0634  3002               	movlw	2	; select bank4/5
 12531  0635  0087               	movwf	7
 12532  0636  0020               	movlb	0	; select bank0
 12533  0637  0824               	movf	??_Flash_Memory_Initialization,w
 12534  0638  0081               	movwf	1
 12535                           
 12536                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12537  0639  3001               	movlw	1
 12538  063A  319E  261A  3186   	fcall	_Flash_Memory_Read
 12539  063D  0020               	movlb	0	; select bank0
 12540  063E  00A4               	movwf	??_Flash_Memory_Initialization
 12541  063F  0021               	movlb	1	; select bank1
 12542  0640  086C               	movf	_product^(0+128),w
 12543  0641  3E0D               	addlw	13
 12544  0642  0086               	movwf	6
 12545  0643  3002               	movlw	2	; select bank4/5
 12546  0644  0087               	movwf	7
 12547  0645  0020               	movlb	0	; select bank0
 12548  0646  0824               	movf	??_Flash_Memory_Initialization,w
 12549  0647  0081               	movwf	1
 12550                           
 12551                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12552  0648  3002               	movlw	2
 12553  0649  319E  261A  3186   	fcall	_Flash_Memory_Read
 12554  064C  0020               	movlb	0	; select bank0
 12555  064D  00A4               	movwf	??_Flash_Memory_Initialization
 12556  064E  0021               	movlb	1	; select bank1
 12557  064F  086C               	movf	_product^(0+128),w
 12558  0650  3E0E               	addlw	14
 12559  0651  0086               	movwf	6
 12560  0652  3002               	movlw	2	; select bank4/5
 12561  0653  0087               	movwf	7
 12562  0654  0020               	movlb	0	; select bank0
 12563  0655  0824               	movf	??_Flash_Memory_Initialization,w
 12564  0656  0081               	movwf	1
 12565                           
 12566                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12567  0657  3003               	movlw	3
 12568  0658  319E  261A  3186   	fcall	_Flash_Memory_Read
 12569  065B  0020               	movlb	0	; select bank0
 12570  065C  00A4               	movwf	??_Flash_Memory_Initialization
 12571  065D  0021               	movlb	1	; select bank1
 12572  065E  086C               	movf	_product^(0+128),w
 12573  065F  3E15               	addlw	21
 12574  0660  0086               	movwf	6
 12575  0661  3002               	movlw	2	; select bank4/5
 12576  0662  0087               	movwf	7
 12577  0663  0020               	movlb	0	; select bank0
 12578  0664  0824               	movf	??_Flash_Memory_Initialization,w
 12579  0665  0081               	movwf	1
 12580                           
 12581                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12582  0666  3004               	movlw	4
 12583  0667  319E  261A  3186   	fcall	_Flash_Memory_Read
 12584  066A  0020               	movlb	0	; select bank0
 12585  066B  00A4               	movwf	??_Flash_Memory_Initialization
 12586  066C  0021               	movlb	1	; select bank1
 12587  066D  086C               	movf	_product^(0+128),w
 12588  066E  3E16               	addlw	22
 12589  066F  0086               	movwf	6
 12590  0670  3002               	movlw	2	; select bank4/5
 12591  0671  0087               	movwf	7
 12592  0672  0020               	movlb	0	; select bank0
 12593  0673  0824               	movf	??_Flash_Memory_Initialization,w
 12594  0674  0081               	movwf	1
 12595                           
 12596                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12597  0675  3005               	movlw	5
 12598  0676  319E  261A  3186   	fcall	_Flash_Memory_Read
 12599  0679  0020               	movlb	0	; select bank0
 12600  067A  00A4               	movwf	??_Flash_Memory_Initialization
 12601  067B  0021               	movlb	1	; select bank1
 12602  067C  086C               	movf	_product^(0+128),w
 12603  067D  3E17               	addlw	23
 12604  067E  0086               	movwf	6
 12605  067F  3002               	movlw	2	; select bank4/5
 12606  0680  0087               	movwf	7
 12607  0681  0020               	movlb	0	; select bank0
 12608  0682  0824               	movf	??_Flash_Memory_Initialization,w
 12609  0683  0081               	movwf	1
 12610                           
 12611                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12612  0684  0021               	movlb	1	; select bank1
 12613  0685  086C               	movf	_product^(0+128),w
 12614  0686  3E0C               	addlw	12
 12615  0687  0086               	movwf	6
 12616  0688  3002               	movlw	2	; select bank4/5
 12617  0689  0087               	movwf	7
 12618  068A  0801               	movf	1,w
 12619  068B  3AFF               	xorlw	255
 12620  068C  1D03               	skipz
 12621  068D  0008               	return
 12622  068E  086C               	movf	_product^(0+128),w
 12623  068F  3E0D               	addlw	13
 12624  0690  0086               	movwf	6
 12625  0691  3002               	movlw	2	; select bank4/5
 12626  0692  0087               	movwf	7
 12627  0693  0801               	movf	1,w
 12628  0694  3AFF               	xorlw	255
 12629  0695  1D03               	skipz
 12630  0696  0008               	return
 12631  0697  086C               	movf	_product^(0+128),w
 12632  0698  3E0E               	addlw	14
 12633  0699  0086               	movwf	6
 12634  069A  3002               	movlw	2	; select bank4/5
 12635  069B  0087               	movwf	7
 12636  069C  0801               	movf	1,w
 12637  069D  3AFF               	xorlw	255
 12638  069E  1D03               	skipz
 12639  069F  0008               	return
 12640                           
 12641                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12642  06A0  15AF               	bsf	_myMain^(0+128),3
 12643                           
 12644                           ;MCU_B1.c: 951: myMain.First = 1;
 12645  06A1  16AF               	bsf	_myMain^(0+128),5
 12646                           
 12647                           ;MCU_B1.c: 952: }
 12648                           ;MCU_B1.c: 953: } else {
 12649  06A2  0008               	return
 12650  06A3                     l10482:	
 12651                           
 12652                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12653  06A3  30FF               	movlw	255
 12654  06A4  0020               	movlb	0	; select bank0
 12655  06A5  00A4               	movwf	??_Flash_Memory_Initialization
 12656  06A6  0824               	movf	??_Flash_Memory_Initialization,w
 12657  06A7  00A0               	movwf	setMemory_Data@data
 12658  06A8  3000               	movlw	0
 12659  06A9  319B  236E  3186   	fcall	_setMemory_Data
 12660                           
 12661                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12662  06AC  30FF               	movlw	255
 12663  06AD  0020               	movlb	0	; select bank0
 12664  06AE  00A4               	movwf	??_Flash_Memory_Initialization
 12665  06AF  0824               	movf	??_Flash_Memory_Initialization,w
 12666  06B0  00A0               	movwf	setMemory_Data@data
 12667  06B1  3001               	movlw	1
 12668  06B2  319B  236E  3186   	fcall	_setMemory_Data
 12669                           
 12670                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12671  06B5  30FF               	movlw	255
 12672  06B6  0020               	movlb	0	; select bank0
 12673  06B7  00A4               	movwf	??_Flash_Memory_Initialization
 12674  06B8  0824               	movf	??_Flash_Memory_Initialization,w
 12675  06B9  00A0               	movwf	setMemory_Data@data
 12676  06BA  3002               	movlw	2
 12677  06BB  319B  236E  3186   	fcall	_setMemory_Data
 12678                           
 12679                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12680  06BE  30FF               	movlw	255
 12681  06BF  0020               	movlb	0	; select bank0
 12682  06C0  00A4               	movwf	??_Flash_Memory_Initialization
 12683  06C1  0824               	movf	??_Flash_Memory_Initialization,w
 12684  06C2  00A0               	movwf	setMemory_Data@data
 12685  06C3  3003               	movlw	3
 12686  06C4  319B  236E  3186   	fcall	_setMemory_Data
 12687                           
 12688                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12689  06C7  30FF               	movlw	255
 12690  06C8  0020               	movlb	0	; select bank0
 12691  06C9  00A4               	movwf	??_Flash_Memory_Initialization
 12692  06CA  0824               	movf	??_Flash_Memory_Initialization,w
 12693  06CB  00A0               	movwf	setMemory_Data@data
 12694  06CC  3004               	movlw	4
 12695  06CD  319B  236E  3186   	fcall	_setMemory_Data
 12696                           
 12697                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12698  06D0  30FF               	movlw	255
 12699  06D1  0020               	movlb	0	; select bank0
 12700  06D2  00A4               	movwf	??_Flash_Memory_Initialization
 12701  06D3  0824               	movf	??_Flash_Memory_Initialization,w
 12702  06D4  00A0               	movwf	setMemory_Data@data
 12703  06D5  3005               	movlw	5
 12704  06D6  319B  236E  3186   	fcall	_setMemory_Data
 12705                           
 12706                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12707  06D9  30AA               	movlw	170
 12708  06DA  0020               	movlb	0	; select bank0
 12709  06DB  00A4               	movwf	??_Flash_Memory_Initialization
 12710  06DC  0824               	movf	??_Flash_Memory_Initialization,w
 12711  06DD  00A0               	movwf	setMemory_Data@data
 12712  06DE  301F               	movlw	31
 12713  06DF  319B  236E  3186   	fcall	_setMemory_Data
 12714                           
 12715                           ;MCU_B1.c: 966: GIE = 0;
 12716  06E2  138B               	bcf	11,7	;volatile
 12717                           
 12718                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12719  06E3  3190  20FF         	fcall	_Flash_Memory_Write
 12720                           
 12721                           ;MCU_B1.c: 968: GIE = 1;
 12722  06E5  178B               	bsf	11,7	;volatile
 12723                           
 12724                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12725  06E6  0021               	movlb	1	; select bank1
 12726  06E7  15AF               	bsf	_myMain^(0+128),3
 12727                           
 12728                           ;MCU_B1.c: 970: myMain.First = 1;
 12729  06E8  16AF               	bsf	_myMain^(0+128),5
 12730                           
 12731                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12732  06E9  1639               	bsf	(_myMain^(0+128)+10),4
 12733  06EA  0008               	return
 12734  06EB                     __end_of_Flash_Memory_Initialization:	
 12735                           
 12736                           	psect	text81
 12737  1B6E                     __ptext81:	
 12738 ;; *************** function _setMemory_Data *****************
 12739 ;; Defined at:
 12740 ;;		line 1094 in file "../src/MCU_B1.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;  address         1    wreg     unsigned char 
 12743 ;;  data            1    0[BANK0 ] unsigned char 
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;  address         1    2[BANK0 ] unsigned char 
 12746 ;; Return value:  Size  Location     Type
 12747 ;;		None               void
 12748 ;; Registers used:
 12749 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12755 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;Total ram usage:        3 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    5
 12762 ;; This function calls:
 12763 ;;		Nothing
 12764 ;; This function is called by:
 12765 ;;		_Flash_Memory_Initialization
 12766 ;;		_Flash_Memory_Modify
 12767 ;; This function uses a non-reentrant model
 12768 ;;
 12769                           
 12770                           
 12771                           ;psect for function _setMemory_Data
 12772  1B6E                     _setMemory_Data:	
 12773                           
 12774                           ;incstack = 0
 12775                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12776                           ;setMemory_Data@address stored from wreg
 12777  1B6E  0020               	movlb	0	; select bank0
 12778  1B6F  00A2               	movwf	setMemory_Data@address
 12779                           
 12780                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12781  1B70  0820               	movf	setMemory_Data@data,w
 12782  1B71  00A1               	movwf	??_setMemory_Data
 12783  1B72  0822               	movf	setMemory_Data@address,w
 12784  1B73  3EBE               	addlw	_Memory& (0+255)
 12785  1B74  0086               	movwf	6
 12786  1B75  3001               	movlw	1	; select bank3/4
 12787  1B76  0087               	movwf	7
 12788  1B77  0821               	movf	??_setMemory_Data,w
 12789  1B78  0081               	movwf	1
 12790  1B79  0008               	return
 12791  1B7A                     __end_of_setMemory_Data:	
 12792                           
 12793                           	psect	text82
 12794  10FF                     __ptext82:	
 12795 ;; *************** function _Flash_Memory_Write *****************
 12796 ;; Defined at:
 12797 ;;		line 1023 in file "../src/MCU_B1.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;		None
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  i               1    1[BANK0 ] unsigned char 
 12802 ;; Return value:  Size  Location     Type
 12803 ;;		None               void
 12804 ;; Registers used:
 12805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12806 ;; Tracked objects:
 12807 ;;		On entry : 0/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;Total ram usage:        2 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; Hardware stack levels required when called:    6
 12818 ;; This function calls:
 12819 ;;		_Flash_Memory_Unlock
 12820 ;; This function is called by:
 12821 ;;		_Flash_Memory_Initialization
 12822 ;;		_Flash_Memory_Modify
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function _Flash_Memory_Write
 12828  10FF                     _Flash_Memory_Write:	
 12829                           
 12830                           ;MCU_B1.c: 1024: char i = 0;
 12831                           
 12832                           ;incstack = 0
 12833                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12834  10FF  0020               	movlb	0	; select bank0
 12835  1100  01A1               	clrf	Flash_Memory_Write@i
 12836                           
 12837                           ;MCU_B1.c: 1025: CFGS = 0;
 12838  1101  0023               	movlb	3	; select bank3
 12839  1102  1315               	bcf	21,6	;volatile
 12840                           
 12841                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12842  1103  3030               	movlw	48
 12843  1104  0092               	movwf	18	;volatile
 12844                           
 12845                           ;MCU_B1.c: 1027: PMDATH = 0;
 12846  1105  0194               	clrf	20	;volatile
 12847                           
 12848                           ;MCU_B1.c: 1028: FREE = 0;
 12849  1106  1215               	bcf	21,4	;volatile
 12850                           
 12851                           ;MCU_B1.c: 1029: LWLO = 1;
 12852  1107  1695               	bsf	21,5	;volatile
 12853                           
 12854                           ;MCU_B1.c: 1030: WREN = 1;
 12855  1108  1515               	bsf	21,2	;volatile
 12856                           
 12857                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12858  1109  0020               	movlb	0	; select bank0
 12859  110A  01A1               	clrf	Flash_Memory_Write@i
 12860  110B  3020               	movlw	32
 12861  110C  0221               	subwf	Flash_Memory_Write@i,w
 12862  110D  1803               	btfsc	3,0
 12863  110E  2927               	goto	l1258
 12864  110F                     l9654:	
 12865                           
 12866                           ;MCU_B1.c: 1032: PMADRL = i;
 12867  110F  0821               	movf	Flash_Memory_Write@i,w
 12868  1110  0023               	movlb	3	; select bank3
 12869  1111  0091               	movwf	17	;volatile
 12870                           
 12871                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12872  1112  0020               	movlb	0	; select bank0
 12873  1113  0821               	movf	Flash_Memory_Write@i,w
 12874  1114  3EBE               	addlw	_Memory& (0+255)
 12875  1115  0086               	movwf	6
 12876  1116  3001               	movlw	1	; select bank3/4
 12877  1117  0087               	movwf	7
 12878  1118  0801               	movf	1,w
 12879  1119  0023               	movlb	3	; select bank3
 12880  111A  0093               	movwf	19	;volatile
 12881                           
 12882                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12883  111B  319A  22DC  3190   	fcall	_Flash_Memory_Unlock
 12884  111E  3001               	movlw	1
 12885  111F  0020               	movlb	0	; select bank0
 12886  1120  00A0               	movwf	??_Flash_Memory_Write
 12887  1121  0820               	movf	??_Flash_Memory_Write,w
 12888  1122  07A1               	addwf	Flash_Memory_Write@i,f
 12889  1123  3020               	movlw	32
 12890  1124  0221               	subwf	Flash_Memory_Write@i,w
 12891  1125  1C03               	skipc
 12892  1126  290F               	goto	l9654
 12893  1127                     l1258:	
 12894                           
 12895                           ;MCU_B1.c: 1035: }
 12896                           ;MCU_B1.c: 1036: LWLO = 0;
 12897  1127  0023               	movlb	3	; select bank3
 12898  1128  1295               	bcf	21,5	;volatile
 12899                           
 12900                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12901  1129  319A  22DC         	fcall	_Flash_Memory_Unlock
 12902                           
 12903                           ;MCU_B1.c: 1038: WREN = 0;
 12904  112B  0023               	movlb	3	; select bank3
 12905  112C  1115               	bcf	21,2	;volatile
 12906  112D  0008               	return
 12907  112E                     __end_of_Flash_Memory_Write:	
 12908                           
 12909                           	psect	text83
 12910  1ADC                     __ptext83:	
 12911 ;; *************** function _Flash_Memory_Unlock *****************
 12912 ;; Defined at:
 12913 ;;		line 1002 in file "../src/MCU_B1.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;		None
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;		None
 12918 ;; Return value:  Size  Location     Type
 12919 ;;		None               void
 12920 ;; Registers used:
 12921 ;;		wreg
 12922 ;; Tracked objects:
 12923 ;;		On entry : 0/0
 12924 ;;		On exit  : 0/0
 12925 ;;		Unchanged: 0/0
 12926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12931 ;;Total ram usage:        0 bytes
 12932 ;; Hardware stack levels used:    1
 12933 ;; Hardware stack levels required when called:    5
 12934 ;; This function calls:
 12935 ;;		Nothing
 12936 ;; This function is called by:
 12937 ;;		_Flash_Memory_Write
 12938 ;;		_Flash_Memory_Erasing
 12939 ;; This function uses a non-reentrant model
 12940 ;;
 12941                           
 12942                           
 12943                           ;psect for function _Flash_Memory_Unlock
 12944  1ADC                     _Flash_Memory_Unlock:	
 12945                           
 12946                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12947                           
 12948                           ;incstack = 0
 12949                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12950  1ADC  3055               	movlw	85
 12951  1ADD  0023               	movlb	3	; select bank3
 12952  1ADE  0096               	movwf	22	;volatile
 12953                           
 12954                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12955  1ADF  30AA               	movlw	170
 12956  1AE0  0096               	movwf	22	;volatile
 12957                           
 12958                           ;MCU_B1.c: 1005: WR = 1;
 12959  1AE1  1495               	bsf	21,1	;volatile
 12960                           
 12961                           ;MCU_B1.c: 1006: __nop();
 12962  1AE2  0000               	nop
 12963                           
 12964                           ;MCU_B1.c: 1007: __nop();
 12965  1AE3  0000               	nop
 12966  1AE4  0008               	return
 12967  1AE5                     __end_of_Flash_Memory_Unlock:	
 12968                           
 12969                           	psect	text84
 12970  1E1A                     __ptext84:	
 12971 ;; *************** function _Flash_Memory_Read *****************
 12972 ;; Defined at:
 12973 ;;		line 1011 in file "../src/MCU_B1.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;  address         1    wreg     unsigned char 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  address         1    2[BANK0 ] unsigned char 
 12978 ;;  ret             1    3[BANK0 ] unsigned char 
 12979 ;;  i               1    1[BANK0 ] unsigned char 
 12980 ;; Return value:  Size  Location     Type
 12981 ;;                  1    wreg      unsigned char 
 12982 ;; Registers used:
 12983 ;;		wreg, status,2
 12984 ;; Tracked objects:
 12985 ;;		On entry : 0/0
 12986 ;;		On exit  : 0/0
 12987 ;;		Unchanged: 0/0
 12988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;Total ram usage:        4 bytes
 12994 ;; Hardware stack levels used:    1
 12995 ;; Hardware stack levels required when called:    5
 12996 ;; This function calls:
 12997 ;;		Nothing
 12998 ;; This function is called by:
 12999 ;;		_Flash_Memory_Initialization
 13000 ;;		_Flash_Memory_Modify
 13001 ;; This function uses a non-reentrant model
 13002 ;;
 13003                           
 13004                           
 13005                           ;psect for function _Flash_Memory_Read
 13006  1E1A                     _Flash_Memory_Read:	
 13007                           
 13008                           ;incstack = 0
 13009                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13010                           ;Flash_Memory_Read@address stored from wreg
 13011  1E1A  0020               	movlb	0	; select bank0
 13012  1E1B  00A2               	movwf	Flash_Memory_Read@address
 13013                           
 13014                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13015  1E1C  01A1               	clrf	Flash_Memory_Read@i
 13016  1E1D  01A3               	clrf	Flash_Memory_Read@ret
 13017                           
 13018                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13019  1E1E  3030               	movlw	48
 13020  1E1F  0023               	movlb	3	; select bank3
 13021  1E20  0092               	movwf	18	;volatile
 13022                           
 13023                           ;MCU_B1.c: 1014: PMADRL = address;
 13024  1E21  0020               	movlb	0	; select bank0
 13025  1E22  0822               	movf	Flash_Memory_Read@address,w
 13026  1E23  0023               	movlb	3	; select bank3
 13027  1E24  0091               	movwf	17	;volatile
 13028                           
 13029                           ;MCU_B1.c: 1015: CFGS = 0;
 13030  1E25  1315               	bcf	21,6	;volatile
 13031                           
 13032                           ;MCU_B1.c: 1016: RD = 1;
 13033  1E26  1415               	bsf	21,0	;volatile
 13034                           
 13035                           ;MCU_B1.c: 1017: i = PMDATH;
 13036  1E27  0814               	movf	20,w	;volatile
 13037  1E28  0020               	movlb	0	; select bank0
 13038  1E29  00A0               	movwf	??_Flash_Memory_Read
 13039  1E2A  0820               	movf	??_Flash_Memory_Read,w
 13040  1E2B  00A1               	movwf	Flash_Memory_Read@i
 13041                           
 13042                           ;MCU_B1.c: 1018: ret = PMDATL;
 13043  1E2C  0023               	movlb	3	; select bank3
 13044  1E2D  0813               	movf	19,w	;volatile
 13045  1E2E  0020               	movlb	0	; select bank0
 13046  1E2F  00A0               	movwf	??_Flash_Memory_Read
 13047  1E30  0820               	movf	??_Flash_Memory_Read,w
 13048  1E31  00A3               	movwf	Flash_Memory_Read@ret
 13049                           
 13050                           ;MCU_B1.c: 1019: return ret;
 13051  1E32  0823               	movf	Flash_Memory_Read@ret,w
 13052  1E33  0008               	return
 13053  1E34                     __end_of_Flash_Memory_Read:	
 13054                           
 13055                           	psect	text85
 13056  054C                     __ptext85:	
 13057 ;; *************** function _Exception_Main *****************
 13058 ;; Defined at:
 13059 ;;		line 499 in file "../src/Main_B1.c"
 13060 ;; Parameters:    Size  Location     Type
 13061 ;;		None
 13062 ;; Auto vars:     Size  Location     Type
 13063 ;;  i               2   19[BANK0 ] int 
 13064 ;;  i               2   17[BANK0 ] int 
 13065 ;;  lights          1   21[BANK0 ] unsigned char 
 13066 ;;  error           1   16[BANK0 ] unsigned char 
 13067 ;;  count           1   15[BANK0 ] unsigned char 
 13068 ;;  status          1   14[BANK0 ] unsigned char 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;		None               void
 13071 ;; Registers used:
 13072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;Total ram usage:        9 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    7
 13085 ;; This function calls:
 13086 ;;		_getDimmerLights_Line
 13087 ;;		_getDimmerLights_Status
 13088 ;;		_getMain_All_Error_Status
 13089 ;;		_getMain_All_LightsStatus
 13090 ;;		_setBuz
 13091 ;;		_setDimmerLights_SwOff
 13092 ;;		_setLED
 13093 ;; This function is called by:
 13094 ;;		_main
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           
 13099                           ;psect for function _Exception_Main
 13100  054C                     _Exception_Main:	
 13101                           
 13102                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13103                           
 13104                           ;incstack = 0
 13105                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13106  054C  3000               	movlw	0
 13107  054D  3191  215F  3185   	fcall	_getMain_All_Error_Status
 13108  0550  0020               	movlb	0	; select bank0
 13109  0551  00AD               	movwf	??_Exception_Main
 13110  0552  082D               	movf	??_Exception_Main,w
 13111  0553  00B0               	movwf	Exception_Main@error
 13112                           
 13113                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13114  0554  01B5               	clrf	Exception_Main@lights
 13115  0555  01AF               	clrf	Exception_Main@count
 13116  0556  0AAF               	incf	Exception_Main@count,f
 13117                           
 13118                           ;Main_B1.c: 502: char status = 0;
 13119  0557  01AE               	clrf	Exception_Main@status
 13120                           
 13121                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13122  0558  0021               	movlb	1	; select bank1
 13123  0559  1DB9               	btfss	(_myMain^(0+128)+10),3
 13124  055A  2D6A               	goto	l10816
 13125                           
 13126                           ;Main_B1.c: 505: if (error == 0) {
 13127  055B  0020               	movlb	0	; select bank0
 13128  055C  08B0               	movf	Exception_Main@error,f
 13129  055D  1D03               	skipz
 13130  055E  0008               	return
 13131                           
 13132                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13133  055F  0021               	movlb	1	; select bank1
 13134  0560  11B9               	bcf	(_myMain^(0+128)+10),3
 13135                           
 13136                           ;Main_B1.c: 509: setLED(99, 10);
 13137  0561  300A               	movlw	10
 13138  0562  0020               	movlb	0	; select bank0
 13139  0563  00AD               	movwf	??_Exception_Main
 13140  0564  082D               	movf	??_Exception_Main,w
 13141  0565  00A2               	movwf	setLED@command
 13142  0566  3063               	movlw	99
 13143  0567  3192  22D5         	fcall	_setLED
 13144                           
 13145                           ;Main_B1.c: 522: }
 13146                           ;Main_B1.c: 523: } else {
 13147  0569  0008               	return
 13148  056A                     l10816:	
 13149                           
 13150                           ;Main_B1.c: 524: if (error != 0) {
 13151  056A  0020               	movlb	0	; select bank0
 13152  056B  0830               	movf	Exception_Main@error,w
 13153  056C  1903               	btfsc	3,2
 13154  056D  0008               	return
 13155                           
 13156                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13157  056E  0021               	movlb	1	; select bank1
 13158  056F  15B9               	bsf	(_myMain^(0+128)+10),3
 13159                           
 13160                           ;Main_B1.c: 527: setLED(99, 11);
 13161  0570  300B               	movlw	11
 13162  0571  0020               	movlb	0	; select bank0
 13163  0572  00AD               	movwf	??_Exception_Main
 13164  0573  082D               	movf	??_Exception_Main,w
 13165  0574  00A2               	movwf	setLED@command
 13166  0575  3063               	movlw	99
 13167  0576  3192  22D5  3185   	fcall	_setLED
 13168                           
 13169                           ;Main_B1.c: 538: switch (error) {
 13170  0579  2E16               	goto	l10864
 13171  057A                     l10822:	
 13172                           ;Main_B1.c: 539: case 2:
 13173                           
 13174                           
 13175                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13176  057A  319A  22E5  3185   	fcall	_getMain_All_LightsStatus
 13177  057D  3A01               	xorlw	1
 13178  057E  1D03               	skipz
 13179  057F  2D89               	goto	l10826
 13180                           
 13181                           ;Main_B1.c: 547: setBuz(10, 300);
 13182  0580  302C               	movlw	44
 13183  0581  0020               	movlb	0	; select bank0
 13184  0582  00A9               	movwf	setBuz@time
 13185  0583  3001               	movlw	1
 13186  0584  00AA               	movwf	setBuz@time+1
 13187  0585  300A               	movlw	10
 13188  0586  3194  24FB  3185   	fcall	_setBuz
 13189  0589                     l10826:	
 13190                           
 13191                           ;Main_B1.c: 548: }
 13192                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13193  0589  0020               	movlb	0	; select bank0
 13194  058A  01B1               	clrf	Exception_Main@i
 13195  058B  01B2               	clrf	Exception_Main@i+1
 13196  058C                     l10836:	
 13197  058C  0832               	movf	Exception_Main@i+1,w
 13198  058D  3A80               	xorlw	128
 13199  058E  00AD               	movwf	??_Exception_Main
 13200  058F  3080               	movlw	128
 13201  0590  022D               	subwf	??_Exception_Main,w
 13202  0591  1D03               	skipz
 13203  0592  2D95               	goto	u12685
 13204  0593  082F               	movf	Exception_Main@count,w
 13205  0594  0231               	subwf	Exception_Main@i,w
 13206  0595                     u12685:	
 13207  0595  1803               	btfsc	3,0
 13208  0596  2DB7               	goto	u12680
 13209                           
 13210                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13211  0597  0020               	movlb	0	; select bank0
 13212  0598  0831               	movf	Exception_Main@i,w
 13213  0599  3E01               	addlw	1
 13214  059A  319B  23F4  3185   	fcall	_getDimmerLights_Status
 13215  059D  3A01               	xorlw	1
 13216  059E  1D03               	skipz
 13217  059F  2DB1               	goto	l10834
 13218                           
 13219                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13220  05A0  0021               	movlb	1	; select bank1
 13221  05A1  084E               	movf	_DimmerLights^(0+128),w
 13222  05A2  0086               	movwf	6
 13223  05A3  3001               	movlw	1	; select bank2/3
 13224  05A4  0087               	movwf	7
 13225  05A5  1401               	bsf	1,0
 13226                           
 13227                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13228  05A6  0A4E               	incf	_DimmerLights^(0+128),w
 13229  05A7  0086               	movwf	6
 13230  05A8  3001               	movlw	1	; select bank2/3
 13231  05A9  0087               	movwf	7
 13232  05AA  1001               	bcf	1,0
 13233                           
 13234                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13235  05AB  0020               	movlb	0	; select bank0
 13236  05AC  0831               	movf	Exception_Main@i,w
 13237  05AD  3E01               	addlw	1
 13238  05AE  3192  229C  3185   	fcall	_setDimmerLights_SwOff
 13239  05B1                     l10834:	
 13240  05B1  3001               	movlw	1
 13241  05B2  0020               	movlb	0	; select bank0
 13242  05B3  07B1               	addwf	Exception_Main@i,f
 13243  05B4  3000               	movlw	0
 13244  05B5  3DB2               	addwfc	Exception_Main@i+1,f
 13245  05B6  2D8C               	goto	l10836
 13246  05B7                     u12680:	
 13247  05B7  0020               	movlb	0	; select bank0
 13248  05B8  0008               	return
 13249  05B9                     l10838:	
 13250                           ;Main_B1.c: 561: case 3:
 13251                           
 13252                           ;Main_B1.c: 556: }
 13253                           ;Main_B1.c: 557: }
 13254                           ;Main_B1.c: 560: break;
 13255                           
 13256                           
 13257                           ;Main_B1.c: 563: setBuz(5, 300);
 13258  05B9  302C               	movlw	44
 13259  05BA  0020               	movlb	0	; select bank0
 13260  05BB  00A9               	movwf	setBuz@time
 13261  05BC  3001               	movlw	1
 13262  05BD  00AA               	movwf	setBuz@time+1
 13263  05BE  3005               	movlw	5
 13264  05BF  3194  24FB  3185   	fcall	_setBuz
 13265                           
 13266                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13267  05C2  319A  22EF  3185   	fcall	_getDimmerLights_Line
 13268  05C5  0020               	movlb	0	; select bank0
 13269  05C6  00AD               	movwf	??_Exception_Main
 13270  05C7  082D               	movf	??_Exception_Main,w
 13271  05C8  00B5               	movwf	Exception_Main@lights
 13272                           
 13273                           ;Main_B1.c: 565: if (lights == 0) {
 13274  05C9  08B5               	movf	Exception_Main@lights,f
 13275  05CA  1D03               	skipz
 13276  05CB  2DFB               	goto	l10856
 13277                           
 13278                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13279  05CC  01B3               	clrf	Exception_Main@i_3630
 13280  05CD  01B4               	clrf	Exception_Main@i_3630+1
 13281  05CE                     l10854:	
 13282  05CE  0834               	movf	Exception_Main@i_3630+1,w
 13283  05CF  3A80               	xorlw	128
 13284  05D0  00AD               	movwf	??_Exception_Main
 13285  05D1  3080               	movlw	128
 13286  05D2  022D               	subwf	??_Exception_Main,w
 13287  05D3  1D03               	skipz
 13288  05D4  2DD7               	goto	u12715
 13289  05D5  082F               	movf	Exception_Main@count,w
 13290  05D6  0233               	subwf	Exception_Main@i_3630,w
 13291  05D7                     u12715:	
 13292  05D7  1803               	btfsc	3,0
 13293  05D8  2DF9               	goto	u12710
 13294                           
 13295                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13296  05D9  0020               	movlb	0	; select bank0
 13297  05DA  0833               	movf	Exception_Main@i_3630,w
 13298  05DB  3E01               	addlw	1
 13299  05DC  319B  23F4  3185   	fcall	_getDimmerLights_Status
 13300  05DF  3A01               	xorlw	1
 13301  05E0  1D03               	skipz
 13302  05E1  2DF3               	goto	l10852
 13303                           
 13304                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13305  05E2  0021               	movlb	1	; select bank1
 13306  05E3  084E               	movf	_DimmerLights^(0+128),w
 13307  05E4  0086               	movwf	6
 13308  05E5  3001               	movlw	1	; select bank2/3
 13309  05E6  0087               	movwf	7
 13310  05E7  1401               	bsf	1,0
 13311                           
 13312                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13313  05E8  0A4E               	incf	_DimmerLights^(0+128),w
 13314  05E9  0086               	movwf	6
 13315  05EA  3001               	movlw	1	; select bank2/3
 13316  05EB  0087               	movwf	7
 13317  05EC  1001               	bcf	1,0
 13318                           
 13319                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13320  05ED  0020               	movlb	0	; select bank0
 13321  05EE  0833               	movf	Exception_Main@i_3630,w
 13322  05EF  3E01               	addlw	1
 13323  05F0  3192  229C  3185   	fcall	_setDimmerLights_SwOff
 13324  05F3                     l10852:	
 13325  05F3  3001               	movlw	1
 13326  05F4  0020               	movlb	0	; select bank0
 13327  05F5  07B3               	addwf	Exception_Main@i_3630,f
 13328  05F6  3000               	movlw	0
 13329  05F7  3DB4               	addwfc	Exception_Main@i_3630+1,f
 13330  05F8  2DCE               	goto	l10854
 13331  05F9                     u12710:	
 13332  05F9  0020               	movlb	0	; select bank0
 13333  05FA  0008               	return
 13334  05FB                     l10856:	
 13335                           ;Main_B1.c: 573: }
 13336                           ;Main_B1.c: 574: }
 13337                           ;Main_B1.c: 575: } else {
 13338                           
 13339                           
 13340                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13341  05FB  0020               	movlb	0	; select bank0
 13342  05FC  0835               	movf	Exception_Main@lights,w
 13343  05FD  319B  23F4  3185   	fcall	_getDimmerLights_Status
 13344  0600  3A01               	xorlw	1
 13345  0601  1903               	btfsc	3,2
 13346  0602  2E05               	goto	l10858
 13347  0603  0020               	movlb	0	; select bank0
 13348  0604  0008               	return
 13349  0605                     l10858:	
 13350                           
 13351                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13352  0605  0021               	movlb	1	; select bank1
 13353  0606  084E               	movf	_DimmerLights^(0+128),w
 13354  0607  0086               	movwf	6
 13355  0608  3001               	movlw	1	; select bank2/3
 13356  0609  0087               	movwf	7
 13357  060A  1401               	bsf	1,0
 13358                           
 13359                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13360  060B  0A4E               	incf	_DimmerLights^(0+128),w
 13361  060C  0086               	movwf	6
 13362  060D  3001               	movlw	1	; select bank2/3
 13363  060E  0087               	movwf	7
 13364  060F  1001               	bcf	1,0
 13365                           
 13366                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13367  0610  0020               	movlb	0	; select bank0
 13368  0611  0835               	movf	Exception_Main@lights,w
 13369  0612  3192  229C         	fcall	_setDimmerLights_SwOff
 13370  0614  0020               	movlb	0	; select bank0
 13371  0615  0008               	return
 13372  0616                     l10864:	
 13373                           ;Main_B1.c: 586: }
 13374                           
 13375                           ;Main_B1.c: 582: }
 13376                           ;Main_B1.c: 583: }
 13377                           ;Main_B1.c: 585: break;
 13378                           
 13379  0616  0020               	movlb	0	; select bank0
 13380  0617  0830               	movf	Exception_Main@error,w
 13381                           
 13382                           ; Switch size 1, requested type "space"
 13383                           ; Number of cases is 2, Range of values is 2 to 3
 13384                           ; switch strategies available:
 13385                           ; Name         Instructions Cycles
 13386                           ; simple_byte            7     4 (average)
 13387                           ; direct_byte           13     9 (fixed)
 13388                           ; jumptable            263     9 (fixed)
 13389                           ;	Chosen strategy is simple_byte
 13390  0618  3A02               	xorlw	2	; case 2
 13391  0619  1903               	skipnz
 13392  061A  2D7A               	goto	l10822
 13393  061B  3A01               	xorlw	1	; case 3
 13394  061C  1903               	skipnz
 13395  061D  2DB9               	goto	l10838
 13396  061E  2E20               	goto	l1502
 13397  061F  0008               	return
 13398  0620                     l1502:	
 13399  0620  0008               	return
 13400  0621                     __end_of_Exception_Main:	
 13401                           
 13402                           	psect	text86
 13403  1AEF                     __ptext86:	
 13404 ;; *************** function _getDimmerLights_Line *****************
 13405 ;; Defined at:
 13406 ;;		line 1052 in file "../src/Dimmer_B1.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;		None
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;  line            1    0[BANK0 ] unsigned char 
 13411 ;; Return value:  Size  Location     Type
 13412 ;;                  1    wreg      unsigned char 
 13413 ;; Registers used:
 13414 ;;		wreg, status,2
 13415 ;; Tracked objects:
 13416 ;;		On entry : 0/0
 13417 ;;		On exit  : 0/0
 13418 ;;		Unchanged: 0/0
 13419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;Total ram usage:        1 bytes
 13425 ;; Hardware stack levels used:    1
 13426 ;; Hardware stack levels required when called:    5
 13427 ;; This function calls:
 13428 ;;		Nothing
 13429 ;; This function is called by:
 13430 ;;		_Exception_Main
 13431 ;; This function uses a non-reentrant model
 13432 ;;
 13433                           
 13434                           
 13435                           ;psect for function _getDimmerLights_Line
 13436  1AEF                     _getDimmerLights_Line:	
 13437                           
 13438                           ;Dimmer_B1.c: 1053: char line = 0;
 13439                           
 13440                           ;incstack = 0
 13441                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13442  1AEF  0020               	movlb	0	; select bank0
 13443  1AF0  01A0               	clrf	getDimmerLights_Line@line
 13444                           
 13445                           ;Dimmer_B1.c: 1055: if (DimmerLights1.Line == 1) {
 13446  1AF1  0022               	movlb	2	; select bank2
 13447  1AF2  1CDF               	btfss	(_DimmerLights1^(0+256)+1),1
 13448  1AF3  2AF7               	goto	l9886
 13449                           
 13450                           ;Dimmer_B1.c: 1056: line = 1;
 13451  1AF4  0020               	movlb	0	; select bank0
 13452  1AF5  01A0               	clrf	getDimmerLights_Line@line
 13453  1AF6  0AA0               	incf	getDimmerLights_Line@line,f
 13454  1AF7                     l9886:	
 13455                           
 13456                           ;Dimmer_B1.c: 1057: }
 13457                           ;Dimmer_B1.c: 1069: return line;
 13458  1AF7  0020               	movlb	0	; select bank0
 13459  1AF8  0820               	movf	getDimmerLights_Line@line,w
 13460  1AF9  0008               	return
 13461  1AFA                     __end_of_getDimmerLights_Line:	
 13462                           
 13463                           	psect	text87
 13464  1E83                     __ptext87:	
 13465 ;; *************** function _DimmerLights_Main *****************
 13466 ;; Defined at:
 13467 ;;		line 781 in file "../src/Dimmer_B1.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;		None
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;		None
 13472 ;; Return value:  Size  Location     Type
 13473 ;;		None               void
 13474 ;; Registers used:
 13475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;Total ram usage:        0 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; Hardware stack levels required when called:   10
 13488 ;; This function calls:
 13489 ;;		_getLoad_OK
 13490 ;;		_getMain_All_Error_Status
 13491 ;;		_getMain_All_LightsStatus
 13492 ;;		_setDimmerLights_Main
 13493 ;; This function is called by:
 13494 ;;		_main
 13495 ;; This function uses a non-reentrant model
 13496 ;;
 13497                           
 13498                           
 13499                           ;psect for function _DimmerLights_Main
 13500  1E83                     _DimmerLights_Main:	
 13501                           
 13502                           ;Dimmer_B1.c: 784: if (Dimmer.LoadGO == 1) {
 13503                           
 13504                           ;incstack = 0
 13505                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13506  1E83  0022               	movlb	2	; select bank2
 13507  1E84  1CAC               	btfss	_Dimmer^(0+256),1
 13508  1E85  2E9B               	goto	l10444
 13509                           
 13510                           ;Dimmer_B1.c: 785: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13511  1E86  319A  22BA  319E   	fcall	_getLoad_OK
 13512  1E89  3A01               	xorlw	1
 13513  1E8A  1903               	skipnz
 13514  1E8B  2E99               	goto	l758
 13515  1E8C  3000               	movlw	0
 13516  1E8D  3191  215F  319E   	fcall	_getMain_All_Error_Status
 13517  1E90  3800               	iorlw	0
 13518  1E91  1D03               	skipz
 13519  1E92  2E99               	goto	l758
 13520  1E93  319A  22E5  319E   	fcall	_getMain_All_LightsStatus
 13521  1E96  3800               	iorlw	0
 13522  1E97  1D03               	skipz
 13523  1E98  2E9B               	goto	l10444
 13524  1E99                     l758:	
 13525                           
 13526                           ;Dimmer_B1.c: 786: Dimmer.LoadGO = 0;
 13527  1E99  0022               	movlb	2	; select bank2
 13528  1E9A  10AC               	bcf	_Dimmer^(0+256),1
 13529  1E9B                     l10444:	
 13530                           
 13531                           ;Dimmer_B1.c: 787: }
 13532                           ;Dimmer_B1.c: 788: }
 13533                           ;Dimmer_B1.c: 792: setDimmerLights_Main(1);
 13534  1E9B  3001               	movlw	1
 13535  1E9C  3188  2000         	fcall	_setDimmerLights_Main
 13536  1E9E  0008               	return
 13537  1E9F                     __end_of_DimmerLights_Main:	
 13538                           
 13539                           	psect	text88
 13540  0800                     __ptext88:	
 13541 ;; *************** function _setDimmerLights_Main *****************
 13542 ;; Defined at:
 13543 ;;		line 810 in file "../src/Dimmer_B1.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;  lights          1    wreg     unsigned char 
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;  lights          1    1[BANK1 ] unsigned char 
 13548 ;; Return value:  Size  Location     Type
 13549 ;;		None               void
 13550 ;; Registers used:
 13551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        1 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    9
 13564 ;; This function calls:
 13565 ;;		_DimmerLights_SelectPointer
 13566 ;;		_getDimmerLights_Allow_Condition
 13567 ;;		_getMain_All_LightsStatus
 13568 ;;		_setDimmerLights_Dimming
 13569 ;;		_setDimmerLights_OnOff
 13570 ;; This function is called by:
 13571 ;;		_DimmerLights_Main
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           
 13576                           ;psect for function _setDimmerLights_Main
 13577  0800                     _setDimmerLights_Main:	
 13578                           
 13579                           ;incstack = 0
 13580                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13581                           ;setDimmerLights_Main@lights stored from wreg
 13582  0800  0021               	movlb	1	; select bank1
 13583  0801  00E5               	movwf	setDimmerLights_Main@lights^(0+128)
 13584                           
 13585                           ;Dimmer_B1.c: 812: DimmerLights_SelectPointer(lights);
 13586  0802  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13587  0803  319B  2332  3188   	fcall	_DimmerLights_SelectPointer
 13588                           
 13589                           ;Dimmer_B1.c: 813: if (DimmerLights->Trigger == 1) {
 13590  0806  0021               	movlb	1	; select bank1
 13591  0807  084E               	movf	_DimmerLights^(0+128),w
 13592  0808  0086               	movwf	6
 13593  0809  3001               	movlw	1	; select bank2/3
 13594  080A  0087               	movwf	7
 13595  080B  1C81               	btfss	1,1
 13596  080C  282F               	goto	l9864
 13597                           
 13598                           ;Dimmer_B1.c: 814: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13599  080D  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13600  080E  319D  258C  3188   	fcall	_getDimmerLights_Allow_Condition
 13601  0811  3800               	iorlw	0
 13602  0812  1D03               	skipz
 13603  0813  0008               	return
 13604                           
 13605                           ;Dimmer_B1.c: 815: DimmerLights->Trigger = 0;
 13606  0814  0021               	movlb	1	; select bank1
 13607  0815  084E               	movf	_DimmerLights^(0+128),w
 13608  0816  0086               	movwf	6
 13609  0817  3001               	movlw	1	; select bank2/3
 13610  0818  0087               	movwf	7
 13611  0819  1081               	bcf	1,1
 13612                           
 13613                           ;Dimmer_B1.c: 816: if (DimmerLights->Switch == 1) {
 13614  081A  084E               	movf	_DimmerLights^(0+128),w
 13615  081B  0086               	movwf	6
 13616  081C  3001               	movlw	1	; select bank2/3
 13617  081D  0087               	movwf	7
 13618  081E  1D01               	btfss	1,2
 13619  081F  2828               	goto	l9862
 13620                           
 13621                           ;Dimmer_B1.c: 817: setDimmerLights_OnOff(lights, 1);
 13622  0820  0020               	movlb	0	; select bank0
 13623  0821  01ED               	clrf	setDimmerLights_OnOff@command
 13624  0822  0AED               	incf	setDimmerLights_OnOff@command,f
 13625  0823  0021               	movlb	1	; select bank1
 13626  0824  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13627  0825  318F  273D         	fcall	_setDimmerLights_OnOff
 13628                           
 13629                           ;Dimmer_B1.c: 818: } else {
 13630  0827  0008               	return
 13631  0828                     l9862:	
 13632                           
 13633                           ;Dimmer_B1.c: 819: setDimmerLights_OnOff(lights, 0);
 13634  0828  0020               	movlb	0	; select bank0
 13635  0829  01ED               	clrf	setDimmerLights_OnOff@command
 13636  082A  0021               	movlb	1	; select bank1
 13637  082B  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13638  082C  318F  273D         	fcall	_setDimmerLights_OnOff
 13639                           
 13640                           ;Dimmer_B1.c: 820: }
 13641                           ;Dimmer_B1.c: 821: }
 13642                           ;Dimmer_B1.c: 822: } else {
 13643  082E  0008               	return
 13644  082F                     l9864:	
 13645                           
 13646                           ;Dimmer_B1.c: 823: if (getMain_All_LightsStatus() == 1) {
 13647  082F  319A  22E5  3188   	fcall	_getMain_All_LightsStatus
 13648  0832  3A01               	xorlw	1
 13649  0833  1D03               	skipz
 13650  0834  285E               	goto	l9876
 13651                           
 13652                           ;Dimmer_B1.c: 824: if (DimmerLights->DimmingTrigger == 1) {
 13653  0835  0021               	movlb	1	; select bank1
 13654  0836  084E               	movf	_DimmerLights^(0+128),w
 13655  0837  0086               	movwf	6
 13656  0838  3001               	movlw	1	; select bank2/3
 13657  0839  0087               	movwf	7
 13658  083A  1E01               	btfss	1,4
 13659  083B  0008               	return
 13660                           
 13661                           ;Dimmer_B1.c: 825: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13662  083C  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13663  083D  319D  258C  3188   	fcall	_getDimmerLights_Allow_Condition
 13664  0840  3800               	iorlw	0
 13665  0841  1D03               	skipz
 13666  0842  0008               	return
 13667                           
 13668                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13669  0843  0021               	movlb	1	; select bank1
 13670  0844  084E               	movf	_DimmerLights^(0+128),w
 13671  0845  0086               	movwf	6
 13672  0846  3001               	movlw	1	; select bank2/3
 13673  0847  0087               	movwf	7
 13674  0848  1201               	bcf	1,4
 13675                           
 13676                           ;Dimmer_B1.c: 827: if (DimmerLights->DimmingSwitch == 1) {
 13677  0849  084E               	movf	_DimmerLights^(0+128),w
 13678  084A  0086               	movwf	6
 13679  084B  3001               	movlw	1	; select bank2/3
 13680  084C  0087               	movwf	7
 13681  084D  1E81               	btfss	1,5
 13682  084E  2857               	goto	l9874
 13683                           
 13684                           ;Dimmer_B1.c: 828: setDimmerLights_Dimming(lights, 1);
 13685  084F  0020               	movlb	0	; select bank0
 13686  0850  01EA               	clrf	setDimmerLights_Dimming@status
 13687  0851  0AEA               	incf	setDimmerLights_Dimming@status,f
 13688  0852  0021               	movlb	1	; select bank1
 13689  0853  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13690  0854  3194  24A5         	fcall	_setDimmerLights_Dimming
 13691                           
 13692                           ;Dimmer_B1.c: 829: } else {
 13693  0856  0008               	return
 13694  0857                     l9874:	
 13695                           
 13696                           ;Dimmer_B1.c: 830: setDimmerLights_Dimming(lights, 0);
 13697  0857  0020               	movlb	0	; select bank0
 13698  0858  01EA               	clrf	setDimmerLights_Dimming@status
 13699  0859  0021               	movlb	1	; select bank1
 13700  085A  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13701  085B  3194  24A5         	fcall	_setDimmerLights_Dimming
 13702                           
 13703                           ;Dimmer_B1.c: 831: }
 13704                           ;Dimmer_B1.c: 832: }
 13705                           ;Dimmer_B1.c: 833: }
 13706                           ;Dimmer_B1.c: 834: } else {
 13707  085D  0008               	return
 13708  085E                     l9876:	
 13709                           
 13710                           ;Dimmer_B1.c: 835: if (DimmerLights->DimmingTrigger == 1) {
 13711  085E  0021               	movlb	1	; select bank1
 13712  085F  084E               	movf	_DimmerLights^(0+128),w
 13713  0860  0086               	movwf	6
 13714  0861  3001               	movlw	1	; select bank2/3
 13715  0862  0087               	movwf	7
 13716  0863  1E01               	btfss	1,4
 13717  0864  0008               	return
 13718                           
 13719                           ;Dimmer_B1.c: 836: DimmerLights->DimmingTrigger = 0;
 13720  0865  084E               	movf	_DimmerLights^(0+128),w
 13721  0866  0086               	movwf	6
 13722  0867  3001               	movlw	1	; select bank2/3
 13723  0868  0087               	movwf	7
 13724  0869  1201               	bcf	1,4
 13725  086A  0008               	return
 13726  086B                     __end_of_setDimmerLights_Main:	
 13727                           
 13728                           	psect	text89
 13729  0F3D                     __ptext89:	
 13730 ;; *************** function _setDimmerLights_OnOff *****************
 13731 ;; Defined at:
 13732 ;;		line 844 in file "../src/Dimmer_B1.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  lights          1    wreg     unsigned char 
 13735 ;;  command         1   77[BANK0 ] unsigned char 
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;  lights          1    0[BANK1 ] unsigned char 
 13738 ;; Return value:  Size  Location     Type
 13739 ;;		None               void
 13740 ;; Registers used:
 13741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13747 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13748 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;Total ram usage:        4 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    8
 13754 ;; This function calls:
 13755 ;;		_getCmd_Status
 13756 ;;		_getDelayOff_GO
 13757 ;;		_getDimmerLights_PercentToValue
 13758 ;;		_getMain_All_LightsStatus
 13759 ;;		_setCmd_Status
 13760 ;;		_setDelayOff_GO
 13761 ;;		_setDimmerIntr_ControlStatus
 13762 ;;		_setDimmerIntr_DimmingValue
 13763 ;;		_setDimmerIntr_Dimming_RF
 13764 ;;		_setDimmerIntr_MaxmumValue
 13765 ;;		_setDimmerLights_Line
 13766 ;;		_setLED
 13767 ;;		_setProductData
 13768 ;;		_setRF_DimmerLights
 13769 ;;		_setTxData
 13770 ;; This function is called by:
 13771 ;;		_setDimmerLights_Main
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           
 13776                           ;psect for function _setDimmerLights_OnOff
 13777  0F3D                     _setDimmerLights_OnOff:	
 13778                           
 13779                           ;incstack = 0
 13780                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13781                           ;setDimmerLights_OnOff@lights stored from wreg
 13782  0F3D  0021               	movlb	1	; select bank1
 13783  0F3E  00E4               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13784                           
 13785                           ;Dimmer_B1.c: 846: if (command == 1) {
 13786  0F3F  0020               	movlb	0	; select bank0
 13787  0F40  086D               	movf	setDimmerLights_OnOff@command,w
 13788  0F41  3A01               	xorlw	1
 13789  0F42  1D03               	skipz
 13790  0F43  2FA2               	goto	l9550
 13791                           
 13792                           ;Dimmer_B1.c: 847: setDimmerIntr_ControlStatus(lights, 1);
 13793  0F44  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13794  0F45  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13795  0F46  0021               	movlb	1	; select bank1
 13796  0F47  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13797  0F48  319D  25B8  318F   	fcall	_setDimmerIntr_ControlStatus
 13798                           
 13799                           ;Dimmer_B1.c: 850: Dimmer.Load_Status = 1;
 13800  0F4B  0022               	movlb	2	; select bank2
 13801  0F4C  152C               	bsf	_Dimmer^(0+256),2
 13802                           
 13803                           ;Dimmer_B1.c: 851: setDimmerLights_Line(lights);
 13804  0F4D  0021               	movlb	1	; select bank1
 13805  0F4E  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13806  0F4F  319C  2405  318F   	fcall	_setDimmerLights_Line
 13807                           
 13808                           ;Dimmer_B1.c: 857: setLED(lights, 0);
 13809  0F52  0020               	movlb	0	; select bank0
 13810  0F53  01A2               	clrf	setLED@command
 13811  0F54  0021               	movlb	1	; select bank1
 13812  0F55  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13813  0F56  3192  22D5  318F   	fcall	_setLED
 13814                           
 13815                           ;Dimmer_B1.c: 858: ;;
 13816                           ;Dimmer_B1.c: 878: if (DimmerLights->DimmingRun == 1) {
 13817  0F59  0021               	movlb	1	; select bank1
 13818  0F5A  0A4E               	incf	_DimmerLights^(0+128),w
 13819  0F5B  0086               	movwf	6
 13820  0F5C  3001               	movlw	1	; select bank2/3
 13821  0F5D  0087               	movwf	7
 13822  0F5E  1F01               	btfss	1,6
 13823  0F5F  2F84               	goto	l9542
 13824                           
 13825                           ;Dimmer_B1.c: 879: DimmerLights->DimmingRun = 0;
 13826  0F60  0A4E               	incf	_DimmerLights^(0+128),w
 13827  0F61  0086               	movwf	6
 13828  0F62  3001               	movlw	1	; select bank2/3
 13829  0F63  0087               	movwf	7
 13830  0F64  1301               	bcf	1,6
 13831                           
 13832                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13833  0F65  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13834  0F66  3E14               	addlw	20
 13835  0F67  076C               	addwf	_product^(0+128),w
 13836  0F68  0020               	movlb	0	; select bank0
 13837  0F69  00EE               	movwf	??_setDimmerLights_OnOff
 13838  0F6A  086E               	movf	??_setDimmerLights_OnOff,w
 13839  0F6B  0086               	movwf	6
 13840  0F6C  3002               	movlw	2	; select bank4/5
 13841  0F6D  0087               	movwf	7
 13842  0F6E  0801               	movf	1,w
 13843  0F6F  3196  26D1  318F   	fcall	_getDimmerLights_PercentToValue
 13844  0F72  0020               	movlb	0	; select bank0
 13845  0F73  00EF               	movwf	??_setDimmerLights_OnOff+1
 13846  0F74  086F               	movf	??_setDimmerLights_OnOff+1,w
 13847  0F75  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13848  0F76  0021               	movlb	1	; select bank1
 13849  0F77  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13850  0F78  319B  234A  318F   	fcall	_setDimmerIntr_MaxmumValue
 13851                           
 13852                           ;Dimmer_B1.c: 881: setDimmerIntr_Dimming_RF(lights, 1);
 13853  0F7B  0020               	movlb	0	; select bank0
 13854  0F7C  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13855  0F7D  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13856  0F7E  0021               	movlb	1	; select bank1
 13857  0F7F  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13858  0F80  319D  25D0  318F   	fcall	_setDimmerIntr_Dimming_RF
 13859                           
 13860                           ;Dimmer_B1.c: 882: } else {
 13861  0F83  2F9B               	goto	l9544
 13862  0F84                     l9542:	
 13863                           
 13864                           ;Dimmer_B1.c: 883: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13865  0F84  0021               	movlb	1	; select bank1
 13866  0F85  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13867  0F86  3E14               	addlw	20
 13868  0F87  076C               	addwf	_product^(0+128),w
 13869  0F88  0020               	movlb	0	; select bank0
 13870  0F89  00EE               	movwf	??_setDimmerLights_OnOff
 13871  0F8A  086E               	movf	??_setDimmerLights_OnOff,w
 13872  0F8B  0086               	movwf	6
 13873  0F8C  3002               	movlw	2	; select bank4/5
 13874  0F8D  0087               	movwf	7
 13875  0F8E  0801               	movf	1,w
 13876  0F8F  3196  26D1  318F   	fcall	_getDimmerLights_PercentToValue
 13877  0F92  0020               	movlb	0	; select bank0
 13878  0F93  00EF               	movwf	??_setDimmerLights_OnOff+1
 13879  0F94  086F               	movf	??_setDimmerLights_OnOff+1,w
 13880  0F95  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13881  0F96  0021               	movlb	1	; select bank1
 13882  0F97  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13883  0F98  319B  2356  318F   	fcall	_setDimmerIntr_DimmingValue
 13884  0F9B                     l9544:	
 13885                           
 13886                           ;Dimmer_B1.c: 886: }
 13887                           ;Dimmer_B1.c: 888: if (lights == 1) {
 13888  0F9B  0021               	movlb	1	; select bank1
 13889  0F9C  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13890  0F9D  3A01               	xorlw	1
 13891  0F9E  1D03               	skipz
 13892  0F9F  2FD1               	goto	l9564
 13893                           
 13894                           ;Dimmer_B1.c: 890: DimmerIntr1.TuneGO = 1;
 13895  0FA0  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 13896                           
 13897                           ;Dimmer_B1.c: 896: }
 13898                           ;Dimmer_B1.c: 902: } else if (command == 0) {
 13899                           
 13900                           ;Dimmer_B1.c: 892: } else if (lights == 2) {
 13901  0FA1  2FD1               	goto	l9564
 13902  0FA2                     l9550:	
 13903  0FA2  0020               	movlb	0	; select bank0
 13904  0FA3  08ED               	movf	setDimmerLights_OnOff@command,f
 13905  0FA4  1D03               	skipz
 13906  0FA5  2FD1               	goto	l9564
 13907                           
 13908                           ;Dimmer_B1.c: 903: setDimmerIntr_ControlStatus(lights, 0);
 13909  0FA6  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13910  0FA7  0021               	movlb	1	; select bank1
 13911  0FA8  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13912  0FA9  319D  25B8  318F   	fcall	_setDimmerIntr_ControlStatus
 13913                           
 13914                           ;Dimmer_B1.c: 905: Dimmer.Load_Status = 0;
 13915  0FAC  0022               	movlb	2	; select bank2
 13916  0FAD  112C               	bcf	_Dimmer^(0+256),2
 13917                           
 13918                           ;Dimmer_B1.c: 906: setDimmerLights_Line(0);
 13919  0FAE  3000               	movlw	0
 13920  0FAF  319C  2405  318F   	fcall	_setDimmerLights_Line
 13921                           
 13922                           ;Dimmer_B1.c: 910: if (getDelayOff_GO(lights) == 1) {
 13923  0FB2  0021               	movlb	1	; select bank1
 13924  0FB3  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13925  0FB4  319C  2416  318F   	fcall	_getDelayOff_GO
 13926  0FB7  3A01               	xorlw	1
 13927  0FB8  1D03               	skipz
 13928  0FB9  2FC2               	goto	l785
 13929                           
 13930                           ;Dimmer_B1.c: 911: setDelayOff_GO(lights, 0, 0);
 13931  0FBA  0020               	movlb	0	; select bank0
 13932  0FBB  01E5               	clrf	setDelayOff_GO@command
 13933  0FBC  01E6               	clrf	setDelayOff_GO@value
 13934  0FBD  0021               	movlb	1	; select bank1
 13935  0FBE  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13936  0FBF  318C  2499  318F   	fcall	_setDelayOff_GO
 13937  0FC2                     l785:	
 13938                           
 13939                           ;Dimmer_B1.c: 912: }
 13940                           ;Dimmer_B1.c: 917: setLED(lights, 1);
 13941  0FC2  0020               	movlb	0	; select bank0
 13942  0FC3  01A2               	clrf	setLED@command
 13943  0FC4  0AA2               	incf	setLED@command,f
 13944  0FC5  0021               	movlb	1	; select bank1
 13945  0FC6  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13946  0FC7  3192  22D5  318F   	fcall	_setLED
 13947                           
 13948                           ;Dimmer_B1.c: 918: ;;
 13949                           ;Dimmer_B1.c: 922: if (lights == 1) {
 13950  0FCA  0021               	movlb	1	; select bank1
 13951  0FCB  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13952  0FCC  3A01               	xorlw	1
 13953  0FCD  1D03               	skipz
 13954  0FCE  2FD1               	goto	l9564
 13955                           
 13956                           ;Dimmer_B1.c: 923: RB1 = 0;
 13957  0FCF  0020               	movlb	0	; select bank0
 13958  0FD0  108D               	bcf	13,1	;volatile
 13959  0FD1                     l9564:	
 13960                           
 13961                           ;Dimmer_B1.c: 925: }
 13962                           ;Dimmer_B1.c: 936: }
 13963                           ;Dimmer_B1.c: 939: setRF_DimmerLights(lights, command);
 13964  0FD1  0020               	movlb	0	; select bank0
 13965  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 13966  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 13967  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 13968  0FD5  00E5               	movwf	setRF_DimmerLights@on
 13969  0FD6  0021               	movlb	1	; select bank1
 13970  0FD7  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13971  0FD8  3197  279B  318F   	fcall	_setRF_DimmerLights
 13972                           
 13973                           ;Dimmer_B1.c: 941: if (getCmd_Status(1) == 1) {
 13974  0FDB  3001               	movlw	1
 13975  0FDC  319C  246B  318F   	fcall	_getCmd_Status
 13976  0FDF  3A01               	xorlw	1
 13977  0FE0  1D03               	skipz
 13978  0FE1  2FFD               	goto	l9578
 13979                           
 13980                           ;Dimmer_B1.c: 942: if (getMain_All_LightsStatus() == 0) {
 13981  0FE2  319A  22E5  318F   	fcall	_getMain_All_LightsStatus
 13982  0FE5  3800               	iorlw	0
 13983  0FE6  1D03               	skipz
 13984  0FE7  0008               	return
 13985                           
 13986                           ;Dimmer_B1.c: 943: setCmd_Status(1, 0);
 13987  0FE8  0020               	movlb	0	; select bank0
 13988  0FE9  01A0               	clrf	setCmd_Status@cmd
 13989  0FEA  3001               	movlw	1
 13990  0FEB  319D  25E8  318F   	fcall	_setCmd_Status
 13991                           
 13992                           ;Dimmer_B1.c: 944: setProductData(11, 0);
 13993  0FEE  0020               	movlb	0	; select bank0
 13994  0FEF  01E2               	clrf	setProductData@value
 13995  0FF0  300B               	movlw	11
 13996  0FF1  319B  233E  318F   	fcall	_setProductData
 13997                           
 13998                           ;Dimmer_B1.c: 945: setProductData(17, 0);
 13999  0FF4  0020               	movlb	0	; select bank0
 14000  0FF5  01E2               	clrf	setProductData@value
 14001  0FF6  3011               	movlw	17
 14002  0FF7  319B  233E  318F   	fcall	_setProductData
 14003                           
 14004                           ;Dimmer_B1.c: 946: setTxData();
 14005  0FFA  318E  2682         	fcall	_setTxData
 14006                           
 14007                           ;Dimmer_B1.c: 947: }
 14008                           ;Dimmer_B1.c: 948: } else {
 14009  0FFC  0008               	return
 14010  0FFD                     l9578:	
 14011                           
 14012                           ;Dimmer_B1.c: 949: setTxData();
 14013  0FFD  318E  2682         	fcall	_setTxData
 14014  0FFF  0008               	return
 14015  1000                     __end_of_setDimmerLights_OnOff:	
 14016                           
 14017                           	psect	text90
 14018  12D5                     __ptext90:	
 14019 ;; *************** function _setLED *****************
 14020 ;; Defined at:
 14021 ;;		line 81 in file "../src/LED_B1.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;  led             1    wreg     unsigned char 
 14024 ;;  command         1    2[BANK0 ] unsigned char 
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;  led             1    3[BANK0 ] unsigned char 
 14027 ;; Return value:  Size  Location     Type
 14028 ;;		None               void
 14029 ;; Registers used:
 14030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14031 ;; Tracked objects:
 14032 ;;		On entry : 0/0
 14033 ;;		On exit  : 0/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14036 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;Total ram usage:        2 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; Hardware stack levels required when called:    6
 14043 ;; This function calls:
 14044 ;;		_LedPointSelect
 14045 ;; This function is called by:
 14046 ;;		_setDimmerLights_OnOff
 14047 ;;		_setLED_Initialization
 14048 ;;		_Exception_Main
 14049 ;;		_setSw_Initialization
 14050 ;; This function uses a non-reentrant model
 14051 ;;
 14052                           
 14053                           
 14054                           ;psect for function _setLED
 14055  12D5                     _setLED:	
 14056                           
 14057                           ;incstack = 0
 14058                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14059                           ;setLED@led stored from wreg
 14060  12D5  0020               	movlb	0	; select bank0
 14061  12D6  00A3               	movwf	setLED@led
 14062                           
 14063                           ;LED_B1.c: 82: LedPointSelect(led);
 14064  12D7  0823               	movf	setLED@led,w
 14065  12D8  319B  2362  3192   	fcall	_LedPointSelect
 14066                           
 14067                           ;LED_B1.c: 83: if (command == 0) {
 14068  12DB  0020               	movlb	0	; select bank0
 14069  12DC  08A2               	movf	setLED@command,f
 14070  12DD  1D03               	skipz
 14071  12DE  2AE4               	goto	l9286
 14072                           
 14073                           ;LED_B1.c: 112: if (led == 99) {
 14074  12DF  0823               	movf	setLED@led,w
 14075  12E0  3A63               	xorlw	99
 14076  12E1  1D03               	skipz
 14077  12E2  2AE4               	goto	l9286
 14078                           
 14079                           ;LED_B1.c: 116: RB5 = 1;
 14080  12E3  168D               	bsf	13,5	;volatile
 14081  12E4                     l9286:	
 14082                           
 14083                           ;LED_B1.c: 118: }
 14084                           ;LED_B1.c: 120: }
 14085                           ;LED_B1.c: 121: if (command == 1) {
 14086  12E4  0822               	movf	setLED@command,w
 14087  12E5  3A01               	xorlw	1
 14088  12E6  1D03               	skipz
 14089  12E7  2AED               	goto	l9292
 14090                           
 14091                           ;LED_B1.c: 150: if (led == 99) {
 14092  12E8  0823               	movf	setLED@led,w
 14093  12E9  3A63               	xorlw	99
 14094  12EA  1D03               	skipz
 14095  12EB  2AED               	goto	l9292
 14096                           
 14097                           ;LED_B1.c: 154: RB5 = 0;
 14098  12EC  128D               	bcf	13,5	;volatile
 14099  12ED                     l9292:	
 14100                           
 14101                           ;LED_B1.c: 156: }
 14102                           ;LED_B1.c: 158: }
 14103                           ;LED_B1.c: 159: if (command == 10) {
 14104  12ED  0822               	movf	setLED@command,w
 14105  12EE  3A0A               	xorlw	10
 14106  12EF  1D03               	skipz
 14107  12F0  2B03               	goto	l9300
 14108                           
 14109                           ;LED_B1.c: 160: LED->GO = 0;
 14110  12F1  0021               	movlb	1	; select bank1
 14111  12F2  084F               	movf	_LED^(0+128),w
 14112  12F3  0086               	movwf	6
 14113  12F4  3001               	movlw	1	; select bank2/3
 14114  12F5  0087               	movwf	7
 14115  12F6  1081               	bcf	1,1
 14116                           
 14117                           ;LED_B1.c: 161: LED->Time = 0;
 14118  12F7  0A4F               	incf	_LED^(0+128),w
 14119  12F8  0086               	movwf	6
 14120  12F9  3001               	movlw	1	; select bank2/3
 14121  12FA  0087               	movwf	7
 14122  12FB  3000               	movlw	0
 14123  12FC  3FC0               	movwi [0]fsr1
 14124  12FD  3FC1               	movwi [1]fsr1
 14125                           
 14126                           ;LED_B1.c: 190: if (led == 99) {
 14127  12FE  0020               	movlb	0	; select bank0
 14128  12FF  0823               	movf	setLED@led,w
 14129  1300  3A63               	xorlw	99
 14130  1301  1903               	btfsc	3,2
 14131                           
 14132                           ;LED_B1.c: 194: RB5 = 1;
 14133  1302  168D               	bsf	13,5	;volatile
 14134  1303                     l9300:	
 14135                           
 14136                           ;LED_B1.c: 196: }
 14137                           ;LED_B1.c: 198: }
 14138                           ;LED_B1.c: 199: if (command == 11) {
 14139  1303  0822               	movf	setLED@command,w
 14140  1304  3A0B               	xorlw	11
 14141  1305  1D03               	skipz
 14142  1306  0008               	return
 14143                           
 14144                           ;LED_B1.c: 200: LED->GO = 1;
 14145  1307  0021               	movlb	1	; select bank1
 14146  1308  084F               	movf	_LED^(0+128),w
 14147  1309  0086               	movwf	6
 14148  130A  3001               	movlw	1	; select bank2/3
 14149  130B  0087               	movwf	7
 14150  130C  1481               	bsf	1,1
 14151  130D  0008               	return
 14152  130E                     __end_of_setLED:	
 14153                           
 14154                           	psect	text91
 14155  1B62                     __ptext91:	
 14156 ;; *************** function _LedPointSelect *****************
 14157 ;; Defined at:
 14158 ;;		line 7 in file "../src/LED_B1.c"
 14159 ;; Parameters:    Size  Location     Type
 14160 ;;  led             1    wreg     unsigned char 
 14161 ;; Auto vars:     Size  Location     Type
 14162 ;;  led             1    1[BANK0 ] unsigned char 
 14163 ;; Return value:  Size  Location     Type
 14164 ;;		None               void
 14165 ;; Registers used:
 14166 ;;		wreg
 14167 ;; Tracked objects:
 14168 ;;		On entry : 0/0
 14169 ;;		On exit  : 0/0
 14170 ;;		Unchanged: 0/0
 14171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;Total ram usage:        2 bytes
 14177 ;; Hardware stack levels used:    1
 14178 ;; Hardware stack levels required when called:    5
 14179 ;; This function calls:
 14180 ;;		Nothing
 14181 ;; This function is called by:
 14182 ;;		_setLED_Initialization
 14183 ;;		_setLED
 14184 ;;		_setLED_Main
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           
 14189                           ;psect for function _LedPointSelect
 14190  1B62                     _LedPointSelect:	
 14191                           
 14192                           ;incstack = 0
 14193                           ; Regs used in _LedPointSelect: [wreg]
 14194                           ;LedPointSelect@led stored from wreg
 14195  1B62  0020               	movlb	0	; select bank0
 14196  1B63  00A1               	movwf	LedPointSelect@led
 14197                           
 14198                           ;LED_B1.c: 24: if (led == 99) {
 14199  1B64  0821               	movf	LedPointSelect@led,w
 14200  1B65  3A63               	xorlw	99
 14201  1B66  1D03               	skipz
 14202  1B67  0008               	return
 14203                           
 14204                           ;LED_B1.c: 25: LED = &VarErrLED;
 14205  1B68  306B               	movlw	_VarErrLED& (0+255)
 14206  1B69  00A0               	movwf	??_LedPointSelect
 14207  1B6A  0820               	movf	??_LedPointSelect,w
 14208  1B6B  0021               	movlb	1	; select bank1
 14209  1B6C  00CF               	movwf	_LED^(0+128)
 14210  1B6D  0008               	return
 14211  1B6E                     __end_of_LedPointSelect:	
 14212                           
 14213                           	psect	text92
 14214  1DD0                     __ptext92:	
 14215 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14216 ;; Defined at:
 14217 ;;		line 228 in file "../src/Dimmer_B1.c"
 14218 ;; Parameters:    Size  Location     Type
 14219 ;;  lights          1    wreg     unsigned char 
 14220 ;;  command         1    0[BANK0 ] unsigned char 
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;  lights          1    2[BANK0 ] unsigned char 
 14223 ;; Return value:  Size  Location     Type
 14224 ;;		None               void
 14225 ;; Registers used:
 14226 ;;		wreg, status,2, status,0
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14232 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14236 ;;Total ram usage:        3 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:    5
 14239 ;; This function calls:
 14240 ;;		Nothing
 14241 ;; This function is called by:
 14242 ;;		_setDimmerLights_OnOff
 14243 ;;		_setRFSW_AdjControl
 14244 ;; This function uses a non-reentrant model
 14245 ;;
 14246                           
 14247                           
 14248                           ;psect for function _setDimmerIntr_Dimming_RF
 14249  1DD0                     _setDimmerIntr_Dimming_RF:	
 14250                           
 14251                           ;incstack = 0
 14252                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14253                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14254  1DD0  0020               	movlb	0	; select bank0
 14255  1DD1  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14256                           
 14257                           ;Dimmer_B1.c: 230: if (lights == 1) {
 14258  1DD2  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14259  1DD3  3A01               	xorlw	1
 14260  1DD4  1D03               	skipz
 14261  1DD5  0008               	return
 14262                           
 14263                           ;Dimmer_B1.c: 231: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14264  1DD6  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14265  1DD7  3A01               	xorlw	1
 14266  1DD8  3000               	movlw	0
 14267  1DD9  1903               	skipnz
 14268  1DDA  3001               	movlw	1
 14269  1DDB  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14270  1DDC  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14271  1DDD  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14272  1DDE  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14273  1DDF  0021               	movlb	1	; select bank1
 14274  1DE0  083C               	movf	_DimmerIntr1^(0+128),w
 14275  1DE1  0020               	movlb	0	; select bank0
 14276  1DE2  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14277  1DE3  39BF               	andlw	-65
 14278  1DE4  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14279  1DE5  0021               	movlb	1	; select bank1
 14280  1DE6  00BC               	movwf	_DimmerIntr1^(0+128)
 14281  1DE7  0008               	return
 14282  1DE8                     __end_of_setDimmerIntr_Dimming_RF:	
 14283                           
 14284                           	psect	text93
 14285  1B56                     __ptext93:	
 14286 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14287 ;; Defined at:
 14288 ;;		line 93 in file "../src/Dimmer_B1.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  lights          1    wreg     unsigned char 
 14291 ;;  value           1   66[BANK0 ] unsigned char 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  lights          1   68[BANK0 ] unsigned char 
 14294 ;; Return value:  Size  Location     Type
 14295 ;;		None               void
 14296 ;; Registers used:
 14297 ;;		wreg
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;Total ram usage:        3 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; Hardware stack levels required when called:    5
 14310 ;; This function calls:
 14311 ;;		Nothing
 14312 ;; This function is called by:
 14313 ;;		_setDimmerLights_OnOff
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           
 14318                           ;psect for function _setDimmerIntr_DimmingValue
 14319  1B56                     _setDimmerIntr_DimmingValue:	
 14320                           
 14321                           ;incstack = 0
 14322                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14323                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14324  1B56  0020               	movlb	0	; select bank0
 14325  1B57  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14326                           
 14327                           ;Dimmer_B1.c: 95: if (lights == 1) {
 14328  1B58  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14329  1B59  3A01               	xorlw	1
 14330  1B5A  1D03               	skipz
 14331  1B5B  0008               	return
 14332                           
 14333                           ;Dimmer_B1.c: 96: DimmerIntr1.DimmingValue = value;
 14334  1B5C  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14335  1B5D  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14336  1B5E  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14337  1B5F  0021               	movlb	1	; select bank1
 14338  1B60  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14339  1B61  0008               	return
 14340  1B62                     __end_of_setDimmerIntr_DimmingValue:	
 14341                           
 14342                           	psect	text94
 14343  1DB8                     __ptext94:	
 14344 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14345 ;; Defined at:
 14346 ;;		line 75 in file "../src/Dimmer_B1.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;  lights          1    wreg     unsigned char 
 14349 ;;  command         1    0[BANK0 ] unsigned char 
 14350 ;; Auto vars:     Size  Location     Type
 14351 ;;  lights          1    2[BANK0 ] unsigned char 
 14352 ;; Return value:  Size  Location     Type
 14353 ;;		None               void
 14354 ;; Registers used:
 14355 ;;		wreg, status,2, status,0
 14356 ;; Tracked objects:
 14357 ;;		On entry : 0/0
 14358 ;;		On exit  : 0/0
 14359 ;;		Unchanged: 0/0
 14360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14361 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14364 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14365 ;;Total ram usage:        3 bytes
 14366 ;; Hardware stack levels used:    1
 14367 ;; Hardware stack levels required when called:    5
 14368 ;; This function calls:
 14369 ;;		Nothing
 14370 ;; This function is called by:
 14371 ;;		_setDimmerLights_OnOff
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           
 14376                           ;psect for function _setDimmerIntr_ControlStatus
 14377  1DB8                     _setDimmerIntr_ControlStatus:	
 14378                           
 14379                           ;incstack = 0
 14380                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14381                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14382  1DB8  0020               	movlb	0	; select bank0
 14383  1DB9  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14384                           
 14385                           ;Dimmer_B1.c: 77: if (lights == 1) {
 14386  1DBA  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14387  1DBB  3A01               	xorlw	1
 14388  1DBC  1D03               	skipz
 14389  1DBD  0008               	return
 14390                           
 14391                           ;Dimmer_B1.c: 78: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14392  1DBE  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14393  1DBF  3A01               	xorlw	1
 14394  1DC0  3000               	movlw	0
 14395  1DC1  1903               	skipnz
 14396  1DC2  3001               	movlw	1
 14397  1DC3  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14398  1DC4  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14399  1DC5  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14400  1DC6  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14401  1DC7  0021               	movlb	1	; select bank1
 14402  1DC8  083C               	movf	_DimmerIntr1^(0+128),w
 14403  1DC9  0020               	movlb	0	; select bank0
 14404  1DCA  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14405  1DCB  39F7               	andlw	-9
 14406  1DCC  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14407  1DCD  0021               	movlb	1	; select bank1
 14408  1DCE  00BC               	movwf	_DimmerIntr1^(0+128)
 14409  1DCF  0008               	return
 14410  1DD0                     __end_of_setDimmerIntr_ControlStatus:	
 14411                           
 14412                           	psect	text95
 14413  0C99                     __ptext95:	
 14414 ;; *************** function _setDelayOff_GO *****************
 14415 ;; Defined at:
 14416 ;;		line 87 in file "../src/DelayOff_B1.c"
 14417 ;; Parameters:    Size  Location     Type
 14418 ;;  sw              1    wreg     unsigned char 
 14419 ;;  command         1   69[BANK0 ] unsigned char 
 14420 ;;  value           1   70[BANK0 ] unsigned char 
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;  sw              1   76[BANK0 ] unsigned char 
 14423 ;;  k               1   75[BANK0 ] unsigned char 
 14424 ;;  j               1   74[BANK0 ] unsigned char 
 14425 ;;  i               1   73[BANK0 ] unsigned char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;		None               void
 14428 ;; Registers used:
 14429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;Total ram usage:        8 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    6
 14442 ;; This function calls:
 14443 ;;		_DelayOffPointSelect
 14444 ;;		___bmul
 14445 ;;		_setProductData
 14446 ;; This function is called by:
 14447 ;;		_setDimmerLights_OnOff
 14448 ;;		_setRFSW_Control
 14449 ;; This function uses a non-reentrant model
 14450 ;;
 14451                           
 14452                           
 14453                           ;psect for function _setDelayOff_GO
 14454  0C99                     _setDelayOff_GO:	
 14455                           
 14456                           ;incstack = 0
 14457                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14458                           ;setDelayOff_GO@sw stored from wreg
 14459  0C99  0020               	movlb	0	; select bank0
 14460  0C9A  00EC               	movwf	setDelayOff_GO@sw
 14461                           
 14462                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14463  0C9B  086C               	movf	setDelayOff_GO@sw,w
 14464  0C9C  319B  2326  318C   	fcall	_DelayOffPointSelect
 14465                           
 14466                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14467  0C9F  0020               	movlb	0	; select bank0
 14468  0CA0  0865               	movf	setDelayOff_GO@command,w
 14469  0CA1  3A01               	xorlw	1
 14470  0CA2  3000               	movlw	0
 14471  0CA3  1903               	skipnz
 14472  0CA4  3001               	movlw	1
 14473  0CA5  00E7               	movwf	??_setDelayOff_GO
 14474  0CA6  0021               	movlb	1	; select bank1
 14475  0CA7  084C               	movf	_DelayOff^(0+128),w
 14476  0CA8  0086               	movwf	6
 14477  0CA9  3001               	movlw	1	; select bank2/3
 14478  0CAA  0087               	movwf	7
 14479  0CAB  0020               	movlb	0	; select bank0
 14480  0CAC  0DE7               	rlf	??_setDelayOff_GO,f
 14481  0CAD  0801               	movf	1,w
 14482  0CAE  0667               	xorwf	??_setDelayOff_GO,w
 14483  0CAF  39FD               	andlw	-3
 14484  0CB0  0667               	xorwf	??_setDelayOff_GO,w
 14485  0CB1  0081               	movwf	1
 14486                           
 14487                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14488  0CB2  0021               	movlb	1	; select bank1
 14489  0CB3  084C               	movf	_DelayOff^(0+128),w
 14490  0CB4  3E02               	addlw	2
 14491  0CB5  0086               	movwf	6
 14492  0CB6  3001               	movlw	1	; select bank2/3
 14493  0CB7  0087               	movwf	7
 14494  0CB8  3000               	movlw	0
 14495  0CB9  3FC0               	movwi [0]fsr1
 14496  0CBA  3FC1               	movwi [1]fsr1
 14497                           
 14498                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14499  0CBB  084C               	movf	_DelayOff^(0+128),w
 14500  0CBC  3E04               	addlw	4
 14501  0CBD  0086               	movwf	6
 14502  0CBE  3001               	movlw	1	; select bank2/3
 14503  0CBF  0087               	movwf	7
 14504  0CC0  0181               	clrf	1
 14505                           
 14506                           ;DelayOff_B1.c: 94: if (command == 1) {
 14507  0CC1  0020               	movlb	0	; select bank0
 14508  0CC2  0865               	movf	setDelayOff_GO@command,w
 14509  0CC3  3A01               	xorlw	1
 14510  0CC4  1D03               	skipz
 14511  0CC5  2D1B               	goto	l8874
 14512                           
 14513                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14514  0CC6  3005               	movlw	5
 14515  0CC7  00E7               	movwf	??_setDelayOff_GO
 14516  0CC8  0867               	movf	??_setDelayOff_GO,w
 14517  0CC9  00E9               	movwf	setDelayOff_GO@i
 14518  0CCA  01EA               	clrf	setDelayOff_GO@j
 14519  0CCB  01EB               	clrf	setDelayOff_GO@k
 14520                           
 14521                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14522  0CCC  300F               	movlw	15
 14523  0CCD  0566               	andwf	setDelayOff_GO@value,w
 14524  0CCE  00E7               	movwf	??_setDelayOff_GO
 14525  0CCF  0867               	movf	??_setDelayOff_GO,w
 14526  0CD0  3A05               	xorlw	5
 14527  0CD1  1903               	skipnz
 14528  0CD2  2CD7               	goto	l8860
 14529  0CD3  0866               	movf	setDelayOff_GO@value,w
 14530  0CD4  390F               	andlw	15
 14531  0CD5  1D03               	btfss	3,2
 14532  0CD6  2D07               	goto	l8870
 14533  0CD7                     l8860:	
 14534  0CD7  3031               	movlw	49
 14535  0CD8  0266               	subwf	setDelayOff_GO@value,w
 14536  0CD9  1803               	skipnc
 14537  0CDA  2D07               	goto	l8870
 14538                           
 14539                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14540  0CDB  0866               	movf	setDelayOff_GO@value,w
 14541  0CDC  390F               	andlw	15
 14542  0CDD  00E7               	movwf	??_setDelayOff_GO
 14543  0CDE  0867               	movf	??_setDelayOff_GO,w
 14544  0CDF  00EA               	movwf	setDelayOff_GO@j
 14545                           
 14546                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14547  0CE0  0866               	movf	setDelayOff_GO@value,w
 14548  0CE1  00E7               	movwf	??_setDelayOff_GO
 14549  0CE2  3004               	movlw	4
 14550  0CE3                     u9645:	
 14551  0CE3  36E7               	lsrf	??_setDelayOff_GO,f
 14552  0CE4  0B89               	decfsz	9,f
 14553  0CE5  2CE3               	goto	u9645
 14554  0CE6  0867               	movf	??_setDelayOff_GO,w
 14555  0CE7  390F               	andlw	15
 14556  0CE8  00E8               	movwf	??_setDelayOff_GO+1
 14557  0CE9  0868               	movf	??_setDelayOff_GO+1,w
 14558  0CEA  00EB               	movwf	setDelayOff_GO@k
 14559                           
 14560                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14561  0CEB  300A               	movlw	10
 14562  0CEC  00E7               	movwf	??_setDelayOff_GO
 14563  0CED  0867               	movf	??_setDelayOff_GO,w
 14564  0CEE  00A0               	movwf	___bmul@multiplicand
 14565  0CEF  086B               	movf	setDelayOff_GO@k,w
 14566  0CF0  319C  247D  318C   	fcall	___bmul
 14567  0CF3  0020               	movlb	0	; select bank0
 14568  0CF4  076A               	addwf	setDelayOff_GO@j,w
 14569  0CF5  00E8               	movwf	??_setDelayOff_GO+1
 14570  0CF6  0021               	movlb	1	; select bank1
 14571  0CF7  0A4C               	incf	_DelayOff^(0+128),w
 14572  0CF8  0086               	movwf	6
 14573  0CF9  3001               	movlw	1	; select bank2/3
 14574  0CFA  0087               	movwf	7
 14575  0CFB  0020               	movlb	0	; select bank0
 14576  0CFC  0868               	movf	??_setDelayOff_GO+1,w
 14577  0CFD  0081               	movwf	1
 14578                           
 14579                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14580  0CFE  0866               	movf	setDelayOff_GO@value,w
 14581  0CFF  00E7               	movwf	??_setDelayOff_GO
 14582  0D00  0867               	movf	??_setDelayOff_GO,w
 14583  0D01  00E2               	movwf	setProductData@value
 14584  0D02  086C               	movf	setDelayOff_GO@sw,w
 14585  0D03  3E1A               	addlw	26
 14586  0D04  319B  233E         	fcall	_setProductData
 14587                           
 14588                           ;DelayOff_B1.c: 103: } else {
 14589  0D06  0008               	return
 14590  0D07                     l8870:	
 14591                           
 14592                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14593  0D07  3005               	movlw	5
 14594  0D08  0020               	movlb	0	; select bank0
 14595  0D09  00E7               	movwf	??_setDelayOff_GO
 14596  0D0A  0021               	movlb	1	; select bank1
 14597  0D0B  0A4C               	incf	_DelayOff^(0+128),w
 14598  0D0C  0086               	movwf	6
 14599  0D0D  3001               	movlw	1	; select bank2/3
 14600  0D0E  0087               	movwf	7
 14601  0D0F  0020               	movlb	0	; select bank0
 14602  0D10  0867               	movf	??_setDelayOff_GO,w
 14603  0D11  0081               	movwf	1
 14604                           
 14605                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14606  0D12  3005               	movlw	5
 14607  0D13  00E7               	movwf	??_setDelayOff_GO
 14608  0D14  0867               	movf	??_setDelayOff_GO,w
 14609  0D15  00E2               	movwf	setProductData@value
 14610  0D16  086C               	movf	setDelayOff_GO@sw,w
 14611  0D17  3E1A               	addlw	26
 14612  0D18  319B  233E         	fcall	_setProductData
 14613                           
 14614                           ;DelayOff_B1.c: 106: }
 14615                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14616  0D1A  0008               	return
 14617  0D1B                     l8874:	
 14618  0D1B  0020               	movlb	0	; select bank0
 14619  0D1C  08E5               	movf	setDelayOff_GO@command,f
 14620  0D1D  1D03               	skipz
 14621  0D1E  0008               	return
 14622                           
 14623                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14624  0D1F  01E2               	clrf	setProductData@value
 14625  0D20  086C               	movf	setDelayOff_GO@sw,w
 14626  0D21  3E1A               	addlw	26
 14627  0D22  319B  233E         	fcall	_setProductData
 14628  0D24  0008               	return
 14629  0D25                     __end_of_setDelayOff_GO:	
 14630                           
 14631                           	psect	text96
 14632  1C7D                     __ptext96:	
 14633 ;; *************** function ___bmul *****************
 14634 ;; Defined at:
 14635 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14636 ;; Parameters:    Size  Location     Type
 14637 ;;  multiplier      1    wreg     unsigned char 
 14638 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14639 ;; Auto vars:     Size  Location     Type
 14640 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14641 ;;  product         1    2[BANK0 ] unsigned char 
 14642 ;; Return value:  Size  Location     Type
 14643 ;;                  1    wreg      unsigned char 
 14644 ;; Registers used:
 14645 ;;		wreg, status,2, status,0
 14646 ;; Tracked objects:
 14647 ;;		On entry : 0/0
 14648 ;;		On exit  : 0/0
 14649 ;;		Unchanged: 0/0
 14650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14651 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14652 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;Total ram usage:        4 bytes
 14656 ;; Hardware stack levels used:    1
 14657 ;; Hardware stack levels required when called:    5
 14658 ;; This function calls:
 14659 ;;		Nothing
 14660 ;; This function is called by:
 14661 ;;		_setDelayOff_GO
 14662 ;;		_DelayTimejudge
 14663 ;; This function uses a non-reentrant model
 14664 ;;
 14665                           
 14666                           
 14667                           ;psect for function ___bmul
 14668  1C7D                     ___bmul:	
 14669                           
 14670                           ;incstack = 0
 14671                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14672                           ;___bmul@multiplier stored from wreg
 14673  1C7D  0020               	movlb	0	; select bank0
 14674  1C7E  00A3               	movwf	___bmul@multiplier
 14675  1C7F  01A2               	clrf	___bmul@product
 14676  1C80                     l8538:	
 14677  1C80  1C23               	btfss	___bmul@multiplier,0
 14678  1C81  2C86               	goto	l8542
 14679  1C82  0820               	movf	___bmul@multiplicand,w
 14680  1C83  00A1               	movwf	??___bmul
 14681  1C84  0821               	movf	??___bmul,w
 14682  1C85  07A2               	addwf	___bmul@product,f
 14683  1C86                     l8542:	
 14684  1C86  1003               	clrc
 14685  1C87  0DA0               	rlf	___bmul@multiplicand,f
 14686  1C88  1003               	clrc
 14687  1C89  0CA3               	rrf	___bmul@multiplier,f
 14688  1C8A  08A3               	movf	___bmul@multiplier,f
 14689  1C8B  1D03               	skipz
 14690  1C8C  2C80               	goto	l8538
 14691  1C8D  0822               	movf	___bmul@product,w
 14692  1C8E  0008               	return
 14693  1C8F                     __end_of___bmul:	
 14694                           
 14695                           	psect	text97
 14696  1DE8                     __ptext97:	
 14697 ;; *************** function _setCmd_Status *****************
 14698 ;; Defined at:
 14699 ;;		line 651 in file "../src/Main_B1.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;  number          1    wreg     unsigned char 
 14702 ;;  cmd             1    0[BANK0 ] unsigned char 
 14703 ;; Auto vars:     Size  Location     Type
 14704 ;;  number          1    2[BANK0 ] unsigned char 
 14705 ;; Return value:  Size  Location     Type
 14706 ;;		None               void
 14707 ;; Registers used:
 14708 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14709 ;; Tracked objects:
 14710 ;;		On entry : 0/0
 14711 ;;		On exit  : 0/0
 14712 ;;		Unchanged: 0/0
 14713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14714 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;Total ram usage:        3 bytes
 14719 ;; Hardware stack levels used:    1
 14720 ;; Hardware stack levels required when called:    5
 14721 ;; This function calls:
 14722 ;;		Nothing
 14723 ;; This function is called by:
 14724 ;;		_setDimmerLights_OnOff
 14725 ;;		_setControl_Lights_Table
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           
 14730                           ;psect for function _setCmd_Status
 14731  1DE8                     _setCmd_Status:	
 14732                           
 14733                           ;incstack = 0
 14734                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14735                           ;setCmd_Status@number stored from wreg
 14736  1DE8  0020               	movlb	0	; select bank0
 14737  1DE9  00A2               	movwf	setCmd_Status@number
 14738                           
 14739                           ;Main_B1.c: 652: switch (number) {
 14740  1DEA  2DFA               	goto	l9040
 14741  1DEB                     l9036:	
 14742                           ;Main_B1.c: 653: case 1:
 14743                           
 14744                           
 14745                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14746  1DEB  0820               	movf	setCmd_Status@cmd,w
 14747  1DEC  3A01               	xorlw	1
 14748  1DED  3000               	movlw	0
 14749  1DEE  1903               	skipnz
 14750  1DEF  3001               	movlw	1
 14751  1DF0  00A1               	movwf	??_setCmd_Status
 14752  1DF1  0021               	movlb	1	; select bank1
 14753  1DF2  084B               	movf	_Cmd^(0+128),w
 14754  1DF3  0020               	movlb	0	; select bank0
 14755  1DF4  0621               	xorwf	??_setCmd_Status,w
 14756  1DF5  39FE               	andlw	-2
 14757  1DF6  0621               	xorwf	??_setCmd_Status,w
 14758  1DF7  0021               	movlb	1	; select bank1
 14759  1DF8  00CB               	movwf	_Cmd^(0+128)
 14760                           
 14761                           ;Main_B1.c: 656: }
 14762                           
 14763                           ;Main_B1.c: 655: break;
 14764  1DF9  0008               	return
 14765  1DFA                     l9040:	
 14766  1DFA  0020               	movlb	0	; select bank0
 14767  1DFB  0822               	movf	setCmd_Status@number,w
 14768                           
 14769                           ; Switch size 1, requested type "space"
 14770                           ; Number of cases is 1, Range of values is 1 to 1
 14771                           ; switch strategies available:
 14772                           ; Name         Instructions Cycles
 14773                           ; simple_byte            4     3 (average)
 14774                           ; direct_byte           11     9 (fixed)
 14775                           ; jumptable            263     9 (fixed)
 14776                           ;	Chosen strategy is simple_byte
 14777  1DFC  3A01               	xorlw	1	; case 1
 14778  1DFD  1903               	skipnz
 14779  1DFE  2DEB               	goto	l9036
 14780  1DFF  2E00               	goto	l1511
 14781  1E00                     l1511:	
 14782  1E00  0008               	return
 14783  1E01                     __end_of_setCmd_Status:	
 14784                           
 14785                           	psect	text98
 14786  1AE5                     __ptext98:	
 14787 ;; *************** function _getMain_All_LightsStatus *****************
 14788 ;; Defined at:
 14789 ;;		line 373 in file "../src/Main_B1.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;		None
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;  status          1    0[BANK0 ] unsigned char 
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  1    wreg      unsigned char 
 14796 ;; Registers used:
 14797 ;;		wreg, status,2
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;Total ram usage:        1 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    5
 14810 ;; This function calls:
 14811 ;;		Nothing
 14812 ;; This function is called by:
 14813 ;;		_DimmerLights_Main
 14814 ;;		_setDimmerLights_Main
 14815 ;;		_setDimmerLights_OnOff
 14816 ;;		_Flash_Memory_Main
 14817 ;;		_Exception_Main
 14818 ;;		_Load_Main
 14819 ;;		_setTemp_Main
 14820 ;;		_setControl_Lights_Table
 14821 ;; This function uses a non-reentrant model
 14822 ;;
 14823                           
 14824                           
 14825                           ;psect for function _getMain_All_LightsStatus
 14826  1AE5                     _getMain_All_LightsStatus:	
 14827                           
 14828                           ;Main_B1.c: 374: char status = 0;
 14829                           
 14830                           ;incstack = 0
 14831                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14832  1AE5  0020               	movlb	0	; select bank0
 14833  1AE6  01A0               	clrf	getMain_All_LightsStatus@status
 14834                           
 14835                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14836  1AE7  3000               	movlw	0
 14837  1AE8  0022               	movlb	2	; select bank2
 14838  1AE9  185F               	btfsc	(_DimmerLights1^(0+256)+1),0
 14839  1AEA  3001               	movlw	1
 14840  1AEB  0020               	movlb	0	; select bank0
 14841  1AEC  00A0               	movwf	getMain_All_LightsStatus@status
 14842                           
 14843                           ;Main_B1.c: 420: return status;
 14844  1AED  0820               	movf	getMain_All_LightsStatus@status,w
 14845  1AEE  0008               	return
 14846  1AEF                     __end_of_getMain_All_LightsStatus:	
 14847                           
 14848                           	psect	text99
 14849  1C16                     __ptext99:	
 14850 ;; *************** function _getDelayOff_GO *****************
 14851 ;; Defined at:
 14852 ;;		line 114 in file "../src/DelayOff_B1.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;  sw              1    wreg     unsigned char 
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;  sw              1    2[BANK0 ] unsigned char 
 14857 ;;  go              1    3[BANK0 ] unsigned char 
 14858 ;; Return value:  Size  Location     Type
 14859 ;;                  1    wreg      unsigned char 
 14860 ;; Registers used:
 14861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;Total ram usage:        2 bytes
 14872 ;; Hardware stack levels used:    1
 14873 ;; Hardware stack levels required when called:    6
 14874 ;; This function calls:
 14875 ;;		_DelayOffPointSelect
 14876 ;; This function is called by:
 14877 ;;		_setDimmerLights_OnOff
 14878 ;; This function uses a non-reentrant model
 14879 ;;
 14880                           
 14881                           
 14882                           ;psect for function _getDelayOff_GO
 14883  1C16                     _getDelayOff_GO:	
 14884                           
 14885                           ;incstack = 0
 14886                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14887                           ;getDelayOff_GO@sw stored from wreg
 14888  1C16  0020               	movlb	0	; select bank0
 14889  1C17  00A2               	movwf	getDelayOff_GO@sw
 14890                           
 14891                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14892  1C18  0822               	movf	getDelayOff_GO@sw,w
 14893  1C19  319B  2326         	fcall	_DelayOffPointSelect
 14894                           
 14895                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14896  1C1B  0021               	movlb	1	; select bank1
 14897  1C1C  084C               	movf	_DelayOff^(0+128),w
 14898  1C1D  0086               	movwf	6
 14899  1C1E  3001               	movlw	1	; select bank2/3
 14900  1C1F  0087               	movwf	7
 14901  1C20  3000               	movlw	0
 14902  1C21  1881               	btfsc	1,1
 14903  1C22  3001               	movlw	1
 14904  1C23  0020               	movlb	0	; select bank0
 14905  1C24  00A3               	movwf	getDelayOff_GO@go
 14906                           
 14907                           ;DelayOff_B1.c: 117: return go;
 14908  1C25  0823               	movf	getDelayOff_GO@go,w
 14909  1C26  0008               	return
 14910  1C27                     __end_of_getDelayOff_GO:	
 14911                           
 14912                           	psect	text100
 14913  1C6B                     __ptext100:	
 14914 ;; *************** function _getCmd_Status *****************
 14915 ;; Defined at:
 14916 ;;		line 659 in file "../src/Main_B1.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;  number          1    wreg     unsigned char 
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;  number          1    0[BANK0 ] unsigned char 
 14921 ;;  cmd             1    1[BANK0 ] unsigned char 
 14922 ;; Return value:  Size  Location     Type
 14923 ;;                  1    wreg      unsigned char 
 14924 ;; Registers used:
 14925 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;Total ram usage:        2 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; Hardware stack levels required when called:    5
 14938 ;; This function calls:
 14939 ;;		Nothing
 14940 ;; This function is called by:
 14941 ;;		_setDimmerLights_OnOff
 14942 ;; This function uses a non-reentrant model
 14943 ;;
 14944                           
 14945                           
 14946                           ;psect for function _getCmd_Status
 14947  1C6B                     _getCmd_Status:	
 14948                           
 14949                           ;incstack = 0
 14950                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14951                           ;getCmd_Status@number stored from wreg
 14952  1C6B  0020               	movlb	0	; select bank0
 14953  1C6C  00A0               	movwf	getCmd_Status@number
 14954                           
 14955                           ;Main_B1.c: 660: char cmd = 0;
 14956  1C6D  01A1               	clrf	getCmd_Status@cmd
 14957                           
 14958                           ;Main_B1.c: 661: switch (number) {
 14959  1C6E  2C76               	goto	l9310
 14960  1C6F                     l9306:	
 14961                           ;Main_B1.c: 662: case 1:
 14962                           
 14963                           
 14964                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14965  1C6F  3000               	movlw	0
 14966  1C70  0021               	movlb	1	; select bank1
 14967  1C71  184B               	btfsc	_Cmd^(0+128),0
 14968  1C72  3001               	movlw	1
 14969  1C73  0020               	movlb	0	; select bank0
 14970  1C74  00A1               	movwf	getCmd_Status@cmd
 14971                           
 14972                           ;Main_B1.c: 665: }
 14973                           
 14974                           ;Main_B1.c: 664: break;
 14975  1C75  2C7B               	goto	l9312
 14976  1C76                     l9310:	
 14977  1C76  0820               	movf	getCmd_Status@number,w
 14978                           
 14979                           ; Switch size 1, requested type "space"
 14980                           ; Number of cases is 1, Range of values is 1 to 1
 14981                           ; switch strategies available:
 14982                           ; Name         Instructions Cycles
 14983                           ; simple_byte            4     3 (average)
 14984                           ; direct_byte           11     9 (fixed)
 14985                           ; jumptable            263     9 (fixed)
 14986                           ;	Chosen strategy is simple_byte
 14987  1C77  3A01               	xorlw	1	; case 1
 14988  1C78  1903               	skipnz
 14989  1C79  2C6F               	goto	l9306
 14990  1C7A  2C7B               	goto	l9312
 14991  1C7B                     l9312:	
 14992                           
 14993                           ;Main_B1.c: 666: return cmd;
 14994  1C7B  0821               	movf	getCmd_Status@cmd,w
 14995  1C7C  0008               	return
 14996  1C7D                     __end_of_getCmd_Status:	
 14997                           
 14998                           	psect	text101
 14999  14A5                     __ptext101:	
 15000 ;; *************** function _setDimmerLights_Dimming *****************
 15001 ;; Defined at:
 15002 ;;		line 955 in file "../src/Dimmer_B1.c"
 15003 ;; Parameters:    Size  Location     Type
 15004 ;;  lights          1    wreg     unsigned char 
 15005 ;;  status          1   74[BANK0 ] unsigned char 
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;  lights          1   77[BANK0 ] unsigned char 
 15008 ;;  value           1   76[BANK0 ] unsigned char 
 15009 ;; Return value:  Size  Location     Type
 15010 ;;		None               void
 15011 ;; Registers used:
 15012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15013 ;; Tracked objects:
 15014 ;;		On entry : 0/0
 15015 ;;		On exit  : 0/0
 15016 ;;		Unchanged: 0/0
 15017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15018 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;Total ram usage:        4 bytes
 15023 ;; Hardware stack levels used:    1
 15024 ;; Hardware stack levels required when called:    8
 15025 ;; This function calls:
 15026 ;;		_getDimmerIntr_DimmingValue
 15027 ;;		_getDimmerLights_ValueToPercent
 15028 ;;		_setBuz
 15029 ;;		_setDimmerIntr_Dimming_Sw
 15030 ;;		_setDimmerIntr_MaxmumValue
 15031 ;;		_setDimmerLights_Line
 15032 ;;		_setMemory_Modify
 15033 ;;		_setProductData
 15034 ;;		_setRF_DimmerLights
 15035 ;;		_setRF_TransceiveGO
 15036 ;;		_setTxData
 15037 ;; This function is called by:
 15038 ;;		_setDimmerLights_Main
 15039 ;; This function uses a non-reentrant model
 15040 ;;
 15041                           
 15042                           
 15043                           ;psect for function _setDimmerLights_Dimming
 15044  14A5                     _setDimmerLights_Dimming:	
 15045                           
 15046                           ;incstack = 0
 15047                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15048                           ;setDimmerLights_Dimming@lights stored from wreg
 15049  14A5  0020               	movlb	0	; select bank0
 15050  14A6  00ED               	movwf	setDimmerLights_Dimming@lights
 15051                           
 15052                           ;Dimmer_B1.c: 956: if (status == 1) {
 15053  14A7  086A               	movf	setDimmerLights_Dimming@status,w
 15054  14A8  3A01               	xorlw	1
 15055  14A9  1D03               	skipz
 15056  14AA  2CBE               	goto	l9584
 15057                           
 15058                           ;Dimmer_B1.c: 957: setDimmerIntr_Dimming_Sw(lights, 1);
 15059  14AB  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15060  14AC  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15061  14AD  086D               	movf	setDimmerLights_Dimming@lights,w
 15062  14AE  319D  25A2  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15063                           
 15064                           ;Dimmer_B1.c: 960: setRF_TransceiveGO(0);
 15065  14B1  3000               	movlw	0
 15066  14B2  319C  24D8  3194   	fcall	_setRF_TransceiveGO
 15067                           
 15068                           ;Dimmer_B1.c: 962: setBuz(1, 100);
 15069  14B5  3064               	movlw	100
 15070  14B6  0020               	movlb	0	; select bank0
 15071  14B7  00A9               	movwf	setBuz@time
 15072  14B8  3000               	movlw	0
 15073  14B9  00AA               	movwf	setBuz@time+1
 15074  14BA  3001               	movlw	1
 15075  14BB  3194  24FB         	fcall	_setBuz
 15076                           
 15077                           ;Dimmer_B1.c: 963: } else if (status == 0) {
 15078  14BD  0008               	return
 15079  14BE                     l9584:	
 15080  14BE  0020               	movlb	0	; select bank0
 15081  14BF  08EA               	movf	setDimmerLights_Dimming@status,f
 15082  14C0  1D03               	skipz
 15083  14C1  0008               	return
 15084                           
 15085                           ;Dimmer_B1.c: 964: setDimmerIntr_Dimming_Sw(lights, 0);
 15086  14C2  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15087  14C3  086D               	movf	setDimmerLights_Dimming@lights,w
 15088  14C4  319D  25A2  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15089                           
 15090                           ;Dimmer_B1.c: 967: Dimmer.Load_Status = 0;
 15091  14C7  0022               	movlb	2	; select bank2
 15092  14C8  112C               	bcf	_Dimmer^(0+256),2
 15093                           
 15094                           ;Dimmer_B1.c: 968: setDimmerLights_Line(lights);
 15095  14C9  0020               	movlb	0	; select bank0
 15096  14CA  086D               	movf	setDimmerLights_Dimming@lights,w
 15097  14CB  319C  2405  3194   	fcall	_setDimmerLights_Line
 15098                           
 15099                           ;Dimmer_B1.c: 970: char value = getDimmerIntr_DimmingValue(lights);
 15100  14CE  0020               	movlb	0	; select bank0
 15101  14CF  086D               	movf	setDimmerLights_Dimming@lights,w
 15102  14D0  319B  23C6  3194   	fcall	_getDimmerIntr_DimmingValue
 15103  14D3  0020               	movlb	0	; select bank0
 15104  14D4  00EB               	movwf	??_setDimmerLights_Dimming
 15105  14D5  086B               	movf	??_setDimmerLights_Dimming,w
 15106  14D6  00EC               	movwf	setDimmerLights_Dimming@value
 15107                           
 15108                           ;Dimmer_B1.c: 971: setDimmerIntr_MaxmumValue(lights, value);
 15109  14D7  086C               	movf	setDimmerLights_Dimming@value,w
 15110  14D8  00EB               	movwf	??_setDimmerLights_Dimming
 15111  14D9  086B               	movf	??_setDimmerLights_Dimming,w
 15112  14DA  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15113  14DB  086D               	movf	setDimmerLights_Dimming@lights,w
 15114  14DC  319B  234A  3194   	fcall	_setDimmerIntr_MaxmumValue
 15115                           
 15116                           ;Dimmer_B1.c: 972: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15117  14DF  0020               	movlb	0	; select bank0
 15118  14E0  086C               	movf	setDimmerLights_Dimming@value,w
 15119  14E1  3197  2736  3194   	fcall	_getDimmerLights_ValueToPercent
 15120  14E4  0020               	movlb	0	; select bank0
 15121  14E5  00EB               	movwf	??_setDimmerLights_Dimming
 15122  14E6  086B               	movf	??_setDimmerLights_Dimming,w
 15123  14E7  00E2               	movwf	setProductData@value
 15124  14E8  086D               	movf	setDimmerLights_Dimming@lights,w
 15125  14E9  3E14               	addlw	20
 15126  14EA  319B  233E  3194   	fcall	_setProductData
 15127                           
 15128                           ;Dimmer_B1.c: 979: setMemory_Modify(1);
 15129  14ED  3001               	movlw	1
 15130  14EE  319C  24C5  3194   	fcall	_setMemory_Modify
 15131                           
 15132                           ;Dimmer_B1.c: 983: setRF_DimmerLights(lights, 1);
 15133  14F1  0020               	movlb	0	; select bank0
 15134  14F2  01E5               	clrf	setRF_DimmerLights@on
 15135  14F3  0AE5               	incf	setRF_DimmerLights@on,f
 15136  14F4  086D               	movf	setDimmerLights_Dimming@lights,w
 15137  14F5  3197  279B  3194   	fcall	_setRF_DimmerLights
 15138                           
 15139                           ;Dimmer_B1.c: 984: setTxData();
 15140  14F8  318E  2682         	fcall	_setTxData
 15141  14FA  0008               	return
 15142  14FB                     __end_of_setDimmerLights_Dimming:	
 15143                           
 15144                           	psect	text102
 15145  0E82                     __ptext102:	
 15146 ;; *************** function _setTxData *****************
 15147 ;; Defined at:
 15148 ;;		line 183 in file "../src/RF_Control_B1.c"
 15149 ;; Parameters:    Size  Location     Type
 15150 ;;		None
 15151 ;; Auto vars:     Size  Location     Type
 15152 ;;  i               1    0        unsigned char 
 15153 ;; Return value:  Size  Location     Type
 15154 ;;		None               void
 15155 ;; Registers used:
 15156 ;;		wreg, fsr1l, fsr1h, status,2
 15157 ;; Tracked objects:
 15158 ;;		On entry : 0/0
 15159 ;;		On exit  : 0/0
 15160 ;;		Unchanged: 0/0
 15161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;Total ram usage:        1 bytes
 15167 ;; Hardware stack levels used:    1
 15168 ;; Hardware stack levels required when called:    5
 15169 ;; This function calls:
 15170 ;;		Nothing
 15171 ;; This function is called by:
 15172 ;;		_setDimmerLights_OnOff
 15173 ;;		_setDimmerLights_Dimming
 15174 ;;		_my_MainTimer
 15175 ;;		_getRxData
 15176 ;;		_setControl_Lights_Table
 15177 ;;		_setRFSW_Control
 15178 ;;		_setRFSW_AdjControl
 15179 ;; This function uses a non-reentrant model
 15180 ;;
 15181                           
 15182                           
 15183                           ;psect for function _setTxData
 15184  0E82                     _setTxData:	
 15185                           
 15186                           ;RF_Control_B1.c: 184: char i;
 15187                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15188                           
 15189                           ;incstack = 0
 15190                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15191  0E82  0021               	movlb	1	; select bank1
 15192  0E83  1C20               	btfss	_RF1^(0+128),0
 15193  0E84  0008               	return
 15194                           
 15195                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15196  0E85  1520               	bsf	_RF1^(0+128),2
 15197                           
 15198                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15199  0E86  01A3               	clrf	(_RF1^(0+128)+3)
 15200  0E87  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15201                           
 15202                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15203  0E88  3063               	movlw	99
 15204  0E89  0020               	movlb	0	; select bank0
 15205  0E8A  00A0               	movwf	??_setTxData
 15206  0E8B  0820               	movf	??_setTxData,w
 15207  0E8C  0023               	movlb	3	; select bank3
 15208  0E8D  00A0               	movwf	_RF_Data^(0+384)
 15209                           
 15210                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15211  0E8E  3002               	movlw	2
 15212  0E8F  0020               	movlb	0	; select bank0
 15213  0E90  00A0               	movwf	??_setTxData
 15214  0E91  0820               	movf	??_setTxData,w
 15215  0E92  0023               	movlb	3	; select bank3
 15216  0E93  00A1               	movwf	(_RF_Data^(0+384)+1)
 15217                           
 15218                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15219  0E94  0021               	movlb	1	; select bank1
 15220  0E95  086C               	movf	_product^(0+128),w
 15221  0E96  0086               	movwf	6
 15222  0E97  3002               	movlw	2	; select bank4/5
 15223  0E98  0087               	movwf	7
 15224  0E99  3002               	movlw	2	; select bank4/5
 15225  0E9A  3F42               	moviw [2]fsr1
 15226  0E9B  0023               	movlb	3	; select bank3
 15227  0E9C  00A2               	movwf	(_RF_Data^(0+384)+2)
 15228                           
 15229                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15230  0E9D  0021               	movlb	1	; select bank1
 15231  0E9E  086C               	movf	_product^(0+128),w
 15232  0E9F  0086               	movwf	6
 15233  0EA0  3002               	movlw	2	; select bank4/5
 15234  0EA1  0087               	movwf	7
 15235  0EA2  3002               	movlw	2	; select bank4/5
 15236  0EA3  3F43               	moviw [3]fsr1
 15237  0EA4  0023               	movlb	3	; select bank3
 15238  0EA5  00A3               	movwf	(_RF_Data^(0+384)+3)
 15239                           
 15240                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15241  0EA6  0021               	movlb	1	; select bank1
 15242  0EA7  086C               	movf	_product^(0+128),w
 15243  0EA8  0086               	movwf	6
 15244  0EA9  3002               	movlw	2	; select bank4/5
 15245  0EAA  0087               	movwf	7
 15246  0EAB  3002               	movlw	2	; select bank4/5
 15247  0EAC  3F44               	moviw [4]fsr1
 15248  0EAD  0023               	movlb	3	; select bank3
 15249  0EAE  00A4               	movwf	(_RF_Data^(0+384)+4)
 15250                           
 15251                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15252  0EAF  0021               	movlb	1	; select bank1
 15253  0EB0  086C               	movf	_product^(0+128),w
 15254  0EB1  0086               	movwf	6
 15255  0EB2  3002               	movlw	2	; select bank4/5
 15256  0EB3  0087               	movwf	7
 15257  0EB4  3002               	movlw	2	; select bank4/5
 15258  0EB5  3F45               	moviw [5]fsr1
 15259  0EB6  0023               	movlb	3	; select bank3
 15260  0EB7  00A5               	movwf	(_RF_Data^(0+384)+5)
 15261                           
 15262                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15263  0EB8  0021               	movlb	1	; select bank1
 15264  0EB9  086C               	movf	_product^(0+128),w
 15265  0EBA  0086               	movwf	6
 15266  0EBB  3002               	movlw	2	; select bank4/5
 15267  0EBC  0087               	movwf	7
 15268  0EBD  3002               	movlw	2	; select bank4/5
 15269  0EBE  3F46               	moviw [6]fsr1
 15270  0EBF  0023               	movlb	3	; select bank3
 15271  0EC0  00A6               	movwf	(_RF_Data^(0+384)+6)
 15272                           
 15273                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15274  0EC1  0021               	movlb	1	; select bank1
 15275  0EC2  086C               	movf	_product^(0+128),w
 15276  0EC3  0086               	movwf	6
 15277  0EC4  3002               	movlw	2	; select bank4/5
 15278  0EC5  0087               	movwf	7
 15279  0EC6  3002               	movlw	2	; select bank4/5
 15280  0EC7  3F47               	moviw [7]fsr1
 15281  0EC8  0023               	movlb	3	; select bank3
 15282  0EC9  00A7               	movwf	(_RF_Data^(0+384)+7)
 15283                           
 15284                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15285  0ECA  0021               	movlb	1	; select bank1
 15286  0ECB  086C               	movf	_product^(0+128),w
 15287  0ECC  0086               	movwf	6
 15288  0ECD  3002               	movlw	2	; select bank4/5
 15289  0ECE  0087               	movwf	7
 15290  0ECF  3002               	movlw	2	; select bank4/5
 15291  0ED0  3F48               	moviw [8]fsr1
 15292  0ED1  0023               	movlb	3	; select bank3
 15293  0ED2  00A8               	movwf	(_RF_Data^(0+384)+8)
 15294                           
 15295                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15296  0ED3  0021               	movlb	1	; select bank1
 15297  0ED4  086C               	movf	_product^(0+128),w
 15298  0ED5  0086               	movwf	6
 15299  0ED6  3002               	movlw	2	; select bank4/5
 15300  0ED7  0087               	movwf	7
 15301  0ED8  3002               	movlw	2	; select bank4/5
 15302  0ED9  3F49               	moviw [9]fsr1
 15303  0EDA  0023               	movlb	3	; select bank3
 15304  0EDB  00A9               	movwf	(_RF_Data^(0+384)+9)
 15305                           
 15306                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15307  0EDC  0021               	movlb	1	; select bank1
 15308  0EDD  086C               	movf	_product^(0+128),w
 15309  0EDE  0086               	movwf	6
 15310  0EDF  3002               	movlw	2	; select bank4/5
 15311  0EE0  0087               	movwf	7
 15312  0EE1  3002               	movlw	2	; select bank4/5
 15313  0EE2  3F4A               	moviw [10]fsr1
 15314  0EE3  0023               	movlb	3	; select bank3
 15315  0EE4  00AA               	movwf	(_RF_Data^(0+384)+10)
 15316                           
 15317                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15318  0EE5  0021               	movlb	1	; select bank1
 15319  0EE6  086C               	movf	_product^(0+128),w
 15320  0EE7  0086               	movwf	6
 15321  0EE8  3002               	movlw	2	; select bank4/5
 15322  0EE9  0087               	movwf	7
 15323  0EEA  3002               	movlw	2	; select bank4/5
 15324  0EEB  3F4B               	moviw [11]fsr1
 15325  0EEC  0023               	movlb	3	; select bank3
 15326  0EED  00AB               	movwf	(_RF_Data^(0+384)+11)
 15327                           
 15328                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15329  0EEE  0021               	movlb	1	; select bank1
 15330  0EEF  086C               	movf	_product^(0+128),w
 15331  0EF0  0086               	movwf	6
 15332  0EF1  3002               	movlw	2	; select bank4/5
 15333  0EF2  0087               	movwf	7
 15334  0EF3  3002               	movlw	2	; select bank4/5
 15335  0EF4  3F4C               	moviw [12]fsr1
 15336  0EF5  0023               	movlb	3	; select bank3
 15337  0EF6  00AC               	movwf	(_RF_Data^(0+384)+12)
 15338                           
 15339                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15340  0EF7  0021               	movlb	1	; select bank1
 15341  0EF8  086C               	movf	_product^(0+128),w
 15342  0EF9  0086               	movwf	6
 15343  0EFA  3002               	movlw	2	; select bank4/5
 15344  0EFB  0087               	movwf	7
 15345  0EFC  3002               	movlw	2	; select bank4/5
 15346  0EFD  3F4D               	moviw [13]fsr1
 15347  0EFE  0023               	movlb	3	; select bank3
 15348  0EFF  00AD               	movwf	(_RF_Data^(0+384)+13)
 15349                           
 15350                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15351  0F00  0021               	movlb	1	; select bank1
 15352  0F01  086C               	movf	_product^(0+128),w
 15353  0F02  0086               	movwf	6
 15354  0F03  3002               	movlw	2	; select bank4/5
 15355  0F04  0087               	movwf	7
 15356  0F05  3002               	movlw	2	; select bank4/5
 15357  0F06  3F4E               	moviw [14]fsr1
 15358  0F07  0023               	movlb	3	; select bank3
 15359  0F08  00AE               	movwf	(_RF_Data^(0+384)+14)
 15360                           
 15361                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15362  0F09  0021               	movlb	1	; select bank1
 15363  0F0A  086C               	movf	_product^(0+128),w
 15364  0F0B  0086               	movwf	6
 15365  0F0C  3002               	movlw	2	; select bank4/5
 15366  0F0D  0087               	movwf	7
 15367  0F0E  3002               	movlw	2	; select bank4/5
 15368  0F0F  3F4F               	moviw [15]fsr1
 15369  0F10  0023               	movlb	3	; select bank3
 15370  0F11  00AF               	movwf	(_RF_Data^(0+384)+15)
 15371                           
 15372                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15373  0F12  0021               	movlb	1	; select bank1
 15374  0F13  086C               	movf	_product^(0+128),w
 15375  0F14  0086               	movwf	6
 15376  0F15  3002               	movlw	2	; select bank4/5
 15377  0F16  0087               	movwf	7
 15378  0F17  3002               	movlw	2	; select bank4/5
 15379  0F18  3F50               	moviw [16]fsr1
 15380  0F19  0023               	movlb	3	; select bank3
 15381  0F1A  00B0               	movwf	(_RF_Data^(0+384)+16)
 15382                           
 15383                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15384  0F1B  0021               	movlb	1	; select bank1
 15385  0F1C  086C               	movf	_product^(0+128),w
 15386  0F1D  0086               	movwf	6
 15387  0F1E  3002               	movlw	2	; select bank4/5
 15388  0F1F  0087               	movwf	7
 15389  0F20  3002               	movlw	2	; select bank4/5
 15390  0F21  3F51               	moviw [17]fsr1
 15391  0F22  0023               	movlb	3	; select bank3
 15392  0F23  00B1               	movwf	(_RF_Data^(0+384)+17)
 15393                           
 15394                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15395  0F24  0021               	movlb	1	; select bank1
 15396  0F25  086C               	movf	_product^(0+128),w
 15397  0F26  0086               	movwf	6
 15398  0F27  3002               	movlw	2	; select bank4/5
 15399  0F28  0087               	movwf	7
 15400  0F29  3002               	movlw	2	; select bank4/5
 15401  0F2A  3F52               	moviw [18]fsr1
 15402  0F2B  0023               	movlb	3	; select bank3
 15403  0F2C  00B2               	movwf	(_RF_Data^(0+384)+18)
 15404                           
 15405                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15406  0F2D  0021               	movlb	1	; select bank1
 15407  0F2E  086C               	movf	_product^(0+128),w
 15408  0F2F  0086               	movwf	6
 15409  0F30  3002               	movlw	2	; select bank4/5
 15410  0F31  0087               	movwf	7
 15411  0F32  3002               	movlw	2	; select bank4/5
 15412  0F33  3F53               	moviw [19]fsr1
 15413  0F34  0023               	movlb	3	; select bank3
 15414  0F35  00B3               	movwf	(_RF_Data^(0+384)+19)
 15415                           
 15416                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15417  0F36  30D1               	movlw	209
 15418  0F37  0020               	movlb	0	; select bank0
 15419  0F38  00A0               	movwf	??_setTxData
 15420  0F39  0820               	movf	??_setTxData,w
 15421  0F3A  0023               	movlb	3	; select bank3
 15422  0F3B  00B4               	movwf	(_RF_Data^(0+384)+20)
 15423  0F3C  0008               	return
 15424  0F3D                     __end_of_setTxData:	
 15425                           
 15426                           	psect	text103
 15427  1CD8                     __ptext103:	
 15428 ;; *************** function _setRF_TransceiveGO *****************
 15429 ;; Defined at:
 15430 ;;		line 505 in file "../src/RF_Control_B1.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;  command         1    wreg     unsigned char 
 15433 ;; Auto vars:     Size  Location     Type
 15434 ;;  command         1    1[BANK0 ] unsigned char 
 15435 ;; Return value:  Size  Location     Type
 15436 ;;		None               void
 15437 ;; Registers used:
 15438 ;;		wreg, status,2, status,0
 15439 ;; Tracked objects:
 15440 ;;		On entry : 0/0
 15441 ;;		On exit  : 0/0
 15442 ;;		Unchanged: 0/0
 15443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;Total ram usage:        2 bytes
 15449 ;; Hardware stack levels used:    1
 15450 ;; Hardware stack levels required when called:    5
 15451 ;; This function calls:
 15452 ;;		Nothing
 15453 ;; This function is called by:
 15454 ;;		_setDimmerLights_Dimming
 15455 ;; This function uses a non-reentrant model
 15456 ;;
 15457                           
 15458                           
 15459                           ;psect for function _setRF_TransceiveGO
 15460  1CD8                     _setRF_TransceiveGO:	
 15461                           
 15462                           ;incstack = 0
 15463                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15464                           ;setRF_TransceiveGO@command stored from wreg
 15465  1CD8  0020               	movlb	0	; select bank0
 15466  1CD9  00A1               	movwf	setRF_TransceiveGO@command
 15467                           
 15468                           ;RF_Control_B1.c: 506: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15469  1CDA  0821               	movf	setRF_TransceiveGO@command,w
 15470  1CDB  3A01               	xorlw	1
 15471  1CDC  3000               	movlw	0
 15472  1CDD  1903               	skipnz
 15473  1CDE  3001               	movlw	1
 15474  1CDF  00A0               	movwf	??_setRF_TransceiveGO
 15475  1CE0  0DA0               	rlf	??_setRF_TransceiveGO,f
 15476  1CE1  0DA0               	rlf	??_setRF_TransceiveGO,f
 15477  1CE2  0021               	movlb	1	; select bank1
 15478  1CE3  0820               	movf	_RF1^(0+128),w
 15479  1CE4  0020               	movlb	0	; select bank0
 15480  1CE5  0620               	xorwf	??_setRF_TransceiveGO,w
 15481  1CE6  39FB               	andlw	-5
 15482  1CE7  0620               	xorwf	??_setRF_TransceiveGO,w
 15483  1CE8  0021               	movlb	1	; select bank1
 15484  1CE9  00A0               	movwf	_RF1^(0+128)
 15485  1CEA  0008               	return
 15486  1CEB                     __end_of_setRF_TransceiveGO:	
 15487                           
 15488                           	psect	text104
 15489  179B                     __ptext104:	
 15490 ;; *************** function _setRF_DimmerLights *****************
 15491 ;; Defined at:
 15492 ;;		line 490 in file "../src/RF_Control_B1.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;  lights          1    wreg     unsigned char 
 15495 ;;  on              1   69[BANK0 ] unsigned char 
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;  lights          1   73[BANK0 ] unsigned char 
 15498 ;;  status          1   72[BANK0 ] unsigned char 
 15499 ;; Return value:  Size  Location     Type
 15500 ;;		None               void
 15501 ;; Registers used:
 15502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15503 ;; Tracked objects:
 15504 ;;		On entry : 0/0
 15505 ;;		On exit  : 0/0
 15506 ;;		Unchanged: 0/0
 15507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15508 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;Total ram usage:        5 bytes
 15513 ;; Hardware stack levels used:    1
 15514 ;; Hardware stack levels required when called:    6
 15515 ;; This function calls:
 15516 ;;		_setProductData
 15517 ;; This function is called by:
 15518 ;;		_setDimmerLights_OnOff
 15519 ;;		_setDimmerLights_Dimming
 15520 ;;		_setRFSW_Control
 15521 ;; This function uses a non-reentrant model
 15522 ;;
 15523                           
 15524                           
 15525                           ;psect for function _setRF_DimmerLights
 15526  179B                     _setRF_DimmerLights:	
 15527                           
 15528                           ;incstack = 0
 15529                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15530                           ;setRF_DimmerLights@lights stored from wreg
 15531  179B  0020               	movlb	0	; select bank0
 15532  179C  00E9               	movwf	setRF_DimmerLights@lights
 15533                           
 15534                           ;RF_Control_B1.c: 491: char status = 1;
 15535  179D  01E8               	clrf	setRF_DimmerLights@status
 15536  179E  0AE8               	incf	setRF_DimmerLights@status,f
 15537                           
 15538                           ;RF_Control_B1.c: 492: status <<= (lights - 1);
 15539  179F  0869               	movf	setRF_DimmerLights@lights,w
 15540  17A0  3EFF               	addlw	-1
 15541  17A1  0A89               	incf	9,f
 15542  17A2  2FA5               	goto	u9680
 15543  17A3                     u9685:	
 15544  17A3  1003               	clrc
 15545  17A4  0DE8               	rlf	setRF_DimmerLights@status,f
 15546  17A5                     u9680:	
 15547  17A5  3EFF               	addlw	-1
 15548  17A6  1D03               	skipz
 15549  17A7  2FA3               	goto	u9685
 15550                           
 15551                           ;RF_Control_B1.c: 493: setProductData(11, lights);
 15552  17A8  0869               	movf	setRF_DimmerLights@lights,w
 15553  17A9  00E6               	movwf	??_setRF_DimmerLights
 15554  17AA  0866               	movf	??_setRF_DimmerLights,w
 15555  17AB  00E2               	movwf	setProductData@value
 15556  17AC  300B               	movlw	11
 15557  17AD  319B  233E  3197   	fcall	_setProductData
 15558                           
 15559                           ;RF_Control_B1.c: 494: setProductData(17, product->Data[26 + lights]);
 15560  17B0  0020               	movlb	0	; select bank0
 15561  17B1  0869               	movf	setRF_DimmerLights@lights,w
 15562  17B2  3E1A               	addlw	26
 15563  17B3  0021               	movlb	1	; select bank1
 15564  17B4  076C               	addwf	_product^(0+128),w
 15565  17B5  0020               	movlb	0	; select bank0
 15566  17B6  00E6               	movwf	??_setRF_DimmerLights
 15567  17B7  0866               	movf	??_setRF_DimmerLights,w
 15568  17B8  0086               	movwf	6
 15569  17B9  3002               	movlw	2	; select bank4/5
 15570  17BA  0087               	movwf	7
 15571  17BB  0801               	movf	1,w
 15572  17BC  00E7               	movwf	??_setRF_DimmerLights+1
 15573  17BD  0867               	movf	??_setRF_DimmerLights+1,w
 15574  17BE  00E2               	movwf	setProductData@value
 15575  17BF  3011               	movlw	17
 15576  17C0  319B  233E  3197   	fcall	_setProductData
 15577                           
 15578                           ;RF_Control_B1.c: 495: if (on == 1) {
 15579  17C3  0020               	movlb	0	; select bank0
 15580  17C4  0865               	movf	setRF_DimmerLights@on,w
 15581  17C5  3A01               	xorlw	1
 15582  17C6  1D03               	skipz
 15583  17C7  2FEA               	goto	l8910
 15584                           
 15585                           ;RF_Control_B1.c: 496: setProductData(9, product->Data[20 + lights]);
 15586  17C8  0869               	movf	setRF_DimmerLights@lights,w
 15587  17C9  3E14               	addlw	20
 15588  17CA  0021               	movlb	1	; select bank1
 15589  17CB  076C               	addwf	_product^(0+128),w
 15590  17CC  0020               	movlb	0	; select bank0
 15591  17CD  00E6               	movwf	??_setRF_DimmerLights
 15592  17CE  0866               	movf	??_setRF_DimmerLights,w
 15593  17CF  0086               	movwf	6
 15594  17D0  3002               	movlw	2	; select bank4/5
 15595  17D1  0087               	movwf	7
 15596  17D2  0801               	movf	1,w
 15597  17D3  00E7               	movwf	??_setRF_DimmerLights+1
 15598  17D4  0867               	movf	??_setRF_DimmerLights+1,w
 15599  17D5  00E2               	movwf	setProductData@value
 15600  17D6  3009               	movlw	9
 15601  17D7  319B  233E  3197   	fcall	_setProductData
 15602                           
 15603                           ;RF_Control_B1.c: 497: setProductData(15, (product->Data[15] | status));
 15604  17DA  0021               	movlb	1	; select bank1
 15605  17DB  086C               	movf	_product^(0+128),w
 15606  17DC  3E0F               	addlw	15
 15607  17DD  0086               	movwf	6
 15608  17DE  3002               	movlw	2	; select bank4/5
 15609  17DF  0087               	movwf	7
 15610  17E0  0801               	movf	1,w
 15611  17E1  0020               	movlb	0	; select bank0
 15612  17E2  0468               	iorwf	setRF_DimmerLights@status,w
 15613  17E3  00E6               	movwf	??_setRF_DimmerLights
 15614  17E4  0866               	movf	??_setRF_DimmerLights,w
 15615  17E5  00E2               	movwf	setProductData@value
 15616  17E6  300F               	movlw	15
 15617  17E7  319B  233E         	fcall	_setProductData
 15618                           
 15619                           ;RF_Control_B1.c: 498: } else {
 15620  17E9  0008               	return
 15621  17EA                     l8910:	
 15622                           
 15623                           ;RF_Control_B1.c: 499: setProductData(9, 0x00);
 15624  17EA  0020               	movlb	0	; select bank0
 15625  17EB  01E2               	clrf	setProductData@value
 15626  17EC  3009               	movlw	9
 15627  17ED  319B  233E  3197   	fcall	_setProductData
 15628                           
 15629                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 15630  17F0  0021               	movlb	1	; select bank1
 15631  17F1  086C               	movf	_product^(0+128),w
 15632  17F2  3E0F               	addlw	15
 15633  17F3  0086               	movwf	6
 15634  17F4  3002               	movlw	2	; select bank4/5
 15635  17F5  0087               	movwf	7
 15636  17F6  0020               	movlb	0	; select bank0
 15637  17F7  0968               	comf	setRF_DimmerLights@status,w
 15638  17F8  0501               	andwf	1,w
 15639  17F9  00E6               	movwf	??_setRF_DimmerLights
 15640  17FA  0866               	movf	??_setRF_DimmerLights,w
 15641  17FB  00E2               	movwf	setProductData@value
 15642  17FC  300F               	movlw	15
 15643  17FD  319B  233E         	fcall	_setProductData
 15644  17FF  0008               	return
 15645  1800                     __end_of_setRF_DimmerLights:	
 15646                           
 15647                           	psect	text105
 15648  1C05                     __ptext105:	
 15649 ;; *************** function _setDimmerLights_Line *****************
 15650 ;; Defined at:
 15651 ;;		line 1029 in file "../src/Dimmer_B1.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  lights          1    wreg     unsigned char 
 15654 ;; Auto vars:     Size  Location     Type
 15655 ;;  lights          1    0[BANK0 ] unsigned char 
 15656 ;; Return value:  Size  Location     Type
 15657 ;;		None               void
 15658 ;; Registers used:
 15659 ;;		wreg
 15660 ;; Tracked objects:
 15661 ;;		On entry : 0/0
 15662 ;;		On exit  : 0/0
 15663 ;;		Unchanged: 0/0
 15664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15668 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15669 ;;Total ram usage:        1 bytes
 15670 ;; Hardware stack levels used:    1
 15671 ;; Hardware stack levels required when called:    5
 15672 ;; This function calls:
 15673 ;;		Nothing
 15674 ;; This function is called by:
 15675 ;;		_setDimmerLights_OnOff
 15676 ;;		_setDimmerLights_Dimming
 15677 ;; This function uses a non-reentrant model
 15678 ;;
 15679                           
 15680                           
 15681                           ;psect for function _setDimmerLights_Line
 15682  1C05                     _setDimmerLights_Line:	
 15683                           
 15684                           ;incstack = 0
 15685                           ; Regs used in _setDimmerLights_Line: [wreg]
 15686                           ;setDimmerLights_Line@lights stored from wreg
 15687  1C05  0020               	movlb	0	; select bank0
 15688  1C06  00A0               	movwf	setDimmerLights_Line@lights
 15689                           
 15690                           ;Dimmer_B1.c: 1030: Dimmer.LoadGO = 1;
 15691  1C07  0022               	movlb	2	; select bank2
 15692  1C08  14AC               	bsf	_Dimmer^(0+256),1
 15693                           
 15694                           ;Dimmer_B1.c: 1032: DimmerLights1.Line = 0;
 15695  1C09  10DF               	bcf	(_DimmerLights1^(0+256)+1),1
 15696                           
 15697                           ;Dimmer_B1.c: 1033: if (lights == 1 && lights != 0) {
 15698  1C0A  0020               	movlb	0	; select bank0
 15699  1C0B  0820               	movf	setDimmerLights_Line@lights,w
 15700  1C0C  3A01               	xorlw	1
 15701  1C0D  1D03               	skipz
 15702  1C0E  0008               	return
 15703  1C0F  0820               	movf	setDimmerLights_Line@lights,w
 15704  1C10  1903               	btfsc	3,2
 15705  1C11  0008               	return
 15706                           
 15707                           ;Dimmer_B1.c: 1034: DimmerLights1.Line = 1;
 15708  1C12  0022               	movlb	2	; select bank2
 15709  1C13  14DF               	bsf	(_DimmerLights1^(0+256)+1),1
 15710  1C14  0020               	movlb	0	; select bank0
 15711  1C15  0008               	return
 15712  1C16                     __end_of_setDimmerLights_Line:	
 15713                           
 15714                           	psect	text106
 15715  1B4A                     __ptext106:	
 15716 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15717 ;; Defined at:
 15718 ;;		line 133 in file "../src/Dimmer_B1.c"
 15719 ;; Parameters:    Size  Location     Type
 15720 ;;  lights          1    wreg     unsigned char 
 15721 ;;  value           1   66[BANK0 ] unsigned char 
 15722 ;; Auto vars:     Size  Location     Type
 15723 ;;  lights          1   68[BANK0 ] unsigned char 
 15724 ;; Return value:  Size  Location     Type
 15725 ;;		None               void
 15726 ;; Registers used:
 15727 ;;		wreg
 15728 ;; Tracked objects:
 15729 ;;		On entry : 0/0
 15730 ;;		On exit  : 0/0
 15731 ;;		Unchanged: 0/0
 15732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15733 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15737 ;;Total ram usage:        3 bytes
 15738 ;; Hardware stack levels used:    1
 15739 ;; Hardware stack levels required when called:    5
 15740 ;; This function calls:
 15741 ;;		Nothing
 15742 ;; This function is called by:
 15743 ;;		_setDimmerLights_OnOff
 15744 ;;		_setDimmerLights_Dimming
 15745 ;;		_setRFSW_AdjControl
 15746 ;; This function uses a non-reentrant model
 15747 ;;
 15748                           
 15749                           
 15750                           ;psect for function _setDimmerIntr_MaxmumValue
 15751  1B4A                     _setDimmerIntr_MaxmumValue:	
 15752                           
 15753                           ;incstack = 0
 15754                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15755                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15756  1B4A  0020               	movlb	0	; select bank0
 15757  1B4B  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15758                           
 15759                           ;Dimmer_B1.c: 135: if (lights == 1) {
 15760  1B4C  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15761  1B4D  3A01               	xorlw	1
 15762  1B4E  1D03               	skipz
 15763  1B4F  0008               	return
 15764                           
 15765                           ;Dimmer_B1.c: 136: DimmerIntr1.MaxmumValue = value;
 15766  1B50  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15767  1B51  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15768  1B52  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15769  1B53  0021               	movlb	1	; select bank1
 15770  1B54  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 15771  1B55  0008               	return
 15772  1B56                     __end_of_setDimmerIntr_MaxmumValue:	
 15773                           
 15774                           	psect	text107
 15775  1DA2                     __ptext107:	
 15776 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15777 ;; Defined at:
 15778 ;;		line 210 in file "../src/Dimmer_B1.c"
 15779 ;; Parameters:    Size  Location     Type
 15780 ;;  lights          1    wreg     unsigned char 
 15781 ;;  command         1    0[BANK0 ] unsigned char 
 15782 ;; Auto vars:     Size  Location     Type
 15783 ;;  lights          1    2[BANK0 ] unsigned char 
 15784 ;; Return value:  Size  Location     Type
 15785 ;;		None               void
 15786 ;; Registers used:
 15787 ;;		wreg, status,2, status,0
 15788 ;; Tracked objects:
 15789 ;;		On entry : 0/0
 15790 ;;		On exit  : 0/0
 15791 ;;		Unchanged: 0/0
 15792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15793 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;Total ram usage:        3 bytes
 15798 ;; Hardware stack levels used:    1
 15799 ;; Hardware stack levels required when called:    5
 15800 ;; This function calls:
 15801 ;;		Nothing
 15802 ;; This function is called by:
 15803 ;;		_setDimmerLights_Dimming
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           
 15808                           ;psect for function _setDimmerIntr_Dimming_Sw
 15809  1DA2                     _setDimmerIntr_Dimming_Sw:	
 15810                           
 15811                           ;incstack = 0
 15812                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15813                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15814  1DA2  0020               	movlb	0	; select bank0
 15815  1DA3  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15816                           
 15817                           ;Dimmer_B1.c: 212: if (lights == 1) {
 15818  1DA4  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15819  1DA5  3A01               	xorlw	1
 15820  1DA6  1D03               	skipz
 15821  1DA7  0008               	return
 15822                           
 15823                           ;Dimmer_B1.c: 213: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15824  1DA8  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15825  1DA9  3A01               	xorlw	1
 15826  1DAA  3000               	movlw	0
 15827  1DAB  1903               	skipnz
 15828  1DAC  3001               	movlw	1
 15829  1DAD  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15830  1DAE  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15831  1DAF  0021               	movlb	1	; select bank1
 15832  1DB0  083C               	movf	_DimmerIntr1^(0+128),w
 15833  1DB1  0020               	movlb	0	; select bank0
 15834  1DB2  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15835  1DB3  39EF               	andlw	-17
 15836  1DB4  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15837  1DB5  0021               	movlb	1	; select bank1
 15838  1DB6  00BC               	movwf	_DimmerIntr1^(0+128)
 15839  1DB7  0008               	return
 15840  1DB8                     __end_of_setDimmerIntr_Dimming_Sw:	
 15841                           
 15842                           	psect	text108
 15843  1BC6                     __ptext108:	
 15844 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15845 ;; Defined at:
 15846 ;;		line 111 in file "../src/Dimmer_B1.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  lights          1    wreg     unsigned char 
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;  lights          1    1[BANK0 ] unsigned char 
 15851 ;;  value           1    2[BANK0 ] unsigned char 
 15852 ;; Return value:  Size  Location     Type
 15853 ;;                  1    wreg      unsigned char 
 15854 ;; Registers used:
 15855 ;;		wreg, status,2
 15856 ;; Tracked objects:
 15857 ;;		On entry : 0/0
 15858 ;;		On exit  : 0/0
 15859 ;;		Unchanged: 0/0
 15860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;Total ram usage:        3 bytes
 15866 ;; Hardware stack levels used:    1
 15867 ;; Hardware stack levels required when called:    5
 15868 ;; This function calls:
 15869 ;;		Nothing
 15870 ;; This function is called by:
 15871 ;;		_setDimmerLights_Dimming
 15872 ;; This function uses a non-reentrant model
 15873 ;;
 15874                           
 15875                           
 15876                           ;psect for function _getDimmerIntr_DimmingValue
 15877  1BC6                     _getDimmerIntr_DimmingValue:	
 15878                           
 15879                           ;incstack = 0
 15880                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15881                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15882  1BC6  0020               	movlb	0	; select bank0
 15883  1BC7  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 15884                           
 15885                           ;Dimmer_B1.c: 112: char value = 0;
 15886  1BC8  01A2               	clrf	getDimmerIntr_DimmingValue@value
 15887                           
 15888                           ;Dimmer_B1.c: 114: if (lights == 1) {
 15889  1BC9  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 15890  1BCA  3A01               	xorlw	1
 15891  1BCB  1D03               	skipz
 15892  1BCC  2BD3               	goto	l689
 15893                           
 15894                           ;Dimmer_B1.c: 115: value = DimmerIntr1.DimmingValue;
 15895  1BCD  0021               	movlb	1	; select bank1
 15896  1BCE  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 15897  1BCF  0020               	movlb	0	; select bank0
 15898  1BD0  00A0               	movwf	??_getDimmerIntr_DimmingValue
 15899  1BD1  0820               	movf	??_getDimmerIntr_DimmingValue,w
 15900  1BD2  00A2               	movwf	getDimmerIntr_DimmingValue@value
 15901  1BD3                     l689:	
 15902                           
 15903                           ;Dimmer_B1.c: 116: }
 15904                           ;Dimmer_B1.c: 128: return value;
 15905  1BD3  0822               	movf	getDimmerIntr_DimmingValue@value,w
 15906  1BD4  0008               	return
 15907  1BD5                     __end_of_getDimmerIntr_DimmingValue:	
 15908                           
 15909                           	psect	text109
 15910  1D8C                     __ptext109:	
 15911 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15912 ;; Defined at:
 15913 ;;		line 990 in file "../src/Dimmer_B1.c"
 15914 ;; Parameters:    Size  Location     Type
 15915 ;;  lights          1    wreg     unsigned char 
 15916 ;; Auto vars:     Size  Location     Type
 15917 ;;  lights          1    0[COMMON] unsigned char 
 15918 ;;  allow           1    2[BANK0 ] unsigned char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;                  1    wreg      unsigned char 
 15921 ;; Registers used:
 15922 ;;		wreg, status,2, pclath, cstack
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;Total ram usage:        3 bytes
 15933 ;; Hardware stack levels used:    1
 15934 ;; Hardware stack levels required when called:    6
 15935 ;; This function calls:
 15936 ;;		_getLoad_OK
 15937 ;; This function is called by:
 15938 ;;		_setDimmerLights_Main
 15939 ;; This function uses a non-reentrant model
 15940 ;;
 15941                           
 15942                           
 15943                           ;psect for function _getDimmerLights_Allow_Condition
 15944  1D8C                     _getDimmerLights_Allow_Condition:	
 15945                           
 15946                           ;Dimmer_B1.c: 991: char allow = 0;
 15947                           
 15948                           ;incstack = 0
 15949                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15950  1D8C  0020               	movlb	0	; select bank0
 15951  1D8D  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 15952                           
 15953                           ;Dimmer_B1.c: 997: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15954  1D8E  01A3               	clrf	_getDimmerLights_Allow_Condition$2285
 15955  1D8F  0AA3               	incf	_getDimmerLights_Allow_Condition$2285,f
 15956  1D90  319A  22BA  319D   	fcall	_getLoad_OK
 15957  1D93  3800               	iorlw	0
 15958  1D94  1D03               	skipz
 15959  1D95  2D9B               	goto	l9520
 15960  1D96  0022               	movlb	2	; select bank2
 15961  1D97  18AC               	btfsc	_Dimmer^(0+256),1
 15962  1D98  2D9B               	goto	l9520
 15963  1D99  0020               	movlb	0	; select bank0
 15964  1D9A  01A3               	clrf	_getDimmerLights_Allow_Condition$2285
 15965  1D9B                     l9520:	
 15966  1D9B  0020               	movlb	0	; select bank0
 15967  1D9C  0823               	movf	_getDimmerLights_Allow_Condition$2285,w
 15968  1D9D  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15969  1D9E  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15970  1D9F  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 15971                           
 15972                           ;Dimmer_B1.c: 1024: return allow;
 15973  1DA0  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 15974  1DA1  0008               	return
 15975  1DA2                     __end_of_getDimmerLights_Allow_Condition:	
 15976                           
 15977                           	psect	text110
 15978  1ABA                     __ptext110:	
 15979 ;; *************** function _getLoad_OK *****************
 15980 ;; Defined at:
 15981 ;;		line 274 in file "../src/OverLoad_B1.c"
 15982 ;; Parameters:    Size  Location     Type
 15983 ;;		None
 15984 ;; Auto vars:     Size  Location     Type
 15985 ;;  ok              1    0[BANK0 ] unsigned char 
 15986 ;; Return value:  Size  Location     Type
 15987 ;;                  1    wreg      unsigned char 
 15988 ;; Registers used:
 15989 ;;		wreg, status,2
 15990 ;; Tracked objects:
 15991 ;;		On entry : 0/0
 15992 ;;		On exit  : 0/0
 15993 ;;		Unchanged: 0/0
 15994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;Total ram usage:        1 bytes
 16000 ;; Hardware stack levels used:    1
 16001 ;; Hardware stack levels required when called:    5
 16002 ;; This function calls:
 16003 ;;		Nothing
 16004 ;; This function is called by:
 16005 ;;		_DimmerLights_Main
 16006 ;;		_getDimmerLights_Allow_Condition
 16007 ;; This function uses a non-reentrant model
 16008 ;;
 16009                           
 16010                           
 16011                           ;psect for function _getLoad_OK
 16012  1ABA                     _getLoad_OK:	
 16013                           
 16014                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16015                           
 16016                           ;incstack = 0
 16017                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16018  1ABA  3000               	movlw	0
 16019  1ABB  0022               	movlb	2	; select bank2
 16020  1ABC  1BB6               	btfsc	_Load^(0+256),7
 16021  1ABD  3001               	movlw	1
 16022  1ABE  0020               	movlb	0	; select bank0
 16023  1ABF  00A0               	movwf	getLoad_OK@ok
 16024                           
 16025                           ;OverLoad_B1.c: 276: return ok;
 16026  1AC0  0820               	movf	getLoad_OK@ok,w
 16027  1AC1  0008               	return
 16028  1AC2                     __end_of_getLoad_OK:	
 16029                           
 16030                           	psect	text111
 16031  115F                     __ptext111:	
 16032 ;; *************** function _getMain_All_Error_Status *****************
 16033 ;; Defined at:
 16034 ;;		line 424 in file "../src/Main_B1.c"
 16035 ;; Parameters:    Size  Location     Type
 16036 ;;  command         1    wreg     unsigned char 
 16037 ;; Auto vars:     Size  Location     Type
 16038 ;;  command         1    5[BANK0 ] unsigned char 
 16039 ;;  status          1    6[BANK0 ] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;                  1    wreg      unsigned char 
 16042 ;; Registers used:
 16043 ;;		wreg, status,2, status,0
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;Total ram usage:        7 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    5
 16056 ;; This function calls:
 16057 ;;		Nothing
 16058 ;; This function is called by:
 16059 ;;		_DimmerLights_Main
 16060 ;;		_Exception_Main
 16061 ;;		_Load_Main
 16062 ;;		_setTemp_Main
 16063 ;;		_getRxData
 16064 ;;		_setSw_Main
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _getMain_All_Error_Status
 16070  115F                     _getMain_All_Error_Status:	
 16071                           
 16072                           ;incstack = 0
 16073                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16074                           ;getMain_All_Error_Status@command stored from wreg
 16075  115F  0020               	movlb	0	; select bank0
 16076  1160  00A5               	movwf	getMain_All_Error_Status@command
 16077                           
 16078                           ;Main_B1.c: 425: char status = 0;
 16079  1161  01A6               	clrf	getMain_All_Error_Status@status
 16080                           
 16081                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16082  1162  08A6               	movf	getMain_All_Error_Status@status,f
 16083  1163  1D03               	skipz
 16084  1164  2979               	goto	l9258
 16085  1165  0825               	movf	getMain_All_Error_Status@command,w
 16086  1166  3A02               	xorlw	2
 16087  1167  1903               	skipnz
 16088  1168  2979               	goto	l9258
 16089                           
 16090                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16091  1169  0021               	movlb	1	; select bank1
 16092  116A  18DA               	btfsc	_Temp^(0+128),1
 16093  116B  2970               	goto	l9256
 16094  116C  0020               	movlb	0	; select bank0
 16095  116D  01A1               	clrf	_getMain_All_Error_Status$3618
 16096  116E  01A2               	clrf	_getMain_All_Error_Status$3618+1
 16097  116F  2975               	goto	l1470
 16098  1170                     l9256:	
 16099  1170  3002               	movlw	2
 16100  1171  0020               	movlb	0	; select bank0
 16101  1172  00A1               	movwf	_getMain_All_Error_Status$3618
 16102  1173  3000               	movlw	0
 16103  1174  00A2               	movwf	_getMain_All_Error_Status$3618+1
 16104  1175                     l1470:	
 16105  1175  0821               	movf	_getMain_All_Error_Status$3618,w
 16106  1176  00A0               	movwf	??_getMain_All_Error_Status
 16107  1177  0820               	movf	??_getMain_All_Error_Status,w
 16108  1178  00A6               	movwf	getMain_All_Error_Status@status
 16109  1179                     l9258:	
 16110                           
 16111                           ;Main_B1.c: 438: }
 16112                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16113  1179  08A6               	movf	getMain_All_Error_Status@status,f
 16114  117A  1D03               	skipz
 16115  117B  2990               	goto	l1471
 16116  117C  0825               	movf	getMain_All_Error_Status@command,w
 16117  117D  3A03               	xorlw	3
 16118  117E  1903               	skipnz
 16119  117F  2990               	goto	l1471
 16120                           
 16121                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16122  1180  0022               	movlb	2	; select bank2
 16123  1181  1AB6               	btfsc	_Load^(0+256),5
 16124  1182  2987               	goto	l9266
 16125  1183  0020               	movlb	0	; select bank0
 16126  1184  01A3               	clrf	_getMain_All_Error_Status$3619
 16127  1185  01A4               	clrf	_getMain_All_Error_Status$3619+1
 16128  1186  298C               	goto	l1475
 16129  1187                     l9266:	
 16130  1187  3003               	movlw	3
 16131  1188  0020               	movlb	0	; select bank0
 16132  1189  00A3               	movwf	_getMain_All_Error_Status$3619
 16133  118A  3000               	movlw	0
 16134  118B  00A4               	movwf	_getMain_All_Error_Status$3619+1
 16135  118C                     l1475:	
 16136  118C  0823               	movf	_getMain_All_Error_Status$3619,w
 16137  118D  00A0               	movwf	??_getMain_All_Error_Status
 16138  118E  0820               	movf	??_getMain_All_Error_Status,w
 16139  118F  00A6               	movwf	getMain_All_Error_Status@status
 16140  1190                     l1471:	
 16141                           
 16142                           ;Main_B1.c: 445: }
 16143                           ;Main_B1.c: 455: return status;
 16144  1190  0826               	movf	getMain_All_Error_Status@status,w
 16145  1191  0008               	return
 16146  1192                     __end_of_getMain_All_Error_Status:	
 16147                           
 16148                           	psect	text112
 16149  1AA5                     __ptext112:	
 16150 ;; *************** function _DimmerLights_Initialization *****************
 16151 ;; Defined at:
 16152 ;;		line 641 in file "../src/Dimmer_B1.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;		None
 16155 ;; Auto vars:     Size  Location     Type
 16156 ;;		None
 16157 ;; Return value:  Size  Location     Type
 16158 ;;		None               void
 16159 ;; Registers used:
 16160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16161 ;; Tracked objects:
 16162 ;;		On entry : 0/0
 16163 ;;		On exit  : 0/0
 16164 ;;		Unchanged: 0/0
 16165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;Total ram usage:        0 bytes
 16171 ;; Hardware stack levels used:    1
 16172 ;; Hardware stack levels required when called:    9
 16173 ;; This function calls:
 16174 ;;		_DimmerIntr_Initialization
 16175 ;;		_setDimmerLights_Initialization
 16176 ;; This function is called by:
 16177 ;;		_main
 16178 ;; This function uses a non-reentrant model
 16179 ;;
 16180                           
 16181                           
 16182                           ;psect for function _DimmerLights_Initialization
 16183  1AA5                     _DimmerLights_Initialization:	
 16184                           
 16185                           ;Dimmer_B1.c: 643: setDimmerLights_Initialization(1);
 16186                           
 16187                           ;incstack = 0
 16188                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16189  1AA5  3001               	movlw	1
 16190  1AA6  319A  2252  319A   	fcall	_setDimmerLights_Initialization
 16191                           
 16192                           ;Dimmer_B1.c: 653: DimmerIntr_Initialization();
 16193  1AA9  3195  25AF         	fcall	_DimmerIntr_Initialization
 16194  1AAB  0008               	return
 16195  1AAC                     __end_of_DimmerLights_Initialization:	
 16196                           
 16197                           	psect	text113
 16198  1A52                     __ptext113:	
 16199 ;; *************** function _setDimmerLights_Initialization *****************
 16200 ;; Defined at:
 16201 ;;		line 657 in file "../src/Dimmer_B1.c"
 16202 ;; Parameters:    Size  Location     Type
 16203 ;;  lights          1    wreg     unsigned char 
 16204 ;; Auto vars:     Size  Location     Type
 16205 ;;  lights          1    0[COMMON] unsigned char 
 16206 ;; Return value:  Size  Location     Type
 16207 ;;		None               void
 16208 ;; Registers used:
 16209 ;;		wreg
 16210 ;; Tracked objects:
 16211 ;;		On entry : 0/0
 16212 ;;		On exit  : 0/0
 16213 ;;		Unchanged: 0/0
 16214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;Total ram usage:        0 bytes
 16220 ;; Hardware stack levels used:    1
 16221 ;; Hardware stack levels required when called:    5
 16222 ;; This function calls:
 16223 ;;		Nothing
 16224 ;; This function is called by:
 16225 ;;		_DimmerLights_Initialization
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           
 16230                           ;psect for function _setDimmerLights_Initialization
 16231  1A52                     _setDimmerLights_Initialization:	
 16232                           
 16233                           ;incstack = 0
 16234                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16235  1A52  0008               	return
 16236  1A53                     __end_of_setDimmerLights_Initialization:	
 16237                           
 16238                           	psect	text114
 16239  15AF                     __ptext114:	
 16240 ;; *************** function _DimmerIntr_Initialization *****************
 16241 ;; Defined at:
 16242 ;;		line 7 in file "../src/Dimmer_B1.c"
 16243 ;; Parameters:    Size  Location     Type
 16244 ;;		None
 16245 ;; Auto vars:     Size  Location     Type
 16246 ;;		None
 16247 ;; Return value:  Size  Location     Type
 16248 ;;		None               void
 16249 ;; Registers used:
 16250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16251 ;; Tracked objects:
 16252 ;;		On entry : 0/0
 16253 ;;		On exit  : 0/0
 16254 ;;		Unchanged: 0/0
 16255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;Total ram usage:        2 bytes
 16261 ;; Hardware stack levels used:    1
 16262 ;; Hardware stack levels required when called:    8
 16263 ;; This function calls:
 16264 ;;		_Division
 16265 ;;		_getDimmerLights_PercentToValue
 16266 ;;		_getDimmerLights_ValueToPercent
 16267 ;;		_setMemory_Modify
 16268 ;; This function is called by:
 16269 ;;		_DimmerLights_Initialization
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           
 16274                           ;psect for function _DimmerIntr_Initialization
 16275  15AF                     _DimmerIntr_Initialization:	
 16276                           
 16277                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16278                           
 16279                           ;incstack = 0
 16280                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16281  15AF  3007               	movlw	7
 16282  15B0  0020               	movlb	0	; select bank0
 16283  15B1  00E2               	movwf	??_DimmerIntr_Initialization
 16284  15B2  0862               	movf	??_DimmerIntr_Initialization,w
 16285  15B3  0021               	movlb	1	; select bank1
 16286  15B4  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16287                           
 16288                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16289  15B5  3034               	movlw	52
 16290  15B6  0020               	movlb	0	; select bank0
 16291  15B7  00E2               	movwf	??_DimmerIntr_Initialization
 16292  15B8  0862               	movf	??_DimmerIntr_Initialization,w
 16293  15B9  0021               	movlb	1	; select bank1
 16294  15BA  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16295                           
 16296                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16297  15BB  3006               	movlw	6
 16298  15BC  0020               	movlb	0	; select bank0
 16299  15BD  00E2               	movwf	??_DimmerIntr_Initialization
 16300  15BE  0862               	movf	??_DimmerIntr_Initialization,w
 16301  15BF  0021               	movlb	1	; select bank1
 16302  15C0  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16303                           
 16304                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16305  15C1  1E39               	btfss	(_myMain^(0+128)+10),4
 16306  15C2  2DD2               	goto	l676
 16307                           
 16308                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16309  15C3  3034               	movlw	52
 16310  15C4  3197  2736  3195   	fcall	_getDimmerLights_ValueToPercent
 16311  15C7  0020               	movlb	0	; select bank0
 16312  15C8  00E2               	movwf	??_DimmerIntr_Initialization
 16313  15C9  0021               	movlb	1	; select bank1
 16314  15CA  086C               	movf	_product^(0+128),w
 16315  15CB  3E15               	addlw	21
 16316  15CC  0086               	movwf	6
 16317  15CD  3002               	movlw	2	; select bank4/5
 16318  15CE  0087               	movwf	7
 16319  15CF  0020               	movlb	0	; select bank0
 16320  15D0  0862               	movf	??_DimmerIntr_Initialization,w
 16321  15D1  0081               	movwf	1
 16322  15D2                     l676:	
 16323                           
 16324                           ;Dimmer_B1.c: 18: }
 16325                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16326  15D2  0021               	movlb	1	; select bank1
 16327  15D3  086C               	movf	_product^(0+128),w
 16328  15D4  3E15               	addlw	21
 16329  15D5  0086               	movwf	6
 16330  15D6  3002               	movlw	2	; select bank4/5
 16331  15D7  0087               	movwf	7
 16332  15D8  0801               	movf	1,w
 16333  15D9  3196  26D1  3195   	fcall	_getDimmerLights_PercentToValue
 16334  15DC  0020               	movlb	0	; select bank0
 16335  15DD  00E2               	movwf	??_DimmerIntr_Initialization
 16336  15DE  0862               	movf	??_DimmerIntr_Initialization,w
 16337  15DF  0021               	movlb	1	; select bank1
 16338  15E0  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16339                           
 16340                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16341  15E1  3002               	movlw	2
 16342  15E2  0020               	movlb	0	; select bank0
 16343  15E3  00E2               	movwf	??_DimmerIntr_Initialization
 16344  15E4  0862               	movf	??_DimmerIntr_Initialization,w
 16345  15E5  00A5               	movwf	Division@num
 16346  15E6  3034               	movlw	52
 16347  15E7  319B  23B7  3195   	fcall	_Division
 16348  15EA  0020               	movlb	0	; select bank0
 16349  15EB  00E3               	movwf	??_DimmerIntr_Initialization+1
 16350  15EC  0863               	movf	??_DimmerIntr_Initialization+1,w
 16351  15ED  0021               	movlb	1	; select bank1
 16352  15EE  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16353                           
 16354                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16355  15EF  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16356  15F0  3E08               	addlw	8
 16357  15F1  0020               	movlb	0	; select bank0
 16358  15F2  00E2               	movwf	??_DimmerIntr_Initialization
 16359  15F3  0862               	movf	??_DimmerIntr_Initialization,w
 16360  15F4  0021               	movlb	1	; select bank1
 16361  15F5  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16362                           
 16363                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16364  15F6  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16365  15F7  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16366  15F8  0020               	movlb	0	; select bank0
 16367  15F9  00E2               	movwf	??_DimmerIntr_Initialization
 16368  15FA  0862               	movf	??_DimmerIntr_Initialization,w
 16369  15FB  0021               	movlb	1	; select bank1
 16370  15FC  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16371                           
 16372                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16373  15FD  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16374  15FE  3E01               	addlw	1
 16375  15FF  0020               	movlb	0	; select bank0
 16376  1600  00E2               	movwf	??_DimmerIntr_Initialization
 16377  1601  0862               	movf	??_DimmerIntr_Initialization,w
 16378  1602  0021               	movlb	1	; select bank1
 16379  1603  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16380                           
 16381                           ;Dimmer_B1.c: 67: if (myMain.InitDimmer == 1) {
 16382  1604  1E39               	btfss	(_myMain^(0+128)+10),4
 16383  1605  0008               	return
 16384                           
 16385                           ;Dimmer_B1.c: 68: myMain.InitDimmer = 0;
 16386  1606  1239               	bcf	(_myMain^(0+128)+10),4
 16387                           
 16388                           ;Dimmer_B1.c: 69: myMain.SaveDimmer = 1;
 16389  1607  16B9               	bsf	(_myMain^(0+128)+10),5
 16390                           
 16391                           ;Dimmer_B1.c: 70: setMemory_Modify(1);
 16392  1608  3001               	movlw	1
 16393  1609  319C  24C5         	fcall	_setMemory_Modify
 16394  160B  0008               	return
 16395  160C                     __end_of_DimmerIntr_Initialization:	
 16396                           
 16397                           	psect	text115
 16398  1CC5                     __ptext115:	
 16399 ;; *************** function _setMemory_Modify *****************
 16400 ;; Defined at:
 16401 ;;		line 1083 in file "../src/MCU_B1.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  command         1    wreg     unsigned char 
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;  command         1    1[BANK0 ] unsigned char 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;		None               void
 16408 ;; Registers used:
 16409 ;;		wreg, status,2, status,0
 16410 ;; Tracked objects:
 16411 ;;		On entry : 0/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;Total ram usage:        2 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    5
 16422 ;; This function calls:
 16423 ;;		Nothing
 16424 ;; This function is called by:
 16425 ;;		_DimmerIntr_Initialization
 16426 ;;		_setDimmerLights_Dimming
 16427 ;;		_setLog_Code
 16428 ;;		_setRFSW_AdjControl
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           
 16433                           ;psect for function _setMemory_Modify
 16434  1CC5                     _setMemory_Modify:	
 16435                           
 16436                           ;incstack = 0
 16437                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16438                           ;setMemory_Modify@command stored from wreg
 16439  1CC5  0020               	movlb	0	; select bank0
 16440  1CC6  00A1               	movwf	setMemory_Modify@command
 16441                           
 16442                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16443  1CC7  0821               	movf	setMemory_Modify@command,w
 16444  1CC8  3A01               	xorlw	1
 16445  1CC9  3000               	movlw	0
 16446  1CCA  1903               	skipnz
 16447  1CCB  3001               	movlw	1
 16448  1CCC  00A0               	movwf	??_setMemory_Modify
 16449  1CCD  0023               	movlb	3	; select bank3
 16450  1CCE  0862               	movf	(_Memory^(0+384)+36),w
 16451  1CCF  0020               	movlb	0	; select bank0
 16452  1CD0  0620               	xorwf	??_setMemory_Modify,w
 16453  1CD1  39FE               	andlw	-2
 16454  1CD2  0620               	xorwf	??_setMemory_Modify,w
 16455  1CD3  0023               	movlb	3	; select bank3
 16456  1CD4  00E2               	movwf	(_Memory^(0+384)+36)
 16457                           
 16458                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16459  1CD5  01E0               	clrf	(_Memory^(0+384)+34)
 16460  1CD6  01E1               	clrf	((_Memory+1)^(0+384)+34)
 16461  1CD7  0008               	return
 16462  1CD8                     __end_of_setMemory_Modify:	
 16463                           
 16464                           	psect	text116
 16465  1736                     __ptext116:	
 16466 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16467 ;; Defined at:
 16468 ;;		line 1129 in file "../src/Dimmer_B1.c"
 16469 ;; Parameters:    Size  Location     Type
 16470 ;;  value           1    wreg     unsigned char 
 16471 ;; Auto vars:     Size  Location     Type
 16472 ;;  value           1   62[BANK0 ] unsigned char 
 16473 ;;  i               3   63[BANK0 ] float 
 16474 ;; Return value:  Size  Location     Type
 16475 ;;                  1    wreg      unsigned char 
 16476 ;; Registers used:
 16477 ;;		wreg, status,2, status,0, pclath, cstack
 16478 ;; Tracked objects:
 16479 ;;		On entry : 0/0
 16480 ;;		On exit  : 0/0
 16481 ;;		Unchanged: 0/0
 16482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16486 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;Total ram usage:        6 bytes
 16488 ;; Hardware stack levels used:    1
 16489 ;; Hardware stack levels required when called:    7
 16490 ;; This function calls:
 16491 ;;		___awtoft
 16492 ;;		___ftadd
 16493 ;;		___ftdiv
 16494 ;;		___ftneg
 16495 ;;		___fttol
 16496 ;; This function is called by:
 16497 ;;		_DimmerIntr_Initialization
 16498 ;;		_setDimmerLights_Dimming
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           
 16503                           ;psect for function _getDimmerLights_ValueToPercent
 16504  1736                     _getDimmerLights_ValueToPercent:	
 16505                           
 16506                           ;incstack = 0
 16507                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16508                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16509  1736  0020               	movlb	0	; select bank0
 16510  1737  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16511                           
 16512                           ;Dimmer_B1.c: 1137: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16513  1738  3000               	movlw	0
 16514  1739  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16515  173A  3038               	movlw	56
 16516  173B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16517  173C  3042               	movlw	66
 16518  173D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16519                           
 16520                           ;Dimmer_B1.c: 1138: i /= 100;
 16521  173E  3000               	movlw	0
 16522  173F  00AE               	movwf	___ftdiv@f2
 16523  1740  30C8               	movlw	200
 16524  1741  00AF               	movwf	___ftdiv@f2+1
 16525  1742  3042               	movlw	66
 16526  1743  00B0               	movwf	___ftdiv@f2+2
 16527  1744  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16528  1745  00B1               	movwf	___ftdiv@f1
 16529  1746  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16530  1747  00B2               	movwf	___ftdiv@f1+1
 16531  1748  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16532  1749  00B3               	movwf	___ftdiv@f1+2
 16533  174A  318D  2525  3197   	fcall	___ftdiv
 16534  174D  0020               	movlb	0	; select bank0
 16535  174E  082E               	movf	?___ftdiv,w
 16536  174F  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16537  1750  082F               	movf	?___ftdiv+1,w
 16538  1751  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16539  1752  0830               	movf	?___ftdiv+2,w
 16540  1753  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16541                           
 16542                           ;Dimmer_B1.c: 1140: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 16543  1754  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16544  1755  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16545  1756  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16546  1757  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16547  1758  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16548  1759  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16549  175A  1903               	skipnz
 16550  175B  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16551  175C  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16552  175D  3E34               	addlw	52
 16553  175E  00A8               	movwf	___awtoft@c
 16554  175F  3000               	movlw	0
 16555  1760  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16556  1761  00A9               	movwf	___awtoft@c+1
 16557  1762  319F  2796  3197   	fcall	___awtoft
 16558  1765  0020               	movlb	0	; select bank0
 16559  1766  0828               	movf	?___awtoft,w
 16560  1767  00B1               	movwf	___ftdiv@f1
 16561  1768  0829               	movf	?___awtoft+1,w
 16562  1769  00B2               	movwf	___ftdiv@f1+1
 16563  176A  082A               	movf	?___awtoft+2,w
 16564  176B  00B3               	movwf	___ftdiv@f1+2
 16565  176C  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16566  176D  00AE               	movwf	___ftdiv@f2
 16567  176E  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16568  176F  00AF               	movwf	___ftdiv@f2+1
 16569  1770  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16570  1771  00B0               	movwf	___ftdiv@f2+2
 16571  1772  318D  2525  3197   	fcall	___ftdiv
 16572  1775  0020               	movlb	0	; select bank0
 16573  1776  082E               	movf	?___ftdiv,w
 16574  1777  00BE               	movwf	___ftneg@f1
 16575  1778  082F               	movf	?___ftdiv+1,w
 16576  1779  00BF               	movwf	___ftneg@f1+1
 16577  177A  0830               	movf	?___ftdiv+2,w
 16578  177B  00C0               	movwf	___ftneg@f1+2
 16579  177C  319A  22D3  3197   	fcall	___ftneg
 16580  177F  0020               	movlb	0	; select bank0
 16581  1780  083E               	movf	?___ftneg,w
 16582  1781  00C4               	movwf	___ftadd@f2
 16583  1782  083F               	movf	?___ftneg+1,w
 16584  1783  00C5               	movwf	___ftadd@f2+1
 16585  1784  0840               	movf	?___ftneg+2,w
 16586  1785  00C6               	movwf	___ftadd@f2+2
 16587  1786  3000               	movlw	0
 16588  1787  00C1               	movwf	___ftadd@f1
 16589  1788  30C8               	movlw	200
 16590  1789  00C2               	movwf	___ftadd@f1+1
 16591  178A  3042               	movlw	66
 16592  178B  00C3               	movwf	___ftadd@f1+2
 16593  178C  3183  2381  3197   	fcall	___ftadd
 16594  178F  0020               	movlb	0	; select bank0
 16595  1790  0841               	movf	?___ftadd,w
 16596  1791  00CE               	movwf	___fttol@f1
 16597  1792  0842               	movf	?___ftadd+1,w
 16598  1793  00CF               	movwf	___fttol@f1+1
 16599  1794  0843               	movf	?___ftadd+2,w
 16600  1795  00D0               	movwf	___fttol@f1+2
 16601  1796  318C  2412         	fcall	___fttol
 16602  1798  0020               	movlb	0	; select bank0
 16603  1799  084E               	movf	?___fttol,w
 16604  179A  0008               	return
 16605  179B                     __end_of_getDimmerLights_ValueToPercent:	
 16606                           
 16607                           	psect	text117
 16608  16D1                     __ptext117:	
 16609 ;; *************** function _getDimmerLights_PercentToValue *****************
 16610 ;; Defined at:
 16611 ;;		line 1113 in file "../src/Dimmer_B1.c"
 16612 ;; Parameters:    Size  Location     Type
 16613 ;;  value           1    wreg     unsigned char 
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;  value           1   62[BANK0 ] unsigned char 
 16616 ;;  i               3   63[BANK0 ] float 
 16617 ;; Return value:  Size  Location     Type
 16618 ;;                  1    wreg      unsigned char 
 16619 ;; Registers used:
 16620 ;;		wreg, status,2, status,0, pclath, cstack
 16621 ;; Tracked objects:
 16622 ;;		On entry : 0/0
 16623 ;;		On exit  : 0/0
 16624 ;;		Unchanged: 0/0
 16625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16627 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16629 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16630 ;;Total ram usage:        6 bytes
 16631 ;; Hardware stack levels used:    1
 16632 ;; Hardware stack levels required when called:    7
 16633 ;; This function calls:
 16634 ;;		___awtoft
 16635 ;;		___ftadd
 16636 ;;		___ftdiv
 16637 ;;		___ftmul
 16638 ;;		___ftneg
 16639 ;;		___fttol
 16640 ;; This function is called by:
 16641 ;;		_DimmerIntr_Initialization
 16642 ;;		_setDimmerLights_OnOff
 16643 ;;		_setRFSW_AdjControl
 16644 ;; This function uses a non-reentrant model
 16645 ;;
 16646                           
 16647                           
 16648                           ;psect for function _getDimmerLights_PercentToValue
 16649  16D1                     _getDimmerLights_PercentToValue:	
 16650                           
 16651                           ;incstack = 0
 16652                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16653                           ;getDimmerLights_PercentToValue@value stored from wreg
 16654  16D1  0020               	movlb	0	; select bank0
 16655  16D2  00DE               	movwf	getDimmerLights_PercentToValue@value
 16656                           
 16657                           ;Dimmer_B1.c: 1121: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16658  16D3  3000               	movlw	0
 16659  16D4  00DF               	movwf	getDimmerLights_PercentToValue@i
 16660  16D5  3038               	movlw	56
 16661  16D6  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16662  16D7  3042               	movlw	66
 16663  16D8  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16664                           
 16665                           ;Dimmer_B1.c: 1122: i /= 100;
 16666  16D9  3000               	movlw	0
 16667  16DA  00AE               	movwf	___ftdiv@f2
 16668  16DB  30C8               	movlw	200
 16669  16DC  00AF               	movwf	___ftdiv@f2+1
 16670  16DD  3042               	movlw	66
 16671  16DE  00B0               	movwf	___ftdiv@f2+2
 16672  16DF  085F               	movf	getDimmerLights_PercentToValue@i,w
 16673  16E0  00B1               	movwf	___ftdiv@f1
 16674  16E1  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16675  16E2  00B2               	movwf	___ftdiv@f1+1
 16676  16E3  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16677  16E4  00B3               	movwf	___ftdiv@f1+2
 16678  16E5  318D  2525  3196   	fcall	___ftdiv
 16679  16E8  0020               	movlb	0	; select bank0
 16680  16E9  082E               	movf	?___ftdiv,w
 16681  16EA  00DF               	movwf	getDimmerLights_PercentToValue@i
 16682  16EB  082F               	movf	?___ftdiv+1,w
 16683  16EC  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16684  16ED  0830               	movf	?___ftdiv+2,w
 16685  16EE  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16686                           
 16687                           ;Dimmer_B1.c: 1124: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 16688  16EF  085E               	movf	getDimmerLights_PercentToValue@value,w
 16689  16F0  00DC               	movwf	??_getDimmerLights_PercentToValue
 16690  16F1  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16691  16F2  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16692  16F3  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16693  16F4  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16694  16F5  1903               	skipnz
 16695  16F6  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16696  16F7  085C               	movf	??_getDimmerLights_PercentToValue,w
 16697  16F8  3E64               	addlw	100
 16698  16F9  00A8               	movwf	___awtoft@c
 16699  16FA  3000               	movlw	0
 16700  16FB  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16701  16FC  00A9               	movwf	___awtoft@c+1
 16702  16FD  319F  2796  3196   	fcall	___awtoft
 16703  1700  0020               	movlb	0	; select bank0
 16704  1701  0828               	movf	?___awtoft,w
 16705  1702  00B1               	movwf	___ftmul@f2
 16706  1703  0829               	movf	?___awtoft+1,w
 16707  1704  00B2               	movwf	___ftmul@f2+1
 16708  1705  082A               	movf	?___awtoft+2,w
 16709  1706  00B3               	movwf	___ftmul@f2+2
 16710  1707  085F               	movf	getDimmerLights_PercentToValue@i,w
 16711  1708  00AE               	movwf	___ftmul@f1
 16712  1709  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16713  170A  00AF               	movwf	___ftmul@f1+1
 16714  170B  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16715  170C  00B0               	movwf	___ftmul@f1+2
 16716  170D  318D  25CE  3196   	fcall	___ftmul
 16717  1710  0020               	movlb	0	; select bank0
 16718  1711  082E               	movf	?___ftmul,w
 16719  1712  00BE               	movwf	___ftneg@f1
 16720  1713  082F               	movf	?___ftmul+1,w
 16721  1714  00BF               	movwf	___ftneg@f1+1
 16722  1715  0830               	movf	?___ftmul+2,w
 16723  1716  00C0               	movwf	___ftneg@f1+2
 16724  1717  319A  22D3  3196   	fcall	___ftneg
 16725  171A  0020               	movlb	0	; select bank0
 16726  171B  083E               	movf	?___ftneg,w
 16727  171C  00C4               	movwf	___ftadd@f2
 16728  171D  083F               	movf	?___ftneg+1,w
 16729  171E  00C5               	movwf	___ftadd@f2+1
 16730  171F  0840               	movf	?___ftneg+2,w
 16731  1720  00C6               	movwf	___ftadd@f2+2
 16732  1721  3000               	movlw	0
 16733  1722  00C1               	movwf	___ftadd@f1
 16734  1723  3050               	movlw	80
 16735  1724  00C2               	movwf	___ftadd@f1+1
 16736  1725  3042               	movlw	66
 16737  1726  00C3               	movwf	___ftadd@f1+2
 16738  1727  3183  2381  3196   	fcall	___ftadd
 16739  172A  0020               	movlb	0	; select bank0
 16740  172B  0841               	movf	?___ftadd,w
 16741  172C  00CE               	movwf	___fttol@f1
 16742  172D  0842               	movf	?___ftadd+1,w
 16743  172E  00CF               	movwf	___fttol@f1+1
 16744  172F  0843               	movf	?___ftadd+2,w
 16745  1730  00D0               	movwf	___fttol@f1+2
 16746  1731  318C  2412         	fcall	___fttol
 16747  1733  0020               	movlb	0	; select bank0
 16748  1734  084E               	movf	?___fttol,w
 16749  1735  0008               	return
 16750  1736                     __end_of_getDimmerLights_PercentToValue:	
 16751                           
 16752                           	psect	text118
 16753  0C12                     __ptext118:	
 16754 ;; *************** function ___fttol *****************
 16755 ;; Defined at:
 16756 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16757 ;; Parameters:    Size  Location     Type
 16758 ;;  f1              3   46[BANK0 ] float 
 16759 ;; Auto vars:     Size  Location     Type
 16760 ;;  lval            4   55[BANK0 ] unsigned long 
 16761 ;;  exp1            1   59[BANK0 ] unsigned char 
 16762 ;;  sign1           1   54[BANK0 ] unsigned char 
 16763 ;; Return value:  Size  Location     Type
 16764 ;;                  4   46[BANK0 ] long 
 16765 ;; Registers used:
 16766 ;;		wreg, status,2, status,0
 16767 ;; Tracked objects:
 16768 ;;		On entry : 0/0
 16769 ;;		On exit  : 0/0
 16770 ;;		Unchanged: 0/0
 16771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16776 ;;Total ram usage:       14 bytes
 16777 ;; Hardware stack levels used:    1
 16778 ;; Hardware stack levels required when called:    5
 16779 ;; This function calls:
 16780 ;;		Nothing
 16781 ;; This function is called by:
 16782 ;;		_getDimmerLights_PercentToValue
 16783 ;;		_getDimmerLights_ValueToPercent
 16784 ;; This function uses a non-reentrant model
 16785 ;;
 16786                           
 16787                           
 16788                           ;psect for function ___fttol
 16789  0C12                     ___fttol:	
 16790                           
 16791                           ;incstack = 0
 16792                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16793  0C12  0020               	movlb	0	; select bank0
 16794  0C13  084E               	movf	___fttol@f1,w
 16795  0C14  00D2               	movwf	??___fttol
 16796  0C15  084F               	movf	___fttol@f1+1,w
 16797  0C16  00D3               	movwf	??___fttol+1
 16798  0C17  0850               	movf	___fttol@f1+2,w
 16799  0C18  00D4               	movwf	??___fttol+2
 16800  0C19  1003               	clrc
 16801  0C1A  0D53               	rlf	??___fttol+1,w
 16802  0C1B  0D54               	rlf	??___fttol+2,w
 16803  0C1C  00D5               	movwf	??___fttol+3
 16804  0C1D  0855               	movf	??___fttol+3,w
 16805  0C1E  00DB               	movwf	___fttol@exp1
 16806  0C1F  08DB               	movf	___fttol@exp1,f
 16807  0C20  1D03               	skipz
 16808  0C21  2C2B               	goto	l8742
 16809  0C22  3000               	movlw	0
 16810  0C23  00D1               	movwf	?___fttol+3
 16811  0C24  3000               	movlw	0
 16812  0C25  00D0               	movwf	?___fttol+2
 16813  0C26  3000               	movlw	0
 16814  0C27  00CF               	movwf	?___fttol+1
 16815  0C28  3000               	movlw	0
 16816  0C29  00CE               	movwf	?___fttol
 16817  0C2A  0008               	return
 16818  0C2B                     l8742:	
 16819  0C2B  084E               	movf	___fttol@f1,w
 16820  0C2C  00D2               	movwf	??___fttol
 16821  0C2D  084F               	movf	___fttol@f1+1,w
 16822  0C2E  00D3               	movwf	??___fttol+1
 16823  0C2F  0850               	movf	___fttol@f1+2,w
 16824  0C30  00D4               	movwf	??___fttol+2
 16825  0C31  3017               	movlw	23
 16826  0C32                     u9425:	
 16827  0C32  36D4               	lsrf	??___fttol+2,f
 16828  0C33  0CD3               	rrf	??___fttol+1,f
 16829  0C34  0CD2               	rrf	??___fttol,f
 16830  0C35  0B89               	decfsz	9,f
 16831  0C36  2C32               	goto	u9425
 16832  0C37  0852               	movf	??___fttol,w
 16833  0C38  00D5               	movwf	??___fttol+3
 16834  0C39  0855               	movf	??___fttol+3,w
 16835  0C3A  00D6               	movwf	___fttol@sign1
 16836  0C3B  17CF               	bsf	___fttol@f1+1,7
 16837  0C3C  30FF               	movlw	255
 16838  0C3D  05CE               	andwf	___fttol@f1,f
 16839  0C3E  30FF               	movlw	255
 16840  0C3F  05CF               	andwf	___fttol@f1+1,f
 16841  0C40  3000               	movlw	0
 16842  0C41  05D0               	andwf	___fttol@f1+2,f
 16843  0C42  084E               	movf	___fttol@f1,w
 16844  0C43  00D7               	movwf	___fttol@lval
 16845  0C44  084F               	movf	___fttol@f1+1,w
 16846  0C45  00D8               	movwf	___fttol@lval+1
 16847  0C46  0850               	movf	___fttol@f1+2,w
 16848  0C47  00D9               	movwf	___fttol@lval+2
 16849  0C48  01DA               	clrf	___fttol@lval+3
 16850  0C49  308E               	movlw	142
 16851  0C4A  02DB               	subwf	___fttol@exp1,f
 16852  0C4B  1FDB               	btfss	___fttol@exp1,7
 16853  0C4C  2C69               	goto	l8762
 16854  0C4D  085B               	movf	___fttol@exp1,w
 16855  0C4E  3A80               	xorlw	128
 16856  0C4F  3E8F               	addlw	143
 16857  0C50  1803               	skipnc
 16858  0C51  2C5B               	goto	l8760
 16859  0C52  3000               	movlw	0
 16860  0C53  00D1               	movwf	?___fttol+3
 16861  0C54  3000               	movlw	0
 16862  0C55  00D0               	movwf	?___fttol+2
 16863  0C56  3000               	movlw	0
 16864  0C57  00CF               	movwf	?___fttol+1
 16865  0C58  3000               	movlw	0
 16866  0C59  00CE               	movwf	?___fttol
 16867  0C5A  0008               	return
 16868  0C5B                     l8760:	
 16869  0C5B  3001               	movlw	1
 16870  0C5C                     u9455:	
 16871  0C5C  36DA               	lsrf	___fttol@lval+3,f
 16872  0C5D  0CD9               	rrf	___fttol@lval+2,f
 16873  0C5E  0CD8               	rrf	___fttol@lval+1,f
 16874  0C5F  0CD7               	rrf	___fttol@lval,f
 16875  0C60  0B89               	decfsz	9,f
 16876  0C61  2C5C               	goto	u9455
 16877  0C62  3001               	movlw	1
 16878  0C63  00D2               	movwf	??___fttol
 16879  0C64  0852               	movf	??___fttol,w
 16880  0C65  07DB               	addwf	___fttol@exp1,f
 16881  0C66  1903               	btfsc	3,2
 16882  0C67  2C82               	goto	l8772
 16883  0C68  2C5B               	goto	l8760
 16884  0C69                     l8762:	
 16885  0C69  3018               	movlw	24
 16886  0C6A  025B               	subwf	___fttol@exp1,w
 16887  0C6B  1C03               	skipc
 16888  0C6C  2C7F               	goto	l8770
 16889  0C6D  3000               	movlw	0
 16890  0C6E  00D1               	movwf	?___fttol+3
 16891  0C6F  3000               	movlw	0
 16892  0C70  00D0               	movwf	?___fttol+2
 16893  0C71  3000               	movlw	0
 16894  0C72  00CF               	movwf	?___fttol+1
 16895  0C73  3000               	movlw	0
 16896  0C74  00CE               	movwf	?___fttol
 16897  0C75  0008               	return
 16898  0C76                     l8768:	
 16899  0C76  3001               	movlw	1
 16900  0C77                     u9485:	
 16901  0C77  35D7               	lslf	___fttol@lval,f
 16902  0C78  0DD8               	rlf	___fttol@lval+1,f
 16903  0C79  0DD9               	rlf	___fttol@lval+2,f
 16904  0C7A  0DDA               	rlf	___fttol@lval+3,f
 16905  0C7B  0B89               	decfsz	9,f
 16906  0C7C  2C77               	goto	u9485
 16907  0C7D  3001               	movlw	1
 16908  0C7E  02DB               	subwf	___fttol@exp1,f
 16909  0C7F                     l8770:	
 16910  0C7F  08DB               	movf	___fttol@exp1,f
 16911  0C80  1D03               	skipz
 16912  0C81  2C76               	goto	l8768
 16913  0C82                     l8772:	
 16914  0C82  0856               	movf	___fttol@sign1,w
 16915  0C83  1903               	btfsc	3,2
 16916  0C84  2C90               	goto	l8776
 16917  0C85  09D7               	comf	___fttol@lval,f
 16918  0C86  09D8               	comf	___fttol@lval+1,f
 16919  0C87  09D9               	comf	___fttol@lval+2,f
 16920  0C88  09DA               	comf	___fttol@lval+3,f
 16921  0C89  0AD7               	incf	___fttol@lval,f
 16922  0C8A  1903               	skipnz
 16923  0C8B  0AD8               	incf	___fttol@lval+1,f
 16924  0C8C  1903               	skipnz
 16925  0C8D  0AD9               	incf	___fttol@lval+2,f
 16926  0C8E  1903               	skipnz
 16927  0C8F  0ADA               	incf	___fttol@lval+3,f
 16928  0C90                     l8776:	
 16929  0C90  085A               	movf	___fttol@lval+3,w
 16930  0C91  00D1               	movwf	?___fttol+3
 16931  0C92  0859               	movf	___fttol@lval+2,w
 16932  0C93  00D0               	movwf	?___fttol+2
 16933  0C94  0858               	movf	___fttol@lval+1,w
 16934  0C95  00CF               	movwf	?___fttol+1
 16935  0C96  0857               	movf	___fttol@lval,w
 16936  0C97  00CE               	movwf	?___fttol
 16937  0C98  0008               	return
 16938  0C99                     __end_of___fttol:	
 16939                           
 16940                           	psect	text119
 16941  1AD3                     __ptext119:	
 16942 ;; *************** function ___ftneg *****************
 16943 ;; Defined at:
 16944 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16945 ;; Parameters:    Size  Location     Type
 16946 ;;  f1              3   30[BANK0 ] float 
 16947 ;; Auto vars:     Size  Location     Type
 16948 ;;		None
 16949 ;; Return value:  Size  Location     Type
 16950 ;;                  3   30[BANK0 ] float 
 16951 ;; Registers used:
 16952 ;;		wreg
 16953 ;; Tracked objects:
 16954 ;;		On entry : 0/0
 16955 ;;		On exit  : 0/0
 16956 ;;		Unchanged: 0/0
 16957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16958 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16961 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16962 ;;Total ram usage:        3 bytes
 16963 ;; Hardware stack levels used:    1
 16964 ;; Hardware stack levels required when called:    5
 16965 ;; This function calls:
 16966 ;;		Nothing
 16967 ;; This function is called by:
 16968 ;;		_getDimmerLights_PercentToValue
 16969 ;;		_getDimmerLights_ValueToPercent
 16970 ;; This function uses a non-reentrant model
 16971 ;;
 16972                           
 16973                           
 16974                           ;psect for function ___ftneg
 16975  1AD3                     ___ftneg:	
 16976                           
 16977                           ;incstack = 0
 16978                           ; Regs used in ___ftneg: [wreg]
 16979  1AD3  0020               	movlb	0	; select bank0
 16980  1AD4  0840               	movf	___ftneg@f1+2,w
 16981  1AD5  043F               	iorwf	___ftneg@f1+1,w
 16982  1AD6  043E               	iorwf	___ftneg@f1,w
 16983  1AD7  1903               	skipnz
 16984  1AD8  0008               	return
 16985  1AD9  3080               	movlw	128
 16986  1ADA  06C0               	xorwf	___ftneg@f1+2,f
 16987  1ADB  0008               	return
 16988  1ADC                     __end_of___ftneg:	
 16989                           
 16990                           	psect	text120
 16991  0DCE                     __ptext120:	
 16992 ;; *************** function ___ftmul *****************
 16993 ;; Defined at:
 16994 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  f1              3   14[BANK0 ] float 
 16997 ;;  f2              3   17[BANK0 ] float 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17000 ;;  sign            1   29[BANK0 ] unsigned char 
 17001 ;;  cntr            1   28[BANK0 ] unsigned char 
 17002 ;;  exp             1   24[BANK0 ] unsigned char 
 17003 ;; Return value:  Size  Location     Type
 17004 ;;                  3   14[BANK0 ] float 
 17005 ;; Registers used:
 17006 ;;		wreg, status,2, status,0, pclath, cstack
 17007 ;; Tracked objects:
 17008 ;;		On entry : 0/0
 17009 ;;		On exit  : 0/0
 17010 ;;		Unchanged: 0/0
 17011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17014 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17015 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17016 ;;Total ram usage:       16 bytes
 17017 ;; Hardware stack levels used:    1
 17018 ;; Hardware stack levels required when called:    6
 17019 ;; This function calls:
 17020 ;;		___ftpack
 17021 ;; This function is called by:
 17022 ;;		_getDimmerLights_PercentToValue
 17023 ;; This function uses a non-reentrant model
 17024 ;;
 17025                           
 17026                           
 17027                           ;psect for function ___ftmul
 17028  0DCE                     ___ftmul:	
 17029                           
 17030                           ;incstack = 0
 17031                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17032  0DCE  0020               	movlb	0	; select bank0
 17033  0DCF  082E               	movf	___ftmul@f1,w
 17034  0DD0  00B4               	movwf	??___ftmul
 17035  0DD1  082F               	movf	___ftmul@f1+1,w
 17036  0DD2  00B5               	movwf	??___ftmul+1
 17037  0DD3  0830               	movf	___ftmul@f1+2,w
 17038  0DD4  00B6               	movwf	??___ftmul+2
 17039  0DD5  1003               	clrc
 17040  0DD6  0D35               	rlf	??___ftmul+1,w
 17041  0DD7  0D36               	rlf	??___ftmul+2,w
 17042  0DD8  00B7               	movwf	??___ftmul+3
 17043  0DD9  0837               	movf	??___ftmul+3,w
 17044  0DDA  00B8               	movwf	___ftmul@exp
 17045  0DDB  08B8               	movf	___ftmul@exp,f
 17046  0DDC  1D03               	skipz
 17047  0DDD  2DE5               	goto	l8684
 17048  0DDE  3000               	movlw	0
 17049  0DDF  00AE               	movwf	?___ftmul
 17050  0DE0  3000               	movlw	0
 17051  0DE1  00AF               	movwf	?___ftmul+1
 17052  0DE2  3000               	movlw	0
 17053  0DE3  00B0               	movwf	?___ftmul+2
 17054  0DE4  0008               	return
 17055  0DE5                     l8684:	
 17056  0DE5  0831               	movf	___ftmul@f2,w
 17057  0DE6  00B4               	movwf	??___ftmul
 17058  0DE7  0832               	movf	___ftmul@f2+1,w
 17059  0DE8  00B5               	movwf	??___ftmul+1
 17060  0DE9  0833               	movf	___ftmul@f2+2,w
 17061  0DEA  00B6               	movwf	??___ftmul+2
 17062  0DEB  1003               	clrc
 17063  0DEC  0D35               	rlf	??___ftmul+1,w
 17064  0DED  0D36               	rlf	??___ftmul+2,w
 17065  0DEE  00B7               	movwf	??___ftmul+3
 17066  0DEF  0837               	movf	??___ftmul+3,w
 17067  0DF0  00BD               	movwf	___ftmul@sign
 17068  0DF1  08BD               	movf	___ftmul@sign,f
 17069  0DF2  1D03               	skipz
 17070  0DF3  2DFB               	goto	l8690
 17071  0DF4  3000               	movlw	0
 17072  0DF5  00AE               	movwf	?___ftmul
 17073  0DF6  3000               	movlw	0
 17074  0DF7  00AF               	movwf	?___ftmul+1
 17075  0DF8  3000               	movlw	0
 17076  0DF9  00B0               	movwf	?___ftmul+2
 17077  0DFA  0008               	return
 17078  0DFB                     l8690:	
 17079  0DFB  083D               	movf	___ftmul@sign,w
 17080  0DFC  3E7B               	addlw	123
 17081  0DFD  00B4               	movwf	??___ftmul
 17082  0DFE  0834               	movf	??___ftmul,w
 17083  0DFF  07B8               	addwf	___ftmul@exp,f
 17084  0E00  082E               	movf	___ftmul@f1,w
 17085  0E01  00B4               	movwf	??___ftmul
 17086  0E02  082F               	movf	___ftmul@f1+1,w
 17087  0E03  00B5               	movwf	??___ftmul+1
 17088  0E04  0830               	movf	___ftmul@f1+2,w
 17089  0E05  00B6               	movwf	??___ftmul+2
 17090  0E06  3010               	movlw	16
 17091  0E07                     u9305:	
 17092  0E07  36B6               	lsrf	??___ftmul+2,f
 17093  0E08  0CB5               	rrf	??___ftmul+1,f
 17094  0E09  0CB4               	rrf	??___ftmul,f
 17095  0E0A  0B89               	decfsz	9,f
 17096  0E0B  2E07               	goto	u9305
 17097  0E0C  0834               	movf	??___ftmul,w
 17098  0E0D  00B7               	movwf	??___ftmul+3
 17099  0E0E  0837               	movf	??___ftmul+3,w
 17100  0E0F  00BD               	movwf	___ftmul@sign
 17101  0E10  0831               	movf	___ftmul@f2,w
 17102  0E11  00B4               	movwf	??___ftmul
 17103  0E12  0832               	movf	___ftmul@f2+1,w
 17104  0E13  00B5               	movwf	??___ftmul+1
 17105  0E14  0833               	movf	___ftmul@f2+2,w
 17106  0E15  00B6               	movwf	??___ftmul+2
 17107  0E16  3010               	movlw	16
 17108  0E17                     u9315:	
 17109  0E17  36B6               	lsrf	??___ftmul+2,f
 17110  0E18  0CB5               	rrf	??___ftmul+1,f
 17111  0E19  0CB4               	rrf	??___ftmul,f
 17112  0E1A  0B89               	decfsz	9,f
 17113  0E1B  2E17               	goto	u9315
 17114  0E1C  0834               	movf	??___ftmul,w
 17115  0E1D  00B7               	movwf	??___ftmul+3
 17116  0E1E  0837               	movf	??___ftmul+3,w
 17117  0E1F  06BD               	xorwf	___ftmul@sign,f
 17118  0E20  3080               	movlw	128
 17119  0E21  00B4               	movwf	??___ftmul
 17120  0E22  0834               	movf	??___ftmul,w
 17121  0E23  05BD               	andwf	___ftmul@sign,f
 17122  0E24  17AF               	bsf	___ftmul@f1+1,7
 17123  0E25  17B2               	bsf	___ftmul@f2+1,7
 17124  0E26  30FF               	movlw	255
 17125  0E27  05B1               	andwf	___ftmul@f2,f
 17126  0E28  30FF               	movlw	255
 17127  0E29  05B2               	andwf	___ftmul@f2+1,f
 17128  0E2A  3000               	movlw	0
 17129  0E2B  05B3               	andwf	___ftmul@f2+2,f
 17130  0E2C  3000               	movlw	0
 17131  0E2D  00B9               	movwf	___ftmul@f3_as_product
 17132  0E2E  3000               	movlw	0
 17133  0E2F  00BA               	movwf	___ftmul@f3_as_product+1
 17134  0E30  3000               	movlw	0
 17135  0E31  00BB               	movwf	___ftmul@f3_as_product+2
 17136  0E32  3007               	movlw	7
 17137  0E33  00B4               	movwf	??___ftmul
 17138  0E34  0834               	movf	??___ftmul,w
 17139  0E35  00BC               	movwf	___ftmul@cntr
 17140  0E36                     l8702:	
 17141  0E36  1C2E               	btfss	___ftmul@f1,0
 17142  0E37  2E3E               	goto	l8706
 17143  0E38  0831               	movf	___ftmul@f2,w
 17144  0E39  07B9               	addwf	___ftmul@f3_as_product,f
 17145  0E3A  0832               	movf	___ftmul@f2+1,w
 17146  0E3B  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17147  0E3C  0833               	movf	___ftmul@f2+2,w
 17148  0E3D  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17149  0E3E                     l8706:	
 17150  0E3E  3001               	movlw	1
 17151  0E3F                     u9335:	
 17152  0E3F  36B0               	lsrf	___ftmul@f1+2,f
 17153  0E40  0CAF               	rrf	___ftmul@f1+1,f
 17154  0E41  0CAE               	rrf	___ftmul@f1,f
 17155  0E42  0B89               	decfsz	9,f
 17156  0E43  2E3F               	goto	u9335
 17157  0E44  3001               	movlw	1
 17158  0E45                     u9345:	
 17159  0E45  35B1               	lslf	___ftmul@f2,f
 17160  0E46  0DB2               	rlf	___ftmul@f2+1,f
 17161  0E47  0DB3               	rlf	___ftmul@f2+2,f
 17162  0E48  0B89               	decfsz	9,f
 17163  0E49  2E45               	goto	u9345
 17164  0E4A  3001               	movlw	1
 17165  0E4B  02BC               	subwf	___ftmul@cntr,f
 17166  0E4C  1D03               	btfss	3,2
 17167  0E4D  2E36               	goto	l8702
 17168  0E4E  3009               	movlw	9
 17169  0E4F  00B4               	movwf	??___ftmul
 17170  0E50  0834               	movf	??___ftmul,w
 17171  0E51  00BC               	movwf	___ftmul@cntr
 17172  0E52                     l8714:	
 17173  0E52  1C2E               	btfss	___ftmul@f1,0
 17174  0E53  2E5A               	goto	l8718
 17175  0E54  0831               	movf	___ftmul@f2,w
 17176  0E55  07B9               	addwf	___ftmul@f3_as_product,f
 17177  0E56  0832               	movf	___ftmul@f2+1,w
 17178  0E57  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17179  0E58  0833               	movf	___ftmul@f2+2,w
 17180  0E59  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17181  0E5A                     l8718:	
 17182  0E5A  3001               	movlw	1
 17183  0E5B                     u9375:	
 17184  0E5B  36B0               	lsrf	___ftmul@f1+2,f
 17185  0E5C  0CAF               	rrf	___ftmul@f1+1,f
 17186  0E5D  0CAE               	rrf	___ftmul@f1,f
 17187  0E5E  0B89               	decfsz	9,f
 17188  0E5F  2E5B               	goto	u9375
 17189  0E60  3001               	movlw	1
 17190  0E61                     u9385:	
 17191  0E61  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17192  0E62  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17193  0E63  0CB9               	rrf	___ftmul@f3_as_product,f
 17194  0E64  0B89               	decfsz	9,f
 17195  0E65  2E61               	goto	u9385
 17196  0E66  3001               	movlw	1
 17197  0E67  02BC               	subwf	___ftmul@cntr,f
 17198  0E68  1D03               	btfss	3,2
 17199  0E69  2E52               	goto	l8714
 17200  0E6A  0839               	movf	___ftmul@f3_as_product,w
 17201  0E6B  00A0               	movwf	___ftpack@arg
 17202  0E6C  083A               	movf	___ftmul@f3_as_product+1,w
 17203  0E6D  00A1               	movwf	___ftpack@arg+1
 17204  0E6E  083B               	movf	___ftmul@f3_as_product+2,w
 17205  0E6F  00A2               	movwf	___ftpack@arg+2
 17206  0E70  0838               	movf	___ftmul@exp,w
 17207  0E71  00B4               	movwf	??___ftmul
 17208  0E72  0834               	movf	??___ftmul,w
 17209  0E73  00A3               	movwf	___ftpack@exp
 17210  0E74  083D               	movf	___ftmul@sign,w
 17211  0E75  00B5               	movwf	??___ftmul+1
 17212  0E76  0835               	movf	??___ftmul+1,w
 17213  0E77  00A4               	movwf	___ftpack@sign
 17214  0E78  3196  260C         	fcall	___ftpack
 17215  0E7A  0020               	movlb	0	; select bank0
 17216  0E7B  0820               	movf	?___ftpack,w
 17217  0E7C  00AE               	movwf	?___ftmul
 17218  0E7D  0821               	movf	?___ftpack+1,w
 17219  0E7E  00AF               	movwf	?___ftmul+1
 17220  0E7F  0822               	movf	?___ftpack+2,w
 17221  0E80  00B0               	movwf	?___ftmul+2
 17222  0E81  0008               	return
 17223  0E82                     __end_of___ftmul:	
 17224                           
 17225                           	psect	text121
 17226  0D25                     __ptext121:	
 17227 ;; *************** function ___ftdiv *****************
 17228 ;; Defined at:
 17229 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17230 ;; Parameters:    Size  Location     Type
 17231 ;;  f2              3   14[BANK0 ] float 
 17232 ;;  f1              3   17[BANK0 ] float 
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;  f3              3   25[BANK0 ] float 
 17235 ;;  sign            1   29[BANK0 ] unsigned char 
 17236 ;;  exp             1   28[BANK0 ] unsigned char 
 17237 ;;  cntr            1   24[BANK0 ] unsigned char 
 17238 ;; Return value:  Size  Location     Type
 17239 ;;                  3   14[BANK0 ] float 
 17240 ;; Registers used:
 17241 ;;		wreg, status,2, status,0, pclath, cstack
 17242 ;; Tracked objects:
 17243 ;;		On entry : 0/0
 17244 ;;		On exit  : 0/0
 17245 ;;		Unchanged: 0/0
 17246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17250 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17251 ;;Total ram usage:       16 bytes
 17252 ;; Hardware stack levels used:    1
 17253 ;; Hardware stack levels required when called:    6
 17254 ;; This function calls:
 17255 ;;		___ftpack
 17256 ;; This function is called by:
 17257 ;;		_getDimmerLights_PercentToValue
 17258 ;;		_getDimmerLights_ValueToPercent
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262                           
 17263                           ;psect for function ___ftdiv
 17264  0D25                     ___ftdiv:	
 17265                           
 17266                           ;incstack = 0
 17267                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17268  0D25  0020               	movlb	0	; select bank0
 17269  0D26  0831               	movf	___ftdiv@f1,w
 17270  0D27  00B4               	movwf	??___ftdiv
 17271  0D28  0832               	movf	___ftdiv@f1+1,w
 17272  0D29  00B5               	movwf	??___ftdiv+1
 17273  0D2A  0833               	movf	___ftdiv@f1+2,w
 17274  0D2B  00B6               	movwf	??___ftdiv+2
 17275  0D2C  1003               	clrc
 17276  0D2D  0D35               	rlf	??___ftdiv+1,w
 17277  0D2E  0D36               	rlf	??___ftdiv+2,w
 17278  0D2F  00B7               	movwf	??___ftdiv+3
 17279  0D30  0837               	movf	??___ftdiv+3,w
 17280  0D31  00BC               	movwf	___ftdiv@exp
 17281  0D32  08BC               	movf	___ftdiv@exp,f
 17282  0D33  1D03               	skipz
 17283  0D34  2D3C               	goto	l8642
 17284  0D35  3000               	movlw	0
 17285  0D36  00AE               	movwf	?___ftdiv
 17286  0D37  3000               	movlw	0
 17287  0D38  00AF               	movwf	?___ftdiv+1
 17288  0D39  3000               	movlw	0
 17289  0D3A  00B0               	movwf	?___ftdiv+2
 17290  0D3B  0008               	return
 17291  0D3C                     l8642:	
 17292  0D3C  082E               	movf	___ftdiv@f2,w
 17293  0D3D  00B4               	movwf	??___ftdiv
 17294  0D3E  082F               	movf	___ftdiv@f2+1,w
 17295  0D3F  00B5               	movwf	??___ftdiv+1
 17296  0D40  0830               	movf	___ftdiv@f2+2,w
 17297  0D41  00B6               	movwf	??___ftdiv+2
 17298  0D42  1003               	clrc
 17299  0D43  0D35               	rlf	??___ftdiv+1,w
 17300  0D44  0D36               	rlf	??___ftdiv+2,w
 17301  0D45  00B7               	movwf	??___ftdiv+3
 17302  0D46  0837               	movf	??___ftdiv+3,w
 17303  0D47  00BD               	movwf	___ftdiv@sign
 17304  0D48  08BD               	movf	___ftdiv@sign,f
 17305  0D49  1D03               	skipz
 17306  0D4A  2D52               	goto	l8648
 17307  0D4B  3000               	movlw	0
 17308  0D4C  00AE               	movwf	?___ftdiv
 17309  0D4D  3000               	movlw	0
 17310  0D4E  00AF               	movwf	?___ftdiv+1
 17311  0D4F  3000               	movlw	0
 17312  0D50  00B0               	movwf	?___ftdiv+2
 17313  0D51  0008               	return
 17314  0D52                     l8648:	
 17315  0D52  3000               	movlw	0
 17316  0D53  00B9               	movwf	___ftdiv@f3
 17317  0D54  3000               	movlw	0
 17318  0D55  00BA               	movwf	___ftdiv@f3+1
 17319  0D56  3000               	movlw	0
 17320  0D57  00BB               	movwf	___ftdiv@f3+2
 17321  0D58  3089               	movlw	137
 17322  0D59  073D               	addwf	___ftdiv@sign,w
 17323  0D5A  00B4               	movwf	??___ftdiv
 17324  0D5B  0834               	movf	??___ftdiv,w
 17325  0D5C  02BC               	subwf	___ftdiv@exp,f
 17326  0D5D  0831               	movf	___ftdiv@f1,w
 17327  0D5E  00B4               	movwf	??___ftdiv
 17328  0D5F  0832               	movf	___ftdiv@f1+1,w
 17329  0D60  00B5               	movwf	??___ftdiv+1
 17330  0D61  0833               	movf	___ftdiv@f1+2,w
 17331  0D62  00B6               	movwf	??___ftdiv+2
 17332  0D63  3010               	movlw	16
 17333  0D64                     u9225:	
 17334  0D64  36B6               	lsrf	??___ftdiv+2,f
 17335  0D65  0CB5               	rrf	??___ftdiv+1,f
 17336  0D66  0CB4               	rrf	??___ftdiv,f
 17337  0D67  0B89               	decfsz	9,f
 17338  0D68  2D64               	goto	u9225
 17339  0D69  0834               	movf	??___ftdiv,w
 17340  0D6A  00B7               	movwf	??___ftdiv+3
 17341  0D6B  0837               	movf	??___ftdiv+3,w
 17342  0D6C  00BD               	movwf	___ftdiv@sign
 17343  0D6D  082E               	movf	___ftdiv@f2,w
 17344  0D6E  00B4               	movwf	??___ftdiv
 17345  0D6F  082F               	movf	___ftdiv@f2+1,w
 17346  0D70  00B5               	movwf	??___ftdiv+1
 17347  0D71  0830               	movf	___ftdiv@f2+2,w
 17348  0D72  00B6               	movwf	??___ftdiv+2
 17349  0D73  3010               	movlw	16
 17350  0D74                     u9235:	
 17351  0D74  36B6               	lsrf	??___ftdiv+2,f
 17352  0D75  0CB5               	rrf	??___ftdiv+1,f
 17353  0D76  0CB4               	rrf	??___ftdiv,f
 17354  0D77  0B89               	decfsz	9,f
 17355  0D78  2D74               	goto	u9235
 17356  0D79  0834               	movf	??___ftdiv,w
 17357  0D7A  00B7               	movwf	??___ftdiv+3
 17358  0D7B  0837               	movf	??___ftdiv+3,w
 17359  0D7C  06BD               	xorwf	___ftdiv@sign,f
 17360  0D7D  3080               	movlw	128
 17361  0D7E  00B4               	movwf	??___ftdiv
 17362  0D7F  0834               	movf	??___ftdiv,w
 17363  0D80  05BD               	andwf	___ftdiv@sign,f
 17364  0D81  17B2               	bsf	___ftdiv@f1+1,7
 17365  0D82  30FF               	movlw	255
 17366  0D83  05B1               	andwf	___ftdiv@f1,f
 17367  0D84  30FF               	movlw	255
 17368  0D85  05B2               	andwf	___ftdiv@f1+1,f
 17369  0D86  3000               	movlw	0
 17370  0D87  05B3               	andwf	___ftdiv@f1+2,f
 17371  0D88  17AF               	bsf	___ftdiv@f2+1,7
 17372  0D89  30FF               	movlw	255
 17373  0D8A  05AE               	andwf	___ftdiv@f2,f
 17374  0D8B  30FF               	movlw	255
 17375  0D8C  05AF               	andwf	___ftdiv@f2+1,f
 17376  0D8D  3000               	movlw	0
 17377  0D8E  05B0               	andwf	___ftdiv@f2+2,f
 17378  0D8F  3018               	movlw	24
 17379  0D90  00B4               	movwf	??___ftdiv
 17380  0D91  0834               	movf	??___ftdiv,w
 17381  0D92  00B8               	movwf	___ftdiv@cntr
 17382  0D93                     l8662:	
 17383  0D93  3001               	movlw	1
 17384  0D94                     u9245:	
 17385  0D94  35B9               	lslf	___ftdiv@f3,f
 17386  0D95  0DBA               	rlf	___ftdiv@f3+1,f
 17387  0D96  0DBB               	rlf	___ftdiv@f3+2,f
 17388  0D97  0B89               	decfsz	9,f
 17389  0D98  2D94               	goto	u9245
 17390  0D99  0830               	movf	___ftdiv@f2+2,w
 17391  0D9A  0233               	subwf	___ftdiv@f1+2,w
 17392  0D9B  1D03               	skipz
 17393  0D9C  2DA3               	goto	u9255
 17394  0D9D  082F               	movf	___ftdiv@f2+1,w
 17395  0D9E  0232               	subwf	___ftdiv@f1+1,w
 17396  0D9F  1D03               	skipz
 17397  0DA0  2DA3               	goto	u9255
 17398  0DA1  082E               	movf	___ftdiv@f2,w
 17399  0DA2  0231               	subwf	___ftdiv@f1,w
 17400  0DA3                     u9255:	
 17401  0DA3  1C03               	skipc
 17402  0DA4  2DAC               	goto	l8670
 17403  0DA5  082E               	movf	___ftdiv@f2,w
 17404  0DA6  02B1               	subwf	___ftdiv@f1,f
 17405  0DA7  082F               	movf	___ftdiv@f2+1,w
 17406  0DA8  3BB2               	subwfb	___ftdiv@f1+1,f
 17407  0DA9  0830               	movf	___ftdiv@f2+2,w
 17408  0DAA  3BB3               	subwfb	___ftdiv@f1+2,f
 17409  0DAB  1439               	bsf	___ftdiv@f3,0
 17410  0DAC                     l8670:	
 17411  0DAC  3001               	movlw	1
 17412  0DAD                     u9265:	
 17413  0DAD  35B1               	lslf	___ftdiv@f1,f
 17414  0DAE  0DB2               	rlf	___ftdiv@f1+1,f
 17415  0DAF  0DB3               	rlf	___ftdiv@f1+2,f
 17416  0DB0  0B89               	decfsz	9,f
 17417  0DB1  2DAD               	goto	u9265
 17418  0DB2  3001               	movlw	1
 17419  0DB3  02B8               	subwf	___ftdiv@cntr,f
 17420  0DB4  1D03               	btfss	3,2
 17421  0DB5  2D93               	goto	l8662
 17422  0DB6  0839               	movf	___ftdiv@f3,w
 17423  0DB7  00A0               	movwf	___ftpack@arg
 17424  0DB8  083A               	movf	___ftdiv@f3+1,w
 17425  0DB9  00A1               	movwf	___ftpack@arg+1
 17426  0DBA  083B               	movf	___ftdiv@f3+2,w
 17427  0DBB  00A2               	movwf	___ftpack@arg+2
 17428  0DBC  083C               	movf	___ftdiv@exp,w
 17429  0DBD  00B4               	movwf	??___ftdiv
 17430  0DBE  0834               	movf	??___ftdiv,w
 17431  0DBF  00A3               	movwf	___ftpack@exp
 17432  0DC0  083D               	movf	___ftdiv@sign,w
 17433  0DC1  00B5               	movwf	??___ftdiv+1
 17434  0DC2  0835               	movf	??___ftdiv+1,w
 17435  0DC3  00A4               	movwf	___ftpack@sign
 17436  0DC4  3196  260C         	fcall	___ftpack
 17437  0DC6  0020               	movlb	0	; select bank0
 17438  0DC7  0820               	movf	?___ftpack,w
 17439  0DC8  00AE               	movwf	?___ftdiv
 17440  0DC9  0821               	movf	?___ftpack+1,w
 17441  0DCA  00AF               	movwf	?___ftdiv+1
 17442  0DCB  0822               	movf	?___ftpack+2,w
 17443  0DCC  00B0               	movwf	?___ftdiv+2
 17444  0DCD  0008               	return
 17445  0DCE                     __end_of___ftdiv:	
 17446                           
 17447                           	psect	text122
 17448  0381                     __ptext122:	
 17449 ;; *************** function ___ftadd *****************
 17450 ;; Defined at:
 17451 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17452 ;; Parameters:    Size  Location     Type
 17453 ;;  f1              3   33[BANK0 ] float 
 17454 ;;  f2              3   36[BANK0 ] float 
 17455 ;; Auto vars:     Size  Location     Type
 17456 ;;  exp1            1   45[BANK0 ] unsigned char 
 17457 ;;  exp2            1   44[BANK0 ] unsigned char 
 17458 ;;  sign            1   43[BANK0 ] unsigned char 
 17459 ;; Return value:  Size  Location     Type
 17460 ;;                  3   33[BANK0 ] float 
 17461 ;; Registers used:
 17462 ;;		wreg, status,2, status,0, pclath, cstack
 17463 ;; Tracked objects:
 17464 ;;		On entry : 0/0
 17465 ;;		On exit  : 0/0
 17466 ;;		Unchanged: 0/0
 17467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17468 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17469 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17470 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17471 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17472 ;;Total ram usage:       13 bytes
 17473 ;; Hardware stack levels used:    1
 17474 ;; Hardware stack levels required when called:    6
 17475 ;; This function calls:
 17476 ;;		___ftpack
 17477 ;; This function is called by:
 17478 ;;		_getDimmerLights_PercentToValue
 17479 ;;		_getDimmerLights_ValueToPercent
 17480 ;; This function uses a non-reentrant model
 17481 ;;
 17482                           
 17483                           
 17484                           ;psect for function ___ftadd
 17485  0381                     ___ftadd:	
 17486                           
 17487                           ;incstack = 0
 17488                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17489  0381  0020               	movlb	0	; select bank0
 17490  0382  0841               	movf	___ftadd@f1,w
 17491  0383  00C7               	movwf	??___ftadd
 17492  0384  0842               	movf	___ftadd@f1+1,w
 17493  0385  00C8               	movwf	??___ftadd+1
 17494  0386  0843               	movf	___ftadd@f1+2,w
 17495  0387  00C9               	movwf	??___ftadd+2
 17496  0388  1003               	clrc
 17497  0389  0D48               	rlf	??___ftadd+1,w
 17498  038A  0D49               	rlf	??___ftadd+2,w
 17499  038B  00CA               	movwf	??___ftadd+3
 17500  038C  084A               	movf	??___ftadd+3,w
 17501  038D  00CD               	movwf	___ftadd@exp1
 17502  038E  0844               	movf	___ftadd@f2,w
 17503  038F  00C7               	movwf	??___ftadd
 17504  0390  0845               	movf	___ftadd@f2+1,w
 17505  0391  00C8               	movwf	??___ftadd+1
 17506  0392  0846               	movf	___ftadd@f2+2,w
 17507  0393  00C9               	movwf	??___ftadd+2
 17508  0394  1003               	clrc
 17509  0395  0D48               	rlf	??___ftadd+1,w
 17510  0396  0D49               	rlf	??___ftadd+2,w
 17511  0397  00CA               	movwf	??___ftadd+3
 17512  0398  084A               	movf	??___ftadd+3,w
 17513  0399  00CC               	movwf	___ftadd@exp2
 17514  039A  084D               	movf	___ftadd@exp1,w
 17515  039B  1903               	btfsc	3,2
 17516  039C  2BA9               	goto	l8572
 17517  039D  084C               	movf	___ftadd@exp2,w
 17518  039E  024D               	subwf	___ftadd@exp1,w
 17519  039F  1803               	skipnc
 17520  03A0  2BB0               	goto	l8576
 17521  03A1  034D               	decf	___ftadd@exp1,w
 17522  03A2  3AFF               	xorlw	255
 17523  03A3  074C               	addwf	___ftadd@exp2,w
 17524  03A4  00C7               	movwf	??___ftadd
 17525  03A5  3019               	movlw	25
 17526  03A6  0247               	subwf	??___ftadd,w
 17527  03A7  1C03               	skipc
 17528  03A8  2BB0               	goto	l8576
 17529  03A9                     l8572:	
 17530  03A9  0844               	movf	___ftadd@f2,w
 17531  03AA  00C1               	movwf	?___ftadd
 17532  03AB  0845               	movf	___ftadd@f2+1,w
 17533  03AC  00C2               	movwf	?___ftadd+1
 17534  03AD  0846               	movf	___ftadd@f2+2,w
 17535  03AE  00C3               	movwf	?___ftadd+2
 17536  03AF  0008               	return
 17537  03B0                     l8576:	
 17538  03B0  084C               	movf	___ftadd@exp2,w
 17539  03B1  1903               	btfsc	3,2
 17540  03B2  0008               	return
 17541  03B3  084D               	movf	___ftadd@exp1,w
 17542  03B4  024C               	subwf	___ftadd@exp2,w
 17543  03B5  1803               	skipnc
 17544  03B6  2BBF               	goto	l8582
 17545  03B7  034C               	decf	___ftadd@exp2,w
 17546  03B8  3AFF               	xorlw	255
 17547  03B9  074D               	addwf	___ftadd@exp1,w
 17548  03BA  00C7               	movwf	??___ftadd
 17549  03BB  3019               	movlw	25
 17550  03BC  0247               	subwf	??___ftadd,w
 17551  03BD  1803               	btfsc	3,0
 17552  03BE  0008               	return
 17553  03BF                     l8582:	
 17554  03BF  3006               	movlw	6
 17555  03C0  00C7               	movwf	??___ftadd
 17556  03C1  0847               	movf	??___ftadd,w
 17557  03C2  00CB               	movwf	___ftadd@sign
 17558  03C3  1BC3               	btfsc	___ftadd@f1+2,7
 17559  03C4  17CB               	bsf	___ftadd@sign,7
 17560  03C5  1BC6               	btfsc	___ftadd@f2+2,7
 17561  03C6  174B               	bsf	___ftadd@sign,6
 17562  03C7  17C2               	bsf	___ftadd@f1+1,7
 17563  03C8  30FF               	movlw	255
 17564  03C9  05C1               	andwf	___ftadd@f1,f
 17565  03CA  30FF               	movlw	255
 17566  03CB  05C2               	andwf	___ftadd@f1+1,f
 17567  03CC  3000               	movlw	0
 17568  03CD  05C3               	andwf	___ftadd@f1+2,f
 17569  03CE  17C5               	bsf	___ftadd@f2+1,7
 17570  03CF  30FF               	movlw	255
 17571  03D0  05C4               	andwf	___ftadd@f2,f
 17572  03D1  30FF               	movlw	255
 17573  03D2  05C5               	andwf	___ftadd@f2+1,f
 17574  03D3  3000               	movlw	0
 17575  03D4  05C6               	andwf	___ftadd@f2+2,f
 17576  03D5  084C               	movf	___ftadd@exp2,w
 17577  03D6  024D               	subwf	___ftadd@exp1,w
 17578  03D7  1803               	skipnc
 17579  03D8  2BFB               	goto	l8604
 17580  03D9                     l8594:	
 17581  03D9  3001               	movlw	1
 17582  03DA                     u9065:	
 17583  03DA  35C4               	lslf	___ftadd@f2,f
 17584  03DB  0DC5               	rlf	___ftadd@f2+1,f
 17585  03DC  0DC6               	rlf	___ftadd@f2+2,f
 17586  03DD  0B89               	decfsz	9,f
 17587  03DE  2BDA               	goto	u9065
 17588  03DF  3001               	movlw	1
 17589  03E0  02CC               	subwf	___ftadd@exp2,f
 17590  03E1  084C               	movf	___ftadd@exp2,w
 17591  03E2  064D               	xorwf	___ftadd@exp1,w
 17592  03E3  1903               	skipnz
 17593  03E4  2BF6               	goto	l8602
 17594  03E5  3001               	movlw	1
 17595  03E6  02CB               	subwf	___ftadd@sign,f
 17596  03E7  084B               	movf	___ftadd@sign,w
 17597  03E8  3907               	andlw	7
 17598  03E9  1903               	btfsc	3,2
 17599  03EA  2BF6               	goto	l8602
 17600  03EB  2BD9               	goto	l8594
 17601  03EC                     l8600:	
 17602  03EC  3001               	movlw	1
 17603  03ED                     u9095:	
 17604  03ED  36C3               	lsrf	___ftadd@f1+2,f
 17605  03EE  0CC2               	rrf	___ftadd@f1+1,f
 17606  03EF  0CC1               	rrf	___ftadd@f1,f
 17607  03F0  0B89               	decfsz	9,f
 17608  03F1  2BED               	goto	u9095
 17609  03F2  3001               	movlw	1
 17610  03F3  00C7               	movwf	??___ftadd
 17611  03F4  0847               	movf	??___ftadd,w
 17612  03F5  07CD               	addwf	___ftadd@exp1,f
 17613  03F6                     l8602:	
 17614  03F6  084D               	movf	___ftadd@exp1,w
 17615  03F7  064C               	xorwf	___ftadd@exp2,w
 17616  03F8  1903               	btfsc	3,2
 17617  03F9  2C20               	goto	l2885
 17618  03FA  2BEC               	goto	l8600
 17619  03FB                     l8604:	
 17620  03FB  084D               	movf	___ftadd@exp1,w
 17621  03FC  024C               	subwf	___ftadd@exp2,w
 17622  03FD  1803               	skipnc
 17623  03FE  2C20               	goto	l2885
 17624  03FF                     l8606:	
 17625  03FF  3001               	movlw	1
 17626  0400                     u9125:	
 17627  0400  35C1               	lslf	___ftadd@f1,f
 17628  0401  0DC2               	rlf	___ftadd@f1+1,f
 17629  0402  0DC3               	rlf	___ftadd@f1+2,f
 17630  0403  0B89               	decfsz	9,f
 17631  0404  2C00               	goto	u9125
 17632  0405  3001               	movlw	1
 17633  0406  02CD               	subwf	___ftadd@exp1,f
 17634  0407  084C               	movf	___ftadd@exp2,w
 17635  0408  064D               	xorwf	___ftadd@exp1,w
 17636  0409  1903               	skipnz
 17637  040A  2C1C               	goto	l8614
 17638  040B  3001               	movlw	1
 17639  040C  02CB               	subwf	___ftadd@sign,f
 17640  040D  084B               	movf	___ftadd@sign,w
 17641  040E  3907               	andlw	7
 17642  040F  1903               	btfsc	3,2
 17643  0410  2C1C               	goto	l8614
 17644  0411  2BFF               	goto	l8606
 17645  0412                     l8612:	
 17646  0412  3001               	movlw	1
 17647  0413                     u9155:	
 17648  0413  36C6               	lsrf	___ftadd@f2+2,f
 17649  0414  0CC5               	rrf	___ftadd@f2+1,f
 17650  0415  0CC4               	rrf	___ftadd@f2,f
 17651  0416  0B89               	decfsz	9,f
 17652  0417  2C13               	goto	u9155
 17653  0418  3001               	movlw	1
 17654  0419  00C7               	movwf	??___ftadd
 17655  041A  0847               	movf	??___ftadd,w
 17656  041B  07CC               	addwf	___ftadd@exp2,f
 17657  041C                     l8614:	
 17658  041C  084D               	movf	___ftadd@exp1,w
 17659  041D  064C               	xorwf	___ftadd@exp2,w
 17660  041E  1D03               	skipz
 17661  041F  2C12               	goto	l8612
 17662  0420                     l2885:	
 17663  0420  1FCB               	btfss	___ftadd@sign,7
 17664  0421  2C32               	goto	l8618
 17665  0422  30FF               	movlw	255
 17666  0423  06C1               	xorwf	___ftadd@f1,f
 17667  0424  30FF               	movlw	255
 17668  0425  06C2               	xorwf	___ftadd@f1+1,f
 17669  0426  30FF               	movlw	255
 17670  0427  06C3               	xorwf	___ftadd@f1+2,f
 17671  0428  3001               	movlw	1
 17672  0429  07C1               	addwf	___ftadd@f1,f
 17673  042A  3000               	movlw	0
 17674  042B  1803               	skipnc
 17675  042C  3001               	movlw	1
 17676  042D  07C2               	addwf	___ftadd@f1+1,f
 17677  042E  3000               	movlw	0
 17678  042F  1803               	skipnc
 17679  0430  3001               	movlw	1
 17680  0431  07C3               	addwf	___ftadd@f1+2,f
 17681  0432                     l8618:	
 17682  0432  1F4B               	btfss	___ftadd@sign,6
 17683  0433  2C44               	goto	l8622
 17684  0434  30FF               	movlw	255
 17685  0435  06C4               	xorwf	___ftadd@f2,f
 17686  0436  30FF               	movlw	255
 17687  0437  06C5               	xorwf	___ftadd@f2+1,f
 17688  0438  30FF               	movlw	255
 17689  0439  06C6               	xorwf	___ftadd@f2+2,f
 17690  043A  3001               	movlw	1
 17691  043B  07C4               	addwf	___ftadd@f2,f
 17692  043C  3000               	movlw	0
 17693  043D  1803               	skipnc
 17694  043E  3001               	movlw	1
 17695  043F  07C5               	addwf	___ftadd@f2+1,f
 17696  0440  3000               	movlw	0
 17697  0441  1803               	skipnc
 17698  0442  3001               	movlw	1
 17699  0443  07C6               	addwf	___ftadd@f2+2,f
 17700  0444                     l8622:	
 17701  0444  01CB               	clrf	___ftadd@sign
 17702  0445  0841               	movf	___ftadd@f1,w
 17703  0446  07C4               	addwf	___ftadd@f2,f
 17704  0447  0842               	movf	___ftadd@f1+1,w
 17705  0448  3DC5               	addwfc	___ftadd@f2+1,f
 17706  0449  0843               	movf	___ftadd@f1+2,w
 17707  044A  3DC6               	addwfc	___ftadd@f2+2,f
 17708  044B  1FC6               	btfss	___ftadd@f2+2,7
 17709  044C  2C5F               	goto	l8632
 17710  044D  30FF               	movlw	255
 17711  044E  06C4               	xorwf	___ftadd@f2,f
 17712  044F  30FF               	movlw	255
 17713  0450  06C5               	xorwf	___ftadd@f2+1,f
 17714  0451  30FF               	movlw	255
 17715  0452  06C6               	xorwf	___ftadd@f2+2,f
 17716  0453  3001               	movlw	1
 17717  0454  07C4               	addwf	___ftadd@f2,f
 17718  0455  3000               	movlw	0
 17719  0456  1803               	skipnc
 17720  0457  3001               	movlw	1
 17721  0458  07C5               	addwf	___ftadd@f2+1,f
 17722  0459  3000               	movlw	0
 17723  045A  1803               	skipnc
 17724  045B  3001               	movlw	1
 17725  045C  07C6               	addwf	___ftadd@f2+2,f
 17726  045D  01CB               	clrf	___ftadd@sign
 17727  045E  0ACB               	incf	___ftadd@sign,f
 17728  045F                     l8632:	
 17729  045F  0844               	movf	___ftadd@f2,w
 17730  0460  00A0               	movwf	___ftpack@arg
 17731  0461  0845               	movf	___ftadd@f2+1,w
 17732  0462  00A1               	movwf	___ftpack@arg+1
 17733  0463  0846               	movf	___ftadd@f2+2,w
 17734  0464  00A2               	movwf	___ftpack@arg+2
 17735  0465  084D               	movf	___ftadd@exp1,w
 17736  0466  00C7               	movwf	??___ftadd
 17737  0467  0847               	movf	??___ftadd,w
 17738  0468  00A3               	movwf	___ftpack@exp
 17739  0469  084B               	movf	___ftadd@sign,w
 17740  046A  00C8               	movwf	??___ftadd+1
 17741  046B  0848               	movf	??___ftadd+1,w
 17742  046C  00A4               	movwf	___ftpack@sign
 17743  046D  3196  260C         	fcall	___ftpack
 17744  046F  0020               	movlb	0	; select bank0
 17745  0470  0820               	movf	?___ftpack,w
 17746  0471  00C1               	movwf	?___ftadd
 17747  0472  0821               	movf	?___ftpack+1,w
 17748  0473  00C2               	movwf	?___ftadd+1
 17749  0474  0822               	movf	?___ftpack+2,w
 17750  0475  00C3               	movwf	?___ftadd+2
 17751  0476  0008               	return
 17752  0477                     __end_of___ftadd:	
 17753                           
 17754                           	psect	text123
 17755  1F96                     __ptext123:	
 17756 ;; *************** function ___awtoft *****************
 17757 ;; Defined at:
 17758 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17759 ;; Parameters:    Size  Location     Type
 17760 ;;  c               2    8[BANK0 ] int 
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  sign            1   13[BANK0 ] unsigned char 
 17763 ;; Return value:  Size  Location     Type
 17764 ;;                  3    8[BANK0 ] float 
 17765 ;; Registers used:
 17766 ;;		wreg, status,2, status,0, pclath, cstack
 17767 ;; Tracked objects:
 17768 ;;		On entry : 0/0
 17769 ;;		On exit  : 0/0
 17770 ;;		Unchanged: 0/0
 17771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17772 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;Total ram usage:        6 bytes
 17777 ;; Hardware stack levels used:    1
 17778 ;; Hardware stack levels required when called:    6
 17779 ;; This function calls:
 17780 ;;		___ftpack
 17781 ;; This function is called by:
 17782 ;;		_getDimmerLights_PercentToValue
 17783 ;;		_getDimmerLights_ValueToPercent
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           
 17788                           ;psect for function ___awtoft
 17789  1F96                     ___awtoft:	
 17790                           
 17791                           ;incstack = 0
 17792                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17793  1F96  0020               	movlb	0	; select bank0
 17794  1F97  01AD               	clrf	___awtoft@sign
 17795  1F98  1FA9               	btfss	___awtoft@c+1,7
 17796  1F99  2FA1               	goto	l8560
 17797  1F9A  09A8               	comf	___awtoft@c,f
 17798  1F9B  09A9               	comf	___awtoft@c+1,f
 17799  1F9C  0AA8               	incf	___awtoft@c,f
 17800  1F9D  1903               	skipnz
 17801  1F9E  0AA9               	incf	___awtoft@c+1,f
 17802  1F9F  01AD               	clrf	___awtoft@sign
 17803  1FA0  0AAD               	incf	___awtoft@sign,f
 17804  1FA1                     l8560:	
 17805  1FA1  0828               	movf	___awtoft@c,w
 17806  1FA2  00A0               	movwf	___ftpack@arg
 17807  1FA3  0829               	movf	___awtoft@c+1,w
 17808  1FA4  00A1               	movwf	___ftpack@arg+1
 17809  1FA5  01A2               	clrf	___ftpack@arg+2
 17810  1FA6  308E               	movlw	142
 17811  1FA7  00AB               	movwf	??___awtoft
 17812  1FA8  082B               	movf	??___awtoft,w
 17813  1FA9  00A3               	movwf	___ftpack@exp
 17814  1FAA  082D               	movf	___awtoft@sign,w
 17815  1FAB  00AC               	movwf	??___awtoft+1
 17816  1FAC  082C               	movf	??___awtoft+1,w
 17817  1FAD  00A4               	movwf	___ftpack@sign
 17818  1FAE  3196  260C         	fcall	___ftpack
 17819  1FB0  0020               	movlb	0	; select bank0
 17820  1FB1  0820               	movf	?___ftpack,w
 17821  1FB2  00A8               	movwf	?___awtoft
 17822  1FB3  0821               	movf	?___ftpack+1,w
 17823  1FB4  00A9               	movwf	?___awtoft+1
 17824  1FB5  0822               	movf	?___ftpack+2,w
 17825  1FB6  00AA               	movwf	?___awtoft+2
 17826  1FB7  0008               	return
 17827  1FB8                     __end_of___awtoft:	
 17828                           
 17829                           	psect	text124
 17830  160C                     __ptext124:	
 17831 ;; *************** function ___ftpack *****************
 17832 ;; Defined at:
 17833 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17834 ;; Parameters:    Size  Location     Type
 17835 ;;  arg             3    0[BANK0 ] unsigned um
 17836 ;;  exp             1    3[BANK0 ] unsigned char 
 17837 ;;  sign            1    4[BANK0 ] unsigned char 
 17838 ;; Auto vars:     Size  Location     Type
 17839 ;;		None
 17840 ;; Return value:  Size  Location     Type
 17841 ;;                  3    0[BANK0 ] float 
 17842 ;; Registers used:
 17843 ;;		wreg, status,2, status,0
 17844 ;; Tracked objects:
 17845 ;;		On entry : 0/0
 17846 ;;		On exit  : 0/0
 17847 ;;		Unchanged: 0/0
 17848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17849 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17853 ;;Total ram usage:        8 bytes
 17854 ;; Hardware stack levels used:    1
 17855 ;; Hardware stack levels required when called:    5
 17856 ;; This function calls:
 17857 ;;		Nothing
 17858 ;; This function is called by:
 17859 ;;		___awtoft
 17860 ;;		___ftadd
 17861 ;;		___ftdiv
 17862 ;;		___ftmul
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           
 17867                           ;psect for function ___ftpack
 17868  160C                     ___ftpack:	
 17869                           
 17870                           ;incstack = 0
 17871                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17872  160C  0020               	movlb	0	; select bank0
 17873  160D  0823               	movf	___ftpack@exp,w
 17874  160E  1903               	btfsc	3,2
 17875  160F  2E15               	goto	l8428
 17876  1610  0822               	movf	___ftpack@arg+2,w
 17877  1611  0421               	iorwf	___ftpack@arg+1,w
 17878  1612  0420               	iorwf	___ftpack@arg,w
 17879  1613  1D03               	skipz
 17880  1614  2E26               	goto	l8434
 17881  1615                     l8428:	
 17882  1615  3000               	movlw	0
 17883  1616  00A0               	movwf	?___ftpack
 17884  1617  3000               	movlw	0
 17885  1618  00A1               	movwf	?___ftpack+1
 17886  1619  3000               	movlw	0
 17887  161A  00A2               	movwf	?___ftpack+2
 17888  161B  0008               	return
 17889  161C                     l8432:	
 17890  161C  3001               	movlw	1
 17891  161D  00A5               	movwf	??___ftpack
 17892  161E  0825               	movf	??___ftpack,w
 17893  161F  07A3               	addwf	___ftpack@exp,f
 17894  1620  3001               	movlw	1
 17895  1621                     u8695:	
 17896  1621  36A2               	lsrf	___ftpack@arg+2,f
 17897  1622  0CA1               	rrf	___ftpack@arg+1,f
 17898  1623  0CA0               	rrf	___ftpack@arg,f
 17899  1624  0B89               	decfsz	9,f
 17900  1625  2E21               	goto	u8695
 17901  1626                     l8434:	
 17902  1626  30FE               	movlw	254
 17903  1627  0522               	andwf	___ftpack@arg+2,w
 17904  1628  1903               	btfsc	3,2
 17905  1629  2E3F               	goto	l2856
 17906  162A  2E1C               	goto	l8432
 17907  162B                     l8436:	
 17908  162B  3001               	movlw	1
 17909  162C  00A5               	movwf	??___ftpack
 17910  162D  0825               	movf	??___ftpack,w
 17911  162E  07A3               	addwf	___ftpack@exp,f
 17912  162F  3001               	movlw	1
 17913  1630  07A0               	addwf	___ftpack@arg,f
 17914  1631  3000               	movlw	0
 17915  1632  1803               	skipnc
 17916  1633  3001               	movlw	1
 17917  1634  07A1               	addwf	___ftpack@arg+1,f
 17918  1635  3000               	movlw	0
 17919  1636  1803               	skipnc
 17920  1637  3001               	movlw	1
 17921  1638  07A2               	addwf	___ftpack@arg+2,f
 17922  1639  3001               	movlw	1
 17923  163A                     u8715:	
 17924  163A  36A2               	lsrf	___ftpack@arg+2,f
 17925  163B  0CA1               	rrf	___ftpack@arg+1,f
 17926  163C  0CA0               	rrf	___ftpack@arg,f
 17927  163D  0B89               	decfsz	9,f
 17928  163E  2E3A               	goto	u8715
 17929  163F                     l2856:	
 17930  163F  30FF               	movlw	255
 17931  1640  0522               	andwf	___ftpack@arg+2,w
 17932  1641  1903               	btfsc	3,2
 17933  1642  2E4C               	goto	l8444
 17934  1643  2E2B               	goto	l8436
 17935  1644                     l8442:	
 17936  1644  3001               	movlw	1
 17937  1645  02A3               	subwf	___ftpack@exp,f
 17938  1646  3001               	movlw	1
 17939  1647                     u8735:	
 17940  1647  35A0               	lslf	___ftpack@arg,f
 17941  1648  0DA1               	rlf	___ftpack@arg+1,f
 17942  1649  0DA2               	rlf	___ftpack@arg+2,f
 17943  164A  0B89               	decfsz	9,f
 17944  164B  2E47               	goto	u8735
 17945  164C                     l8444:	
 17946  164C  1FA1               	btfss	___ftpack@arg+1,7
 17947  164D  2E44               	goto	l8442
 17948  164E  1823               	btfsc	___ftpack@exp,0
 17949  164F  2E56               	goto	l2862
 17950  1650  30FF               	movlw	255
 17951  1651  05A0               	andwf	___ftpack@arg,f
 17952  1652  307F               	movlw	127
 17953  1653  05A1               	andwf	___ftpack@arg+1,f
 17954  1654  30FF               	movlw	255
 17955  1655  05A2               	andwf	___ftpack@arg+2,f
 17956  1656                     l2862:	
 17957  1656  1003               	clrc
 17958  1657  0CA3               	rrf	___ftpack@exp,f
 17959  1658  0823               	movf	___ftpack@exp,w
 17960  1659  00A5               	movwf	??___ftpack
 17961  165A  01A6               	clrf	??___ftpack+1
 17962  165B  01A7               	clrf	??___ftpack+2
 17963  165C  3010               	movlw	16
 17964  165D                     u8765:	
 17965  165D  35A5               	lslf	??___ftpack,f
 17966  165E  0DA6               	rlf	??___ftpack+1,f
 17967  165F  0DA7               	rlf	??___ftpack+2,f
 17968  1660  0B89               	decfsz	9,f
 17969  1661  2E5D               	goto	u8765
 17970  1662  0825               	movf	??___ftpack,w
 17971  1663  04A0               	iorwf	___ftpack@arg,f
 17972  1664  0826               	movf	??___ftpack+1,w
 17973  1665  04A1               	iorwf	___ftpack@arg+1,f
 17974  1666  0827               	movf	??___ftpack+2,w
 17975  1667  04A2               	iorwf	___ftpack@arg+2,f
 17976  1668  0824               	movf	___ftpack@sign,w
 17977  1669  1903               	btfsc	3,2
 17978  166A  0008               	return
 17979  166B  17A2               	bsf	___ftpack@arg+2,7
 17980  166C  0008               	return
 17981  166D                     __end_of___ftpack:	
 17982                           
 17983                           	psect	text125
 17984  1BB7                     __ptext125:	
 17985 ;; *************** function _Division *****************
 17986 ;; Defined at:
 17987 ;;		line 1382 in file "../src/Dimmer_B1.c"
 17988 ;; Parameters:    Size  Location     Type
 17989 ;;  value           1    wreg     unsigned char 
 17990 ;;  num             1    5[BANK0 ] unsigned char 
 17991 ;; Auto vars:     Size  Location     Type
 17992 ;;  value           1    8[BANK0 ] unsigned char 
 17993 ;;  result          1    9[BANK0 ] unsigned char 
 17994 ;; Return value:  Size  Location     Type
 17995 ;;                  1    wreg      unsigned char 
 17996 ;; Registers used:
 17997 ;;		wreg, status,2, status,0, pclath, cstack
 17998 ;; Tracked objects:
 17999 ;;		On entry : 0/0
 18000 ;;		On exit  : 0/0
 18001 ;;		Unchanged: 0/0
 18002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18003 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18004 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;Total ram usage:        5 bytes
 18008 ;; Hardware stack levels used:    1
 18009 ;; Hardware stack levels required when called:    6
 18010 ;; This function calls:
 18011 ;;		___lbdiv
 18012 ;; This function is called by:
 18013 ;;		_DimmerIntr_Initialization
 18014 ;; This function uses a non-reentrant model
 18015 ;;
 18016                           
 18017                           
 18018                           ;psect for function _Division
 18019  1BB7                     _Division:	
 18020                           
 18021                           ;incstack = 0
 18022                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18023                           ;Division@value stored from wreg
 18024  1BB7  0020               	movlb	0	; select bank0
 18025  1BB8  00A8               	movwf	Division@value
 18026                           
 18027                           ;Dimmer_B1.c: 1383: char result = (char) (value / num);
 18028  1BB9  0825               	movf	Division@num,w
 18029  1BBA  00A6               	movwf	??_Division
 18030  1BBB  0826               	movf	??_Division,w
 18031  1BBC  00A0               	movwf	___lbdiv@divisor
 18032  1BBD  0828               	movf	Division@value,w
 18033  1BBE  319F  2774         	fcall	___lbdiv
 18034  1BC0  0020               	movlb	0	; select bank0
 18035  1BC1  00A7               	movwf	??_Division+1
 18036  1BC2  0827               	movf	??_Division+1,w
 18037  1BC3  00A9               	movwf	Division@result
 18038                           
 18039                           ;Dimmer_B1.c: 1384: return result;
 18040  1BC4  0829               	movf	Division@result,w
 18041  1BC5  0008               	return
 18042  1BC6                     __end_of_Division:	
 18043                           
 18044                           	psect	text126
 18045  1F74                     __ptext126:	
 18046 ;; *************** function ___lbdiv *****************
 18047 ;; Defined at:
 18048 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18049 ;; Parameters:    Size  Location     Type
 18050 ;;  dividend        1    wreg     unsigned char 
 18051 ;;  divisor         1    0[BANK0 ] unsigned char 
 18052 ;; Auto vars:     Size  Location     Type
 18053 ;;  dividend        1    2[BANK0 ] unsigned char 
 18054 ;;  quotient        1    4[BANK0 ] unsigned char 
 18055 ;;  counter         1    3[BANK0 ] unsigned char 
 18056 ;; Return value:  Size  Location     Type
 18057 ;;                  1    wreg      unsigned char 
 18058 ;; Registers used:
 18059 ;;		wreg, status,2, status,0
 18060 ;; Tracked objects:
 18061 ;;		On entry : 0/0
 18062 ;;		On exit  : 0/0
 18063 ;;		Unchanged: 0/0
 18064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18065 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18066 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18068 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;Total ram usage:        5 bytes
 18070 ;; Hardware stack levels used:    1
 18071 ;; Hardware stack levels required when called:    5
 18072 ;; This function calls:
 18073 ;;		Nothing
 18074 ;; This function is called by:
 18075 ;;		_Division
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           
 18080                           ;psect for function ___lbdiv
 18081  1F74                     ___lbdiv:	
 18082                           
 18083                           ;incstack = 0
 18084                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18085                           ;___lbdiv@dividend stored from wreg
 18086  1F74  0020               	movlb	0	; select bank0
 18087  1F75  00A2               	movwf	___lbdiv@dividend
 18088  1F76  01A4               	clrf	___lbdiv@quotient
 18089  1F77  0820               	movf	___lbdiv@divisor,w
 18090  1F78  1903               	btfsc	3,2
 18091  1F79  2F94               	goto	l9382
 18092  1F7A  01A3               	clrf	___lbdiv@counter
 18093  1F7B  0AA3               	incf	___lbdiv@counter,f
 18094  1F7C                     l9370:	
 18095  1F7C  1BA0               	btfsc	___lbdiv@divisor,7
 18096  1F7D  2F85               	goto	l9372
 18097  1F7E  1003               	clrc
 18098  1F7F  0DA0               	rlf	___lbdiv@divisor,f
 18099  1F80  3001               	movlw	1
 18100  1F81  00A1               	movwf	??___lbdiv
 18101  1F82  0821               	movf	??___lbdiv,w
 18102  1F83  07A3               	addwf	___lbdiv@counter,f
 18103  1F84  2F7C               	goto	l9370
 18104  1F85                     l9372:	
 18105  1F85  1003               	clrc
 18106  1F86  0DA4               	rlf	___lbdiv@quotient,f
 18107  1F87  0820               	movf	___lbdiv@divisor,w
 18108  1F88  0222               	subwf	___lbdiv@dividend,w
 18109  1F89  1C03               	skipc
 18110  1F8A  2F8F               	goto	L9
 18111  1F8B  0820               	movf	___lbdiv@divisor,w
 18112  1F8C  02A2               	subwf	___lbdiv@dividend,f
 18113  1F8D  1424               	bsf	___lbdiv@quotient,0
 18114  1F8E  1003               	clrc
 18115  1F8F                     L9:	
 18116  1F8F  0CA0               	rrf	___lbdiv@divisor,f
 18117  1F90  3001               	movlw	1
 18118  1F91  02A3               	subwf	___lbdiv@counter,f
 18119  1F92  1D03               	btfss	3,2
 18120  1F93  2F85               	goto	l9372
 18121  1F94                     l9382:	
 18122  1F94  0824               	movf	___lbdiv@quotient,w
 18123  1F95  0008               	return
 18124  1F96                     __end_of___lbdiv:	
 18125                           
 18126                           	psect	text127
 18127  1A6A                     __ptext127:	
 18128 ;; *************** function _DelayOff_Main *****************
 18129 ;; Defined at:
 18130 ;;		line 41 in file "../src/DelayOff_B1.c"
 18131 ;; Parameters:    Size  Location     Type
 18132 ;;		None
 18133 ;; Auto vars:     Size  Location     Type
 18134 ;;		None
 18135 ;; Return value:  Size  Location     Type
 18136 ;;		None               void
 18137 ;; Registers used:
 18138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18139 ;; Tracked objects:
 18140 ;;		On entry : 0/0
 18141 ;;		On exit  : 0/0
 18142 ;;		Unchanged: 0/0
 18143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18148 ;;Total ram usage:        0 bytes
 18149 ;; Hardware stack levels used:    1
 18150 ;; Hardware stack levels required when called:    9
 18151 ;; This function calls:
 18152 ;;		_DlyOff_Main
 18153 ;; This function is called by:
 18154 ;;		_main
 18155 ;; This function uses a non-reentrant model
 18156 ;;
 18157                           
 18158                           
 18159                           ;psect for function _DelayOff_Main
 18160  1A6A                     _DelayOff_Main:	
 18161                           
 18162                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18163                           
 18164                           ;incstack = 0
 18165                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18166  1A6A  3001               	movlw	1
 18167  1A6B  3189  2142         	fcall	_DlyOff_Main
 18168  1A6D  0008               	return
 18169  1A6E                     __end_of_DelayOff_Main:	
 18170                           
 18171                           	psect	text128
 18172  0942                     __ptext128:	
 18173 ;; *************** function _DlyOff_Main *****************
 18174 ;; Defined at:
 18175 ;;		line 61 in file "../src/DelayOff_B1.c"
 18176 ;; Parameters:    Size  Location     Type
 18177 ;;  sw              1    wreg     unsigned char 
 18178 ;; Auto vars:     Size  Location     Type
 18179 ;;  sw              1   71[BANK0 ] unsigned char 
 18180 ;; Return value:  Size  Location     Type
 18181 ;;		None               void
 18182 ;; Registers used:
 18183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18184 ;; Tracked objects:
 18185 ;;		On entry : 0/0
 18186 ;;		On exit  : 0/0
 18187 ;;		Unchanged: 0/0
 18188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;Total ram usage:        3 bytes
 18194 ;; Hardware stack levels used:    1
 18195 ;; Hardware stack levels required when called:    8
 18196 ;; This function calls:
 18197 ;;		_DelayOffPointSelect
 18198 ;;		_getDimmerLights_Status
 18199 ;;		_setDimmerLights_SwOff
 18200 ;;		_setDimmerLights_SwOn
 18201 ;;		_setProductData
 18202 ;; This function is called by:
 18203 ;;		_DelayOff_Main
 18204 ;; This function uses a non-reentrant model
 18205 ;;
 18206                           
 18207                           
 18208                           ;psect for function _DlyOff_Main
 18209  0942                     _DlyOff_Main:	
 18210                           
 18211                           ;incstack = 0
 18212                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18213                           ;DlyOff_Main@sw stored from wreg
 18214  0942  0020               	movlb	0	; select bank0
 18215  0943  00E7               	movwf	DlyOff_Main@sw
 18216                           
 18217                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18218  0944  0867               	movf	DlyOff_Main@sw,w
 18219  0945  319B  2326  3189   	fcall	_DelayOffPointSelect
 18220                           
 18221                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18222  0948  0021               	movlb	1	; select bank1
 18223  0949  084C               	movf	_DelayOff^(0+128),w
 18224  094A  0086               	movwf	6
 18225  094B  3001               	movlw	1	; select bank2/3
 18226  094C  0087               	movwf	7
 18227  094D  1C81               	btfss	1,1
 18228  094E  0008               	return
 18229                           
 18230                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18231  094F  084C               	movf	_DelayOff^(0+128),w
 18232  0950  3E02               	addlw	2
 18233  0951  0086               	movwf	6
 18234  0952  3001               	movlw	1	; select bank2/3
 18235  0953  0087               	movwf	7
 18236  0954  3001               	movlw	1
 18237  0955  0781               	addwf	1,f
 18238  0956  3141               	addfsr 1,1
 18239  0957  1803               	skipnc
 18240  0958  0A81               	incf	1,f
 18241                           
 18242                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18243  0959  084C               	movf	_DelayOff^(0+128),w
 18244  095A  3E02               	addlw	2
 18245  095B  0086               	movwf	6
 18246  095C  3001               	movlw	1	; select bank2/3
 18247  095D  0087               	movwf	7
 18248  095E  3F40               	moviw [0]fsr1
 18249  095F  0020               	movlb	0	; select bank0
 18250  0960  00E5               	movwf	??_DlyOff_Main
 18251  0961  3F41               	moviw [1]fsr1
 18252  0962  00E6               	movwf	??_DlyOff_Main+1
 18253  0963  300B               	movlw	11
 18254  0964  0266               	subwf	??_DlyOff_Main+1,w
 18255  0965  30B8               	movlw	184
 18256  0966  1903               	skipnz
 18257  0967  0265               	subwf	??_DlyOff_Main,w
 18258  0968  1C03               	skipc
 18259  0969  0008               	return
 18260                           
 18261                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18262  096A  0021               	movlb	1	; select bank1
 18263  096B  084C               	movf	_DelayOff^(0+128),w
 18264  096C  3E02               	addlw	2
 18265  096D  0086               	movwf	6
 18266  096E  3001               	movlw	1	; select bank2/3
 18267  096F  0087               	movwf	7
 18268  0970  3000               	movlw	0
 18269  0971  3FC0               	movwi [0]fsr1
 18270  0972  3FC1               	movwi [1]fsr1
 18271                           
 18272                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18273  0973  3001               	movlw	1
 18274  0974  0020               	movlb	0	; select bank0
 18275  0975  00E5               	movwf	??_DlyOff_Main
 18276  0976  0021               	movlb	1	; select bank1
 18277  0977  084C               	movf	_DelayOff^(0+128),w
 18278  0978  3E04               	addlw	4
 18279  0979  0086               	movwf	6
 18280  097A  3001               	movlw	1	; select bank2/3
 18281  097B  0087               	movwf	7
 18282  097C  0020               	movlb	0	; select bank0
 18283  097D  0865               	movf	??_DlyOff_Main,w
 18284  097E  0781               	addwf	1,f
 18285                           
 18286                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18287  097F  0021               	movlb	1	; select bank1
 18288  0980  084C               	movf	_DelayOff^(0+128),w
 18289  0981  3E04               	addlw	4
 18290  0982  0086               	movwf	6
 18291  0983  3001               	movlw	1	; select bank2/3
 18292  0984  0087               	movwf	7
 18293  0985  0A4C               	incf	_DelayOff^(0+128),w
 18294  0986  0084               	movwf	4
 18295  0987  3001               	movlw	1	; select bank2/3
 18296  0988  0085               	movwf	5
 18297  0989  0800               	movf	0,w
 18298  098A  0201               	subwf	1,w
 18299  098B  1C03               	skipc
 18300  098C  0008               	return
 18301                           
 18302                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18303  098D  084C               	movf	_DelayOff^(0+128),w
 18304  098E  3E04               	addlw	4
 18305  098F  0086               	movwf	6
 18306  0990  3001               	movlw	1	; select bank2/3
 18307  0991  0087               	movwf	7
 18308  0992  0181               	clrf	1
 18309                           
 18310                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18311  0993  084C               	movf	_DelayOff^(0+128),w
 18312  0994  0086               	movwf	6
 18313  0995  3001               	movlw	1	; select bank2/3
 18314  0996  0087               	movwf	7
 18315  0997  1081               	bcf	1,1
 18316                           
 18317                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18318  0998  0020               	movlb	0	; select bank0
 18319  0999  0867               	movf	DlyOff_Main@sw,w
 18320  099A  319B  23F4  3189   	fcall	_getDimmerLights_Status
 18321  099D  3A01               	xorlw	1
 18322  099E  1D03               	skipz
 18323  099F  29AA               	goto	l531
 18324                           
 18325                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18326  09A0  0020               	movlb	0	; select bank0
 18327  09A1  0867               	movf	DlyOff_Main@sw,w
 18328  09A2  3191  21FA  3189   	fcall	_setDimmerLights_SwOn
 18329                           
 18330                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18331  09A5  0020               	movlb	0	; select bank0
 18332  09A6  0867               	movf	DlyOff_Main@sw,w
 18333  09A7  3192  229C  3189   	fcall	_setDimmerLights_SwOff
 18334  09AA                     l531:	
 18335                           
 18336                           ;DelayOff_B1.c: 78: }
 18337                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18338  09AA  0020               	movlb	0	; select bank0
 18339  09AB  01E2               	clrf	setProductData@value
 18340  09AC  0867               	movf	DlyOff_Main@sw,w
 18341  09AD  3E1A               	addlw	26
 18342  09AE  319B  233E         	fcall	_setProductData
 18343  09B0  0008               	return
 18344  09B1                     __end_of_DlyOff_Main:	
 18345                           
 18346                           	psect	text129
 18347  1B3E                     __ptext129:	
 18348 ;; *************** function _setProductData *****************
 18349 ;; Defined at:
 18350 ;;		line 645 in file "../src/Main_B1.c"
 18351 ;; Parameters:    Size  Location     Type
 18352 ;;  address         1    wreg     unsigned char 
 18353 ;;  value           1   66[BANK0 ] unsigned char 
 18354 ;; Auto vars:     Size  Location     Type
 18355 ;;  address         1   68[BANK0 ] unsigned char 
 18356 ;; Return value:  Size  Location     Type
 18357 ;;		None               void
 18358 ;; Registers used:
 18359 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18360 ;; Tracked objects:
 18361 ;;		On entry : 0/0
 18362 ;;		On exit  : 0/0
 18363 ;;		Unchanged: 0/0
 18364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18365 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18368 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18369 ;;Total ram usage:        3 bytes
 18370 ;; Hardware stack levels used:    1
 18371 ;; Hardware stack levels required when called:    5
 18372 ;; This function calls:
 18373 ;;		Nothing
 18374 ;; This function is called by:
 18375 ;;		_DlyOff_Main
 18376 ;;		_setDelayOff_GO
 18377 ;;		_setDimmerLights_OnOff
 18378 ;;		_setDimmerLights_Dimming
 18379 ;;		_setTemp_Main
 18380 ;;		_setLog_Code
 18381 ;;		_setControl_Lights_Table
 18382 ;;		_setRFSW_AdjControl
 18383 ;;		_setRF_DimmerLights
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           
 18388                           ;psect for function _setProductData
 18389  1B3E                     _setProductData:	
 18390                           
 18391                           ;incstack = 0
 18392                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18393                           ;setProductData@address stored from wreg
 18394  1B3E  0020               	movlb	0	; select bank0
 18395  1B3F  00E4               	movwf	setProductData@address
 18396                           
 18397                           ;Main_B1.c: 646: _product.Data[address] = value;
 18398  1B40  0862               	movf	setProductData@value,w
 18399  1B41  00E3               	movwf	??_setProductData
 18400  1B42  0864               	movf	setProductData@address,w
 18401  1B43  3E20               	addlw	__product& (0+255)
 18402  1B44  0086               	movwf	6
 18403  1B45  3002               	movlw	2	; select bank4/5
 18404  1B46  0087               	movwf	7
 18405  1B47  0863               	movf	??_setProductData,w
 18406  1B48  0081               	movwf	1
 18407  1B49  0008               	return
 18408  1B4A                     __end_of_setProductData:	
 18409                           
 18410                           	psect	text130
 18411  11FA                     __ptext130:	
 18412 ;; *************** function _setDimmerLights_SwOn *****************
 18413 ;; Defined at:
 18414 ;;		line 697 in file "../src/Dimmer_B1.c"
 18415 ;; Parameters:    Size  Location     Type
 18416 ;;  sw              1    wreg     unsigned char 
 18417 ;; Auto vars:     Size  Location     Type
 18418 ;;  sw              1   13[BANK0 ] unsigned char 
 18419 ;;  idle            1   14[BANK0 ] unsigned char 
 18420 ;; Return value:  Size  Location     Type
 18421 ;;		None               void
 18422 ;; Registers used:
 18423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18424 ;; Tracked objects:
 18425 ;;		On entry : 0/0
 18426 ;;		On exit  : 0/0
 18427 ;;		Unchanged: 0/0
 18428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18433 ;;Total ram usage:        2 bytes
 18434 ;; Hardware stack levels used:    1
 18435 ;; Hardware stack levels required when called:    7
 18436 ;; This function calls:
 18437 ;;		_DimmerLights_SelectPointer
 18438 ;;		_setBuz
 18439 ;; This function is called by:
 18440 ;;		_DlyOff_Main
 18441 ;;		_setControl_Lights_Table
 18442 ;;		_setRFSW_Control
 18443 ;;		_setRFSW_AdjControl
 18444 ;;		_setSw_Main
 18445 ;; This function uses a non-reentrant model
 18446 ;;
 18447                           
 18448                           
 18449                           ;psect for function _setDimmerLights_SwOn
 18450  11FA                     _setDimmerLights_SwOn:	
 18451                           
 18452                           ;incstack = 0
 18453                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18454                           ;setDimmerLights_SwOn@sw stored from wreg
 18455  11FA  0020               	movlb	0	; select bank0
 18456  11FB  00AD               	movwf	setDimmerLights_SwOn@sw
 18457                           
 18458                           ;Dimmer_B1.c: 698: char idle = 0;
 18459  11FC  01AE               	clrf	setDimmerLights_SwOn@idle
 18460                           
 18461                           ;Dimmer_B1.c: 723: DimmerLights_SelectPointer(sw);
 18462  11FD  082D               	movf	setDimmerLights_SwOn@sw,w
 18463  11FE  319B  2332  3191   	fcall	_DimmerLights_SelectPointer
 18464                           
 18465                           ;Dimmer_B1.c: 724: if (idle == 0) {
 18466  1201  0020               	movlb	0	; select bank0
 18467  1202  08AE               	movf	setDimmerLights_SwOn@idle,f
 18468  1203  1D03               	skipz
 18469  1204  0008               	return
 18470                           
 18471                           ;Dimmer_B1.c: 726: DimmerLights->SwFlag = 1;
 18472  1205  0021               	movlb	1	; select bank1
 18473  1206  084E               	movf	_DimmerLights^(0+128),w
 18474  1207  0086               	movwf	6
 18475  1208  3001               	movlw	1	; select bank2/3
 18476  1209  0087               	movwf	7
 18477  120A  1401               	bsf	1,0
 18478                           
 18479                           ;Dimmer_B1.c: 727: if (DimmerLights->Status == 0) {
 18480  120B  0A4E               	incf	_DimmerLights^(0+128),w
 18481  120C  0086               	movwf	6
 18482  120D  3001               	movlw	1	; select bank2/3
 18483  120E  0087               	movwf	7
 18484  120F  1801               	btfsc	1,0
 18485  1210  2A21               	goto	l8824
 18486                           
 18487                           ;Dimmer_B1.c: 728: DimmerLights->Status = 1;
 18488  1211  0A4E               	incf	_DimmerLights^(0+128),w
 18489  1212  0086               	movwf	6
 18490  1213  3001               	movlw	1	; select bank2/3
 18491  1214  0087               	movwf	7
 18492  1215  1401               	bsf	1,0
 18493                           
 18494                           ;Dimmer_B1.c: 729: DimmerLights->Trigger = 1;
 18495  1216  084E               	movf	_DimmerLights^(0+128),w
 18496  1217  0086               	movwf	6
 18497  1218  3001               	movlw	1	; select bank2/3
 18498  1219  0087               	movwf	7
 18499  121A  1481               	bsf	1,1
 18500                           
 18501                           ;Dimmer_B1.c: 730: DimmerLights->Switch = 1;
 18502  121B  084E               	movf	_DimmerLights^(0+128),w
 18503  121C  0086               	movwf	6
 18504  121D  3001               	movlw	1	; select bank2/3
 18505  121E  0087               	movwf	7
 18506  121F  1501               	bsf	1,2
 18507                           
 18508                           ;Dimmer_B1.c: 731: } else {
 18509  1220  2A26               	goto	l8826
 18510  1221                     l8824:	
 18511                           
 18512                           ;Dimmer_B1.c: 732: DimmerLights->Status = 0;
 18513  1221  0A4E               	incf	_DimmerLights^(0+128),w
 18514  1222  0086               	movwf	6
 18515  1223  3001               	movlw	1	; select bank2/3
 18516  1224  0087               	movwf	7
 18517  1225  1001               	bcf	1,0
 18518  1226                     l8826:	
 18519                           
 18520                           ;Dimmer_B1.c: 733: }
 18521                           ;Dimmer_B1.c: 734: setBuz(1, 100);
 18522  1226  3064               	movlw	100
 18523  1227  0020               	movlb	0	; select bank0
 18524  1228  00A9               	movwf	setBuz@time
 18525  1229  3000               	movlw	0
 18526  122A  00AA               	movwf	setBuz@time+1
 18527  122B  3001               	movlw	1
 18528  122C  3194  24FB         	fcall	_setBuz
 18529  122E  0008               	return
 18530  122F                     __end_of_setDimmerLights_SwOn:	
 18531                           
 18532                           	psect	text131
 18533  14FB                     __ptext131:	
 18534 ;; *************** function _setBuz *****************
 18535 ;; Defined at:
 18536 ;;		line 22 in file "../src/Buzzer_B1.c"
 18537 ;; Parameters:    Size  Location     Type
 18538 ;;  count           1    wreg     unsigned char 
 18539 ;;  time            2    9[BANK0 ] int 
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;  count           1   12[BANK0 ] unsigned char 
 18542 ;; Return value:  Size  Location     Type
 18543 ;;		None               void
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0, pclath, cstack
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18551 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18554 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18555 ;;Total ram usage:        4 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    6
 18558 ;; This function calls:
 18559 ;;		___awdiv
 18560 ;; This function is called by:
 18561 ;;		_setDimmerLights_SwOn
 18562 ;;		_setDimmerLights_Dimming
 18563 ;;		_my_MainTimer
 18564 ;;		_Exception_Main
 18565 ;;		_setTemp_Main
 18566 ;;		_setLog_Code
 18567 ;;		_setRFSW_Control
 18568 ;;		_setSw_Main
 18569 ;; This function uses a non-reentrant model
 18570 ;;
 18571                           
 18572                           
 18573                           ;psect for function _setBuz
 18574  14FB                     _setBuz:	
 18575                           
 18576                           ;incstack = 0
 18577                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18578                           ;setBuz@count stored from wreg
 18579  14FB  0020               	movlb	0	; select bank0
 18580  14FC  00AC               	movwf	setBuz@count
 18581                           
 18582                           ;Buzzer_B1.c: 23: time /= 20;
 18583  14FD  3014               	movlw	20
 18584  14FE  00A0               	movwf	___awdiv@divisor
 18585  14FF  3000               	movlw	0
 18586  1500  00A1               	movwf	___awdiv@divisor+1
 18587  1501  082A               	movf	setBuz@time+1,w
 18588  1502  01A3               	clrf	___awdiv@dividend+1
 18589  1503  07A3               	addwf	___awdiv@dividend+1,f
 18590  1504  0829               	movf	setBuz@time,w
 18591  1505  01A2               	clrf	___awdiv@dividend
 18592  1506  07A2               	addwf	___awdiv@dividend,f
 18593  1507  3194  2451  3194   	fcall	___awdiv
 18594  150A  0020               	movlb	0	; select bank0
 18595  150B  0821               	movf	?___awdiv+1,w
 18596  150C  01AA               	clrf	setBuz@time+1
 18597  150D  07AA               	addwf	setBuz@time+1,f
 18598  150E  0820               	movf	?___awdiv,w
 18599  150F  01A9               	clrf	setBuz@time
 18600  1510  07A9               	addwf	setBuz@time,f
 18601                           
 18602                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18603  1511  0022               	movlb	2	; select bank2
 18604  1512  1C20               	btfss	_Buz1^(0+256),0
 18605  1513  0008               	return
 18606                           
 18607                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18608  1514  18A0               	btfsc	_Buz1^(0+256),1
 18609  1515  2D2C               	goto	l86
 18610                           
 18611                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18612  1516  14A0               	bsf	_Buz1^(0+256),1
 18613                           
 18614                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18615  1517  01A1               	clrf	(_Buz1^(0+256)+1)
 18616  1518  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18617                           
 18618                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18619  1519  0020               	movlb	0	; select bank0
 18620  151A  082C               	movf	setBuz@count,w
 18621  151B  00AB               	movwf	??_setBuz
 18622  151C  082B               	movf	??_setBuz,w
 18623  151D  0022               	movlb	2	; select bank2
 18624  151E  00A3               	movwf	(_Buz1^(0+256)+3)
 18625                           
 18626                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18627  151F  0020               	movlb	0	; select bank0
 18628  1520  082A               	movf	setBuz@time+1,w
 18629  1521  0022               	movlb	2	; select bank2
 18630  1522  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18631  1523  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18632  1524  0020               	movlb	0	; select bank0
 18633  1525  0829               	movf	setBuz@time,w
 18634  1526  0022               	movlb	2	; select bank2
 18635  1527  01A6               	clrf	(_Buz1^(0+256)+6)
 18636  1528  07A6               	addwf	(_Buz1^(0+256)+6),f
 18637                           
 18638                           ;Buzzer_B1.c: 30: RB3 = 1;
 18639  1529  0020               	movlb	0	; select bank0
 18640  152A  158D               	bsf	13,3	;volatile
 18641                           
 18642                           ;Buzzer_B1.c: 31: } else {
 18643  152B  0008               	return
 18644  152C                     l86:	
 18645                           
 18646                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18647  152C  19A0               	btfsc	_Buz1^(0+256),3
 18648  152D  2D40               	goto	l88
 18649                           
 18650                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18651  152E  15A0               	bsf	_Buz1^(0+256),3
 18652                           
 18653                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18654  152F  0020               	movlb	0	; select bank0
 18655  1530  082C               	movf	setBuz@count,w
 18656  1531  00AB               	movwf	??_setBuz
 18657  1532  082B               	movf	??_setBuz,w
 18658  1533  0022               	movlb	2	; select bank2
 18659  1534  00A4               	movwf	(_Buz1^(0+256)+4)
 18660                           
 18661                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18662  1535  0020               	movlb	0	; select bank0
 18663  1536  082A               	movf	setBuz@time+1,w
 18664  1537  0022               	movlb	2	; select bank2
 18665  1538  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18666  1539  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18667  153A  0020               	movlb	0	; select bank0
 18668  153B  0829               	movf	setBuz@time,w
 18669  153C  0022               	movlb	2	; select bank2
 18670  153D  01A8               	clrf	(_Buz1^(0+256)+8)
 18671  153E  07A8               	addwf	(_Buz1^(0+256)+8),f
 18672                           
 18673                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18674  153F  0008               	return
 18675  1540                     l88:	
 18676  1540  1A20               	btfsc	_Buz1^(0+256),4
 18677  1541  0008               	return
 18678                           
 18679                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18680  1542  1620               	bsf	_Buz1^(0+256),4
 18681                           
 18682                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18683  1543  0020               	movlb	0	; select bank0
 18684  1544  082C               	movf	setBuz@count,w
 18685  1545  00AB               	movwf	??_setBuz
 18686  1546  082B               	movf	??_setBuz,w
 18687  1547  0022               	movlb	2	; select bank2
 18688  1548  00A5               	movwf	(_Buz1^(0+256)+5)
 18689                           
 18690                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18691  1549  0020               	movlb	0	; select bank0
 18692  154A  082A               	movf	setBuz@time+1,w
 18693  154B  0022               	movlb	2	; select bank2
 18694  154C  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18695  154D  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18696  154E  0020               	movlb	0	; select bank0
 18697  154F  0829               	movf	setBuz@time,w
 18698  1550  0022               	movlb	2	; select bank2
 18699  1551  01AA               	clrf	(_Buz1^(0+256)+10)
 18700  1552  07AA               	addwf	(_Buz1^(0+256)+10),f
 18701  1553  0008               	return
 18702  1554                     __end_of_setBuz:	
 18703                           
 18704                           	psect	text132
 18705  1451                     __ptext132:	
 18706 ;; *************** function ___awdiv *****************
 18707 ;; Defined at:
 18708 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18709 ;; Parameters:    Size  Location     Type
 18710 ;;  divisor         2    0[BANK0 ] int 
 18711 ;;  dividend        2    2[BANK0 ] int 
 18712 ;; Auto vars:     Size  Location     Type
 18713 ;;  quotient        2    7[BANK0 ] int 
 18714 ;;  sign            1    6[BANK0 ] unsigned char 
 18715 ;;  counter         1    5[BANK0 ] unsigned char 
 18716 ;; Return value:  Size  Location     Type
 18717 ;;                  2    0[BANK0 ] int 
 18718 ;; Registers used:
 18719 ;;		wreg, status,2, status,0
 18720 ;; Tracked objects:
 18721 ;;		On entry : 0/0
 18722 ;;		On exit  : 0/0
 18723 ;;		Unchanged: 0/0
 18724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18725 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18726 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;Total ram usage:        9 bytes
 18730 ;; Hardware stack levels used:    1
 18731 ;; Hardware stack levels required when called:    5
 18732 ;; This function calls:
 18733 ;;		Nothing
 18734 ;; This function is called by:
 18735 ;;		_setBuz
 18736 ;; This function uses a non-reentrant model
 18737 ;;
 18738                           
 18739                           
 18740                           ;psect for function ___awdiv
 18741  1451                     ___awdiv:	
 18742                           
 18743                           ;incstack = 0
 18744                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18745  1451  0020               	movlb	0	; select bank0
 18746  1452  01A6               	clrf	___awdiv@sign
 18747  1453  1FA1               	btfss	___awdiv@divisor+1,7
 18748  1454  2C5C               	goto	l8462
 18749  1455  09A0               	comf	___awdiv@divisor,f
 18750  1456  09A1               	comf	___awdiv@divisor+1,f
 18751  1457  0AA0               	incf	___awdiv@divisor,f
 18752  1458  1903               	skipnz
 18753  1459  0AA1               	incf	___awdiv@divisor+1,f
 18754  145A  01A6               	clrf	___awdiv@sign
 18755  145B  0AA6               	incf	___awdiv@sign,f
 18756  145C                     l8462:	
 18757  145C  1FA3               	btfss	___awdiv@dividend+1,7
 18758  145D  2C67               	goto	l8468
 18759  145E  09A2               	comf	___awdiv@dividend,f
 18760  145F  09A3               	comf	___awdiv@dividend+1,f
 18761  1460  0AA2               	incf	___awdiv@dividend,f
 18762  1461  1903               	skipnz
 18763  1462  0AA3               	incf	___awdiv@dividend+1,f
 18764  1463  3001               	movlw	1
 18765  1464  00A4               	movwf	??___awdiv
 18766  1465  0824               	movf	??___awdiv,w
 18767  1466  06A6               	xorwf	___awdiv@sign,f
 18768  1467                     l8468:	
 18769  1467  01A7               	clrf	___awdiv@quotient
 18770  1468  01A8               	clrf	___awdiv@quotient+1
 18771  1469  0821               	movf	___awdiv@divisor+1,w
 18772  146A  0420               	iorwf	___awdiv@divisor,w
 18773  146B  1903               	skipnz
 18774  146C  2C96               	goto	l8490
 18775  146D  01A5               	clrf	___awdiv@counter
 18776  146E  0AA5               	incf	___awdiv@counter,f
 18777  146F                     l8478:	
 18778  146F  1BA1               	btfsc	___awdiv@divisor+1,7
 18779  1470  2C7B               	goto	l8480
 18780  1471  3001               	movlw	1
 18781  1472                     u8815:	
 18782  1472  35A0               	lslf	___awdiv@divisor,f
 18783  1473  0DA1               	rlf	___awdiv@divisor+1,f
 18784  1474  0B89               	decfsz	9,f
 18785  1475  2C72               	goto	u8815
 18786  1476  3001               	movlw	1
 18787  1477  00A4               	movwf	??___awdiv
 18788  1478  0824               	movf	??___awdiv,w
 18789  1479  07A5               	addwf	___awdiv@counter,f
 18790  147A  2C6F               	goto	l8478
 18791  147B                     l8480:	
 18792  147B  3001               	movlw	1
 18793  147C                     u8835:	
 18794  147C  35A7               	lslf	___awdiv@quotient,f
 18795  147D  0DA8               	rlf	___awdiv@quotient+1,f
 18796  147E  0B89               	decfsz	9,f
 18797  147F  2C7C               	goto	u8835
 18798  1480  0821               	movf	___awdiv@divisor+1,w
 18799  1481  0223               	subwf	___awdiv@dividend+1,w
 18800  1482  1D03               	skipz
 18801  1483  2C86               	goto	u8845
 18802  1484  0820               	movf	___awdiv@divisor,w
 18803  1485  0222               	subwf	___awdiv@dividend,w
 18804  1486                     u8845:	
 18805  1486  1C03               	skipc
 18806  1487  2C8D               	goto	l8486
 18807  1488  0820               	movf	___awdiv@divisor,w
 18808  1489  02A2               	subwf	___awdiv@dividend,f
 18809  148A  0821               	movf	___awdiv@divisor+1,w
 18810  148B  3BA3               	subwfb	___awdiv@dividend+1,f
 18811  148C  1427               	bsf	___awdiv@quotient,0
 18812  148D                     l8486:	
 18813  148D  3001               	movlw	1
 18814  148E                     u8855:	
 18815  148E  36A1               	lsrf	___awdiv@divisor+1,f
 18816  148F  0CA0               	rrf	___awdiv@divisor,f
 18817  1490  0B89               	decfsz	9,f
 18818  1491  2C8E               	goto	u8855
 18819  1492  3001               	movlw	1
 18820  1493  02A5               	subwf	___awdiv@counter,f
 18821  1494  1D03               	btfss	3,2
 18822  1495  2C7B               	goto	l8480
 18823  1496                     l8490:	
 18824  1496  0826               	movf	___awdiv@sign,w
 18825  1497  1903               	btfsc	3,2
 18826  1498  2C9E               	goto	l8494
 18827  1499  09A7               	comf	___awdiv@quotient,f
 18828  149A  09A8               	comf	___awdiv@quotient+1,f
 18829  149B  0AA7               	incf	___awdiv@quotient,f
 18830  149C  1903               	skipnz
 18831  149D  0AA8               	incf	___awdiv@quotient+1,f
 18832  149E                     l8494:	
 18833  149E  0828               	movf	___awdiv@quotient+1,w
 18834  149F  01A1               	clrf	?___awdiv+1
 18835  14A0  07A1               	addwf	?___awdiv+1,f
 18836  14A1  0827               	movf	___awdiv@quotient,w
 18837  14A2  01A0               	clrf	?___awdiv
 18838  14A3  07A0               	addwf	?___awdiv,f
 18839  14A4  0008               	return
 18840  14A5                     __end_of___awdiv:	
 18841                           
 18842                           	psect	text133
 18843  129C                     __ptext133:	
 18844 ;; *************** function _setDimmerLights_SwOff *****************
 18845 ;; Defined at:
 18846 ;;		line 739 in file "../src/Dimmer_B1.c"
 18847 ;; Parameters:    Size  Location     Type
 18848 ;;  sw              1    wreg     unsigned char 
 18849 ;; Auto vars:     Size  Location     Type
 18850 ;;  sw              1    2[BANK0 ] unsigned char 
 18851 ;; Return value:  Size  Location     Type
 18852 ;;		None               void
 18853 ;; Registers used:
 18854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18855 ;; Tracked objects:
 18856 ;;		On entry : 0/0
 18857 ;;		On exit  : 0/0
 18858 ;;		Unchanged: 0/0
 18859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18864 ;;Total ram usage:        1 bytes
 18865 ;; Hardware stack levels used:    1
 18866 ;; Hardware stack levels required when called:    6
 18867 ;; This function calls:
 18868 ;;		_DimmerLights_SelectPointer
 18869 ;; This function is called by:
 18870 ;;		_DlyOff_Main
 18871 ;;		_Exception_Main
 18872 ;;		_setControl_Lights_Table
 18873 ;;		_setRFSW_Control
 18874 ;;		_setRFSW_AdjControl
 18875 ;;		_setSw_Main
 18876 ;; This function uses a non-reentrant model
 18877 ;;
 18878                           
 18879                           
 18880                           ;psect for function _setDimmerLights_SwOff
 18881  129C                     _setDimmerLights_SwOff:	
 18882                           
 18883                           ;incstack = 0
 18884                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18885                           ;setDimmerLights_SwOff@sw stored from wreg
 18886  129C  0020               	movlb	0	; select bank0
 18887  129D  00A2               	movwf	setDimmerLights_SwOff@sw
 18888                           
 18889                           ;Dimmer_B1.c: 740: DimmerLights_SelectPointer(sw);
 18890  129E  0822               	movf	setDimmerLights_SwOff@sw,w
 18891  129F  319B  2332  3192   	fcall	_DimmerLights_SelectPointer
 18892                           
 18893                           ;Dimmer_B1.c: 742: if (DimmerLights->SwFlag == 1) {
 18894  12A2  0021               	movlb	1	; select bank1
 18895  12A3  084E               	movf	_DimmerLights^(0+128),w
 18896  12A4  0086               	movwf	6
 18897  12A5  3001               	movlw	1	; select bank2/3
 18898  12A6  0087               	movwf	7
 18899  12A7  1C01               	btfss	1,0
 18900  12A8  0008               	return
 18901                           
 18902                           ;Dimmer_B1.c: 743: DimmerLights->SwFlag = 0;
 18903  12A9  084E               	movf	_DimmerLights^(0+128),w
 18904  12AA  0086               	movwf	6
 18905  12AB  3001               	movlw	1	; select bank2/3
 18906  12AC  0087               	movwf	7
 18907  12AD  1001               	bcf	1,0
 18908                           
 18909                           ;Dimmer_B1.c: 744: if (DimmerLights->Status == 1) {
 18910  12AE  0A4E               	incf	_DimmerLights^(0+128),w
 18911  12AF  0086               	movwf	6
 18912  12B0  3001               	movlw	1	; select bank2/3
 18913  12B1  0087               	movwf	7
 18914  12B2  1C01               	btfss	1,0
 18915  12B3  2ACA               	goto	l8838
 18916                           
 18917                           ;Dimmer_B1.c: 745: if (DimmerLights->DimmingSwFlag == 1) {
 18918  12B4  084E               	movf	_DimmerLights^(0+128),w
 18919  12B5  0086               	movwf	6
 18920  12B6  3001               	movlw	1	; select bank2/3
 18921  12B7  0087               	movwf	7
 18922  12B8  1D81               	btfss	1,3
 18923  12B9  0008               	return
 18924                           
 18925                           ;Dimmer_B1.c: 746: DimmerLights->DimmingSwFlag = 0;
 18926  12BA  084E               	movf	_DimmerLights^(0+128),w
 18927  12BB  0086               	movwf	6
 18928  12BC  3001               	movlw	1	; select bank2/3
 18929  12BD  0087               	movwf	7
 18930  12BE  1181               	bcf	1,3
 18931                           
 18932                           ;Dimmer_B1.c: 748: DimmerLights->DimmingTrigger = 1;
 18933  12BF  084E               	movf	_DimmerLights^(0+128),w
 18934  12C0  0086               	movwf	6
 18935  12C1  3001               	movlw	1	; select bank2/3
 18936  12C2  0087               	movwf	7
 18937  12C3  1601               	bsf	1,4
 18938                           
 18939                           ;Dimmer_B1.c: 749: DimmerLights->DimmingSwitch = 0;
 18940  12C4  084E               	movf	_DimmerLights^(0+128),w
 18941  12C5  0086               	movwf	6
 18942  12C6  3001               	movlw	1	; select bank2/3
 18943  12C7  0087               	movwf	7
 18944  12C8  1281               	bcf	1,5
 18945                           
 18946                           ;Dimmer_B1.c: 750: }
 18947                           ;Dimmer_B1.c: 751: } else {
 18948  12C9  0008               	return
 18949  12CA                     l8838:	
 18950                           
 18951                           ;Dimmer_B1.c: 753: DimmerLights->Trigger = 1;
 18952  12CA  084E               	movf	_DimmerLights^(0+128),w
 18953  12CB  0086               	movwf	6
 18954  12CC  3001               	movlw	1	; select bank2/3
 18955  12CD  0087               	movwf	7
 18956  12CE  1481               	bsf	1,1
 18957                           
 18958                           ;Dimmer_B1.c: 754: DimmerLights->Switch = 0;
 18959  12CF  084E               	movf	_DimmerLights^(0+128),w
 18960  12D0  0086               	movwf	6
 18961  12D1  3001               	movlw	1	; select bank2/3
 18962  12D2  0087               	movwf	7
 18963  12D3  1101               	bcf	1,2
 18964  12D4  0008               	return
 18965  12D5                     __end_of_setDimmerLights_SwOff:	
 18966                           
 18967                           	psect	text134
 18968  1BF4                     __ptext134:	
 18969 ;; *************** function _getDimmerLights_Status *****************
 18970 ;; Defined at:
 18971 ;;		line 1080 in file "../src/Dimmer_B1.c"
 18972 ;; Parameters:    Size  Location     Type
 18973 ;;  lights          1    wreg     unsigned char 
 18974 ;; Auto vars:     Size  Location     Type
 18975 ;;  lights          1    2[BANK0 ] unsigned char 
 18976 ;;  status          1    3[BANK0 ] unsigned char 
 18977 ;; Return value:  Size  Location     Type
 18978 ;;                  1    wreg      unsigned char 
 18979 ;; Registers used:
 18980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18981 ;; Tracked objects:
 18982 ;;		On entry : 0/0
 18983 ;;		On exit  : 0/0
 18984 ;;		Unchanged: 0/0
 18985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18990 ;;Total ram usage:        2 bytes
 18991 ;; Hardware stack levels used:    1
 18992 ;; Hardware stack levels required when called:    6
 18993 ;; This function calls:
 18994 ;;		_DimmerLights_SelectPointer
 18995 ;; This function is called by:
 18996 ;;		_DlyOff_Main
 18997 ;;		_Exception_Main
 18998 ;;		_setControl_Lights_Table
 18999 ;;		_setRFSW_Control
 19000 ;;		_setRFSW_AdjControl
 19001 ;;		_setRF_AdjControl
 19002 ;; This function uses a non-reentrant model
 19003 ;;
 19004                           
 19005                           
 19006                           ;psect for function _getDimmerLights_Status
 19007  1BF4                     _getDimmerLights_Status:	
 19008                           
 19009                           ;incstack = 0
 19010                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19011                           ;getDimmerLights_Status@lights stored from wreg
 19012  1BF4  0020               	movlb	0	; select bank0
 19013  1BF5  00A2               	movwf	getDimmerLights_Status@lights
 19014                           
 19015                           ;Dimmer_B1.c: 1081: DimmerLights_SelectPointer(lights);
 19016  1BF6  0822               	movf	getDimmerLights_Status@lights,w
 19017  1BF7  319B  2332         	fcall	_DimmerLights_SelectPointer
 19018                           
 19019                           ;Dimmer_B1.c: 1082: char status = DimmerLights->Status == 1 ? 1 : 0;
 19020  1BF9  0021               	movlb	1	; select bank1
 19021  1BFA  0A4E               	incf	_DimmerLights^(0+128),w
 19022  1BFB  0086               	movwf	6
 19023  1BFC  3001               	movlw	1	; select bank2/3
 19024  1BFD  0087               	movwf	7
 19025  1BFE  3000               	movlw	0
 19026  1BFF  1801               	btfsc	1,0
 19027  1C00  3001               	movlw	1
 19028  1C01  0020               	movlb	0	; select bank0
 19029  1C02  00A3               	movwf	getDimmerLights_Status@status
 19030                           
 19031                           ;Dimmer_B1.c: 1083: return status;
 19032  1C03  0823               	movf	getDimmerLights_Status@status,w
 19033  1C04  0008               	return
 19034  1C05                     __end_of_getDimmerLights_Status:	
 19035                           
 19036                           	psect	text135
 19037  1B32                     __ptext135:	
 19038 ;; *************** function _DimmerLights_SelectPointer *****************
 19039 ;; Defined at:
 19040 ;;		line 620 in file "../src/Dimmer_B1.c"
 19041 ;; Parameters:    Size  Location     Type
 19042 ;;  lights          1    wreg     unsigned char 
 19043 ;; Auto vars:     Size  Location     Type
 19044 ;;  lights          1    1[BANK0 ] unsigned char 
 19045 ;; Return value:  Size  Location     Type
 19046 ;;		None               void
 19047 ;; Registers used:
 19048 ;;		wreg
 19049 ;; Tracked objects:
 19050 ;;		On entry : 0/0
 19051 ;;		On exit  : 0/0
 19052 ;;		Unchanged: 0/0
 19053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19055 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19058 ;;Total ram usage:        2 bytes
 19059 ;; Hardware stack levels used:    1
 19060 ;; Hardware stack levels required when called:    5
 19061 ;; This function calls:
 19062 ;;		Nothing
 19063 ;; This function is called by:
 19064 ;;		_setDimmerLights_SwOn
 19065 ;;		_setDimmerLights_SwOff
 19066 ;;		_setDimmerLights_DimmingOn
 19067 ;;		_setDimmerLights_Main
 19068 ;;		_getDimmerLights_Status
 19069 ;;		_setDimmerLights_DimmingRun
 19070 ;;		_setRF_AdjControl
 19071 ;;		_setDimmerLights_Status
 19072 ;; This function uses a non-reentrant model
 19073 ;;
 19074                           
 19075                           
 19076                           ;psect for function _DimmerLights_SelectPointer
 19077  1B32                     _DimmerLights_SelectPointer:	
 19078                           
 19079                           ;incstack = 0
 19080                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19081                           ;DimmerLights_SelectPointer@lights stored from wreg
 19082  1B32  0020               	movlb	0	; select bank0
 19083  1B33  00A1               	movwf	DimmerLights_SelectPointer@lights
 19084                           
 19085                           ;Dimmer_B1.c: 622: if (lights == 1) {
 19086  1B34  0821               	movf	DimmerLights_SelectPointer@lights,w
 19087  1B35  3A01               	xorlw	1
 19088  1B36  1D03               	skipz
 19089  1B37  0008               	return
 19090                           
 19091                           ;Dimmer_B1.c: 623: DimmerLights = &DimmerLights1;
 19092  1B38  305E               	movlw	_DimmerLights1& (0+255)
 19093  1B39  00A0               	movwf	??_DimmerLights_SelectPointer
 19094  1B3A  0820               	movf	??_DimmerLights_SelectPointer,w
 19095  1B3B  0021               	movlb	1	; select bank1
 19096  1B3C  00CE               	movwf	_DimmerLights^(0+128)
 19097  1B3D  0008               	return
 19098  1B3E                     __end_of_DimmerLights_SelectPointer:	
 19099                           
 19100                           	psect	text136
 19101  1A66                     __ptext136:	
 19102 ;; *************** function _DelayOff_Initialization *****************
 19103 ;; Defined at:
 19104 ;;		line 26 in file "../src/DelayOff_B1.c"
 19105 ;; Parameters:    Size  Location     Type
 19106 ;;		None
 19107 ;; Auto vars:     Size  Location     Type
 19108 ;;		None
 19109 ;; Return value:  Size  Location     Type
 19110 ;;		None               void
 19111 ;; Registers used:
 19112 ;;		wreg, status,2, status,0, pclath, cstack
 19113 ;; Tracked objects:
 19114 ;;		On entry : 0/0
 19115 ;;		On exit  : 0/0
 19116 ;;		Unchanged: 0/0
 19117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19122 ;;Total ram usage:        0 bytes
 19123 ;; Hardware stack levels used:    1
 19124 ;; Hardware stack levels required when called:    7
 19125 ;; This function calls:
 19126 ;;		_DlyOff_Initialization
 19127 ;; This function is called by:
 19128 ;;		_main
 19129 ;; This function uses a non-reentrant model
 19130 ;;
 19131                           
 19132                           
 19133                           ;psect for function _DelayOff_Initialization
 19134  1A66                     _DelayOff_Initialization:	
 19135                           
 19136                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19137                           
 19138                           ;incstack = 0
 19139                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19140  1A66  3001               	movlw	1
 19141  1A67  319A  2293         	fcall	_DlyOff_Initialization
 19142  1A69  0008               	return
 19143  1A6A                     __end_of_DelayOff_Initialization:	
 19144                           
 19145                           	psect	text137
 19146  1A93                     __ptext137:	
 19147 ;; *************** function _DlyOff_Initialization *****************
 19148 ;; Defined at:
 19149 ;;		line 56 in file "../src/DelayOff_B1.c"
 19150 ;; Parameters:    Size  Location     Type
 19151 ;;  sw              1    wreg     unsigned char 
 19152 ;; Auto vars:     Size  Location     Type
 19153 ;;  sw              1    2[BANK0 ] unsigned char 
 19154 ;; Return value:  Size  Location     Type
 19155 ;;		None               void
 19156 ;; Registers used:
 19157 ;;		wreg, status,2, status,0, pclath, cstack
 19158 ;; Tracked objects:
 19159 ;;		On entry : 0/0
 19160 ;;		On exit  : 0/0
 19161 ;;		Unchanged: 0/0
 19162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19167 ;;Total ram usage:        1 bytes
 19168 ;; Hardware stack levels used:    1
 19169 ;; Hardware stack levels required when called:    6
 19170 ;; This function calls:
 19171 ;;		_DelayOffPointSelect
 19172 ;; This function is called by:
 19173 ;;		_DelayOff_Initialization
 19174 ;; This function uses a non-reentrant model
 19175 ;;
 19176                           
 19177                           
 19178                           ;psect for function _DlyOff_Initialization
 19179  1A93                     _DlyOff_Initialization:	
 19180                           
 19181                           ;incstack = 0
 19182                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19183                           ;DlyOff_Initialization@sw stored from wreg
 19184  1A93  0020               	movlb	0	; select bank0
 19185  1A94  00A2               	movwf	DlyOff_Initialization@sw
 19186                           
 19187                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19188  1A95  0822               	movf	DlyOff_Initialization@sw,w
 19189  1A96  319B  2326         	fcall	_DelayOffPointSelect
 19190  1A98  0008               	return
 19191  1A99                     __end_of_DlyOff_Initialization:	
 19192                           
 19193                           	psect	text138
 19194  1B26                     __ptext138:	
 19195 ;; *************** function _DelayOffPointSelect *****************
 19196 ;; Defined at:
 19197 ;;		line 7 in file "../src/DelayOff_B1.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;  sw              1    wreg     unsigned char 
 19200 ;; Auto vars:     Size  Location     Type
 19201 ;;  sw              1    1[BANK0 ] unsigned char 
 19202 ;; Return value:  Size  Location     Type
 19203 ;;		None               void
 19204 ;; Registers used:
 19205 ;;		wreg
 19206 ;; Tracked objects:
 19207 ;;		On entry : 0/0
 19208 ;;		On exit  : 0/0
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19215 ;;Total ram usage:        2 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; Hardware stack levels required when called:    5
 19218 ;; This function calls:
 19219 ;;		Nothing
 19220 ;; This function is called by:
 19221 ;;		_DlyOff_Initialization
 19222 ;;		_DlyOff_Main
 19223 ;;		_setDelayOff_GO
 19224 ;;		_getDelayOff_GO
 19225 ;; This function uses a non-reentrant model
 19226 ;;
 19227                           
 19228                           
 19229                           ;psect for function _DelayOffPointSelect
 19230  1B26                     _DelayOffPointSelect:	
 19231                           
 19232                           ;incstack = 0
 19233                           ; Regs used in _DelayOffPointSelect: [wreg]
 19234                           ;DelayOffPointSelect@sw stored from wreg
 19235  1B26  0020               	movlb	0	; select bank0
 19236  1B27  00A1               	movwf	DelayOffPointSelect@sw
 19237                           
 19238                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19239  1B28  0821               	movf	DelayOffPointSelect@sw,w
 19240  1B29  3A01               	xorlw	1
 19241  1B2A  1D03               	skipz
 19242  1B2B  0008               	return
 19243                           
 19244                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19245  1B2C  3066               	movlw	_DlySw1& (0+255)
 19246  1B2D  00A0               	movwf	??_DelayOffPointSelect
 19247  1B2E  0820               	movf	??_DelayOffPointSelect,w
 19248  1B2F  0021               	movlb	1	; select bank1
 19249  1B30  00CC               	movwf	_DelayOff^(0+128)
 19250  1B31  0008               	return
 19251  1B32                     __end_of_DelayOffPointSelect:	
 19252                           
 19253                           	psect	text139
 19254  07AE                     __ptext139:	
 19255 ;; *************** function _Buzzer_Main *****************
 19256 ;; Defined at:
 19257 ;;		line 46 in file "../src/Buzzer_B1.c"
 19258 ;; Parameters:    Size  Location     Type
 19259 ;;		None
 19260 ;; Auto vars:     Size  Location     Type
 19261 ;;		None
 19262 ;; Return value:  Size  Location     Type
 19263 ;;		None               void
 19264 ;; Registers used:
 19265 ;;		wreg, status,2, status,0
 19266 ;; Tracked objects:
 19267 ;;		On entry : 0/0
 19268 ;;		On exit  : 0/0
 19269 ;;		Unchanged: 0/0
 19270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19274 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19275 ;;Total ram usage:        1 bytes
 19276 ;; Hardware stack levels used:    1
 19277 ;; Hardware stack levels required when called:    5
 19278 ;; This function calls:
 19279 ;;		Nothing
 19280 ;; This function is called by:
 19281 ;;		_main
 19282 ;; This function uses a non-reentrant model
 19283 ;;
 19284                           
 19285                           
 19286                           ;psect for function _Buzzer_Main
 19287  07AE                     _Buzzer_Main:	
 19288                           
 19289                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19290                           
 19291                           ;incstack = 0
 19292                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19293  07AE  0022               	movlb	2	; select bank2
 19294  07AF  1CA0               	btfss	_Buz1^(0+256),1
 19295  07B0  0008               	return
 19296                           
 19297                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19298  07B1  3001               	movlw	1
 19299  07B2  07A1               	addwf	(_Buz1^(0+256)+1),f
 19300  07B3  3000               	movlw	0
 19301  07B4  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19302                           
 19303                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19304  07B5  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19305  07B6  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19306  07B7  1D03               	skipz
 19307  07B8  2FBB               	goto	u11915
 19308  07B9  0826               	movf	(_Buz1^(0+256)+6),w
 19309  07BA  0221               	subwf	(_Buz1^(0+256)+1),w
 19310  07BB                     u11915:	
 19311  07BB  1C03               	skipc
 19312  07BC  0008               	return
 19313                           
 19314                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19315  07BD  01A1               	clrf	(_Buz1^(0+256)+1)
 19316  07BE  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19317                           
 19318                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19319  07BF  12A0               	bcf	_Buz1^(0+256),5
 19320  07C0  0020               	movlb	0	; select bank0
 19321  07C1  1D8D               	btfss	13,3	;volatile
 19322  07C2  2FC5               	goto	l10408
 19323  07C3  0022               	movlb	2	; select bank2
 19324  07C4  16A0               	bsf	_Buz1^(0+256),5
 19325  07C5                     l10408:	
 19326                           
 19327                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19328  07C5  0022               	movlb	2	; select bank2
 19329  07C6  1AA0               	btfsc	_Buz1^(0+256),5
 19330  07C7  2FF1               	goto	l96
 19331                           
 19332                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19333  07C8  08A3               	movf	(_Buz1^(0+256)+3),f
 19334  07C9  1D03               	skipz
 19335  07CA  2FED               	goto	l97
 19336                           
 19337                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19338  07CB  1DA0               	btfss	_Buz1^(0+256),3
 19339  07CC  2FDB               	goto	l98
 19340                           
 19341                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19342  07CD  11A0               	bcf	_Buz1^(0+256),3
 19343                           
 19344                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19345  07CE  0824               	movf	(_Buz1^(0+256)+4),w
 19346  07CF  0020               	movlb	0	; select bank0
 19347  07D0  00A0               	movwf	??_Buzzer_Main
 19348  07D1  0820               	movf	??_Buzzer_Main,w
 19349  07D2  0022               	movlb	2	; select bank2
 19350  07D3  00A3               	movwf	(_Buz1^(0+256)+3)
 19351                           
 19352                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19353  07D4  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19354  07D5  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19355  07D6  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19356  07D7  0828               	movf	(_Buz1^(0+256)+8),w
 19357  07D8  01A6               	clrf	(_Buz1^(0+256)+6)
 19358  07D9  07A6               	addwf	(_Buz1^(0+256)+6),f
 19359                           
 19360                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19361  07DA  0008               	return
 19362  07DB                     l98:	
 19363  07DB  1E20               	btfss	_Buz1^(0+256),4
 19364  07DC  2FEB               	goto	l100
 19365                           
 19366                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19367  07DD  1220               	bcf	_Buz1^(0+256),4
 19368                           
 19369                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19370  07DE  0825               	movf	(_Buz1^(0+256)+5),w
 19371  07DF  0020               	movlb	0	; select bank0
 19372  07E0  00A0               	movwf	??_Buzzer_Main
 19373  07E1  0820               	movf	??_Buzzer_Main,w
 19374  07E2  0022               	movlb	2	; select bank2
 19375  07E3  00A3               	movwf	(_Buz1^(0+256)+3)
 19376                           
 19377                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19378  07E4  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19379  07E5  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19380  07E6  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19381  07E7  082A               	movf	(_Buz1^(0+256)+10),w
 19382  07E8  01A6               	clrf	(_Buz1^(0+256)+6)
 19383  07E9  07A6               	addwf	(_Buz1^(0+256)+6),f
 19384                           
 19385                           ;Buzzer_B1.c: 62: } else {
 19386  07EA  0008               	return
 19387  07EB                     l100:	
 19388                           
 19389                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19390  07EB  10A0               	bcf	_Buz1^(0+256),1
 19391                           
 19392                           ;Buzzer_B1.c: 64: }
 19393                           ;Buzzer_B1.c: 65: } else {
 19394  07EC  0008               	return
 19395  07ED                     l97:	
 19396                           
 19397                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19398  07ED  16A0               	bsf	_Buz1^(0+256),5
 19399                           
 19400                           ;Buzzer_B1.c: 68: RB3 = 1;
 19401  07EE  0020               	movlb	0	; select bank0
 19402  07EF  158D               	bsf	13,3	;volatile
 19403                           
 19404                           ;Buzzer_B1.c: 69: }
 19405                           ;Buzzer_B1.c: 70: } else {
 19406  07F0  0008               	return
 19407  07F1                     l96:	
 19408                           
 19409                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19410  07F1  12A0               	bcf	_Buz1^(0+256),5
 19411                           
 19412                           ;Buzzer_B1.c: 73: RB3 = 0;
 19413  07F2  0020               	movlb	0	; select bank0
 19414  07F3  118D               	bcf	13,3	;volatile
 19415                           
 19416                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19417  07F4  3001               	movlw	1
 19418  07F5  0022               	movlb	2	; select bank2
 19419  07F6  02A3               	subwf	(_Buz1^(0+256)+3),f
 19420  07F7  0008               	return
 19421  07F8                     __end_of_Buzzer_Main:	
 19422                           
 19423                           	psect	text140
 19424  1A54                     __ptext140:	
 19425 ;; *************** function _Buzzer_Initialization *****************
 19426 ;; Defined at:
 19427 ;;		line 11 in file "../src/Buzzer_B1.c"
 19428 ;; Parameters:    Size  Location     Type
 19429 ;;		None
 19430 ;; Auto vars:     Size  Location     Type
 19431 ;;		None
 19432 ;; Return value:  Size  Location     Type
 19433 ;;		None               void
 19434 ;; Registers used:
 19435 ;;		None
 19436 ;; Tracked objects:
 19437 ;;		On entry : 0/0
 19438 ;;		On exit  : 0/0
 19439 ;;		Unchanged: 0/0
 19440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;Total ram usage:        0 bytes
 19446 ;; Hardware stack levels used:    1
 19447 ;; Hardware stack levels required when called:    5
 19448 ;; This function calls:
 19449 ;;		Nothing
 19450 ;; This function is called by:
 19451 ;;		_main
 19452 ;; This function uses a non-reentrant model
 19453 ;;
 19454                           
 19455                           
 19456                           ;psect for function _Buzzer_Initialization
 19457  1A54                     _Buzzer_Initialization:	
 19458                           
 19459                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19460                           
 19461                           ;incstack = 0
 19462                           ; Regs used in _Buzzer_Initialization: []
 19463  1A54  0022               	movlb	2	; select bank2
 19464  1A55  1420               	bsf	_Buz1^(0+256),0
 19465  1A56  0008               	return
 19466  1A57                     __end_of_Buzzer_Initialization:	
 19467                           
 19468                           	psect	intentry
 19469  0004                     __pintentry:	
 19470 ;; *************** function _ISR *****************
 19471 ;; Defined at:
 19472 ;;		line 116 in file "../src/MCU_B1.c"
 19473 ;; Parameters:    Size  Location     Type
 19474 ;;		None
 19475 ;; Auto vars:     Size  Location     Type
 19476 ;;		None
 19477 ;; Return value:  Size  Location     Type
 19478 ;;		None               void
 19479 ;; Registers used:
 19480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19481 ;; Tracked objects:
 19482 ;;		On entry : 0/0
 19483 ;;		On exit  : 0/0
 19484 ;;		Unchanged: 0/0
 19485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19488 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19489 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19490 ;;Total ram usage:        1 bytes
 19491 ;; Hardware stack levels used:    1
 19492 ;; Hardware stack levels required when called:    4
 19493 ;; This function calls:
 19494 ;;		_IOC_ISR
 19495 ;;		_TMR1_ISR
 19496 ;; This function is called by:
 19497 ;;		Interrupt level 1
 19498 ;; This function uses a non-reentrant model
 19499 ;;
 19500                           
 19501  0004                     _ISR:	
 19502                           
 19503                           ;incstack = 0
 19504                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19505  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19506  0005  3180               	pagesel	$
 19507  0006  0020               	movlb	0	; select bank0
 19508  0007  087F               	movf	127,w
 19509  0008  00FC               	movwf	??_ISR
 19510                           
 19511                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19512  0009  0021               	movlb	1	; select bank1
 19513  000A  1C11               	btfss	17,0	;volatile
 19514  000B  2812               	goto	i1l10910
 19515  000C  0020               	movlb	0	; select bank0
 19516  000D  1C11               	btfss	17,0	;volatile
 19517  000E  2812               	goto	i1l10910
 19518                           
 19519                           ;MCU_B1.c: 126: TMR1_ISR();
 19520  000F  319E  26F6  3180   	fcall	_TMR1_ISR
 19521  0012                     i1l10910:	
 19522                           
 19523                           ;MCU_B1.c: 127: }
 19524                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19525  0012  198B               	btfsc	11,3	;volatile
 19526  0013  1C0B               	btfss	11,0	;volatile
 19527  0014  281A               	goto	i1l1207
 19528  0015  0027               	movlb	7	; select bank7
 19529  0016  1D16               	btfss	22,2	;volatile
 19530  0017  281A               	goto	i1l1207
 19531                           
 19532                           ;MCU_B1.c: 139: IOC_ISR();
 19533  0018  319A  22CA         	fcall	_IOC_ISR
 19534  001A                     i1l1207:	
 19535                           ;MCU_B1.c: 140: }
 19536                           ;MCU_B1.c: 148: return;
 19537                           
 19538  001A  087C               	movf	??_ISR,w
 19539  001B  0020               	movlb	0	; select bank0
 19540  001C  00FF               	movwf	127
 19541  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19542  001E  0009               	retfie
 19543  001F                     __end_of_ISR:	
 19544                           
 19545                           	psect	text142
 19546  1EF6                     __ptext142:	
 19547 ;; *************** function _TMR1_ISR *****************
 19548 ;; Defined at:
 19549 ;;		line 236 in file "../src/MCU_B1.c"
 19550 ;; Parameters:    Size  Location     Type
 19551 ;;		None
 19552 ;; Auto vars:     Size  Location     Type
 19553 ;;		None
 19554 ;; Return value:  Size  Location     Type
 19555 ;;		None               void
 19556 ;; Registers used:
 19557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19558 ;; Tracked objects:
 19559 ;;		On entry : 0/0
 19560 ;;		On exit  : 0/0
 19561 ;;		Unchanged: 0/0
 19562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19567 ;;Total ram usage:        0 bytes
 19568 ;; Hardware stack levels used:    1
 19569 ;; Hardware stack levels required when called:    1
 19570 ;; This function calls:
 19571 ;;		_DimmerLights_TMR_1
 19572 ;; This function is called by:
 19573 ;;		_ISR
 19574 ;; This function uses a non-reentrant model
 19575 ;;
 19576                           
 19577                           
 19578                           ;psect for function _TMR1_ISR
 19579  1EF6                     _TMR1_ISR:	
 19580                           
 19581                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19582                           
 19583                           ;incstack = 0
 19584                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19585  1EF6  3189  21B1  319E   	fcall	_DimmerLights_TMR_1
 19586                           
 19587                           ;MCU_B1.c: 268: Timer1.Count++;
 19588  1EF9  3001               	movlw	1
 19589  1EFA  0022               	movlb	2	; select bank2
 19590  1EFB  07B2               	addwf	(_Timer1^(0+256)+1),f
 19591  1EFC  3000               	movlw	0
 19592  1EFD  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19593                           
 19594                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19595  1EFE  3001               	movlw	1
 19596  1EFF  3E31               	addlw	_Timer1& (0+255)
 19597  1F00  0086               	movwf	6
 19598  1F01  3001               	movlw	1	; select bank2/3
 19599  1F02  0087               	movwf	7
 19600  1F03  3F40               	moviw [0]fsr1
 19601  1F04  3AC8               	xorlw	200
 19602  1F05  1D03               	skipz
 19603  1F06  2F09               	goto	u1201_25
 19604  1F07  3F41               	moviw [1]fsr1
 19605  1F08  3A00               	xorlw	0
 19606  1F09                     u1201_25:	
 19607  1F09  1D03               	skipz
 19608  1F0A  2F0E               	goto	i1l10462
 19609                           
 19610                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19611  1F0B  01B2               	clrf	(_Timer1^(0+256)+1)
 19612  1F0C  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19613                           
 19614                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19615  1F0D  1431               	bsf	_Timer1^(0+256),0
 19616  1F0E                     i1l10462:	
 19617                           
 19618                           ;MCU_B1.c: 272: }
 19619                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19620  1F0E  30FA               	movlw	250
 19621  1F0F  0020               	movlb	0	; select bank0
 19622  1F10  0097               	movwf	23	;volatile
 19623                           
 19624                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19625  1F11  3038               	movlw	56
 19626  1F12  0096               	movwf	22	;volatile
 19627                           
 19628                           ;MCU_B1.c: 276: TMR1IF = 0;
 19629  1F13  1011               	bcf	17,0	;volatile
 19630  1F14  0008               	return
 19631  1F15                     __end_of_TMR1_ISR:	
 19632                           
 19633                           	psect	text143
 19634  09B1                     __ptext143:	
 19635 ;; *************** function _DimmerLights_TMR_1 *****************
 19636 ;; Defined at:
 19637 ;;		line 1387 in file "../src/Dimmer_B1.c"
 19638 ;; Parameters:    Size  Location     Type
 19639 ;;		None
 19640 ;; Auto vars:     Size  Location     Type
 19641 ;;		None
 19642 ;; Return value:  Size  Location     Type
 19643 ;;		None               void
 19644 ;; Registers used:
 19645 ;;		wreg, status,2, status,0
 19646 ;; Tracked objects:
 19647 ;;		On entry : 0/0
 19648 ;;		On exit  : 0/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19655 ;;Total ram usage:        1 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; This function calls:
 19658 ;;		Nothing
 19659 ;; This function is called by:
 19660 ;;		_TMR1_ISR
 19661 ;; This function uses a non-reentrant model
 19662 ;;
 19663                           
 19664                           
 19665                           ;psect for function _DimmerLights_TMR_1
 19666  09B1                     _DimmerLights_TMR_1:	
 19667                           
 19668                           ;Dimmer_B1.c: 1389: if (DimmerIntr1.Start == 1) {
 19669                           
 19670                           ;incstack = 0
 19671                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19672  09B1  0021               	movlb	1	; select bank1
 19673  09B2  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19674  09B3  29D6               	goto	i1l842
 19675                           
 19676                           ;Dimmer_B1.c: 1390: DimmerIntr1.Count++;
 19677  09B4  3001               	movlw	1
 19678  09B5  00F0               	movwf	??_DimmerLights_TMR_1
 19679  09B6  0870               	movf	??_DimmerLights_TMR_1,w
 19680  09B7  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19681                           
 19682                           ;Dimmer_B1.c: 1392: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19683  09B8  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19684  09B9  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19685  09BA  1D03               	skipz
 19686  09BB  29BE               	goto	i1l9912
 19687                           
 19688                           ;Dimmer_B1.c: 1393: DimmerIntr1.Count = 0;
 19689  09BC  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19690                           
 19691                           ;Dimmer_B1.c: 1394: DimmerIntr1.Start = 0;
 19692  09BD  113C               	bcf	_DimmerIntr1^(0+128),2
 19693  09BE                     i1l9912:	
 19694                           
 19695                           ;Dimmer_B1.c: 1395: }
 19696                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19697  09BE  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19698  09BF  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19699  09C0  1903               	btfsc	3,2
 19700                           
 19701                           ;Dimmer_B1.c: 1410: if (DimmerIntr1.ControlStatus == 1) {
 19702  09C1  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19703  09C2  29C5               	goto	i1l9918
 19704                           
 19705                           ;Dimmer_B1.c: 1411: RB1 = 0;
 19706  09C3  0020               	movlb	0	; select bank0
 19707  09C4  108D               	bcf	13,1	;volatile
 19708  09C5                     i1l9918:	
 19709                           
 19710                           ;Dimmer_B1.c: 1412: }
 19711                           ;Dimmer_B1.c: 1413: }
 19712                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19713  09C5  0021               	movlb	1	; select bank1
 19714  09C6  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19715  09C7  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19716  09C8  1903               	btfsc	3,2
 19717                           
 19718                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 19719  09C9  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19720  09CA  29CD               	goto	i1l9924
 19721                           
 19722                           ;Dimmer_B1.c: 1418: RB1 = 1;
 19723  09CB  0020               	movlb	0	; select bank0
 19724  09CC  148D               	bsf	13,1	;volatile
 19725  09CD                     i1l9924:	
 19726                           
 19727                           ;Dimmer_B1.c: 1419: }
 19728                           ;Dimmer_B1.c: 1420: }
 19729                           ;Dimmer_B1.c: 1423: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19730  09CD  0021               	movlb	1	; select bank1
 19731  09CE  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19732  09CF  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19733  09D0  1903               	btfsc	3,2
 19734                           
 19735                           ;Dimmer_B1.c: 1424: if (DimmerIntr1.ControlStatus == 1) {
 19736  09D1  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19737  09D2  29E7               	goto	i1l850
 19738                           
 19739                           ;Dimmer_B1.c: 1425: RB1 = 0;
 19740  09D3  0020               	movlb	0	; select bank0
 19741  09D4  108D               	bcf	13,1	;volatile
 19742                           
 19743                           ;Dimmer_B1.c: 1426: }
 19744                           ;Dimmer_B1.c: 1429: }
 19745                           ;Dimmer_B1.c: 1431: } else {
 19746  09D5  29E7               	goto	i1l850
 19747  09D6                     i1l842:	
 19748                           
 19749                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.GO == 1) {
 19750  09D6  1C3C               	btfss	_DimmerIntr1^(0+128),0
 19751  09D7  29E7               	goto	i1l850
 19752                           
 19753                           ;Dimmer_B1.c: 1433: DimmerIntr1.Count++;
 19754  09D8  3001               	movlw	1
 19755  09D9  00F0               	movwf	??_DimmerLights_TMR_1
 19756  09DA  0870               	movf	??_DimmerLights_TMR_1,w
 19757  09DB  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19758                           
 19759                           ;Dimmer_B1.c: 1434: if (DimmerIntr1.Count == 7) {
 19760  09DC  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19761  09DD  3A07               	xorlw	7
 19762  09DE  1D03               	skipz
 19763  09DF  29E7               	goto	i1l850
 19764                           
 19765                           ;Dimmer_B1.c: 1435: DimmerIntr1.Count = 0;
 19766  09E0  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19767                           
 19768                           ;Dimmer_B1.c: 1436: DimmerIntr1.GO = 0;
 19769  09E1  103C               	bcf	_DimmerIntr1^(0+128),0
 19770                           
 19771                           ;Dimmer_B1.c: 1437: DimmerIntr1.Start = 1;
 19772  09E2  153C               	bsf	_DimmerIntr1^(0+128),2
 19773                           
 19774                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.ControlStatus == 1) {
 19775  09E3  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19776  09E4  29E7               	goto	i1l850
 19777                           
 19778                           ;Dimmer_B1.c: 1440: RB1 = 1;
 19779  09E5  0020               	movlb	0	; select bank0
 19780  09E6  148D               	bsf	13,1	;volatile
 19781  09E7                     i1l850:	
 19782                           
 19783                           ;Dimmer_B1.c: 1441: }
 19784                           ;Dimmer_B1.c: 1442: }
 19785                           ;Dimmer_B1.c: 1443: }
 19786                           ;Dimmer_B1.c: 1444: }
 19787                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Tune == 1) {
 19788  09E7  0021               	movlb	1	; select bank1
 19789  09E8  1CBC               	btfss	_DimmerIntr1^(0+128),1
 19790  09E9  0008               	return
 19791                           
 19792                           ;Dimmer_B1.c: 1447: DimmerIntr1.Tune = 0;
 19793  09EA  10BC               	bcf	_DimmerIntr1^(0+128),1
 19794                           
 19795                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneTime++;
 19796  09EB  3001               	movlw	1
 19797  09EC  00F0               	movwf	??_DimmerLights_TMR_1
 19798  09ED  0870               	movf	??_DimmerLights_TMR_1,w
 19799  09EE  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 19800                           
 19801                           ;Dimmer_B1.c: 1449: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19802  09EF  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 19803  09F0  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 19804  09F1  1C03               	skipc
 19805  09F2  0008               	return
 19806                           
 19807                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneTime = 0;
 19808  09F3  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 19809                           
 19810                           ;Dimmer_B1.c: 1451: DimmerIntr1.TuneGO = 1;
 19811  09F4  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 19812                           
 19813                           ;Dimmer_B1.c: 1452: if (DimmerIntr1.Dimming_Sw == 1) {
 19814  09F5  1E3C               	btfss	_DimmerIntr1^(0+128),4
 19815  09F6  2A0D               	goto	i1l856
 19816                           
 19817                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.Dimming_Status == 0) {
 19818  09F7  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 19819  09F8  2A04               	goto	i1l9962
 19820                           
 19821                           ;Dimmer_B1.c: 1454: if (DimmerIntr1.DimmingValue < ((char)(87*0.6))) {
 19822  09F9  3034               	movlw	52
 19823  09FA  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19824  09FB  1803               	skipnc
 19825  09FC  2A02               	goto	i1l858
 19826                           
 19827                           ;Dimmer_B1.c: 1455: DimmerIntr1.DimmingValue++;
 19828  09FD  3001               	movlw	1
 19829  09FE  00F0               	movwf	??_DimmerLights_TMR_1
 19830  09FF  0870               	movf	??_DimmerLights_TMR_1,w
 19831  0A00  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 19832                           
 19833                           ;Dimmer_B1.c: 1456: } else {
 19834  0A01  0008               	return
 19835  0A02                     i1l858:	
 19836                           
 19837                           ;Dimmer_B1.c: 1457: DimmerIntr1.Dimming_Status = 1;
 19838  0A02  16BC               	bsf	_DimmerIntr1^(0+128),5
 19839                           
 19840                           ;Dimmer_B1.c: 1458: }
 19841                           ;Dimmer_B1.c: 1459: } else {
 19842  0A03  0008               	return
 19843  0A04                     i1l9962:	
 19844                           
 19845                           ;Dimmer_B1.c: 1460: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 19846  0A04  3007               	movlw	7
 19847  0A05  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19848  0A06  1C03               	skipc
 19849  0A07  2A0B               	goto	i1l861
 19850                           
 19851                           ;Dimmer_B1.c: 1461: DimmerIntr1.DimmingValue--;
 19852  0A08  3001               	movlw	1
 19853  0A09  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 19854                           
 19855                           ;Dimmer_B1.c: 1462: } else {
 19856  0A0A  0008               	return
 19857  0A0B                     i1l861:	
 19858                           
 19859                           ;Dimmer_B1.c: 1463: DimmerIntr1.Dimming_Status = 0;
 19860  0A0B  12BC               	bcf	_DimmerIntr1^(0+128),5
 19861                           
 19862                           ;Dimmer_B1.c: 1464: }
 19863                           ;Dimmer_B1.c: 1465: }
 19864                           ;Dimmer_B1.c: 1466: } else if (DimmerIntr1.Dimming_RF == 1) {
 19865  0A0C  0008               	return
 19866  0A0D                     i1l856:	
 19867  0A0D  1F3C               	btfss	_DimmerIntr1^(0+128),6
 19868  0A0E  0008               	return
 19869                           
 19870                           ;Dimmer_B1.c: 1467: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19871  0A0F  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 19872  0A10  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19873  0A11  1803               	skipnc
 19874  0A12  2A18               	goto	i1l9970
 19875                           
 19876                           ;Dimmer_B1.c: 1468: DimmerIntr1.DimmingValue++;
 19877  0A13  3001               	movlw	1
 19878  0A14  00F0               	movwf	??_DimmerLights_TMR_1
 19879  0A15  0870               	movf	??_DimmerLights_TMR_1,w
 19880  0A16  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 19881                           
 19882                           ;Dimmer_B1.c: 1469: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19883  0A17  0008               	return
 19884  0A18                     i1l9970:	
 19885  0A18  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 19886  0A19  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 19887  0A1A  1803               	skipnc
 19888  0A1B  2A1F               	goto	i1l867
 19889                           
 19890                           ;Dimmer_B1.c: 1470: DimmerIntr1.DimmingValue--;
 19891  0A1C  3001               	movlw	1
 19892  0A1D  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 19893                           
 19894                           ;Dimmer_B1.c: 1471: } else {
 19895  0A1E  0008               	return
 19896  0A1F                     i1l867:	
 19897                           
 19898                           ;Dimmer_B1.c: 1472: DimmerIntr1.Dimming_RF = 0;
 19899  0A1F  133C               	bcf	_DimmerIntr1^(0+128),6
 19900  0A20  0008               	return
 19901  0A21                     __end_of_DimmerLights_TMR_1:	
 19902                           
 19903                           	psect	text144
 19904  1ACA                     __ptext144:	
 19905 ;; *************** function _IOC_ISR *****************
 19906 ;; Defined at:
 19907 ;;		line 395 in file "../src/MCU_B1.c"
 19908 ;; Parameters:    Size  Location     Type
 19909 ;;		None
 19910 ;; Auto vars:     Size  Location     Type
 19911 ;;		None
 19912 ;; Return value:  Size  Location     Type
 19913 ;;		None               void
 19914 ;; Registers used:
 19915 ;;		wreg, status,2, status,0, pclath, cstack
 19916 ;; Tracked objects:
 19917 ;;		On entry : 0/0
 19918 ;;		On exit  : 0/0
 19919 ;;		Unchanged: 0/0
 19920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19925 ;;Total ram usage:        0 bytes
 19926 ;; Hardware stack levels used:    1
 19927 ;; Hardware stack levels required when called:    3
 19928 ;; This function calls:
 19929 ;;		_DimmerLights_IOC_1
 19930 ;; This function is called by:
 19931 ;;		_ISR
 19932 ;; This function uses a non-reentrant model
 19933 ;;
 19934                           
 19935                           
 19936                           ;psect for function _IOC_ISR
 19937  1ACA                     _IOC_ISR:	
 19938                           
 19939                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 19940                           
 19941                           ;incstack = 0
 19942                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19943  1ACA  0021               	movlb	1	; select bank1
 19944  1ACB  1C2F               	btfss	_myMain^(0+128),0
 19945  1ACC  2ACF               	goto	i1l7860
 19946                           
 19947                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 19948  1ACD  3193  230E         	fcall	_DimmerLights_IOC_1
 19949  1ACF                     i1l7860:	
 19950                           
 19951                           ;MCU_B1.c: 416: }
 19952                           ;MCU_B1.c: 418: IOCBF2 = 0;
 19953  1ACF  0027               	movlb	7	; select bank7
 19954  1AD0  1116               	bcf	22,2	;volatile
 19955                           
 19956                           ;MCU_B1.c: 419: IOCIF = 0;
 19957  1AD1  100B               	bcf	11,0	;volatile
 19958  1AD2  0008               	return
 19959  1AD3                     __end_of_IOC_ISR:	
 19960                           
 19961                           	psect	text145
 19962  130E                     __ptext145:	
 19963 ;; *************** function _DimmerLights_IOC_1 *****************
 19964 ;; Defined at:
 19965 ;;		line 1479 in file "../src/Dimmer_B1.c"
 19966 ;; Parameters:    Size  Location     Type
 19967 ;;		None
 19968 ;; Auto vars:     Size  Location     Type
 19969 ;;		None
 19970 ;; Return value:  Size  Location     Type
 19971 ;;		None               void
 19972 ;; Registers used:
 19973 ;;		wreg, status,2, status,0, pclath, cstack
 19974 ;; Tracked objects:
 19975 ;;		On entry : 0/0
 19976 ;;		On exit  : 0/0
 19977 ;;		Unchanged: 0/0
 19978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19983 ;;Total ram usage:        2 bytes
 19984 ;; Hardware stack levels used:    1
 19985 ;; Hardware stack levels required when called:    2
 19986 ;; This function calls:
 19987 ;;		i1_Division
 19988 ;; This function is called by:
 19989 ;;		_IOC_ISR
 19990 ;; This function uses a non-reentrant model
 19991 ;;
 19992                           
 19993                           
 19994                           ;psect for function _DimmerLights_IOC_1
 19995  130E                     _DimmerLights_IOC_1:	
 19996                           
 19997                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 19998                           
 19999                           ;incstack = 0
 20000                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20001  130E  0021               	movlb	1	; select bank1
 20002  130F  193C               	btfsc	_DimmerIntr1^(0+128),2
 20003  1310  0008               	return
 20004  1311  183C               	btfsc	_DimmerIntr1^(0+128),0
 20005  1312  0008               	return
 20006                           
 20007                           ;Dimmer_B1.c: 1495: if (RB2 != DimmerIntr1.Status) {
 20008  1313  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20009  1314  0C89               	rrf	9,f
 20010  1315  3901               	andlw	1
 20011  1316  00FA               	movwf	??_DimmerLights_IOC_1
 20012  1317  3000               	movlw	0
 20013  1318  0020               	movlb	0	; select bank0
 20014  1319  190D               	btfsc	13,2	;volatile
 20015  131A  3001               	movlw	1
 20016  131B  067A               	xorwf	??_DimmerLights_IOC_1,w
 20017  131C  1903               	skipnz
 20018  131D  0008               	return
 20019                           
 20020                           ;Dimmer_B1.c: 1498: DimmerIntr1.Count = 0;
 20021  131E  0021               	movlb	1	; select bank1
 20022  131F  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20023                           
 20024                           ;Dimmer_B1.c: 1499: DimmerIntr1.GO = 1;
 20025  1320  143C               	bsf	_DimmerIntr1^(0+128),0
 20026                           
 20027                           ;Dimmer_B1.c: 1501: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20028  1321  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20029  1322  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20030                           
 20031                           ;Dimmer_B1.c: 1502: DimmerIntr1.Tune = 1;
 20032  1323  14BC               	bsf	_DimmerIntr1^(0+128),1
 20033                           
 20034                           ;Dimmer_B1.c: 1503: }
 20035                           ;Dimmer_B1.c: 1505: if (DimmerIntr1.TuneGO == 1) {
 20036  1324  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20037  1325  2B44               	goto	i1l7360
 20038                           
 20039                           ;Dimmer_B1.c: 1506: DimmerIntr1.TuneGO = 0;
 20040  1326  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20041                           
 20042                           ;Dimmer_B1.c: 1509: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20043  1327  3002               	movlw	2
 20044  1328  00FA               	movwf	??_DimmerLights_IOC_1
 20045  1329  087A               	movf	??_DimmerLights_IOC_1,w
 20046  132A  00F5               	movwf	i1Division@num
 20047  132B  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20048  132C  319B  23AA  3193   	fcall	i1_Division
 20049  132F  00FB               	movwf	??_DimmerLights_IOC_1+1
 20050  1330  087B               	movf	??_DimmerLights_IOC_1+1,w
 20051  1331  0021               	movlb	1	; select bank1
 20052  1332  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20053                           
 20054                           ;Dimmer_B1.c: 1510: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20055  1333  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20056  1334  3AFF               	xorlw	255
 20057  1335  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20058  1336  3E3C               	addlw	60
 20059  1337  00FA               	movwf	??_DimmerLights_IOC_1
 20060  1338  087A               	movf	??_DimmerLights_IOC_1,w
 20061  1339  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20062                           
 20063                           ;Dimmer_B1.c: 1511: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20064  133A  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20065  133B  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20066  133C  00FA               	movwf	??_DimmerLights_IOC_1
 20067  133D  087A               	movf	??_DimmerLights_IOC_1,w
 20068  133E  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20069                           
 20070                           ;Dimmer_B1.c: 1512: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20071  133F  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20072  1340  3E01               	addlw	1
 20073  1341  00FA               	movwf	??_DimmerLights_IOC_1
 20074  1342  087A               	movf	??_DimmerLights_IOC_1,w
 20075  1343  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20076  1344                     i1l7360:	
 20077                           
 20078                           ;Dimmer_B1.c: 1513: }
 20079                           ;Dimmer_B1.c: 1517: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20080  1344  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20081  1345  0020               	movlb	0	; select bank0
 20082  1346  1D0D               	btfss	13,2	;volatile
 20083  1347  0008               	return
 20084  1348  0021               	movlb	1	; select bank1
 20085  1349  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20086  134A  0008               	return
 20087  134B                     __end_of_DimmerLights_IOC_1:	
 20088                           
 20089                           	psect	text146
 20090  1BAA                     __ptext146:	
 20091 ;; *************** function i1_Division *****************
 20092 ;; Defined at:
 20093 ;;		line 1382 in file "../src/Dimmer_B1.c"
 20094 ;; Parameters:    Size  Location     Type
 20095 ;;  value           1    wreg     unsigned char 
 20096 ;;  num             1    5[COMMON] unsigned char 
 20097 ;; Auto vars:     Size  Location     Type
 20098 ;;  value           1    8[COMMON] unsigned char 
 20099 ;;  Division        1    9[COMMON] unsigned char 
 20100 ;; Return value:  Size  Location     Type
 20101 ;;                  1    wreg      unsigned char 
 20102 ;; Registers used:
 20103 ;;		wreg, status,2, status,0, pclath, cstack
 20104 ;; Tracked objects:
 20105 ;;		On entry : 0/0
 20106 ;;		On exit  : 0/0
 20107 ;;		Unchanged: 0/0
 20108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20109 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20112 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20113 ;;Total ram usage:        5 bytes
 20114 ;; Hardware stack levels used:    1
 20115 ;; Hardware stack levels required when called:    1
 20116 ;; This function calls:
 20117 ;;		i1___lbdiv
 20118 ;; This function is called by:
 20119 ;;		_DimmerLights_IOC_1
 20120 ;; This function uses a non-reentrant model
 20121 ;;
 20122                           
 20123                           
 20124                           ;psect for function i1_Division
 20125  1BAA                     i1_Division:	
 20126                           
 20127                           ;incstack = 0
 20128                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20129                           ;i1Division@value stored from wreg
 20130  1BAA  00F8               	movwf	i1Division@value
 20131                           
 20132                           ;Dimmer_B1.c: 1383: char result = (char) (value / num);
 20133  1BAB  0875               	movf	i1Division@num,w
 20134  1BAC  00F6               	movwf	??i1_Division
 20135  1BAD  0876               	movf	??i1_Division,w
 20136  1BAE  00F0               	movwf	i1___lbdiv@divisor
 20137  1BAF  0878               	movf	i1Division@value,w
 20138  1BB0  3190  2066         	fcall	i1___lbdiv
 20139  1BB2  00F7               	movwf	??i1_Division+1
 20140  1BB3  0877               	movf	??i1_Division+1,w
 20141  1BB4  00F9               	movwf	i1Division@result
 20142                           
 20143                           ;Dimmer_B1.c: 1384: return result;
 20144  1BB5  0879               	movf	i1Division@result,w
 20145  1BB6  0008               	return
 20146  1BB7                     __end_ofi1_Division:	
 20147                           
 20148                           	psect	text147
 20149  1066                     __ptext147:	
 20150 ;; *************** function i1___lbdiv *****************
 20151 ;; Defined at:
 20152 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20153 ;; Parameters:    Size  Location     Type
 20154 ;;  dividend        1    wreg     unsigned char 
 20155 ;;  divisor         1    0[COMMON] unsigned char 
 20156 ;; Auto vars:     Size  Location     Type
 20157 ;;  dividend        1    2[COMMON] unsigned char 
 20158 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20159 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20160 ;; Return value:  Size  Location     Type
 20161 ;;                  1    wreg      unsigned char 
 20162 ;; Registers used:
 20163 ;;		wreg, status,2, status,0
 20164 ;; Tracked objects:
 20165 ;;		On entry : 0/0
 20166 ;;		On exit  : 0/0
 20167 ;;		Unchanged: 0/0
 20168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20169 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20170 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20172 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20173 ;;Total ram usage:        5 bytes
 20174 ;; Hardware stack levels used:    1
 20175 ;; This function calls:
 20176 ;;		Nothing
 20177 ;; This function is called by:
 20178 ;;		i1_Division
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           
 20183                           ;psect for function i1___lbdiv
 20184  1066                     i1___lbdiv:	
 20185                           
 20186                           ;incstack = 0
 20187                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20188                           ;i1___lbdiv@dividend stored from wreg
 20189  1066  00F2               	movwf	i1___lbdiv@dividend
 20190  1067  01F4               	clrf	i1___lbdiv@quotient
 20191  1068  0870               	movf	i1___lbdiv@divisor,w
 20192  1069  1903               	btfsc	3,2
 20193  106A  2885               	goto	i1l6738
 20194  106B  01F3               	clrf	i1___lbdiv@counter
 20195  106C  0AF3               	incf	i1___lbdiv@counter,f
 20196  106D                     i1l6726:	
 20197  106D  1BF0               	btfsc	i1___lbdiv@divisor,7
 20198  106E  2876               	goto	i1l6728
 20199  106F  1003               	clrc
 20200  1070  0DF0               	rlf	i1___lbdiv@divisor,f
 20201  1071  3001               	movlw	1
 20202  1072  00F1               	movwf	??i1___lbdiv
 20203  1073  0871               	movf	??i1___lbdiv,w
 20204  1074  07F3               	addwf	i1___lbdiv@counter,f
 20205  1075  286D               	goto	i1l6726
 20206  1076                     i1l6728:	
 20207  1076  1003               	clrc
 20208  1077  0DF4               	rlf	i1___lbdiv@quotient,f
 20209  1078  0870               	movf	i1___lbdiv@divisor,w
 20210  1079  0272               	subwf	i1___lbdiv@dividend,w
 20211  107A  1C03               	skipc
 20212  107B  2880               	goto	L10
 20213  107C  0870               	movf	i1___lbdiv@divisor,w
 20214  107D  02F2               	subwf	i1___lbdiv@dividend,f
 20215  107E  1474               	bsf	i1___lbdiv@quotient,0
 20216  107F  1003               	clrc
 20217  1080                     L10:	
 20218  1080  0CF0               	rrf	i1___lbdiv@divisor,f
 20219  1081  3001               	movlw	1
 20220  1082  02F3               	subwf	i1___lbdiv@counter,f
 20221  1083  1D03               	btfss	3,2
 20222  1084  2876               	goto	i1l6728
 20223  1085                     i1l6738:	
 20224  1085  0874               	movf	i1___lbdiv@quotient,w
 20225  1086  0008               	return
 20226  1087                     __end_ofi1___lbdiv:	
 20227  007E                     btemp	set	126	;btemp
 20228  007E                     pic14e$flags	set	126
 20229  007E                     wtemp	set	126
 20230  007E                     wtemp0	set	126
 20231  0080                     wtemp1	set	128
 20232  0082                     wtemp2	set	130
 20233  0084                     wtemp3	set	132
 20234  0086                     wtemp4	set	134
 20235  0088                     wtemp5	set	136
 20236  007F                     wtemp6	set	127
 20237  007E                     ttemp	set	126
 20238  007E                     ttemp0	set	126
 20239  0081                     ttemp1	set	129
 20240  0084                     ttemp2	set	132
 20241  0087                     ttemp3	set	135
 20242  007F                     ttemp4	set	127
 20243  007E                     ltemp	set	126
 20244  007E                     ltemp0	set	126
 20245  0082                     ltemp1	set	130
 20246  0086                     ltemp2	set	134
 20247  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         223
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      78
    BANK2            80      0      79
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  179557
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             13 BANK0      1     1      0
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     400
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     799
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5774
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5774
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4367
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4367
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   53848
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   53848
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   48978
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5261
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   43445
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0     226
                                              4 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12650
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24809
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2614
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1281
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2043
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3747
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   58861
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   58552
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   33530
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     166
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4661
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24629
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3925
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32899
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   32899
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     614
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     345
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5639
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5639
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3390
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1905
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     167      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     167      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Mar 11 15:24:04 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1E01                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 152C  
                                      l96 07F1                                        l88 1540  
                                      l97 07ED                                        l98 07DB  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1FDB  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D4                            setTemp_Main@AD 006C  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1AEF  
                  __end_of_setDelayOff_GO 0D25                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0800  
                    _setDimmerLights_Line 1C05                              ___ftadd@sign 004B  
                                     l100 07EB                                       l303 1E0D  
                                     l304 1E0F                                       l235 091A  
                    _setDimmerLights_SwOn 11FA                                       l531 09AA  
                                     l347 108C                                       l676 15D2  
                                     l758 1E99                                       l689 1BD3  
                                     l785 0FC2                                       _GIE 005F  
                                     _CRC 00CA                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CF                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C8  
                                     _Cmd 00CB              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1E1A                     _Buzzer_Initialization 1A54  
                         __end_of_ADC_Set 1AB3                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1DD0               _setDimmerIntr_ControlStatus 1DB8  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1AD3  
                   _setDimmerLights_OnOff 0F3D          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l2122 0548                                      l1244 13C6  
                                    l2213 11BA                                      l1502 0620  
                                    l2126 0497                                      l1511 1E00  
                                    l2127 04E8                                      l2152 1BDA  
                                    l1258 1127                                      l1268 0C0A  
                                    l2180 11F6                                      l1470 1175  
                                    l1471 1190                                      l2167 16CF  
                                    l2511 0379                                      l1447 140B  
                                    l1624 01F7                                      l2513 0245  
                                    l1634 01D3                                      l1626 0083  
                                    l2194 0B0B                                      l1475 118C  
                                    l1635 01D1                                      l1627 007F  
                                    l1628 007A                           __end_of_IOC_Set 1B10  
                                    l2491 1D7E                                      l1792 070B  
                                    l1786 07AA                                      l1797 07A2  
                                    l2862 1656                                      l2695 1EE1  
                                    l2856 163F                                      l2885 0420  
                          _Load_Main$3994 002B                                      l9020 1FCA  
                   _setDimmerLights_SwOff 129C                                      l9006 109D  
                                    l9014 1FC1                                      l9040 1DFA  
                                    l9008 10A8                                      l9016 1FC4  
                                    l9122 1FEE                                      l9036 1DEB  
                                    l9300 1303                                      l9116 1FE5  
                                    l9310 1C76                                      l9150 143B  
                                    l9118 1FE8                                      l9062 137E  
                                    l8432 161C                                      l8600 03EC  
                                    l9312 1C7B                                      l9160 144B  
                                    l9144 1432                                      l8442 1644  
                                    l8434 1626                                      l8602 03F6  
                                    l9306 1C6F                                      l9154 1442  
                                    l9146 1435                                      l9402 08EF  
                                    l9074 0B23                                      l8444 164C  
                                    l8436 162B                                      l8428 1615  
                                    l8612 0412                                      l8604 03FB  
                                    l9156 1445                                      l9420 0920  
                                    l8462 145C                                      l8622 0444  
                                    l8614 041C                                      l8606 03FF  
                                    l8702 0E36                                      l8542 1C86  
                                    l9430 0930                                      l9422 0923  
                                    l9078 0B28                                      l9350 0AED  
                                    l8480 147B                                      l8560 1FA1  
                                    l8632 045F                                      l9256 1170  
                                    l9520 1D9B                                      l9416 0901  
                                    l9088 0B78                                      l9352 0AF1  
                                    l9344 0AA9                                      l8490 1496  
                                    l9370 1F7C                                      l8618 0432  
                                    l8642 0D3C                                      l8714 0E52  
                                    l8706 0E3E                                      l9266 1187  
                                    l9258 1179                                      l8538 1C80  
                                    l9434 0936                                      l9426 0929  
                                    l9354 0AF5                                      l9346 0AB0  
                                    l9338 0A94                                      l8468 1467  
                                    l9372 1F85                                      l8572 03A9  
                                    l9292 12ED                                      l9452 087E  
                                    l9428 092D                                      l9348 0ACB  
                   _myMain_Initialization 1D11                                      l8494 149E  
                                    l8486 148D                                      l8478 146F  
                                    l9382 1F94                                      l8582 03BF  
                                    l8670 0DAC                                      l8662 0D93  
                                    l8718 0E5A                                      l8742 0C2B  
                                    l8910 17EA                                      l9286 12E4  
                                    l9542 0F84                                      l9550 0FA2  
                                    l9454 0881                                      l9358 0AF9  
                                    l8824 1221                                      l8576 03B0  
                                    l8648 0D52                                      l8760 0C5B  
                                    l9544 0F9B                                      l8826 1226  
                                    l8594 03D9                                      l8690 0DFB  
                                    l8770 0C7F                                      l8762 0C69  
                                    l9474 0899                                      l9458 0887  
                                    l9730 169B                                      l8684 0DE5  
                                    l8772 0C82                                      l8860 0CD7  
                                    l9564 0FD1                                      l9476 08B2  
                                    l9396 08E6                                      l8838 12CA  
                                    l8870 0D07                                      l9654 110F  
                                    l9398 08E9                                      l9734 16A4  
                                    l9718 1683                                      l8776 0C90  
                                    l8768 0C76                                      l9584 14BE  
                                    _CFGS 0CAE                                      l8874 0D1B  
                                    l9578 0FFD                                      l8970 1E5A  
                                    l9780 126E                                      l9764 1C65  
                                    l9862 0828                                      l9782 127A  
                                    l8974 1E60                                      l9864 082F  
                                    l9792 1295                                      l9848 1CFC  
                                    l8968 1E57                                      l8992 1ECB  
                            __CFG_WDTE$ON 0000                                      l9874 0857  
                                    l8994 1ED1                                      l9698 1C54  
                                    l9876 085E                                      l9788 128C  
                                    l9886 1AF7                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9125 0400                                      u9065 03DA  
                                    u9225 0D64                                      u9305 0E07  
                                    u9155 0413                                      u9235 0D74  
                                    u9315 0E17                                      u9245 0D94  
                                    u9095 03ED                                      u9255 0DA3  
                                    u9335 0E3F                                      u9265 0DAD  
                                    u9345 0E45                                      u9425 0C32  
                                    u8715 163A                                      u9515 1D47  
                                    u8815 1472                                      u8735 1647  
                                    u9375 0E5B                                      u9455 0C5C  
                                    u9385 0E61                                      u8835 147C  
                                    u8845 1486                                      u8765 165D  
                                    u9485 0C77                                      u9645 0CE3  
                                    u8855 148E                                      u8695 1621  
                                    u9680 17A5                                      _LWLO 0CAD  
                                    u9685 17A3                                      u9785 1092  
                                    _RSSI 00D1                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1E83  
              _setDimmerLights_DimmingRun 1E68                                      _Buz1 0120  
                                    _Load 0136                                      _Temp 00DA  
                                    _main 1554                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 09B1                           __end_of_RF_Main 1A60  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1B1B                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B8C                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2285 0023  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 007C  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
       setDimmerLights_DimmingRun@command 0022   __end_of_getDimmerLights_Allow_Condition 1DA2  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1D8C  
                  _getDimmerLights_Status 1BF4                        ??_getDimmer_LoadGO 0020  
                        __end_of_LED_Main 1A76                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CD                                     l10050 1F47  
                                   l10044 1F3F                                     l10070 1C32  
                                   l10142 070E                                     l10150 0720  
                                   l10046 1F42                                     l10232 04E3  
                                   l10082 0B93                                     l10260 0529  
                                   l10324 0278                                     l10308 022F  
                                   l10180 0768                                     l10148 071D  
                                   l10246 04F7                                     l10334 02AD  
                                   l10190 077D                                     l10408 07C5  
                                   l10096 0C03                                     l10088 0BA8  
                                   l10192 077F                                     l10274 0541  
                                   l10290 1D83                                     l10444 1E9B  
                                   l10508 13A5                                     l10348 02ED  
                                   l10620 13E6                                     l10294 1D89  
                                   l10358 0321                                     l10720 015B  
                                   l10482 06A3                                     l10730 0187  
                                   l10570 0A5F                                     l10562 0A40  
                                   l10388 1EDB                                     l10740 01A3  
                                   l10628 13F4                                     l10822 057A  
                                   l10750 01B9                                     l10726 016A  
                                   l10734 0193                                     l10654 0061  
                                   l10590 0A8E                                     l10574 0A67  
                   ?_setDimmerLights_Main 0070                                     l10816 056A  
                                   l10672 0082                                     l10834 05B1  
                                   l10826 0589                                     l10852 05F3  
                                   l10836 058C                                     l10940 1578  
                                   l10854 05CE                                     l10838 05B9  
                                   l10694 00D8                                     l10856 05FB  
                                   l10864 0616                                     l10688 00A6  
                                   l10944 1583                                     l10858 0605  
                                   l10786 01E6                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00E8                           __end_of___awdiv 14A5  
                         __end_of___lbdiv 1F96                           __end_of___ftadd 0477  
                         __end_of___ftdiv 0DCE                           __end_of___ftneg 1ADC  
                         __end_of___ftmul 0E82                                     u12105 13BD  
                         ___awdiv@divisor 0020                                     u12215 0A7E  
                                   _T1CON 0018                                     u10545 1D71  
                                   u11505 076F                                     u12305 1403  
                         __end_of___fttol 0C99                                     u12165 0A4F  
                                   u10825 1271                                     u11625 0518  
                                   u12265 1152                                     u10845 127B  
                                   u12445 00A4                                     u11485 0751  
                                   u12710 05F9                                     u10855 1285  
                                   u12455 00D6                                     u10865 128D  
                                   u12545 019A                                     u12465 011A  
                                   u11915 07BB                                     u12715 05D7  
                                   u11595 04BB                                     u12680 05B7  
                                   u11875 1EE2                                     u12685 0595  
                                   u11885 1EE7                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 129C                                     i1l850 09E7  
                                   i1l842 09D6                                     i1l861 0A0B  
                                   i1l856 0A0D                                     i1l858 0A02  
                                   i1l867 0A1F                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1D77  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 179B  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1736  
                                   _Light 00D0                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1F15                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1B92                                     _getAD 1F34  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1CC5               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1B05  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1CA1  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      __size_ofi1___lbdiv 0021                       _getAll_Sw_KeyStatus 1C27  
                      _setRF_DimmerLights 179B                           ___lbdiv@divisor 0020  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0023                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1BC6                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 15AF                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1A7A            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 054C                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1BE4  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0A93                            _setMemory_Data 1B6E  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0768        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 14A5                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1AE5                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1D38                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0942  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 07F8  
                               ??_WDT_Set 0020                          __end_of___awtoft 1FB8  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 166D  
                _getMain_All_Error_Status 115F                                    _IOCBF2 1CB2  
                                  i1l1207 001A                                    i1l7360 1344  
                                  i1l6726 106D                                    i1l6728 1076  
                                  i1l6738 1085                                    i1l7860 1ACF  
                                  i1l9912 09BE                                    i1l9924 09CD  
                                  i1l9918 09C5                                    _FVRCON 0117  
                                  i1l9970 0A18                                    i1l9962 0A04  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E34  
                                  _WDTCON 0097                      Exception_Main@i_3630 0033  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0026  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D62                                    _Dimmer 012C  
                                  _DlySw1 0166                          _setRF_AdjControl 1192  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C7D  
              __end_of_Mcu_Initialization 1CB3                       __end_of_Buzzer_Main 07F8  
                                  _Memory 01BE                          i1Division@result 0079  
                                  _Timer1 0131                                    ___bmul 1C7D  
                  __end_of_Exception_Main 0621                      Exception_Main@lights 0035  
                                  ___wmul 1ED8                       __size_ofi1_Division 000D  
                               ??___awdiv 0024                                 ??___lbdiv 0021  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D8  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CFE  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1CEB  
                                  _s_data 00D9                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 12D5                                    _myMain 00AF  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1B7A  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 14FB                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 1A5A  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1DE8  
        __end_of_setDimmerIntr_Dimming_Sw 1DB8                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___lbdiv 1087                 _setDimmerLights_DimmingOn 10AD  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1D11               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1BAA  
             __size_of_DimmerLights_TMR_1 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 0067                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1D77               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0047           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5415 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1F54  
                           __end_of_getAD 1F54                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1A6E  
                         _getSw_KeyStatus 1C5A                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1AFA  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FD  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1B4A                __end_of_set_TimeoutCleared 1A93  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1B3E                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1A60                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 07AE  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 1A66                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1A66  
                           ??_Switch_Main 0032                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CE                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1554  
                          _getDelayOff_GO 1C16                       _CC2500_WriteCommand 1E4E  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 160C  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0A21                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1ABA                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1AAC  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 112E  
      __end_of_DimmerLights_SelectPointer 1B3E                _DimmerLights_SelectPointer 1B32  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1B26  
                                 u1201_25 1F09                        _setRFSW_AdjControl 0B0C  
                  __end_of_setProductData 1B4A                                   i1l10462 1F0E  
                                 i1l10910 0012             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1ACA                                   _IOC_Set 1B05  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 138B  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1E1A  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1A5D                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1B10           __end_of_setControl_Lights_Table 0B0C  
                         setRF_Main@error 00E7                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 14FB                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1B9E  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1C49                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1C27  
          __end_of_getDimmerLights_Status 1C05                         __end_of_getRxData 16D1  
                 __end_of_getSw_KeyStatus 1C6B                  _CC2500_registers_address 1000  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1451  
                                 ___lbdiv 1F74                                   ___ftadd 0381  
                                 ___ftdiv 0D25                                   ___ftneg 1AD3  
                         __size_of___wmul 001E                                   ___ftmul 0DCE  
                                 ___fttol 0C12                       __end_of_Switch_Main 1ABA  
                      __end_ofi1_Division 1BB7                                   ___lwdiv 1265  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C49                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 13CC                                   __ptext2 1D11  
                                 __ptext3 112E                                   __ptext4 0A21  
                                 __ptext5 1F34                                   __ptext6 1CB3  
                                 __ptext7 0002                                   __ptext8 1A63  
                                 __ptext9 06EB                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 13CC  
               __end_of_Flash_Memory_Read 1E34                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 0477                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1A6A                  __end_of_setRF_AdjControl 11C6  
                       _DimmerLights_Main 1E83            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1A99                __end_of_CC2500_ClearRXFIFO 1A82  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1A86  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EC                            _LedPointSelect 1B62  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1B26                                   clrloop0 1AA0  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1A8E  
                    end_of_initialization 0047                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 10D5                             _DelayTime_1us 1087  
                       __end_of_setTxData 0F3D                __end_of_Flash_Memory_Write 112E  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1A99  
              __end_of_setRF_TransceiveGO 1CEB                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 1A9A                                _setSw_Main 01FD  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 002D  
                       _CC2500_ReadStatus 1FDB                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1C8F                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                      i1___lbdiv@quotient 0074                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 086B                             _CC2500_TxData 08D6  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0B8C  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                           _setCmd_Status 1DE8                       _Flash_Memory_Unlock 1ADC  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 006A  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1E9F  
                      _Mcu_Initialization 1CA1                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1A7E                      __end_of_my_MainTimer 140D  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B6E                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1066  
               __end_of_CC2500_InitSetREG 10FF                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 2000  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 10D5                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1E4E  
                    _setRF_Initialization 1B1B                        _setMemory_LoopSave 1CFE  
                             _Switch_Main 1AB3                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1C5A  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D4D               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1C38  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C8F       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1EF6  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 130E  
                           __pbitbssBANK1 0768             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 1554  
              __end_of_DimmerLights_IOC_1 134B                      _CC2500_FrequencyCabr 1B92  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 134B                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0A21                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 004B  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1AC2                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1F34  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 07AE  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1736  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 16D1  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1A8E         __end_of_setDimmerIntr_MaxmumValue 1B56  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016B                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0031  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A63                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D2  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0030                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1AEF                                 _Tx_Length 00D6  
                             __pdataBANK4 0220                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1192  
                        _CC2500_SIDLEMode 1A86                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1CC5                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E4  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 15AF                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 015E  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1EBB                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EC  
                          getRxData@error 00E5               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1A7A                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C6B  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 1A53                                 _getBuz_GO 1C38  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 06EB  
             _Flash_Memory_Initialization 0621                                  ?___awdiv 0020  
                               __ptext100 1C6B                                 __ptext101 14A5  
                                ?___lbdiv 0020                                 __ptext110 1ABA  
                               __ptext102 0E82                                 __ptext111 115F  
                               __ptext103 1CD8                                 __ptext120 0DCE  
                               __ptext112 1AA5                                 __ptext104 179B  
                               __ptext121 0D25                                 __ptext113 1A52  
                               __ptext105 1C05                                 __ptext130 11FA  
                               __ptext122 0381                                 __ptext114 15AF  
                               __ptext106 1B4A                                 __ptext131 14FB  
                               __ptext123 1F96                                 __ptext115 1CC5  
                               __ptext107 1DA2                                 __ptext140 1A54  
                               __ptext132 1451                                 __ptext124 160C  
                               __ptext116 1736                                 __ptext108 1BC6  
                               __ptext133 129C                                 __ptext125 1BB7  
                               __ptext117 16D1                                 __ptext109 1D8C  
                                ?___ftadd 0041                                 __ptext142 1EF6  
                               __ptext134 1BF4                                 __ptext126 1F74  
                               __ptext118 0C12                                 __ptext143 09B1  
                               __ptext135 1B32                                 __ptext127 1A6A  
                               __ptext119 1AD3                                 __ptext144 1ACA  
                               __ptext136 1A66                                 __ptext128 0942  
                               __ptext145 130E                                 __ptext137 1A93  
                               __ptext129 1B3E                                 __ptext146 1BAA  
                               __ptext138 1B26                                 __ptext147 1066  
                               __ptext139 07AE                                 _getRxData 166D  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 0041                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 138B                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A57                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1D8C  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1BD5              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1BC6                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C3                         ?_setRF_AdjControl 0070  
                               _r_address 00D7             __end_of_setDimmerLights_OnOff 1000  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12D5              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D24                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                      ??_setRF_AdjControl 0024                             _SwPointSelect 1B9E  
                     __end_of_setLED_Main 1265                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1A63  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1A72                           SwPointSelect@sw 0021  
                               clear_ram0 1A9F                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 13CC  
                               _setTxData 0E82       __end_of_DimmerLights_Initialization 1AAC  
             _DimmerLights_Initialization 1AA5                    _Flash_Memory_Main$3155 0028  
                      _CC2500_ClearRXFIFO 1A7E                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1A82                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1D38  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 10FF                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1EF6  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1B86  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1CD8                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1BE4                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1E68                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1CB3                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00C3                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CC  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1B86  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11FA  
                   _DlyOff_Initialization 1A93         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1BB7  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1DD0               setDimmerLights_OnOff@lights 00E4  
                _setDimmerIntr_Dimming_Sw 1DA2                                  _Fosc_Set 1A76  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0A93                        __end_of_getLoad_OK 1AC2  
                   _Switch_Initialization 1A8A         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 115F  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1E01                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00D5                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3618 0021  
           _getMain_All_Error_Status$3619 0023                  __end_of_getDimmer_LoadGO 1ACA  
                     _Load_Initialization 1A57          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 06EB                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1F96  
                        ??_LedPointSelect 0020                                  ___ftpack 160C  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E6  
                    CC2500_WriteREG@value 0022                               _setLED_Main 122F  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 0800  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0025  
                                __ptext10 1A60                                  __ptext11 1A53  
                                __ptext20 1D62                                  __ptext12 1AB3  
                                __ptext21 1A8A                                  __ptext13 01FD  
                                __ptext30 134B                                  __ptext22 1BE4  
                                __ptext14 1D24                                  __ptext31 0B0C  
                                __ptext23 1A5D                                  __ptext15 10AD  
                                __ptext40 1D4D                                  __ptext32 1E68  
                                __ptext24 0477                                  __ptext16 1C5A  
                                __ptext41 1A86                                  __ptext33 1C49  
                                __ptext25 166D                                  __ptext17 1B9E  
                                __ptext50 1E4E                                  __ptext42 140D  
                                __ptext34 1C38                                  __ptext26 11C6  
                                __ptext18 1D77                                  __ptext51 1A7A  
                                __ptext43 10D5                                  __ptext35 1BD5  
                                __ptext27 1CFE                                  __ptext19 1A8E  
                                __ptext60 1B05                                  __ptext52 1D38  
                                __ptext44 1F15                                  __ptext36 08D6  
                                __ptext28 0A93                                  __ptext61 1A76  
                                __ptext53 1E01                                  __ptext45 1FB8  
                                __ptext37 086B                                  __ptext29 1192  
                                __ptext70 1A57                                  __ptext62 1AAC  
                                __ptext54 1A5A                                  __ptext46 1B92  
                                __ptext38 1FDB                                  __ptext71 1E9F  
                                __ptext63 004B                                  __ptext55 1B1B  
                                __ptext47 1087                                  __ptext39 1EBB  
                                __ptext80 0621                                  __ptext72 1A72  
                                __ptext64 1AFA                                  __ptext56 1CA1  
                                __ptext48 1A82                                  __ptext81 1B6E  
                                __ptext73 122F                                  __ptext65 07F8  
                                __ptext57 1B10                                  __ptext49 1A7E  
                                __ptext90 12D5                                  __ptext82 10FF  
                                __ptext74 1A6E                                  __ptext66 1AC2  
                                __ptext58 1B86                                  __ptext91 1B62  
                                __ptext83 1ADC                                  __ptext75 1C8F  
                                __ptext67 1CEB                                  __ptext59 1E34  
                                __ptext92 1DD0                                  __ptext84 1E1A  
                                __ptext76 138B                                  __ptext68 1ED8  
                                __ptext93 1B56                                  __ptext85 054C  
                                __ptext77 1C27                                  __ptext69 1265  
                                __ptext94 1DB8                                  __ptext86 1AEF  
                                __ptext78 0B8C                                  __ptext95 0C99  
                                __ptext87 1E83                                  __ptext79 1B7A  
                                __ptext96 1C7D                                  __ptext88 0800  
                                __ptext97 1DE8                                  __ptext89 0F3D  
                                __ptext98 1AE5                                  __ptext99 1C16  
                                __product 0220                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1AFA  
            __end_of_setDimmerLights_Main 086B              __end_of_setDimmerLights_Line 1C16  
                      _DimmerLights_IOC_1 130E              __end_of_setDimmerLights_SwOn 122F  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1D24  
      __size_of_DimmerIntr_Initialization 005D                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 09B1                  __end_of_CC2500_SIDLEMode 1A8A  
              setDimmerLights_Main@lights 00E5               __end_of_DelayOffPointSelect 1B32  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1EBB  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1F15  
                __end_of_setMemory_Modify 1CD8                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 054C                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 105E                               ??_getRxData 00E4  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1D4D  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6475 0022  
                                main@argc 00E8                                  main@argv 00EA  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6472 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 140D  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1B62                _setDimmerIntr_DimmingValue 1B56  
             __end_of_Flash_Memory_Modify 0C12              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 11C6               __end_of_Flash_Memory_Unlock 1AE5  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1FB8  
                      __end_of_setSw_Main 0381                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0029                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1A53   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1A52                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A5A  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1B7A  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D3  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1A6A                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A6E                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C99  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1BAA  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 10AD  
                 __end_of_CC2500_ReadByte 1ED8              __end_of_setSw_Initialization 1BF4  
                         _Timeout_Counter 1D62           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1BD5  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1A72  
          __end_of_setTemp_Initialization 1A54                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1A5D  
               __size_of_setRF_AdjControl 0034                     __end_of_CC2500_RxData 08D6  
                   __end_of_CC2500_TxData 0942                     _setLoad_AH_AL_Restore 1E9F  
                 __end_of_CC2500_PowerRST 1451  
