

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Mar 13 16:49:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	intentry,global,class=CODE,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,delta=2
   170                           	dabs	1,0x7E,2
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000D                     	;# 
   185  000E                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  011D                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  018E                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0194                     	;# 
   229  0195                     	;# 
   230  0196                     	;# 
   231  0197                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020D                     	;# 
   244  0210                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0291                     	;# 
   261  0291                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0298                     	;# 
   265  0298                     	;# 
   266  0299                     	;# 
   267  029A                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  008C                     	;# 
   310  008D                     	;# 
   311  008E                     	;# 
   312  0090                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0095                     	;# 
   316  0096                     	;# 
   317  0097                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  0116                     	;# 
   329  0117                     	;# 
   330  011D                     	;# 
   331  018C                     	;# 
   332  018D                     	;# 
   333  018E                     	;# 
   334  0191                     	;# 
   335  0191                     	;# 
   336  0192                     	;# 
   337  0193                     	;# 
   338  0193                     	;# 
   339  0194                     	;# 
   340  0195                     	;# 
   341  0196                     	;# 
   342  0197                     	;# 
   343  0199                     	;# 
   344  019A                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019C                     	;# 
   350  019C                     	;# 
   351  019D                     	;# 
   352  019E                     	;# 
   353  019F                     	;# 
   354  020D                     	;# 
   355  0210                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0291                     	;# 
   372  0291                     	;# 
   373  0292                     	;# 
   374  0293                     	;# 
   375  0298                     	;# 
   376  0298                     	;# 
   377  0299                     	;# 
   378  029A                     	;# 
   379  0394                     	;# 
   380  0395                     	;# 
   381  0396                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000D                     	;# 
   407  000E                     	;# 
   408  0010                     	;# 
   409  0011                     	;# 
   410  0012                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  0090                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009E                     	;# 
   436  010C                     	;# 
   437  010D                     	;# 
   438  010E                     	;# 
   439  0116                     	;# 
   440  0117                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0197                     	;# 
   454  0199                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019C                     	;# 
   461  019C                     	;# 
   462  019D                     	;# 
   463  019E                     	;# 
   464  019F                     	;# 
   465  020D                     	;# 
   466  0210                     	;# 
   467  0211                     	;# 
   468  0211                     	;# 
   469  0212                     	;# 
   470  0212                     	;# 
   471  0213                     	;# 
   472  0213                     	;# 
   473  0214                     	;# 
   474  0214                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0216                     	;# 
   479  0216                     	;# 
   480  0217                     	;# 
   481  0217                     	;# 
   482  0291                     	;# 
   483  0291                     	;# 
   484  0292                     	;# 
   485  0293                     	;# 
   486  0298                     	;# 
   487  0298                     	;# 
   488  0299                     	;# 
   489  029A                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  0FE4                     	;# 
   494  0FE5                     	;# 
   495  0FE6                     	;# 
   496  0FE7                     	;# 
   497  0FE8                     	;# 
   498  0FE9                     	;# 
   499  0FEA                     	;# 
   500  0FEB                     	;# 
   501  0FED                     	;# 
   502  0FEE                     	;# 
   503  0FEF                     	;# 
   504  0000                     	;# 
   505  0001                     	;# 
   506  0002                     	;# 
   507  0003                     	;# 
   508  0004                     	;# 
   509  0005                     	;# 
   510  0006                     	;# 
   511  0007                     	;# 
   512  0008                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  0010                     	;# 
   520  0011                     	;# 
   521  0012                     	;# 
   522  0015                     	;# 
   523  0016                     	;# 
   524  0016                     	;# 
   525  0017                     	;# 
   526  0018                     	;# 
   527  0019                     	;# 
   528  001A                     	;# 
   529  001B                     	;# 
   530  001C                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  0090                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0095                     	;# 
   538  0096                     	;# 
   539  0097                     	;# 
   540  0099                     	;# 
   541  009A                     	;# 
   542  009B                     	;# 
   543  009B                     	;# 
   544  009C                     	;# 
   545  009D                     	;# 
   546  009E                     	;# 
   547  010C                     	;# 
   548  010D                     	;# 
   549  010E                     	;# 
   550  0116                     	;# 
   551  0117                     	;# 
   552  011D                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  018E                     	;# 
   556  0191                     	;# 
   557  0191                     	;# 
   558  0192                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0194                     	;# 
   562  0195                     	;# 
   563  0196                     	;# 
   564  0197                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019C                     	;# 
   572  019C                     	;# 
   573  019D                     	;# 
   574  019E                     	;# 
   575  019F                     	;# 
   576  020D                     	;# 
   577  0210                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0291                     	;# 
   594  0291                     	;# 
   595  0292                     	;# 
   596  0293                     	;# 
   597  0298                     	;# 
   598  0298                     	;# 
   599  0299                     	;# 
   600  029A                     	;# 
   601  0394                     	;# 
   602  0395                     	;# 
   603  0396                     	;# 
   604  0FE4                     	;# 
   605  0FE5                     	;# 
   606  0FE6                     	;# 
   607  0FE7                     	;# 
   608  0FE8                     	;# 
   609  0FE9                     	;# 
   610  0FEA                     	;# 
   611  0FEB                     	;# 
   612  0FED                     	;# 
   613  0FEE                     	;# 
   614  0FEF                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  0010                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0016                     	;# 
   636  0017                     	;# 
   637  0018                     	;# 
   638  0019                     	;# 
   639  001A                     	;# 
   640  001B                     	;# 
   641  001C                     	;# 
   642  008C                     	;# 
   643  008D                     	;# 
   644  008E                     	;# 
   645  0090                     	;# 
   646  0091                     	;# 
   647  0092                     	;# 
   648  0095                     	;# 
   649  0096                     	;# 
   650  0097                     	;# 
   651  0099                     	;# 
   652  009A                     	;# 
   653  009B                     	;# 
   654  009B                     	;# 
   655  009C                     	;# 
   656  009D                     	;# 
   657  009E                     	;# 
   658  010C                     	;# 
   659  010D                     	;# 
   660  010E                     	;# 
   661  0116                     	;# 
   662  0117                     	;# 
   663  011D                     	;# 
   664  018C                     	;# 
   665  018D                     	;# 
   666  018E                     	;# 
   667  0191                     	;# 
   668  0191                     	;# 
   669  0192                     	;# 
   670  0193                     	;# 
   671  0193                     	;# 
   672  0194                     	;# 
   673  0195                     	;# 
   674  0196                     	;# 
   675  0197                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019C                     	;# 
   683  019C                     	;# 
   684  019D                     	;# 
   685  019E                     	;# 
   686  019F                     	;# 
   687  020D                     	;# 
   688  0210                     	;# 
   689  0211                     	;# 
   690  0211                     	;# 
   691  0212                     	;# 
   692  0212                     	;# 
   693  0213                     	;# 
   694  0213                     	;# 
   695  0214                     	;# 
   696  0214                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0215                     	;# 
   700  0216                     	;# 
   701  0216                     	;# 
   702  0217                     	;# 
   703  0217                     	;# 
   704  0291                     	;# 
   705  0291                     	;# 
   706  0292                     	;# 
   707  0293                     	;# 
   708  0298                     	;# 
   709  0298                     	;# 
   710  0299                     	;# 
   711  029A                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  000E                     	;# 
   741  0010                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  008C                     	;# 
   754  008D                     	;# 
   755  008E                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0095                     	;# 
   760  0096                     	;# 
   761  0097                     	;# 
   762  0099                     	;# 
   763  009A                     	;# 
   764  009B                     	;# 
   765  009B                     	;# 
   766  009C                     	;# 
   767  009D                     	;# 
   768  009E                     	;# 
   769  010C                     	;# 
   770  010D                     	;# 
   771  010E                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  011D                     	;# 
   775  018C                     	;# 
   776  018D                     	;# 
   777  018E                     	;# 
   778  0191                     	;# 
   779  0191                     	;# 
   780  0192                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0197                     	;# 
   787  0199                     	;# 
   788  019A                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019C                     	;# 
   794  019C                     	;# 
   795  019D                     	;# 
   796  019E                     	;# 
   797  019F                     	;# 
   798  020D                     	;# 
   799  0210                     	;# 
   800  0211                     	;# 
   801  0211                     	;# 
   802  0212                     	;# 
   803  0212                     	;# 
   804  0213                     	;# 
   805  0213                     	;# 
   806  0214                     	;# 
   807  0214                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0216                     	;# 
   812  0216                     	;# 
   813  0217                     	;# 
   814  0217                     	;# 
   815  0291                     	;# 
   816  0291                     	;# 
   817  0292                     	;# 
   818  0293                     	;# 
   819  0298                     	;# 
   820  0298                     	;# 
   821  0299                     	;# 
   822  029A                     	;# 
   823  0394                     	;# 
   824  0395                     	;# 
   825  0396                     	;# 
   826  0FE4                     	;# 
   827  0FE5                     	;# 
   828  0FE6                     	;# 
   829  0FE7                     	;# 
   830  0FE8                     	;# 
   831  0FE9                     	;# 
   832  0FEA                     	;# 
   833  0FEB                     	;# 
   834  0FED                     	;# 
   835  0FEE                     	;# 
   836  0FEF                     	;# 
   837  0000                     	;# 
   838  0001                     	;# 
   839  0002                     	;# 
   840  0003                     	;# 
   841  0004                     	;# 
   842  0005                     	;# 
   843  0006                     	;# 
   844  0007                     	;# 
   845  0008                     	;# 
   846  0009                     	;# 
   847  000A                     	;# 
   848  000B                     	;# 
   849  000C                     	;# 
   850  000D                     	;# 
   851  000E                     	;# 
   852  0010                     	;# 
   853  0011                     	;# 
   854  0012                     	;# 
   855  0015                     	;# 
   856  0016                     	;# 
   857  0016                     	;# 
   858  0017                     	;# 
   859  0018                     	;# 
   860  0019                     	;# 
   861  001A                     	;# 
   862  001B                     	;# 
   863  001C                     	;# 
   864  008C                     	;# 
   865  008D                     	;# 
   866  008E                     	;# 
   867  0090                     	;# 
   868  0091                     	;# 
   869  0092                     	;# 
   870  0095                     	;# 
   871  0096                     	;# 
   872  0097                     	;# 
   873  0099                     	;# 
   874  009A                     	;# 
   875  009B                     	;# 
   876  009B                     	;# 
   877  009C                     	;# 
   878  009D                     	;# 
   879  009E                     	;# 
   880  010C                     	;# 
   881  010D                     	;# 
   882  010E                     	;# 
   883  0116                     	;# 
   884  0117                     	;# 
   885  011D                     	;# 
   886  018C                     	;# 
   887  018D                     	;# 
   888  018E                     	;# 
   889  0191                     	;# 
   890  0191                     	;# 
   891  0192                     	;# 
   892  0193                     	;# 
   893  0193                     	;# 
   894  0194                     	;# 
   895  0195                     	;# 
   896  0196                     	;# 
   897  0197                     	;# 
   898  0199                     	;# 
   899  019A                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019C                     	;# 
   905  019C                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019F                     	;# 
   909  020D                     	;# 
   910  0210                     	;# 
   911  0211                     	;# 
   912  0211                     	;# 
   913  0212                     	;# 
   914  0212                     	;# 
   915  0213                     	;# 
   916  0213                     	;# 
   917  0214                     	;# 
   918  0214                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0216                     	;# 
   923  0216                     	;# 
   924  0217                     	;# 
   925  0217                     	;# 
   926  0291                     	;# 
   927  0291                     	;# 
   928  0292                     	;# 
   929  0293                     	;# 
   930  0298                     	;# 
   931  0298                     	;# 
   932  0299                     	;# 
   933  029A                     	;# 
   934  0394                     	;# 
   935  0395                     	;# 
   936  0396                     	;# 
   937  0FE4                     	;# 
   938  0FE5                     	;# 
   939  0FE6                     	;# 
   940  0FE7                     	;# 
   941  0FE8                     	;# 
   942  0FE9                     	;# 
   943  0FEA                     	;# 
   944  0FEB                     	;# 
   945  0FED                     	;# 
   946  0FEE                     	;# 
   947  0FEF                     	;# 
   948  0000                     	;# 
   949  0001                     	;# 
   950  0002                     	;# 
   951  0003                     	;# 
   952  0004                     	;# 
   953  0005                     	;# 
   954  0006                     	;# 
   955  0007                     	;# 
   956  0008                     	;# 
   957  0009                     	;# 
   958  000A                     	;# 
   959  000B                     	;# 
   960  000C                     	;# 
   961  000D                     	;# 
   962  000E                     	;# 
   963  0010                     	;# 
   964  0011                     	;# 
   965  0012                     	;# 
   966  0015                     	;# 
   967  0016                     	;# 
   968  0016                     	;# 
   969  0017                     	;# 
   970  0018                     	;# 
   971  0019                     	;# 
   972  001A                     	;# 
   973  001B                     	;# 
   974  001C                     	;# 
   975  008C                     	;# 
   976  008D                     	;# 
   977  008E                     	;# 
   978  0090                     	;# 
   979  0091                     	;# 
   980  0092                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0099                     	;# 
   985  009A                     	;# 
   986  009B                     	;# 
   987  009B                     	;# 
   988  009C                     	;# 
   989  009D                     	;# 
   990  009E                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0116                     	;# 
   995  0117                     	;# 
   996  011D                     	;# 
   997  018C                     	;# 
   998  018D                     	;# 
   999  018E                     	;# 
  1000  0191                     	;# 
  1001  0191                     	;# 
  1002  0192                     	;# 
  1003  0193                     	;# 
  1004  0193                     	;# 
  1005  0194                     	;# 
  1006  0195                     	;# 
  1007  0196                     	;# 
  1008  0197                     	;# 
  1009  0199                     	;# 
  1010  019A                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019C                     	;# 
  1016  019C                     	;# 
  1017  019D                     	;# 
  1018  019E                     	;# 
  1019  019F                     	;# 
  1020  020D                     	;# 
  1021  0210                     	;# 
  1022  0211                     	;# 
  1023  0211                     	;# 
  1024  0212                     	;# 
  1025  0212                     	;# 
  1026  0213                     	;# 
  1027  0213                     	;# 
  1028  0214                     	;# 
  1029  0214                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0216                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0217                     	;# 
  1037  0291                     	;# 
  1038  0291                     	;# 
  1039  0292                     	;# 
  1040  0293                     	;# 
  1041  0298                     	;# 
  1042  0298                     	;# 
  1043  0299                     	;# 
  1044  029A                     	;# 
  1045  0394                     	;# 
  1046  0395                     	;# 
  1047  0396                     	;# 
  1048  0FE4                     	;# 
  1049  0FE5                     	;# 
  1050  0FE6                     	;# 
  1051  0FE7                     	;# 
  1052  0FE8                     	;# 
  1053  0FE9                     	;# 
  1054  0FEA                     	;# 
  1055  0FEB                     	;# 
  1056  0FED                     	;# 
  1057  0FEE                     	;# 
  1058  0FEF                     	;# 
  1059  0000                     	;# 
  1060  0001                     	;# 
  1061  0002                     	;# 
  1062  0003                     	;# 
  1063  0004                     	;# 
  1064  0005                     	;# 
  1065  0006                     	;# 
  1066  0007                     	;# 
  1067  0008                     	;# 
  1068  0009                     	;# 
  1069  000A                     	;# 
  1070  000B                     	;# 
  1071  000C                     	;# 
  1072  000D                     	;# 
  1073  000E                     	;# 
  1074  0010                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0015                     	;# 
  1078  0016                     	;# 
  1079  0016                     	;# 
  1080  0017                     	;# 
  1081  0018                     	;# 
  1082  0019                     	;# 
  1083  001A                     	;# 
  1084  001B                     	;# 
  1085  001C                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  0090                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0095                     	;# 
  1093  0096                     	;# 
  1094  0097                     	;# 
  1095  0099                     	;# 
  1096  009A                     	;# 
  1097  009B                     	;# 
  1098  009B                     	;# 
  1099  009C                     	;# 
  1100  009D                     	;# 
  1101  009E                     	;# 
  1102  010C                     	;# 
  1103  010D                     	;# 
  1104  010E                     	;# 
  1105  0116                     	;# 
  1106  0117                     	;# 
  1107  011D                     	;# 
  1108  018C                     	;# 
  1109  018D                     	;# 
  1110  018E                     	;# 
  1111  0191                     	;# 
  1112  0191                     	;# 
  1113  0192                     	;# 
  1114  0193                     	;# 
  1115  0193                     	;# 
  1116  0194                     	;# 
  1117  0195                     	;# 
  1118  0196                     	;# 
  1119  0197                     	;# 
  1120  0199                     	;# 
  1121  019A                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019C                     	;# 
  1127  019C                     	;# 
  1128  019D                     	;# 
  1129  019E                     	;# 
  1130  019F                     	;# 
  1131  020D                     	;# 
  1132  0210                     	;# 
  1133  0211                     	;# 
  1134  0211                     	;# 
  1135  0212                     	;# 
  1136  0212                     	;# 
  1137  0213                     	;# 
  1138  0213                     	;# 
  1139  0214                     	;# 
  1140  0214                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0216                     	;# 
  1145  0216                     	;# 
  1146  0217                     	;# 
  1147  0217                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0298                     	;# 
  1153  0298                     	;# 
  1154  0299                     	;# 
  1155  029A                     	;# 
  1156  0394                     	;# 
  1157  0395                     	;# 
  1158  0396                     	;# 
  1159  0FE4                     	;# 
  1160  0FE5                     	;# 
  1161  0FE6                     	;# 
  1162  0FE7                     	;# 
  1163  0FE8                     	;# 
  1164  0FE9                     	;# 
  1165  0FEA                     	;# 
  1166  0FEB                     	;# 
  1167  0FED                     	;# 
  1168  0FEE                     	;# 
  1169  0FEF                     	;# 
  1170  0000                     	;# 
  1171  0001                     	;# 
  1172  0002                     	;# 
  1173  0003                     	;# 
  1174  0004                     	;# 
  1175  0005                     	;# 
  1176  0006                     	;# 
  1177  0007                     	;# 
  1178  0008                     	;# 
  1179  0009                     	;# 
  1180  000A                     	;# 
  1181  000B                     	;# 
  1182  000C                     	;# 
  1183  000D                     	;# 
  1184  000E                     	;# 
  1185  0010                     	;# 
  1186  0011                     	;# 
  1187  0012                     	;# 
  1188  0015                     	;# 
  1189  0016                     	;# 
  1190  0016                     	;# 
  1191  0017                     	;# 
  1192  0018                     	;# 
  1193  0019                     	;# 
  1194  001A                     	;# 
  1195  001B                     	;# 
  1196  001C                     	;# 
  1197  008C                     	;# 
  1198  008D                     	;# 
  1199  008E                     	;# 
  1200  0090                     	;# 
  1201  0091                     	;# 
  1202  0092                     	;# 
  1203  0095                     	;# 
  1204  0096                     	;# 
  1205  0097                     	;# 
  1206  0099                     	;# 
  1207  009A                     	;# 
  1208  009B                     	;# 
  1209  009B                     	;# 
  1210  009C                     	;# 
  1211  009D                     	;# 
  1212  009E                     	;# 
  1213  010C                     	;# 
  1214  010D                     	;# 
  1215  010E                     	;# 
  1216  0116                     	;# 
  1217  0117                     	;# 
  1218  011D                     	;# 
  1219  018C                     	;# 
  1220  018D                     	;# 
  1221  018E                     	;# 
  1222  0191                     	;# 
  1223  0191                     	;# 
  1224  0192                     	;# 
  1225  0193                     	;# 
  1226  0193                     	;# 
  1227  0194                     	;# 
  1228  0195                     	;# 
  1229  0196                     	;# 
  1230  0197                     	;# 
  1231  0199                     	;# 
  1232  019A                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019C                     	;# 
  1238  019C                     	;# 
  1239  019D                     	;# 
  1240  019E                     	;# 
  1241  019F                     	;# 
  1242  020D                     	;# 
  1243  0210                     	;# 
  1244  0211                     	;# 
  1245  0211                     	;# 
  1246  0212                     	;# 
  1247  0212                     	;# 
  1248  0213                     	;# 
  1249  0213                     	;# 
  1250  0214                     	;# 
  1251  0214                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0291                     	;# 
  1260  0291                     	;# 
  1261  0292                     	;# 
  1262  0293                     	;# 
  1263  0298                     	;# 
  1264  0298                     	;# 
  1265  0299                     	;# 
  1266  029A                     	;# 
  1267  0394                     	;# 
  1268  0395                     	;# 
  1269  0396                     	;# 
  1270  0FE4                     	;# 
  1271  0FE5                     	;# 
  1272  0FE6                     	;# 
  1273  0FE7                     	;# 
  1274  0FE8                     	;# 
  1275  0FE9                     	;# 
  1276  0FEA                     	;# 
  1277  0FEB                     	;# 
  1278  0FED                     	;# 
  1279  0FEE                     	;# 
  1280  0FEF                     	;# 
  1281  0000                     	;# 
  1282  0001                     	;# 
  1283  0002                     	;# 
  1284  0003                     	;# 
  1285  0004                     	;# 
  1286  0005                     	;# 
  1287  0006                     	;# 
  1288  0007                     	;# 
  1289  0008                     	;# 
  1290  0009                     	;# 
  1291  000A                     	;# 
  1292  000B                     	;# 
  1293  000C                     	;# 
  1294  000D                     	;# 
  1295  000E                     	;# 
  1296  0010                     	;# 
  1297  0011                     	;# 
  1298  0012                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  008C                     	;# 
  1309  008D                     	;# 
  1310  008E                     	;# 
  1311  0090                     	;# 
  1312  0091                     	;# 
  1313  0092                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0097                     	;# 
  1317  0099                     	;# 
  1318  009A                     	;# 
  1319  009B                     	;# 
  1320  009B                     	;# 
  1321  009C                     	;# 
  1322  009D                     	;# 
  1323  009E                     	;# 
  1324  010C                     	;# 
  1325  010D                     	;# 
  1326  010E                     	;# 
  1327  0116                     	;# 
  1328  0117                     	;# 
  1329  011D                     	;# 
  1330  018C                     	;# 
  1331  018D                     	;# 
  1332  018E                     	;# 
  1333  0191                     	;# 
  1334  0191                     	;# 
  1335  0192                     	;# 
  1336  0193                     	;# 
  1337  0193                     	;# 
  1338  0194                     	;# 
  1339  0195                     	;# 
  1340  0196                     	;# 
  1341  0197                     	;# 
  1342  0199                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019D                     	;# 
  1351  019E                     	;# 
  1352  019F                     	;# 
  1353  020D                     	;# 
  1354  0210                     	;# 
  1355  0211                     	;# 
  1356  0211                     	;# 
  1357  0212                     	;# 
  1358  0212                     	;# 
  1359  0213                     	;# 
  1360  0213                     	;# 
  1361  0214                     	;# 
  1362  0214                     	;# 
  1363  0215                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0216                     	;# 
  1367  0216                     	;# 
  1368  0217                     	;# 
  1369  0217                     	;# 
  1370  0291                     	;# 
  1371  0291                     	;# 
  1372  0292                     	;# 
  1373  0293                     	;# 
  1374  0298                     	;# 
  1375  0298                     	;# 
  1376  0299                     	;# 
  1377  029A                     	;# 
  1378  0394                     	;# 
  1379  0395                     	;# 
  1380  0396                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000D                     	;# 
  1406  000E                     	;# 
  1407  0010                     	;# 
  1408  0011                     	;# 
  1409  0012                     	;# 
  1410  0015                     	;# 
  1411  0016                     	;# 
  1412  0016                     	;# 
  1413  0017                     	;# 
  1414  0018                     	;# 
  1415  0019                     	;# 
  1416  001A                     	;# 
  1417  001B                     	;# 
  1418  001C                     	;# 
  1419  008C                     	;# 
  1420  008D                     	;# 
  1421  008E                     	;# 
  1422  0090                     	;# 
  1423  0091                     	;# 
  1424  0092                     	;# 
  1425  0095                     	;# 
  1426  0096                     	;# 
  1427  0097                     	;# 
  1428  0099                     	;# 
  1429  009A                     	;# 
  1430  009B                     	;# 
  1431  009B                     	;# 
  1432  009C                     	;# 
  1433  009D                     	;# 
  1434  009E                     	;# 
  1435  010C                     	;# 
  1436  010D                     	;# 
  1437  010E                     	;# 
  1438  0116                     	;# 
  1439  0117                     	;# 
  1440  011D                     	;# 
  1441  018C                     	;# 
  1442  018D                     	;# 
  1443  018E                     	;# 
  1444  0191                     	;# 
  1445  0191                     	;# 
  1446  0192                     	;# 
  1447  0193                     	;# 
  1448  0193                     	;# 
  1449  0194                     	;# 
  1450  0195                     	;# 
  1451  0196                     	;# 
  1452  0197                     	;# 
  1453  0199                     	;# 
  1454  019A                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019C                     	;# 
  1460  019C                     	;# 
  1461  019D                     	;# 
  1462  019E                     	;# 
  1463  019F                     	;# 
  1464  020D                     	;# 
  1465  0210                     	;# 
  1466  0211                     	;# 
  1467  0211                     	;# 
  1468  0212                     	;# 
  1469  0212                     	;# 
  1470  0213                     	;# 
  1471  0213                     	;# 
  1472  0214                     	;# 
  1473  0214                     	;# 
  1474  0215                     	;# 
  1475  0215                     	;# 
  1476  0215                     	;# 
  1477  0216                     	;# 
  1478  0216                     	;# 
  1479  0217                     	;# 
  1480  0217                     	;# 
  1481  0291                     	;# 
  1482  0291                     	;# 
  1483  0292                     	;# 
  1484  0293                     	;# 
  1485  0298                     	;# 
  1486  0298                     	;# 
  1487  0299                     	;# 
  1488  029A                     	;# 
  1489  0394                     	;# 
  1490  0395                     	;# 
  1491  0396                     	;# 
  1492  0FE4                     	;# 
  1493  0FE5                     	;# 
  1494  0FE6                     	;# 
  1495  0FE7                     	;# 
  1496  0FE8                     	;# 
  1497  0FE9                     	;# 
  1498  0FEA                     	;# 
  1499  0FEB                     	;# 
  1500  0FED                     	;# 
  1501  0FEE                     	;# 
  1502  0FEF                     	;# 
  1503  0000                     	;# 
  1504  0001                     	;# 
  1505  0002                     	;# 
  1506  0003                     	;# 
  1507  0004                     	;# 
  1508  0005                     	;# 
  1509  0006                     	;# 
  1510  0007                     	;# 
  1511  0008                     	;# 
  1512  0009                     	;# 
  1513  000A                     	;# 
  1514  000B                     	;# 
  1515  000C                     	;# 
  1516  000D                     	;# 
  1517  000E                     	;# 
  1518  0010                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0015                     	;# 
  1522  0016                     	;# 
  1523  0016                     	;# 
  1524  0017                     	;# 
  1525  0018                     	;# 
  1526  0019                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001C                     	;# 
  1530  008C                     	;# 
  1531  008D                     	;# 
  1532  008E                     	;# 
  1533  0090                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0097                     	;# 
  1539  0099                     	;# 
  1540  009A                     	;# 
  1541  009B                     	;# 
  1542  009B                     	;# 
  1543  009C                     	;# 
  1544  009D                     	;# 
  1545  009E                     	;# 
  1546  010C                     	;# 
  1547  010D                     	;# 
  1548  010E                     	;# 
  1549  0116                     	;# 
  1550  0117                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0194                     	;# 
  1561  0195                     	;# 
  1562  0196                     	;# 
  1563  0197                     	;# 
  1564  0199                     	;# 
  1565  019A                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019C                     	;# 
  1571  019C                     	;# 
  1572  019D                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  020D                     	;# 
  1576  0210                     	;# 
  1577  0211                     	;# 
  1578  0211                     	;# 
  1579  0212                     	;# 
  1580  0212                     	;# 
  1581  0213                     	;# 
  1582  0213                     	;# 
  1583  0214                     	;# 
  1584  0214                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0216                     	;# 
  1589  0216                     	;# 
  1590  0217                     	;# 
  1591  0217                     	;# 
  1592  0291                     	;# 
  1593  0291                     	;# 
  1594  0292                     	;# 
  1595  0293                     	;# 
  1596  0298                     	;# 
  1597  0298                     	;# 
  1598  0299                     	;# 
  1599  029A                     	;# 
  1600  0394                     	;# 
  1601  0395                     	;# 
  1602  0396                     	;# 
  1603  0FE4                     	;# 
  1604  0FE5                     	;# 
  1605  0FE6                     	;# 
  1606  0FE7                     	;# 
  1607  0FE8                     	;# 
  1608  0FE9                     	;# 
  1609  0FEA                     	;# 
  1610  0FEB                     	;# 
  1611  0FED                     	;# 
  1612  0FEE                     	;# 
  1613  0FEF                     	;# 
  1614  0000                     	;# 
  1615  0001                     	;# 
  1616  0002                     	;# 
  1617  0003                     	;# 
  1618  0004                     	;# 
  1619  0005                     	;# 
  1620  0006                     	;# 
  1621  0007                     	;# 
  1622  0008                     	;# 
  1623  0009                     	;# 
  1624  000A                     	;# 
  1625  000B                     	;# 
  1626  000C                     	;# 
  1627  000D                     	;# 
  1628  000E                     	;# 
  1629  0010                     	;# 
  1630  0011                     	;# 
  1631  0012                     	;# 
  1632  0015                     	;# 
  1633  0016                     	;# 
  1634  0016                     	;# 
  1635  0017                     	;# 
  1636  0018                     	;# 
  1637  0019                     	;# 
  1638  001A                     	;# 
  1639  001B                     	;# 
  1640  001C                     	;# 
  1641  008C                     	;# 
  1642  008D                     	;# 
  1643  008E                     	;# 
  1644  0090                     	;# 
  1645  0091                     	;# 
  1646  0092                     	;# 
  1647  0095                     	;# 
  1648  0096                     	;# 
  1649  0097                     	;# 
  1650  0099                     	;# 
  1651  009A                     	;# 
  1652  009B                     	;# 
  1653  009B                     	;# 
  1654  009C                     	;# 
  1655  009D                     	;# 
  1656  009E                     	;# 
  1657  010C                     	;# 
  1658  010D                     	;# 
  1659  010E                     	;# 
  1660  0116                     	;# 
  1661  0117                     	;# 
  1662  011D                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0194                     	;# 
  1672  0195                     	;# 
  1673  0196                     	;# 
  1674  0197                     	;# 
  1675  0199                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019C                     	;# 
  1682  019C                     	;# 
  1683  019D                     	;# 
  1684  019E                     	;# 
  1685  019F                     	;# 
  1686  020D                     	;# 
  1687  0210                     	;# 
  1688  0211                     	;# 
  1689  0211                     	;# 
  1690  0212                     	;# 
  1691  0212                     	;# 
  1692  0213                     	;# 
  1693  0213                     	;# 
  1694  0214                     	;# 
  1695  0214                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0215                     	;# 
  1699  0216                     	;# 
  1700  0216                     	;# 
  1701  0217                     	;# 
  1702  0217                     	;# 
  1703  0291                     	;# 
  1704  0291                     	;# 
  1705  0292                     	;# 
  1706  0293                     	;# 
  1707  0298                     	;# 
  1708  0298                     	;# 
  1709  0299                     	;# 
  1710  029A                     	;# 
  1711  0394                     	;# 
  1712  0395                     	;# 
  1713  0396                     	;# 
  1714  0FE4                     	;# 
  1715  0FE5                     	;# 
  1716  0FE6                     	;# 
  1717  0FE7                     	;# 
  1718  0FE8                     	;# 
  1719  0FE9                     	;# 
  1720  0FEA                     	;# 
  1721  0FEB                     	;# 
  1722  0FED                     	;# 
  1723  0FEE                     	;# 
  1724  0FEF                     	;# 
  1725  0000                     	;# 
  1726  0001                     	;# 
  1727  0002                     	;# 
  1728  0003                     	;# 
  1729  0004                     	;# 
  1730  0005                     	;# 
  1731  0006                     	;# 
  1732  0007                     	;# 
  1733  0008                     	;# 
  1734  0009                     	;# 
  1735  000A                     	;# 
  1736  000B                     	;# 
  1737  000C                     	;# 
  1738  000D                     	;# 
  1739  000E                     	;# 
  1740  0010                     	;# 
  1741  0011                     	;# 
  1742  0012                     	;# 
  1743  0015                     	;# 
  1744  0016                     	;# 
  1745  0016                     	;# 
  1746  0017                     	;# 
  1747  0018                     	;# 
  1748  0019                     	;# 
  1749  001A                     	;# 
  1750  001B                     	;# 
  1751  001C                     	;# 
  1752  008C                     	;# 
  1753  008D                     	;# 
  1754  008E                     	;# 
  1755  0090                     	;# 
  1756  0091                     	;# 
  1757  0092                     	;# 
  1758  0095                     	;# 
  1759  0096                     	;# 
  1760  0097                     	;# 
  1761  0099                     	;# 
  1762  009A                     	;# 
  1763  009B                     	;# 
  1764  009B                     	;# 
  1765  009C                     	;# 
  1766  009D                     	;# 
  1767  009E                     	;# 
  1768  010C                     	;# 
  1769  010D                     	;# 
  1770  010E                     	;# 
  1771  0116                     	;# 
  1772  0117                     	;# 
  1773  011D                     	;# 
  1774  018C                     	;# 
  1775  018D                     	;# 
  1776  018E                     	;# 
  1777  0191                     	;# 
  1778  0191                     	;# 
  1779  0192                     	;# 
  1780  0193                     	;# 
  1781  0193                     	;# 
  1782  0194                     	;# 
  1783  0195                     	;# 
  1784  0196                     	;# 
  1785  0197                     	;# 
  1786  0199                     	;# 
  1787  019A                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019C                     	;# 
  1793  019C                     	;# 
  1794  019D                     	;# 
  1795  019E                     	;# 
  1796  019F                     	;# 
  1797  020D                     	;# 
  1798  0210                     	;# 
  1799  0211                     	;# 
  1800  0211                     	;# 
  1801  0212                     	;# 
  1802  0212                     	;# 
  1803  0213                     	;# 
  1804  0213                     	;# 
  1805  0214                     	;# 
  1806  0214                     	;# 
  1807  0215                     	;# 
  1808  0215                     	;# 
  1809  0215                     	;# 
  1810  0216                     	;# 
  1811  0216                     	;# 
  1812  0217                     	;# 
  1813  0217                     	;# 
  1814  0291                     	;# 
  1815  0291                     	;# 
  1816  0292                     	;# 
  1817  0293                     	;# 
  1818  0298                     	;# 
  1819  0298                     	;# 
  1820  0299                     	;# 
  1821  029A                     	;# 
  1822  0394                     	;# 
  1823  0395                     	;# 
  1824  0396                     	;# 
  1825  0FE4                     	;# 
  1826  0FE5                     	;# 
  1827  0FE6                     	;# 
  1828  0FE7                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEB                     	;# 
  1833  0FED                     	;# 
  1834  0FEE                     	;# 
  1835  0FEF                     	;# 
  1836  0000                     	;# 
  1837  0001                     	;# 
  1838  0002                     	;# 
  1839  0003                     	;# 
  1840  0004                     	;# 
  1841  0005                     	;# 
  1842  0006                     	;# 
  1843  0007                     	;# 
  1844  0008                     	;# 
  1845  0009                     	;# 
  1846  000A                     	;# 
  1847  000B                     	;# 
  1848  000C                     	;# 
  1849  000D                     	;# 
  1850  000E                     	;# 
  1851  0010                     	;# 
  1852  0011                     	;# 
  1853  0012                     	;# 
  1854  0015                     	;# 
  1855  0016                     	;# 
  1856  0016                     	;# 
  1857  0017                     	;# 
  1858  0018                     	;# 
  1859  0019                     	;# 
  1860  001A                     	;# 
  1861  001B                     	;# 
  1862  001C                     	;# 
  1863  008C                     	;# 
  1864  008D                     	;# 
  1865  008E                     	;# 
  1866  0090                     	;# 
  1867  0091                     	;# 
  1868  0092                     	;# 
  1869  0095                     	;# 
  1870  0096                     	;# 
  1871  0097                     	;# 
  1872  0099                     	;# 
  1873  009A                     	;# 
  1874  009B                     	;# 
  1875  009B                     	;# 
  1876  009C                     	;# 
  1877  009D                     	;# 
  1878  009E                     	;# 
  1879  010C                     	;# 
  1880  010D                     	;# 
  1881  010E                     	;# 
  1882  0116                     	;# 
  1883  0117                     	;# 
  1884  011D                     	;# 
  1885  018C                     	;# 
  1886  018D                     	;# 
  1887  018E                     	;# 
  1888  0191                     	;# 
  1889  0191                     	;# 
  1890  0192                     	;# 
  1891  0193                     	;# 
  1892  0193                     	;# 
  1893  0194                     	;# 
  1894  0195                     	;# 
  1895  0196                     	;# 
  1896  0197                     	;# 
  1897  0199                     	;# 
  1898  019A                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019C                     	;# 
  1904  019C                     	;# 
  1905  019D                     	;# 
  1906  019E                     	;# 
  1907  019F                     	;# 
  1908  020D                     	;# 
  1909  0210                     	;# 
  1910  0211                     	;# 
  1911  0211                     	;# 
  1912  0212                     	;# 
  1913  0212                     	;# 
  1914  0213                     	;# 
  1915  0213                     	;# 
  1916  0214                     	;# 
  1917  0214                     	;# 
  1918  0215                     	;# 
  1919  0215                     	;# 
  1920  0215                     	;# 
  1921  0216                     	;# 
  1922  0216                     	;# 
  1923  0217                     	;# 
  1924  0217                     	;# 
  1925  0291                     	;# 
  1926  0291                     	;# 
  1927  0292                     	;# 
  1928  0293                     	;# 
  1929  0298                     	;# 
  1930  0298                     	;# 
  1931  0299                     	;# 
  1932  029A                     	;# 
  1933  0394                     	;# 
  1934  0395                     	;# 
  1935  0396                     	;# 
  1936  0FE4                     	;# 
  1937  0FE5                     	;# 
  1938  0FE6                     	;# 
  1939  0FE7                     	;# 
  1940  0FE8                     	;# 
  1941  0FE9                     	;# 
  1942  0FEA                     	;# 
  1943  0FEB                     	;# 
  1944  0FED                     	;# 
  1945  0FEE                     	;# 
  1946  0FEF                     	;# 
  1947  0000                     	;# 
  1948  0001                     	;# 
  1949  0002                     	;# 
  1950  0003                     	;# 
  1951  0004                     	;# 
  1952  0005                     	;# 
  1953  0006                     	;# 
  1954  0007                     	;# 
  1955  0008                     	;# 
  1956  0009                     	;# 
  1957  000A                     	;# 
  1958  000B                     	;# 
  1959  000C                     	;# 
  1960  000D                     	;# 
  1961  000E                     	;# 
  1962  0010                     	;# 
  1963  0011                     	;# 
  1964  0012                     	;# 
  1965  0015                     	;# 
  1966  0016                     	;# 
  1967  0016                     	;# 
  1968  0017                     	;# 
  1969  0018                     	;# 
  1970  0019                     	;# 
  1971  001A                     	;# 
  1972  001B                     	;# 
  1973  001C                     	;# 
  1974  008C                     	;# 
  1975  008D                     	;# 
  1976  008E                     	;# 
  1977  0090                     	;# 
  1978  0091                     	;# 
  1979  0092                     	;# 
  1980  0095                     	;# 
  1981  0096                     	;# 
  1982  0097                     	;# 
  1983  0099                     	;# 
  1984  009A                     	;# 
  1985  009B                     	;# 
  1986  009B                     	;# 
  1987  009C                     	;# 
  1988  009D                     	;# 
  1989  009E                     	;# 
  1990  010C                     	;# 
  1991  010D                     	;# 
  1992  010E                     	;# 
  1993  0116                     	;# 
  1994  0117                     	;# 
  1995  011D                     	;# 
  1996  018C                     	;# 
  1997  018D                     	;# 
  1998  018E                     	;# 
  1999  0191                     	;# 
  2000  0191                     	;# 
  2001  0192                     	;# 
  2002  0193                     	;# 
  2003  0193                     	;# 
  2004  0194                     	;# 
  2005  0195                     	;# 
  2006  0196                     	;# 
  2007  0197                     	;# 
  2008  0199                     	;# 
  2009  019A                     	;# 
  2010  019B                     	;# 
  2011  019B                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019C                     	;# 
  2015  019C                     	;# 
  2016  019D                     	;# 
  2017  019E                     	;# 
  2018  019F                     	;# 
  2019  020D                     	;# 
  2020  0210                     	;# 
  2021  0211                     	;# 
  2022  0211                     	;# 
  2023  0212                     	;# 
  2024  0212                     	;# 
  2025  0213                     	;# 
  2026  0213                     	;# 
  2027  0214                     	;# 
  2028  0214                     	;# 
  2029  0215                     	;# 
  2030  0215                     	;# 
  2031  0215                     	;# 
  2032  0216                     	;# 
  2033  0216                     	;# 
  2034  0217                     	;# 
  2035  0217                     	;# 
  2036  0291                     	;# 
  2037  0291                     	;# 
  2038  0292                     	;# 
  2039  0293                     	;# 
  2040  0298                     	;# 
  2041  0298                     	;# 
  2042  0299                     	;# 
  2043  029A                     	;# 
  2044  0394                     	;# 
  2045  0395                     	;# 
  2046  0396                     	;# 
  2047  0FE4                     	;# 
  2048  0FE5                     	;# 
  2049  0FE6                     	;# 
  2050  0FE7                     	;# 
  2051  0FE8                     	;# 
  2052  0FE9                     	;# 
  2053  0FEA                     	;# 
  2054  0FEB                     	;# 
  2055  0FED                     	;# 
  2056  0FEE                     	;# 
  2057  0FEF                     	;# 
  2058  0000                     	;# 
  2059  0001                     	;# 
  2060  0002                     	;# 
  2061  0003                     	;# 
  2062  0004                     	;# 
  2063  0005                     	;# 
  2064  0006                     	;# 
  2065  0007                     	;# 
  2066  0008                     	;# 
  2067  0009                     	;# 
  2068  000A                     	;# 
  2069  000B                     	;# 
  2070  000C                     	;# 
  2071  000D                     	;# 
  2072  000E                     	;# 
  2073  0010                     	;# 
  2074  0011                     	;# 
  2075  0012                     	;# 
  2076  0015                     	;# 
  2077  0016                     	;# 
  2078  0016                     	;# 
  2079  0017                     	;# 
  2080  0018                     	;# 
  2081  0019                     	;# 
  2082  001A                     	;# 
  2083  001B                     	;# 
  2084  001C                     	;# 
  2085  008C                     	;# 
  2086  008D                     	;# 
  2087  008E                     	;# 
  2088  0090                     	;# 
  2089  0091                     	;# 
  2090  0092                     	;# 
  2091  0095                     	;# 
  2092  0096                     	;# 
  2093  0097                     	;# 
  2094  0099                     	;# 
  2095  009A                     	;# 
  2096  009B                     	;# 
  2097  009B                     	;# 
  2098  009C                     	;# 
  2099  009D                     	;# 
  2100  009E                     	;# 
  2101  010C                     	;# 
  2102  010D                     	;# 
  2103  010E                     	;# 
  2104  0116                     	;# 
  2105  0117                     	;# 
  2106  011D                     	;# 
  2107  018C                     	;# 
  2108  018D                     	;# 
  2109  018E                     	;# 
  2110  0191                     	;# 
  2111  0191                     	;# 
  2112  0192                     	;# 
  2113  0193                     	;# 
  2114  0193                     	;# 
  2115  0194                     	;# 
  2116  0195                     	;# 
  2117  0196                     	;# 
  2118  0197                     	;# 
  2119  0199                     	;# 
  2120  019A                     	;# 
  2121  019B                     	;# 
  2122  019B                     	;# 
  2123  019B                     	;# 
  2124  019B                     	;# 
  2125  019C                     	;# 
  2126  019C                     	;# 
  2127  019D                     	;# 
  2128  019E                     	;# 
  2129  019F                     	;# 
  2130  020D                     	;# 
  2131  0210                     	;# 
  2132  0211                     	;# 
  2133  0211                     	;# 
  2134  0212                     	;# 
  2135  0212                     	;# 
  2136  0213                     	;# 
  2137  0213                     	;# 
  2138  0214                     	;# 
  2139  0214                     	;# 
  2140  0215                     	;# 
  2141  0215                     	;# 
  2142  0215                     	;# 
  2143  0216                     	;# 
  2144  0216                     	;# 
  2145  0217                     	;# 
  2146  0217                     	;# 
  2147  0291                     	;# 
  2148  0291                     	;# 
  2149  0292                     	;# 
  2150  0293                     	;# 
  2151  0298                     	;# 
  2152  0298                     	;# 
  2153  0299                     	;# 
  2154  029A                     	;# 
  2155  0394                     	;# 
  2156  0395                     	;# 
  2157  0396                     	;# 
  2158  0FE4                     	;# 
  2159  0FE5                     	;# 
  2160  0FE6                     	;# 
  2161  0FE7                     	;# 
  2162  0FE8                     	;# 
  2163  0FE9                     	;# 
  2164  0FEA                     	;# 
  2165  0FEB                     	;# 
  2166  0FED                     	;# 
  2167  0FEE                     	;# 
  2168  0FEF                     	;# 
  2169                           
  2170                           	psect	idataBANK3
  2171  1F33                     __pidataBANK3:	
  2172                           
  2173                           ;initializer for __product
  2174  1F33  3463               	retlw	99
  2175  1F34  3402               	retlw	2
  2176  1F35  3400               	retlw	0
  2177  1F36  3400               	retlw	0
  2178  1F37  3400               	retlw	0
  2179  1F38  3400               	retlw	0
  2180  1F39  3400               	retlw	0
  2181  1F3A  3400               	retlw	0
  2182  1F3B  3400               	retlw	0
  2183  1F3C  3400               	retlw	0
  2184  1F3D  3400               	retlw	0
  2185  1F3E  3400               	retlw	0
  2186  1F3F  34FF               	retlw	255
  2187  1F40  34FF               	retlw	255
  2188  1F41  34FF               	retlw	255
  2189  1F42  3400               	retlw	0
  2190  1F43  3400               	retlw	0
  2191  1F44  3400               	retlw	0
  2192  1F45  3400               	retlw	0
  2193  1F46  3400               	retlw	0
  2194  1F47  3400               	retlw	0
  2195  1F48  3400               	retlw	0
  2196  1F49  3400               	retlw	0
  2197  1F4A  3400               	retlw	0
  2198  1F4B  3400               	retlw	0
  2199  1F4C  3400               	retlw	0
  2200  1F4D  3400               	retlw	0
  2201  1F4E  3400               	retlw	0
  2202  1F4F  3400               	retlw	0
  2203  1F50  3400               	retlw	0
  2204  1F51  3400               	retlw	0
  2205  1F52  3400               	retlw	0
  2206                           
  2207                           	psect	stringtext
  2208  1800                     __pstringtext:	
  2209  1800                     _CC2500_registers_address:	
  2210  1800  3403               	retlw	3
  2211  1801  3416               	retlw	22
  2212  1802  3417               	retlw	23
  2213  1803  341E               	retlw	30
  2214  1804  341F               	retlw	31
  2215  1805  3420               	retlw	32
  2216  1806  342A               	retlw	42
  2217  1807  342B               	retlw	43
  2218  1808  340B               	retlw	11
  2219  1809  340C               	retlw	12
  2220  180A  340D               	retlw	13
  2221  180B  340E               	retlw	14
  2222  180C  340F               	retlw	15
  2223  180D  3410               	retlw	16
  2224  180E  3411               	retlw	17
  2225  180F  3412               	retlw	18
  2226  1810  3413               	retlw	19
  2227  1811  3414               	retlw	20
  2228  1812  340A               	retlw	10
  2229  1813  3415               	retlw	21
  2230  1814  3421               	retlw	33
  2231  1815  3422               	retlw	34
  2232  1816  3418               	retlw	24
  2233  1817  3419               	retlw	25
  2234  1818  341A               	retlw	26
  2235  1819  341B               	retlw	27
  2236  181A  341C               	retlw	28
  2237  181B  341D               	retlw	29
  2238  181C  3423               	retlw	35
  2239  181D  3424               	retlw	36
  2240  181E  3425               	retlw	37
  2241  181F  3426               	retlw	38
  2242  1820  3429               	retlw	41
  2243  1821  342C               	retlw	44
  2244  1822  342D               	retlw	45
  2245  1823  342E               	retlw	46
  2246  1824  3400               	retlw	0
  2247  1825  3401               	retlw	1
  2248  1826  3402               	retlw	2
  2249  1827  3407               	retlw	7
  2250  1828  3408               	retlw	8
  2251  1829  3409               	retlw	9
  2252  182A  3406               	retlw	6
  2253  182B  3404               	retlw	4
  2254  182C  3405               	retlw	5
  2255  182D  3427               	retlw	39
  2256  182E  3428               	retlw	40
  2257  182F                     __end_of_CC2500_registers_address:	
  2258  182F                     _CC2500_rfSettings:	
  2259  182F  3407               	retlw	7
  2260  1830  3407               	retlw	7
  2261  1831  3430               	retlw	48
  2262  1832  3487               	retlw	135
  2263  1833  346B               	retlw	107
  2264  1834  34F8               	retlw	248
  2265  1835  347F               	retlw	127
  2266  1836  343F               	retlw	63
  2267  1837  3409               	retlw	9
  2268  1838  3400               	retlw	0
  2269  1839  345C               	retlw	92
  2270  183A  34A7               	retlw	167
  2271  183B  3462               	retlw	98
  2272  183C  3486               	retlw	134
  2273  183D  3483               	retlw	131
  2274  183E  3403               	retlw	3
  2275  183F  3422               	retlw	34
  2276  1840  34F8               	retlw	248
  2277  1841  3400               	retlw	0
  2278  1842  3444               	retlw	68
  2279  1843  34B6               	retlw	182
  2280  1844  3410               	retlw	16
  2281  1845  3418               	retlw	24
  2282  1846  341D               	retlw	29
  2283  1847  341C               	retlw	28
  2284  1848  34C7               	retlw	199
  2285  1849  3400               	retlw	0
  2286  184A  34B2               	retlw	178
  2287  184B  34EA               	retlw	234
  2288  184C  340A               	retlw	10
  2289  184D  3400               	retlw	0
  2290  184E  3411               	retlw	17
  2291  184F  3459               	retlw	89
  2292  1850  3488               	retlw	136
  2293  1851  3431               	retlw	49
  2294  1852  340B               	retlw	11
  2295  1853  342F               	retlw	47
  2296  1854  342E               	retlw	46
  2297  1855  3406               	retlw	6
  2298  1856  3404               	retlw	4
  2299  1857  3405               	retlw	5
  2300  1858  3400               	retlw	0
  2301  1859  3430               	retlw	48
  2302  185A  34D3               	retlw	211
  2303  185B  3491               	retlw	145
  2304  185C  3441               	retlw	65
  2305  185D  3400               	retlw	0
  2306  185E                     __end_of_CC2500_rfSettings:	
  2307  185E                     _CC2500_patable_vaule:	
  2308  185E  34FE               	retlw	254
  2309  185F  34FE               	retlw	254
  2310  1860  34FE               	retlw	254
  2311  1861  34FE               	retlw	254
  2312  1862  34FE               	retlw	254
  2313  1863  34FE               	retlw	254
  2314  1864  34FE               	retlw	254
  2315  1865  34FE               	retlw	254
  2316  1866                     __end_of_CC2500_patable_vaule:	
  2317                           
  2318                           	psect	nvBANK1
  2319  00EE                     __pnvBANK1:	
  2320  00EE                     _product:	
  2321  00EE                     	ds	1
  2322  000C                     _PORTA	set	12
  2323  000D                     _PORTB	set	13
  2324  000E                     _PORTC	set	14
  2325  0018                     _T1CON	set	24
  2326  0017                     _TMR1H	set	23
  2327  0016                     _TMR1L	set	22
  2328  005F                     _GIE	set	95
  2329  005B                     _IOCIE	set	91
  2330  0058                     _IOCIF	set	88
  2331  005E                     _PEIE	set	94
  2332  0060                     _RA0	set	96
  2333  0064                     _RA4	set	100
  2334  0066                     _RA6	set	102
  2335  0067                     _RA7	set	103
  2336  0068                     _RB0	set	104
  2337  0069                     _RB1	set	105
  2338  006A                     _RB2	set	106
  2339  006B                     _RB3	set	107
  2340  006D                     _RB5	set	109
  2341  0070                     _RC0	set	112
  2342  0071                     _RC1	set	113
  2343  0073                     _RC3	set	115
  2344  0074                     _RC4	set	116
  2345  0075                     _RC5	set	117
  2346  0088                     _TMR1IF	set	136
  2347  009D                     _ADCON0	set	157
  2348  009E                     _ADCON1	set	158
  2349  009C                     _ADRESH	set	156
  2350  009B                     _ADRESL	set	155
  2351  0099                     _OSCCON	set	153
  2352  008C                     _TRISA	set	140
  2353  008D                     _TRISB	set	141
  2354  008E                     _TRISC	set	142
  2355  0097                     _WDTCON	set	151
  2356  04E9                     _GO_nDONE	set	1257
  2357  0488                     _TMR1IE	set	1160
  2358  0117                     _FVRCON	set	279
  2359  010C                     _LATA	set	268
  2360  010D                     _LATB	set	269
  2361  010E                     _LATC	set	270
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0192                     _PMADRH	set	402
  2366  0191                     _PMADRL	set	401
  2367  0196                     _PMCON2	set	406
  2368  0194                     _PMDATH	set	404
  2369  0193                     _PMDATL	set	403
  2370  0CAE                     _CFGS	set	3246
  2371  0CAC                     _FREE	set	3244
  2372  0CAD                     _LWLO	set	3245
  2373  0CA8                     _RD	set	3240
  2374  0CA9                     _WR	set	3241
  2375  0CAA                     _WREN	set	3242
  2376  020D                     _WPUB	set	525
  2377  0396                     _IOCBF	set	918
  2378  0395                     _IOCBN	set	917
  2379  0394                     _IOCBP	set	916
  2380  1CB2                     _IOCBF2	set	7346
  2381                           
  2382                           ; #config settings
  2383  0000                     
  2384                           	psect	cinit
  2385  0021                     start_initialization:	
  2386  0021                     __initialization:	
  2387                           
  2388                           ; Clear objects allocated to BITCOMMON
  2389  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BITBANK1
  2392  0022  0021               	movlb	1	; select bank1
  2393  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  0024  30A0               	movlw	low __pbssBANK1
  2397  0025  0084               	movwf	4
  2398  0026  3000               	movlw	high __pbssBANK1
  2399  0027  0085               	movwf	5
  2400  0028  3046               	movlw	70
  2401  0029  319A  2262  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  002C  3020               	movlw	low __pbssBANK2
  2405  002D  0084               	movwf	4
  2406  002E  3001               	movlw	high __pbssBANK2
  2407  002F  0085               	movwf	5
  2408  0030  304C               	movlw	76
  2409  0031  319A  2262  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  0034  30A0               	movlw	low __pbssBANK3
  2413  0035  0084               	movwf	4
  2414  0036  3001               	movlw	high __pbssBANK3
  2415  0037  0085               	movwf	5
  2416  0038  302C               	movlw	44
  2417  0039  319A  2262  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  003C  3020               	movlw	low __pbssBANK4
  2421  003D  0084               	movwf	4
  2422  003E  3002               	movlw	high __pbssBANK4
  2423  003F  0085               	movwf	5
  2424  0040  3025               	movlw	37
  2425  0041  319A  2262  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK3
  2428  0044  3033               	movlw	low __pidataBANK3
  2429  0045  0084               	movwf	4
  2430  0046  309F               	movlw	(high __pidataBANK3)| (0+128)
  2431  0047  0085               	movwf	5
  2432  0048  30CC               	movlw	low __pdataBANK3
  2433  0049  0086               	movwf	6
  2434  004A  3001               	movlw	high __pdataBANK3
  2435  004B  0087               	movwf	7
  2436  004C  3020               	movlw	32
  2437  004D  319A  225C         	fcall	init_ram
  2438  004F                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  004F                     __end_of__initialization:	
  2442  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0050  0020               	movlb	0
  2444  0051  3194  2C7E         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03E8                     __pbitbssCOMMON:	
  2448  03E8                     _Transceive_OK:	
  2449  03E8                     	ds	1
  2450                           
  2451                           	psect	bitbssBANK1
  2452  0778                     __pbitbssBANK1:	
  2453  0778                     _Receive_OK:	
  2454  0778                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _RF1:	
  2459  00A0                     	ds	15
  2460  00AF                     _myMain:	
  2461  00AF                     	ds	13
  2462  00BC                     _DimmerIntr1:	
  2463  00BC                     	ds	12
  2464  00C8                     _CRC:	
  2465  00C8                     	ds	1
  2466  00C9                     _Cmd:	
  2467  00C9                     	ds	1
  2468  00CA                     _DelayOff:	
  2469  00CA                     	ds	1
  2470  00CB                     _DimmerIntr:	
  2471  00CB                     	ds	1
  2472  00CC                     _DimmerLights:	
  2473  00CC                     	ds	1
  2474  00CD                     _LED:	
  2475  00CD                     	ds	1
  2476  00CE                     _Light:	
  2477  00CE                     	ds	1
  2478  00CF                     _RSSI:	
  2479  00CF                     	ds	1
  2480  00D0                     _Rx_Length:	
  2481  00D0                     	ds	1
  2482  00D1                     _SPI0Buffer:	
  2483  00D1                     	ds	1
  2484  00D2                     _Sw:	
  2485  00D2                     	ds	1
  2486  00D3                     _SwDetect:	
  2487  00D3                     	ds	1
  2488  00D4                     _Tx_Length:	
  2489  00D4                     	ds	1
  2490  00D5                     _r_address:	
  2491  00D5                     	ds	1
  2492  00D6                     _r_data:	
  2493  00D6                     	ds	1
  2494  00D7                     _s_data:	
  2495  00D7                     	ds	1
  2496  00D8                     _Temp:	
  2497  00D8                     	ds	14
  2498                           
  2499                           	psect	bssBANK2
  2500  0120                     __pbssBANK2:	
  2501  0120                     _Buz1:	
  2502  0120                     	ds	12
  2503  012C                     _Dimmer:	
  2504  012C                     	ds	5
  2505  0131                     _Timer1:	
  2506  0131                     	ds	3
  2507  0134                     _RF_Count:	
  2508  0134                     	ds	2
  2509  0136                     _WDT:	
  2510  0136                     	ds	2
  2511  0138                     _Load:	
  2512  0138                     	ds	40
  2513  0160                     _DimmerLights1:	
  2514  0160                     	ds	8
  2515  0168                     _VarErrLED:	
  2516  0168                     	ds	4
  2517                           
  2518                           	psect	bssBANK3
  2519  01A0                     __pbssBANK3:	
  2520  01A0                     _RF_Data:	
  2521  01A0                     	ds	30
  2522  01BE                     _Sw1:	
  2523  01BE                     	ds	9
  2524  01C7                     _DlySw1:	
  2525  01C7                     	ds	5
  2526                           
  2527                           	psect	dataBANK3
  2528  01CC                     __pdataBANK3:	
  2529  01CC                     __product:	
  2530  01CC                     	ds	32
  2531                           
  2532                           	psect	bssBANK4
  2533  0220                     __pbssBANK4:	
  2534  0220                     _Memory:	
  2535  0220                     	ds	37
  2536                           
  2537                           	psect	clrtext
  2538  1A62                     clear_ram0:	
  2539                           ;	Called with FSR0 containing the base address, and
  2540                           ;	WREG with the size to clear
  2541                           
  2542  1A62  0064               	clrwdt	;clear the watchdog before getting into this loop
  2543  1A63                     clrloop0:	
  2544  1A63  0180               	clrf	0	;clear RAM location pointed to by FSR
  2545  1A64  3101               	addfsr 0,1
  2546  1A65  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2547  1A66  2A63               	goto	clrloop0	;have we reached the end yet?
  2548  1A67  3400               	retlw	0	;all done for this memory range, return
  2549                           
  2550                           	psect	inittext
  2551  1A5C                     init_ram:	
  2552  1A5C  00FE               	movwf	126
  2553  1A5D                     initloop:	
  2554  1A5D  0012               	moviw fsr0++
  2555  1A5E  001E               	movwi fsr1++
  2556  1A5F  0BFE               	decfsz	126,f
  2557  1A60  2A5D               	goto	initloop
  2558  1A61  3400               	retlw	0
  2559                           
  2560                           	psect	cstackBANK1
  2561  00E6                     __pcstackBANK1:	
  2562  00E6                     ??_getRxData:	
  2563  00E6                     setDimmerLights_OnOff@lights:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566                           
  2567                           ; 1 bytes @ 0x0
  2568  00E6                     	ds	1
  2569  00E7                     setDimmerLights_Main@lights:	
  2570  00E7                     getRxData@error:	
  2571                           ; 1 bytes @ 0x1
  2572                           
  2573                           
  2574                           ; 1 bytes @ 0x1
  2575  00E7                     	ds	1
  2576  00E8                     ??_setRF_Main:	
  2577                           
  2578                           ; 0 bytes @ 0x2
  2579  00E8                     	ds	1
  2580  00E9                     setRF_Main@error:	
  2581                           
  2582                           ; 1 bytes @ 0x3
  2583  00E9                     	ds	1
  2584  00EA                     ?_main:	
  2585  00EA                     main@argc:	
  2586                           ; 2 bytes @ 0x4
  2587                           
  2588                           
  2589                           ; 2 bytes @ 0x4
  2590  00EA                     	ds	2
  2591  00EC                     main@argv:	
  2592                           
  2593                           ; 2 bytes @ 0x6
  2594  00EC                     	ds	2
  2595                           
  2596                           	psect	cstackCOMMON
  2597  0070                     __pcstackCOMMON:	
  2598  0070                     ?_CC2500_WriteCommand:	
  2599  0070                     ?_RF_Timeout_Counter:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setRF_TimeoutCleared:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteByte:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadStatus:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadByte:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_PowerRST:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitSetREG:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitPATable:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearTXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearRXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_FrequencyCabr:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_SIDLEMode:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Initialization:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_SwOn:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_SwOff:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setMemory_Modify:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Line:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_DimmingClose:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setTxData:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setRF_TransceiveGO:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setLED_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setLED_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Fosc_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IO_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_ADC_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IOC_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_WDT_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_TMR1_ISR:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_ISR:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Timeout_Counter:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_set_TimeoutCleared:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Flash_Memory_Write:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Flash_Memory_Modify:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_WDT_Clearing:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_myMain_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Temp_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Load_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Switch_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_RF_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_getLoad_AD:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_getTemp_AD:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_my_MainTimer:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Temp_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Load_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Switch_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_RF_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Exception_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setLoad_AH_AL_Restore:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setTemp_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setTemp_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setOverTemp_ADV_Restore:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setRF_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setRF_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_RF_RxDisable:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_getRxData:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setLog_Code:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setControl_Lights_Table:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setRFSW_Control:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setRFSW_AdjControl:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setRF_AdjControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setSw_Initialization:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setSw_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_Buzzer_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_Buzzer_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_CC2500_TxData:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_CC2500_RxData:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_CC2500_PowerOnInitial:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DelayOffPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DelayOff_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DelayOff_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntr_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_SelectPointer:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setDimmerLights_DimmingOn:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_TMR_1:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ??_DimmerLights_TMR_1:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerLights_IOC_1:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_LedPointSelect:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_LED_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LED_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Mcu_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_ISR:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Flash_Memory_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Flash_Memory_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Flash_Memory_Unlock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Erasing:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_setMemory_LoopSave:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_WDT_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_setRF_Learn:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_TouchPower:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_SwPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_getDimmerLights_Status:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDimmerLights_ValueToPercent:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_PercentToValue:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getLoad_OK:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_All_Error_Status:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getMain_All_LightsStatus:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_Allow_Condition:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getCmd_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_Flash_Memory_Read:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getAll_Sw_KeyStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getRF_KeyStatus:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getSw_KeyStatus:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDelayOff_GO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerIntr_DimmingValue:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmerLights_Line:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmer_LoadGO:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmer_Load_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getMain_Lights_Count:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?i1___lbdiv:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     setDimmerLights_Initialization@lights:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     getDimmerLights_Allow_Condition@lights:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     getSw_KeyStatus@sw:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     i1___lbdiv@divisor:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959                           
  2960                           ; 1 bytes @ 0x0
  2961  0070                     	ds	1
  2962  0071                     ??_TMR1_ISR:	
  2963  0071                     ??i1___lbdiv:	
  2964                           ; 0 bytes @ 0x1
  2965                           
  2966                           
  2967                           ; 0 bytes @ 0x1
  2968  0071                     	ds	1
  2969  0072                     i1___lbdiv@dividend:	
  2970                           
  2971                           ; 1 bytes @ 0x2
  2972  0072                     	ds	1
  2973  0073                     i1___lbdiv@counter:	
  2974                           
  2975                           ; 1 bytes @ 0x3
  2976  0073                     	ds	1
  2977  0074                     i1___lbdiv@quotient:	
  2978                           
  2979                           ; 1 bytes @ 0x4
  2980  0074                     	ds	1
  2981  0075                     ?i1_Division:	
  2982  0075                     i1Division@num:	
  2983                           ; 1 bytes @ 0x5
  2984                           
  2985                           
  2986                           ; 1 bytes @ 0x5
  2987  0075                     	ds	1
  2988  0076                     ??i1_Division:	
  2989                           
  2990                           ; 0 bytes @ 0x6
  2991  0076                     	ds	2
  2992  0078                     i1Division@value:	
  2993                           
  2994                           ; 1 bytes @ 0x8
  2995  0078                     	ds	1
  2996  0079                     i1Division@result:	
  2997                           
  2998                           ; 1 bytes @ 0x9
  2999  0079                     	ds	1
  3000  007A                     ??_DimmerLights_IOC_1:	
  3001                           
  3002                           ; 0 bytes @ 0xA
  3003  007A                     	ds	2
  3004  007C                     ??_IOC_ISR:	
  3005  007C                     ??_ISR:	
  3006                           ; 0 bytes @ 0xC
  3007                           
  3008                           
  3009                           ; 0 bytes @ 0xC
  3010  007C                     	ds	1
  3011                           
  3012                           	psect	cstackBANK0
  3013  0020                     __pcstackBANK0:	
  3014  0020                     ??_RF_Timeout_Counter:	
  3015  0020                     ??_setRF_TimeoutCleared:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_CC2500_WriteByte:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_CC2500_ReadByte:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ?_DelayTime_1us:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_setMemory_Modify:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_setDimmerLights_Initialization:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_getLoad_OK:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_getMain_All_Error_Status:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_getMain_All_LightsStatus:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_setDimmerLights_Line:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getCmd_Status:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ?_setCmd_Status:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setTxData:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_setRF_TransceiveGO:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_Fosc_Set:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_IO_Set:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_TMR1_Set:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_ADC_Set:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_IOC_Set:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_WDT_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_Timeout_Counter:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_set_TimeoutCleared:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_Flash_Memory_Read:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ?_setMemory_Data:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_Flash_Memory_Write:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_getAll_Sw_KeyStatus:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_WDT_Clearing:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_myMain_Initialization:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_Temp_Initialization:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_setLoad_AH_AL_Restore:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setTemp_Initialization:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_setOverTemp_ADV_Restore:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_setRF_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_getRF_KeyStatus:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getSw_KeyStatus:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_Buzzer_Initialization:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_Buzzer_Main:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_DelayOffPointSelect:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ?_setDimmerIntr_ControlStatus:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_getDimmerIntr_DimmingValue:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ?_setDimmerIntr_Dimming_RF:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ??_DimmerLights_SelectPointer:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getDimmerLights_Line:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_getDimmer_LoadGO:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmer_Load_Status:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_LedPointSelect:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_Flash_Memory_Unlock:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_Flash_Memory_Erasing:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_setMemory_LoopSave:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_WDT_Main:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_getMain_Lights_Count:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_setRF_Learn:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_TouchPower:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_SwPointSelect:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ?___bmul:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ?___lbdiv:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0020                     ?_getBuz_GO:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0020                     ?_getAD:	
  3193                           ; 2 bytes @ 0x0
  3194                           
  3195  0020                     ?___wmul:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198  0020                     ?___awdiv:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201  0020                     ?___lwdiv:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204  0020                     ?___ftpack:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207  0020                     setDimmerIntr_ControlStatus@command:	
  3208                           ; 3 bytes @ 0x0
  3209                           
  3210  0020                     setDimmerIntr_Dimming_Sw@command:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0020                     setDimmerIntr_Dimming_RF@command:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0020                     setDimmerLights_Line@lights:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0020                     getDimmerLights_Line@line:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0020                     getDimmer_LoadGO@loadgo:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0020                     getDimmer_Load_Status@status:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     getAD@adcon1:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     setMemory_Data@data:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getMain_All_LightsStatus@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     getMain_Lights_Count@count:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     setCmd_Status@cmd:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getCmd_Status@number:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     getLoad_OK@ok:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     ___bmul@multiplicand:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     ___lbdiv@divisor:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0020                     DelayTime_1us@count:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0020                     ___wmul@multiplier:	
  3262                           ; 2 bytes @ 0x0
  3263                           
  3264  0020                     ___awdiv@divisor:	
  3265                           ; 2 bytes @ 0x0
  3266                           
  3267  0020                     ___lwdiv@divisor:	
  3268                           ; 2 bytes @ 0x0
  3269                           
  3270  0020                     ___ftpack@arg:	
  3271                           ; 2 bytes @ 0x0
  3272                           
  3273                           
  3274                           ; 3 bytes @ 0x0
  3275  0020                     	ds	1
  3276  0021                     ??_getDimmerLights_Allow_Condition:	
  3277  0021                     ??_setCmd_Status:	
  3278                           ; 0 bytes @ 0x1
  3279                           
  3280  0021                     ??_setMemory_Data:	
  3281                           ; 0 bytes @ 0x1
  3282                           
  3283  0021                     ??_RF_Initialization:	
  3284                           ; 0 bytes @ 0x1
  3285                           
  3286  0021                     ??_setDimmerIntr_ControlStatus:	
  3287                           ; 0 bytes @ 0x1
  3288                           
  3289  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3290                           ; 0 bytes @ 0x1
  3291                           
  3292  0021                     ??_setDimmerIntr_Dimming_RF:	
  3293                           ; 0 bytes @ 0x1
  3294                           
  3295  0021                     ??_Mcu_Initialization:	
  3296                           ; 0 bytes @ 0x1
  3297                           
  3298  0021                     ??___bmul:	
  3299                           ; 0 bytes @ 0x1
  3300                           
  3301  0021                     ??___lbdiv:	
  3302                           ; 0 bytes @ 0x1
  3303                           
  3304  0021                     CC2500_WriteByte@loop_a:	
  3305                           ; 0 bytes @ 0x1
  3306                           
  3307  0021                     CC2500_ReadByte@loop_b:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     DelayOffPointSelect@sw:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     getDimmerIntr_DimmingValue@lights:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     DimmerLights_SelectPointer@lights:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0021                     LedPointSelect@led:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0021                     Flash_Memory_Read@i:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0021                     Flash_Memory_Write@i:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328  0021                     setMemory_Modify@command:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     setMemory_LoopSave@command:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     getMain_Lights_Count@status1:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getCmd_Status@cmd:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     setLoad_AH_AL_Restore@i:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     setRF_Learn@command:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     getRF_KeyStatus@key:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     setRF_TransceiveGO@command:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     SwPointSelect@sw:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     getSw_KeyStatus@status:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     getAll_Sw_KeyStatus@status:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361  0021                     _getMain_All_Error_Status$3613:	
  3362                           ; 1 bytes @ 0x1
  3363                           
  3364  0021                     setOverTemp_ADV_Restore@i:	
  3365                           ; 2 bytes @ 0x1
  3366                           
  3367                           
  3368                           ; 2 bytes @ 0x1
  3369  0021                     	ds	1
  3370  0022                     ??_CC2500_WriteCommand:	
  3371  0022                     ??_CC2500_ReadStatus:	
  3372                           ; 0 bytes @ 0x2
  3373                           
  3374  0022                     ??_DelayTime_1us:	
  3375                           ; 0 bytes @ 0x2
  3376                           
  3377  0022                     ?_CC2500_WriteREG:	
  3378                           ; 0 bytes @ 0x2
  3379                           
  3380  0022                     ??_DlyOff_Initialization:	
  3381                           ; 0 bytes @ 0x2
  3382                           
  3383  0022                     ??_getDimmerLights_Status:	
  3384                           ; 0 bytes @ 0x2
  3385                           
  3386  0022                     ??_setDimmerLights_SwOff:	
  3387                           ; 0 bytes @ 0x2
  3388                           
  3389  0022                     ?_setLED:	
  3390                           ; 0 bytes @ 0x2
  3391                           
  3392  0022                     ??_setLED_Main:	
  3393                           ; 0 bytes @ 0x2
  3394                           
  3395  0022                     ??_Load_Initialization:	
  3396                           ; 0 bytes @ 0x2
  3397                           
  3398  0022                     ??_getBuz_GO:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_getDelayOff_GO:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     ??_setDimmerLights_DimmingOn:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     ?_setDimmerLights_DimmingRun:	
  3408                           ; 0 bytes @ 0x2
  3409                           
  3410  0022                     CC2500_WriteREG@value:	
  3411                           ; 0 bytes @ 0x2
  3412                           
  3413  0022                     DlyOff_Initialization@sw:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     getDelayOff_GO@sw:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     setDimmerIntr_ControlStatus@lights:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     getDimmerIntr_DimmingValue@value:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0022                     setDimmerIntr_Dimming_RF@lights:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0022                     setDimmerLights_SwOff@sw:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0022                     setDimmerLights_DimmingOn@sw:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0022                     getDimmerLights_Allow_Condition@allow:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0022                     getDimmerLights_Status@lights:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     setDimmerLights_DimmingRun@command:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     setLED@command:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     Flash_Memory_Read@address:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     setMemory_Data@address:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     setCmd_Status@number:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     _getRF_KeyStatus$5411:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     _getSw_KeyStatus$6465:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     _getAll_Sw_KeyStatus$6468:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     ___bmul@product:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     ___lbdiv@dividend:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     DelayTime_1us@i:	
  3474                           ; 1 bytes @ 0x2
  3475                           
  3476  0022                     ___wmul@multiplicand:	
  3477                           ; 2 bytes @ 0x2
  3478                           
  3479  0022                     ___awdiv@dividend:	
  3480                           ; 2 bytes @ 0x2
  3481                           
  3482  0022                     ___lwdiv@dividend:	
  3483                           ; 2 bytes @ 0x2
  3484                           
  3485                           
  3486                           ; 2 bytes @ 0x2
  3487  0022                     	ds	1
  3488  0023                     ??_CC2500_WriteREG:	
  3489  0023                     ??_setLED:	
  3490                           ; 0 bytes @ 0x3
  3491                           
  3492  0023                     ??_setDimmerLights_DimmingClose:	
  3493                           ; 0 bytes @ 0x3
  3494                           
  3495  0023                     ??_DelayOff_Initialization:	
  3496                           ; 0 bytes @ 0x3
  3497                           
  3498  0023                     ??_setDimmerLights_DimmingRun:	
  3499                           ; 0 bytes @ 0x3
  3500                           
  3501  0023                     ??_getAD:	
  3502                           ; 0 bytes @ 0x3
  3503                           
  3504  0023                     CC2500_WriteCommand@command:	
  3505                           ; 0 bytes @ 0x3
  3506                           
  3507  0023                     CC2500_ReadStatus@status_addr:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     getDelayOff_GO@go:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     _getDimmerLights_Allow_Condition$2284:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     getDimmerLights_Status@status:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519  0023                     setLED@led:	
  3520                           ; 1 bytes @ 0x3
  3521                           
  3522  0023                     getAD@adcon0:	
  3523                           ; 1 bytes @ 0x3
  3524                           
  3525  0023                     Flash_Memory_Read@ret:	
  3526                           ; 1 bytes @ 0x3
  3527                           
  3528  0023                     ___bmul@multiplier:	
  3529                           ; 1 bytes @ 0x3
  3530                           
  3531  0023                     ___ftpack@exp:	
  3532                           ; 1 bytes @ 0x3
  3533                           
  3534  0023                     ___lbdiv@counter:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537  0023                     _getMain_All_Error_Status$3614:	
  3538                           ; 1 bytes @ 0x3
  3539                           
  3540                           
  3541                           ; 2 bytes @ 0x3
  3542  0023                     	ds	1
  3543  0024                     ??_CC2500_ClearTXFIFO:	
  3544  0024                     ??_CC2500_ClearRXFIFO:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_CC2500_SIDLEMode:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     ??_setLED_Initialization:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     ??_Flash_Memory_Modify:	
  3554                           ; 0 bytes @ 0x4
  3555                           
  3556  0024                     ??_getLoad_AD:	
  3557                           ; 0 bytes @ 0x4
  3558                           
  3559  0024                     ??_getTemp_AD:	
  3560                           ; 0 bytes @ 0x4
  3561                           
  3562  0024                     ??_RF_RxDisable:	
  3563                           ; 0 bytes @ 0x4
  3564                           
  3565  0024                     ??_setRF_AdjControl:	
  3566                           ; 0 bytes @ 0x4
  3567                           
  3568  0024                     ??_setSw_Initialization:	
  3569                           ; 0 bytes @ 0x4
  3570                           
  3571  0024                     ??_CC2500_TxData:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??_CC2500_RxData:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??_Flash_Memory_Initialization:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??___wmul:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     ??___awdiv:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     ??___lwdiv:	
  3587                           ; 0 bytes @ 0x4
  3588                           
  3589  0024                     CC2500_WriteREG@w_addr:	
  3590                           ; 0 bytes @ 0x4
  3591                           
  3592  0024                     setDimmerLights_DimmingRun@lights:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     setLED_Initialization@led:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     setLED_Main@led:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601  0024                     setSw_Initialization@sw:	
  3602                           ; 1 bytes @ 0x4
  3603                           
  3604  0024                     ___ftpack@sign:	
  3605                           ; 1 bytes @ 0x4
  3606                           
  3607  0024                     ___lbdiv@quotient:	
  3608                           ; 1 bytes @ 0x4
  3609                           
  3610  0024                     getBuz_GO@i:	
  3611                           ; 1 bytes @ 0x4
  3612                           
  3613  0024                     DelayTime_1us@j:	
  3614                           ; 2 bytes @ 0x4
  3615                           
  3616  0024                     ___wmul@product:	
  3617                           ; 2 bytes @ 0x4
  3618                           
  3619                           
  3620                           ; 2 bytes @ 0x4
  3621  0024                     	ds	1
  3622  0025                     ??_CC2500_InitSetREG:	
  3623  0025                     ??_CC2500_InitPATable:	
  3624                           ; 0 bytes @ 0x5
  3625                           
  3626  0025                     ??_Switch_Initialization:	
  3627                           ; 0 bytes @ 0x5
  3628                           
  3629  0025                     ??___ftpack:	
  3630                           ; 0 bytes @ 0x5
  3631                           
  3632  0025                     ??_LED_Initialization:	
  3633                           ; 0 bytes @ 0x5
  3634                           
  3635  0025                     ??_LED_Main:	
  3636                           ; 0 bytes @ 0x5
  3637                           
  3638  0025                     ?_Division:	
  3639                           ; 0 bytes @ 0x5
  3640                           
  3641  0025                     CC2500_TxData@loop_e:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644  0025                     CC2500_RxData@loop_f:	
  3645                           ; 1 bytes @ 0x5
  3646                           
  3647  0025                     Division@num:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     Flash_Memory_Initialization@value:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653  0025                     Flash_Memory_Modify@i:	
  3654                           ; 1 bytes @ 0x5
  3655                           
  3656  0025                     getMain_All_Error_Status@command:	
  3657                           ; 1 bytes @ 0x5
  3658                           
  3659  0025                     getTemp_AD@channel:	
  3660                           ; 1 bytes @ 0x5
  3661                           
  3662  0025                     setRF_AdjControl@status:	
  3663                           ; 1 bytes @ 0x5
  3664                           
  3665  0025                     ___awdiv@counter:	
  3666                           ; 1 bytes @ 0x5
  3667                           
  3668  0025                     ___lwdiv@quotient:	
  3669                           ; 1 bytes @ 0x5
  3670                           
  3671                           
  3672                           ; 2 bytes @ 0x5
  3673  0025                     	ds	1
  3674  0026                     ??_CC2500_PowerRST:	
  3675  0026                     ??_CC2500_FrequencyCabr:	
  3676                           ; 0 bytes @ 0x6
  3677                           
  3678  0026                     ??_Division:	
  3679                           ; 0 bytes @ 0x6
  3680                           
  3681  0026                     ??_Flash_Memory_Main:	
  3682                           ; 0 bytes @ 0x6
  3683                           
  3684  0026                     CC2500_InitSetREG@temp1:	
  3685                           ; 0 bytes @ 0x6
  3686                           
  3687  0026                     CC2500_InitPATable@temp:	
  3688                           ; 1 bytes @ 0x6
  3689                           
  3690  0026                     getMain_All_Error_Status@status:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693  0026                     getLoad_AD@channel:	
  3694                           ; 1 bytes @ 0x6
  3695                           
  3696  0026                     setRF_AdjControl@sw:	
  3697                           ; 1 bytes @ 0x6
  3698                           
  3699  0026                     ___awdiv@sign:	
  3700                           ; 1 bytes @ 0x6
  3701                           
  3702  0026                     getTemp_AD@ADRES:	
  3703                           ; 1 bytes @ 0x6
  3704                           
  3705                           
  3706                           ; 2 bytes @ 0x6
  3707  0026                     	ds	1
  3708  0027                     CC2500_InitSetREG@temp2:	
  3709  0027                     CC2500_InitPATable@loop_d:	
  3710                           ; 1 bytes @ 0x7
  3711                           
  3712  0027                     Flash_Memory_Main@key_Status:	
  3713                           ; 1 bytes @ 0x7
  3714                           
  3715  0027                     getLoad_AD@k:	
  3716                           ; 1 bytes @ 0x7
  3717                           
  3718  0027                     ___lwdiv@counter:	
  3719                           ; 1 bytes @ 0x7
  3720                           
  3721  0027                     ___awdiv@quotient:	
  3722                           ; 1 bytes @ 0x7
  3723                           
  3724                           
  3725                           ; 2 bytes @ 0x7
  3726  0027                     	ds	1
  3727  0028                     ??_Load_Main:	
  3728  0028                     ?___awtoft:	
  3729                           ; 0 bytes @ 0x8
  3730                           
  3731  0028                     CC2500_InitSetREG@loop_c:	
  3732                           ; 3 bytes @ 0x8
  3733                           
  3734  0028                     Division@value:	
  3735                           ; 1 bytes @ 0x8
  3736                           
  3737  0028                     _Flash_Memory_Main$3153:	
  3738                           ; 1 bytes @ 0x8
  3739                           
  3740  0028                     getLoad_AD@j:	
  3741                           ; 1 bytes @ 0x8
  3742                           
  3743  0028                     ___awtoft@c:	
  3744                           ; 1 bytes @ 0x8
  3745                           
  3746                           
  3747                           ; 2 bytes @ 0x8
  3748  0028                     	ds	1
  3749  0029                     ?_setBuz:	
  3750  0029                     ??_CC2500_PowerOnInitial:	
  3751                           ; 0 bytes @ 0x9
  3752                           
  3753  0029                     Division@result:	
  3754                           ; 0 bytes @ 0x9
  3755                           
  3756  0029                     setBuz@time:	
  3757                           ; 1 bytes @ 0x9
  3758                           
  3759  0029                     getLoad_AD@ADRES:	
  3760                           ; 2 bytes @ 0x9
  3761                           
  3762                           
  3763                           ; 2 bytes @ 0x9
  3764  0029                     	ds	1
  3765  002A                     _Load_Main$3988:	
  3766                           
  3767                           ; 2 bytes @ 0xA
  3768  002A                     	ds	1
  3769  002B                     ??_setBuz:	
  3770  002B                     ??___awtoft:	
  3771                           ; 0 bytes @ 0xB
  3772                           
  3773  002B                     getLoad_AD@i:	
  3774                           ; 0 bytes @ 0xB
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0xB
  3778  002B                     	ds	1
  3779  002C                     setBuz@count:	
  3780  002C                     Load_Main@error:	
  3781                           ; 1 bytes @ 0xC
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0xC
  3785  002C                     	ds	1
  3786  002D                     ??_setDimmerLights_SwOn:	
  3787  002D                     ??_my_MainTimer:	
  3788                           ; 0 bytes @ 0xD
  3789                           
  3790  002D                     ??_Exception_Main:	
  3791                           ; 0 bytes @ 0xD
  3792                           
  3793  002D                     setDimmerLights_SwOn@sw:	
  3794                           ; 0 bytes @ 0xD
  3795                           
  3796  002D                     Load_Main@ErrorCountValue:	
  3797                           ; 1 bytes @ 0xD
  3798                           
  3799  002D                     ___awtoft@sign:	
  3800                           ; 1 bytes @ 0xD
  3801                           
  3802                           
  3803                           ; 1 bytes @ 0xD
  3804  002D                     	ds	1
  3805  002E                     ?___ftdiv:	
  3806  002E                     ?___ftmul:	
  3807                           ; 3 bytes @ 0xE
  3808                           
  3809  002E                     setDimmerLights_SwOn@idle:	
  3810                           ; 3 bytes @ 0xE
  3811                           
  3812  002E                     Exception_Main@status:	
  3813                           ; 1 bytes @ 0xE
  3814                           
  3815  002E                     Load_Main@Load_RunStatus:	
  3816                           ; 1 bytes @ 0xE
  3817                           
  3818  002E                     ___ftdiv@f2:	
  3819                           ; 1 bytes @ 0xE
  3820                           
  3821  002E                     ___ftmul@f1:	
  3822                           ; 3 bytes @ 0xE
  3823                           
  3824                           
  3825                           ; 3 bytes @ 0xE
  3826  002E                     	ds	1
  3827  002F                     setDimmerLights_SwOn@rfDimming:	
  3828  002F                     Exception_Main@count:	
  3829                           ; 1 bytes @ 0xF
  3830                           
  3831  002F                     Load_Main@LightsCount:	
  3832                           ; 1 bytes @ 0xF
  3833                           
  3834                           
  3835                           ; 1 bytes @ 0xF
  3836  002F                     	ds	1
  3837  0030                     ??_setSw_Main:	
  3838  0030                     Exception_Main@i:	
  3839                           ; 0 bytes @ 0x10
  3840                           
  3841  0030                     Load_Main@i:	
  3842                           ; 2 bytes @ 0x10
  3843                           
  3844                           
  3845                           ; 2 bytes @ 0x10
  3846  0030                     	ds	1
  3847  0031                     ___ftdiv@f1:	
  3848  0031                     ___ftmul@f2:	
  3849                           ; 3 bytes @ 0x11
  3850                           
  3851                           
  3852                           ; 3 bytes @ 0x11
  3853  0031                     	ds	1
  3854  0032                     setSw_Main@sw:	
  3855  0032                     Exception_Main@i_3625:	
  3856                           ; 1 bytes @ 0x12
  3857                           
  3858                           
  3859                           ; 2 bytes @ 0x12
  3860  0032                     	ds	1
  3861  0033                     ??_Switch_Main:	
  3862                           
  3863                           ; 0 bytes @ 0x13
  3864  0033                     	ds	1
  3865  0034                     ??___ftdiv:	
  3866  0034                     ??___ftmul:	
  3867                           ; 0 bytes @ 0x14
  3868                           
  3869  0034                     Exception_Main@error:	
  3870                           ; 0 bytes @ 0x14
  3871                           
  3872                           
  3873                           ; 1 bytes @ 0x14
  3874  0034                     	ds	1
  3875  0035                     Exception_Main@lights:	
  3876                           
  3877                           ; 1 bytes @ 0x15
  3878  0035                     	ds	3
  3879  0038                     ___ftdiv@cntr:	
  3880  0038                     ___ftmul@exp:	
  3881                           ; 1 bytes @ 0x18
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x18
  3885  0038                     	ds	1
  3886  0039                     ___ftdiv@f3:	
  3887  0039                     ___ftmul@f3_as_product:	
  3888                           ; 3 bytes @ 0x19
  3889                           
  3890                           
  3891                           ; 3 bytes @ 0x19
  3892  0039                     	ds	3
  3893  003C                     ___ftdiv@exp:	
  3894  003C                     ___ftmul@cntr:	
  3895                           ; 1 bytes @ 0x1C
  3896                           
  3897                           
  3898                           ; 1 bytes @ 0x1C
  3899  003C                     	ds	1
  3900  003D                     ___ftdiv@sign:	
  3901  003D                     ___ftmul@sign:	
  3902                           ; 1 bytes @ 0x1D
  3903                           
  3904                           
  3905                           ; 1 bytes @ 0x1D
  3906  003D                     	ds	1
  3907  003E                     ?___ftneg:	
  3908  003E                     ___ftneg@f1:	
  3909                           ; 3 bytes @ 0x1E
  3910                           
  3911                           
  3912                           ; 3 bytes @ 0x1E
  3913  003E                     	ds	3
  3914  0041                     ??___ftneg:	
  3915  0041                     ?___ftadd:	
  3916                           ; 0 bytes @ 0x21
  3917                           
  3918  0041                     ___ftadd@f1:	
  3919                           ; 3 bytes @ 0x21
  3920                           
  3921                           
  3922                           ; 3 bytes @ 0x21
  3923  0041                     	ds	3
  3924  0044                     ___ftadd@f2:	
  3925                           
  3926                           ; 3 bytes @ 0x24
  3927  0044                     	ds	3
  3928  0047                     ??___ftadd:	
  3929                           
  3930                           ; 0 bytes @ 0x27
  3931  0047                     	ds	4
  3932  004B                     ___ftadd@sign:	
  3933                           
  3934                           ; 1 bytes @ 0x2B
  3935  004B                     	ds	1
  3936  004C                     ___ftadd@exp2:	
  3937                           
  3938                           ; 1 bytes @ 0x2C
  3939  004C                     	ds	1
  3940  004D                     ___ftadd@exp1:	
  3941                           
  3942                           ; 1 bytes @ 0x2D
  3943  004D                     	ds	1
  3944  004E                     ?___fttol:	
  3945  004E                     ___fttol@f1:	
  3946                           ; 4 bytes @ 0x2E
  3947                           
  3948                           
  3949                           ; 3 bytes @ 0x2E
  3950  004E                     	ds	4
  3951  0052                     ??___fttol:	
  3952                           
  3953                           ; 0 bytes @ 0x32
  3954  0052                     	ds	4
  3955  0056                     ___fttol@sign1:	
  3956                           
  3957                           ; 1 bytes @ 0x36
  3958  0056                     	ds	1
  3959  0057                     ___fttol@lval:	
  3960                           
  3961                           ; 4 bytes @ 0x37
  3962  0057                     	ds	4
  3963  005B                     ___fttol@exp1:	
  3964                           
  3965                           ; 1 bytes @ 0x3B
  3966  005B                     	ds	1
  3967  005C                     ??_getDimmerLights_ValueToPercent:	
  3968  005C                     ??_getDimmerLights_PercentToValue:	
  3969                           ; 0 bytes @ 0x3C
  3970                           
  3971                           
  3972                           ; 0 bytes @ 0x3C
  3973  005C                     	ds	2
  3974  005E                     getDimmerLights_PercentToValue@value:	
  3975  005E                     getDimmerLights_ValueToPercent@value:	
  3976                           ; 1 bytes @ 0x3E
  3977                           
  3978                           
  3979                           ; 1 bytes @ 0x3E
  3980  005E                     	ds	1
  3981  005F                     getDimmerLights_PercentToValue@i:	
  3982  005F                     getDimmerLights_ValueToPercent@i:	
  3983                           ; 3 bytes @ 0x3F
  3984                           
  3985                           
  3986                           ; 3 bytes @ 0x3F
  3987  005F                     	ds	3
  3988  0062                     ?_setProductData:	
  3989  0062                     ??_DimmerIntr_Initialization:	
  3990                           ; 0 bytes @ 0x42
  3991                           
  3992  0062                     ?_setDimmerIntr_DimmingValue:	
  3993                           ; 0 bytes @ 0x42
  3994                           
  3995  0062                     ?_setDimmerIntr_MaxmumValue:	
  3996                           ; 0 bytes @ 0x42
  3997                           
  3998  0062                     setDimmerIntr_DimmingValue@value:	
  3999                           ; 0 bytes @ 0x42
  4000                           
  4001  0062                     setDimmerIntr_MaxmumValue@value:	
  4002                           ; 1 bytes @ 0x42
  4003                           
  4004  0062                     setProductData@value:	
  4005                           ; 1 bytes @ 0x42
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x42
  4009  0062                     	ds	1
  4010  0063                     ??_setProductData:	
  4011  0063                     ??_setDimmerIntr_DimmingValue:	
  4012                           ; 0 bytes @ 0x43
  4013                           
  4014  0063                     ??_setDimmerIntr_MaxmumValue:	
  4015                           ; 0 bytes @ 0x43
  4016                           
  4017                           
  4018                           ; 0 bytes @ 0x43
  4019  0063                     	ds	1
  4020  0064                     ??_DimmerLights_Initialization:	
  4021  0064                     setDimmerIntr_DimmingValue@lights:	
  4022                           ; 0 bytes @ 0x44
  4023                           
  4024  0064                     setDimmerIntr_MaxmumValue@lights:	
  4025                           ; 1 bytes @ 0x44
  4026                           
  4027  0064                     setProductData@address:	
  4028                           ; 1 bytes @ 0x44
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x44
  4032  0064                     	ds	1
  4033  0065                     ??_DlyOff_Main:	
  4034  0065                     ?_setRF_DimmerLights:	
  4035                           ; 0 bytes @ 0x45
  4036                           
  4037  0065                     ??_setTemp_Main:	
  4038                           ; 0 bytes @ 0x45
  4039                           
  4040  0065                     ??_setLog_Code:	
  4041                           ; 0 bytes @ 0x45
  4042                           
  4043  0065                     ??_setRFSW_AdjControl:	
  4044                           ; 0 bytes @ 0x45
  4045                           
  4046  0065                     ?_setDelayOff_GO:	
  4047                           ; 0 bytes @ 0x45
  4048                           
  4049  0065                     setDelayOff_GO@command:	
  4050                           ; 0 bytes @ 0x45
  4051                           
  4052  0065                     setRF_DimmerLights@on:	
  4053                           ; 1 bytes @ 0x45
  4054                           
  4055                           
  4056                           ; 1 bytes @ 0x45
  4057  0065                     	ds	1
  4058  0066                     ??_setRF_DimmerLights:	
  4059  0066                     setDelayOff_GO@value:	
  4060                           ; 0 bytes @ 0x46
  4061                           
  4062                           
  4063                           ; 1 bytes @ 0x46
  4064  0066                     	ds	1
  4065  0067                     ??_setDelayOff_GO:	
  4066  0067                     DlyOff_Main@sw:	
  4067                           ; 0 bytes @ 0x47
  4068                           
  4069  0067                     setTemp_Main@error:	
  4070                           ; 1 bytes @ 0x47
  4071                           
  4072  0067                     setRFSW_AdjControl@status:	
  4073                           ; 1 bytes @ 0x47
  4074                           
  4075                           
  4076                           ; 1 bytes @ 0x47
  4077  0067                     	ds	1
  4078  0068                     ??_DelayOff_Main:	
  4079  0068                     setRFSW_AdjControl@sw:	
  4080                           ; 0 bytes @ 0x48
  4081                           
  4082  0068                     setRF_DimmerLights@status:	
  4083                           ; 1 bytes @ 0x48
  4084                           
  4085  0068                     setTemp_Main@SafeValue:	
  4086                           ; 1 bytes @ 0x48
  4087                           
  4088                           
  4089                           ; 2 bytes @ 0x48
  4090  0068                     	ds	1
  4091  0069                     setDelayOff_GO@i:	
  4092  0069                     setRF_DimmerLights@lights:	
  4093                           ; 1 bytes @ 0x49
  4094                           
  4095                           
  4096                           ; 1 bytes @ 0x49
  4097  0069                     	ds	1
  4098  006A                     ?_setDimmerLights_Dimming:	
  4099  006A                     setDelayOff_GO@j:	
  4100                           ; 0 bytes @ 0x4A
  4101                           
  4102  006A                     setDimmerLights_Dimming@status:	
  4103                           ; 1 bytes @ 0x4A
  4104                           
  4105  006A                     setTemp_Main@DangerValue:	
  4106                           ; 1 bytes @ 0x4A
  4107                           
  4108                           
  4109                           ; 2 bytes @ 0x4A
  4110  006A                     	ds	1
  4111  006B                     ??_setDimmerLights_Dimming:	
  4112  006B                     setDelayOff_GO@k:	
  4113                           ; 0 bytes @ 0x4B
  4114                           
  4115                           
  4116                           ; 1 bytes @ 0x4B
  4117  006B                     	ds	1
  4118  006C                     setDelayOff_GO@sw:	
  4119  006C                     setDimmerLights_Dimming@value:	
  4120                           ; 1 bytes @ 0x4C
  4121                           
  4122  006C                     setTemp_Main@TempGO:	
  4123                           ; 1 bytes @ 0x4C
  4124                           
  4125                           
  4126                           ; 1 bytes @ 0x4C
  4127  006C                     	ds	1
  4128  006D                     ?_setDimmerLights_OnOff:	
  4129  006D                     ??_setRFSW_Control:	
  4130                           ; 0 bytes @ 0x4D
  4131                           
  4132  006D                     setDimmerLights_OnOff@command:	
  4133                           ; 0 bytes @ 0x4D
  4134                           
  4135  006D                     setDimmerLights_Dimming@lights:	
  4136                           ; 1 bytes @ 0x4D
  4137                           
  4138  006D                     setTemp_Main@AD:	
  4139                           ; 1 bytes @ 0x4D
  4140                           
  4141                           
  4142                           ; 2 bytes @ 0x4D
  4143  006D                     	ds	1
  4144  006E                     ??_setDimmerLights_OnOff:	
  4145  006E                     setRFSW_Control@status:	
  4146                           ; 0 bytes @ 0x4E
  4147                           
  4148                           
  4149                           ; 1 bytes @ 0x4E
  4150  006E                     	ds	1
  4151  006F                     ??_Temp_Main:	
  4152  006F                     setRFSW_Control@sw:	
  4153                           ; 0 bytes @ 0x4F
  4154                           
  4155                           
  4156                           ; 1 bytes @ 0x4F
  4157  006F                     	ds	1
  4158  0070                     ??_setDimmerLights_Main:	
  4159  0070                     ??_RF_Main:	
  4160                           ; 0 bytes @ 0x50
  4161                           
  4162  0070                     ??_setControl_Lights_Table:	
  4163                           ; 0 bytes @ 0x50
  4164                           
  4165  0070                     ??_DimmerLights_Main:	
  4166                           ; 0 bytes @ 0x50
  4167                           
  4168  0070                     ??_main:	
  4169                           ; 0 bytes @ 0x50
  4170                           
  4171                           
  4172                           	psect	maintext
  4173  147E                     __pmaintext:	
  4174                           ; 0 bytes @ 0x50
  4175 ;;
  4176 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4177 ;;
  4178 ;; *************** function _main *****************
  4179 ;; Defined at:
  4180 ;;		line 7 in file "../src/Main_B1.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  argc            2    4[BANK1 ] int 
  4183 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  2    4[BANK1 ] int 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 17F/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4195 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;Total ram usage:        4 bytes
  4200 ;; Hardware stack levels required when called:   13
  4201 ;; This function calls:
  4202 ;;		_Buzzer_Initialization
  4203 ;;		_Buzzer_Main
  4204 ;;		_CC2500_PowerOnInitial
  4205 ;;		_DelayOff_Initialization
  4206 ;;		_DelayOff_Main
  4207 ;;		_DimmerLights_Initialization
  4208 ;;		_DimmerLights_Main
  4209 ;;		_Exception_Main
  4210 ;;		_Flash_Memory_Initialization
  4211 ;;		_Flash_Memory_Main
  4212 ;;		_LED_Initialization
  4213 ;;		_LED_Main
  4214 ;;		_Load_Initialization
  4215 ;;		_Load_Main
  4216 ;;		_Mcu_Initialization
  4217 ;;		_RF_Initialization
  4218 ;;		_RF_Main
  4219 ;;		_Switch_Initialization
  4220 ;;		_Switch_Main
  4221 ;;		_Temp_Initialization
  4222 ;;		_Temp_Main
  4223 ;;		_WDT_Main
  4224 ;;		_getLoad_AD
  4225 ;;		_getTemp_AD
  4226 ;;		_myMain_Initialization
  4227 ;;		_my_MainTimer
  4228 ;; This function is called by:
  4229 ;;		Startup code after reset
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           
  4234                           ;psect for function _main
  4235  147E                     _main:	
  4236                           
  4237                           ;Main_B1.c: 8: myMain_Initialization();
  4238                           
  4239                           ;incstack = 0
  4240                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4241  147E  319C  24D5  3194   	fcall	_myMain_Initialization
  4242                           
  4243                           ;Main_B1.c: 9: Mcu_Initialization();
  4244  1481  319C  2465  3194   	fcall	_Mcu_Initialization
  4245                           
  4246                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4247  1484  3186  26FC  3194   	fcall	_Flash_Memory_Initialization
  4248                           
  4249                           ;Main_B1.c: 11: LED_Initialization();
  4250  1487  319A  222B  3194   	fcall	_LED_Initialization
  4251                           
  4252                           ;Main_B1.c: 12: Buzzer_Initialization();
  4253  148A  319A  2211  3194   	fcall	_Buzzer_Initialization
  4254                           
  4255                           ;Main_B1.c: 14: ;;
  4256                           ;Main_B1.c: 15: Temp_Initialization();
  4257  148D  319A  221D  3194   	fcall	_Temp_Initialization
  4258                           
  4259                           ;Main_B1.c: 16: Load_Initialization();
  4260  1490  319A  2214  3194   	fcall	_Load_Initialization
  4261                           
  4262                           ;Main_B1.c: 17: ;;
  4263                           ;Main_B1.c: 18: DelayOff_Initialization();
  4264  1493  319A  2223  3194   	fcall	_DelayOff_Initialization
  4265                           
  4266                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4267  1496  319A  2268  3194   	fcall	_DimmerLights_Initialization
  4268                           
  4269                           ;Main_B1.c: 21: ;;
  4270                           ;Main_B1.c: 22: ;;
  4271                           ;Main_B1.c: 23: ;;
  4272                           ;Main_B1.c: 24: Switch_Initialization();
  4273  1499  319A  2247  3194   	fcall	_Switch_Initialization
  4274                           
  4275                           ;Main_B1.c: 25: RF_Initialization();
  4276  149C  319A  2217  3194   	fcall	_RF_Initialization
  4277                           
  4278                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4279  149F  319D  2511  3194   	fcall	_CC2500_PowerOnInitial
  4280  14A2                     l8910:	
  4281                           ;Main_B1.c: 27: ;;
  4282                           ;Main_B1.c: 28: ;;
  4283                           ;Main_B1.c: 30: while (1) {
  4284                           
  4285                           
  4286                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4287  14A2  0021               	movlb	1	; select bank1
  4288  14A3  1C2F               	btfss	_myMain^(0+128),0
  4289  14A4  2CAD               	goto	l8914
  4290                           
  4291                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4292  14A5  3005               	movlw	5
  4293  14A6  3189  2191  3194   	fcall	_getLoad_AD
  4294                           
  4295                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4296  14A9  3009               	movlw	9
  4297  14AA  318C  2495  3194   	fcall	_getTemp_AD
  4298  14AD                     l8914:	
  4299                           
  4300                           ;Main_B1.c: 57: }
  4301                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4302  14AD  0022               	movlb	2	; select bank2
  4303  14AE  1C31               	btfss	_Timer1^(0+256),0
  4304  14AF  2CA2               	goto	l8910
  4305                           
  4306                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4307  14B0  1031               	bcf	_Timer1^(0+256),0
  4308                           
  4309                           ;Main_B1.c: 96: my_MainTimer();
  4310  14B1  3191  21EB  3194   	fcall	_my_MainTimer
  4311                           
  4312                           ;Main_B1.c: 97: WDT_Main();
  4313  14B4  319C  2477  3194   	fcall	_WDT_Main
  4314                           
  4315                           ;Main_B1.c: 98: ;;
  4316                           ;Main_B1.c: 99: ;;
  4317                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4318  14B7  0021               	movlb	1	; select bank1
  4319  14B8  1C2F               	btfss	_myMain^(0+128),0
  4320  14B9  2CA2               	goto	l8910
  4321                           
  4322                           ;Main_B1.c: 101: Flash_Memory_Main();
  4323  14BA  3192  22A4  3194   	fcall	_Flash_Memory_Main
  4324                           
  4325                           ;Main_B1.c: 103: LED_Main();
  4326  14BD  319A  222F  3194   	fcall	_LED_Main
  4327                           
  4328                           ;Main_B1.c: 104: Buzzer_Main();
  4329  14C0  3192  22E5  3194   	fcall	_Buzzer_Main
  4330                           
  4331                           ;Main_B1.c: 106: ;;
  4332                           ;Main_B1.c: 107: Temp_Main();
  4333  14C3  319A  2220  3194   	fcall	_Temp_Main
  4334                           
  4335                           ;Main_B1.c: 108: Load_Main();
  4336  14C6  3180  2053  3194   	fcall	_Load_Main
  4337                           
  4338                           ;Main_B1.c: 109: ;;
  4339                           ;Main_B1.c: 111: ;;
  4340                           ;Main_B1.c: 112: DimmerLights_Main();
  4341  14C9  319E  2662  3194   	fcall	_DimmerLights_Main
  4342                           
  4343                           ;Main_B1.c: 113: Switch_Main();
  4344  14CC  319A  2276  3194   	fcall	_Switch_Main
  4345                           
  4346                           ;Main_B1.c: 114: ;;
  4347                           ;Main_B1.c: 115: ;;
  4348                           ;Main_B1.c: 117: RF_Main();
  4349  14CF  319A  221A  3194   	fcall	_RF_Main
  4350                           
  4351                           ;Main_B1.c: 118: DelayOff_Main();
  4352  14D2  319A  2227  3194   	fcall	_DelayOff_Main
  4353                           
  4354                           ;Main_B1.c: 119: ;;
  4355                           ;Main_B1.c: 120: ;;
  4356                           ;Main_B1.c: 121: Exception_Main();
  4357  14D5  3185  2554  3194   	fcall	_Exception_Main
  4358  14D8  2CA2               	goto	l8910
  4359  14D9                     __end_of_main:	
  4360                           ;Main_B1.c: 128: }
  4361                           ;Main_B1.c: 129: }
  4362                           ;Main_B1.c: 163: }
  4363                           ;Main_B1.c: 164: return (0);
  4364                           ;	Return value of _main is never used
  4365                           
  4366                           
  4367                           	psect	text1
  4368  11EB                     __ptext1:	
  4369 ;; *************** function _my_MainTimer *****************
  4370 ;; Defined at:
  4371 ;;		line 185 in file "../src/Main_B1.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;		None               void
  4378 ;; Registers used:
  4379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;Total ram usage:        1 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    7
  4392 ;; This function calls:
  4393 ;;		_setBuz
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           
  4400                           ;psect for function _my_MainTimer
  4401  11EB                     _my_MainTimer:	
  4402                           
  4403                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4407  11EB  0021               	movlb	1	; select bank1
  4408  11EC  182F               	btfsc	_myMain^(0+128),0
  4409  11ED  2A05               	goto	l8102
  4410                           
  4411                           ;Main_B1.c: 188: myMain.PowerCount++;
  4412  11EE  3001               	movlw	1
  4413  11EF  0020               	movlb	0	; select bank0
  4414  11F0  00AD               	movwf	??_my_MainTimer
  4415  11F1  082D               	movf	??_my_MainTimer,w
  4416  11F2  0021               	movlb	1	; select bank1
  4417  11F3  07B0               	addwf	(_myMain^(0+128)+1),f
  4418                           
  4419                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4420  11F4  0830               	movf	(_myMain^(0+128)+1),w
  4421  11F5  3A4B               	xorlw	75
  4422  11F6  1D03               	skipz
  4423  11F7  0008               	return
  4424                           
  4425                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4426  11F8  01B0               	clrf	(_myMain^(0+128)+1)
  4427                           
  4428                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4429  11F9  142F               	bsf	_myMain^(0+128),0
  4430                           
  4431                           ;Main_B1.c: 196: setBuz(3, 50);
  4432  11FA  3032               	movlw	50
  4433  11FB  0020               	movlb	0	; select bank0
  4434  11FC  00A9               	movwf	setBuz@time
  4435  11FD  3000               	movlw	0
  4436  11FE  00AA               	movwf	setBuz@time+1
  4437  11FF  3003               	movlw	3
  4438  1200  3194  2425         	fcall	_setBuz
  4439                           
  4440                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4441  1202  0021               	movlb	1	; select bank1
  4442  1203  162F               	bsf	_myMain^(0+128),4
  4443                           
  4444                           ;Main_B1.c: 206: }
  4445                           ;Main_B1.c: 207: } else {
  4446  1204  0008               	return
  4447  1205                     l8102:	
  4448                           
  4449                           ;Main_B1.c: 208: myMain.PowerCount++;
  4450  1205  3001               	movlw	1
  4451  1206  0020               	movlb	0	; select bank0
  4452  1207  00AD               	movwf	??_my_MainTimer
  4453  1208  082D               	movf	??_my_MainTimer,w
  4454  1209  0021               	movlb	1	; select bank1
  4455  120A  07B0               	addwf	(_myMain^(0+128)+1),f
  4456                           
  4457                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4458  120B  0830               	movf	(_myMain^(0+128)+1),w
  4459  120C  3A32               	xorlw	50
  4460  120D  1903               	btfsc	3,2
  4461                           
  4462                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4463  120E  01B0               	clrf	(_myMain^(0+128)+1)
  4464                           
  4465                           ;Main_B1.c: 226: }
  4466                           ;Main_B1.c: 228: myMain.Count1++;
  4467  120F  3001               	movlw	1
  4468  1210  07B3               	addwf	(_myMain^(0+128)+4),f
  4469  1211  3000               	movlw	0
  4470  1212  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4471                           
  4472                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4473  1213  3004               	movlw	4
  4474  1214  3EAF               	addlw	_myMain& (0+255)
  4475  1215  0086               	movwf	6
  4476  1216  0187               	clrf	7
  4477  1217  3F40               	moviw [0]fsr1
  4478  1218  3A32               	xorlw	50
  4479  1219  1D03               	skipz
  4480  121A  2A1D               	goto	u8235
  4481  121B  3F41               	moviw [1]fsr1
  4482  121C  3A00               	xorlw	0
  4483  121D                     u8235:	
  4484  121D  1D03               	skipz
  4485  121E  0008               	return
  4486                           
  4487                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4488  121F  01B3               	clrf	(_myMain^(0+128)+4)
  4489  1220  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4490                           
  4491                           ;Main_B1.c: 242: if (myMain.Flag) {
  4492  1221  1CAF               	btfss	_myMain^(0+128),1
  4493  1222  2A25               	goto	l1452
  4494                           
  4495                           ;Main_B1.c: 243: myMain.Flag = 0;
  4496  1223  10AF               	bcf	_myMain^(0+128),1
  4497                           
  4498                           ;Main_B1.c: 252: } else {
  4499  1224  0008               	return
  4500  1225                     l1452:	
  4501                           
  4502                           ;Main_B1.c: 253: myMain.Flag = 1;
  4503  1225  14AF               	bsf	_myMain^(0+128),1
  4504  1226  0008               	return
  4505  1227                     __end_of_my_MainTimer:	
  4506                           
  4507                           	psect	text2
  4508  1CD5                     __ptext2:	
  4509 ;; *************** function _myMain_Initialization *****************
  4510 ;; Defined at:
  4511 ;;		line 170 in file "../src/Main_B1.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;		None               void
  4518 ;; Registers used:
  4519 ;;		wreg, fsr1l, fsr1h
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;Total ram usage:        1 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    5
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_main
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _myMain_Initialization
  4541  1CD5                     _myMain_Initialization:	
  4542                           
  4543                           ;Main_B1.c: 173: product = &_product;
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4547  1CD5  30CC               	movlw	__product& (0+255)
  4548  1CD6  0020               	movlb	0	; select bank0
  4549  1CD7  00A0               	movwf	??_myMain_Initialization
  4550  1CD8  0820               	movf	??_myMain_Initialization,w
  4551  1CD9  0021               	movlb	1	; select bank1
  4552  1CDA  00EE               	movwf	_product^(0+128)
  4553                           
  4554                           ;Main_B1.c: 174: product->Data[20] = 209;
  4555  1CDB  30D1               	movlw	209
  4556  1CDC  0020               	movlb	0	; select bank0
  4557  1CDD  00A0               	movwf	??_myMain_Initialization
  4558  1CDE  0021               	movlb	1	; select bank1
  4559  1CDF  086E               	movf	_product^(0+128),w
  4560  1CE0  3E14               	addlw	20
  4561  1CE1  0086               	movwf	6
  4562  1CE2  3001               	movlw	1	; select bank2/3
  4563  1CE3  0087               	movwf	7
  4564  1CE4  0020               	movlb	0	; select bank0
  4565  1CE5  0820               	movf	??_myMain_Initialization,w
  4566  1CE6  0081               	movwf	1
  4567  1CE7  0008               	return
  4568  1CE8                     __end_of_myMain_Initialization:	
  4569                           
  4570                           	psect	text3
  4571  0C95                     __ptext3:	
  4572 ;; *************** function _getTemp_AD *****************
  4573 ;; Defined at:
  4574 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  channel         1    wreg     unsigned char 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  channel         1    5[BANK0 ] unsigned char 
  4579 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;		None               void
  4582 ;; Registers used:
  4583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;Total ram usage:        4 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    7
  4596 ;; This function calls:
  4597 ;;		_getAD
  4598 ;; This function is called by:
  4599 ;;		_main
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _getTemp_AD
  4605  0C95                     _getTemp_AD:	
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4609                           ;getTemp_AD@channel stored from wreg
  4610  0C95  0020               	movlb	0	; select bank0
  4611  0C96  00A5               	movwf	getTemp_AD@channel
  4612                           
  4613                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4614  0C97  01A6               	clrf	getTemp_AD@ADRES
  4615  0C98  01A7               	clrf	getTemp_AD@ADRES+1
  4616                           
  4617                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4618  0C99  0021               	movlb	1	; select bank1
  4619  0C9A  1D58               	btfss	_Temp^(0+128),2
  4620  0C9B  0008               	return
  4621                           
  4622                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4623  0C9C  30F0               	movlw	240
  4624  0C9D  0020               	movlb	0	; select bank0
  4625  0C9E  00A4               	movwf	??_getTemp_AD
  4626  0C9F  0824               	movf	??_getTemp_AD,w
  4627  0CA0  00A0               	movwf	getAD@adcon1
  4628  0CA1  0825               	movf	getTemp_AD@channel,w
  4629  0CA2  319F  2713  318C   	fcall	_getAD
  4630  0CA5  0020               	movlb	0	; select bank0
  4631  0CA6  0821               	movf	?_getAD+1,w
  4632  0CA7  01A7               	clrf	getTemp_AD@ADRES+1
  4633  0CA8  07A7               	addwf	getTemp_AD@ADRES+1,f
  4634  0CA9  0820               	movf	?_getAD,w
  4635  0CAA  01A6               	clrf	getTemp_AD@ADRES
  4636  0CAB  07A6               	addwf	getTemp_AD@ADRES,f
  4637                           
  4638                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4639  0CAC  0827               	movf	getTemp_AD@ADRES+1,w
  4640  0CAD  0426               	iorwf	getTemp_AD@ADRES,w
  4641  0CAE  1903               	skipnz
  4642  0CAF  0008               	return
  4643                           
  4644                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4645  0CB0  0827               	movf	getTemp_AD@ADRES+1,w
  4646  0CB1  0021               	movlb	1	; select bank1
  4647  0CB2  025D               	subwf	((_Temp+1)^(0+128)+4),w
  4648  0CB3  1D03               	skipz
  4649  0CB4  2CB9               	goto	u8155
  4650  0CB5  0020               	movlb	0	; select bank0
  4651  0CB6  0826               	movf	getTemp_AD@ADRES,w
  4652  0CB7  0021               	movlb	1	; select bank1
  4653  0CB8  025C               	subwf	(_Temp^(0+128)+4),w
  4654  0CB9                     u8155:	
  4655  0CB9  1803               	skipnc
  4656  0CBA  2CC6               	goto	l8072
  4657                           
  4658                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4659  0CBB  0020               	movlb	0	; select bank0
  4660  0CBC  0827               	movf	getTemp_AD@ADRES+1,w
  4661  0CBD  0021               	movlb	1	; select bank1
  4662  0CBE  01DD               	clrf	((_Temp+1)^(0+128)+4)
  4663  0CBF  07DD               	addwf	((_Temp+1)^(0+128)+4),f
  4664  0CC0  0020               	movlb	0	; select bank0
  4665  0CC1  0826               	movf	getTemp_AD@ADRES,w
  4666  0CC2  0021               	movlb	1	; select bank1
  4667  0CC3  01DC               	clrf	(_Temp^(0+128)+4)
  4668  0CC4  07DC               	addwf	(_Temp^(0+128)+4),f
  4669                           
  4670                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4671  0CC5  0008               	return
  4672  0CC6                     l8072:	
  4673  0CC6  0020               	movlb	0	; select bank0
  4674  0CC7  0827               	movf	getTemp_AD@ADRES+1,w
  4675  0CC8  0021               	movlb	1	; select bank1
  4676  0CC9  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4677  0CCA  1D03               	skipz
  4678  0CCB  2CD0               	goto	u8165
  4679  0CCC  0020               	movlb	0	; select bank0
  4680  0CCD  0826               	movf	getTemp_AD@ADRES,w
  4681  0CCE  0021               	movlb	1	; select bank1
  4682  0CCF  025E               	subwf	(_Temp^(0+128)+6),w
  4683  0CD0                     u8165:	
  4684  0CD0  1803               	skipnc
  4685  0CD1  2CDD               	goto	l8076
  4686                           
  4687                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4688  0CD2  0020               	movlb	0	; select bank0
  4689  0CD3  0827               	movf	getTemp_AD@ADRES+1,w
  4690  0CD4  0021               	movlb	1	; select bank1
  4691  0CD5  01DF               	clrf	((_Temp+1)^(0+128)+6)
  4692  0CD6  07DF               	addwf	((_Temp+1)^(0+128)+6),f
  4693  0CD7  0020               	movlb	0	; select bank0
  4694  0CD8  0826               	movf	getTemp_AD@ADRES,w
  4695  0CD9  0021               	movlb	1	; select bank1
  4696  0CDA  01DE               	clrf	(_Temp^(0+128)+6)
  4697  0CDB  07DE               	addwf	(_Temp^(0+128)+6),f
  4698                           
  4699                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4700  0CDC  0008               	return
  4701  0CDD                     l8076:	
  4702  0CDD  0020               	movlb	0	; select bank0
  4703  0CDE  0827               	movf	getTemp_AD@ADRES+1,w
  4704  0CDF  0021               	movlb	1	; select bank1
  4705  0CE0  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4706  0CE1  1D03               	skipz
  4707  0CE2  2CE7               	goto	u8175
  4708  0CE3  0020               	movlb	0	; select bank0
  4709  0CE4  0826               	movf	getTemp_AD@ADRES,w
  4710  0CE5  0021               	movlb	1	; select bank1
  4711  0CE6  0260               	subwf	(_Temp^(0+128)+8),w
  4712  0CE7                     u8175:	
  4713  0CE7  1803               	skipnc
  4714  0CE8  2CF4               	goto	l8080
  4715                           
  4716                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4717  0CE9  0020               	movlb	0	; select bank0
  4718  0CEA  0827               	movf	getTemp_AD@ADRES+1,w
  4719  0CEB  0021               	movlb	1	; select bank1
  4720  0CEC  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4721  0CED  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4722  0CEE  0020               	movlb	0	; select bank0
  4723  0CEF  0826               	movf	getTemp_AD@ADRES,w
  4724  0CF0  0021               	movlb	1	; select bank1
  4725  0CF1  01E0               	clrf	(_Temp^(0+128)+8)
  4726  0CF2  07E0               	addwf	(_Temp^(0+128)+8),f
  4727                           
  4728                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4729  0CF3  0008               	return
  4730  0CF4                     l8080:	
  4731  0CF4  0020               	movlb	0	; select bank0
  4732  0CF5  0827               	movf	getTemp_AD@ADRES+1,w
  4733  0CF6  0021               	movlb	1	; select bank1
  4734  0CF7  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4735  0CF8  1D03               	skipz
  4736  0CF9  2CFE               	goto	u8185
  4737  0CFA  0020               	movlb	0	; select bank0
  4738  0CFB  0826               	movf	getTemp_AD@ADRES,w
  4739  0CFC  0021               	movlb	1	; select bank1
  4740  0CFD  0262               	subwf	(_Temp^(0+128)+10),w
  4741  0CFE                     u8185:	
  4742  0CFE  1803               	skipnc
  4743  0CFF  2D0B               	goto	l8084
  4744                           
  4745                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4746  0D00  0020               	movlb	0	; select bank0
  4747  0D01  0827               	movf	getTemp_AD@ADRES+1,w
  4748  0D02  0021               	movlb	1	; select bank1
  4749  0D03  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4750  0D04  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4751  0D05  0020               	movlb	0	; select bank0
  4752  0D06  0826               	movf	getTemp_AD@ADRES,w
  4753  0D07  0021               	movlb	1	; select bank1
  4754  0D08  01E2               	clrf	(_Temp^(0+128)+10)
  4755  0D09  07E2               	addwf	(_Temp^(0+128)+10),f
  4756                           
  4757                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4758  0D0A  0008               	return
  4759  0D0B                     l8084:	
  4760  0D0B  0020               	movlb	0	; select bank0
  4761  0D0C  0827               	movf	getTemp_AD@ADRES+1,w
  4762  0D0D  0021               	movlb	1	; select bank1
  4763  0D0E  0265               	subwf	((_Temp+1)^(0+128)+12),w
  4764  0D0F  1D03               	skipz
  4765  0D10  2D15               	goto	u8195
  4766  0D11  0020               	movlb	0	; select bank0
  4767  0D12  0826               	movf	getTemp_AD@ADRES,w
  4768  0D13  0021               	movlb	1	; select bank1
  4769  0D14  0264               	subwf	(_Temp^(0+128)+12),w
  4770  0D15                     u8195:	
  4771  0D15  1803               	skipnc
  4772  0D16  0008               	return
  4773                           
  4774                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4775  0D17  0020               	movlb	0	; select bank0
  4776  0D18  0827               	movf	getTemp_AD@ADRES+1,w
  4777  0D19  0021               	movlb	1	; select bank1
  4778  0D1A  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4779  0D1B  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4780  0D1C  0020               	movlb	0	; select bank0
  4781  0D1D  0826               	movf	getTemp_AD@ADRES,w
  4782  0D1E  0021               	movlb	1	; select bank1
  4783  0D1F  01E4               	clrf	(_Temp^(0+128)+12)
  4784  0D20  07E4               	addwf	(_Temp^(0+128)+12),f
  4785  0D21  0008               	return
  4786  0D22                     __end_of_getTemp_AD:	
  4787                           
  4788                           	psect	text4
  4789  0991                     __ptext4:	
  4790 ;; *************** function _getLoad_AD *****************
  4791 ;; Defined at:
  4792 ;;		line 16 in file "../src/OverLoad_B1.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  channel         1    wreg     unsigned char 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  channel         1    6[BANK0 ] unsigned char 
  4797 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4798 ;;  i               1   11[BANK0 ] unsigned char 
  4799 ;;  j               1    8[BANK0 ] unsigned char 
  4800 ;;  k               1    7[BANK0 ] unsigned char 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;Total ram usage:        8 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    7
  4817 ;; This function calls:
  4818 ;;		_getAD
  4819 ;; This function is called by:
  4820 ;;		_main
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _getLoad_AD
  4826  0991                     _getLoad_AD:	
  4827                           
  4828                           ;incstack = 0
  4829                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4830                           ;getLoad_AD@channel stored from wreg
  4831  0991  0020               	movlb	0	; select bank0
  4832  0992  00A6               	movwf	getLoad_AD@channel
  4833                           
  4834                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4835  0993  01AB               	clrf	getLoad_AD@i
  4836  0994  01A8               	clrf	getLoad_AD@j
  4837  0995  01A7               	clrf	getLoad_AD@k
  4838                           
  4839                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4840  0996  01A9               	clrf	getLoad_AD@ADRES
  4841  0997  01AA               	clrf	getLoad_AD@ADRES+1
  4842                           
  4843                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4844  0998  0022               	movlb	2	; select bank2
  4845  0999  1E38               	btfss	_Load^(0+256),4
  4846  099A  0008               	return
  4847                           
  4848                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4849  099B  30F3               	movlw	243
  4850  099C  0020               	movlb	0	; select bank0
  4851  099D  00A4               	movwf	??_getLoad_AD
  4852  099E  0824               	movf	??_getLoad_AD,w
  4853  099F  00A0               	movwf	getAD@adcon1
  4854  09A0  0826               	movf	getLoad_AD@channel,w
  4855  09A1  319F  2713  3189   	fcall	_getAD
  4856  09A4  0020               	movlb	0	; select bank0
  4857  09A5  0821               	movf	?_getAD+1,w
  4858  09A6  01AA               	clrf	getLoad_AD@ADRES+1
  4859  09A7  07AA               	addwf	getLoad_AD@ADRES+1,f
  4860  09A8  0820               	movf	?_getAD,w
  4861  09A9  01A9               	clrf	getLoad_AD@ADRES
  4862  09AA  07A9               	addwf	getLoad_AD@ADRES,f
  4863                           
  4864                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4865  09AB  01AB               	clrf	getLoad_AD@i
  4866  09AC  3004               	movlw	4
  4867  09AD  022B               	subwf	getLoad_AD@i,w
  4868  09AE  1803               	btfsc	3,0
  4869  09AF  29D7               	goto	l8040
  4870  09B0                     l8028:	
  4871                           
  4872                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4873  09B0  352B               	lslf	getLoad_AD@i,w
  4874  09B1  3E43               	addlw	(_Load+11)& (0+255)
  4875  09B2  0086               	movwf	6
  4876  09B3  3001               	movlw	1	; select bank2/3
  4877  09B4  0087               	movwf	7
  4878  09B5  3F40               	moviw [0]fsr1
  4879  09B6  00A4               	movwf	??_getLoad_AD
  4880  09B7  3F41               	moviw [1]fsr1
  4881  09B8  00A5               	movwf	??_getLoad_AD+1
  4882  09B9  082A               	movf	getLoad_AD@ADRES+1,w
  4883  09BA  0225               	subwf	??_getLoad_AD+1,w
  4884  09BB  1D03               	skipz
  4885  09BC  29BF               	goto	u8055
  4886  09BD  0829               	movf	getLoad_AD@ADRES,w
  4887  09BE  0224               	subwf	??_getLoad_AD,w
  4888  09BF                     u8055:	
  4889  09BF  1803               	skipnc
  4890  09C0  29CF               	goto	l8036
  4891  09C1  08A8               	movf	getLoad_AD@j,f
  4892  09C2  1D03               	skipz
  4893  09C3  29CF               	goto	l8036
  4894                           
  4895                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4896  09C4  352B               	lslf	getLoad_AD@i,w
  4897  09C5  3E43               	addlw	(_Load+11)& (0+255)
  4898  09C6  0086               	movwf	6
  4899  09C7  3001               	movlw	1	; select bank2/3
  4900  09C8  0087               	movwf	7
  4901  09C9  0829               	movf	getLoad_AD@ADRES,w
  4902  09CA  3FC0               	movwi [0]fsr1
  4903  09CB  082A               	movf	getLoad_AD@ADRES+1,w
  4904  09CC  3FC1               	movwi [1]fsr1
  4905                           
  4906                           ;OverLoad_B1.c: 25: j = 1;
  4907  09CD  01A8               	clrf	getLoad_AD@j
  4908  09CE  0AA8               	incf	getLoad_AD@j,f
  4909  09CF                     l8036:	
  4910  09CF  3001               	movlw	1
  4911  09D0  00A4               	movwf	??_getLoad_AD
  4912  09D1  0824               	movf	??_getLoad_AD,w
  4913  09D2  07AB               	addwf	getLoad_AD@i,f
  4914  09D3  3004               	movlw	4
  4915  09D4  022B               	subwf	getLoad_AD@i,w
  4916  09D5  1C03               	skipc
  4917  09D6  29B0               	goto	l8028
  4918  09D7                     l8040:	
  4919                           
  4920                           ;OverLoad_B1.c: 26: }
  4921                           ;OverLoad_B1.c: 27: }
  4922                           ;OverLoad_B1.c: 28: if (j == 0) {
  4923  09D7  08A8               	movf	getLoad_AD@j,f
  4924  09D8  1D03               	skipz
  4925  09D9  0008               	return
  4926                           
  4927                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4928  09DA  01AB               	clrf	getLoad_AD@i
  4929  09DB                     L1:	
  4930  09DB  3004               	movlw	4
  4931  09DC  022B               	subwf	getLoad_AD@i,w
  4932  09DD  1803               	btfsc	3,0
  4933  09DE  0008               	return
  4934                           
  4935                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4936  09DF  352B               	lslf	getLoad_AD@i,w
  4937  09E0  3E4D               	addlw	(_Load+21)& (0+255)
  4938  09E1  0086               	movwf	6
  4939  09E2  3001               	movlw	1	; select bank2/3
  4940  09E3  0087               	movwf	7
  4941  09E4  3F40               	moviw [0]fsr1
  4942  09E5  00A4               	movwf	??_getLoad_AD
  4943  09E6  3F41               	moviw [1]fsr1
  4944  09E7  00A5               	movwf	??_getLoad_AD+1
  4945  09E8  0825               	movf	??_getLoad_AD+1,w
  4946  09E9  022A               	subwf	getLoad_AD@ADRES+1,w
  4947  09EA  1D03               	skipz
  4948  09EB  29EE               	goto	u8105
  4949  09EC  0824               	movf	??_getLoad_AD,w
  4950  09ED  0229               	subwf	getLoad_AD@ADRES,w
  4951  09EE                     u8105:	
  4952  09EE  1803               	skipnc
  4953  09EF  29FE               	goto	l8056
  4954  09F0  08A7               	movf	getLoad_AD@k,f
  4955  09F1  1D03               	skipz
  4956  09F2  29FE               	goto	l8056
  4957                           
  4958                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4959  09F3  352B               	lslf	getLoad_AD@i,w
  4960  09F4  3E4D               	addlw	(_Load+21)& (0+255)
  4961  09F5  0086               	movwf	6
  4962  09F6  3001               	movlw	1	; select bank2/3
  4963  09F7  0087               	movwf	7
  4964  09F8  0829               	movf	getLoad_AD@ADRES,w
  4965  09F9  3FC0               	movwi [0]fsr1
  4966  09FA  082A               	movf	getLoad_AD@ADRES+1,w
  4967  09FB  3FC1               	movwi [1]fsr1
  4968                           
  4969                           ;OverLoad_B1.c: 32: k = 1;
  4970  09FC  01A7               	clrf	getLoad_AD@k
  4971  09FD  0AA7               	incf	getLoad_AD@k,f
  4972  09FE                     l8056:	
  4973  09FE  3001               	movlw	1
  4974  09FF  00A4               	movwf	??_getLoad_AD
  4975  0A00  0824               	movf	??_getLoad_AD,w
  4976  0A01  07AB               	addwf	getLoad_AD@i,f
  4977  0A02  29DB               	goto	L1
  4978  0A03                     __end_of_getLoad_AD:	
  4979                           
  4980                           	psect	text5
  4981  1F13                     __ptext5:	
  4982 ;; *************** function _getAD *****************
  4983 ;; Defined at:
  4984 ;;		line 461 in file "../src/MCU_B1.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  adcon0          1    wreg     unsigned char 
  4987 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  2    0[BANK0 ] int 
  4992 ;; Registers used:
  4993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4999 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;Total ram usage:        4 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    6
  5006 ;; This function calls:
  5007 ;;		_Timeout_Counter
  5008 ;;		_set_TimeoutCleared
  5009 ;; This function is called by:
  5010 ;;		_getLoad_AD
  5011 ;;		_getTemp_AD
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           
  5016                           ;psect for function _getAD
  5017  1F13                     _getAD:	
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5021                           ;getAD@adcon0 stored from wreg
  5022  1F13  0020               	movlb	0	; select bank0
  5023  1F14  00A3               	movwf	getAD@adcon0
  5024                           
  5025                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5026  1F15  0823               	movf	getAD@adcon0,w
  5027  1F16  0021               	movlb	1	; select bank1
  5028  1F17  009D               	movwf	29	;volatile
  5029                           
  5030                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5031  1F18  0020               	movlb	0	; select bank0
  5032  1F19  0820               	movf	getAD@adcon1,w
  5033  1F1A  0021               	movlb	1	; select bank1
  5034  1F1B  009E               	movwf	30	;volatile
  5035                           
  5036                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5037  1F1C  149D               	bsf	29,1	;volatile
  5038                           
  5039                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5040  1F1D  2F21               	goto	l7506
  5041  1F1E                     l7504:	
  5042                           
  5043                           ;MCU_B1.c: 466: Timeout_Counter();
  5044  1F1E  319D  2526  319F   	fcall	_Timeout_Counter
  5045  1F21                     l7506:	
  5046  1F21  0021               	movlb	1	; select bank1
  5047  1F22  1C9D               	btfss	29,1	;volatile
  5048  1F23  2F26               	goto	l7510
  5049  1F24  1D39               	btfss	(_myMain^(0+128)+10),2
  5050  1F25  2F1E               	goto	l7504
  5051  1F26                     l7510:	
  5052                           
  5053                           ;MCU_B1.c: 467: };
  5054                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5055  1F26  319A  224B         	fcall	_set_TimeoutCleared
  5056                           
  5057                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5058  1F28  0021               	movlb	1	; select bank1
  5059  1F29  081C               	movf	28,w	;volatile
  5060  1F2A  0020               	movlb	0	; select bank0
  5061  1F2B  01A1               	clrf	?_getAD+1
  5062  1F2C  07A1               	addwf	?_getAD+1,f
  5063  1F2D  0021               	movlb	1	; select bank1
  5064  1F2E  081B               	movf	27,w	;volatile
  5065  1F2F  0020               	movlb	0	; select bank0
  5066  1F30  01A0               	clrf	?_getAD
  5067  1F31  07A0               	addwf	?_getAD,f
  5068  1F32  0008               	return
  5069  1F33                     __end_of_getAD:	
  5070                           
  5071                           	psect	text6
  5072  1C77                     __ptext6:	
  5073 ;; *************** function _WDT_Main *****************
  5074 ;; Defined at:
  5075 ;;		line 1116 in file "../src/MCU_B1.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;		None
  5080 ;; Return value:  Size  Location     Type
  5081 ;;		None               void
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0, pclath, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;Total ram usage:        1 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    6
  5096 ;; This function calls:
  5097 ;;		_WDT_Clearing
  5098 ;; This function is called by:
  5099 ;;		_main
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           
  5104                           ;psect for function _WDT_Main
  5105  1C77                     _WDT_Main:	
  5106                           
  5107                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5108                           
  5109                           ;incstack = 0
  5110                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5111  1C77  0022               	movlb	2	; select bank2
  5112  1C78  1C36               	btfss	_WDT^(0+256),0
  5113  1C79  0008               	return
  5114                           
  5115                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5116  1C7A  3001               	movlw	1
  5117  1C7B  02B7               	subwf	(_WDT^(0+256)+1),f
  5118  1C7C  0837               	movf	(_WDT^(0+256)+1),w
  5119  1C7D  3AFF               	xorlw	255
  5120  1C7E  1903               	skipnz
  5121  1C7F  0008               	return
  5122                           
  5123                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5124  1C80  3064               	movlw	100
  5125  1C81  0020               	movlb	0	; select bank0
  5126  1C82  00A0               	movwf	??_WDT_Main
  5127  1C83  0820               	movf	??_WDT_Main,w
  5128  1C84  0022               	movlb	2	; select bank2
  5129  1C85  00B7               	movwf	(_WDT^(0+256)+1)
  5130                           
  5131                           ;MCU_B1.c: 1120: WDT_Clearing();
  5132  1C86  3180  2002         	fcall	_WDT_Clearing
  5133  1C88  0008               	return
  5134  1C89                     __end_of_WDT_Main:	
  5135                           
  5136                           	psect	text7
  5137  0002                     __ptext7:	
  5138 ;; *************** function _WDT_Clearing *****************
  5139 ;; Defined at:
  5140 ;;		line 1126 in file "../src/MCU_B1.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;		None               void
  5147 ;; Registers used:
  5148 ;;		None
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;Total ram usage:        0 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    5
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_WDT_Main
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           
  5169                           ;psect for function _WDT_Clearing
  5170  0002                     _WDT_Clearing:	
  5171                           
  5172                           ;incstack = 0
  5173                           ; Regs used in _WDT_Clearing: []
  5174  0002  0064               	clrwdt	;# 
  5175  0003  0008               	return
  5176  0004                     __end_of_WDT_Clearing:	
  5177                           
  5178                           	psect	text8
  5179  1A20                     __ptext8:	
  5180 ;; *************** function _Temp_Main *****************
  5181 ;; Defined at:
  5182 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;		None
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;		None               void
  5189 ;; Registers used:
  5190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;Total ram usage:        0 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    8
  5203 ;; This function calls:
  5204 ;;		_setTemp_Main
  5205 ;; This function is called by:
  5206 ;;		_main
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function _Temp_Main
  5212  1A20                     _Temp_Main:	
  5213                           
  5214                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5215                           
  5216                           ;incstack = 0
  5217                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5218  1A20  3186  2629         	fcall	_setTemp_Main
  5219  1A22  0008               	return
  5220  1A23                     __end_of_Temp_Main:	
  5221                           
  5222                           	psect	text9
  5223  0629                     __ptext9:	
  5224 ;; *************** function _setTemp_Main *****************
  5225 ;; Defined at:
  5226 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  AD              2   77[BANK0 ] int 
  5231 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5232 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5233 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5234 ;;  error           1   71[BANK0 ] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;Total ram usage:       10 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    7
  5251 ;; This function calls:
  5252 ;;		___lwdiv
  5253 ;;		_getMain_All_Error_Status
  5254 ;;		_getMain_All_LightsStatus
  5255 ;;		_setBuz
  5256 ;;		_setOverTemp_ADV_Restore
  5257 ;;		_setProductData
  5258 ;; This function is called by:
  5259 ;;		_Temp_Main
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           
  5264                           ;psect for function _setTemp_Main
  5265  0629                     _setTemp_Main:	
  5266                           
  5267                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5271  0629  3000               	movlw	0
  5272  062A  3190  20DE  3186   	fcall	_getMain_All_Error_Status
  5273  062D  0020               	movlb	0	; select bank0
  5274  062E  00E5               	movwf	??_setTemp_Main
  5275  062F  0865               	movf	??_setTemp_Main,w
  5276  0630  00E7               	movwf	setTemp_Main@error
  5277                           
  5278                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5279  0631  01E8               	clrf	setTemp_Main@SafeValue
  5280  0632  01E9               	clrf	setTemp_Main@SafeValue+1
  5281  0633  01EA               	clrf	setTemp_Main@DangerValue
  5282  0634  01EB               	clrf	setTemp_Main@DangerValue+1
  5283                           
  5284                           ;OverTemperature_B1.c: 75: int AD = 0;
  5285  0635  01ED               	clrf	setTemp_Main@AD
  5286  0636  01EE               	clrf	setTemp_Main@AD+1
  5287                           
  5288                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5289  0637  319A  22A8  3186   	fcall	_getMain_All_LightsStatus
  5290  063A  0020               	movlb	0	; select bank0
  5291  063B  00E5               	movwf	??_setTemp_Main
  5292  063C  0865               	movf	??_setTemp_Main,w
  5293  063D  00EC               	movwf	setTemp_Main@TempGO
  5294                           
  5295                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5296  063E  0021               	movlb	1	; select bank1
  5297  063F  1C58               	btfss	_Temp^(0+128),0
  5298  0640  2EF8               	goto	l1801
  5299                           
  5300                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5301  0641  1958               	btfsc	_Temp^(0+128),2
  5302  0642  2E60               	goto	l7612
  5303                           
  5304                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5305  0643  0020               	movlb	0	; select bank0
  5306  0644  086C               	movf	setTemp_Main@TempGO,w
  5307  0645  3A01               	xorlw	1
  5308  0646  1D03               	skipz
  5309  0647  2E4B               	goto	l1807
  5310  0648  0021               	movlb	1	; select bank1
  5311  0649  1CD8               	btfss	_Temp^(0+128),1
  5312  064A  2E4E               	goto	l7604
  5313  064B                     l1807:	
  5314  064B  0021               	movlb	1	; select bank1
  5315  064C  1CD8               	btfss	_Temp^(0+128),1
  5316  064D  2E5D               	goto	l7610
  5317  064E                     l7604:	
  5318                           
  5319                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5320  064E  3001               	movlw	1
  5321  064F  07D9               	addwf	(_Temp^(0+128)+1),f
  5322  0650  3000               	movlw	0
  5323  0651  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5324                           
  5325                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5326  0652  3000               	movlw	0
  5327  0653  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5328  0654  30FA               	movlw	250
  5329  0655  1903               	skipnz
  5330  0656  0259               	subwf	(_Temp^(0+128)+1),w
  5331  0657  1C03               	skipc
  5332  0658  0008               	return
  5333                           
  5334                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5335  0659  01D9               	clrf	(_Temp^(0+128)+1)
  5336  065A  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5337                           
  5338                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5339  065B  1558               	bsf	_Temp^(0+128),2
  5340                           
  5341                           ;OverTemperature_B1.c: 92: }
  5342                           ;OverTemperature_B1.c: 93: } else {
  5343  065C  0008               	return
  5344  065D                     l7610:	
  5345                           
  5346                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5347  065D  01D9               	clrf	(_Temp^(0+128)+1)
  5348  065E  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5349                           
  5350                           ;OverTemperature_B1.c: 95: }
  5351                           ;OverTemperature_B1.c: 96: } else {
  5352  065F  0008               	return
  5353  0660                     l7612:	
  5354                           
  5355                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5356  0660  3001               	movlw	1
  5357  0661  07D9               	addwf	(_Temp^(0+128)+1),f
  5358  0662  3000               	movlw	0
  5359  0663  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5360                           
  5361                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5362  0664  3000               	movlw	0
  5363  0665  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5364  0666  3005               	movlw	5
  5365  0667  1903               	skipnz
  5366  0668  0259               	subwf	(_Temp^(0+128)+1),w
  5367  0669  1C03               	skipc
  5368  066A  0008               	return
  5369                           
  5370                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5371  066B  01D9               	clrf	(_Temp^(0+128)+1)
  5372  066C  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5373                           
  5374                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5375  066D  3003               	movlw	3
  5376  066E  0020               	movlb	0	; select bank0
  5377  066F  00A0               	movwf	___lwdiv@divisor
  5378  0670  3000               	movlw	0
  5379  0671  00A1               	movwf	___lwdiv@divisor+1
  5380  0672  300A               	movlw	10
  5381  0673  3ED8               	addlw	_Temp& (0+255)
  5382  0674  0086               	movwf	6
  5383  0675  0187               	clrf	7
  5384  0676  3008               	movlw	8
  5385  0677  3ED8               	addlw	_Temp& (0+255)
  5386  0678  0084               	movwf	4
  5387  0679  0185               	clrf	5
  5388  067A  3F00               	moviw [0]fsr0
  5389  067B  0021               	movlb	1	; select bank1
  5390  067C  075E               	addwf	(_Temp^(0+128)+6),w
  5391  067D  0020               	movlb	0	; select bank0
  5392  067E  00E5               	movwf	??_setTemp_Main
  5393  067F  3F01               	moviw [1]fsr0
  5394  0680  0021               	movlb	1	; select bank1
  5395  0681  3D5F               	addwfc	((_Temp+1)^(0+128)+6),w
  5396  0682  0020               	movlb	0	; select bank0
  5397  0683  00E6               	movwf	??_setTemp_Main+1
  5398  0684  3F40               	moviw [0]fsr1
  5399  0685  0765               	addwf	??_setTemp_Main,w
  5400  0686  00A2               	movwf	___lwdiv@dividend
  5401  0687  3F41               	moviw [1]fsr1
  5402  0688  3D66               	addwfc	??_setTemp_Main+1,w
  5403  0689  00A3               	movwf	___lwdiv@dividend+1
  5404  068A  3191  217B  3186   	fcall	___lwdiv
  5405  068D  0020               	movlb	0	; select bank0
  5406  068E  0821               	movf	?___lwdiv+1,w
  5407  068F  01EE               	clrf	setTemp_Main@AD+1
  5408  0690  07EE               	addwf	setTemp_Main@AD+1,f
  5409  0691  0820               	movf	?___lwdiv,w
  5410  0692  01ED               	clrf	setTemp_Main@AD
  5411  0693  07ED               	addwf	setTemp_Main@AD,f
  5412                           
  5413                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5414  0694  319E  2647  3186   	fcall	_setOverTemp_ADV_Restore
  5415                           
  5416                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5417  0697  0020               	movlb	0	; select bank0
  5418  0698  086E               	movf	setTemp_Main@AD+1,w
  5419  0699  3A80               	xorlw	128
  5420  069A  00E5               	movwf	??_setTemp_Main
  5421  069B  3080               	movlw	128
  5422  069C  0265               	subwf	??_setTemp_Main,w
  5423  069D  1D03               	skipz
  5424  069E  2EA1               	goto	u7345
  5425  069F  3001               	movlw	1
  5426  06A0  026D               	subwf	setTemp_Main@AD,w
  5427  06A1                     u7345:	
  5428  06A1  1C03               	skipc
  5429  06A2  0008               	return
  5430                           
  5431                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5432  06A3  0021               	movlb	1	; select bank1
  5433  06A4  1158               	bcf	_Temp^(0+128),2
  5434                           
  5435                           ;OverTemperature_B1.c: 123: SafeValue = 0x205;
  5436  06A5  3005               	movlw	5
  5437  06A6  0020               	movlb	0	; select bank0
  5438  06A7  00E8               	movwf	setTemp_Main@SafeValue
  5439  06A8  3002               	movlw	2
  5440  06A9  00E9               	movwf	setTemp_Main@SafeValue+1
  5441                           
  5442                           ;OverTemperature_B1.c: 124: DangerValue = 0x1ba;
  5443  06AA  30BA               	movlw	186
  5444  06AB  00EA               	movwf	setTemp_Main@DangerValue
  5445  06AC  3001               	movlw	1
  5446  06AD  00EB               	movwf	setTemp_Main@DangerValue+1
  5447                           
  5448                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5449  06AE  0021               	movlb	1	; select bank1
  5450  06AF  1CD8               	btfss	_Temp^(0+128),1
  5451  06B0  2ECF               	goto	l7642
  5452                           
  5453                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5454  06B1  0020               	movlb	0	; select bank0
  5455  06B2  0869               	movf	setTemp_Main@SafeValue+1,w
  5456  06B3  026E               	subwf	setTemp_Main@AD+1,w
  5457  06B4  1D03               	skipz
  5458  06B5  2EB8               	goto	u7365
  5459  06B6  0868               	movf	setTemp_Main@SafeValue,w
  5460  06B7  026D               	subwf	setTemp_Main@AD,w
  5461  06B8                     u7365:	
  5462  06B8  1C03               	skipc
  5463  06B9  2EE4               	goto	l7652
  5464                           
  5465                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5466  06BA  3001               	movlw	1
  5467  06BB  00E5               	movwf	??_setTemp_Main
  5468  06BC  0865               	movf	??_setTemp_Main,w
  5469  06BD  0021               	movlb	1	; select bank1
  5470  06BE  07DB               	addwf	(_Temp^(0+128)+3),f
  5471                           
  5472                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5473  06BF  3003               	movlw	3
  5474  06C0  025B               	subwf	(_Temp^(0+128)+3),w
  5475  06C1  1C03               	skipc
  5476  06C2  2EE6               	goto	l7654
  5477                           
  5478                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5479  06C3  01DB               	clrf	(_Temp^(0+128)+3)
  5480                           
  5481                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5482  06C4  10D8               	bcf	_Temp^(0+128),1
  5483                           
  5484                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5485  06C5  3064               	movlw	100
  5486  06C6  0020               	movlb	0	; select bank0
  5487  06C7  00A9               	movwf	setBuz@time
  5488  06C8  3000               	movlw	0
  5489  06C9  00AA               	movwf	setBuz@time+1
  5490  06CA  3002               	movlw	2
  5491  06CB  3194  2425  3186   	fcall	_setBuz
  5492                           
  5493                           ;OverTemperature_B1.c: 137: }
  5494                           ;OverTemperature_B1.c: 138: } else {
  5495  06CE  2EE6               	goto	l7654
  5496  06CF                     l7642:	
  5497                           ;OverTemperature_B1.c: 140: }
  5498                           ;OverTemperature_B1.c: 141: } else {
  5499                           
  5500                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5501                           
  5502                           
  5503                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5504  06CF  0020               	movlb	0	; select bank0
  5505  06D0  086E               	movf	setTemp_Main@AD+1,w
  5506  06D1  026B               	subwf	setTemp_Main@DangerValue+1,w
  5507  06D2  1D03               	skipz
  5508  06D3  2ED6               	goto	u7385
  5509  06D4  086D               	movf	setTemp_Main@AD,w
  5510  06D5  026A               	subwf	setTemp_Main@DangerValue,w
  5511  06D6                     u7385:	
  5512  06D6  1C03               	skipc
  5513  06D7  2EE4               	goto	l7652
  5514                           
  5515                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5516  06D8  3001               	movlw	1
  5517  06D9  00E5               	movwf	??_setTemp_Main
  5518  06DA  0865               	movf	??_setTemp_Main,w
  5519  06DB  0021               	movlb	1	; select bank1
  5520  06DC  07DB               	addwf	(_Temp^(0+128)+3),f
  5521                           
  5522                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5523  06DD  3003               	movlw	3
  5524  06DE  025B               	subwf	(_Temp^(0+128)+3),w
  5525  06DF  1C03               	skipc
  5526  06E0  2EE6               	goto	l7654
  5527                           
  5528                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5529  06E1  01DB               	clrf	(_Temp^(0+128)+3)
  5530                           
  5531                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5532  06E2  14D8               	bsf	_Temp^(0+128),1
  5533                           
  5534                           ;OverTemperature_B1.c: 147: }
  5535                           ;OverTemperature_B1.c: 148: } else {
  5536  06E3  2EE6               	goto	l7654
  5537  06E4                     l7652:	
  5538                           
  5539                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5540  06E4  0021               	movlb	1	; select bank1
  5541  06E5  01DB               	clrf	(_Temp^(0+128)+3)
  5542  06E6                     l7654:	
  5543                           
  5544                           ;OverTemperature_B1.c: 150: }
  5545                           ;OverTemperature_B1.c: 151: }
  5546                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5547  06E6  0020               	movlb	0	; select bank0
  5548  06E7  086E               	movf	setTemp_Main@AD+1,w
  5549  06E8  00E5               	movwf	??_setTemp_Main
  5550  06E9  0865               	movf	??_setTemp_Main,w
  5551  06EA  00E2               	movwf	setProductData@value
  5552  06EB  3018               	movlw	24
  5553  06EC  319A  22F6  3186   	fcall	_setProductData
  5554                           
  5555                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5556  06EF  0020               	movlb	0	; select bank0
  5557  06F0  086D               	movf	setTemp_Main@AD,w
  5558  06F1  00E5               	movwf	??_setTemp_Main
  5559  06F2  0865               	movf	??_setTemp_Main,w
  5560  06F3  00E2               	movwf	setProductData@value
  5561  06F4  3019               	movlw	25
  5562  06F5  319A  22F6         	fcall	_setProductData
  5563                           
  5564                           ;OverTemperature_B1.c: 169: }
  5565                           ;OverTemperature_B1.c: 170: }
  5566                           ;OverTemperature_B1.c: 171: }
  5567                           ;OverTemperature_B1.c: 174: } else {
  5568  06F7  0008               	return
  5569  06F8                     l1801:	
  5570                           
  5571                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5572  06F8  1C2F               	btfss	_myMain^(0+128),0
  5573  06F9  0008               	return
  5574                           
  5575                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5576  06FA  1458               	bsf	_Temp^(0+128),0
  5577  06FB  0008               	return
  5578  06FC                     __end_of_setTemp_Main:	
  5579                           
  5580                           	psect	text10
  5581  1E47                     __ptext10:	
  5582 ;; *************** function _setOverTemp_ADV_Restore *****************
  5583 ;; Defined at:
  5584 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;		None
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  i               2    1[BANK0 ] int 
  5589 ;; Return value:  Size  Location     Type
  5590 ;;		None               void
  5591 ;; Registers used:
  5592 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;Total ram usage:        3 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    5
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_setTemp_Main
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _setOverTemp_ADV_Restore
  5614  1E47                     _setOverTemp_ADV_Restore:	
  5615                           
  5616                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5620  1E47  0020               	movlb	0	; select bank0
  5621  1E48  01A1               	clrf	setOverTemp_ADV_Restore@i
  5622  1E49  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5623  1E4A                     L2:	
  5624  1E4A  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5625  1E4B  3A80               	xorlw	128
  5626  1E4C  00A0               	movwf	??_setOverTemp_ADV_Restore
  5627  1E4D  3080               	movlw	128
  5628  1E4E  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5629  1E4F  1D03               	skipz
  5630  1E50  2E53               	goto	u6365
  5631  1E51  3005               	movlw	5
  5632  1E52  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5633  1E53                     u6365:	
  5634  1E53  1803               	btfsc	3,0
  5635  1E54  0008               	return
  5636                           
  5637                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5638  1E55  0020               	movlb	0	; select bank0
  5639  1E56  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5640  1E57  3EDC               	addlw	(_Temp+4)& (0+255)
  5641  1E58  0086               	movwf	6
  5642  1E59  0187               	clrf	7
  5643  1E5A  3000               	movlw	0
  5644  1E5B  3FC0               	movwi [0]fsr1
  5645  1E5C  3FC1               	movwi [1]fsr1
  5646  1E5D  3001               	movlw	1
  5647  1E5E  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5648  1E5F  3000               	movlw	0
  5649  1E60  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5650  1E61  2E4A               	goto	L2
  5651  1E62                     __end_of_setOverTemp_ADV_Restore:	
  5652                           
  5653                           	psect	text11
  5654  1A1D                     __ptext11:	
  5655 ;; *************** function _Temp_Initialization *****************
  5656 ;; Defined at:
  5657 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;		None               void
  5664 ;; Registers used:
  5665 ;;		status,2, status,0, pclath, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    6
  5678 ;; This function calls:
  5679 ;;		_setTemp_Initialization
  5680 ;; This function is called by:
  5681 ;;		_main
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _Temp_Initialization
  5687  1A1D                     _Temp_Initialization:	
  5688                           
  5689                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5690                           
  5691                           ;incstack = 0
  5692                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5693  1A1D  3187  27FF         	fcall	_setTemp_Initialization
  5694  1A1F  0008               	return
  5695  1A20                     __end_of_Temp_Initialization:	
  5696                           
  5697                           	psect	text12
  5698  07FF                     __ptext12:	
  5699 ;; *************** function _setTemp_Initialization *****************
  5700 ;; Defined at:
  5701 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;		None               void
  5708 ;; Registers used:
  5709 ;;		None
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;Total ram usage:        0 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    5
  5722 ;; This function calls:
  5723 ;;		Nothing
  5724 ;; This function is called by:
  5725 ;;		_Temp_Initialization
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           
  5730                           ;psect for function _setTemp_Initialization
  5731  07FF                     _setTemp_Initialization:	
  5732                           
  5733                           ;incstack = 0
  5734                           ; Regs used in _setTemp_Initialization: []
  5735  07FF  0008               	return
  5736  0800                     __end_of_setTemp_Initialization:	
  5737                           
  5738                           	psect	text13
  5739  1A76                     __ptext13:	
  5740 ;; *************** function _Switch_Main *****************
  5741 ;; Defined at:
  5742 ;;		line 76 in file "../src/Switch_B1.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;		None
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;		None
  5747 ;; Return value:  Size  Location     Type
  5748 ;;		None               void
  5749 ;; Registers used:
  5750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;Total ram usage:        0 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    9
  5763 ;; This function calls:
  5764 ;;		_TouchPower
  5765 ;;		_setSw_Main
  5766 ;; This function is called by:
  5767 ;;		_main
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _Switch_Main
  5773  1A76                     _Switch_Main:	
  5774                           
  5775                           ;Switch_B1.c: 79: setSw_Main(1);
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5779  1A76  3001               	movlw	1
  5780  1A77  3182  2205  319A   	fcall	_setSw_Main
  5781                           
  5782                           ;Switch_B1.c: 91: TouchPower();
  5783  1A7A  319D  253B         	fcall	_TouchPower
  5784  1A7C  0008               	return
  5785  1A7D                     __end_of_Switch_Main:	
  5786                           
  5787                           	psect	text14
  5788  0205                     __ptext14:	
  5789 ;; *************** function _setSw_Main *****************
  5790 ;; Defined at:
  5791 ;;		line 117 in file "../src/Switch_B1.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  sw              1    wreg     unsigned char 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  sw              1   18[BANK0 ] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;		None               void
  5798 ;; Registers used:
  5799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;Total ram usage:        3 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    8
  5812 ;; This function calls:
  5813 ;;		_SwPointSelect
  5814 ;;		_getMain_All_Error_Status
  5815 ;;		_getSw_KeyStatus
  5816 ;;		_setBuz
  5817 ;;		_setDimmerLights_DimmingOn
  5818 ;;		_setDimmerLights_SwOff
  5819 ;;		_setDimmerLights_SwOn
  5820 ;;		_setRF_Learn
  5821 ;; This function is called by:
  5822 ;;		_Switch_Main
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           
  5827                           ;psect for function _setSw_Main
  5828  0205                     _setSw_Main:	
  5829                           
  5830                           ;incstack = 0
  5831                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5832                           ;setSw_Main@sw stored from wreg
  5833  0205  0020               	movlb	0	; select bank0
  5834  0206  00B2               	movwf	setSw_Main@sw
  5835                           
  5836                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5837  0207  0832               	movf	setSw_Main@sw,w
  5838  0208  319B  2362  3182   	fcall	_SwPointSelect
  5839                           
  5840                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5841  020B  0021               	movlb	1	; select bank1
  5842  020C  0852               	movf	_Sw^(0+128),w
  5843  020D  0086               	movwf	6
  5844  020E  3001               	movlw	1	; select bank2/3
  5845  020F  0087               	movwf	7
  5846  0210  1C01               	btfss	1,0
  5847  0211  2B81               	goto	l2531
  5848                           
  5849                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5850  0212  3000               	movlw	0
  5851  0213  3190  20DE  3182   	fcall	_getMain_All_Error_Status
  5852  0216  3800               	iorlw	0
  5853  0217  1D03               	skipz
  5854  0218  2A37               	goto	l7766
  5855                           
  5856                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5857  0219  0021               	movlb	1	; select bank1
  5858  021A  0A52               	incf	_Sw^(0+128),w
  5859  021B  0086               	movwf	6
  5860  021C  3001               	movlw	1	; select bank2/3
  5861  021D  0087               	movwf	7
  5862  021E  1081               	bcf	1,1
  5863                           
  5864                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5865  021F  0020               	movlb	0	; select bank0
  5866  0220  0832               	movf	setSw_Main@sw,w
  5867  0221  319C  241E  3182   	fcall	_getSw_KeyStatus
  5868  0224  3A01               	xorlw	1
  5869  0225  3000               	movlw	0
  5870  0226  1903               	skipnz
  5871  0227  3001               	movlw	1
  5872  0228  0020               	movlb	0	; select bank0
  5873  0229  00B0               	movwf	??_setSw_Main
  5874  022A  0021               	movlb	1	; select bank1
  5875  022B  0852               	movf	_Sw^(0+128),w
  5876  022C  0086               	movwf	6
  5877  022D  3001               	movlw	1	; select bank2/3
  5878  022E  0087               	movwf	7
  5879  022F  0020               	movlb	0	; select bank0
  5880  0230  0DB0               	rlf	??_setSw_Main,f
  5881  0231  0801               	movf	1,w
  5882  0232  0630               	xorwf	??_setSw_Main,w
  5883  0233  39FD               	andlw	-3
  5884  0234  0630               	xorwf	??_setSw_Main,w
  5885  0235  0081               	movwf	1
  5886                           
  5887                           ;Switch_B1.c: 124: } else {
  5888  0236  2A4D               	goto	l2533
  5889  0237                     l7766:	
  5890                           
  5891                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5892  0237  0021               	movlb	1	; select bank1
  5893  0238  0A52               	incf	_Sw^(0+128),w
  5894  0239  0086               	movwf	6
  5895  023A  3001               	movlw	1	; select bank2/3
  5896  023B  0087               	movwf	7
  5897  023C  1881               	btfsc	1,1
  5898  023D  2A4D               	goto	l2533
  5899                           
  5900                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5901  023E  0A52               	incf	_Sw^(0+128),w
  5902  023F  0086               	movwf	6
  5903  0240  3001               	movlw	1	; select bank2/3
  5904  0241  0087               	movwf	7
  5905  0242  1481               	bsf	1,1
  5906                           
  5907                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5908  0243  0852               	movf	_Sw^(0+128),w
  5909  0244  0086               	movwf	6
  5910  0245  3001               	movlw	1	; select bank2/3
  5911  0246  0087               	movwf	7
  5912  0247  1081               	bcf	1,1
  5913                           
  5914                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5915  0248  0852               	movf	_Sw^(0+128),w
  5916  0249  0086               	movwf	6
  5917  024A  3001               	movlw	1	; select bank2/3
  5918  024B  0087               	movwf	7
  5919  024C  1501               	bsf	1,2
  5920  024D                     l2533:	
  5921                           
  5922                           ;Switch_B1.c: 130: }
  5923                           ;Switch_B1.c: 131: }
  5924                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5925  024D  0021               	movlb	1	; select bank1
  5926  024E  0852               	movf	_Sw^(0+128),w
  5927  024F  0086               	movwf	6
  5928  0250  3001               	movlw	1	; select bank2/3
  5929  0251  0087               	movwf	7
  5930  0252  1C81               	btfss	1,1
  5931  0253  2B29               	goto	l7816
  5932                           
  5933                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5934  0254  0852               	movf	_Sw^(0+128),w
  5935  0255  0086               	movwf	6
  5936  0256  3001               	movlw	1	; select bank2/3
  5937  0257  0087               	movwf	7
  5938  0258  1901               	btfsc	1,2
  5939  0259  2A80               	goto	l7782
  5940                           
  5941                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5942  025A  3001               	movlw	1
  5943  025B  0020               	movlb	0	; select bank0
  5944  025C  00B0               	movwf	??_setSw_Main
  5945  025D  0021               	movlb	1	; select bank1
  5946  025E  0852               	movf	_Sw^(0+128),w
  5947  025F  3E02               	addlw	2
  5948  0260  0086               	movwf	6
  5949  0261  3001               	movlw	1	; select bank2/3
  5950  0262  0087               	movwf	7
  5951  0263  0020               	movlb	0	; select bank0
  5952  0264  0830               	movf	??_setSw_Main,w
  5953  0265  0781               	addwf	1,f
  5954                           
  5955                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5956  0266  0021               	movlb	1	; select bank1
  5957  0267  0852               	movf	_Sw^(0+128),w
  5958  0268  3E02               	addlw	2
  5959  0269  0086               	movwf	6
  5960  026A  3001               	movlw	1	; select bank2/3
  5961  026B  0087               	movwf	7
  5962  026C  3003               	movlw	3
  5963  026D  0201               	subwf	1,w
  5964  026E  1C03               	skipc
  5965  026F  0008               	return
  5966                           
  5967                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5968  0270  0852               	movf	_Sw^(0+128),w
  5969  0271  3E02               	addlw	2
  5970  0272  0086               	movwf	6
  5971  0273  3001               	movlw	1	; select bank2/3
  5972  0274  0087               	movwf	7
  5973  0275  0181               	clrf	1
  5974                           
  5975                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5976  0276  0852               	movf	_Sw^(0+128),w
  5977  0277  0086               	movwf	6
  5978  0278  3001               	movlw	1	; select bank2/3
  5979  0279  0087               	movwf	7
  5980  027A  1501               	bsf	1,2
  5981                           
  5982                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5983  027B  0020               	movlb	0	; select bank0
  5984  027C  0832               	movf	setSw_Main@sw,w
  5985  027D  3193  232F         	fcall	_setDimmerLights_SwOn
  5986                           
  5987                           ;Switch_B1.c: 147: }
  5988                           ;Switch_B1.c: 148: } else {
  5989  027F  0008               	return
  5990  0280                     l7782:	
  5991                           
  5992                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5993  0280  0021               	movlb	1	; select bank1
  5994  0281  0852               	movf	_Sw^(0+128),w
  5995  0282  0086               	movwf	6
  5996  0283  3001               	movlw	1	; select bank2/3
  5997  0284  0087               	movwf	7
  5998  0285  1981               	btfsc	1,3
  5999  0286  2AB5               	goto	l7792
  6000                           
  6001                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6002  0287  0852               	movf	_Sw^(0+128),w
  6003  0288  3E03               	addlw	3
  6004  0289  0086               	movwf	6
  6005  028A  3001               	movlw	1	; select bank2/3
  6006  028B  0087               	movwf	7
  6007  028C  3001               	movlw	1
  6008  028D  0781               	addwf	1,f
  6009  028E  3141               	addfsr 1,1
  6010  028F  1803               	skipnc
  6011  0290  0A81               	incf	1,f
  6012                           
  6013                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6014  0291  0852               	movf	_Sw^(0+128),w
  6015  0292  3E03               	addlw	3
  6016  0293  0086               	movwf	6
  6017  0294  3001               	movlw	1	; select bank2/3
  6018  0295  0087               	movwf	7
  6019  0296  3F40               	moviw [0]fsr1
  6020  0297  0020               	movlb	0	; select bank0
  6021  0298  00B0               	movwf	??_setSw_Main
  6022  0299  3F41               	moviw [1]fsr1
  6023  029A  00B1               	movwf	??_setSw_Main+1
  6024  029B  3000               	movlw	0
  6025  029C  0231               	subwf	??_setSw_Main+1,w
  6026  029D  304B               	movlw	75
  6027  029E  1903               	skipnz
  6028  029F  0230               	subwf	??_setSw_Main,w
  6029  02A0  1C03               	skipc
  6030  02A1  0008               	return
  6031                           
  6032                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6033  02A2  0021               	movlb	1	; select bank1
  6034  02A3  0852               	movf	_Sw^(0+128),w
  6035  02A4  3E03               	addlw	3
  6036  02A5  0086               	movwf	6
  6037  02A6  3001               	movlw	1	; select bank2/3
  6038  02A7  0087               	movwf	7
  6039  02A8  3000               	movlw	0
  6040  02A9  3FC0               	movwi [0]fsr1
  6041  02AA  3FC1               	movwi [1]fsr1
  6042                           
  6043                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6044  02AB  0852               	movf	_Sw^(0+128),w
  6045  02AC  0086               	movwf	6
  6046  02AD  3001               	movlw	1	; select bank2/3
  6047  02AE  0087               	movwf	7
  6048  02AF  1581               	bsf	1,3
  6049                           
  6050                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6051  02B0  0020               	movlb	0	; select bank0
  6052  02B1  0832               	movf	setSw_Main@sw,w
  6053  02B2  3190  202E         	fcall	_setDimmerLights_DimmingOn
  6054                           
  6055                           ;Switch_B1.c: 162: }
  6056                           ;Switch_B1.c: 163: } else {
  6057  02B4  0008               	return
  6058  02B5                     l7792:	
  6059                           
  6060                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6061  02B5  0021               	movlb	1	; select bank1
  6062  02B6  0852               	movf	_Sw^(0+128),w
  6063  02B7  0086               	movwf	6
  6064  02B8  3001               	movlw	1	; select bank2/3
  6065  02B9  0087               	movwf	7
  6066  02BA  1A01               	btfsc	1,4
  6067  02BB  2AF5               	goto	l7806
  6068                           
  6069                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6070  02BC  0852               	movf	_Sw^(0+128),w
  6071  02BD  3E05               	addlw	5
  6072  02BE  0086               	movwf	6
  6073  02BF  3001               	movlw	1	; select bank2/3
  6074  02C0  0087               	movwf	7
  6075  02C1  3001               	movlw	1
  6076  02C2  0781               	addwf	1,f
  6077  02C3  3141               	addfsr 1,1
  6078  02C4  1803               	skipnc
  6079  02C5  0A81               	incf	1,f
  6080                           
  6081                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6082  02C6  0852               	movf	_Sw^(0+128),w
  6083  02C7  3E05               	addlw	5
  6084  02C8  0086               	movwf	6
  6085  02C9  3001               	movlw	1	; select bank2/3
  6086  02CA  0087               	movwf	7
  6087  02CB  3F40               	moviw [0]fsr1
  6088  02CC  0020               	movlb	0	; select bank0
  6089  02CD  00B0               	movwf	??_setSw_Main
  6090  02CE  3F41               	moviw [1]fsr1
  6091  02CF  00B1               	movwf	??_setSw_Main+1
  6092  02D0  3000               	movlw	0
  6093  02D1  0231               	subwf	??_setSw_Main+1,w
  6094  02D2  304B               	movlw	75
  6095  02D3  1903               	skipnz
  6096  02D4  0230               	subwf	??_setSw_Main,w
  6097  02D5  1C03               	skipc
  6098  02D6  0008               	return
  6099                           
  6100                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6101  02D7  0021               	movlb	1	; select bank1
  6102  02D8  0852               	movf	_Sw^(0+128),w
  6103  02D9  3E05               	addlw	5
  6104  02DA  0086               	movwf	6
  6105  02DB  3001               	movlw	1	; select bank2/3
  6106  02DC  0087               	movwf	7
  6107  02DD  3000               	movlw	0
  6108  02DE  3FC0               	movwi [0]fsr1
  6109  02DF  3FC1               	movwi [1]fsr1
  6110                           
  6111                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6112  02E0  0852               	movf	_Sw^(0+128),w
  6113  02E1  0086               	movwf	6
  6114  02E2  3001               	movlw	1	; select bank2/3
  6115  02E3  0087               	movwf	7
  6116  02E4  1601               	bsf	1,4
  6117                           
  6118                           ;Switch_B1.c: 172: setRF_Learn(1);
  6119  02E5  3001               	movlw	1
  6120  02E6  319C  24E8  3182   	fcall	_setRF_Learn
  6121                           
  6122                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6123  02E9  0021               	movlb	1	; select bank1
  6124  02EA  1EAF               	btfss	_myMain^(0+128),5
  6125  02EB  0008               	return
  6126                           
  6127                           ;Switch_B1.c: 174: setBuz(2, 100);
  6128  02EC  3064               	movlw	100
  6129  02ED  0020               	movlb	0	; select bank0
  6130  02EE  00A9               	movwf	setBuz@time
  6131  02EF  3000               	movlw	0
  6132  02F0  00AA               	movwf	setBuz@time+1
  6133  02F1  3002               	movlw	2
  6134  02F2  3194  2425         	fcall	_setBuz
  6135                           
  6136                           ;Switch_B1.c: 175: }
  6137                           ;Switch_B1.c: 179: }
  6138                           ;Switch_B1.c: 180: } else {
  6139  02F4  0008               	return
  6140  02F5                     l7806:	
  6141                           
  6142                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6143  02F5  0021               	movlb	1	; select bank1
  6144  02F6  0852               	movf	_Sw^(0+128),w
  6145  02F7  0086               	movwf	6
  6146  02F8  3001               	movlw	1	; select bank2/3
  6147  02F9  0087               	movwf	7
  6148  02FA  1A81               	btfsc	1,5
  6149  02FB  0008               	return
  6150                           
  6151                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6152  02FC  0852               	movf	_Sw^(0+128),w
  6153  02FD  3E07               	addlw	7
  6154  02FE  0086               	movwf	6
  6155  02FF  3001               	movlw	1	; select bank2/3
  6156  0300  0087               	movwf	7
  6157  0301  3001               	movlw	1
  6158  0302  0781               	addwf	1,f
  6159  0303  3141               	addfsr 1,1
  6160  0304  1803               	skipnc
  6161  0305  0A81               	incf	1,f
  6162                           
  6163                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6164  0306  0852               	movf	_Sw^(0+128),w
  6165  0307  3E07               	addlw	7
  6166  0308  0086               	movwf	6
  6167  0309  3001               	movlw	1	; select bank2/3
  6168  030A  0087               	movwf	7
  6169  030B  3F40               	moviw [0]fsr1
  6170  030C  0020               	movlb	0	; select bank0
  6171  030D  00B0               	movwf	??_setSw_Main
  6172  030E  3F41               	moviw [1]fsr1
  6173  030F  00B1               	movwf	??_setSw_Main+1
  6174  0310  3000               	movlw	0
  6175  0311  0231               	subwf	??_setSw_Main+1,w
  6176  0312  3096               	movlw	150
  6177  0313  1903               	skipnz
  6178  0314  0230               	subwf	??_setSw_Main,w
  6179  0315  1C03               	skipc
  6180  0316  0008               	return
  6181                           
  6182                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6183  0317  0021               	movlb	1	; select bank1
  6184  0318  0852               	movf	_Sw^(0+128),w
  6185  0319  3E07               	addlw	7
  6186  031A  0086               	movwf	6
  6187  031B  3001               	movlw	1	; select bank2/3
  6188  031C  0087               	movwf	7
  6189  031D  3000               	movlw	0
  6190  031E  3FC0               	movwi [0]fsr1
  6191  031F  3FC1               	movwi [1]fsr1
  6192                           
  6193                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6194  0320  0852               	movf	_Sw^(0+128),w
  6195  0321  0086               	movwf	6
  6196  0322  3001               	movlw	1	; select bank2/3
  6197  0323  0087               	movwf	7
  6198  0324  1681               	bsf	1,5
  6199                           
  6200                           ;Switch_B1.c: 188: setRF_Learn(0);
  6201  0325  3000               	movlw	0
  6202  0326  319C  24E8         	fcall	_setRF_Learn
  6203                           
  6204                           ;Switch_B1.c: 191: }
  6205                           ;Switch_B1.c: 192: }
  6206                           ;Switch_B1.c: 193: }
  6207                           ;Switch_B1.c: 195: }
  6208                           ;Switch_B1.c: 196: }
  6209                           ;Switch_B1.c: 197: } else {
  6210  0328  0008               	return
  6211  0329                     l7816:	
  6212                           
  6213                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6214  0329  0021               	movlb	1	; select bank1
  6215  032A  0852               	movf	_Sw^(0+128),w
  6216  032B  0086               	movwf	6
  6217  032C  3001               	movlw	1	; select bank2/3
  6218  032D  0087               	movwf	7
  6219  032E  1D01               	btfss	1,2
  6220  032F  0008               	return
  6221                           
  6222                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6223  0330  3001               	movlw	1
  6224  0331  0020               	movlb	0	; select bank0
  6225  0332  00B0               	movwf	??_setSw_Main
  6226  0333  0021               	movlb	1	; select bank1
  6227  0334  0852               	movf	_Sw^(0+128),w
  6228  0335  3E02               	addlw	2
  6229  0336  0086               	movwf	6
  6230  0337  3001               	movlw	1	; select bank2/3
  6231  0338  0087               	movwf	7
  6232  0339  0020               	movlb	0	; select bank0
  6233  033A  0830               	movf	??_setSw_Main,w
  6234  033B  0781               	addwf	1,f
  6235                           
  6236                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (60 / 20)) {
  6237  033C  0021               	movlb	1	; select bank1
  6238  033D  0852               	movf	_Sw^(0+128),w
  6239  033E  3E02               	addlw	2
  6240  033F  0086               	movwf	6
  6241  0340  3001               	movlw	1	; select bank2/3
  6242  0341  0087               	movwf	7
  6243  0342  3003               	movlw	3
  6244  0343  0201               	subwf	1,w
  6245  0344  1C03               	skipc
  6246  0345  0008               	return
  6247                           
  6248                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6249  0346  0852               	movf	_Sw^(0+128),w
  6250  0347  3E02               	addlw	2
  6251  0348  0086               	movwf	6
  6252  0349  3001               	movlw	1	; select bank2/3
  6253  034A  0087               	movwf	7
  6254  034B  0181               	clrf	1
  6255                           
  6256                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6257  034C  0852               	movf	_Sw^(0+128),w
  6258  034D  0086               	movwf	6
  6259  034E  3001               	movlw	1	; select bank2/3
  6260  034F  0087               	movwf	7
  6261  0350  1101               	bcf	1,2
  6262                           
  6263                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6264  0351  0852               	movf	_Sw^(0+128),w
  6265  0352  3E03               	addlw	3
  6266  0353  0086               	movwf	6
  6267  0354  3001               	movlw	1	; select bank2/3
  6268  0355  0087               	movwf	7
  6269  0356  3000               	movlw	0
  6270  0357  3FC0               	movwi [0]fsr1
  6271  0358  3FC1               	movwi [1]fsr1
  6272                           
  6273                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6274  0359  0852               	movf	_Sw^(0+128),w
  6275  035A  0086               	movwf	6
  6276  035B  3001               	movlw	1	; select bank2/3
  6277  035C  0087               	movwf	7
  6278  035D  1181               	bcf	1,3
  6279                           
  6280                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6281  035E  0852               	movf	_Sw^(0+128),w
  6282  035F  0086               	movwf	6
  6283  0360  3001               	movlw	1	; select bank2/3
  6284  0361  0087               	movwf	7
  6285  0362  1201               	bcf	1,4
  6286                           
  6287                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6288  0363  0852               	movf	_Sw^(0+128),w
  6289  0364  0086               	movwf	6
  6290  0365  3001               	movlw	1	; select bank2/3
  6291  0366  0087               	movwf	7
  6292  0367  1281               	bcf	1,5
  6293                           
  6294                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6295  0368  0852               	movf	_Sw^(0+128),w
  6296  0369  3E05               	addlw	5
  6297  036A  0086               	movwf	6
  6298  036B  3001               	movlw	1	; select bank2/3
  6299  036C  0087               	movwf	7
  6300  036D  3000               	movlw	0
  6301  036E  3FC0               	movwi [0]fsr1
  6302  036F  3FC1               	movwi [1]fsr1
  6303                           
  6304                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6305  0370  0852               	movf	_Sw^(0+128),w
  6306  0371  3E07               	addlw	7
  6307  0372  0086               	movwf	6
  6308  0373  3001               	movlw	1	; select bank2/3
  6309  0374  0087               	movwf	7
  6310  0375  3000               	movlw	0
  6311  0376  3FC0               	movwi [0]fsr1
  6312  0377  3FC1               	movwi [1]fsr1
  6313                           
  6314                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6315  0378  0020               	movlb	0	; select bank0
  6316  0379  0832               	movf	setSw_Main@sw,w
  6317  037A  3191  21B2  3182   	fcall	_setDimmerLights_SwOff
  6318                           
  6319                           ;Switch_B1.c: 220: setRF_Learn(0);
  6320  037D  3000               	movlw	0
  6321  037E  319C  24E8         	fcall	_setRF_Learn
  6322                           
  6323                           ;Switch_B1.c: 222: }
  6324                           ;Switch_B1.c: 223: }
  6325                           ;Switch_B1.c: 224: }
  6326                           ;Switch_B1.c: 225: } else {
  6327  0380  0008               	return
  6328  0381                     l2531:	
  6329                           
  6330                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6331  0381  1C2F               	btfss	_myMain^(0+128),0
  6332  0382  0008               	return
  6333                           
  6334                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6335  0383  0852               	movf	_Sw^(0+128),w
  6336  0384  0086               	movwf	6
  6337  0385  3001               	movlw	1	; select bank2/3
  6338  0386  0087               	movwf	7
  6339  0387  1401               	bsf	1,0
  6340  0388  0008               	return
  6341  0389                     __end_of_setSw_Main:	
  6342                           
  6343                           	psect	text15
  6344  1CE8                     __ptext15:	
  6345 ;; *************** function _setRF_Learn *****************
  6346 ;; Defined at:
  6347 ;;		line 33 in file "../src/RF_Control_B1.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  command         1    wreg     unsigned char 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  command         1    1[BANK0 ] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;		None               void
  6354 ;; Registers used:
  6355 ;;		wreg, status,2, status,0
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;Total ram usage:        2 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    5
  6368 ;; This function calls:
  6369 ;;		Nothing
  6370 ;; This function is called by:
  6371 ;;		_setSw_Main
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           
  6376                           ;psect for function _setRF_Learn
  6377  1CE8                     _setRF_Learn:	
  6378                           
  6379                           ;incstack = 0
  6380                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6381                           ;setRF_Learn@command stored from wreg
  6382  1CE8  0020               	movlb	0	; select bank0
  6383  1CE9  00A1               	movwf	setRF_Learn@command
  6384                           
  6385                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6386  1CEA  0821               	movf	setRF_Learn@command,w
  6387  1CEB  3A01               	xorlw	1
  6388  1CEC  3000               	movlw	0
  6389  1CED  1903               	skipnz
  6390  1CEE  3001               	movlw	1
  6391  1CEF  00A0               	movwf	??_setRF_Learn
  6392  1CF0  0EA0               	swapf	??_setRF_Learn,f
  6393  1CF1  0DA0               	rlf	??_setRF_Learn,f
  6394  1CF2  0DA0               	rlf	??_setRF_Learn,f
  6395  1CF3  0021               	movlb	1	; select bank1
  6396  1CF4  0820               	movf	_RF1^(0+128),w
  6397  1CF5  0020               	movlb	0	; select bank0
  6398  1CF6  0620               	xorwf	??_setRF_Learn,w
  6399  1CF7  39BF               	andlw	-65
  6400  1CF8  0620               	xorwf	??_setRF_Learn,w
  6401  1CF9  0021               	movlb	1	; select bank1
  6402  1CFA  00A0               	movwf	_RF1^(0+128)
  6403  1CFB  0008               	return
  6404  1CFC                     __end_of_setRF_Learn:	
  6405                           
  6406                           	psect	text16
  6407  102E                     __ptext16:	
  6408 ;; *************** function _setDimmerLights_DimmingOn *****************
  6409 ;; Defined at:
  6410 ;;		line 768 in file "../src/Dimmer_B1.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  sw              1    wreg     unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  sw              1    2[BANK0 ] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:        1 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    6
  6431 ;; This function calls:
  6432 ;;		_DimmerLights_SelectPointer
  6433 ;; This function is called by:
  6434 ;;		_setSw_Main
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _setDimmerLights_DimmingOn
  6440  102E                     _setDimmerLights_DimmingOn:	
  6441                           
  6442                           ;incstack = 0
  6443                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6444                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6445  102E  0020               	movlb	0	; select bank0
  6446  102F  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6447                           
  6448                           ;Dimmer_B1.c: 774: DimmerLights_SelectPointer(sw);
  6449  1030  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6450  1031  319A  22EA  3190   	fcall	_DimmerLights_SelectPointer
  6451                           
  6452                           ;Dimmer_B1.c: 775: if (DimmerLights->Trigger == 0) {
  6453  1034  0021               	movlb	1	; select bank1
  6454  1035  084C               	movf	_DimmerLights^(0+128),w
  6455  1036  0086               	movwf	6
  6456  1037  3001               	movlw	1	; select bank2/3
  6457  1038  0087               	movwf	7
  6458  1039  1881               	btfsc	1,1
  6459  103A  0008               	return
  6460                           
  6461                           ;Dimmer_B1.c: 776: if (DimmerLights->SwFlag == 1) {
  6462  103B  084C               	movf	_DimmerLights^(0+128),w
  6463  103C  0086               	movwf	6
  6464  103D  3001               	movlw	1	; select bank2/3
  6465  103E  0087               	movwf	7
  6466  103F  1C01               	btfss	1,0
  6467  1040  0008               	return
  6468                           
  6469                           ;Dimmer_B1.c: 777: DimmerLights->Status = 1;
  6470  1041  0A4C               	incf	_DimmerLights^(0+128),w
  6471  1042  0086               	movwf	6
  6472  1043  3001               	movlw	1	; select bank2/3
  6473  1044  0087               	movwf	7
  6474  1045  1401               	bsf	1,0
  6475                           
  6476                           ;Dimmer_B1.c: 779: DimmerLights->DimmingSwFlag = 1;
  6477  1046  084C               	movf	_DimmerLights^(0+128),w
  6478  1047  0086               	movwf	6
  6479  1048  3001               	movlw	1	; select bank2/3
  6480  1049  0087               	movwf	7
  6481  104A  1581               	bsf	1,3
  6482                           
  6483                           ;Dimmer_B1.c: 780: DimmerLights->DimmingTrigger = 1;
  6484  104B  084C               	movf	_DimmerLights^(0+128),w
  6485  104C  0086               	movwf	6
  6486  104D  3001               	movlw	1	; select bank2/3
  6487  104E  0087               	movwf	7
  6488  104F  1601               	bsf	1,4
  6489                           
  6490                           ;Dimmer_B1.c: 781: DimmerLights->DimmingSwitch = 1;
  6491  1050  084C               	movf	_DimmerLights^(0+128),w
  6492  1051  0086               	movwf	6
  6493  1052  3001               	movlw	1	; select bank2/3
  6494  1053  0087               	movwf	7
  6495  1054  1681               	bsf	1,5
  6496  1055  0008               	return
  6497  1056                     __end_of_setDimmerLights_DimmingOn:	
  6498                           
  6499                           	psect	text17
  6500  1C1E                     __ptext17:	
  6501 ;; *************** function _getSw_KeyStatus *****************
  6502 ;; Defined at:
  6503 ;;		line 238 in file "../src/Switch_B1.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  sw              1    wreg     unsigned char 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  sw              1    0[COMMON] unsigned char 
  6508 ;;  status          1    1[BANK0 ] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      unsigned char 
  6511 ;; Registers used:
  6512 ;;		wreg, status,2
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;Total ram usage:        3 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    5
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_setSw_Main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _getSw_KeyStatus
  6534  1C1E                     _getSw_KeyStatus:	
  6535                           
  6536                           ;Switch_B1.c: 239: char status = 0;
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6540  1C1E  0020               	movlb	0	; select bank0
  6541  1C1F  01A1               	clrf	getSw_KeyStatus@status
  6542                           
  6543                           ;Switch_B1.c: 272: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6544  1C20  01A2               	clrf	_getSw_KeyStatus$6465
  6545  1C21  0AA2               	incf	_getSw_KeyStatus$6465,f
  6546  1C22  1F0C               	btfss	12,6	;volatile
  6547  1C23  1A0C               	btfsc	12,4	;volatile
  6548  1C24  2C29               	goto	l7192
  6549  1C25  1C0C               	btfss	12,0	;volatile
  6550  1C26  1B8C               	btfsc	12,7	;volatile
  6551  1C27  2C29               	goto	l7192
  6552  1C28  01A2               	clrf	_getSw_KeyStatus$6465
  6553  1C29                     l7192:	
  6554  1C29  0822               	movf	_getSw_KeyStatus$6465,w
  6555  1C2A  00A0               	movwf	??_getSw_KeyStatus
  6556  1C2B  0820               	movf	??_getSw_KeyStatus,w
  6557  1C2C  00A1               	movwf	getSw_KeyStatus@status
  6558                           
  6559                           ;Switch_B1.c: 276: return status;
  6560  1C2D  0821               	movf	getSw_KeyStatus@status,w
  6561  1C2E  0008               	return
  6562  1C2F                     __end_of_getSw_KeyStatus:	
  6563                           
  6564                           	psect	text18
  6565  1B62                     __ptext18:	
  6566 ;; *************** function _SwPointSelect *****************
  6567 ;; Defined at:
  6568 ;;		line 25 in file "../src/Switch_B1.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  sw              1    wreg     unsigned char 
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  sw              1    1[BANK0 ] unsigned char 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;		None               void
  6575 ;; Registers used:
  6576 ;;		wreg
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;Total ram usage:        2 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    5
  6589 ;; This function calls:
  6590 ;;		Nothing
  6591 ;; This function is called by:
  6592 ;;		_setSw_Main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           
  6597                           ;psect for function _SwPointSelect
  6598  1B62                     _SwPointSelect:	
  6599                           
  6600                           ;incstack = 0
  6601                           ; Regs used in _SwPointSelect: [wreg]
  6602                           ;SwPointSelect@sw stored from wreg
  6603  1B62  0020               	movlb	0	; select bank0
  6604  1B63  00A1               	movwf	SwPointSelect@sw
  6605                           
  6606                           ;Switch_B1.c: 28: if (sw == 1) {
  6607  1B64  0821               	movf	SwPointSelect@sw,w
  6608  1B65  3A01               	xorlw	1
  6609  1B66  1D03               	skipz
  6610  1B67  0008               	return
  6611                           
  6612                           ;Switch_B1.c: 29: Sw = &Sw1;
  6613  1B68  30BE               	movlw	_Sw1& (0+255)
  6614  1B69  00A0               	movwf	??_SwPointSelect
  6615  1B6A  0820               	movf	??_SwPointSelect,w
  6616  1B6B  0021               	movlb	1	; select bank1
  6617  1B6C  00D2               	movwf	_Sw^(0+128)
  6618  1B6D  0008               	return
  6619  1B6E                     __end_of_SwPointSelect:	
  6620                           
  6621                           	psect	text19
  6622  1D3B                     __ptext19:	
  6623 ;; *************** function _TouchPower *****************
  6624 ;; Defined at:
  6625 ;;		line 10 in file "../src/Switch_B1.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;		None
  6630 ;; Return value:  Size  Location     Type
  6631 ;;		None               void
  6632 ;; Registers used:
  6633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        0 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    6
  6646 ;; This function calls:
  6647 ;;		_Timeout_Counter
  6648 ;;		_set_TimeoutCleared
  6649 ;; This function is called by:
  6650 ;;		_Switch_Main
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function _TouchPower
  6656  1D3B                     _TouchPower:	
  6657                           
  6658                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6662  1D3B  0021               	movlb	1	; select bank1
  6663  1D3C  1C2F               	btfss	_myMain^(0+128),0
  6664  1D3D  0008               	return
  6665                           
  6666                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6667  1D3E  0020               	movlb	0	; select bank0
  6668  1D3F  180D               	btfsc	13,0	;volatile
  6669  1D40  0008               	return
  6670  1D41  2D47               	goto	l7748
  6671  1D42                     l2511:	
  6672                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6673                           
  6674                           
  6675                           ;Switch_B1.c: 14: RB0 = 1;
  6676  1D42  0020               	movlb	0	; select bank0
  6677  1D43  140D               	bsf	13,0	;volatile
  6678                           
  6679                           ;Switch_B1.c: 15: Timeout_Counter();
  6680  1D44  319D  2526  319D   	fcall	_Timeout_Counter
  6681  1D47                     l7748:	
  6682  1D47  0020               	movlb	0	; select bank0
  6683  1D48  180D               	btfsc	13,0	;volatile
  6684  1D49  2D4D               	goto	l7752
  6685  1D4A  0021               	movlb	1	; select bank1
  6686  1D4B  1D39               	btfss	(_myMain^(0+128)+10),2
  6687  1D4C  2D42               	goto	l2511
  6688  1D4D                     l7752:	
  6689                           
  6690                           ;Switch_B1.c: 16: }
  6691                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6692  1D4D  319A  224B         	fcall	_set_TimeoutCleared
  6693  1D4F  0008               	return
  6694  1D50                     __end_of_TouchPower:	
  6695                           
  6696                           	psect	text20
  6697  1A4B                     __ptext20:	
  6698 ;; *************** function _set_TimeoutCleared *****************
  6699 ;; Defined at:
  6700 ;;		line 281 in file "../src/Main_B1.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;		None               void
  6707 ;; Registers used:
  6708 ;;		status,2
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;Total ram usage:        0 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    5
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_getAD
  6725 ;;		_TouchPower
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function _set_TimeoutCleared
  6731  1A4B                     _set_TimeoutCleared:	
  6732                           
  6733                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _set_TimeoutCleared: [status,2]
  6737  1A4B  0021               	movlb	1	; select bank1
  6738  1A4C  1139               	bcf	(_myMain^(0+128)+10),2
  6739                           
  6740                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6741  1A4D  01BA               	clrf	(_myMain^(0+128)+11)
  6742  1A4E  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6743  1A4F  0008               	return
  6744  1A50                     __end_of_set_TimeoutCleared:	
  6745                           
  6746                           	psect	text21
  6747  1D26                     __ptext21:	
  6748 ;; *************** function _Timeout_Counter *****************
  6749 ;; Defined at:
  6750 ;;		line 272 in file "../src/Main_B1.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;		None
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;		None
  6755 ;; Return value:  Size  Location     Type
  6756 ;;		None               void
  6757 ;; Registers used:
  6758 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;Total ram usage:        0 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; Hardware stack levels required when called:    5
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_getAD
  6775 ;;		_TouchPower
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _Timeout_Counter
  6781  1D26                     _Timeout_Counter:	
  6782                           
  6783                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6787  1D26  3001               	movlw	1
  6788  1D27  0021               	movlb	1	; select bank1
  6789  1D28  07BA               	addwf	(_myMain^(0+128)+11),f
  6790  1D29  3000               	movlw	0
  6791  1D2A  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6792                           
  6793                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6794  1D2B  300B               	movlw	11
  6795  1D2C  3EAF               	addlw	_myMain& (0+255)
  6796  1D2D  0086               	movwf	6
  6797  1D2E  0187               	clrf	7
  6798  1D2F  3F40               	moviw [0]fsr1
  6799  1D30  3AA8               	xorlw	168
  6800  1D31  1D03               	skipz
  6801  1D32  2D35               	goto	u6335
  6802  1D33  3F41               	moviw [1]fsr1
  6803  1D34  3A61               	xorlw	97
  6804  1D35                     u6335:	
  6805  1D35  1D03               	skipz
  6806  1D36  0008               	return
  6807                           
  6808                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6809  1D37  01BA               	clrf	(_myMain^(0+128)+11)
  6810  1D38  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6811                           
  6812                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6813  1D39  1539               	bsf	(_myMain^(0+128)+10),2
  6814  1D3A  0008               	return
  6815  1D3B                     __end_of_Timeout_Counter:	
  6816                           
  6817                           	psect	text22
  6818  1A47                     __ptext22:	
  6819 ;; *************** function _Switch_Initialization *****************
  6820 ;; Defined at:
  6821 ;;		line 46 in file "../src/Switch_B1.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;		None
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;		None
  6826 ;; Return value:  Size  Location     Type
  6827 ;;		None               void
  6828 ;; Registers used:
  6829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;Total ram usage:        0 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    8
  6842 ;; This function calls:
  6843 ;;		_setSw_Initialization
  6844 ;; This function is called by:
  6845 ;;		_main
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function _Switch_Initialization
  6851  1A47                     _Switch_Initialization:	
  6852                           
  6853                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6857  1A47  3001               	movlw	1
  6858  1A48  319B  23A8         	fcall	_setSw_Initialization
  6859  1A4A  0008               	return
  6860  1A4B                     __end_of_Switch_Initialization:	
  6861                           
  6862                           	psect	text23
  6863  1BA8                     __ptext23:	
  6864 ;; *************** function _setSw_Initialization *****************
  6865 ;; Defined at:
  6866 ;;		line 66 in file "../src/Switch_B1.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  sw              1    wreg     unsigned char 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  sw              1    4[BANK0 ] unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;Total ram usage:        1 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    7
  6887 ;; This function calls:
  6888 ;;		_setLED
  6889 ;; This function is called by:
  6890 ;;		_Switch_Initialization
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _setSw_Initialization
  6896  1BA8                     _setSw_Initialization:	
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6900                           ;setSw_Initialization@sw stored from wreg
  6901  1BA8  0020               	movlb	0	; select bank0
  6902  1BA9  00A4               	movwf	setSw_Initialization@sw
  6903                           
  6904                           ;Switch_B1.c: 68: setLED(sw, 1);
  6905  1BAA  01A2               	clrf	setLED@command
  6906  1BAB  0AA2               	incf	setLED@command,f
  6907  1BAC  0824               	movf	setSw_Initialization@sw,w
  6908  1BAD  3187  27C6  319B   	fcall	_setLED
  6909                           
  6910                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6911  1BB0  0020               	movlb	0	; select bank0
  6912  1BB1  01A2               	clrf	setLED@command
  6913  1BB2  0AA2               	incf	setLED@command,f
  6914  1BB3  0824               	movf	setSw_Initialization@sw,w
  6915  1BB4  3E01               	addlw	1
  6916  1BB5  3187  27C6         	fcall	_setLED
  6917  1BB7  0008               	return
  6918  1BB8                     __end_of_setSw_Initialization:	
  6919                           
  6920                           	psect	text24
  6921  1A1A                     __ptext24:	
  6922 ;; *************** function _RF_Main *****************
  6923 ;; Defined at:
  6924 ;;		line 26 in file "../src/RF_Control_B1.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;		None               void
  6931 ;; Registers used:
  6932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;Total ram usage:        0 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:   12
  6945 ;; This function calls:
  6946 ;;		_setRF_Main
  6947 ;; This function is called by:
  6948 ;;		_main
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           
  6953                           ;psect for function _RF_Main
  6954  1A1A                     _RF_Main:	
  6955                           
  6956                           ;RF_Control_B1.c: 28: setRF_Main();
  6957                           
  6958                           ;incstack = 0
  6959                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6960  1A1A  3184  247F         	fcall	_setRF_Main
  6961  1A1C  0008               	return
  6962  1A1D                     __end_of_RF_Main:	
  6963                           
  6964                           	psect	text25
  6965  047F                     __ptext25:	
  6966 ;; *************** function _setRF_Main *****************
  6967 ;; Defined at:
  6968 ;;		line 53 in file "../src/RF_Control_B1.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  error           1    3[BANK1 ] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;		None               void
  6975 ;; Registers used:
  6976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;Total ram usage:        2 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:   11
  6989 ;; This function calls:
  6990 ;;		_CC2500_PowerOnInitial
  6991 ;;		_CC2500_RxData
  6992 ;;		_CC2500_TxData
  6993 ;;		_CC2500_WriteCommand
  6994 ;;		_RF_RxDisable
  6995 ;;		___lwdiv
  6996 ;;		_getBuz_GO
  6997 ;;		_getRF_KeyStatus
  6998 ;;		_getRxData
  6999 ;; This function is called by:
  7000 ;;		_RF_Main
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function _setRF_Main
  7006  047F                     _setRF_Main:	
  7007                           
  7008                           ;RF_Control_B1.c: 54: char error = 0;
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7012  047F  0021               	movlb	1	; select bank1
  7013  0480  01E9               	clrf	setRF_Main@error^(0+128)
  7014                           
  7015                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7016  0481  1C20               	btfss	_RF1^(0+128),0
  7017  0482  2D50               	goto	l2142
  7018                           
  7019                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7020  0483  319B  23FC  3184   	fcall	_getBuz_GO
  7021  0486  0020               	movlb	0	; select bank0
  7022  0487  0821               	movf	?_getBuz_GO+1,w
  7023  0488  0420               	iorwf	?_getBuz_GO,w
  7024  0489  1D03               	skipz
  7025  048A  2D31               	goto	l8846
  7026                           
  7027                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7028  048B  319C  240D  3184   	fcall	_getRF_KeyStatus
  7029  048E  3A01               	xorlw	1
  7030  048F  3000               	movlw	0
  7031  0490  1903               	skipnz
  7032  0491  3001               	movlw	1
  7033  0492  0021               	movlb	1	; select bank1
  7034  0493  00E8               	movwf	??_setRF_Main^(0+128)
  7035  0494  0CE8               	rrf	??_setRF_Main^(0+128),f
  7036  0495  0CE8               	rrf	??_setRF_Main^(0+128),f
  7037  0496  0820               	movf	_RF1^(0+128),w
  7038  0497  0668               	xorwf	??_setRF_Main^(0+128),w
  7039  0498  397F               	andlw	-129
  7040  0499  0668               	xorwf	??_setRF_Main^(0+128),w
  7041  049A  00A0               	movwf	_RF1^(0+128)
  7042                           
  7043                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7044  049B  1FA0               	btfss	_RF1^(0+128),7
  7045  049C  2C9F               	goto	l2146
  7046  049D  1F20               	btfss	_RF1^(0+128),6
  7047  049E  2D31               	goto	l8846
  7048  049F                     l2146:	
  7049                           
  7050                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7051  049F  1D20               	btfss	_RF1^(0+128),2
  7052  04A0  2CF0               	goto	l2147
  7053                           
  7054                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7055  04A1  1B20               	btfsc	_RF1^(0+128),6
  7056  04A2  2CEB               	goto	l8818
  7057                           
  7058                           ;RF_Control_B1.c: 68: RF1.Count++;
  7059  04A3  3001               	movlw	1
  7060  04A4  07A3               	addwf	(_RF1^(0+128)+3),f
  7061  04A5  3000               	movlw	0
  7062  04A6  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7063                           
  7064                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7065  04A7  3014               	movlw	20
  7066  04A8  0020               	movlb	0	; select bank0
  7067  04A9  00A0               	movwf	___lwdiv@divisor
  7068  04AA  3000               	movlw	0
  7069  04AB  00A1               	movwf	___lwdiv@divisor+1
  7070  04AC  0021               	movlb	1	; select bank1
  7071  04AD  0829               	movf	((_RF1+1)^(0+128)+8),w
  7072  04AE  0020               	movlb	0	; select bank0
  7073  04AF  01A3               	clrf	___lwdiv@dividend+1
  7074  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  7075  04B1  0021               	movlb	1	; select bank1
  7076  04B2  0828               	movf	(_RF1^(0+128)+8),w
  7077  04B3  0020               	movlb	0	; select bank0
  7078  04B4  01A2               	clrf	___lwdiv@dividend
  7079  04B5  07A2               	addwf	___lwdiv@dividend,f
  7080  04B6  3191  217B  3184   	fcall	___lwdiv
  7081  04B9  0020               	movlb	0	; select bank0
  7082  04BA  0821               	movf	?___lwdiv+1,w
  7083  04BB  0021               	movlb	1	; select bank1
  7084  04BC  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7085  04BD  1D03               	skipz
  7086  04BE  2CC3               	goto	u9235
  7087  04BF  0020               	movlb	0	; select bank0
  7088  04C0  0820               	movf	?___lwdiv,w
  7089  04C1  0021               	movlb	1	; select bank1
  7090  04C2  0223               	subwf	(_RF1^(0+128)+3),w
  7091  04C3                     u9235:	
  7092  04C3  1C03               	skipc
  7093  04C4  2D31               	goto	l8846
  7094                           
  7095                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7096  04C5  3014               	movlw	20
  7097  04C6  0020               	movlb	0	; select bank0
  7098  04C7  00A0               	movwf	___lwdiv@divisor
  7099  04C8  3000               	movlw	0
  7100  04C9  00A1               	movwf	___lwdiv@divisor+1
  7101  04CA  0021               	movlb	1	; select bank1
  7102  04CB  0829               	movf	((_RF1+1)^(0+128)+8),w
  7103  04CC  0020               	movlb	0	; select bank0
  7104  04CD  01A3               	clrf	___lwdiv@dividend+1
  7105  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  7106  04CF  0021               	movlb	1	; select bank1
  7107  04D0  0828               	movf	(_RF1^(0+128)+8),w
  7108  04D1  0020               	movlb	0	; select bank0
  7109  04D2  01A2               	clrf	___lwdiv@dividend
  7110  04D3  07A2               	addwf	___lwdiv@dividend,f
  7111  04D4  3191  217B  3184   	fcall	___lwdiv
  7112  04D7  0020               	movlb	0	; select bank0
  7113  04D8  0821               	movf	?___lwdiv+1,w
  7114  04D9  0021               	movlb	1	; select bank1
  7115  04DA  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7116  04DB  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7117  04DC  0020               	movlb	0	; select bank0
  7118  04DD  0820               	movf	?___lwdiv,w
  7119  04DE  0021               	movlb	1	; select bank1
  7120  04DF  01A3               	clrf	(_RF1^(0+128)+3)
  7121  04E0  07A3               	addwf	(_RF1^(0+128)+3),f
  7122                           
  7123                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7124  04E1  1120               	bcf	_RF1^(0+128),2
  7125                           
  7126                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7127  04E2  01AB               	clrf	(_RF1^(0+128)+11)
  7128  04E3  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7129                           
  7130                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7131  04E4  319B  2399  3184   	fcall	_RF_RxDisable
  7132                           
  7133                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7134  04E7  3188  2046  3184   	fcall	_CC2500_TxData
  7135                           
  7136                           ;RF_Control_B1.c: 77: }
  7137                           ;RF_Control_B1.c: 78: } else {
  7138  04EA  2D31               	goto	l8846
  7139  04EB                     l8818:	
  7140                           
  7141                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7142  04EB  0021               	movlb	1	; select bank1
  7143  04EC  01A3               	clrf	(_RF1^(0+128)+3)
  7144  04ED  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7145                           
  7146                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7147  04EE  1120               	bcf	_RF1^(0+128),2
  7148                           
  7149                           ;RF_Control_B1.c: 81: }
  7150                           ;RF_Control_B1.c: 82: } else {
  7151  04EF  2D31               	goto	l8846
  7152  04F0                     l2147:	
  7153                           
  7154                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7155  04F0  1DA0               	btfss	_RF1^(0+128),3
  7156  04F1  2CFF               	goto	l8832
  7157                           
  7158                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7159  04F2  3197  2795  3184   	fcall	_CC2500_RxData
  7160                           
  7161                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7162  04F5  0021               	movlb	1	; select bank1
  7163  04F6  1CA0               	btfss	_RF1^(0+128),1
  7164  04F7  2D31               	goto	l8846
  7165                           
  7166                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7167  04F8  10A0               	bcf	_RF1^(0+128),1
  7168                           
  7169                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7170  04F9  01AB               	clrf	(_RF1^(0+128)+11)
  7171  04FA  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7172                           
  7173                           ;RF_Control_B1.c: 97: getRxData();
  7174  04FB  3195  2597  3184   	fcall	_getRxData
  7175                           
  7176                           ;RF_Control_B1.c: 100: }
  7177                           ;RF_Control_B1.c: 101: } else {
  7178  04FE  2D31               	goto	l8846
  7179  04FF                     l8832:	
  7180                           
  7181                           ;RF_Control_B1.c: 102: RF1.Count++;
  7182  04FF  3001               	movlw	1
  7183  0500  0021               	movlb	1	; select bank1
  7184  0501  07A3               	addwf	(_RF1^(0+128)+3),f
  7185  0502  3000               	movlw	0
  7186  0503  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7187                           
  7188                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7189  0504  3014               	movlw	20
  7190  0505  0020               	movlb	0	; select bank0
  7191  0506  00A0               	movwf	___lwdiv@divisor
  7192  0507  3000               	movlw	0
  7193  0508  00A1               	movwf	___lwdiv@divisor+1
  7194  0509  0021               	movlb	1	; select bank1
  7195  050A  0829               	movf	((_RF1+1)^(0+128)+8),w
  7196  050B  0020               	movlb	0	; select bank0
  7197  050C  01A3               	clrf	___lwdiv@dividend+1
  7198  050D  07A3               	addwf	___lwdiv@dividend+1,f
  7199  050E  0021               	movlb	1	; select bank1
  7200  050F  0828               	movf	(_RF1^(0+128)+8),w
  7201  0510  0020               	movlb	0	; select bank0
  7202  0511  01A2               	clrf	___lwdiv@dividend
  7203  0512  07A2               	addwf	___lwdiv@dividend,f
  7204  0513  3191  217B  3184   	fcall	___lwdiv
  7205  0516  0020               	movlb	0	; select bank0
  7206  0517  0821               	movf	?___lwdiv+1,w
  7207  0518  0021               	movlb	1	; select bank1
  7208  0519  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7209  051A  1D03               	skipz
  7210  051B  2D20               	goto	u9265
  7211  051C  0020               	movlb	0	; select bank0
  7212  051D  0820               	movf	?___lwdiv,w
  7213  051E  0021               	movlb	1	; select bank1
  7214  051F  0223               	subwf	(_RF1^(0+128)+3),w
  7215  0520                     u9265:	
  7216  0520  1C03               	skipc
  7217  0521  2D31               	goto	l8846
  7218                           
  7219                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7220  0522  01A3               	clrf	(_RF1^(0+128)+3)
  7221  0523  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7222                           
  7223                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7224  0524  15A0               	bsf	_RF1^(0+128),3
  7225                           
  7226                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7227  0525  3036               	movlw	54
  7228  0526  319E  2612  3184   	fcall	_CC2500_WriteCommand
  7229                           
  7230                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7231  0529  303A               	movlw	58
  7232  052A  319E  2612  3184   	fcall	_CC2500_WriteCommand
  7233                           
  7234                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7235  052D  3034               	movlw	52
  7236  052E  319E  2612  3184   	fcall	_CC2500_WriteCommand
  7237  0531                     l8846:	
  7238                           
  7239                           ;RF_Control_B1.c: 111: }
  7240                           ;RF_Control_B1.c: 112: }
  7241                           ;RF_Control_B1.c: 113: }
  7242                           ;RF_Control_B1.c: 114: }
  7243                           ;RF_Control_B1.c: 115: }
  7244                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7245  0531  3001               	movlw	1
  7246  0532  0021               	movlb	1	; select bank1
  7247  0533  07AB               	addwf	(_RF1^(0+128)+11),f
  7248  0534  3000               	movlw	0
  7249  0535  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7250                           
  7251                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7252  0536  300B               	movlw	11
  7253  0537  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7254  0538  30B9               	movlw	185
  7255  0539  1903               	skipnz
  7256  053A  022B               	subwf	(_RF1^(0+128)+11),w
  7257  053B  1C03               	skipc
  7258  053C  2D49               	goto	l8860
  7259                           
  7260                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7261  053D  01AB               	clrf	(_RF1^(0+128)+11)
  7262  053E  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7263                           
  7264                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7265  053F  11A0               	bcf	_RF1^(0+128),3
  7266                           
  7267                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7268  0540  10A0               	bcf	_RF1^(0+128),1
  7269                           
  7270                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7271  0541  3036               	movlw	54
  7272  0542  319E  2612  3184   	fcall	_CC2500_WriteCommand
  7273                           
  7274                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7275  0545  303A               	movlw	58
  7276  0546  319E  2612  3184   	fcall	_CC2500_WriteCommand
  7277  0549                     l8860:	
  7278                           
  7279                           ;RF_Control_B1.c: 125: }
  7280                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7281  0549  0021               	movlb	1	; select bank1
  7282  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  7283  054B  0008               	return
  7284                           
  7285                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7286  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7287                           
  7288                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7289  054D  319D  2511         	fcall	_CC2500_PowerOnInitial
  7290                           
  7291                           ;RF_Control_B1.c: 130: }
  7292                           ;RF_Control_B1.c: 132: } else {
  7293  054F  0008               	return
  7294  0550                     l2142:	
  7295                           
  7296                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7297  0550  1C2F               	btfss	_myMain^(0+128),0
  7298  0551  0008               	return
  7299                           
  7300                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7301  0552  1420               	bsf	_RF1^(0+128),0
  7302  0553  0008               	return
  7303  0554                     __end_of_setRF_Main:	
  7304                           
  7305                           	psect	text26
  7306  1597                     __ptext26:	
  7307 ;; *************** function _getRxData *****************
  7308 ;; Defined at:
  7309 ;;		line 227 in file "../src/RF_Control_B1.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;		None
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  error           1    1[BANK1 ] unsigned char 
  7314 ;; Return value:  Size  Location     Type
  7315 ;;		None               void
  7316 ;; Registers used:
  7317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;Total ram usage:        2 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:   10
  7330 ;; This function calls:
  7331 ;;		_getMain_All_Error_Status
  7332 ;;		_setControl_Lights_Table
  7333 ;;		_setLog_Code
  7334 ;;		_setTxData
  7335 ;; This function is called by:
  7336 ;;		_setRF_Main
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _getRxData
  7342  1597                     _getRxData:	
  7343                           
  7344                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7345                           
  7346                           ;incstack = 0
  7347                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7348  1597  0023               	movlb	3	; select bank3
  7349  1598  0820               	movf	_RF_Data^(0+384),w
  7350  1599  3AAA               	xorlw	170
  7351  159A  1D03               	skipz
  7352  159B  2DAD               	goto	l7146
  7353  159C  0821               	movf	(_RF_Data^(0+384)+1),w
  7354  159D  3A01               	xorlw	1
  7355  159E  1D03               	skipz
  7356  159F  2DAD               	goto	l7146
  7357                           
  7358                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7359  15A0  3055               	movlw	85
  7360  15A1  0021               	movlb	1	; select bank1
  7361  15A2  00E6               	movwf	??_getRxData^(0+128)
  7362  15A3  086E               	movf	_product^(0+128),w
  7363  15A4  3E02               	addlw	2
  7364  15A5  0086               	movwf	6
  7365  15A6  3001               	movlw	1	; select bank2/3
  7366  15A7  0087               	movwf	7
  7367  15A8  0866               	movf	??_getRxData^(0+128),w
  7368  15A9  0081               	movwf	1
  7369                           
  7370                           ;RF_Control_B1.c: 231: setTxData();
  7371  15AA  318E  267F         	fcall	_setTxData
  7372                           
  7373                           ;RF_Control_B1.c: 235: } else {
  7374  15AC  0008               	return
  7375  15AD                     l7146:	
  7376                           
  7377                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7378  15AD  3000               	movlw	0
  7379  15AE  3190  20DE  3195   	fcall	_getMain_All_Error_Status
  7380  15B1  0021               	movlb	1	; select bank1
  7381  15B2  00E6               	movwf	??_getRxData^(0+128)
  7382  15B3  0866               	movf	??_getRxData^(0+128),w
  7383  15B4  00E7               	movwf	getRxData@error^(0+128)
  7384                           
  7385                           ;RF_Control_B1.c: 237: if (error == 0) {
  7386  15B5  08E7               	movf	getRxData@error^(0+128),f
  7387  15B6  1D03               	skipz
  7388  15B7  2DF9               	goto	l2187
  7389                           
  7390                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7391  15B8  1F20               	btfss	_RF1^(0+128),6
  7392  15B9  2DC5               	goto	l7158
  7393                           
  7394                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7395  15BA  0023               	movlb	3	; select bank3
  7396  15BB  08A0               	movf	_RF_Data^(0+384),f
  7397  15BC  1D03               	skipz
  7398  15BD  0008               	return
  7399  15BE  0821               	movf	(_RF_Data^(0+384)+1),w
  7400  15BF  3A64               	xorlw	100
  7401  15C0  1D03               	skipz
  7402  15C1  0008               	return
  7403                           
  7404                           ;RF_Control_B1.c: 241: setLog_Code();
  7405  15C2  3191  2111         	fcall	_setLog_Code
  7406                           
  7407                           ;RF_Control_B1.c: 242: }
  7408                           ;RF_Control_B1.c: 243: } else {
  7409  15C4  0008               	return
  7410  15C5                     l7158:	
  7411                           
  7412                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7413  15C5  0023               	movlb	3	; select bank3
  7414  15C6  0834               	movf	(_RF_Data^(0+384)+20),w
  7415  15C7  3AD1               	xorlw	209
  7416  15C8  1903               	skipnz
  7417  15C9  2DCE               	goto	l7162
  7418  15CA  0834               	movf	(_RF_Data^(0+384)+20),w
  7419  15CB  3A0A               	xorlw	10
  7420  15CC  1D03               	skipz
  7421  15CD  0008               	return
  7422  15CE                     l7162:	
  7423                           
  7424                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7425  15CE  08A0               	movf	_RF_Data^(0+384),f
  7426  15CF  1D03               	skipz
  7427  15D0  0008               	return
  7428  15D1  0821               	movf	(_RF_Data^(0+384)+1),w
  7429  15D2  3A02               	xorlw	2
  7430  15D3  1D03               	skipz
  7431  15D4  0008               	return
  7432                           
  7433                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7434  15D5  0021               	movlb	1	; select bank1
  7435  15D6  086E               	movf	_product^(0+128),w
  7436  15D7  3E0C               	addlw	12
  7437  15D8  0086               	movwf	6
  7438  15D9  3001               	movlw	1	; select bank2/3
  7439  15DA  0087               	movwf	7
  7440  15DB  0023               	movlb	3	; select bank3
  7441  15DC  082C               	movf	(_RF_Data^(0+384)+12),w
  7442  15DD  0601               	xorwf	1,w
  7443  15DE  1D03               	skipz
  7444  15DF  0008               	return
  7445  15E0  0021               	movlb	1	; select bank1
  7446  15E1  086E               	movf	_product^(0+128),w
  7447  15E2  3E0D               	addlw	13
  7448  15E3  0086               	movwf	6
  7449  15E4  3001               	movlw	1	; select bank2/3
  7450  15E5  0087               	movwf	7
  7451  15E6  0023               	movlb	3	; select bank3
  7452  15E7  082D               	movf	(_RF_Data^(0+384)+13),w
  7453  15E8  0601               	xorwf	1,w
  7454  15E9  1D03               	skipz
  7455  15EA  0008               	return
  7456  15EB  0021               	movlb	1	; select bank1
  7457  15EC  086E               	movf	_product^(0+128),w
  7458  15ED  3E0E               	addlw	14
  7459  15EE  0086               	movwf	6
  7460  15EF  3001               	movlw	1	; select bank2/3
  7461  15F0  0087               	movwf	7
  7462  15F1  0023               	movlb	3	; select bank3
  7463  15F2  082E               	movf	(_RF_Data^(0+384)+14),w
  7464  15F3  0601               	xorwf	1,w
  7465  15F4  1D03               	skipz
  7466  15F5  0008               	return
  7467                           
  7468                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7469  15F6  318A  2203         	fcall	_setControl_Lights_Table
  7470                           
  7471                           ;RF_Control_B1.c: 250: }
  7472                           ;RF_Control_B1.c: 253: }
  7473                           ;RF_Control_B1.c: 264: }
  7474                           ;RF_Control_B1.c: 265: }
  7475                           ;RF_Control_B1.c: 266: } else {
  7476  15F8  0008               	return
  7477  15F9                     l2187:	
  7478                           
  7479                           ;RF_Control_B1.c: 267: __nop();
  7480  15F9  0000               	nop
  7481  15FA  0008               	return
  7482  15FB                     __end_of_getRxData:	
  7483                           
  7484                           	psect	text27
  7485  1111                     __ptext27:	
  7486 ;; *************** function _setLog_Code *****************
  7487 ;; Defined at:
  7488 ;;		line 273 in file "../src/RF_Control_B1.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;Total ram usage:        1 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    7
  7509 ;; This function calls:
  7510 ;;		_setBuz
  7511 ;;		_setMemory_LoopSave
  7512 ;;		_setMemory_Modify
  7513 ;;		_setProductData
  7514 ;; This function is called by:
  7515 ;;		_getRxData
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function _setLog_Code
  7521  1111                     _setLog_Code:	
  7522                           
  7523                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7524                           
  7525                           ;incstack = 0
  7526                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7527  1111  0021               	movlb	1	; select bank1
  7528  1112  1320               	bcf	_RF1^(0+128),6
  7529                           
  7530                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7531  1113  0023               	movlb	3	; select bank3
  7532  1114  082C               	movf	(_RF_Data^(0+384)+12),w
  7533  1115  0020               	movlb	0	; select bank0
  7534  1116  00E5               	movwf	??_setLog_Code
  7535  1117  0865               	movf	??_setLog_Code,w
  7536  1118  00E2               	movwf	setProductData@value
  7537  1119  300C               	movlw	12
  7538  111A  319A  22F6  3191   	fcall	_setProductData
  7539                           
  7540                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7541  111D  0023               	movlb	3	; select bank3
  7542  111E  082D               	movf	(_RF_Data^(0+384)+13),w
  7543  111F  0020               	movlb	0	; select bank0
  7544  1120  00E5               	movwf	??_setLog_Code
  7545  1121  0865               	movf	??_setLog_Code,w
  7546  1122  00E2               	movwf	setProductData@value
  7547  1123  300D               	movlw	13
  7548  1124  319A  22F6  3191   	fcall	_setProductData
  7549                           
  7550                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7551  1127  0023               	movlb	3	; select bank3
  7552  1128  082E               	movf	(_RF_Data^(0+384)+14),w
  7553  1129  0020               	movlb	0	; select bank0
  7554  112A  00E5               	movwf	??_setLog_Code
  7555  112B  0865               	movf	??_setLog_Code,w
  7556  112C  00E2               	movwf	setProductData@value
  7557  112D  300E               	movlw	14
  7558  112E  319A  22F6  3191   	fcall	_setProductData
  7559                           
  7560                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7561  1131  3064               	movlw	100
  7562  1132  0020               	movlb	0	; select bank0
  7563  1133  00A9               	movwf	setBuz@time
  7564  1134  3000               	movlw	0
  7565  1135  00AA               	movwf	setBuz@time+1
  7566  1136  3001               	movlw	1
  7567  1137  3194  2425  3191   	fcall	_setBuz
  7568                           
  7569                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7570  113A  0021               	movlb	1	; select bank1
  7571  113B  1EAF               	btfss	_myMain^(0+128),5
  7572  113C  2941               	goto	l2200
  7573                           
  7574                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7575  113D  3001               	movlw	1
  7576  113E  319C  24C2  3191   	fcall	_setMemory_LoopSave
  7577  1141                     l2200:	
  7578                           
  7579                           ;RF_Control_B1.c: 281: }
  7580                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7581  1141  3001               	movlw	1
  7582  1142  319C  2489         	fcall	_setMemory_Modify
  7583  1144  0008               	return
  7584  1145                     __end_of_setLog_Code:	
  7585                           
  7586                           	psect	text28
  7587  1CC2                     __ptext28:	
  7588 ;; *************** function _setMemory_LoopSave *****************
  7589 ;; Defined at:
  7590 ;;		line 1089 in file "../src/MCU_B1.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  command         1    wreg     unsigned char 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  command         1    1[BANK0 ] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;Total ram usage:        2 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    5
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		_setLog_Code
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           
  7619                           ;psect for function _setMemory_LoopSave
  7620  1CC2                     _setMemory_LoopSave:	
  7621                           
  7622                           ;incstack = 0
  7623                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7624                           ;setMemory_LoopSave@command stored from wreg
  7625  1CC2  0020               	movlb	0	; select bank0
  7626  1CC3  00A1               	movwf	setMemory_LoopSave@command
  7627                           
  7628                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7629  1CC4  0821               	movf	setMemory_LoopSave@command,w
  7630  1CC5  3A01               	xorlw	1
  7631  1CC6  3000               	movlw	0
  7632  1CC7  1903               	skipnz
  7633  1CC8  3001               	movlw	1
  7634  1CC9  00A0               	movwf	??_setMemory_LoopSave
  7635  1CCA  0DA0               	rlf	??_setMemory_LoopSave,f
  7636  1CCB  0DA0               	rlf	??_setMemory_LoopSave,f
  7637  1CCC  0024               	movlb	4	; select bank4
  7638  1CCD  0844               	movf	(_Memory^(0+512)+36),w
  7639  1CCE  0020               	movlb	0	; select bank0
  7640  1CCF  0620               	xorwf	??_setMemory_LoopSave,w
  7641  1CD0  39FB               	andlw	-5
  7642  1CD1  0620               	xorwf	??_setMemory_LoopSave,w
  7643  1CD2  0024               	movlb	4	; select bank4
  7644  1CD3  00C4               	movwf	(_Memory^(0+512)+36)
  7645  1CD4  0008               	return
  7646  1CD5                     __end_of_setMemory_LoopSave:	
  7647                           
  7648                           	psect	text29
  7649  0A03                     __ptext29:	
  7650 ;; *************** function _setControl_Lights_Table *****************
  7651 ;; Defined at:
  7652 ;;		line 286 in file "../src/RF_Control_B1.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;		None               void
  7659 ;; Registers used:
  7660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    9
  7673 ;; This function calls:
  7674 ;;		_getDimmerLights_Status
  7675 ;;		_getMain_All_LightsStatus
  7676 ;;		_setCmd_Status
  7677 ;;		_setDimmerLights_SwOff
  7678 ;;		_setDimmerLights_SwOn
  7679 ;;		_setProductData
  7680 ;;		_setRFSW_AdjControl
  7681 ;;		_setRFSW_Control
  7682 ;;		_setRF_AdjControl
  7683 ;;		_setTxData
  7684 ;; This function is called by:
  7685 ;;		_getRxData
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           
  7690                           ;psect for function _setControl_Lights_Table
  7691  0A03                     _setControl_Lights_Table:	
  7692                           
  7693                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7694                           
  7695                           ;incstack = 0
  7696                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7697  0A03  2A69               	goto	l6746
  7698  0A04                     l6726:	
  7699                           ;RF_Control_B1.c: 290: case 0x00:
  7700                           
  7701                           
  7702                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7703  0A04  319A  22A8  318A   	fcall	_getMain_All_LightsStatus
  7704  0A07  3A01               	xorlw	1
  7705  0A08  1D03               	skipz
  7706  0A09  2A20               	goto	l6734
  7707                           
  7708                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7709  0A0A  3001               	movlw	1
  7710  0A0B  319B  23B8  318A   	fcall	_getDimmerLights_Status
  7711  0A0E  3A01               	xorlw	1
  7712  0A0F  1D03               	skipz
  7713  0A10  2A19               	goto	l6732
  7714                           
  7715                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7716  0A11  3001               	movlw	1
  7717  0A12  3193  232F  318A   	fcall	_setDimmerLights_SwOn
  7718                           
  7719                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7720  0A15  3001               	movlw	1
  7721  0A16  3191  21B2  318A   	fcall	_setDimmerLights_SwOff
  7722  0A19                     l6732:	
  7723                           
  7724                           ;RF_Control_B1.c: 297: }
  7725                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7726  0A19  0020               	movlb	0	; select bank0
  7727  0A1A  01A0               	clrf	setCmd_Status@cmd
  7728  0A1B  0AA0               	incf	setCmd_Status@cmd,f
  7729  0A1C  3001               	movlw	1
  7730  0A1D  319D  25AC         	fcall	_setCmd_Status
  7731                           
  7732                           ;RF_Control_B1.c: 313: } else {
  7733  0A1F  0008               	return
  7734  0A20                     l6734:	
  7735                           
  7736                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7737  0A20  0020               	movlb	0	; select bank0
  7738  0A21  01E2               	clrf	setProductData@value
  7739  0A22  3009               	movlw	9
  7740  0A23  319A  22F6  318A   	fcall	_setProductData
  7741                           
  7742                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7743  0A26  0020               	movlb	0	; select bank0
  7744  0A27  01E2               	clrf	setProductData@value
  7745  0A28  300B               	movlw	11
  7746  0A29  319A  22F6  318A   	fcall	_setProductData
  7747                           
  7748                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7749  0A2C  0020               	movlb	0	; select bank0
  7750  0A2D  01E2               	clrf	setProductData@value
  7751  0A2E  300F               	movlw	15
  7752  0A2F  319A  22F6  318A   	fcall	_setProductData
  7753                           
  7754                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7755  0A32  0020               	movlb	0	; select bank0
  7756  0A33  01E2               	clrf	setProductData@value
  7757  0A34  3011               	movlw	17
  7758  0A35  319A  22F6  318A   	fcall	_setProductData
  7759                           
  7760                           ;RF_Control_B1.c: 318: setTxData();
  7761  0A38  318E  267F         	fcall	_setTxData
  7762                           
  7763                           ;RF_Control_B1.c: 319: }
  7764                           ;RF_Control_B1.c: 320: break;
  7765  0A3A  0008               	return
  7766  0A3B                     l6736:	
  7767                           ;RF_Control_B1.c: 322: case 0x20:
  7768                           
  7769                           
  7770                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7771  0A3B  0020               	movlb	0	; select bank0
  7772  0A3C  01E2               	clrf	setProductData@value
  7773  0A3D  3009               	movlw	9
  7774  0A3E  319A  22F6  318A   	fcall	_setProductData
  7775                           
  7776                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7777  0A41  0020               	movlb	0	; select bank0
  7778  0A42  01E2               	clrf	setProductData@value
  7779  0A43  300B               	movlw	11
  7780  0A44  319A  22F6  318A   	fcall	_setProductData
  7781                           
  7782                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7783  0A47  0021               	movlb	1	; select bank1
  7784  0A48  086E               	movf	_product^(0+128),w
  7785  0A49  0086               	movwf	6
  7786  0A4A  3001               	movlw	1	; select bank2/3
  7787  0A4B  0087               	movwf	7
  7788  0A4C  3001               	movlw	1	; select bank2/3
  7789  0A4D  3F4F               	moviw [15]fsr1
  7790  0A4E  0020               	movlb	0	; select bank0
  7791  0A4F  00E2               	movwf	setProductData@value
  7792  0A50  300F               	movlw	15
  7793  0A51  319A  22F6  318A   	fcall	_setProductData
  7794                           
  7795                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7796  0A54  0020               	movlb	0	; select bank0
  7797  0A55  01E2               	clrf	setProductData@value
  7798  0A56  3011               	movlw	17
  7799  0A57  319A  22F6  318A   	fcall	_setProductData
  7800                           
  7801                           ;RF_Control_B1.c: 327: setTxData();
  7802  0A5A  318E  267F         	fcall	_setTxData
  7803                           
  7804                           ;RF_Control_B1.c: 328: break;
  7805  0A5C  0008               	return
  7806  0A5D                     l6738:	
  7807                           ;RF_Control_B1.c: 331: case 0x01:
  7808                           
  7809                           
  7810                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7811  0A5D  3001               	movlw	1
  7812  0A5E  3192  2264         	fcall	_setRFSW_Control
  7813                           
  7814                           ;RF_Control_B1.c: 333: break;
  7815  0A60  0008               	return
  7816  0A61                     l6740:	
  7817                           ;RF_Control_B1.c: 337: case 0x11:
  7818                           
  7819                           
  7820                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7821  0A61  3001               	movlw	1
  7822  0A62  318A  227C         	fcall	_setRFSW_AdjControl
  7823                           
  7824                           ;RF_Control_B1.c: 339: break;
  7825  0A64  0008               	return
  7826  0A65                     l6742:	
  7827                           ;RF_Control_B1.c: 341: case 0xd1:
  7828                           
  7829                           
  7830                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7831  0A65  3001               	movlw	1
  7832  0A66  3190  20AF         	fcall	_setRF_AdjControl
  7833                           
  7834                           ;RF_Control_B1.c: 372: }
  7835                           
  7836                           ;RF_Control_B1.c: 343: break;
  7837  0A68  0008               	return
  7838  0A69                     l6746:	
  7839  0A69  0023               	movlb	3	; select bank3
  7840  0A6A  082F               	movf	(_RF_Data^(0+384)+15),w
  7841                           
  7842                           ; Switch size 1, requested type "space"
  7843                           ; Number of cases is 5, Range of values is 0 to 209
  7844                           ; switch strategies available:
  7845                           ; Name         Instructions Cycles
  7846                           ; simple_byte           16     9 (average)
  7847                           ; jumptable            260     6 (fixed)
  7848                           ;	Chosen strategy is simple_byte
  7849  0A6B  3A00               	xorlw	0	; case 0
  7850  0A6C  1903               	skipnz
  7851  0A6D  2A04               	goto	l6726
  7852  0A6E  3A01               	xorlw	1	; case 1
  7853  0A6F  1903               	skipnz
  7854  0A70  2A5D               	goto	l6738
  7855  0A71  3A10               	xorlw	16	; case 17
  7856  0A72  1903               	skipnz
  7857  0A73  2A61               	goto	l6740
  7858  0A74  3A31               	xorlw	49	; case 32
  7859  0A75  1903               	skipnz
  7860  0A76  2A3B               	goto	l6736
  7861  0A77  3AF1               	xorlw	241	; case 209
  7862  0A78  1903               	skipnz
  7863  0A79  2A65               	goto	l6742
  7864  0A7A  2A7B               	goto	l2214
  7865  0A7B                     l2214:	
  7866  0A7B  0008               	return
  7867  0A7C                     __end_of_setControl_Lights_Table:	
  7868                           
  7869                           	psect	text30
  7870  10AF                     __ptext30:	
  7871 ;; *************** function _setRF_AdjControl *****************
  7872 ;; Defined at:
  7873 ;;		line 443 in file "../src/RF_Control_B1.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  sw              1    wreg     unsigned char 
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;  sw              1    6[BANK0 ] unsigned char 
  7878 ;;  status          1    5[BANK0 ] unsigned char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;		None               void
  7881 ;; Registers used:
  7882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;Total ram usage:        3 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    7
  7895 ;; This function calls:
  7896 ;;		_DimmerLights_SelectPointer
  7897 ;;		_getDimmerLights_Status
  7898 ;; This function is called by:
  7899 ;;		_setControl_Lights_Table
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           
  7904                           ;psect for function _setRF_AdjControl
  7905  10AF                     _setRF_AdjControl:	
  7906                           
  7907                           ;incstack = 0
  7908                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7909                           ;setRF_AdjControl@sw stored from wreg
  7910  10AF  0020               	movlb	0	; select bank0
  7911  10B0  00A6               	movwf	setRF_AdjControl@sw
  7912                           
  7913                           ;RF_Control_B1.c: 444: char status = 0;
  7914  10B1  01A5               	clrf	setRF_AdjControl@status
  7915                           
  7916                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7917  10B2  0826               	movf	setRF_AdjControl@sw,w
  7918  10B3  319B  23B8  3190   	fcall	_getDimmerLights_Status
  7919  10B6  0020               	movlb	0	; select bank0
  7920  10B7  00A4               	movwf	??_setRF_AdjControl
  7921  10B8  0824               	movf	??_setRF_AdjControl,w
  7922  10B9  00A5               	movwf	setRF_AdjControl@status
  7923                           
  7924                           ;RF_Control_B1.c: 448: if (status == 1) {
  7925  10BA  0825               	movf	setRF_AdjControl@status,w
  7926  10BB  3A01               	xorlw	1
  7927  10BC  1D03               	skipz
  7928  10BD  0008               	return
  7929                           
  7930                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7931  10BE  0021               	movlb	1	; select bank1
  7932  10BF  1822               	btfsc	(_RF1^(0+128)+2),0
  7933  10C0  28D2               	goto	l2233
  7934                           
  7935                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7936  10C1  1422               	bsf	(_RF1^(0+128)+2),0
  7937                           
  7938                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7939  10C2  0020               	movlb	0	; select bank0
  7940  10C3  0826               	movf	setRF_AdjControl@sw,w
  7941  10C4  319A  22EA         	fcall	_DimmerLights_SelectPointer
  7942                           
  7943                           ;RF_Control_B1.c: 453: DimmerLights->DimmingTrigger = 1;
  7944  10C6  0021               	movlb	1	; select bank1
  7945  10C7  084C               	movf	_DimmerLights^(0+128),w
  7946  10C8  0086               	movwf	6
  7947  10C9  3001               	movlw	1	; select bank2/3
  7948  10CA  0087               	movwf	7
  7949  10CB  1601               	bsf	1,4
  7950                           
  7951                           ;RF_Control_B1.c: 454: DimmerLights->DimmingSwitch = 1;
  7952  10CC  084C               	movf	_DimmerLights^(0+128),w
  7953  10CD  0086               	movwf	6
  7954  10CE  3001               	movlw	1	; select bank2/3
  7955  10CF  0087               	movwf	7
  7956  10D0  1681               	bsf	1,5
  7957                           
  7958                           ;RF_Control_B1.c: 456: } else {
  7959  10D1  0008               	return
  7960  10D2                     l2233:	
  7961                           
  7962                           ;RF_Control_B1.c: 457: RF1.flagDimming = 0;
  7963  10D2  1022               	bcf	(_RF1^(0+128)+2),0
  7964                           
  7965                           ;RF_Control_B1.c: 458: DimmerLights->DimmingTrigger = 1;
  7966  10D3  084C               	movf	_DimmerLights^(0+128),w
  7967  10D4  0086               	movwf	6
  7968  10D5  3001               	movlw	1	; select bank2/3
  7969  10D6  0087               	movwf	7
  7970  10D7  1601               	bsf	1,4
  7971                           
  7972                           ;RF_Control_B1.c: 459: DimmerLights->DimmingSwitch = 0;
  7973  10D8  084C               	movf	_DimmerLights^(0+128),w
  7974  10D9  0086               	movwf	6
  7975  10DA  3001               	movlw	1	; select bank2/3
  7976  10DB  0087               	movwf	7
  7977  10DC  1281               	bcf	1,5
  7978  10DD  0008               	return
  7979  10DE                     __end_of_setRF_AdjControl:	
  7980                           
  7981                           	psect	text31
  7982  1264                     __ptext31:	
  7983 ;; *************** function _setRFSW_Control *****************
  7984 ;; Defined at:
  7985 ;;		line 380 in file "../src/RF_Control_B1.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  sw              1    wreg     unsigned char 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  sw              1   79[BANK0 ] unsigned char 
  7990 ;;  status          1   78[BANK0 ] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;		None               void
  7993 ;; Registers used:
  7994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;Total ram usage:        3 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    8
  8007 ;; This function calls:
  8008 ;;		_getDimmerLights_Status
  8009 ;;		_setBuz
  8010 ;;		_setDelayOff_GO
  8011 ;;		_setDimmerLights_SwOff
  8012 ;;		_setDimmerLights_SwOn
  8013 ;;		_setRF_DimmerLights
  8014 ;;		_setTxData
  8015 ;; This function is called by:
  8016 ;;		_setControl_Lights_Table
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function _setRFSW_Control
  8022  1264                     _setRFSW_Control:	
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8026                           ;setRFSW_Control@sw stored from wreg
  8027  1264  0020               	movlb	0	; select bank0
  8028  1265  00EF               	movwf	setRFSW_Control@sw
  8029                           
  8030                           ;RF_Control_B1.c: 381: char status = 0;
  8031  1266  01EE               	clrf	setRFSW_Control@status
  8032                           
  8033                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  8034  1267  0023               	movlb	3	; select bank3
  8035  1268  0830               	movf	(_RF_Data^(0+384)+16),w
  8036  1269  3A80               	xorlw	128
  8037  126A  1D03               	skipz
  8038  126B  2A97               	goto	l6454
  8039                           
  8040                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  8041  126C  0020               	movlb	0	; select bank0
  8042  126D  01E5               	clrf	setDelayOff_GO@command
  8043  126E  0AE5               	incf	setDelayOff_GO@command,f
  8044  126F  0023               	movlb	3	; select bank3
  8045  1270  0831               	movf	(_RF_Data^(0+384)+17),w
  8046  1271  0020               	movlb	0	; select bank0
  8047  1272  00ED               	movwf	??_setRFSW_Control
  8048  1273  086D               	movf	??_setRFSW_Control,w
  8049  1274  00E6               	movwf	setDelayOff_GO@value
  8050  1275  086F               	movf	setRFSW_Control@sw,w
  8051  1276  318C  2409  3192   	fcall	_setDelayOff_GO
  8052                           
  8053                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  8054  1279  0020               	movlb	0	; select bank0
  8055  127A  086F               	movf	setRFSW_Control@sw,w
  8056  127B  319B  23B8  3192   	fcall	_getDimmerLights_Status
  8057  127E  3A01               	xorlw	1
  8058  127F  1D03               	skipz
  8059  1280  2A97               	goto	l6454
  8060                           
  8061                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  8062  1281  3064               	movlw	100
  8063  1282  0020               	movlb	0	; select bank0
  8064  1283  00A9               	movwf	setBuz@time
  8065  1284  3000               	movlw	0
  8066  1285  00AA               	movwf	setBuz@time+1
  8067  1286  3001               	movlw	1
  8068  1287  3194  2425  3192   	fcall	_setBuz
  8069                           
  8070                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  8071  128A  0020               	movlb	0	; select bank0
  8072  128B  01E5               	clrf	setRF_DimmerLights@on
  8073  128C  0AE5               	incf	setRF_DimmerLights@on,f
  8074  128D  086F               	movf	setRFSW_Control@sw,w
  8075  128E  3196  26C5  3192   	fcall	_setRF_DimmerLights
  8076                           
  8077                           ;RF_Control_B1.c: 388: setTxData();
  8078  1291  318E  267F  3192   	fcall	_setTxData
  8079                           
  8080                           ;RF_Control_B1.c: 389: status = 1;
  8081  1294  0020               	movlb	0	; select bank0
  8082  1295  01EE               	clrf	setRFSW_Control@status
  8083  1296  0AEE               	incf	setRFSW_Control@status,f
  8084  1297                     l6454:	
  8085                           
  8086                           ;RF_Control_B1.c: 390: }
  8087                           ;RF_Control_B1.c: 391: }
  8088                           ;RF_Control_B1.c: 393: if (status == 0) {
  8089  1297  0020               	movlb	0	; select bank0
  8090  1298  08EE               	movf	setRFSW_Control@status,f
  8091  1299  1D03               	skipz
  8092  129A  0008               	return
  8093                           
  8094                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  8095  129B  086F               	movf	setRFSW_Control@sw,w
  8096  129C  3193  232F  3192   	fcall	_setDimmerLights_SwOn
  8097                           
  8098                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  8099  129F  0020               	movlb	0	; select bank0
  8100  12A0  086F               	movf	setRFSW_Control@sw,w
  8101  12A1  3191  21B2         	fcall	_setDimmerLights_SwOff
  8102  12A3  0008               	return
  8103  12A4                     __end_of_setRFSW_Control:	
  8104                           
  8105                           	psect	text32
  8106  0A7C                     __ptext32:	
  8107 ;; *************** function _setRFSW_AdjControl *****************
  8108 ;; Defined at:
  8109 ;;		line 402 in file "../src/RF_Control_B1.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  sw              1    wreg     unsigned char 
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  sw              1   72[BANK0 ] unsigned char 
  8114 ;;  status          1   71[BANK0 ] unsigned char 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;		None               void
  8117 ;; Registers used:
  8118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;Total ram usage:        4 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    8
  8131 ;; This function calls:
  8132 ;;		_getDimmerLights_PercentToValue
  8133 ;;		_getDimmerLights_Status
  8134 ;;		_setDimmerIntr_Dimming_RF
  8135 ;;		_setDimmerIntr_MaxmumValue
  8136 ;;		_setDimmerLights_DimmingRun
  8137 ;;		_setDimmerLights_SwOff
  8138 ;;		_setDimmerLights_SwOn
  8139 ;;		_setMemory_Modify
  8140 ;;		_setProductData
  8141 ;;		_setTxData
  8142 ;; This function is called by:
  8143 ;;		_setControl_Lights_Table
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function _setRFSW_AdjControl
  8149  0A7C                     _setRFSW_AdjControl:	
  8150                           
  8151                           ;incstack = 0
  8152                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8153                           ;setRFSW_AdjControl@sw stored from wreg
  8154  0A7C  0020               	movlb	0	; select bank0
  8155  0A7D  00E8               	movwf	setRFSW_AdjControl@sw
  8156                           
  8157                           ;RF_Control_B1.c: 403: char status = 0;
  8158  0A7E  01E7               	clrf	setRFSW_AdjControl@status
  8159                           
  8160                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  8161  0A7F  0868               	movf	setRFSW_AdjControl@sw,w
  8162  0A80  319B  23B8  318A   	fcall	_getDimmerLights_Status
  8163  0A83  0020               	movlb	0	; select bank0
  8164  0A84  00E5               	movwf	??_setRFSW_AdjControl
  8165  0A85  0865               	movf	??_setRFSW_AdjControl,w
  8166  0A86  00E7               	movwf	setRFSW_AdjControl@status
  8167                           
  8168                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  8169  0A87  3065               	movlw	101
  8170  0A88  0023               	movlb	3	; select bank3
  8171  0A89  0229               	subwf	(_RF_Data^(0+384)+9),w
  8172  0A8A  1C03               	skipc
  8173  0A8B  2A93               	goto	l6466
  8174                           
  8175                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  8176  0A8C  3064               	movlw	100
  8177  0A8D  0020               	movlb	0	; select bank0
  8178  0A8E  00E5               	movwf	??_setRFSW_AdjControl
  8179  0A8F  0865               	movf	??_setRFSW_AdjControl,w
  8180  0A90  0023               	movlb	3	; select bank3
  8181  0A91  00A9               	movwf	(_RF_Data^(0+384)+9)
  8182                           
  8183                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  8184  0A92  2A98               	goto	l6470
  8185  0A93                     l6466:	
  8186  0A93  08A9               	movf	(_RF_Data^(0+384)+9),f
  8187  0A94  1D03               	skipz
  8188  0A95  2A98               	goto	l6470
  8189                           
  8190                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  8191  0A96  01A9               	clrf	(_RF_Data^(0+384)+9)
  8192  0A97  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8193  0A98                     l6470:	
  8194                           
  8195                           ;RF_Control_B1.c: 411: }
  8196                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  8197  0A98  0829               	movf	(_RF_Data^(0+384)+9),w
  8198  0A99  0020               	movlb	0	; select bank0
  8199  0A9A  00E5               	movwf	??_setRFSW_AdjControl
  8200  0A9B  0865               	movf	??_setRFSW_AdjControl,w
  8201  0A9C  00E2               	movwf	setProductData@value
  8202  0A9D  3009               	movlw	9
  8203  0A9E  319A  22F6  318A   	fcall	_setProductData
  8204                           
  8205                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  8206  0AA1  0020               	movlb	0	; select bank0
  8207  0AA2  0868               	movf	setRFSW_AdjControl@sw,w
  8208  0AA3  00E5               	movwf	??_setRFSW_AdjControl
  8209  0AA4  0865               	movf	??_setRFSW_AdjControl,w
  8210  0AA5  00E2               	movwf	setProductData@value
  8211  0AA6  300B               	movlw	11
  8212  0AA7  319A  22F6  318A   	fcall	_setProductData
  8213                           
  8214                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  8215  0AAA  0020               	movlb	0	; select bank0
  8216  0AAB  0868               	movf	setRFSW_AdjControl@sw,w
  8217  0AAC  3E1A               	addlw	26
  8218  0AAD  0021               	movlb	1	; select bank1
  8219  0AAE  076E               	addwf	_product^(0+128),w
  8220  0AAF  0020               	movlb	0	; select bank0
  8221  0AB0  00E5               	movwf	??_setRFSW_AdjControl
  8222  0AB1  0865               	movf	??_setRFSW_AdjControl,w
  8223  0AB2  0086               	movwf	6
  8224  0AB3  3001               	movlw	1	; select bank2/3
  8225  0AB4  0087               	movwf	7
  8226  0AB5  0801               	movf	1,w
  8227  0AB6  00E6               	movwf	??_setRFSW_AdjControl+1
  8228  0AB7  0866               	movf	??_setRFSW_AdjControl+1,w
  8229  0AB8  00E2               	movwf	setProductData@value
  8230  0AB9  3011               	movlw	17
  8231  0ABA  319A  22F6  318A   	fcall	_setProductData
  8232                           
  8233                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8234  0ABD  0023               	movlb	3	; select bank3
  8235  0ABE  0829               	movf	(_RF_Data^(0+384)+9),w
  8236  0ABF  0020               	movlb	0	; select bank0
  8237  0AC0  00E5               	movwf	??_setRFSW_AdjControl
  8238  0AC1  0865               	movf	??_setRFSW_AdjControl,w
  8239  0AC2  00E2               	movwf	setProductData@value
  8240  0AC3  0868               	movf	setRFSW_AdjControl@sw,w
  8241  0AC4  3E14               	addlw	20
  8242  0AC5  319A  22F6  318A   	fcall	_setProductData
  8243                           
  8244                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8245  0AC8  3001               	movlw	1
  8246  0AC9  319C  2489  318A   	fcall	_setMemory_Modify
  8247                           
  8248                           ;RF_Control_B1.c: 427: if (status == 1) {
  8249  0ACC  0020               	movlb	0	; select bank0
  8250  0ACD  0867               	movf	setRFSW_AdjControl@status,w
  8251  0ACE  3A01               	xorlw	1
  8252  0ACF  1D03               	skipz
  8253  0AD0  2AE8               	goto	l6480
  8254                           
  8255                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8256  0AD1  0023               	movlb	3	; select bank3
  8257  0AD2  0829               	movf	(_RF_Data^(0+384)+9),w
  8258  0AD3  3195  25FB  318A   	fcall	_getDimmerLights_PercentToValue
  8259  0AD6  0020               	movlb	0	; select bank0
  8260  0AD7  00E5               	movwf	??_setRFSW_AdjControl
  8261  0AD8  0865               	movf	??_setRFSW_AdjControl,w
  8262  0AD9  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8263  0ADA  0868               	movf	setRFSW_AdjControl@sw,w
  8264  0ADB  319B  2302  318A   	fcall	_setDimmerIntr_MaxmumValue
  8265                           
  8266                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8267  0ADE  0020               	movlb	0	; select bank0
  8268  0ADF  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8269  0AE0  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8270  0AE1  0868               	movf	setRFSW_AdjControl@sw,w
  8271  0AE2  319D  2594  318A   	fcall	_setDimmerIntr_Dimming_RF
  8272                           
  8273                           ;RF_Control_B1.c: 430: setTxData();
  8274  0AE5  318E  267F         	fcall	_setTxData
  8275                           
  8276                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8277  0AE7  0008               	return
  8278  0AE8                     l6480:	
  8279  0AE8  0020               	movlb	0	; select bank0
  8280  0AE9  08E7               	movf	setRFSW_AdjControl@status,f
  8281  0AEA  1D03               	skipz
  8282  0AEB  0008               	return
  8283                           
  8284                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8285  0AEC  01A2               	clrf	setDimmerLights_DimmingRun@command
  8286  0AED  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8287  0AEE  0868               	movf	setRFSW_AdjControl@sw,w
  8288  0AEF  319E  262C  318A   	fcall	_setDimmerLights_DimmingRun
  8289                           
  8290                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8291  0AF2  0020               	movlb	0	; select bank0
  8292  0AF3  0868               	movf	setRFSW_AdjControl@sw,w
  8293  0AF4  3193  232F  318A   	fcall	_setDimmerLights_SwOn
  8294                           
  8295                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8296  0AF7  0020               	movlb	0	; select bank0
  8297  0AF8  0868               	movf	setRFSW_AdjControl@sw,w
  8298  0AF9  3191  21B2         	fcall	_setDimmerLights_SwOff
  8299  0AFB  0008               	return
  8300  0AFC                     __end_of_setRFSW_AdjControl:	
  8301                           
  8302                           	psect	text33
  8303  1E2C                     __ptext33:	
  8304 ;; *************** function _setDimmerLights_DimmingRun *****************
  8305 ;; Defined at:
  8306 ;;		line 1097 in file "../src/Dimmer_B1.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  lights          1    wreg     unsigned char 
  8309 ;;  command         1    2[BANK0 ] unsigned char 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  lights          1    4[BANK0 ] unsigned char 
  8312 ;; Return value:  Size  Location     Type
  8313 ;;		None               void
  8314 ;; Registers used:
  8315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;Total ram usage:        3 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    6
  8328 ;; This function calls:
  8329 ;;		_DimmerLights_SelectPointer
  8330 ;; This function is called by:
  8331 ;;		_setRFSW_AdjControl
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function _setDimmerLights_DimmingRun
  8337  1E2C                     _setDimmerLights_DimmingRun:	
  8338                           
  8339                           ;incstack = 0
  8340                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8341                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8342  1E2C  0020               	movlb	0	; select bank0
  8343  1E2D  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8344                           
  8345                           ;Dimmer_B1.c: 1098: DimmerLights_SelectPointer(lights);
  8346  1E2E  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8347  1E2F  319A  22EA         	fcall	_DimmerLights_SelectPointer
  8348                           
  8349                           ;Dimmer_B1.c: 1099: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8350  1E31  0020               	movlb	0	; select bank0
  8351  1E32  0822               	movf	setDimmerLights_DimmingRun@command,w
  8352  1E33  3A01               	xorlw	1
  8353  1E34  3000               	movlw	0
  8354  1E35  1903               	skipnz
  8355  1E36  3001               	movlw	1
  8356  1E37  00A3               	movwf	??_setDimmerLights_DimmingRun
  8357  1E38  0021               	movlb	1	; select bank1
  8358  1E39  0A4C               	incf	_DimmerLights^(0+128),w
  8359  1E3A  0086               	movwf	6
  8360  1E3B  3001               	movlw	1	; select bank2/3
  8361  1E3C  0087               	movwf	7
  8362  1E3D  0020               	movlb	0	; select bank0
  8363  1E3E  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8364  1E3F  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8365  1E40  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8366  1E41  0801               	movf	1,w
  8367  1E42  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8368  1E43  39BF               	andlw	-65
  8369  1E44  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8370  1E45  0081               	movwf	1
  8371  1E46  0008               	return
  8372  1E47                     __end_of_setDimmerLights_DimmingRun:	
  8373                           
  8374                           	psect	text34
  8375  1C0D                     __ptext34:	
  8376 ;; *************** function _getRF_KeyStatus *****************
  8377 ;; Defined at:
  8378 ;;		line 166 in file "../src/RF_Control_B1.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;		None
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;  key             1    1[BANK0 ] unsigned char 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1    wreg      unsigned char 
  8385 ;; Registers used:
  8386 ;;		wreg, status,2
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:        3 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    5
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_setRF_Main
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _getRF_KeyStatus
  8408  1C0D                     _getRF_KeyStatus:	
  8409                           
  8410                           ;RF_Control_B1.c: 167: char key = 0;
  8411                           
  8412                           ;incstack = 0
  8413                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8414  1C0D  0020               	movlb	0	; select bank0
  8415  1C0E  01A1               	clrf	getRF_KeyStatus@key
  8416                           
  8417                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8418  1C0F  01A2               	clrf	_getRF_KeyStatus$5411
  8419  1C10  0AA2               	incf	_getRF_KeyStatus$5411,f
  8420  1C11  1F0C               	btfss	12,6	;volatile
  8421  1C12  1A0C               	btfsc	12,4	;volatile
  8422  1C13  2C18               	goto	l7126
  8423  1C14  1C0C               	btfss	12,0	;volatile
  8424  1C15  1B8C               	btfsc	12,7	;volatile
  8425  1C16  2C18               	goto	l7126
  8426  1C17  01A2               	clrf	_getRF_KeyStatus$5411
  8427  1C18                     l7126:	
  8428  1C18  0822               	movf	_getRF_KeyStatus$5411,w
  8429  1C19  00A0               	movwf	??_getRF_KeyStatus
  8430  1C1A  0820               	movf	??_getRF_KeyStatus,w
  8431  1C1B  00A1               	movwf	getRF_KeyStatus@key
  8432                           
  8433                           ;RF_Control_B1.c: 179: return key;
  8434  1C1C  0821               	movf	getRF_KeyStatus@key,w
  8435  1C1D  0008               	return
  8436  1C1E                     __end_of_getRF_KeyStatus:	
  8437                           
  8438                           	psect	text35
  8439  1BFC                     __ptext35:	
  8440 ;; *************** function _getBuz_GO *****************
  8441 ;; Defined at:
  8442 ;;		line 82 in file "../src/Buzzer_B1.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;		None
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;  i               2    4[BANK0 ] int 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  2    0[BANK0 ] int 
  8449 ;; Registers used:
  8450 ;;		wreg, status,2, status,0
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8456 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;Total ram usage:        6 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    5
  8463 ;; This function calls:
  8464 ;;		Nothing
  8465 ;; This function is called by:
  8466 ;;		_setRF_Main
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           
  8471                           ;psect for function _getBuz_GO
  8472  1BFC                     _getBuz_GO:	
  8473                           
  8474                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8475                           
  8476                           ;incstack = 0
  8477                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8478  1BFC  0022               	movlb	2	; select bank2
  8479  1BFD  0C20               	rrf	_Buz1^(0+256),w
  8480  1BFE  3901               	andlw	1
  8481  1BFF  0020               	movlb	0	; select bank0
  8482  1C00  00A2               	movwf	??_getBuz_GO
  8483  1C01  01A3               	clrf	??_getBuz_GO+1
  8484  1C02  0822               	movf	??_getBuz_GO,w
  8485  1C03  00A4               	movwf	getBuz_GO@i
  8486  1C04  0823               	movf	??_getBuz_GO+1,w
  8487  1C05  00A5               	movwf	getBuz_GO@i+1
  8488                           
  8489                           ;Buzzer_B1.c: 84: return i;
  8490  1C06  0825               	movf	getBuz_GO@i+1,w
  8491  1C07  01A1               	clrf	?_getBuz_GO+1
  8492  1C08  07A1               	addwf	?_getBuz_GO+1,f
  8493  1C09  0824               	movf	getBuz_GO@i,w
  8494  1C0A  01A0               	clrf	?_getBuz_GO
  8495  1C0B  07A0               	addwf	?_getBuz_GO,f
  8496  1C0C  0008               	return
  8497  1C0D                     __end_of_getBuz_GO:	
  8498                           
  8499                           	psect	text36
  8500  1B99                     __ptext36:	
  8501 ;; *************** function _RF_RxDisable *****************
  8502 ;; Defined at:
  8503 ;;		line 154 in file "../src/RF_Control_B1.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;		None
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;		None
  8508 ;; Return value:  Size  Location     Type
  8509 ;;		None               void
  8510 ;; Registers used:
  8511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;Total ram usage:        0 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    7
  8524 ;; This function calls:
  8525 ;;		_CC2500_WriteCommand
  8526 ;; This function is called by:
  8527 ;;		_setRF_Main
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           
  8532                           ;psect for function _RF_RxDisable
  8533  1B99                     _RF_RxDisable:	
  8534                           
  8535                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8536                           
  8537                           ;incstack = 0
  8538                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8539  1B99  0021               	movlb	1	; select bank1
  8540  1B9A  18A0               	btfsc	_RF1^(0+128),1
  8541  1B9B  2B9E               	goto	l2172
  8542  1B9C  1DA0               	btfss	_RF1^(0+128),3
  8543  1B9D  0008               	return
  8544  1B9E                     l2172:	
  8545                           
  8546                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8547  1B9E  11A0               	bcf	_RF1^(0+128),3
  8548                           
  8549                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8550  1B9F  10A0               	bcf	_RF1^(0+128),1
  8551                           
  8552                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8553  1BA0  3036               	movlw	54
  8554  1BA1  319E  2612  319B   	fcall	_CC2500_WriteCommand
  8555                           
  8556                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8557  1BA4  303A               	movlw	58
  8558  1BA5  319E  2612         	fcall	_CC2500_WriteCommand
  8559  1BA7  0008               	return
  8560  1BA8                     __end_of_RF_RxDisable:	
  8561                           
  8562                           	psect	text37
  8563  0846                     __ptext37:	
  8564 ;; *************** function _CC2500_TxData *****************
  8565 ;; Defined at:
  8566 ;;		line 32 in file "../src/CC2500_B1.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;		None               void
  8573 ;; Registers used:
  8574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        2 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    7
  8587 ;; This function calls:
  8588 ;;		_CC2500_WriteByte
  8589 ;;		_CC2500_WriteCommand
  8590 ;;		_RF_Timeout_Counter
  8591 ;;		_setRF_TimeoutCleared
  8592 ;; This function is called by:
  8593 ;;		_setRF_Main
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           
  8598                           ;psect for function _CC2500_TxData
  8599  0846                     _CC2500_TxData:	
  8600                           
  8601                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8602                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8606  0846  3036               	movlw	54
  8607  0847  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8608                           
  8609                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8610  084A  303B               	movlw	59
  8611  084B  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8612                           
  8613                           ;CC2500_B1.c: 38: RC0 = 0;
  8614  084E  0020               	movlb	0	; select bank0
  8615  084F  100E               	bcf	14,0	;volatile
  8616                           
  8617                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8618  0850  307F               	movlw	127
  8619  0851  00A4               	movwf	??_CC2500_TxData
  8620  0852  0824               	movf	??_CC2500_TxData,w
  8621  0853  0021               	movlb	1	; select bank1
  8622  0854  00D1               	movwf	_SPI0Buffer^(0+128)
  8623                           
  8624                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8625  0855  2859               	goto	l8686
  8626  0856                     l8684:	
  8627                           
  8628                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8629  0856  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  8630  0859                     l8686:	
  8631  0859  0020               	movlb	0	; select bank0
  8632  085A  1E8E               	btfss	14,5	;volatile
  8633  085B  285F               	goto	l8690
  8634  085C  0021               	movlb	1	; select bank1
  8635  085D  1F21               	btfss	(_RF1^(0+128)+1),6
  8636  085E  2856               	goto	l8684
  8637  085F                     l8690:	
  8638                           
  8639                           ;CC2500_B1.c: 42: };
  8640                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8641  085F  319A  2237  3188   	fcall	_setRF_TimeoutCleared
  8642                           
  8643                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8644  0862  319D  25C5  3188   	fcall	_CC2500_WriteByte
  8645                           
  8646                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8647  0865  0021               	movlb	1	; select bank1
  8648  0866  0854               	movf	_Tx_Length^(0+128),w
  8649  0867  0020               	movlb	0	; select bank0
  8650  0868  00A4               	movwf	??_CC2500_TxData
  8651  0869  0824               	movf	??_CC2500_TxData,w
  8652  086A  0021               	movlb	1	; select bank1
  8653  086B  00D1               	movwf	_SPI0Buffer^(0+128)
  8654                           
  8655                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8656  086C  319D  25C5  3188   	fcall	_CC2500_WriteByte
  8657                           
  8658                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8659  086F  0020               	movlb	0	; select bank0
  8660  0870  01A5               	clrf	CC2500_TxData@loop_e
  8661  0871                     l8704:	
  8662  0871  0021               	movlb	1	; select bank1
  8663  0872  0854               	movf	_Tx_Length^(0+128),w
  8664  0873  0020               	movlb	0	; select bank0
  8665  0874  0225               	subwf	CC2500_TxData@loop_e,w
  8666  0875  1803               	btfsc	3,0
  8667  0876  288A               	goto	l235
  8668                           
  8669                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8670  0877  0825               	movf	CC2500_TxData@loop_e,w
  8671  0878  3EA0               	addlw	_RF_Data& (0+255)
  8672  0879  0086               	movwf	6
  8673  087A  3001               	movlw	1	; select bank3/4
  8674  087B  0087               	movwf	7
  8675  087C  0801               	movf	1,w
  8676  087D  00A4               	movwf	??_CC2500_TxData
  8677  087E  0824               	movf	??_CC2500_TxData,w
  8678  087F  0021               	movlb	1	; select bank1
  8679  0880  00D1               	movwf	_SPI0Buffer^(0+128)
  8680                           
  8681                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8682  0881  319D  25C5  3188   	fcall	_CC2500_WriteByte
  8683  0884  3001               	movlw	1
  8684  0885  0020               	movlb	0	; select bank0
  8685  0886  00A4               	movwf	??_CC2500_TxData
  8686  0887  0824               	movf	??_CC2500_TxData,w
  8687  0888  07A5               	addwf	CC2500_TxData@loop_e,f
  8688  0889  2871               	goto	l8704
  8689  088A                     l235:	
  8690                           
  8691                           ;CC2500_B1.c: 51: }
  8692                           ;CC2500_B1.c: 52: RC0 = 1;
  8693  088A  140E               	bsf	14,0	;volatile
  8694                           
  8695                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8696  088B  3035               	movlw	53
  8697  088C  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8698                           
  8699                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8700  088F  2893               	goto	l8710
  8701  0890                     l8708:	
  8702                           
  8703                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8704  0890  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  8705  0893                     l8710:	
  8706  0893  0020               	movlb	0	; select bank0
  8707  0894  188E               	btfsc	14,1	;volatile
  8708  0895  2899               	goto	l8714
  8709  0896  0021               	movlb	1	; select bank1
  8710  0897  1F21               	btfss	(_RF1^(0+128)+1),6
  8711  0898  2890               	goto	l8708
  8712  0899                     l8714:	
  8713                           
  8714                           ;CC2500_B1.c: 56: };
  8715                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8716  0899  319A  2237  3188   	fcall	_setRF_TimeoutCleared
  8717                           
  8718                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8719  089C  28A0               	goto	l8718
  8720  089D                     l8716:	
  8721                           
  8722                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8723  089D  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  8724  08A0                     l8718:	
  8725  08A0  0020               	movlb	0	; select bank0
  8726  08A1  1C8E               	btfss	14,1	;volatile
  8727  08A2  28A6               	goto	l8722
  8728  08A3  0021               	movlb	1	; select bank1
  8729  08A4  1F21               	btfss	(_RF1^(0+128)+1),6
  8730  08A5  289D               	goto	l8716
  8731  08A6                     l8722:	
  8732                           
  8733                           ;CC2500_B1.c: 61: };
  8734                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8735  08A6  319A  2237  3188   	fcall	_setRF_TimeoutCleared
  8736                           
  8737                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8738  08A9  3036               	movlw	54
  8739  08AA  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8740                           
  8741                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8742  08AD  303B               	movlw	59
  8743  08AE  319E  2612         	fcall	_CC2500_WriteCommand
  8744                           
  8745                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8746  08B0  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8747  08B1  0008               	return
  8748  08B2                     __end_of_CC2500_TxData:	
  8749                           
  8750                           	psect	text38
  8751  1795                     __ptext38:	
  8752 ;; *************** function _CC2500_RxData *****************
  8753 ;; Defined at:
  8754 ;;		line 73 in file "../src/CC2500_B1.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;		None
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8759 ;; Return value:  Size  Location     Type
  8760 ;;		None               void
  8761 ;; Registers used:
  8762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;Total ram usage:        2 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    7
  8775 ;; This function calls:
  8776 ;;		_CC2500_ReadByte
  8777 ;;		_CC2500_ReadStatus
  8778 ;;		_CC2500_WriteByte
  8779 ;;		_CC2500_WriteCommand
  8780 ;;		_RF_Timeout_Counter
  8781 ;;		_setRF_TimeoutCleared
  8782 ;; This function is called by:
  8783 ;;		_setRF_Main
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           
  8788                           ;psect for function _CC2500_RxData
  8789  1795                     _CC2500_RxData:	
  8790                           
  8791                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8792                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8793                           
  8794                           ;incstack = 0
  8795                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8796  1795  0020               	movlb	0	; select bank0
  8797  1796  188E               	btfsc	14,1	;volatile
  8798  1797  0008               	return
  8799                           
  8800                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8801  1798  303B               	movlw	59
  8802  1799  319F  27DB  3197   	fcall	_CC2500_ReadStatus
  8803                           
  8804                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8805  179C  0021               	movlb	1	; select bank1
  8806  179D  0857               	movf	_s_data^(0+128),w
  8807  179E  1903               	btfsc	3,2
  8808  179F  0008               	return
  8809                           
  8810                           ;CC2500_B1.c: 90: RC0 = 0;
  8811  17A0  0020               	movlb	0	; select bank0
  8812  17A1  100E               	bcf	14,0	;volatile
  8813                           
  8814                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8815  17A2  30FF               	movlw	255
  8816  17A3  00A4               	movwf	??_CC2500_RxData
  8817  17A4  0824               	movf	??_CC2500_RxData,w
  8818  17A5  0021               	movlb	1	; select bank1
  8819  17A6  00D1               	movwf	_SPI0Buffer^(0+128)
  8820                           
  8821                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8822  17A7  2FAB               	goto	l8742
  8823  17A8                     l8740:	
  8824                           
  8825                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8826  17A8  319C  24FC  3197   	fcall	_RF_Timeout_Counter
  8827  17AB                     l8742:	
  8828  17AB  0020               	movlb	0	; select bank0
  8829  17AC  1E8E               	btfss	14,5	;volatile
  8830  17AD  2FB1               	goto	l8746
  8831  17AE  0021               	movlb	1	; select bank1
  8832  17AF  1F21               	btfss	(_RF1^(0+128)+1),6
  8833  17B0  2FA8               	goto	l8740
  8834  17B1                     l8746:	
  8835                           
  8836                           ;CC2500_B1.c: 95: };
  8837                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8838  17B1  319A  2237  3197   	fcall	_setRF_TimeoutCleared
  8839                           
  8840                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8841  17B4  319D  25C5  3197   	fcall	_CC2500_WriteByte
  8842                           
  8843                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8844  17B7  319E  269A  3197   	fcall	_CC2500_ReadByte
  8845                           
  8846                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8847  17BA  0021               	movlb	1	; select bank1
  8848  17BB  0851               	movf	_SPI0Buffer^(0+128),w
  8849  17BC  0020               	movlb	0	; select bank0
  8850  17BD  00A4               	movwf	??_CC2500_RxData
  8851  17BE  0824               	movf	??_CC2500_RxData,w
  8852  17BF  0021               	movlb	1	; select bank1
  8853  17C0  00D0               	movwf	_Rx_Length^(0+128)
  8854                           
  8855                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8856  17C1  0020               	movlb	0	; select bank0
  8857  17C2  01A5               	clrf	CC2500_RxData@loop_f
  8858  17C3                     l8762:	
  8859  17C3  0021               	movlb	1	; select bank1
  8860  17C4  0850               	movf	_Rx_Length^(0+128),w
  8861  17C5  0020               	movlb	0	; select bank0
  8862  17C6  0225               	subwf	CC2500_RxData@loop_f,w
  8863  17C7  1803               	btfsc	3,0
  8864  17C8  2FDC               	goto	l8764
  8865                           
  8866                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8867  17C9  319E  269A  3197   	fcall	_CC2500_ReadByte
  8868                           
  8869                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8870  17CC  0021               	movlb	1	; select bank1
  8871  17CD  0851               	movf	_SPI0Buffer^(0+128),w
  8872  17CE  0020               	movlb	0	; select bank0
  8873  17CF  00A4               	movwf	??_CC2500_RxData
  8874  17D0  0825               	movf	CC2500_RxData@loop_f,w
  8875  17D1  3EA0               	addlw	_RF_Data& (0+255)
  8876  17D2  0086               	movwf	6
  8877  17D3  3001               	movlw	1	; select bank3/4
  8878  17D4  0087               	movwf	7
  8879  17D5  0824               	movf	??_CC2500_RxData,w
  8880  17D6  0081               	movwf	1
  8881  17D7  3001               	movlw	1
  8882  17D8  00A4               	movwf	??_CC2500_RxData
  8883  17D9  0824               	movf	??_CC2500_RxData,w
  8884  17DA  07A5               	addwf	CC2500_RxData@loop_f,f
  8885  17DB  2FC3               	goto	l8762
  8886  17DC                     l8764:	
  8887                           
  8888                           ;CC2500_B1.c: 104: }
  8889                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8890  17DC  319E  269A  3197   	fcall	_CC2500_ReadByte
  8891                           
  8892                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8893  17DF  0021               	movlb	1	; select bank1
  8894  17E0  0851               	movf	_SPI0Buffer^(0+128),w
  8895  17E1  0020               	movlb	0	; select bank0
  8896  17E2  00A4               	movwf	??_CC2500_RxData
  8897  17E3  0824               	movf	??_CC2500_RxData,w
  8898  17E4  0021               	movlb	1	; select bank1
  8899  17E5  00CF               	movwf	_RSSI^(0+128)
  8900                           
  8901                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8902  17E6  319E  269A  3197   	fcall	_CC2500_ReadByte
  8903                           
  8904                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8905  17E9  0021               	movlb	1	; select bank1
  8906  17EA  0851               	movf	_SPI0Buffer^(0+128),w
  8907  17EB  0020               	movlb	0	; select bank0
  8908  17EC  00A4               	movwf	??_CC2500_RxData
  8909  17ED  0824               	movf	??_CC2500_RxData,w
  8910  17EE  0021               	movlb	1	; select bank1
  8911  17EF  00C8               	movwf	_CRC^(0+128)
  8912                           
  8913                           ;CC2500_B1.c: 109: RC0 = 1;
  8914  17F0  0020               	movlb	0	; select bank0
  8915  17F1  140E               	bsf	14,0	;volatile
  8916                           
  8917                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8918  17F2  0021               	movlb	1	; select bank1
  8919  17F3  1BC8               	btfsc	_CRC^(0+128),7
  8920                           
  8921                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8922  17F4  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8923                           
  8924                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8925  17F5  11A0               	bcf	_RF1^(0+128),3
  8926                           
  8927                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8928  17F6  14A0               	bsf	_RF1^(0+128),1
  8929                           
  8930                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8931  17F7  3036               	movlw	54
  8932  17F8  319E  2612  3197   	fcall	_CC2500_WriteCommand
  8933                           
  8934                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8935  17FB  303A               	movlw	58
  8936  17FC  319E  2612         	fcall	_CC2500_WriteCommand
  8937  17FE  0021               	movlb	1	; select bank1
  8938  17FF  0008               	return
  8939  1800                     __end_of_CC2500_RxData:	
  8940                           
  8941                           	psect	text39
  8942  1FDB                     __ptext39:	
  8943 ;; *************** function _CC2500_ReadStatus *****************
  8944 ;; Defined at:
  8945 ;;		line 308 in file "../src/CC2500_B1.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  status_addr     1    wreg     unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;		None               void
  8952 ;; Registers used:
  8953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        2 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    6
  8966 ;; This function calls:
  8967 ;;		_CC2500_ReadByte
  8968 ;;		_CC2500_WriteByte
  8969 ;;		_RF_Timeout_Counter
  8970 ;;		_setRF_TimeoutCleared
  8971 ;; This function is called by:
  8972 ;;		_CC2500_RxData
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _CC2500_ReadStatus
  8978  1FDB                     _CC2500_ReadStatus:	
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8982                           ;CC2500_ReadStatus@status_addr stored from wreg
  8983  1FDB  0020               	movlb	0	; select bank0
  8984  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  8985                           
  8986                           ;CC2500_B1.c: 309: RC0 = 0;
  8987  1FDD  100E               	bcf	14,0	;volatile
  8988                           
  8989                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8990  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  8991  1FDF  3EC0               	addlw	192
  8992  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  8993  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  8994  1FE2  0021               	movlb	1	; select bank1
  8995  1FE3  00D1               	movwf	_SPI0Buffer^(0+128)
  8996                           
  8997                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8998  1FE4  2FE8               	goto	l8592
  8999  1FE5                     l8590:	
  9000                           
  9001                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9002  1FE5  319C  24FC  319F   	fcall	_RF_Timeout_Counter
  9003  1FE8                     l8592:	
  9004  1FE8  0020               	movlb	0	; select bank0
  9005  1FE9  1E8E               	btfss	14,5	;volatile
  9006  1FEA  2FEE               	goto	l8596
  9007  1FEB  0021               	movlb	1	; select bank1
  9008  1FEC  1F21               	btfss	(_RF1^(0+128)+1),6
  9009  1FED  2FE5               	goto	l8590
  9010  1FEE                     l8596:	
  9011                           
  9012                           ;CC2500_B1.c: 314: };
  9013                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9014  1FEE  319A  2237  319F   	fcall	_setRF_TimeoutCleared
  9015                           
  9016                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9017  1FF1  319D  25C5  319F   	fcall	_CC2500_WriteByte
  9018                           
  9019                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9020  1FF4  319E  269A         	fcall	_CC2500_ReadByte
  9021                           
  9022                           ;CC2500_B1.c: 319: RC0 = 1;
  9023  1FF6  0020               	movlb	0	; select bank0
  9024  1FF7  140E               	bsf	14,0	;volatile
  9025                           
  9026                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9027  1FF8  0021               	movlb	1	; select bank1
  9028  1FF9  0851               	movf	_SPI0Buffer^(0+128),w
  9029  1FFA  0020               	movlb	0	; select bank0
  9030  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  9031  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  9032  1FFD  0021               	movlb	1	; select bank1
  9033  1FFE  00D7               	movwf	_s_data^(0+128)
  9034  1FFF  0008               	return
  9035  2000                     __end_of_CC2500_ReadStatus:	
  9036                           
  9037                           	psect	text40
  9038  1E9A                     __ptext40:	
  9039 ;; *************** function _CC2500_ReadByte *****************
  9040 ;; Defined at:
  9041 ;;		line 242 in file "../src/CC2500_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;		None
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;		None               void
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    5
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_CC2500_RxData
  9066 ;;		_CC2500_ReadStatus
  9067 ;;		_CC2500_ReadREG
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _CC2500_ReadByte
  9073  1E9A                     _CC2500_ReadByte:	
  9074                           
  9075                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9076                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9080  1E9A  0020               	movlb	0	; select bank0
  9081  1E9B  01A1               	clrf	CC2500_ReadByte@loop_b
  9082  1E9C                     L3:	
  9083  1E9C  3008               	movlw	8
  9084  1E9D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9085  1E9E  1803               	btfsc	3,0
  9086  1E9F  0008               	return
  9087                           
  9088                           ;CC2500_B1.c: 245: RC3 = 1;
  9089  1EA0  158E               	bsf	14,3	;volatile
  9090                           
  9091                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9092  1EA1  1003               	clrc
  9093  1EA2  0021               	movlb	1	; select bank1
  9094  1EA3  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9095                           
  9096                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9097  1EA4  0020               	movlb	0	; select bank0
  9098  1EA5  1E8E               	btfss	14,5	;volatile
  9099  1EA6  2EAA               	goto	l8562
  9100                           
  9101                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9102  1EA7  0021               	movlb	1	; select bank1
  9103  1EA8  1451               	bsf	_SPI0Buffer^(0+128),0
  9104  1EA9  2EB0               	goto	l8564
  9105  1EAA                     l8562:	
  9106                           
  9107                           ;CC2500_B1.c: 249: else
  9108                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9109  1EAA  30FE               	movlw	254
  9110  1EAB  0020               	movlb	0	; select bank0
  9111  1EAC  00A0               	movwf	??_CC2500_ReadByte
  9112  1EAD  0820               	movf	??_CC2500_ReadByte,w
  9113  1EAE  0021               	movlb	1	; select bank1
  9114  1EAF  05D1               	andwf	_SPI0Buffer^(0+128),f
  9115  1EB0                     l8564:	
  9116                           
  9117                           ;CC2500_B1.c: 251: RC3 = 0;
  9118  1EB0  0020               	movlb	0	; select bank0
  9119  1EB1  118E               	bcf	14,3	;volatile
  9120  1EB2  3001               	movlw	1
  9121  1EB3  00A0               	movwf	??_CC2500_ReadByte
  9122  1EB4  0820               	movf	??_CC2500_ReadByte,w
  9123  1EB5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9124  1EB6  2E9C               	goto	L3
  9125  1EB7                     __end_of_CC2500_ReadByte:	
  9126                           
  9127                           	psect	text41
  9128  1D11                     __ptext41:	
  9129 ;; *************** function _CC2500_PowerOnInitial *****************
  9130 ;; Defined at:
  9131 ;;		line 126 in file "../src/CC2500_B1.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;		None
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;		None
  9136 ;; Return value:  Size  Location     Type
  9137 ;;		None               void
  9138 ;; Registers used:
  9139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;Total ram usage:        0 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    8
  9152 ;; This function calls:
  9153 ;;		_CC2500_ClearRXFIFO
  9154 ;;		_CC2500_ClearTXFIFO
  9155 ;;		_CC2500_FrequencyCabr
  9156 ;;		_CC2500_InitPATable
  9157 ;;		_CC2500_InitSetREG
  9158 ;;		_CC2500_PowerRST
  9159 ;;		_CC2500_SIDLEMode
  9160 ;; This function is called by:
  9161 ;;		_main
  9162 ;;		_setRF_Main
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           
  9167                           ;psect for function _CC2500_PowerOnInitial
  9168  1D11                     _CC2500_PowerOnInitial:	
  9169                           
  9170                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9174  1D11  3188  2002  319D   	fcall	_CC2500_PowerRST
  9175                           
  9176                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9177  1D14  3190  2056  319D   	fcall	_CC2500_InitSetREG
  9178                           
  9179                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9180  1D17  319E  26F4  319D   	fcall	_CC2500_InitPATable
  9181                           
  9182                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9183  1D1A  319A  223F  319D   	fcall	_CC2500_ClearTXFIFO
  9184                           
  9185                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9186  1D1D  319A  223B  319D   	fcall	_CC2500_ClearRXFIFO
  9187                           
  9188                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9189  1D20  319B  2356  319D   	fcall	_CC2500_FrequencyCabr
  9190                           
  9191                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9192  1D23  319A  2243         	fcall	_CC2500_SIDLEMode
  9193  1D25  0008               	return
  9194  1D26                     __end_of_CC2500_PowerOnInitial:	
  9195                           
  9196                           	psect	text42
  9197  1A43                     __ptext42:	
  9198 ;; *************** function _CC2500_SIDLEMode *****************
  9199 ;; Defined at:
  9200 ;;		line 216 in file "../src/CC2500_B1.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        0 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    7
  9221 ;; This function calls:
  9222 ;;		_CC2500_WriteCommand
  9223 ;; This function is called by:
  9224 ;;		_CC2500_PowerOnInitial
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function _CC2500_SIDLEMode
  9230  1A43                     _CC2500_SIDLEMode:	
  9231                           
  9232                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9233                           
  9234                           ;incstack = 0
  9235                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9236  1A43  3036               	movlw	54
  9237  1A44  319E  2612         	fcall	_CC2500_WriteCommand
  9238  1A46  0008               	return
  9239  1A47                     __end_of_CC2500_SIDLEMode:	
  9240                           
  9241                           	psect	text43
  9242  0802                     __ptext43:	
  9243 ;; *************** function _CC2500_PowerRST *****************
  9244 ;; Defined at:
  9245 ;;		line 139 in file "../src/CC2500_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;		None
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        1 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    6
  9266 ;; This function calls:
  9267 ;;		_CC2500_WriteByte
  9268 ;;		_DelayTime_1us
  9269 ;;		_RF_Timeout_Counter
  9270 ;;		_setRF_TimeoutCleared
  9271 ;; This function is called by:
  9272 ;;		_CC2500_PowerOnInitial
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function _CC2500_PowerRST
  9278  0802                     _CC2500_PowerRST:	
  9279                           
  9280                           ;CC2500_B1.c: 140: RC3 = 0;
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9284  0802  0020               	movlb	0	; select bank0
  9285  0803  118E               	bcf	14,3	;volatile
  9286                           
  9287                           ;CC2500_B1.c: 141: RC4 = 0;
  9288  0804  120E               	bcf	14,4	;volatile
  9289                           
  9290                           ;CC2500_B1.c: 142: RC0 = 1;
  9291  0805  140E               	bsf	14,0	;volatile
  9292                           
  9293                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9294  0806  300A               	movlw	10
  9295  0807  00A0               	movwf	DelayTime_1us@count
  9296  0808  3000               	movlw	0
  9297  0809  00A1               	movwf	DelayTime_1us@count+1
  9298  080A  3190  2008  3188   	fcall	_DelayTime_1us
  9299                           
  9300                           ;CC2500_B1.c: 144: RC0 = 0;
  9301  080D  0020               	movlb	0	; select bank0
  9302  080E  100E               	bcf	14,0	;volatile
  9303                           
  9304                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9305  080F  300A               	movlw	10
  9306  0810  00A0               	movwf	DelayTime_1us@count
  9307  0811  3000               	movlw	0
  9308  0812  00A1               	movwf	DelayTime_1us@count+1
  9309  0813  3190  2008  3188   	fcall	_DelayTime_1us
  9310                           
  9311                           ;CC2500_B1.c: 146: RC0 = 1;
  9312  0816  0020               	movlb	0	; select bank0
  9313  0817  140E               	bsf	14,0	;volatile
  9314                           
  9315                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9316  0818  3028               	movlw	40
  9317  0819  00A0               	movwf	DelayTime_1us@count
  9318  081A  3000               	movlw	0
  9319  081B  00A1               	movwf	DelayTime_1us@count+1
  9320  081C  3190  2008  3188   	fcall	_DelayTime_1us
  9321                           
  9322                           ;CC2500_B1.c: 148: RC0 = 0;
  9323  081F  0020               	movlb	0	; select bank0
  9324  0820  100E               	bcf	14,0	;volatile
  9325                           
  9326                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9327  0821  3030               	movlw	48
  9328  0822  00A6               	movwf	??_CC2500_PowerRST
  9329  0823  0826               	movf	??_CC2500_PowerRST,w
  9330  0824  0021               	movlb	1	; select bank1
  9331  0825  00D1               	movwf	_SPI0Buffer^(0+128)
  9332                           
  9333                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9334  0826  282A               	goto	l8620
  9335  0827                     l8618:	
  9336                           
  9337                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9338  0827  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  9339  082A                     l8620:	
  9340  082A  0020               	movlb	0	; select bank0
  9341  082B  1E8E               	btfss	14,5	;volatile
  9342  082C  2830               	goto	l8624
  9343  082D  0021               	movlb	1	; select bank1
  9344  082E  1F21               	btfss	(_RF1^(0+128)+1),6
  9345  082F  2827               	goto	l8618
  9346  0830                     l8624:	
  9347                           
  9348                           ;CC2500_B1.c: 152: };
  9349                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9350  0830  319A  2237  3188   	fcall	_setRF_TimeoutCleared
  9351                           
  9352                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9353  0833  319D  25C5  3188   	fcall	_CC2500_WriteByte
  9354                           
  9355                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9356  0836  283A               	goto	l8630
  9357  0837                     l8628:	
  9358                           
  9359                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9360  0837  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  9361  083A                     l8630:	
  9362  083A  0020               	movlb	0	; select bank0
  9363  083B  1E8E               	btfss	14,5	;volatile
  9364  083C  2840               	goto	l8634
  9365  083D  0021               	movlb	1	; select bank1
  9366  083E  1F21               	btfss	(_RF1^(0+128)+1),6
  9367  083F  2837               	goto	l8628
  9368  0840                     l8634:	
  9369                           
  9370                           ;CC2500_B1.c: 157: };
  9371                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9372  0840  319A  2237         	fcall	_setRF_TimeoutCleared
  9373                           
  9374                           ;CC2500_B1.c: 159: RC4 = 0;
  9375  0842  0020               	movlb	0	; select bank0
  9376  0843  120E               	bcf	14,4	;volatile
  9377                           
  9378                           ;CC2500_B1.c: 160: RC0 = 1;
  9379  0844  140E               	bsf	14,0	;volatile
  9380  0845  0008               	return
  9381  0846                     __end_of_CC2500_PowerRST:	
  9382                           
  9383                           	psect	text44
  9384  1056                     __ptext44:	
  9385 ;; *************** function _CC2500_InitSetREG *****************
  9386 ;; Defined at:
  9387 ;;		line 166 in file "../src/CC2500_B1.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;		None
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9392 ;;  temp2           1    7[BANK0 ] unsigned char 
  9393 ;;  temp1           1    6[BANK0 ] unsigned char 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;		None               void
  9396 ;; Registers used:
  9397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9398 ;; Tracked objects:
  9399 ;;		On entry : 0/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;Total ram usage:        4 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    7
  9410 ;; This function calls:
  9411 ;;		_CC2500_WriteREG
  9412 ;; This function is called by:
  9413 ;;		_CC2500_PowerOnInitial
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           
  9418                           ;psect for function _CC2500_InitSetREG
  9419  1056                     _CC2500_InitSetREG:	
  9420                           
  9421                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9422                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9423                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9427  1056  0020               	movlb	0	; select bank0
  9428  1057  01A8               	clrf	CC2500_InitSetREG@loop_c
  9429  1058                     L4:	
  9430  1058  302F               	movlw	47
  9431  1059  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9432  105A  1803               	btfsc	3,0
  9433  105B  0008               	return
  9434                           
  9435                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9436  105C  0828               	movf	CC2500_InitSetREG@loop_c,w
  9437  105D  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9438  105E  0084               	movwf	4
  9439  105F  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9440  1060  1803               	skipnc
  9441  1061  3E01               	addlw	1
  9442  1062  0085               	movwf	5
  9443  1063  0800               	movf	0,w	;code access
  9444  1064  00A5               	movwf	??_CC2500_InitSetREG
  9445  1065  0825               	movf	??_CC2500_InitSetREG,w
  9446  1066  00A6               	movwf	CC2500_InitSetREG@temp1
  9447                           
  9448                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9449  1067  0828               	movf	CC2500_InitSetREG@loop_c,w
  9450  1068  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9451  1069  0084               	movwf	4
  9452  106A  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9453  106B  1803               	skipnc
  9454  106C  3E01               	addlw	1
  9455  106D  0085               	movwf	5
  9456  106E  0800               	movf	0,w	;code access
  9457  106F  00A5               	movwf	??_CC2500_InitSetREG
  9458  1070  0825               	movf	??_CC2500_InitSetREG,w
  9459  1071  00A7               	movwf	CC2500_InitSetREG@temp2
  9460                           
  9461                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9462  1072  0827               	movf	CC2500_InitSetREG@temp2,w
  9463  1073  00A5               	movwf	??_CC2500_InitSetREG
  9464  1074  0825               	movf	??_CC2500_InitSetREG,w
  9465  1075  00A2               	movwf	CC2500_WriteREG@value
  9466  1076  0826               	movf	CC2500_InitSetREG@temp1,w
  9467  1077  319F  27B8  3190   	fcall	_CC2500_WriteREG
  9468  107A  3001               	movlw	1
  9469  107B  0020               	movlb	0	; select bank0
  9470  107C  00A5               	movwf	??_CC2500_InitSetREG
  9471  107D  0825               	movf	??_CC2500_InitSetREG,w
  9472  107E  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9473  107F  2858               	goto	L4
  9474  1080                     __end_of_CC2500_InitSetREG:	
  9475                           
  9476                           	psect	text45
  9477  1EF4                     __ptext45:	
  9478 ;; *************** function _CC2500_InitPATable *****************
  9479 ;; Defined at:
  9480 ;;		line 181 in file "../src/CC2500_B1.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9485 ;;  temp            1    6[BANK0 ] unsigned char 
  9486 ;; Return value:  Size  Location     Type
  9487 ;;		None               void
  9488 ;; Registers used:
  9489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;Total ram usage:        3 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    7
  9502 ;; This function calls:
  9503 ;;		_CC2500_WriteREG
  9504 ;; This function is called by:
  9505 ;;		_CC2500_PowerOnInitial
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           
  9510                           ;psect for function _CC2500_InitPATable
  9511  1EF4                     _CC2500_InitPATable:	
  9512                           
  9513                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9514                           ;CC2500_B1.c: 183: unsigned char temp;
  9515                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9516                           
  9517                           ;incstack = 0
  9518                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9519  1EF4  0020               	movlb	0	; select bank0
  9520  1EF5  01A7               	clrf	CC2500_InitPATable@loop_d
  9521  1EF6                     L5:	
  9522  1EF6  3008               	movlw	8
  9523  1EF7  0227               	subwf	CC2500_InitPATable@loop_d,w
  9524  1EF8  1803               	btfsc	3,0
  9525  1EF9  0008               	return
  9526                           
  9527                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9528  1EFA  0827               	movf	CC2500_InitPATable@loop_d,w
  9529  1EFB  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9530  1EFC  0084               	movwf	4
  9531  1EFD  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9532  1EFE  1803               	skipnc
  9533  1EFF  3E01               	addlw	1
  9534  1F00  0085               	movwf	5
  9535  1F01  0800               	movf	0,w	;code access
  9536  1F02  00A5               	movwf	??_CC2500_InitPATable
  9537  1F03  0825               	movf	??_CC2500_InitPATable,w
  9538  1F04  00A6               	movwf	CC2500_InitPATable@temp
  9539                           
  9540                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9541  1F05  0826               	movf	CC2500_InitPATable@temp,w
  9542  1F06  00A5               	movwf	??_CC2500_InitPATable
  9543  1F07  0825               	movf	??_CC2500_InitPATable,w
  9544  1F08  00A2               	movwf	CC2500_WriteREG@value
  9545  1F09  303E               	movlw	62
  9546  1F0A  319F  27B8  319E   	fcall	_CC2500_WriteREG
  9547  1F0D  3001               	movlw	1
  9548  1F0E  0020               	movlb	0	; select bank0
  9549  1F0F  00A5               	movwf	??_CC2500_InitPATable
  9550  1F10  0825               	movf	??_CC2500_InitPATable,w
  9551  1F11  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9552  1F12  2EF6               	goto	L5
  9553  1F13                     __end_of_CC2500_InitPATable:	
  9554                           
  9555                           	psect	text46
  9556  1FB8                     __ptext46:	
  9557 ;; *************** function _CC2500_WriteREG *****************
  9558 ;; Defined at:
  9559 ;;		line 258 in file "../src/CC2500_B1.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  w_addr          1    wreg     unsigned char 
  9562 ;;  value           1    2[BANK0 ] unsigned char 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9565 ;; Return value:  Size  Location     Type
  9566 ;;		None               void
  9567 ;; Registers used:
  9568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9574 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;Total ram usage:        3 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; Hardware stack levels required when called:    6
  9581 ;; This function calls:
  9582 ;;		_CC2500_WriteByte
  9583 ;;		_RF_Timeout_Counter
  9584 ;;		_setRF_TimeoutCleared
  9585 ;; This function is called by:
  9586 ;;		_CC2500_InitSetREG
  9587 ;;		_CC2500_InitPATable
  9588 ;; This function uses a non-reentrant model
  9589 ;;
  9590                           
  9591                           
  9592                           ;psect for function _CC2500_WriteREG
  9593  1FB8                     _CC2500_WriteREG:	
  9594                           
  9595                           ;incstack = 0
  9596                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9597                           ;CC2500_WriteREG@w_addr stored from wreg
  9598  1FB8  0020               	movlb	0	; select bank0
  9599  1FB9  00A4               	movwf	CC2500_WriteREG@w_addr
  9600                           
  9601                           ;CC2500_B1.c: 259: RC0 = 0;
  9602  1FBA  100E               	bcf	14,0	;volatile
  9603                           
  9604                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9605  1FBB  0824               	movf	CC2500_WriteREG@w_addr,w
  9606  1FBC  00A3               	movwf	??_CC2500_WriteREG
  9607  1FBD  0823               	movf	??_CC2500_WriteREG,w
  9608  1FBE  0021               	movlb	1	; select bank1
  9609  1FBF  00D1               	movwf	_SPI0Buffer^(0+128)
  9610                           
  9611                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9612  1FC0  2FC4               	goto	l8574
  9613  1FC1                     l8572:	
  9614                           
  9615                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9616  1FC1  319C  24FC  319F   	fcall	_RF_Timeout_Counter
  9617  1FC4                     l8574:	
  9618  1FC4  0020               	movlb	0	; select bank0
  9619  1FC5  1E8E               	btfss	14,5	;volatile
  9620  1FC6  2FCA               	goto	l8578
  9621  1FC7  0021               	movlb	1	; select bank1
  9622  1FC8  1F21               	btfss	(_RF1^(0+128)+1),6
  9623  1FC9  2FC1               	goto	l8572
  9624  1FCA                     l8578:	
  9625                           
  9626                           ;CC2500_B1.c: 263: };
  9627                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9628  1FCA  319A  2237  319F   	fcall	_setRF_TimeoutCleared
  9629                           
  9630                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9631  1FCD  319D  25C5  319F   	fcall	_CC2500_WriteByte
  9632                           
  9633                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9634  1FD0  0020               	movlb	0	; select bank0
  9635  1FD1  0822               	movf	CC2500_WriteREG@value,w
  9636  1FD2  00A3               	movwf	??_CC2500_WriteREG
  9637  1FD3  0823               	movf	??_CC2500_WriteREG,w
  9638  1FD4  0021               	movlb	1	; select bank1
  9639  1FD5  00D1               	movwf	_SPI0Buffer^(0+128)
  9640                           
  9641                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9642  1FD6  319D  25C5         	fcall	_CC2500_WriteByte
  9643                           
  9644                           ;CC2500_B1.c: 269: RC0 = 1;
  9645  1FD8  0020               	movlb	0	; select bank0
  9646  1FD9  140E               	bsf	14,0	;volatile
  9647  1FDA  0008               	return
  9648  1FDB                     __end_of_CC2500_WriteREG:	
  9649                           
  9650                           	psect	text47
  9651  1B56                     __ptext47:	
  9652 ;; *************** function _CC2500_FrequencyCabr *****************
  9653 ;; Defined at:
  9654 ;;		line 208 in file "../src/CC2500_B1.c"
  9655 ;; Parameters:    Size  Location     Type
  9656 ;;		None
  9657 ;; Auto vars:     Size  Location     Type
  9658 ;;		None
  9659 ;; Return value:  Size  Location     Type
  9660 ;;		None               void
  9661 ;; Registers used:
  9662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9663 ;; Tracked objects:
  9664 ;;		On entry : 0/0
  9665 ;;		On exit  : 0/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;Total ram usage:        0 bytes
  9673 ;; Hardware stack levels used:    1
  9674 ;; Hardware stack levels required when called:    7
  9675 ;; This function calls:
  9676 ;;		_CC2500_WriteCommand
  9677 ;;		_DelayTime_1us
  9678 ;; This function is called by:
  9679 ;;		_CC2500_PowerOnInitial
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           
  9684                           ;psect for function _CC2500_FrequencyCabr
  9685  1B56                     _CC2500_FrequencyCabr:	
  9686                           
  9687                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9688                           
  9689                           ;incstack = 0
  9690                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9691  1B56  3033               	movlw	51
  9692  1B57  319E  2612  319B   	fcall	_CC2500_WriteCommand
  9693                           
  9694                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9695  1B5A  30E8               	movlw	232
  9696  1B5B  0020               	movlb	0	; select bank0
  9697  1B5C  00A0               	movwf	DelayTime_1us@count
  9698  1B5D  3003               	movlw	3
  9699  1B5E  00A1               	movwf	DelayTime_1us@count+1
  9700  1B5F  3190  2008         	fcall	_DelayTime_1us
  9701  1B61  0008               	return
  9702  1B62                     __end_of_CC2500_FrequencyCabr:	
  9703                           
  9704                           	psect	text48
  9705  1008                     __ptext48:	
  9706 ;; *************** function _DelayTime_1us *****************
  9707 ;; Defined at:
  9708 ;;		line 327 in file "../src/CC2500_B1.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  count           2    0[BANK0 ] int 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;  j               2    4[BANK0 ] unsigned int 
  9713 ;;  i               2    2[BANK0 ] unsigned int 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;		None               void
  9716 ;; Registers used:
  9717 ;;		wreg, status,2
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9723 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;Total ram usage:        6 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    5
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_CC2500_PowerRST
  9734 ;;		_CC2500_FrequencyCabr
  9735 ;; This function uses a non-reentrant model
  9736 ;;
  9737                           
  9738                           
  9739                           ;psect for function _DelayTime_1us
  9740  1008                     _DelayTime_1us:	
  9741                           
  9742                           ;CC2500_B1.c: 328: unsigned int i, j;
  9743                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9747  1008  3001               	movlw	1
  9748  1009  0020               	movlb	0	; select bank0
  9749  100A  00A2               	movwf	DelayTime_1us@i
  9750  100B  3000               	movlw	0
  9751  100C  00A3               	movwf	DelayTime_1us@i+1
  9752  100D                     l347:	
  9753  100D  0821               	movf	DelayTime_1us@count+1,w
  9754  100E  0223               	subwf	DelayTime_1us@i+1,w
  9755  100F  1D03               	skipz
  9756  1010  2813               	goto	u5535
  9757  1011  0820               	movf	DelayTime_1us@count,w
  9758  1012  0222               	subwf	DelayTime_1us@i,w
  9759  1013                     u5535:	
  9760  1013  1803               	btfsc	3,0
  9761  1014  0008               	return
  9762                           
  9763                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9764  1015  01A4               	clrf	DelayTime_1us@j
  9765  1016  01A5               	clrf	DelayTime_1us@j+1
  9766  1017  3000               	movlw	0
  9767  1018  0225               	subwf	DelayTime_1us@j+1,w
  9768  1019  3002               	movlw	2
  9769  101A  1903               	skipnz
  9770  101B  0224               	subwf	DelayTime_1us@j,w
  9771  101C  1803               	btfsc	3,0
  9772  101D  2829               	goto	l6396
  9773  101E                     l6394:	
  9774  101E  3001               	movlw	1
  9775  101F  07A4               	addwf	DelayTime_1us@j,f
  9776  1020  3000               	movlw	0
  9777  1021  3DA5               	addwfc	DelayTime_1us@j+1,f
  9778  1022  3000               	movlw	0
  9779  1023  0225               	subwf	DelayTime_1us@j+1,w
  9780  1024  3002               	movlw	2
  9781  1025  1903               	skipnz
  9782  1026  0224               	subwf	DelayTime_1us@j,w
  9783  1027  1C03               	skipc
  9784  1028  281E               	goto	l6394
  9785  1029                     l6396:	
  9786  1029  3001               	movlw	1
  9787  102A  07A2               	addwf	DelayTime_1us@i,f
  9788  102B  3000               	movlw	0
  9789  102C  3DA3               	addwfc	DelayTime_1us@i+1,f
  9790  102D  280D               	goto	l347
  9791  102E                     __end_of_DelayTime_1us:	
  9792                           
  9793                           	psect	text49
  9794  1A3F                     __ptext49:	
  9795 ;; *************** function _CC2500_ClearTXFIFO *****************
  9796 ;; Defined at:
  9797 ;;		line 194 in file "../src/CC2500_B1.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;		None
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;Total ram usage:        0 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    7
  9818 ;; This function calls:
  9819 ;;		_CC2500_WriteCommand
  9820 ;; This function is called by:
  9821 ;;		_CC2500_PowerOnInitial
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _CC2500_ClearTXFIFO
  9827  1A3F                     _CC2500_ClearTXFIFO:	
  9828                           
  9829                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9833  1A3F  303B               	movlw	59
  9834  1A40  319E  2612         	fcall	_CC2500_WriteCommand
  9835  1A42  0008               	return
  9836  1A43                     __end_of_CC2500_ClearTXFIFO:	
  9837                           
  9838                           	psect	text50
  9839  1A3B                     __ptext50:	
  9840 ;; *************** function _CC2500_ClearRXFIFO *****************
  9841 ;; Defined at:
  9842 ;;		line 201 in file "../src/CC2500_B1.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;		None               void
  9849 ;; Registers used:
  9850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;Total ram usage:        0 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    7
  9863 ;; This function calls:
  9864 ;;		_CC2500_WriteCommand
  9865 ;; This function is called by:
  9866 ;;		_CC2500_PowerOnInitial
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _CC2500_ClearRXFIFO
  9872  1A3B                     _CC2500_ClearRXFIFO:	
  9873                           
  9874                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9878  1A3B  303A               	movlw	58
  9879  1A3C  319E  2612         	fcall	_CC2500_WriteCommand
  9880  1A3E  0008               	return
  9881  1A3F                     __end_of_CC2500_ClearRXFIFO:	
  9882                           
  9883                           	psect	text51
  9884  1E12                     __ptext51:	
  9885 ;; *************** function _CC2500_WriteCommand *****************
  9886 ;; Defined at:
  9887 ;;		line 292 in file "../src/CC2500_B1.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  command         1    wreg     unsigned char 
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  command         1    3[BANK0 ] unsigned char 
  9892 ;; Return value:  Size  Location     Type
  9893 ;;		None               void
  9894 ;; Registers used:
  9895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9896 ;; Tracked objects:
  9897 ;;		On entry : 0/0
  9898 ;;		On exit  : 0/0
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;Total ram usage:        2 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:    6
  9908 ;; This function calls:
  9909 ;;		_CC2500_WriteByte
  9910 ;;		_RF_Timeout_Counter
  9911 ;;		_setRF_TimeoutCleared
  9912 ;; This function is called by:
  9913 ;;		_CC2500_TxData
  9914 ;;		_CC2500_RxData
  9915 ;;		_CC2500_ClearTXFIFO
  9916 ;;		_CC2500_ClearRXFIFO
  9917 ;;		_CC2500_FrequencyCabr
  9918 ;;		_CC2500_SIDLEMode
  9919 ;;		_setRF_Main
  9920 ;;		_RF_RxDisable
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function _CC2500_WriteCommand
  9926  1E12                     _CC2500_WriteCommand:	
  9927                           
  9928                           ;incstack = 0
  9929                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9930                           ;CC2500_WriteCommand@command stored from wreg
  9931  1E12  0020               	movlb	0	; select bank0
  9932  1E13  00A3               	movwf	CC2500_WriteCommand@command
  9933                           
  9934                           ;CC2500_B1.c: 293: RC0 = 0;
  9935  1E14  100E               	bcf	14,0	;volatile
  9936                           
  9937                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9938  1E15  0823               	movf	CC2500_WriteCommand@command,w
  9939  1E16  00A2               	movwf	??_CC2500_WriteCommand
  9940  1E17  0822               	movf	??_CC2500_WriteCommand,w
  9941  1E18  0021               	movlb	1	; select bank1
  9942  1E19  00D1               	movwf	_SPI0Buffer^(0+128)
  9943                           
  9944                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9945  1E1A  2E1E               	goto	l8540
  9946  1E1B                     l8538:	
  9947                           
  9948                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9949  1E1B  319C  24FC  319E   	fcall	_RF_Timeout_Counter
  9950  1E1E                     l8540:	
  9951  1E1E  0020               	movlb	0	; select bank0
  9952  1E1F  1E8E               	btfss	14,5	;volatile
  9953  1E20  2E24               	goto	l8544
  9954  1E21  0021               	movlb	1	; select bank1
  9955  1E22  1F21               	btfss	(_RF1^(0+128)+1),6
  9956  1E23  2E1B               	goto	l8538
  9957  1E24                     l8544:	
  9958                           
  9959                           ;CC2500_B1.c: 298: };
  9960                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9961  1E24  319A  2237  319E   	fcall	_setRF_TimeoutCleared
  9962                           
  9963                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9964  1E27  319D  25C5         	fcall	_CC2500_WriteByte
  9965                           
  9966                           ;CC2500_B1.c: 302: RC0 = 1;
  9967  1E29  0020               	movlb	0	; select bank0
  9968  1E2A  140E               	bsf	14,0	;volatile
  9969  1E2B  0008               	return
  9970  1E2C                     __end_of_CC2500_WriteCommand:	
  9971                           
  9972                           	psect	text52
  9973  1A37                     __ptext52:	
  9974 ;; *************** function _setRF_TimeoutCleared *****************
  9975 ;; Defined at:
  9976 ;;		line 149 in file "../src/RF_Control_B1.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;		None
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;		None
  9981 ;; Return value:  Size  Location     Type
  9982 ;;		None               void
  9983 ;; Registers used:
  9984 ;;		status,2
  9985 ;; Tracked objects:
  9986 ;;		On entry : 0/0
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;Total ram usage:        0 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    5
  9997 ;; This function calls:
  9998 ;;		Nothing
  9999 ;; This function is called by:
 10000 ;;		_CC2500_TxData
 10001 ;;		_CC2500_RxData
 10002 ;;		_CC2500_PowerRST
 10003 ;;		_CC2500_WriteREG
 10004 ;;		_CC2500_WriteCommand
 10005 ;;		_CC2500_ReadStatus
 10006 ;;		_CC2500_ReadREG
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           
 10011                           ;psect for function _setRF_TimeoutCleared
 10012  1A37                     _setRF_TimeoutCleared:	
 10013                           
 10014                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10015                           
 10016                           ;incstack = 0
 10017                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10018  1A37  0021               	movlb	1	; select bank1
 10019  1A38  01AD               	clrf	(_RF1^(0+128)+13)
 10020  1A39  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10021  1A3A  0008               	return
 10022  1A3B                     __end_of_setRF_TimeoutCleared:	
 10023                           
 10024                           	psect	text53
 10025  1CFC                     __ptext53:	
 10026 ;; *************** function _RF_Timeout_Counter *****************
 10027 ;; Defined at:
 10028 ;;		line 141 in file "../src/RF_Control_B1.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    5
 10049 ;; This function calls:
 10050 ;;		Nothing
 10051 ;; This function is called by:
 10052 ;;		_CC2500_TxData
 10053 ;;		_CC2500_RxData
 10054 ;;		_CC2500_PowerRST
 10055 ;;		_CC2500_WriteREG
 10056 ;;		_CC2500_WriteCommand
 10057 ;;		_CC2500_ReadStatus
 10058 ;;		_CC2500_ReadREG
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062                           
 10063                           ;psect for function _RF_Timeout_Counter
 10064  1CFC                     _RF_Timeout_Counter:	
 10065                           
 10066                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10067                           
 10068                           ;incstack = 0
 10069                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10070  1CFC  3001               	movlw	1
 10071  1CFD  0021               	movlb	1	; select bank1
 10072  1CFE  07AD               	addwf	(_RF1^(0+128)+13),f
 10073  1CFF  3000               	movlw	0
 10074  1D00  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10075                           
 10076                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10077  1D01  300D               	movlw	13
 10078  1D02  3EA0               	addlw	_RF1& (0+255)
 10079  1D03  0086               	movwf	6
 10080  1D04  0187               	clrf	7
 10081  1D05  3F40               	moviw [0]fsr1
 10082  1D06  3AA8               	xorlw	168
 10083  1D07  1D03               	skipz
 10084  1D08  2D0B               	goto	u8815
 10085  1D09  3F41               	moviw [1]fsr1
 10086  1D0A  3A61               	xorlw	97
 10087  1D0B                     u8815:	
 10088  1D0B  1D03               	skipz
 10089  1D0C  0008               	return
 10090                           
 10091                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10092  1D0D  01AD               	clrf	(_RF1^(0+128)+13)
 10093  1D0E  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10094                           
 10095                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10096  1D0F  1721               	bsf	(_RF1^(0+128)+1),6
 10097  1D10  0008               	return
 10098  1D11                     __end_of_RF_Timeout_Counter:	
 10099                           
 10100                           	psect	text54
 10101  1DC5                     __ptext54:	
 10102 ;; *************** function _CC2500_WriteByte *****************
 10103 ;; Defined at:
 10104 ;;		line 226 in file "../src/CC2500_B1.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;		None
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10109 ;; Return value:  Size  Location     Type
 10110 ;;		None               void
 10111 ;; Registers used:
 10112 ;;		wreg, status,2, status,0
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;Total ram usage:        2 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; Hardware stack levels required when called:    5
 10125 ;; This function calls:
 10126 ;;		Nothing
 10127 ;; This function is called by:
 10128 ;;		_CC2500_TxData
 10129 ;;		_CC2500_RxData
 10130 ;;		_CC2500_PowerRST
 10131 ;;		_CC2500_WriteREG
 10132 ;;		_CC2500_WriteCommand
 10133 ;;		_CC2500_ReadStatus
 10134 ;;		_CC2500_ReadREG
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           
 10139                           ;psect for function _CC2500_WriteByte
 10140  1DC5                     _CC2500_WriteByte:	
 10141                           
 10142                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10143                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10144                           
 10145                           ;incstack = 0
 10146                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10147  1DC5  0020               	movlb	0	; select bank0
 10148  1DC6  01A1               	clrf	CC2500_WriteByte@loop_a
 10149  1DC7                     L6:	
 10150  1DC7  3008               	movlw	8
 10151  1DC8  0221               	subwf	CC2500_WriteByte@loop_a,w
 10152  1DC9  1803               	btfsc	3,0
 10153  1DCA  0008               	return
 10154                           
 10155                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10156  1DCB  0021               	movlb	1	; select bank1
 10157  1DCC  1FD1               	btfss	_SPI0Buffer^(0+128),7
 10158  1DCD  2DD1               	goto	l303
 10159                           
 10160                           ;CC2500_B1.c: 230: RC4 = 1;
 10161  1DCE  0020               	movlb	0	; select bank0
 10162  1DCF  160E               	bsf	14,4	;volatile
 10163  1DD0  2DD3               	goto	l304
 10164  1DD1                     l303:	
 10165                           
 10166                           ;CC2500_B1.c: 231: else
 10167                           ;CC2500_B1.c: 232: RC4 = 0;
 10168  1DD1  0020               	movlb	0	; select bank0
 10169  1DD2  120E               	bcf	14,4	;volatile
 10170  1DD3                     l304:	
 10171                           
 10172                           ;CC2500_B1.c: 233: RC3 = 1;
 10173  1DD3  158E               	bsf	14,3	;volatile
 10174                           
 10175                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10176  1DD4  1003               	clrc
 10177  1DD5  0021               	movlb	1	; select bank1
 10178  1DD6  0DD1               	rlf	_SPI0Buffer^(0+128),f
 10179                           
 10180                           ;CC2500_B1.c: 235: RC3 = 0;
 10181  1DD7  0020               	movlb	0	; select bank0
 10182  1DD8  118E               	bcf	14,3	;volatile
 10183  1DD9  3001               	movlw	1
 10184  1DDA  00A0               	movwf	??_CC2500_WriteByte
 10185  1DDB  0820               	movf	??_CC2500_WriteByte,w
 10186  1DDC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10187  1DDD  2DC7               	goto	L6
 10188  1DDE                     __end_of_CC2500_WriteByte:	
 10189                           
 10190                           	psect	text55
 10191  1A17                     __ptext55:	
 10192 ;; *************** function _RF_Initialization *****************
 10193 ;; Defined at:
 10194 ;;		line 9 in file "../src/RF_Control_B1.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;		None
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;		None
 10199 ;; Return value:  Size  Location     Type
 10200 ;;		None               void
 10201 ;; Registers used:
 10202 ;;		wreg, status,2, status,0, pclath, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;Total ram usage:        0 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    6
 10215 ;; This function calls:
 10216 ;;		_setRF_Initialization
 10217 ;; This function is called by:
 10218 ;;		_main
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           
 10223                           ;psect for function _RF_Initialization
 10224  1A17                     _RF_Initialization:	
 10225                           
 10226                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10227                           
 10228                           ;incstack = 0
 10229                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10230  1A17  319A  22D3         	fcall	_setRF_Initialization
 10231  1A19  0008               	return
 10232  1A1A                     __end_of_RF_Initialization:	
 10233                           
 10234                           	psect	text56
 10235  1AD3                     __ptext56:	
 10236 ;; *************** function _setRF_Initialization *****************
 10237 ;; Defined at:
 10238 ;;		line 17 in file "../src/RF_Control_B1.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;		None
 10243 ;; Return value:  Size  Location     Type
 10244 ;;		None               void
 10245 ;; Registers used:
 10246 ;;		wreg
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;Total ram usage:        1 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    5
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_RF_Initialization
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           
 10267                           ;psect for function _setRF_Initialization
 10268  1AD3                     _setRF_Initialization:	
 10269                           
 10270                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _setRF_Initialization: [wreg]
 10274  1AD3  3015               	movlw	21
 10275  1AD4  0020               	movlb	0	; select bank0
 10276  1AD5  00A0               	movwf	??_setRF_Initialization
 10277  1AD6  0820               	movf	??_setRF_Initialization,w
 10278  1AD7  0021               	movlb	1	; select bank1
 10279  1AD8  00D4               	movwf	_Tx_Length^(0+128)
 10280                           
 10281                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10282  1AD9  30C8               	movlw	200
 10283  1ADA  00A8               	movwf	(_RF1^(0+128)+8)
 10284  1ADB  3000               	movlw	0
 10285  1ADC  00A9               	movwf	(_RF1^(0+128)+9)
 10286  1ADD  0008               	return
 10287  1ADE                     __end_of_setRF_Initialization:	
 10288                           
 10289                           	psect	text57
 10290  1C65                     __ptext57:	
 10291 ;; *************** function _Mcu_Initialization *****************
 10292 ;; Defined at:
 10293 ;;		line 30 in file "../src/MCU_B1.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;		None
 10298 ;; Return value:  Size  Location     Type
 10299 ;;		None               void
 10300 ;; Registers used:
 10301 ;;		wreg, status,2, status,0, pclath, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:        0 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    6
 10314 ;; This function calls:
 10315 ;;		_ADC_Set
 10316 ;;		_Fosc_Set
 10317 ;;		_IOC_Set
 10318 ;;		_IO_Set
 10319 ;;		_TMR1_Set
 10320 ;;		_WDT_Set
 10321 ;; This function is called by:
 10322 ;;		_main
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function _Mcu_Initialization
 10328  1C65                     _Mcu_Initialization:	
 10329                           
 10330                           ;MCU_B1.c: 32: Fosc_Set();
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10334  1C65  319A  2233  319C   	fcall	_Fosc_Set
 10335                           
 10336                           ;MCU_B1.c: 34: IO_Set();
 10337  1C68  319D  25F8  319C   	fcall	_IO_Set
 10338                           
 10339                           ;MCU_B1.c: 36: ;;
 10340                           ;MCU_B1.c: 38: TMR1_Set();
 10341  1C6B  319B  233E  319C   	fcall	_TMR1_Set
 10342                           
 10343                           ;MCU_B1.c: 40: ADC_Set();
 10344  1C6E  319A  226F  319C   	fcall	_ADC_Set
 10345                           
 10346                           ;MCU_B1.c: 42: ;;
 10347                           ;MCU_B1.c: 44: ;;
 10348                           ;MCU_B1.c: 46: IOC_Set();
 10349  1C71  319A  22C8  319C   	fcall	_IOC_Set
 10350                           
 10351                           ;MCU_B1.c: 48: ;;
 10352                           ;MCU_B1.c: 50: ;;
 10353                           ;MCU_B1.c: 52: WDT_Set();
 10354  1C74  319B  234A         	fcall	_WDT_Set
 10355  1C76  0008               	return
 10356  1C77                     __end_of_Mcu_Initialization:	
 10357                           
 10358                           	psect	text58
 10359  1B4A                     __ptext58:	
 10360 ;; *************** function _WDT_Set *****************
 10361 ;; Defined at:
 10362 ;;		line 1102 in file "../src/MCU_B1.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;		None
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;		None
 10367 ;; Return value:  Size  Location     Type
 10368 ;;		None               void
 10369 ;; Registers used:
 10370 ;;		wreg
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;Total ram usage:        1 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    5
 10383 ;; This function calls:
 10384 ;;		Nothing
 10385 ;; This function is called by:
 10386 ;;		_Mcu_Initialization
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _WDT_Set
 10392  1B4A                     _WDT_Set:	
 10393                           
 10394                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in _WDT_Set: [wreg]
 10398  1B4A  3017               	movlw	23
 10399  1B4B  0021               	movlb	1	; select bank1
 10400  1B4C  0097               	movwf	23	;volatile
 10401                           
 10402                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10403  1B4D  0022               	movlb	2	; select bank2
 10404  1B4E  1436               	bsf	_WDT^(0+256),0
 10405                           
 10406                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10407  1B4F  300A               	movlw	10
 10408  1B50  0020               	movlb	0	; select bank0
 10409  1B51  00A0               	movwf	??_WDT_Set
 10410  1B52  0820               	movf	??_WDT_Set,w
 10411  1B53  0022               	movlb	2	; select bank2
 10412  1B54  00B7               	movwf	(_WDT^(0+256)+1)
 10413  1B55  0008               	return
 10414  1B56                     __end_of_WDT_Set:	
 10415                           
 10416                           	psect	text59
 10417  1B3E                     __ptext59:	
 10418 ;; *************** function _TMR1_Set *****************
 10419 ;; Defined at:
 10420 ;;		line 226 in file "../src/MCU_B1.c"
 10421 ;; Parameters:    Size  Location     Type
 10422 ;;		None
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;		None
 10425 ;; Return value:  Size  Location     Type
 10426 ;;		None               void
 10427 ;; Registers used:
 10428 ;;		wreg
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;Total ram usage:        0 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:    5
 10441 ;; This function calls:
 10442 ;;		Nothing
 10443 ;; This function is called by:
 10444 ;;		_Mcu_Initialization
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           
 10449                           ;psect for function _TMR1_Set
 10450  1B3E                     _TMR1_Set:	
 10451                           
 10452                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10453                           
 10454                           ;incstack = 0
 10455                           ; Regs used in _TMR1_Set: [wreg]
 10456  1B3E  3041               	movlw	65
 10457  1B3F  0020               	movlb	0	; select bank0
 10458  1B40  0098               	movwf	24	;volatile
 10459                           
 10460                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10461  1B41  30FA               	movlw	250
 10462  1B42  0097               	movwf	23	;volatile
 10463                           
 10464                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10465  1B43  3038               	movlw	56
 10466  1B44  0096               	movwf	22	;volatile
 10467                           
 10468                           ;MCU_B1.c: 230: TMR1IE = 1;
 10469  1B45  0021               	movlb	1	; select bank1
 10470  1B46  1411               	bsf	17,0	;volatile
 10471                           
 10472                           ;MCU_B1.c: 231: PEIE = 1;
 10473  1B47  170B               	bsf	11,6	;volatile
 10474                           
 10475                           ;MCU_B1.c: 232: GIE = 1;
 10476  1B48  178B               	bsf	11,7	;volatile
 10477  1B49  0008               	return
 10478  1B4A                     __end_of_TMR1_Set:	
 10479                           
 10480                           	psect	text60
 10481  1DF8                     __ptext60:	
 10482 ;; *************** function _IO_Set *****************
 10483 ;; Defined at:
 10484 ;;		line 60 in file "../src/MCU_B1.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;		None
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;		None
 10489 ;; Return value:  Size  Location     Type
 10490 ;;		None               void
 10491 ;; Registers used:
 10492 ;;		wreg, status,2
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:        0 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		Nothing
 10507 ;; This function is called by:
 10508 ;;		_Mcu_Initialization
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           
 10513                           ;psect for function _IO_Set
 10514  1DF8                     _IO_Set:	
 10515                           
 10516                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10517                           
 10518                           ;incstack = 0
 10519                           ; Regs used in _IO_Set: [wreg+status,2]
 10520  1DF8  30F7               	movlw	247
 10521  1DF9  0021               	movlb	1	; select bank1
 10522  1DFA  008C               	movwf	12	;volatile
 10523                           
 10524                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10525  1DFB  3004               	movlw	4
 10526  1DFC  008D               	movwf	13	;volatile
 10527                           
 10528                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10529  1DFD  3026               	movlw	38
 10530  1DFE  008E               	movwf	14	;volatile
 10531                           
 10532                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10533  1DFF  0022               	movlb	2	; select bank2
 10534  1E00  018C               	clrf	12	;volatile
 10535                           
 10536                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10537  1E01  018D               	clrf	13	;volatile
 10538                           
 10539                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10540  1E02  018E               	clrf	14	;volatile
 10541                           
 10542                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10543  1E03  300E               	movlw	14
 10544  1E04  0023               	movlb	3	; select bank3
 10545  1E05  008C               	movwf	12	;volatile
 10546                           
 10547                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10548  1E06  018D               	clrf	13	;volatile
 10549                           
 10550                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10551  1E07  018E               	clrf	14	;volatile
 10552                           
 10553                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10554  1E08  30F7               	movlw	247
 10555  1E09  0020               	movlb	0	; select bank0
 10556  1E0A  008C               	movwf	12	;volatile
 10557                           
 10558                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10559  1E0B  3004               	movlw	4
 10560  1E0C  008D               	movwf	13	;volatile
 10561                           
 10562                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10563  1E0D  3026               	movlw	38
 10564  1E0E  008E               	movwf	14	;volatile
 10565                           
 10566                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10567  1E0F  0024               	movlb	4	; select bank4
 10568  1E10  018D               	clrf	13	;volatile
 10569  1E11  0008               	return
 10570  1E12                     __end_of_IO_Set:	
 10571                           
 10572                           	psect	text61
 10573  1AC8                     __ptext61:	
 10574 ;; *************** function _IOC_Set *****************
 10575 ;; Defined at:
 10576 ;;		line 380 in file "../src/MCU_B1.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;		None
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;		None
 10581 ;; Return value:  Size  Location     Type
 10582 ;;		None               void
 10583 ;; Registers used:
 10584 ;;		wreg, status,2
 10585 ;; Tracked objects:
 10586 ;;		On entry : 0/0
 10587 ;;		On exit  : 0/0
 10588 ;;		Unchanged: 0/0
 10589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;Total ram usage:        0 bytes
 10595 ;; Hardware stack levels used:    1
 10596 ;; Hardware stack levels required when called:    5
 10597 ;; This function calls:
 10598 ;;		Nothing
 10599 ;; This function is called by:
 10600 ;;		_Mcu_Initialization
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           
 10605                           ;psect for function _IOC_Set
 10606  1AC8                     _IOC_Set:	
 10607                           
 10608                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10609                           
 10610                           ;incstack = 0
 10611                           ; Regs used in _IOC_Set: [wreg+status,2]
 10612  1AC8  3004               	movlw	4
 10613  1AC9  0027               	movlb	7	; select bank7
 10614  1ACA  0094               	movwf	20	;volatile
 10615                           
 10616                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10617  1ACB  3004               	movlw	4
 10618  1ACC  0095               	movwf	21	;volatile
 10619                           
 10620                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10621  1ACD  0196               	clrf	22	;volatile
 10622                           
 10623                           ;MCU_B1.c: 387: IOCIE = 1;
 10624  1ACE  158B               	bsf	11,3	;volatile
 10625                           
 10626                           ;MCU_B1.c: 388: IOCIF = 0;
 10627  1ACF  100B               	bcf	11,0	;volatile
 10628                           
 10629                           ;MCU_B1.c: 389: PEIE = 1;
 10630  1AD0  170B               	bsf	11,6	;volatile
 10631                           
 10632                           ;MCU_B1.c: 390: GIE = 1;
 10633  1AD1  178B               	bsf	11,7	;volatile
 10634  1AD2  0008               	return
 10635  1AD3                     __end_of_IOC_Set:	
 10636                           
 10637                           	psect	text62
 10638  1A33                     __ptext62:	
 10639 ;; *************** function _Fosc_Set *****************
 10640 ;; Defined at:
 10641 ;;		line 56 in file "../src/MCU_B1.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;		None
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;		None
 10646 ;; Return value:  Size  Location     Type
 10647 ;;		None               void
 10648 ;; Registers used:
 10649 ;;		wreg
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;Total ram usage:        0 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:    5
 10662 ;; This function calls:
 10663 ;;		Nothing
 10664 ;; This function is called by:
 10665 ;;		_Mcu_Initialization
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           
 10670                           ;psect for function _Fosc_Set
 10671  1A33                     _Fosc_Set:	
 10672                           
 10673                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10674                           
 10675                           ;incstack = 0
 10676                           ; Regs used in _Fosc_Set: [wreg]
 10677  1A33  3078               	movlw	120
 10678  1A34  0021               	movlb	1	; select bank1
 10679  1A35  0099               	movwf	25	;volatile
 10680  1A36  0008               	return
 10681  1A37                     __end_of_Fosc_Set:	
 10682                           
 10683                           	psect	text63
 10684  1A6F                     __ptext63:	
 10685 ;; *************** function _ADC_Set *****************
 10686 ;; Defined at:
 10687 ;;		line 427 in file "../src/MCU_B1.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;		None
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;		None
 10692 ;; Return value:  Size  Location     Type
 10693 ;;		None               void
 10694 ;; Registers used:
 10695 ;;		wreg
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;Total ram usage:        0 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    5
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_Mcu_Initialization
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           
 10716                           ;psect for function _ADC_Set
 10717  1A6F                     _ADC_Set:	
 10718                           
 10719                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10720                           
 10721                           ;incstack = 0
 10722                           ; Regs used in _ADC_Set: [wreg]
 10723  1A6F  30F3               	movlw	243
 10724  1A70  0021               	movlb	1	; select bank1
 10725  1A71  009E               	movwf	30	;volatile
 10726                           
 10727                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10728  1A72  30C1               	movlw	193
 10729  1A73  0022               	movlb	2	; select bank2
 10730  1A74  0097               	movwf	23	;volatile
 10731  1A75  0008               	return
 10732  1A76                     __end_of_ADC_Set:	
 10733                           
 10734                           	psect	text64
 10735  0053                     __ptext64:	
 10736 ;; *************** function _Load_Main *****************
 10737 ;; Defined at:
 10738 ;;		line 40 in file "../src/OverLoad_B1.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;		None
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;  i               2   16[BANK0 ] int 
 10743 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10744 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10745 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10746 ;;  error           1   12[BANK0 ] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;		None               void
 10749 ;; Registers used:
 10750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;Total ram usage:       10 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    6
 10763 ;; This function calls:
 10764 ;;		___lwdiv
 10765 ;;		___wmul
 10766 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10767 ;;		_getDimmer_LoadGO
 10768 ;;		_getDimmer_Load_Status
 10769 ;;		_getMain_All_Error_Status
 10770 ;;		_getMain_All_LightsStatus
 10771 ;;		_getMain_Lights_Count
 10772 ;;		_setLoad_AH_AL_Restore
 10773 ;; This function is called by:
 10774 ;;		_main
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           
 10779                           ;psect for function _Load_Main
 10780  0053                     _Load_Main:	
 10781                           
 10782                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10783                           
 10784                           ;incstack = 0
 10785                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10786  0053  3000               	movlw	0
 10787  0054  3190  20DE  3180   	fcall	_getMain_All_Error_Status
 10788  0057  0020               	movlb	0	; select bank0
 10789  0058  00A8               	movwf	??_Load_Main
 10790  0059  0828               	movf	??_Load_Main,w
 10791  005A  00AC               	movwf	Load_Main@error
 10792                           
 10793                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10794  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10795  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10796  005D  01AF               	clrf	Load_Main@LightsCount
 10797                           
 10798                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10799  005E  0022               	movlb	2	; select bank2
 10800  005F  1C38               	btfss	_Load^(0+256),0
 10801  0060  29FF               	goto	l1629
 10802                           
 10803                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10804  0061  319A  22A8  3180   	fcall	_getMain_All_LightsStatus
 10805  0064  3800               	iorlw	0
 10806  0065  1D03               	skipz
 10807  0066  2869               	goto	l8134
 10808                           
 10809                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10810  0067  0022               	movlb	2	; select bank2
 10811  0068  288A               	goto	l8152
 10812  0069                     l8134:	
 10813                           ;OverLoad_B1.c: 47: } else {
 10814                           
 10815                           
 10816                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10817  0069  0020               	movlb	0	; select bank0
 10818  006A  08AC               	movf	Load_Main@error,f
 10819  006B  1D03               	skipz
 10820  006C  2887               	goto	l1632
 10821  006D  319C  24AF  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10822  0070  3800               	iorlw	0
 10823  0071  1D03               	skipz
 10824  0072  2887               	goto	l1632
 10825                           
 10826                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10827  0073  0022               	movlb	2	; select bank2
 10828  0074  14B8               	bsf	_Load^(0+256),1
 10829                           
 10830                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10831  0075  319A  2285  3180   	fcall	_getDimmer_LoadGO
 10832  0078  3A01               	xorlw	1
 10833  0079  1D03               	skipz
 10834  007A  2882               	goto	l1633
 10835                           
 10836                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10837  007B  0022               	movlb	2	; select bank2
 10838  007C  1DB8               	btfss	_Load^(0+256),3
 10839  007D  1BB8               	btfsc	_Load^(0+256),7
 10840  007E  288B               	goto	l1631
 10841                           
 10842                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10843  007F  15B8               	bsf	_Load^(0+256),3
 10844                           
 10845                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10846  0080  01DD               	clrf	(_Load^(0+256)+37)
 10847                           
 10848                           ;OverLoad_B1.c: 57: }
 10849                           ;OverLoad_B1.c: 58: } else {
 10850  0081  288B               	goto	l1631
 10851  0082                     l1633:	
 10852                           
 10853                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10854  0082  0022               	movlb	2	; select bank2
 10855  0083  1FB8               	btfss	_Load^(0+256),7
 10856  0084  288B               	goto	l1631
 10857                           
 10858                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10859  0085  13B8               	bcf	_Load^(0+256),7
 10860                           
 10861                           ;OverLoad_B1.c: 61: }
 10862                           ;OverLoad_B1.c: 62: }
 10863                           ;OverLoad_B1.c: 63: } else {
 10864  0086  288B               	goto	l1631
 10865  0087                     l1632:	
 10866                           
 10867                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10868  0087  0022               	movlb	2	; select bank2
 10869  0088  1CB8               	btfss	_Load^(0+256),1
 10870  0089  288B               	goto	l1631
 10871  008A                     l8152:	
 10872                           
 10873                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10874  008A  10B8               	bcf	_Load^(0+256),1
 10875  008B                     l1631:	
 10876                           
 10877                           ;OverLoad_B1.c: 66: }
 10878                           ;OverLoad_B1.c: 67: }
 10879                           ;OverLoad_B1.c: 89: }
 10880                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10881  008B  1CB8               	btfss	_Load^(0+256),1
 10882  008C  29DB               	goto	l1639
 10883                           
 10884                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10885  008D  1538               	bsf	_Load^(0+256),2
 10886                           
 10887                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10888  008E  1E38               	btfss	_Load^(0+256),4
 10889  008F  29D9               	goto	l1640
 10890                           
 10891                           ;OverLoad_B1.c: 96: Load.Time++;
 10892  0090  3001               	movlw	1
 10893  0091  07B9               	addwf	(_Load^(0+256)+1),f
 10894  0092  3000               	movlw	0
 10895  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 10896                           
 10897                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10898  0094  3000               	movlw	0
 10899  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 10900  0096  3002               	movlw	2
 10901  0097  1903               	skipnz
 10902  0098  0239               	subwf	(_Load^(0+256)+1),w
 10903  0099  1C03               	skipc
 10904  009A  0008               	return
 10905                           
 10906                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10907  009B  01B9               	clrf	(_Load^(0+256)+1)
 10908  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 10909                           
 10910                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10911  009D  1238               	bcf	_Load^(0+256),4
 10912                           
 10913                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10914  009E  3001               	movlw	1
 10915  009F  0020               	movlb	0	; select bank0
 10916  00A0  00B0               	movwf	Load_Main@i
 10917  00A1  3000               	movlw	0
 10918  00A2  00B1               	movwf	Load_Main@i+1
 10919  00A3  0831               	movf	Load_Main@i+1,w
 10920  00A4  3A80               	xorlw	128
 10921  00A5  00A8               	movwf	??_Load_Main
 10922  00A6  3080               	movlw	128
 10923  00A7  0228               	subwf	??_Load_Main,w
 10924  00A8  1D03               	skipz
 10925  00A9  28AC               	goto	u8375
 10926  00AA  3004               	movlw	4
 10927  00AB  0230               	subwf	Load_Main@i,w
 10928  00AC                     u8375:	
 10929  00AC  1803               	btfsc	3,0
 10930  00AD  28E0               	goto	l8174
 10931  00AE                     l8168:	
 10932                           
 10933                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10934  00AE  0020               	movlb	0	; select bank0
 10935  00AF  3530               	lslf	Load_Main@i,w
 10936  00B0  3E43               	addlw	(_Load+11)& (0+255)
 10937  00B1  0086               	movwf	6
 10938  00B2  3001               	movlw	1	; select bank2/3
 10939  00B3  0087               	movwf	7
 10940  00B4  3F40               	moviw [0]fsr1
 10941  00B5  00A8               	movwf	??_Load_Main
 10942  00B6  3F41               	moviw [1]fsr1
 10943  00B7  00A9               	movwf	??_Load_Main+1
 10944  00B8  0828               	movf	??_Load_Main,w
 10945  00B9  0022               	movlb	2	; select bank2
 10946  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 10947  00BB  0020               	movlb	0	; select bank0
 10948  00BC  0829               	movf	??_Load_Main+1,w
 10949  00BD  0022               	movlb	2	; select bank2
 10950  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 10951                           
 10952                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10953  00BF  0020               	movlb	0	; select bank0
 10954  00C0  3530               	lslf	Load_Main@i,w
 10955  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 10956  00C2  0086               	movwf	6
 10957  00C3  3001               	movlw	1	; select bank2/3
 10958  00C4  0087               	movwf	7
 10959  00C5  3F40               	moviw [0]fsr1
 10960  00C6  00A8               	movwf	??_Load_Main
 10961  00C7  3F41               	moviw [1]fsr1
 10962  00C8  00A9               	movwf	??_Load_Main+1
 10963  00C9  0828               	movf	??_Load_Main,w
 10964  00CA  0022               	movlb	2	; select bank2
 10965  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 10966  00CC  0020               	movlb	0	; select bank0
 10967  00CD  0829               	movf	??_Load_Main+1,w
 10968  00CE  0022               	movlb	2	; select bank2
 10969  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 10970  00D0  3001               	movlw	1
 10971  00D1  0020               	movlb	0	; select bank0
 10972  00D2  07B0               	addwf	Load_Main@i,f
 10973  00D3  3000               	movlw	0
 10974  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10975  00D5  0831               	movf	Load_Main@i+1,w
 10976  00D6  3A80               	xorlw	128
 10977  00D7  00A8               	movwf	??_Load_Main
 10978  00D8  3080               	movlw	128
 10979  00D9  0228               	subwf	??_Load_Main,w
 10980  00DA  1D03               	skipz
 10981  00DB  28DE               	goto	u8385
 10982  00DC  3004               	movlw	4
 10983  00DD  0230               	subwf	Load_Main@i,w
 10984  00DE                     u8385:	
 10985  00DE  1C03               	skipc
 10986  00DF  28AE               	goto	l8168
 10987  00E0                     l8174:	
 10988                           
 10989                           ;OverLoad_B1.c: 104: }
 10990                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10991  00E0  3003               	movlw	3
 10992  00E1  0020               	movlb	0	; select bank0
 10993  00E2  00A0               	movwf	___lwdiv@divisor
 10994  00E3  3000               	movlw	0
 10995  00E4  00A1               	movwf	___lwdiv@divisor+1
 10996  00E5  0022               	movlb	2	; select bank2
 10997  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 10998  00E7  0020               	movlb	0	; select bank0
 10999  00E8  01A3               	clrf	___lwdiv@dividend+1
 11000  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11001  00EA  0022               	movlb	2	; select bank2
 11002  00EB  083D               	movf	(_Load^(0+256)+5),w
 11003  00EC  0020               	movlb	0	; select bank0
 11004  00ED  01A2               	clrf	___lwdiv@dividend
 11005  00EE  07A2               	addwf	___lwdiv@dividend,f
 11006  00EF  3191  217B  3180   	fcall	___lwdiv
 11007  00F2  0020               	movlb	0	; select bank0
 11008  00F3  0821               	movf	?___lwdiv+1,w
 11009  00F4  0022               	movlb	2	; select bank2
 11010  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11011  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11012  00F7  0020               	movlb	0	; select bank0
 11013  00F8  0820               	movf	?___lwdiv,w
 11014  00F9  0022               	movlb	2	; select bank2
 11015  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11016  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11017                           
 11018                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11019  00FC  3003               	movlw	3
 11020  00FD  0020               	movlb	0	; select bank0
 11021  00FE  00A0               	movwf	___lwdiv@divisor
 11022  00FF  3000               	movlw	0
 11023  0100  00A1               	movwf	___lwdiv@divisor+1
 11024  0101  0022               	movlb	2	; select bank2
 11025  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11026  0103  0020               	movlb	0	; select bank0
 11027  0104  01A3               	clrf	___lwdiv@dividend+1
 11028  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11029  0106  0022               	movlb	2	; select bank2
 11030  0107  083F               	movf	(_Load^(0+256)+7),w
 11031  0108  0020               	movlb	0	; select bank0
 11032  0109  01A2               	clrf	___lwdiv@dividend
 11033  010A  07A2               	addwf	___lwdiv@dividend,f
 11034  010B  3191  217B  3180   	fcall	___lwdiv
 11035  010E  0020               	movlb	0	; select bank0
 11036  010F  0821               	movf	?___lwdiv+1,w
 11037  0110  0022               	movlb	2	; select bank2
 11038  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11039  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11040  0113  0020               	movlb	0	; select bank0
 11041  0114  0820               	movf	?___lwdiv,w
 11042  0115  0022               	movlb	2	; select bank2
 11043  0116  01BF               	clrf	(_Load^(0+256)+7)
 11044  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11045                           
 11046                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11047  0118  319E  267E  3180   	fcall	_setLoad_AH_AL_Restore
 11048                           
 11049                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11050  011B  0022               	movlb	2	; select bank2
 11051  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11052  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11053  011E  1D03               	skipz
 11054  011F  2922               	goto	u8395
 11055  0120  083F               	movf	(_Load^(0+256)+7),w
 11056  0121  023D               	subwf	(_Load^(0+256)+5),w
 11057  0122                     u8395:	
 11058  0122  1C03               	skipc
 11059  0123  0008               	return
 11060                           
 11061                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11062  0124  3005               	movlw	5
 11063  0125  3E38               	addlw	_Load& (0+255)
 11064  0126  0086               	movwf	6
 11065  0127  3001               	movlw	1	; select bank2/3
 11066  0128  0087               	movwf	7
 11067  0129  093F               	comf	(_Load^(0+256)+7),w
 11068  012A  0020               	movlb	0	; select bank0
 11069  012B  00A8               	movwf	??_Load_Main
 11070  012C  0022               	movlb	2	; select bank2
 11071  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11072  012E  0020               	movlb	0	; select bank0
 11073  012F  00A9               	movwf	??_Load_Main+1
 11074  0130  0AA8               	incf	??_Load_Main,f
 11075  0131  1903               	skipnz
 11076  0132  0AA9               	incf	??_Load_Main+1,f
 11077  0133  3F40               	moviw [0]fsr1
 11078  0134  0728               	addwf	??_Load_Main,w
 11079  0135  0022               	movlb	2	; select bank2
 11080  0136  00D7               	movwf	(_Load^(0+256)+31)
 11081  0137  3F41               	moviw [1]fsr1
 11082  0138  0020               	movlb	0	; select bank0
 11083  0139  3D29               	addwfc	??_Load_Main+1,w
 11084  013A  0022               	movlb	2	; select bank2
 11085  013B  00D8               	movwf	(_Load^(0+256)+32)
 11086                           
 11087                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11088  013C  01BD               	clrf	(_Load^(0+256)+5)
 11089  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11090                           
 11091                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11092  013E  01BF               	clrf	(_Load^(0+256)+7)
 11093  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11094                           
 11095                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11096  0140  1DB8               	btfss	_Load^(0+256),3
 11097  0141  299B               	goto	l8214
 11098                           
 11099                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11100  0142  3002               	movlw	2
 11101  0143  025D               	subwf	(_Load^(0+256)+37),w
 11102  0144  1803               	skipnc
 11103  0145  299B               	goto	l8214
 11104                           
 11105                           ;OverLoad_B1.c: 117: Load.Count++;
 11106  0146  3001               	movlw	1
 11107  0147  0020               	movlb	0	; select bank0
 11108  0148  00A8               	movwf	??_Load_Main
 11109  0149  0828               	movf	??_Load_Main,w
 11110  014A  0022               	movlb	2	; select bank2
 11111  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11112                           
 11113                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11114  014C  3190  2000  3180   	fcall	_getDimmer_Load_Status
 11115  014F  0020               	movlb	0	; select bank0
 11116  0150  00A8               	movwf	??_Load_Main
 11117  0151  0828               	movf	??_Load_Main,w
 11118  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11119                           
 11120                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11121  0153  319A  22BD  3180   	fcall	_getMain_Lights_Count
 11122  0156  0020               	movlb	0	; select bank0
 11123  0157  00A8               	movwf	??_Load_Main
 11124  0158  0828               	movf	??_Load_Main,w
 11125  0159  00AF               	movwf	Load_Main@LightsCount
 11126                           
 11127                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11128  015A  0022               	movlb	2	; select bank2
 11129  015B  085D               	movf	(_Load^(0+256)+37),w
 11130  015C  3A01               	xorlw	1
 11131  015D  1D03               	skipz
 11132  015E  2963               	goto	l8200
 11133                           
 11134                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11135  015F  3014               	movlw	20
 11136  0160  00DB               	movwf	(_Load^(0+256)+35)
 11137  0161  3005               	movlw	5
 11138  0162  2970               	goto	L7
 11139  0163                     l8200:	
 11140                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11141                           
 11142  0163  085D               	movf	(_Load^(0+256)+37),w
 11143  0164  3A02               	xorlw	2
 11144  0165  1D03               	skipz
 11145  0166  299B               	goto	l8214
 11146                           
 11147                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11148  0167  0020               	movlb	0	; select bank0
 11149  0168  082F               	movf	Load_Main@LightsCount,w
 11150  0169  3A01               	xorlw	1
 11151  016A  1D03               	skipz
 11152  016B  2972               	goto	l8206
 11153                           
 11154                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11155  016C  3075               	movlw	117
 11156  016D  0022               	movlb	2	; select bank2
 11157  016E  00DB               	movwf	(_Load^(0+256)+35)
 11158  016F  3000               	movlw	0
 11159  0170                     L7:	
 11160  0170  00DC               	movwf	(_Load^(0+256)+36)
 11161                           
 11162                           ;OverLoad_B1.c: 132: } else {
 11163  0171  299B               	goto	l8214
 11164  0172                     l8206:	
 11165                           
 11166                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11167  0172  0020               	movlb	0	; select bank0
 11168  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11169  0174  1D03               	skipz
 11170  0175  298F               	goto	l8210
 11171                           
 11172                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11173  0176  082F               	movf	Load_Main@LightsCount,w
 11174  0177  00A8               	movwf	??_Load_Main
 11175  0178  01A9               	clrf	??_Load_Main+1
 11176  0179  0828               	movf	??_Load_Main,w
 11177  017A  00A0               	movwf	___wmul@multiplier
 11178  017B  0829               	movf	??_Load_Main+1,w
 11179  017C  00A1               	movwf	___wmul@multiplier+1
 11180  017D  3075               	movlw	117
 11181  017E  00A2               	movwf	___wmul@multiplicand
 11182  017F  3000               	movlw	0
 11183  0180  00A3               	movwf	___wmul@multiplicand+1
 11184  0181  319E  26B7  3180   	fcall	___wmul
 11185  0184  0020               	movlb	0	; select bank0
 11186  0185  0821               	movf	?___wmul+1,w
 11187  0186  0022               	movlb	2	; select bank2
 11188  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11189  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11190  0189  0020               	movlb	0	; select bank0
 11191  018A  0820               	movf	?___wmul,w
 11192  018B  0022               	movlb	2	; select bank2
 11193  018C  01DB               	clrf	(_Load^(0+256)+35)
 11194  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11195                           
 11196                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11197  018E  299B               	goto	l8214
 11198  018F                     l8210:	
 11199  018F  0020               	movlb	0	; select bank0
 11200  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11201  0191  3A01               	xorlw	1
 11202  0192  1D03               	skipz
 11203  0193  299B               	goto	l8214
 11204                           
 11205                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11206  0194  0022               	movlb	2	; select bank2
 11207  0195  0841               	movf	(_Load^(0+256)+9),w
 11208  0196  3E75               	addlw	117
 11209  0197  00DB               	movwf	(_Load^(0+256)+35)
 11210  0198  3000               	movlw	0
 11211  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11212  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11213  019B                     l8214:	
 11214                           
 11215                           ;OverLoad_B1.c: 137: }
 11216                           ;OverLoad_B1.c: 138: }
 11217                           ;OverLoad_B1.c: 139: }
 11218                           ;OverLoad_B1.c: 140: }
 11219                           ;OverLoad_B1.c: 141: }
 11220                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11221  019B  0022               	movlb	2	; select bank2
 11222  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11223  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11224  019E  1D03               	skipz
 11225  019F  29A2               	goto	u8475
 11226  01A0  085B               	movf	(_Load^(0+256)+35),w
 11227  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11228  01A2                     u8475:	
 11229  01A2  1C03               	skipc
 11230  01A3  29C1               	goto	l8230
 11231                           
 11232                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11233  01A4  0020               	movlb	0	; select bank0
 11234  01A5  082F               	movf	Load_Main@LightsCount,w
 11235  01A6  3A01               	xorlw	1
 11236  01A7  1903               	skipnz
 11237  01A8  29AB               	goto	l8220
 11238  01A9  3003               	movlw	3
 11239  01AA  29AC               	goto	L8
 11240  01AB                     l8220:	
 11241  01AB  3002               	movlw	2
 11242  01AC                     L8:	
 11243  01AC  00AA               	movwf	_Load_Main$3988
 11244  01AD  3000               	movlw	0
 11245  01AE  00AB               	movwf	_Load_Main$3988+1
 11246  01AF  082A               	movf	_Load_Main$3988,w
 11247  01B0  00A8               	movwf	??_Load_Main
 11248  01B1  0828               	movf	??_Load_Main,w
 11249  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11250                           
 11251                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11252  01B3  3001               	movlw	1
 11253  01B4  00A8               	movwf	??_Load_Main
 11254  01B5  0828               	movf	??_Load_Main,w
 11255  01B6  0022               	movlb	2	; select bank2
 11256  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11257                           
 11258                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11259  01B8  085E               	movf	(_Load^(0+256)+38),w
 11260  01B9  0020               	movlb	0	; select bank0
 11261  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11262  01BB  1803               	skipnc
 11263  01BC  0008               	return
 11264                           
 11265                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11266  01BD  0022               	movlb	2	; select bank2
 11267  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11268                           
 11269                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11270  01BF  16B8               	bsf	_Load^(0+256),5
 11271                           
 11272                           ;OverLoad_B1.c: 170: }
 11273                           ;OverLoad_B1.c: 171: } else {
 11274  01C0  0008               	return
 11275  01C1                     l8230:	
 11276                           
 11277                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11278  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11279                           
 11280                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11281  01C2  1DB8               	btfss	_Load^(0+256),3
 11282  01C3  0008               	return
 11283                           
 11284                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11285  01C4  3001               	movlw	1
 11286  01C5  0020               	movlb	0	; select bank0
 11287  01C6  00A8               	movwf	??_Load_Main
 11288  01C7  0828               	movf	??_Load_Main,w
 11289  01C8  0022               	movlb	2	; select bank2
 11290  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11291                           
 11292                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11293  01CA  3003               	movlw	3
 11294  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11295  01CC  1C03               	skipc
 11296  01CD  0008               	return
 11297                           
 11298                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11299  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11300                           
 11301                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11302  01CF  17B8               	bsf	_Load^(0+256),7
 11303                           
 11304                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11305  01D0  11B8               	bcf	_Load^(0+256),3
 11306                           
 11307                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11308  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11309                           
 11310                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11311  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11312  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11313  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11314  01D5  0857               	movf	(_Load^(0+256)+31),w
 11315  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11316  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11317                           
 11318                           ;OverLoad_B1.c: 184: }
 11319                           ;OverLoad_B1.c: 185: }
 11320                           ;OverLoad_B1.c: 208: }
 11321                           ;OverLoad_B1.c: 209: }
 11322                           ;OverLoad_B1.c: 210: }
 11323                           ;OverLoad_B1.c: 211: } else {
 11324  01D8  0008               	return
 11325  01D9                     l1640:	
 11326                           
 11327                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11328  01D9  1638               	bsf	_Load^(0+256),4
 11329                           
 11330                           ;OverLoad_B1.c: 213: }
 11331                           ;OverLoad_B1.c: 214: } else {
 11332  01DA  0008               	return
 11333  01DB                     l1639:	
 11334                           
 11335                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11336  01DB  1D38               	btfss	_Load^(0+256),2
 11337  01DC  29EE               	goto	l8266
 11338                           
 11339                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11340  01DD  1138               	bcf	_Load^(0+256),2
 11341                           
 11342                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11343  01DE  1238               	bcf	_Load^(0+256),4
 11344                           
 11345                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11346  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11347  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11348                           
 11349                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11350  01E1  319E  267E  3180   	fcall	_setLoad_AH_AL_Restore
 11351                           
 11352                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11353  01E4  0022               	movlb	2	; select bank2
 11354  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11355                           
 11356                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11357  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11358                           
 11359                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11360  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11361  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11362                           
 11363                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11364  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11365  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11366                           
 11367                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11368  01EB  11B8               	bcf	_Load^(0+256),3
 11369                           
 11370                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11371  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11372                           
 11373                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11374  01ED  13B8               	bcf	_Load^(0+256),7
 11375  01EE                     l8266:	
 11376                           
 11377                           ;OverLoad_B1.c: 257: }
 11378                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11379  01EE  1EB8               	btfss	_Load^(0+256),5
 11380  01EF  0008               	return
 11381                           
 11382                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11383  01F0  3001               	movlw	1
 11384  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11385  01F2  3000               	movlw	0
 11386  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11387                           
 11388                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11389  01F4  3001               	movlw	1
 11390  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11391  01F6  30F4               	movlw	244
 11392  01F7  1903               	skipnz
 11393  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11394  01F9  1C03               	skipc
 11395  01FA  0008               	return
 11396                           
 11397                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11398  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11399  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11400                           
 11401                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11402  01FD  12B8               	bcf	_Load^(0+256),5
 11403                           
 11404                           ;OverLoad_B1.c: 263: }
 11405                           ;OverLoad_B1.c: 264: }
 11406                           ;OverLoad_B1.c: 265: }
 11407                           ;OverLoad_B1.c: 266: } else {
 11408  01FE  0008               	return
 11409  01FF                     l1629:	
 11410                           
 11411                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11412  01FF  0021               	movlb	1	; select bank1
 11413  0200  1C2F               	btfss	_myMain^(0+128),0
 11414  0201  0008               	return
 11415                           
 11416                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11417  0202  0022               	movlb	2	; select bank2
 11418  0203  1438               	bsf	_Load^(0+256),0
 11419  0204  0008               	return
 11420  0205                     __end_of_Load_Main:	
 11421                           
 11422                           	psect	text65
 11423  1ABD                     __ptext65:	
 11424 ;; *************** function _getMain_Lights_Count *****************
 11425 ;; Defined at:
 11426 ;;		line 459 in file "../src/Main_B1.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;		None
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;  status1         1    1[BANK0 ] unsigned char 
 11431 ;;  count           1    0[BANK0 ] unsigned char 
 11432 ;; Return value:  Size  Location     Type
 11433 ;;                  1    wreg      unsigned char 
 11434 ;; Registers used:
 11435 ;;		wreg, status,2
 11436 ;; Tracked objects:
 11437 ;;		On entry : 0/0
 11438 ;;		On exit  : 0/0
 11439 ;;		Unchanged: 0/0
 11440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;Total ram usage:        2 bytes
 11446 ;; Hardware stack levels used:    1
 11447 ;; Hardware stack levels required when called:    5
 11448 ;; This function calls:
 11449 ;;		Nothing
 11450 ;; This function is called by:
 11451 ;;		_Load_Main
 11452 ;; This function uses a non-reentrant model
 11453 ;;
 11454                           
 11455                           
 11456                           ;psect for function _getMain_Lights_Count
 11457  1ABD                     _getMain_Lights_Count:	
 11458                           
 11459                           ;Main_B1.c: 460: char count = 0;
 11460                           
 11461                           ;incstack = 0
 11462                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11463  1ABD  0020               	movlb	0	; select bank0
 11464  1ABE  01A0               	clrf	getMain_Lights_Count@count
 11465                           
 11466                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11467  1ABF  3000               	movlw	0
 11468  1AC0  0021               	movlb	1	; select bank1
 11469  1AC1  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11470  1AC2  3001               	movlw	1
 11471  1AC3  0020               	movlb	0	; select bank0
 11472  1AC4  00A1               	movwf	getMain_Lights_Count@status1
 11473                           
 11474                           ;Main_B1.c: 487: return count = status1;
 11475  1AC5  0821               	movf	getMain_Lights_Count@status1,w
 11476  1AC6  00A0               	movwf	getMain_Lights_Count@count
 11477  1AC7  0008               	return
 11478  1AC8                     __end_of_getMain_Lights_Count:	
 11479                           
 11480                           	psect	text66
 11481  1000                     __ptext66:	
 11482 ;; *************** function _getDimmer_Load_Status *****************
 11483 ;; Defined at:
 11484 ;;		line 1169 in file "../src/Dimmer_B1.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;		None
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;  status          1    0[BANK0 ] unsigned char 
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      unsigned char 
 11491 ;; Registers used:
 11492 ;;		wreg, status,2
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;Total ram usage:        1 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    5
 11505 ;; This function calls:
 11506 ;;		Nothing
 11507 ;; This function is called by:
 11508 ;;		_Load_Main
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           
 11513                           ;psect for function _getDimmer_Load_Status
 11514  1000                     _getDimmer_Load_Status:	
 11515                           
 11516                           ;Dimmer_B1.c: 1170: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11517                           
 11518                           ;incstack = 0
 11519                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11520  1000  3000               	movlw	0
 11521  1001  0022               	movlb	2	; select bank2
 11522  1002  192C               	btfsc	_Dimmer^(0+256),2
 11523  1003  3001               	movlw	1
 11524  1004  0020               	movlb	0	; select bank0
 11525  1005  00A0               	movwf	getDimmer_Load_Status@status
 11526                           
 11527                           ;Dimmer_B1.c: 1171: return status;
 11528  1006  0820               	movf	getDimmer_Load_Status@status,w
 11529  1007  0008               	return
 11530  1008                     __end_of_getDimmer_Load_Status:	
 11531                           
 11532                           	psect	text67
 11533  1A85                     __ptext67:	
 11534 ;; *************** function _getDimmer_LoadGO *****************
 11535 ;; Defined at:
 11536 ;;		line 1163 in file "../src/Dimmer_B1.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11541 ;; Return value:  Size  Location     Type
 11542 ;;                  1    wreg      unsigned char 
 11543 ;; Registers used:
 11544 ;;		wreg, status,2
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;Total ram usage:        1 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    5
 11557 ;; This function calls:
 11558 ;;		Nothing
 11559 ;; This function is called by:
 11560 ;;		_Load_Main
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           
 11565                           ;psect for function _getDimmer_LoadGO
 11566  1A85                     _getDimmer_LoadGO:	
 11567                           
 11568                           ;Dimmer_B1.c: 1164: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11569                           
 11570                           ;incstack = 0
 11571                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11572  1A85  3000               	movlw	0
 11573  1A86  0022               	movlb	2	; select bank2
 11574  1A87  18AC               	btfsc	_Dimmer^(0+256),1
 11575  1A88  3001               	movlw	1
 11576  1A89  0020               	movlb	0	; select bank0
 11577  1A8A  00A0               	movwf	getDimmer_LoadGO@loadgo
 11578                           
 11579                           ;Dimmer_B1.c: 1165: return loadgo;
 11580  1A8B  0820               	movf	getDimmer_LoadGO@loadgo,w
 11581  1A8C  0008               	return
 11582  1A8D                     __end_of_getDimmer_LoadGO:	
 11583                           
 11584                           	psect	text68
 11585  1CAF                     __ptext68:	
 11586 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11587 ;; Defined at:
 11588 ;;		line 286 in file "../src/Dimmer_B1.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;		None
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;  status          1    0[BANK0 ] unsigned char 
 11593 ;; Return value:  Size  Location     Type
 11594 ;;                  1    wreg      unsigned char 
 11595 ;; Registers used:
 11596 ;;		wreg, status,2, status,0
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;Total ram usage:        1 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    5
 11609 ;; This function calls:
 11610 ;;		Nothing
 11611 ;; This function is called by:
 11612 ;;		_Load_Main
 11613 ;; This function uses a non-reentrant model
 11614 ;;
 11615                           
 11616                           
 11617                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11618  1CAF                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11619                           
 11620                           ;Dimmer_B1.c: 287: char status = 0;
 11621                           
 11622                           ;incstack = 0
 11623                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11624  1CAF  0020               	movlb	0	; select bank0
 11625  1CB0  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11626                           
 11627                           ;Dimmer_B1.c: 298: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11628  1CB1  3000               	movlw	0
 11629  1CB2  0021               	movlb	1	; select bank1
 11630  1CB3  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11631  1CB4  3001               	movlw	1
 11632  1CB5  0020               	movlb	0	; select bank0
 11633  1CB6  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11634                           
 11635                           ;Dimmer_B1.c: 302: if (status == 0) {
 11636  1CB7  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11637  1CB8  1D03               	skipz
 11638  1CB9  2CC0               	goto	l7282
 11639                           
 11640                           ;Dimmer_B1.c: 312: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11641  1CBA  3000               	movlw	0
 11642  1CBB  0021               	movlb	1	; select bank1
 11643  1CBC  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11644  1CBD  3001               	movlw	1
 11645  1CBE  0020               	movlb	0	; select bank0
 11646  1CBF  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11647  1CC0                     l7282:	
 11648                           
 11649                           ;Dimmer_B1.c: 314: }
 11650                           ;Dimmer_B1.c: 316: return status;
 11651  1CC0  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11652  1CC1  0008               	return
 11653  1CC2                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11654                           
 11655                           	psect	text69
 11656  1EB7                     __ptext69:	
 11657 ;; *************** function ___wmul *****************
 11658 ;; Defined at:
 11659 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11662 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;  product         2    4[BANK0 ] unsigned int 
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  2    0[BANK0 ] unsigned int 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;Total ram usage:        6 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    5
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_Load_Main
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           
 11689                           ;psect for function ___wmul
 11690  1EB7                     ___wmul:	
 11691                           
 11692                           ;incstack = 0
 11693                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11694  1EB7  0020               	movlb	0	; select bank0
 11695  1EB8  01A4               	clrf	___wmul@product
 11696  1EB9  01A5               	clrf	___wmul@product+1
 11697  1EBA                     l7846:	
 11698  1EBA  1C20               	btfss	___wmul@multiplier,0
 11699  1EBB  2EC0               	goto	l2715
 11700  1EBC  0822               	movf	___wmul@multiplicand,w
 11701  1EBD  07A4               	addwf	___wmul@product,f
 11702  1EBE  0823               	movf	___wmul@multiplicand+1,w
 11703  1EBF  3DA5               	addwfc	___wmul@product+1,f
 11704  1EC0                     l2715:	
 11705  1EC0  3001               	movlw	1
 11706  1EC1                     u7755:	
 11707  1EC1  35A2               	lslf	___wmul@multiplicand,f
 11708  1EC2  0DA3               	rlf	___wmul@multiplicand+1,f
 11709  1EC3  0B89               	decfsz	9,f
 11710  1EC4  2EC1               	goto	u7755
 11711  1EC5  3001               	movlw	1
 11712  1EC6                     u7765:	
 11713  1EC6  36A1               	lsrf	___wmul@multiplier+1,f
 11714  1EC7  0CA0               	rrf	___wmul@multiplier,f
 11715  1EC8  0B89               	decfsz	9,f
 11716  1EC9  2EC6               	goto	u7765
 11717  1ECA  0821               	movf	___wmul@multiplier+1,w
 11718  1ECB  0420               	iorwf	___wmul@multiplier,w
 11719  1ECC  1D03               	skipz
 11720  1ECD  2EBA               	goto	l7846
 11721  1ECE  0825               	movf	___wmul@product+1,w
 11722  1ECF  01A1               	clrf	?___wmul+1
 11723  1ED0  07A1               	addwf	?___wmul+1,f
 11724  1ED1  0824               	movf	___wmul@product,w
 11725  1ED2  01A0               	clrf	?___wmul
 11726  1ED3  07A0               	addwf	?___wmul,f
 11727  1ED4  0008               	return
 11728  1ED5                     __end_of___wmul:	
 11729                           
 11730                           	psect	text70
 11731  117B                     __ptext70:	
 11732 ;; *************** function ___lwdiv *****************
 11733 ;; Defined at:
 11734 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;  divisor         2    0[BANK0 ] unsigned int 
 11737 ;;  dividend        2    2[BANK0 ] unsigned int 
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  quotient        2    5[BANK0 ] unsigned int 
 11740 ;;  counter         1    7[BANK0 ] unsigned char 
 11741 ;; Return value:  Size  Location     Type
 11742 ;;                  2    0[BANK0 ] unsigned int 
 11743 ;; Registers used:
 11744 ;;		wreg, status,2, status,0
 11745 ;; Tracked objects:
 11746 ;;		On entry : 0/0
 11747 ;;		On exit  : 0/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;Total ram usage:        8 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    5
 11757 ;; This function calls:
 11758 ;;		Nothing
 11759 ;; This function is called by:
 11760 ;;		_Load_Main
 11761 ;;		_setTemp_Main
 11762 ;;		_setRF_Main
 11763 ;; This function uses a non-reentrant model
 11764 ;;
 11765                           
 11766                           
 11767                           ;psect for function ___lwdiv
 11768  117B                     ___lwdiv:	
 11769                           
 11770                           ;incstack = 0
 11771                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11772  117B  0020               	movlb	0	; select bank0
 11773  117C  01A5               	clrf	___lwdiv@quotient
 11774  117D  01A6               	clrf	___lwdiv@quotient+1
 11775  117E  0821               	movf	___lwdiv@divisor+1,w
 11776  117F  0420               	iorwf	___lwdiv@divisor,w
 11777  1180  1903               	skipnz
 11778  1181  29AB               	goto	l7220
 11779  1182  01A7               	clrf	___lwdiv@counter
 11780  1183  0AA7               	incf	___lwdiv@counter,f
 11781  1184                     l7208:	
 11782  1184  1BA1               	btfsc	___lwdiv@divisor+1,7
 11783  1185  2990               	goto	l7210
 11784  1186  3001               	movlw	1
 11785  1187                     u6635:	
 11786  1187  35A0               	lslf	___lwdiv@divisor,f
 11787  1188  0DA1               	rlf	___lwdiv@divisor+1,f
 11788  1189  0B89               	decfsz	9,f
 11789  118A  2987               	goto	u6635
 11790  118B  3001               	movlw	1
 11791  118C  00A4               	movwf	??___lwdiv
 11792  118D  0824               	movf	??___lwdiv,w
 11793  118E  07A7               	addwf	___lwdiv@counter,f
 11794  118F  2984               	goto	l7208
 11795  1190                     l7210:	
 11796  1190  3001               	movlw	1
 11797  1191                     u6655:	
 11798  1191  35A5               	lslf	___lwdiv@quotient,f
 11799  1192  0DA6               	rlf	___lwdiv@quotient+1,f
 11800  1193  0B89               	decfsz	9,f
 11801  1194  2991               	goto	u6655
 11802  1195  0821               	movf	___lwdiv@divisor+1,w
 11803  1196  0223               	subwf	___lwdiv@dividend+1,w
 11804  1197  1D03               	skipz
 11805  1198  299B               	goto	u6665
 11806  1199  0820               	movf	___lwdiv@divisor,w
 11807  119A  0222               	subwf	___lwdiv@dividend,w
 11808  119B                     u6665:	
 11809  119B  1C03               	skipc
 11810  119C  29A2               	goto	l7216
 11811  119D  0820               	movf	___lwdiv@divisor,w
 11812  119E  02A2               	subwf	___lwdiv@dividend,f
 11813  119F  0821               	movf	___lwdiv@divisor+1,w
 11814  11A0  3BA3               	subwfb	___lwdiv@dividend+1,f
 11815  11A1  1425               	bsf	___lwdiv@quotient,0
 11816  11A2                     l7216:	
 11817  11A2  3001               	movlw	1
 11818  11A3                     u6675:	
 11819  11A3  36A1               	lsrf	___lwdiv@divisor+1,f
 11820  11A4  0CA0               	rrf	___lwdiv@divisor,f
 11821  11A5  0B89               	decfsz	9,f
 11822  11A6  29A3               	goto	u6675
 11823  11A7  3001               	movlw	1
 11824  11A8  02A7               	subwf	___lwdiv@counter,f
 11825  11A9  1D03               	btfss	3,2
 11826  11AA  2990               	goto	l7210
 11827  11AB                     l7220:	
 11828  11AB  0826               	movf	___lwdiv@quotient+1,w
 11829  11AC  01A1               	clrf	?___lwdiv+1
 11830  11AD  07A1               	addwf	?___lwdiv+1,f
 11831  11AE  0825               	movf	___lwdiv@quotient,w
 11832  11AF  01A0               	clrf	?___lwdiv
 11833  11B0  07A0               	addwf	?___lwdiv,f
 11834  11B1  0008               	return
 11835  11B2                     __end_of___lwdiv:	
 11836                           
 11837                           	psect	text71
 11838  1A14                     __ptext71:	
 11839 ;; *************** function _Load_Initialization *****************
 11840 ;; Defined at:
 11841 ;;		line 9 in file "../src/OverLoad_B1.c"
 11842 ;; Parameters:    Size  Location     Type
 11843 ;;		None
 11844 ;; Auto vars:     Size  Location     Type
 11845 ;;		None
 11846 ;; Return value:  Size  Location     Type
 11847 ;;		None               void
 11848 ;; Registers used:
 11849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;Total ram usage:        0 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    6
 11862 ;; This function calls:
 11863 ;;		_setLoad_AH_AL_Restore
 11864 ;; This function is called by:
 11865 ;;		_main
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           
 11870                           ;psect for function _Load_Initialization
 11871  1A14                     _Load_Initialization:	
 11872                           
 11873                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11874                           
 11875                           ;incstack = 0
 11876                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11877  1A14  319E  267E         	fcall	_setLoad_AH_AL_Restore
 11878  1A16  0008               	return
 11879  1A17                     __end_of_Load_Initialization:	
 11880                           
 11881                           	psect	text72
 11882  1E7E                     __ptext72:	
 11883 ;; *************** function _setLoad_AH_AL_Restore *****************
 11884 ;; Defined at:
 11885 ;;		line 294 in file "../src/OverLoad_B1.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;  i               1    1[BANK0 ] unsigned char 
 11890 ;; Return value:  Size  Location     Type
 11891 ;;		None               void
 11892 ;; Registers used:
 11893 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;Total ram usage:        2 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    5
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_Load_Initialization
 11910 ;;		_Load_Main
 11911 ;; This function uses a non-reentrant model
 11912 ;;
 11913                           
 11914                           
 11915                           ;psect for function _setLoad_AH_AL_Restore
 11916  1E7E                     _setLoad_AH_AL_Restore:	
 11917                           
 11918                           ;OverLoad_B1.c: 295: char i;
 11919                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11923  1E7E  0020               	movlb	0	; select bank0
 11924  1E7F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11925  1E80                     L9:	
 11926  1E80  3005               	movlw	5
 11927  1E81  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11928  1E82  1803               	btfsc	3,0
 11929  1E83  0008               	return
 11930                           
 11931                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11932  1E84  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11933  1E85  3E43               	addlw	(_Load+11)& (0+255)
 11934  1E86  0086               	movwf	6
 11935  1E87  3001               	movlw	1	; select bank2/3
 11936  1E88  0087               	movwf	7
 11937  1E89  3000               	movlw	0
 11938  1E8A  3FC0               	movwi [0]fsr1
 11939  1E8B  3FC1               	movwi [1]fsr1
 11940                           
 11941                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11942  1E8C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11943  1E8D  3E4D               	addlw	(_Load+21)& (0+255)
 11944  1E8E  0086               	movwf	6
 11945  1E8F  3001               	movlw	1	; select bank2/3
 11946  1E90  0087               	movwf	7
 11947  1E91  30FF               	movlw	255
 11948  1E92  3FC0               	movwi [0]fsr1
 11949  1E93  30FF               	movlw	255
 11950  1E94  3FC1               	movwi [1]fsr1
 11951  1E95  3001               	movlw	1
 11952  1E96  00A0               	movwf	??_setLoad_AH_AL_Restore
 11953  1E97  0820               	movf	??_setLoad_AH_AL_Restore,w
 11954  1E98  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11955  1E99  2E80               	goto	L9
 11956  1E9A                     __end_of_setLoad_AH_AL_Restore:	
 11957                           
 11958                           	psect	text73
 11959  1A2F                     __ptext73:	
 11960 ;; *************** function _LED_Main *****************
 11961 ;; Defined at:
 11962 ;;		line 47 in file "../src/LED_B1.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;		None
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;		None
 11967 ;; Return value:  Size  Location     Type
 11968 ;;		None               void
 11969 ;; Registers used:
 11970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11971 ;; Tracked objects:
 11972 ;;		On entry : 0/0
 11973 ;;		On exit  : 0/0
 11974 ;;		Unchanged: 0/0
 11975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;Total ram usage:        0 bytes
 11981 ;; Hardware stack levels used:    1
 11982 ;; Hardware stack levels required when called:    7
 11983 ;; This function calls:
 11984 ;;		_setLED_Main
 11985 ;; This function is called by:
 11986 ;;		_main
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           
 11991                           ;psect for function _LED_Main
 11992  1A2F                     _LED_Main:	
 11993                           
 11994                           ;LED_B1.c: 67: setLED_Main(99);
 11995                           
 11996                           ;incstack = 0
 11997                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11998  1A2F  3063               	movlw	99
 11999  1A30  3191  2145         	fcall	_setLED_Main
 12000  1A32  0008               	return
 12001  1A33                     __end_of_LED_Main:	
 12002                           
 12003                           	psect	text74
 12004  1145                     __ptext74:	
 12005 ;; *************** function _setLED_Main *****************
 12006 ;; Defined at:
 12007 ;;		line 229 in file "../src/LED_B1.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;  led             1    wreg     unsigned char 
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;  led             1    4[BANK0 ] unsigned char 
 12012 ;; Return value:  Size  Location     Type
 12013 ;;		None               void
 12014 ;; Registers used:
 12015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12016 ;; Tracked objects:
 12017 ;;		On entry : 0/0
 12018 ;;		On exit  : 0/0
 12019 ;;		Unchanged: 0/0
 12020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;Total ram usage:        3 bytes
 12026 ;; Hardware stack levels used:    1
 12027 ;; Hardware stack levels required when called:    6
 12028 ;; This function calls:
 12029 ;;		_LedPointSelect
 12030 ;; This function is called by:
 12031 ;;		_LED_Main
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           
 12036                           ;psect for function _setLED_Main
 12037  1145                     _setLED_Main:	
 12038                           
 12039                           ;incstack = 0
 12040                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12041                           ;setLED_Main@led stored from wreg
 12042  1145  0020               	movlb	0	; select bank0
 12043  1146  00A4               	movwf	setLED_Main@led
 12044                           
 12045                           ;LED_B1.c: 230: LedPointSelect(led);
 12046  1147  0824               	movf	setLED_Main@led,w
 12047  1148  319B  231A  3191   	fcall	_LedPointSelect
 12048                           
 12049                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12050  114B  0021               	movlb	1	; select bank1
 12051  114C  084D               	movf	_LED^(0+128),w
 12052  114D  0086               	movwf	6
 12053  114E  3001               	movlw	1	; select bank2/3
 12054  114F  0087               	movwf	7
 12055  1150  1C81               	btfss	1,1
 12056  1151  0008               	return
 12057                           
 12058                           ;LED_B1.c: 232: LED->Time++;
 12059  1152  0A4D               	incf	_LED^(0+128),w
 12060  1153  0086               	movwf	6
 12061  1154  3001               	movlw	1	; select bank2/3
 12062  1155  0087               	movwf	7
 12063  1156  3001               	movlw	1
 12064  1157  0781               	addwf	1,f
 12065  1158  3141               	addfsr 1,1
 12066  1159  1803               	skipnc
 12067  115A  0A81               	incf	1,f
 12068                           
 12069                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12070  115B  0A4D               	incf	_LED^(0+128),w
 12071  115C  0086               	movwf	6
 12072  115D  3001               	movlw	1	; select bank2/3
 12073  115E  0087               	movwf	7
 12074  115F  3F40               	moviw [0]fsr1
 12075  1160  0020               	movlb	0	; select bank0
 12076  1161  00A2               	movwf	??_setLED_Main
 12077  1162  3F41               	moviw [1]fsr1
 12078  1163  00A3               	movwf	??_setLED_Main+1
 12079  1164  3000               	movlw	0
 12080  1165  0223               	subwf	??_setLED_Main+1,w
 12081  1166  3019               	movlw	25
 12082  1167  1903               	skipnz
 12083  1168  0222               	subwf	??_setLED_Main,w
 12084  1169  1C03               	skipc
 12085  116A  0008               	return
 12086                           
 12087                           ;LED_B1.c: 234: LED->Time = 0;
 12088  116B  0021               	movlb	1	; select bank1
 12089  116C  0A4D               	incf	_LED^(0+128),w
 12090  116D  0086               	movwf	6
 12091  116E  3001               	movlw	1	; select bank2/3
 12092  116F  0087               	movwf	7
 12093  1170  3000               	movlw	0
 12094  1171  3FC0               	movwi [0]fsr1
 12095  1172  3FC1               	movwi [1]fsr1
 12096                           
 12097                           ;LED_B1.c: 252: if (led == 99) {
 12098  1173  0020               	movlb	0	; select bank0
 12099  1174  0824               	movf	setLED_Main@led,w
 12100  1175  3A63               	xorlw	99
 12101  1176  1D03               	skipz
 12102  1177  0008               	return
 12103                           
 12104                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12105  1178  3020               	movlw	32
 12106  1179  068D               	xorwf	13,f
 12107  117A  0008               	return
 12108  117B                     __end_of_setLED_Main:	
 12109                           
 12110                           	psect	text75
 12111  1A2B                     __ptext75:	
 12112 ;; *************** function _LED_Initialization *****************
 12113 ;; Defined at:
 12114 ;;		line 31 in file "../src/LED_B1.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;		None               void
 12121 ;; Registers used:
 12122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        0 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    8
 12135 ;; This function calls:
 12136 ;;		_setLED_Initialization
 12137 ;; This function is called by:
 12138 ;;		_main
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           
 12143                           ;psect for function _LED_Initialization
 12144  1A2B                     _LED_Initialization:	
 12145                           
 12146                           ;LED_B1.c: 42: setLED_Initialization(99);
 12147                           
 12148                           ;incstack = 0
 12149                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12150  1A2B  3063               	movlw	99
 12151  1A2C  319C  2453         	fcall	_setLED_Initialization
 12152  1A2E  0008               	return
 12153  1A2F                     __end_of_LED_Initialization:	
 12154                           
 12155                           	psect	text76
 12156  1C53                     __ptext76:	
 12157 ;; *************** function _setLED_Initialization *****************
 12158 ;; Defined at:
 12159 ;;		line 74 in file "../src/LED_B1.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;  led             1    wreg     unsigned char 
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;  led             1    4[BANK0 ] unsigned char 
 12164 ;; Return value:  Size  Location     Type
 12165 ;;		None               void
 12166 ;; Registers used:
 12167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;Total ram usage:        1 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; Hardware stack levels required when called:    7
 12180 ;; This function calls:
 12181 ;;		_LedPointSelect
 12182 ;;		_setLED
 12183 ;; This function is called by:
 12184 ;;		_LED_Initialization
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           
 12189                           ;psect for function _setLED_Initialization
 12190  1C53                     _setLED_Initialization:	
 12191                           
 12192                           ;incstack = 0
 12193                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12194                           ;setLED_Initialization@led stored from wreg
 12195  1C53  0020               	movlb	0	; select bank0
 12196  1C54  00A4               	movwf	setLED_Initialization@led
 12197                           
 12198                           ;LED_B1.c: 75: LedPointSelect(led);
 12199  1C55  0824               	movf	setLED_Initialization@led,w
 12200  1C56  319B  231A  319C   	fcall	_LedPointSelect
 12201                           
 12202                           ;LED_B1.c: 76: LED->Enable = 1;
 12203  1C59  0021               	movlb	1	; select bank1
 12204  1C5A  084D               	movf	_LED^(0+128),w
 12205  1C5B  0086               	movwf	6
 12206  1C5C  3001               	movlw	1	; select bank2/3
 12207  1C5D  0087               	movwf	7
 12208  1C5E  1401               	bsf	1,0
 12209                           
 12210                           ;LED_B1.c: 77: setLED(led, 0);
 12211  1C5F  0020               	movlb	0	; select bank0
 12212  1C60  01A2               	clrf	setLED@command
 12213  1C61  0824               	movf	setLED_Initialization@led,w
 12214  1C62  3187  27C6         	fcall	_setLED
 12215  1C64  0008               	return
 12216  1C65                     __end_of_setLED_Initialization:	
 12217                           
 12218                           	psect	text77
 12219  12A4                     __ptext77:	
 12220 ;; *************** function _Flash_Memory_Main *****************
 12221 ;; Defined at:
 12222 ;;		line 976 in file "../src/MCU_B1.c"
 12223 ;; Parameters:    Size  Location     Type
 12224 ;;		None
 12225 ;; Auto vars:     Size  Location     Type
 12226 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12227 ;; Return value:  Size  Location     Type
 12228 ;;		None               void
 12229 ;; Registers used:
 12230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12231 ;; Tracked objects:
 12232 ;;		On entry : 0/0
 12233 ;;		On exit  : 0/0
 12234 ;;		Unchanged: 0/0
 12235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;Total ram usage:        3 bytes
 12241 ;; Hardware stack levels used:    1
 12242 ;; Hardware stack levels required when called:    8
 12243 ;; This function calls:
 12244 ;;		_Flash_Memory_Modify
 12245 ;;		_getAll_Sw_KeyStatus
 12246 ;;		_getMain_All_LightsStatus
 12247 ;; This function is called by:
 12248 ;;		_main
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           
 12253                           ;psect for function _Flash_Memory_Main
 12254  12A4                     _Flash_Memory_Main:	
 12255                           
 12256                           ;MCU_B1.c: 977: char key_Status = 0;
 12257                           
 12258                           ;incstack = 0
 12259                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12260  12A4  0020               	movlb	0	; select bank0
 12261  12A5  01A7               	clrf	Flash_Memory_Main@key_Status
 12262                           
 12263                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12264  12A6  319B  23EB  3192   	fcall	_getAll_Sw_KeyStatus
 12265  12A9  0020               	movlb	0	; select bank0
 12266  12AA  00A6               	movwf	??_Flash_Memory_Main
 12267  12AB  0826               	movf	??_Flash_Memory_Main,w
 12268  12AC  00A7               	movwf	Flash_Memory_Main@key_Status
 12269                           
 12270                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12271  12AD  0024               	movlb	4	; select bank4
 12272  12AE  1C44               	btfss	(_Memory^(0+512)+36),0
 12273  12AF  0008               	return
 12274                           
 12275                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12276  12B0  0020               	movlb	0	; select bank0
 12277  12B1  01A8               	clrf	_Flash_Memory_Main$3153
 12278  12B2  319A  22A8  3192   	fcall	_getMain_All_LightsStatus
 12279  12B5  3800               	iorlw	0
 12280  12B6  1D03               	skipz
 12281  12B7  2ABE               	goto	l7974
 12282  12B8  0020               	movlb	0	; select bank0
 12283  12B9  08A7               	movf	Flash_Memory_Main@key_Status,f
 12284  12BA  1D03               	skipz
 12285  12BB  2ABE               	goto	l7974
 12286  12BC  01A8               	clrf	_Flash_Memory_Main$3153
 12287  12BD  0AA8               	incf	_Flash_Memory_Main$3153,f
 12288  12BE                     l7974:	
 12289  12BE  0020               	movlb	0	; select bank0
 12290  12BF  0828               	movf	_Flash_Memory_Main$3153,w
 12291  12C0  0024               	movlb	4	; select bank4
 12292  12C1  10C4               	bcf	(_Memory^(0+512)+36),1
 12293  12C2  1D03               	skipz
 12294  12C3  14C4               	bsf	(_Memory^(0+512)+36),1
 12295                           
 12296                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12297  12C4  1CC4               	btfss	(_Memory^(0+512)+36),1
 12298  12C5  2ADF               	goto	l1251
 12299                           
 12300                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12301  12C6  15C4               	bsf	(_Memory^(0+512)+36),3
 12302                           
 12303                           ;MCU_B1.c: 985: Memory.Time++;
 12304  12C7  3001               	movlw	1
 12305  12C8  07C2               	addwf	(_Memory^(0+512)+34),f
 12306  12C9  3000               	movlw	0
 12307  12CA  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12308                           
 12309                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12310  12CB  3022               	movlw	34
 12311  12CC  3E20               	addlw	_Memory& (0+255)
 12312  12CD  0086               	movwf	6
 12313  12CE  3002               	movlw	2	; select bank4/5
 12314  12CF  0087               	movwf	7
 12315  12D0  3F40               	moviw [0]fsr1
 12316  12D1  3A0A               	xorlw	10
 12317  12D2  1D03               	skipz
 12318  12D3  2AD6               	goto	u7995
 12319  12D4  3F41               	moviw [1]fsr1
 12320  12D5  3A00               	xorlw	0
 12321  12D6                     u7995:	
 12322  12D6  1D03               	skipz
 12323  12D7  0008               	return
 12324                           
 12325                           ;MCU_B1.c: 987: Memory.Time = 0;
 12326  12D8  01C2               	clrf	(_Memory^(0+512)+34)
 12327  12D9  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12328                           
 12329                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12330  12DA  1044               	bcf	(_Memory^(0+512)+36),0
 12331                           
 12332                           ;MCU_B1.c: 989: Memory.GO = 0;
 12333  12DB  10C4               	bcf	(_Memory^(0+512)+36),1
 12334                           
 12335                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12336  12DC  318A  22FC         	fcall	_Flash_Memory_Modify
 12337                           
 12338                           ;MCU_B1.c: 991: }
 12339                           ;MCU_B1.c: 992: } else {
 12340  12DE  0008               	return
 12341  12DF                     l1251:	
 12342                           
 12343                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12344  12DF  1DC4               	btfss	(_Memory^(0+512)+36),3
 12345  12E0  0008               	return
 12346                           
 12347                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12348  12E1  11C4               	bcf	(_Memory^(0+512)+36),3
 12349                           
 12350                           ;MCU_B1.c: 995: Memory.Time = 0;
 12351  12E2  01C2               	clrf	(_Memory^(0+512)+34)
 12352  12E3  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12353  12E4  0008               	return
 12354  12E5                     __end_of_Flash_Memory_Main:	
 12355                           
 12356                           	psect	text78
 12357  1BEB                     __ptext78:	
 12358 ;; *************** function _getAll_Sw_KeyStatus *****************
 12359 ;; Defined at:
 12360 ;;		line 279 in file "../src/Switch_B1.c"
 12361 ;; Parameters:    Size  Location     Type
 12362 ;;		None
 12363 ;; Auto vars:     Size  Location     Type
 12364 ;;  status          1    1[BANK0 ] unsigned char 
 12365 ;; Return value:  Size  Location     Type
 12366 ;;                  1    wreg      unsigned char 
 12367 ;; Registers used:
 12368 ;;		wreg, status,2
 12369 ;; Tracked objects:
 12370 ;;		On entry : 0/0
 12371 ;;		On exit  : 0/0
 12372 ;;		Unchanged: 0/0
 12373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;Total ram usage:        3 bytes
 12379 ;; Hardware stack levels used:    1
 12380 ;; Hardware stack levels required when called:    5
 12381 ;; This function calls:
 12382 ;;		Nothing
 12383 ;; This function is called by:
 12384 ;;		_Flash_Memory_Main
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           
 12389                           ;psect for function _getAll_Sw_KeyStatus
 12390  1BEB                     _getAll_Sw_KeyStatus:	
 12391                           
 12392                           ;Switch_B1.c: 280: char status = 0;
 12393                           
 12394                           ;incstack = 0
 12395                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12396  1BEB  0020               	movlb	0	; select bank0
 12397  1BEC  01A1               	clrf	getAll_Sw_KeyStatus@status
 12398                           
 12399                           ;Switch_B1.c: 299: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12400  1BED  01A2               	clrf	_getAll_Sw_KeyStatus$6468
 12401  1BEE  0AA2               	incf	_getAll_Sw_KeyStatus$6468,f
 12402  1BEF  1F0C               	btfss	12,6	;volatile
 12403  1BF0  1A0C               	btfsc	12,4	;volatile
 12404  1BF1  2BF6               	goto	l7530
 12405  1BF2  1C0C               	btfss	12,0	;volatile
 12406  1BF3  1B8C               	btfsc	12,7	;volatile
 12407  1BF4  2BF6               	goto	l7530
 12408  1BF5  01A2               	clrf	_getAll_Sw_KeyStatus$6468
 12409  1BF6                     l7530:	
 12410  1BF6  0822               	movf	_getAll_Sw_KeyStatus$6468,w
 12411  1BF7  00A0               	movwf	??_getAll_Sw_KeyStatus
 12412  1BF8  0820               	movf	??_getAll_Sw_KeyStatus,w
 12413  1BF9  00A1               	movwf	getAll_Sw_KeyStatus@status
 12414                           
 12415                           ;Switch_B1.c: 303: return status;
 12416  1BFA  0821               	movf	getAll_Sw_KeyStatus@status,w
 12417  1BFB  0008               	return
 12418  1BFC                     __end_of_getAll_Sw_KeyStatus:	
 12419                           
 12420                           	psect	text79
 12421  0AFC                     __ptext79:	
 12422 ;; *************** function _Flash_Memory_Modify *****************
 12423 ;; Defined at:
 12424 ;;		line 1053 in file "../src/MCU_B1.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;		None
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  i               1    5[BANK0 ] unsigned char 
 12429 ;; Return value:  Size  Location     Type
 12430 ;;		None               void
 12431 ;; Registers used:
 12432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;Total ram usage:        2 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    7
 12445 ;; This function calls:
 12446 ;;		_Flash_Memory_Erasing
 12447 ;;		_Flash_Memory_Read
 12448 ;;		_Flash_Memory_Write
 12449 ;;		_setMemory_Data
 12450 ;; This function is called by:
 12451 ;;		_Flash_Memory_Main
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           
 12456                           ;psect for function _Flash_Memory_Modify
 12457  0AFC                     _Flash_Memory_Modify:	
 12458                           
 12459                           ;MCU_B1.c: 1054: char i = 0;
 12460                           
 12461                           ;incstack = 0
 12462                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12463  0AFC  0020               	movlb	0	; select bank0
 12464  0AFD  01A5               	clrf	Flash_Memory_Modify@i
 12465                           
 12466                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12467  0AFE  01A5               	clrf	Flash_Memory_Modify@i
 12468  0AFF  3020               	movlw	32
 12469  0B00  0225               	subwf	Flash_Memory_Modify@i,w
 12470  0B01  1803               	btfsc	3,0
 12471  0B02  2B18               	goto	l7548
 12472  0B03                     l7542:	
 12473                           
 12474                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12475  0B03  0825               	movf	Flash_Memory_Modify@i,w
 12476  0B04  319D  25DE  318A   	fcall	_Flash_Memory_Read
 12477  0B07  0020               	movlb	0	; select bank0
 12478  0B08  00A4               	movwf	??_Flash_Memory_Modify
 12479  0B09  0825               	movf	Flash_Memory_Modify@i,w
 12480  0B0A  3E20               	addlw	_Memory& (0+255)
 12481  0B0B  0086               	movwf	6
 12482  0B0C  3002               	movlw	2	; select bank4/5
 12483  0B0D  0087               	movwf	7
 12484  0B0E  0824               	movf	??_Flash_Memory_Modify,w
 12485  0B0F  0081               	movwf	1
 12486  0B10  3001               	movlw	1
 12487  0B11  00A4               	movwf	??_Flash_Memory_Modify
 12488  0B12  0824               	movf	??_Flash_Memory_Modify,w
 12489  0B13  07A5               	addwf	Flash_Memory_Modify@i,f
 12490  0B14  3020               	movlw	32
 12491  0B15  0225               	subwf	Flash_Memory_Modify@i,w
 12492  0B16  1C03               	skipc
 12493  0B17  2B03               	goto	l7542
 12494  0B18                     l7548:	
 12495                           
 12496                           ;MCU_B1.c: 1057: }
 12497                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12498  0B18  0021               	movlb	1	; select bank1
 12499  0B19  086E               	movf	_product^(0+128),w
 12500  0B1A  0086               	movwf	6
 12501  0B1B  3001               	movlw	1	; select bank2/3
 12502  0B1C  0087               	movwf	7
 12503  0B1D  3001               	movlw	1	; select bank2/3
 12504  0B1E  3F4C               	moviw [12]fsr1
 12505  0B1F  0020               	movlb	0	; select bank0
 12506  0B20  00A0               	movwf	setMemory_Data@data
 12507  0B21  3000               	movlw	0
 12508  0B22  319B  2326  318A   	fcall	_setMemory_Data
 12509                           
 12510                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12511  0B25  0021               	movlb	1	; select bank1
 12512  0B26  086E               	movf	_product^(0+128),w
 12513  0B27  0086               	movwf	6
 12514  0B28  3001               	movlw	1	; select bank2/3
 12515  0B29  0087               	movwf	7
 12516  0B2A  3001               	movlw	1	; select bank2/3
 12517  0B2B  3F4D               	moviw [13]fsr1
 12518  0B2C  0020               	movlb	0	; select bank0
 12519  0B2D  00A0               	movwf	setMemory_Data@data
 12520  0B2E  3001               	movlw	1
 12521  0B2F  319B  2326  318A   	fcall	_setMemory_Data
 12522                           
 12523                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12524  0B32  0021               	movlb	1	; select bank1
 12525  0B33  086E               	movf	_product^(0+128),w
 12526  0B34  0086               	movwf	6
 12527  0B35  3001               	movlw	1	; select bank2/3
 12528  0B36  0087               	movwf	7
 12529  0B37  3001               	movlw	1	; select bank2/3
 12530  0B38  3F4E               	moviw [14]fsr1
 12531  0B39  0020               	movlb	0	; select bank0
 12532  0B3A  00A0               	movwf	setMemory_Data@data
 12533  0B3B  3002               	movlw	2
 12534  0B3C  319B  2326  318A   	fcall	_setMemory_Data
 12535                           
 12536                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12537  0B3F  0021               	movlb	1	; select bank1
 12538  0B40  086E               	movf	_product^(0+128),w
 12539  0B41  0086               	movwf	6
 12540  0B42  3001               	movlw	1	; select bank2/3
 12541  0B43  0087               	movwf	7
 12542  0B44  3001               	movlw	1	; select bank2/3
 12543  0B45  3F55               	moviw [21]fsr1
 12544  0B46  0020               	movlb	0	; select bank0
 12545  0B47  00A0               	movwf	setMemory_Data@data
 12546  0B48  3003               	movlw	3
 12547  0B49  319B  2326  318A   	fcall	_setMemory_Data
 12548                           
 12549                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12550  0B4C  0021               	movlb	1	; select bank1
 12551  0B4D  086E               	movf	_product^(0+128),w
 12552  0B4E  0086               	movwf	6
 12553  0B4F  3001               	movlw	1	; select bank2/3
 12554  0B50  0087               	movwf	7
 12555  0B51  3001               	movlw	1	; select bank2/3
 12556  0B52  3F56               	moviw [22]fsr1
 12557  0B53  0020               	movlb	0	; select bank0
 12558  0B54  00A0               	movwf	setMemory_Data@data
 12559  0B55  3004               	movlw	4
 12560  0B56  319B  2326  318A   	fcall	_setMemory_Data
 12561                           
 12562                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12563  0B59  0021               	movlb	1	; select bank1
 12564  0B5A  086E               	movf	_product^(0+128),w
 12565  0B5B  0086               	movwf	6
 12566  0B5C  3001               	movlw	1	; select bank2/3
 12567  0B5D  0087               	movwf	7
 12568  0B5E  3001               	movlw	1	; select bank2/3
 12569  0B5F  3F57               	moviw [23]fsr1
 12570  0B60  0020               	movlb	0	; select bank0
 12571  0B61  00A0               	movwf	setMemory_Data@data
 12572  0B62  3005               	movlw	5
 12573  0B63  319B  2326  318A   	fcall	_setMemory_Data
 12574                           
 12575                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12576  0B66  0021               	movlb	1	; select bank1
 12577  0B67  1EB9               	btfss	(_myMain^(0+128)+10),5
 12578  0B68  2B73               	goto	l7556
 12579                           
 12580                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12581  0B69  12B9               	bcf	(_myMain^(0+128)+10),5
 12582                           
 12583                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12584  0B6A  30AA               	movlw	170
 12585  0B6B  0020               	movlb	0	; select bank0
 12586  0B6C  00A4               	movwf	??_Flash_Memory_Modify
 12587  0B6D  0824               	movf	??_Flash_Memory_Modify,w
 12588  0B6E  00A0               	movwf	setMemory_Data@data
 12589  0B6F  301E               	movlw	30
 12590  0B70  319B  2326  318A   	fcall	_setMemory_Data
 12591  0B73                     l7556:	
 12592                           
 12593                           ;MCU_B1.c: 1068: }
 12594                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12595  0B73  0024               	movlb	4	; select bank4
 12596  0B74  1D44               	btfss	(_Memory^(0+512)+36),2
 12597  0B75  2B7A               	goto	l1275
 12598                           
 12599                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12600  0B76  1144               	bcf	(_Memory^(0+512)+36),2
 12601                           
 12602                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12603  0B77  0021               	movlb	1	; select bank1
 12604  0B78  11AF               	bcf	_myMain^(0+128),3
 12605                           
 12606                           ;MCU_B1.c: 1073: myMain.First = 0;
 12607  0B79  12AF               	bcf	_myMain^(0+128),5
 12608  0B7A                     l1275:	
 12609                           
 12610                           ;MCU_B1.c: 1075: }
 12611                           ;MCU_B1.c: 1076: GIE = 0;
 12612  0B7A  138B               	bcf	11,7	;volatile
 12613                           
 12614                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12615  0B7B  319B  2332  318A   	fcall	_Flash_Memory_Erasing
 12616                           
 12617                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12618  0B7E  3190  2080         	fcall	_Flash_Memory_Write
 12619                           
 12620                           ;MCU_B1.c: 1079: GIE = 1;
 12621  0B80  178B               	bsf	11,7	;volatile
 12622  0B81  0008               	return
 12623  0B82                     __end_of_Flash_Memory_Modify:	
 12624                           
 12625                           	psect	text80
 12626  1B32                     __ptext80:	
 12627 ;; *************** function _Flash_Memory_Erasing *****************
 12628 ;; Defined at:
 12629 ;;		line 1042 in file "../src/MCU_B1.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;		None
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;		None
 12634 ;; Return value:  Size  Location     Type
 12635 ;;		None               void
 12636 ;; Registers used:
 12637 ;;		wreg, status,2, status,0, pclath, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;Total ram usage:        0 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    6
 12650 ;; This function calls:
 12651 ;;		_Flash_Memory_Unlock
 12652 ;; This function is called by:
 12653 ;;		_Flash_Memory_Modify
 12654 ;; This function uses a non-reentrant model
 12655 ;;
 12656                           
 12657                           
 12658                           ;psect for function _Flash_Memory_Erasing
 12659  1B32                     _Flash_Memory_Erasing:	
 12660                           
 12661                           ;MCU_B1.c: 1043: CFGS = 0;
 12662                           
 12663                           ;incstack = 0
 12664                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12665  1B32  0023               	movlb	3	; select bank3
 12666  1B33  1315               	bcf	21,6	;volatile
 12667                           
 12668                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12669  1B34  3030               	movlw	48
 12670  1B35  0092               	movwf	18	;volatile
 12671                           
 12672                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12673  1B36  0191               	clrf	17	;volatile
 12674                           
 12675                           ;MCU_B1.c: 1046: FREE = 1;
 12676  1B37  1615               	bsf	21,4	;volatile
 12677                           
 12678                           ;MCU_B1.c: 1047: WREN = 1;
 12679  1B38  1515               	bsf	21,2	;volatile
 12680                           
 12681                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12682  1B39  319A  229F         	fcall	_Flash_Memory_Unlock
 12683                           
 12684                           ;MCU_B1.c: 1049: WREN = 0;
 12685  1B3B  0023               	movlb	3	; select bank3
 12686  1B3C  1115               	bcf	21,2	;volatile
 12687  1B3D  0008               	return
 12688  1B3E                     __end_of_Flash_Memory_Erasing:	
 12689                           
 12690                           	psect	text81
 12691  06FC                     __ptext81:	
 12692 ;; *************** function _Flash_Memory_Initialization *****************
 12693 ;; Defined at:
 12694 ;;		line 932 in file "../src/MCU_B1.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;		None
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;  value           1    5[BANK0 ] unsigned char 
 12699 ;; Return value:  Size  Location     Type
 12700 ;;		None               void
 12701 ;; Registers used:
 12702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;Total ram usage:        2 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    7
 12715 ;; This function calls:
 12716 ;;		_Flash_Memory_Read
 12717 ;;		_Flash_Memory_Write
 12718 ;;		_setMemory_Data
 12719 ;; This function is called by:
 12720 ;;		_main
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           
 12725                           ;psect for function _Flash_Memory_Initialization
 12726  06FC                     _Flash_Memory_Initialization:	
 12727                           
 12728                           ;MCU_B1.c: 933: char value = 0;
 12729                           
 12730                           ;incstack = 0
 12731                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12732  06FC  0020               	movlb	0	; select bank0
 12733  06FD  01A5               	clrf	Flash_Memory_Initialization@value
 12734                           
 12735                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12736  06FE  301F               	movlw	31
 12737  06FF  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12738  0702  3AAA               	xorlw	170
 12739  0703  1D03               	skipz
 12740  0704  2F7E               	goto	l7948
 12741                           
 12742                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12743  0705  3000               	movlw	0
 12744  0706  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12745  0709  0020               	movlb	0	; select bank0
 12746  070A  00A4               	movwf	??_Flash_Memory_Initialization
 12747  070B  0021               	movlb	1	; select bank1
 12748  070C  086E               	movf	_product^(0+128),w
 12749  070D  3E0C               	addlw	12
 12750  070E  0086               	movwf	6
 12751  070F  3001               	movlw	1	; select bank2/3
 12752  0710  0087               	movwf	7
 12753  0711  0020               	movlb	0	; select bank0
 12754  0712  0824               	movf	??_Flash_Memory_Initialization,w
 12755  0713  0081               	movwf	1
 12756                           
 12757                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12758  0714  3001               	movlw	1
 12759  0715  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12760  0718  0020               	movlb	0	; select bank0
 12761  0719  00A4               	movwf	??_Flash_Memory_Initialization
 12762  071A  0021               	movlb	1	; select bank1
 12763  071B  086E               	movf	_product^(0+128),w
 12764  071C  3E0D               	addlw	13
 12765  071D  0086               	movwf	6
 12766  071E  3001               	movlw	1	; select bank2/3
 12767  071F  0087               	movwf	7
 12768  0720  0020               	movlb	0	; select bank0
 12769  0721  0824               	movf	??_Flash_Memory_Initialization,w
 12770  0722  0081               	movwf	1
 12771                           
 12772                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12773  0723  3002               	movlw	2
 12774  0724  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12775  0727  0020               	movlb	0	; select bank0
 12776  0728  00A4               	movwf	??_Flash_Memory_Initialization
 12777  0729  0021               	movlb	1	; select bank1
 12778  072A  086E               	movf	_product^(0+128),w
 12779  072B  3E0E               	addlw	14
 12780  072C  0086               	movwf	6
 12781  072D  3001               	movlw	1	; select bank2/3
 12782  072E  0087               	movwf	7
 12783  072F  0020               	movlb	0	; select bank0
 12784  0730  0824               	movf	??_Flash_Memory_Initialization,w
 12785  0731  0081               	movwf	1
 12786                           
 12787                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12788  0732  3003               	movlw	3
 12789  0733  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12790  0736  0020               	movlb	0	; select bank0
 12791  0737  00A4               	movwf	??_Flash_Memory_Initialization
 12792  0738  0021               	movlb	1	; select bank1
 12793  0739  086E               	movf	_product^(0+128),w
 12794  073A  3E15               	addlw	21
 12795  073B  0086               	movwf	6
 12796  073C  3001               	movlw	1	; select bank2/3
 12797  073D  0087               	movwf	7
 12798  073E  0020               	movlb	0	; select bank0
 12799  073F  0824               	movf	??_Flash_Memory_Initialization,w
 12800  0740  0081               	movwf	1
 12801                           
 12802                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12803  0741  3004               	movlw	4
 12804  0742  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12805  0745  0020               	movlb	0	; select bank0
 12806  0746  00A4               	movwf	??_Flash_Memory_Initialization
 12807  0747  0021               	movlb	1	; select bank1
 12808  0748  086E               	movf	_product^(0+128),w
 12809  0749  3E16               	addlw	22
 12810  074A  0086               	movwf	6
 12811  074B  3001               	movlw	1	; select bank2/3
 12812  074C  0087               	movwf	7
 12813  074D  0020               	movlb	0	; select bank0
 12814  074E  0824               	movf	??_Flash_Memory_Initialization,w
 12815  074F  0081               	movwf	1
 12816                           
 12817                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12818  0750  3005               	movlw	5
 12819  0751  319D  25DE  3186   	fcall	_Flash_Memory_Read
 12820  0754  0020               	movlb	0	; select bank0
 12821  0755  00A4               	movwf	??_Flash_Memory_Initialization
 12822  0756  0021               	movlb	1	; select bank1
 12823  0757  086E               	movf	_product^(0+128),w
 12824  0758  3E17               	addlw	23
 12825  0759  0086               	movwf	6
 12826  075A  3001               	movlw	1	; select bank2/3
 12827  075B  0087               	movwf	7
 12828  075C  0020               	movlb	0	; select bank0
 12829  075D  0824               	movf	??_Flash_Memory_Initialization,w
 12830  075E  0081               	movwf	1
 12831                           
 12832                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12833  075F  0021               	movlb	1	; select bank1
 12834  0760  086E               	movf	_product^(0+128),w
 12835  0761  3E0C               	addlw	12
 12836  0762  0086               	movwf	6
 12837  0763  3001               	movlw	1	; select bank2/3
 12838  0764  0087               	movwf	7
 12839  0765  0801               	movf	1,w
 12840  0766  3AFF               	xorlw	255
 12841  0767  1D03               	skipz
 12842  0768  0008               	return
 12843  0769  086E               	movf	_product^(0+128),w
 12844  076A  3E0D               	addlw	13
 12845  076B  0086               	movwf	6
 12846  076C  3001               	movlw	1	; select bank2/3
 12847  076D  0087               	movwf	7
 12848  076E  0801               	movf	1,w
 12849  076F  3AFF               	xorlw	255
 12850  0770  1D03               	skipz
 12851  0771  0008               	return
 12852  0772  086E               	movf	_product^(0+128),w
 12853  0773  3E0E               	addlw	14
 12854  0774  0086               	movwf	6
 12855  0775  3001               	movlw	1	; select bank2/3
 12856  0776  0087               	movwf	7
 12857  0777  0801               	movf	1,w
 12858  0778  3AFF               	xorlw	255
 12859  0779  1D03               	skipz
 12860  077A  0008               	return
 12861                           
 12862                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12863  077B  15AF               	bsf	_myMain^(0+128),3
 12864                           
 12865                           ;MCU_B1.c: 951: myMain.First = 1;
 12866  077C  16AF               	bsf	_myMain^(0+128),5
 12867                           
 12868                           ;MCU_B1.c: 952: }
 12869                           ;MCU_B1.c: 953: } else {
 12870  077D  0008               	return
 12871  077E                     l7948:	
 12872                           
 12873                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12874  077E  30FF               	movlw	255
 12875  077F  0020               	movlb	0	; select bank0
 12876  0780  00A4               	movwf	??_Flash_Memory_Initialization
 12877  0781  0824               	movf	??_Flash_Memory_Initialization,w
 12878  0782  00A0               	movwf	setMemory_Data@data
 12879  0783  3000               	movlw	0
 12880  0784  319B  2326  3186   	fcall	_setMemory_Data
 12881                           
 12882                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12883  0787  30FF               	movlw	255
 12884  0788  0020               	movlb	0	; select bank0
 12885  0789  00A4               	movwf	??_Flash_Memory_Initialization
 12886  078A  0824               	movf	??_Flash_Memory_Initialization,w
 12887  078B  00A0               	movwf	setMemory_Data@data
 12888  078C  3001               	movlw	1
 12889  078D  319B  2326  3186   	fcall	_setMemory_Data
 12890                           
 12891                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12892  0790  30FF               	movlw	255
 12893  0791  0020               	movlb	0	; select bank0
 12894  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12895  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12896  0794  00A0               	movwf	setMemory_Data@data
 12897  0795  3002               	movlw	2
 12898  0796  319B  2326  3186   	fcall	_setMemory_Data
 12899                           
 12900                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12901  0799  30FF               	movlw	255
 12902  079A  0020               	movlb	0	; select bank0
 12903  079B  00A4               	movwf	??_Flash_Memory_Initialization
 12904  079C  0824               	movf	??_Flash_Memory_Initialization,w
 12905  079D  00A0               	movwf	setMemory_Data@data
 12906  079E  3003               	movlw	3
 12907  079F  319B  2326  3186   	fcall	_setMemory_Data
 12908                           
 12909                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12910  07A2  30FF               	movlw	255
 12911  07A3  0020               	movlb	0	; select bank0
 12912  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 12913  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 12914  07A6  00A0               	movwf	setMemory_Data@data
 12915  07A7  3004               	movlw	4
 12916  07A8  319B  2326  3186   	fcall	_setMemory_Data
 12917                           
 12918                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12919  07AB  30FF               	movlw	255
 12920  07AC  0020               	movlb	0	; select bank0
 12921  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 12922  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 12923  07AF  00A0               	movwf	setMemory_Data@data
 12924  07B0  3005               	movlw	5
 12925  07B1  319B  2326  3186   	fcall	_setMemory_Data
 12926                           
 12927                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12928  07B4  30AA               	movlw	170
 12929  07B5  0020               	movlb	0	; select bank0
 12930  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 12931  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 12932  07B8  00A0               	movwf	setMemory_Data@data
 12933  07B9  301F               	movlw	31
 12934  07BA  319B  2326  3186   	fcall	_setMemory_Data
 12935                           
 12936                           ;MCU_B1.c: 966: GIE = 0;
 12937  07BD  138B               	bcf	11,7	;volatile
 12938                           
 12939                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12940  07BE  3190  2080         	fcall	_Flash_Memory_Write
 12941                           
 12942                           ;MCU_B1.c: 968: GIE = 1;
 12943  07C0  178B               	bsf	11,7	;volatile
 12944                           
 12945                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12946  07C1  0021               	movlb	1	; select bank1
 12947  07C2  15AF               	bsf	_myMain^(0+128),3
 12948                           
 12949                           ;MCU_B1.c: 970: myMain.First = 1;
 12950  07C3  16AF               	bsf	_myMain^(0+128),5
 12951                           
 12952                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12953  07C4  1639               	bsf	(_myMain^(0+128)+10),4
 12954  07C5  0008               	return
 12955  07C6                     __end_of_Flash_Memory_Initialization:	
 12956                           
 12957                           	psect	text82
 12958  1B26                     __ptext82:	
 12959 ;; *************** function _setMemory_Data *****************
 12960 ;; Defined at:
 12961 ;;		line 1094 in file "../src/MCU_B1.c"
 12962 ;; Parameters:    Size  Location     Type
 12963 ;;  address         1    wreg     unsigned char 
 12964 ;;  data            1    0[BANK0 ] unsigned char 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  address         1    2[BANK0 ] unsigned char 
 12967 ;; Return value:  Size  Location     Type
 12968 ;;		None               void
 12969 ;; Registers used:
 12970 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12976 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;Total ram usage:        3 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    5
 12983 ;; This function calls:
 12984 ;;		Nothing
 12985 ;; This function is called by:
 12986 ;;		_Flash_Memory_Initialization
 12987 ;;		_Flash_Memory_Modify
 12988 ;; This function uses a non-reentrant model
 12989 ;;
 12990                           
 12991                           
 12992                           ;psect for function _setMemory_Data
 12993  1B26                     _setMemory_Data:	
 12994                           
 12995                           ;incstack = 0
 12996                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12997                           ;setMemory_Data@address stored from wreg
 12998  1B26  0020               	movlb	0	; select bank0
 12999  1B27  00A2               	movwf	setMemory_Data@address
 13000                           
 13001                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13002  1B28  0820               	movf	setMemory_Data@data,w
 13003  1B29  00A1               	movwf	??_setMemory_Data
 13004  1B2A  0822               	movf	setMemory_Data@address,w
 13005  1B2B  3E20               	addlw	_Memory& (0+255)
 13006  1B2C  0086               	movwf	6
 13007  1B2D  3002               	movlw	2	; select bank4/5
 13008  1B2E  0087               	movwf	7
 13009  1B2F  0821               	movf	??_setMemory_Data,w
 13010  1B30  0081               	movwf	1
 13011  1B31  0008               	return
 13012  1B32                     __end_of_setMemory_Data:	
 13013                           
 13014                           	psect	text83
 13015  1080                     __ptext83:	
 13016 ;; *************** function _Flash_Memory_Write *****************
 13017 ;; Defined at:
 13018 ;;		line 1023 in file "../src/MCU_B1.c"
 13019 ;; Parameters:    Size  Location     Type
 13020 ;;		None
 13021 ;; Auto vars:     Size  Location     Type
 13022 ;;  i               1    1[BANK0 ] unsigned char 
 13023 ;; Return value:  Size  Location     Type
 13024 ;;		None               void
 13025 ;; Registers used:
 13026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13027 ;; Tracked objects:
 13028 ;;		On entry : 0/0
 13029 ;;		On exit  : 0/0
 13030 ;;		Unchanged: 0/0
 13031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13036 ;;Total ram usage:        2 bytes
 13037 ;; Hardware stack levels used:    1
 13038 ;; Hardware stack levels required when called:    6
 13039 ;; This function calls:
 13040 ;;		_Flash_Memory_Unlock
 13041 ;; This function is called by:
 13042 ;;		_Flash_Memory_Initialization
 13043 ;;		_Flash_Memory_Modify
 13044 ;; This function uses a non-reentrant model
 13045 ;;
 13046                           
 13047                           
 13048                           ;psect for function _Flash_Memory_Write
 13049  1080                     _Flash_Memory_Write:	
 13050                           
 13051                           ;MCU_B1.c: 1024: char i = 0;
 13052                           
 13053                           ;incstack = 0
 13054                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13055  1080  0020               	movlb	0	; select bank0
 13056  1081  01A1               	clrf	Flash_Memory_Write@i
 13057                           
 13058                           ;MCU_B1.c: 1025: CFGS = 0;
 13059  1082  0023               	movlb	3	; select bank3
 13060  1083  1315               	bcf	21,6	;volatile
 13061                           
 13062                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13063  1084  3030               	movlw	48
 13064  1085  0092               	movwf	18	;volatile
 13065                           
 13066                           ;MCU_B1.c: 1027: PMDATH = 0;
 13067  1086  0194               	clrf	20	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1028: FREE = 0;
 13070  1087  1215               	bcf	21,4	;volatile
 13071                           
 13072                           ;MCU_B1.c: 1029: LWLO = 1;
 13073  1088  1695               	bsf	21,5	;volatile
 13074                           
 13075                           ;MCU_B1.c: 1030: WREN = 1;
 13076  1089  1515               	bsf	21,2	;volatile
 13077                           
 13078                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13079  108A  0020               	movlb	0	; select bank0
 13080  108B  01A1               	clrf	Flash_Memory_Write@i
 13081  108C  3020               	movlw	32
 13082  108D  0221               	subwf	Flash_Memory_Write@i,w
 13083  108E  1803               	btfsc	3,0
 13084  108F  28A8               	goto	l1265
 13085  1090                     l7070:	
 13086                           
 13087                           ;MCU_B1.c: 1032: PMADRL = i;
 13088  1090  0821               	movf	Flash_Memory_Write@i,w
 13089  1091  0023               	movlb	3	; select bank3
 13090  1092  0091               	movwf	17	;volatile
 13091                           
 13092                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13093  1093  0020               	movlb	0	; select bank0
 13094  1094  0821               	movf	Flash_Memory_Write@i,w
 13095  1095  3E20               	addlw	_Memory& (0+255)
 13096  1096  0086               	movwf	6
 13097  1097  3002               	movlw	2	; select bank4/5
 13098  1098  0087               	movwf	7
 13099  1099  0801               	movf	1,w
 13100  109A  0023               	movlb	3	; select bank3
 13101  109B  0093               	movwf	19	;volatile
 13102                           
 13103                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13104  109C  319A  229F  3190   	fcall	_Flash_Memory_Unlock
 13105  109F  3001               	movlw	1
 13106  10A0  0020               	movlb	0	; select bank0
 13107  10A1  00A0               	movwf	??_Flash_Memory_Write
 13108  10A2  0820               	movf	??_Flash_Memory_Write,w
 13109  10A3  07A1               	addwf	Flash_Memory_Write@i,f
 13110  10A4  3020               	movlw	32
 13111  10A5  0221               	subwf	Flash_Memory_Write@i,w
 13112  10A6  1C03               	skipc
 13113  10A7  2890               	goto	l7070
 13114  10A8                     l1265:	
 13115                           
 13116                           ;MCU_B1.c: 1035: }
 13117                           ;MCU_B1.c: 1036: LWLO = 0;
 13118  10A8  0023               	movlb	3	; select bank3
 13119  10A9  1295               	bcf	21,5	;volatile
 13120                           
 13121                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13122  10AA  319A  229F         	fcall	_Flash_Memory_Unlock
 13123                           
 13124                           ;MCU_B1.c: 1038: WREN = 0;
 13125  10AC  0023               	movlb	3	; select bank3
 13126  10AD  1115               	bcf	21,2	;volatile
 13127  10AE  0008               	return
 13128  10AF                     __end_of_Flash_Memory_Write:	
 13129                           
 13130                           	psect	text84
 13131  1A9F                     __ptext84:	
 13132 ;; *************** function _Flash_Memory_Unlock *****************
 13133 ;; Defined at:
 13134 ;;		line 1002 in file "../src/MCU_B1.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;		None
 13137 ;; Auto vars:     Size  Location     Type
 13138 ;;		None
 13139 ;; Return value:  Size  Location     Type
 13140 ;;		None               void
 13141 ;; Registers used:
 13142 ;;		wreg
 13143 ;; Tracked objects:
 13144 ;;		On entry : 0/0
 13145 ;;		On exit  : 0/0
 13146 ;;		Unchanged: 0/0
 13147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;Total ram usage:        0 bytes
 13153 ;; Hardware stack levels used:    1
 13154 ;; Hardware stack levels required when called:    5
 13155 ;; This function calls:
 13156 ;;		Nothing
 13157 ;; This function is called by:
 13158 ;;		_Flash_Memory_Write
 13159 ;;		_Flash_Memory_Erasing
 13160 ;; This function uses a non-reentrant model
 13161 ;;
 13162                           
 13163                           
 13164                           ;psect for function _Flash_Memory_Unlock
 13165  1A9F                     _Flash_Memory_Unlock:	
 13166                           
 13167                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13168                           
 13169                           ;incstack = 0
 13170                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13171  1A9F  3055               	movlw	85
 13172  1AA0  0023               	movlb	3	; select bank3
 13173  1AA1  0096               	movwf	22	;volatile
 13174                           
 13175                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13176  1AA2  30AA               	movlw	170
 13177  1AA3  0096               	movwf	22	;volatile
 13178                           
 13179                           ;MCU_B1.c: 1005: WR = 1;
 13180  1AA4  1495               	bsf	21,1	;volatile
 13181                           
 13182                           ;MCU_B1.c: 1006: __nop();
 13183  1AA5  0000               	nop
 13184                           
 13185                           ;MCU_B1.c: 1007: __nop();
 13186  1AA6  0000               	nop
 13187  1AA7  0008               	return
 13188  1AA8                     __end_of_Flash_Memory_Unlock:	
 13189                           
 13190                           	psect	text85
 13191  1DDE                     __ptext85:	
 13192 ;; *************** function _Flash_Memory_Read *****************
 13193 ;; Defined at:
 13194 ;;		line 1011 in file "../src/MCU_B1.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;  address         1    wreg     unsigned char 
 13197 ;; Auto vars:     Size  Location     Type
 13198 ;;  address         1    2[BANK0 ] unsigned char 
 13199 ;;  ret             1    3[BANK0 ] unsigned char 
 13200 ;;  i               1    1[BANK0 ] unsigned char 
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  1    wreg      unsigned char 
 13203 ;; Registers used:
 13204 ;;		wreg, status,2
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;Total ram usage:        4 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    5
 13217 ;; This function calls:
 13218 ;;		Nothing
 13219 ;; This function is called by:
 13220 ;;		_Flash_Memory_Initialization
 13221 ;;		_Flash_Memory_Modify
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           
 13226                           ;psect for function _Flash_Memory_Read
 13227  1DDE                     _Flash_Memory_Read:	
 13228                           
 13229                           ;incstack = 0
 13230                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13231                           ;Flash_Memory_Read@address stored from wreg
 13232  1DDE  0020               	movlb	0	; select bank0
 13233  1DDF  00A2               	movwf	Flash_Memory_Read@address
 13234                           
 13235                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13236  1DE0  01A1               	clrf	Flash_Memory_Read@i
 13237  1DE1  01A3               	clrf	Flash_Memory_Read@ret
 13238                           
 13239                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13240  1DE2  3030               	movlw	48
 13241  1DE3  0023               	movlb	3	; select bank3
 13242  1DE4  0092               	movwf	18	;volatile
 13243                           
 13244                           ;MCU_B1.c: 1014: PMADRL = address;
 13245  1DE5  0020               	movlb	0	; select bank0
 13246  1DE6  0822               	movf	Flash_Memory_Read@address,w
 13247  1DE7  0023               	movlb	3	; select bank3
 13248  1DE8  0091               	movwf	17	;volatile
 13249                           
 13250                           ;MCU_B1.c: 1015: CFGS = 0;
 13251  1DE9  1315               	bcf	21,6	;volatile
 13252                           
 13253                           ;MCU_B1.c: 1016: RD = 1;
 13254  1DEA  1415               	bsf	21,0	;volatile
 13255                           
 13256                           ;MCU_B1.c: 1017: i = PMDATH;
 13257  1DEB  0814               	movf	20,w	;volatile
 13258  1DEC  0020               	movlb	0	; select bank0
 13259  1DED  00A0               	movwf	??_Flash_Memory_Read
 13260  1DEE  0820               	movf	??_Flash_Memory_Read,w
 13261  1DEF  00A1               	movwf	Flash_Memory_Read@i
 13262                           
 13263                           ;MCU_B1.c: 1018: ret = PMDATL;
 13264  1DF0  0023               	movlb	3	; select bank3
 13265  1DF1  0813               	movf	19,w	;volatile
 13266  1DF2  0020               	movlb	0	; select bank0
 13267  1DF3  00A0               	movwf	??_Flash_Memory_Read
 13268  1DF4  0820               	movf	??_Flash_Memory_Read,w
 13269  1DF5  00A3               	movwf	Flash_Memory_Read@ret
 13270                           
 13271                           ;MCU_B1.c: 1019: return ret;
 13272  1DF6  0823               	movf	Flash_Memory_Read@ret,w
 13273  1DF7  0008               	return
 13274  1DF8                     __end_of_Flash_Memory_Read:	
 13275                           
 13276                           	psect	text86
 13277  0554                     __ptext86:	
 13278 ;; *************** function _Exception_Main *****************
 13279 ;; Defined at:
 13280 ;;		line 499 in file "../src/Main_B1.c"
 13281 ;; Parameters:    Size  Location     Type
 13282 ;;		None
 13283 ;; Auto vars:     Size  Location     Type
 13284 ;;  i               2   18[BANK0 ] int 
 13285 ;;  i               2   16[BANK0 ] int 
 13286 ;;  lights          1   21[BANK0 ] unsigned char 
 13287 ;;  error           1   20[BANK0 ] unsigned char 
 13288 ;;  count           1   15[BANK0 ] unsigned char 
 13289 ;;  status          1   14[BANK0 ] unsigned char 
 13290 ;; Return value:  Size  Location     Type
 13291 ;;		None               void
 13292 ;; Registers used:
 13293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13294 ;; Tracked objects:
 13295 ;;		On entry : 0/0
 13296 ;;		On exit  : 0/0
 13297 ;;		Unchanged: 0/0
 13298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;Total ram usage:        9 bytes
 13304 ;; Hardware stack levels used:    1
 13305 ;; Hardware stack levels required when called:    7
 13306 ;; This function calls:
 13307 ;;		_getDimmerLights_Line
 13308 ;;		_getDimmerLights_Status
 13309 ;;		_getMain_All_Error_Status
 13310 ;;		_getMain_All_LightsStatus
 13311 ;;		_setBuz
 13312 ;;		_setDimmerLights_SwOff
 13313 ;;		_setLED
 13314 ;; This function is called by:
 13315 ;;		_main
 13316 ;; This function uses a non-reentrant model
 13317 ;;
 13318                           
 13319                           
 13320                           ;psect for function _Exception_Main
 13321  0554                     _Exception_Main:	
 13322                           
 13323                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13324                           
 13325                           ;incstack = 0
 13326                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13327  0554  3000               	movlw	0
 13328  0555  3190  20DE  3185   	fcall	_getMain_All_Error_Status
 13329  0558  0020               	movlb	0	; select bank0
 13330  0559  00AD               	movwf	??_Exception_Main
 13331  055A  082D               	movf	??_Exception_Main,w
 13332  055B  00B4               	movwf	Exception_Main@error
 13333                           
 13334                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13335  055C  01B5               	clrf	Exception_Main@lights
 13336  055D  01AF               	clrf	Exception_Main@count
 13337  055E  0AAF               	incf	Exception_Main@count,f
 13338                           
 13339                           ;Main_B1.c: 502: char status = 0;
 13340  055F  01AE               	clrf	Exception_Main@status
 13341                           
 13342                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13343  0560  0021               	movlb	1	; select bank1
 13344  0561  1DB9               	btfss	(_myMain^(0+128)+10),3
 13345  0562  2D72               	goto	l8296
 13346                           
 13347                           ;Main_B1.c: 505: if (error == 0) {
 13348  0563  0020               	movlb	0	; select bank0
 13349  0564  08B4               	movf	Exception_Main@error,f
 13350  0565  1D03               	skipz
 13351  0566  0008               	return
 13352                           
 13353                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13354  0567  0021               	movlb	1	; select bank1
 13355  0568  11B9               	bcf	(_myMain^(0+128)+10),3
 13356                           
 13357                           ;Main_B1.c: 509: setLED(99, 10);
 13358  0569  300A               	movlw	10
 13359  056A  0020               	movlb	0	; select bank0
 13360  056B  00AD               	movwf	??_Exception_Main
 13361  056C  082D               	movf	??_Exception_Main,w
 13362  056D  00A2               	movwf	setLED@command
 13363  056E  3063               	movlw	99
 13364  056F  3187  27C6         	fcall	_setLED
 13365                           
 13366                           ;Main_B1.c: 522: }
 13367                           ;Main_B1.c: 523: } else {
 13368  0571  0008               	return
 13369  0572                     l8296:	
 13370                           
 13371                           ;Main_B1.c: 524: if (error != 0) {
 13372  0572  0020               	movlb	0	; select bank0
 13373  0573  0834               	movf	Exception_Main@error,w
 13374  0574  1903               	btfsc	3,2
 13375  0575  0008               	return
 13376                           
 13377                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13378  0576  0021               	movlb	1	; select bank1
 13379  0577  15B9               	bsf	(_myMain^(0+128)+10),3
 13380                           
 13381                           ;Main_B1.c: 527: setLED(99, 11);
 13382  0578  300B               	movlw	11
 13383  0579  0020               	movlb	0	; select bank0
 13384  057A  00AD               	movwf	??_Exception_Main
 13385  057B  082D               	movf	??_Exception_Main,w
 13386  057C  00A2               	movwf	setLED@command
 13387  057D  3063               	movlw	99
 13388  057E  3187  27C6  3185   	fcall	_setLED
 13389                           
 13390                           ;Main_B1.c: 538: switch (error) {
 13391  0581  2E1E               	goto	l8344
 13392  0582                     l8302:	
 13393                           ;Main_B1.c: 539: case 2:
 13394                           
 13395                           
 13396                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13397  0582  319A  22A8  3185   	fcall	_getMain_All_LightsStatus
 13398  0585  3A01               	xorlw	1
 13399  0586  1D03               	skipz
 13400  0587  2D91               	goto	l8306
 13401                           
 13402                           ;Main_B1.c: 547: setBuz(10, 300);
 13403  0588  302C               	movlw	44
 13404  0589  0020               	movlb	0	; select bank0
 13405  058A  00A9               	movwf	setBuz@time
 13406  058B  3001               	movlw	1
 13407  058C  00AA               	movwf	setBuz@time+1
 13408  058D  300A               	movlw	10
 13409  058E  3194  2425  3185   	fcall	_setBuz
 13410  0591                     l8306:	
 13411                           
 13412                           ;Main_B1.c: 548: }
 13413                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13414  0591  0020               	movlb	0	; select bank0
 13415  0592  01B0               	clrf	Exception_Main@i
 13416  0593  01B1               	clrf	Exception_Main@i+1
 13417  0594                     l8316:	
 13418  0594  0831               	movf	Exception_Main@i+1,w
 13419  0595  3A80               	xorlw	128
 13420  0596  00AD               	movwf	??_Exception_Main
 13421  0597  3080               	movlw	128
 13422  0598  022D               	subwf	??_Exception_Main,w
 13423  0599  1D03               	skipz
 13424  059A  2D9D               	goto	u8615
 13425  059B  082F               	movf	Exception_Main@count,w
 13426  059C  0230               	subwf	Exception_Main@i,w
 13427  059D                     u8615:	
 13428  059D  1803               	btfsc	3,0
 13429  059E  2DBF               	goto	u8610
 13430                           
 13431                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13432  059F  0020               	movlb	0	; select bank0
 13433  05A0  0830               	movf	Exception_Main@i,w
 13434  05A1  3E01               	addlw	1
 13435  05A2  319B  23B8  3185   	fcall	_getDimmerLights_Status
 13436  05A5  3A01               	xorlw	1
 13437  05A6  1D03               	skipz
 13438  05A7  2DB9               	goto	l8314
 13439                           
 13440                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13441  05A8  0021               	movlb	1	; select bank1
 13442  05A9  084C               	movf	_DimmerLights^(0+128),w
 13443  05AA  0086               	movwf	6
 13444  05AB  3001               	movlw	1	; select bank2/3
 13445  05AC  0087               	movwf	7
 13446  05AD  1401               	bsf	1,0
 13447                           
 13448                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13449  05AE  0A4C               	incf	_DimmerLights^(0+128),w
 13450  05AF  0086               	movwf	6
 13451  05B0  3001               	movlw	1	; select bank2/3
 13452  05B1  0087               	movwf	7
 13453  05B2  1001               	bcf	1,0
 13454                           
 13455                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13456  05B3  0020               	movlb	0	; select bank0
 13457  05B4  0830               	movf	Exception_Main@i,w
 13458  05B5  3E01               	addlw	1
 13459  05B6  3191  21B2  3185   	fcall	_setDimmerLights_SwOff
 13460  05B9                     l8314:	
 13461  05B9  3001               	movlw	1
 13462  05BA  0020               	movlb	0	; select bank0
 13463  05BB  07B0               	addwf	Exception_Main@i,f
 13464  05BC  3000               	movlw	0
 13465  05BD  3DB1               	addwfc	Exception_Main@i+1,f
 13466  05BE  2D94               	goto	l8316
 13467  05BF                     u8610:	
 13468  05BF  0020               	movlb	0	; select bank0
 13469  05C0  0008               	return
 13470  05C1                     l8318:	
 13471                           ;Main_B1.c: 561: case 3:
 13472                           
 13473                           ;Main_B1.c: 556: }
 13474                           ;Main_B1.c: 557: }
 13475                           ;Main_B1.c: 560: break;
 13476                           
 13477                           
 13478                           ;Main_B1.c: 563: setBuz(5, 300);
 13479  05C1  302C               	movlw	44
 13480  05C2  0020               	movlb	0	; select bank0
 13481  05C3  00A9               	movwf	setBuz@time
 13482  05C4  3001               	movlw	1
 13483  05C5  00AA               	movwf	setBuz@time+1
 13484  05C6  3005               	movlw	5
 13485  05C7  3194  2425  3185   	fcall	_setBuz
 13486                           
 13487                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13488  05CA  319A  22B2  3185   	fcall	_getDimmerLights_Line
 13489  05CD  0020               	movlb	0	; select bank0
 13490  05CE  00AD               	movwf	??_Exception_Main
 13491  05CF  082D               	movf	??_Exception_Main,w
 13492  05D0  00B5               	movwf	Exception_Main@lights
 13493                           
 13494                           ;Main_B1.c: 565: if (lights == 0) {
 13495  05D1  08B5               	movf	Exception_Main@lights,f
 13496  05D2  1D03               	skipz
 13497  05D3  2E03               	goto	l8336
 13498                           
 13499                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13500  05D4  01B2               	clrf	Exception_Main@i_3625
 13501  05D5  01B3               	clrf	Exception_Main@i_3625+1
 13502  05D6                     l8334:	
 13503  05D6  0833               	movf	Exception_Main@i_3625+1,w
 13504  05D7  3A80               	xorlw	128
 13505  05D8  00AD               	movwf	??_Exception_Main
 13506  05D9  3080               	movlw	128
 13507  05DA  022D               	subwf	??_Exception_Main,w
 13508  05DB  1D03               	skipz
 13509  05DC  2DDF               	goto	u8645
 13510  05DD  082F               	movf	Exception_Main@count,w
 13511  05DE  0232               	subwf	Exception_Main@i_3625,w
 13512  05DF                     u8645:	
 13513  05DF  1803               	btfsc	3,0
 13514  05E0  2E01               	goto	u8640
 13515                           
 13516                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13517  05E1  0020               	movlb	0	; select bank0
 13518  05E2  0832               	movf	Exception_Main@i_3625,w
 13519  05E3  3E01               	addlw	1
 13520  05E4  319B  23B8  3185   	fcall	_getDimmerLights_Status
 13521  05E7  3A01               	xorlw	1
 13522  05E8  1D03               	skipz
 13523  05E9  2DFB               	goto	l8332
 13524                           
 13525                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13526  05EA  0021               	movlb	1	; select bank1
 13527  05EB  084C               	movf	_DimmerLights^(0+128),w
 13528  05EC  0086               	movwf	6
 13529  05ED  3001               	movlw	1	; select bank2/3
 13530  05EE  0087               	movwf	7
 13531  05EF  1401               	bsf	1,0
 13532                           
 13533                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13534  05F0  0A4C               	incf	_DimmerLights^(0+128),w
 13535  05F1  0086               	movwf	6
 13536  05F2  3001               	movlw	1	; select bank2/3
 13537  05F3  0087               	movwf	7
 13538  05F4  1001               	bcf	1,0
 13539                           
 13540                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13541  05F5  0020               	movlb	0	; select bank0
 13542  05F6  0832               	movf	Exception_Main@i_3625,w
 13543  05F7  3E01               	addlw	1
 13544  05F8  3191  21B2  3185   	fcall	_setDimmerLights_SwOff
 13545  05FB                     l8332:	
 13546  05FB  3001               	movlw	1
 13547  05FC  0020               	movlb	0	; select bank0
 13548  05FD  07B2               	addwf	Exception_Main@i_3625,f
 13549  05FE  3000               	movlw	0
 13550  05FF  3DB3               	addwfc	Exception_Main@i_3625+1,f
 13551  0600  2DD6               	goto	l8334
 13552  0601                     u8640:	
 13553  0601  0020               	movlb	0	; select bank0
 13554  0602  0008               	return
 13555  0603                     l8336:	
 13556                           ;Main_B1.c: 573: }
 13557                           ;Main_B1.c: 574: }
 13558                           ;Main_B1.c: 575: } else {
 13559                           
 13560                           
 13561                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13562  0603  0020               	movlb	0	; select bank0
 13563  0604  0835               	movf	Exception_Main@lights,w
 13564  0605  319B  23B8  3185   	fcall	_getDimmerLights_Status
 13565  0608  3A01               	xorlw	1
 13566  0609  1903               	btfsc	3,2
 13567  060A  2E0D               	goto	l8338
 13568  060B  0020               	movlb	0	; select bank0
 13569  060C  0008               	return
 13570  060D                     l8338:	
 13571                           
 13572                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13573  060D  0021               	movlb	1	; select bank1
 13574  060E  084C               	movf	_DimmerLights^(0+128),w
 13575  060F  0086               	movwf	6
 13576  0610  3001               	movlw	1	; select bank2/3
 13577  0611  0087               	movwf	7
 13578  0612  1401               	bsf	1,0
 13579                           
 13580                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13581  0613  0A4C               	incf	_DimmerLights^(0+128),w
 13582  0614  0086               	movwf	6
 13583  0615  3001               	movlw	1	; select bank2/3
 13584  0616  0087               	movwf	7
 13585  0617  1001               	bcf	1,0
 13586                           
 13587                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13588  0618  0020               	movlb	0	; select bank0
 13589  0619  0835               	movf	Exception_Main@lights,w
 13590  061A  3191  21B2         	fcall	_setDimmerLights_SwOff
 13591  061C  0020               	movlb	0	; select bank0
 13592  061D  0008               	return
 13593  061E                     l8344:	
 13594                           ;Main_B1.c: 586: }
 13595                           
 13596                           ;Main_B1.c: 582: }
 13597                           ;Main_B1.c: 583: }
 13598                           ;Main_B1.c: 585: break;
 13599                           
 13600  061E  0020               	movlb	0	; select bank0
 13601  061F  0834               	movf	Exception_Main@error,w
 13602                           
 13603                           ; Switch size 1, requested type "space"
 13604                           ; Number of cases is 2, Range of values is 2 to 3
 13605                           ; switch strategies available:
 13606                           ; Name         Instructions Cycles
 13607                           ; simple_byte            7     4 (average)
 13608                           ; direct_byte           13     9 (fixed)
 13609                           ; jumptable            263     9 (fixed)
 13610                           ;	Chosen strategy is simple_byte
 13611  0620  3A02               	xorlw	2	; case 2
 13612  0621  1903               	skipnz
 13613  0622  2D82               	goto	l8302
 13614  0623  3A01               	xorlw	1	; case 3
 13615  0624  1903               	skipnz
 13616  0625  2DC1               	goto	l8318
 13617  0626  2E28               	goto	l1507
 13618  0627  0008               	return
 13619  0628                     l1507:	
 13620  0628  0008               	return
 13621  0629                     __end_of_Exception_Main:	
 13622                           
 13623                           	psect	text87
 13624  1AB2                     __ptext87:	
 13625 ;; *************** function _getDimmerLights_Line *****************
 13626 ;; Defined at:
 13627 ;;		line 1063 in file "../src/Dimmer_B1.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;		None
 13630 ;; Auto vars:     Size  Location     Type
 13631 ;;  line            1    0[BANK0 ] unsigned char 
 13632 ;; Return value:  Size  Location     Type
 13633 ;;                  1    wreg      unsigned char 
 13634 ;; Registers used:
 13635 ;;		wreg, status,2
 13636 ;; Tracked objects:
 13637 ;;		On entry : 0/0
 13638 ;;		On exit  : 0/0
 13639 ;;		Unchanged: 0/0
 13640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;Total ram usage:        1 bytes
 13646 ;; Hardware stack levels used:    1
 13647 ;; Hardware stack levels required when called:    5
 13648 ;; This function calls:
 13649 ;;		Nothing
 13650 ;; This function is called by:
 13651 ;;		_Exception_Main
 13652 ;; This function uses a non-reentrant model
 13653 ;;
 13654                           
 13655                           
 13656                           ;psect for function _getDimmerLights_Line
 13657  1AB2                     _getDimmerLights_Line:	
 13658                           
 13659                           ;Dimmer_B1.c: 1064: char line = 0;
 13660                           
 13661                           ;incstack = 0
 13662                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13663  1AB2  0020               	movlb	0	; select bank0
 13664  1AB3  01A0               	clrf	getDimmerLights_Line@line
 13665                           
 13666                           ;Dimmer_B1.c: 1066: if (DimmerLights1.Line == 1) {
 13667  1AB4  0022               	movlb	2	; select bank2
 13668  1AB5  1CE1               	btfss	(_DimmerLights1^(0+256)+1),1
 13669  1AB6  2ABA               	goto	l7320
 13670                           
 13671                           ;Dimmer_B1.c: 1067: line = 1;
 13672  1AB7  0020               	movlb	0	; select bank0
 13673  1AB8  01A0               	clrf	getDimmerLights_Line@line
 13674  1AB9  0AA0               	incf	getDimmerLights_Line@line,f
 13675  1ABA                     l7320:	
 13676                           
 13677                           ;Dimmer_B1.c: 1068: }
 13678                           ;Dimmer_B1.c: 1080: return line;
 13679  1ABA  0020               	movlb	0	; select bank0
 13680  1ABB  0820               	movf	getDimmerLights_Line@line,w
 13681  1ABC  0008               	return
 13682  1ABD                     __end_of_getDimmerLights_Line:	
 13683                           
 13684                           	psect	text88
 13685  1E62                     __ptext88:	
 13686 ;; *************** function _DimmerLights_Main *****************
 13687 ;; Defined at:
 13688 ;;		line 789 in file "../src/Dimmer_B1.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;		None
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;		None
 13693 ;; Return value:  Size  Location     Type
 13694 ;;		None               void
 13695 ;; Registers used:
 13696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;Total ram usage:        0 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:   10
 13709 ;; This function calls:
 13710 ;;		_getLoad_OK
 13711 ;;		_getMain_All_Error_Status
 13712 ;;		_getMain_All_LightsStatus
 13713 ;;		_setDimmerLights_Main
 13714 ;; This function is called by:
 13715 ;;		_main
 13716 ;; This function uses a non-reentrant model
 13717 ;;
 13718                           
 13719                           
 13720                           ;psect for function _DimmerLights_Main
 13721  1E62                     _DimmerLights_Main:	
 13722                           
 13723                           ;Dimmer_B1.c: 792: if (Dimmer.LoadGO == 1) {
 13724                           
 13725                           ;incstack = 0
 13726                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13727  1E62  0022               	movlb	2	; select bank2
 13728  1E63  1CAC               	btfss	_Dimmer^(0+256),1
 13729  1E64  2E7A               	goto	l7902
 13730                           
 13731                           ;Dimmer_B1.c: 793: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13732  1E65  319A  227D  319E   	fcall	_getLoad_OK
 13733  1E68  3A01               	xorlw	1
 13734  1E69  1903               	skipnz
 13735  1E6A  2E78               	goto	l762
 13736  1E6B  3000               	movlw	0
 13737  1E6C  3190  20DE  319E   	fcall	_getMain_All_Error_Status
 13738  1E6F  3800               	iorlw	0
 13739  1E70  1D03               	skipz
 13740  1E71  2E78               	goto	l762
 13741  1E72  319A  22A8  319E   	fcall	_getMain_All_LightsStatus
 13742  1E75  3800               	iorlw	0
 13743  1E76  1D03               	skipz
 13744  1E77  2E7A               	goto	l7902
 13745  1E78                     l762:	
 13746                           
 13747                           ;Dimmer_B1.c: 794: Dimmer.LoadGO = 0;
 13748  1E78  0022               	movlb	2	; select bank2
 13749  1E79  10AC               	bcf	_Dimmer^(0+256),1
 13750  1E7A                     l7902:	
 13751                           
 13752                           ;Dimmer_B1.c: 795: }
 13753                           ;Dimmer_B1.c: 796: }
 13754                           ;Dimmer_B1.c: 800: setDimmerLights_Main(1);
 13755  1E7A  3001               	movlw	1
 13756  1E7B  3197  272A         	fcall	_setDimmerLights_Main
 13757  1E7D  0008               	return
 13758  1E7E                     __end_of_DimmerLights_Main:	
 13759                           
 13760                           	psect	text89
 13761  172A                     __ptext89:	
 13762 ;; *************** function _setDimmerLights_Main *****************
 13763 ;; Defined at:
 13764 ;;		line 818 in file "../src/Dimmer_B1.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;  lights          1    wreg     unsigned char 
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;  lights          1    1[BANK1 ] unsigned char 
 13769 ;; Return value:  Size  Location     Type
 13770 ;;		None               void
 13771 ;; Registers used:
 13772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;Total ram usage:        1 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; Hardware stack levels required when called:    9
 13785 ;; This function calls:
 13786 ;;		_DimmerLights_SelectPointer
 13787 ;;		_getDimmerLights_Allow_Condition
 13788 ;;		_getMain_All_LightsStatus
 13789 ;;		_setDimmerLights_Dimming
 13790 ;;		_setDimmerLights_OnOff
 13791 ;; This function is called by:
 13792 ;;		_DimmerLights_Main
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           
 13797                           ;psect for function _setDimmerLights_Main
 13798  172A                     _setDimmerLights_Main:	
 13799                           
 13800                           ;incstack = 0
 13801                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13802                           ;setDimmerLights_Main@lights stored from wreg
 13803  172A  0021               	movlb	1	; select bank1
 13804  172B  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13805                           
 13806                           ;Dimmer_B1.c: 820: DimmerLights_SelectPointer(lights);
 13807  172C  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13808  172D  319A  22EA  3197   	fcall	_DimmerLights_SelectPointer
 13809                           
 13810                           ;Dimmer_B1.c: 821: if (DimmerLights->Trigger == 1) {
 13811  1730  0021               	movlb	1	; select bank1
 13812  1731  084C               	movf	_DimmerLights^(0+128),w
 13813  1732  0086               	movwf	6
 13814  1733  3001               	movlw	1	; select bank2/3
 13815  1734  0087               	movwf	7
 13816  1735  1C81               	btfss	1,1
 13817  1736  2F59               	goto	l7298
 13818                           
 13819                           ;Dimmer_B1.c: 822: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13820  1737  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13821  1738  319D  2550  3197   	fcall	_getDimmerLights_Allow_Condition
 13822  173B  3800               	iorlw	0
 13823  173C  1D03               	skipz
 13824  173D  0008               	return
 13825                           
 13826                           ;Dimmer_B1.c: 823: DimmerLights->Trigger = 0;
 13827  173E  0021               	movlb	1	; select bank1
 13828  173F  084C               	movf	_DimmerLights^(0+128),w
 13829  1740  0086               	movwf	6
 13830  1741  3001               	movlw	1	; select bank2/3
 13831  1742  0087               	movwf	7
 13832  1743  1081               	bcf	1,1
 13833                           
 13834                           ;Dimmer_B1.c: 824: if (DimmerLights->Switch == 1) {
 13835  1744  084C               	movf	_DimmerLights^(0+128),w
 13836  1745  0086               	movwf	6
 13837  1746  3001               	movlw	1	; select bank2/3
 13838  1747  0087               	movwf	7
 13839  1748  1D01               	btfss	1,2
 13840  1749  2F52               	goto	l7296
 13841                           
 13842                           ;Dimmer_B1.c: 825: setDimmerLights_OnOff(lights, 1);
 13843  174A  0020               	movlb	0	; select bank0
 13844  174B  01ED               	clrf	setDimmerLights_OnOff@command
 13845  174C  0AED               	incf	setDimmerLights_OnOff@command,f
 13846  174D  0021               	movlb	1	; select bank1
 13847  174E  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13848  174F  318F  273A         	fcall	_setDimmerLights_OnOff
 13849                           
 13850                           ;Dimmer_B1.c: 826: } else {
 13851  1751  0008               	return
 13852  1752                     l7296:	
 13853                           
 13854                           ;Dimmer_B1.c: 827: setDimmerLights_OnOff(lights, 0);
 13855  1752  0020               	movlb	0	; select bank0
 13856  1753  01ED               	clrf	setDimmerLights_OnOff@command
 13857  1754  0021               	movlb	1	; select bank1
 13858  1755  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13859  1756  318F  273A         	fcall	_setDimmerLights_OnOff
 13860                           
 13861                           ;Dimmer_B1.c: 828: }
 13862                           ;Dimmer_B1.c: 829: }
 13863                           ;Dimmer_B1.c: 830: } else {
 13864  1758  0008               	return
 13865  1759                     l7298:	
 13866                           
 13867                           ;Dimmer_B1.c: 831: if (getMain_All_LightsStatus() == 1) {
 13868  1759  319A  22A8  3197   	fcall	_getMain_All_LightsStatus
 13869  175C  3A01               	xorlw	1
 13870  175D  1D03               	skipz
 13871  175E  2F88               	goto	l7310
 13872                           
 13873                           ;Dimmer_B1.c: 832: if (DimmerLights->DimmingTrigger == 1) {
 13874  175F  0021               	movlb	1	; select bank1
 13875  1760  084C               	movf	_DimmerLights^(0+128),w
 13876  1761  0086               	movwf	6
 13877  1762  3001               	movlw	1	; select bank2/3
 13878  1763  0087               	movwf	7
 13879  1764  1E01               	btfss	1,4
 13880  1765  0008               	return
 13881                           
 13882                           ;Dimmer_B1.c: 833: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13883  1766  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13884  1767  319D  2550  3197   	fcall	_getDimmerLights_Allow_Condition
 13885  176A  3800               	iorlw	0
 13886  176B  1D03               	skipz
 13887  176C  0008               	return
 13888                           
 13889                           ;Dimmer_B1.c: 834: DimmerLights->DimmingTrigger = 0;
 13890  176D  0021               	movlb	1	; select bank1
 13891  176E  084C               	movf	_DimmerLights^(0+128),w
 13892  176F  0086               	movwf	6
 13893  1770  3001               	movlw	1	; select bank2/3
 13894  1771  0087               	movwf	7
 13895  1772  1201               	bcf	1,4
 13896                           
 13897                           ;Dimmer_B1.c: 835: if (DimmerLights->DimmingSwitch == 1) {
 13898  1773  084C               	movf	_DimmerLights^(0+128),w
 13899  1774  0086               	movwf	6
 13900  1775  3001               	movlw	1	; select bank2/3
 13901  1776  0087               	movwf	7
 13902  1777  1E81               	btfss	1,5
 13903  1778  2F81               	goto	l7308
 13904                           
 13905                           ;Dimmer_B1.c: 836: setDimmerLights_Dimming(lights, 1);
 13906  1779  0020               	movlb	0	; select bank0
 13907  177A  01EA               	clrf	setDimmerLights_Dimming@status
 13908  177B  0AEA               	incf	setDimmerLights_Dimming@status,f
 13909  177C  0021               	movlb	1	; select bank1
 13910  177D  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13911  177E  3193  23CF         	fcall	_setDimmerLights_Dimming
 13912                           
 13913                           ;Dimmer_B1.c: 837: } else {
 13914  1780  0008               	return
 13915  1781                     l7308:	
 13916                           
 13917                           ;Dimmer_B1.c: 838: setDimmerLights_Dimming(lights, 0);
 13918  1781  0020               	movlb	0	; select bank0
 13919  1782  01EA               	clrf	setDimmerLights_Dimming@status
 13920  1783  0021               	movlb	1	; select bank1
 13921  1784  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13922  1785  3193  23CF         	fcall	_setDimmerLights_Dimming
 13923                           
 13924                           ;Dimmer_B1.c: 839: }
 13925                           ;Dimmer_B1.c: 840: }
 13926                           ;Dimmer_B1.c: 841: }
 13927                           ;Dimmer_B1.c: 842: } else {
 13928  1787  0008               	return
 13929  1788                     l7310:	
 13930                           
 13931                           ;Dimmer_B1.c: 843: if (DimmerLights->DimmingTrigger == 1) {
 13932  1788  0021               	movlb	1	; select bank1
 13933  1789  084C               	movf	_DimmerLights^(0+128),w
 13934  178A  0086               	movwf	6
 13935  178B  3001               	movlw	1	; select bank2/3
 13936  178C  0087               	movwf	7
 13937  178D  1E01               	btfss	1,4
 13938  178E  0008               	return
 13939                           
 13940                           ;Dimmer_B1.c: 844: DimmerLights->DimmingTrigger = 0;
 13941  178F  084C               	movf	_DimmerLights^(0+128),w
 13942  1790  0086               	movwf	6
 13943  1791  3001               	movlw	1	; select bank2/3
 13944  1792  0087               	movwf	7
 13945  1793  1201               	bcf	1,4
 13946  1794  0008               	return
 13947  1795                     __end_of_setDimmerLights_Main:	
 13948                           
 13949                           	psect	text90
 13950  0F3A                     __ptext90:	
 13951 ;; *************** function _setDimmerLights_OnOff *****************
 13952 ;; Defined at:
 13953 ;;		line 852 in file "../src/Dimmer_B1.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;  lights          1    wreg     unsigned char 
 13956 ;;  command         1   77[BANK0 ] unsigned char 
 13957 ;; Auto vars:     Size  Location     Type
 13958 ;;  lights          1    0[BANK1 ] unsigned char 
 13959 ;; Return value:  Size  Location     Type
 13960 ;;		None               void
 13961 ;; Registers used:
 13962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13963 ;; Tracked objects:
 13964 ;;		On entry : 0/0
 13965 ;;		On exit  : 0/0
 13966 ;;		Unchanged: 0/0
 13967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13968 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13969 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13971 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;Total ram usage:        4 bytes
 13973 ;; Hardware stack levels used:    1
 13974 ;; Hardware stack levels required when called:    8
 13975 ;; This function calls:
 13976 ;;		_getCmd_Status
 13977 ;;		_getDelayOff_GO
 13978 ;;		_getDimmerLights_PercentToValue
 13979 ;;		_getMain_All_LightsStatus
 13980 ;;		_setCmd_Status
 13981 ;;		_setDelayOff_GO
 13982 ;;		_setDimmerIntr_ControlStatus
 13983 ;;		_setDimmerIntr_DimmingValue
 13984 ;;		_setDimmerIntr_Dimming_RF
 13985 ;;		_setDimmerIntr_MaxmumValue
 13986 ;;		_setDimmerLights_DimmingClose
 13987 ;;		_setDimmerLights_Line
 13988 ;;		_setLED
 13989 ;;		_setProductData
 13990 ;;		_setRF_DimmerLights
 13991 ;;		_setTxData
 13992 ;; This function is called by:
 13993 ;;		_setDimmerLights_Main
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           
 13998                           ;psect for function _setDimmerLights_OnOff
 13999  0F3A                     _setDimmerLights_OnOff:	
 14000                           
 14001                           ;incstack = 0
 14002                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14003                           ;setDimmerLights_OnOff@lights stored from wreg
 14004  0F3A  0021               	movlb	1	; select bank1
 14005  0F3B  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14006                           
 14007                           ;Dimmer_B1.c: 854: if (command == 1) {
 14008  0F3C  0020               	movlb	0	; select bank0
 14009  0F3D  086D               	movf	setDimmerLights_OnOff@command,w
 14010  0F3E  3A01               	xorlw	1
 14011  0F3F  1D03               	skipz
 14012  0F40  2F9F               	goto	l6964
 14013                           
 14014                           ;Dimmer_B1.c: 856: setDimmerIntr_ControlStatus(lights, 1);
 14015  0F41  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14016  0F42  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14017  0F43  0021               	movlb	1	; select bank1
 14018  0F44  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14019  0F45  319D  257C  318F   	fcall	_setDimmerIntr_ControlStatus
 14020                           
 14021                           ;Dimmer_B1.c: 859: Dimmer.Load_Status = 1;
 14022  0F48  0022               	movlb	2	; select bank2
 14023  0F49  152C               	bsf	_Dimmer^(0+256),2
 14024                           
 14025                           ;Dimmer_B1.c: 860: setDimmerLights_Line(lights);
 14026  0F4A  0021               	movlb	1	; select bank1
 14027  0F4B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14028  0F4C  319B  23C9  318F   	fcall	_setDimmerLights_Line
 14029                           
 14030                           ;Dimmer_B1.c: 866: setLED(lights, 0);
 14031  0F4F  0020               	movlb	0	; select bank0
 14032  0F50  01A2               	clrf	setLED@command
 14033  0F51  0021               	movlb	1	; select bank1
 14034  0F52  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14035  0F53  3187  27C6  318F   	fcall	_setLED
 14036                           
 14037                           ;Dimmer_B1.c: 867: ;;
 14038                           ;Dimmer_B1.c: 887: if (DimmerLights->DimmingRun == 1) {
 14039  0F56  0021               	movlb	1	; select bank1
 14040  0F57  0A4C               	incf	_DimmerLights^(0+128),w
 14041  0F58  0086               	movwf	6
 14042  0F59  3001               	movlw	1	; select bank2/3
 14043  0F5A  0087               	movwf	7
 14044  0F5B  1F01               	btfss	1,6
 14045  0F5C  2F81               	goto	l6956
 14046                           
 14047                           ;Dimmer_B1.c: 888: DimmerLights->DimmingRun = 0;
 14048  0F5D  0A4C               	incf	_DimmerLights^(0+128),w
 14049  0F5E  0086               	movwf	6
 14050  0F5F  3001               	movlw	1	; select bank2/3
 14051  0F60  0087               	movwf	7
 14052  0F61  1301               	bcf	1,6
 14053                           
 14054                           ;Dimmer_B1.c: 889: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14055  0F62  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14056  0F63  3E14               	addlw	20
 14057  0F64  076E               	addwf	_product^(0+128),w
 14058  0F65  0020               	movlb	0	; select bank0
 14059  0F66  00EE               	movwf	??_setDimmerLights_OnOff
 14060  0F67  086E               	movf	??_setDimmerLights_OnOff,w
 14061  0F68  0086               	movwf	6
 14062  0F69  3001               	movlw	1	; select bank2/3
 14063  0F6A  0087               	movwf	7
 14064  0F6B  0801               	movf	1,w
 14065  0F6C  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14066  0F6F  0020               	movlb	0	; select bank0
 14067  0F70  00EF               	movwf	??_setDimmerLights_OnOff+1
 14068  0F71  086F               	movf	??_setDimmerLights_OnOff+1,w
 14069  0F72  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14070  0F73  0021               	movlb	1	; select bank1
 14071  0F74  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14072  0F75  319B  2302  318F   	fcall	_setDimmerIntr_MaxmumValue
 14073                           
 14074                           ;Dimmer_B1.c: 890: setDimmerIntr_Dimming_RF(lights, 1);
 14075  0F78  0020               	movlb	0	; select bank0
 14076  0F79  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14077  0F7A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14078  0F7B  0021               	movlb	1	; select bank1
 14079  0F7C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14080  0F7D  319D  2594  318F   	fcall	_setDimmerIntr_Dimming_RF
 14081                           
 14082                           ;Dimmer_B1.c: 891: } else {
 14083  0F80  2F98               	goto	l6958
 14084  0F81                     l6956:	
 14085                           
 14086                           ;Dimmer_B1.c: 892: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14087  0F81  0021               	movlb	1	; select bank1
 14088  0F82  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14089  0F83  3E14               	addlw	20
 14090  0F84  076E               	addwf	_product^(0+128),w
 14091  0F85  0020               	movlb	0	; select bank0
 14092  0F86  00EE               	movwf	??_setDimmerLights_OnOff
 14093  0F87  086E               	movf	??_setDimmerLights_OnOff,w
 14094  0F88  0086               	movwf	6
 14095  0F89  3001               	movlw	1	; select bank2/3
 14096  0F8A  0087               	movwf	7
 14097  0F8B  0801               	movf	1,w
 14098  0F8C  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14099  0F8F  0020               	movlb	0	; select bank0
 14100  0F90  00EF               	movwf	??_setDimmerLights_OnOff+1
 14101  0F91  086F               	movf	??_setDimmerLights_OnOff+1,w
 14102  0F92  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14103  0F93  0021               	movlb	1	; select bank1
 14104  0F94  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14105  0F95  319B  230E  318F   	fcall	_setDimmerIntr_DimmingValue
 14106  0F98                     l6958:	
 14107                           
 14108                           ;Dimmer_B1.c: 895: }
 14109                           ;Dimmer_B1.c: 897: if (lights == 1) {
 14110  0F98  0021               	movlb	1	; select bank1
 14111  0F99  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14112  0F9A  3A01               	xorlw	1
 14113  0F9B  1D03               	skipz
 14114  0F9C  2FCE               	goto	l6978
 14115                           
 14116                           ;Dimmer_B1.c: 899: DimmerIntr1.TuneGO = 1;
 14117  0F9D  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14118                           
 14119                           ;Dimmer_B1.c: 905: }
 14120                           ;Dimmer_B1.c: 911: } else if (command == 0) {
 14121                           
 14122                           ;Dimmer_B1.c: 901: } else if (lights == 2) {
 14123  0F9E  2FCE               	goto	l6978
 14124  0F9F                     l6964:	
 14125  0F9F  0020               	movlb	0	; select bank0
 14126  0FA0  08ED               	movf	setDimmerLights_OnOff@command,f
 14127  0FA1  1D03               	skipz
 14128  0FA2  2FCE               	goto	l6978
 14129                           
 14130                           ;Dimmer_B1.c: 913: setDimmerIntr_ControlStatus(lights, 0);
 14131  0FA3  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14132  0FA4  0021               	movlb	1	; select bank1
 14133  0FA5  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14134  0FA6  319D  257C  318F   	fcall	_setDimmerIntr_ControlStatus
 14135                           
 14136                           ;Dimmer_B1.c: 915: Dimmer.Load_Status = 0;
 14137  0FA9  0022               	movlb	2	; select bank2
 14138  0FAA  112C               	bcf	_Dimmer^(0+256),2
 14139                           
 14140                           ;Dimmer_B1.c: 916: setDimmerLights_Line(0);
 14141  0FAB  3000               	movlw	0
 14142  0FAC  319B  23C9  318F   	fcall	_setDimmerLights_Line
 14143                           
 14144                           ;Dimmer_B1.c: 920: if (getDelayOff_GO(lights) == 1) {
 14145  0FAF  0021               	movlb	1	; select bank1
 14146  0FB0  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14147  0FB1  319B  23DA  318F   	fcall	_getDelayOff_GO
 14148  0FB4  3A01               	xorlw	1
 14149  0FB5  1D03               	skipz
 14150  0FB6  2FBF               	goto	l789
 14151                           
 14152                           ;Dimmer_B1.c: 921: setDelayOff_GO(lights, 0, 0);
 14153  0FB7  0020               	movlb	0	; select bank0
 14154  0FB8  01E5               	clrf	setDelayOff_GO@command
 14155  0FB9  01E6               	clrf	setDelayOff_GO@value
 14156  0FBA  0021               	movlb	1	; select bank1
 14157  0FBB  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14158  0FBC  318C  2409  318F   	fcall	_setDelayOff_GO
 14159  0FBF                     l789:	
 14160                           
 14161                           ;Dimmer_B1.c: 922: }
 14162                           ;Dimmer_B1.c: 927: setLED(lights, 1);
 14163  0FBF  0020               	movlb	0	; select bank0
 14164  0FC0  01A2               	clrf	setLED@command
 14165  0FC1  0AA2               	incf	setLED@command,f
 14166  0FC2  0021               	movlb	1	; select bank1
 14167  0FC3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14168  0FC4  3187  27C6  318F   	fcall	_setLED
 14169                           
 14170                           ;Dimmer_B1.c: 928: ;;
 14171                           ;Dimmer_B1.c: 932: if (lights == 1) {
 14172  0FC7  0021               	movlb	1	; select bank1
 14173  0FC8  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14174  0FC9  3A01               	xorlw	1
 14175  0FCA  1D03               	skipz
 14176  0FCB  2FCE               	goto	l6978
 14177                           
 14178                           ;Dimmer_B1.c: 933: RB1 = 0;
 14179  0FCC  0020               	movlb	0	; select bank0
 14180  0FCD  108D               	bcf	13,1	;volatile
 14181  0FCE                     l6978:	
 14182                           
 14183                           ;Dimmer_B1.c: 935: }
 14184                           ;Dimmer_B1.c: 946: }
 14185                           ;Dimmer_B1.c: 948: setDimmerLights_DimmingClose();
 14186  0FCE  319A  2256  318F   	fcall	_setDimmerLights_DimmingClose
 14187                           
 14188                           ;Dimmer_B1.c: 950: setRF_DimmerLights(lights, command);
 14189  0FD1  0020               	movlb	0	; select bank0
 14190  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14191  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14192  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14193  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14194  0FD6  0021               	movlb	1	; select bank1
 14195  0FD7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14196  0FD8  3196  26C5  318F   	fcall	_setRF_DimmerLights
 14197                           
 14198                           ;Dimmer_B1.c: 952: if (getCmd_Status(1) == 1) {
 14199  0FDB  3001               	movlw	1
 14200  0FDC  319C  242F  318F   	fcall	_getCmd_Status
 14201  0FDF  3A01               	xorlw	1
 14202  0FE0  1D03               	skipz
 14203  0FE1  2FFD               	goto	l6994
 14204                           
 14205                           ;Dimmer_B1.c: 953: if (getMain_All_LightsStatus() == 0) {
 14206  0FE2  319A  22A8  318F   	fcall	_getMain_All_LightsStatus
 14207  0FE5  3800               	iorlw	0
 14208  0FE6  1D03               	skipz
 14209  0FE7  0008               	return
 14210                           
 14211                           ;Dimmer_B1.c: 954: setCmd_Status(1, 0);
 14212  0FE8  0020               	movlb	0	; select bank0
 14213  0FE9  01A0               	clrf	setCmd_Status@cmd
 14214  0FEA  3001               	movlw	1
 14215  0FEB  319D  25AC  318F   	fcall	_setCmd_Status
 14216                           
 14217                           ;Dimmer_B1.c: 955: setProductData(11, 0);
 14218  0FEE  0020               	movlb	0	; select bank0
 14219  0FEF  01E2               	clrf	setProductData@value
 14220  0FF0  300B               	movlw	11
 14221  0FF1  319A  22F6  318F   	fcall	_setProductData
 14222                           
 14223                           ;Dimmer_B1.c: 956: setProductData(17, 0);
 14224  0FF4  0020               	movlb	0	; select bank0
 14225  0FF5  01E2               	clrf	setProductData@value
 14226  0FF6  3011               	movlw	17
 14227  0FF7  319A  22F6  318F   	fcall	_setProductData
 14228                           
 14229                           ;Dimmer_B1.c: 957: setTxData();
 14230  0FFA  318E  267F         	fcall	_setTxData
 14231                           
 14232                           ;Dimmer_B1.c: 958: }
 14233                           ;Dimmer_B1.c: 959: } else {
 14234  0FFC  0008               	return
 14235  0FFD                     l6994:	
 14236                           
 14237                           ;Dimmer_B1.c: 960: setTxData();
 14238  0FFD  318E  267F         	fcall	_setTxData
 14239  0FFF  0008               	return
 14240  1000                     __end_of_setDimmerLights_OnOff:	
 14241                           
 14242                           	psect	text91
 14243  07C6                     __ptext91:	
 14244 ;; *************** function _setLED *****************
 14245 ;; Defined at:
 14246 ;;		line 81 in file "../src/LED_B1.c"
 14247 ;; Parameters:    Size  Location     Type
 14248 ;;  led             1    wreg     unsigned char 
 14249 ;;  command         1    2[BANK0 ] unsigned char 
 14250 ;; Auto vars:     Size  Location     Type
 14251 ;;  led             1    3[BANK0 ] unsigned char 
 14252 ;; Return value:  Size  Location     Type
 14253 ;;		None               void
 14254 ;; Registers used:
 14255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14256 ;; Tracked objects:
 14257 ;;		On entry : 0/0
 14258 ;;		On exit  : 0/0
 14259 ;;		Unchanged: 0/0
 14260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14261 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;Total ram usage:        2 bytes
 14266 ;; Hardware stack levels used:    1
 14267 ;; Hardware stack levels required when called:    6
 14268 ;; This function calls:
 14269 ;;		_LedPointSelect
 14270 ;; This function is called by:
 14271 ;;		_setDimmerLights_OnOff
 14272 ;;		_setLED_Initialization
 14273 ;;		_Exception_Main
 14274 ;;		_setSw_Initialization
 14275 ;; This function uses a non-reentrant model
 14276 ;;
 14277                           
 14278                           
 14279                           ;psect for function _setLED
 14280  07C6                     _setLED:	
 14281                           
 14282                           ;incstack = 0
 14283                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14284                           ;setLED@led stored from wreg
 14285  07C6  0020               	movlb	0	; select bank0
 14286  07C7  00A3               	movwf	setLED@led
 14287                           
 14288                           ;LED_B1.c: 82: LedPointSelect(led);
 14289  07C8  0823               	movf	setLED@led,w
 14290  07C9  319B  231A  3187   	fcall	_LedPointSelect
 14291                           
 14292                           ;LED_B1.c: 83: if (command == 0) {
 14293  07CC  0020               	movlb	0	; select bank0
 14294  07CD  08A2               	movf	setLED@command,f
 14295  07CE  1D03               	skipz
 14296  07CF  2FD5               	goto	l6672
 14297                           
 14298                           ;LED_B1.c: 112: if (led == 99) {
 14299  07D0  0823               	movf	setLED@led,w
 14300  07D1  3A63               	xorlw	99
 14301  07D2  1D03               	skipz
 14302  07D3  2FD5               	goto	l6672
 14303                           
 14304                           ;LED_B1.c: 116: RB5 = 1;
 14305  07D4  168D               	bsf	13,5	;volatile
 14306  07D5                     l6672:	
 14307                           
 14308                           ;LED_B1.c: 118: }
 14309                           ;LED_B1.c: 120: }
 14310                           ;LED_B1.c: 121: if (command == 1) {
 14311  07D5  0822               	movf	setLED@command,w
 14312  07D6  3A01               	xorlw	1
 14313  07D7  1D03               	skipz
 14314  07D8  2FDE               	goto	l6678
 14315                           
 14316                           ;LED_B1.c: 150: if (led == 99) {
 14317  07D9  0823               	movf	setLED@led,w
 14318  07DA  3A63               	xorlw	99
 14319  07DB  1D03               	skipz
 14320  07DC  2FDE               	goto	l6678
 14321                           
 14322                           ;LED_B1.c: 154: RB5 = 0;
 14323  07DD  128D               	bcf	13,5	;volatile
 14324  07DE                     l6678:	
 14325                           
 14326                           ;LED_B1.c: 156: }
 14327                           ;LED_B1.c: 158: }
 14328                           ;LED_B1.c: 159: if (command == 10) {
 14329  07DE  0822               	movf	setLED@command,w
 14330  07DF  3A0A               	xorlw	10
 14331  07E0  1D03               	skipz
 14332  07E1  2FF4               	goto	l6686
 14333                           
 14334                           ;LED_B1.c: 160: LED->GO = 0;
 14335  07E2  0021               	movlb	1	; select bank1
 14336  07E3  084D               	movf	_LED^(0+128),w
 14337  07E4  0086               	movwf	6
 14338  07E5  3001               	movlw	1	; select bank2/3
 14339  07E6  0087               	movwf	7
 14340  07E7  1081               	bcf	1,1
 14341                           
 14342                           ;LED_B1.c: 161: LED->Time = 0;
 14343  07E8  0A4D               	incf	_LED^(0+128),w
 14344  07E9  0086               	movwf	6
 14345  07EA  3001               	movlw	1	; select bank2/3
 14346  07EB  0087               	movwf	7
 14347  07EC  3000               	movlw	0
 14348  07ED  3FC0               	movwi [0]fsr1
 14349  07EE  3FC1               	movwi [1]fsr1
 14350                           
 14351                           ;LED_B1.c: 190: if (led == 99) {
 14352  07EF  0020               	movlb	0	; select bank0
 14353  07F0  0823               	movf	setLED@led,w
 14354  07F1  3A63               	xorlw	99
 14355  07F2  1903               	btfsc	3,2
 14356                           
 14357                           ;LED_B1.c: 194: RB5 = 1;
 14358  07F3  168D               	bsf	13,5	;volatile
 14359  07F4                     l6686:	
 14360                           
 14361                           ;LED_B1.c: 196: }
 14362                           ;LED_B1.c: 198: }
 14363                           ;LED_B1.c: 199: if (command == 11) {
 14364  07F4  0822               	movf	setLED@command,w
 14365  07F5  3A0B               	xorlw	11
 14366  07F6  1D03               	skipz
 14367  07F7  0008               	return
 14368                           
 14369                           ;LED_B1.c: 200: LED->GO = 1;
 14370  07F8  0021               	movlb	1	; select bank1
 14371  07F9  084D               	movf	_LED^(0+128),w
 14372  07FA  0086               	movwf	6
 14373  07FB  3001               	movlw	1	; select bank2/3
 14374  07FC  0087               	movwf	7
 14375  07FD  1481               	bsf	1,1
 14376  07FE  0008               	return
 14377  07FF                     __end_of_setLED:	
 14378                           
 14379                           	psect	text92
 14380  1B1A                     __ptext92:	
 14381 ;; *************** function _LedPointSelect *****************
 14382 ;; Defined at:
 14383 ;;		line 7 in file "../src/LED_B1.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;  led             1    wreg     unsigned char 
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;  led             1    1[BANK0 ] unsigned char 
 14388 ;; Return value:  Size  Location     Type
 14389 ;;		None               void
 14390 ;; Registers used:
 14391 ;;		wreg
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;Total ram usage:        2 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    5
 14404 ;; This function calls:
 14405 ;;		Nothing
 14406 ;; This function is called by:
 14407 ;;		_setLED_Initialization
 14408 ;;		_setLED
 14409 ;;		_setLED_Main
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           
 14414                           ;psect for function _LedPointSelect
 14415  1B1A                     _LedPointSelect:	
 14416                           
 14417                           ;incstack = 0
 14418                           ; Regs used in _LedPointSelect: [wreg]
 14419                           ;LedPointSelect@led stored from wreg
 14420  1B1A  0020               	movlb	0	; select bank0
 14421  1B1B  00A1               	movwf	LedPointSelect@led
 14422                           
 14423                           ;LED_B1.c: 24: if (led == 99) {
 14424  1B1C  0821               	movf	LedPointSelect@led,w
 14425  1B1D  3A63               	xorlw	99
 14426  1B1E  1D03               	skipz
 14427  1B1F  0008               	return
 14428                           
 14429                           ;LED_B1.c: 25: LED = &VarErrLED;
 14430  1B20  3068               	movlw	_VarErrLED& (0+255)
 14431  1B21  00A0               	movwf	??_LedPointSelect
 14432  1B22  0820               	movf	??_LedPointSelect,w
 14433  1B23  0021               	movlb	1	; select bank1
 14434  1B24  00CD               	movwf	_LED^(0+128)
 14435  1B25  0008               	return
 14436  1B26                     __end_of_LedPointSelect:	
 14437                           
 14438                           	psect	text93
 14439  1A56                     __ptext93:	
 14440 ;; *************** function _setDimmerLights_DimmingClose *****************
 14441 ;; Defined at:
 14442 ;;		line 1761 in file "../src/Dimmer_B1.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;		None
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;		None
 14447 ;; Return value:  Size  Location     Type
 14448 ;;		None               void
 14449 ;; Registers used:
 14450 ;;		wreg, status,2, status,0, pclath, cstack
 14451 ;; Tracked objects:
 14452 ;;		On entry : 0/0
 14453 ;;		On exit  : 0/0
 14454 ;;		Unchanged: 0/0
 14455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;Total ram usage:        0 bytes
 14461 ;; Hardware stack levels used:    1
 14462 ;; Hardware stack levels required when called:    6
 14463 ;; This function calls:
 14464 ;;		_setDimmerIntr_Dimming_Sw
 14465 ;; This function is called by:
 14466 ;;		_setDimmerLights_OnOff
 14467 ;; This function uses a non-reentrant model
 14468 ;;
 14469                           
 14470                           
 14471                           ;psect for function _setDimmerLights_DimmingClose
 14472  1A56                     _setDimmerLights_DimmingClose:	
 14473                           
 14474                           ;Dimmer_B1.c: 1763: setDimmerIntr_Dimming_Sw(1, 0);
 14475                           
 14476                           ;incstack = 0
 14477                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14478  1A56  0020               	movlb	0	; select bank0
 14479  1A57  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14480  1A58  3001               	movlw	1
 14481  1A59  319D  2566         	fcall	_setDimmerIntr_Dimming_Sw
 14482  1A5B  0008               	return
 14483  1A5C                     __end_of_setDimmerLights_DimmingClose:	
 14484                           
 14485                           	psect	text94
 14486  1D94                     __ptext94:	
 14487 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14488 ;; Defined at:
 14489 ;;		line 228 in file "../src/Dimmer_B1.c"
 14490 ;; Parameters:    Size  Location     Type
 14491 ;;  lights          1    wreg     unsigned char 
 14492 ;;  command         1    0[BANK0 ] unsigned char 
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;  lights          1    2[BANK0 ] unsigned char 
 14495 ;; Return value:  Size  Location     Type
 14496 ;;		None               void
 14497 ;; Registers used:
 14498 ;;		wreg, status,2, status,0
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14504 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;Total ram usage:        3 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    5
 14511 ;; This function calls:
 14512 ;;		Nothing
 14513 ;; This function is called by:
 14514 ;;		_setDimmerLights_OnOff
 14515 ;;		_setRFSW_AdjControl
 14516 ;; This function uses a non-reentrant model
 14517 ;;
 14518                           
 14519                           
 14520                           ;psect for function _setDimmerIntr_Dimming_RF
 14521  1D94                     _setDimmerIntr_Dimming_RF:	
 14522                           
 14523                           ;incstack = 0
 14524                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14525                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14526  1D94  0020               	movlb	0	; select bank0
 14527  1D95  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14528                           
 14529                           ;Dimmer_B1.c: 230: if (lights == 1) {
 14530  1D96  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14531  1D97  3A01               	xorlw	1
 14532  1D98  1D03               	skipz
 14533  1D99  0008               	return
 14534                           
 14535                           ;Dimmer_B1.c: 231: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14536  1D9A  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14537  1D9B  3A01               	xorlw	1
 14538  1D9C  3000               	movlw	0
 14539  1D9D  1903               	skipnz
 14540  1D9E  3001               	movlw	1
 14541  1D9F  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14542  1DA0  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14543  1DA1  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14544  1DA2  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14545  1DA3  0021               	movlb	1	; select bank1
 14546  1DA4  083C               	movf	_DimmerIntr1^(0+128),w
 14547  1DA5  0020               	movlb	0	; select bank0
 14548  1DA6  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14549  1DA7  39BF               	andlw	-65
 14550  1DA8  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14551  1DA9  0021               	movlb	1	; select bank1
 14552  1DAA  00BC               	movwf	_DimmerIntr1^(0+128)
 14553  1DAB  0008               	return
 14554  1DAC                     __end_of_setDimmerIntr_Dimming_RF:	
 14555                           
 14556                           	psect	text95
 14557  1B0E                     __ptext95:	
 14558 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14559 ;; Defined at:
 14560 ;;		line 93 in file "../src/Dimmer_B1.c"
 14561 ;; Parameters:    Size  Location     Type
 14562 ;;  lights          1    wreg     unsigned char 
 14563 ;;  value           1   66[BANK0 ] unsigned char 
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;  lights          1   68[BANK0 ] unsigned char 
 14566 ;; Return value:  Size  Location     Type
 14567 ;;		None               void
 14568 ;; Registers used:
 14569 ;;		wreg
 14570 ;; Tracked objects:
 14571 ;;		On entry : 0/0
 14572 ;;		On exit  : 0/0
 14573 ;;		Unchanged: 0/0
 14574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;Total ram usage:        3 bytes
 14580 ;; Hardware stack levels used:    1
 14581 ;; Hardware stack levels required when called:    5
 14582 ;; This function calls:
 14583 ;;		Nothing
 14584 ;; This function is called by:
 14585 ;;		_setDimmerLights_OnOff
 14586 ;; This function uses a non-reentrant model
 14587 ;;
 14588                           
 14589                           
 14590                           ;psect for function _setDimmerIntr_DimmingValue
 14591  1B0E                     _setDimmerIntr_DimmingValue:	
 14592                           
 14593                           ;incstack = 0
 14594                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14595                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14596  1B0E  0020               	movlb	0	; select bank0
 14597  1B0F  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14598                           
 14599                           ;Dimmer_B1.c: 95: if (lights == 1) {
 14600  1B10  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14601  1B11  3A01               	xorlw	1
 14602  1B12  1D03               	skipz
 14603  1B13  0008               	return
 14604                           
 14605                           ;Dimmer_B1.c: 96: DimmerIntr1.DimmingValue = value;
 14606  1B14  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14607  1B15  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14608  1B16  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14609  1B17  0021               	movlb	1	; select bank1
 14610  1B18  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14611  1B19  0008               	return
 14612  1B1A                     __end_of_setDimmerIntr_DimmingValue:	
 14613                           
 14614                           	psect	text96
 14615  1D7C                     __ptext96:	
 14616 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14617 ;; Defined at:
 14618 ;;		line 75 in file "../src/Dimmer_B1.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  lights          1    wreg     unsigned char 
 14621 ;;  command         1    0[BANK0 ] unsigned char 
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  lights          1    2[BANK0 ] unsigned char 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;		None               void
 14626 ;; Registers used:
 14627 ;;		wreg, status,2, status,0
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        3 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    5
 14640 ;; This function calls:
 14641 ;;		Nothing
 14642 ;; This function is called by:
 14643 ;;		_setDimmerLights_OnOff
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           
 14648                           ;psect for function _setDimmerIntr_ControlStatus
 14649  1D7C                     _setDimmerIntr_ControlStatus:	
 14650                           
 14651                           ;incstack = 0
 14652                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14653                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14654  1D7C  0020               	movlb	0	; select bank0
 14655  1D7D  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14656                           
 14657                           ;Dimmer_B1.c: 77: if (lights == 1) {
 14658  1D7E  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14659  1D7F  3A01               	xorlw	1
 14660  1D80  1D03               	skipz
 14661  1D81  0008               	return
 14662                           
 14663                           ;Dimmer_B1.c: 78: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14664  1D82  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14665  1D83  3A01               	xorlw	1
 14666  1D84  3000               	movlw	0
 14667  1D85  1903               	skipnz
 14668  1D86  3001               	movlw	1
 14669  1D87  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14670  1D88  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14671  1D89  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14672  1D8A  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14673  1D8B  0021               	movlb	1	; select bank1
 14674  1D8C  083C               	movf	_DimmerIntr1^(0+128),w
 14675  1D8D  0020               	movlb	0	; select bank0
 14676  1D8E  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14677  1D8F  39F7               	andlw	-9
 14678  1D90  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14679  1D91  0021               	movlb	1	; select bank1
 14680  1D92  00BC               	movwf	_DimmerIntr1^(0+128)
 14681  1D93  0008               	return
 14682  1D94                     __end_of_setDimmerIntr_ControlStatus:	
 14683                           
 14684                           	psect	text97
 14685  0C09                     __ptext97:	
 14686 ;; *************** function _setDelayOff_GO *****************
 14687 ;; Defined at:
 14688 ;;		line 87 in file "../src/DelayOff_B1.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  sw              1    wreg     unsigned char 
 14691 ;;  command         1   69[BANK0 ] unsigned char 
 14692 ;;  value           1   70[BANK0 ] unsigned char 
 14693 ;; Auto vars:     Size  Location     Type
 14694 ;;  sw              1   76[BANK0 ] unsigned char 
 14695 ;;  k               1   75[BANK0 ] unsigned char 
 14696 ;;  j               1   74[BANK0 ] unsigned char 
 14697 ;;  i               1   73[BANK0 ] unsigned char 
 14698 ;; Return value:  Size  Location     Type
 14699 ;;		None               void
 14700 ;; Registers used:
 14701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14702 ;; Tracked objects:
 14703 ;;		On entry : 0/0
 14704 ;;		On exit  : 0/0
 14705 ;;		Unchanged: 0/0
 14706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14707 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;Total ram usage:        8 bytes
 14712 ;; Hardware stack levels used:    1
 14713 ;; Hardware stack levels required when called:    6
 14714 ;; This function calls:
 14715 ;;		_DelayOffPointSelect
 14716 ;;		___bmul
 14717 ;;		_setProductData
 14718 ;; This function is called by:
 14719 ;;		_setDimmerLights_OnOff
 14720 ;;		_setRFSW_Control
 14721 ;; This function uses a non-reentrant model
 14722 ;;
 14723                           
 14724                           
 14725                           ;psect for function _setDelayOff_GO
 14726  0C09                     _setDelayOff_GO:	
 14727                           
 14728                           ;incstack = 0
 14729                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14730                           ;setDelayOff_GO@sw stored from wreg
 14731  0C09  0020               	movlb	0	; select bank0
 14732  0C0A  00EC               	movwf	setDelayOff_GO@sw
 14733                           
 14734                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14735  0C0B  086C               	movf	setDelayOff_GO@sw,w
 14736  0C0C  319A  22DE  318C   	fcall	_DelayOffPointSelect
 14737                           
 14738                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14739  0C0F  0020               	movlb	0	; select bank0
 14740  0C10  0865               	movf	setDelayOff_GO@command,w
 14741  0C11  3A01               	xorlw	1
 14742  0C12  3000               	movlw	0
 14743  0C13  1903               	skipnz
 14744  0C14  3001               	movlw	1
 14745  0C15  00E7               	movwf	??_setDelayOff_GO
 14746  0C16  0021               	movlb	1	; select bank1
 14747  0C17  084A               	movf	_DelayOff^(0+128),w
 14748  0C18  0086               	movwf	6
 14749  0C19  3001               	movlw	1	; select bank2/3
 14750  0C1A  0087               	movwf	7
 14751  0C1B  0020               	movlb	0	; select bank0
 14752  0C1C  0DE7               	rlf	??_setDelayOff_GO,f
 14753  0C1D  0801               	movf	1,w
 14754  0C1E  0667               	xorwf	??_setDelayOff_GO,w
 14755  0C1F  39FD               	andlw	-3
 14756  0C20  0667               	xorwf	??_setDelayOff_GO,w
 14757  0C21  0081               	movwf	1
 14758                           
 14759                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14760  0C22  0021               	movlb	1	; select bank1
 14761  0C23  084A               	movf	_DelayOff^(0+128),w
 14762  0C24  3E02               	addlw	2
 14763  0C25  0086               	movwf	6
 14764  0C26  3001               	movlw	1	; select bank2/3
 14765  0C27  0087               	movwf	7
 14766  0C28  3000               	movlw	0
 14767  0C29  3FC0               	movwi [0]fsr1
 14768  0C2A  3FC1               	movwi [1]fsr1
 14769                           
 14770                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14771  0C2B  084A               	movf	_DelayOff^(0+128),w
 14772  0C2C  3E04               	addlw	4
 14773  0C2D  0086               	movwf	6
 14774  0C2E  3001               	movlw	1	; select bank2/3
 14775  0C2F  0087               	movwf	7
 14776  0C30  0181               	clrf	1
 14777                           
 14778                           ;DelayOff_B1.c: 94: if (command == 1) {
 14779  0C31  0020               	movlb	0	; select bank0
 14780  0C32  0865               	movf	setDelayOff_GO@command,w
 14781  0C33  3A01               	xorlw	1
 14782  0C34  1D03               	skipz
 14783  0C35  2C8B               	goto	l6262
 14784                           
 14785                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14786  0C36  3005               	movlw	5
 14787  0C37  00E7               	movwf	??_setDelayOff_GO
 14788  0C38  0867               	movf	??_setDelayOff_GO,w
 14789  0C39  00E9               	movwf	setDelayOff_GO@i
 14790  0C3A  01EA               	clrf	setDelayOff_GO@j
 14791  0C3B  01EB               	clrf	setDelayOff_GO@k
 14792                           
 14793                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14794  0C3C  300F               	movlw	15
 14795  0C3D  0566               	andwf	setDelayOff_GO@value,w
 14796  0C3E  00E7               	movwf	??_setDelayOff_GO
 14797  0C3F  0867               	movf	??_setDelayOff_GO,w
 14798  0C40  3A05               	xorlw	5
 14799  0C41  1903               	skipnz
 14800  0C42  2C47               	goto	l6248
 14801  0C43  0866               	movf	setDelayOff_GO@value,w
 14802  0C44  390F               	andlw	15
 14803  0C45  1D03               	btfss	3,2
 14804  0C46  2C77               	goto	l6258
 14805  0C47                     l6248:	
 14806  0C47  3031               	movlw	49
 14807  0C48  0266               	subwf	setDelayOff_GO@value,w
 14808  0C49  1803               	skipnc
 14809  0C4A  2C77               	goto	l6258
 14810                           
 14811                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14812  0C4B  0866               	movf	setDelayOff_GO@value,w
 14813  0C4C  390F               	andlw	15
 14814  0C4D  00E7               	movwf	??_setDelayOff_GO
 14815  0C4E  0867               	movf	??_setDelayOff_GO,w
 14816  0C4F  00EA               	movwf	setDelayOff_GO@j
 14817                           
 14818                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14819  0C50  0866               	movf	setDelayOff_GO@value,w
 14820  0C51  00E7               	movwf	??_setDelayOff_GO
 14821  0C52  3004               	movlw	4
 14822  0C53                     u5395:	
 14823  0C53  36E7               	lsrf	??_setDelayOff_GO,f
 14824  0C54  0B89               	decfsz	9,f
 14825  0C55  2C53               	goto	u5395
 14826  0C56  0867               	movf	??_setDelayOff_GO,w
 14827  0C57  390F               	andlw	15
 14828  0C58  00E8               	movwf	??_setDelayOff_GO+1
 14829  0C59  0868               	movf	??_setDelayOff_GO+1,w
 14830  0C5A  00EB               	movwf	setDelayOff_GO@k
 14831                           
 14832                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14833  0C5B  300A               	movlw	10
 14834  0C5C  00E7               	movwf	??_setDelayOff_GO
 14835  0C5D  0867               	movf	??_setDelayOff_GO,w
 14836  0C5E  00A0               	movwf	___bmul@multiplicand
 14837  0C5F  086B               	movf	setDelayOff_GO@k,w
 14838  0C60  319C  2441  318C   	fcall	___bmul
 14839  0C63  0020               	movlb	0	; select bank0
 14840  0C64  076A               	addwf	setDelayOff_GO@j,w
 14841  0C65  00E8               	movwf	??_setDelayOff_GO+1
 14842  0C66  0021               	movlb	1	; select bank1
 14843  0C67  0A4A               	incf	_DelayOff^(0+128),w
 14844  0C68  0086               	movwf	6
 14845  0C69  3001               	movlw	1	; select bank2/3
 14846  0C6A  0087               	movwf	7
 14847  0C6B  0020               	movlb	0	; select bank0
 14848  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14849  0C6D  0081               	movwf	1
 14850                           
 14851                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14852  0C6E  0866               	movf	setDelayOff_GO@value,w
 14853  0C6F  00E7               	movwf	??_setDelayOff_GO
 14854  0C70  0867               	movf	??_setDelayOff_GO,w
 14855  0C71  00E2               	movwf	setProductData@value
 14856  0C72  086C               	movf	setDelayOff_GO@sw,w
 14857  0C73  3E1A               	addlw	26
 14858  0C74  319A  22F6         	fcall	_setProductData
 14859                           
 14860                           ;DelayOff_B1.c: 103: } else {
 14861  0C76  0008               	return
 14862  0C77                     l6258:	
 14863                           
 14864                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14865  0C77  3005               	movlw	5
 14866  0C78  0020               	movlb	0	; select bank0
 14867  0C79  00E7               	movwf	??_setDelayOff_GO
 14868  0C7A  0021               	movlb	1	; select bank1
 14869  0C7B  0A4A               	incf	_DelayOff^(0+128),w
 14870  0C7C  0086               	movwf	6
 14871  0C7D  3001               	movlw	1	; select bank2/3
 14872  0C7E  0087               	movwf	7
 14873  0C7F  0020               	movlb	0	; select bank0
 14874  0C80  0867               	movf	??_setDelayOff_GO,w
 14875  0C81  0081               	movwf	1
 14876                           
 14877                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14878  0C82  3005               	movlw	5
 14879  0C83  00E7               	movwf	??_setDelayOff_GO
 14880  0C84  0867               	movf	??_setDelayOff_GO,w
 14881  0C85  00E2               	movwf	setProductData@value
 14882  0C86  086C               	movf	setDelayOff_GO@sw,w
 14883  0C87  3E1A               	addlw	26
 14884  0C88  319A  22F6         	fcall	_setProductData
 14885                           
 14886                           ;DelayOff_B1.c: 106: }
 14887                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14888  0C8A  0008               	return
 14889  0C8B                     l6262:	
 14890  0C8B  0020               	movlb	0	; select bank0
 14891  0C8C  08E5               	movf	setDelayOff_GO@command,f
 14892  0C8D  1D03               	skipz
 14893  0C8E  0008               	return
 14894                           
 14895                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14896  0C8F  01E2               	clrf	setProductData@value
 14897  0C90  086C               	movf	setDelayOff_GO@sw,w
 14898  0C91  3E1A               	addlw	26
 14899  0C92  319A  22F6         	fcall	_setProductData
 14900  0C94  0008               	return
 14901  0C95                     __end_of_setDelayOff_GO:	
 14902                           
 14903                           	psect	text98
 14904  1C41                     __ptext98:	
 14905 ;; *************** function ___bmul *****************
 14906 ;; Defined at:
 14907 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  multiplier      1    wreg     unsigned char 
 14910 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14911 ;; Auto vars:     Size  Location     Type
 14912 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14913 ;;  product         1    2[BANK0 ] unsigned char 
 14914 ;; Return value:  Size  Location     Type
 14915 ;;                  1    wreg      unsigned char 
 14916 ;; Registers used:
 14917 ;;		wreg, status,2, status,0
 14918 ;; Tracked objects:
 14919 ;;		On entry : 0/0
 14920 ;;		On exit  : 0/0
 14921 ;;		Unchanged: 0/0
 14922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;Total ram usage:        4 bytes
 14928 ;; Hardware stack levels used:    1
 14929 ;; Hardware stack levels required when called:    5
 14930 ;; This function calls:
 14931 ;;		Nothing
 14932 ;; This function is called by:
 14933 ;;		_setDelayOff_GO
 14934 ;;		_DelayTimejudge
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           
 14939                           ;psect for function ___bmul
 14940  1C41                     ___bmul:	
 14941                           
 14942                           ;incstack = 0
 14943                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14944                           ;___bmul@multiplier stored from wreg
 14945  1C41  0020               	movlb	0	; select bank0
 14946  1C42  00A3               	movwf	___bmul@multiplier
 14947  1C43  01A2               	clrf	___bmul@product
 14948  1C44                     l5920:	
 14949  1C44  1C23               	btfss	___bmul@multiplier,0
 14950  1C45  2C4A               	goto	l5924
 14951  1C46  0820               	movf	___bmul@multiplicand,w
 14952  1C47  00A1               	movwf	??___bmul
 14953  1C48  0821               	movf	??___bmul,w
 14954  1C49  07A2               	addwf	___bmul@product,f
 14955  1C4A                     l5924:	
 14956  1C4A  1003               	clrc
 14957  1C4B  0DA0               	rlf	___bmul@multiplicand,f
 14958  1C4C  1003               	clrc
 14959  1C4D  0CA3               	rrf	___bmul@multiplier,f
 14960  1C4E  08A3               	movf	___bmul@multiplier,f
 14961  1C4F  1D03               	skipz
 14962  1C50  2C44               	goto	l5920
 14963  1C51  0822               	movf	___bmul@product,w
 14964  1C52  0008               	return
 14965  1C53                     __end_of___bmul:	
 14966                           
 14967                           	psect	text99
 14968  1DAC                     __ptext99:	
 14969 ;; *************** function _setCmd_Status *****************
 14970 ;; Defined at:
 14971 ;;		line 651 in file "../src/Main_B1.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  number          1    wreg     unsigned char 
 14974 ;;  cmd             1    0[BANK0 ] unsigned char 
 14975 ;; Auto vars:     Size  Location     Type
 14976 ;;  number          1    2[BANK0 ] unsigned char 
 14977 ;; Return value:  Size  Location     Type
 14978 ;;		None               void
 14979 ;; Registers used:
 14980 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14981 ;; Tracked objects:
 14982 ;;		On entry : 0/0
 14983 ;;		On exit  : 0/0
 14984 ;;		Unchanged: 0/0
 14985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14986 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;Total ram usage:        3 bytes
 14991 ;; Hardware stack levels used:    1
 14992 ;; Hardware stack levels required when called:    5
 14993 ;; This function calls:
 14994 ;;		Nothing
 14995 ;; This function is called by:
 14996 ;;		_setDimmerLights_OnOff
 14997 ;;		_setControl_Lights_Table
 14998 ;; This function uses a non-reentrant model
 14999 ;;
 15000                           
 15001                           
 15002                           ;psect for function _setCmd_Status
 15003  1DAC                     _setCmd_Status:	
 15004                           
 15005                           ;incstack = 0
 15006                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15007                           ;setCmd_Status@number stored from wreg
 15008  1DAC  0020               	movlb	0	; select bank0
 15009  1DAD  00A2               	movwf	setCmd_Status@number
 15010                           
 15011                           ;Main_B1.c: 652: switch (number) {
 15012  1DAE  2DBE               	goto	l6432
 15013  1DAF                     l6428:	
 15014                           ;Main_B1.c: 653: case 1:
 15015                           
 15016                           
 15017                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15018  1DAF  0820               	movf	setCmd_Status@cmd,w
 15019  1DB0  3A01               	xorlw	1
 15020  1DB1  3000               	movlw	0
 15021  1DB2  1903               	skipnz
 15022  1DB3  3001               	movlw	1
 15023  1DB4  00A1               	movwf	??_setCmd_Status
 15024  1DB5  0021               	movlb	1	; select bank1
 15025  1DB6  0849               	movf	_Cmd^(0+128),w
 15026  1DB7  0020               	movlb	0	; select bank0
 15027  1DB8  0621               	xorwf	??_setCmd_Status,w
 15028  1DB9  39FE               	andlw	-2
 15029  1DBA  0621               	xorwf	??_setCmd_Status,w
 15030  1DBB  0021               	movlb	1	; select bank1
 15031  1DBC  00C9               	movwf	_Cmd^(0+128)
 15032                           
 15033                           ;Main_B1.c: 656: }
 15034                           
 15035                           ;Main_B1.c: 655: break;
 15036  1DBD  0008               	return
 15037  1DBE                     l6432:	
 15038  1DBE  0020               	movlb	0	; select bank0
 15039  1DBF  0822               	movf	setCmd_Status@number,w
 15040                           
 15041                           ; Switch size 1, requested type "space"
 15042                           ; Number of cases is 1, Range of values is 1 to 1
 15043                           ; switch strategies available:
 15044                           ; Name         Instructions Cycles
 15045                           ; simple_byte            4     3 (average)
 15046                           ; direct_byte           11     9 (fixed)
 15047                           ; jumptable            263     9 (fixed)
 15048                           ;	Chosen strategy is simple_byte
 15049  1DC0  3A01               	xorlw	1	; case 1
 15050  1DC1  1903               	skipnz
 15051  1DC2  2DAF               	goto	l6428
 15052  1DC3  2DC4               	goto	l1516
 15053  1DC4                     l1516:	
 15054  1DC4  0008               	return
 15055  1DC5                     __end_of_setCmd_Status:	
 15056                           
 15057                           	psect	text100
 15058  1AA8                     __ptext100:	
 15059 ;; *************** function _getMain_All_LightsStatus *****************
 15060 ;; Defined at:
 15061 ;;		line 373 in file "../src/Main_B1.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;		None
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  status          1    0[BANK0 ] unsigned char 
 15066 ;; Return value:  Size  Location     Type
 15067 ;;                  1    wreg      unsigned char 
 15068 ;; Registers used:
 15069 ;;		wreg, status,2
 15070 ;; Tracked objects:
 15071 ;;		On entry : 0/0
 15072 ;;		On exit  : 0/0
 15073 ;;		Unchanged: 0/0
 15074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;Total ram usage:        1 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; Hardware stack levels required when called:    5
 15082 ;; This function calls:
 15083 ;;		Nothing
 15084 ;; This function is called by:
 15085 ;;		_DimmerLights_Main
 15086 ;;		_setDimmerLights_Main
 15087 ;;		_setDimmerLights_OnOff
 15088 ;;		_Flash_Memory_Main
 15089 ;;		_Exception_Main
 15090 ;;		_Load_Main
 15091 ;;		_setTemp_Main
 15092 ;;		_setControl_Lights_Table
 15093 ;; This function uses a non-reentrant model
 15094 ;;
 15095                           
 15096                           
 15097                           ;psect for function _getMain_All_LightsStatus
 15098  1AA8                     _getMain_All_LightsStatus:	
 15099                           
 15100                           ;Main_B1.c: 374: char status = 0;
 15101                           
 15102                           ;incstack = 0
 15103                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15104  1AA8  0020               	movlb	0	; select bank0
 15105  1AA9  01A0               	clrf	getMain_All_LightsStatus@status
 15106                           
 15107                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15108  1AAA  3000               	movlw	0
 15109  1AAB  0022               	movlb	2	; select bank2
 15110  1AAC  1861               	btfsc	(_DimmerLights1^(0+256)+1),0
 15111  1AAD  3001               	movlw	1
 15112  1AAE  0020               	movlb	0	; select bank0
 15113  1AAF  00A0               	movwf	getMain_All_LightsStatus@status
 15114                           
 15115                           ;Main_B1.c: 420: return status;
 15116  1AB0  0820               	movf	getMain_All_LightsStatus@status,w
 15117  1AB1  0008               	return
 15118  1AB2                     __end_of_getMain_All_LightsStatus:	
 15119                           
 15120                           	psect	text101
 15121  1BDA                     __ptext101:	
 15122 ;; *************** function _getDelayOff_GO *****************
 15123 ;; Defined at:
 15124 ;;		line 114 in file "../src/DelayOff_B1.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;  sw              1    wreg     unsigned char 
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;  sw              1    2[BANK0 ] unsigned char 
 15129 ;;  go              1    3[BANK0 ] unsigned char 
 15130 ;; Return value:  Size  Location     Type
 15131 ;;                  1    wreg      unsigned char 
 15132 ;; Registers used:
 15133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;Total ram usage:        2 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:    6
 15146 ;; This function calls:
 15147 ;;		_DelayOffPointSelect
 15148 ;; This function is called by:
 15149 ;;		_setDimmerLights_OnOff
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function _getDelayOff_GO
 15155  1BDA                     _getDelayOff_GO:	
 15156                           
 15157                           ;incstack = 0
 15158                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15159                           ;getDelayOff_GO@sw stored from wreg
 15160  1BDA  0020               	movlb	0	; select bank0
 15161  1BDB  00A2               	movwf	getDelayOff_GO@sw
 15162                           
 15163                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15164  1BDC  0822               	movf	getDelayOff_GO@sw,w
 15165  1BDD  319A  22DE         	fcall	_DelayOffPointSelect
 15166                           
 15167                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15168  1BDF  0021               	movlb	1	; select bank1
 15169  1BE0  084A               	movf	_DelayOff^(0+128),w
 15170  1BE1  0086               	movwf	6
 15171  1BE2  3001               	movlw	1	; select bank2/3
 15172  1BE3  0087               	movwf	7
 15173  1BE4  3000               	movlw	0
 15174  1BE5  1881               	btfsc	1,1
 15175  1BE6  3001               	movlw	1
 15176  1BE7  0020               	movlb	0	; select bank0
 15177  1BE8  00A3               	movwf	getDelayOff_GO@go
 15178                           
 15179                           ;DelayOff_B1.c: 117: return go;
 15180  1BE9  0823               	movf	getDelayOff_GO@go,w
 15181  1BEA  0008               	return
 15182  1BEB                     __end_of_getDelayOff_GO:	
 15183                           
 15184                           	psect	text102
 15185  1C2F                     __ptext102:	
 15186 ;; *************** function _getCmd_Status *****************
 15187 ;; Defined at:
 15188 ;;		line 659 in file "../src/Main_B1.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;  number          1    wreg     unsigned char 
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;  number          1    0[BANK0 ] unsigned char 
 15193 ;;  cmd             1    1[BANK0 ] unsigned char 
 15194 ;; Return value:  Size  Location     Type
 15195 ;;                  1    wreg      unsigned char 
 15196 ;; Registers used:
 15197 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15198 ;; Tracked objects:
 15199 ;;		On entry : 0/0
 15200 ;;		On exit  : 0/0
 15201 ;;		Unchanged: 0/0
 15202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;Total ram usage:        2 bytes
 15208 ;; Hardware stack levels used:    1
 15209 ;; Hardware stack levels required when called:    5
 15210 ;; This function calls:
 15211 ;;		Nothing
 15212 ;; This function is called by:
 15213 ;;		_setDimmerLights_OnOff
 15214 ;; This function uses a non-reentrant model
 15215 ;;
 15216                           
 15217                           
 15218                           ;psect for function _getCmd_Status
 15219  1C2F                     _getCmd_Status:	
 15220                           
 15221                           ;incstack = 0
 15222                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15223                           ;getCmd_Status@number stored from wreg
 15224  1C2F  0020               	movlb	0	; select bank0
 15225  1C30  00A0               	movwf	getCmd_Status@number
 15226                           
 15227                           ;Main_B1.c: 660: char cmd = 0;
 15228  1C31  01A1               	clrf	getCmd_Status@cmd
 15229                           
 15230                           ;Main_B1.c: 661: switch (number) {
 15231  1C32  2C3A               	goto	l6698
 15232  1C33                     l6694:	
 15233                           ;Main_B1.c: 662: case 1:
 15234                           
 15235                           
 15236                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15237  1C33  3000               	movlw	0
 15238  1C34  0021               	movlb	1	; select bank1
 15239  1C35  1849               	btfsc	_Cmd^(0+128),0
 15240  1C36  3001               	movlw	1
 15241  1C37  0020               	movlb	0	; select bank0
 15242  1C38  00A1               	movwf	getCmd_Status@cmd
 15243                           
 15244                           ;Main_B1.c: 665: }
 15245                           
 15246                           ;Main_B1.c: 664: break;
 15247  1C39  2C3F               	goto	l6700
 15248  1C3A                     l6698:	
 15249  1C3A  0820               	movf	getCmd_Status@number,w
 15250                           
 15251                           ; Switch size 1, requested type "space"
 15252                           ; Number of cases is 1, Range of values is 1 to 1
 15253                           ; switch strategies available:
 15254                           ; Name         Instructions Cycles
 15255                           ; simple_byte            4     3 (average)
 15256                           ; direct_byte           11     9 (fixed)
 15257                           ; jumptable            263     9 (fixed)
 15258                           ;	Chosen strategy is simple_byte
 15259  1C3B  3A01               	xorlw	1	; case 1
 15260  1C3C  1903               	skipnz
 15261  1C3D  2C33               	goto	l6694
 15262  1C3E  2C3F               	goto	l6700
 15263  1C3F                     l6700:	
 15264                           
 15265                           ;Main_B1.c: 666: return cmd;
 15266  1C3F  0821               	movf	getCmd_Status@cmd,w
 15267  1C40  0008               	return
 15268  1C41                     __end_of_getCmd_Status:	
 15269                           
 15270                           	psect	text103
 15271  13CF                     __ptext103:	
 15272 ;; *************** function _setDimmerLights_Dimming *****************
 15273 ;; Defined at:
 15274 ;;		line 966 in file "../src/Dimmer_B1.c"
 15275 ;; Parameters:    Size  Location     Type
 15276 ;;  lights          1    wreg     unsigned char 
 15277 ;;  status          1   74[BANK0 ] unsigned char 
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;  lights          1   77[BANK0 ] unsigned char 
 15280 ;;  value           1   76[BANK0 ] unsigned char 
 15281 ;; Return value:  Size  Location     Type
 15282 ;;		None               void
 15283 ;; Registers used:
 15284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15285 ;; Tracked objects:
 15286 ;;		On entry : 0/0
 15287 ;;		On exit  : 0/0
 15288 ;;		Unchanged: 0/0
 15289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15290 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;Total ram usage:        4 bytes
 15295 ;; Hardware stack levels used:    1
 15296 ;; Hardware stack levels required when called:    8
 15297 ;; This function calls:
 15298 ;;		_getDimmerIntr_DimmingValue
 15299 ;;		_getDimmerLights_ValueToPercent
 15300 ;;		_setBuz
 15301 ;;		_setDimmerIntr_Dimming_Sw
 15302 ;;		_setDimmerIntr_MaxmumValue
 15303 ;;		_setDimmerLights_Line
 15304 ;;		_setMemory_Modify
 15305 ;;		_setProductData
 15306 ;;		_setRF_DimmerLights
 15307 ;;		_setRF_TransceiveGO
 15308 ;;		_setTxData
 15309 ;; This function is called by:
 15310 ;;		_setDimmerLights_Main
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           
 15315                           ;psect for function _setDimmerLights_Dimming
 15316  13CF                     _setDimmerLights_Dimming:	
 15317                           
 15318                           ;incstack = 0
 15319                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15320                           ;setDimmerLights_Dimming@lights stored from wreg
 15321  13CF  0020               	movlb	0	; select bank0
 15322  13D0  00ED               	movwf	setDimmerLights_Dimming@lights
 15323                           
 15324                           ;Dimmer_B1.c: 967: if (status == 1) {
 15325  13D1  086A               	movf	setDimmerLights_Dimming@status,w
 15326  13D2  3A01               	xorlw	1
 15327  13D3  1D03               	skipz
 15328  13D4  2BE8               	goto	l7000
 15329                           
 15330                           ;Dimmer_B1.c: 968: setDimmerIntr_Dimming_Sw(lights, 1);
 15331  13D5  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15332  13D6  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15333  13D7  086D               	movf	setDimmerLights_Dimming@lights,w
 15334  13D8  319D  2566  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15335                           
 15336                           ;Dimmer_B1.c: 971: setRF_TransceiveGO(0);
 15337  13DB  3000               	movlw	0
 15338  13DC  319C  249C  3193   	fcall	_setRF_TransceiveGO
 15339                           
 15340                           ;Dimmer_B1.c: 973: setBuz(1, 100);
 15341  13DF  3064               	movlw	100
 15342  13E0  0020               	movlb	0	; select bank0
 15343  13E1  00A9               	movwf	setBuz@time
 15344  13E2  3000               	movlw	0
 15345  13E3  00AA               	movwf	setBuz@time+1
 15346  13E4  3001               	movlw	1
 15347  13E5  3194  2425         	fcall	_setBuz
 15348                           
 15349                           ;Dimmer_B1.c: 974: } else if (status == 0) {
 15350  13E7  0008               	return
 15351  13E8                     l7000:	
 15352  13E8  0020               	movlb	0	; select bank0
 15353  13E9  08EA               	movf	setDimmerLights_Dimming@status,f
 15354  13EA  1D03               	skipz
 15355  13EB  0008               	return
 15356                           
 15357                           ;Dimmer_B1.c: 975: setDimmerIntr_Dimming_Sw(lights, 0);
 15358  13EC  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15359  13ED  086D               	movf	setDimmerLights_Dimming@lights,w
 15360  13EE  319D  2566  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15361                           
 15362                           ;Dimmer_B1.c: 978: Dimmer.Load_Status = 0;
 15363  13F1  0022               	movlb	2	; select bank2
 15364  13F2  112C               	bcf	_Dimmer^(0+256),2
 15365                           
 15366                           ;Dimmer_B1.c: 979: setDimmerLights_Line(lights);
 15367  13F3  0020               	movlb	0	; select bank0
 15368  13F4  086D               	movf	setDimmerLights_Dimming@lights,w
 15369  13F5  319B  23C9  3193   	fcall	_setDimmerLights_Line
 15370                           
 15371                           ;Dimmer_B1.c: 981: char value = getDimmerIntr_DimmingValue(lights);
 15372  13F8  0020               	movlb	0	; select bank0
 15373  13F9  086D               	movf	setDimmerLights_Dimming@lights,w
 15374  13FA  319B  238A  3193   	fcall	_getDimmerIntr_DimmingValue
 15375  13FD  0020               	movlb	0	; select bank0
 15376  13FE  00EB               	movwf	??_setDimmerLights_Dimming
 15377  13FF  086B               	movf	??_setDimmerLights_Dimming,w
 15378  1400  00EC               	movwf	setDimmerLights_Dimming@value
 15379                           
 15380                           ;Dimmer_B1.c: 982: setDimmerIntr_MaxmumValue(lights, value);
 15381  1401  086C               	movf	setDimmerLights_Dimming@value,w
 15382  1402  00EB               	movwf	??_setDimmerLights_Dimming
 15383  1403  086B               	movf	??_setDimmerLights_Dimming,w
 15384  1404  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15385  1405  086D               	movf	setDimmerLights_Dimming@lights,w
 15386  1406  319B  2302  3193   	fcall	_setDimmerIntr_MaxmumValue
 15387                           
 15388                           ;Dimmer_B1.c: 983: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15389  1409  0020               	movlb	0	; select bank0
 15390  140A  086C               	movf	setDimmerLights_Dimming@value,w
 15391  140B  3196  2660  3193   	fcall	_getDimmerLights_ValueToPercent
 15392  140E  0020               	movlb	0	; select bank0
 15393  140F  00EB               	movwf	??_setDimmerLights_Dimming
 15394  1410  086B               	movf	??_setDimmerLights_Dimming,w
 15395  1411  00E2               	movwf	setProductData@value
 15396  1412  086D               	movf	setDimmerLights_Dimming@lights,w
 15397  1413  3E14               	addlw	20
 15398  1414  319A  22F6  3193   	fcall	_setProductData
 15399                           
 15400                           ;Dimmer_B1.c: 990: setMemory_Modify(1);
 15401  1417  3001               	movlw	1
 15402  1418  319C  2489  3193   	fcall	_setMemory_Modify
 15403                           
 15404                           ;Dimmer_B1.c: 994: setRF_DimmerLights(lights, 1);
 15405  141B  0020               	movlb	0	; select bank0
 15406  141C  01E5               	clrf	setRF_DimmerLights@on
 15407  141D  0AE5               	incf	setRF_DimmerLights@on,f
 15408  141E  086D               	movf	setDimmerLights_Dimming@lights,w
 15409  141F  3196  26C5  3193   	fcall	_setRF_DimmerLights
 15410                           
 15411                           ;Dimmer_B1.c: 995: setTxData();
 15412  1422  318E  267F         	fcall	_setTxData
 15413  1424  0008               	return
 15414  1425                     __end_of_setDimmerLights_Dimming:	
 15415                           
 15416                           	psect	text104
 15417  0E7F                     __ptext104:	
 15418 ;; *************** function _setTxData *****************
 15419 ;; Defined at:
 15420 ;;		line 183 in file "../src/RF_Control_B1.c"
 15421 ;; Parameters:    Size  Location     Type
 15422 ;;		None
 15423 ;; Auto vars:     Size  Location     Type
 15424 ;;  i               1    0        unsigned char 
 15425 ;; Return value:  Size  Location     Type
 15426 ;;		None               void
 15427 ;; Registers used:
 15428 ;;		wreg, fsr1l, fsr1h, status,2
 15429 ;; Tracked objects:
 15430 ;;		On entry : 0/0
 15431 ;;		On exit  : 0/0
 15432 ;;		Unchanged: 0/0
 15433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15437 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;Total ram usage:        1 bytes
 15439 ;; Hardware stack levels used:    1
 15440 ;; Hardware stack levels required when called:    5
 15441 ;; This function calls:
 15442 ;;		Nothing
 15443 ;; This function is called by:
 15444 ;;		_setDimmerLights_OnOff
 15445 ;;		_setDimmerLights_Dimming
 15446 ;;		_getRxData
 15447 ;;		_setControl_Lights_Table
 15448 ;;		_setRFSW_Control
 15449 ;;		_setRFSW_AdjControl
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           
 15454                           ;psect for function _setTxData
 15455  0E7F                     _setTxData:	
 15456                           
 15457                           ;RF_Control_B1.c: 184: char i;
 15458                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15459                           
 15460                           ;incstack = 0
 15461                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15462  0E7F  0021               	movlb	1	; select bank1
 15463  0E80  1C20               	btfss	_RF1^(0+128),0
 15464  0E81  0008               	return
 15465                           
 15466                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15467  0E82  1520               	bsf	_RF1^(0+128),2
 15468                           
 15469                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15470  0E83  01A3               	clrf	(_RF1^(0+128)+3)
 15471  0E84  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15472                           
 15473                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15474  0E85  3063               	movlw	99
 15475  0E86  0020               	movlb	0	; select bank0
 15476  0E87  00A0               	movwf	??_setTxData
 15477  0E88  0820               	movf	??_setTxData,w
 15478  0E89  0023               	movlb	3	; select bank3
 15479  0E8A  00A0               	movwf	_RF_Data^(0+384)
 15480                           
 15481                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15482  0E8B  3002               	movlw	2
 15483  0E8C  0020               	movlb	0	; select bank0
 15484  0E8D  00A0               	movwf	??_setTxData
 15485  0E8E  0820               	movf	??_setTxData,w
 15486  0E8F  0023               	movlb	3	; select bank3
 15487  0E90  00A1               	movwf	(_RF_Data^(0+384)+1)
 15488                           
 15489                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15490  0E91  0021               	movlb	1	; select bank1
 15491  0E92  086E               	movf	_product^(0+128),w
 15492  0E93  0086               	movwf	6
 15493  0E94  3001               	movlw	1	; select bank2/3
 15494  0E95  0087               	movwf	7
 15495  0E96  3001               	movlw	1	; select bank2/3
 15496  0E97  3F42               	moviw [2]fsr1
 15497  0E98  0023               	movlb	3	; select bank3
 15498  0E99  00A2               	movwf	(_RF_Data^(0+384)+2)
 15499                           
 15500                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15501  0E9A  0021               	movlb	1	; select bank1
 15502  0E9B  086E               	movf	_product^(0+128),w
 15503  0E9C  0086               	movwf	6
 15504  0E9D  3001               	movlw	1	; select bank2/3
 15505  0E9E  0087               	movwf	7
 15506  0E9F  3001               	movlw	1	; select bank2/3
 15507  0EA0  3F43               	moviw [3]fsr1
 15508  0EA1  0023               	movlb	3	; select bank3
 15509  0EA2  00A3               	movwf	(_RF_Data^(0+384)+3)
 15510                           
 15511                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15512  0EA3  0021               	movlb	1	; select bank1
 15513  0EA4  086E               	movf	_product^(0+128),w
 15514  0EA5  0086               	movwf	6
 15515  0EA6  3001               	movlw	1	; select bank2/3
 15516  0EA7  0087               	movwf	7
 15517  0EA8  3001               	movlw	1	; select bank2/3
 15518  0EA9  3F44               	moviw [4]fsr1
 15519  0EAA  0023               	movlb	3	; select bank3
 15520  0EAB  00A4               	movwf	(_RF_Data^(0+384)+4)
 15521                           
 15522                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15523  0EAC  0021               	movlb	1	; select bank1
 15524  0EAD  086E               	movf	_product^(0+128),w
 15525  0EAE  0086               	movwf	6
 15526  0EAF  3001               	movlw	1	; select bank2/3
 15527  0EB0  0087               	movwf	7
 15528  0EB1  3001               	movlw	1	; select bank2/3
 15529  0EB2  3F45               	moviw [5]fsr1
 15530  0EB3  0023               	movlb	3	; select bank3
 15531  0EB4  00A5               	movwf	(_RF_Data^(0+384)+5)
 15532                           
 15533                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15534  0EB5  0021               	movlb	1	; select bank1
 15535  0EB6  086E               	movf	_product^(0+128),w
 15536  0EB7  0086               	movwf	6
 15537  0EB8  3001               	movlw	1	; select bank2/3
 15538  0EB9  0087               	movwf	7
 15539  0EBA  3001               	movlw	1	; select bank2/3
 15540  0EBB  3F46               	moviw [6]fsr1
 15541  0EBC  0023               	movlb	3	; select bank3
 15542  0EBD  00A6               	movwf	(_RF_Data^(0+384)+6)
 15543                           
 15544                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15545  0EBE  0021               	movlb	1	; select bank1
 15546  0EBF  086E               	movf	_product^(0+128),w
 15547  0EC0  0086               	movwf	6
 15548  0EC1  3001               	movlw	1	; select bank2/3
 15549  0EC2  0087               	movwf	7
 15550  0EC3  3001               	movlw	1	; select bank2/3
 15551  0EC4  3F47               	moviw [7]fsr1
 15552  0EC5  0023               	movlb	3	; select bank3
 15553  0EC6  00A7               	movwf	(_RF_Data^(0+384)+7)
 15554                           
 15555                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15556  0EC7  0021               	movlb	1	; select bank1
 15557  0EC8  086E               	movf	_product^(0+128),w
 15558  0EC9  0086               	movwf	6
 15559  0ECA  3001               	movlw	1	; select bank2/3
 15560  0ECB  0087               	movwf	7
 15561  0ECC  3001               	movlw	1	; select bank2/3
 15562  0ECD  3F48               	moviw [8]fsr1
 15563  0ECE  0023               	movlb	3	; select bank3
 15564  0ECF  00A8               	movwf	(_RF_Data^(0+384)+8)
 15565                           
 15566                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15567  0ED0  0021               	movlb	1	; select bank1
 15568  0ED1  086E               	movf	_product^(0+128),w
 15569  0ED2  0086               	movwf	6
 15570  0ED3  3001               	movlw	1	; select bank2/3
 15571  0ED4  0087               	movwf	7
 15572  0ED5  3001               	movlw	1	; select bank2/3
 15573  0ED6  3F49               	moviw [9]fsr1
 15574  0ED7  0023               	movlb	3	; select bank3
 15575  0ED8  00A9               	movwf	(_RF_Data^(0+384)+9)
 15576                           
 15577                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15578  0ED9  0021               	movlb	1	; select bank1
 15579  0EDA  086E               	movf	_product^(0+128),w
 15580  0EDB  0086               	movwf	6
 15581  0EDC  3001               	movlw	1	; select bank2/3
 15582  0EDD  0087               	movwf	7
 15583  0EDE  3001               	movlw	1	; select bank2/3
 15584  0EDF  3F4A               	moviw [10]fsr1
 15585  0EE0  0023               	movlb	3	; select bank3
 15586  0EE1  00AA               	movwf	(_RF_Data^(0+384)+10)
 15587                           
 15588                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15589  0EE2  0021               	movlb	1	; select bank1
 15590  0EE3  086E               	movf	_product^(0+128),w
 15591  0EE4  0086               	movwf	6
 15592  0EE5  3001               	movlw	1	; select bank2/3
 15593  0EE6  0087               	movwf	7
 15594  0EE7  3001               	movlw	1	; select bank2/3
 15595  0EE8  3F4B               	moviw [11]fsr1
 15596  0EE9  0023               	movlb	3	; select bank3
 15597  0EEA  00AB               	movwf	(_RF_Data^(0+384)+11)
 15598                           
 15599                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15600  0EEB  0021               	movlb	1	; select bank1
 15601  0EEC  086E               	movf	_product^(0+128),w
 15602  0EED  0086               	movwf	6
 15603  0EEE  3001               	movlw	1	; select bank2/3
 15604  0EEF  0087               	movwf	7
 15605  0EF0  3001               	movlw	1	; select bank2/3
 15606  0EF1  3F4C               	moviw [12]fsr1
 15607  0EF2  0023               	movlb	3	; select bank3
 15608  0EF3  00AC               	movwf	(_RF_Data^(0+384)+12)
 15609                           
 15610                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15611  0EF4  0021               	movlb	1	; select bank1
 15612  0EF5  086E               	movf	_product^(0+128),w
 15613  0EF6  0086               	movwf	6
 15614  0EF7  3001               	movlw	1	; select bank2/3
 15615  0EF8  0087               	movwf	7
 15616  0EF9  3001               	movlw	1	; select bank2/3
 15617  0EFA  3F4D               	moviw [13]fsr1
 15618  0EFB  0023               	movlb	3	; select bank3
 15619  0EFC  00AD               	movwf	(_RF_Data^(0+384)+13)
 15620                           
 15621                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15622  0EFD  0021               	movlb	1	; select bank1
 15623  0EFE  086E               	movf	_product^(0+128),w
 15624  0EFF  0086               	movwf	6
 15625  0F00  3001               	movlw	1	; select bank2/3
 15626  0F01  0087               	movwf	7
 15627  0F02  3001               	movlw	1	; select bank2/3
 15628  0F03  3F4E               	moviw [14]fsr1
 15629  0F04  0023               	movlb	3	; select bank3
 15630  0F05  00AE               	movwf	(_RF_Data^(0+384)+14)
 15631                           
 15632                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15633  0F06  0021               	movlb	1	; select bank1
 15634  0F07  086E               	movf	_product^(0+128),w
 15635  0F08  0086               	movwf	6
 15636  0F09  3001               	movlw	1	; select bank2/3
 15637  0F0A  0087               	movwf	7
 15638  0F0B  3001               	movlw	1	; select bank2/3
 15639  0F0C  3F4F               	moviw [15]fsr1
 15640  0F0D  0023               	movlb	3	; select bank3
 15641  0F0E  00AF               	movwf	(_RF_Data^(0+384)+15)
 15642                           
 15643                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15644  0F0F  0021               	movlb	1	; select bank1
 15645  0F10  086E               	movf	_product^(0+128),w
 15646  0F11  0086               	movwf	6
 15647  0F12  3001               	movlw	1	; select bank2/3
 15648  0F13  0087               	movwf	7
 15649  0F14  3001               	movlw	1	; select bank2/3
 15650  0F15  3F50               	moviw [16]fsr1
 15651  0F16  0023               	movlb	3	; select bank3
 15652  0F17  00B0               	movwf	(_RF_Data^(0+384)+16)
 15653                           
 15654                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15655  0F18  0021               	movlb	1	; select bank1
 15656  0F19  086E               	movf	_product^(0+128),w
 15657  0F1A  0086               	movwf	6
 15658  0F1B  3001               	movlw	1	; select bank2/3
 15659  0F1C  0087               	movwf	7
 15660  0F1D  3001               	movlw	1	; select bank2/3
 15661  0F1E  3F51               	moviw [17]fsr1
 15662  0F1F  0023               	movlb	3	; select bank3
 15663  0F20  00B1               	movwf	(_RF_Data^(0+384)+17)
 15664                           
 15665                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15666  0F21  0021               	movlb	1	; select bank1
 15667  0F22  086E               	movf	_product^(0+128),w
 15668  0F23  0086               	movwf	6
 15669  0F24  3001               	movlw	1	; select bank2/3
 15670  0F25  0087               	movwf	7
 15671  0F26  3001               	movlw	1	; select bank2/3
 15672  0F27  3F52               	moviw [18]fsr1
 15673  0F28  0023               	movlb	3	; select bank3
 15674  0F29  00B2               	movwf	(_RF_Data^(0+384)+18)
 15675                           
 15676                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15677  0F2A  0021               	movlb	1	; select bank1
 15678  0F2B  086E               	movf	_product^(0+128),w
 15679  0F2C  0086               	movwf	6
 15680  0F2D  3001               	movlw	1	; select bank2/3
 15681  0F2E  0087               	movwf	7
 15682  0F2F  3001               	movlw	1	; select bank2/3
 15683  0F30  3F53               	moviw [19]fsr1
 15684  0F31  0023               	movlb	3	; select bank3
 15685  0F32  00B3               	movwf	(_RF_Data^(0+384)+19)
 15686                           
 15687                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15688  0F33  30D1               	movlw	209
 15689  0F34  0020               	movlb	0	; select bank0
 15690  0F35  00A0               	movwf	??_setTxData
 15691  0F36  0820               	movf	??_setTxData,w
 15692  0F37  0023               	movlb	3	; select bank3
 15693  0F38  00B4               	movwf	(_RF_Data^(0+384)+20)
 15694  0F39  0008               	return
 15695  0F3A                     __end_of_setTxData:	
 15696                           
 15697                           	psect	text105
 15698  1C9C                     __ptext105:	
 15699 ;; *************** function _setRF_TransceiveGO *****************
 15700 ;; Defined at:
 15701 ;;		line 504 in file "../src/RF_Control_B1.c"
 15702 ;; Parameters:    Size  Location     Type
 15703 ;;  command         1    wreg     unsigned char 
 15704 ;; Auto vars:     Size  Location     Type
 15705 ;;  command         1    1[BANK0 ] unsigned char 
 15706 ;; Return value:  Size  Location     Type
 15707 ;;		None               void
 15708 ;; Registers used:
 15709 ;;		wreg, status,2, status,0
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15719 ;;Total ram usage:        2 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:    5
 15722 ;; This function calls:
 15723 ;;		Nothing
 15724 ;; This function is called by:
 15725 ;;		_setDimmerLights_Dimming
 15726 ;; This function uses a non-reentrant model
 15727 ;;
 15728                           
 15729                           
 15730                           ;psect for function _setRF_TransceiveGO
 15731  1C9C                     _setRF_TransceiveGO:	
 15732                           
 15733                           ;incstack = 0
 15734                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15735                           ;setRF_TransceiveGO@command stored from wreg
 15736  1C9C  0020               	movlb	0	; select bank0
 15737  1C9D  00A1               	movwf	setRF_TransceiveGO@command
 15738                           
 15739                           ;RF_Control_B1.c: 505: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15740  1C9E  0821               	movf	setRF_TransceiveGO@command,w
 15741  1C9F  3A01               	xorlw	1
 15742  1CA0  3000               	movlw	0
 15743  1CA1  1903               	skipnz
 15744  1CA2  3001               	movlw	1
 15745  1CA3  00A0               	movwf	??_setRF_TransceiveGO
 15746  1CA4  0DA0               	rlf	??_setRF_TransceiveGO,f
 15747  1CA5  0DA0               	rlf	??_setRF_TransceiveGO,f
 15748  1CA6  0021               	movlb	1	; select bank1
 15749  1CA7  0820               	movf	_RF1^(0+128),w
 15750  1CA8  0020               	movlb	0	; select bank0
 15751  1CA9  0620               	xorwf	??_setRF_TransceiveGO,w
 15752  1CAA  39FB               	andlw	-5
 15753  1CAB  0620               	xorwf	??_setRF_TransceiveGO,w
 15754  1CAC  0021               	movlb	1	; select bank1
 15755  1CAD  00A0               	movwf	_RF1^(0+128)
 15756  1CAE  0008               	return
 15757  1CAF                     __end_of_setRF_TransceiveGO:	
 15758                           
 15759                           	psect	text106
 15760  16C5                     __ptext106:	
 15761 ;; *************** function _setRF_DimmerLights *****************
 15762 ;; Defined at:
 15763 ;;		line 489 in file "../src/RF_Control_B1.c"
 15764 ;; Parameters:    Size  Location     Type
 15765 ;;  lights          1    wreg     unsigned char 
 15766 ;;  on              1   69[BANK0 ] unsigned char 
 15767 ;; Auto vars:     Size  Location     Type
 15768 ;;  lights          1   73[BANK0 ] unsigned char 
 15769 ;;  status          1   72[BANK0 ] unsigned char 
 15770 ;; Return value:  Size  Location     Type
 15771 ;;		None               void
 15772 ;; Registers used:
 15773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : 0/0
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15779 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;Total ram usage:        5 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    6
 15786 ;; This function calls:
 15787 ;;		_setProductData
 15788 ;; This function is called by:
 15789 ;;		_setDimmerLights_OnOff
 15790 ;;		_setDimmerLights_Dimming
 15791 ;;		_setRFSW_Control
 15792 ;; This function uses a non-reentrant model
 15793 ;;
 15794                           
 15795                           
 15796                           ;psect for function _setRF_DimmerLights
 15797  16C5                     _setRF_DimmerLights:	
 15798                           
 15799                           ;incstack = 0
 15800                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15801                           ;setRF_DimmerLights@lights stored from wreg
 15802  16C5  0020               	movlb	0	; select bank0
 15803  16C6  00E9               	movwf	setRF_DimmerLights@lights
 15804                           
 15805                           ;RF_Control_B1.c: 490: char status = 1;
 15806  16C7  01E8               	clrf	setRF_DimmerLights@status
 15807  16C8  0AE8               	incf	setRF_DimmerLights@status,f
 15808                           
 15809                           ;RF_Control_B1.c: 491: status <<= (lights - 1);
 15810  16C9  0869               	movf	setRF_DimmerLights@lights,w
 15811  16CA  3EFF               	addlw	-1
 15812  16CB  0A89               	incf	9,f
 15813  16CC  2ECF               	goto	u5430
 15814  16CD                     u5435:	
 15815  16CD  1003               	clrc
 15816  16CE  0DE8               	rlf	setRF_DimmerLights@status,f
 15817  16CF                     u5430:	
 15818  16CF  3EFF               	addlw	-1
 15819  16D0  1D03               	skipz
 15820  16D1  2ECD               	goto	u5435
 15821                           
 15822                           ;RF_Control_B1.c: 492: setProductData(11, lights);
 15823  16D2  0869               	movf	setRF_DimmerLights@lights,w
 15824  16D3  00E6               	movwf	??_setRF_DimmerLights
 15825  16D4  0866               	movf	??_setRF_DimmerLights,w
 15826  16D5  00E2               	movwf	setProductData@value
 15827  16D6  300B               	movlw	11
 15828  16D7  319A  22F6  3196   	fcall	_setProductData
 15829                           
 15830                           ;RF_Control_B1.c: 493: setProductData(17, product->Data[26 + lights]);
 15831  16DA  0020               	movlb	0	; select bank0
 15832  16DB  0869               	movf	setRF_DimmerLights@lights,w
 15833  16DC  3E1A               	addlw	26
 15834  16DD  0021               	movlb	1	; select bank1
 15835  16DE  076E               	addwf	_product^(0+128),w
 15836  16DF  0020               	movlb	0	; select bank0
 15837  16E0  00E6               	movwf	??_setRF_DimmerLights
 15838  16E1  0866               	movf	??_setRF_DimmerLights,w
 15839  16E2  0086               	movwf	6
 15840  16E3  3001               	movlw	1	; select bank2/3
 15841  16E4  0087               	movwf	7
 15842  16E5  0801               	movf	1,w
 15843  16E6  00E7               	movwf	??_setRF_DimmerLights+1
 15844  16E7  0867               	movf	??_setRF_DimmerLights+1,w
 15845  16E8  00E2               	movwf	setProductData@value
 15846  16E9  3011               	movlw	17
 15847  16EA  319A  22F6  3196   	fcall	_setProductData
 15848                           
 15849                           ;RF_Control_B1.c: 494: if (on == 1) {
 15850  16ED  0020               	movlb	0	; select bank0
 15851  16EE  0865               	movf	setRF_DimmerLights@on,w
 15852  16EF  3A01               	xorlw	1
 15853  16F0  1D03               	skipz
 15854  16F1  2F14               	goto	l6298
 15855                           
 15856                           ;RF_Control_B1.c: 495: setProductData(9, product->Data[20 + lights]);
 15857  16F2  0869               	movf	setRF_DimmerLights@lights,w
 15858  16F3  3E14               	addlw	20
 15859  16F4  0021               	movlb	1	; select bank1
 15860  16F5  076E               	addwf	_product^(0+128),w
 15861  16F6  0020               	movlb	0	; select bank0
 15862  16F7  00E6               	movwf	??_setRF_DimmerLights
 15863  16F8  0866               	movf	??_setRF_DimmerLights,w
 15864  16F9  0086               	movwf	6
 15865  16FA  3001               	movlw	1	; select bank2/3
 15866  16FB  0087               	movwf	7
 15867  16FC  0801               	movf	1,w
 15868  16FD  00E7               	movwf	??_setRF_DimmerLights+1
 15869  16FE  0867               	movf	??_setRF_DimmerLights+1,w
 15870  16FF  00E2               	movwf	setProductData@value
 15871  1700  3009               	movlw	9
 15872  1701  319A  22F6  3196   	fcall	_setProductData
 15873                           
 15874                           ;RF_Control_B1.c: 496: setProductData(15, (product->Data[15] | status));
 15875  1704  0021               	movlb	1	; select bank1
 15876  1705  086E               	movf	_product^(0+128),w
 15877  1706  3E0F               	addlw	15
 15878  1707  0086               	movwf	6
 15879  1708  3001               	movlw	1	; select bank2/3
 15880  1709  0087               	movwf	7
 15881  170A  0801               	movf	1,w
 15882  170B  0020               	movlb	0	; select bank0
 15883  170C  0468               	iorwf	setRF_DimmerLights@status,w
 15884  170D  00E6               	movwf	??_setRF_DimmerLights
 15885  170E  0866               	movf	??_setRF_DimmerLights,w
 15886  170F  00E2               	movwf	setProductData@value
 15887  1710  300F               	movlw	15
 15888  1711  319A  22F6         	fcall	_setProductData
 15889                           
 15890                           ;RF_Control_B1.c: 497: } else {
 15891  1713  0008               	return
 15892  1714                     l6298:	
 15893                           
 15894                           ;RF_Control_B1.c: 498: setProductData(9, 0x00);
 15895  1714  0020               	movlb	0	; select bank0
 15896  1715  01E2               	clrf	setProductData@value
 15897  1716  3009               	movlw	9
 15898  1717  319A  22F6  3196   	fcall	_setProductData
 15899                           
 15900                           ;RF_Control_B1.c: 499: setProductData(15, (product->Data[15]&(~status)));
 15901  171A  0021               	movlb	1	; select bank1
 15902  171B  086E               	movf	_product^(0+128),w
 15903  171C  3E0F               	addlw	15
 15904  171D  0086               	movwf	6
 15905  171E  3001               	movlw	1	; select bank2/3
 15906  171F  0087               	movwf	7
 15907  1720  0020               	movlb	0	; select bank0
 15908  1721  0968               	comf	setRF_DimmerLights@status,w
 15909  1722  0501               	andwf	1,w
 15910  1723  00E6               	movwf	??_setRF_DimmerLights
 15911  1724  0866               	movf	??_setRF_DimmerLights,w
 15912  1725  00E2               	movwf	setProductData@value
 15913  1726  300F               	movlw	15
 15914  1727  319A  22F6         	fcall	_setProductData
 15915  1729  0008               	return
 15916  172A                     __end_of_setRF_DimmerLights:	
 15917                           
 15918                           	psect	text107
 15919  1BC9                     __ptext107:	
 15920 ;; *************** function _setDimmerLights_Line *****************
 15921 ;; Defined at:
 15922 ;;		line 1040 in file "../src/Dimmer_B1.c"
 15923 ;; Parameters:    Size  Location     Type
 15924 ;;  lights          1    wreg     unsigned char 
 15925 ;; Auto vars:     Size  Location     Type
 15926 ;;  lights          1    0[BANK0 ] unsigned char 
 15927 ;; Return value:  Size  Location     Type
 15928 ;;		None               void
 15929 ;; Registers used:
 15930 ;;		wreg
 15931 ;; Tracked objects:
 15932 ;;		On entry : 0/0
 15933 ;;		On exit  : 0/0
 15934 ;;		Unchanged: 0/0
 15935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15939 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15940 ;;Total ram usage:        1 bytes
 15941 ;; Hardware stack levels used:    1
 15942 ;; Hardware stack levels required when called:    5
 15943 ;; This function calls:
 15944 ;;		Nothing
 15945 ;; This function is called by:
 15946 ;;		_setDimmerLights_OnOff
 15947 ;;		_setDimmerLights_Dimming
 15948 ;; This function uses a non-reentrant model
 15949 ;;
 15950                           
 15951                           
 15952                           ;psect for function _setDimmerLights_Line
 15953  1BC9                     _setDimmerLights_Line:	
 15954                           
 15955                           ;incstack = 0
 15956                           ; Regs used in _setDimmerLights_Line: [wreg]
 15957                           ;setDimmerLights_Line@lights stored from wreg
 15958  1BC9  0020               	movlb	0	; select bank0
 15959  1BCA  00A0               	movwf	setDimmerLights_Line@lights
 15960                           
 15961                           ;Dimmer_B1.c: 1041: Dimmer.LoadGO = 1;
 15962  1BCB  0022               	movlb	2	; select bank2
 15963  1BCC  14AC               	bsf	_Dimmer^(0+256),1
 15964                           
 15965                           ;Dimmer_B1.c: 1043: DimmerLights1.Line = 0;
 15966  1BCD  10E1               	bcf	(_DimmerLights1^(0+256)+1),1
 15967                           
 15968                           ;Dimmer_B1.c: 1044: if (lights == 1 && lights != 0) {
 15969  1BCE  0020               	movlb	0	; select bank0
 15970  1BCF  0820               	movf	setDimmerLights_Line@lights,w
 15971  1BD0  3A01               	xorlw	1
 15972  1BD1  1D03               	skipz
 15973  1BD2  0008               	return
 15974  1BD3  0820               	movf	setDimmerLights_Line@lights,w
 15975  1BD4  1903               	btfsc	3,2
 15976  1BD5  0008               	return
 15977                           
 15978                           ;Dimmer_B1.c: 1045: DimmerLights1.Line = 1;
 15979  1BD6  0022               	movlb	2	; select bank2
 15980  1BD7  14E1               	bsf	(_DimmerLights1^(0+256)+1),1
 15981  1BD8  0020               	movlb	0	; select bank0
 15982  1BD9  0008               	return
 15983  1BDA                     __end_of_setDimmerLights_Line:	
 15984                           
 15985                           	psect	text108
 15986  1B02                     __ptext108:	
 15987 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15988 ;; Defined at:
 15989 ;;		line 133 in file "../src/Dimmer_B1.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;  lights          1    wreg     unsigned char 
 15992 ;;  value           1   66[BANK0 ] unsigned char 
 15993 ;; Auto vars:     Size  Location     Type
 15994 ;;  lights          1   68[BANK0 ] unsigned char 
 15995 ;; Return value:  Size  Location     Type
 15996 ;;		None               void
 15997 ;; Registers used:
 15998 ;;		wreg
 15999 ;; Tracked objects:
 16000 ;;		On entry : 0/0
 16001 ;;		On exit  : 0/0
 16002 ;;		Unchanged: 0/0
 16003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16004 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;Total ram usage:        3 bytes
 16009 ;; Hardware stack levels used:    1
 16010 ;; Hardware stack levels required when called:    5
 16011 ;; This function calls:
 16012 ;;		Nothing
 16013 ;; This function is called by:
 16014 ;;		_setDimmerLights_OnOff
 16015 ;;		_setDimmerLights_Dimming
 16016 ;;		_setRFSW_AdjControl
 16017 ;; This function uses a non-reentrant model
 16018 ;;
 16019                           
 16020                           
 16021                           ;psect for function _setDimmerIntr_MaxmumValue
 16022  1B02                     _setDimmerIntr_MaxmumValue:	
 16023                           
 16024                           ;incstack = 0
 16025                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16026                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16027  1B02  0020               	movlb	0	; select bank0
 16028  1B03  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16029                           
 16030                           ;Dimmer_B1.c: 135: if (lights == 1) {
 16031  1B04  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16032  1B05  3A01               	xorlw	1
 16033  1B06  1D03               	skipz
 16034  1B07  0008               	return
 16035                           
 16036                           ;Dimmer_B1.c: 136: DimmerIntr1.MaxmumValue = value;
 16037  1B08  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16038  1B09  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16039  1B0A  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16040  1B0B  0021               	movlb	1	; select bank1
 16041  1B0C  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16042  1B0D  0008               	return
 16043  1B0E                     __end_of_setDimmerIntr_MaxmumValue:	
 16044                           
 16045                           	psect	text109
 16046  1D66                     __ptext109:	
 16047 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16048 ;; Defined at:
 16049 ;;		line 210 in file "../src/Dimmer_B1.c"
 16050 ;; Parameters:    Size  Location     Type
 16051 ;;  lights          1    wreg     unsigned char 
 16052 ;;  command         1    0[BANK0 ] unsigned char 
 16053 ;; Auto vars:     Size  Location     Type
 16054 ;;  lights          1    2[BANK0 ] unsigned char 
 16055 ;; Return value:  Size  Location     Type
 16056 ;;		None               void
 16057 ;; Registers used:
 16058 ;;		wreg, status,2, status,0
 16059 ;; Tracked objects:
 16060 ;;		On entry : 0/0
 16061 ;;		On exit  : 0/0
 16062 ;;		Unchanged: 0/0
 16063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16064 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;Total ram usage:        3 bytes
 16069 ;; Hardware stack levels used:    1
 16070 ;; Hardware stack levels required when called:    5
 16071 ;; This function calls:
 16072 ;;		Nothing
 16073 ;; This function is called by:
 16074 ;;		_setDimmerLights_Dimming
 16075 ;;		_setDimmerLights_DimmingClose
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           
 16080                           ;psect for function _setDimmerIntr_Dimming_Sw
 16081  1D66                     _setDimmerIntr_Dimming_Sw:	
 16082                           
 16083                           ;incstack = 0
 16084                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16085                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16086  1D66  0020               	movlb	0	; select bank0
 16087  1D67  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16088                           
 16089                           ;Dimmer_B1.c: 212: if (lights == 1) {
 16090  1D68  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16091  1D69  3A01               	xorlw	1
 16092  1D6A  1D03               	skipz
 16093  1D6B  0008               	return
 16094                           
 16095                           ;Dimmer_B1.c: 213: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16096  1D6C  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16097  1D6D  3A01               	xorlw	1
 16098  1D6E  3000               	movlw	0
 16099  1D6F  1903               	skipnz
 16100  1D70  3001               	movlw	1
 16101  1D71  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16102  1D72  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16103  1D73  0021               	movlb	1	; select bank1
 16104  1D74  083C               	movf	_DimmerIntr1^(0+128),w
 16105  1D75  0020               	movlb	0	; select bank0
 16106  1D76  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16107  1D77  39EF               	andlw	-17
 16108  1D78  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16109  1D79  0021               	movlb	1	; select bank1
 16110  1D7A  00BC               	movwf	_DimmerIntr1^(0+128)
 16111  1D7B  0008               	return
 16112  1D7C                     __end_of_setDimmerIntr_Dimming_Sw:	
 16113                           
 16114                           	psect	text110
 16115  1B8A                     __ptext110:	
 16116 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16117 ;; Defined at:
 16118 ;;		line 111 in file "../src/Dimmer_B1.c"
 16119 ;; Parameters:    Size  Location     Type
 16120 ;;  lights          1    wreg     unsigned char 
 16121 ;; Auto vars:     Size  Location     Type
 16122 ;;  lights          1    1[BANK0 ] unsigned char 
 16123 ;;  value           1    2[BANK0 ] unsigned char 
 16124 ;; Return value:  Size  Location     Type
 16125 ;;                  1    wreg      unsigned char 
 16126 ;; Registers used:
 16127 ;;		wreg, status,2
 16128 ;; Tracked objects:
 16129 ;;		On entry : 0/0
 16130 ;;		On exit  : 0/0
 16131 ;;		Unchanged: 0/0
 16132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;Total ram usage:        3 bytes
 16138 ;; Hardware stack levels used:    1
 16139 ;; Hardware stack levels required when called:    5
 16140 ;; This function calls:
 16141 ;;		Nothing
 16142 ;; This function is called by:
 16143 ;;		_setDimmerLights_Dimming
 16144 ;; This function uses a non-reentrant model
 16145 ;;
 16146                           
 16147                           
 16148                           ;psect for function _getDimmerIntr_DimmingValue
 16149  1B8A                     _getDimmerIntr_DimmingValue:	
 16150                           
 16151                           ;incstack = 0
 16152                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16153                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16154  1B8A  0020               	movlb	0	; select bank0
 16155  1B8B  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16156                           
 16157                           ;Dimmer_B1.c: 112: char value = 0;
 16158  1B8C  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16159                           
 16160                           ;Dimmer_B1.c: 114: if (lights == 1) {
 16161  1B8D  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16162  1B8E  3A01               	xorlw	1
 16163  1B8F  1D03               	skipz
 16164  1B90  2B97               	goto	l691
 16165                           
 16166                           ;Dimmer_B1.c: 115: value = DimmerIntr1.DimmingValue;
 16167  1B91  0021               	movlb	1	; select bank1
 16168  1B92  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16169  1B93  0020               	movlb	0	; select bank0
 16170  1B94  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16171  1B95  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16172  1B96  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16173  1B97                     l691:	
 16174                           
 16175                           ;Dimmer_B1.c: 116: }
 16176                           ;Dimmer_B1.c: 128: return value;
 16177  1B97  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16178  1B98  0008               	return
 16179  1B99                     __end_of_getDimmerIntr_DimmingValue:	
 16180                           
 16181                           	psect	text111
 16182  1D50                     __ptext111:	
 16183 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16184 ;; Defined at:
 16185 ;;		line 1001 in file "../src/Dimmer_B1.c"
 16186 ;; Parameters:    Size  Location     Type
 16187 ;;  lights          1    wreg     unsigned char 
 16188 ;; Auto vars:     Size  Location     Type
 16189 ;;  lights          1    0[COMMON] unsigned char 
 16190 ;;  allow           1    2[BANK0 ] unsigned char 
 16191 ;; Return value:  Size  Location     Type
 16192 ;;                  1    wreg      unsigned char 
 16193 ;; Registers used:
 16194 ;;		wreg, status,2, pclath, cstack
 16195 ;; Tracked objects:
 16196 ;;		On entry : 0/0
 16197 ;;		On exit  : 0/0
 16198 ;;		Unchanged: 0/0
 16199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;Total ram usage:        3 bytes
 16205 ;; Hardware stack levels used:    1
 16206 ;; Hardware stack levels required when called:    6
 16207 ;; This function calls:
 16208 ;;		_getLoad_OK
 16209 ;; This function is called by:
 16210 ;;		_setDimmerLights_Main
 16211 ;; This function uses a non-reentrant model
 16212 ;;
 16213                           
 16214                           
 16215                           ;psect for function _getDimmerLights_Allow_Condition
 16216  1D50                     _getDimmerLights_Allow_Condition:	
 16217                           
 16218                           ;Dimmer_B1.c: 1002: char allow = 0;
 16219                           
 16220                           ;incstack = 0
 16221                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16222  1D50  0020               	movlb	0	; select bank0
 16223  1D51  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16224                           
 16225                           ;Dimmer_B1.c: 1008: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16226  1D52  01A3               	clrf	_getDimmerLights_Allow_Condition$2284
 16227  1D53  0AA3               	incf	_getDimmerLights_Allow_Condition$2284,f
 16228  1D54  319A  227D  319D   	fcall	_getLoad_OK
 16229  1D57  3800               	iorlw	0
 16230  1D58  1D03               	skipz
 16231  1D59  2D5F               	goto	l6934
 16232  1D5A  0022               	movlb	2	; select bank2
 16233  1D5B  18AC               	btfsc	_Dimmer^(0+256),1
 16234  1D5C  2D5F               	goto	l6934
 16235  1D5D  0020               	movlb	0	; select bank0
 16236  1D5E  01A3               	clrf	_getDimmerLights_Allow_Condition$2284
 16237  1D5F                     l6934:	
 16238  1D5F  0020               	movlb	0	; select bank0
 16239  1D60  0823               	movf	_getDimmerLights_Allow_Condition$2284,w
 16240  1D61  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16241  1D62  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16242  1D63  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16243                           
 16244                           ;Dimmer_B1.c: 1035: return allow;
 16245  1D64  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16246  1D65  0008               	return
 16247  1D66                     __end_of_getDimmerLights_Allow_Condition:	
 16248                           
 16249                           	psect	text112
 16250  1A7D                     __ptext112:	
 16251 ;; *************** function _getLoad_OK *****************
 16252 ;; Defined at:
 16253 ;;		line 274 in file "../src/OverLoad_B1.c"
 16254 ;; Parameters:    Size  Location     Type
 16255 ;;		None
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;  ok              1    0[BANK0 ] unsigned char 
 16258 ;; Return value:  Size  Location     Type
 16259 ;;                  1    wreg      unsigned char 
 16260 ;; Registers used:
 16261 ;;		wreg, status,2
 16262 ;; Tracked objects:
 16263 ;;		On entry : 0/0
 16264 ;;		On exit  : 0/0
 16265 ;;		Unchanged: 0/0
 16266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;Total ram usage:        1 bytes
 16272 ;; Hardware stack levels used:    1
 16273 ;; Hardware stack levels required when called:    5
 16274 ;; This function calls:
 16275 ;;		Nothing
 16276 ;; This function is called by:
 16277 ;;		_DimmerLights_Main
 16278 ;;		_getDimmerLights_Allow_Condition
 16279 ;; This function uses a non-reentrant model
 16280 ;;
 16281                           
 16282                           
 16283                           ;psect for function _getLoad_OK
 16284  1A7D                     _getLoad_OK:	
 16285                           
 16286                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16287                           
 16288                           ;incstack = 0
 16289                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16290  1A7D  3000               	movlw	0
 16291  1A7E  0022               	movlb	2	; select bank2
 16292  1A7F  1BB8               	btfsc	_Load^(0+256),7
 16293  1A80  3001               	movlw	1
 16294  1A81  0020               	movlb	0	; select bank0
 16295  1A82  00A0               	movwf	getLoad_OK@ok
 16296                           
 16297                           ;OverLoad_B1.c: 276: return ok;
 16298  1A83  0820               	movf	getLoad_OK@ok,w
 16299  1A84  0008               	return
 16300  1A85                     __end_of_getLoad_OK:	
 16301                           
 16302                           	psect	text113
 16303  10DE                     __ptext113:	
 16304 ;; *************** function _getMain_All_Error_Status *****************
 16305 ;; Defined at:
 16306 ;;		line 424 in file "../src/Main_B1.c"
 16307 ;; Parameters:    Size  Location     Type
 16308 ;;  command         1    wreg     unsigned char 
 16309 ;; Auto vars:     Size  Location     Type
 16310 ;;  command         1    5[BANK0 ] unsigned char 
 16311 ;;  status          1    6[BANK0 ] unsigned char 
 16312 ;; Return value:  Size  Location     Type
 16313 ;;                  1    wreg      unsigned char 
 16314 ;; Registers used:
 16315 ;;		wreg, status,2, status,0
 16316 ;; Tracked objects:
 16317 ;;		On entry : 0/0
 16318 ;;		On exit  : 0/0
 16319 ;;		Unchanged: 0/0
 16320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;Total ram usage:        7 bytes
 16326 ;; Hardware stack levels used:    1
 16327 ;; Hardware stack levels required when called:    5
 16328 ;; This function calls:
 16329 ;;		Nothing
 16330 ;; This function is called by:
 16331 ;;		_DimmerLights_Main
 16332 ;;		_Exception_Main
 16333 ;;		_Load_Main
 16334 ;;		_setTemp_Main
 16335 ;;		_getRxData
 16336 ;;		_setSw_Main
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           
 16341                           ;psect for function _getMain_All_Error_Status
 16342  10DE                     _getMain_All_Error_Status:	
 16343                           
 16344                           ;incstack = 0
 16345                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16346                           ;getMain_All_Error_Status@command stored from wreg
 16347  10DE  0020               	movlb	0	; select bank0
 16348  10DF  00A5               	movwf	getMain_All_Error_Status@command
 16349                           
 16350                           ;Main_B1.c: 425: char status = 0;
 16351  10E0  01A6               	clrf	getMain_All_Error_Status@status
 16352                           
 16353                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16354  10E1  08A6               	movf	getMain_All_Error_Status@status,f
 16355  10E2  1D03               	skipz
 16356  10E3  28F8               	goto	l6644
 16357  10E4  0825               	movf	getMain_All_Error_Status@command,w
 16358  10E5  3A02               	xorlw	2
 16359  10E6  1903               	skipnz
 16360  10E7  28F8               	goto	l6644
 16361                           
 16362                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16363  10E8  0021               	movlb	1	; select bank1
 16364  10E9  18D8               	btfsc	_Temp^(0+128),1
 16365  10EA  28EF               	goto	l6642
 16366  10EB  0020               	movlb	0	; select bank0
 16367  10EC  01A1               	clrf	_getMain_All_Error_Status$3613
 16368  10ED  01A2               	clrf	_getMain_All_Error_Status$3613+1
 16369  10EE  28F4               	goto	l1475
 16370  10EF                     l6642:	
 16371  10EF  3002               	movlw	2
 16372  10F0  0020               	movlb	0	; select bank0
 16373  10F1  00A1               	movwf	_getMain_All_Error_Status$3613
 16374  10F2  3000               	movlw	0
 16375  10F3  00A2               	movwf	_getMain_All_Error_Status$3613+1
 16376  10F4                     l1475:	
 16377  10F4  0821               	movf	_getMain_All_Error_Status$3613,w
 16378  10F5  00A0               	movwf	??_getMain_All_Error_Status
 16379  10F6  0820               	movf	??_getMain_All_Error_Status,w
 16380  10F7  00A6               	movwf	getMain_All_Error_Status@status
 16381  10F8                     l6644:	
 16382                           
 16383                           ;Main_B1.c: 438: }
 16384                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16385  10F8  08A6               	movf	getMain_All_Error_Status@status,f
 16386  10F9  1D03               	skipz
 16387  10FA  290F               	goto	l1476
 16388  10FB  0825               	movf	getMain_All_Error_Status@command,w
 16389  10FC  3A03               	xorlw	3
 16390  10FD  1903               	skipnz
 16391  10FE  290F               	goto	l1476
 16392                           
 16393                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16394  10FF  0022               	movlb	2	; select bank2
 16395  1100  1AB8               	btfsc	_Load^(0+256),5
 16396  1101  2906               	goto	l6652
 16397  1102  0020               	movlb	0	; select bank0
 16398  1103  01A3               	clrf	_getMain_All_Error_Status$3614
 16399  1104  01A4               	clrf	_getMain_All_Error_Status$3614+1
 16400  1105  290B               	goto	l1480
 16401  1106                     l6652:	
 16402  1106  3003               	movlw	3
 16403  1107  0020               	movlb	0	; select bank0
 16404  1108  00A3               	movwf	_getMain_All_Error_Status$3614
 16405  1109  3000               	movlw	0
 16406  110A  00A4               	movwf	_getMain_All_Error_Status$3614+1
 16407  110B                     l1480:	
 16408  110B  0823               	movf	_getMain_All_Error_Status$3614,w
 16409  110C  00A0               	movwf	??_getMain_All_Error_Status
 16410  110D  0820               	movf	??_getMain_All_Error_Status,w
 16411  110E  00A6               	movwf	getMain_All_Error_Status@status
 16412  110F                     l1476:	
 16413                           
 16414                           ;Main_B1.c: 445: }
 16415                           ;Main_B1.c: 455: return status;
 16416  110F  0826               	movf	getMain_All_Error_Status@status,w
 16417  1110  0008               	return
 16418  1111                     __end_of_getMain_All_Error_Status:	
 16419                           
 16420                           	psect	text114
 16421  1A68                     __ptext114:	
 16422 ;; *************** function _DimmerLights_Initialization *****************
 16423 ;; Defined at:
 16424 ;;		line 641 in file "../src/Dimmer_B1.c"
 16425 ;; Parameters:    Size  Location     Type
 16426 ;;		None
 16427 ;; Auto vars:     Size  Location     Type
 16428 ;;		None
 16429 ;; Return value:  Size  Location     Type
 16430 ;;		None               void
 16431 ;; Registers used:
 16432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;Total ram usage:        0 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; Hardware stack levels required when called:    9
 16445 ;; This function calls:
 16446 ;;		_DimmerIntr_Initialization
 16447 ;;		_setDimmerLights_Initialization
 16448 ;; This function is called by:
 16449 ;;		_main
 16450 ;; This function uses a non-reentrant model
 16451 ;;
 16452                           
 16453                           
 16454                           ;psect for function _DimmerLights_Initialization
 16455  1A68                     _DimmerLights_Initialization:	
 16456                           
 16457                           ;Dimmer_B1.c: 643: setDimmerLights_Initialization(1);
 16458                           
 16459                           ;incstack = 0
 16460                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16461  1A68  3001               	movlw	1
 16462  1A69  3188  2001  319A   	fcall	_setDimmerLights_Initialization
 16463                           
 16464                           ;Dimmer_B1.c: 653: DimmerIntr_Initialization();
 16465  1A6C  3194  24D9         	fcall	_DimmerIntr_Initialization
 16466  1A6E  0008               	return
 16467  1A6F                     __end_of_DimmerLights_Initialization:	
 16468                           
 16469                           	psect	text115
 16470  0801                     __ptext115:	
 16471 ;; *************** function _setDimmerLights_Initialization *****************
 16472 ;; Defined at:
 16473 ;;		line 657 in file "../src/Dimmer_B1.c"
 16474 ;; Parameters:    Size  Location     Type
 16475 ;;  lights          1    wreg     unsigned char 
 16476 ;; Auto vars:     Size  Location     Type
 16477 ;;  lights          1    0[COMMON] unsigned char 
 16478 ;; Return value:  Size  Location     Type
 16479 ;;		None               void
 16480 ;; Registers used:
 16481 ;;		wreg
 16482 ;; Tracked objects:
 16483 ;;		On entry : 0/0
 16484 ;;		On exit  : 0/0
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16491 ;;Total ram usage:        0 bytes
 16492 ;; Hardware stack levels used:    1
 16493 ;; Hardware stack levels required when called:    5
 16494 ;; This function calls:
 16495 ;;		Nothing
 16496 ;; This function is called by:
 16497 ;;		_DimmerLights_Initialization
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           
 16502                           ;psect for function _setDimmerLights_Initialization
 16503  0801                     _setDimmerLights_Initialization:	
 16504                           
 16505                           ;incstack = 0
 16506                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16507  0801  0008               	return
 16508  0802                     __end_of_setDimmerLights_Initialization:	
 16509                           
 16510                           	psect	text116
 16511  14D9                     __ptext116:	
 16512 ;; *************** function _DimmerIntr_Initialization *****************
 16513 ;; Defined at:
 16514 ;;		line 7 in file "../src/Dimmer_B1.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;		None
 16517 ;; Auto vars:     Size  Location     Type
 16518 ;;		None
 16519 ;; Return value:  Size  Location     Type
 16520 ;;		None               void
 16521 ;; Registers used:
 16522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16523 ;; Tracked objects:
 16524 ;;		On entry : 0/0
 16525 ;;		On exit  : 0/0
 16526 ;;		Unchanged: 0/0
 16527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16532 ;;Total ram usage:        2 bytes
 16533 ;; Hardware stack levels used:    1
 16534 ;; Hardware stack levels required when called:    8
 16535 ;; This function calls:
 16536 ;;		_Division
 16537 ;;		_getDimmerLights_PercentToValue
 16538 ;;		_getDimmerLights_ValueToPercent
 16539 ;;		_setMemory_Modify
 16540 ;; This function is called by:
 16541 ;;		_DimmerLights_Initialization
 16542 ;; This function uses a non-reentrant model
 16543 ;;
 16544                           
 16545                           
 16546                           ;psect for function _DimmerIntr_Initialization
 16547  14D9                     _DimmerIntr_Initialization:	
 16548                           
 16549                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16550                           
 16551                           ;incstack = 0
 16552                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16553  14D9  3007               	movlw	7
 16554  14DA  0020               	movlb	0	; select bank0
 16555  14DB  00E2               	movwf	??_DimmerIntr_Initialization
 16556  14DC  0862               	movf	??_DimmerIntr_Initialization,w
 16557  14DD  0021               	movlb	1	; select bank1
 16558  14DE  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16559                           
 16560                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16561  14DF  3034               	movlw	52
 16562  14E0  0020               	movlb	0	; select bank0
 16563  14E1  00E2               	movwf	??_DimmerIntr_Initialization
 16564  14E2  0862               	movf	??_DimmerIntr_Initialization,w
 16565  14E3  0021               	movlb	1	; select bank1
 16566  14E4  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16567                           
 16568                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16569  14E5  3006               	movlw	6
 16570  14E6  0020               	movlb	0	; select bank0
 16571  14E7  00E2               	movwf	??_DimmerIntr_Initialization
 16572  14E8  0862               	movf	??_DimmerIntr_Initialization,w
 16573  14E9  0021               	movlb	1	; select bank1
 16574  14EA  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16575                           
 16576                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16577  14EB  1E39               	btfss	(_myMain^(0+128)+10),4
 16578  14EC  2CFC               	goto	l678
 16579                           
 16580                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16581  14ED  3034               	movlw	52
 16582  14EE  3196  2660  3194   	fcall	_getDimmerLights_ValueToPercent
 16583  14F1  0020               	movlb	0	; select bank0
 16584  14F2  00E2               	movwf	??_DimmerIntr_Initialization
 16585  14F3  0021               	movlb	1	; select bank1
 16586  14F4  086E               	movf	_product^(0+128),w
 16587  14F5  3E15               	addlw	21
 16588  14F6  0086               	movwf	6
 16589  14F7  3001               	movlw	1	; select bank2/3
 16590  14F8  0087               	movwf	7
 16591  14F9  0020               	movlb	0	; select bank0
 16592  14FA  0862               	movf	??_DimmerIntr_Initialization,w
 16593  14FB  0081               	movwf	1
 16594  14FC                     l678:	
 16595                           
 16596                           ;Dimmer_B1.c: 18: }
 16597                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16598  14FC  0021               	movlb	1	; select bank1
 16599  14FD  086E               	movf	_product^(0+128),w
 16600  14FE  3E15               	addlw	21
 16601  14FF  0086               	movwf	6
 16602  1500  3001               	movlw	1	; select bank2/3
 16603  1501  0087               	movwf	7
 16604  1502  0801               	movf	1,w
 16605  1503  3195  25FB  3194   	fcall	_getDimmerLights_PercentToValue
 16606  1506  0020               	movlb	0	; select bank0
 16607  1507  00E2               	movwf	??_DimmerIntr_Initialization
 16608  1508  0862               	movf	??_DimmerIntr_Initialization,w
 16609  1509  0021               	movlb	1	; select bank1
 16610  150A  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16611                           
 16612                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16613  150B  3002               	movlw	2
 16614  150C  0020               	movlb	0	; select bank0
 16615  150D  00E2               	movwf	??_DimmerIntr_Initialization
 16616  150E  0862               	movf	??_DimmerIntr_Initialization,w
 16617  150F  00A5               	movwf	Division@num
 16618  1510  3034               	movlw	52
 16619  1511  319B  237B  3194   	fcall	_Division
 16620  1514  0020               	movlb	0	; select bank0
 16621  1515  00E3               	movwf	??_DimmerIntr_Initialization+1
 16622  1516  0863               	movf	??_DimmerIntr_Initialization+1,w
 16623  1517  0021               	movlb	1	; select bank1
 16624  1518  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16625                           
 16626                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16627  1519  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16628  151A  3E08               	addlw	8
 16629  151B  0020               	movlb	0	; select bank0
 16630  151C  00E2               	movwf	??_DimmerIntr_Initialization
 16631  151D  0862               	movf	??_DimmerIntr_Initialization,w
 16632  151E  0021               	movlb	1	; select bank1
 16633  151F  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16634                           
 16635                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16636  1520  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16637  1521  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16638  1522  0020               	movlb	0	; select bank0
 16639  1523  00E2               	movwf	??_DimmerIntr_Initialization
 16640  1524  0862               	movf	??_DimmerIntr_Initialization,w
 16641  1525  0021               	movlb	1	; select bank1
 16642  1526  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16643                           
 16644                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16645  1527  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16646  1528  3E01               	addlw	1
 16647  1529  0020               	movlb	0	; select bank0
 16648  152A  00E2               	movwf	??_DimmerIntr_Initialization
 16649  152B  0862               	movf	??_DimmerIntr_Initialization,w
 16650  152C  0021               	movlb	1	; select bank1
 16651  152D  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16652                           
 16653                           ;Dimmer_B1.c: 67: if (myMain.InitDimmer == 1) {
 16654  152E  1E39               	btfss	(_myMain^(0+128)+10),4
 16655  152F  0008               	return
 16656                           
 16657                           ;Dimmer_B1.c: 68: myMain.InitDimmer = 0;
 16658  1530  1239               	bcf	(_myMain^(0+128)+10),4
 16659                           
 16660                           ;Dimmer_B1.c: 69: myMain.SaveDimmer = 1;
 16661  1531  16B9               	bsf	(_myMain^(0+128)+10),5
 16662                           
 16663                           ;Dimmer_B1.c: 70: setMemory_Modify(1);
 16664  1532  3001               	movlw	1
 16665  1533  319C  2489         	fcall	_setMemory_Modify
 16666  1535  0008               	return
 16667  1536                     __end_of_DimmerIntr_Initialization:	
 16668                           
 16669                           	psect	text117
 16670  1C89                     __ptext117:	
 16671 ;; *************** function _setMemory_Modify *****************
 16672 ;; Defined at:
 16673 ;;		line 1083 in file "../src/MCU_B1.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  command         1    wreg     unsigned char 
 16676 ;; Auto vars:     Size  Location     Type
 16677 ;;  command         1    1[BANK0 ] unsigned char 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;		None               void
 16680 ;; Registers used:
 16681 ;;		wreg, status,2, status,0
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;Total ram usage:        2 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:    5
 16694 ;; This function calls:
 16695 ;;		Nothing
 16696 ;; This function is called by:
 16697 ;;		_DimmerIntr_Initialization
 16698 ;;		_setDimmerLights_Dimming
 16699 ;;		_setLog_Code
 16700 ;;		_setRFSW_AdjControl
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           
 16705                           ;psect for function _setMemory_Modify
 16706  1C89                     _setMemory_Modify:	
 16707                           
 16708                           ;incstack = 0
 16709                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16710                           ;setMemory_Modify@command stored from wreg
 16711  1C89  0020               	movlb	0	; select bank0
 16712  1C8A  00A1               	movwf	setMemory_Modify@command
 16713                           
 16714                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16715  1C8B  0821               	movf	setMemory_Modify@command,w
 16716  1C8C  3A01               	xorlw	1
 16717  1C8D  3000               	movlw	0
 16718  1C8E  1903               	skipnz
 16719  1C8F  3001               	movlw	1
 16720  1C90  00A0               	movwf	??_setMemory_Modify
 16721  1C91  0024               	movlb	4	; select bank4
 16722  1C92  0844               	movf	(_Memory^(0+512)+36),w
 16723  1C93  0020               	movlb	0	; select bank0
 16724  1C94  0620               	xorwf	??_setMemory_Modify,w
 16725  1C95  39FE               	andlw	-2
 16726  1C96  0620               	xorwf	??_setMemory_Modify,w
 16727  1C97  0024               	movlb	4	; select bank4
 16728  1C98  00C4               	movwf	(_Memory^(0+512)+36)
 16729                           
 16730                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16731  1C99  01C2               	clrf	(_Memory^(0+512)+34)
 16732  1C9A  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16733  1C9B  0008               	return
 16734  1C9C                     __end_of_setMemory_Modify:	
 16735                           
 16736                           	psect	text118
 16737  1660                     __ptext118:	
 16738 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16739 ;; Defined at:
 16740 ;;		line 1140 in file "../src/Dimmer_B1.c"
 16741 ;; Parameters:    Size  Location     Type
 16742 ;;  value           1    wreg     unsigned char 
 16743 ;; Auto vars:     Size  Location     Type
 16744 ;;  value           1   62[BANK0 ] unsigned char 
 16745 ;;  i               3   63[BANK0 ] float 
 16746 ;; Return value:  Size  Location     Type
 16747 ;;                  1    wreg      unsigned char 
 16748 ;; Registers used:
 16749 ;;		wreg, status,2, status,0, pclath, cstack
 16750 ;; Tracked objects:
 16751 ;;		On entry : 0/0
 16752 ;;		On exit  : 0/0
 16753 ;;		Unchanged: 0/0
 16754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;Total ram usage:        6 bytes
 16760 ;; Hardware stack levels used:    1
 16761 ;; Hardware stack levels required when called:    7
 16762 ;; This function calls:
 16763 ;;		___awtoft
 16764 ;;		___ftadd
 16765 ;;		___ftdiv
 16766 ;;		___ftneg
 16767 ;;		___fttol
 16768 ;; This function is called by:
 16769 ;;		_DimmerIntr_Initialization
 16770 ;;		_setDimmerLights_Dimming
 16771 ;; This function uses a non-reentrant model
 16772 ;;
 16773                           
 16774                           
 16775                           ;psect for function _getDimmerLights_ValueToPercent
 16776  1660                     _getDimmerLights_ValueToPercent:	
 16777                           
 16778                           ;incstack = 0
 16779                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16780                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16781  1660  0020               	movlb	0	; select bank0
 16782  1661  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16783                           
 16784                           ;Dimmer_B1.c: 1148: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16785  1662  3000               	movlw	0
 16786  1663  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16787  1664  3038               	movlw	56
 16788  1665  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16789  1666  3042               	movlw	66
 16790  1667  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16791                           
 16792                           ;Dimmer_B1.c: 1149: i /= 100;
 16793  1668  3000               	movlw	0
 16794  1669  00AE               	movwf	___ftdiv@f2
 16795  166A  30C8               	movlw	200
 16796  166B  00AF               	movwf	___ftdiv@f2+1
 16797  166C  3042               	movlw	66
 16798  166D  00B0               	movwf	___ftdiv@f2+2
 16799  166E  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16800  166F  00B1               	movwf	___ftdiv@f1
 16801  1670  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16802  1671  00B2               	movwf	___ftdiv@f1+1
 16803  1672  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16804  1673  00B3               	movwf	___ftdiv@f1+2
 16805  1674  318D  2522  3196   	fcall	___ftdiv
 16806  1677  0020               	movlb	0	; select bank0
 16807  1678  082E               	movf	?___ftdiv,w
 16808  1679  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16809  167A  082F               	movf	?___ftdiv+1,w
 16810  167B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16811  167C  0830               	movf	?___ftdiv+2,w
 16812  167D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16813                           
 16814                           ;Dimmer_B1.c: 1151: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 16815  167E  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16816  167F  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16817  1680  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16818  1681  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16819  1682  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16820  1683  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16821  1684  1903               	skipnz
 16822  1685  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16823  1686  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16824  1687  3E34               	addlw	52
 16825  1688  00A8               	movwf	___awtoft@c
 16826  1689  3000               	movlw	0
 16827  168A  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16828  168B  00A9               	movwf	___awtoft@c+1
 16829  168C  319F  2796  3196   	fcall	___awtoft
 16830  168F  0020               	movlb	0	; select bank0
 16831  1690  0828               	movf	?___awtoft,w
 16832  1691  00B1               	movwf	___ftdiv@f1
 16833  1692  0829               	movf	?___awtoft+1,w
 16834  1693  00B2               	movwf	___ftdiv@f1+1
 16835  1694  082A               	movf	?___awtoft+2,w
 16836  1695  00B3               	movwf	___ftdiv@f1+2
 16837  1696  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16838  1697  00AE               	movwf	___ftdiv@f2
 16839  1698  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16840  1699  00AF               	movwf	___ftdiv@f2+1
 16841  169A  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16842  169B  00B0               	movwf	___ftdiv@f2+2
 16843  169C  318D  2522  3196   	fcall	___ftdiv
 16844  169F  0020               	movlb	0	; select bank0
 16845  16A0  082E               	movf	?___ftdiv,w
 16846  16A1  00BE               	movwf	___ftneg@f1
 16847  16A2  082F               	movf	?___ftdiv+1,w
 16848  16A3  00BF               	movwf	___ftneg@f1+1
 16849  16A4  0830               	movf	?___ftdiv+2,w
 16850  16A5  00C0               	movwf	___ftneg@f1+2
 16851  16A6  319A  2296  3196   	fcall	___ftneg
 16852  16A9  0020               	movlb	0	; select bank0
 16853  16AA  083E               	movf	?___ftneg,w
 16854  16AB  00C4               	movwf	___ftadd@f2
 16855  16AC  083F               	movf	?___ftneg+1,w
 16856  16AD  00C5               	movwf	___ftadd@f2+1
 16857  16AE  0840               	movf	?___ftneg+2,w
 16858  16AF  00C6               	movwf	___ftadd@f2+2
 16859  16B0  3000               	movlw	0
 16860  16B1  00C1               	movwf	___ftadd@f1
 16861  16B2  30C8               	movlw	200
 16862  16B3  00C2               	movwf	___ftadd@f1+1
 16863  16B4  3042               	movlw	66
 16864  16B5  00C3               	movwf	___ftadd@f1+2
 16865  16B6  3183  2389  3196   	fcall	___ftadd
 16866  16B9  0020               	movlb	0	; select bank0
 16867  16BA  0841               	movf	?___ftadd,w
 16868  16BB  00CE               	movwf	___fttol@f1
 16869  16BC  0842               	movf	?___ftadd+1,w
 16870  16BD  00CF               	movwf	___fttol@f1+1
 16871  16BE  0843               	movf	?___ftadd+2,w
 16872  16BF  00D0               	movwf	___fttol@f1+2
 16873  16C0  318B  2382         	fcall	___fttol
 16874  16C2  0020               	movlb	0	; select bank0
 16875  16C3  084E               	movf	?___fttol,w
 16876  16C4  0008               	return
 16877  16C5                     __end_of_getDimmerLights_ValueToPercent:	
 16878                           
 16879                           	psect	text119
 16880  15FB                     __ptext119:	
 16881 ;; *************** function _getDimmerLights_PercentToValue *****************
 16882 ;; Defined at:
 16883 ;;		line 1124 in file "../src/Dimmer_B1.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;  value           1    wreg     unsigned char 
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;  value           1   62[BANK0 ] unsigned char 
 16888 ;;  i               3   63[BANK0 ] float 
 16889 ;; Return value:  Size  Location     Type
 16890 ;;                  1    wreg      unsigned char 
 16891 ;; Registers used:
 16892 ;;		wreg, status,2, status,0, pclath, cstack
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;Total ram usage:        6 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; Hardware stack levels required when called:    7
 16905 ;; This function calls:
 16906 ;;		___awtoft
 16907 ;;		___ftadd
 16908 ;;		___ftdiv
 16909 ;;		___ftmul
 16910 ;;		___ftneg
 16911 ;;		___fttol
 16912 ;; This function is called by:
 16913 ;;		_DimmerIntr_Initialization
 16914 ;;		_setDimmerLights_OnOff
 16915 ;;		_setRFSW_AdjControl
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           
 16920                           ;psect for function _getDimmerLights_PercentToValue
 16921  15FB                     _getDimmerLights_PercentToValue:	
 16922                           
 16923                           ;incstack = 0
 16924                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16925                           ;getDimmerLights_PercentToValue@value stored from wreg
 16926  15FB  0020               	movlb	0	; select bank0
 16927  15FC  00DE               	movwf	getDimmerLights_PercentToValue@value
 16928                           
 16929                           ;Dimmer_B1.c: 1132: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16930  15FD  3000               	movlw	0
 16931  15FE  00DF               	movwf	getDimmerLights_PercentToValue@i
 16932  15FF  3038               	movlw	56
 16933  1600  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16934  1601  3042               	movlw	66
 16935  1602  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16936                           
 16937                           ;Dimmer_B1.c: 1133: i /= 100;
 16938  1603  3000               	movlw	0
 16939  1604  00AE               	movwf	___ftdiv@f2
 16940  1605  30C8               	movlw	200
 16941  1606  00AF               	movwf	___ftdiv@f2+1
 16942  1607  3042               	movlw	66
 16943  1608  00B0               	movwf	___ftdiv@f2+2
 16944  1609  085F               	movf	getDimmerLights_PercentToValue@i,w
 16945  160A  00B1               	movwf	___ftdiv@f1
 16946  160B  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16947  160C  00B2               	movwf	___ftdiv@f1+1
 16948  160D  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16949  160E  00B3               	movwf	___ftdiv@f1+2
 16950  160F  318D  2522  3195   	fcall	___ftdiv
 16951  1612  0020               	movlb	0	; select bank0
 16952  1613  082E               	movf	?___ftdiv,w
 16953  1614  00DF               	movwf	getDimmerLights_PercentToValue@i
 16954  1615  082F               	movf	?___ftdiv+1,w
 16955  1616  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16956  1617  0830               	movf	?___ftdiv+2,w
 16957  1618  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16958                           
 16959                           ;Dimmer_B1.c: 1135: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 16960  1619  085E               	movf	getDimmerLights_PercentToValue@value,w
 16961  161A  00DC               	movwf	??_getDimmerLights_PercentToValue
 16962  161B  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16963  161C  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16964  161D  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16965  161E  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16966  161F  1903               	skipnz
 16967  1620  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16968  1621  085C               	movf	??_getDimmerLights_PercentToValue,w
 16969  1622  3E64               	addlw	100
 16970  1623  00A8               	movwf	___awtoft@c
 16971  1624  3000               	movlw	0
 16972  1625  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16973  1626  00A9               	movwf	___awtoft@c+1
 16974  1627  319F  2796  3195   	fcall	___awtoft
 16975  162A  0020               	movlb	0	; select bank0
 16976  162B  0828               	movf	?___awtoft,w
 16977  162C  00B1               	movwf	___ftmul@f2
 16978  162D  0829               	movf	?___awtoft+1,w
 16979  162E  00B2               	movwf	___ftmul@f2+1
 16980  162F  082A               	movf	?___awtoft+2,w
 16981  1630  00B3               	movwf	___ftmul@f2+2
 16982  1631  085F               	movf	getDimmerLights_PercentToValue@i,w
 16983  1632  00AE               	movwf	___ftmul@f1
 16984  1633  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16985  1634  00AF               	movwf	___ftmul@f1+1
 16986  1635  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16987  1636  00B0               	movwf	___ftmul@f1+2
 16988  1637  318D  25CB  3195   	fcall	___ftmul
 16989  163A  0020               	movlb	0	; select bank0
 16990  163B  082E               	movf	?___ftmul,w
 16991  163C  00BE               	movwf	___ftneg@f1
 16992  163D  082F               	movf	?___ftmul+1,w
 16993  163E  00BF               	movwf	___ftneg@f1+1
 16994  163F  0830               	movf	?___ftmul+2,w
 16995  1640  00C0               	movwf	___ftneg@f1+2
 16996  1641  319A  2296  3195   	fcall	___ftneg
 16997  1644  0020               	movlb	0	; select bank0
 16998  1645  083E               	movf	?___ftneg,w
 16999  1646  00C4               	movwf	___ftadd@f2
 17000  1647  083F               	movf	?___ftneg+1,w
 17001  1648  00C5               	movwf	___ftadd@f2+1
 17002  1649  0840               	movf	?___ftneg+2,w
 17003  164A  00C6               	movwf	___ftadd@f2+2
 17004  164B  3000               	movlw	0
 17005  164C  00C1               	movwf	___ftadd@f1
 17006  164D  3050               	movlw	80
 17007  164E  00C2               	movwf	___ftadd@f1+1
 17008  164F  3042               	movlw	66
 17009  1650  00C3               	movwf	___ftadd@f1+2
 17010  1651  3183  2389  3195   	fcall	___ftadd
 17011  1654  0020               	movlb	0	; select bank0
 17012  1655  0841               	movf	?___ftadd,w
 17013  1656  00CE               	movwf	___fttol@f1
 17014  1657  0842               	movf	?___ftadd+1,w
 17015  1658  00CF               	movwf	___fttol@f1+1
 17016  1659  0843               	movf	?___ftadd+2,w
 17017  165A  00D0               	movwf	___fttol@f1+2
 17018  165B  318B  2382         	fcall	___fttol
 17019  165D  0020               	movlb	0	; select bank0
 17020  165E  084E               	movf	?___fttol,w
 17021  165F  0008               	return
 17022  1660                     __end_of_getDimmerLights_PercentToValue:	
 17023                           
 17024                           	psect	text120
 17025  0B82                     __ptext120:	
 17026 ;; *************** function ___fttol *****************
 17027 ;; Defined at:
 17028 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17029 ;; Parameters:    Size  Location     Type
 17030 ;;  f1              3   46[BANK0 ] float 
 17031 ;; Auto vars:     Size  Location     Type
 17032 ;;  lval            4   55[BANK0 ] unsigned long 
 17033 ;;  exp1            1   59[BANK0 ] unsigned char 
 17034 ;;  sign1           1   54[BANK0 ] unsigned char 
 17035 ;; Return value:  Size  Location     Type
 17036 ;;                  4   46[BANK0 ] long 
 17037 ;; Registers used:
 17038 ;;		wreg, status,2, status,0
 17039 ;; Tracked objects:
 17040 ;;		On entry : 0/0
 17041 ;;		On exit  : 0/0
 17042 ;;		Unchanged: 0/0
 17043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17044 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;Total ram usage:       14 bytes
 17049 ;; Hardware stack levels used:    1
 17050 ;; Hardware stack levels required when called:    5
 17051 ;; This function calls:
 17052 ;;		Nothing
 17053 ;; This function is called by:
 17054 ;;		_getDimmerLights_PercentToValue
 17055 ;;		_getDimmerLights_ValueToPercent
 17056 ;; This function uses a non-reentrant model
 17057 ;;
 17058                           
 17059                           
 17060                           ;psect for function ___fttol
 17061  0B82                     ___fttol:	
 17062                           
 17063                           ;incstack = 0
 17064                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17065  0B82  0020               	movlb	0	; select bank0
 17066  0B83  084E               	movf	___fttol@f1,w
 17067  0B84  00D2               	movwf	??___fttol
 17068  0B85  084F               	movf	___fttol@f1+1,w
 17069  0B86  00D3               	movwf	??___fttol+1
 17070  0B87  0850               	movf	___fttol@f1+2,w
 17071  0B88  00D4               	movwf	??___fttol+2
 17072  0B89  1003               	clrc
 17073  0B8A  0D53               	rlf	??___fttol+1,w
 17074  0B8B  0D54               	rlf	??___fttol+2,w
 17075  0B8C  00D5               	movwf	??___fttol+3
 17076  0B8D  0855               	movf	??___fttol+3,w
 17077  0B8E  00DB               	movwf	___fttol@exp1
 17078  0B8F  08DB               	movf	___fttol@exp1,f
 17079  0B90  1D03               	skipz
 17080  0B91  2B9B               	goto	l6124
 17081  0B92  3000               	movlw	0
 17082  0B93  00D1               	movwf	?___fttol+3
 17083  0B94  3000               	movlw	0
 17084  0B95  00D0               	movwf	?___fttol+2
 17085  0B96  3000               	movlw	0
 17086  0B97  00CF               	movwf	?___fttol+1
 17087  0B98  3000               	movlw	0
 17088  0B99  00CE               	movwf	?___fttol
 17089  0B9A  0008               	return
 17090  0B9B                     l6124:	
 17091  0B9B  084E               	movf	___fttol@f1,w
 17092  0B9C  00D2               	movwf	??___fttol
 17093  0B9D  084F               	movf	___fttol@f1+1,w
 17094  0B9E  00D3               	movwf	??___fttol+1
 17095  0B9F  0850               	movf	___fttol@f1+2,w
 17096  0BA0  00D4               	movwf	??___fttol+2
 17097  0BA1  3017               	movlw	23
 17098  0BA2                     u5165:	
 17099  0BA2  36D4               	lsrf	??___fttol+2,f
 17100  0BA3  0CD3               	rrf	??___fttol+1,f
 17101  0BA4  0CD2               	rrf	??___fttol,f
 17102  0BA5  0B89               	decfsz	9,f
 17103  0BA6  2BA2               	goto	u5165
 17104  0BA7  0852               	movf	??___fttol,w
 17105  0BA8  00D5               	movwf	??___fttol+3
 17106  0BA9  0855               	movf	??___fttol+3,w
 17107  0BAA  00D6               	movwf	___fttol@sign1
 17108  0BAB  17CF               	bsf	___fttol@f1+1,7
 17109  0BAC  30FF               	movlw	255
 17110  0BAD  05CE               	andwf	___fttol@f1,f
 17111  0BAE  30FF               	movlw	255
 17112  0BAF  05CF               	andwf	___fttol@f1+1,f
 17113  0BB0  3000               	movlw	0
 17114  0BB1  05D0               	andwf	___fttol@f1+2,f
 17115  0BB2  084E               	movf	___fttol@f1,w
 17116  0BB3  00D7               	movwf	___fttol@lval
 17117  0BB4  084F               	movf	___fttol@f1+1,w
 17118  0BB5  00D8               	movwf	___fttol@lval+1
 17119  0BB6  0850               	movf	___fttol@f1+2,w
 17120  0BB7  00D9               	movwf	___fttol@lval+2
 17121  0BB8  01DA               	clrf	___fttol@lval+3
 17122  0BB9  308E               	movlw	142
 17123  0BBA  02DB               	subwf	___fttol@exp1,f
 17124  0BBB  1FDB               	btfss	___fttol@exp1,7
 17125  0BBC  2BD9               	goto	l6144
 17126  0BBD  085B               	movf	___fttol@exp1,w
 17127  0BBE  3A80               	xorlw	128
 17128  0BBF  3E8F               	addlw	143
 17129  0BC0  1803               	skipnc
 17130  0BC1  2BCB               	goto	l6142
 17131  0BC2  3000               	movlw	0
 17132  0BC3  00D1               	movwf	?___fttol+3
 17133  0BC4  3000               	movlw	0
 17134  0BC5  00D0               	movwf	?___fttol+2
 17135  0BC6  3000               	movlw	0
 17136  0BC7  00CF               	movwf	?___fttol+1
 17137  0BC8  3000               	movlw	0
 17138  0BC9  00CE               	movwf	?___fttol
 17139  0BCA  0008               	return
 17140  0BCB                     l6142:	
 17141  0BCB  3001               	movlw	1
 17142  0BCC                     u5195:	
 17143  0BCC  36DA               	lsrf	___fttol@lval+3,f
 17144  0BCD  0CD9               	rrf	___fttol@lval+2,f
 17145  0BCE  0CD8               	rrf	___fttol@lval+1,f
 17146  0BCF  0CD7               	rrf	___fttol@lval,f
 17147  0BD0  0B89               	decfsz	9,f
 17148  0BD1  2BCC               	goto	u5195
 17149  0BD2  3001               	movlw	1
 17150  0BD3  00D2               	movwf	??___fttol
 17151  0BD4  0852               	movf	??___fttol,w
 17152  0BD5  07DB               	addwf	___fttol@exp1,f
 17153  0BD6  1903               	btfsc	3,2
 17154  0BD7  2BF2               	goto	l6154
 17155  0BD8  2BCB               	goto	l6142
 17156  0BD9                     l6144:	
 17157  0BD9  3018               	movlw	24
 17158  0BDA  025B               	subwf	___fttol@exp1,w
 17159  0BDB  1C03               	skipc
 17160  0BDC  2BEF               	goto	l6152
 17161  0BDD  3000               	movlw	0
 17162  0BDE  00D1               	movwf	?___fttol+3
 17163  0BDF  3000               	movlw	0
 17164  0BE0  00D0               	movwf	?___fttol+2
 17165  0BE1  3000               	movlw	0
 17166  0BE2  00CF               	movwf	?___fttol+1
 17167  0BE3  3000               	movlw	0
 17168  0BE4  00CE               	movwf	?___fttol
 17169  0BE5  0008               	return
 17170  0BE6                     l6150:	
 17171  0BE6  3001               	movlw	1
 17172  0BE7                     u5225:	
 17173  0BE7  35D7               	lslf	___fttol@lval,f
 17174  0BE8  0DD8               	rlf	___fttol@lval+1,f
 17175  0BE9  0DD9               	rlf	___fttol@lval+2,f
 17176  0BEA  0DDA               	rlf	___fttol@lval+3,f
 17177  0BEB  0B89               	decfsz	9,f
 17178  0BEC  2BE7               	goto	u5225
 17179  0BED  3001               	movlw	1
 17180  0BEE  02DB               	subwf	___fttol@exp1,f
 17181  0BEF                     l6152:	
 17182  0BEF  08DB               	movf	___fttol@exp1,f
 17183  0BF0  1D03               	skipz
 17184  0BF1  2BE6               	goto	l6150
 17185  0BF2                     l6154:	
 17186  0BF2  0856               	movf	___fttol@sign1,w
 17187  0BF3  1903               	btfsc	3,2
 17188  0BF4  2C00               	goto	l6158
 17189  0BF5  09D7               	comf	___fttol@lval,f
 17190  0BF6  09D8               	comf	___fttol@lval+1,f
 17191  0BF7  09D9               	comf	___fttol@lval+2,f
 17192  0BF8  09DA               	comf	___fttol@lval+3,f
 17193  0BF9  0AD7               	incf	___fttol@lval,f
 17194  0BFA  1903               	skipnz
 17195  0BFB  0AD8               	incf	___fttol@lval+1,f
 17196  0BFC  1903               	skipnz
 17197  0BFD  0AD9               	incf	___fttol@lval+2,f
 17198  0BFE  1903               	skipnz
 17199  0BFF  0ADA               	incf	___fttol@lval+3,f
 17200  0C00                     l6158:	
 17201  0C00  085A               	movf	___fttol@lval+3,w
 17202  0C01  00D1               	movwf	?___fttol+3
 17203  0C02  0859               	movf	___fttol@lval+2,w
 17204  0C03  00D0               	movwf	?___fttol+2
 17205  0C04  0858               	movf	___fttol@lval+1,w
 17206  0C05  00CF               	movwf	?___fttol+1
 17207  0C06  0857               	movf	___fttol@lval,w
 17208  0C07  00CE               	movwf	?___fttol
 17209  0C08  0008               	return
 17210  0C09                     __end_of___fttol:	
 17211                           
 17212                           	psect	text121
 17213  1A96                     __ptext121:	
 17214 ;; *************** function ___ftneg *****************
 17215 ;; Defined at:
 17216 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17217 ;; Parameters:    Size  Location     Type
 17218 ;;  f1              3   30[BANK0 ] float 
 17219 ;; Auto vars:     Size  Location     Type
 17220 ;;		None
 17221 ;; Return value:  Size  Location     Type
 17222 ;;                  3   30[BANK0 ] float 
 17223 ;; Registers used:
 17224 ;;		wreg
 17225 ;; Tracked objects:
 17226 ;;		On entry : 0/0
 17227 ;;		On exit  : 0/0
 17228 ;;		Unchanged: 0/0
 17229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17230 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17234 ;;Total ram usage:        3 bytes
 17235 ;; Hardware stack levels used:    1
 17236 ;; Hardware stack levels required when called:    5
 17237 ;; This function calls:
 17238 ;;		Nothing
 17239 ;; This function is called by:
 17240 ;;		_getDimmerLights_PercentToValue
 17241 ;;		_getDimmerLights_ValueToPercent
 17242 ;; This function uses a non-reentrant model
 17243 ;;
 17244                           
 17245                           
 17246                           ;psect for function ___ftneg
 17247  1A96                     ___ftneg:	
 17248                           
 17249                           ;incstack = 0
 17250                           ; Regs used in ___ftneg: [wreg]
 17251  1A96  0020               	movlb	0	; select bank0
 17252  1A97  0840               	movf	___ftneg@f1+2,w
 17253  1A98  043F               	iorwf	___ftneg@f1+1,w
 17254  1A99  043E               	iorwf	___ftneg@f1,w
 17255  1A9A  1903               	skipnz
 17256  1A9B  0008               	return
 17257  1A9C  3080               	movlw	128
 17258  1A9D  06C0               	xorwf	___ftneg@f1+2,f
 17259  1A9E  0008               	return
 17260  1A9F                     __end_of___ftneg:	
 17261                           
 17262                           	psect	text122
 17263  0DCB                     __ptext122:	
 17264 ;; *************** function ___ftmul *****************
 17265 ;; Defined at:
 17266 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17267 ;; Parameters:    Size  Location     Type
 17268 ;;  f1              3   14[BANK0 ] float 
 17269 ;;  f2              3   17[BANK0 ] float 
 17270 ;; Auto vars:     Size  Location     Type
 17271 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17272 ;;  sign            1   29[BANK0 ] unsigned char 
 17273 ;;  cntr            1   28[BANK0 ] unsigned char 
 17274 ;;  exp             1   24[BANK0 ] unsigned char 
 17275 ;; Return value:  Size  Location     Type
 17276 ;;                  3   14[BANK0 ] float 
 17277 ;; Registers used:
 17278 ;;		wreg, status,2, status,0, pclath, cstack
 17279 ;; Tracked objects:
 17280 ;;		On entry : 0/0
 17281 ;;		On exit  : 0/0
 17282 ;;		Unchanged: 0/0
 17283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17284 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17285 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17286 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17287 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17288 ;;Total ram usage:       16 bytes
 17289 ;; Hardware stack levels used:    1
 17290 ;; Hardware stack levels required when called:    6
 17291 ;; This function calls:
 17292 ;;		___ftpack
 17293 ;; This function is called by:
 17294 ;;		_getDimmerLights_PercentToValue
 17295 ;; This function uses a non-reentrant model
 17296 ;;
 17297                           
 17298                           
 17299                           ;psect for function ___ftmul
 17300  0DCB                     ___ftmul:	
 17301                           
 17302                           ;incstack = 0
 17303                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17304  0DCB  0020               	movlb	0	; select bank0
 17305  0DCC  082E               	movf	___ftmul@f1,w
 17306  0DCD  00B4               	movwf	??___ftmul
 17307  0DCE  082F               	movf	___ftmul@f1+1,w
 17308  0DCF  00B5               	movwf	??___ftmul+1
 17309  0DD0  0830               	movf	___ftmul@f1+2,w
 17310  0DD1  00B6               	movwf	??___ftmul+2
 17311  0DD2  1003               	clrc
 17312  0DD3  0D35               	rlf	??___ftmul+1,w
 17313  0DD4  0D36               	rlf	??___ftmul+2,w
 17314  0DD5  00B7               	movwf	??___ftmul+3
 17315  0DD6  0837               	movf	??___ftmul+3,w
 17316  0DD7  00B8               	movwf	___ftmul@exp
 17317  0DD8  08B8               	movf	___ftmul@exp,f
 17318  0DD9  1D03               	skipz
 17319  0DDA  2DE2               	goto	l6066
 17320  0DDB  3000               	movlw	0
 17321  0DDC  00AE               	movwf	?___ftmul
 17322  0DDD  3000               	movlw	0
 17323  0DDE  00AF               	movwf	?___ftmul+1
 17324  0DDF  3000               	movlw	0
 17325  0DE0  00B0               	movwf	?___ftmul+2
 17326  0DE1  0008               	return
 17327  0DE2                     l6066:	
 17328  0DE2  0831               	movf	___ftmul@f2,w
 17329  0DE3  00B4               	movwf	??___ftmul
 17330  0DE4  0832               	movf	___ftmul@f2+1,w
 17331  0DE5  00B5               	movwf	??___ftmul+1
 17332  0DE6  0833               	movf	___ftmul@f2+2,w
 17333  0DE7  00B6               	movwf	??___ftmul+2
 17334  0DE8  1003               	clrc
 17335  0DE9  0D35               	rlf	??___ftmul+1,w
 17336  0DEA  0D36               	rlf	??___ftmul+2,w
 17337  0DEB  00B7               	movwf	??___ftmul+3
 17338  0DEC  0837               	movf	??___ftmul+3,w
 17339  0DED  00BD               	movwf	___ftmul@sign
 17340  0DEE  08BD               	movf	___ftmul@sign,f
 17341  0DEF  1D03               	skipz
 17342  0DF0  2DF8               	goto	l6072
 17343  0DF1  3000               	movlw	0
 17344  0DF2  00AE               	movwf	?___ftmul
 17345  0DF3  3000               	movlw	0
 17346  0DF4  00AF               	movwf	?___ftmul+1
 17347  0DF5  3000               	movlw	0
 17348  0DF6  00B0               	movwf	?___ftmul+2
 17349  0DF7  0008               	return
 17350  0DF8                     l6072:	
 17351  0DF8  083D               	movf	___ftmul@sign,w
 17352  0DF9  3E7B               	addlw	123
 17353  0DFA  00B4               	movwf	??___ftmul
 17354  0DFB  0834               	movf	??___ftmul,w
 17355  0DFC  07B8               	addwf	___ftmul@exp,f
 17356  0DFD  082E               	movf	___ftmul@f1,w
 17357  0DFE  00B4               	movwf	??___ftmul
 17358  0DFF  082F               	movf	___ftmul@f1+1,w
 17359  0E00  00B5               	movwf	??___ftmul+1
 17360  0E01  0830               	movf	___ftmul@f1+2,w
 17361  0E02  00B6               	movwf	??___ftmul+2
 17362  0E03  3010               	movlw	16
 17363  0E04                     u5045:	
 17364  0E04  36B6               	lsrf	??___ftmul+2,f
 17365  0E05  0CB5               	rrf	??___ftmul+1,f
 17366  0E06  0CB4               	rrf	??___ftmul,f
 17367  0E07  0B89               	decfsz	9,f
 17368  0E08  2E04               	goto	u5045
 17369  0E09  0834               	movf	??___ftmul,w
 17370  0E0A  00B7               	movwf	??___ftmul+3
 17371  0E0B  0837               	movf	??___ftmul+3,w
 17372  0E0C  00BD               	movwf	___ftmul@sign
 17373  0E0D  0831               	movf	___ftmul@f2,w
 17374  0E0E  00B4               	movwf	??___ftmul
 17375  0E0F  0832               	movf	___ftmul@f2+1,w
 17376  0E10  00B5               	movwf	??___ftmul+1
 17377  0E11  0833               	movf	___ftmul@f2+2,w
 17378  0E12  00B6               	movwf	??___ftmul+2
 17379  0E13  3010               	movlw	16
 17380  0E14                     u5055:	
 17381  0E14  36B6               	lsrf	??___ftmul+2,f
 17382  0E15  0CB5               	rrf	??___ftmul+1,f
 17383  0E16  0CB4               	rrf	??___ftmul,f
 17384  0E17  0B89               	decfsz	9,f
 17385  0E18  2E14               	goto	u5055
 17386  0E19  0834               	movf	??___ftmul,w
 17387  0E1A  00B7               	movwf	??___ftmul+3
 17388  0E1B  0837               	movf	??___ftmul+3,w
 17389  0E1C  06BD               	xorwf	___ftmul@sign,f
 17390  0E1D  3080               	movlw	128
 17391  0E1E  00B4               	movwf	??___ftmul
 17392  0E1F  0834               	movf	??___ftmul,w
 17393  0E20  05BD               	andwf	___ftmul@sign,f
 17394  0E21  17AF               	bsf	___ftmul@f1+1,7
 17395  0E22  17B2               	bsf	___ftmul@f2+1,7
 17396  0E23  30FF               	movlw	255
 17397  0E24  05B1               	andwf	___ftmul@f2,f
 17398  0E25  30FF               	movlw	255
 17399  0E26  05B2               	andwf	___ftmul@f2+1,f
 17400  0E27  3000               	movlw	0
 17401  0E28  05B3               	andwf	___ftmul@f2+2,f
 17402  0E29  3000               	movlw	0
 17403  0E2A  00B9               	movwf	___ftmul@f3_as_product
 17404  0E2B  3000               	movlw	0
 17405  0E2C  00BA               	movwf	___ftmul@f3_as_product+1
 17406  0E2D  3000               	movlw	0
 17407  0E2E  00BB               	movwf	___ftmul@f3_as_product+2
 17408  0E2F  3007               	movlw	7
 17409  0E30  00B4               	movwf	??___ftmul
 17410  0E31  0834               	movf	??___ftmul,w
 17411  0E32  00BC               	movwf	___ftmul@cntr
 17412  0E33                     l6084:	
 17413  0E33  1C2E               	btfss	___ftmul@f1,0
 17414  0E34  2E3B               	goto	l6088
 17415  0E35  0831               	movf	___ftmul@f2,w
 17416  0E36  07B9               	addwf	___ftmul@f3_as_product,f
 17417  0E37  0832               	movf	___ftmul@f2+1,w
 17418  0E38  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17419  0E39  0833               	movf	___ftmul@f2+2,w
 17420  0E3A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17421  0E3B                     l6088:	
 17422  0E3B  3001               	movlw	1
 17423  0E3C                     u5075:	
 17424  0E3C  36B0               	lsrf	___ftmul@f1+2,f
 17425  0E3D  0CAF               	rrf	___ftmul@f1+1,f
 17426  0E3E  0CAE               	rrf	___ftmul@f1,f
 17427  0E3F  0B89               	decfsz	9,f
 17428  0E40  2E3C               	goto	u5075
 17429  0E41  3001               	movlw	1
 17430  0E42                     u5085:	
 17431  0E42  35B1               	lslf	___ftmul@f2,f
 17432  0E43  0DB2               	rlf	___ftmul@f2+1,f
 17433  0E44  0DB3               	rlf	___ftmul@f2+2,f
 17434  0E45  0B89               	decfsz	9,f
 17435  0E46  2E42               	goto	u5085
 17436  0E47  3001               	movlw	1
 17437  0E48  02BC               	subwf	___ftmul@cntr,f
 17438  0E49  1D03               	btfss	3,2
 17439  0E4A  2E33               	goto	l6084
 17440  0E4B  3009               	movlw	9
 17441  0E4C  00B4               	movwf	??___ftmul
 17442  0E4D  0834               	movf	??___ftmul,w
 17443  0E4E  00BC               	movwf	___ftmul@cntr
 17444  0E4F                     l6096:	
 17445  0E4F  1C2E               	btfss	___ftmul@f1,0
 17446  0E50  2E57               	goto	l6100
 17447  0E51  0831               	movf	___ftmul@f2,w
 17448  0E52  07B9               	addwf	___ftmul@f3_as_product,f
 17449  0E53  0832               	movf	___ftmul@f2+1,w
 17450  0E54  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17451  0E55  0833               	movf	___ftmul@f2+2,w
 17452  0E56  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17453  0E57                     l6100:	
 17454  0E57  3001               	movlw	1
 17455  0E58                     u5115:	
 17456  0E58  36B0               	lsrf	___ftmul@f1+2,f
 17457  0E59  0CAF               	rrf	___ftmul@f1+1,f
 17458  0E5A  0CAE               	rrf	___ftmul@f1,f
 17459  0E5B  0B89               	decfsz	9,f
 17460  0E5C  2E58               	goto	u5115
 17461  0E5D  3001               	movlw	1
 17462  0E5E                     u5125:	
 17463  0E5E  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17464  0E5F  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17465  0E60  0CB9               	rrf	___ftmul@f3_as_product,f
 17466  0E61  0B89               	decfsz	9,f
 17467  0E62  2E5E               	goto	u5125
 17468  0E63  3001               	movlw	1
 17469  0E64  02BC               	subwf	___ftmul@cntr,f
 17470  0E65  1D03               	btfss	3,2
 17471  0E66  2E4F               	goto	l6096
 17472  0E67  0839               	movf	___ftmul@f3_as_product,w
 17473  0E68  00A0               	movwf	___ftpack@arg
 17474  0E69  083A               	movf	___ftmul@f3_as_product+1,w
 17475  0E6A  00A1               	movwf	___ftpack@arg+1
 17476  0E6B  083B               	movf	___ftmul@f3_as_product+2,w
 17477  0E6C  00A2               	movwf	___ftpack@arg+2
 17478  0E6D  0838               	movf	___ftmul@exp,w
 17479  0E6E  00B4               	movwf	??___ftmul
 17480  0E6F  0834               	movf	??___ftmul,w
 17481  0E70  00A3               	movwf	___ftpack@exp
 17482  0E71  083D               	movf	___ftmul@sign,w
 17483  0E72  00B5               	movwf	??___ftmul+1
 17484  0E73  0835               	movf	??___ftmul+1,w
 17485  0E74  00A4               	movwf	___ftpack@sign
 17486  0E75  3195  2536         	fcall	___ftpack
 17487  0E77  0020               	movlb	0	; select bank0
 17488  0E78  0820               	movf	?___ftpack,w
 17489  0E79  00AE               	movwf	?___ftmul
 17490  0E7A  0821               	movf	?___ftpack+1,w
 17491  0E7B  00AF               	movwf	?___ftmul+1
 17492  0E7C  0822               	movf	?___ftpack+2,w
 17493  0E7D  00B0               	movwf	?___ftmul+2
 17494  0E7E  0008               	return
 17495  0E7F                     __end_of___ftmul:	
 17496                           
 17497                           	psect	text123
 17498  0D22                     __ptext123:	
 17499 ;; *************** function ___ftdiv *****************
 17500 ;; Defined at:
 17501 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;  f2              3   14[BANK0 ] float 
 17504 ;;  f1              3   17[BANK0 ] float 
 17505 ;; Auto vars:     Size  Location     Type
 17506 ;;  f3              3   25[BANK0 ] float 
 17507 ;;  sign            1   29[BANK0 ] unsigned char 
 17508 ;;  exp             1   28[BANK0 ] unsigned char 
 17509 ;;  cntr            1   24[BANK0 ] unsigned char 
 17510 ;; Return value:  Size  Location     Type
 17511 ;;                  3   14[BANK0 ] float 
 17512 ;; Registers used:
 17513 ;;		wreg, status,2, status,0, pclath, cstack
 17514 ;; Tracked objects:
 17515 ;;		On entry : 0/0
 17516 ;;		On exit  : 0/0
 17517 ;;		Unchanged: 0/0
 17518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17519 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17520 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;Total ram usage:       16 bytes
 17524 ;; Hardware stack levels used:    1
 17525 ;; Hardware stack levels required when called:    6
 17526 ;; This function calls:
 17527 ;;		___ftpack
 17528 ;; This function is called by:
 17529 ;;		_getDimmerLights_PercentToValue
 17530 ;;		_getDimmerLights_ValueToPercent
 17531 ;; This function uses a non-reentrant model
 17532 ;;
 17533                           
 17534                           
 17535                           ;psect for function ___ftdiv
 17536  0D22                     ___ftdiv:	
 17537                           
 17538                           ;incstack = 0
 17539                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17540  0D22  0020               	movlb	0	; select bank0
 17541  0D23  0831               	movf	___ftdiv@f1,w
 17542  0D24  00B4               	movwf	??___ftdiv
 17543  0D25  0832               	movf	___ftdiv@f1+1,w
 17544  0D26  00B5               	movwf	??___ftdiv+1
 17545  0D27  0833               	movf	___ftdiv@f1+2,w
 17546  0D28  00B6               	movwf	??___ftdiv+2
 17547  0D29  1003               	clrc
 17548  0D2A  0D35               	rlf	??___ftdiv+1,w
 17549  0D2B  0D36               	rlf	??___ftdiv+2,w
 17550  0D2C  00B7               	movwf	??___ftdiv+3
 17551  0D2D  0837               	movf	??___ftdiv+3,w
 17552  0D2E  00BC               	movwf	___ftdiv@exp
 17553  0D2F  08BC               	movf	___ftdiv@exp,f
 17554  0D30  1D03               	skipz
 17555  0D31  2D39               	goto	l6024
 17556  0D32  3000               	movlw	0
 17557  0D33  00AE               	movwf	?___ftdiv
 17558  0D34  3000               	movlw	0
 17559  0D35  00AF               	movwf	?___ftdiv+1
 17560  0D36  3000               	movlw	0
 17561  0D37  00B0               	movwf	?___ftdiv+2
 17562  0D38  0008               	return
 17563  0D39                     l6024:	
 17564  0D39  082E               	movf	___ftdiv@f2,w
 17565  0D3A  00B4               	movwf	??___ftdiv
 17566  0D3B  082F               	movf	___ftdiv@f2+1,w
 17567  0D3C  00B5               	movwf	??___ftdiv+1
 17568  0D3D  0830               	movf	___ftdiv@f2+2,w
 17569  0D3E  00B6               	movwf	??___ftdiv+2
 17570  0D3F  1003               	clrc
 17571  0D40  0D35               	rlf	??___ftdiv+1,w
 17572  0D41  0D36               	rlf	??___ftdiv+2,w
 17573  0D42  00B7               	movwf	??___ftdiv+3
 17574  0D43  0837               	movf	??___ftdiv+3,w
 17575  0D44  00BD               	movwf	___ftdiv@sign
 17576  0D45  08BD               	movf	___ftdiv@sign,f
 17577  0D46  1D03               	skipz
 17578  0D47  2D4F               	goto	l6030
 17579  0D48  3000               	movlw	0
 17580  0D49  00AE               	movwf	?___ftdiv
 17581  0D4A  3000               	movlw	0
 17582  0D4B  00AF               	movwf	?___ftdiv+1
 17583  0D4C  3000               	movlw	0
 17584  0D4D  00B0               	movwf	?___ftdiv+2
 17585  0D4E  0008               	return
 17586  0D4F                     l6030:	
 17587  0D4F  3000               	movlw	0
 17588  0D50  00B9               	movwf	___ftdiv@f3
 17589  0D51  3000               	movlw	0
 17590  0D52  00BA               	movwf	___ftdiv@f3+1
 17591  0D53  3000               	movlw	0
 17592  0D54  00BB               	movwf	___ftdiv@f3+2
 17593  0D55  3089               	movlw	137
 17594  0D56  073D               	addwf	___ftdiv@sign,w
 17595  0D57  00B4               	movwf	??___ftdiv
 17596  0D58  0834               	movf	??___ftdiv,w
 17597  0D59  02BC               	subwf	___ftdiv@exp,f
 17598  0D5A  0831               	movf	___ftdiv@f1,w
 17599  0D5B  00B4               	movwf	??___ftdiv
 17600  0D5C  0832               	movf	___ftdiv@f1+1,w
 17601  0D5D  00B5               	movwf	??___ftdiv+1
 17602  0D5E  0833               	movf	___ftdiv@f1+2,w
 17603  0D5F  00B6               	movwf	??___ftdiv+2
 17604  0D60  3010               	movlw	16
 17605  0D61                     u4965:	
 17606  0D61  36B6               	lsrf	??___ftdiv+2,f
 17607  0D62  0CB5               	rrf	??___ftdiv+1,f
 17608  0D63  0CB4               	rrf	??___ftdiv,f
 17609  0D64  0B89               	decfsz	9,f
 17610  0D65  2D61               	goto	u4965
 17611  0D66  0834               	movf	??___ftdiv,w
 17612  0D67  00B7               	movwf	??___ftdiv+3
 17613  0D68  0837               	movf	??___ftdiv+3,w
 17614  0D69  00BD               	movwf	___ftdiv@sign
 17615  0D6A  082E               	movf	___ftdiv@f2,w
 17616  0D6B  00B4               	movwf	??___ftdiv
 17617  0D6C  082F               	movf	___ftdiv@f2+1,w
 17618  0D6D  00B5               	movwf	??___ftdiv+1
 17619  0D6E  0830               	movf	___ftdiv@f2+2,w
 17620  0D6F  00B6               	movwf	??___ftdiv+2
 17621  0D70  3010               	movlw	16
 17622  0D71                     u4975:	
 17623  0D71  36B6               	lsrf	??___ftdiv+2,f
 17624  0D72  0CB5               	rrf	??___ftdiv+1,f
 17625  0D73  0CB4               	rrf	??___ftdiv,f
 17626  0D74  0B89               	decfsz	9,f
 17627  0D75  2D71               	goto	u4975
 17628  0D76  0834               	movf	??___ftdiv,w
 17629  0D77  00B7               	movwf	??___ftdiv+3
 17630  0D78  0837               	movf	??___ftdiv+3,w
 17631  0D79  06BD               	xorwf	___ftdiv@sign,f
 17632  0D7A  3080               	movlw	128
 17633  0D7B  00B4               	movwf	??___ftdiv
 17634  0D7C  0834               	movf	??___ftdiv,w
 17635  0D7D  05BD               	andwf	___ftdiv@sign,f
 17636  0D7E  17B2               	bsf	___ftdiv@f1+1,7
 17637  0D7F  30FF               	movlw	255
 17638  0D80  05B1               	andwf	___ftdiv@f1,f
 17639  0D81  30FF               	movlw	255
 17640  0D82  05B2               	andwf	___ftdiv@f1+1,f
 17641  0D83  3000               	movlw	0
 17642  0D84  05B3               	andwf	___ftdiv@f1+2,f
 17643  0D85  17AF               	bsf	___ftdiv@f2+1,7
 17644  0D86  30FF               	movlw	255
 17645  0D87  05AE               	andwf	___ftdiv@f2,f
 17646  0D88  30FF               	movlw	255
 17647  0D89  05AF               	andwf	___ftdiv@f2+1,f
 17648  0D8A  3000               	movlw	0
 17649  0D8B  05B0               	andwf	___ftdiv@f2+2,f
 17650  0D8C  3018               	movlw	24
 17651  0D8D  00B4               	movwf	??___ftdiv
 17652  0D8E  0834               	movf	??___ftdiv,w
 17653  0D8F  00B8               	movwf	___ftdiv@cntr
 17654  0D90                     l6044:	
 17655  0D90  3001               	movlw	1
 17656  0D91                     u4985:	
 17657  0D91  35B9               	lslf	___ftdiv@f3,f
 17658  0D92  0DBA               	rlf	___ftdiv@f3+1,f
 17659  0D93  0DBB               	rlf	___ftdiv@f3+2,f
 17660  0D94  0B89               	decfsz	9,f
 17661  0D95  2D91               	goto	u4985
 17662  0D96  0830               	movf	___ftdiv@f2+2,w
 17663  0D97  0233               	subwf	___ftdiv@f1+2,w
 17664  0D98  1D03               	skipz
 17665  0D99  2DA0               	goto	u4995
 17666  0D9A  082F               	movf	___ftdiv@f2+1,w
 17667  0D9B  0232               	subwf	___ftdiv@f1+1,w
 17668  0D9C  1D03               	skipz
 17669  0D9D  2DA0               	goto	u4995
 17670  0D9E  082E               	movf	___ftdiv@f2,w
 17671  0D9F  0231               	subwf	___ftdiv@f1,w
 17672  0DA0                     u4995:	
 17673  0DA0  1C03               	skipc
 17674  0DA1  2DA9               	goto	l6052
 17675  0DA2  082E               	movf	___ftdiv@f2,w
 17676  0DA3  02B1               	subwf	___ftdiv@f1,f
 17677  0DA4  082F               	movf	___ftdiv@f2+1,w
 17678  0DA5  3BB2               	subwfb	___ftdiv@f1+1,f
 17679  0DA6  0830               	movf	___ftdiv@f2+2,w
 17680  0DA7  3BB3               	subwfb	___ftdiv@f1+2,f
 17681  0DA8  1439               	bsf	___ftdiv@f3,0
 17682  0DA9                     l6052:	
 17683  0DA9  3001               	movlw	1
 17684  0DAA                     u5005:	
 17685  0DAA  35B1               	lslf	___ftdiv@f1,f
 17686  0DAB  0DB2               	rlf	___ftdiv@f1+1,f
 17687  0DAC  0DB3               	rlf	___ftdiv@f1+2,f
 17688  0DAD  0B89               	decfsz	9,f
 17689  0DAE  2DAA               	goto	u5005
 17690  0DAF  3001               	movlw	1
 17691  0DB0  02B8               	subwf	___ftdiv@cntr,f
 17692  0DB1  1D03               	btfss	3,2
 17693  0DB2  2D90               	goto	l6044
 17694  0DB3  0839               	movf	___ftdiv@f3,w
 17695  0DB4  00A0               	movwf	___ftpack@arg
 17696  0DB5  083A               	movf	___ftdiv@f3+1,w
 17697  0DB6  00A1               	movwf	___ftpack@arg+1
 17698  0DB7  083B               	movf	___ftdiv@f3+2,w
 17699  0DB8  00A2               	movwf	___ftpack@arg+2
 17700  0DB9  083C               	movf	___ftdiv@exp,w
 17701  0DBA  00B4               	movwf	??___ftdiv
 17702  0DBB  0834               	movf	??___ftdiv,w
 17703  0DBC  00A3               	movwf	___ftpack@exp
 17704  0DBD  083D               	movf	___ftdiv@sign,w
 17705  0DBE  00B5               	movwf	??___ftdiv+1
 17706  0DBF  0835               	movf	??___ftdiv+1,w
 17707  0DC0  00A4               	movwf	___ftpack@sign
 17708  0DC1  3195  2536         	fcall	___ftpack
 17709  0DC3  0020               	movlb	0	; select bank0
 17710  0DC4  0820               	movf	?___ftpack,w
 17711  0DC5  00AE               	movwf	?___ftdiv
 17712  0DC6  0821               	movf	?___ftpack+1,w
 17713  0DC7  00AF               	movwf	?___ftdiv+1
 17714  0DC8  0822               	movf	?___ftpack+2,w
 17715  0DC9  00B0               	movwf	?___ftdiv+2
 17716  0DCA  0008               	return
 17717  0DCB                     __end_of___ftdiv:	
 17718                           
 17719                           	psect	text124
 17720  0389                     __ptext124:	
 17721 ;; *************** function ___ftadd *****************
 17722 ;; Defined at:
 17723 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17724 ;; Parameters:    Size  Location     Type
 17725 ;;  f1              3   33[BANK0 ] float 
 17726 ;;  f2              3   36[BANK0 ] float 
 17727 ;; Auto vars:     Size  Location     Type
 17728 ;;  exp1            1   45[BANK0 ] unsigned char 
 17729 ;;  exp2            1   44[BANK0 ] unsigned char 
 17730 ;;  sign            1   43[BANK0 ] unsigned char 
 17731 ;; Return value:  Size  Location     Type
 17732 ;;                  3   33[BANK0 ] float 
 17733 ;; Registers used:
 17734 ;;		wreg, status,2, status,0, pclath, cstack
 17735 ;; Tracked objects:
 17736 ;;		On entry : 0/0
 17737 ;;		On exit  : 0/0
 17738 ;;		Unchanged: 0/0
 17739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17740 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17741 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17742 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17743 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;Total ram usage:       13 bytes
 17745 ;; Hardware stack levels used:    1
 17746 ;; Hardware stack levels required when called:    6
 17747 ;; This function calls:
 17748 ;;		___ftpack
 17749 ;; This function is called by:
 17750 ;;		_getDimmerLights_PercentToValue
 17751 ;;		_getDimmerLights_ValueToPercent
 17752 ;; This function uses a non-reentrant model
 17753 ;;
 17754                           
 17755                           
 17756                           ;psect for function ___ftadd
 17757  0389                     ___ftadd:	
 17758                           
 17759                           ;incstack = 0
 17760                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17761  0389  0020               	movlb	0	; select bank0
 17762  038A  0841               	movf	___ftadd@f1,w
 17763  038B  00C7               	movwf	??___ftadd
 17764  038C  0842               	movf	___ftadd@f1+1,w
 17765  038D  00C8               	movwf	??___ftadd+1
 17766  038E  0843               	movf	___ftadd@f1+2,w
 17767  038F  00C9               	movwf	??___ftadd+2
 17768  0390  1003               	clrc
 17769  0391  0D48               	rlf	??___ftadd+1,w
 17770  0392  0D49               	rlf	??___ftadd+2,w
 17771  0393  00CA               	movwf	??___ftadd+3
 17772  0394  084A               	movf	??___ftadd+3,w
 17773  0395  00CD               	movwf	___ftadd@exp1
 17774  0396  0844               	movf	___ftadd@f2,w
 17775  0397  00C7               	movwf	??___ftadd
 17776  0398  0845               	movf	___ftadd@f2+1,w
 17777  0399  00C8               	movwf	??___ftadd+1
 17778  039A  0846               	movf	___ftadd@f2+2,w
 17779  039B  00C9               	movwf	??___ftadd+2
 17780  039C  1003               	clrc
 17781  039D  0D48               	rlf	??___ftadd+1,w
 17782  039E  0D49               	rlf	??___ftadd+2,w
 17783  039F  00CA               	movwf	??___ftadd+3
 17784  03A0  084A               	movf	??___ftadd+3,w
 17785  03A1  00CC               	movwf	___ftadd@exp2
 17786  03A2  084D               	movf	___ftadd@exp1,w
 17787  03A3  1903               	btfsc	3,2
 17788  03A4  2BB1               	goto	l5954
 17789  03A5  084C               	movf	___ftadd@exp2,w
 17790  03A6  024D               	subwf	___ftadd@exp1,w
 17791  03A7  1803               	skipnc
 17792  03A8  2BB8               	goto	l5958
 17793  03A9  034D               	decf	___ftadd@exp1,w
 17794  03AA  3AFF               	xorlw	255
 17795  03AB  074C               	addwf	___ftadd@exp2,w
 17796  03AC  00C7               	movwf	??___ftadd
 17797  03AD  3019               	movlw	25
 17798  03AE  0247               	subwf	??___ftadd,w
 17799  03AF  1C03               	skipc
 17800  03B0  2BB8               	goto	l5958
 17801  03B1                     l5954:	
 17802  03B1  0844               	movf	___ftadd@f2,w
 17803  03B2  00C1               	movwf	?___ftadd
 17804  03B3  0845               	movf	___ftadd@f2+1,w
 17805  03B4  00C2               	movwf	?___ftadd+1
 17806  03B5  0846               	movf	___ftadd@f2+2,w
 17807  03B6  00C3               	movwf	?___ftadd+2
 17808  03B7  0008               	return
 17809  03B8                     l5958:	
 17810  03B8  084C               	movf	___ftadd@exp2,w
 17811  03B9  1903               	btfsc	3,2
 17812  03BA  0008               	return
 17813  03BB  084D               	movf	___ftadd@exp1,w
 17814  03BC  024C               	subwf	___ftadd@exp2,w
 17815  03BD  1803               	skipnc
 17816  03BE  2BC7               	goto	l5964
 17817  03BF  034C               	decf	___ftadd@exp2,w
 17818  03C0  3AFF               	xorlw	255
 17819  03C1  074D               	addwf	___ftadd@exp1,w
 17820  03C2  00C7               	movwf	??___ftadd
 17821  03C3  3019               	movlw	25
 17822  03C4  0247               	subwf	??___ftadd,w
 17823  03C5  1803               	btfsc	3,0
 17824  03C6  0008               	return
 17825  03C7                     l5964:	
 17826  03C7  3006               	movlw	6
 17827  03C8  00C7               	movwf	??___ftadd
 17828  03C9  0847               	movf	??___ftadd,w
 17829  03CA  00CB               	movwf	___ftadd@sign
 17830  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17831  03CC  17CB               	bsf	___ftadd@sign,7
 17832  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17833  03CE  174B               	bsf	___ftadd@sign,6
 17834  03CF  17C2               	bsf	___ftadd@f1+1,7
 17835  03D0  30FF               	movlw	255
 17836  03D1  05C1               	andwf	___ftadd@f1,f
 17837  03D2  30FF               	movlw	255
 17838  03D3  05C2               	andwf	___ftadd@f1+1,f
 17839  03D4  3000               	movlw	0
 17840  03D5  05C3               	andwf	___ftadd@f1+2,f
 17841  03D6  17C5               	bsf	___ftadd@f2+1,7
 17842  03D7  30FF               	movlw	255
 17843  03D8  05C4               	andwf	___ftadd@f2,f
 17844  03D9  30FF               	movlw	255
 17845  03DA  05C5               	andwf	___ftadd@f2+1,f
 17846  03DB  3000               	movlw	0
 17847  03DC  05C6               	andwf	___ftadd@f2+2,f
 17848  03DD  084C               	movf	___ftadd@exp2,w
 17849  03DE  024D               	subwf	___ftadd@exp1,w
 17850  03DF  1803               	skipnc
 17851  03E0  2C03               	goto	l5986
 17852  03E1                     l5976:	
 17853  03E1  3001               	movlw	1
 17854  03E2                     u4805:	
 17855  03E2  35C4               	lslf	___ftadd@f2,f
 17856  03E3  0DC5               	rlf	___ftadd@f2+1,f
 17857  03E4  0DC6               	rlf	___ftadd@f2+2,f
 17858  03E5  0B89               	decfsz	9,f
 17859  03E6  2BE2               	goto	u4805
 17860  03E7  3001               	movlw	1
 17861  03E8  02CC               	subwf	___ftadd@exp2,f
 17862  03E9  084C               	movf	___ftadd@exp2,w
 17863  03EA  064D               	xorwf	___ftadd@exp1,w
 17864  03EB  1903               	skipnz
 17865  03EC  2BFE               	goto	l5984
 17866  03ED  3001               	movlw	1
 17867  03EE  02CB               	subwf	___ftadd@sign,f
 17868  03EF  084B               	movf	___ftadd@sign,w
 17869  03F0  3907               	andlw	7
 17870  03F1  1903               	btfsc	3,2
 17871  03F2  2BFE               	goto	l5984
 17872  03F3  2BE1               	goto	l5976
 17873  03F4                     l5982:	
 17874  03F4  3001               	movlw	1
 17875  03F5                     u4835:	
 17876  03F5  36C3               	lsrf	___ftadd@f1+2,f
 17877  03F6  0CC2               	rrf	___ftadd@f1+1,f
 17878  03F7  0CC1               	rrf	___ftadd@f1,f
 17879  03F8  0B89               	decfsz	9,f
 17880  03F9  2BF5               	goto	u4835
 17881  03FA  3001               	movlw	1
 17882  03FB  00C7               	movwf	??___ftadd
 17883  03FC  0847               	movf	??___ftadd,w
 17884  03FD  07CD               	addwf	___ftadd@exp1,f
 17885  03FE                     l5984:	
 17886  03FE  084D               	movf	___ftadd@exp1,w
 17887  03FF  064C               	xorwf	___ftadd@exp2,w
 17888  0400  1903               	btfsc	3,2
 17889  0401  2C28               	goto	l2905
 17890  0402  2BF4               	goto	l5982
 17891  0403                     l5986:	
 17892  0403  084D               	movf	___ftadd@exp1,w
 17893  0404  024C               	subwf	___ftadd@exp2,w
 17894  0405  1803               	skipnc
 17895  0406  2C28               	goto	l2905
 17896  0407                     l5988:	
 17897  0407  3001               	movlw	1
 17898  0408                     u4865:	
 17899  0408  35C1               	lslf	___ftadd@f1,f
 17900  0409  0DC2               	rlf	___ftadd@f1+1,f
 17901  040A  0DC3               	rlf	___ftadd@f1+2,f
 17902  040B  0B89               	decfsz	9,f
 17903  040C  2C08               	goto	u4865
 17904  040D  3001               	movlw	1
 17905  040E  02CD               	subwf	___ftadd@exp1,f
 17906  040F  084C               	movf	___ftadd@exp2,w
 17907  0410  064D               	xorwf	___ftadd@exp1,w
 17908  0411  1903               	skipnz
 17909  0412  2C24               	goto	l5996
 17910  0413  3001               	movlw	1
 17911  0414  02CB               	subwf	___ftadd@sign,f
 17912  0415  084B               	movf	___ftadd@sign,w
 17913  0416  3907               	andlw	7
 17914  0417  1903               	btfsc	3,2
 17915  0418  2C24               	goto	l5996
 17916  0419  2C07               	goto	l5988
 17917  041A                     l5994:	
 17918  041A  3001               	movlw	1
 17919  041B                     u4895:	
 17920  041B  36C6               	lsrf	___ftadd@f2+2,f
 17921  041C  0CC5               	rrf	___ftadd@f2+1,f
 17922  041D  0CC4               	rrf	___ftadd@f2,f
 17923  041E  0B89               	decfsz	9,f
 17924  041F  2C1B               	goto	u4895
 17925  0420  3001               	movlw	1
 17926  0421  00C7               	movwf	??___ftadd
 17927  0422  0847               	movf	??___ftadd,w
 17928  0423  07CC               	addwf	___ftadd@exp2,f
 17929  0424                     l5996:	
 17930  0424  084D               	movf	___ftadd@exp1,w
 17931  0425  064C               	xorwf	___ftadd@exp2,w
 17932  0426  1D03               	skipz
 17933  0427  2C1A               	goto	l5994
 17934  0428                     l2905:	
 17935  0428  1FCB               	btfss	___ftadd@sign,7
 17936  0429  2C3A               	goto	l6000
 17937  042A  30FF               	movlw	255
 17938  042B  06C1               	xorwf	___ftadd@f1,f
 17939  042C  30FF               	movlw	255
 17940  042D  06C2               	xorwf	___ftadd@f1+1,f
 17941  042E  30FF               	movlw	255
 17942  042F  06C3               	xorwf	___ftadd@f1+2,f
 17943  0430  3001               	movlw	1
 17944  0431  07C1               	addwf	___ftadd@f1,f
 17945  0432  3000               	movlw	0
 17946  0433  1803               	skipnc
 17947  0434  3001               	movlw	1
 17948  0435  07C2               	addwf	___ftadd@f1+1,f
 17949  0436  3000               	movlw	0
 17950  0437  1803               	skipnc
 17951  0438  3001               	movlw	1
 17952  0439  07C3               	addwf	___ftadd@f1+2,f
 17953  043A                     l6000:	
 17954  043A  1F4B               	btfss	___ftadd@sign,6
 17955  043B  2C4C               	goto	l6004
 17956  043C  30FF               	movlw	255
 17957  043D  06C4               	xorwf	___ftadd@f2,f
 17958  043E  30FF               	movlw	255
 17959  043F  06C5               	xorwf	___ftadd@f2+1,f
 17960  0440  30FF               	movlw	255
 17961  0441  06C6               	xorwf	___ftadd@f2+2,f
 17962  0442  3001               	movlw	1
 17963  0443  07C4               	addwf	___ftadd@f2,f
 17964  0444  3000               	movlw	0
 17965  0445  1803               	skipnc
 17966  0446  3001               	movlw	1
 17967  0447  07C5               	addwf	___ftadd@f2+1,f
 17968  0448  3000               	movlw	0
 17969  0449  1803               	skipnc
 17970  044A  3001               	movlw	1
 17971  044B  07C6               	addwf	___ftadd@f2+2,f
 17972  044C                     l6004:	
 17973  044C  01CB               	clrf	___ftadd@sign
 17974  044D  0841               	movf	___ftadd@f1,w
 17975  044E  07C4               	addwf	___ftadd@f2,f
 17976  044F  0842               	movf	___ftadd@f1+1,w
 17977  0450  3DC5               	addwfc	___ftadd@f2+1,f
 17978  0451  0843               	movf	___ftadd@f1+2,w
 17979  0452  3DC6               	addwfc	___ftadd@f2+2,f
 17980  0453  1FC6               	btfss	___ftadd@f2+2,7
 17981  0454  2C67               	goto	l6014
 17982  0455  30FF               	movlw	255
 17983  0456  06C4               	xorwf	___ftadd@f2,f
 17984  0457  30FF               	movlw	255
 17985  0458  06C5               	xorwf	___ftadd@f2+1,f
 17986  0459  30FF               	movlw	255
 17987  045A  06C6               	xorwf	___ftadd@f2+2,f
 17988  045B  3001               	movlw	1
 17989  045C  07C4               	addwf	___ftadd@f2,f
 17990  045D  3000               	movlw	0
 17991  045E  1803               	skipnc
 17992  045F  3001               	movlw	1
 17993  0460  07C5               	addwf	___ftadd@f2+1,f
 17994  0461  3000               	movlw	0
 17995  0462  1803               	skipnc
 17996  0463  3001               	movlw	1
 17997  0464  07C6               	addwf	___ftadd@f2+2,f
 17998  0465  01CB               	clrf	___ftadd@sign
 17999  0466  0ACB               	incf	___ftadd@sign,f
 18000  0467                     l6014:	
 18001  0467  0844               	movf	___ftadd@f2,w
 18002  0468  00A0               	movwf	___ftpack@arg
 18003  0469  0845               	movf	___ftadd@f2+1,w
 18004  046A  00A1               	movwf	___ftpack@arg+1
 18005  046B  0846               	movf	___ftadd@f2+2,w
 18006  046C  00A2               	movwf	___ftpack@arg+2
 18007  046D  084D               	movf	___ftadd@exp1,w
 18008  046E  00C7               	movwf	??___ftadd
 18009  046F  0847               	movf	??___ftadd,w
 18010  0470  00A3               	movwf	___ftpack@exp
 18011  0471  084B               	movf	___ftadd@sign,w
 18012  0472  00C8               	movwf	??___ftadd+1
 18013  0473  0848               	movf	??___ftadd+1,w
 18014  0474  00A4               	movwf	___ftpack@sign
 18015  0475  3195  2536         	fcall	___ftpack
 18016  0477  0020               	movlb	0	; select bank0
 18017  0478  0820               	movf	?___ftpack,w
 18018  0479  00C1               	movwf	?___ftadd
 18019  047A  0821               	movf	?___ftpack+1,w
 18020  047B  00C2               	movwf	?___ftadd+1
 18021  047C  0822               	movf	?___ftpack+2,w
 18022  047D  00C3               	movwf	?___ftadd+2
 18023  047E  0008               	return
 18024  047F                     __end_of___ftadd:	
 18025                           
 18026                           	psect	text125
 18027  1F96                     __ptext125:	
 18028 ;; *************** function ___awtoft *****************
 18029 ;; Defined at:
 18030 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18031 ;; Parameters:    Size  Location     Type
 18032 ;;  c               2    8[BANK0 ] int 
 18033 ;; Auto vars:     Size  Location     Type
 18034 ;;  sign            1   13[BANK0 ] unsigned char 
 18035 ;; Return value:  Size  Location     Type
 18036 ;;                  3    8[BANK0 ] float 
 18037 ;; Registers used:
 18038 ;;		wreg, status,2, status,0, pclath, cstack
 18039 ;; Tracked objects:
 18040 ;;		On entry : 0/0
 18041 ;;		On exit  : 0/0
 18042 ;;		Unchanged: 0/0
 18043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18044 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18048 ;;Total ram usage:        6 bytes
 18049 ;; Hardware stack levels used:    1
 18050 ;; Hardware stack levels required when called:    6
 18051 ;; This function calls:
 18052 ;;		___ftpack
 18053 ;; This function is called by:
 18054 ;;		_getDimmerLights_PercentToValue
 18055 ;;		_getDimmerLights_ValueToPercent
 18056 ;; This function uses a non-reentrant model
 18057 ;;
 18058                           
 18059                           
 18060                           ;psect for function ___awtoft
 18061  1F96                     ___awtoft:	
 18062                           
 18063                           ;incstack = 0
 18064                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18065  1F96  0020               	movlb	0	; select bank0
 18066  1F97  01AD               	clrf	___awtoft@sign
 18067  1F98  1FA9               	btfss	___awtoft@c+1,7
 18068  1F99  2FA1               	goto	l5942
 18069  1F9A  09A8               	comf	___awtoft@c,f
 18070  1F9B  09A9               	comf	___awtoft@c+1,f
 18071  1F9C  0AA8               	incf	___awtoft@c,f
 18072  1F9D  1903               	skipnz
 18073  1F9E  0AA9               	incf	___awtoft@c+1,f
 18074  1F9F  01AD               	clrf	___awtoft@sign
 18075  1FA0  0AAD               	incf	___awtoft@sign,f
 18076  1FA1                     l5942:	
 18077  1FA1  0828               	movf	___awtoft@c,w
 18078  1FA2  00A0               	movwf	___ftpack@arg
 18079  1FA3  0829               	movf	___awtoft@c+1,w
 18080  1FA4  00A1               	movwf	___ftpack@arg+1
 18081  1FA5  01A2               	clrf	___ftpack@arg+2
 18082  1FA6  308E               	movlw	142
 18083  1FA7  00AB               	movwf	??___awtoft
 18084  1FA8  082B               	movf	??___awtoft,w
 18085  1FA9  00A3               	movwf	___ftpack@exp
 18086  1FAA  082D               	movf	___awtoft@sign,w
 18087  1FAB  00AC               	movwf	??___awtoft+1
 18088  1FAC  082C               	movf	??___awtoft+1,w
 18089  1FAD  00A4               	movwf	___ftpack@sign
 18090  1FAE  3195  2536         	fcall	___ftpack
 18091  1FB0  0020               	movlb	0	; select bank0
 18092  1FB1  0820               	movf	?___ftpack,w
 18093  1FB2  00A8               	movwf	?___awtoft
 18094  1FB3  0821               	movf	?___ftpack+1,w
 18095  1FB4  00A9               	movwf	?___awtoft+1
 18096  1FB5  0822               	movf	?___ftpack+2,w
 18097  1FB6  00AA               	movwf	?___awtoft+2
 18098  1FB7  0008               	return
 18099  1FB8                     __end_of___awtoft:	
 18100                           
 18101                           	psect	text126
 18102  1536                     __ptext126:	
 18103 ;; *************** function ___ftpack *****************
 18104 ;; Defined at:
 18105 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18106 ;; Parameters:    Size  Location     Type
 18107 ;;  arg             3    0[BANK0 ] unsigned um
 18108 ;;  exp             1    3[BANK0 ] unsigned char 
 18109 ;;  sign            1    4[BANK0 ] unsigned char 
 18110 ;; Auto vars:     Size  Location     Type
 18111 ;;		None
 18112 ;; Return value:  Size  Location     Type
 18113 ;;                  3    0[BANK0 ] float 
 18114 ;; Registers used:
 18115 ;;		wreg, status,2, status,0
 18116 ;; Tracked objects:
 18117 ;;		On entry : 0/0
 18118 ;;		On exit  : 0/0
 18119 ;;		Unchanged: 0/0
 18120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18121 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18123 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18125 ;;Total ram usage:        8 bytes
 18126 ;; Hardware stack levels used:    1
 18127 ;; Hardware stack levels required when called:    5
 18128 ;; This function calls:
 18129 ;;		Nothing
 18130 ;; This function is called by:
 18131 ;;		___awtoft
 18132 ;;		___ftadd
 18133 ;;		___ftdiv
 18134 ;;		___ftmul
 18135 ;; This function uses a non-reentrant model
 18136 ;;
 18137                           
 18138                           
 18139                           ;psect for function ___ftpack
 18140  1536                     ___ftpack:	
 18141                           
 18142                           ;incstack = 0
 18143                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18144  1536  0020               	movlb	0	; select bank0
 18145  1537  0823               	movf	___ftpack@exp,w
 18146  1538  1903               	btfsc	3,2
 18147  1539  2D3F               	goto	l5810
 18148  153A  0822               	movf	___ftpack@arg+2,w
 18149  153B  0421               	iorwf	___ftpack@arg+1,w
 18150  153C  0420               	iorwf	___ftpack@arg,w
 18151  153D  1D03               	skipz
 18152  153E  2D50               	goto	l5816
 18153  153F                     l5810:	
 18154  153F  3000               	movlw	0
 18155  1540  00A0               	movwf	?___ftpack
 18156  1541  3000               	movlw	0
 18157  1542  00A1               	movwf	?___ftpack+1
 18158  1543  3000               	movlw	0
 18159  1544  00A2               	movwf	?___ftpack+2
 18160  1545  0008               	return
 18161  1546                     l5814:	
 18162  1546  3001               	movlw	1
 18163  1547  00A5               	movwf	??___ftpack
 18164  1548  0825               	movf	??___ftpack,w
 18165  1549  07A3               	addwf	___ftpack@exp,f
 18166  154A  3001               	movlw	1
 18167  154B                     u4435:	
 18168  154B  36A2               	lsrf	___ftpack@arg+2,f
 18169  154C  0CA1               	rrf	___ftpack@arg+1,f
 18170  154D  0CA0               	rrf	___ftpack@arg,f
 18171  154E  0B89               	decfsz	9,f
 18172  154F  2D4B               	goto	u4435
 18173  1550                     l5816:	
 18174  1550  30FE               	movlw	254
 18175  1551  0522               	andwf	___ftpack@arg+2,w
 18176  1552  1903               	btfsc	3,2
 18177  1553  2D69               	goto	l2876
 18178  1554  2D46               	goto	l5814
 18179  1555                     l5818:	
 18180  1555  3001               	movlw	1
 18181  1556  00A5               	movwf	??___ftpack
 18182  1557  0825               	movf	??___ftpack,w
 18183  1558  07A3               	addwf	___ftpack@exp,f
 18184  1559  3001               	movlw	1
 18185  155A  07A0               	addwf	___ftpack@arg,f
 18186  155B  3000               	movlw	0
 18187  155C  1803               	skipnc
 18188  155D  3001               	movlw	1
 18189  155E  07A1               	addwf	___ftpack@arg+1,f
 18190  155F  3000               	movlw	0
 18191  1560  1803               	skipnc
 18192  1561  3001               	movlw	1
 18193  1562  07A2               	addwf	___ftpack@arg+2,f
 18194  1563  3001               	movlw	1
 18195  1564                     u4455:	
 18196  1564  36A2               	lsrf	___ftpack@arg+2,f
 18197  1565  0CA1               	rrf	___ftpack@arg+1,f
 18198  1566  0CA0               	rrf	___ftpack@arg,f
 18199  1567  0B89               	decfsz	9,f
 18200  1568  2D64               	goto	u4455
 18201  1569                     l2876:	
 18202  1569  30FF               	movlw	255
 18203  156A  0522               	andwf	___ftpack@arg+2,w
 18204  156B  1903               	btfsc	3,2
 18205  156C  2D76               	goto	l5826
 18206  156D  2D55               	goto	l5818
 18207  156E                     l5824:	
 18208  156E  3001               	movlw	1
 18209  156F  02A3               	subwf	___ftpack@exp,f
 18210  1570  3001               	movlw	1
 18211  1571                     u4475:	
 18212  1571  35A0               	lslf	___ftpack@arg,f
 18213  1572  0DA1               	rlf	___ftpack@arg+1,f
 18214  1573  0DA2               	rlf	___ftpack@arg+2,f
 18215  1574  0B89               	decfsz	9,f
 18216  1575  2D71               	goto	u4475
 18217  1576                     l5826:	
 18218  1576  1FA1               	btfss	___ftpack@arg+1,7
 18219  1577  2D6E               	goto	l5824
 18220  1578  1823               	btfsc	___ftpack@exp,0
 18221  1579  2D80               	goto	l2882
 18222  157A  30FF               	movlw	255
 18223  157B  05A0               	andwf	___ftpack@arg,f
 18224  157C  307F               	movlw	127
 18225  157D  05A1               	andwf	___ftpack@arg+1,f
 18226  157E  30FF               	movlw	255
 18227  157F  05A2               	andwf	___ftpack@arg+2,f
 18228  1580                     l2882:	
 18229  1580  1003               	clrc
 18230  1581  0CA3               	rrf	___ftpack@exp,f
 18231  1582  0823               	movf	___ftpack@exp,w
 18232  1583  00A5               	movwf	??___ftpack
 18233  1584  01A6               	clrf	??___ftpack+1
 18234  1585  01A7               	clrf	??___ftpack+2
 18235  1586  3010               	movlw	16
 18236  1587                     u4505:	
 18237  1587  35A5               	lslf	??___ftpack,f
 18238  1588  0DA6               	rlf	??___ftpack+1,f
 18239  1589  0DA7               	rlf	??___ftpack+2,f
 18240  158A  0B89               	decfsz	9,f
 18241  158B  2D87               	goto	u4505
 18242  158C  0825               	movf	??___ftpack,w
 18243  158D  04A0               	iorwf	___ftpack@arg,f
 18244  158E  0826               	movf	??___ftpack+1,w
 18245  158F  04A1               	iorwf	___ftpack@arg+1,f
 18246  1590  0827               	movf	??___ftpack+2,w
 18247  1591  04A2               	iorwf	___ftpack@arg+2,f
 18248  1592  0824               	movf	___ftpack@sign,w
 18249  1593  1903               	btfsc	3,2
 18250  1594  0008               	return
 18251  1595  17A2               	bsf	___ftpack@arg+2,7
 18252  1596  0008               	return
 18253  1597                     __end_of___ftpack:	
 18254                           
 18255                           	psect	text127
 18256  1B7B                     __ptext127:	
 18257 ;; *************** function _Division *****************
 18258 ;; Defined at:
 18259 ;;		line 1393 in file "../src/Dimmer_B1.c"
 18260 ;; Parameters:    Size  Location     Type
 18261 ;;  value           1    wreg     unsigned char 
 18262 ;;  num             1    5[BANK0 ] unsigned char 
 18263 ;; Auto vars:     Size  Location     Type
 18264 ;;  value           1    8[BANK0 ] unsigned char 
 18265 ;;  result          1    9[BANK0 ] unsigned char 
 18266 ;; Return value:  Size  Location     Type
 18267 ;;                  1    wreg      unsigned char 
 18268 ;; Registers used:
 18269 ;;		wreg, status,2, status,0, pclath, cstack
 18270 ;; Tracked objects:
 18271 ;;		On entry : 0/0
 18272 ;;		On exit  : 0/0
 18273 ;;		Unchanged: 0/0
 18274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18275 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;Total ram usage:        5 bytes
 18280 ;; Hardware stack levels used:    1
 18281 ;; Hardware stack levels required when called:    6
 18282 ;; This function calls:
 18283 ;;		___lbdiv
 18284 ;; This function is called by:
 18285 ;;		_DimmerIntr_Initialization
 18286 ;; This function uses a non-reentrant model
 18287 ;;
 18288                           
 18289                           
 18290                           ;psect for function _Division
 18291  1B7B                     _Division:	
 18292                           
 18293                           ;incstack = 0
 18294                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18295                           ;Division@value stored from wreg
 18296  1B7B  0020               	movlb	0	; select bank0
 18297  1B7C  00A8               	movwf	Division@value
 18298                           
 18299                           ;Dimmer_B1.c: 1394: char result = (char) (value / num);
 18300  1B7D  0825               	movf	Division@num,w
 18301  1B7E  00A6               	movwf	??_Division
 18302  1B7F  0826               	movf	??_Division,w
 18303  1B80  00A0               	movwf	___lbdiv@divisor
 18304  1B81  0828               	movf	Division@value,w
 18305  1B82  319F  2774         	fcall	___lbdiv
 18306  1B84  0020               	movlb	0	; select bank0
 18307  1B85  00A7               	movwf	??_Division+1
 18308  1B86  0827               	movf	??_Division+1,w
 18309  1B87  00A9               	movwf	Division@result
 18310                           
 18311                           ;Dimmer_B1.c: 1395: return result;
 18312  1B88  0829               	movf	Division@result,w
 18313  1B89  0008               	return
 18314  1B8A                     __end_of_Division:	
 18315                           
 18316                           	psect	text128
 18317  1F74                     __ptext128:	
 18318 ;; *************** function ___lbdiv *****************
 18319 ;; Defined at:
 18320 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18321 ;; Parameters:    Size  Location     Type
 18322 ;;  dividend        1    wreg     unsigned char 
 18323 ;;  divisor         1    0[BANK0 ] unsigned char 
 18324 ;; Auto vars:     Size  Location     Type
 18325 ;;  dividend        1    2[BANK0 ] unsigned char 
 18326 ;;  quotient        1    4[BANK0 ] unsigned char 
 18327 ;;  counter         1    3[BANK0 ] unsigned char 
 18328 ;; Return value:  Size  Location     Type
 18329 ;;                  1    wreg      unsigned char 
 18330 ;; Registers used:
 18331 ;;		wreg, status,2, status,0
 18332 ;; Tracked objects:
 18333 ;;		On entry : 0/0
 18334 ;;		On exit  : 0/0
 18335 ;;		Unchanged: 0/0
 18336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18337 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18341 ;;Total ram usage:        5 bytes
 18342 ;; Hardware stack levels used:    1
 18343 ;; Hardware stack levels required when called:    5
 18344 ;; This function calls:
 18345 ;;		Nothing
 18346 ;; This function is called by:
 18347 ;;		_Division
 18348 ;; This function uses a non-reentrant model
 18349 ;;
 18350                           
 18351                           
 18352                           ;psect for function ___lbdiv
 18353  1F74                     ___lbdiv:	
 18354                           
 18355                           ;incstack = 0
 18356                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18357                           ;___lbdiv@dividend stored from wreg
 18358  1F74  0020               	movlb	0	; select bank0
 18359  1F75  00A2               	movwf	___lbdiv@dividend
 18360  1F76  01A4               	clrf	___lbdiv@quotient
 18361  1F77  0820               	movf	___lbdiv@divisor,w
 18362  1F78  1903               	btfsc	3,2
 18363  1F79  2F94               	goto	l6770
 18364  1F7A  01A3               	clrf	___lbdiv@counter
 18365  1F7B  0AA3               	incf	___lbdiv@counter,f
 18366  1F7C                     l6758:	
 18367  1F7C  1BA0               	btfsc	___lbdiv@divisor,7
 18368  1F7D  2F85               	goto	l6760
 18369  1F7E  1003               	clrc
 18370  1F7F  0DA0               	rlf	___lbdiv@divisor,f
 18371  1F80  3001               	movlw	1
 18372  1F81  00A1               	movwf	??___lbdiv
 18373  1F82  0821               	movf	??___lbdiv,w
 18374  1F83  07A3               	addwf	___lbdiv@counter,f
 18375  1F84  2F7C               	goto	l6758
 18376  1F85                     l6760:	
 18377  1F85  1003               	clrc
 18378  1F86  0DA4               	rlf	___lbdiv@quotient,f
 18379  1F87  0820               	movf	___lbdiv@divisor,w
 18380  1F88  0222               	subwf	___lbdiv@dividend,w
 18381  1F89  1C03               	skipc
 18382  1F8A  2F8F               	goto	L10
 18383  1F8B  0820               	movf	___lbdiv@divisor,w
 18384  1F8C  02A2               	subwf	___lbdiv@dividend,f
 18385  1F8D  1424               	bsf	___lbdiv@quotient,0
 18386  1F8E  1003               	clrc
 18387  1F8F                     L10:	
 18388  1F8F  0CA0               	rrf	___lbdiv@divisor,f
 18389  1F90  3001               	movlw	1
 18390  1F91  02A3               	subwf	___lbdiv@counter,f
 18391  1F92  1D03               	btfss	3,2
 18392  1F93  2F85               	goto	l6760
 18393  1F94                     l6770:	
 18394  1F94  0824               	movf	___lbdiv@quotient,w
 18395  1F95  0008               	return
 18396  1F96                     __end_of___lbdiv:	
 18397                           
 18398                           	psect	text129
 18399  1A27                     __ptext129:	
 18400 ;; *************** function _DelayOff_Main *****************
 18401 ;; Defined at:
 18402 ;;		line 41 in file "../src/DelayOff_B1.c"
 18403 ;; Parameters:    Size  Location     Type
 18404 ;;		None
 18405 ;; Auto vars:     Size  Location     Type
 18406 ;;		None
 18407 ;; Return value:  Size  Location     Type
 18408 ;;		None               void
 18409 ;; Registers used:
 18410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18411 ;; Tracked objects:
 18412 ;;		On entry : 0/0
 18413 ;;		On exit  : 0/0
 18414 ;;		Unchanged: 0/0
 18415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18420 ;;Total ram usage:        0 bytes
 18421 ;; Hardware stack levels used:    1
 18422 ;; Hardware stack levels required when called:    9
 18423 ;; This function calls:
 18424 ;;		_DlyOff_Main
 18425 ;; This function is called by:
 18426 ;;		_main
 18427 ;; This function uses a non-reentrant model
 18428 ;;
 18429                           
 18430                           
 18431                           ;psect for function _DelayOff_Main
 18432  1A27                     _DelayOff_Main:	
 18433                           
 18434                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18435                           
 18436                           ;incstack = 0
 18437                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18438  1A27  3001               	movlw	1
 18439  1A28  3188  20B2         	fcall	_DlyOff_Main
 18440  1A2A  0008               	return
 18441  1A2B                     __end_of_DelayOff_Main:	
 18442                           
 18443                           	psect	text130
 18444  08B2                     __ptext130:	
 18445 ;; *************** function _DlyOff_Main *****************
 18446 ;; Defined at:
 18447 ;;		line 61 in file "../src/DelayOff_B1.c"
 18448 ;; Parameters:    Size  Location     Type
 18449 ;;  sw              1    wreg     unsigned char 
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;  sw              1   71[BANK0 ] unsigned char 
 18452 ;; Return value:  Size  Location     Type
 18453 ;;		None               void
 18454 ;; Registers used:
 18455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18456 ;; Tracked objects:
 18457 ;;		On entry : 0/0
 18458 ;;		On exit  : 0/0
 18459 ;;		Unchanged: 0/0
 18460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18464 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18465 ;;Total ram usage:        3 bytes
 18466 ;; Hardware stack levels used:    1
 18467 ;; Hardware stack levels required when called:    8
 18468 ;; This function calls:
 18469 ;;		_DelayOffPointSelect
 18470 ;;		_getDimmerLights_Status
 18471 ;;		_setDimmerLights_SwOff
 18472 ;;		_setDimmerLights_SwOn
 18473 ;;		_setProductData
 18474 ;; This function is called by:
 18475 ;;		_DelayOff_Main
 18476 ;; This function uses a non-reentrant model
 18477 ;;
 18478                           
 18479                           
 18480                           ;psect for function _DlyOff_Main
 18481  08B2                     _DlyOff_Main:	
 18482                           
 18483                           ;incstack = 0
 18484                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18485                           ;DlyOff_Main@sw stored from wreg
 18486  08B2  0020               	movlb	0	; select bank0
 18487  08B3  00E7               	movwf	DlyOff_Main@sw
 18488                           
 18489                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18490  08B4  0867               	movf	DlyOff_Main@sw,w
 18491  08B5  319A  22DE  3188   	fcall	_DelayOffPointSelect
 18492                           
 18493                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18494  08B8  0021               	movlb	1	; select bank1
 18495  08B9  084A               	movf	_DelayOff^(0+128),w
 18496  08BA  0086               	movwf	6
 18497  08BB  3001               	movlw	1	; select bank2/3
 18498  08BC  0087               	movwf	7
 18499  08BD  1C81               	btfss	1,1
 18500  08BE  0008               	return
 18501                           
 18502                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18503  08BF  084A               	movf	_DelayOff^(0+128),w
 18504  08C0  3E02               	addlw	2
 18505  08C1  0086               	movwf	6
 18506  08C2  3001               	movlw	1	; select bank2/3
 18507  08C3  0087               	movwf	7
 18508  08C4  3001               	movlw	1
 18509  08C5  0781               	addwf	1,f
 18510  08C6  3141               	addfsr 1,1
 18511  08C7  1803               	skipnc
 18512  08C8  0A81               	incf	1,f
 18513                           
 18514                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18515  08C9  084A               	movf	_DelayOff^(0+128),w
 18516  08CA  3E02               	addlw	2
 18517  08CB  0086               	movwf	6
 18518  08CC  3001               	movlw	1	; select bank2/3
 18519  08CD  0087               	movwf	7
 18520  08CE  3F40               	moviw [0]fsr1
 18521  08CF  0020               	movlb	0	; select bank0
 18522  08D0  00E5               	movwf	??_DlyOff_Main
 18523  08D1  3F41               	moviw [1]fsr1
 18524  08D2  00E6               	movwf	??_DlyOff_Main+1
 18525  08D3  300B               	movlw	11
 18526  08D4  0266               	subwf	??_DlyOff_Main+1,w
 18527  08D5  30B8               	movlw	184
 18528  08D6  1903               	skipnz
 18529  08D7  0265               	subwf	??_DlyOff_Main,w
 18530  08D8  1C03               	skipc
 18531  08D9  0008               	return
 18532                           
 18533                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18534  08DA  0021               	movlb	1	; select bank1
 18535  08DB  084A               	movf	_DelayOff^(0+128),w
 18536  08DC  3E02               	addlw	2
 18537  08DD  0086               	movwf	6
 18538  08DE  3001               	movlw	1	; select bank2/3
 18539  08DF  0087               	movwf	7
 18540  08E0  3000               	movlw	0
 18541  08E1  3FC0               	movwi [0]fsr1
 18542  08E2  3FC1               	movwi [1]fsr1
 18543                           
 18544                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18545  08E3  3001               	movlw	1
 18546  08E4  0020               	movlb	0	; select bank0
 18547  08E5  00E5               	movwf	??_DlyOff_Main
 18548  08E6  0021               	movlb	1	; select bank1
 18549  08E7  084A               	movf	_DelayOff^(0+128),w
 18550  08E8  3E04               	addlw	4
 18551  08E9  0086               	movwf	6
 18552  08EA  3001               	movlw	1	; select bank2/3
 18553  08EB  0087               	movwf	7
 18554  08EC  0020               	movlb	0	; select bank0
 18555  08ED  0865               	movf	??_DlyOff_Main,w
 18556  08EE  0781               	addwf	1,f
 18557                           
 18558                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18559  08EF  0021               	movlb	1	; select bank1
 18560  08F0  084A               	movf	_DelayOff^(0+128),w
 18561  08F1  3E04               	addlw	4
 18562  08F2  0086               	movwf	6
 18563  08F3  3001               	movlw	1	; select bank2/3
 18564  08F4  0087               	movwf	7
 18565  08F5  0A4A               	incf	_DelayOff^(0+128),w
 18566  08F6  0084               	movwf	4
 18567  08F7  3001               	movlw	1	; select bank2/3
 18568  08F8  0085               	movwf	5
 18569  08F9  0800               	movf	0,w
 18570  08FA  0201               	subwf	1,w
 18571  08FB  1C03               	skipc
 18572  08FC  0008               	return
 18573                           
 18574                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18575  08FD  084A               	movf	_DelayOff^(0+128),w
 18576  08FE  3E04               	addlw	4
 18577  08FF  0086               	movwf	6
 18578  0900  3001               	movlw	1	; select bank2/3
 18579  0901  0087               	movwf	7
 18580  0902  0181               	clrf	1
 18581                           
 18582                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18583  0903  084A               	movf	_DelayOff^(0+128),w
 18584  0904  0086               	movwf	6
 18585  0905  3001               	movlw	1	; select bank2/3
 18586  0906  0087               	movwf	7
 18587  0907  1081               	bcf	1,1
 18588                           
 18589                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18590  0908  0020               	movlb	0	; select bank0
 18591  0909  0867               	movf	DlyOff_Main@sw,w
 18592  090A  319B  23B8  3188   	fcall	_getDimmerLights_Status
 18593  090D  3A01               	xorlw	1
 18594  090E  1D03               	skipz
 18595  090F  291A               	goto	l531
 18596                           
 18597                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18598  0910  0020               	movlb	0	; select bank0
 18599  0911  0867               	movf	DlyOff_Main@sw,w
 18600  0912  3193  232F  3188   	fcall	_setDimmerLights_SwOn
 18601                           
 18602                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18603  0915  0020               	movlb	0	; select bank0
 18604  0916  0867               	movf	DlyOff_Main@sw,w
 18605  0917  3191  21B2  3188   	fcall	_setDimmerLights_SwOff
 18606  091A                     l531:	
 18607                           
 18608                           ;DelayOff_B1.c: 78: }
 18609                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18610  091A  0020               	movlb	0	; select bank0
 18611  091B  01E2               	clrf	setProductData@value
 18612  091C  0867               	movf	DlyOff_Main@sw,w
 18613  091D  3E1A               	addlw	26
 18614  091E  319A  22F6         	fcall	_setProductData
 18615  0920  0008               	return
 18616  0921                     __end_of_DlyOff_Main:	
 18617                           
 18618                           	psect	text131
 18619  1AF6                     __ptext131:	
 18620 ;; *************** function _setProductData *****************
 18621 ;; Defined at:
 18622 ;;		line 645 in file "../src/Main_B1.c"
 18623 ;; Parameters:    Size  Location     Type
 18624 ;;  address         1    wreg     unsigned char 
 18625 ;;  value           1   66[BANK0 ] unsigned char 
 18626 ;; Auto vars:     Size  Location     Type
 18627 ;;  address         1   68[BANK0 ] unsigned char 
 18628 ;; Return value:  Size  Location     Type
 18629 ;;		None               void
 18630 ;; Registers used:
 18631 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18632 ;; Tracked objects:
 18633 ;;		On entry : 0/0
 18634 ;;		On exit  : 0/0
 18635 ;;		Unchanged: 0/0
 18636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18637 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;Total ram usage:        3 bytes
 18642 ;; Hardware stack levels used:    1
 18643 ;; Hardware stack levels required when called:    5
 18644 ;; This function calls:
 18645 ;;		Nothing
 18646 ;; This function is called by:
 18647 ;;		_DlyOff_Main
 18648 ;;		_setDelayOff_GO
 18649 ;;		_setDimmerLights_OnOff
 18650 ;;		_setDimmerLights_Dimming
 18651 ;;		_setTemp_Main
 18652 ;;		_setLog_Code
 18653 ;;		_setControl_Lights_Table
 18654 ;;		_setRFSW_AdjControl
 18655 ;;		_setRF_DimmerLights
 18656 ;; This function uses a non-reentrant model
 18657 ;;
 18658                           
 18659                           
 18660                           ;psect for function _setProductData
 18661  1AF6                     _setProductData:	
 18662                           
 18663                           ;incstack = 0
 18664                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18665                           ;setProductData@address stored from wreg
 18666  1AF6  0020               	movlb	0	; select bank0
 18667  1AF7  00E4               	movwf	setProductData@address
 18668                           
 18669                           ;Main_B1.c: 646: _product.Data[address] = value;
 18670  1AF8  0862               	movf	setProductData@value,w
 18671  1AF9  00E3               	movwf	??_setProductData
 18672  1AFA  0864               	movf	setProductData@address,w
 18673  1AFB  3ECC               	addlw	__product& (0+255)
 18674  1AFC  0086               	movwf	6
 18675  1AFD  3001               	movlw	1	; select bank3/4
 18676  1AFE  0087               	movwf	7
 18677  1AFF  0863               	movf	??_setProductData,w
 18678  1B00  0081               	movwf	1
 18679  1B01  0008               	return
 18680  1B02                     __end_of_setProductData:	
 18681                           
 18682                           	psect	text132
 18683  132F                     __ptext132:	
 18684 ;; *************** function _setDimmerLights_SwOn *****************
 18685 ;; Defined at:
 18686 ;;		line 697 in file "../src/Dimmer_B1.c"
 18687 ;; Parameters:    Size  Location     Type
 18688 ;;  sw              1    wreg     unsigned char 
 18689 ;; Auto vars:     Size  Location     Type
 18690 ;;  sw              1   13[BANK0 ] unsigned char 
 18691 ;;  rfDimming       1   15[BANK0 ] unsigned char 
 18692 ;;  idle            1   14[BANK0 ] unsigned char 
 18693 ;; Return value:  Size  Location     Type
 18694 ;;		None               void
 18695 ;; Registers used:
 18696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18697 ;; Tracked objects:
 18698 ;;		On entry : 0/0
 18699 ;;		On exit  : 0/0
 18700 ;;		Unchanged: 0/0
 18701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18703 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18706 ;;Total ram usage:        3 bytes
 18707 ;; Hardware stack levels used:    1
 18708 ;; Hardware stack levels required when called:    7
 18709 ;; This function calls:
 18710 ;;		_DimmerLights_SelectPointer
 18711 ;;		_setBuz
 18712 ;; This function is called by:
 18713 ;;		_DlyOff_Main
 18714 ;;		_setControl_Lights_Table
 18715 ;;		_setRFSW_Control
 18716 ;;		_setRFSW_AdjControl
 18717 ;;		_setSw_Main
 18718 ;; This function uses a non-reentrant model
 18719 ;;
 18720                           
 18721                           
 18722                           ;psect for function _setDimmerLights_SwOn
 18723  132F                     _setDimmerLights_SwOn:	
 18724                           
 18725                           ;incstack = 0
 18726                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18727                           ;setDimmerLights_SwOn@sw stored from wreg
 18728  132F  0020               	movlb	0	; select bank0
 18729  1330  00AD               	movwf	setDimmerLights_SwOn@sw
 18730                           
 18731                           ;Dimmer_B1.c: 698: char idle = 0;
 18732  1331  01AE               	clrf	setDimmerLights_SwOn@idle
 18733                           
 18734                           ;Dimmer_B1.c: 699: char rfDimming = 0;
 18735  1332  01AF               	clrf	setDimmerLights_SwOn@rfDimming
 18736                           
 18737                           ;Dimmer_B1.c: 700: rfDimming = RF1.flagDimming == 1 ? 1 : 0;
 18738  1333  3000               	movlw	0
 18739  1334  0021               	movlb	1	; select bank1
 18740  1335  1822               	btfsc	(_RF1^(0+128)+2),0
 18741  1336  3001               	movlw	1
 18742  1337  0020               	movlb	0	; select bank0
 18743  1338  00AF               	movwf	setDimmerLights_SwOn@rfDimming
 18744                           
 18745                           ;Dimmer_B1.c: 725: DimmerLights_SelectPointer(sw);
 18746  1339  082D               	movf	setDimmerLights_SwOn@sw,w
 18747  133A  319A  22EA  3193   	fcall	_DimmerLights_SelectPointer
 18748                           
 18749                           ;Dimmer_B1.c: 726: if (idle == 0) {
 18750  133D  0020               	movlb	0	; select bank0
 18751  133E  08AE               	movf	setDimmerLights_SwOn@idle,f
 18752  133F  1D03               	skipz
 18753  1340  0008               	return
 18754                           
 18755                           ;Dimmer_B1.c: 728: if (rfDimming == 0) {
 18756  1341  08AF               	movf	setDimmerLights_SwOn@rfDimming,f
 18757  1342  1D03               	skipz
 18758  1343  2B6E               	goto	l740
 18759                           
 18760                           ;Dimmer_B1.c: 729: DimmerLights->SwFlag = 1;
 18761  1344  0021               	movlb	1	; select bank1
 18762  1345  084C               	movf	_DimmerLights^(0+128),w
 18763  1346  0086               	movwf	6
 18764  1347  3001               	movlw	1	; select bank2/3
 18765  1348  0087               	movwf	7
 18766  1349  1401               	bsf	1,0
 18767                           
 18768                           ;Dimmer_B1.c: 730: if (DimmerLights->Status == 0) {
 18769  134A  0A4C               	incf	_DimmerLights^(0+128),w
 18770  134B  0086               	movwf	6
 18771  134C  3001               	movlw	1	; select bank2/3
 18772  134D  0087               	movwf	7
 18773  134E  1801               	btfsc	1,0
 18774  134F  2B60               	goto	l6210
 18775                           
 18776                           ;Dimmer_B1.c: 731: DimmerLights->Status = 1;
 18777  1350  0A4C               	incf	_DimmerLights^(0+128),w
 18778  1351  0086               	movwf	6
 18779  1352  3001               	movlw	1	; select bank2/3
 18780  1353  0087               	movwf	7
 18781  1354  1401               	bsf	1,0
 18782                           
 18783                           ;Dimmer_B1.c: 732: DimmerLights->Trigger = 1;
 18784  1355  084C               	movf	_DimmerLights^(0+128),w
 18785  1356  0086               	movwf	6
 18786  1357  3001               	movlw	1	; select bank2/3
 18787  1358  0087               	movwf	7
 18788  1359  1481               	bsf	1,1
 18789                           
 18790                           ;Dimmer_B1.c: 733: DimmerLights->Switch = 1;
 18791  135A  084C               	movf	_DimmerLights^(0+128),w
 18792  135B  0086               	movwf	6
 18793  135C  3001               	movlw	1	; select bank2/3
 18794  135D  0087               	movwf	7
 18795  135E  1501               	bsf	1,2
 18796                           
 18797                           ;Dimmer_B1.c: 734: } else {
 18798  135F  2B65               	goto	l6212
 18799  1360                     l6210:	
 18800                           
 18801                           ;Dimmer_B1.c: 735: DimmerLights->Status = 0;
 18802  1360  0A4C               	incf	_DimmerLights^(0+128),w
 18803  1361  0086               	movwf	6
 18804  1362  3001               	movlw	1	; select bank2/3
 18805  1363  0087               	movwf	7
 18806  1364  1001               	bcf	1,0
 18807  1365                     l6212:	
 18808                           
 18809                           ;Dimmer_B1.c: 736: }
 18810                           ;Dimmer_B1.c: 737: setBuz(1, 100);
 18811  1365  3064               	movlw	100
 18812  1366  0020               	movlb	0	; select bank0
 18813  1367  00A9               	movwf	setBuz@time
 18814  1368  3000               	movlw	0
 18815  1369  00AA               	movwf	setBuz@time+1
 18816  136A  3001               	movlw	1
 18817  136B  3194  2425         	fcall	_setBuz
 18818                           
 18819                           ;Dimmer_B1.c: 738: } else {
 18820  136D  0008               	return
 18821  136E                     l740:	
 18822                           
 18823                           ;Dimmer_B1.c: 739: RF1.flagDimming = 0;
 18824  136E  0021               	movlb	1	; select bank1
 18825  136F  1022               	bcf	(_RF1^(0+128)+2),0
 18826                           
 18827                           ;Dimmer_B1.c: 740: DimmerLights->Trigger = 1;
 18828  1370  084C               	movf	_DimmerLights^(0+128),w
 18829  1371  0086               	movwf	6
 18830  1372  3001               	movlw	1	; select bank2/3
 18831  1373  0087               	movwf	7
 18832  1374  1481               	bsf	1,1
 18833                           
 18834                           ;Dimmer_B1.c: 741: DimmerLights->Switch = 0;
 18835  1375  084C               	movf	_DimmerLights^(0+128),w
 18836  1376  0086               	movwf	6
 18837  1377  3001               	movlw	1	; select bank2/3
 18838  1378  0087               	movwf	7
 18839  1379  1101               	bcf	1,2
 18840  137A  0008               	return
 18841  137B                     __end_of_setDimmerLights_SwOn:	
 18842                           
 18843                           	psect	text133
 18844  1425                     __ptext133:	
 18845 ;; *************** function _setBuz *****************
 18846 ;; Defined at:
 18847 ;;		line 22 in file "../src/Buzzer_B1.c"
 18848 ;; Parameters:    Size  Location     Type
 18849 ;;  count           1    wreg     unsigned char 
 18850 ;;  time            2    9[BANK0 ] int 
 18851 ;; Auto vars:     Size  Location     Type
 18852 ;;  count           1   12[BANK0 ] unsigned char 
 18853 ;; Return value:  Size  Location     Type
 18854 ;;		None               void
 18855 ;; Registers used:
 18856 ;;		wreg, status,2, status,0, pclath, cstack
 18857 ;; Tracked objects:
 18858 ;;		On entry : 0/0
 18859 ;;		On exit  : 0/0
 18860 ;;		Unchanged: 0/0
 18861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18865 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18866 ;;Total ram usage:        4 bytes
 18867 ;; Hardware stack levels used:    1
 18868 ;; Hardware stack levels required when called:    6
 18869 ;; This function calls:
 18870 ;;		___awdiv
 18871 ;; This function is called by:
 18872 ;;		_setDimmerLights_SwOn
 18873 ;;		_setDimmerLights_Dimming
 18874 ;;		_my_MainTimer
 18875 ;;		_Exception_Main
 18876 ;;		_setTemp_Main
 18877 ;;		_setLog_Code
 18878 ;;		_setRFSW_Control
 18879 ;;		_setSw_Main
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           
 18884                           ;psect for function _setBuz
 18885  1425                     _setBuz:	
 18886                           
 18887                           ;incstack = 0
 18888                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18889                           ;setBuz@count stored from wreg
 18890  1425  0020               	movlb	0	; select bank0
 18891  1426  00AC               	movwf	setBuz@count
 18892                           
 18893                           ;Buzzer_B1.c: 23: time /= 20;
 18894  1427  3014               	movlw	20
 18895  1428  00A0               	movwf	___awdiv@divisor
 18896  1429  3000               	movlw	0
 18897  142A  00A1               	movwf	___awdiv@divisor+1
 18898  142B  082A               	movf	setBuz@time+1,w
 18899  142C  01A3               	clrf	___awdiv@dividend+1
 18900  142D  07A3               	addwf	___awdiv@dividend+1,f
 18901  142E  0829               	movf	setBuz@time,w
 18902  142F  01A2               	clrf	___awdiv@dividend
 18903  1430  07A2               	addwf	___awdiv@dividend,f
 18904  1431  3193  237B  3194   	fcall	___awdiv
 18905  1434  0020               	movlb	0	; select bank0
 18906  1435  0821               	movf	?___awdiv+1,w
 18907  1436  01AA               	clrf	setBuz@time+1
 18908  1437  07AA               	addwf	setBuz@time+1,f
 18909  1438  0820               	movf	?___awdiv,w
 18910  1439  01A9               	clrf	setBuz@time
 18911  143A  07A9               	addwf	setBuz@time,f
 18912                           
 18913                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18914  143B  0022               	movlb	2	; select bank2
 18915  143C  1C20               	btfss	_Buz1^(0+256),0
 18916  143D  0008               	return
 18917                           
 18918                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18919  143E  18A0               	btfsc	_Buz1^(0+256),1
 18920  143F  2C56               	goto	l86
 18921                           
 18922                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18923  1440  14A0               	bsf	_Buz1^(0+256),1
 18924                           
 18925                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18926  1441  01A1               	clrf	(_Buz1^(0+256)+1)
 18927  1442  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18928                           
 18929                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18930  1443  0020               	movlb	0	; select bank0
 18931  1444  082C               	movf	setBuz@count,w
 18932  1445  00AB               	movwf	??_setBuz
 18933  1446  082B               	movf	??_setBuz,w
 18934  1447  0022               	movlb	2	; select bank2
 18935  1448  00A3               	movwf	(_Buz1^(0+256)+3)
 18936                           
 18937                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18938  1449  0020               	movlb	0	; select bank0
 18939  144A  082A               	movf	setBuz@time+1,w
 18940  144B  0022               	movlb	2	; select bank2
 18941  144C  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18942  144D  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18943  144E  0020               	movlb	0	; select bank0
 18944  144F  0829               	movf	setBuz@time,w
 18945  1450  0022               	movlb	2	; select bank2
 18946  1451  01A6               	clrf	(_Buz1^(0+256)+6)
 18947  1452  07A6               	addwf	(_Buz1^(0+256)+6),f
 18948                           
 18949                           ;Buzzer_B1.c: 30: RB3 = 1;
 18950  1453  0020               	movlb	0	; select bank0
 18951  1454  158D               	bsf	13,3	;volatile
 18952                           
 18953                           ;Buzzer_B1.c: 31: } else {
 18954  1455  0008               	return
 18955  1456                     l86:	
 18956                           
 18957                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18958  1456  19A0               	btfsc	_Buz1^(0+256),3
 18959  1457  2C6A               	goto	l88
 18960                           
 18961                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18962  1458  15A0               	bsf	_Buz1^(0+256),3
 18963                           
 18964                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18965  1459  0020               	movlb	0	; select bank0
 18966  145A  082C               	movf	setBuz@count,w
 18967  145B  00AB               	movwf	??_setBuz
 18968  145C  082B               	movf	??_setBuz,w
 18969  145D  0022               	movlb	2	; select bank2
 18970  145E  00A4               	movwf	(_Buz1^(0+256)+4)
 18971                           
 18972                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18973  145F  0020               	movlb	0	; select bank0
 18974  1460  082A               	movf	setBuz@time+1,w
 18975  1461  0022               	movlb	2	; select bank2
 18976  1462  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18977  1463  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18978  1464  0020               	movlb	0	; select bank0
 18979  1465  0829               	movf	setBuz@time,w
 18980  1466  0022               	movlb	2	; select bank2
 18981  1467  01A8               	clrf	(_Buz1^(0+256)+8)
 18982  1468  07A8               	addwf	(_Buz1^(0+256)+8),f
 18983                           
 18984                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18985  1469  0008               	return
 18986  146A                     l88:	
 18987  146A  1A20               	btfsc	_Buz1^(0+256),4
 18988  146B  0008               	return
 18989                           
 18990                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18991  146C  1620               	bsf	_Buz1^(0+256),4
 18992                           
 18993                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18994  146D  0020               	movlb	0	; select bank0
 18995  146E  082C               	movf	setBuz@count,w
 18996  146F  00AB               	movwf	??_setBuz
 18997  1470  082B               	movf	??_setBuz,w
 18998  1471  0022               	movlb	2	; select bank2
 18999  1472  00A5               	movwf	(_Buz1^(0+256)+5)
 19000                           
 19001                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19002  1473  0020               	movlb	0	; select bank0
 19003  1474  082A               	movf	setBuz@time+1,w
 19004  1475  0022               	movlb	2	; select bank2
 19005  1476  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19006  1477  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19007  1478  0020               	movlb	0	; select bank0
 19008  1479  0829               	movf	setBuz@time,w
 19009  147A  0022               	movlb	2	; select bank2
 19010  147B  01AA               	clrf	(_Buz1^(0+256)+10)
 19011  147C  07AA               	addwf	(_Buz1^(0+256)+10),f
 19012  147D  0008               	return
 19013  147E                     __end_of_setBuz:	
 19014                           
 19015                           	psect	text134
 19016  137B                     __ptext134:	
 19017 ;; *************** function ___awdiv *****************
 19018 ;; Defined at:
 19019 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;  divisor         2    0[BANK0 ] int 
 19022 ;;  dividend        2    2[BANK0 ] int 
 19023 ;; Auto vars:     Size  Location     Type
 19024 ;;  quotient        2    7[BANK0 ] int 
 19025 ;;  sign            1    6[BANK0 ] unsigned char 
 19026 ;;  counter         1    5[BANK0 ] unsigned char 
 19027 ;; Return value:  Size  Location     Type
 19028 ;;                  2    0[BANK0 ] int 
 19029 ;; Registers used:
 19030 ;;		wreg, status,2, status,0
 19031 ;; Tracked objects:
 19032 ;;		On entry : 0/0
 19033 ;;		On exit  : 0/0
 19034 ;;		Unchanged: 0/0
 19035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19036 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19037 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19039 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19040 ;;Total ram usage:        9 bytes
 19041 ;; Hardware stack levels used:    1
 19042 ;; Hardware stack levels required when called:    5
 19043 ;; This function calls:
 19044 ;;		Nothing
 19045 ;; This function is called by:
 19046 ;;		_setBuz
 19047 ;; This function uses a non-reentrant model
 19048 ;;
 19049                           
 19050                           
 19051                           ;psect for function ___awdiv
 19052  137B                     ___awdiv:	
 19053                           
 19054                           ;incstack = 0
 19055                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19056  137B  0020               	movlb	0	; select bank0
 19057  137C  01A6               	clrf	___awdiv@sign
 19058  137D  1FA1               	btfss	___awdiv@divisor+1,7
 19059  137E  2B86               	goto	l5844
 19060  137F  09A0               	comf	___awdiv@divisor,f
 19061  1380  09A1               	comf	___awdiv@divisor+1,f
 19062  1381  0AA0               	incf	___awdiv@divisor,f
 19063  1382  1903               	skipnz
 19064  1383  0AA1               	incf	___awdiv@divisor+1,f
 19065  1384  01A6               	clrf	___awdiv@sign
 19066  1385  0AA6               	incf	___awdiv@sign,f
 19067  1386                     l5844:	
 19068  1386  1FA3               	btfss	___awdiv@dividend+1,7
 19069  1387  2B91               	goto	l5850
 19070  1388  09A2               	comf	___awdiv@dividend,f
 19071  1389  09A3               	comf	___awdiv@dividend+1,f
 19072  138A  0AA2               	incf	___awdiv@dividend,f
 19073  138B  1903               	skipnz
 19074  138C  0AA3               	incf	___awdiv@dividend+1,f
 19075  138D  3001               	movlw	1
 19076  138E  00A4               	movwf	??___awdiv
 19077  138F  0824               	movf	??___awdiv,w
 19078  1390  06A6               	xorwf	___awdiv@sign,f
 19079  1391                     l5850:	
 19080  1391  01A7               	clrf	___awdiv@quotient
 19081  1392  01A8               	clrf	___awdiv@quotient+1
 19082  1393  0821               	movf	___awdiv@divisor+1,w
 19083  1394  0420               	iorwf	___awdiv@divisor,w
 19084  1395  1903               	skipnz
 19085  1396  2BC0               	goto	l5872
 19086  1397  01A5               	clrf	___awdiv@counter
 19087  1398  0AA5               	incf	___awdiv@counter,f
 19088  1399                     l5860:	
 19089  1399  1BA1               	btfsc	___awdiv@divisor+1,7
 19090  139A  2BA5               	goto	l5862
 19091  139B  3001               	movlw	1
 19092  139C                     u4555:	
 19093  139C  35A0               	lslf	___awdiv@divisor,f
 19094  139D  0DA1               	rlf	___awdiv@divisor+1,f
 19095  139E  0B89               	decfsz	9,f
 19096  139F  2B9C               	goto	u4555
 19097  13A0  3001               	movlw	1
 19098  13A1  00A4               	movwf	??___awdiv
 19099  13A2  0824               	movf	??___awdiv,w
 19100  13A3  07A5               	addwf	___awdiv@counter,f
 19101  13A4  2B99               	goto	l5860
 19102  13A5                     l5862:	
 19103  13A5  3001               	movlw	1
 19104  13A6                     u4575:	
 19105  13A6  35A7               	lslf	___awdiv@quotient,f
 19106  13A7  0DA8               	rlf	___awdiv@quotient+1,f
 19107  13A8  0B89               	decfsz	9,f
 19108  13A9  2BA6               	goto	u4575
 19109  13AA  0821               	movf	___awdiv@divisor+1,w
 19110  13AB  0223               	subwf	___awdiv@dividend+1,w
 19111  13AC  1D03               	skipz
 19112  13AD  2BB0               	goto	u4585
 19113  13AE  0820               	movf	___awdiv@divisor,w
 19114  13AF  0222               	subwf	___awdiv@dividend,w
 19115  13B0                     u4585:	
 19116  13B0  1C03               	skipc
 19117  13B1  2BB7               	goto	l5868
 19118  13B2  0820               	movf	___awdiv@divisor,w
 19119  13B3  02A2               	subwf	___awdiv@dividend,f
 19120  13B4  0821               	movf	___awdiv@divisor+1,w
 19121  13B5  3BA3               	subwfb	___awdiv@dividend+1,f
 19122  13B6  1427               	bsf	___awdiv@quotient,0
 19123  13B7                     l5868:	
 19124  13B7  3001               	movlw	1
 19125  13B8                     u4595:	
 19126  13B8  36A1               	lsrf	___awdiv@divisor+1,f
 19127  13B9  0CA0               	rrf	___awdiv@divisor,f
 19128  13BA  0B89               	decfsz	9,f
 19129  13BB  2BB8               	goto	u4595
 19130  13BC  3001               	movlw	1
 19131  13BD  02A5               	subwf	___awdiv@counter,f
 19132  13BE  1D03               	btfss	3,2
 19133  13BF  2BA5               	goto	l5862
 19134  13C0                     l5872:	
 19135  13C0  0826               	movf	___awdiv@sign,w
 19136  13C1  1903               	btfsc	3,2
 19137  13C2  2BC8               	goto	l5876
 19138  13C3  09A7               	comf	___awdiv@quotient,f
 19139  13C4  09A8               	comf	___awdiv@quotient+1,f
 19140  13C5  0AA7               	incf	___awdiv@quotient,f
 19141  13C6  1903               	skipnz
 19142  13C7  0AA8               	incf	___awdiv@quotient+1,f
 19143  13C8                     l5876:	
 19144  13C8  0828               	movf	___awdiv@quotient+1,w
 19145  13C9  01A1               	clrf	?___awdiv+1
 19146  13CA  07A1               	addwf	?___awdiv+1,f
 19147  13CB  0827               	movf	___awdiv@quotient,w
 19148  13CC  01A0               	clrf	?___awdiv
 19149  13CD  07A0               	addwf	?___awdiv,f
 19150  13CE  0008               	return
 19151  13CF                     __end_of___awdiv:	
 19152                           
 19153                           	psect	text135
 19154  11B2                     __ptext135:	
 19155 ;; *************** function _setDimmerLights_SwOff *****************
 19156 ;; Defined at:
 19157 ;;		line 747 in file "../src/Dimmer_B1.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;  sw              1    wreg     unsigned char 
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;  sw              1    2[BANK0 ] unsigned char 
 19162 ;; Return value:  Size  Location     Type
 19163 ;;		None               void
 19164 ;; Registers used:
 19165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19166 ;; Tracked objects:
 19167 ;;		On entry : 0/0
 19168 ;;		On exit  : 0/0
 19169 ;;		Unchanged: 0/0
 19170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19175 ;;Total ram usage:        1 bytes
 19176 ;; Hardware stack levels used:    1
 19177 ;; Hardware stack levels required when called:    6
 19178 ;; This function calls:
 19179 ;;		_DimmerLights_SelectPointer
 19180 ;; This function is called by:
 19181 ;;		_DlyOff_Main
 19182 ;;		_Exception_Main
 19183 ;;		_setControl_Lights_Table
 19184 ;;		_setRFSW_Control
 19185 ;;		_setRFSW_AdjControl
 19186 ;;		_setSw_Main
 19187 ;; This function uses a non-reentrant model
 19188 ;;
 19189                           
 19190                           
 19191                           ;psect for function _setDimmerLights_SwOff
 19192  11B2                     _setDimmerLights_SwOff:	
 19193                           
 19194                           ;incstack = 0
 19195                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19196                           ;setDimmerLights_SwOff@sw stored from wreg
 19197  11B2  0020               	movlb	0	; select bank0
 19198  11B3  00A2               	movwf	setDimmerLights_SwOff@sw
 19199                           
 19200                           ;Dimmer_B1.c: 748: DimmerLights_SelectPointer(sw);
 19201  11B4  0822               	movf	setDimmerLights_SwOff@sw,w
 19202  11B5  319A  22EA  3191   	fcall	_DimmerLights_SelectPointer
 19203                           
 19204                           ;Dimmer_B1.c: 750: if (DimmerLights->SwFlag == 1) {
 19205  11B8  0021               	movlb	1	; select bank1
 19206  11B9  084C               	movf	_DimmerLights^(0+128),w
 19207  11BA  0086               	movwf	6
 19208  11BB  3001               	movlw	1	; select bank2/3
 19209  11BC  0087               	movwf	7
 19210  11BD  1C01               	btfss	1,0
 19211  11BE  0008               	return
 19212                           
 19213                           ;Dimmer_B1.c: 751: DimmerLights->SwFlag = 0;
 19214  11BF  084C               	movf	_DimmerLights^(0+128),w
 19215  11C0  0086               	movwf	6
 19216  11C1  3001               	movlw	1	; select bank2/3
 19217  11C2  0087               	movwf	7
 19218  11C3  1001               	bcf	1,0
 19219                           
 19220                           ;Dimmer_B1.c: 752: if (DimmerLights->Status == 1) {
 19221  11C4  0A4C               	incf	_DimmerLights^(0+128),w
 19222  11C5  0086               	movwf	6
 19223  11C6  3001               	movlw	1	; select bank2/3
 19224  11C7  0087               	movwf	7
 19225  11C8  1C01               	btfss	1,0
 19226  11C9  29E0               	goto	l6226
 19227                           
 19228                           ;Dimmer_B1.c: 753: if (DimmerLights->DimmingSwFlag == 1) {
 19229  11CA  084C               	movf	_DimmerLights^(0+128),w
 19230  11CB  0086               	movwf	6
 19231  11CC  3001               	movlw	1	; select bank2/3
 19232  11CD  0087               	movwf	7
 19233  11CE  1D81               	btfss	1,3
 19234  11CF  0008               	return
 19235                           
 19236                           ;Dimmer_B1.c: 754: DimmerLights->DimmingSwFlag = 0;
 19237  11D0  084C               	movf	_DimmerLights^(0+128),w
 19238  11D1  0086               	movwf	6
 19239  11D2  3001               	movlw	1	; select bank2/3
 19240  11D3  0087               	movwf	7
 19241  11D4  1181               	bcf	1,3
 19242                           
 19243                           ;Dimmer_B1.c: 756: DimmerLights->DimmingTrigger = 1;
 19244  11D5  084C               	movf	_DimmerLights^(0+128),w
 19245  11D6  0086               	movwf	6
 19246  11D7  3001               	movlw	1	; select bank2/3
 19247  11D8  0087               	movwf	7
 19248  11D9  1601               	bsf	1,4
 19249                           
 19250                           ;Dimmer_B1.c: 757: DimmerLights->DimmingSwitch = 0;
 19251  11DA  084C               	movf	_DimmerLights^(0+128),w
 19252  11DB  0086               	movwf	6
 19253  11DC  3001               	movlw	1	; select bank2/3
 19254  11DD  0087               	movwf	7
 19255  11DE  1281               	bcf	1,5
 19256                           
 19257                           ;Dimmer_B1.c: 758: }
 19258                           ;Dimmer_B1.c: 759: } else {
 19259  11DF  0008               	return
 19260  11E0                     l6226:	
 19261                           
 19262                           ;Dimmer_B1.c: 761: DimmerLights->Trigger = 1;
 19263  11E0  084C               	movf	_DimmerLights^(0+128),w
 19264  11E1  0086               	movwf	6
 19265  11E2  3001               	movlw	1	; select bank2/3
 19266  11E3  0087               	movwf	7
 19267  11E4  1481               	bsf	1,1
 19268                           
 19269                           ;Dimmer_B1.c: 762: DimmerLights->Switch = 0;
 19270  11E5  084C               	movf	_DimmerLights^(0+128),w
 19271  11E6  0086               	movwf	6
 19272  11E7  3001               	movlw	1	; select bank2/3
 19273  11E8  0087               	movwf	7
 19274  11E9  1101               	bcf	1,2
 19275  11EA  0008               	return
 19276  11EB                     __end_of_setDimmerLights_SwOff:	
 19277                           
 19278                           	psect	text136
 19279  1BB8                     __ptext136:	
 19280 ;; *************** function _getDimmerLights_Status *****************
 19281 ;; Defined at:
 19282 ;;		line 1091 in file "../src/Dimmer_B1.c"
 19283 ;; Parameters:    Size  Location     Type
 19284 ;;  lights          1    wreg     unsigned char 
 19285 ;; Auto vars:     Size  Location     Type
 19286 ;;  lights          1    2[BANK0 ] unsigned char 
 19287 ;;  status          1    3[BANK0 ] unsigned char 
 19288 ;; Return value:  Size  Location     Type
 19289 ;;                  1    wreg      unsigned char 
 19290 ;; Registers used:
 19291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19292 ;; Tracked objects:
 19293 ;;		On entry : 0/0
 19294 ;;		On exit  : 0/0
 19295 ;;		Unchanged: 0/0
 19296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19301 ;;Total ram usage:        2 bytes
 19302 ;; Hardware stack levels used:    1
 19303 ;; Hardware stack levels required when called:    6
 19304 ;; This function calls:
 19305 ;;		_DimmerLights_SelectPointer
 19306 ;; This function is called by:
 19307 ;;		_DlyOff_Main
 19308 ;;		_Exception_Main
 19309 ;;		_setControl_Lights_Table
 19310 ;;		_setRFSW_Control
 19311 ;;		_setRFSW_AdjControl
 19312 ;;		_setRF_AdjControl
 19313 ;; This function uses a non-reentrant model
 19314 ;;
 19315                           
 19316                           
 19317                           ;psect for function _getDimmerLights_Status
 19318  1BB8                     _getDimmerLights_Status:	
 19319                           
 19320                           ;incstack = 0
 19321                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19322                           ;getDimmerLights_Status@lights stored from wreg
 19323  1BB8  0020               	movlb	0	; select bank0
 19324  1BB9  00A2               	movwf	getDimmerLights_Status@lights
 19325                           
 19326                           ;Dimmer_B1.c: 1092: DimmerLights_SelectPointer(lights);
 19327  1BBA  0822               	movf	getDimmerLights_Status@lights,w
 19328  1BBB  319A  22EA         	fcall	_DimmerLights_SelectPointer
 19329                           
 19330                           ;Dimmer_B1.c: 1093: char status = DimmerLights->Status == 1 ? 1 : 0;
 19331  1BBD  0021               	movlb	1	; select bank1
 19332  1BBE  0A4C               	incf	_DimmerLights^(0+128),w
 19333  1BBF  0086               	movwf	6
 19334  1BC0  3001               	movlw	1	; select bank2/3
 19335  1BC1  0087               	movwf	7
 19336  1BC2  3000               	movlw	0
 19337  1BC3  1801               	btfsc	1,0
 19338  1BC4  3001               	movlw	1
 19339  1BC5  0020               	movlb	0	; select bank0
 19340  1BC6  00A3               	movwf	getDimmerLights_Status@status
 19341                           
 19342                           ;Dimmer_B1.c: 1094: return status;
 19343  1BC7  0823               	movf	getDimmerLights_Status@status,w
 19344  1BC8  0008               	return
 19345  1BC9                     __end_of_getDimmerLights_Status:	
 19346                           
 19347                           	psect	text137
 19348  1AEA                     __ptext137:	
 19349 ;; *************** function _DimmerLights_SelectPointer *****************
 19350 ;; Defined at:
 19351 ;;		line 620 in file "../src/Dimmer_B1.c"
 19352 ;; Parameters:    Size  Location     Type
 19353 ;;  lights          1    wreg     unsigned char 
 19354 ;; Auto vars:     Size  Location     Type
 19355 ;;  lights          1    1[BANK0 ] unsigned char 
 19356 ;; Return value:  Size  Location     Type
 19357 ;;		None               void
 19358 ;; Registers used:
 19359 ;;		wreg
 19360 ;; Tracked objects:
 19361 ;;		On entry : 0/0
 19362 ;;		On exit  : 0/0
 19363 ;;		Unchanged: 0/0
 19364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;Total ram usage:        2 bytes
 19370 ;; Hardware stack levels used:    1
 19371 ;; Hardware stack levels required when called:    5
 19372 ;; This function calls:
 19373 ;;		Nothing
 19374 ;; This function is called by:
 19375 ;;		_setDimmerLights_SwOn
 19376 ;;		_setDimmerLights_SwOff
 19377 ;;		_setDimmerLights_DimmingOn
 19378 ;;		_setDimmerLights_Main
 19379 ;;		_getDimmerLights_Status
 19380 ;;		_setDimmerLights_DimmingRun
 19381 ;;		_setRF_AdjControl
 19382 ;;		_setDimmerLights_Status
 19383 ;; This function uses a non-reentrant model
 19384 ;;
 19385                           
 19386                           
 19387                           ;psect for function _DimmerLights_SelectPointer
 19388  1AEA                     _DimmerLights_SelectPointer:	
 19389                           
 19390                           ;incstack = 0
 19391                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19392                           ;DimmerLights_SelectPointer@lights stored from wreg
 19393  1AEA  0020               	movlb	0	; select bank0
 19394  1AEB  00A1               	movwf	DimmerLights_SelectPointer@lights
 19395                           
 19396                           ;Dimmer_B1.c: 622: if (lights == 1) {
 19397  1AEC  0821               	movf	DimmerLights_SelectPointer@lights,w
 19398  1AED  3A01               	xorlw	1
 19399  1AEE  1D03               	skipz
 19400  1AEF  0008               	return
 19401                           
 19402                           ;Dimmer_B1.c: 623: DimmerLights = &DimmerLights1;
 19403  1AF0  3060               	movlw	_DimmerLights1& (0+255)
 19404  1AF1  00A0               	movwf	??_DimmerLights_SelectPointer
 19405  1AF2  0820               	movf	??_DimmerLights_SelectPointer,w
 19406  1AF3  0021               	movlb	1	; select bank1
 19407  1AF4  00CC               	movwf	_DimmerLights^(0+128)
 19408  1AF5  0008               	return
 19409  1AF6                     __end_of_DimmerLights_SelectPointer:	
 19410                           
 19411                           	psect	text138
 19412  1A23                     __ptext138:	
 19413 ;; *************** function _DelayOff_Initialization *****************
 19414 ;; Defined at:
 19415 ;;		line 26 in file "../src/DelayOff_B1.c"
 19416 ;; Parameters:    Size  Location     Type
 19417 ;;		None
 19418 ;; Auto vars:     Size  Location     Type
 19419 ;;		None
 19420 ;; Return value:  Size  Location     Type
 19421 ;;		None               void
 19422 ;; Registers used:
 19423 ;;		wreg, status,2, status,0, pclath, cstack
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19433 ;;Total ram usage:        0 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; Hardware stack levels required when called:    7
 19436 ;; This function calls:
 19437 ;;		_DlyOff_Initialization
 19438 ;; This function is called by:
 19439 ;;		_main
 19440 ;; This function uses a non-reentrant model
 19441 ;;
 19442                           
 19443                           
 19444                           ;psect for function _DelayOff_Initialization
 19445  1A23                     _DelayOff_Initialization:	
 19446                           
 19447                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19448                           
 19449                           ;incstack = 0
 19450                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19451  1A23  3001               	movlw	1
 19452  1A24  319A  2250         	fcall	_DlyOff_Initialization
 19453  1A26  0008               	return
 19454  1A27                     __end_of_DelayOff_Initialization:	
 19455                           
 19456                           	psect	text139
 19457  1A50                     __ptext139:	
 19458 ;; *************** function _DlyOff_Initialization *****************
 19459 ;; Defined at:
 19460 ;;		line 56 in file "../src/DelayOff_B1.c"
 19461 ;; Parameters:    Size  Location     Type
 19462 ;;  sw              1    wreg     unsigned char 
 19463 ;; Auto vars:     Size  Location     Type
 19464 ;;  sw              1    2[BANK0 ] unsigned char 
 19465 ;; Return value:  Size  Location     Type
 19466 ;;		None               void
 19467 ;; Registers used:
 19468 ;;		wreg, status,2, status,0, pclath, cstack
 19469 ;; Tracked objects:
 19470 ;;		On entry : 0/0
 19471 ;;		On exit  : 0/0
 19472 ;;		Unchanged: 0/0
 19473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19477 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19478 ;;Total ram usage:        1 bytes
 19479 ;; Hardware stack levels used:    1
 19480 ;; Hardware stack levels required when called:    6
 19481 ;; This function calls:
 19482 ;;		_DelayOffPointSelect
 19483 ;; This function is called by:
 19484 ;;		_DelayOff_Initialization
 19485 ;; This function uses a non-reentrant model
 19486 ;;
 19487                           
 19488                           
 19489                           ;psect for function _DlyOff_Initialization
 19490  1A50                     _DlyOff_Initialization:	
 19491                           
 19492                           ;incstack = 0
 19493                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19494                           ;DlyOff_Initialization@sw stored from wreg
 19495  1A50  0020               	movlb	0	; select bank0
 19496  1A51  00A2               	movwf	DlyOff_Initialization@sw
 19497                           
 19498                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19499  1A52  0822               	movf	DlyOff_Initialization@sw,w
 19500  1A53  319A  22DE         	fcall	_DelayOffPointSelect
 19501  1A55  0008               	return
 19502  1A56                     __end_of_DlyOff_Initialization:	
 19503                           
 19504                           	psect	text140
 19505  1ADE                     __ptext140:	
 19506 ;; *************** function _DelayOffPointSelect *****************
 19507 ;; Defined at:
 19508 ;;		line 7 in file "../src/DelayOff_B1.c"
 19509 ;; Parameters:    Size  Location     Type
 19510 ;;  sw              1    wreg     unsigned char 
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;  sw              1    1[BANK0 ] unsigned char 
 19513 ;; Return value:  Size  Location     Type
 19514 ;;		None               void
 19515 ;; Registers used:
 19516 ;;		wreg
 19517 ;; Tracked objects:
 19518 ;;		On entry : 0/0
 19519 ;;		On exit  : 0/0
 19520 ;;		Unchanged: 0/0
 19521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;Total ram usage:        2 bytes
 19527 ;; Hardware stack levels used:    1
 19528 ;; Hardware stack levels required when called:    5
 19529 ;; This function calls:
 19530 ;;		Nothing
 19531 ;; This function is called by:
 19532 ;;		_DlyOff_Initialization
 19533 ;;		_DlyOff_Main
 19534 ;;		_setDelayOff_GO
 19535 ;;		_getDelayOff_GO
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           
 19540                           ;psect for function _DelayOffPointSelect
 19541  1ADE                     _DelayOffPointSelect:	
 19542                           
 19543                           ;incstack = 0
 19544                           ; Regs used in _DelayOffPointSelect: [wreg]
 19545                           ;DelayOffPointSelect@sw stored from wreg
 19546  1ADE  0020               	movlb	0	; select bank0
 19547  1ADF  00A1               	movwf	DelayOffPointSelect@sw
 19548                           
 19549                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19550  1AE0  0821               	movf	DelayOffPointSelect@sw,w
 19551  1AE1  3A01               	xorlw	1
 19552  1AE2  1D03               	skipz
 19553  1AE3  0008               	return
 19554                           
 19555                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19556  1AE4  30C7               	movlw	_DlySw1& (0+255)
 19557  1AE5  00A0               	movwf	??_DelayOffPointSelect
 19558  1AE6  0820               	movf	??_DelayOffPointSelect,w
 19559  1AE7  0021               	movlb	1	; select bank1
 19560  1AE8  00CA               	movwf	_DelayOff^(0+128)
 19561  1AE9  0008               	return
 19562  1AEA                     __end_of_DelayOffPointSelect:	
 19563                           
 19564                           	psect	text141
 19565  12E5                     __ptext141:	
 19566 ;; *************** function _Buzzer_Main *****************
 19567 ;; Defined at:
 19568 ;;		line 46 in file "../src/Buzzer_B1.c"
 19569 ;; Parameters:    Size  Location     Type
 19570 ;;		None
 19571 ;; Auto vars:     Size  Location     Type
 19572 ;;		None
 19573 ;; Return value:  Size  Location     Type
 19574 ;;		None               void
 19575 ;; Registers used:
 19576 ;;		wreg, status,2, status,0
 19577 ;; Tracked objects:
 19578 ;;		On entry : 0/0
 19579 ;;		On exit  : 0/0
 19580 ;;		Unchanged: 0/0
 19581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19586 ;;Total ram usage:        1 bytes
 19587 ;; Hardware stack levels used:    1
 19588 ;; Hardware stack levels required when called:    5
 19589 ;; This function calls:
 19590 ;;		Nothing
 19591 ;; This function is called by:
 19592 ;;		_main
 19593 ;; This function uses a non-reentrant model
 19594 ;;
 19595                           
 19596                           
 19597                           ;psect for function _Buzzer_Main
 19598  12E5                     _Buzzer_Main:	
 19599                           
 19600                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19601                           
 19602                           ;incstack = 0
 19603                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19604  12E5  0022               	movlb	2	; select bank2
 19605  12E6  1CA0               	btfss	_Buz1^(0+256),1
 19606  12E7  0008               	return
 19607                           
 19608                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19609  12E8  3001               	movlw	1
 19610  12E9  07A1               	addwf	(_Buz1^(0+256)+1),f
 19611  12EA  3000               	movlw	0
 19612  12EB  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19613                           
 19614                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19615  12EC  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19616  12ED  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19617  12EE  1D03               	skipz
 19618  12EF  2AF2               	goto	u7795
 19619  12F0  0826               	movf	(_Buz1^(0+256)+6),w
 19620  12F1  0221               	subwf	(_Buz1^(0+256)+1),w
 19621  12F2                     u7795:	
 19622  12F2  1C03               	skipc
 19623  12F3  0008               	return
 19624                           
 19625                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19626  12F4  01A1               	clrf	(_Buz1^(0+256)+1)
 19627  12F5  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19628                           
 19629                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19630  12F6  12A0               	bcf	_Buz1^(0+256),5
 19631  12F7  0020               	movlb	0	; select bank0
 19632  12F8  1D8D               	btfss	13,3	;volatile
 19633  12F9  2AFC               	goto	l7866
 19634  12FA  0022               	movlb	2	; select bank2
 19635  12FB  16A0               	bsf	_Buz1^(0+256),5
 19636  12FC                     l7866:	
 19637                           
 19638                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19639  12FC  0022               	movlb	2	; select bank2
 19640  12FD  1AA0               	btfsc	_Buz1^(0+256),5
 19641  12FE  2B28               	goto	l96
 19642                           
 19643                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19644  12FF  08A3               	movf	(_Buz1^(0+256)+3),f
 19645  1300  1D03               	skipz
 19646  1301  2B24               	goto	l97
 19647                           
 19648                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19649  1302  1DA0               	btfss	_Buz1^(0+256),3
 19650  1303  2B12               	goto	l98
 19651                           
 19652                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19653  1304  11A0               	bcf	_Buz1^(0+256),3
 19654                           
 19655                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19656  1305  0824               	movf	(_Buz1^(0+256)+4),w
 19657  1306  0020               	movlb	0	; select bank0
 19658  1307  00A0               	movwf	??_Buzzer_Main
 19659  1308  0820               	movf	??_Buzzer_Main,w
 19660  1309  0022               	movlb	2	; select bank2
 19661  130A  00A3               	movwf	(_Buz1^(0+256)+3)
 19662                           
 19663                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19664  130B  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19665  130C  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19666  130D  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19667  130E  0828               	movf	(_Buz1^(0+256)+8),w
 19668  130F  01A6               	clrf	(_Buz1^(0+256)+6)
 19669  1310  07A6               	addwf	(_Buz1^(0+256)+6),f
 19670                           
 19671                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19672  1311  0008               	return
 19673  1312                     l98:	
 19674  1312  1E20               	btfss	_Buz1^(0+256),4
 19675  1313  2B22               	goto	l100
 19676                           
 19677                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19678  1314  1220               	bcf	_Buz1^(0+256),4
 19679                           
 19680                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19681  1315  0825               	movf	(_Buz1^(0+256)+5),w
 19682  1316  0020               	movlb	0	; select bank0
 19683  1317  00A0               	movwf	??_Buzzer_Main
 19684  1318  0820               	movf	??_Buzzer_Main,w
 19685  1319  0022               	movlb	2	; select bank2
 19686  131A  00A3               	movwf	(_Buz1^(0+256)+3)
 19687                           
 19688                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19689  131B  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19690  131C  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19691  131D  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19692  131E  082A               	movf	(_Buz1^(0+256)+10),w
 19693  131F  01A6               	clrf	(_Buz1^(0+256)+6)
 19694  1320  07A6               	addwf	(_Buz1^(0+256)+6),f
 19695                           
 19696                           ;Buzzer_B1.c: 62: } else {
 19697  1321  0008               	return
 19698  1322                     l100:	
 19699                           
 19700                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19701  1322  10A0               	bcf	_Buz1^(0+256),1
 19702                           
 19703                           ;Buzzer_B1.c: 64: }
 19704                           ;Buzzer_B1.c: 65: } else {
 19705  1323  0008               	return
 19706  1324                     l97:	
 19707                           
 19708                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19709  1324  16A0               	bsf	_Buz1^(0+256),5
 19710                           
 19711                           ;Buzzer_B1.c: 68: RB3 = 1;
 19712  1325  0020               	movlb	0	; select bank0
 19713  1326  158D               	bsf	13,3	;volatile
 19714                           
 19715                           ;Buzzer_B1.c: 69: }
 19716                           ;Buzzer_B1.c: 70: } else {
 19717  1327  0008               	return
 19718  1328                     l96:	
 19719                           
 19720                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19721  1328  12A0               	bcf	_Buz1^(0+256),5
 19722                           
 19723                           ;Buzzer_B1.c: 73: RB3 = 0;
 19724  1329  0020               	movlb	0	; select bank0
 19725  132A  118D               	bcf	13,3	;volatile
 19726                           
 19727                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19728  132B  3001               	movlw	1
 19729  132C  0022               	movlb	2	; select bank2
 19730  132D  02A3               	subwf	(_Buz1^(0+256)+3),f
 19731  132E  0008               	return
 19732  132F                     __end_of_Buzzer_Main:	
 19733                           
 19734                           	psect	text142
 19735  1A11                     __ptext142:	
 19736 ;; *************** function _Buzzer_Initialization *****************
 19737 ;; Defined at:
 19738 ;;		line 11 in file "../src/Buzzer_B1.c"
 19739 ;; Parameters:    Size  Location     Type
 19740 ;;		None
 19741 ;; Auto vars:     Size  Location     Type
 19742 ;;		None
 19743 ;; Return value:  Size  Location     Type
 19744 ;;		None               void
 19745 ;; Registers used:
 19746 ;;		None
 19747 ;; Tracked objects:
 19748 ;;		On entry : 0/0
 19749 ;;		On exit  : 0/0
 19750 ;;		Unchanged: 0/0
 19751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19756 ;;Total ram usage:        0 bytes
 19757 ;; Hardware stack levels used:    1
 19758 ;; Hardware stack levels required when called:    5
 19759 ;; This function calls:
 19760 ;;		Nothing
 19761 ;; This function is called by:
 19762 ;;		_main
 19763 ;; This function uses a non-reentrant model
 19764 ;;
 19765                           
 19766                           
 19767                           ;psect for function _Buzzer_Initialization
 19768  1A11                     _Buzzer_Initialization:	
 19769                           
 19770                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19771                           
 19772                           ;incstack = 0
 19773                           ; Regs used in _Buzzer_Initialization: []
 19774  1A11  0022               	movlb	2	; select bank2
 19775  1A12  1420               	bsf	_Buz1^(0+256),0
 19776  1A13  0008               	return
 19777  1A14                     __end_of_Buzzer_Initialization:	
 19778                           
 19779                           	psect	intentry
 19780  0004                     __pintentry:	
 19781 ;; *************** function _ISR *****************
 19782 ;; Defined at:
 19783 ;;		line 116 in file "../src/MCU_B1.c"
 19784 ;; Parameters:    Size  Location     Type
 19785 ;;		None
 19786 ;; Auto vars:     Size  Location     Type
 19787 ;;		None
 19788 ;; Return value:  Size  Location     Type
 19789 ;;		None               void
 19790 ;; Registers used:
 19791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19792 ;; Tracked objects:
 19793 ;;		On entry : 0/0
 19794 ;;		On exit  : 0/0
 19795 ;;		Unchanged: 0/0
 19796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19801 ;;Total ram usage:        1 bytes
 19802 ;; Hardware stack levels used:    1
 19803 ;; Hardware stack levels required when called:    4
 19804 ;; This function calls:
 19805 ;;		_IOC_ISR
 19806 ;;		_TMR1_ISR
 19807 ;; This function is called by:
 19808 ;;		Interrupt level 1
 19809 ;; This function uses a non-reentrant model
 19810 ;;
 19811                           
 19812  0004                     _ISR:	
 19813                           
 19814                           ;incstack = 0
 19815                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19816  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19817  0005  3180               	pagesel	$
 19818  0006  0020               	movlb	0	; select bank0
 19819  0007  087F               	movf	127,w
 19820  0008  00FC               	movwf	??_ISR
 19821                           
 19822                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19823  0009  0021               	movlb	1	; select bank1
 19824  000A  1C11               	btfss	17,0	;volatile
 19825  000B  2812               	goto	i1l8430
 19826  000C  0020               	movlb	0	; select bank0
 19827  000D  1C11               	btfss	17,0	;volatile
 19828  000E  2812               	goto	i1l8430
 19829                           
 19830                           ;MCU_B1.c: 126: TMR1_ISR();
 19831  000F  319E  26D5  3180   	fcall	_TMR1_ISR
 19832  0012                     i1l8430:	
 19833                           
 19834                           ;MCU_B1.c: 127: }
 19835                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19836  0012  198B               	btfsc	11,3	;volatile
 19837  0013  1C0B               	btfss	11,0	;volatile
 19838  0014  281A               	goto	i1l1214
 19839  0015  0027               	movlb	7	; select bank7
 19840  0016  1D16               	btfss	22,2	;volatile
 19841  0017  281A               	goto	i1l1214
 19842                           
 19843                           ;MCU_B1.c: 139: IOC_ISR();
 19844  0018  319A  228D         	fcall	_IOC_ISR
 19845  001A                     i1l1214:	
 19846                           ;MCU_B1.c: 140: }
 19847                           ;MCU_B1.c: 148: return;
 19848                           
 19849  001A  087C               	movf	??_ISR,w
 19850  001B  0020               	movlb	0	; select bank0
 19851  001C  00FF               	movwf	127
 19852  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19853  001E  0009               	retfie
 19854  001F                     __end_of_ISR:	
 19855                           
 19856                           	psect	text144
 19857  1ED5                     __ptext144:	
 19858 ;; *************** function _TMR1_ISR *****************
 19859 ;; Defined at:
 19860 ;;		line 236 in file "../src/MCU_B1.c"
 19861 ;; Parameters:    Size  Location     Type
 19862 ;;		None
 19863 ;; Auto vars:     Size  Location     Type
 19864 ;;		None
 19865 ;; Return value:  Size  Location     Type
 19866 ;;		None               void
 19867 ;; Registers used:
 19868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19869 ;; Tracked objects:
 19870 ;;		On entry : 0/0
 19871 ;;		On exit  : 0/0
 19872 ;;		Unchanged: 0/0
 19873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;Total ram usage:        0 bytes
 19879 ;; Hardware stack levels used:    1
 19880 ;; Hardware stack levels required when called:    1
 19881 ;; This function calls:
 19882 ;;		_DimmerLights_TMR_1
 19883 ;; This function is called by:
 19884 ;;		_ISR
 19885 ;; This function uses a non-reentrant model
 19886 ;;
 19887                           
 19888                           
 19889                           ;psect for function _TMR1_ISR
 19890  1ED5                     _TMR1_ISR:	
 19891                           
 19892                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19893                           
 19894                           ;incstack = 0
 19895                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19896  1ED5  3189  2121  319E   	fcall	_DimmerLights_TMR_1
 19897                           
 19898                           ;MCU_B1.c: 268: Timer1.Count++;
 19899  1ED8  3001               	movlw	1
 19900  1ED9  0022               	movlb	2	; select bank2
 19901  1EDA  07B2               	addwf	(_Timer1^(0+256)+1),f
 19902  1EDB  3000               	movlw	0
 19903  1EDC  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19904                           
 19905                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19906  1EDD  3001               	movlw	1
 19907  1EDE  3E31               	addlw	_Timer1& (0+255)
 19908  1EDF  0086               	movwf	6
 19909  1EE0  3001               	movlw	1	; select bank2/3
 19910  1EE1  0087               	movwf	7
 19911  1EE2  3F40               	moviw [0]fsr1
 19912  1EE3  3AC8               	xorlw	200
 19913  1EE4  1D03               	skipz
 19914  1EE5  2EE8               	goto	u789_25
 19915  1EE6  3F41               	moviw [1]fsr1
 19916  1EE7  3A00               	xorlw	0
 19917  1EE8                     u789_25:	
 19918  1EE8  1D03               	skipz
 19919  1EE9  2EED               	goto	i1l7920
 19920                           
 19921                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19922  1EEA  01B2               	clrf	(_Timer1^(0+256)+1)
 19923  1EEB  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19924                           
 19925                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19926  1EEC  1431               	bsf	_Timer1^(0+256),0
 19927  1EED                     i1l7920:	
 19928                           
 19929                           ;MCU_B1.c: 272: }
 19930                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19931  1EED  30FA               	movlw	250
 19932  1EEE  0020               	movlb	0	; select bank0
 19933  1EEF  0097               	movwf	23	;volatile
 19934                           
 19935                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19936  1EF0  3038               	movlw	56
 19937  1EF1  0096               	movwf	22	;volatile
 19938                           
 19939                           ;MCU_B1.c: 276: TMR1IF = 0;
 19940  1EF2  1011               	bcf	17,0	;volatile
 19941  1EF3  0008               	return
 19942  1EF4                     __end_of_TMR1_ISR:	
 19943                           
 19944                           	psect	text145
 19945  0921                     __ptext145:	
 19946 ;; *************** function _DimmerLights_TMR_1 *****************
 19947 ;; Defined at:
 19948 ;;		line 1398 in file "../src/Dimmer_B1.c"
 19949 ;; Parameters:    Size  Location     Type
 19950 ;;		None
 19951 ;; Auto vars:     Size  Location     Type
 19952 ;;		None
 19953 ;; Return value:  Size  Location     Type
 19954 ;;		None               void
 19955 ;; Registers used:
 19956 ;;		wreg, status,2, status,0
 19957 ;; Tracked objects:
 19958 ;;		On entry : 0/0
 19959 ;;		On exit  : 0/0
 19960 ;;		Unchanged: 0/0
 19961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19966 ;;Total ram usage:        1 bytes
 19967 ;; Hardware stack levels used:    1
 19968 ;; This function calls:
 19969 ;;		Nothing
 19970 ;; This function is called by:
 19971 ;;		_TMR1_ISR
 19972 ;; This function uses a non-reentrant model
 19973 ;;
 19974                           
 19975                           
 19976                           ;psect for function _DimmerLights_TMR_1
 19977  0921                     _DimmerLights_TMR_1:	
 19978                           
 19979                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.Start == 1) {
 19980                           
 19981                           ;incstack = 0
 19982                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19983  0921  0021               	movlb	1	; select bank1
 19984  0922  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19985  0923  2946               	goto	i1l846
 19986                           
 19987                           ;Dimmer_B1.c: 1401: DimmerIntr1.Count++;
 19988  0924  3001               	movlw	1
 19989  0925  00F0               	movwf	??_DimmerLights_TMR_1
 19990  0926  0870               	movf	??_DimmerLights_TMR_1,w
 19991  0927  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19992                           
 19993                           ;Dimmer_B1.c: 1403: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19994  0928  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19995  0929  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19996  092A  1D03               	skipz
 19997  092B  292E               	goto	i1l7346
 19998                           
 19999                           ;Dimmer_B1.c: 1404: DimmerIntr1.Count = 0;
 20000  092C  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20001                           
 20002                           ;Dimmer_B1.c: 1405: DimmerIntr1.Start = 0;
 20003  092D  113C               	bcf	_DimmerIntr1^(0+128),2
 20004  092E                     i1l7346:	
 20005                           
 20006                           ;Dimmer_B1.c: 1406: }
 20007                           ;Dimmer_B1.c: 1420: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20008  092E  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20009  092F  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20010  0930  1903               	btfsc	3,2
 20011                           
 20012                           ;Dimmer_B1.c: 1421: if (DimmerIntr1.ControlStatus == 1) {
 20013  0931  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20014  0932  2935               	goto	i1l7352
 20015                           
 20016                           ;Dimmer_B1.c: 1422: RB1 = 0;
 20017  0933  0020               	movlb	0	; select bank0
 20018  0934  108D               	bcf	13,1	;volatile
 20019  0935                     i1l7352:	
 20020                           
 20021                           ;Dimmer_B1.c: 1423: }
 20022                           ;Dimmer_B1.c: 1424: }
 20023                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20024  0935  0021               	movlb	1	; select bank1
 20025  0936  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20026  0937  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20027  0938  1903               	btfsc	3,2
 20028                           
 20029                           ;Dimmer_B1.c: 1428: if (DimmerIntr1.ControlStatus == 1) {
 20030  0939  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20031  093A  293D               	goto	i1l7358
 20032                           
 20033                           ;Dimmer_B1.c: 1429: RB1 = 1;
 20034  093B  0020               	movlb	0	; select bank0
 20035  093C  148D               	bsf	13,1	;volatile
 20036  093D                     i1l7358:	
 20037                           
 20038                           ;Dimmer_B1.c: 1430: }
 20039                           ;Dimmer_B1.c: 1431: }
 20040                           ;Dimmer_B1.c: 1434: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20041  093D  0021               	movlb	1	; select bank1
 20042  093E  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20043  093F  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20044  0940  1903               	btfsc	3,2
 20045                           
 20046                           ;Dimmer_B1.c: 1435: if (DimmerIntr1.ControlStatus == 1) {
 20047  0941  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20048  0942  2957               	goto	i1l854
 20049                           
 20050                           ;Dimmer_B1.c: 1436: RB1 = 0;
 20051  0943  0020               	movlb	0	; select bank0
 20052  0944  108D               	bcf	13,1	;volatile
 20053                           
 20054                           ;Dimmer_B1.c: 1437: }
 20055                           ;Dimmer_B1.c: 1440: }
 20056                           ;Dimmer_B1.c: 1442: } else {
 20057  0945  2957               	goto	i1l854
 20058  0946                     i1l846:	
 20059                           
 20060                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.GO == 1) {
 20061  0946  1C3C               	btfss	_DimmerIntr1^(0+128),0
 20062  0947  2957               	goto	i1l854
 20063                           
 20064                           ;Dimmer_B1.c: 1444: DimmerIntr1.Count++;
 20065  0948  3001               	movlw	1
 20066  0949  00F0               	movwf	??_DimmerLights_TMR_1
 20067  094A  0870               	movf	??_DimmerLights_TMR_1,w
 20068  094B  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20069                           
 20070                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Count == 7) {
 20071  094C  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20072  094D  3A07               	xorlw	7
 20073  094E  1D03               	skipz
 20074  094F  2957               	goto	i1l854
 20075                           
 20076                           ;Dimmer_B1.c: 1446: DimmerIntr1.Count = 0;
 20077  0950  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20078                           
 20079                           ;Dimmer_B1.c: 1447: DimmerIntr1.GO = 0;
 20080  0951  103C               	bcf	_DimmerIntr1^(0+128),0
 20081                           
 20082                           ;Dimmer_B1.c: 1448: DimmerIntr1.Start = 1;
 20083  0952  153C               	bsf	_DimmerIntr1^(0+128),2
 20084                           
 20085                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.ControlStatus == 1) {
 20086  0953  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20087  0954  2957               	goto	i1l854
 20088                           
 20089                           ;Dimmer_B1.c: 1451: RB1 = 1;
 20090  0955  0020               	movlb	0	; select bank0
 20091  0956  148D               	bsf	13,1	;volatile
 20092  0957                     i1l854:	
 20093                           
 20094                           ;Dimmer_B1.c: 1452: }
 20095                           ;Dimmer_B1.c: 1453: }
 20096                           ;Dimmer_B1.c: 1454: }
 20097                           ;Dimmer_B1.c: 1455: }
 20098                           ;Dimmer_B1.c: 1458: if (DimmerIntr1.Tune == 1) {
 20099  0957  0021               	movlb	1	; select bank1
 20100  0958  1CBC               	btfss	_DimmerIntr1^(0+128),1
 20101  0959  0008               	return
 20102                           
 20103                           ;Dimmer_B1.c: 1459: DimmerIntr1.Tune = 0;
 20104  095A  10BC               	bcf	_DimmerIntr1^(0+128),1
 20105                           
 20106                           ;Dimmer_B1.c: 1460: DimmerIntr1.TuneTime++;
 20107  095B  3001               	movlw	1
 20108  095C  00F0               	movwf	??_DimmerLights_TMR_1
 20109  095D  0870               	movf	??_DimmerLights_TMR_1,w
 20110  095E  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 20111                           
 20112                           ;Dimmer_B1.c: 1461: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20113  095F  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 20114  0960  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 20115  0961  1C03               	skipc
 20116  0962  0008               	return
 20117                           
 20118                           ;Dimmer_B1.c: 1462: DimmerIntr1.TuneTime = 0;
 20119  0963  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 20120                           
 20121                           ;Dimmer_B1.c: 1463: DimmerIntr1.TuneGO = 1;
 20122  0964  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 20123                           
 20124                           ;Dimmer_B1.c: 1464: if (DimmerIntr1.Dimming_Sw == 1) {
 20125  0965  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20126  0966  297D               	goto	i1l860
 20127                           
 20128                           ;Dimmer_B1.c: 1465: if (DimmerIntr1.Dimming_Status == 0) {
 20129  0967  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 20130  0968  2974               	goto	i1l7396
 20131                           
 20132                           ;Dimmer_B1.c: 1466: if (DimmerIntr1.DimmingValue < ((char)(87*0.6))) {
 20133  0969  3034               	movlw	52
 20134  096A  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20135  096B  1803               	skipnc
 20136  096C  2972               	goto	i1l862
 20137                           
 20138                           ;Dimmer_B1.c: 1467: DimmerIntr1.DimmingValue++;
 20139  096D  3001               	movlw	1
 20140  096E  00F0               	movwf	??_DimmerLights_TMR_1
 20141  096F  0870               	movf	??_DimmerLights_TMR_1,w
 20142  0970  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20143                           
 20144                           ;Dimmer_B1.c: 1468: } else {
 20145  0971  0008               	return
 20146  0972                     i1l862:	
 20147                           
 20148                           ;Dimmer_B1.c: 1469: DimmerIntr1.Dimming_Status = 1;
 20149  0972  16BC               	bsf	_DimmerIntr1^(0+128),5
 20150                           
 20151                           ;Dimmer_B1.c: 1470: }
 20152                           ;Dimmer_B1.c: 1471: } else {
 20153  0973  0008               	return
 20154  0974                     i1l7396:	
 20155                           
 20156                           ;Dimmer_B1.c: 1472: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 20157  0974  3007               	movlw	7
 20158  0975  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20159  0976  1C03               	skipc
 20160  0977  297B               	goto	i1l865
 20161                           
 20162                           ;Dimmer_B1.c: 1473: DimmerIntr1.DimmingValue--;
 20163  0978  3001               	movlw	1
 20164  0979  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20165                           
 20166                           ;Dimmer_B1.c: 1474: } else {
 20167  097A  0008               	return
 20168  097B                     i1l865:	
 20169                           
 20170                           ;Dimmer_B1.c: 1475: DimmerIntr1.Dimming_Status = 0;
 20171  097B  12BC               	bcf	_DimmerIntr1^(0+128),5
 20172                           
 20173                           ;Dimmer_B1.c: 1476: }
 20174                           ;Dimmer_B1.c: 1477: }
 20175                           ;Dimmer_B1.c: 1478: } else if (DimmerIntr1.Dimming_RF == 1) {
 20176  097C  0008               	return
 20177  097D                     i1l860:	
 20178  097D  1F3C               	btfss	_DimmerIntr1^(0+128),6
 20179  097E  0008               	return
 20180                           
 20181                           ;Dimmer_B1.c: 1479: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20182  097F  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 20183  0980  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20184  0981  1803               	skipnc
 20185  0982  2988               	goto	i1l7404
 20186                           
 20187                           ;Dimmer_B1.c: 1480: DimmerIntr1.DimmingValue++;
 20188  0983  3001               	movlw	1
 20189  0984  00F0               	movwf	??_DimmerLights_TMR_1
 20190  0985  0870               	movf	??_DimmerLights_TMR_1,w
 20191  0986  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20192                           
 20193                           ;Dimmer_B1.c: 1481: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20194  0987  0008               	return
 20195  0988                     i1l7404:	
 20196  0988  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20197  0989  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 20198  098A  1803               	skipnc
 20199  098B  298F               	goto	i1l871
 20200                           
 20201                           ;Dimmer_B1.c: 1482: DimmerIntr1.DimmingValue--;
 20202  098C  3001               	movlw	1
 20203  098D  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20204                           
 20205                           ;Dimmer_B1.c: 1483: } else {
 20206  098E  0008               	return
 20207  098F                     i1l871:	
 20208                           
 20209                           ;Dimmer_B1.c: 1484: DimmerIntr1.Dimming_RF = 0;
 20210  098F  133C               	bcf	_DimmerIntr1^(0+128),6
 20211  0990  0008               	return
 20212  0991                     __end_of_DimmerLights_TMR_1:	
 20213                           
 20214                           	psect	text146
 20215  1A8D                     __ptext146:	
 20216 ;; *************** function _IOC_ISR *****************
 20217 ;; Defined at:
 20218 ;;		line 395 in file "../src/MCU_B1.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;		None
 20221 ;; Auto vars:     Size  Location     Type
 20222 ;;		None
 20223 ;; Return value:  Size  Location     Type
 20224 ;;		None               void
 20225 ;; Registers used:
 20226 ;;		wreg, status,2, status,0, pclath, cstack
 20227 ;; Tracked objects:
 20228 ;;		On entry : 0/0
 20229 ;;		On exit  : 0/0
 20230 ;;		Unchanged: 0/0
 20231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20236 ;;Total ram usage:        0 bytes
 20237 ;; Hardware stack levels used:    1
 20238 ;; Hardware stack levels required when called:    3
 20239 ;; This function calls:
 20240 ;;		_DimmerLights_IOC_1
 20241 ;; This function is called by:
 20242 ;;		_ISR
 20243 ;; This function uses a non-reentrant model
 20244 ;;
 20245                           
 20246                           
 20247                           ;psect for function _IOC_ISR
 20248  1A8D                     _IOC_ISR:	
 20249                           
 20250                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20251                           
 20252                           ;incstack = 0
 20253                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20254  1A8D  0021               	movlb	1	; select bank1
 20255  1A8E  1C2F               	btfss	_myMain^(0+128),0
 20256  1A8F  2A92               	goto	i1l7930
 20257                           
 20258                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20259  1A90  3192  2227         	fcall	_DimmerLights_IOC_1
 20260  1A92                     i1l7930:	
 20261                           
 20262                           ;MCU_B1.c: 416: }
 20263                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20264  1A92  0027               	movlb	7	; select bank7
 20265  1A93  1116               	bcf	22,2	;volatile
 20266                           
 20267                           ;MCU_B1.c: 419: IOCIF = 0;
 20268  1A94  100B               	bcf	11,0	;volatile
 20269  1A95  0008               	return
 20270  1A96                     __end_of_IOC_ISR:	
 20271                           
 20272                           	psect	text147
 20273  1227                     __ptext147:	
 20274 ;; *************** function _DimmerLights_IOC_1 *****************
 20275 ;; Defined at:
 20276 ;;		line 1493 in file "../src/Dimmer_B1.c"
 20277 ;; Parameters:    Size  Location     Type
 20278 ;;		None
 20279 ;; Auto vars:     Size  Location     Type
 20280 ;;		None
 20281 ;; Return value:  Size  Location     Type
 20282 ;;		None               void
 20283 ;; Registers used:
 20284 ;;		wreg, status,2, status,0, pclath, cstack
 20285 ;; Tracked objects:
 20286 ;;		On entry : 0/0
 20287 ;;		On exit  : 0/0
 20288 ;;		Unchanged: 0/0
 20289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20292 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20294 ;;Total ram usage:        2 bytes
 20295 ;; Hardware stack levels used:    1
 20296 ;; Hardware stack levels required when called:    2
 20297 ;; This function calls:
 20298 ;;		i1_Division
 20299 ;; This function is called by:
 20300 ;;		_IOC_ISR
 20301 ;; This function uses a non-reentrant model
 20302 ;;
 20303                           
 20304                           
 20305                           ;psect for function _DimmerLights_IOC_1
 20306  1227                     _DimmerLights_IOC_1:	
 20307                           
 20308                           ;Dimmer_B1.c: 1507: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20309                           
 20310                           ;incstack = 0
 20311                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20312  1227  0021               	movlb	1	; select bank1
 20313  1228  193C               	btfsc	_DimmerIntr1^(0+128),2
 20314  1229  0008               	return
 20315  122A  183C               	btfsc	_DimmerIntr1^(0+128),0
 20316  122B  0008               	return
 20317                           
 20318                           ;Dimmer_B1.c: 1509: if (RB2 != DimmerIntr1.Status) {
 20319  122C  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20320  122D  0C89               	rrf	9,f
 20321  122E  3901               	andlw	1
 20322  122F  00FA               	movwf	??_DimmerLights_IOC_1
 20323  1230  3000               	movlw	0
 20324  1231  0020               	movlb	0	; select bank0
 20325  1232  190D               	btfsc	13,2	;volatile
 20326  1233  3001               	movlw	1
 20327  1234  067A               	xorwf	??_DimmerLights_IOC_1,w
 20328  1235  1903               	skipnz
 20329  1236  0008               	return
 20330                           
 20331                           ;Dimmer_B1.c: 1512: DimmerIntr1.Count = 0;
 20332  1237  0021               	movlb	1	; select bank1
 20333  1238  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20334                           
 20335                           ;Dimmer_B1.c: 1513: DimmerIntr1.GO = 1;
 20336  1239  143C               	bsf	_DimmerIntr1^(0+128),0
 20337                           
 20338                           ;Dimmer_B1.c: 1515: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20339  123A  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20340  123B  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20341                           
 20342                           ;Dimmer_B1.c: 1516: DimmerIntr1.Tune = 1;
 20343  123C  14BC               	bsf	_DimmerIntr1^(0+128),1
 20344                           
 20345                           ;Dimmer_B1.c: 1517: }
 20346                           ;Dimmer_B1.c: 1519: if (DimmerIntr1.TuneGO == 1) {
 20347  123D  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20348  123E  2A5D               	goto	i1l7432
 20349                           
 20350                           ;Dimmer_B1.c: 1520: DimmerIntr1.TuneGO = 0;
 20351  123F  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20352                           
 20353                           ;Dimmer_B1.c: 1523: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20354  1240  3002               	movlw	2
 20355  1241  00FA               	movwf	??_DimmerLights_IOC_1
 20356  1242  087A               	movf	??_DimmerLights_IOC_1,w
 20357  1243  00F5               	movwf	i1Division@num
 20358  1244  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20359  1245  319B  236E  3192   	fcall	i1_Division
 20360  1248  00FB               	movwf	??_DimmerLights_IOC_1+1
 20361  1249  087B               	movf	??_DimmerLights_IOC_1+1,w
 20362  124A  0021               	movlb	1	; select bank1
 20363  124B  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20364                           
 20365                           ;Dimmer_B1.c: 1524: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20366  124C  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20367  124D  3AFF               	xorlw	255
 20368  124E  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20369  124F  3E3C               	addlw	60
 20370  1250  00FA               	movwf	??_DimmerLights_IOC_1
 20371  1251  087A               	movf	??_DimmerLights_IOC_1,w
 20372  1252  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20373                           
 20374                           ;Dimmer_B1.c: 1525: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20375  1253  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20376  1254  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20377  1255  00FA               	movwf	??_DimmerLights_IOC_1
 20378  1256  087A               	movf	??_DimmerLights_IOC_1,w
 20379  1257  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20380                           
 20381                           ;Dimmer_B1.c: 1526: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20382  1258  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20383  1259  3E01               	addlw	1
 20384  125A  00FA               	movwf	??_DimmerLights_IOC_1
 20385  125B  087A               	movf	??_DimmerLights_IOC_1,w
 20386  125C  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20387  125D                     i1l7432:	
 20388                           
 20389                           ;Dimmer_B1.c: 1527: }
 20390                           ;Dimmer_B1.c: 1531: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20391  125D  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20392  125E  0020               	movlb	0	; select bank0
 20393  125F  1D0D               	btfss	13,2	;volatile
 20394  1260  0008               	return
 20395  1261  0021               	movlb	1	; select bank1
 20396  1262  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20397  1263  0008               	return
 20398  1264                     __end_of_DimmerLights_IOC_1:	
 20399                           
 20400                           	psect	text148
 20401  1B6E                     __ptext148:	
 20402 ;; *************** function i1_Division *****************
 20403 ;; Defined at:
 20404 ;;		line 1393 in file "../src/Dimmer_B1.c"
 20405 ;; Parameters:    Size  Location     Type
 20406 ;;  value           1    wreg     unsigned char 
 20407 ;;  num             1    5[COMMON] unsigned char 
 20408 ;; Auto vars:     Size  Location     Type
 20409 ;;  value           1    8[COMMON] unsigned char 
 20410 ;;  Division        1    9[COMMON] unsigned char 
 20411 ;; Return value:  Size  Location     Type
 20412 ;;                  1    wreg      unsigned char 
 20413 ;; Registers used:
 20414 ;;		wreg, status,2, status,0, pclath, cstack
 20415 ;; Tracked objects:
 20416 ;;		On entry : 0/0
 20417 ;;		On exit  : 0/0
 20418 ;;		Unchanged: 0/0
 20419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20420 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20422 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20423 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20424 ;;Total ram usage:        5 bytes
 20425 ;; Hardware stack levels used:    1
 20426 ;; Hardware stack levels required when called:    1
 20427 ;; This function calls:
 20428 ;;		i1___lbdiv
 20429 ;; This function is called by:
 20430 ;;		_DimmerLights_IOC_1
 20431 ;; This function uses a non-reentrant model
 20432 ;;
 20433                           
 20434                           
 20435                           ;psect for function i1_Division
 20436  1B6E                     i1_Division:	
 20437                           
 20438                           ;incstack = 0
 20439                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20440                           ;i1Division@value stored from wreg
 20441  1B6E  00F8               	movwf	i1Division@value
 20442                           
 20443                           ;Dimmer_B1.c: 1394: char result = (char) (value / num);
 20444  1B6F  0875               	movf	i1Division@num,w
 20445  1B70  00F6               	movwf	??i1_Division
 20446  1B71  0876               	movf	??i1_Division,w
 20447  1B72  00F0               	movwf	i1___lbdiv@divisor
 20448  1B73  0878               	movf	i1Division@value,w
 20449  1B74  319F  2753         	fcall	i1___lbdiv
 20450  1B76  00F7               	movwf	??i1_Division+1
 20451  1B77  0877               	movf	??i1_Division+1,w
 20452  1B78  00F9               	movwf	i1Division@result
 20453                           
 20454                           ;Dimmer_B1.c: 1395: return result;
 20455  1B79  0879               	movf	i1Division@result,w
 20456  1B7A  0008               	return
 20457  1B7B                     __end_ofi1_Division:	
 20458                           
 20459                           	psect	text149
 20460  1F53                     __ptext149:	
 20461 ;; *************** function i1___lbdiv *****************
 20462 ;; Defined at:
 20463 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20464 ;; Parameters:    Size  Location     Type
 20465 ;;  dividend        1    wreg     unsigned char 
 20466 ;;  divisor         1    0[COMMON] unsigned char 
 20467 ;; Auto vars:     Size  Location     Type
 20468 ;;  dividend        1    2[COMMON] unsigned char 
 20469 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20470 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20471 ;; Return value:  Size  Location     Type
 20472 ;;                  1    wreg      unsigned char 
 20473 ;; Registers used:
 20474 ;;		wreg, status,2, status,0
 20475 ;; Tracked objects:
 20476 ;;		On entry : 0/0
 20477 ;;		On exit  : 0/0
 20478 ;;		Unchanged: 0/0
 20479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20480 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20481 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20483 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20484 ;;Total ram usage:        5 bytes
 20485 ;; Hardware stack levels used:    1
 20486 ;; This function calls:
 20487 ;;		Nothing
 20488 ;; This function is called by:
 20489 ;;		i1_Division
 20490 ;; This function uses a non-reentrant model
 20491 ;;
 20492                           
 20493                           
 20494                           ;psect for function i1___lbdiv
 20495  1F53                     i1___lbdiv:	
 20496                           
 20497                           ;incstack = 0
 20498                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20499                           ;i1___lbdiv@dividend stored from wreg
 20500  1F53  00F2               	movwf	i1___lbdiv@dividend
 20501  1F54  01F4               	clrf	i1___lbdiv@quotient
 20502  1F55  0870               	movf	i1___lbdiv@divisor,w
 20503  1F56  1903               	btfsc	3,2
 20504  1F57  2F72               	goto	i1l6796
 20505  1F58  01F3               	clrf	i1___lbdiv@counter
 20506  1F59  0AF3               	incf	i1___lbdiv@counter,f
 20507  1F5A                     i1l6784:	
 20508  1F5A  1BF0               	btfsc	i1___lbdiv@divisor,7
 20509  1F5B  2F63               	goto	i1l6786
 20510  1F5C  1003               	clrc
 20511  1F5D  0DF0               	rlf	i1___lbdiv@divisor,f
 20512  1F5E  3001               	movlw	1
 20513  1F5F  00F1               	movwf	??i1___lbdiv
 20514  1F60  0871               	movf	??i1___lbdiv,w
 20515  1F61  07F3               	addwf	i1___lbdiv@counter,f
 20516  1F62  2F5A               	goto	i1l6784
 20517  1F63                     i1l6786:	
 20518  1F63  1003               	clrc
 20519  1F64  0DF4               	rlf	i1___lbdiv@quotient,f
 20520  1F65  0870               	movf	i1___lbdiv@divisor,w
 20521  1F66  0272               	subwf	i1___lbdiv@dividend,w
 20522  1F67  1C03               	skipc
 20523  1F68  2F6D               	goto	L11
 20524  1F69  0870               	movf	i1___lbdiv@divisor,w
 20525  1F6A  02F2               	subwf	i1___lbdiv@dividend,f
 20526  1F6B  1474               	bsf	i1___lbdiv@quotient,0
 20527  1F6C  1003               	clrc
 20528  1F6D                     L11:	
 20529  1F6D  0CF0               	rrf	i1___lbdiv@divisor,f
 20530  1F6E  3001               	movlw	1
 20531  1F6F  02F3               	subwf	i1___lbdiv@counter,f
 20532  1F70  1D03               	btfss	3,2
 20533  1F71  2F63               	goto	i1l6786
 20534  1F72                     i1l6796:	
 20535  1F72  0874               	movf	i1___lbdiv@quotient,w
 20536  1F73  0008               	return
 20537  1F74                     __end_ofi1___lbdiv:	
 20538  007E                     btemp	set	126	;btemp
 20539  007E                     pic14e$flags	set	126
 20540  007E                     wtemp	set	126
 20541  007E                     wtemp0	set	126
 20542  0080                     wtemp1	set	128
 20543  0082                     wtemp2	set	130
 20544  0084                     wtemp3	set	132
 20545  0086                     wtemp4	set	134
 20546  0088                     wtemp5	set	136
 20547  007F                     wtemp6	set	127
 20548  007E                     ttemp	set	126
 20549  007E                     ttemp0	set	126
 20550  0081                     ttemp1	set	129
 20551  0084                     ttemp2	set	132
 20552  0087                     ttemp3	set	135
 20553  007F                     ttemp4	set	127
 20554  007E                     ltemp	set	126
 20555  007E                     ltemp0	set	126
 20556  0082                     ltemp1	set	130
 20557  0086                     ltemp2	set	134
 20558  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         227
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      76
    BANK3            80      0      76
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  148694
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5815
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5815
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3410
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3410
                                             16 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44193
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44193
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   39619
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35243
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0     157
                                              4 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10038
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20452
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2168
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2892
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48427
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48219
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27715
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     311
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20233
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     311
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4482
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4482
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1525
                                             13 BANK0      3     3      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Mar 13 16:49:49 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1DC5                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 1456  
                                      l96 1328                                        l88 146A  
                                      l97 1324                                        l98 1312  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1FDB  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D2             setDimmerLights_SwOn@rfDimming 002F  
                          setTemp_Main@AD 006D                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1AB2                    __end_of_setDelayOff_GO 0C95  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                  setRF_AdjControl@status 0025                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 172A                      _setDimmerLights_Line 1BC9  
                            ___ftadd@sign 004B                                       l100 1322  
                                     l303 1DD1                                       l304 1DD3  
                                     l235 088A                      _setDimmerLights_SwOn 132F  
                                     l531 091A                                       l347 100D  
                                     l740 136E                                       l762 1E78  
                                     l691 1B97                                       l678 14FC  
                                     l789 0FBF                                       _GIE 005F  
                                     _CRC 00C8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1DDE                     _Buzzer_Initialization 1A11  
                         __end_of_ADC_Set 1A76                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1D94               _setDimmerIntr_ControlStatus 1D7C  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1A96  
                   _setDimmerLights_OnOff 0F3A          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l2200 1141                                      l1251 12DF  
                                    l2214 0A7B                                      l2142 0550  
                                    l1265 10A8                                      l2233 10D2  
                                    l2146 049F                                      l1507 0628  
                                    l1275 0B7A                                      l2147 04F0  
                                    l1516 1DC4                                      l2172 1B9E  
                                    l1452 1225                                      l1631 008B  
                                    l2511 1D42                                      l1480 110B  
                                    l1640 01D9                                      l1632 0087  
                                    l1633 0082                                      l1801 06F8  
                                    l1475 10F4                                      l2187 15F9  
                                    l2531 0381                                      l1476 110F  
                                    l1629 01FF                           __end_of_IOC_Set 1AD3  
                                    l2533 024D                                      l1639 01DB  
                                    l1807 064B                                      l6000 043A  
                                    l2715 1EC0                                      l6004 044C  
                                    l6100 0E57                                      l6014 0467  
                                    l6030 0D4F                                      l6024 0D39  
                                    l7000 13E8                                      l2905 0428  
                                    l6210 1360                                      l6212 1365  
                                    l6052 0DA9                                      l6044 0D90  
                                    l6124 0B9B                                      l6150 0BE6  
                                    l6142 0BCB                                      l6072 0DF8  
                                    l6152 0BEF                                      l6144 0BD9  
                                    l6226 11E0                                      l2882 1580  
                                    l6066 0DE2                                      l6154 0BF2  
                                    l7210 1190                                      l2876 1569  
                                    l6084 0E33                                      l7220 11AB  
                                    l6158 0C00                                      l6262 0C8B  
                                    l7310 1788                                      l7070 1090  
                                    l7126 1C18                                      l8102 1205  
                                    l6096 0E4F                                      l6088 0E3B  
                                    l6432 1DBE                                      l6248 0C47  
                                    l7320 1ABA                                      l7216 11A2  
                                    l7208 1184                                      l8200 0163  
                                    l8040 09D7                                      l5810 153F  
                                    l6258 0C77                                      l8210 018F  
                                    l7162 15CE                                      l7146 15AD  
                          _Load_Main$3988 002A                                      l6700 1C3F  
                                    l6428 1DAF                                      l7308 1781  
                                    l8220 01AB                                      l8036 09CF  
                                    l8028 09B0                     _setDimmerLights_SwOff 11B2  
                                    l5814 1546                                      l8302 0582  
                                    l8230 01C1                                      l8206 0172  
                                    l8214 019B                                      l8134 0069  
                                    l6470 0A98                                      l6454 1297  
                                    l7158 15C5                                      l7510 1F26  
                                    l5824 156E                                      l5816 1550  
                                    l5920 1C44                                      l8152 008A  
                                    l6480 0AE8                                      l7192 1C29  
                                    l7504 1F1E                                      l8056 09FE  
                                    l8080 0CF4                                      l8072 0CC6  
                                    l5850 1391                                      l5826 1576  
                                    l5818 1555                                      l6642 10EF  
                                    l6298 1714                                      l8314 05B9  
                                    l8306 0591                                      l7530 1BF6  
                                    l7282 1CC0                                      l6394 101E  
                                    l6466 0A93                                      l7610 065D  
                                    l7506 1F21                                      l5860 1399  
                                    l5844 1386                                      l6652 1106  
                                    l6644 10F8                                      l5924 1C4A  
                                    l8332 05FB                                      l8316 0594  
                                    l6396 1029                                      l6740 0A61  
                                    l6732 0A19                                      l7604 064E  
                                    l7612 0660                                      l8084 0D0B  
                                    l8076 0CDD                                      l5862 13A5  
                                    l5942 1FA1                                      l8334 05D6  
                                    l8318 05C1                                      l7542 0B03  
                                    l8174 00E0                                      l6742 0A65  
                                    l6734 0A20                                      l6726 0A04  
                                    l5872 13C0                                      l6760 1F85  
                                    l6672 07D5                                      l7296 1752  
                                    l8336 0603                                      l8344 061E  
                                    l8168 00AE                                      l6736 0A3B  
                                    l6770 1F94                                      l5954 03B1  
                                    l7298 1759                                      l8338 060D  
                                    l8266 01EE                                      l6738 0A5D  
                                    l6746 0A69                                      l7642 06CF  
                                    l5876 13C8                                      l5868 13B7  
                                    l5964 03C7                                      l7556 0B73  
                                    l7548 0B18                                      l8540 1E1E  
                                    l8620 082A                                      l7652 06E4  
                                    l6758 1F7C                                      l5982 03F4  
                                    l5958 03B8                                      l6934 1D5F  
                                    l6694 1C33                                      l6686 07F4  
                                    l6678 07DE                                      l7902 1E7A  
                                    l8630 083A                                      l8710 0893  
                                    l7806 02F5                                      l7654 06E6  
                                    l5984 03FE                                      l5976 03E1  
                                    l8296 0572                                      l8544 1E24  
                                    l8624 0830                                      l8704 0871  
                                    l7752 1D4D                                      l7816 0329  
                                    l5994 041A                                      l5986 0403  
                                    l6698 1C3A                                      l8538 1E1B  
                                    l8634 0840                                      l8618 0827  
                                    l8562 1EAA                                      l8722 08A6  
                                    l8714 0899                                      l5996 0424  
                                    l5988 0407                                      l6956 0F81  
                                    l6964 0F9F                                      l8572 1FC1  
                                    l8628 0837                                      l8564 1EB0  
                                    l8740 17A8                                      l8716 089D  
                                    l8708 0890                                      l7748 1D47  
                   _myMain_Initialization 1CD5                                      l6958 0F98  
                                    l7846 1EBA                                      l8574 1FC4  
                                    l8590 1FE5                                      l8742 17AB  
                                    l8718 08A0                                      l7782 0280  
                                    l7766 0237                                      l8910 14A2  
                                    l8592 1FE8                                      l8832 04FF  
                                    l7792 02B5                                      l7866 12FC  
                                    l6994 0FFD                                      l6978 0FCE  
                                    l8578 1FCA                                      l8762 17C3  
                                    l8746 17B1                                      l8690 085F  
                                    l8818 04EB                                      l8914 14AD  
                                    l7948 077E                                      l8596 1FEE  
                                    l8764 17DC                                      l8684 0856  
                                    l8860 0549                                      l7974 12BE  
                                    l8686 0859                                      l8846 0531  
                                    _CFGS 0CAE                              __CFG_WDTE$ON 0000  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5005 0DAA                                      u5115 0E58  
                                    u5125 0E5E                                      u5045 0E04  
                                    u5055 0E14                                      u4505 1587  
                                    u5225 0BE7                                      u4435 154B  
                                    u5075 0E3C                                      _PEIE 005E  
                                    u5085 0E42                                      u5165 0BA2  
                                    u5430 16CF                                      u4455 1564  
                                    u4555 139C                                      u4475 1571  
                                    u5195 0BCC                                      u5435 16CD  
                                    u4805 03E2                                      u4575 13A6  
                                    u5535 1013                                      u6335 1D35  
                                    u4585 13B0                                      u8105 09EE  
                                    u4595 13B8                                      u4835 03F5  
                                    u5395 0C53                                      u6365 1E53  
                                    u8055 09BF                                      u4865 0408  
                                    u7345 06A1                                      u6635 1187  
                                    u8155 0CB9                                      u8235 121D  
                                    u4965 0D61                                      u7365 06B8  
                                    u8165 0CD0                                      u4895 041B  
                                    u4975 0D71                                      u6655 1191  
                                    u8175 0CE7                                      u4985 0D91  
                                    u6665 119B                                      u7385 06D6  
                                    u8185 0CFE                                      u8610 05BF  
                                    u4995 0DA0                                      u6675 11A3  
                                    u9235 04C3                                      u8195 0D15  
                                    u8615 059D                                      u8375 00AC  
                                    u8640 0601                                      u8385 00DE  
                                    u9265 0520                                      u7755 1EC1  
                                    u8475 01A2                                      u8395 0122  
                                    u8645 05DF                                      u7765 1EC6  
                                    u8815 1D0B                                      u7795 12F2  
                                    u7995 12D6                                      _LWLO 0CAD  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1E47  
              _setDimmerLights_DimmingRun 1E2C                                      _Buz1 0120  
                                    _Load 0138                                      _Temp 00D8  
                                    _main 147E                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 0921                           __end_of_RF_Main 1A1D  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1B56                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0AFC                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2284 0023  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 007C  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
       setDimmerLights_DimmingRun@command 0022   __end_of_getDimmerLights_Allow_Condition 1D66  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1D50  
                  _getDimmerLights_Status 1BB8                        ??_getDimmer_LoadGO 0020  
                        __end_of_LED_Main 1A33                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CB                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00EA  
                         __end_of___awdiv 13CF                           __end_of___lbdiv 1F96  
                         __end_of___ftadd 047F                           __end_of___ftdiv 0DCB  
                         __end_of___ftneg 1A9F                           __end_of___ftmul 0E7F  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0C09                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 11B2                                     i1l860 097D  
                                   i1l862 0972                                     i1l854 0957  
                                   i1l846 0946                                     i1l871 098F  
                                   i1l865 097B                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1D3B  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 16C5  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1660  
                                   _Light 00CE                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1EF4                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1B4A                                     _getAD 1F13  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1C89               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1AC8  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1C65  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      __size_ofi1___lbdiv 0021                       _getAll_Sw_KeyStatus 1BEB  
                      _setRF_DimmerLights 16C5                           ___lbdiv@divisor 0020  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0023                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0067               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1B8A                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14D9                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1A37            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0554                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1BA8  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0A03                            _setMemory_Data 1B26  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13CF                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1AA8                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1CFC                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08B2  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1000  
                               ??_WDT_Set 0020                          __end_of___awtoft 1FB8  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1597  
                _getMain_All_Error_Status 10DE                                    _IOCBF2 1CB2  
                                  i1l1214 001A                                    i1l7404 0988  
                                  i1l7432 125D                                    i1l7352 0935  
                                  i1l7346 092E                                    i1l7358 093D  
                                  i1l8430 0012                                    i1l7396 0974  
                                  i1l6784 1F5A                                    i1l7920 1EED  
                                  i1l6786 1F63                                    i1l7930 1A92  
                                  i1l6796 1F72                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DF8  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 1A5C  
   __size_of_setDimmerLights_DimmingClose 0006              _setDimmerLights_DimmingClose 1A56  
                                  u789_25 1EE8                      Exception_Main@i_3625 0032  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0026  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D26                                    _Dimmer 012C  
                                  _DlySw1 01C7                          _setRF_AdjControl 10AF  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1C41                __end_of_Mcu_Initialization 1C77  
                     __end_of_Buzzer_Main 132F                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 1C41                    __end_of_Exception_Main 0629  
                    Exception_Main@lights 0035                                    ___wmul 1EB7  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D6                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CC2  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1CAF                                    _s_data 00D7  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 07C6  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1B32                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1425  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1A17          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1DAC          __end_of_setDimmerIntr_Dimming_Sw 1D7C  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1F74  
               _setDimmerLights_DimmingOn 102E                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CD5  
             getMain_Lights_Count@status1 0021               __size_of_DimmerLights_IOC_1 003D  
                   __end_of_SwPointSelect 1B6E               __size_of_DimmerLights_TMR_1 0070  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 000C  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006C  
                        ___lbdiv@dividend 0022                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1D3B  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004F  
         setDimmerIntr_DimmingValue@value 0062           getDimmerIntr_DimmingValue@value 0022  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5411 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK3 1F33  
                           __end_of_getAD 1F33                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1A2B  
                         _getSw_KeyStatus 1C1E                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1ABD  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1B02                __end_of_set_TimeoutCleared 1A50  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1AF6                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1A1D                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 12E5                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1A23  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1A23                             ??_Switch_Main 0033  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00CC  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 147E                            _getDelayOff_GO 1BDA  
                     _CC2500_WriteCommand 1E12                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1536             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0991  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1A7D  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1A6F                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 0C95        __end_of_DimmerLights_SelectPointer 1AF6  
              _DimmerLights_SelectPointer 1AEA                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1ADE                        _setRFSW_AdjControl 0A7C  
                  __end_of_setProductData 1B02             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1A8D                                   _IOC_Set 1AC8  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 12A4  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1DDE  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1A1A                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1B4A           __end_of_setControl_Lights_Table 0A7C  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1425                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1B62  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1C0D                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BEB  
          __end_of_getDimmerLights_Status 1BC9                         __end_of_getRxData 15FB  
                 __end_of_getSw_KeyStatus 1C2F                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 137B  
          ??_setDimmerLights_DimmingClose 0023                                   ___lbdiv 1F74  
                                 ___ftadd 0389                                   ___ftdiv 0D22  
                                 ___ftneg 1A96                           __size_of___wmul 001E  
                                 ___ftmul 0DCB                                   ___fttol 0B82  
                     __end_of_Switch_Main 1A7D                        __end_ofi1_Division 1B7B  
                                 ___lwdiv 117B                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1C0D  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 11EB  
                                 __ptext2 1CD5                                   __ptext3 0C95  
                                 __ptext4 0991                                   __ptext5 1F13  
                                 __ptext6 1C77                                   __ptext7 0002  
                                 __ptext8 1A20                                   __ptext9 0629  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 12E5                 __end_of_Flash_Memory_Read 1DF8  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 047F  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1A27  
                __end_of_setRF_AdjControl 10DE                         _DimmerLights_Main 1E62  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1A56  
              __end_of_CC2500_ClearRXFIFO 1A3F                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1A43                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1B1A                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1ADE  
                                 clrloop0 1A63            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1A4B                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1056  
                           _DelayTime_1us 1008                         __end_of_setTxData 0F3A  
              __end_of_Flash_Memory_Write 10AF        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1A5C                __end_of_setRF_TransceiveGO 1CAF  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1A5D  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1FDB  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C53  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 1795  
                           _CC2500_TxData 0846                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0AFC                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1DAC  
                     _Flash_Memory_Unlock 1A9F                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1E7E                        _Mcu_Initialization 1C65  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001B  
            __end_of_setRF_TimeoutCleared 1A3B                      __end_of_my_MainTimer 1227  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B26                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1F53  
               __end_of_CC2500_InitSetREG 1080                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 2000  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1056                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1E12  
                    _setRF_Initialization 1AD3                        _setMemory_LoopSave 1CC2  
                             _Switch_Main 1A76                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1C1E  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D11               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1BFC  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C53       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1ED5  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 07FF  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 004C                            __end_of_setBuz 147E  
              __end_of_DimmerLights_IOC_1 1264                      _CC2500_FrequencyCabr 1B56  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1264                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0991                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1A85                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1F13  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 06FC  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1660  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 15FB  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1A4B         __end_of_setDimmerIntr_MaxmumValue 1B0E  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0168                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 008D  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A20                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1AB2                                 _Tx_Length 00D4  
                             __pdataBANK3 01CC                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1111  
                        _CC2500_SIDLEMode 1A43                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1C89                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E6  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 14D9                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0160  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1E9A                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 00E7               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1A37                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C2F  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 07FF                                 _getBuz_GO 1BFC  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 07C6  
             _Flash_Memory_Initialization 06FC                                  ?___awdiv 0020  
                               __ptext100 1AA8                                 __ptext101 1BDA  
                                ?___lbdiv 0020                                 __ptext110 1B8A  
                               __ptext102 1C2F                                 __ptext111 1D50  
                               __ptext103 13CF                                 __ptext120 0B82  
                               __ptext112 1A7D                                 __ptext104 0E7F  
                               __ptext121 1A96                                 __ptext113 10DE  
                               __ptext105 1C9C                                 __ptext130 08B2  
                               __ptext122 0DCB                                 __ptext114 1A68  
                               __ptext106 16C5                                 __ptext131 1AF6  
                               __ptext123 0D22                                 __ptext115 0801  
                               __ptext107 1BC9                                 __ptext140 1ADE  
                               __ptext132 132F                                 __ptext124 0389  
                               __ptext116 14D9                                 __ptext108 1B02  
                               __ptext141 12E5                                 __ptext133 1425  
                               __ptext125 1F96                                 __ptext117 1C89  
                               __ptext109 1D66                                  ?___ftadd 0041  
                               __ptext142 1A11                                 __ptext134 137B  
                               __ptext126 1536                                 __ptext118 1660  
                               __ptext135 11B2                                 __ptext127 1B7B  
                               __ptext119 15FB                                 __ptext144 1ED5  
                               __ptext136 1BB8                                 __ptext128 1F74  
                               __ptext145 0921                                 __ptext137 1AEA  
                               __ptext129 1A27                                 __ptext146 1A8D  
                               __ptext138 1A23                                 __ptext147 1227  
                               __ptext139 1A50                                 __ptext148 1B6E  
                               __ptext149 1F53                                 _getRxData 1597  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 12A4                          ??_setProductData 0063  
                 _setOverTemp_ADV_Restore 1E47             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1A14  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1D50                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1B99  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1B8A  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C6  
                       ?_setRF_AdjControl 0070                                 _r_address 00D5  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 11EB  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1CE8  
                             ??i1___lbdiv 0071                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                        ??_setRF_AdjControl 0024  
                           _SwPointSelect 1B62                       __end_of_setLED_Main 117B  
                        ??_getDelayOff_GO 0022                         i1___lbdiv@divisor 0070  
                       i1___lbdiv@counter 0073                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1A20                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 1A2F  
                         SwPointSelect@sw 0021                                 clear_ram0 1A62  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 11EB                                 _setTxData 0E7F  
     __end_of_DimmerLights_Initialization 1A6F               _DimmerLights_Initialization 1A68  
                  _Flash_Memory_Main$3153 0028                        _CC2500_ClearRXFIFO 1A3B  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1A3F  
                setRF_DimmerLights@lights 0069                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1CFC                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  setRF_DimmerLights@status 0068  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1080  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1ED5                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 1B3E                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1C9C  
                                _RF_Count 0134                      __end_of_RF_RxDisable 1BA8  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1E2C  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C77  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00D3  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CA                              setSw_Main@sw 0032  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1B3E                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 1145                     _DlyOff_Initialization 1A50  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0024  
                                _Division 1B7B                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1D94  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1D66  
                                _Fosc_Set 1A33                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 0A03  
                      __end_of_getLoad_OK 1A85                     _Switch_Initialization 1A47  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0D22                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1DC5  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0020                                  _SwDetect 00D3  
                             ??_Temp_Main 006F                          getCmd_Status@cmd 0021  
                        setCmd_Status@cmd 0020                         setRFSW_Control@sw 006F  
           _getMain_All_Error_Status$3613 0021             _getMain_All_Error_Status$3614 0023  
                __end_of_getDimmer_LoadGO 1A8D                       _Load_Initialization 1A14  
        ??_getDimmerLights_ValueToPercent 005C           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0023                 ??_setOverTemp_ADV_Restore 0020  
                            _setTemp_Main 0629                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1F96  
                        ??_LedPointSelect 0020                                  ___ftpack 1536  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E8  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1145  
              __end_of_setRF_DimmerLights 172A            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1008  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1E47                                  __ptext11 1A1D  
                                __ptext20 1A4B                                  __ptext12 07FF  
                                __ptext21 1D26                                  __ptext13 1A76  
                                __ptext30 10AF                                  __ptext22 1A47  
                                __ptext14 0205                                  __ptext31 1264  
                                __ptext23 1BA8                                  __ptext15 1CE8  
                                __ptext40 1E9A                                  __ptext32 0A7C  
                                __ptext24 1A1A                                  __ptext16 102E  
                                __ptext41 1D11                                  __ptext33 1E2C  
                                __ptext25 047F                                  __ptext17 1C1E  
                                __ptext50 1A3B                                  __ptext42 1A43  
                                __ptext34 1C0D                                  __ptext26 1597  
                                __ptext18 1B62                                  __ptext51 1E12  
                                __ptext43 0802                                  __ptext35 1BFC  
                                __ptext27 1111                                  __ptext19 1D3B  
                                __ptext60 1DF8                                  __ptext52 1A37  
                                __ptext44 1056                                  __ptext36 1B99  
                                __ptext28 1CC2                                  __ptext61 1AC8  
                                __ptext53 1CFC                                  __ptext45 1EF4  
                                __ptext37 0846                                  __ptext29 0A03  
                                __ptext70 117B                                  __ptext62 1A33  
                                __ptext54 1DC5                                  __ptext46 1FB8  
                                __ptext38 1795                                  __ptext71 1A14  
                                __ptext63 1A6F                                  __ptext55 1A17  
                                __ptext47 1B56                                  __ptext39 1FDB  
                                __ptext80 1B32                                  __ptext72 1E7E  
                                __ptext64 0053                                  __ptext56 1AD3  
                                __ptext48 1008                                  __ptext81 06FC  
                                __ptext73 1A2F                                  __ptext65 1ABD  
                                __ptext57 1C65                                  __ptext49 1A3F  
                                __ptext90 0F3A                                  __ptext82 1B26  
                                __ptext74 1145                                  __ptext66 1000  
                                __ptext58 1B4A                                  __ptext91 07C6  
                                __ptext83 1080                                  __ptext75 1A2B  
                                __ptext67 1A85                                  __ptext59 1B3E  
                                __ptext92 1B1A                                  __ptext84 1A9F  
                                __ptext76 1C53                                  __ptext68 1CAF  
                                __ptext93 1A56                                  __ptext85 1DDE  
                                __ptext77 12A4                                  __ptext69 1EB7  
                                __ptext94 1D94                                  __ptext86 0554  
                                __ptext78 1BEB                                  __ptext95 1B0E  
                                __ptext87 1AB2                                  __ptext79 0AFC  
                                __ptext96 1D7C                                  __ptext88 1E62  
                                __ptext97 0C09                                  __ptext89 172A  
                                __ptext98 1C41                                  __ptext99 1DAC  
                                __product 01CC                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1ABD  
            __end_of_setDimmerLights_Main 1795              __end_of_setDimmerLights_Line 1BDA  
                      _DimmerLights_IOC_1 1227              __end_of_setDimmerLights_SwOn 137B  
                            ??_setSw_Main 0030                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1CE8  
      __size_of_DimmerIntr_Initialization 005D                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 0921                  __end_of_CC2500_SIDLEMode 1A47  
              setDimmerLights_Main@lights 00E7               __end_of_DelayOffPointSelect 1AEA  
                setOverTemp_ADV_Restore@i 0021                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1E9A                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1EF4                  __end_of_setMemory_Modify 1C9C  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 0554  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1D11               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$6468 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6465 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 0802                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1B1A  
              _setDimmerIntr_DimmingValue 1B0E               __end_of_Flash_Memory_Modify 0B82  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 1111  
             __end_of_Flash_Memory_Unlock 1AA8                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1FB8                        __end_of_setSw_Main 0389  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1E62                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 0802   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0801                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A17  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1B32  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1A27                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A2B                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C09  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1B6E  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 102E  
                 __end_of_CC2500_ReadByte 1EB7              __end_of_setSw_Initialization 1BB8  
                         _Timeout_Counter 1D26           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1B99  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1A2F  
          __end_of_setTemp_Initialization 0800                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1A1A  
               __size_of_setRF_AdjControl 002F                     __end_of_CC2500_RxData 1800  
                   __end_of_CC2500_TxData 08B2                     _setLoad_AH_AL_Restore 1E7E  
                 __end_of_CC2500_PowerRST 0846  
