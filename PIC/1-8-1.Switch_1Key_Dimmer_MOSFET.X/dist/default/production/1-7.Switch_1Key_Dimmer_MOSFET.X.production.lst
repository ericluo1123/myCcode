

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Dec 06 16:27:49 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	intentry,global,class=CODE,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	dabs	1,0x7E,2
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0008                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  011D                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0194                     	;# 
   215  0195                     	;# 
   216  0196                     	;# 
   217  0197                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019C                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  020D                     	;# 
   230  0210                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0216                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0217                     	;# 
   246  0291                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0293                     	;# 
   250  0298                     	;# 
   251  0298                     	;# 
   252  0299                     	;# 
   253  029A                     	;# 
   254  0394                     	;# 
   255  0395                     	;# 
   256  0396                     	;# 
   257  0FE4                     	;# 
   258  0FE5                     	;# 
   259  0FE6                     	;# 
   260  0FE7                     	;# 
   261  0FE8                     	;# 
   262  0FE9                     	;# 
   263  0FEA                     	;# 
   264  0FEB                     	;# 
   265  0FED                     	;# 
   266  0FEE                     	;# 
   267  0FEF                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0095                     	;# 
   302  0096                     	;# 
   303  0097                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  011D                     	;# 
   317  018C                     	;# 
   318  018D                     	;# 
   319  018E                     	;# 
   320  0191                     	;# 
   321  0191                     	;# 
   322  0192                     	;# 
   323  0193                     	;# 
   324  0193                     	;# 
   325  0194                     	;# 
   326  0195                     	;# 
   327  0196                     	;# 
   328  0197                     	;# 
   329  0199                     	;# 
   330  019A                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020D                     	;# 
   341  0210                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0298                     	;# 
   362  0298                     	;# 
   363  0299                     	;# 
   364  029A                     	;# 
   365  0394                     	;# 
   366  0395                     	;# 
   367  0396                     	;# 
   368  0FE4                     	;# 
   369  0FE5                     	;# 
   370  0FE6                     	;# 
   371  0FE7                     	;# 
   372  0FE8                     	;# 
   373  0FE9                     	;# 
   374  0FEA                     	;# 
   375  0FEB                     	;# 
   376  0FED                     	;# 
   377  0FEE                     	;# 
   378  0FEF                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0095                     	;# 
   413  0096                     	;# 
   414  0097                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009B                     	;# 
   419  009C                     	;# 
   420  009D                     	;# 
   421  009E                     	;# 
   422  010C                     	;# 
   423  010D                     	;# 
   424  010E                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  011D                     	;# 
   428  018C                     	;# 
   429  018D                     	;# 
   430  018E                     	;# 
   431  0191                     	;# 
   432  0191                     	;# 
   433  0192                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0194                     	;# 
   437  0195                     	;# 
   438  0196                     	;# 
   439  0197                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020D                     	;# 
   452  0210                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0291                     	;# 
   469  0291                     	;# 
   470  0292                     	;# 
   471  0293                     	;# 
   472  0298                     	;# 
   473  0298                     	;# 
   474  0299                     	;# 
   475  029A                     	;# 
   476  0394                     	;# 
   477  0395                     	;# 
   478  0396                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  0010                     	;# 
   506  0011                     	;# 
   507  0012                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  0090                     	;# 
   521  0091                     	;# 
   522  0092                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0099                     	;# 
   527  009A                     	;# 
   528  009B                     	;# 
   529  009B                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  010C                     	;# 
   534  010D                     	;# 
   535  010E                     	;# 
   536  0116                     	;# 
   537  0117                     	;# 
   538  011D                     	;# 
   539  018C                     	;# 
   540  018D                     	;# 
   541  018E                     	;# 
   542  0191                     	;# 
   543  0191                     	;# 
   544  0192                     	;# 
   545  0193                     	;# 
   546  0193                     	;# 
   547  0194                     	;# 
   548  0195                     	;# 
   549  0196                     	;# 
   550  0197                     	;# 
   551  0199                     	;# 
   552  019A                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019C                     	;# 
   558  019C                     	;# 
   559  019D                     	;# 
   560  019E                     	;# 
   561  019F                     	;# 
   562  020D                     	;# 
   563  0210                     	;# 
   564  0211                     	;# 
   565  0211                     	;# 
   566  0212                     	;# 
   567  0212                     	;# 
   568  0213                     	;# 
   569  0213                     	;# 
   570  0214                     	;# 
   571  0214                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0216                     	;# 
   576  0216                     	;# 
   577  0217                     	;# 
   578  0217                     	;# 
   579  0291                     	;# 
   580  0291                     	;# 
   581  0292                     	;# 
   582  0293                     	;# 
   583  0298                     	;# 
   584  0298                     	;# 
   585  0299                     	;# 
   586  029A                     	;# 
   587  0394                     	;# 
   588  0395                     	;# 
   589  0396                     	;# 
   590  0FE4                     	;# 
   591  0FE5                     	;# 
   592  0FE6                     	;# 
   593  0FE7                     	;# 
   594  0FE8                     	;# 
   595  0FE9                     	;# 
   596  0FEA                     	;# 
   597  0FEB                     	;# 
   598  0FED                     	;# 
   599  0FEE                     	;# 
   600  0FEF                     	;# 
   601  0000                     	;# 
   602  0001                     	;# 
   603  0002                     	;# 
   604  0003                     	;# 
   605  0004                     	;# 
   606  0005                     	;# 
   607  0006                     	;# 
   608  0007                     	;# 
   609  0008                     	;# 
   610  0009                     	;# 
   611  000A                     	;# 
   612  000B                     	;# 
   613  000C                     	;# 
   614  000D                     	;# 
   615  000E                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0015                     	;# 
   620  0016                     	;# 
   621  0016                     	;# 
   622  0017                     	;# 
   623  0018                     	;# 
   624  0019                     	;# 
   625  001A                     	;# 
   626  001B                     	;# 
   627  001C                     	;# 
   628  008C                     	;# 
   629  008D                     	;# 
   630  008E                     	;# 
   631  0090                     	;# 
   632  0091                     	;# 
   633  0092                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  0199                     	;# 
   663  019A                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019C                     	;# 
   669  019C                     	;# 
   670  019D                     	;# 
   671  019E                     	;# 
   672  019F                     	;# 
   673  020D                     	;# 
   674  0210                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0216                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0217                     	;# 
   690  0291                     	;# 
   691  0291                     	;# 
   692  0292                     	;# 
   693  0293                     	;# 
   694  0298                     	;# 
   695  0298                     	;# 
   696  0299                     	;# 
   697  029A                     	;# 
   698  0394                     	;# 
   699  0395                     	;# 
   700  0396                     	;# 
   701  0FE4                     	;# 
   702  0FE5                     	;# 
   703  0FE6                     	;# 
   704  0FE7                     	;# 
   705  0FE8                     	;# 
   706  0FE9                     	;# 
   707  0FEA                     	;# 
   708  0FEB                     	;# 
   709  0FED                     	;# 
   710  0FEE                     	;# 
   711  0FEF                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  0010                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0095                     	;# 
   746  0096                     	;# 
   747  0097                     	;# 
   748  0099                     	;# 
   749  009A                     	;# 
   750  009B                     	;# 
   751  009B                     	;# 
   752  009C                     	;# 
   753  009D                     	;# 
   754  009E                     	;# 
   755  010C                     	;# 
   756  010D                     	;# 
   757  010E                     	;# 
   758  0116                     	;# 
   759  0117                     	;# 
   760  011D                     	;# 
   761  018C                     	;# 
   762  018D                     	;# 
   763  018E                     	;# 
   764  0191                     	;# 
   765  0191                     	;# 
   766  0192                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0194                     	;# 
   770  0195                     	;# 
   771  0196                     	;# 
   772  0197                     	;# 
   773  0199                     	;# 
   774  019A                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019C                     	;# 
   780  019C                     	;# 
   781  019D                     	;# 
   782  019E                     	;# 
   783  019F                     	;# 
   784  020D                     	;# 
   785  0210                     	;# 
   786  0211                     	;# 
   787  0211                     	;# 
   788  0212                     	;# 
   789  0212                     	;# 
   790  0213                     	;# 
   791  0213                     	;# 
   792  0214                     	;# 
   793  0214                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0216                     	;# 
   798  0216                     	;# 
   799  0217                     	;# 
   800  0217                     	;# 
   801  0291                     	;# 
   802  0291                     	;# 
   803  0292                     	;# 
   804  0293                     	;# 
   805  0298                     	;# 
   806  0298                     	;# 
   807  0299                     	;# 
   808  029A                     	;# 
   809  0394                     	;# 
   810  0395                     	;# 
   811  0396                     	;# 
   812  0FE4                     	;# 
   813  0FE5                     	;# 
   814  0FE6                     	;# 
   815  0FE7                     	;# 
   816  0FE8                     	;# 
   817  0FE9                     	;# 
   818  0FEA                     	;# 
   819  0FEB                     	;# 
   820  0FED                     	;# 
   821  0FEE                     	;# 
   822  0FEF                     	;# 
   823  0000                     	;# 
   824  0001                     	;# 
   825  0002                     	;# 
   826  0003                     	;# 
   827  0004                     	;# 
   828  0005                     	;# 
   829  0006                     	;# 
   830  0007                     	;# 
   831  0008                     	;# 
   832  0009                     	;# 
   833  000A                     	;# 
   834  000B                     	;# 
   835  000C                     	;# 
   836  000D                     	;# 
   837  000E                     	;# 
   838  0010                     	;# 
   839  0011                     	;# 
   840  0012                     	;# 
   841  0015                     	;# 
   842  0016                     	;# 
   843  0016                     	;# 
   844  0017                     	;# 
   845  0018                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  0090                     	;# 
   854  0091                     	;# 
   855  0092                     	;# 
   856  0095                     	;# 
   857  0096                     	;# 
   858  0097                     	;# 
   859  0099                     	;# 
   860  009A                     	;# 
   861  009B                     	;# 
   862  009B                     	;# 
   863  009C                     	;# 
   864  009D                     	;# 
   865  009E                     	;# 
   866  010C                     	;# 
   867  010D                     	;# 
   868  010E                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  011D                     	;# 
   872  018C                     	;# 
   873  018D                     	;# 
   874  018E                     	;# 
   875  0191                     	;# 
   876  0191                     	;# 
   877  0192                     	;# 
   878  0193                     	;# 
   879  0193                     	;# 
   880  0194                     	;# 
   881  0195                     	;# 
   882  0196                     	;# 
   883  0197                     	;# 
   884  0199                     	;# 
   885  019A                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019C                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019F                     	;# 
   895  020D                     	;# 
   896  0210                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  0291                     	;# 
   913  0291                     	;# 
   914  0292                     	;# 
   915  0293                     	;# 
   916  0298                     	;# 
   917  0298                     	;# 
   918  0299                     	;# 
   919  029A                     	;# 
   920  0394                     	;# 
   921  0395                     	;# 
   922  0396                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0010                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0090                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  010C                     	;# 
   978  010D                     	;# 
   979  010E                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  011D                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  018E                     	;# 
   986  0191                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0197                     	;# 
   995  0199                     	;# 
   996  019A                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019C                     	;# 
  1002  019C                     	;# 
  1003  019D                     	;# 
  1004  019E                     	;# 
  1005  019F                     	;# 
  1006  020D                     	;# 
  1007  0210                     	;# 
  1008  0211                     	;# 
  1009  0211                     	;# 
  1010  0212                     	;# 
  1011  0212                     	;# 
  1012  0213                     	;# 
  1013  0213                     	;# 
  1014  0214                     	;# 
  1015  0214                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0216                     	;# 
  1020  0216                     	;# 
  1021  0217                     	;# 
  1022  0217                     	;# 
  1023  0291                     	;# 
  1024  0291                     	;# 
  1025  0292                     	;# 
  1026  0293                     	;# 
  1027  0298                     	;# 
  1028  0298                     	;# 
  1029  0299                     	;# 
  1030  029A                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  008E                     	;# 
  1075  0090                     	;# 
  1076  0091                     	;# 
  1077  0092                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  010E                     	;# 
  1091  0116                     	;# 
  1092  0117                     	;# 
  1093  011D                     	;# 
  1094  018C                     	;# 
  1095  018D                     	;# 
  1096  018E                     	;# 
  1097  0191                     	;# 
  1098  0191                     	;# 
  1099  0192                     	;# 
  1100  0193                     	;# 
  1101  0193                     	;# 
  1102  0194                     	;# 
  1103  0195                     	;# 
  1104  0196                     	;# 
  1105  0197                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019C                     	;# 
  1113  019C                     	;# 
  1114  019D                     	;# 
  1115  019E                     	;# 
  1116  019F                     	;# 
  1117  020D                     	;# 
  1118  0210                     	;# 
  1119  0211                     	;# 
  1120  0211                     	;# 
  1121  0212                     	;# 
  1122  0212                     	;# 
  1123  0213                     	;# 
  1124  0213                     	;# 
  1125  0214                     	;# 
  1126  0214                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0216                     	;# 
  1131  0216                     	;# 
  1132  0217                     	;# 
  1133  0217                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0298                     	;# 
  1139  0298                     	;# 
  1140  0299                     	;# 
  1141  029A                     	;# 
  1142  0394                     	;# 
  1143  0395                     	;# 
  1144  0396                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156  0000                     	;# 
  1157  0001                     	;# 
  1158  0002                     	;# 
  1159  0003                     	;# 
  1160  0004                     	;# 
  1161  0005                     	;# 
  1162  0006                     	;# 
  1163  0007                     	;# 
  1164  0008                     	;# 
  1165  0009                     	;# 
  1166  000A                     	;# 
  1167  000B                     	;# 
  1168  000C                     	;# 
  1169  000D                     	;# 
  1170  000E                     	;# 
  1171  0010                     	;# 
  1172  0011                     	;# 
  1173  0012                     	;# 
  1174  0015                     	;# 
  1175  0016                     	;# 
  1176  0016                     	;# 
  1177  0017                     	;# 
  1178  0018                     	;# 
  1179  0019                     	;# 
  1180  001A                     	;# 
  1181  001B                     	;# 
  1182  001C                     	;# 
  1183  008C                     	;# 
  1184  008D                     	;# 
  1185  008E                     	;# 
  1186  0090                     	;# 
  1187  0091                     	;# 
  1188  0092                     	;# 
  1189  0095                     	;# 
  1190  0096                     	;# 
  1191  0097                     	;# 
  1192  0099                     	;# 
  1193  009A                     	;# 
  1194  009B                     	;# 
  1195  009B                     	;# 
  1196  009C                     	;# 
  1197  009D                     	;# 
  1198  009E                     	;# 
  1199  010C                     	;# 
  1200  010D                     	;# 
  1201  010E                     	;# 
  1202  0116                     	;# 
  1203  0117                     	;# 
  1204  011D                     	;# 
  1205  018C                     	;# 
  1206  018D                     	;# 
  1207  018E                     	;# 
  1208  0191                     	;# 
  1209  0191                     	;# 
  1210  0192                     	;# 
  1211  0193                     	;# 
  1212  0193                     	;# 
  1213  0194                     	;# 
  1214  0195                     	;# 
  1215  0196                     	;# 
  1216  0197                     	;# 
  1217  0199                     	;# 
  1218  019A                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019C                     	;# 
  1224  019C                     	;# 
  1225  019D                     	;# 
  1226  019E                     	;# 
  1227  019F                     	;# 
  1228  020D                     	;# 
  1229  0210                     	;# 
  1230  0211                     	;# 
  1231  0211                     	;# 
  1232  0212                     	;# 
  1233  0212                     	;# 
  1234  0213                     	;# 
  1235  0213                     	;# 
  1236  0214                     	;# 
  1237  0214                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  0394                     	;# 
  1254  0395                     	;# 
  1255  0396                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  0010                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0015                     	;# 
  1286  0016                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001C                     	;# 
  1294  008C                     	;# 
  1295  008D                     	;# 
  1296  008E                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0095                     	;# 
  1301  0096                     	;# 
  1302  0097                     	;# 
  1303  0099                     	;# 
  1304  009A                     	;# 
  1305  009B                     	;# 
  1306  009B                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009E                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010E                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  011D                     	;# 
  1316  018C                     	;# 
  1317  018D                     	;# 
  1318  018E                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0194                     	;# 
  1325  0195                     	;# 
  1326  0196                     	;# 
  1327  0197                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019C                     	;# 
  1335  019C                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  020D                     	;# 
  1340  0210                     	;# 
  1341  0211                     	;# 
  1342  0211                     	;# 
  1343  0212                     	;# 
  1344  0212                     	;# 
  1345  0213                     	;# 
  1346  0213                     	;# 
  1347  0214                     	;# 
  1348  0214                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0216                     	;# 
  1353  0216                     	;# 
  1354  0217                     	;# 
  1355  0217                     	;# 
  1356  0291                     	;# 
  1357  0291                     	;# 
  1358  0292                     	;# 
  1359  0293                     	;# 
  1360  0298                     	;# 
  1361  0298                     	;# 
  1362  0299                     	;# 
  1363  029A                     	;# 
  1364  0394                     	;# 
  1365  0395                     	;# 
  1366  0396                     	;# 
  1367  0FE4                     	;# 
  1368  0FE5                     	;# 
  1369  0FE6                     	;# 
  1370  0FE7                     	;# 
  1371  0FE8                     	;# 
  1372  0FE9                     	;# 
  1373  0FEA                     	;# 
  1374  0FEB                     	;# 
  1375  0FED                     	;# 
  1376  0FEE                     	;# 
  1377  0FEF                     	;# 
  1378  0000                     	;# 
  1379  0001                     	;# 
  1380  0002                     	;# 
  1381  0003                     	;# 
  1382  0004                     	;# 
  1383  0005                     	;# 
  1384  0006                     	;# 
  1385  0007                     	;# 
  1386  0008                     	;# 
  1387  0009                     	;# 
  1388  000A                     	;# 
  1389  000B                     	;# 
  1390  000C                     	;# 
  1391  000D                     	;# 
  1392  000E                     	;# 
  1393  0010                     	;# 
  1394  0011                     	;# 
  1395  0012                     	;# 
  1396  0015                     	;# 
  1397  0016                     	;# 
  1398  0016                     	;# 
  1399  0017                     	;# 
  1400  0018                     	;# 
  1401  0019                     	;# 
  1402  001A                     	;# 
  1403  001B                     	;# 
  1404  001C                     	;# 
  1405  008C                     	;# 
  1406  008D                     	;# 
  1407  008E                     	;# 
  1408  0090                     	;# 
  1409  0091                     	;# 
  1410  0092                     	;# 
  1411  0095                     	;# 
  1412  0096                     	;# 
  1413  0097                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  010C                     	;# 
  1422  010D                     	;# 
  1423  010E                     	;# 
  1424  0116                     	;# 
  1425  0117                     	;# 
  1426  011D                     	;# 
  1427  018C                     	;# 
  1428  018D                     	;# 
  1429  018E                     	;# 
  1430  0191                     	;# 
  1431  0191                     	;# 
  1432  0192                     	;# 
  1433  0193                     	;# 
  1434  0193                     	;# 
  1435  0194                     	;# 
  1436  0195                     	;# 
  1437  0196                     	;# 
  1438  0197                     	;# 
  1439  0199                     	;# 
  1440  019A                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019C                     	;# 
  1446  019C                     	;# 
  1447  019D                     	;# 
  1448  019E                     	;# 
  1449  019F                     	;# 
  1450  020D                     	;# 
  1451  0210                     	;# 
  1452  0211                     	;# 
  1453  0211                     	;# 
  1454  0212                     	;# 
  1455  0212                     	;# 
  1456  0213                     	;# 
  1457  0213                     	;# 
  1458  0214                     	;# 
  1459  0214                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0216                     	;# 
  1464  0216                     	;# 
  1465  0217                     	;# 
  1466  0217                     	;# 
  1467  0291                     	;# 
  1468  0291                     	;# 
  1469  0292                     	;# 
  1470  0293                     	;# 
  1471  0298                     	;# 
  1472  0298                     	;# 
  1473  0299                     	;# 
  1474  029A                     	;# 
  1475  0394                     	;# 
  1476  0395                     	;# 
  1477  0396                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  0090                     	;# 
  1520  0091                     	;# 
  1521  0092                     	;# 
  1522  0095                     	;# 
  1523  0096                     	;# 
  1524  0097                     	;# 
  1525  0099                     	;# 
  1526  009A                     	;# 
  1527  009B                     	;# 
  1528  009B                     	;# 
  1529  009C                     	;# 
  1530  009D                     	;# 
  1531  009E                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0197                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020D                     	;# 
  1562  0210                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0298                     	;# 
  1583  0298                     	;# 
  1584  0299                     	;# 
  1585  029A                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0011                     	;# 
  1617  0012                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  008C                     	;# 
  1628  008D                     	;# 
  1629  008E                     	;# 
  1630  0090                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0095                     	;# 
  1634  0096                     	;# 
  1635  0097                     	;# 
  1636  0099                     	;# 
  1637  009A                     	;# 
  1638  009B                     	;# 
  1639  009B                     	;# 
  1640  009C                     	;# 
  1641  009D                     	;# 
  1642  009E                     	;# 
  1643  010C                     	;# 
  1644  010D                     	;# 
  1645  010E                     	;# 
  1646  0116                     	;# 
  1647  0117                     	;# 
  1648  011D                     	;# 
  1649  018C                     	;# 
  1650  018D                     	;# 
  1651  018E                     	;# 
  1652  0191                     	;# 
  1653  0191                     	;# 
  1654  0192                     	;# 
  1655  0193                     	;# 
  1656  0193                     	;# 
  1657  0194                     	;# 
  1658  0195                     	;# 
  1659  0196                     	;# 
  1660  0197                     	;# 
  1661  0199                     	;# 
  1662  019A                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  019C                     	;# 
  1669  019D                     	;# 
  1670  019E                     	;# 
  1671  019F                     	;# 
  1672  020D                     	;# 
  1673  0210                     	;# 
  1674  0211                     	;# 
  1675  0211                     	;# 
  1676  0212                     	;# 
  1677  0212                     	;# 
  1678  0213                     	;# 
  1679  0213                     	;# 
  1680  0214                     	;# 
  1681  0214                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0216                     	;# 
  1686  0216                     	;# 
  1687  0217                     	;# 
  1688  0217                     	;# 
  1689  0291                     	;# 
  1690  0291                     	;# 
  1691  0292                     	;# 
  1692  0293                     	;# 
  1693  0298                     	;# 
  1694  0298                     	;# 
  1695  0299                     	;# 
  1696  029A                     	;# 
  1697  0394                     	;# 
  1698  0395                     	;# 
  1699  0396                     	;# 
  1700  0FE4                     	;# 
  1701  0FE5                     	;# 
  1702  0FE6                     	;# 
  1703  0FE7                     	;# 
  1704  0FE8                     	;# 
  1705  0FE9                     	;# 
  1706  0FEA                     	;# 
  1707  0FEB                     	;# 
  1708  0FED                     	;# 
  1709  0FEE                     	;# 
  1710  0FEF                     	;# 
  1711  0000                     	;# 
  1712  0001                     	;# 
  1713  0002                     	;# 
  1714  0003                     	;# 
  1715  0004                     	;# 
  1716  0005                     	;# 
  1717  0006                     	;# 
  1718  0007                     	;# 
  1719  0008                     	;# 
  1720  0009                     	;# 
  1721  000A                     	;# 
  1722  000B                     	;# 
  1723  000C                     	;# 
  1724  000D                     	;# 
  1725  000E                     	;# 
  1726  0010                     	;# 
  1727  0011                     	;# 
  1728  0012                     	;# 
  1729  0015                     	;# 
  1730  0016                     	;# 
  1731  0016                     	;# 
  1732  0017                     	;# 
  1733  0018                     	;# 
  1734  0019                     	;# 
  1735  001A                     	;# 
  1736  001B                     	;# 
  1737  001C                     	;# 
  1738  008C                     	;# 
  1739  008D                     	;# 
  1740  008E                     	;# 
  1741  0090                     	;# 
  1742  0091                     	;# 
  1743  0092                     	;# 
  1744  0095                     	;# 
  1745  0096                     	;# 
  1746  0097                     	;# 
  1747  0099                     	;# 
  1748  009A                     	;# 
  1749  009B                     	;# 
  1750  009B                     	;# 
  1751  009C                     	;# 
  1752  009D                     	;# 
  1753  009E                     	;# 
  1754  010C                     	;# 
  1755  010D                     	;# 
  1756  010E                     	;# 
  1757  0116                     	;# 
  1758  0117                     	;# 
  1759  011D                     	;# 
  1760  018C                     	;# 
  1761  018D                     	;# 
  1762  018E                     	;# 
  1763  0191                     	;# 
  1764  0191                     	;# 
  1765  0192                     	;# 
  1766  0193                     	;# 
  1767  0193                     	;# 
  1768  0194                     	;# 
  1769  0195                     	;# 
  1770  0196                     	;# 
  1771  0197                     	;# 
  1772  0199                     	;# 
  1773  019A                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019C                     	;# 
  1779  019C                     	;# 
  1780  019D                     	;# 
  1781  019E                     	;# 
  1782  019F                     	;# 
  1783  020D                     	;# 
  1784  0210                     	;# 
  1785  0211                     	;# 
  1786  0211                     	;# 
  1787  0212                     	;# 
  1788  0212                     	;# 
  1789  0213                     	;# 
  1790  0213                     	;# 
  1791  0214                     	;# 
  1792  0214                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0216                     	;# 
  1797  0216                     	;# 
  1798  0217                     	;# 
  1799  0217                     	;# 
  1800  0291                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0298                     	;# 
  1805  0298                     	;# 
  1806  0299                     	;# 
  1807  029A                     	;# 
  1808  0394                     	;# 
  1809  0395                     	;# 
  1810  0396                     	;# 
  1811  0FE4                     	;# 
  1812  0FE5                     	;# 
  1813  0FE6                     	;# 
  1814  0FE7                     	;# 
  1815  0FE8                     	;# 
  1816  0FE9                     	;# 
  1817  0FEA                     	;# 
  1818  0FEB                     	;# 
  1819  0FED                     	;# 
  1820  0FEE                     	;# 
  1821  0FEF                     	;# 
  1822  0000                     	;# 
  1823  0001                     	;# 
  1824  0002                     	;# 
  1825  0003                     	;# 
  1826  0004                     	;# 
  1827  0005                     	;# 
  1828  0006                     	;# 
  1829  0007                     	;# 
  1830  0008                     	;# 
  1831  0009                     	;# 
  1832  000A                     	;# 
  1833  000B                     	;# 
  1834  000C                     	;# 
  1835  000D                     	;# 
  1836  000E                     	;# 
  1837  0010                     	;# 
  1838  0011                     	;# 
  1839  0012                     	;# 
  1840  0015                     	;# 
  1841  0016                     	;# 
  1842  0016                     	;# 
  1843  0017                     	;# 
  1844  0018                     	;# 
  1845  0019                     	;# 
  1846  001A                     	;# 
  1847  001B                     	;# 
  1848  001C                     	;# 
  1849  008C                     	;# 
  1850  008D                     	;# 
  1851  008E                     	;# 
  1852  0090                     	;# 
  1853  0091                     	;# 
  1854  0092                     	;# 
  1855  0095                     	;# 
  1856  0096                     	;# 
  1857  0097                     	;# 
  1858  0099                     	;# 
  1859  009A                     	;# 
  1860  009B                     	;# 
  1861  009B                     	;# 
  1862  009C                     	;# 
  1863  009D                     	;# 
  1864  009E                     	;# 
  1865  010C                     	;# 
  1866  010D                     	;# 
  1867  010E                     	;# 
  1868  0116                     	;# 
  1869  0117                     	;# 
  1870  011D                     	;# 
  1871  018C                     	;# 
  1872  018D                     	;# 
  1873  018E                     	;# 
  1874  0191                     	;# 
  1875  0191                     	;# 
  1876  0192                     	;# 
  1877  0193                     	;# 
  1878  0193                     	;# 
  1879  0194                     	;# 
  1880  0195                     	;# 
  1881  0196                     	;# 
  1882  0197                     	;# 
  1883  0199                     	;# 
  1884  019A                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019C                     	;# 
  1890  019C                     	;# 
  1891  019D                     	;# 
  1892  019E                     	;# 
  1893  019F                     	;# 
  1894  020D                     	;# 
  1895  0210                     	;# 
  1896  0211                     	;# 
  1897  0211                     	;# 
  1898  0212                     	;# 
  1899  0212                     	;# 
  1900  0213                     	;# 
  1901  0213                     	;# 
  1902  0214                     	;# 
  1903  0214                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0216                     	;# 
  1908  0216                     	;# 
  1909  0217                     	;# 
  1910  0217                     	;# 
  1911  0291                     	;# 
  1912  0291                     	;# 
  1913  0292                     	;# 
  1914  0293                     	;# 
  1915  0298                     	;# 
  1916  0298                     	;# 
  1917  0299                     	;# 
  1918  029A                     	;# 
  1919  0394                     	;# 
  1920  0395                     	;# 
  1921  0396                     	;# 
  1922  0FE4                     	;# 
  1923  0FE5                     	;# 
  1924  0FE6                     	;# 
  1925  0FE7                     	;# 
  1926  0FE8                     	;# 
  1927  0FE9                     	;# 
  1928  0FEA                     	;# 
  1929  0FEB                     	;# 
  1930  0FED                     	;# 
  1931  0FEE                     	;# 
  1932  0FEF                     	;# 
  1933  0000                     	;# 
  1934  0001                     	;# 
  1935  0002                     	;# 
  1936  0003                     	;# 
  1937  0004                     	;# 
  1938  0005                     	;# 
  1939  0006                     	;# 
  1940  0007                     	;# 
  1941  0008                     	;# 
  1942  0009                     	;# 
  1943  000A                     	;# 
  1944  000B                     	;# 
  1945  000C                     	;# 
  1946  000D                     	;# 
  1947  000E                     	;# 
  1948  0010                     	;# 
  1949  0011                     	;# 
  1950  0012                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  0090                     	;# 
  1964  0091                     	;# 
  1965  0092                     	;# 
  1966  0095                     	;# 
  1967  0096                     	;# 
  1968  0097                     	;# 
  1969  0099                     	;# 
  1970  009A                     	;# 
  1971  009B                     	;# 
  1972  009B                     	;# 
  1973  009C                     	;# 
  1974  009D                     	;# 
  1975  009E                     	;# 
  1976  010C                     	;# 
  1977  010D                     	;# 
  1978  010E                     	;# 
  1979  0116                     	;# 
  1980  0117                     	;# 
  1981  011D                     	;# 
  1982  018C                     	;# 
  1983  018D                     	;# 
  1984  018E                     	;# 
  1985  0191                     	;# 
  1986  0191                     	;# 
  1987  0192                     	;# 
  1988  0193                     	;# 
  1989  0193                     	;# 
  1990  0194                     	;# 
  1991  0195                     	;# 
  1992  0196                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  019A                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019C                     	;# 
  2001  019C                     	;# 
  2002  019D                     	;# 
  2003  019E                     	;# 
  2004  019F                     	;# 
  2005  020D                     	;# 
  2006  0210                     	;# 
  2007  0211                     	;# 
  2008  0211                     	;# 
  2009  0212                     	;# 
  2010  0212                     	;# 
  2011  0213                     	;# 
  2012  0213                     	;# 
  2013  0214                     	;# 
  2014  0214                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0216                     	;# 
  2019  0216                     	;# 
  2020  0217                     	;# 
  2021  0217                     	;# 
  2022  0291                     	;# 
  2023  0291                     	;# 
  2024  0292                     	;# 
  2025  0293                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  0394                     	;# 
  2031  0395                     	;# 
  2032  0396                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;# 
  2044  0000                     	;# 
  2045  0001                     	;# 
  2046  0002                     	;# 
  2047  0003                     	;# 
  2048  0004                     	;# 
  2049  0005                     	;# 
  2050  0006                     	;# 
  2051  0007                     	;# 
  2052  0008                     	;# 
  2053  0009                     	;# 
  2054  000A                     	;# 
  2055  000B                     	;# 
  2056  000C                     	;# 
  2057  000D                     	;# 
  2058  000E                     	;# 
  2059  0010                     	;# 
  2060  0011                     	;# 
  2061  0012                     	;# 
  2062  0015                     	;# 
  2063  0016                     	;# 
  2064  0016                     	;# 
  2065  0017                     	;# 
  2066  0018                     	;# 
  2067  0019                     	;# 
  2068  001A                     	;# 
  2069  001B                     	;# 
  2070  001C                     	;# 
  2071  008C                     	;# 
  2072  008D                     	;# 
  2073  008E                     	;# 
  2074  0090                     	;# 
  2075  0091                     	;# 
  2076  0092                     	;# 
  2077  0095                     	;# 
  2078  0096                     	;# 
  2079  0097                     	;# 
  2080  0099                     	;# 
  2081  009A                     	;# 
  2082  009B                     	;# 
  2083  009B                     	;# 
  2084  009C                     	;# 
  2085  009D                     	;# 
  2086  009E                     	;# 
  2087  010C                     	;# 
  2088  010D                     	;# 
  2089  010E                     	;# 
  2090  0116                     	;# 
  2091  0117                     	;# 
  2092  011D                     	;# 
  2093  018C                     	;# 
  2094  018D                     	;# 
  2095  018E                     	;# 
  2096  0191                     	;# 
  2097  0191                     	;# 
  2098  0192                     	;# 
  2099  0193                     	;# 
  2100  0193                     	;# 
  2101  0194                     	;# 
  2102  0195                     	;# 
  2103  0196                     	;# 
  2104  0197                     	;# 
  2105  0199                     	;# 
  2106  019A                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019C                     	;# 
  2112  019C                     	;# 
  2113  019D                     	;# 
  2114  019E                     	;# 
  2115  019F                     	;# 
  2116  020D                     	;# 
  2117  0210                     	;# 
  2118  0211                     	;# 
  2119  0211                     	;# 
  2120  0212                     	;# 
  2121  0212                     	;# 
  2122  0213                     	;# 
  2123  0213                     	;# 
  2124  0214                     	;# 
  2125  0214                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0216                     	;# 
  2130  0216                     	;# 
  2131  0217                     	;# 
  2132  0217                     	;# 
  2133  0291                     	;# 
  2134  0291                     	;# 
  2135  0292                     	;# 
  2136  0293                     	;# 
  2137  0298                     	;# 
  2138  0298                     	;# 
  2139  0299                     	;# 
  2140  029A                     	;# 
  2141  0394                     	;# 
  2142  0395                     	;# 
  2143  0396                     	;# 
  2144  0FE4                     	;# 
  2145  0FE5                     	;# 
  2146  0FE6                     	;# 
  2147  0FE7                     	;# 
  2148  0FE8                     	;# 
  2149  0FE9                     	;# 
  2150  0FEA                     	;# 
  2151  0FEB                     	;# 
  2152  0FED                     	;# 
  2153  0FEE                     	;# 
  2154  0FEF                     	;# 
  2155                           
  2156                           	psect	idataBANK4
  2157  1F34                     __pidataBANK4:	
  2158                           
  2159                           ;initializer for __product
  2160  1F34  3463               	retlw	99
  2161  1F35  3402               	retlw	2
  2162  1F36  3400               	retlw	0
  2163  1F37  3400               	retlw	0
  2164  1F38  3400               	retlw	0
  2165  1F39  3400               	retlw	0
  2166  1F3A  3400               	retlw	0
  2167  1F3B  3400               	retlw	0
  2168  1F3C  3400               	retlw	0
  2169  1F3D  3400               	retlw	0
  2170  1F3E  3400               	retlw	0
  2171  1F3F  3400               	retlw	0
  2172  1F40  34FF               	retlw	255
  2173  1F41  34FF               	retlw	255
  2174  1F42  34FF               	retlw	255
  2175  1F43  3400               	retlw	0
  2176  1F44  3400               	retlw	0
  2177  1F45  3400               	retlw	0
  2178  1F46  3400               	retlw	0
  2179  1F47  3400               	retlw	0
  2180  1F48  3400               	retlw	0
  2181  1F49  3400               	retlw	0
  2182  1F4A  3400               	retlw	0
  2183  1F4B  3400               	retlw	0
  2184  1F4C  3400               	retlw	0
  2185  1F4D  3400               	retlw	0
  2186  1F4E  3400               	retlw	0
  2187  1F4F  3400               	retlw	0
  2188  1F50  3400               	retlw	0
  2189  1F51  3400               	retlw	0
  2190  1F52  3400               	retlw	0
  2191  1F53  3400               	retlw	0
  2192                           
  2193                           	psect	stringtext
  2194  1000                     __pstringtext:	
  2195  1000                     _CC2500_registers_address:	
  2196  1000  3403               	retlw	3
  2197  1001  3416               	retlw	22
  2198  1002  3417               	retlw	23
  2199  1003  341E               	retlw	30
  2200  1004  341F               	retlw	31
  2201  1005  3420               	retlw	32
  2202  1006  342A               	retlw	42
  2203  1007  342B               	retlw	43
  2204  1008  340B               	retlw	11
  2205  1009  340C               	retlw	12
  2206  100A  340D               	retlw	13
  2207  100B  340E               	retlw	14
  2208  100C  340F               	retlw	15
  2209  100D  3410               	retlw	16
  2210  100E  3411               	retlw	17
  2211  100F  3412               	retlw	18
  2212  1010  3413               	retlw	19
  2213  1011  3414               	retlw	20
  2214  1012  340A               	retlw	10
  2215  1013  3415               	retlw	21
  2216  1014  3421               	retlw	33
  2217  1015  3422               	retlw	34
  2218  1016  3418               	retlw	24
  2219  1017  3419               	retlw	25
  2220  1018  341A               	retlw	26
  2221  1019  341B               	retlw	27
  2222  101A  341C               	retlw	28
  2223  101B  341D               	retlw	29
  2224  101C  3423               	retlw	35
  2225  101D  3424               	retlw	36
  2226  101E  3425               	retlw	37
  2227  101F  3426               	retlw	38
  2228  1020  3429               	retlw	41
  2229  1021  342C               	retlw	44
  2230  1022  342D               	retlw	45
  2231  1023  342E               	retlw	46
  2232  1024  3400               	retlw	0
  2233  1025  3401               	retlw	1
  2234  1026  3402               	retlw	2
  2235  1027  3407               	retlw	7
  2236  1028  3408               	retlw	8
  2237  1029  3409               	retlw	9
  2238  102A  3406               	retlw	6
  2239  102B  3404               	retlw	4
  2240  102C  3405               	retlw	5
  2241  102D  3427               	retlw	39
  2242  102E  3428               	retlw	40
  2243  102F                     __end_of_CC2500_registers_address:	
  2244  102F                     _CC2500_rfSettings:	
  2245  102F  3407               	retlw	7
  2246  1030  3407               	retlw	7
  2247  1031  3430               	retlw	48
  2248  1032  3487               	retlw	135
  2249  1033  346B               	retlw	107
  2250  1034  34F8               	retlw	248
  2251  1035  347F               	retlw	127
  2252  1036  343F               	retlw	63
  2253  1037  3409               	retlw	9
  2254  1038  3400               	retlw	0
  2255  1039  345C               	retlw	92
  2256  103A  34A7               	retlw	167
  2257  103B  3462               	retlw	98
  2258  103C  3486               	retlw	134
  2259  103D  3483               	retlw	131
  2260  103E  3403               	retlw	3
  2261  103F  3422               	retlw	34
  2262  1040  34F8               	retlw	248
  2263  1041  3400               	retlw	0
  2264  1042  3444               	retlw	68
  2265  1043  34B6               	retlw	182
  2266  1044  3410               	retlw	16
  2267  1045  3418               	retlw	24
  2268  1046  341D               	retlw	29
  2269  1047  341C               	retlw	28
  2270  1048  34C7               	retlw	199
  2271  1049  3400               	retlw	0
  2272  104A  34B2               	retlw	178
  2273  104B  34EA               	retlw	234
  2274  104C  340A               	retlw	10
  2275  104D  3400               	retlw	0
  2276  104E  3411               	retlw	17
  2277  104F  3459               	retlw	89
  2278  1050  3488               	retlw	136
  2279  1051  3431               	retlw	49
  2280  1052  340B               	retlw	11
  2281  1053  342F               	retlw	47
  2282  1054  342E               	retlw	46
  2283  1055  3406               	retlw	6
  2284  1056  3404               	retlw	4
  2285  1057  3405               	retlw	5
  2286  1058  3400               	retlw	0
  2287  1059  3430               	retlw	48
  2288  105A  34D3               	retlw	211
  2289  105B  3491               	retlw	145
  2290  105C  3441               	retlw	65
  2291  105D  3400               	retlw	0
  2292  105E                     __end_of_CC2500_rfSettings:	
  2293  105E                     _CC2500_patable_vaule:	
  2294  105E  34FE               	retlw	254
  2295  105F  34FE               	retlw	254
  2296  1060  34FE               	retlw	254
  2297  1061  34FE               	retlw	254
  2298  1062  34FE               	retlw	254
  2299  1063  34FE               	retlw	254
  2300  1064  34FE               	retlw	254
  2301  1065  34FE               	retlw	254
  2302  1066                     __end_of_CC2500_patable_vaule:	
  2303                           
  2304                           	psect	nvBANK0
  2305  006E                     __pnvBANK0:	
  2306  006E                     _product:	
  2307  006E                     	ds	1
  2308  000C                     _PORTA	set	12
  2309  000D                     _PORTB	set	13
  2310  000E                     _PORTC	set	14
  2311  0018                     _T1CON	set	24
  2312  0017                     _TMR1H	set	23
  2313  0016                     _TMR1L	set	22
  2314  005F                     _GIE	set	95
  2315  005B                     _IOCIE	set	91
  2316  0058                     _IOCIF	set	88
  2317  005E                     _PEIE	set	94
  2318  0060                     _RA0	set	96
  2319  0064                     _RA4	set	100
  2320  0066                     _RA6	set	102
  2321  0067                     _RA7	set	103
  2322  0068                     _RB0	set	104
  2323  0069                     _RB1	set	105
  2324  006A                     _RB2	set	106
  2325  006B                     _RB3	set	107
  2326  006D                     _RB5	set	109
  2327  0070                     _RC0	set	112
  2328  0071                     _RC1	set	113
  2329  0073                     _RC3	set	115
  2330  0074                     _RC4	set	116
  2331  0075                     _RC5	set	117
  2332  0088                     _TMR1IF	set	136
  2333  009D                     _ADCON0	set	157
  2334  009E                     _ADCON1	set	158
  2335  009C                     _ADRESH	set	156
  2336  009B                     _ADRESL	set	155
  2337  0099                     _OSCCON	set	153
  2338  008C                     _TRISA	set	140
  2339  008D                     _TRISB	set	141
  2340  008E                     _TRISC	set	142
  2341  0097                     _WDTCON	set	151
  2342  04E9                     _GO_nDONE	set	1257
  2343  0488                     _TMR1IE	set	1160
  2344  0117                     _FVRCON	set	279
  2345  010C                     _LATA	set	268
  2346  010D                     _LATB	set	269
  2347  010E                     _LATC	set	270
  2348  018C                     _ANSELA	set	396
  2349  018D                     _ANSELB	set	397
  2350  018E                     _ANSELC	set	398
  2351  0192                     _PMADRH	set	402
  2352  0191                     _PMADRL	set	401
  2353  0196                     _PMCON2	set	406
  2354  0194                     _PMDATH	set	404
  2355  0193                     _PMDATL	set	403
  2356  0CAE                     _CFGS	set	3246
  2357  0CAC                     _FREE	set	3244
  2358  0CAD                     _LWLO	set	3245
  2359  0CA8                     _RD	set	3240
  2360  0CA9                     _WR	set	3241
  2361  0CAA                     _WREN	set	3242
  2362  1069                     _WPUB1	set	4201
  2363  106A                     _WPUB2	set	4202
  2364  0396                     _IOCBF	set	918
  2365  0395                     _IOCBN	set	917
  2366  0394                     _IOCBP	set	916
  2367  1CB2                     _IOCBF2	set	7346
  2368                           
  2369                           ; #config settings
  2370  0000                     
  2371                           	psect	cinit
  2372  0015                     start_initialization:	
  2373  0015                     __initialization:	
  2374                           
  2375                           ; Clear objects allocated to BITCOMMON
  2376  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2377                           
  2378                           ; Clear objects allocated to COMMON
  2379  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2380  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2381  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2382  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2383  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001C  30A0               	movlw	low __pbssBANK1
  2390  001D  0084               	movwf	4
  2391  001E  3000               	movlw	high __pbssBANK1
  2392  001F  0085               	movwf	5
  2393  0020  3049               	movlw	73
  2394  0021  319B  23C2  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0024  3020               	movlw	low __pbssBANK2
  2398  0025  0084               	movwf	4
  2399  0026  3001               	movlw	high __pbssBANK2
  2400  0027  0085               	movwf	5
  2401  0028  304F               	movlw	79
  2402  0029  319B  23C2  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002C  30A0               	movlw	low __pbssBANK3
  2406  002D  0084               	movwf	4
  2407  002E  3001               	movlw	high __pbssBANK3
  2408  002F  0085               	movwf	5
  2409  0030  3046               	movlw	70
  2410  0031  319B  23C2  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Initialize objects allocated to BANK4
  2413  0034  3034               	movlw	low __pidataBANK4
  2414  0035  0084               	movwf	4
  2415  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2416  0037  0085               	movwf	5
  2417  0038  3020               	movlw	low __pdataBANK4
  2418  0039  0086               	movwf	6
  2419  003A  3002               	movlw	high __pdataBANK4
  2420  003B  0087               	movwf	7
  2421  003C  3020               	movlw	32
  2422  003D  319B  23BC         	fcall	init_ram
  2423  003F                     end_of_initialization:	
  2424                           ;End of C runtime variable initialization code
  2425                           
  2426  003F                     __end_of__initialization:	
  2427  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2428  0040  0020               	movlb	0
  2429  0041  3196  2E3E         	ljmp	_main	;jump to C main() function
  2430                           
  2431                           	psect	bitbssCOMMON
  2432  03E8                     __pbitbssCOMMON:	
  2433  03E8                     _Receive_OK:	
  2434  03E8                     	ds	1
  2435  03E9                     _Transceive_OK:	
  2436  03E9                     	ds	1
  2437                           
  2438                           	psect	bssCOMMON
  2439  0078                     __pbssCOMMON:	
  2440  0078                     _DelayOff:	
  2441  0078                     	ds	1
  2442  0079                     _DimmerLightsIntr:	
  2443  0079                     	ds	1
  2444  007A                     _LED:	
  2445  007A                     	ds	1
  2446  007B                     _SPI0Buffer:	
  2447  007B                     	ds	1
  2448  007C                     _Sw:	
  2449  007C                     	ds	1
  2450                           
  2451                           	psect	bssBANK0
  2452  006F                     __pbssBANK0:	
  2453  006F                     _DimmerLights:	
  2454  006F                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _myMain:	
  2459  00A0                     	ds	14
  2460  00AE                     _Buz1:	
  2461  00AE                     	ds	12
  2462  00BA                     _RF1:	
  2463  00BA                     	ds	12
  2464  00C6                     _Timer1:	
  2465  00C6                     	ds	3
  2466  00C9                     _RF_Count:	
  2467  00C9                     	ds	2
  2468  00CB                     _WDT:	
  2469  00CB                     	ds	2
  2470  00CD                     _CRC:	
  2471  00CD                     	ds	1
  2472  00CE                     _DimmerLights11:	
  2473  00CE                     	ds	1
  2474  00CF                     _DimmerLightsIntrIOC:	
  2475  00CF                     	ds	1
  2476  00D0                     _RSSI:	
  2477  00D0                     	ds	1
  2478  00D1                     _Rx_Length:	
  2479  00D1                     	ds	1
  2480  00D2                     _SwDetect:	
  2481  00D2                     	ds	1
  2482  00D3                     _Tx_Length:	
  2483  00D3                     	ds	1
  2484  00D4                     _r_address:	
  2485  00D4                     	ds	1
  2486  00D5                     _r_data:	
  2487  00D5                     	ds	1
  2488  00D6                     _s_data:	
  2489  00D6                     	ds	1
  2490  00D7                     _Temp:	
  2491  00D7                     	ds	18
  2492                           
  2493                           	psect	bssBANK2
  2494  0120                     __pbssBANK2:	
  2495  0120                     _RF_Data:	
  2496  0120                     	ds	30
  2497  013E                     _Dimmer:	
  2498  013E                     	ds	3
  2499  0141                     _Load:	
  2500  0141                     	ds	46
  2501                           
  2502                           	psect	bssBANK3
  2503  01A0                     __pbssBANK3:	
  2504  01A0                     _Memory:	
  2505  01A0                     	ds	37
  2506  01C5                     _DimmerLights1:	
  2507  01C5                     	ds	15
  2508  01D4                     _Sw1:	
  2509  01D4                     	ds	9
  2510  01DD                     _DlySw1:	
  2511  01DD                     	ds	5
  2512  01E2                     _VarErrLED:	
  2513  01E2                     	ds	4
  2514                           
  2515                           	psect	dataBANK4
  2516  0220                     __pdataBANK4:	
  2517  0220                     __product:	
  2518  0220                     	ds	32
  2519                           
  2520                           	psect	clrtext
  2521  1BC2                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1BC2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1BC3                     clrloop0:	
  2527  1BC3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1BC4  3101               	addfsr 0,1
  2529  1BC5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  1BC6  2BC3               	goto	clrloop0	;have we reached the end yet?
  2531  1BC7  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	inittext
  2534  1BBC                     init_ram:	
  2535  1BBC  00FE               	movwf	126
  2536  1BBD                     initloop:	
  2537  1BBD  0012               	moviw fsr0++
  2538  1BBE  001E               	movwi fsr1++
  2539  1BBF  0BFE               	decfsz	126,f
  2540  1BC0  2BBD               	goto	initloop
  2541  1BC1  3400               	retlw	0
  2542                           
  2543                           	psect	cstackBANK1
  2544  00E9                     __pcstackBANK1:	
  2545  00E9                     setRF_Main@loop_f:	
  2546                           
  2547                           ; 1 bytes @ 0x0
  2548  00E9                     	ds	1
  2549  00EA                     setRF_Main@Receive_OK:	
  2550                           
  2551                           ; 1 bytes @ 0x1
  2552  00EA                     	ds	1
  2553  00EB                     setRF_Main@error:	
  2554                           
  2555                           ; 1 bytes @ 0x2
  2556  00EB                     	ds	1
  2557  00EC                     ?_main:	
  2558  00EC                     main@argc:	
  2559                           ; 2 bytes @ 0x3
  2560                           
  2561                           
  2562                           ; 2 bytes @ 0x3
  2563  00EC                     	ds	2
  2564  00EE                     main@argv:	
  2565                           
  2566                           ; 2 bytes @ 0x5
  2567  00EE                     	ds	2
  2568                           
  2569                           	psect	cstackCOMMON
  2570  0070                     __pcstackCOMMON:	
  2571  0070                     ?_Timeout_Counter:	
  2572  0070                     ?_set_TimeoutCleared:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_CC2500_WriteByte:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_CC2500_WriteCommand:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_CC2500_ReadStatus:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_ReadByte:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_PowerRST:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_InitSetREG:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_InitPATable:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ClearTXFIFO:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_ClearRXFIFO:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_FrequencyCabr:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_SIDLEMode:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DlyOff_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DlyOff_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setDimmerLights_ErrorClose:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_Dimmer_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setDimmerLights_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_Line:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setTxData:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setLED_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setLED_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_Fosc_Set:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_IO_Set:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_TMR1_Set:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_ADC_Set:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_IOC_Set:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_WDT_Set:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_IOC_ISR:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_TMR1_ISR:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Flash_Memory_Write:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Flash_Memory_Modify:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_WDT_Clearing:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_myMain_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Temp_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Load_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Switch_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_RF_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_getLoad_AD:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_getTemp_AD:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_my_MainTimer:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Temp_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Load_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Switch_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_RF_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setLoad_AH_AL_Restore:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setTemp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setTemp_Main:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setRF_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setRF_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_RF_RxDisable:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getRxData:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setLog_Code:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setControl_Lights_Table:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRFSW_Control:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRFSW_AdjControl:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setRF_DimmerValue:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setSw_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setSw_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Buzzer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Buzzer_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_TxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_CC2500_RxData:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_CC2500_PowerOnInitial:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOffPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayOff_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayOff_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DimmerIntrIOCPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ??_DimmerIntrIOCPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DimmerIntrPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ??_DimmerIntrPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setDimmerLights_IntrControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLightsPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_Main:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_SwOn:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_SwOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_AdjControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_AdjRF:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LedPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_LED_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Mcu_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_ISR:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerReClock:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Unlock:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Flash_Memory_Erasing:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setMemory_Modify:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setMemory_LoopSave:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_WDT_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_setMain_Exception:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_setRF_Learn:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_TouchPower:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_SwPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_DelayTimejudge:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_getMain_All_Error_Status:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_getLoad_OK:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_getMain_LightsStatus:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_setPercentValue:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_getPercentValue:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_Flash_Memory_Read:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getRF_KeyStatus:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getSw_KeyStatus:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDelayOff_GO:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Status:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getAll_DimmerLights_AdjGO:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmer_LoadOK:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_Line:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_Lights_Count:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_LoadOK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     getSw_KeyStatus@sw:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914                           
  2915                           ; 1 bytes @ 0x0
  2916  0070                     	ds	1
  2917  0071                     DimmerIntrIOCPointSelect@lights:	
  2918  0071                     DimmerIntrPointSelect@lights:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921                           
  2922                           ; 1 bytes @ 0x1
  2923  0071                     	ds	1
  2924  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2925  0072                     ??_setDimmerLights_IntrControl:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2929                           ; 0 bytes @ 0x2
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x2
  2933  0072                     	ds	1
  2934  0073                     ??_IOC_ISR:	
  2935  0073                     ??_setDimmerReClock:	
  2936                           ; 0 bytes @ 0x3
  2937                           
  2938                           
  2939                           ; 0 bytes @ 0x3
  2940  0073                     	ds	3
  2941  0076                     setDimmerLights_IntrControl@lights:	
  2942                           
  2943                           ; 1 bytes @ 0x6
  2944  0076                     	ds	1
  2945  0077                     ??_TMR1_ISR:	
  2946  0077                     ??_ISR:	
  2947                           ; 0 bytes @ 0x7
  2948                           
  2949                           
  2950                           ; 0 bytes @ 0x7
  2951  0077                     	ds	1
  2952                           
  2953                           	psect	cstackBANK0
  2954  0020                     __pcstackBANK0:	
  2955  0020                     ??_Timeout_Counter:	
  2956  0020                     ??_set_TimeoutCleared:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_CC2500_WriteByte:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_CC2500_ReadByte:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ?_DelayTime_1us:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_Dimmer_Initialization:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_getMain_All_Error_Status:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_getLoad_OK:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setDimmerLights_Line:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ?_setRF_DimmerLights:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_setTxData:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_Fosc_Set:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_IO_Set:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_TMR1_Set:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_ADC_Set:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_IOC_Set:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_WDT_Set:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_Flash_Memory_Read:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ?_setMemory_Data:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_Flash_Memory_Write:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_WDT_Clearing:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_myMain_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_Temp_Initialization:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setLoad_AH_AL_Restore:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_setTemp_Initialization:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_setRF_Initialization:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_getRF_KeyStatus:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_getSw_KeyStatus:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_Buzzer_Initialization:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_Buzzer_Main:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_DelayOffPointSelect:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_DimmerLightsPointSelect:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getAll_DimmerLights_AdjGO:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_getDimmer_LoadOK:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_getDimmerLights_Line:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_LedPointSelect:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Flash_Memory_Unlock:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Flash_Memory_Erasing:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_setMemory_Modify:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_setMemory_LoopSave:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_WDT_Main:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getMain_Lights_Count:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_setRF_Learn:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_TouchPower:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_SwPointSelect:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ?___bmul:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ?_getBuz_GO:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0020                     ?_getAD:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097  0020                     ?___awdiv:	
  3098                           ; 2 bytes @ 0x0
  3099                           
  3100  0020                     ?___lwdiv:	
  3101                           ; 2 bytes @ 0x0
  3102                           
  3103  0020                     ?___ftpack:	
  3104                           ; 2 bytes @ 0x0
  3105                           
  3106  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3107                           ; 3 bytes @ 0x0
  3108                           
  3109  0020                     getDimmer_LoadOK@status:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0020                     setDimmerLights_Line@lights:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0020                     getDimmerLights_Line@line:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     getAD@adcon1:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0020                     setMemory_Data@data:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0020                     getMain_Lights_Count@count:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0020                     getLoad_OK@ok:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0020                     setRF_DimmerLights@on:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0020                     ___bmul@multiplicand:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0020                     DelayTime_1us@count:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0020                     ___awdiv@divisor:	
  3140                           ; 2 bytes @ 0x0
  3141                           
  3142  0020                     ___lwdiv@divisor:	
  3143                           ; 2 bytes @ 0x0
  3144                           
  3145  0020                     ___ftpack@arg:	
  3146                           ; 2 bytes @ 0x0
  3147                           
  3148                           
  3149                           ; 3 bytes @ 0x0
  3150  0020                     	ds	1
  3151  0021                     ??_setRF_DimmerLights:	
  3152  0021                     ??_setMemory_Data:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ??_RF_Initialization:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ??_Mcu_Initialization:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ??_getMain_LoadOK:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??___bmul:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     CC2500_WriteByte@loop_a:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     CC2500_ReadByte@loop_b:	
  3171                           ; 1 bytes @ 0x1
  3172                           
  3173  0021                     DelayOffPointSelect@sw:	
  3174                           ; 1 bytes @ 0x1
  3175                           
  3176  0021                     DimmerLightsPointSelect@lights:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0021                     LedPointSelect@led:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0021                     Flash_Memory_Read@i:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0021                     Flash_Memory_Write@i:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0021                     setMemory_Modify@command:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     setMemory_LoopSave@command:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     getMain_Lights_Count@status2:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     setLoad_AH_AL_Restore@i:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     setRF_Learn@command:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     getRF_KeyStatus@key:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     SwPointSelect@sw:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0021                     getSw_KeyStatus@status:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     _getMain_All_Error_Status$3321:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215                           
  3216                           ; 2 bytes @ 0x1
  3217  0021                     	ds	1
  3218  0022                     ??_CC2500_WriteCommand:	
  3219  0022                     ??_CC2500_ReadStatus:	
  3220                           ; 0 bytes @ 0x2
  3221                           
  3222  0022                     ??_DelayTime_1us:	
  3223                           ; 0 bytes @ 0x2
  3224                           
  3225  0022                     ?_CC2500_WriteREG:	
  3226                           ; 0 bytes @ 0x2
  3227                           
  3228  0022                     ??_DlyOff_Initialization:	
  3229                           ; 0 bytes @ 0x2
  3230                           
  3231  0022                     ??_setDimmerLights_Initialization:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     ?_setDimmerLights_Trigger:	
  3235                           ; 0 bytes @ 0x2
  3236                           
  3237  0022                     ?_setDimmerLights_TriggerAdj:	
  3238                           ; 0 bytes @ 0x2
  3239                           
  3240  0022                     ?_setLED:	
  3241                           ; 0 bytes @ 0x2
  3242                           
  3243  0022                     ??_setLED_Main:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ??_Load_Initialization:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     ??_getBuz_GO:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     ??_getDelayOff_GO:	
  3253                           ; 0 bytes @ 0x2
  3254                           
  3255  0022                     ??_getDimmerLights_Status:	
  3256                           ; 0 bytes @ 0x2
  3257                           
  3258  0022                     CC2500_WriteREG@value:	
  3259                           ; 0 bytes @ 0x2
  3260                           
  3261  0022                     DlyOff_Initialization@sw:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     getDelayOff_GO@sw:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  0022                     getDimmerLights_Status@lights:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  0022                     setDimmerLights_Trigger@command:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  0022                     setDimmerLights_TriggerAdj@command:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     setLED@command:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     Flash_Memory_Read@address:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     setMemory_Data@address:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     getMain_Lights_Count@status3:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     getMain_LoadOK@ok:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     _getRF_KeyStatus$4885:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  0022                     _getSw_KeyStatus$5829:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297  0022                     ___bmul@product:	
  3298                           ; 1 bytes @ 0x2
  3299                           
  3300  0022                     DelayTime_1us@i:	
  3301                           ; 1 bytes @ 0x2
  3302                           
  3303  0022                     ___awdiv@dividend:	
  3304                           ; 2 bytes @ 0x2
  3305                           
  3306  0022                     ___lwdiv@dividend:	
  3307                           ; 2 bytes @ 0x2
  3308                           
  3309                           
  3310                           ; 2 bytes @ 0x2
  3311  0022                     	ds	1
  3312  0023                     ??_CC2500_WriteREG:	
  3313  0023                     ??_setDimmerLights_Trigger:	
  3314                           ; 0 bytes @ 0x3
  3315                           
  3316  0023                     ??_setDimmerLights_TriggerAdj:	
  3317                           ; 0 bytes @ 0x3
  3318                           
  3319  0023                     ??_setLED:	
  3320                           ; 0 bytes @ 0x3
  3321                           
  3322  0023                     ??_DelayOff_Initialization:	
  3323                           ; 0 bytes @ 0x3
  3324                           
  3325  0023                     ??_getAD:	
  3326                           ; 0 bytes @ 0x3
  3327                           
  3328  0023                     CC2500_WriteCommand@command:	
  3329                           ; 0 bytes @ 0x3
  3330                           
  3331  0023                     CC2500_ReadStatus@status_addr:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     getDelayOff_GO@go:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0023                     setDimmerLights_Initialization@lights:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0023                     getDimmerLights_Status@status:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0023                     setLED@led:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     getAD@adcon0:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0023                     Flash_Memory_Read@ret:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0023                     getMain_Lights_Count@status1:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0023                     setRF_DimmerLights@status:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0023                     ___bmul@multiplier:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     ___ftpack@exp:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     _getMain_All_Error_Status$3322:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367                           
  3368                           ; 2 bytes @ 0x3
  3369  0023                     	ds	1
  3370  0024                     ??_CC2500_ClearTXFIFO:	
  3371  0024                     ??_CC2500_ClearRXFIFO:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_CC2500_SIDLEMode:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_DelayTimejudge:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_getMain_LightsStatus:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_setLED_Initialization:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_Flash_Memory_Modify:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_getLoad_AD:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??_getTemp_AD:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??_RF_RxDisable:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     ??_setSw_Initialization:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     ??_CC2500_TxData:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_CC2500_RxData:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_DimmerLights_Initialization:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??___awdiv:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??___lwdiv:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     CC2500_WriteREG@w_addr:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     setDimmerLights_Trigger@lights:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0024                     setDimmerLights_TriggerAdj@lights:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0024                     setLED_Initialization@led:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0024                     setLED_Main@led:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0024                     setRF_DimmerLights@lights:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0024                     setSw_Initialization@sw:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0024                     ___ftpack@sign:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0024                     getBuz_GO@i:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0024                     DelayTime_1us@j:	
  3444                           ; 2 bytes @ 0x4
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x4
  3448  0024                     	ds	1
  3449  0025                     ??_CC2500_InitSetREG:	
  3450  0025                     ??_CC2500_InitPATable:	
  3451                           ; 0 bytes @ 0x5
  3452                           
  3453  0025                     ??_Switch_Initialization:	
  3454                           ; 0 bytes @ 0x5
  3455                           
  3456  0025                     ??___ftpack:	
  3457                           ; 0 bytes @ 0x5
  3458                           
  3459  0025                     ??_setDimmerLights_AdjControl:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0025                     ??_LED_Initialization:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0025                     ??_LED_Main:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0025                     CC2500_TxData@loop_e:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0025                     CC2500_RxData@loop_f:	
  3472                           ; 1 bytes @ 0x5
  3473                           
  3474  0025                     Flash_Memory_Modify@i:	
  3475                           ; 1 bytes @ 0x5
  3476                           
  3477  0025                     getMain_LightsStatus@count:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0025                     getMain_All_Error_Status@command:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0025                     getTemp_AD@channel:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0025                     ___awdiv@counter:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489  0025                     ___lwdiv@quotient:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492                           
  3493                           ; 2 bytes @ 0x5
  3494  0025                     	ds	1
  3495  0026                     ??_CC2500_PowerRST:	
  3496  0026                     ??_CC2500_FrequencyCabr:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0026                     CC2500_InitSetREG@temp1:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0026                     CC2500_InitPATable@temp:	
  3503                           ; 1 bytes @ 0x6
  3504                           
  3505  0026                     DelayTimejudge@i:	
  3506                           ; 1 bytes @ 0x6
  3507                           
  3508  0026                     setDimmerLights_AdjControl@idle:	
  3509                           ; 1 bytes @ 0x6
  3510                           
  3511  0026                     getMain_All_Error_Status@status:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514  0026                     getLoad_AD@channel:	
  3515                           ; 1 bytes @ 0x6
  3516                           
  3517  0026                     ___awdiv@sign:	
  3518                           ; 1 bytes @ 0x6
  3519                           
  3520  0026                     getMain_LightsStatus@i:	
  3521                           ; 1 bytes @ 0x6
  3522                           
  3523                           
  3524                           ; 2 bytes @ 0x6
  3525  0026                     	ds	1
  3526  0027                     CC2500_InitSetREG@temp2:	
  3527  0027                     CC2500_InitPATable@loop_d:	
  3528                           ; 1 bytes @ 0x7
  3529                           
  3530  0027                     DelayTimejudge@j:	
  3531                           ; 1 bytes @ 0x7
  3532                           
  3533  0027                     _setDimmerLights_AdjControl$2113:	
  3534                           ; 1 bytes @ 0x7
  3535                           
  3536  0027                     getLoad_AD@k:	
  3537                           ; 1 bytes @ 0x7
  3538                           
  3539  0027                     ___lwdiv@counter:	
  3540                           ; 1 bytes @ 0x7
  3541                           
  3542  0027                     ___awdiv@quotient:	
  3543                           ; 1 bytes @ 0x7
  3544                           
  3545                           
  3546                           ; 2 bytes @ 0x7
  3547  0027                     	ds	1
  3548  0028                     ?___awtoft:	
  3549  0028                     CC2500_InitSetREG@loop_c:	
  3550                           ; 3 bytes @ 0x8
  3551                           
  3552  0028                     DelayTimejudge@k:	
  3553                           ; 1 bytes @ 0x8
  3554                           
  3555  0028                     setDimmerLights_AdjControl@sw:	
  3556                           ; 1 bytes @ 0x8
  3557                           
  3558  0028                     getMain_LightsStatus@status:	
  3559                           ; 1 bytes @ 0x8
  3560                           
  3561  0028                     getLoad_AD@j:	
  3562                           ; 1 bytes @ 0x8
  3563                           
  3564  0028                     ___awtoft@c:	
  3565                           ; 1 bytes @ 0x8
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x8
  3569  0028                     	ds	1
  3570  0029                     ??_Load_Main:	
  3571  0029                     ?_setBuz:	
  3572                           ; 0 bytes @ 0x9
  3573                           
  3574  0029                     ??_CC2500_PowerOnInitial:	
  3575                           ; 0 bytes @ 0x9
  3576                           
  3577  0029                     ??_Flash_Memory_Main:	
  3578                           ; 0 bytes @ 0x9
  3579                           
  3580  0029                     DelayTimejudge@value:	
  3581                           ; 0 bytes @ 0x9
  3582                           
  3583  0029                     getLoad_AD@i:	
  3584                           ; 1 bytes @ 0x9
  3585                           
  3586  0029                     setBuz@time:	
  3587                           ; 1 bytes @ 0x9
  3588                           
  3589                           
  3590                           ; 2 bytes @ 0x9
  3591  0029                     	ds	1
  3592  002A                     ?_setDelayOff_GO:	
  3593  002A                     setDelayOff_GO@command:	
  3594                           ; 0 bytes @ 0xA
  3595                           
  3596                           
  3597                           ; 1 bytes @ 0xA
  3598  002A                     	ds	1
  3599  002B                     ??_setBuz:	
  3600  002B                     ??___awtoft:	
  3601                           ; 0 bytes @ 0xB
  3602                           
  3603  002B                     setDelayOff_GO@value:	
  3604                           ; 0 bytes @ 0xB
  3605                           
  3606  002B                     Load_Main@j:	
  3607                           ; 1 bytes @ 0xB
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0xB
  3611  002B                     	ds	1
  3612  002C                     ??_setDelayOff_GO:	
  3613  002C                     setBuz@count:	
  3614                           ; 0 bytes @ 0xC
  3615                           
  3616  002C                     Load_Main@adjgo:	
  3617                           ; 1 bytes @ 0xC
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0xC
  3621  002C                     	ds	1
  3622  002D                     ??_my_MainTimer:	
  3623  002D                     ??_setTemp_Main:	
  3624                           ; 0 bytes @ 0xD
  3625                           
  3626  002D                     ??_setLog_Code:	
  3627                           ; 0 bytes @ 0xD
  3628                           
  3629  002D                     ??_setDimmerLights_SwOn:	
  3630                           ; 0 bytes @ 0xD
  3631                           
  3632  002D                     _Load_Main$3639:	
  3633                           ; 0 bytes @ 0xD
  3634                           
  3635  002D                     ___awtoft@sign:	
  3636                           ; 1 bytes @ 0xD
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0xD
  3640  002D                     	ds	1
  3641  002E                     ?___ftdiv:	
  3642  002E                     ?___ftmul:	
  3643                           ; 3 bytes @ 0xE
  3644                           
  3645  002E                     setDelayOff_GO@sw:	
  3646                           ; 3 bytes @ 0xE
  3647                           
  3648  002E                     setDimmerLights_SwOn@idle:	
  3649                           ; 1 bytes @ 0xE
  3650                           
  3651  002E                     Load_Main@error:	
  3652                           ; 1 bytes @ 0xE
  3653                           
  3654  002E                     ___ftdiv@f2:	
  3655                           ; 1 bytes @ 0xE
  3656                           
  3657  002E                     ___ftmul@f1:	
  3658                           ; 3 bytes @ 0xE
  3659                           
  3660                           
  3661                           ; 3 bytes @ 0xE
  3662  002E                     	ds	1
  3663  002F                     ??_Temp_Main:	
  3664  002F                     ??_setDimmerLights_SwOff:	
  3665                           ; 0 bytes @ 0xF
  3666                           
  3667  002F                     setDimmerLights_SwOn@sw:	
  3668                           ; 0 bytes @ 0xF
  3669                           
  3670  002F                     setDimmerLights_SwOff@command:	
  3671                           ; 1 bytes @ 0xF
  3672                           
  3673  002F                     Load_Main@i:	
  3674                           ; 1 bytes @ 0xF
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0xF
  3678  002F                     	ds	1
  3679  0030                     setDimmerLights_SwOff@sw:	
  3680                           
  3681                           ; 1 bytes @ 0x10
  3682  0030                     	ds	1
  3683  0031                     ??_setDimmerLights_ErrorClose:	
  3684  0031                     ??_setRFSW_Control:	
  3685                           ; 0 bytes @ 0x11
  3686                           
  3687  0031                     ??_setSw_Main:	
  3688                           ; 0 bytes @ 0x11
  3689                           
  3690  0031                     ___ftdiv@f1:	
  3691                           ; 0 bytes @ 0x11
  3692                           
  3693  0031                     ___ftmul@f2:	
  3694                           ; 3 bytes @ 0x11
  3695                           
  3696                           
  3697                           ; 3 bytes @ 0x11
  3698  0031                     	ds	1
  3699  0032                     setDimmerLights_ErrorClose@count:	
  3700  0032                     setRFSW_Control@status:	
  3701                           ; 1 bytes @ 0x12
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0x12
  3705  0032                     	ds	1
  3706  0033                     setDimmerLights_ErrorClose@lights:	
  3707  0033                     setRFSW_Control@sw:	
  3708                           ; 1 bytes @ 0x13
  3709                           
  3710  0033                     setSw_Main@sw:	
  3711                           ; 1 bytes @ 0x13
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x13
  3715  0033                     	ds	1
  3716  0034                     ??___ftdiv:	
  3717  0034                     ??___ftmul:	
  3718                           ; 0 bytes @ 0x14
  3719                           
  3720  0034                     setDimmerLights_ErrorClose@i:	
  3721                           ; 0 bytes @ 0x14
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x14
  3725  0034                     	ds	2
  3726  0036                     ??_DlyOff_Main:	
  3727  0036                     ??_setMain_Exception:	
  3728                           ; 0 bytes @ 0x16
  3729                           
  3730                           
  3731                           ; 0 bytes @ 0x16
  3732  0036                     	ds	2
  3733  0038                     DlyOff_Main@sw:	
  3734  0038                     setMain_Exception@buz:	
  3735                           ; 1 bytes @ 0x18
  3736                           
  3737  0038                     ___ftdiv@cntr:	
  3738                           ; 1 bytes @ 0x18
  3739                           
  3740  0038                     ___ftmul@exp:	
  3741                           ; 1 bytes @ 0x18
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x18
  3745  0038                     	ds	1
  3746  0039                     ??_DelayOff_Main:	
  3747  0039                     _setMain_Exception$3311:	
  3748                           ; 0 bytes @ 0x19
  3749                           
  3750  0039                     ___ftdiv@f3:	
  3751                           ; 2 bytes @ 0x19
  3752                           
  3753  0039                     ___ftmul@f3_as_product:	
  3754                           ; 3 bytes @ 0x19
  3755                           
  3756                           
  3757                           ; 3 bytes @ 0x19
  3758  0039                     	ds	2
  3759  003B                     setMain_Exception@status:	
  3760                           
  3761                           ; 1 bytes @ 0x1B
  3762  003B                     	ds	1
  3763  003C                     setMain_Exception@command:	
  3764  003C                     ___ftdiv@exp:	
  3765                           ; 1 bytes @ 0x1C
  3766                           
  3767  003C                     ___ftmul@cntr:	
  3768                           ; 1 bytes @ 0x1C
  3769                           
  3770                           
  3771                           ; 1 bytes @ 0x1C
  3772  003C                     	ds	1
  3773  003D                     ??_Switch_Main:	
  3774  003D                     ___ftdiv@sign:	
  3775                           ; 0 bytes @ 0x1D
  3776                           
  3777  003D                     ___ftmul@sign:	
  3778                           ; 1 bytes @ 0x1D
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0x1D
  3782  003D                     	ds	1
  3783  003E                     ?___ftneg:	
  3784  003E                     Switch_Main@error:	
  3785                           ; 3 bytes @ 0x1E
  3786                           
  3787  003E                     ___ftneg@f1:	
  3788                           ; 1 bytes @ 0x1E
  3789                           
  3790                           
  3791                           ; 3 bytes @ 0x1E
  3792  003E                     	ds	3
  3793  0041                     ??___ftneg:	
  3794  0041                     ?___ftadd:	
  3795                           ; 0 bytes @ 0x21
  3796                           
  3797  0041                     ___ftadd@f1:	
  3798                           ; 3 bytes @ 0x21
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x21
  3802  0041                     	ds	3
  3803  0044                     ___ftadd@f2:	
  3804                           
  3805                           ; 3 bytes @ 0x24
  3806  0044                     	ds	3
  3807  0047                     ??___ftadd:	
  3808                           
  3809                           ; 0 bytes @ 0x27
  3810  0047                     	ds	4
  3811  004B                     ___ftadd@sign:	
  3812                           
  3813                           ; 1 bytes @ 0x2B
  3814  004B                     	ds	1
  3815  004C                     ___ftadd@exp2:	
  3816                           
  3817                           ; 1 bytes @ 0x2C
  3818  004C                     	ds	1
  3819  004D                     ___ftadd@exp1:	
  3820                           
  3821                           ; 1 bytes @ 0x2D
  3822  004D                     	ds	1
  3823  004E                     ?___fttol:	
  3824  004E                     ___fttol@f1:	
  3825                           ; 4 bytes @ 0x2E
  3826                           
  3827                           
  3828                           ; 3 bytes @ 0x2E
  3829  004E                     	ds	4
  3830  0052                     ??___fttol:	
  3831                           
  3832                           ; 0 bytes @ 0x32
  3833  0052                     	ds	4
  3834  0056                     ___fttol@sign1:	
  3835                           
  3836                           ; 1 bytes @ 0x36
  3837  0056                     	ds	1
  3838  0057                     ___fttol@lval:	
  3839                           
  3840                           ; 4 bytes @ 0x37
  3841  0057                     	ds	4
  3842  005B                     ___fttol@exp1:	
  3843                           
  3844                           ; 1 bytes @ 0x3B
  3845  005B                     	ds	1
  3846  005C                     ??_setPercentValue:	
  3847  005C                     ??_getPercentValue:	
  3848                           ; 0 bytes @ 0x3C
  3849                           
  3850                           
  3851                           ; 0 bytes @ 0x3C
  3852  005C                     	ds	2
  3853  005E                     getPercentValue@value:	
  3854  005E                     setPercentValue@value:	
  3855                           ; 1 bytes @ 0x3E
  3856                           
  3857                           
  3858                           ; 1 bytes @ 0x3E
  3859  005E                     	ds	1
  3860  005F                     getPercentValue@i:	
  3861  005F                     setPercentValue@i:	
  3862                           ; 3 bytes @ 0x3F
  3863                           
  3864                           
  3865                           ; 3 bytes @ 0x3F
  3866  005F                     	ds	3
  3867  0062                     ?_setDimmerLights:	
  3868  0062                     ?_setDimmerLights_Adj:	
  3869                           ; 0 bytes @ 0x42
  3870                           
  3871  0062                     ??_setDimmerLights_AdjRF:	
  3872                           ; 0 bytes @ 0x42
  3873                           
  3874  0062                     ??_Flash_Memory_Initialization:	
  3875                           ; 0 bytes @ 0x42
  3876                           
  3877  0062                     setDimmerLights@status:	
  3878                           ; 0 bytes @ 0x42
  3879                           
  3880  0062                     setDimmerLights_Adj@status:	
  3881                           ; 1 bytes @ 0x42
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x42
  3885  0062                     	ds	1
  3886  0063                     ??_setDimmerLights:	
  3887  0063                     ??_setDimmerLights_Adj:	
  3888                           ; 0 bytes @ 0x43
  3889                           
  3890  0063                     setDimmerLights_AdjRF@lights:	
  3891                           ; 0 bytes @ 0x43
  3892                           
  3893  0063                     Flash_Memory_Initialization@i:	
  3894                           ; 1 bytes @ 0x43
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x43
  3898  0063                     	ds	1
  3899  0064                     ??_setRF_DimmerValue:	
  3900                           
  3901                           ; 0 bytes @ 0x44
  3902  0064                     	ds	1
  3903  0065                     setDimmerLights@lights:	
  3904  0065                     setDimmerLights_Adj@lights:	
  3905                           ; 1 bytes @ 0x45
  3906                           
  3907                           
  3908                           ; 1 bytes @ 0x45
  3909  0065                     	ds	1
  3910  0066                     ??_setDimmerLights_Main:	
  3911  0066                     setDimmerLights_Main@lights:	
  3912                           ; 0 bytes @ 0x46
  3913                           
  3914  0066                     setRF_DimmerValue@lights:	
  3915                           ; 1 bytes @ 0x46
  3916                           
  3917                           
  3918                           ; 1 bytes @ 0x46
  3919  0066                     	ds	1
  3920  0067                     ??_setRFSW_AdjControl:	
  3921  0067                     ??_DimmerLights_Main:	
  3922                           ; 0 bytes @ 0x47
  3923                           
  3924                           
  3925                           ; 0 bytes @ 0x47
  3926  0067                     	ds	2
  3927  0069                     setRFSW_AdjControl@status:	
  3928  0069                     _DimmerLights_Main$2089:	
  3929                           ; 1 bytes @ 0x49
  3930                           
  3931                           
  3932                           ; 2 bytes @ 0x49
  3933  0069                     	ds	1
  3934  006A                     setRFSW_AdjControl@sw:	
  3935                           
  3936                           ; 1 bytes @ 0x4A
  3937  006A                     	ds	1
  3938  006B                     ??_getRxData:	
  3939  006B                     ??_setControl_Lights_Table:	
  3940                           ; 0 bytes @ 0x4B
  3941                           
  3942                           
  3943                           ; 0 bytes @ 0x4B
  3944  006B                     	ds	1
  3945  006C                     getRxData@error:	
  3946                           
  3947                           ; 1 bytes @ 0x4C
  3948  006C                     	ds	1
  3949  006D                     ??_setRF_Main:	
  3950                           
  3951                           ; 0 bytes @ 0x4D
  3952  006D                     	ds	1
  3953  006E                     ??_RF_Main:	
  3954  006E                     ??_main:	
  3955                           ; 0 bytes @ 0x4E
  3956                           
  3957                           
  3958                           	psect	maintext
  3959  163E                     __pmaintext:	
  3960                           ; 0 bytes @ 0x4E
  3961 ;;
  3962 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3963 ;;
  3964 ;; *************** function _main *****************
  3965 ;; Defined at:
  3966 ;;		line 7 in file "../src/Main_B1.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  argc            2    3[BANK1 ] int 
  3969 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  2    3[BANK1 ] int 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 17F/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3981 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;Total ram usage:        4 bytes
  3986 ;; Hardware stack levels required when called:   15
  3987 ;; This function calls:
  3988 ;;		_Buzzer_Initialization
  3989 ;;		_Buzzer_Main
  3990 ;;		_CC2500_PowerOnInitial
  3991 ;;		_DelayOff_Initialization
  3992 ;;		_DelayOff_Main
  3993 ;;		_DimmerLights_Initialization
  3994 ;;		_DimmerLights_Main
  3995 ;;		_Flash_Memory_Initialization
  3996 ;;		_Flash_Memory_Main
  3997 ;;		_LED_Initialization
  3998 ;;		_LED_Main
  3999 ;;		_Load_Initialization
  4000 ;;		_Load_Main
  4001 ;;		_Mcu_Initialization
  4002 ;;		_RF_Initialization
  4003 ;;		_RF_Main
  4004 ;;		_Switch_Initialization
  4005 ;;		_Switch_Main
  4006 ;;		_Temp_Initialization
  4007 ;;		_Temp_Main
  4008 ;;		_WDT_Main
  4009 ;;		_getLoad_AD
  4010 ;;		_getTemp_AD
  4011 ;;		_myMain_Initialization
  4012 ;;		_my_MainTimer
  4013 ;; This function is called by:
  4014 ;;		Startup code after reset
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _main
  4020  163E                     _main:	
  4021                           
  4022                           ;Main_B1.c: 8: myMain_Initialization();
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4026  163E  319C  24DD  3196   	fcall	_myMain_Initialization
  4027                           
  4028                           ;Main_B1.c: 9: Mcu_Initialization();
  4029  1641  319D  2582  3196   	fcall	_Mcu_Initialization
  4030                           
  4031                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4032  1644  3186  264A  3196   	fcall	_Flash_Memory_Initialization
  4033                           
  4034                           ;Main_B1.c: 11: LED_Initialization();
  4035  1647  319B  23A0  3196   	fcall	_LED_Initialization
  4036                           
  4037                           ;Main_B1.c: 12: Buzzer_Initialization();
  4038  164A  319B  2379  3196   	fcall	_Buzzer_Initialization
  4039                           
  4040                           ;Main_B1.c: 14: ;;
  4041                           ;Main_B1.c: 15: Temp_Initialization();
  4042  164D  319B  2382  3196   	fcall	_Temp_Initialization
  4043                           
  4044                           ;Main_B1.c: 16: Load_Initialization();
  4045  1650  319B  23B1  3196   	fcall	_Load_Initialization
  4046                           
  4047                           ;Main_B1.c: 17: ;;
  4048                           ;Main_B1.c: 18: DelayOff_Initialization();
  4049  1653  319B  2398  3196   	fcall	_DelayOff_Initialization
  4050                           
  4051                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4052  1656  319C  24A4  3196   	fcall	_DimmerLights_Initialization
  4053                           
  4054                           ;Main_B1.c: 21: ;;
  4055                           ;Main_B1.c: 22: ;;
  4056                           ;Main_B1.c: 23: ;;
  4057                           ;Main_B1.c: 24: Switch_Initialization();
  4058  1659  319B  23F1  3196   	fcall	_Switch_Initialization
  4059                           
  4060                           ;Main_B1.c: 25: RF_Initialization();
  4061  165C  319B  237C  3196   	fcall	_RF_Initialization
  4062                           
  4063                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4064  165F  319E  2609  3196   	fcall	_CC2500_PowerOnInitial
  4065  1662                     l7963:	
  4066                           ;Main_B1.c: 27: ;;
  4067                           ;Main_B1.c: 28: ;;
  4068                           ;Main_B1.c: 30: while (1) {
  4069                           
  4070                           
  4071                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4072  1662  0021               	movlb	1	; select bank1
  4073  1663  1C20               	btfss	_myMain^(0+128),0
  4074  1664  2E6D               	goto	l7967
  4075                           
  4076                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4077  1665  3005               	movlw	5
  4078  1666  318B  23C7  3196   	fcall	_getLoad_AD
  4079                           
  4080                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4081  1669  3009               	movlw	9
  4082  166A  3193  2341  3196   	fcall	_getTemp_AD
  4083  166D                     l7967:	
  4084                           
  4085                           ;Main_B1.c: 57: }
  4086                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4087  166D  0021               	movlb	1	; select bank1
  4088  166E  1C46               	btfss	_Timer1^(0+128),0
  4089  166F  2E62               	goto	l7963
  4090                           
  4091                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4092  1670  1046               	bcf	_Timer1^(0+128),0
  4093                           
  4094                           ;Main_B1.c: 96: my_MainTimer();
  4095  1671  3194  242D  3196   	fcall	_my_MainTimer
  4096                           
  4097                           ;Main_B1.c: 97: WDT_Main();
  4098  1674  319D  2594  3196   	fcall	_WDT_Main
  4099                           
  4100                           ;Main_B1.c: 98: ;;
  4101                           ;Main_B1.c: 99: ;;
  4102                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4103  1677  0021               	movlb	1	; select bank1
  4104  1678  1C20               	btfss	_myMain^(0+128),0
  4105  1679  2E62               	goto	l7963
  4106                           
  4107                           ;Main_B1.c: 102: Flash_Memory_Main();
  4108  167A  3192  229E  3196   	fcall	_Flash_Memory_Main
  4109                           
  4110                           ;Main_B1.c: 104: LED_Main();
  4111  167D  319B  23A4  3196   	fcall	_LED_Main
  4112                           
  4113                           ;Main_B1.c: 105: Buzzer_Main();
  4114  1680  3194  24FA  3196   	fcall	_Buzzer_Main
  4115                           
  4116                           ;Main_B1.c: 107: ;;
  4117                           ;Main_B1.c: 108: Temp_Main();
  4118  1683  319B  2385  3196   	fcall	_Temp_Main
  4119                           
  4120                           ;Main_B1.c: 109: Load_Main();
  4121  1686  3180  2043  3196   	fcall	_Load_Main
  4122                           
  4123                           ;Main_B1.c: 110: ;;
  4124                           ;Main_B1.c: 112: ;;
  4125                           ;Main_B1.c: 113: DimmerLights_Main();
  4126  1689  3191  216B  3196   	fcall	_DimmerLights_Main
  4127                           
  4128                           ;Main_B1.c: 114: Switch_Main();
  4129  168C  319E  26F4  3196   	fcall	_Switch_Main
  4130                           
  4131                           ;Main_B1.c: 115: ;;
  4132                           ;Main_B1.c: 116: ;;
  4133                           ;Main_B1.c: 118: RF_Main();
  4134  168F  319B  237F  3196   	fcall	_RF_Main
  4135                           
  4136                           ;Main_B1.c: 119: DelayOff_Main();
  4137  1692  319B  239C  3196   	fcall	_DelayOff_Main
  4138                           
  4139                           ;Main_B1.c: 120: ;;
  4140                           ;Main_B1.c: 121: ;;
  4141  1695  2E62               	goto	l7963
  4142  1696                     __end_of_main:	
  4143                           ;Main_B1.c: 128: }
  4144                           ;Main_B1.c: 129: }
  4145                           ;Main_B1.c: 163: }
  4146                           ;Main_B1.c: 164: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  142D                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 183 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;;		_setTxData
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _my_MainTimer
  4185  142D                     _my_MainTimer:	
  4186                           
  4187                           ;Main_B1.c: 186: if (myMain.PowerON == 0) {
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4191  142D  0021               	movlb	1	; select bank1
  4192  142E  1820               	btfsc	_myMain^(0+128),0
  4193  142F  2C47               	goto	l7703
  4194                           
  4195                           ;Main_B1.c: 187: myMain.PowerCount++;
  4196  1430  3001               	movlw	1
  4197  1431  0020               	movlb	0	; select bank0
  4198  1432  00AD               	movwf	??_my_MainTimer
  4199  1433  082D               	movf	??_my_MainTimer,w
  4200  1434  0021               	movlb	1	; select bank1
  4201  1435  07A1               	addwf	(_myMain^(0+128)+1),f
  4202                           
  4203                           ;Main_B1.c: 188: if (myMain.PowerCount == 150) {
  4204  1436  0821               	movf	(_myMain^(0+128)+1),w
  4205  1437  3A96               	xorlw	150
  4206  1438  1D03               	skipz
  4207  1439  0008               	return
  4208                           
  4209                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  4210  143A  01A1               	clrf	(_myMain^(0+128)+1)
  4211                           
  4212                           ;Main_B1.c: 190: myMain.PowerON = 1;
  4213  143B  1420               	bsf	_myMain^(0+128),0
  4214                           
  4215                           ;Main_B1.c: 195: setBuz(3, 50);
  4216  143C  3032               	movlw	50
  4217  143D  0020               	movlb	0	; select bank0
  4218  143E  00A9               	movwf	setBuz@time
  4219  143F  3000               	movlw	0
  4220  1440  00AA               	movwf	setBuz@time+1
  4221  1441  3003               	movlw	3
  4222  1442  3196  2696         	fcall	_setBuz
  4223                           
  4224                           ;Main_B1.c: 196: myMain.SelfTest = 1;
  4225  1444  0021               	movlb	1	; select bank1
  4226  1445  1620               	bsf	_myMain^(0+128),4
  4227                           
  4228                           ;Main_B1.c: 205: }
  4229                           ;Main_B1.c: 206: } else {
  4230  1446  0008               	return
  4231  1447                     l7703:	
  4232                           
  4233                           ;Main_B1.c: 207: myMain.PowerCount++;
  4234  1447  3001               	movlw	1
  4235  1448  0020               	movlb	0	; select bank0
  4236  1449  00AD               	movwf	??_my_MainTimer
  4237  144A  082D               	movf	??_my_MainTimer,w
  4238  144B  0021               	movlb	1	; select bank1
  4239  144C  07A1               	addwf	(_myMain^(0+128)+1),f
  4240                           
  4241                           ;Main_B1.c: 208: if (myMain.PowerCount == 100) {
  4242  144D  0821               	movf	(_myMain^(0+128)+1),w
  4243  144E  3A64               	xorlw	100
  4244  144F  1D03               	skipz
  4245  1450  2C55               	goto	l7711
  4246                           
  4247                           ;Main_B1.c: 209: myMain.PowerCount = 0;
  4248  1451  01A1               	clrf	(_myMain^(0+128)+1)
  4249                           
  4250                           ;Main_B1.c: 217: setTxData();
  4251  1452  3187  2726  3194   	fcall	_setTxData
  4252  1455                     l7711:	
  4253                           
  4254                           ;Main_B1.c: 221: }
  4255                           ;Main_B1.c: 223: myMain.Count1++;
  4256  1455  3001               	movlw	1
  4257  1456  0021               	movlb	1	; select bank1
  4258  1457  07A4               	addwf	(_myMain^(0+128)+4),f
  4259  1458  3000               	movlw	0
  4260  1459  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4261                           
  4262                           ;Main_B1.c: 224: if (myMain.Count1 == 100)
  4263  145A  3004               	movlw	4
  4264  145B  3EA0               	addlw	_myMain& (0+255)
  4265  145C  0086               	movwf	6
  4266  145D  0187               	clrf	7
  4267  145E  3F40               	moviw [0]fsr1
  4268  145F  3A64               	xorlw	100
  4269  1460  1D03               	skipz
  4270  1461  2C64               	goto	u7675
  4271  1462  3F41               	moviw [1]fsr1
  4272  1463  3A00               	xorlw	0
  4273  1464                     u7675:	
  4274  1464  1D03               	skipz
  4275  1465  0008               	return
  4276                           
  4277                           ;Main_B1.c: 225: {
  4278                           ;Main_B1.c: 226: myMain.Count1 = 0;
  4279  1466  01A4               	clrf	(_myMain^(0+128)+4)
  4280  1467  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4281                           
  4282                           ;Main_B1.c: 238: if (myMain.Flag) {
  4283  1468  1CA0               	btfss	_myMain^(0+128),1
  4284  1469  2C6C               	goto	l1385
  4285                           
  4286                           ;Main_B1.c: 239: myMain.Flag = 0;
  4287  146A  10A0               	bcf	_myMain^(0+128),1
  4288                           
  4289                           ;Main_B1.c: 248: } else {
  4290  146B  0008               	return
  4291  146C                     l1385:	
  4292                           
  4293                           ;Main_B1.c: 249: myMain.Flag = 1;
  4294  146C  14A0               	bsf	_myMain^(0+128),1
  4295  146D  0008               	return
  4296  146E                     __end_of_my_MainTimer:	
  4297                           
  4298                           	psect	text2
  4299  1CDD                     __ptext2:	
  4300 ;; *************** function _myMain_Initialization *****************
  4301 ;; Defined at:
  4302 ;;		line 170 in file "../src/Main_B1.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;		None
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;		None
  4307 ;; Return value:  Size  Location     Type
  4308 ;;		None               void
  4309 ;; Registers used:
  4310 ;;		wreg, fsr1l, fsr1h
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;Total ram usage:        1 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    5
  4323 ;; This function calls:
  4324 ;;		Nothing
  4325 ;; This function is called by:
  4326 ;;		_main
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _myMain_Initialization
  4332  1CDD                     _myMain_Initialization:	
  4333                           
  4334                           ;Main_B1.c: 172: product = &_product;
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4338  1CDD  3020               	movlw	__product& (0+255)
  4339  1CDE  0020               	movlb	0	; select bank0
  4340  1CDF  00A0               	movwf	??_myMain_Initialization
  4341  1CE0  0820               	movf	??_myMain_Initialization,w
  4342  1CE1  00EE               	movwf	_product
  4343                           
  4344                           ;Main_B1.c: 173: product->Data[20] = 209;
  4345  1CE2  30D1               	movlw	209
  4346  1CE3  00A0               	movwf	??_myMain_Initialization
  4347  1CE4  086E               	movf	_product,w
  4348  1CE5  3E14               	addlw	20
  4349  1CE6  0086               	movwf	6
  4350  1CE7  3002               	movlw	2	; select bank4/5
  4351  1CE8  0087               	movwf	7
  4352  1CE9  0820               	movf	??_myMain_Initialization,w
  4353  1CEA  0081               	movwf	1
  4354  1CEB  0008               	return
  4355  1CEC                     __end_of_myMain_Initialization:	
  4356                           
  4357                           	psect	text3
  4358  1341                     __ptext3:	
  4359 ;; *************** function _getTemp_AD *****************
  4360 ;; Defined at:
  4361 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  channel         1    wreg     unsigned char 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  channel         1    5[BANK0 ] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;		None               void
  4368 ;; Registers used:
  4369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;Total ram usage:        2 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    7
  4382 ;; This function calls:
  4383 ;;		_getAD
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _getTemp_AD
  4391  1341                     _getTemp_AD:	
  4392                           
  4393                           ;incstack = 0
  4394                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4395                           ;getTemp_AD@channel stored from wreg
  4396  1341  0020               	movlb	0	; select bank0
  4397  1342  00A5               	movwf	getTemp_AD@channel
  4398                           
  4399                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4400  1343  0021               	movlb	1	; select bank1
  4401  1344  1D57               	btfss	_Temp^(0+128),2
  4402  1345  0008               	return
  4403                           
  4404                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4405  1346  1657               	bsf	_Temp^(0+128),4
  4406                           
  4407                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4408  1347  30F0               	movlw	240
  4409  1348  0020               	movlb	0	; select bank0
  4410  1349  00A4               	movwf	??_getTemp_AD
  4411  134A  0824               	movf	??_getTemp_AD,w
  4412  134B  00A0               	movwf	getAD@adcon1
  4413  134C  0825               	movf	getTemp_AD@channel,w
  4414  134D  319F  2714  3193   	fcall	_getAD
  4415  1350  0020               	movlb	0	; select bank0
  4416  1351  0821               	movf	?_getAD+1,w
  4417  1352  0021               	movlb	1	; select bank1
  4418  1353  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4419  1354  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4420  1355  0020               	movlb	0	; select bank0
  4421  1356  0820               	movf	?_getAD,w
  4422  1357  0021               	movlb	1	; select bank1
  4423  1358  01E3               	clrf	(_Temp^(0+128)+12)
  4424  1359  07E3               	addwf	(_Temp^(0+128)+12),f
  4425                           
  4426                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4427  135A  0864               	movf	((_Temp+1)^(0+128)+12),w
  4428  135B  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4429  135C  1D03               	skipz
  4430  135D  2B60               	goto	u7625
  4431  135E  0863               	movf	(_Temp^(0+128)+12),w
  4432  135F  025F               	subwf	(_Temp^(0+128)+8),w
  4433  1360                     u7625:	
  4434  1360  1803               	skipnc
  4435  1361  2B69               	goto	l7685
  4436                           
  4437                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4438  1362  0864               	movf	((_Temp+1)^(0+128)+12),w
  4439  1363  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4440  1364  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4441  1365  0863               	movf	(_Temp^(0+128)+12),w
  4442  1366  01DF               	clrf	(_Temp^(0+128)+8)
  4443  1367  07DF               	addwf	(_Temp^(0+128)+8),f
  4444                           
  4445                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4446  1368  0008               	return
  4447  1369                     l7685:	
  4448  1369  0864               	movf	((_Temp+1)^(0+128)+12),w
  4449  136A  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4450  136B  1D03               	skipz
  4451  136C  2B6F               	goto	u7635
  4452  136D  0863               	movf	(_Temp^(0+128)+12),w
  4453  136E  0261               	subwf	(_Temp^(0+128)+10),w
  4454  136F                     u7635:	
  4455  136F  1803               	skipnc
  4456  1370  0008               	return
  4457                           
  4458                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4459  1371  0864               	movf	((_Temp+1)^(0+128)+12),w
  4460  1372  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4461  1373  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4462  1374  0863               	movf	(_Temp^(0+128)+12),w
  4463  1375  01E1               	clrf	(_Temp^(0+128)+10)
  4464  1376  07E1               	addwf	(_Temp^(0+128)+10),f
  4465  1377  0008               	return
  4466  1378                     __end_of_getTemp_AD:	
  4467                           
  4468                           	psect	text4
  4469  0BC7                     __ptext4:	
  4470 ;; *************** function _getLoad_AD *****************
  4471 ;; Defined at:
  4472 ;;		line 15 in file "../src/OverLoad_B1.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  channel         1    wreg     unsigned char 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  channel         1    6[BANK0 ] unsigned char 
  4477 ;;  i               1    9[BANK0 ] unsigned char 
  4478 ;;  j               1    8[BANK0 ] unsigned char 
  4479 ;;  k               1    7[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_getAD
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _getLoad_AD
  4505  0BC7                     _getLoad_AD:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;getLoad_AD@channel stored from wreg
  4510  0BC7  0020               	movlb	0	; select bank0
  4511  0BC8  00A6               	movwf	getLoad_AD@channel
  4512                           
  4513                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4514  0BC9  01A9               	clrf	getLoad_AD@i
  4515  0BCA  01A8               	clrf	getLoad_AD@j
  4516  0BCB  01A7               	clrf	getLoad_AD@k
  4517                           
  4518                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4519  0BCC  0022               	movlb	2	; select bank2
  4520  0BCD  1E41               	btfss	_Load^(0+256),4
  4521  0BCE  0008               	return
  4522                           
  4523                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4524  0BCF  30F3               	movlw	243
  4525  0BD0  0020               	movlb	0	; select bank0
  4526  0BD1  00A4               	movwf	??_getLoad_AD
  4527  0BD2  0824               	movf	??_getLoad_AD,w
  4528  0BD3  00A0               	movwf	getAD@adcon1
  4529  0BD4  0826               	movf	getLoad_AD@channel,w
  4530  0BD5  319F  2714  318B   	fcall	_getAD
  4531  0BD8  0020               	movlb	0	; select bank0
  4532  0BD9  0821               	movf	?_getAD+1,w
  4533  0BDA  0022               	movlb	2	; select bank2
  4534  0BDB  01E3               	clrf	((_Load+1)^(0+256)+33)
  4535  0BDC  07E3               	addwf	((_Load+1)^(0+256)+33),f
  4536  0BDD  0020               	movlb	0	; select bank0
  4537  0BDE  0820               	movf	?_getAD,w
  4538  0BDF  0022               	movlb	2	; select bank2
  4539  0BE0  01E2               	clrf	(_Load^(0+256)+33)
  4540  0BE1  07E2               	addwf	(_Load^(0+256)+33),f
  4541                           
  4542                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4543  0BE2  0020               	movlb	0	; select bank0
  4544  0BE3  01A9               	clrf	getLoad_AD@i
  4545  0BE4  3004               	movlw	4
  4546  0BE5  0229               	subwf	getLoad_AD@i,w
  4547  0BE6  1803               	btfsc	3,0
  4548  0BE7  2C15               	goto	l7655
  4549  0BE8                     l7643:	
  4550                           
  4551                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4552  0BE8  3529               	lslf	getLoad_AD@i,w
  4553  0BE9  3E4C               	addlw	(_Load+11)& (0+255)
  4554  0BEA  0086               	movwf	6
  4555  0BEB  3001               	movlw	1	; select bank2/3
  4556  0BEC  0087               	movwf	7
  4557  0BED  3F40               	moviw [0]fsr1
  4558  0BEE  00A4               	movwf	??_getLoad_AD
  4559  0BEF  3F41               	moviw [1]fsr1
  4560  0BF0  00A5               	movwf	??_getLoad_AD+1
  4561  0BF1  0022               	movlb	2	; select bank2
  4562  0BF2  0863               	movf	((_Load+1)^(0+256)+33),w
  4563  0BF3  0020               	movlb	0	; select bank0
  4564  0BF4  0225               	subwf	??_getLoad_AD+1,w
  4565  0BF5  1D03               	skipz
  4566  0BF6  2BFB               	goto	u7535
  4567  0BF7  0022               	movlb	2	; select bank2
  4568  0BF8  0862               	movf	(_Load^(0+256)+33),w
  4569  0BF9  0020               	movlb	0	; select bank0
  4570  0BFA  0224               	subwf	??_getLoad_AD,w
  4571  0BFB                     u7535:	
  4572  0BFB  1803               	skipnc
  4573  0BFC  2C0D               	goto	l7651
  4574  0BFD  08A8               	movf	getLoad_AD@j,f
  4575  0BFE  1D03               	skipz
  4576  0BFF  2C0D               	goto	l7651
  4577                           
  4578                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4579  0C00  3529               	lslf	getLoad_AD@i,w
  4580  0C01  3E4C               	addlw	(_Load+11)& (0+255)
  4581  0C02  0086               	movwf	6
  4582  0C03  3001               	movlw	1	; select bank2/3
  4583  0C04  0087               	movwf	7
  4584  0C05  0022               	movlb	2	; select bank2
  4585  0C06  0862               	movf	(_Load^(0+256)+33),w
  4586  0C07  3FC0               	movwi [0]fsr1
  4587  0C08  0863               	movf	((_Load+1)^(0+256)+33),w
  4588  0C09  3FC1               	movwi [1]fsr1
  4589                           
  4590                           ;OverLoad_B1.c: 24: j = 1;
  4591  0C0A  0020               	movlb	0	; select bank0
  4592  0C0B  01A8               	clrf	getLoad_AD@j
  4593  0C0C  0AA8               	incf	getLoad_AD@j,f
  4594  0C0D                     l7651:	
  4595  0C0D  3001               	movlw	1
  4596  0C0E  00A4               	movwf	??_getLoad_AD
  4597  0C0F  0824               	movf	??_getLoad_AD,w
  4598  0C10  07A9               	addwf	getLoad_AD@i,f
  4599  0C11  3004               	movlw	4
  4600  0C12  0229               	subwf	getLoad_AD@i,w
  4601  0C13  1C03               	skipc
  4602  0C14  2BE8               	goto	l7643
  4603  0C15                     l7655:	
  4604                           
  4605                           ;OverLoad_B1.c: 25: }
  4606                           ;OverLoad_B1.c: 26: }
  4607                           ;OverLoad_B1.c: 27: if (j == 0) {
  4608  0C15  08A8               	movf	getLoad_AD@j,f
  4609  0C16  1D03               	skipz
  4610  0C17  0008               	return
  4611                           
  4612                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4613  0C18  01A9               	clrf	getLoad_AD@i
  4614  0C19                     L1:	
  4615  0C19  3004               	movlw	4
  4616  0C1A  0229               	subwf	getLoad_AD@i,w
  4617  0C1B  1803               	btfsc	3,0
  4618  0C1C  0008               	return
  4619                           
  4620                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4621  0C1D  3529               	lslf	getLoad_AD@i,w
  4622  0C1E  3E56               	addlw	(_Load+21)& (0+255)
  4623  0C1F  0086               	movwf	6
  4624  0C20  3001               	movlw	1	; select bank2/3
  4625  0C21  0087               	movwf	7
  4626  0C22  3F40               	moviw [0]fsr1
  4627  0C23  00A4               	movwf	??_getLoad_AD
  4628  0C24  3F41               	moviw [1]fsr1
  4629  0C25  00A5               	movwf	??_getLoad_AD+1
  4630  0C26  0825               	movf	??_getLoad_AD+1,w
  4631  0C27  0022               	movlb	2	; select bank2
  4632  0C28  0263               	subwf	((_Load+1)^(0+256)+33),w
  4633  0C29  1D03               	skipz
  4634  0C2A  2C2F               	goto	u7585
  4635  0C2B  0020               	movlb	0	; select bank0
  4636  0C2C  0824               	movf	??_getLoad_AD,w
  4637  0C2D  0022               	movlb	2	; select bank2
  4638  0C2E  0262               	subwf	(_Load^(0+256)+33),w
  4639  0C2F                     u7585:	
  4640  0C2F  1803               	skipnc
  4641  0C30  2C42               	goto	l7671
  4642  0C31  0020               	movlb	0	; select bank0
  4643  0C32  08A7               	movf	getLoad_AD@k,f
  4644  0C33  1D03               	skipz
  4645  0C34  2C42               	goto	l7671
  4646                           
  4647                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4648  0C35  3529               	lslf	getLoad_AD@i,w
  4649  0C36  3E56               	addlw	(_Load+21)& (0+255)
  4650  0C37  0086               	movwf	6
  4651  0C38  3001               	movlw	1	; select bank2/3
  4652  0C39  0087               	movwf	7
  4653  0C3A  0022               	movlb	2	; select bank2
  4654  0C3B  0862               	movf	(_Load^(0+256)+33),w
  4655  0C3C  3FC0               	movwi [0]fsr1
  4656  0C3D  0863               	movf	((_Load+1)^(0+256)+33),w
  4657  0C3E  3FC1               	movwi [1]fsr1
  4658                           
  4659                           ;OverLoad_B1.c: 31: k = 1;
  4660  0C3F  0020               	movlb	0	; select bank0
  4661  0C40  01A7               	clrf	getLoad_AD@k
  4662  0C41  0AA7               	incf	getLoad_AD@k,f
  4663  0C42                     l7671:	
  4664  0C42  3001               	movlw	1
  4665  0C43  0020               	movlb	0	; select bank0
  4666  0C44  00A4               	movwf	??_getLoad_AD
  4667  0C45  0824               	movf	??_getLoad_AD,w
  4668  0C46  07A9               	addwf	getLoad_AD@i,f
  4669  0C47  2C19               	goto	L1
  4670  0C48                     __end_of_getLoad_AD:	
  4671                           
  4672                           	psect	text5
  4673  1F14                     __ptext5:	
  4674 ;; *************** function _getAD *****************
  4675 ;; Defined at:
  4676 ;;		line 454 in file "../src/MCU_B1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  adcon0          1    wreg     unsigned char 
  4679 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  2    0[BANK0 ] int 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4691 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;Total ram usage:        4 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    6
  4698 ;; This function calls:
  4699 ;;		_Timeout_Counter
  4700 ;;		_set_TimeoutCleared
  4701 ;; This function is called by:
  4702 ;;		_getLoad_AD
  4703 ;;		_getTemp_AD
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _getAD
  4709  1F14                     _getAD:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4713                           ;getAD@adcon0 stored from wreg
  4714  1F14  0020               	movlb	0	; select bank0
  4715  1F15  00A3               	movwf	getAD@adcon0
  4716                           
  4717                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4718  1F16  0823               	movf	getAD@adcon0,w
  4719  1F17  0021               	movlb	1	; select bank1
  4720  1F18  009D               	movwf	29	;volatile
  4721                           
  4722                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4723  1F19  0020               	movlb	0	; select bank0
  4724  1F1A  0820               	movf	getAD@adcon1,w
  4725  1F1B  0021               	movlb	1	; select bank1
  4726  1F1C  009E               	movwf	30	;volatile
  4727                           
  4728                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4729  1F1D  149D               	bsf	29,1	;volatile
  4730                           
  4731                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4732  1F1E  2F22               	goto	l7033
  4733  1F1F                     l7031:	
  4734                           
  4735                           ;MCU_B1.c: 459: Timeout_Counter();
  4736  1F1F  319D  25F4  319F   	fcall	_Timeout_Counter
  4737  1F22                     l7033:	
  4738  1F22  0021               	movlb	1	; select bank1
  4739  1F23  1C9D               	btfss	29,1	;volatile
  4740  1F24  2F27               	goto	l7037
  4741  1F25  1D2B               	btfss	(_myMain^(0+128)+11),2
  4742  1F26  2F1F               	goto	l7031
  4743  1F27                     l7037:	
  4744                           
  4745                           ;MCU_B1.c: 460: };
  4746                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4747  1F27  319B  23AC         	fcall	_set_TimeoutCleared
  4748                           
  4749                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4750  1F29  0021               	movlb	1	; select bank1
  4751  1F2A  081C               	movf	28,w	;volatile
  4752  1F2B  0020               	movlb	0	; select bank0
  4753  1F2C  01A1               	clrf	?_getAD+1
  4754  1F2D  07A1               	addwf	?_getAD+1,f
  4755  1F2E  0021               	movlb	1	; select bank1
  4756  1F2F  081B               	movf	27,w	;volatile
  4757  1F30  0020               	movlb	0	; select bank0
  4758  1F31  01A0               	clrf	?_getAD
  4759  1F32  07A0               	addwf	?_getAD,f
  4760  1F33  0008               	return
  4761  1F34                     __end_of_getAD:	
  4762                           
  4763                           	psect	text6
  4764  1D94                     __ptext6:	
  4765 ;; *************** function _WDT_Main *****************
  4766 ;; Defined at:
  4767 ;;		line 1056 in file "../src/MCU_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        1 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    6
  4788 ;; This function calls:
  4789 ;;		_WDT_Clearing
  4790 ;; This function is called by:
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _WDT_Main
  4797  1D94                     _WDT_Main:	
  4798                           
  4799                           ;MCU_B1.c: 1057: if (WDT.Enable == 1) {
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4803  1D94  0021               	movlb	1	; select bank1
  4804  1D95  1C4B               	btfss	_WDT^(0+128),0
  4805  1D96  0008               	return
  4806                           
  4807                           ;MCU_B1.c: 1058: if (WDT.Timer-- > 0) {
  4808  1D97  3001               	movlw	1
  4809  1D98  02CC               	subwf	(_WDT^(0+128)+1),f
  4810  1D99  084C               	movf	(_WDT^(0+128)+1),w
  4811  1D9A  3AFF               	xorlw	255
  4812  1D9B  1903               	skipnz
  4813  1D9C  0008               	return
  4814                           
  4815                           ;MCU_B1.c: 1059: WDT.Timer = 100;
  4816  1D9D  3064               	movlw	100
  4817  1D9E  0020               	movlb	0	; select bank0
  4818  1D9F  00A0               	movwf	??_WDT_Main
  4819  1DA0  0820               	movf	??_WDT_Main,w
  4820  1DA1  0021               	movlb	1	; select bank1
  4821  1DA2  00CC               	movwf	(_WDT^(0+128)+1)
  4822                           
  4823                           ;MCU_B1.c: 1060: WDT_Clearing();
  4824  1DA3  3180  2002         	fcall	_WDT_Clearing
  4825  1DA5  0008               	return
  4826  1DA6                     __end_of_WDT_Main:	
  4827                           
  4828                           	psect	text7
  4829  0002                     __ptext7:	
  4830 ;; *************** function _WDT_Clearing *****************
  4831 ;; Defined at:
  4832 ;;		line 1066 in file "../src/MCU_B1.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		None
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    5
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_WDT_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _WDT_Clearing
  4862  0002                     _WDT_Clearing:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _WDT_Clearing: []
  4866  0002  0064               	clrwdt	;# 
  4867  0003  0008               	return
  4868  0004                     __end_of_WDT_Clearing:	
  4869                           
  4870                           	psect	text8
  4871  1B85                     __ptext8:	
  4872 ;; *************** function _Temp_Main *****************
  4873 ;; Defined at:
  4874 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    8
  4895 ;; This function calls:
  4896 ;;		_setTemp_Main
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _Temp_Main
  4904  1B85                     _Temp_Main:	
  4905                           
  4906                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  1B85  318F  2745         	fcall	_setTemp_Main
  4911  1B87  0008               	return
  4912  1B88                     __end_of_Temp_Main:	
  4913                           
  4914                           	psect	text9
  4915  0F45                     __ptext9:	
  4916 ;; *************** function _setTemp_Main *****************
  4917 ;; Defined at:
  4918 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        2 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    7
  4939 ;; This function calls:
  4940 ;;		_getMain_All_Error_Status
  4941 ;;		_setBuz
  4942 ;; This function is called by:
  4943 ;;		_Temp_Main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _setTemp_Main
  4949  0F45                     _setTemp_Main:	
  4950                           
  4951                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4955  0F45  0021               	movlb	1	; select bank1
  4956  0F46  1C57               	btfss	_Temp^(0+128),0
  4957  0F47  2FFC               	goto	l1688
  4958                           
  4959                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4960  0F48  1957               	btfsc	_Temp^(0+128),2
  4961  0F49  2F59               	goto	l7141
  4962                           
  4963                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4964  0F4A  3001               	movlw	1
  4965  0F4B  07D8               	addwf	(_Temp^(0+128)+1),f
  4966  0F4C  3000               	movlw	0
  4967  0F4D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4968                           
  4969                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4970  0F4E  3001               	movlw	1
  4971  0F4F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4972  0F50  30F4               	movlw	244
  4973  0F51  1903               	skipnz
  4974  0F52  0258               	subwf	(_Temp^(0+128)+1),w
  4975  0F53  1C03               	skipc
  4976  0F54  0008               	return
  4977                           
  4978                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4979  0F55  01D8               	clrf	(_Temp^(0+128)+1)
  4980  0F56  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4981                           
  4982                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4983  0F57  1557               	bsf	_Temp^(0+128),2
  4984                           
  4985                           ;OverTemperature_B1.c: 64: }
  4986                           ;OverTemperature_B1.c: 65: } else {
  4987  0F58  0008               	return
  4988  0F59                     l7141:	
  4989                           
  4990                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  4991  0F59  3002               	movlw	2
  4992  0F5A  3191  21CD  318F   	fcall	_getMain_All_Error_Status
  4993  0F5D  3800               	iorlw	0
  4994  0F5E  1D03               	skipz
  4995  0F5F  0008               	return
  4996                           
  4997                           ;OverTemperature_B1.c: 67: Temp.Time++;
  4998  0F60  3001               	movlw	1
  4999  0F61  0021               	movlb	1	; select bank1
  5000  0F62  07D8               	addwf	(_Temp^(0+128)+1),f
  5001  0F63  3000               	movlw	0
  5002  0F64  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5003                           
  5004                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5005  0F65  3000               	movlw	0
  5006  0F66  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5007  0F67  3005               	movlw	5
  5008  0F68  1903               	skipnz
  5009  0F69  0258               	subwf	(_Temp^(0+128)+1),w
  5010  0F6A  1C03               	skipc
  5011  0F6B  0008               	return
  5012                           
  5013                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5014  0F6C  01D8               	clrf	(_Temp^(0+128)+1)
  5015  0F6D  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5016                           
  5017                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5018  0F6E  1E57               	btfss	_Temp^(0+128),4
  5019  0F6F  0008               	return
  5020                           
  5021                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5022  0F70  1157               	bcf	_Temp^(0+128),2
  5023                           
  5024                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5025  0F71  300A               	movlw	10
  5026  0F72  3ED7               	addlw	_Temp& (0+255)
  5027  0F73  0086               	movwf	6
  5028  0F74  0187               	clrf	7
  5029  0F75  3008               	movlw	8
  5030  0F76  3ED7               	addlw	_Temp& (0+255)
  5031  0F77  0084               	movwf	4
  5032  0F78  0185               	clrf	5
  5033  0F79  3F40               	moviw [0]fsr1
  5034  0F7A  0700               	addwf	0,w
  5035  0F7B  0020               	movlb	0	; select bank0
  5036  0F7C  00AD               	movwf	??_setTemp_Main
  5037  0F7D  3101               	addfsr 0,1
  5038  0F7E  3F41               	moviw [1]fsr1
  5039  0F7F  3D00               	addwfc	0,w
  5040  0F80  00AE               	movwf	??_setTemp_Main+1
  5041  0F81  36AE               	lsrf	??_setTemp_Main+1,f
  5042  0F82  0CAD               	rrf	??_setTemp_Main,f
  5043  0F83  082D               	movf	??_setTemp_Main,w
  5044  0F84  0021               	movlb	1	; select bank1
  5045  0F85  00DD               	movwf	(_Temp^(0+128)+6)
  5046  0F86  0020               	movlb	0	; select bank0
  5047  0F87  082E               	movf	??_setTemp_Main+1,w
  5048  0F88  0021               	movlb	1	; select bank1
  5049  0F89  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5050                           
  5051                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 400;
  5052  0F8A  3090               	movlw	144
  5053  0F8B  00E5               	movwf	(_Temp^(0+128)+14)
  5054  0F8C  3001               	movlw	1
  5055  0F8D  00E6               	movwf	(_Temp^(0+128)+15)
  5056                           
  5057                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 345;
  5058  0F8E  3059               	movlw	89
  5059  0F8F  00E7               	movwf	(_Temp^(0+128)+16)
  5060  0F90  3001               	movlw	1
  5061  0F91  00E8               	movwf	(_Temp^(0+128)+17)
  5062                           
  5063                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  5064  0F92  1CD7               	btfss	_Temp^(0+128),1
  5065  0F93  2FB4               	goto	l7173
  5066                           
  5067                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  5068  0F94  0866               	movf	((_Temp+1)^(0+128)+14),w
  5069  0F95  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5070  0F96  1D03               	skipz
  5071  0F97  2F9A               	goto	u6665
  5072  0F98  0865               	movf	(_Temp^(0+128)+14),w
  5073  0F99  025D               	subwf	(_Temp^(0+128)+6),w
  5074  0F9A                     u6665:	
  5075  0F9A  1C03               	skipc
  5076  0F9B  2FB2               	goto	l7171
  5077                           
  5078                           ;OverTemperature_B1.c: 92: Temp.Count++;
  5079  0F9C  3001               	movlw	1
  5080  0F9D  0020               	movlb	0	; select bank0
  5081  0F9E  00AD               	movwf	??_setTemp_Main
  5082  0F9F  082D               	movf	??_setTemp_Main,w
  5083  0FA0  0021               	movlb	1	; select bank1
  5084  0FA1  07DA               	addwf	(_Temp^(0+128)+3),f
  5085                           
  5086                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  5087  0FA2  3003               	movlw	3
  5088  0FA3  025A               	subwf	(_Temp^(0+128)+3),w
  5089  0FA4  1C03               	skipc
  5090  0FA5  2FCA               	goto	l7185
  5091                           
  5092                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  5093  0FA6  01DA               	clrf	(_Temp^(0+128)+3)
  5094                           
  5095                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  5096  0FA7  10D7               	bcf	_Temp^(0+128),1
  5097                           
  5098                           ;OverTemperature_B1.c: 96: setBuz(2, 100);
  5099  0FA8  3064               	movlw	100
  5100  0FA9  0020               	movlb	0	; select bank0
  5101  0FAA  00A9               	movwf	setBuz@time
  5102  0FAB  3000               	movlw	0
  5103  0FAC  00AA               	movwf	setBuz@time+1
  5104  0FAD  3002               	movlw	2
  5105  0FAE  3196  2696  318F   	fcall	_setBuz
  5106                           
  5107                           ;OverTemperature_B1.c: 97: }
  5108                           ;OverTemperature_B1.c: 98: } else {
  5109  0FB1  2FCA               	goto	l7185
  5110  0FB2                     l7171:	
  5111                           
  5112                           ;OverTemperature_B1.c: 99: Temp.Count = 0;
  5113  0FB2  0021               	movlb	1	; select bank1
  5114  0FB3  2FC9               	goto	l7183
  5115  0FB4                     l7173:	
  5116                           ;OverTemperature_B1.c: 100: }
  5117                           ;OverTemperature_B1.c: 101: } else {
  5118                           
  5119                           
  5120                           ;OverTemperature_B1.c: 102: if (Temp.AD <= Temp.DangerValue) {
  5121  0FB4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5122  0FB5  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5123  0FB6  1D03               	skipz
  5124  0FB7  2FBA               	goto	u6685
  5125  0FB8  085D               	movf	(_Temp^(0+128)+6),w
  5126  0FB9  0267               	subwf	(_Temp^(0+128)+16),w
  5127  0FBA                     u6685:	
  5128  0FBA  1C03               	skipc
  5129  0FBB  2FC9               	goto	l7183
  5130                           
  5131                           ;OverTemperature_B1.c: 103: Temp.Count++;
  5132  0FBC  3001               	movlw	1
  5133  0FBD  0020               	movlb	0	; select bank0
  5134  0FBE  00AD               	movwf	??_setTemp_Main
  5135  0FBF  082D               	movf	??_setTemp_Main,w
  5136  0FC0  0021               	movlb	1	; select bank1
  5137  0FC1  07DA               	addwf	(_Temp^(0+128)+3),f
  5138                           
  5139                           ;OverTemperature_B1.c: 104: if (Temp.Count >= 3) {
  5140  0FC2  3003               	movlw	3
  5141  0FC3  025A               	subwf	(_Temp^(0+128)+3),w
  5142  0FC4  1C03               	skipc
  5143  0FC5  2FCA               	goto	l7185
  5144                           
  5145                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5146  0FC6  01DA               	clrf	(_Temp^(0+128)+3)
  5147                           
  5148                           ;OverTemperature_B1.c: 106: Temp.ERROR = 1;
  5149  0FC7  14D7               	bsf	_Temp^(0+128),1
  5150                           
  5151                           ;OverTemperature_B1.c: 107: }
  5152                           ;OverTemperature_B1.c: 108: } else {
  5153  0FC8  2FCA               	goto	l7185
  5154  0FC9                     l7183:	
  5155                           
  5156                           ;OverTemperature_B1.c: 109: Temp.Count = 0;
  5157  0FC9  01DA               	clrf	(_Temp^(0+128)+3)
  5158  0FCA                     l7185:	
  5159                           
  5160                           ;OverTemperature_B1.c: 110: }
  5161                           ;OverTemperature_B1.c: 111: }
  5162                           ;OverTemperature_B1.c: 112: product->Data[24]=Temp.AD >> 8;
  5163  0FCA  0021               	movlb	1	; select bank1
  5164  0FCB  085E               	movf	((_Temp+1)^(0+128)+6),w
  5165  0FCC  0020               	movlb	0	; select bank0
  5166  0FCD  00AD               	movwf	??_setTemp_Main
  5167  0FCE  086E               	movf	_product,w
  5168  0FCF  3E18               	addlw	24
  5169  0FD0  0086               	movwf	6
  5170  0FD1  3002               	movlw	2	; select bank4/5
  5171  0FD2  0087               	movwf	7
  5172  0FD3  082D               	movf	??_setTemp_Main,w
  5173  0FD4  0081               	movwf	1
  5174                           
  5175                           ;OverTemperature_B1.c: 113: product->Data[25]=Temp.AD;
  5176  0FD5  0021               	movlb	1	; select bank1
  5177  0FD6  085D               	movf	(_Temp^(0+128)+6),w
  5178  0FD7  0020               	movlb	0	; select bank0
  5179  0FD8  00AD               	movwf	??_setTemp_Main
  5180  0FD9  086E               	movf	_product,w
  5181  0FDA  3E19               	addlw	25
  5182  0FDB  0086               	movwf	6
  5183  0FDC  3002               	movlw	2	; select bank4/5
  5184  0FDD  0087               	movwf	7
  5185  0FDE  082D               	movf	??_setTemp_Main,w
  5186  0FDF  0081               	movwf	1
  5187                           
  5188                           ;OverTemperature_B1.c: 121: product->Data[2]=Temp.AD >> 8;
  5189  0FE0  0021               	movlb	1	; select bank1
  5190  0FE1  085E               	movf	((_Temp+1)^(0+128)+6),w
  5191  0FE2  0020               	movlb	0	; select bank0
  5192  0FE3  00AD               	movwf	??_setTemp_Main
  5193  0FE4  086E               	movf	_product,w
  5194  0FE5  3E02               	addlw	2
  5195  0FE6  0086               	movwf	6
  5196  0FE7  3002               	movlw	2	; select bank4/5
  5197  0FE8  0087               	movwf	7
  5198  0FE9  082D               	movf	??_setTemp_Main,w
  5199  0FEA  0081               	movwf	1
  5200                           
  5201                           ;OverTemperature_B1.c: 122: product->Data[3]=Temp.AD;
  5202  0FEB  0021               	movlb	1	; select bank1
  5203  0FEC  085D               	movf	(_Temp^(0+128)+6),w
  5204  0FED  0020               	movlb	0	; select bank0
  5205  0FEE  00AD               	movwf	??_setTemp_Main
  5206  0FEF  086E               	movf	_product,w
  5207  0FF0  3E03               	addlw	3
  5208  0FF1  0086               	movwf	6
  5209  0FF2  3002               	movlw	2	; select bank4/5
  5210  0FF3  0087               	movwf	7
  5211  0FF4  082D               	movf	??_setTemp_Main,w
  5212  0FF5  0081               	movwf	1
  5213                           
  5214                           ;OverTemperature_B1.c: 125: Temp.ADH[0] = 0;
  5215  0FF6  0021               	movlb	1	; select bank1
  5216  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5217  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5218                           
  5219                           ;OverTemperature_B1.c: 126: Temp.ADH[1] = 0;
  5220  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5221  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5222                           
  5223                           ;OverTemperature_B1.c: 127: }
  5224                           ;OverTemperature_B1.c: 128: }
  5225                           ;OverTemperature_B1.c: 129: }
  5226                           ;OverTemperature_B1.c: 130: }
  5227                           ;OverTemperature_B1.c: 131: } else {
  5228  0FFB  0008               	return
  5229  0FFC                     l1688:	
  5230                           
  5231                           ;OverTemperature_B1.c: 132: if (myMain.PowerON == 1) {
  5232  0FFC  1C20               	btfss	_myMain^(0+128),0
  5233  0FFD  0008               	return
  5234                           
  5235                           ;OverTemperature_B1.c: 133: Temp.Enable = 1;
  5236  0FFE  1457               	bsf	_Temp^(0+128),0
  5237  0FFF  0008               	return
  5238  1000                     __end_of_setTemp_Main:	
  5239                           
  5240                           	psect	text10
  5241  1B82                     __ptext10:	
  5242 ;; *************** function _Temp_Initialization *****************
  5243 ;; Defined at:
  5244 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;		None               void
  5251 ;; Registers used:
  5252 ;;		status,2, status,0, pclath, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;Total ram usage:        0 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    6
  5265 ;; This function calls:
  5266 ;;		_setTemp_Initialization
  5267 ;; This function is called by:
  5268 ;;		_main
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function _Temp_Initialization
  5274  1B82                     _Temp_Initialization:	
  5275                           
  5276                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5277                           
  5278                           ;incstack = 0
  5279                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5280  1B82  3187  27FF         	fcall	_setTemp_Initialization
  5281  1B84  0008               	return
  5282  1B85                     __end_of_Temp_Initialization:	
  5283                           
  5284                           	psect	text11
  5285  07FF                     __ptext11:	
  5286 ;; *************** function _setTemp_Initialization *****************
  5287 ;; Defined at:
  5288 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;		None               void
  5295 ;; Registers used:
  5296 ;;		None
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    5
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_Temp_Initialization
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _setTemp_Initialization
  5318  07FF                     _setTemp_Initialization:	
  5319                           
  5320                           ;incstack = 0
  5321                           ; Regs used in _setTemp_Initialization: []
  5322  07FF  0008               	return
  5323  0800                     __end_of_setTemp_Initialization:	
  5324                           
  5325                           	psect	text12
  5326  1EF4                     __ptext12:	
  5327 ;; *************** function _Switch_Main *****************
  5328 ;; Defined at:
  5329 ;;		line 72 in file "../src/Switch_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  error           1   30[BANK0 ] unsigned char 
  5334 ;; Return value:  Size  Location     Type
  5335 ;;		None               void
  5336 ;; Registers used:
  5337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;Total ram usage:        2 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:   11
  5350 ;; This function calls:
  5351 ;;		_TouchPower
  5352 ;;		_getMain_All_Error_Status
  5353 ;;		_setMain_Exception
  5354 ;;		_setSw_Main
  5355 ;; This function is called by:
  5356 ;;		_main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _Switch_Main
  5362  1EF4                     _Switch_Main:	
  5363                           
  5364                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5368  1EF4  3000               	movlw	0
  5369  1EF5  3191  21CD  319E   	fcall	_getMain_All_Error_Status
  5370  1EF8  0020               	movlb	0	; select bank0
  5371  1EF9  00BD               	movwf	??_Switch_Main
  5372  1EFA  083D               	movf	??_Switch_Main,w
  5373  1EFB  00BE               	movwf	Switch_Main@error
  5374                           
  5375                           ;Switch_B1.c: 74: if (error != 0) {
  5376  1EFC  083E               	movf	Switch_Main@error,w
  5377  1EFD  1903               	btfsc	3,2
  5378  1EFE  2F04               	goto	l2384
  5379                           
  5380                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5381  1EFF  0021               	movlb	1	; select bank1
  5382  1F00  1852               	btfsc	_SwDetect^(0+128),0
  5383  1F01  2F0D               	goto	l7887
  5384                           
  5385                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5386  1F02  1452               	bsf	_SwDetect^(0+128),0
  5387  1F03  2F08               	goto	L2
  5388  1F04                     l2384:	
  5389                           ;Switch_B1.c: 80: }
  5390                           ;Switch_B1.c: 81: } else {
  5391                           
  5392                           ;Switch_B1.c: 78: setMain_Exception(error);
  5393                           
  5394                           
  5395                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5396  1F04  0021               	movlb	1	; select bank1
  5397  1F05  1C52               	btfss	_SwDetect^(0+128),0
  5398  1F06  2F0D               	goto	l7887
  5399                           
  5400                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5401  1F07  1052               	bcf	_SwDetect^(0+128),0
  5402  1F08                     L2:	
  5403                           
  5404                           ;Switch_B1.c: 85: setMain_Exception(error);
  5405  1F08  0020               	movlb	0	; select bank0
  5406  1F09  083E               	movf	Switch_Main@error,w
  5407  1F0A  3197  27A4  319E   	fcall	_setMain_Exception
  5408  1F0D                     l7887:	
  5409                           
  5410                           ;Switch_B1.c: 87: }
  5411                           ;Switch_B1.c: 88: }
  5412                           ;Switch_B1.c: 91: setSw_Main(1);
  5413  1F0D  3001               	movlw	1
  5414  1F0E  3181  21C0  319E   	fcall	_setSw_Main
  5415                           
  5416                           ;Switch_B1.c: 103: TouchPower();
  5417  1F11  319E  261E         	fcall	_TouchPower
  5418  1F13  0008               	return
  5419  1F14                     __end_of_Switch_Main:	
  5420                           
  5421                           	psect	text13
  5422  01C0                     __ptext13:	
  5423 ;; *************** function _setSw_Main *****************
  5424 ;; Defined at:
  5425 ;;		line 137 in file "../src/Switch_B1.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  sw              1    wreg     unsigned char 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  sw              1   19[BANK0 ] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;		None               void
  5432 ;; Registers used:
  5433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;Total ram usage:        3 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    9
  5446 ;; This function calls:
  5447 ;;		_SwPointSelect
  5448 ;;		_getSw_KeyStatus
  5449 ;;		_setBuz
  5450 ;;		_setDimmerLights_AdjControl
  5451 ;;		_setDimmerLights_SwOff
  5452 ;;		_setDimmerLights_SwOn
  5453 ;;		_setRF_Learn
  5454 ;; This function is called by:
  5455 ;;		_Switch_Main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _setSw_Main
  5461  01C0                     _setSw_Main:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5465                           ;setSw_Main@sw stored from wreg
  5466  01C0  0020               	movlb	0	; select bank0
  5467  01C1  00B3               	movwf	setSw_Main@sw
  5468                           
  5469                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5470  01C2  0833               	movf	setSw_Main@sw,w
  5471  01C3  319C  2451  3181   	fcall	_SwPointSelect
  5472                           
  5473                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5474  01C6  087C               	movf	_Sw,w
  5475  01C7  0086               	movwf	6
  5476  01C8  3001               	movlw	1	; select bank2/3
  5477  01C9  0087               	movwf	7
  5478  01CA  1C01               	btfss	1,0
  5479  01CB  2B26               	goto	l2394
  5480                           
  5481                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5482  01CC  0021               	movlb	1	; select bank1
  5483  01CD  1852               	btfsc	_SwDetect^(0+128),0
  5484  01CE  29EA               	goto	l7327
  5485                           
  5486                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5487  01CF  0A7C               	incf	_Sw,w
  5488  01D0  0086               	movwf	6
  5489  01D1  3001               	movlw	1	; select bank2/3
  5490  01D2  0087               	movwf	7
  5491  01D3  1081               	bcf	1,1
  5492                           
  5493                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5494  01D4  0020               	movlb	0	; select bank0
  5495  01D5  0833               	movf	setSw_Main@sw,w
  5496  01D6  319D  255F  3181   	fcall	_getSw_KeyStatus
  5497  01D9  3A01               	xorlw	1
  5498  01DA  3000               	movlw	0
  5499  01DB  1903               	skipnz
  5500  01DC  3001               	movlw	1
  5501  01DD  0020               	movlb	0	; select bank0
  5502  01DE  00B1               	movwf	??_setSw_Main
  5503  01DF  087C               	movf	_Sw,w
  5504  01E0  0086               	movwf	6
  5505  01E1  3001               	movlw	1	; select bank2/3
  5506  01E2  0087               	movwf	7
  5507  01E3  0DB1               	rlf	??_setSw_Main,f
  5508  01E4  0801               	movf	1,w
  5509  01E5  0631               	xorwf	??_setSw_Main,w
  5510  01E6  39FD               	andlw	-3
  5511  01E7  0631               	xorwf	??_setSw_Main,w
  5512  01E8  0081               	movwf	1
  5513                           
  5514                           ;Switch_B1.c: 143: } else {
  5515  01E9  29FF               	goto	l2396
  5516  01EA                     l7327:	
  5517                           
  5518                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5519  01EA  0A7C               	incf	_Sw,w
  5520  01EB  0086               	movwf	6
  5521  01EC  3001               	movlw	1	; select bank2/3
  5522  01ED  0087               	movwf	7
  5523  01EE  1881               	btfsc	1,1
  5524  01EF  29FF               	goto	l2396
  5525                           
  5526                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5527  01F0  0A7C               	incf	_Sw,w
  5528  01F1  0086               	movwf	6
  5529  01F2  3001               	movlw	1	; select bank2/3
  5530  01F3  0087               	movwf	7
  5531  01F4  1481               	bsf	1,1
  5532                           
  5533                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5534  01F5  087C               	movf	_Sw,w
  5535  01F6  0086               	movwf	6
  5536  01F7  3001               	movlw	1	; select bank2/3
  5537  01F8  0087               	movwf	7
  5538  01F9  1081               	bcf	1,1
  5539                           
  5540                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5541  01FA  087C               	movf	_Sw,w
  5542  01FB  0086               	movwf	6
  5543  01FC  3001               	movlw	1	; select bank2/3
  5544  01FD  0087               	movwf	7
  5545  01FE  1501               	bsf	1,2
  5546  01FF                     l2396:	
  5547                           
  5548                           ;Switch_B1.c: 148: }
  5549                           ;Switch_B1.c: 149: }
  5550                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5551  01FF  087C               	movf	_Sw,w
  5552  0200  0086               	movwf	6
  5553  0201  3001               	movlw	1	; select bank2/3
  5554  0202  0087               	movwf	7
  5555  0203  1C81               	btfss	1,1
  5556  0204  2ACF               	goto	l7377
  5557                           
  5558                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5559  0205  087C               	movf	_Sw,w
  5560  0206  0086               	movwf	6
  5561  0207  3001               	movlw	1	; select bank2/3
  5562  0208  0087               	movwf	7
  5563  0209  1901               	btfsc	1,2
  5564  020A  2A2D               	goto	l7343
  5565                           
  5566                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5567  020B  3001               	movlw	1
  5568  020C  0020               	movlb	0	; select bank0
  5569  020D  00B1               	movwf	??_setSw_Main
  5570  020E  087C               	movf	_Sw,w
  5571  020F  3E02               	addlw	2
  5572  0210  0086               	movwf	6
  5573  0211  3001               	movlw	1	; select bank2/3
  5574  0212  0087               	movwf	7
  5575  0213  0831               	movf	??_setSw_Main,w
  5576  0214  0781               	addwf	1,f
  5577                           
  5578                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5579  0215  087C               	movf	_Sw,w
  5580  0216  3E02               	addlw	2
  5581  0217  0086               	movwf	6
  5582  0218  3001               	movlw	1	; select bank2/3
  5583  0219  0087               	movwf	7
  5584  021A  3005               	movlw	5
  5585  021B  0201               	subwf	1,w
  5586  021C  1C03               	skipc
  5587  021D  0008               	return
  5588                           
  5589                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5590  021E  087C               	movf	_Sw,w
  5591  021F  3E02               	addlw	2
  5592  0220  0086               	movwf	6
  5593  0221  3001               	movlw	1	; select bank2/3
  5594  0222  0087               	movwf	7
  5595  0223  0181               	clrf	1
  5596                           
  5597                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5598  0224  087C               	movf	_Sw,w
  5599  0225  0086               	movwf	6
  5600  0226  3001               	movlw	1	; select bank2/3
  5601  0227  0087               	movwf	7
  5602  0228  1501               	bsf	1,2
  5603                           
  5604                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5605  0229  0833               	movf	setSw_Main@sw,w
  5606  022A  3193  23B0         	fcall	_setDimmerLights_SwOn
  5607                           
  5608                           ;Switch_B1.c: 162: }
  5609                           ;Switch_B1.c: 163: } else {
  5610  022C  0008               	return
  5611  022D                     l7343:	
  5612                           
  5613                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5614  022D  087C               	movf	_Sw,w
  5615  022E  0086               	movwf	6
  5616  022F  3001               	movlw	1	; select bank2/3
  5617  0230  0087               	movwf	7
  5618  0231  1981               	btfsc	1,3
  5619  0232  2A5F               	goto	l7353
  5620                           
  5621                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5622  0233  087C               	movf	_Sw,w
  5623  0234  3E03               	addlw	3
  5624  0235  0086               	movwf	6
  5625  0236  3001               	movlw	1	; select bank2/3
  5626  0237  0087               	movwf	7
  5627  0238  3001               	movlw	1
  5628  0239  0781               	addwf	1,f
  5629  023A  3141               	addfsr 1,1
  5630  023B  1803               	skipnc
  5631  023C  0A81               	incf	1,f
  5632                           
  5633                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5634  023D  087C               	movf	_Sw,w
  5635  023E  3E03               	addlw	3
  5636  023F  0086               	movwf	6
  5637  0240  3001               	movlw	1	; select bank2/3
  5638  0241  0087               	movwf	7
  5639  0242  3F40               	moviw [0]fsr1
  5640  0243  0020               	movlb	0	; select bank0
  5641  0244  00B1               	movwf	??_setSw_Main
  5642  0245  3F41               	moviw [1]fsr1
  5643  0246  00B2               	movwf	??_setSw_Main+1
  5644  0247  3000               	movlw	0
  5645  0248  0232               	subwf	??_setSw_Main+1,w
  5646  0249  3096               	movlw	150
  5647  024A  1903               	skipnz
  5648  024B  0231               	subwf	??_setSw_Main,w
  5649  024C  1C03               	skipc
  5650  024D  0008               	return
  5651                           
  5652                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5653  024E  087C               	movf	_Sw,w
  5654  024F  3E03               	addlw	3
  5655  0250  0086               	movwf	6
  5656  0251  3001               	movlw	1	; select bank2/3
  5657  0252  0087               	movwf	7
  5658  0253  3000               	movlw	0
  5659  0254  3FC0               	movwi [0]fsr1
  5660  0255  3FC1               	movwi [1]fsr1
  5661                           
  5662                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5663  0256  087C               	movf	_Sw,w
  5664  0257  0086               	movwf	6
  5665  0258  3001               	movlw	1	; select bank2/3
  5666  0259  0087               	movwf	7
  5667  025A  1581               	bsf	1,3
  5668                           
  5669                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5670  025B  0833               	movf	setSw_Main@sw,w
  5671  025C  3192  2233         	fcall	_setDimmerLights_AdjControl
  5672                           
  5673                           ;Switch_B1.c: 174: }
  5674                           ;Switch_B1.c: 175: } else {
  5675  025E  0008               	return
  5676  025F                     l7353:	
  5677                           
  5678                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5679  025F  087C               	movf	_Sw,w
  5680  0260  0086               	movwf	6
  5681  0261  3001               	movlw	1	; select bank2/3
  5682  0262  0087               	movwf	7
  5683  0263  1A01               	btfsc	1,4
  5684  0264  2A9D               	goto	l7367
  5685                           
  5686                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5687  0265  087C               	movf	_Sw,w
  5688  0266  3E05               	addlw	5
  5689  0267  0086               	movwf	6
  5690  0268  3001               	movlw	1	; select bank2/3
  5691  0269  0087               	movwf	7
  5692  026A  3001               	movlw	1
  5693  026B  0781               	addwf	1,f
  5694  026C  3141               	addfsr 1,1
  5695  026D  1803               	skipnc
  5696  026E  0A81               	incf	1,f
  5697                           
  5698                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5699  026F  087C               	movf	_Sw,w
  5700  0270  3E05               	addlw	5
  5701  0271  0086               	movwf	6
  5702  0272  3001               	movlw	1	; select bank2/3
  5703  0273  0087               	movwf	7
  5704  0274  3F40               	moviw [0]fsr1
  5705  0275  0020               	movlb	0	; select bank0
  5706  0276  00B1               	movwf	??_setSw_Main
  5707  0277  3F41               	moviw [1]fsr1
  5708  0278  00B2               	movwf	??_setSw_Main+1
  5709  0279  3000               	movlw	0
  5710  027A  0232               	subwf	??_setSw_Main+1,w
  5711  027B  3096               	movlw	150
  5712  027C  1903               	skipnz
  5713  027D  0231               	subwf	??_setSw_Main,w
  5714  027E  1C03               	skipc
  5715  027F  0008               	return
  5716                           
  5717                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5718  0280  087C               	movf	_Sw,w
  5719  0281  3E05               	addlw	5
  5720  0282  0086               	movwf	6
  5721  0283  3001               	movlw	1	; select bank2/3
  5722  0284  0087               	movwf	7
  5723  0285  3000               	movlw	0
  5724  0286  3FC0               	movwi [0]fsr1
  5725  0287  3FC1               	movwi [1]fsr1
  5726                           
  5727                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5728  0288  087C               	movf	_Sw,w
  5729  0289  0086               	movwf	6
  5730  028A  3001               	movlw	1	; select bank2/3
  5731  028B  0087               	movwf	7
  5732  028C  1601               	bsf	1,4
  5733                           
  5734                           ;Switch_B1.c: 183: setRF_Learn(1);
  5735  028D  3001               	movlw	1
  5736  028E  319D  25E0  3181   	fcall	_setRF_Learn
  5737                           
  5738                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5739  0291  0021               	movlb	1	; select bank1
  5740  0292  1EA0               	btfss	_myMain^(0+128),5
  5741  0293  0008               	return
  5742                           
  5743                           ;Switch_B1.c: 186: setBuz(2, 100);
  5744  0294  3064               	movlw	100
  5745  0295  0020               	movlb	0	; select bank0
  5746  0296  00A9               	movwf	setBuz@time
  5747  0297  3000               	movlw	0
  5748  0298  00AA               	movwf	setBuz@time+1
  5749  0299  3002               	movlw	2
  5750  029A  3196  2696         	fcall	_setBuz
  5751                           
  5752                           ;Switch_B1.c: 187: }
  5753                           ;Switch_B1.c: 189: }
  5754                           ;Switch_B1.c: 190: } else {
  5755  029C  0008               	return
  5756  029D                     l7367:	
  5757                           
  5758                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5759  029D  087C               	movf	_Sw,w
  5760  029E  0086               	movwf	6
  5761  029F  3001               	movlw	1	; select bank2/3
  5762  02A0  0087               	movwf	7
  5763  02A1  1A81               	btfsc	1,5
  5764  02A2  0008               	return
  5765                           
  5766                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5767  02A3  087C               	movf	_Sw,w
  5768  02A4  3E07               	addlw	7
  5769  02A5  0086               	movwf	6
  5770  02A6  3001               	movlw	1	; select bank2/3
  5771  02A7  0087               	movwf	7
  5772  02A8  3001               	movlw	1
  5773  02A9  0781               	addwf	1,f
  5774  02AA  3141               	addfsr 1,1
  5775  02AB  1803               	skipnc
  5776  02AC  0A81               	incf	1,f
  5777                           
  5778                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5779  02AD  087C               	movf	_Sw,w
  5780  02AE  3E07               	addlw	7
  5781  02AF  0086               	movwf	6
  5782  02B0  3001               	movlw	1	; select bank2/3
  5783  02B1  0087               	movwf	7
  5784  02B2  3F40               	moviw [0]fsr1
  5785  02B3  0020               	movlb	0	; select bank0
  5786  02B4  00B1               	movwf	??_setSw_Main
  5787  02B5  3F41               	moviw [1]fsr1
  5788  02B6  00B2               	movwf	??_setSw_Main+1
  5789  02B7  3001               	movlw	1
  5790  02B8  0232               	subwf	??_setSw_Main+1,w
  5791  02B9  302C               	movlw	44
  5792  02BA  1903               	skipnz
  5793  02BB  0231               	subwf	??_setSw_Main,w
  5794  02BC  1C03               	skipc
  5795  02BD  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5798  02BE  087C               	movf	_Sw,w
  5799  02BF  3E07               	addlw	7
  5800  02C0  0086               	movwf	6
  5801  02C1  3001               	movlw	1	; select bank2/3
  5802  02C2  0087               	movwf	7
  5803  02C3  3000               	movlw	0
  5804  02C4  3FC0               	movwi [0]fsr1
  5805  02C5  3FC1               	movwi [1]fsr1
  5806                           
  5807                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5808  02C6  087C               	movf	_Sw,w
  5809  02C7  0086               	movwf	6
  5810  02C8  3001               	movlw	1	; select bank2/3
  5811  02C9  0087               	movwf	7
  5812  02CA  1681               	bsf	1,5
  5813                           
  5814                           ;Switch_B1.c: 198: setRF_Learn(0);
  5815  02CB  3000               	movlw	0
  5816  02CC  319D  25E0         	fcall	_setRF_Learn
  5817                           
  5818                           ;Switch_B1.c: 201: }
  5819                           ;Switch_B1.c: 202: }
  5820                           ;Switch_B1.c: 203: }
  5821                           ;Switch_B1.c: 204: }
  5822                           ;Switch_B1.c: 205: }
  5823                           ;Switch_B1.c: 206: } else {
  5824  02CE  0008               	return
  5825  02CF                     l7377:	
  5826                           
  5827                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5828  02CF  087C               	movf	_Sw,w
  5829  02D0  0086               	movwf	6
  5830  02D1  3001               	movlw	1	; select bank2/3
  5831  02D2  0087               	movwf	7
  5832  02D3  1D01               	btfss	1,2
  5833  02D4  0008               	return
  5834                           
  5835                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5836  02D5  3001               	movlw	1
  5837  02D6  0020               	movlb	0	; select bank0
  5838  02D7  00B1               	movwf	??_setSw_Main
  5839  02D8  087C               	movf	_Sw,w
  5840  02D9  3E02               	addlw	2
  5841  02DA  0086               	movwf	6
  5842  02DB  3001               	movlw	1	; select bank2/3
  5843  02DC  0087               	movwf	7
  5844  02DD  0831               	movf	??_setSw_Main,w
  5845  02DE  0781               	addwf	1,f
  5846                           
  5847                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5848  02DF  087C               	movf	_Sw,w
  5849  02E0  3E02               	addlw	2
  5850  02E1  0086               	movwf	6
  5851  02E2  3001               	movlw	1	; select bank2/3
  5852  02E3  0087               	movwf	7
  5853  02E4  3005               	movlw	5
  5854  02E5  0201               	subwf	1,w
  5855  02E6  1C03               	skipc
  5856  02E7  0008               	return
  5857                           
  5858                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5859  02E8  087C               	movf	_Sw,w
  5860  02E9  3E02               	addlw	2
  5861  02EA  0086               	movwf	6
  5862  02EB  3001               	movlw	1	; select bank2/3
  5863  02EC  0087               	movwf	7
  5864  02ED  0181               	clrf	1
  5865                           
  5866                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5867  02EE  087C               	movf	_Sw,w
  5868  02EF  0086               	movwf	6
  5869  02F0  3001               	movlw	1	; select bank2/3
  5870  02F1  0087               	movwf	7
  5871  02F2  1101               	bcf	1,2
  5872                           
  5873                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5874  02F3  087C               	movf	_Sw,w
  5875  02F4  3E03               	addlw	3
  5876  02F5  0086               	movwf	6
  5877  02F6  3001               	movlw	1	; select bank2/3
  5878  02F7  0087               	movwf	7
  5879  02F8  3000               	movlw	0
  5880  02F9  3FC0               	movwi [0]fsr1
  5881  02FA  3FC1               	movwi [1]fsr1
  5882                           
  5883                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5884  02FB  087C               	movf	_Sw,w
  5885  02FC  0086               	movwf	6
  5886  02FD  3001               	movlw	1	; select bank2/3
  5887  02FE  0087               	movwf	7
  5888  02FF  1181               	bcf	1,3
  5889                           
  5890                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5891  0300  087C               	movf	_Sw,w
  5892  0301  3E05               	addlw	5
  5893  0302  0086               	movwf	6
  5894  0303  3001               	movlw	1	; select bank2/3
  5895  0304  0087               	movwf	7
  5896  0305  3000               	movlw	0
  5897  0306  3FC0               	movwi [0]fsr1
  5898  0307  3FC1               	movwi [1]fsr1
  5899                           
  5900                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5901  0308  087C               	movf	_Sw,w
  5902  0309  0086               	movwf	6
  5903  030A  3001               	movlw	1	; select bank2/3
  5904  030B  0087               	movwf	7
  5905  030C  1201               	bcf	1,4
  5906                           
  5907                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5908  030D  087C               	movf	_Sw,w
  5909  030E  3E07               	addlw	7
  5910  030F  0086               	movwf	6
  5911  0310  3001               	movlw	1	; select bank2/3
  5912  0311  0087               	movwf	7
  5913  0312  3000               	movlw	0
  5914  0313  3FC0               	movwi [0]fsr1
  5915  0314  3FC1               	movwi [1]fsr1
  5916                           
  5917                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5918  0315  087C               	movf	_Sw,w
  5919  0316  0086               	movwf	6
  5920  0317  3001               	movlw	1	; select bank2/3
  5921  0318  0087               	movwf	7
  5922  0319  1281               	bcf	1,5
  5923                           
  5924                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5925  031A  0021               	movlb	1	; select bank1
  5926  031B  1852               	btfsc	_SwDetect^(0+128),0
  5927  031C  2B22               	goto	l7403
  5928                           
  5929                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5930  031D  0020               	movlb	0	; select bank0
  5931  031E  0833               	movf	setSw_Main@sw,w
  5932  031F  3194  24B1  3181   	fcall	_setDimmerLights_SwOff
  5933  0322                     l7403:	
  5934                           
  5935                           ;Switch_B1.c: 221: }
  5936                           ;Switch_B1.c: 224: setRF_Learn(0);
  5937  0322  3000               	movlw	0
  5938  0323  319D  25E0         	fcall	_setRF_Learn
  5939                           
  5940                           ;Switch_B1.c: 226: }
  5941                           ;Switch_B1.c: 227: }
  5942                           ;Switch_B1.c: 228: }
  5943                           ;Switch_B1.c: 229: } else {
  5944  0325  0008               	return
  5945  0326                     l2394:	
  5946                           
  5947                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5948  0326  0021               	movlb	1	; select bank1
  5949  0327  1C20               	btfss	_myMain^(0+128),0
  5950  0328  0008               	return
  5951                           
  5952                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5953  0329  087C               	movf	_Sw,w
  5954  032A  0086               	movwf	6
  5955  032B  3001               	movlw	1	; select bank2/3
  5956  032C  0087               	movwf	7
  5957  032D  1401               	bsf	1,0
  5958  032E  0008               	return
  5959  032F                     __end_of_setSw_Main:	
  5960                           
  5961                           	psect	text14
  5962  1DE0                     __ptext14:	
  5963 ;; *************** function _setRF_Learn *****************
  5964 ;; Defined at:
  5965 ;;		line 23 in file "../src/RF_Control_B1.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  command         1    wreg     unsigned char 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  command         1    1[BANK0 ] unsigned char 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;		None               void
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;Total ram usage:        2 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    5
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_setSw_Main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _setRF_Learn
  5995  1DE0                     _setRF_Learn:	
  5996                           
  5997                           ;incstack = 0
  5998                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5999                           ;setRF_Learn@command stored from wreg
  6000  1DE0  0020               	movlb	0	; select bank0
  6001  1DE1  00A1               	movwf	setRF_Learn@command
  6002                           
  6003                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6004  1DE2  0821               	movf	setRF_Learn@command,w
  6005  1DE3  3A01               	xorlw	1
  6006  1DE4  3000               	movlw	0
  6007  1DE5  1903               	skipnz
  6008  1DE6  3001               	movlw	1
  6009  1DE7  00A0               	movwf	??_setRF_Learn
  6010  1DE8  0EA0               	swapf	??_setRF_Learn,f
  6011  1DE9  0DA0               	rlf	??_setRF_Learn,f
  6012  1DEA  0DA0               	rlf	??_setRF_Learn,f
  6013  1DEB  0021               	movlb	1	; select bank1
  6014  1DEC  083A               	movf	_RF1^(0+128),w
  6015  1DED  0020               	movlb	0	; select bank0
  6016  1DEE  0620               	xorwf	??_setRF_Learn,w
  6017  1DEF  39BF               	andlw	-65
  6018  1DF0  0620               	xorwf	??_setRF_Learn,w
  6019  1DF1  0021               	movlb	1	; select bank1
  6020  1DF2  00BA               	movwf	_RF1^(0+128)
  6021  1DF3  0008               	return
  6022  1DF4                     __end_of_setRF_Learn:	
  6023                           
  6024                           	psect	text15
  6025  1233                     __ptext15:	
  6026 ;; *************** function _setDimmerLights_AdjControl *****************
  6027 ;; Defined at:
  6028 ;;		line 546 in file "../src/Dimmer_B1.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  sw              1    wreg     unsigned char 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  sw              1    8[BANK0 ] unsigned char 
  6033 ;;  idle            1    6[BANK0 ] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;		None               void
  6036 ;; Registers used:
  6037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;Total ram usage:        4 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    7
  6050 ;; This function calls:
  6051 ;;		_DimmerLightsPointSelect
  6052 ;;		_getAll_DimmerLights_AdjGO
  6053 ;;		_setDimmerLights_TriggerAdj
  6054 ;; This function is called by:
  6055 ;;		_setSw_Main
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           
  6060                           ;psect for function _setDimmerLights_AdjControl
  6061  1233                     _setDimmerLights_AdjControl:	
  6062                           
  6063                           ;incstack = 0
  6064                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6065                           ;setDimmerLights_AdjControl@sw stored from wreg
  6066  1233  0020               	movlb	0	; select bank0
  6067  1234  00A8               	movwf	setDimmerLights_AdjControl@sw
  6068                           
  6069                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6070  1235  0828               	movf	setDimmerLights_AdjControl@sw,w
  6071  1236  319C  241A  3192   	fcall	_DimmerLightsPointSelect
  6072                           
  6073                           ;Dimmer_B1.c: 548: char idle = 0;
  6074  1239  0020               	movlb	0	; select bank0
  6075  123A  01A6               	clrf	setDimmerLights_AdjControl@idle
  6076                           
  6077                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6078  123B  01A7               	clrf	_setDimmerLights_AdjControl$2113
  6079  123C  3190  2066  3192   	fcall	_getAll_DimmerLights_AdjGO
  6080  123F  3A01               	xorlw	1
  6081  1240  1D03               	skipz
  6082  1241  2A48               	goto	l6547
  6083  1242  0022               	movlb	2	; select bank2
  6084  1243  1CBE               	btfss	_Dimmer^(0+256),1
  6085  1244  2A48               	goto	l6547
  6086  1245  0020               	movlb	0	; select bank0
  6087  1246  01A7               	clrf	_setDimmerLights_AdjControl$2113
  6088  1247  0AA7               	incf	_setDimmerLights_AdjControl$2113,f
  6089  1248                     l6547:	
  6090  1248  0020               	movlb	0	; select bank0
  6091  1249  0827               	movf	_setDimmerLights_AdjControl$2113,w
  6092  124A  00A5               	movwf	??_setDimmerLights_AdjControl
  6093  124B  0825               	movf	??_setDimmerLights_AdjControl,w
  6094  124C  00A6               	movwf	setDimmerLights_AdjControl@idle
  6095                           
  6096                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6097  124D  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6098  124E  1D03               	skipz
  6099  124F  0008               	return
  6100                           
  6101                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6102  1250  086F               	movf	_DimmerLights,w
  6103  1251  3E09               	addlw	9
  6104  1252  0086               	movwf	6
  6105  1253  3001               	movlw	1	; select bank2/3
  6106  1254  0087               	movwf	7
  6107  1255  1F01               	btfss	1,6
  6108  1256  0008               	return
  6109                           
  6110                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6111  1257  086F               	movf	_DimmerLights,w
  6112  1258  3E09               	addlw	9
  6113  1259  0086               	movwf	6
  6114  125A  3001               	movlw	1	; select bank2/3
  6115  125B  0087               	movwf	7
  6116  125C  1781               	bsf	1,7
  6117                           
  6118                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6119  125D  086F               	movf	_DimmerLights,w
  6120  125E  0086               	movwf	6
  6121  125F  3001               	movlw	1	; select bank2/3
  6122  1260  0087               	movwf	7
  6123  1261  1681               	bsf	1,5
  6124                           
  6125                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6126  1262  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6127  1263  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6128  1264  0828               	movf	setDimmerLights_AdjControl@sw,w
  6129  1265  319E  26D4         	fcall	_setDimmerLights_TriggerAdj
  6130  1267  0008               	return
  6131  1268                     __end_of_setDimmerLights_AdjControl:	
  6132                           
  6133                           	psect	text16
  6134  1D5F                     __ptext16:	
  6135 ;; *************** function _getSw_KeyStatus *****************
  6136 ;; Defined at:
  6137 ;;		line 237 in file "../src/Switch_B1.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  sw              1    wreg     unsigned char 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  sw              1    0[COMMON] unsigned char 
  6142 ;;  status          1    1[BANK0 ] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      unsigned char 
  6145 ;; Registers used:
  6146 ;;		wreg, status,2
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;Total ram usage:        3 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    5
  6159 ;; This function calls:
  6160 ;;		Nothing
  6161 ;; This function is called by:
  6162 ;;		_setSw_Main
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           
  6167                           ;psect for function _getSw_KeyStatus
  6168  1D5F                     _getSw_KeyStatus:	
  6169                           
  6170                           ;Switch_B1.c: 238: char status = 0;
  6171                           
  6172                           ;incstack = 0
  6173                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6174  1D5F  0020               	movlb	0	; select bank0
  6175  1D60  01A1               	clrf	getSw_KeyStatus@status
  6176                           
  6177                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6178  1D61  01A2               	clrf	_getSw_KeyStatus$5829
  6179  1D62  0AA2               	incf	_getSw_KeyStatus$5829,f
  6180  1D63  1F0C               	btfss	12,6	;volatile
  6181  1D64  1A0C               	btfsc	12,4	;volatile
  6182  1D65  2D6A               	goto	l6745
  6183  1D66  1C0C               	btfss	12,0	;volatile
  6184  1D67  1B8C               	btfsc	12,7	;volatile
  6185  1D68  2D6A               	goto	l6745
  6186  1D69  01A2               	clrf	_getSw_KeyStatus$5829
  6187  1D6A                     l6745:	
  6188  1D6A  0822               	movf	_getSw_KeyStatus$5829,w
  6189  1D6B  00A0               	movwf	??_getSw_KeyStatus
  6190  1D6C  0820               	movf	??_getSw_KeyStatus,w
  6191  1D6D  00A1               	movwf	getSw_KeyStatus@status
  6192                           
  6193                           ;Switch_B1.c: 261: return status;
  6194  1D6E  0821               	movf	getSw_KeyStatus@status,w
  6195  1D6F  0008               	return
  6196  1D70                     __end_of_getSw_KeyStatus:	
  6197                           
  6198                           	psect	text17
  6199  1C51                     __ptext17:	
  6200 ;; *************** function _SwPointSelect *****************
  6201 ;; Defined at:
  6202 ;;		line 25 in file "../src/Switch_B1.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  sw              1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  sw              1    1[BANK0 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;		None               void
  6209 ;; Registers used:
  6210 ;;		wreg
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6220 ;;Total ram usage:        2 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    5
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_setSw_Main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _SwPointSelect
  6232  1C51                     _SwPointSelect:	
  6233                           
  6234                           ;incstack = 0
  6235                           ; Regs used in _SwPointSelect: [wreg]
  6236                           ;SwPointSelect@sw stored from wreg
  6237  1C51  0020               	movlb	0	; select bank0
  6238  1C52  00A1               	movwf	SwPointSelect@sw
  6239                           
  6240                           ;Switch_B1.c: 28: if (sw == 1) {
  6241  1C53  0821               	movf	SwPointSelect@sw,w
  6242  1C54  3A01               	xorlw	1
  6243  1C55  1D03               	skipz
  6244  1C56  0008               	return
  6245                           
  6246                           ;Switch_B1.c: 29: Sw = &Sw1;
  6247  1C57  30D4               	movlw	_Sw1& (0+255)
  6248  1C58  00A0               	movwf	??_SwPointSelect
  6249  1C59  0820               	movf	??_SwPointSelect,w
  6250  1C5A  00FC               	movwf	_Sw
  6251  1C5B  0008               	return
  6252  1C5C                     __end_of_SwPointSelect:	
  6253                           
  6254                           	psect	text18
  6255  17A4                     __ptext18:	
  6256 ;; *************** function _setMain_Exception *****************
  6257 ;; Defined at:
  6258 ;;		line 284 in file "../src/Main_B1.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  command         1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  command         1   28[BANK0 ] unsigned char 
  6263 ;;  status          1   27[BANK0 ] unsigned char 
  6264 ;;  buz             1   24[BANK0 ] unsigned char 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;		None               void
  6267 ;; Registers used:
  6268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;Total ram usage:        7 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:   10
  6281 ;; This function calls:
  6282 ;;		_getDimmerLights_Line
  6283 ;;		_getMain_LightsStatus
  6284 ;;		_setBuz
  6285 ;;		_setDimmerLights_ErrorClose
  6286 ;;		_setLED
  6287 ;; This function is called by:
  6288 ;;		_Switch_Main
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _setMain_Exception
  6294  17A4                     _setMain_Exception:	
  6295                           
  6296                           ;incstack = 0
  6297                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6298                           ;setMain_Exception@command stored from wreg
  6299  17A4  0020               	movlb	0	; select bank0
  6300  17A5  00BC               	movwf	setMain_Exception@command
  6301                           
  6302                           ;Main_B1.c: 285: char status = 0, buz = 0;
  6303  17A6  01BB               	clrf	setMain_Exception@status
  6304  17A7  01B8               	clrf	setMain_Exception@buz
  6305                           
  6306                           ;Main_B1.c: 302: status = command == 3 ? getDimmerLights_Line() : 255;
  6307  17A8  083C               	movf	setMain_Exception@command,w
  6308  17A9  3A03               	xorlw	3
  6309  17AA  1903               	skipnz
  6310  17AB  2FB0               	goto	l7075
  6311  17AC  30FF               	movlw	255
  6312  17AD  00B9               	movwf	_setMain_Exception$3311
  6313  17AE  3000               	movlw	0
  6314  17AF  2FB9               	goto	L3
  6315  17B0                     l7075:	
  6316  17B0  319C  2446  3197   	fcall	_getDimmerLights_Line
  6317  17B3  0020               	movlb	0	; select bank0
  6318  17B4  00B6               	movwf	??_setMain_Exception
  6319  17B5  01B7               	clrf	??_setMain_Exception+1
  6320  17B6  0836               	movf	??_setMain_Exception,w
  6321  17B7  00B9               	movwf	_setMain_Exception$3311
  6322  17B8  0837               	movf	??_setMain_Exception+1,w
  6323  17B9                     L3:	
  6324  17B9  00BA               	movwf	_setMain_Exception$3311+1
  6325  17BA  0839               	movf	_setMain_Exception$3311,w
  6326  17BB  00B6               	movwf	??_setMain_Exception
  6327  17BC  0836               	movf	??_setMain_Exception,w
  6328  17BD  00BB               	movwf	setMain_Exception@status
  6329                           
  6330                           ;Main_B1.c: 304: if (command == 0) {
  6331  17BE  08BC               	movf	setMain_Exception@command,f
  6332  17BF  1D03               	skipz
  6333  17C0  2FC3               	goto	l7083
  6334                           
  6335                           ;Main_B1.c: 305: setLED(99, 10);
  6336  17C1  300A               	movlw	10
  6337  17C2  2FC5               	goto	L4
  6338  17C3                     l7083:	
  6339                           ;Main_B1.c: 306: } else {
  6340                           
  6341                           
  6342                           ;Main_B1.c: 307: setLED(99, 11);
  6343  17C3  300B               	movlw	11
  6344  17C4  0020               	movlb	0	; select bank0
  6345  17C5                     L4:	
  6346  17C5  00B6               	movwf	??_setMain_Exception
  6347  17C6  0836               	movf	??_setMain_Exception,w
  6348  17C7  00A2               	movwf	setLED@command
  6349  17C8  3063               	movlw	99
  6350  17C9  3192  2268  3197   	fcall	_setLED
  6351                           
  6352                           ;Main_B1.c: 308: }
  6353                           ;Main_B1.c: 310: if (command != 0) {
  6354  17CC  0020               	movlb	0	; select bank0
  6355  17CD  083C               	movf	setMain_Exception@command,w
  6356  17CE  1903               	btfsc	3,2
  6357  17CF  0008               	return
  6358                           
  6359                           ;Main_B1.c: 311: switch (command) {
  6360  17D0  2FF1               	goto	l7099
  6361  17D1                     l7089:	
  6362                           ;Main_B1.c: 312: case 2:
  6363                           
  6364                           
  6365                           ;Main_B1.c: 313: if (getMain_LightsStatus() == 1) {
  6366  17D1  3191  2111  3197   	fcall	_getMain_LightsStatus
  6367  17D4  3A01               	xorlw	1
  6368  17D5  1D03               	skipz
  6369  17D6  2FFA               	goto	l7101
  6370                           
  6371                           ;Main_B1.c: 314: setBuz(10, 300);
  6372  17D7  302C               	movlw	44
  6373  17D8  0020               	movlb	0	; select bank0
  6374  17D9  00A9               	movwf	setBuz@time
  6375  17DA  3001               	movlw	1
  6376  17DB  00AA               	movwf	setBuz@time+1
  6377  17DC  300A               	movlw	10
  6378  17DD  3196  2696  3197   	fcall	_setBuz
  6379                           
  6380                           ;Main_B1.c: 315: }
  6381                           ;Main_B1.c: 316: break;
  6382  17E0  2FFA               	goto	l7101
  6383  17E1                     l7093:	
  6384                           ;Main_B1.c: 317: case 3:
  6385                           
  6386                           
  6387                           ;Main_B1.c: 318: if (getMain_LightsStatus() == 1) {
  6388  17E1  3191  2111  3197   	fcall	_getMain_LightsStatus
  6389  17E4  3A01               	xorlw	1
  6390  17E5  1D03               	skipz
  6391  17E6  2FFA               	goto	l7101
  6392                           
  6393                           ;Main_B1.c: 319: setBuz(5, 300);
  6394  17E7  302C               	movlw	44
  6395  17E8  0020               	movlb	0	; select bank0
  6396  17E9  00A9               	movwf	setBuz@time
  6397  17EA  3001               	movlw	1
  6398  17EB  00AA               	movwf	setBuz@time+1
  6399  17EC  3005               	movlw	5
  6400  17ED  3196  2696  3197   	fcall	_setBuz
  6401                           
  6402                           ;Main_B1.c: 322: }
  6403                           
  6404                           ;Main_B1.c: 320: }
  6405                           ;Main_B1.c: 321: break;
  6406  17F0  2FFA               	goto	l7101
  6407  17F1                     l7099:	
  6408  17F1  0020               	movlb	0	; select bank0
  6409  17F2  083C               	movf	setMain_Exception@command,w
  6410                           
  6411                           ; Switch size 1, requested type "space"
  6412                           ; Number of cases is 2, Range of values is 2 to 3
  6413                           ; switch strategies available:
  6414                           ; Name         Instructions Cycles
  6415                           ; simple_byte            7     4 (average)
  6416                           ; direct_byte           13     9 (fixed)
  6417                           ; jumptable            263     9 (fixed)
  6418                           ;	Chosen strategy is simple_byte
  6419  17F3  3A02               	xorlw	2	; case 2
  6420  17F4  1903               	skipnz
  6421  17F5  2FD1               	goto	l7089
  6422  17F6  3A01               	xorlw	1	; case 3
  6423  17F7  1903               	skipnz
  6424  17F8  2FE1               	goto	l7093
  6425  17F9  2FFA               	goto	l7101
  6426  17FA                     l7101:	
  6427                           
  6428                           ;Main_B1.c: 323: setDimmerLights_ErrorClose(status);
  6429  17FA  0020               	movlb	0	; select bank0
  6430  17FB  083B               	movf	setMain_Exception@status,w
  6431  17FC  3195  25E6         	fcall	_setDimmerLights_ErrorClose
  6432  17FE  0020               	movlb	0	; select bank0
  6433  17FF  0008               	return
  6434  1800                     __end_of_setMain_Exception:	
  6435                           
  6436                           	psect	text19
  6437  1C46                     __ptext19:	
  6438 ;; *************** function _getDimmerLights_Line *****************
  6439 ;; Defined at:
  6440 ;;		line 695 in file "../src/Dimmer_B1.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  line            1    0[BANK0 ] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      unsigned char 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;Total ram usage:        1 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    5
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_setMain_Exception
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           
  6469                           ;psect for function _getDimmerLights_Line
  6470  1C46                     _getDimmerLights_Line:	
  6471                           
  6472                           ;Dimmer_B1.c: 696: char line = 0;
  6473                           
  6474                           ;incstack = 0
  6475                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6476  1C46  0020               	movlb	0	; select bank0
  6477  1C47  01A0               	clrf	getDimmerLights_Line@line
  6478                           
  6479                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6480  1C48  0023               	movlb	3	; select bank3
  6481  1C49  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6482  1C4A  2C4E               	goto	l6569
  6483                           
  6484                           ;Dimmer_B1.c: 699: line = 1;
  6485  1C4B  0020               	movlb	0	; select bank0
  6486  1C4C  01A0               	clrf	getDimmerLights_Line@line
  6487  1C4D  0AA0               	incf	getDimmerLights_Line@line,f
  6488  1C4E                     l6569:	
  6489                           
  6490                           ;Dimmer_B1.c: 700: }
  6491                           ;Dimmer_B1.c: 712: return line;
  6492  1C4E  0020               	movlb	0	; select bank0
  6493  1C4F  0820               	movf	getDimmerLights_Line@line,w
  6494  1C50  0008               	return
  6495  1C51                     __end_of_getDimmerLights_Line:	
  6496                           
  6497                           	psect	text20
  6498  1BF1                     __ptext20:	
  6499 ;; *************** function _Switch_Initialization *****************
  6500 ;; Defined at:
  6501 ;;		line 46 in file "../src/Switch_B1.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;		None
  6506 ;; Return value:  Size  Location     Type
  6507 ;;		None               void
  6508 ;; Registers used:
  6509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        0 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    8
  6522 ;; This function calls:
  6523 ;;		_TouchPower
  6524 ;;		_setSw_Initialization
  6525 ;; This function is called by:
  6526 ;;		_main
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _Switch_Initialization
  6532  1BF1                     _Switch_Initialization:	
  6533                           
  6534                           ;Switch_B1.c: 47: TouchPower();
  6535                           
  6536                           ;incstack = 0
  6537                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6538  1BF1  319E  261E  319B   	fcall	_TouchPower
  6539                           
  6540                           ;Switch_B1.c: 49: WPUB1 = 0;
  6541  1BF4  0024               	movlb	4	; select bank4
  6542  1BF5  108D               	bcf	13,1	;volatile
  6543                           
  6544                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6545  1BF6  3001               	movlw	1
  6546  1BF7  319D  251C         	fcall	_setSw_Initialization
  6547  1BF9  0008               	return
  6548  1BFA                     __end_of_Switch_Initialization:	
  6549                           
  6550                           	psect	text21
  6551  1D1C                     __ptext21:	
  6552 ;; *************** function _setSw_Initialization *****************
  6553 ;; Defined at:
  6554 ;;		line 109 in file "../src/Switch_B1.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  sw              1    wreg     unsigned char 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  sw              1    4[BANK0 ] unsigned char 
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;Total ram usage:        1 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    7
  6575 ;; This function calls:
  6576 ;;		_setLED
  6577 ;; This function is called by:
  6578 ;;		_Switch_Initialization
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function _setSw_Initialization
  6584  1D1C                     _setSw_Initialization:	
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6588                           ;setSw_Initialization@sw stored from wreg
  6589  1D1C  0020               	movlb	0	; select bank0
  6590  1D1D  00A4               	movwf	setSw_Initialization@sw
  6591                           
  6592                           ;Switch_B1.c: 110: setLED(sw, 1);
  6593  1D1E  01A2               	clrf	setLED@command
  6594  1D1F  0AA2               	incf	setLED@command,f
  6595  1D20  0824               	movf	setSw_Initialization@sw,w
  6596  1D21  3192  2268  319D   	fcall	_setLED
  6597                           
  6598                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6599  1D24  0020               	movlb	0	; select bank0
  6600  1D25  01A2               	clrf	setLED@command
  6601  1D26  0AA2               	incf	setLED@command,f
  6602  1D27  0824               	movf	setSw_Initialization@sw,w
  6603  1D28  3E01               	addlw	1
  6604  1D29  3192  2268         	fcall	_setLED
  6605  1D2B  0008               	return
  6606  1D2C                     __end_of_setSw_Initialization:	
  6607                           
  6608                           	psect	text22
  6609  1E1E                     __ptext22:	
  6610 ;; *************** function _TouchPower *****************
  6611 ;; Defined at:
  6612 ;;		line 10 in file "../src/Switch_B1.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;		None
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;		None               void
  6619 ;; Registers used:
  6620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;Total ram usage:        0 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    6
  6633 ;; This function calls:
  6634 ;;		_Timeout_Counter
  6635 ;;		_set_TimeoutCleared
  6636 ;; This function is called by:
  6637 ;;		_Switch_Initialization
  6638 ;;		_Switch_Main
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _TouchPower
  6644  1E1E                     _TouchPower:	
  6645                           
  6646                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6650  1E1E  0020               	movlb	0	; select bank0
  6651  1E1F  180D               	btfsc	13,0	;volatile
  6652  1E20  0008               	return
  6653                           
  6654                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6655  1E21  0021               	movlb	1	; select bank1
  6656  1E22  1C20               	btfss	_myMain^(0+128),0
  6657  1E23  0008               	return
  6658  1E24  2E2A               	goto	l7309
  6659  1E25                     l2370:	
  6660                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6661                           
  6662                           
  6663                           ;Switch_B1.c: 14: RB0 = 1;
  6664  1E25  0020               	movlb	0	; select bank0
  6665  1E26  140D               	bsf	13,0	;volatile
  6666                           
  6667                           ;Switch_B1.c: 15: Timeout_Counter();
  6668  1E27  319D  25F4  319E   	fcall	_Timeout_Counter
  6669  1E2A                     l7309:	
  6670  1E2A  0020               	movlb	0	; select bank0
  6671  1E2B  180D               	btfsc	13,0	;volatile
  6672  1E2C  2E30               	goto	l7313
  6673  1E2D  0021               	movlb	1	; select bank1
  6674  1E2E  1D2B               	btfss	(_myMain^(0+128)+11),2
  6675  1E2F  2E25               	goto	l2370
  6676  1E30                     l7313:	
  6677                           
  6678                           ;Switch_B1.c: 16: }
  6679                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6680  1E30  319B  23AC         	fcall	_set_TimeoutCleared
  6681  1E32  0008               	return
  6682  1E33                     __end_of_TouchPower:	
  6683                           
  6684                           	psect	text23
  6685  1B7F                     __ptext23:	
  6686 ;; *************** function _RF_Main *****************
  6687 ;; Defined at:
  6688 ;;		line 16 in file "../src/RF_Control_B1.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:   14
  6709 ;; This function calls:
  6710 ;;		_setRF_Main
  6711 ;; This function is called by:
  6712 ;;		_main
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           
  6717                           ;psect for function _RF_Main
  6718  1B7F                     _RF_Main:	
  6719                           
  6720                           ;RF_Control_B1.c: 18: setRF_Main();
  6721                           
  6722                           ;incstack = 0
  6723                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6724  1B7F  3185  256B         	fcall	_setRF_Main
  6725  1B81  0008               	return
  6726  1B82                     __end_of_RF_Main:	
  6727                           
  6728                           	psect	text24
  6729  056B                     __ptext24:	
  6730 ;; *************** function _setRF_Main *****************
  6731 ;; Defined at:
  6732 ;;		line 52 in file "../src/RF_Control_B1.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;		None
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  error           1    2[BANK1 ] unsigned char 
  6737 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6738 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6739 ;; Return value:  Size  Location     Type
  6740 ;;		None               void
  6741 ;; Registers used:
  6742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;Total ram usage:        4 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:   13
  6755 ;; This function calls:
  6756 ;;		_CC2500_RxData
  6757 ;;		_CC2500_TxData
  6758 ;;		_CC2500_WriteCommand
  6759 ;;		_RF_RxDisable
  6760 ;;		_getBuz_GO
  6761 ;;		_getMain_All_Error_Status
  6762 ;;		_getRF_KeyStatus
  6763 ;;		_getRxData
  6764 ;; This function is called by:
  6765 ;;		_RF_Main
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           
  6770                           ;psect for function _setRF_Main
  6771  056B                     _setRF_Main:	
  6772                           
  6773                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6774                           
  6775                           ;incstack = 0
  6776                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6777  056B  0021               	movlb	1	; select bank1
  6778  056C  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6779  056D  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6780  056E  01EB               	clrf	setRF_Main@error^(0+128)
  6781                           
  6782                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6783  056F  1C3A               	btfss	_RF1^(0+128),0
  6784  0570  2E46               	goto	l2005
  6785                           
  6786                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6787  0571  319D  253D  3185   	fcall	_getBuz_GO
  6788  0574  0020               	movlb	0	; select bank0
  6789  0575  0821               	movf	?_getBuz_GO+1,w
  6790  0576  0420               	iorwf	?_getBuz_GO,w
  6791  0577  1D03               	skipz
  6792  0578  0008               	return
  6793                           
  6794                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6795  0579  3000               	movlw	0
  6796  057A  3191  21CD  3185   	fcall	_getMain_All_Error_Status
  6797  057D  3800               	iorlw	0
  6798  057E  1D03               	skipz
  6799  057F  2D94               	goto	l2007
  6800                           
  6801                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6802  0580  319D  254E  3185   	fcall	_getRF_KeyStatus
  6803  0583  3A01               	xorlw	1
  6804  0584  3000               	movlw	0
  6805  0585  1903               	skipnz
  6806  0586  3001               	movlw	1
  6807  0587  0020               	movlb	0	; select bank0
  6808  0588  00ED               	movwf	??_setRF_Main
  6809  0589  0CED               	rrf	??_setRF_Main,f
  6810  058A  0CED               	rrf	??_setRF_Main,f
  6811  058B  0021               	movlb	1	; select bank1
  6812  058C  083A               	movf	_RF1^(0+128),w
  6813  058D  0020               	movlb	0	; select bank0
  6814  058E  066D               	xorwf	??_setRF_Main,w
  6815  058F  397F               	andlw	-129
  6816  0590  066D               	xorwf	??_setRF_Main,w
  6817  0591  0021               	movlb	1	; select bank1
  6818  0592  00BA               	movwf	_RF1^(0+128)
  6819                           
  6820                           ;RF_Control_B1.c: 65: } else {
  6821  0593  2D96               	goto	l2008
  6822  0594                     l2007:	
  6823                           
  6824                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6825  0594  0021               	movlb	1	; select bank1
  6826  0595  13BA               	bcf	_RF1^(0+128),7
  6827  0596                     l2008:	
  6828                           
  6829                           ;RF_Control_B1.c: 70: }
  6830                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6831  0596  1BBA               	btfsc	_RF1^(0+128),7
  6832  0597  1B3A               	btfsc	_RF1^(0+128),6
  6833  0598  2D9E               	goto	l2009
  6834                           
  6835                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6836  0599  01BC               	clrf	(_RF1^(0+128)+2)
  6837  059A  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6838                           
  6839                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6840  059B  14BB               	bsf	(_RF1^(0+128)+1),1
  6841                           
  6842                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6843  059C  11BA               	bcf	_RF1^(0+128),3
  6844                           
  6845                           ;RF_Control_B1.c: 76: } else {
  6846  059D  0008               	return
  6847  059E                     l2009:	
  6848                           
  6849                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6850  059E  18BB               	btfsc	(_RF1^(0+128)+1),1
  6851  059F  1B3A               	btfsc	_RF1^(0+128),6
  6852  05A0  2DB5               	goto	l7227
  6853                           
  6854                           ;RF_Control_B1.c: 78: RF1.Count++;
  6855  05A1  3001               	movlw	1
  6856  05A2  07BC               	addwf	(_RF1^(0+128)+2),f
  6857  05A3  3000               	movlw	0
  6858  05A4  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6859                           
  6860                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6861  05A5  3002               	movlw	2
  6862  05A6  3EBA               	addlw	_RF1& (0+255)
  6863  05A7  0086               	movwf	6
  6864  05A8  0187               	clrf	7
  6865  05A9  3F40               	moviw [0]fsr1
  6866  05AA  0641               	xorwf	(_RF1^(0+128)+7),w
  6867  05AB  1D03               	skipz
  6868  05AC  2DAF               	goto	u6785
  6869  05AD  3F41               	moviw [1]fsr1
  6870  05AE  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6871  05AF                     u6785:	
  6872  05AF  1D03               	skipz
  6873  05B0  2E13               	goto	l7279
  6874                           
  6875                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6876  05B1  01BC               	clrf	(_RF1^(0+128)+2)
  6877  05B2  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6878                           
  6879                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6880  05B3  10BB               	bcf	(_RF1^(0+128)+1),1
  6881                           
  6882                           ;RF_Control_B1.c: 82: }
  6883                           ;RF_Control_B1.c: 83: } else {
  6884  05B4  2E13               	goto	l7279
  6885  05B5                     l7227:	
  6886                           
  6887                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6888  05B5  01BC               	clrf	(_RF1^(0+128)+2)
  6889  05B6  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6890                           
  6891                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6892  05B7  10BB               	bcf	(_RF1^(0+128)+1),1
  6893                           
  6894                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6895  05B8  193A               	btfsc	_RF1^(0+128),2
  6896  05B9  1B3A               	btfsc	_RF1^(0+128),6
  6897  05BA  2DC9               	goto	l2014
  6898                           
  6899                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6900  05BB  113A               	bcf	_RF1^(0+128),2
  6901                           
  6902                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6903  05BC  11BA               	bcf	_RF1^(0+128),3
  6904                           
  6905                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6906  05BD  10BA               	bcf	_RF1^(0+128),1
  6907                           
  6908                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6909  05BE  300A               	movlw	10
  6910  05BF  00C1               	movwf	(_RF1^(0+128)+7)
  6911  05C0  3000               	movlw	0
  6912  05C1  00C2               	movwf	(_RF1^(0+128)+8)
  6913                           
  6914                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6915  05C2  319C  24CE  3185   	fcall	_RF_RxDisable
  6916                           
  6917                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6918  05C5  3189  21CC  3185   	fcall	_CC2500_TxData
  6919                           
  6920                           ;RF_Control_B1.c: 106: } else {
  6921  05C8  2E13               	goto	l7279
  6922  05C9                     l2014:	
  6923                           
  6924                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6925  05C9  1DBA               	btfss	_RF1^(0+128),3
  6926  05CA  2E02               	goto	l2016
  6927                           
  6928                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6929  05CB  318B  235D  3185   	fcall	_CC2500_RxData
  6930                           
  6931                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6932  05CE  0021               	movlb	1	; select bank1
  6933  05CF  1CBA               	btfss	_RF1^(0+128),1
  6934  05D0  2E13               	goto	l7279
  6935                           
  6936                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6937  05D1  10BA               	bcf	_RF1^(0+128),1
  6938                           
  6939                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  6940  05D2  12BB               	bcf	(_RF1^(0+128)+1),5
  6941                           
  6942                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  6943  05D3  01C4               	clrf	(_RF1^(0+128)+10)
  6944  05D4  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6945                           
  6946                           ;RF_Control_B1.c: 126: getRxData();
  6947  05D5  318D  2558  3185   	fcall	_getRxData
  6948                           
  6949                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  6950  05D8  0021               	movlb	1	; select bank1
  6951  05D9  14BB               	bsf	(_RF1^(0+128)+1),1
  6952                           
  6953                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  6954  05DA  1DBB               	btfss	(_RF1^(0+128)+1),3
  6955  05DB  2DE9               	goto	l7263
  6956                           
  6957                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  6958  05DC  3000               	movlw	0
  6959  05DD  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6960  05DE  300B               	movlw	11
  6961  05DF  1903               	skipnz
  6962  05E0  0241               	subwf	(_RF1^(0+128)+7),w
  6963  05E1  1C03               	skipc
  6964  05E2  2DE7               	goto	l7261
  6965                           
  6966                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  6967  05E3  300A               	movlw	10
  6968  05E4  00C1               	movwf	(_RF1^(0+128)+7)
  6969  05E5  3000               	movlw	0
  6970  05E6  00C2               	movwf	(_RF1^(0+128)+8)
  6971  05E7                     l7261:	
  6972                           
  6973                           ;RF_Control_B1.c: 132: }
  6974                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  6975  05E7  01BE               	clrf	(_RF1^(0+128)+4)
  6976                           
  6977                           ;RF_Control_B1.c: 134: } else {
  6978  05E8  2E13               	goto	l7279
  6979  05E9                     l7263:	
  6980                           
  6981                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  6982  05E9  3001               	movlw	1
  6983  05EA  0020               	movlb	0	; select bank0
  6984  05EB  00ED               	movwf	??_setRF_Main
  6985  05EC  086D               	movf	??_setRF_Main,w
  6986  05ED  0021               	movlb	1	; select bank1
  6987  05EE  07BE               	addwf	(_RF1^(0+128)+4),f
  6988                           
  6989                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  6990  05EF  083E               	movf	(_RF1^(0+128)+4),w
  6991  05F0  3A02               	xorlw	2
  6992  05F1  1D03               	skipz
  6993  05F2  2E13               	goto	l7279
  6994                           
  6995                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  6996  05F3  01BE               	clrf	(_RF1^(0+128)+4)
  6997                           
  6998                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  6999  05F4  01BF               	clrf	(_RF1^(0+128)+5)
  7000  05F5  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7001                           
  7002                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  7003  05F6  3000               	movlw	0
  7004  05F7  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7005  05F8  30C8               	movlw	200
  7006  05F9  1903               	skipnz
  7007  05FA  0241               	subwf	(_RF1^(0+128)+7),w
  7008  05FB  1803               	skipnc
  7009  05FC  2E13               	goto	l7279
  7010                           
  7011                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  7012  05FD  300A               	movlw	10
  7013  05FE  07C1               	addwf	(_RF1^(0+128)+7),f
  7014  05FF  3000               	movlw	0
  7015  0600  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  7016                           
  7017                           ;RF_Control_B1.c: 141: }
  7018                           ;RF_Control_B1.c: 142: }
  7019                           ;RF_Control_B1.c: 143: }
  7020                           ;RF_Control_B1.c: 144: }
  7021                           ;RF_Control_B1.c: 145: } else {
  7022  0601  2E13               	goto	l7279
  7023  0602                     l2016:	
  7024                           
  7025                           ;RF_Control_B1.c: 147: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7026  0602  1DBA               	btfss	_RF1^(0+128),3
  7027  0603  18BA               	btfsc	_RF1^(0+128),1
  7028  0604  2E13               	goto	l7279
  7029                           
  7030                           ;RF_Control_B1.c: 148: RF1.RxStatus = 1;
  7031  0605  15BA               	bsf	_RF1^(0+128),3
  7032                           
  7033                           ;RF_Control_B1.c: 149: RF1.Correction = 1;
  7034  0606  16BB               	bsf	(_RF1^(0+128)+1),5
  7035                           
  7036                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x36);
  7037  0607  3036               	movlw	54
  7038  0608  319E  2662  3185   	fcall	_CC2500_WriteCommand
  7039                           
  7040                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x3A);
  7041  060B  303A               	movlw	58
  7042  060C  319E  2662  3185   	fcall	_CC2500_WriteCommand
  7043                           
  7044                           ;RF_Control_B1.c: 154: CC2500_WriteCommand(0x34);
  7045  060F  3034               	movlw	52
  7046  0610  319E  2662  3185   	fcall	_CC2500_WriteCommand
  7047  0613                     l7279:	
  7048                           
  7049                           ;RF_Control_B1.c: 155: }
  7050                           ;RF_Control_B1.c: 157: }
  7051                           ;RF_Control_B1.c: 158: }
  7052                           ;RF_Control_B1.c: 159: }
  7053                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  7054  0613  0021               	movlb	1	; select bank1
  7055  0614  1DBA               	btfss	_RF1^(0+128),3
  7056  0615  2E34               	goto	l7291
  7057                           
  7058                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7059  0616  3001               	movlw	1
  7060  0617  07BF               	addwf	(_RF1^(0+128)+5),f
  7061  0618  3000               	movlw	0
  7062  0619  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  7063                           
  7064                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  7065  061A  3005               	movlw	5
  7066  061B  3EBA               	addlw	_RF1& (0+255)
  7067  061C  0086               	movwf	6
  7068  061D  0187               	clrf	7
  7069  061E  3F40               	moviw [0]fsr1
  7070  061F  3A64               	xorlw	100
  7071  0620  1D03               	skipz
  7072  0621  2E24               	goto	u6905
  7073  0622  3F41               	moviw [1]fsr1
  7074  0623  3A00               	xorlw	0
  7075  0624                     u6905:	
  7076  0624  1D03               	skipz
  7077  0625  2E34               	goto	l7291
  7078                           
  7079                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7080  0626  01BF               	clrf	(_RF1^(0+128)+5)
  7081  0627  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7082                           
  7083                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  7084  0628  01BE               	clrf	(_RF1^(0+128)+4)
  7085                           
  7086                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  7087  0629  3000               	movlw	0
  7088  062A  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7089  062B  300B               	movlw	11
  7090  062C  1903               	skipnz
  7091  062D  0241               	subwf	(_RF1^(0+128)+7),w
  7092  062E  1C03               	skipc
  7093  062F  2E34               	goto	l7291
  7094                           
  7095                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7096  0630  300A               	movlw	10
  7097  0631  02C1               	subwf	(_RF1^(0+128)+7),f
  7098  0632  3000               	movlw	0
  7099  0633  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  7100  0634                     l7291:	
  7101                           
  7102                           ;RF_Control_B1.c: 167: }
  7103                           ;RF_Control_B1.c: 168: }
  7104                           ;RF_Control_B1.c: 169: }
  7105                           ;RF_Control_B1.c: 170: if (RF1.Correction == 1) {
  7106  0634  1EBB               	btfss	(_RF1^(0+128)+1),5
  7107  0635  0008               	return
  7108                           
  7109                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter++;
  7110  0636  3001               	movlw	1
  7111  0637  07C4               	addwf	(_RF1^(0+128)+10),f
  7112  0638  3000               	movlw	0
  7113  0639  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  7114                           
  7115                           ;RF_Control_B1.c: 172: if (RF1.CorrectionCounter >= 6000) {
  7116  063A  3017               	movlw	23
  7117  063B  0245               	subwf	((_RF1+1)^(0+128)+10),w
  7118  063C  3070               	movlw	112
  7119  063D  1903               	skipnz
  7120  063E  0244               	subwf	(_RF1^(0+128)+10),w
  7121  063F  1C03               	skipc
  7122  0640  0008               	return
  7123                           
  7124                           ;RF_Control_B1.c: 173: RF1.CorrectionCounter = 0;
  7125  0641  01C4               	clrf	(_RF1^(0+128)+10)
  7126  0642  01C5               	clrf	((_RF1+1)^(0+128)+10)
  7127                           
  7128                           ;RF_Control_B1.c: 174: RF_RxDisable();
  7129  0643  319C  24CE         	fcall	_RF_RxDisable
  7130                           
  7131                           ;RF_Control_B1.c: 175: }
  7132                           ;RF_Control_B1.c: 176: }
  7133                           ;RF_Control_B1.c: 177: }
  7134                           ;RF_Control_B1.c: 178: }
  7135                           ;RF_Control_B1.c: 185: } else {
  7136  0645  0008               	return
  7137  0646                     l2005:	
  7138                           
  7139                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7140  0646  1C20               	btfss	_myMain^(0+128),0
  7141  0647  0008               	return
  7142                           
  7143                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7144  0648  143A               	bsf	_RF1^(0+128),0
  7145  0649  0008               	return
  7146  064A                     __end_of_setRF_Main:	
  7147                           
  7148                           	psect	text25
  7149  0D58                     __ptext25:	
  7150 ;; *************** function _getRxData *****************
  7151 ;; Defined at:
  7152 ;;		line 281 in file "../src/RF_Control_B1.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;		None
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  error           1   76[BANK0 ] unsigned char 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;		None               void
  7159 ;; Registers used:
  7160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;Total ram usage:        2 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:   12
  7173 ;; This function calls:
  7174 ;;		_getMain_All_Error_Status
  7175 ;;		_setControl_Lights_Table
  7176 ;;		_setLog_Code
  7177 ;;		_setTxData
  7178 ;; This function is called by:
  7179 ;;		_setRF_Main
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _getRxData
  7185  0D58                     _getRxData:	
  7186                           
  7187                           ;RF_Control_B1.c: 282: char error = getMain_All_Error_Status(0);
  7188                           
  7189                           ;incstack = 0
  7190                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7191  0D58  3000               	movlw	0
  7192  0D59  3191  21CD  318D   	fcall	_getMain_All_Error_Status
  7193  0D5C  0020               	movlb	0	; select bank0
  7194  0D5D  00EB               	movwf	??_getRxData
  7195  0D5E  086B               	movf	??_getRxData,w
  7196  0D5F  00EC               	movwf	getRxData@error
  7197                           
  7198                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7199  0D60  0022               	movlb	2	; select bank2
  7200  0D61  0820               	movf	_RF_Data^(0+256),w
  7201  0D62  3AAA               	xorlw	170
  7202  0D63  1D03               	skipz
  7203  0D64  2D7B               	goto	l6681
  7204  0D65  0821               	movf	(_RF_Data^(0+256)+1),w
  7205  0D66  3A01               	xorlw	1
  7206  0D67  1D03               	skipz
  7207  0D68  2D7B               	goto	l6681
  7208                           
  7209                           ;RF_Control_B1.c: 285: product->Data[2] = 0x55;
  7210  0D69  3055               	movlw	85
  7211  0D6A  0020               	movlb	0	; select bank0
  7212  0D6B  00EB               	movwf	??_getRxData
  7213  0D6C  086E               	movf	_product,w
  7214  0D6D  3E02               	addlw	2
  7215  0D6E  0086               	movwf	6
  7216  0D6F  3002               	movlw	2	; select bank4/5
  7217  0D70  0087               	movwf	7
  7218  0D71  086B               	movf	??_getRxData,w
  7219  0D72  0081               	movwf	1
  7220                           
  7221                           ;RF_Control_B1.c: 286: setTxData();
  7222  0D73  3187  2726         	fcall	_setTxData
  7223                           
  7224                           ;RF_Control_B1.c: 287: RF1.RunTime = 10;
  7225  0D75  300A               	movlw	10
  7226  0D76  0021               	movlb	1	; select bank1
  7227  0D77  00C1               	movwf	(_RF1^(0+128)+7)
  7228  0D78  3000               	movlw	0
  7229  0D79  00C2               	movwf	(_RF1^(0+128)+8)
  7230                           
  7231                           ;RF_Control_B1.c: 293: } else {
  7232  0D7A  0008               	return
  7233  0D7B                     l6681:	
  7234                           
  7235                           ;RF_Control_B1.c: 295: if (error == 0) {
  7236  0D7B  0020               	movlb	0	; select bank0
  7237  0D7C  08EC               	movf	getRxData@error,f
  7238  0D7D  1D03               	skipz
  7239  0D7E  0008               	return
  7240                           
  7241                           ;RF_Control_B1.c: 296: if (RF1.Learn == 1) {
  7242  0D7F  0021               	movlb	1	; select bank1
  7243  0D80  1F3A               	btfss	_RF1^(0+128),6
  7244  0D81  2D92               	goto	l6693
  7245                           
  7246                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7247  0D82  0022               	movlb	2	; select bank2
  7248  0D83  08A0               	movf	_RF_Data^(0+256),f
  7249  0D84  1D03               	skipz
  7250  0D85  2D8F               	goto	l2058
  7251  0D86  0821               	movf	(_RF_Data^(0+256)+1),w
  7252  0D87  3A64               	xorlw	100
  7253  0D88  1D03               	skipz
  7254  0D89  2D8F               	goto	l2058
  7255                           
  7256                           ;RF_Control_B1.c: 298: setLog_Code();
  7257  0D8A  3192  22D4         	fcall	_setLog_Code
  7258                           
  7259                           ;RF_Control_B1.c: 299: RF1.Checked = 1;
  7260  0D8C  0021               	movlb	1	; select bank1
  7261  0D8D  15BB               	bsf	(_RF1^(0+128)+1),3
  7262                           
  7263                           ;RF_Control_B1.c: 300: } else {
  7264  0D8E  0008               	return
  7265  0D8F                     l2058:	
  7266                           
  7267                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7268  0D8F  0021               	movlb	1	; select bank1
  7269  0D90  11BB               	bcf	(_RF1^(0+128)+1),3
  7270                           
  7271                           ;RF_Control_B1.c: 302: }
  7272                           ;RF_Control_B1.c: 303: } else {
  7273  0D91  0008               	return
  7274  0D92                     l6693:	
  7275                           
  7276                           ;RF_Control_B1.c: 304: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7277  0D92  0022               	movlb	2	; select bank2
  7278  0D93  08A0               	movf	_RF_Data^(0+256),f
  7279  0D94  1D03               	skipz
  7280  0D95  2DD0               	goto	l6715
  7281  0D96  0821               	movf	(_RF_Data^(0+256)+1),w
  7282  0D97  3A02               	xorlw	2
  7283  0D98  1D03               	skipz
  7284  0D99  2DD0               	goto	l6715
  7285                           
  7286                           ;RF_Control_B1.c: 306: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7287  0D9A  082C               	movf	(_RF_Data^(0+256)+12),w
  7288  0D9B  3AFF               	xorlw	255
  7289  0D9C  1D03               	skipz
  7290  0D9D  2DAA               	goto	l6705
  7291  0D9E  082D               	movf	(_RF_Data^(0+256)+13),w
  7292  0D9F  3AFF               	xorlw	255
  7293  0DA0  1D03               	skipz
  7294  0DA1  2DAA               	goto	l6705
  7295  0DA2  082E               	movf	(_RF_Data^(0+256)+14),w
  7296  0DA3  3AFF               	xorlw	255
  7297  0DA4  1D03               	skipz
  7298  0DA5  2DAA               	goto	l6705
  7299                           
  7300                           ;RF_Control_B1.c: 307: __nop();
  7301  0DA6  0000               	nop
  7302                           
  7303                           ;RF_Control_B1.c: 308: RF1.Checked = 0;
  7304  0DA7  0021               	movlb	1	; select bank1
  7305  0DA8  11BB               	bcf	(_RF1^(0+128)+1),3
  7306                           
  7307                           ;RF_Control_B1.c: 309: } else {
  7308  0DA9  0008               	return
  7309  0DAA                     l6705:	
  7310                           
  7311                           ;RF_Control_B1.c: 310: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7312  0DAA  0020               	movlb	0	; select bank0
  7313  0DAB  086E               	movf	_product,w
  7314  0DAC  3E0C               	addlw	12
  7315  0DAD  0086               	movwf	6
  7316  0DAE  3002               	movlw	2	; select bank4/5
  7317  0DAF  0087               	movwf	7
  7318  0DB0  0022               	movlb	2	; select bank2
  7319  0DB1  082C               	movf	(_RF_Data^(0+256)+12),w
  7320  0DB2  0601               	xorwf	1,w
  7321  0DB3  1D03               	skipz
  7322  0DB4  0008               	return
  7323  0DB5  0020               	movlb	0	; select bank0
  7324  0DB6  086E               	movf	_product,w
  7325  0DB7  3E0D               	addlw	13
  7326  0DB8  0086               	movwf	6
  7327  0DB9  3002               	movlw	2	; select bank4/5
  7328  0DBA  0087               	movwf	7
  7329  0DBB  0022               	movlb	2	; select bank2
  7330  0DBC  082D               	movf	(_RF_Data^(0+256)+13),w
  7331  0DBD  0601               	xorwf	1,w
  7332  0DBE  1D03               	skipz
  7333  0DBF  0008               	return
  7334  0DC0  0020               	movlb	0	; select bank0
  7335  0DC1  086E               	movf	_product,w
  7336  0DC2  3E0E               	addlw	14
  7337  0DC3  0086               	movwf	6
  7338  0DC4  3002               	movlw	2	; select bank4/5
  7339  0DC5  0087               	movwf	7
  7340  0DC6  0022               	movlb	2	; select bank2
  7341  0DC7  082E               	movf	(_RF_Data^(0+256)+14),w
  7342  0DC8  0601               	xorwf	1,w
  7343  0DC9  1D03               	skipz
  7344  0DCA  0008               	return
  7345                           
  7346                           ;RF_Control_B1.c: 311: setControl_Lights_Table();
  7347  0DCB  3189  210B         	fcall	_setControl_Lights_Table
  7348                           
  7349                           ;RF_Control_B1.c: 312: RF1.Checked = 1;
  7350  0DCD  0021               	movlb	1	; select bank1
  7351  0DCE  15BB               	bsf	(_RF1^(0+128)+1),3
  7352                           
  7353                           ;RF_Control_B1.c: 313: }
  7354                           ;RF_Control_B1.c: 314: }
  7355                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7356  0DCF  0008               	return
  7357  0DD0                     l6715:	
  7358  0DD0  0022               	movlb	2	; select bank2
  7359  0DD1  0820               	movf	_RF_Data^(0+256),w
  7360  0DD2  3AFF               	xorlw	255
  7361  0DD3  1D03               	skipz
  7362  0DD4  2DDB               	goto	l6721
  7363  0DD5  0821               	movf	(_RF_Data^(0+256)+1),w
  7364  0DD6  3A02               	xorlw	2
  7365  0DD7  1D03               	skipz
  7366  0DD8  2DDB               	goto	l6721
  7367                           
  7368                           ;RF_Control_B1.c: 316: __nop();
  7369  0DD9  0000               	nop
  7370                           
  7371                           ;RF_Control_B1.c: 317: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7372  0DDA  0008               	return
  7373  0DDB                     l6721:	
  7374  0DDB  0022               	movlb	2	; select bank2
  7375  0DDC  08A0               	movf	_RF_Data^(0+256),f
  7376  0DDD  1D03               	skipz
  7377  0DDE  2DE5               	goto	l2068
  7378  0DDF  0821               	movf	(_RF_Data^(0+256)+1),w
  7379  0DE0  3A65               	xorlw	101
  7380  0DE1  1D03               	skipz
  7381  0DE2  2DE5               	goto	l2068
  7382                           
  7383                           ;RF_Control_B1.c: 318: __nop();
  7384  0DE3  0000               	nop
  7385                           
  7386                           ;RF_Control_B1.c: 319: } else {
  7387  0DE4  0008               	return
  7388  0DE5                     l2068:	
  7389                           
  7390                           ;RF_Control_B1.c: 320: RF1.Checked = 0;
  7391  0DE5  0021               	movlb	1	; select bank1
  7392  0DE6  11BB               	bcf	(_RF1^(0+128)+1),3
  7393                           
  7394                           ;RF_Control_B1.c: 328: ;
  7395                           
  7396                           ;RF_Control_B1.c: 321: }
  7397                           ;RF_Control_B1.c: 326: }
  7398                           ;RF_Control_B1.c: 327: } else {
  7399  0DE7  0008               	return
  7400  0DE8                     __end_of_getRxData:	
  7401                           
  7402                           	psect	text26
  7403  12D4                     __ptext26:	
  7404 ;; *************** function _setLog_Code *****************
  7405 ;; Defined at:
  7406 ;;		line 334 in file "../src/RF_Control_B1.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;		None               void
  7413 ;; Registers used:
  7414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        1 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    7
  7427 ;; This function calls:
  7428 ;;		_setBuz
  7429 ;;		_setMemory_LoopSave
  7430 ;;		_setMemory_Modify
  7431 ;; This function is called by:
  7432 ;;		_getRxData
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function _setLog_Code
  7438  12D4                     _setLog_Code:	
  7439                           
  7440                           ;RF_Control_B1.c: 335: RF1.Learn = 0;
  7441                           
  7442                           ;incstack = 0
  7443                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7444  12D4  0021               	movlb	1	; select bank1
  7445  12D5  133A               	bcf	_RF1^(0+128),6
  7446                           
  7447                           ;RF_Control_B1.c: 336: product->Data[12]=RF_Data[12];
  7448  12D6  0022               	movlb	2	; select bank2
  7449  12D7  082C               	movf	(_RF_Data^(0+256)+12),w
  7450  12D8  0020               	movlb	0	; select bank0
  7451  12D9  00AD               	movwf	??_setLog_Code
  7452  12DA  086E               	movf	_product,w
  7453  12DB  3E0C               	addlw	12
  7454  12DC  0086               	movwf	6
  7455  12DD  3002               	movlw	2	; select bank4/5
  7456  12DE  0087               	movwf	7
  7457  12DF  082D               	movf	??_setLog_Code,w
  7458  12E0  0081               	movwf	1
  7459                           
  7460                           ;RF_Control_B1.c: 337: product->Data[13]=RF_Data[13];
  7461  12E1  0022               	movlb	2	; select bank2
  7462  12E2  082D               	movf	(_RF_Data^(0+256)+13),w
  7463  12E3  0020               	movlb	0	; select bank0
  7464  12E4  00AD               	movwf	??_setLog_Code
  7465  12E5  086E               	movf	_product,w
  7466  12E6  3E0D               	addlw	13
  7467  12E7  0086               	movwf	6
  7468  12E8  3002               	movlw	2	; select bank4/5
  7469  12E9  0087               	movwf	7
  7470  12EA  082D               	movf	??_setLog_Code,w
  7471  12EB  0081               	movwf	1
  7472                           
  7473                           ;RF_Control_B1.c: 338: product->Data[14]=RF_Data[14];
  7474  12EC  0022               	movlb	2	; select bank2
  7475  12ED  082E               	movf	(_RF_Data^(0+256)+14),w
  7476  12EE  0020               	movlb	0	; select bank0
  7477  12EF  00AD               	movwf	??_setLog_Code
  7478  12F0  086E               	movf	_product,w
  7479  12F1  3E0E               	addlw	14
  7480  12F2  0086               	movwf	6
  7481  12F3  3002               	movlw	2	; select bank4/5
  7482  12F4  0087               	movwf	7
  7483  12F5  082D               	movf	??_setLog_Code,w
  7484  12F6  0081               	movwf	1
  7485                           
  7486                           ;RF_Control_B1.c: 339: setBuz(1, 100);
  7487  12F7  3064               	movlw	100
  7488  12F8  00A9               	movwf	setBuz@time
  7489  12F9  3000               	movlw	0
  7490  12FA  00AA               	movwf	setBuz@time+1
  7491  12FB  3001               	movlw	1
  7492  12FC  3196  2696  3192   	fcall	_setBuz
  7493                           
  7494                           ;RF_Control_B1.c: 340: if (myMain.First == 1) {
  7495  12FF  0021               	movlb	1	; select bank1
  7496  1300  1EA0               	btfss	_myMain^(0+128),5
  7497  1301  2B06               	goto	l2074
  7498                           
  7499                           ;RF_Control_B1.c: 341: setMemory_LoopSave(1);
  7500  1302  3001               	movlw	1
  7501  1303  319D  25B9  3192   	fcall	_setMemory_LoopSave
  7502  1306                     l2074:	
  7503                           
  7504                           ;RF_Control_B1.c: 342: }
  7505                           ;RF_Control_B1.c: 343: setMemory_Modify(1);
  7506  1306  3001               	movlw	1
  7507  1307  319D  25A6         	fcall	_setMemory_Modify
  7508  1309  0008               	return
  7509  130A                     __end_of_setLog_Code:	
  7510                           
  7511                           	psect	text27
  7512  1DB9                     __ptext27:	
  7513 ;; *************** function _setMemory_LoopSave *****************
  7514 ;; Defined at:
  7515 ;;		line 1029 in file "../src/MCU_B1.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  command         1    wreg     unsigned char 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  command         1    1[BANK0 ] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg, status,2, status,0
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;Total ram usage:        2 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    5
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_setLog_Code
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           
  7544                           ;psect for function _setMemory_LoopSave
  7545  1DB9                     _setMemory_LoopSave:	
  7546                           
  7547                           ;incstack = 0
  7548                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7549                           ;setMemory_LoopSave@command stored from wreg
  7550  1DB9  0020               	movlb	0	; select bank0
  7551  1DBA  00A1               	movwf	setMemory_LoopSave@command
  7552                           
  7553                           ;MCU_B1.c: 1030: Memory.LoopSave = command == 1 ? 1 : 0;
  7554  1DBB  0821               	movf	setMemory_LoopSave@command,w
  7555  1DBC  3A01               	xorlw	1
  7556  1DBD  3000               	movlw	0
  7557  1DBE  1903               	skipnz
  7558  1DBF  3001               	movlw	1
  7559  1DC0  00A0               	movwf	??_setMemory_LoopSave
  7560  1DC1  0DA0               	rlf	??_setMemory_LoopSave,f
  7561  1DC2  0DA0               	rlf	??_setMemory_LoopSave,f
  7562  1DC3  0023               	movlb	3	; select bank3
  7563  1DC4  0844               	movf	(_Memory^(0+384)+36),w
  7564  1DC5  0020               	movlb	0	; select bank0
  7565  1DC6  0620               	xorwf	??_setMemory_LoopSave,w
  7566  1DC7  39FB               	andlw	-5
  7567  1DC8  0620               	xorwf	??_setMemory_LoopSave,w
  7568  1DC9  0023               	movlb	3	; select bank3
  7569  1DCA  00C4               	movwf	(_Memory^(0+384)+36)
  7570  1DCB  0008               	return
  7571  1DCC                     __end_of_setMemory_LoopSave:	
  7572                           
  7573                           	psect	text28
  7574  090B                     __ptext28:	
  7575 ;; *************** function _setControl_Lights_Table *****************
  7576 ;; Defined at:
  7577 ;;		line 347 in file "../src/RF_Control_B1.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;		None
  7582 ;; Return value:  Size  Location     Type
  7583 ;;		None               void
  7584 ;; Registers used:
  7585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;Total ram usage:        0 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:   11
  7598 ;; This function calls:
  7599 ;;		_setBuz
  7600 ;;		_setDimmerLights_ErrorClose
  7601 ;;		_setRFSW_AdjControl
  7602 ;;		_setRFSW_Control
  7603 ;;		_setTxData
  7604 ;; This function is called by:
  7605 ;;		_getRxData
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _setControl_Lights_Table
  7611  090B                     _setControl_Lights_Table:	
  7612                           
  7613                           ;RF_Control_B1.c: 348: switch (RF_Data[15]) {
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7617  090B  294F               	goto	l6303
  7618  090C                     l6281:	
  7619                           ;RF_Control_B1.c: 349: case 0x00:
  7620                           
  7621                           
  7622                           ;RF_Control_B1.c: 351: setDimmerLights_ErrorClose(255);
  7623  090C  30FF               	movlw	255
  7624  090D  3195  25E6  3189   	fcall	_setDimmerLights_ErrorClose
  7625                           
  7626                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7627  0910  0020               	movlb	0	; select bank0
  7628  0911  086E               	movf	_product,w
  7629  0912  3E09               	addlw	9
  7630  0913  0086               	movwf	6
  7631  0914  3002               	movlw	2	; select bank4/5
  7632  0915  0087               	movwf	7
  7633  0916  0181               	clrf	1
  7634                           
  7635                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7636  0917  086E               	movf	_product,w
  7637  0918  3E0B               	addlw	11
  7638  0919  0086               	movwf	6
  7639  091A  3002               	movlw	2	; select bank4/5
  7640  091B  0087               	movwf	7
  7641  091C  0181               	clrf	1
  7642                           
  7643                           ;RF_Control_B1.c: 355: product->Data[15]=0;
  7644  091D  086E               	movf	_product,w
  7645  091E  3E0F               	addlw	15
  7646  091F  0086               	movwf	6
  7647  0920  3002               	movlw	2	; select bank4/5
  7648  0921  0087               	movwf	7
  7649  0922  0181               	clrf	1
  7650                           
  7651                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7652  0923  086E               	movf	_product,w
  7653  0924  3E11               	addlw	17
  7654  0925  0086               	movwf	6
  7655  0926  3002               	movlw	2	; select bank4/5
  7656  0927  0087               	movwf	7
  7657  0928  0181               	clrf	1
  7658                           
  7659                           ;RF_Control_B1.c: 357: setBuz(1, 100);
  7660  0929  3064               	movlw	100
  7661  092A  00A9               	movwf	setBuz@time
  7662  092B  3000               	movlw	0
  7663  092C  00AA               	movwf	setBuz@time+1
  7664  092D  3001               	movlw	1
  7665  092E  3196  2696         	fcall	_setBuz
  7666                           
  7667                           ;RF_Control_B1.c: 359: break;
  7668  0930  0008               	return
  7669  0931                     l6293:	
  7670                           ;RF_Control_B1.c: 360: case 0x20:
  7671                           
  7672                           
  7673                           ;RF_Control_B1.c: 361: product->Data[9]=0;
  7674  0931  0020               	movlb	0	; select bank0
  7675  0932  086E               	movf	_product,w
  7676  0933  3E09               	addlw	9
  7677  0934  0086               	movwf	6
  7678  0935  3002               	movlw	2	; select bank4/5
  7679  0936  0087               	movwf	7
  7680  0937  0181               	clrf	1
  7681                           
  7682                           ;RF_Control_B1.c: 362: product->Data[11]=0;
  7683  0938  086E               	movf	_product,w
  7684  0939  3E0B               	addlw	11
  7685  093A  0086               	movwf	6
  7686  093B  3002               	movlw	2	; select bank4/5
  7687  093C  0087               	movwf	7
  7688  093D  0181               	clrf	1
  7689                           
  7690                           ;RF_Control_B1.c: 363: product->Data[17]=0;
  7691  093E  086E               	movf	_product,w
  7692  093F  3E11               	addlw	17
  7693  0940  0086               	movwf	6
  7694  0941  3002               	movlw	2	; select bank4/5
  7695  0942  0087               	movwf	7
  7696  0943  0181               	clrf	1
  7697                           
  7698                           ;RF_Control_B1.c: 364: setTxData();
  7699  0944  3187  2726         	fcall	_setTxData
  7700                           
  7701                           ;RF_Control_B1.c: 365: break;
  7702  0946  0008               	return
  7703  0947                     l6297:	
  7704                           ;RF_Control_B1.c: 366: case 0x01:
  7705                           
  7706                           
  7707                           ;RF_Control_B1.c: 368: setRFSW_Control(1);
  7708  0947  3001               	movlw	1
  7709  0948  3188  2002         	fcall	_setRFSW_Control
  7710                           
  7711                           ;RF_Control_B1.c: 380: break;
  7712                           
  7713                           ;RF_Control_B1.c: 376: case 0x03:
  7714                           
  7715                           ;RF_Control_B1.c: 375: break;
  7716                           
  7717                           ;RF_Control_B1.c: 371: case 0x02:
  7718                           
  7719                           ;RF_Control_B1.c: 370: break;
  7720  094A  0008               	return
  7721  094B                     l6299:	
  7722                           ;RF_Control_B1.c: 381: case 0x11:
  7723                           
  7724                           
  7725                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7726  094B  3001               	movlw	1
  7727  094C  3193  23ED         	fcall	_setRFSW_AdjControl
  7728                           
  7729                           ;RF_Control_B1.c: 402: }
  7730                           
  7731                           ;RF_Control_B1.c: 401: break;
  7732                           
  7733                           ;RF_Control_B1.c: 395: case 0x31:
  7734                           
  7735                           ;RF_Control_B1.c: 394: break;
  7736                           
  7737                           ;RF_Control_B1.c: 388: case 0x21:
  7738                           
  7739                           ;RF_Control_B1.c: 387: break;
  7740  094E  0008               	return
  7741  094F                     l6303:	
  7742  094F  0022               	movlb	2	; select bank2
  7743  0950  082F               	movf	(_RF_Data^(0+256)+15),w
  7744                           
  7745                           ; Switch size 1, requested type "space"
  7746                           ; Number of cases is 8, Range of values is 0 to 49
  7747                           ; switch strategies available:
  7748                           ; Name         Instructions Cycles
  7749                           ; simple_byte           25    13 (average)
  7750                           ; direct_byte          106     6 (fixed)
  7751                           ; jumptable            260     6 (fixed)
  7752                           ;	Chosen strategy is simple_byte
  7753  0951  3A00               	xorlw	0	; case 0
  7754  0952  1903               	skipnz
  7755  0953  290C               	goto	l6281
  7756  0954  3A01               	xorlw	1	; case 1
  7757  0955  1903               	skipnz
  7758  0956  2947               	goto	l6297
  7759  0957  3A03               	xorlw	3	; case 2
  7760  0958  1903               	skipnz
  7761  0959  296A               	goto	l2088
  7762  095A  3A01               	xorlw	1	; case 3
  7763  095B  1903               	skipnz
  7764  095C  296A               	goto	l2088
  7765  095D  3A12               	xorlw	18	; case 17
  7766  095E  1903               	skipnz
  7767  095F  294B               	goto	l6299
  7768  0960  3A31               	xorlw	49	; case 32
  7769  0961  1903               	skipnz
  7770  0962  2931               	goto	l6293
  7771  0963  3A01               	xorlw	1	; case 33
  7772  0964  1903               	skipnz
  7773  0965  296A               	goto	l2088
  7774  0966  3A10               	xorlw	16	; case 49
  7775  0967  1903               	skipnz
  7776  0968  296A               	goto	l2088
  7777  0969  296A               	goto	l2088
  7778  096A                     l2088:	
  7779  096A  0008               	return
  7780  096B                     __end_of_setControl_Lights_Table:	
  7781                           
  7782                           	psect	text29
  7783  0802                     __ptext29:	
  7784 ;; *************** function _setRFSW_Control *****************
  7785 ;; Defined at:
  7786 ;;		line 429 in file "../src/RF_Control_B1.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  sw              1    wreg     unsigned char 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  sw              1   19[BANK0 ] unsigned char 
  7791 ;;  status          1   18[BANK0 ] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;Total ram usage:        3 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    9
  7808 ;; This function calls:
  7809 ;;		_getDelayOff_GO
  7810 ;;		_getDimmerLights_Status
  7811 ;;		_setBuz
  7812 ;;		_setDelayOff_GO
  7813 ;;		_setDimmerLights_SwOff
  7814 ;;		_setDimmerLights_SwOn
  7815 ;;		_setRF_DimmerLights
  7816 ;;		_setTxData
  7817 ;; This function is called by:
  7818 ;;		_setControl_Lights_Table
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           
  7823                           ;psect for function _setRFSW_Control
  7824  0802                     _setRFSW_Control:	
  7825                           
  7826                           ;incstack = 0
  7827                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7828                           ;setRFSW_Control@sw stored from wreg
  7829  0802  0020               	movlb	0	; select bank0
  7830  0803  00B3               	movwf	setRFSW_Control@sw
  7831                           
  7832                           ;RF_Control_B1.c: 430: char status = 0;
  7833  0804  01B2               	clrf	setRFSW_Control@status
  7834                           
  7835                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  7836  0805  0022               	movlb	2	; select bank2
  7837  0806  0830               	movf	(_RF_Data^(0+256)+16),w
  7838  0807  3A80               	xorlw	128
  7839  0808  1D03               	skipz
  7840  0809  2835               	goto	l6135
  7841                           
  7842                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  7843  080A  0020               	movlb	0	; select bank0
  7844  080B  01AA               	clrf	setDelayOff_GO@command
  7845  080C  0AAA               	incf	setDelayOff_GO@command,f
  7846  080D  0022               	movlb	2	; select bank2
  7847  080E  0831               	movf	(_RF_Data^(0+256)+17),w
  7848  080F  0020               	movlb	0	; select bank0
  7849  0810  00B1               	movwf	??_setRFSW_Control
  7850  0811  0831               	movf	??_setRFSW_Control,w
  7851  0812  00AB               	movwf	setDelayOff_GO@value
  7852  0813  0833               	movf	setRFSW_Control@sw,w
  7853  0814  3188  2051  3188   	fcall	_setDelayOff_GO
  7854                           
  7855                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  7856  0817  0020               	movlb	0	; select bank0
  7857  0818  0833               	movf	setRFSW_Control@sw,w
  7858  0819  319C  24EC  3188   	fcall	_getDimmerLights_Status
  7859  081C  3A01               	xorlw	1
  7860  081D  1D03               	skipz
  7861  081E  2844               	goto	l6139
  7862                           
  7863                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  7864  081F  3064               	movlw	100
  7865  0820  0020               	movlb	0	; select bank0
  7866  0821  00A9               	movwf	setBuz@time
  7867  0822  3000               	movlw	0
  7868  0823  00AA               	movwf	setBuz@time+1
  7869  0824  3001               	movlw	1
  7870  0825  3196  2696  3188   	fcall	_setBuz
  7871                           
  7872                           ;RF_Control_B1.c: 437: status = 1;
  7873  0828  0020               	movlb	0	; select bank0
  7874  0829  01B2               	clrf	setRFSW_Control@status
  7875  082A  0AB2               	incf	setRFSW_Control@status,f
  7876                           
  7877                           ;RF_Control_B1.c: 438: setRF_DimmerLights(sw, 1);
  7878  082B  01A0               	clrf	setRF_DimmerLights@on
  7879  082C  0AA0               	incf	setRF_DimmerLights@on,f
  7880  082D  0833               	movf	setRFSW_Control@sw,w
  7881  082E  3197  2748  3188   	fcall	_setRF_DimmerLights
  7882                           
  7883                           ;RF_Control_B1.c: 439: setTxData();
  7884  0831  3187  2726  3188   	fcall	_setTxData
  7885                           
  7886                           ;RF_Control_B1.c: 441: }
  7887                           ;RF_Control_B1.c: 442: } else {
  7888  0834  2844               	goto	l6139
  7889  0835                     l6135:	
  7890                           
  7891                           ;RF_Control_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
  7892  0835  0020               	movlb	0	; select bank0
  7893  0836  0833               	movf	setRFSW_Control@sw,w
  7894  0837  319C  24FC  3188   	fcall	_getDelayOff_GO
  7895  083A  3A01               	xorlw	1
  7896  083B  1D03               	skipz
  7897  083C  2844               	goto	l6139
  7898                           
  7899                           ;RF_Control_B1.c: 445: setDelayOff_GO(sw, 0, 0);
  7900  083D  0020               	movlb	0	; select bank0
  7901  083E  01AA               	clrf	setDelayOff_GO@command
  7902  083F  01AB               	clrf	setDelayOff_GO@value
  7903  0840  0833               	movf	setRFSW_Control@sw,w
  7904  0841  3188  2051  3188   	fcall	_setDelayOff_GO
  7905  0844                     l6139:	
  7906                           
  7907                           ;RF_Control_B1.c: 446: }
  7908                           ;RF_Control_B1.c: 448: }
  7909                           ;RF_Control_B1.c: 449: if (status == 0) {
  7910  0844  0020               	movlb	0	; select bank0
  7911  0845  08B2               	movf	setRFSW_Control@status,f
  7912  0846  1D03               	skipz
  7913  0847  0008               	return
  7914                           
  7915                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  7916  0848  0833               	movf	setRFSW_Control@sw,w
  7917  0849  3193  23B0  3188   	fcall	_setDimmerLights_SwOn
  7918                           
  7919                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  7920  084C  0020               	movlb	0	; select bank0
  7921  084D  0833               	movf	setRFSW_Control@sw,w
  7922  084E  3194  24B1         	fcall	_setDimmerLights_SwOff
  7923  0850  0008               	return
  7924  0851                     __end_of_setRFSW_Control:	
  7925                           
  7926                           	psect	text30
  7927  13B0                     __ptext30:	
  7928 ;; *************** function _setDimmerLights_SwOn *****************
  7929 ;; Defined at:
  7930 ;;		line 505 in file "../src/Dimmer_B1.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  sw              1    wreg     unsigned char 
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;  sw              1   15[BANK0 ] unsigned char 
  7935 ;;  idle            1   14[BANK0 ] unsigned char 
  7936 ;; Return value:  Size  Location     Type
  7937 ;;		None               void
  7938 ;; Registers used:
  7939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        3 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    7
  7952 ;; This function calls:
  7953 ;;		_DimmerLightsPointSelect
  7954 ;;		_getAll_DimmerLights_AdjGO
  7955 ;;		_setBuz
  7956 ;;		_setDimmerLights_Trigger
  7957 ;; This function is called by:
  7958 ;;		_setRFSW_Control
  7959 ;;		_setSw_Main
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function _setDimmerLights_SwOn
  7965  13B0                     _setDimmerLights_SwOn:	
  7966                           
  7967                           ;incstack = 0
  7968                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7969                           ;setDimmerLights_SwOn@sw stored from wreg
  7970  13B0  0020               	movlb	0	; select bank0
  7971  13B1  00AF               	movwf	setDimmerLights_SwOn@sw
  7972                           
  7973                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  7974  13B2  082F               	movf	setDimmerLights_SwOn@sw,w
  7975  13B3  319C  241A  3193   	fcall	_DimmerLightsPointSelect
  7976                           
  7977                           ;Dimmer_B1.c: 507: char idle = 0;
  7978  13B6  0020               	movlb	0	; select bank0
  7979  13B7  01AE               	clrf	setDimmerLights_SwOn@idle
  7980                           
  7981                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7982  13B8  3190  2066  3193   	fcall	_getAll_DimmerLights_AdjGO
  7983  13BB  3A01               	xorlw	1
  7984  13BC  3000               	movlw	0
  7985  13BD  1903               	skipnz
  7986  13BE  3001               	movlw	1
  7987  13BF  0020               	movlb	0	; select bank0
  7988  13C0  00AD               	movwf	??_setDimmerLights_SwOn
  7989  13C1  082D               	movf	??_setDimmerLights_SwOn,w
  7990  13C2  00AE               	movwf	setDimmerLights_SwOn@idle
  7991                           
  7992                           ;Dimmer_B1.c: 511: if (idle == 0) {
  7993  13C3  08AE               	movf	setDimmerLights_SwOn@idle,f
  7994  13C4  1D03               	skipz
  7995  13C5  0008               	return
  7996                           
  7997                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  7998  13C6  086F               	movf	_DimmerLights,w
  7999  13C7  3E09               	addlw	9
  8000  13C8  0086               	movwf	6
  8001  13C9  3001               	movlw	1	; select bank2/3
  8002  13CA  0087               	movwf	7
  8003  13CB  1701               	bsf	1,6
  8004                           
  8005                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  8006  13CC  3064               	movlw	100
  8007  13CD  00A9               	movwf	setBuz@time
  8008  13CE  3000               	movlw	0
  8009  13CF  00AA               	movwf	setBuz@time+1
  8010  13D0  3001               	movlw	1
  8011  13D1  3196  2696  3193   	fcall	_setBuz
  8012                           
  8013                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  8014  13D4  0020               	movlb	0	; select bank0
  8015  13D5  086F               	movf	_DimmerLights,w
  8016  13D6  0086               	movwf	6
  8017  13D7  3001               	movlw	1	; select bank2/3
  8018  13D8  0087               	movwf	7
  8019  13D9  1A81               	btfsc	1,5
  8020  13DA  2BE6               	goto	l5947
  8021                           
  8022                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  8023  13DB  086F               	movf	_DimmerLights,w
  8024  13DC  0086               	movwf	6
  8025  13DD  3001               	movlw	1	; select bank2/3
  8026  13DE  0087               	movwf	7
  8027  13DF  1681               	bsf	1,5
  8028                           
  8029                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  8030  13E0  01A2               	clrf	setDimmerLights_Trigger@command
  8031  13E1  0AA2               	incf	setDimmerLights_Trigger@command,f
  8032  13E2  082F               	movf	setDimmerLights_SwOn@sw,w
  8033  13E3  319E  2697         	fcall	_setDimmerLights_Trigger
  8034                           
  8035                           ;Dimmer_B1.c: 517: } else {
  8036  13E5  0008               	return
  8037  13E6                     l5947:	
  8038                           
  8039                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8040  13E6  0020               	movlb	0	; select bank0
  8041  13E7  086F               	movf	_DimmerLights,w
  8042  13E8  0086               	movwf	6
  8043  13E9  3001               	movlw	1	; select bank2/3
  8044  13EA  0087               	movwf	7
  8045  13EB  1281               	bcf	1,5
  8046  13EC  0008               	return
  8047  13ED                     __end_of_setDimmerLights_SwOn:	
  8048                           
  8049                           	psect	text31
  8050  13ED                     __ptext31:	
  8051 ;; *************** function _setRFSW_AdjControl *****************
  8052 ;; Defined at:
  8053 ;;		line 458 in file "../src/RF_Control_B1.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  sw              1    wreg     unsigned char 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  sw              1   74[BANK0 ] unsigned char 
  8058 ;;  status          1   73[BANK0 ] unsigned char 
  8059 ;; Return value:  Size  Location     Type
  8060 ;;		None               void
  8061 ;; Registers used:
  8062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;Total ram usage:        4 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:   10
  8075 ;; This function calls:
  8076 ;;		_getDimmerLights_Status
  8077 ;;		_setMemory_Modify
  8078 ;;		_setRF_DimmerValue
  8079 ;;		_setTxData
  8080 ;; This function is called by:
  8081 ;;		_setControl_Lights_Table
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           
  8086                           ;psect for function _setRFSW_AdjControl
  8087  13ED                     _setRFSW_AdjControl:	
  8088                           
  8089                           ;incstack = 0
  8090                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8091                           ;setRFSW_AdjControl@sw stored from wreg
  8092  13ED  0020               	movlb	0	; select bank0
  8093  13EE  00EA               	movwf	setRFSW_AdjControl@sw
  8094                           
  8095                           ;RF_Control_B1.c: 459: char status = 0;
  8096  13EF  01E9               	clrf	setRFSW_AdjControl@status
  8097                           
  8098                           ;RF_Control_B1.c: 461: status = getDimmerLights_Status(sw);
  8099  13F0  086A               	movf	setRFSW_AdjControl@sw,w
  8100  13F1  319C  24EC  3193   	fcall	_getDimmerLights_Status
  8101  13F4  0020               	movlb	0	; select bank0
  8102  13F5  00E7               	movwf	??_setRFSW_AdjControl
  8103  13F6  0867               	movf	??_setRFSW_AdjControl,w
  8104  13F7  00E9               	movwf	setRFSW_AdjControl@status
  8105                           
  8106                           ;RF_Control_B1.c: 464: if (status == 1) {
  8107  13F8  0869               	movf	setRFSW_AdjControl@status,w
  8108  13F9  3A01               	xorlw	1
  8109  13FA  1D03               	skipz
  8110  13FB  2C06               	goto	l6153
  8111                           
  8112                           ;RF_Control_B1.c: 465: setMemory_Modify(1);
  8113  13FC  3001               	movlw	1
  8114  13FD  319D  25A6  3193   	fcall	_setMemory_Modify
  8115                           
  8116                           ;RF_Control_B1.c: 466: setRF_DimmerValue(sw);
  8117  1400  0020               	movlb	0	; select bank0
  8118  1401  086A               	movf	setRFSW_AdjControl@sw,w
  8119  1402  3191  219B  3193   	fcall	_setRF_DimmerValue
  8120                           
  8121                           ;RF_Control_B1.c: 467: } else {
  8122  1405  2C18               	goto	l2100
  8123  1406                     l6153:	
  8124                           
  8125                           ;RF_Control_B1.c: 468: product->Data[9]=product->Data[20 + sw];
  8126  1406  0020               	movlb	0	; select bank0
  8127  1407  086A               	movf	setRFSW_AdjControl@sw,w
  8128  1408  3E14               	addlw	20
  8129  1409  076E               	addwf	_product,w
  8130  140A  00E7               	movwf	??_setRFSW_AdjControl
  8131  140B  0867               	movf	??_setRFSW_AdjControl,w
  8132  140C  0086               	movwf	6
  8133  140D  3002               	movlw	2	; select bank4/5
  8134  140E  0087               	movwf	7
  8135  140F  0801               	movf	1,w
  8136  1410  00E8               	movwf	??_setRFSW_AdjControl+1
  8137  1411  086E               	movf	_product,w
  8138  1412  3E09               	addlw	9
  8139  1413  0086               	movwf	6
  8140  1414  3002               	movlw	2	; select bank4/5
  8141  1415  0087               	movwf	7
  8142  1416  0868               	movf	??_setRFSW_AdjControl+1,w
  8143  1417  0081               	movwf	1
  8144  1418                     l2100:	
  8145                           
  8146                           ;RF_Control_B1.c: 469: }
  8147                           ;RF_Control_B1.c: 470: product->Data[17]=product->Data[26 + sw];
  8148  1418  0020               	movlb	0	; select bank0
  8149  1419  086A               	movf	setRFSW_AdjControl@sw,w
  8150  141A  3E1A               	addlw	26
  8151  141B  076E               	addwf	_product,w
  8152  141C  00E7               	movwf	??_setRFSW_AdjControl
  8153  141D  0867               	movf	??_setRFSW_AdjControl,w
  8154  141E  0086               	movwf	6
  8155  141F  3002               	movlw	2	; select bank4/5
  8156  1420  0087               	movwf	7
  8157  1421  0801               	movf	1,w
  8158  1422  00E8               	movwf	??_setRFSW_AdjControl+1
  8159  1423  086E               	movf	_product,w
  8160  1424  3E11               	addlw	17
  8161  1425  0086               	movwf	6
  8162  1426  3002               	movlw	2	; select bank4/5
  8163  1427  0087               	movwf	7
  8164  1428  0868               	movf	??_setRFSW_AdjControl+1,w
  8165  1429  0081               	movwf	1
  8166                           
  8167                           ;RF_Control_B1.c: 471: setTxData();
  8168  142A  3187  2726         	fcall	_setTxData
  8169  142C  0008               	return
  8170  142D                     __end_of_setRFSW_AdjControl:	
  8171                           
  8172                           	psect	text32
  8173  119B                     __ptext32:	
  8174 ;; *************** function _setRF_DimmerValue *****************
  8175 ;; Defined at:
  8176 ;;		line 476 in file "../src/RF_Control_B1.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;  lights          1    wreg     unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  lights          1   70[BANK0 ] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;Total ram usage:        3 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    9
  8197 ;; This function calls:
  8198 ;;		_setDimmerLights_AdjRF
  8199 ;; This function is called by:
  8200 ;;		_setRFSW_AdjControl
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           
  8205                           ;psect for function _setRF_DimmerValue
  8206  119B                     _setRF_DimmerValue:	
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8210                           ;setRF_DimmerValue@lights stored from wreg
  8211  119B  0020               	movlb	0	; select bank0
  8212  119C  00E6               	movwf	setRF_DimmerValue@lights
  8213                           
  8214                           ;RF_Control_B1.c: 477: if (RF_Data[9] > 0x64) {
  8215  119D  3065               	movlw	101
  8216  119E  0022               	movlb	2	; select bank2
  8217  119F  0229               	subwf	(_RF_Data^(0+256)+9),w
  8218  11A0  1C03               	skipc
  8219  11A1  29A8               	goto	l6035
  8220                           
  8221                           ;RF_Control_B1.c: 478: RF_Data[9] = 0x64;
  8222  11A2  3064               	movlw	100
  8223  11A3  0020               	movlb	0	; select bank0
  8224  11A4  00E4               	movwf	??_setRF_DimmerValue
  8225  11A5  0864               	movf	??_setRF_DimmerValue,w
  8226  11A6  0022               	movlb	2	; select bank2
  8227  11A7  00A9               	movwf	(_RF_Data^(0+256)+9)
  8228  11A8                     l6035:	
  8229                           
  8230                           ;RF_Control_B1.c: 479: }
  8231                           ;RF_Control_B1.c: 480: product->Data[9]=RF_Data[9];
  8232  11A8  0829               	movf	(_RF_Data^(0+256)+9),w
  8233  11A9  0020               	movlb	0	; select bank0
  8234  11AA  00E4               	movwf	??_setRF_DimmerValue
  8235  11AB  086E               	movf	_product,w
  8236  11AC  3E09               	addlw	9
  8237  11AD  0086               	movwf	6
  8238  11AE  3002               	movlw	2	; select bank4/5
  8239  11AF  0087               	movwf	7
  8240  11B0  0864               	movf	??_setRF_DimmerValue,w
  8241  11B1  0081               	movwf	1
  8242                           
  8243                           ;RF_Control_B1.c: 481: product->Data[11]=lights;
  8244  11B2  0866               	movf	setRF_DimmerValue@lights,w
  8245  11B3  00E4               	movwf	??_setRF_DimmerValue
  8246  11B4  086E               	movf	_product,w
  8247  11B5  3E0B               	addlw	11
  8248  11B6  0086               	movwf	6
  8249  11B7  3002               	movlw	2	; select bank4/5
  8250  11B8  0087               	movwf	7
  8251  11B9  0864               	movf	??_setRF_DimmerValue,w
  8252  11BA  0081               	movwf	1
  8253                           
  8254                           ;RF_Control_B1.c: 482: product->Data[(20 + lights)]=RF_Data[9];
  8255  11BB  0022               	movlb	2	; select bank2
  8256  11BC  0829               	movf	(_RF_Data^(0+256)+9),w
  8257  11BD  0020               	movlb	0	; select bank0
  8258  11BE  00E4               	movwf	??_setRF_DimmerValue
  8259  11BF  0866               	movf	setRF_DimmerValue@lights,w
  8260  11C0  3E14               	addlw	20
  8261  11C1  076E               	addwf	_product,w
  8262  11C2  00E5               	movwf	??_setRF_DimmerValue+1
  8263  11C3  0865               	movf	??_setRF_DimmerValue+1,w
  8264  11C4  0086               	movwf	6
  8265  11C5  3002               	movlw	2	; select bank4/5
  8266  11C6  0087               	movwf	7
  8267  11C7  0864               	movf	??_setRF_DimmerValue,w
  8268  11C8  0081               	movwf	1
  8269                           
  8270                           ;RF_Control_B1.c: 483: setDimmerLights_AdjRF(lights);
  8271  11C9  0866               	movf	setRF_DimmerValue@lights,w
  8272  11CA  319F  27B9         	fcall	_setDimmerLights_AdjRF
  8273  11CC  0008               	return
  8274  11CD                     __end_of_setRF_DimmerValue:	
  8275                           
  8276                           	psect	text33
  8277  1FB9                     __ptext33:	
  8278 ;; *************** function _setDimmerLights_AdjRF *****************
  8279 ;; Defined at:
  8280 ;;		line 746 in file "../src/Dimmer_B1.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;  lights          1    wreg     unsigned char 
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;  lights          1   67[BANK0 ] unsigned char 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;		None               void
  8287 ;; Registers used:
  8288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        2 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    8
  8301 ;; This function calls:
  8302 ;;		_DimmerLightsPointSelect
  8303 ;;		_getPercentValue
  8304 ;; This function is called by:
  8305 ;;		_setRF_DimmerValue
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _setDimmerLights_AdjRF
  8311  1FB9                     _setDimmerLights_AdjRF:	
  8312                           
  8313                           ;incstack = 0
  8314                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8315                           ;setDimmerLights_AdjRF@lights stored from wreg
  8316  1FB9  0020               	movlb	0	; select bank0
  8317  1FBA  00E3               	movwf	setDimmerLights_AdjRF@lights
  8318                           
  8319                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8320  1FBB  0863               	movf	setDimmerLights_AdjRF@lights,w
  8321  1FBC  319C  241A  319F   	fcall	_DimmerLightsPointSelect
  8322                           
  8323                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8324  1FBF  0020               	movlb	0	; select bank0
  8325  1FC0  086F               	movf	_DimmerLights,w
  8326  1FC1  0086               	movwf	6
  8327  1FC2  3001               	movlw	1	; select bank2/3
  8328  1FC3  0087               	movwf	7
  8329  1FC4  1501               	bsf	1,2
  8330                           
  8331                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8332  1FC5  086F               	movf	_DimmerLights,w
  8333  1FC6  0086               	movwf	6
  8334  1FC7  3001               	movlw	1	; select bank2/3
  8335  1FC8  0087               	movwf	7
  8336  1FC9  1481               	bsf	1,1
  8337                           
  8338                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8339  1FCA  086E               	movf	_product,w
  8340  1FCB  3E09               	addlw	9
  8341  1FCC  0086               	movwf	6
  8342  1FCD  3002               	movlw	2	; select bank4/5
  8343  1FCE  0087               	movwf	7
  8344  1FCF  0801               	movf	1,w
  8345  1FD0  318A  2292         	fcall	_getPercentValue
  8346  1FD2  0020               	movlb	0	; select bank0
  8347  1FD3  00E2               	movwf	??_setDimmerLights_AdjRF
  8348  1FD4  086F               	movf	_DimmerLights,w
  8349  1FD5  3E05               	addlw	5
  8350  1FD6  0086               	movwf	6
  8351  1FD7  3001               	movlw	1	; select bank2/3
  8352  1FD8  0087               	movwf	7
  8353  1FD9  0862               	movf	??_setDimmerLights_AdjRF,w
  8354  1FDA  0081               	movwf	1
  8355  1FDB  0008               	return
  8356  1FDC                     __end_of_setDimmerLights_AdjRF:	
  8357                           
  8358                           	psect	text34
  8359  0A92                     __ptext34:	
  8360 ;; *************** function _getPercentValue *****************
  8361 ;; Defined at:
  8362 ;;		line 858 in file "../src/Dimmer_B1.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  value           1    wreg     unsigned char 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  value           1   62[BANK0 ] unsigned char 
  8367 ;;  i               3   63[BANK0 ] float 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  1    wreg      unsigned char 
  8370 ;; Registers used:
  8371 ;;		wreg, status,2, status,0, pclath, cstack
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;Total ram usage:        6 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    7
  8384 ;; This function calls:
  8385 ;;		___awtoft
  8386 ;;		___ftadd
  8387 ;;		___ftdiv
  8388 ;;		___ftmul
  8389 ;;		___ftneg
  8390 ;;		___fttol
  8391 ;; This function is called by:
  8392 ;;		_setDimmerLights_AdjRF
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function _getPercentValue
  8398  0A92                     _getPercentValue:	
  8399                           
  8400                           ;incstack = 0
  8401                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8402                           ;getPercentValue@value stored from wreg
  8403  0A92  0020               	movlb	0	; select bank0
  8404  0A93  00DE               	movwf	getPercentValue@value
  8405                           
  8406                           ;Dimmer_B1.c: 866: float i = ((char)(85*0.8)) - ((char)(15*0.8));
  8407  0A94  3000               	movlw	0
  8408  0A95  00DF               	movwf	getPercentValue@i
  8409  0A96  3060               	movlw	96
  8410  0A97  00E0               	movwf	getPercentValue@i+1
  8411  0A98  3042               	movlw	66
  8412  0A99  00E1               	movwf	getPercentValue@i+2
  8413                           
  8414                           ;Dimmer_B1.c: 867: i /= 100;
  8415  0A9A  3000               	movlw	0
  8416  0A9B  00AE               	movwf	___ftdiv@f2
  8417  0A9C  30C8               	movlw	200
  8418  0A9D  00AF               	movwf	___ftdiv@f2+1
  8419  0A9E  3042               	movlw	66
  8420  0A9F  00B0               	movwf	___ftdiv@f2+2
  8421  0AA0  085F               	movf	getPercentValue@i,w
  8422  0AA1  00B1               	movwf	___ftdiv@f1
  8423  0AA2  0860               	movf	getPercentValue@i+1,w
  8424  0AA3  00B2               	movwf	___ftdiv@f1+1
  8425  0AA4  0861               	movf	getPercentValue@i+2,w
  8426  0AA5  00B3               	movwf	___ftdiv@f1+2
  8427  0AA6  318D  25E8  318A   	fcall	___ftdiv
  8428  0AA9  0020               	movlb	0	; select bank0
  8429  0AAA  082E               	movf	?___ftdiv,w
  8430  0AAB  00DF               	movwf	getPercentValue@i
  8431  0AAC  082F               	movf	?___ftdiv+1,w
  8432  0AAD  00E0               	movwf	getPercentValue@i+1
  8433  0AAE  0830               	movf	?___ftdiv+2,w
  8434  0AAF  00E1               	movwf	getPercentValue@i+2
  8435                           
  8436                           ;Dimmer_B1.c: 869: return (char) (((char)(85*0.8)) - ((100 - value) * i));
  8437  0AB0  085E               	movf	getPercentValue@value,w
  8438  0AB1  00DC               	movwf	??_getPercentValue
  8439  0AB2  01DD               	clrf	??_getPercentValue+1
  8440  0AB3  09DC               	comf	??_getPercentValue,f
  8441  0AB4  09DD               	comf	??_getPercentValue+1,f
  8442  0AB5  0ADC               	incf	??_getPercentValue,f
  8443  0AB6  1903               	skipnz
  8444  0AB7  0ADD               	incf	??_getPercentValue+1,f
  8445  0AB8  085C               	movf	??_getPercentValue,w
  8446  0AB9  3E64               	addlw	100
  8447  0ABA  00A8               	movwf	___awtoft@c
  8448  0ABB  3000               	movlw	0
  8449  0ABC  3D5D               	addwfc	??_getPercentValue+1,w
  8450  0ABD  00A9               	movwf	___awtoft@c+1
  8451  0ABE  319F  2775  318A   	fcall	___awtoft
  8452  0AC1  0020               	movlb	0	; select bank0
  8453  0AC2  0828               	movf	?___awtoft,w
  8454  0AC3  00B1               	movwf	___ftmul@f2
  8455  0AC4  0829               	movf	?___awtoft+1,w
  8456  0AC5  00B2               	movwf	___ftmul@f2+1
  8457  0AC6  082A               	movf	?___awtoft+2,w
  8458  0AC7  00B3               	movwf	___ftmul@f2+2
  8459  0AC8  085F               	movf	getPercentValue@i,w
  8460  0AC9  00AE               	movwf	___ftmul@f1
  8461  0ACA  0860               	movf	getPercentValue@i+1,w
  8462  0ACB  00AF               	movwf	___ftmul@f1+1
  8463  0ACC  0861               	movf	getPercentValue@i+2,w
  8464  0ACD  00B0               	movwf	___ftmul@f1+2
  8465  0ACE  318E  2691  318A   	fcall	___ftmul
  8466  0AD1  0020               	movlb	0	; select bank0
  8467  0AD2  082E               	movf	?___ftmul,w
  8468  0AD3  00BE               	movwf	___ftneg@f1
  8469  0AD4  082F               	movf	?___ftmul+1,w
  8470  0AD5  00BF               	movwf	___ftneg@f1+1
  8471  0AD6  0830               	movf	?___ftmul+2,w
  8472  0AD7  00C0               	movwf	___ftneg@f1+2
  8473  0AD8  319B  23DF  318A   	fcall	___ftneg
  8474  0ADB  0020               	movlb	0	; select bank0
  8475  0ADC  083E               	movf	?___ftneg,w
  8476  0ADD  00C4               	movwf	___ftadd@f2
  8477  0ADE  083F               	movf	?___ftneg+1,w
  8478  0ADF  00C5               	movwf	___ftadd@f2+1
  8479  0AE0  0840               	movf	?___ftneg+2,w
  8480  0AE1  00C6               	movwf	___ftadd@f2+2
  8481  0AE2  3000               	movlw	0
  8482  0AE3  00C1               	movwf	___ftadd@f1
  8483  0AE4  3088               	movlw	136
  8484  0AE5  00C2               	movwf	___ftadd@f1+1
  8485  0AE6  3042               	movlw	66
  8486  0AE7  00C3               	movwf	___ftadd@f1+2
  8487  0AE8  3184  2475  318A   	fcall	___ftadd
  8488  0AEB  0020               	movlb	0	; select bank0
  8489  0AEC  0841               	movf	?___ftadd,w
  8490  0AED  00CE               	movwf	___fttol@f1
  8491  0AEE  0842               	movf	?___ftadd+1,w
  8492  0AEF  00CF               	movwf	___fttol@f1+1
  8493  0AF0  0843               	movf	?___ftadd+2,w
  8494  0AF1  00D0               	movwf	___fttol@f1+2
  8495  0AF2  318C  2448         	fcall	___fttol
  8496  0AF4  0020               	movlb	0	; select bank0
  8497  0AF5  084E               	movf	?___fttol,w
  8498  0AF6  0008               	return
  8499  0AF7                     __end_of_getPercentValue:	
  8500                           
  8501                           	psect	text35
  8502  0E91                     __ptext35:	
  8503 ;; *************** function ___ftmul *****************
  8504 ;; Defined at:
  8505 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;  f1              3   14[BANK0 ] float 
  8508 ;;  f2              3   17[BANK0 ] float 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8511 ;;  sign            1   29[BANK0 ] unsigned char 
  8512 ;;  cntr            1   28[BANK0 ] unsigned char 
  8513 ;;  exp             1   24[BANK0 ] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  3   14[BANK0 ] float 
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0, pclath, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8523 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;Total ram usage:       16 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    6
  8530 ;; This function calls:
  8531 ;;		___ftpack
  8532 ;; This function is called by:
  8533 ;;		_getPercentValue
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           
  8538                           ;psect for function ___ftmul
  8539  0E91                     ___ftmul:	
  8540                           
  8541                           ;incstack = 0
  8542                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8543  0E91  0020               	movlb	0	; select bank0
  8544  0E92  082E               	movf	___ftmul@f1,w
  8545  0E93  00B4               	movwf	??___ftmul
  8546  0E94  082F               	movf	___ftmul@f1+1,w
  8547  0E95  00B5               	movwf	??___ftmul+1
  8548  0E96  0830               	movf	___ftmul@f1+2,w
  8549  0E97  00B6               	movwf	??___ftmul+2
  8550  0E98  1003               	clrc
  8551  0E99  0D35               	rlf	??___ftmul+1,w
  8552  0E9A  0D36               	rlf	??___ftmul+2,w
  8553  0E9B  00B7               	movwf	??___ftmul+3
  8554  0E9C  0837               	movf	??___ftmul+3,w
  8555  0E9D  00B8               	movwf	___ftmul@exp
  8556  0E9E  08B8               	movf	___ftmul@exp,f
  8557  0E9F  1D03               	skipz
  8558  0EA0  2EA8               	goto	l5665
  8559  0EA1  3000               	movlw	0
  8560  0EA2  00AE               	movwf	?___ftmul
  8561  0EA3  3000               	movlw	0
  8562  0EA4  00AF               	movwf	?___ftmul+1
  8563  0EA5  3000               	movlw	0
  8564  0EA6  00B0               	movwf	?___ftmul+2
  8565  0EA7  0008               	return
  8566  0EA8                     l5665:	
  8567  0EA8  0831               	movf	___ftmul@f2,w
  8568  0EA9  00B4               	movwf	??___ftmul
  8569  0EAA  0832               	movf	___ftmul@f2+1,w
  8570  0EAB  00B5               	movwf	??___ftmul+1
  8571  0EAC  0833               	movf	___ftmul@f2+2,w
  8572  0EAD  00B6               	movwf	??___ftmul+2
  8573  0EAE  1003               	clrc
  8574  0EAF  0D35               	rlf	??___ftmul+1,w
  8575  0EB0  0D36               	rlf	??___ftmul+2,w
  8576  0EB1  00B7               	movwf	??___ftmul+3
  8577  0EB2  0837               	movf	??___ftmul+3,w
  8578  0EB3  00BD               	movwf	___ftmul@sign
  8579  0EB4  08BD               	movf	___ftmul@sign,f
  8580  0EB5  1D03               	skipz
  8581  0EB6  2EBE               	goto	l5671
  8582  0EB7  3000               	movlw	0
  8583  0EB8  00AE               	movwf	?___ftmul
  8584  0EB9  3000               	movlw	0
  8585  0EBA  00AF               	movwf	?___ftmul+1
  8586  0EBB  3000               	movlw	0
  8587  0EBC  00B0               	movwf	?___ftmul+2
  8588  0EBD  0008               	return
  8589  0EBE                     l5671:	
  8590  0EBE  083D               	movf	___ftmul@sign,w
  8591  0EBF  3E7B               	addlw	123
  8592  0EC0  00B4               	movwf	??___ftmul
  8593  0EC1  0834               	movf	??___ftmul,w
  8594  0EC2  07B8               	addwf	___ftmul@exp,f
  8595  0EC3  082E               	movf	___ftmul@f1,w
  8596  0EC4  00B4               	movwf	??___ftmul
  8597  0EC5  082F               	movf	___ftmul@f1+1,w
  8598  0EC6  00B5               	movwf	??___ftmul+1
  8599  0EC7  0830               	movf	___ftmul@f1+2,w
  8600  0EC8  00B6               	movwf	??___ftmul+2
  8601  0EC9  3010               	movlw	16
  8602  0ECA                     u4505:	
  8603  0ECA  36B6               	lsrf	??___ftmul+2,f
  8604  0ECB  0CB5               	rrf	??___ftmul+1,f
  8605  0ECC  0CB4               	rrf	??___ftmul,f
  8606  0ECD  0B89               	decfsz	9,f
  8607  0ECE  2ECA               	goto	u4505
  8608  0ECF  0834               	movf	??___ftmul,w
  8609  0ED0  00B7               	movwf	??___ftmul+3
  8610  0ED1  0837               	movf	??___ftmul+3,w
  8611  0ED2  00BD               	movwf	___ftmul@sign
  8612  0ED3  0831               	movf	___ftmul@f2,w
  8613  0ED4  00B4               	movwf	??___ftmul
  8614  0ED5  0832               	movf	___ftmul@f2+1,w
  8615  0ED6  00B5               	movwf	??___ftmul+1
  8616  0ED7  0833               	movf	___ftmul@f2+2,w
  8617  0ED8  00B6               	movwf	??___ftmul+2
  8618  0ED9  3010               	movlw	16
  8619  0EDA                     u4515:	
  8620  0EDA  36B6               	lsrf	??___ftmul+2,f
  8621  0EDB  0CB5               	rrf	??___ftmul+1,f
  8622  0EDC  0CB4               	rrf	??___ftmul,f
  8623  0EDD  0B89               	decfsz	9,f
  8624  0EDE  2EDA               	goto	u4515
  8625  0EDF  0834               	movf	??___ftmul,w
  8626  0EE0  00B7               	movwf	??___ftmul+3
  8627  0EE1  0837               	movf	??___ftmul+3,w
  8628  0EE2  06BD               	xorwf	___ftmul@sign,f
  8629  0EE3  3080               	movlw	128
  8630  0EE4  00B4               	movwf	??___ftmul
  8631  0EE5  0834               	movf	??___ftmul,w
  8632  0EE6  05BD               	andwf	___ftmul@sign,f
  8633  0EE7  17AF               	bsf	___ftmul@f1+1,7
  8634  0EE8  17B2               	bsf	___ftmul@f2+1,7
  8635  0EE9  30FF               	movlw	255
  8636  0EEA  05B1               	andwf	___ftmul@f2,f
  8637  0EEB  30FF               	movlw	255
  8638  0EEC  05B2               	andwf	___ftmul@f2+1,f
  8639  0EED  3000               	movlw	0
  8640  0EEE  05B3               	andwf	___ftmul@f2+2,f
  8641  0EEF  3000               	movlw	0
  8642  0EF0  00B9               	movwf	___ftmul@f3_as_product
  8643  0EF1  3000               	movlw	0
  8644  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
  8645  0EF3  3000               	movlw	0
  8646  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
  8647  0EF5  3007               	movlw	7
  8648  0EF6  00B4               	movwf	??___ftmul
  8649  0EF7  0834               	movf	??___ftmul,w
  8650  0EF8  00BC               	movwf	___ftmul@cntr
  8651  0EF9                     l5683:	
  8652  0EF9  1C2E               	btfss	___ftmul@f1,0
  8653  0EFA  2F01               	goto	l5687
  8654  0EFB  0831               	movf	___ftmul@f2,w
  8655  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
  8656  0EFD  0832               	movf	___ftmul@f2+1,w
  8657  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8658  0EFF  0833               	movf	___ftmul@f2+2,w
  8659  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8660  0F01                     l5687:	
  8661  0F01  3001               	movlw	1
  8662  0F02                     u4535:	
  8663  0F02  36B0               	lsrf	___ftmul@f1+2,f
  8664  0F03  0CAF               	rrf	___ftmul@f1+1,f
  8665  0F04  0CAE               	rrf	___ftmul@f1,f
  8666  0F05  0B89               	decfsz	9,f
  8667  0F06  2F02               	goto	u4535
  8668  0F07  3001               	movlw	1
  8669  0F08                     u4545:	
  8670  0F08  35B1               	lslf	___ftmul@f2,f
  8671  0F09  0DB2               	rlf	___ftmul@f2+1,f
  8672  0F0A  0DB3               	rlf	___ftmul@f2+2,f
  8673  0F0B  0B89               	decfsz	9,f
  8674  0F0C  2F08               	goto	u4545
  8675  0F0D  3001               	movlw	1
  8676  0F0E  02BC               	subwf	___ftmul@cntr,f
  8677  0F0F  1D03               	btfss	3,2
  8678  0F10  2EF9               	goto	l5683
  8679  0F11  3009               	movlw	9
  8680  0F12  00B4               	movwf	??___ftmul
  8681  0F13  0834               	movf	??___ftmul,w
  8682  0F14  00BC               	movwf	___ftmul@cntr
  8683  0F15                     l5695:	
  8684  0F15  1C2E               	btfss	___ftmul@f1,0
  8685  0F16  2F1D               	goto	l5699
  8686  0F17  0831               	movf	___ftmul@f2,w
  8687  0F18  07B9               	addwf	___ftmul@f3_as_product,f
  8688  0F19  0832               	movf	___ftmul@f2+1,w
  8689  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8690  0F1B  0833               	movf	___ftmul@f2+2,w
  8691  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8692  0F1D                     l5699:	
  8693  0F1D  3001               	movlw	1
  8694  0F1E                     u4575:	
  8695  0F1E  36B0               	lsrf	___ftmul@f1+2,f
  8696  0F1F  0CAF               	rrf	___ftmul@f1+1,f
  8697  0F20  0CAE               	rrf	___ftmul@f1,f
  8698  0F21  0B89               	decfsz	9,f
  8699  0F22  2F1E               	goto	u4575
  8700  0F23  3001               	movlw	1
  8701  0F24                     u4585:	
  8702  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8703  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8704  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
  8705  0F27  0B89               	decfsz	9,f
  8706  0F28  2F24               	goto	u4585
  8707  0F29  3001               	movlw	1
  8708  0F2A  02BC               	subwf	___ftmul@cntr,f
  8709  0F2B  1D03               	btfss	3,2
  8710  0F2C  2F15               	goto	l5695
  8711  0F2D  0839               	movf	___ftmul@f3_as_product,w
  8712  0F2E  00A0               	movwf	___ftpack@arg
  8713  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
  8714  0F30  00A1               	movwf	___ftpack@arg+1
  8715  0F31  083B               	movf	___ftmul@f3_as_product+2,w
  8716  0F32  00A2               	movwf	___ftpack@arg+2
  8717  0F33  0838               	movf	___ftmul@exp,w
  8718  0F34  00B4               	movwf	??___ftmul
  8719  0F35  0834               	movf	??___ftmul,w
  8720  0F36  00A3               	movwf	___ftpack@exp
  8721  0F37  083D               	movf	___ftmul@sign,w
  8722  0F38  00B5               	movwf	??___ftmul+1
  8723  0F39  0835               	movf	??___ftmul+1,w
  8724  0F3A  00A4               	movwf	___ftpack@sign
  8725  0F3B  3189  216B         	fcall	___ftpack
  8726  0F3D  0020               	movlb	0	; select bank0
  8727  0F3E  0820               	movf	?___ftpack,w
  8728  0F3F  00AE               	movwf	?___ftmul
  8729  0F40  0821               	movf	?___ftpack+1,w
  8730  0F41  00AF               	movwf	?___ftmul+1
  8731  0F42  0822               	movf	?___ftpack+2,w
  8732  0F43  00B0               	movwf	?___ftmul+2
  8733  0F44  0008               	return
  8734  0F45                     __end_of___ftmul:	
  8735                           
  8736                           	psect	text36
  8737  1DA6                     __ptext36:	
  8738 ;; *************** function _setMemory_Modify *****************
  8739 ;; Defined at:
  8740 ;;		line 1023 in file "../src/MCU_B1.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;  command         1    wreg     unsigned char 
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;  command         1    1[BANK0 ] unsigned char 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;		None               void
  8747 ;; Registers used:
  8748 ;;		wreg, status,2, status,0
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;Total ram usage:        2 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; Hardware stack levels required when called:    5
  8761 ;; This function calls:
  8762 ;;		Nothing
  8763 ;; This function is called by:
  8764 ;;		_setLog_Code
  8765 ;;		_setRFSW_AdjControl
  8766 ;; This function uses a non-reentrant model
  8767 ;;
  8768                           
  8769                           
  8770                           ;psect for function _setMemory_Modify
  8771  1DA6                     _setMemory_Modify:	
  8772                           
  8773                           ;incstack = 0
  8774                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8775                           ;setMemory_Modify@command stored from wreg
  8776  1DA6  0020               	movlb	0	; select bank0
  8777  1DA7  00A1               	movwf	setMemory_Modify@command
  8778                           
  8779                           ;MCU_B1.c: 1024: Memory.Modify = command == 1 ? 1 : 0;
  8780  1DA8  0821               	movf	setMemory_Modify@command,w
  8781  1DA9  3A01               	xorlw	1
  8782  1DAA  3000               	movlw	0
  8783  1DAB  1903               	skipnz
  8784  1DAC  3001               	movlw	1
  8785  1DAD  00A0               	movwf	??_setMemory_Modify
  8786  1DAE  0023               	movlb	3	; select bank3
  8787  1DAF  0844               	movf	(_Memory^(0+384)+36),w
  8788  1DB0  0020               	movlb	0	; select bank0
  8789  1DB1  0620               	xorwf	??_setMemory_Modify,w
  8790  1DB2  39FE               	andlw	-2
  8791  1DB3  0620               	xorwf	??_setMemory_Modify,w
  8792  1DB4  0023               	movlb	3	; select bank3
  8793  1DB5  00C4               	movwf	(_Memory^(0+384)+36)
  8794                           
  8795                           ;MCU_B1.c: 1025: Memory.Time = 0;
  8796  1DB6  01C2               	clrf	(_Memory^(0+384)+34)
  8797  1DB7  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8798  1DB8  0008               	return
  8799  1DB9                     __end_of_setMemory_Modify:	
  8800                           
  8801                           	psect	text37
  8802  1D4E                     __ptext37:	
  8803 ;; *************** function _getRF_KeyStatus *****************
  8804 ;; Defined at:
  8805 ;;		line 193 in file "../src/RF_Control_B1.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  key             1    1[BANK0 ] unsigned char 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      unsigned char 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;Total ram usage:        3 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    5
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		_setRF_Main
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function _getRF_KeyStatus
  8835  1D4E                     _getRF_KeyStatus:	
  8836                           
  8837                           ;RF_Control_B1.c: 194: char key = 0;
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8841  1D4E  0020               	movlb	0	; select bank0
  8842  1D4F  01A1               	clrf	getRF_KeyStatus@key
  8843                           
  8844                           ;RF_Control_B1.c: 204: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8845  1D50  01A2               	clrf	_getRF_KeyStatus$4885
  8846  1D51  0AA2               	incf	_getRF_KeyStatus$4885,f
  8847  1D52  1F0C               	btfss	12,6	;volatile
  8848  1D53  1A0C               	btfsc	12,4	;volatile
  8849  1D54  2D59               	goto	l6657
  8850  1D55  1C0C               	btfss	12,0	;volatile
  8851  1D56  1B8C               	btfsc	12,7	;volatile
  8852  1D57  2D59               	goto	l6657
  8853  1D58  01A2               	clrf	_getRF_KeyStatus$4885
  8854  1D59                     l6657:	
  8855  1D59  0822               	movf	_getRF_KeyStatus$4885,w
  8856  1D5A  00A0               	movwf	??_getRF_KeyStatus
  8857  1D5B  0820               	movf	??_getRF_KeyStatus,w
  8858  1D5C  00A1               	movwf	getRF_KeyStatus@key
  8859                           
  8860                           ;RF_Control_B1.c: 206: return key;
  8861  1D5D  0821               	movf	getRF_KeyStatus@key,w
  8862  1D5E  0008               	return
  8863  1D5F                     __end_of_getRF_KeyStatus:	
  8864                           
  8865                           	psect	text38
  8866  1D3D                     __ptext38:	
  8867 ;; *************** function _getBuz_GO *****************
  8868 ;; Defined at:
  8869 ;;		line 82 in file "../src/Buzzer_B1.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  i               2    4[BANK0 ] int 
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  2    0[BANK0 ] int 
  8876 ;; Registers used:
  8877 ;;		wreg, status,2, status,0
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8883 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;Total ram usage:        6 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    5
  8890 ;; This function calls:
  8891 ;;		Nothing
  8892 ;; This function is called by:
  8893 ;;		_setRF_Main
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           
  8898                           ;psect for function _getBuz_GO
  8899  1D3D                     _getBuz_GO:	
  8900                           
  8901                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8905  1D3D  0021               	movlb	1	; select bank1
  8906  1D3E  0C2E               	rrf	_Buz1^(0+128),w
  8907  1D3F  3901               	andlw	1
  8908  1D40  0020               	movlb	0	; select bank0
  8909  1D41  00A2               	movwf	??_getBuz_GO
  8910  1D42  01A3               	clrf	??_getBuz_GO+1
  8911  1D43  0822               	movf	??_getBuz_GO,w
  8912  1D44  00A4               	movwf	getBuz_GO@i
  8913  1D45  0823               	movf	??_getBuz_GO+1,w
  8914  1D46  00A5               	movwf	getBuz_GO@i+1
  8915                           
  8916                           ;Buzzer_B1.c: 84: return i;
  8917  1D47  0825               	movf	getBuz_GO@i+1,w
  8918  1D48  01A1               	clrf	?_getBuz_GO+1
  8919  1D49  07A1               	addwf	?_getBuz_GO+1,f
  8920  1D4A  0824               	movf	getBuz_GO@i,w
  8921  1D4B  01A0               	clrf	?_getBuz_GO
  8922  1D4C  07A0               	addwf	?_getBuz_GO,f
  8923  1D4D  0008               	return
  8924  1D4E                     __end_of_getBuz_GO:	
  8925                           
  8926                           	psect	text39
  8927  1CCE                     __ptext39:	
  8928 ;; *************** function _RF_RxDisable *****************
  8929 ;; Defined at:
  8930 ;;		line 268 in file "../src/RF_Control_B1.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;		None               void
  8937 ;; Registers used:
  8938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;Total ram usage:        0 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    7
  8951 ;; This function calls:
  8952 ;;		_CC2500_WriteCommand
  8953 ;; This function is called by:
  8954 ;;		_setRF_Main
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _RF_RxDisable
  8960  1CCE                     _RF_RxDisable:	
  8961                           
  8962                           ;RF_Control_B1.c: 269: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8966  1CCE  0021               	movlb	1	; select bank1
  8967  1CCF  18BA               	btfsc	_RF1^(0+128),1
  8968  1CD0  2CD3               	goto	l2050
  8969  1CD1  1DBA               	btfss	_RF1^(0+128),3
  8970  1CD2  0008               	return
  8971  1CD3                     l2050:	
  8972                           
  8973                           ;RF_Control_B1.c: 270: RF1.RxStatus = 0;
  8974  1CD3  11BA               	bcf	_RF1^(0+128),3
  8975                           
  8976                           ;RF_Control_B1.c: 271: RF1.ReceiveGO = 0;
  8977  1CD4  10BA               	bcf	_RF1^(0+128),1
  8978                           
  8979                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x36);
  8980  1CD5  3036               	movlw	54
  8981  1CD6  319E  2662  319C   	fcall	_CC2500_WriteCommand
  8982                           
  8983                           ;RF_Control_B1.c: 274: CC2500_WriteCommand(0x3A);
  8984  1CD9  303A               	movlw	58
  8985  1CDA  319E  2662         	fcall	_CC2500_WriteCommand
  8986  1CDC  0008               	return
  8987  1CDD                     __end_of_RF_RxDisable:	
  8988                           
  8989                           	psect	text40
  8990  09CC                     __ptext40:	
  8991 ;; *************** function _CC2500_TxData *****************
  8992 ;; Defined at:
  8993 ;;		line 32 in file "../src/CC2500_B1.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;		None
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;		None               void
  9000 ;; Registers used:
  9001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        2 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    7
  9014 ;; This function calls:
  9015 ;;		_CC2500_WriteByte
  9016 ;;		_CC2500_WriteCommand
  9017 ;;		_Timeout_Counter
  9018 ;;		_set_TimeoutCleared
  9019 ;; This function is called by:
  9020 ;;		_setRF_Main
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           
  9025                           ;psect for function _CC2500_TxData
  9026  09CC                     _CC2500_TxData:	
  9027                           
  9028                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9029                           ;CC2500_B1.c: 35: RC0 = 0;
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9033  09CC  0020               	movlb	0	; select bank0
  9034  09CD  100E               	bcf	14,0	;volatile
  9035                           
  9036                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9037  09CE  307F               	movlw	127
  9038  09CF  00A4               	movwf	??_CC2500_TxData
  9039  09D0  0824               	movf	??_CC2500_TxData,w
  9040  09D1  00FB               	movwf	_SPI0Buffer
  9041                           
  9042                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  9043  09D2  29D6               	goto	l6315
  9044  09D3                     l6313:	
  9045                           
  9046                           ;CC2500_B1.c: 38: Timeout_Counter();
  9047  09D3  319D  25F4  3189   	fcall	_Timeout_Counter
  9048  09D6                     l6315:	
  9049  09D6  0020               	movlb	0	; select bank0
  9050  09D7  1E8E               	btfss	14,5	;volatile
  9051  09D8  29DC               	goto	l6319
  9052  09D9  0021               	movlb	1	; select bank1
  9053  09DA  1D2B               	btfss	(_myMain^(0+128)+11),2
  9054  09DB  29D3               	goto	l6313
  9055  09DC                     l6319:	
  9056                           
  9057                           ;CC2500_B1.c: 39: };
  9058                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9059  09DC  319B  23AC  3189   	fcall	_set_TimeoutCleared
  9060                           
  9061                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9062  09DF  319D  25CC  3189   	fcall	_CC2500_WriteByte
  9063                           
  9064                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9065  09E2  0021               	movlb	1	; select bank1
  9066  09E3  0853               	movf	_Tx_Length^(0+128),w
  9067  09E4  0020               	movlb	0	; select bank0
  9068  09E5  00A4               	movwf	??_CC2500_TxData
  9069  09E6  0824               	movf	??_CC2500_TxData,w
  9070  09E7  00FB               	movwf	_SPI0Buffer
  9071                           
  9072                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9073  09E8  319D  25CC  3189   	fcall	_CC2500_WriteByte
  9074                           
  9075                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9076  09EB  0020               	movlb	0	; select bank0
  9077  09EC  01A5               	clrf	CC2500_TxData@loop_e
  9078  09ED                     l6333:	
  9079  09ED  0021               	movlb	1	; select bank1
  9080  09EE  0853               	movf	_Tx_Length^(0+128),w
  9081  09EF  0020               	movlb	0	; select bank0
  9082  09F0  0225               	subwf	CC2500_TxData@loop_e,w
  9083  09F1  1803               	btfsc	3,0
  9084  09F2  2A05               	goto	l231
  9085                           
  9086                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9087  09F3  0825               	movf	CC2500_TxData@loop_e,w
  9088  09F4  3E20               	addlw	_RF_Data& (0+255)
  9089  09F5  0086               	movwf	6
  9090  09F6  3001               	movlw	1	; select bank2/3
  9091  09F7  0087               	movwf	7
  9092  09F8  0801               	movf	1,w
  9093  09F9  00A4               	movwf	??_CC2500_TxData
  9094  09FA  0824               	movf	??_CC2500_TxData,w
  9095  09FB  00FB               	movwf	_SPI0Buffer
  9096                           
  9097                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9098  09FC  319D  25CC  3189   	fcall	_CC2500_WriteByte
  9099  09FF  3001               	movlw	1
  9100  0A00  0020               	movlb	0	; select bank0
  9101  0A01  00A4               	movwf	??_CC2500_TxData
  9102  0A02  0824               	movf	??_CC2500_TxData,w
  9103  0A03  07A5               	addwf	CC2500_TxData@loop_e,f
  9104  0A04  29ED               	goto	l6333
  9105  0A05                     l231:	
  9106                           
  9107                           ;CC2500_B1.c: 48: }
  9108                           ;CC2500_B1.c: 49: RC0 = 1;
  9109  0A05  140E               	bsf	14,0	;volatile
  9110                           
  9111                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9112  0A06  3035               	movlw	53
  9113  0A07  319E  2662  3189   	fcall	_CC2500_WriteCommand
  9114                           
  9115                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9116  0A0A  2A0E               	goto	l6339
  9117  0A0B                     l6337:	
  9118                           
  9119                           ;CC2500_B1.c: 52: Timeout_Counter();
  9120  0A0B  319D  25F4  3189   	fcall	_Timeout_Counter
  9121  0A0E                     l6339:	
  9122  0A0E  0020               	movlb	0	; select bank0
  9123  0A0F  188E               	btfsc	14,1	;volatile
  9124  0A10  2A14               	goto	l6343
  9125  0A11  0021               	movlb	1	; select bank1
  9126  0A12  1D2B               	btfss	(_myMain^(0+128)+11),2
  9127  0A13  2A0B               	goto	l6337
  9128  0A14                     l6343:	
  9129                           
  9130                           ;CC2500_B1.c: 53: };
  9131                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9132  0A14  319B  23AC  3189   	fcall	_set_TimeoutCleared
  9133                           
  9134                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9135  0A17  2A1B               	goto	l6347
  9136  0A18                     l6345:	
  9137                           
  9138                           ;CC2500_B1.c: 57: Timeout_Counter();
  9139  0A18  319D  25F4  3189   	fcall	_Timeout_Counter
  9140  0A1B                     l6347:	
  9141  0A1B  0020               	movlb	0	; select bank0
  9142  0A1C  1C8E               	btfss	14,1	;volatile
  9143  0A1D  2A21               	goto	l6351
  9144  0A1E  0021               	movlb	1	; select bank1
  9145  0A1F  1D2B               	btfss	(_myMain^(0+128)+11),2
  9146  0A20  2A18               	goto	l6345
  9147  0A21                     l6351:	
  9148                           
  9149                           ;CC2500_B1.c: 58: };
  9150                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9151  0A21  319B  23AC  3189   	fcall	_set_TimeoutCleared
  9152                           
  9153                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9154  0A24  3036               	movlw	54
  9155  0A25  319E  2662  3189   	fcall	_CC2500_WriteCommand
  9156                           
  9157                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9158  0A28  303B               	movlw	59
  9159  0A29  319E  2662         	fcall	_CC2500_WriteCommand
  9160                           
  9161                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9162  0A2B  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9163  0A2C  0008               	return
  9164  0A2D                     __end_of_CC2500_TxData:	
  9165                           
  9166                           	psect	text41
  9167  0B5D                     __ptext41:	
  9168 ;; *************** function _CC2500_RxData *****************
  9169 ;; Defined at:
  9170 ;;		line 70 in file "../src/CC2500_B1.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;		None
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9175 ;; Return value:  Size  Location     Type
  9176 ;;		None               void
  9177 ;; Registers used:
  9178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;Total ram usage:        2 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    7
  9191 ;; This function calls:
  9192 ;;		_CC2500_ReadByte
  9193 ;;		_CC2500_ReadStatus
  9194 ;;		_CC2500_WriteByte
  9195 ;;		_Timeout_Counter
  9196 ;;		_set_TimeoutCleared
  9197 ;; This function is called by:
  9198 ;;		_setRF_Main
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           
  9203                           ;psect for function _CC2500_RxData
  9204  0B5D                     _CC2500_RxData:	
  9205                           
  9206                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9207                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9208                           
  9209                           ;incstack = 0
  9210                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9211  0B5D  0020               	movlb	0	; select bank0
  9212  0B5E  188E               	btfsc	14,1	;volatile
  9213  0B5F  2B64               	goto	l6365
  9214  0B60  2B6D               	goto	l6371
  9215  0B61                     l6363:	
  9216                           ;CC2500_B1.c: 76: {
  9217                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9218                           
  9219                           
  9220                           ;CC2500_B1.c: 78: Timeout_Counter();
  9221  0B61  319D  25F4  318B   	fcall	_Timeout_Counter
  9222  0B64                     l6365:	
  9223  0B64  0020               	movlb	0	; select bank0
  9224  0B65  1C8E               	btfss	14,1	;volatile
  9225  0B66  2B6A               	goto	l6369
  9226  0B67  0021               	movlb	1	; select bank1
  9227  0B68  1D2B               	btfss	(_myMain^(0+128)+11),2
  9228  0B69  2B61               	goto	l6363
  9229  0B6A                     l6369:	
  9230                           
  9231                           ;CC2500_B1.c: 79: };
  9232                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9233  0B6A  319B  23AC  318B   	fcall	_set_TimeoutCleared
  9234  0B6D                     l6371:	
  9235                           
  9236                           ;CC2500_B1.c: 81: }
  9237                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9238  0B6D  303B               	movlw	59
  9239  0B6E  319F  2797  318B   	fcall	_CC2500_ReadStatus
  9240                           
  9241                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9242  0B71  0021               	movlb	1	; select bank1
  9243  0B72  0856               	movf	_s_data^(0+128),w
  9244  0B73  1903               	btfsc	3,2
  9245  0B74  0008               	return
  9246                           
  9247                           ;CC2500_B1.c: 86: RC0 = 0;
  9248  0B75  0020               	movlb	0	; select bank0
  9249  0B76  100E               	bcf	14,0	;volatile
  9250                           
  9251                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9252  0B77  30FF               	movlw	255
  9253  0B78  00A4               	movwf	??_CC2500_RxData
  9254  0B79  0824               	movf	??_CC2500_RxData,w
  9255  0B7A  00FB               	movwf	_SPI0Buffer
  9256                           
  9257                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9258  0B7B  2B7F               	goto	l6381
  9259  0B7C                     l6379:	
  9260                           
  9261                           ;CC2500_B1.c: 89: Timeout_Counter();
  9262  0B7C  319D  25F4  318B   	fcall	_Timeout_Counter
  9263  0B7F                     l6381:	
  9264  0B7F  0020               	movlb	0	; select bank0
  9265  0B80  1E8E               	btfss	14,5	;volatile
  9266  0B81  2B85               	goto	l6385
  9267  0B82  0021               	movlb	1	; select bank1
  9268  0B83  1D2B               	btfss	(_myMain^(0+128)+11),2
  9269  0B84  2B7C               	goto	l6379
  9270  0B85                     l6385:	
  9271                           
  9272                           ;CC2500_B1.c: 90: };
  9273                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9274  0B85  319B  23AC  318B   	fcall	_set_TimeoutCleared
  9275                           
  9276                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9277  0B88  319D  25CC  318B   	fcall	_CC2500_WriteByte
  9278                           
  9279                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9280  0B8B  319E  2633  318B   	fcall	_CC2500_ReadByte
  9281                           
  9282                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9283  0B8E  087B               	movf	_SPI0Buffer,w
  9284  0B8F  0020               	movlb	0	; select bank0
  9285  0B90  00A4               	movwf	??_CC2500_RxData
  9286  0B91  0824               	movf	??_CC2500_RxData,w
  9287  0B92  0021               	movlb	1	; select bank1
  9288  0B93  00D1               	movwf	_Rx_Length^(0+128)
  9289                           
  9290                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9291  0B94  0020               	movlb	0	; select bank0
  9292  0B95  01A5               	clrf	CC2500_RxData@loop_f
  9293  0B96                     l6401:	
  9294  0B96  0021               	movlb	1	; select bank1
  9295  0B97  0851               	movf	_Rx_Length^(0+128),w
  9296  0B98  0020               	movlb	0	; select bank0
  9297  0B99  0225               	subwf	CC2500_RxData@loop_f,w
  9298  0B9A  1803               	btfsc	3,0
  9299  0B9B  2BAE               	goto	l6403
  9300                           
  9301                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9302  0B9C  319E  2633  318B   	fcall	_CC2500_ReadByte
  9303                           
  9304                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9305  0B9F  087B               	movf	_SPI0Buffer,w
  9306  0BA0  0020               	movlb	0	; select bank0
  9307  0BA1  00A4               	movwf	??_CC2500_RxData
  9308  0BA2  0825               	movf	CC2500_RxData@loop_f,w
  9309  0BA3  3E20               	addlw	_RF_Data& (0+255)
  9310  0BA4  0086               	movwf	6
  9311  0BA5  3001               	movlw	1	; select bank2/3
  9312  0BA6  0087               	movwf	7
  9313  0BA7  0824               	movf	??_CC2500_RxData,w
  9314  0BA8  0081               	movwf	1
  9315  0BA9  3001               	movlw	1
  9316  0BAA  00A4               	movwf	??_CC2500_RxData
  9317  0BAB  0824               	movf	??_CC2500_RxData,w
  9318  0BAC  07A5               	addwf	CC2500_RxData@loop_f,f
  9319  0BAD  2B96               	goto	l6401
  9320  0BAE                     l6403:	
  9321                           
  9322                           ;CC2500_B1.c: 99: }
  9323                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9324  0BAE  319E  2633  318B   	fcall	_CC2500_ReadByte
  9325                           
  9326                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9327  0BB1  087B               	movf	_SPI0Buffer,w
  9328  0BB2  0020               	movlb	0	; select bank0
  9329  0BB3  00A4               	movwf	??_CC2500_RxData
  9330  0BB4  0824               	movf	??_CC2500_RxData,w
  9331  0BB5  0021               	movlb	1	; select bank1
  9332  0BB6  00D0               	movwf	_RSSI^(0+128)
  9333                           
  9334                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9335  0BB7  319E  2633         	fcall	_CC2500_ReadByte
  9336                           
  9337                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9338  0BB9  087B               	movf	_SPI0Buffer,w
  9339  0BBA  0020               	movlb	0	; select bank0
  9340  0BBB  00A4               	movwf	??_CC2500_RxData
  9341  0BBC  0824               	movf	??_CC2500_RxData,w
  9342  0BBD  0021               	movlb	1	; select bank1
  9343  0BBE  00CD               	movwf	_CRC^(0+128)
  9344                           
  9345                           ;CC2500_B1.c: 104: RC0 = 1;
  9346  0BBF  0020               	movlb	0	; select bank0
  9347  0BC0  140E               	bsf	14,0	;volatile
  9348                           
  9349                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9350  0BC1  0021               	movlb	1	; select bank1
  9351  0BC2  1BCD               	btfsc	_CRC^(0+128),7
  9352                           
  9353                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9354  0BC3  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9355                           
  9356                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9357  0BC4  11BA               	bcf	_RF1^(0+128),3
  9358                           
  9359                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9360  0BC5  14BA               	bsf	_RF1^(0+128),1
  9361  0BC6  0008               	return
  9362  0BC7                     __end_of_CC2500_RxData:	
  9363                           
  9364                           	psect	text42
  9365  1F97                     __ptext42:	
  9366 ;; *************** function _CC2500_ReadStatus *****************
  9367 ;; Defined at:
  9368 ;;		line 301 in file "../src/CC2500_B1.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;  status_addr     1    wreg     unsigned char 
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9373 ;; Return value:  Size  Location     Type
  9374 ;;		None               void
  9375 ;; Registers used:
  9376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;Total ram usage:        2 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    6
  9389 ;; This function calls:
  9390 ;;		_CC2500_ReadByte
  9391 ;;		_CC2500_WriteByte
  9392 ;;		_Timeout_Counter
  9393 ;;		_set_TimeoutCleared
  9394 ;; This function is called by:
  9395 ;;		_CC2500_RxData
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           
  9400                           ;psect for function _CC2500_ReadStatus
  9401  1F97                     _CC2500_ReadStatus:	
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9405                           ;CC2500_ReadStatus@status_addr stored from wreg
  9406  1F97  0020               	movlb	0	; select bank0
  9407  1F98  00A3               	movwf	CC2500_ReadStatus@status_addr
  9408                           
  9409                           ;CC2500_B1.c: 302: RC0 = 0;
  9410  1F99  100E               	bcf	14,0	;volatile
  9411                           
  9412                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9413  1F9A  0823               	movf	CC2500_ReadStatus@status_addr,w
  9414  1F9B  3EC0               	addlw	192
  9415  1F9C  00A2               	movwf	??_CC2500_ReadStatus
  9416  1F9D  0822               	movf	??_CC2500_ReadStatus,w
  9417  1F9E  00FB               	movwf	_SPI0Buffer
  9418                           
  9419                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9420  1F9F  2FA3               	goto	l6179
  9421  1FA0                     l6177:	
  9422                           
  9423                           ;CC2500_B1.c: 306: Timeout_Counter();
  9424  1FA0  319D  25F4  319F   	fcall	_Timeout_Counter
  9425  1FA3                     l6179:	
  9426  1FA3  0020               	movlb	0	; select bank0
  9427  1FA4  1E8E               	btfss	14,5	;volatile
  9428  1FA5  2FA9               	goto	l6183
  9429  1FA6  0021               	movlb	1	; select bank1
  9430  1FA7  1D2B               	btfss	(_myMain^(0+128)+11),2
  9431  1FA8  2FA0               	goto	l6177
  9432  1FA9                     l6183:	
  9433                           
  9434                           ;CC2500_B1.c: 307: };
  9435                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9436  1FA9  319B  23AC  319F   	fcall	_set_TimeoutCleared
  9437                           
  9438                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9439  1FAC  319D  25CC  319F   	fcall	_CC2500_WriteByte
  9440                           
  9441                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9442  1FAF  319E  2633         	fcall	_CC2500_ReadByte
  9443                           
  9444                           ;CC2500_B1.c: 312: RC0 = 1;
  9445  1FB1  0020               	movlb	0	; select bank0
  9446  1FB2  140E               	bsf	14,0	;volatile
  9447                           
  9448                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9449  1FB3  087B               	movf	_SPI0Buffer,w
  9450  1FB4  00A2               	movwf	??_CC2500_ReadStatus
  9451  1FB5  0822               	movf	??_CC2500_ReadStatus,w
  9452  1FB6  0021               	movlb	1	; select bank1
  9453  1FB7  00D6               	movwf	_s_data^(0+128)
  9454  1FB8  0008               	return
  9455  1FB9                     __end_of_CC2500_ReadStatus:	
  9456                           
  9457                           	psect	text43
  9458  1E33                     __ptext43:	
  9459 ;; *************** function _CC2500_ReadByte *****************
  9460 ;; Defined at:
  9461 ;;		line 235 in file "../src/CC2500_B1.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        2 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    5
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_CC2500_RxData
  9486 ;;		_CC2500_ReadStatus
  9487 ;;		_CC2500_ReadREG
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _CC2500_ReadByte
  9493  1E33                     _CC2500_ReadByte:	
  9494                           
  9495                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9496                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9500  1E33  0020               	movlb	0	; select bank0
  9501  1E34  01A1               	clrf	CC2500_ReadByte@loop_b
  9502  1E35                     L5:	
  9503  1E35  3008               	movlw	8
  9504  1E36  0221               	subwf	CC2500_ReadByte@loop_b,w
  9505  1E37  1803               	btfsc	3,0
  9506  1E38  0008               	return
  9507                           
  9508                           ;CC2500_B1.c: 238: RC3 = 1;
  9509  1E39  158E               	bsf	14,3	;volatile
  9510                           
  9511                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9512  1E3A  1003               	clrc
  9513  1E3B  0DFB               	rlf	_SPI0Buffer,f
  9514                           
  9515                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9516  1E3C  1E8E               	btfss	14,5	;volatile
  9517  1E3D  2E40               	goto	l6083
  9518                           
  9519                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9520  1E3E  147B               	bsf	_SPI0Buffer,0
  9521  1E3F  2E44               	goto	l6085
  9522  1E40                     l6083:	
  9523                           
  9524                           ;CC2500_B1.c: 242: else
  9525                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9526  1E40  30FE               	movlw	254
  9527  1E41  00A0               	movwf	??_CC2500_ReadByte
  9528  1E42  0820               	movf	??_CC2500_ReadByte,w
  9529  1E43  05FB               	andwf	_SPI0Buffer,f
  9530  1E44                     l6085:	
  9531                           
  9532                           ;CC2500_B1.c: 244: RC3 = 0;
  9533  1E44  118E               	bcf	14,3	;volatile
  9534  1E45  3001               	movlw	1
  9535  1E46  00A0               	movwf	??_CC2500_ReadByte
  9536  1E47  0820               	movf	??_CC2500_ReadByte,w
  9537  1E48  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9538  1E49  2E35               	goto	L5
  9539  1E4A                     __end_of_CC2500_ReadByte:	
  9540                           
  9541                           	psect	text44
  9542  1B7C                     __ptext44:	
  9543 ;; *************** function _RF_Initialization *****************
  9544 ;; Defined at:
  9545 ;;		line 9 in file "../src/RF_Control_B1.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;		None               void
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, pclath, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;Total ram usage:        0 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    6
  9566 ;; This function calls:
  9567 ;;		_setRF_Initialization
  9568 ;; This function is called by:
  9569 ;;		_main
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           
  9574                           ;psect for function _RF_Initialization
  9575  1B7C                     _RF_Initialization:	
  9576                           
  9577                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9578                           
  9579                           ;incstack = 0
  9580                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9581  1B7C  319C  243B         	fcall	_setRF_Initialization
  9582  1B7E  0008               	return
  9583  1B7F                     __end_of_RF_Initialization:	
  9584                           
  9585                           	psect	text45
  9586  1C3B                     __ptext45:	
  9587 ;; *************** function _setRF_Initialization *****************
  9588 ;; Defined at:
  9589 ;;		line 43 in file "../src/RF_Control_B1.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;		None
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;		None               void
  9596 ;; Registers used:
  9597 ;;		wreg
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;Total ram usage:        1 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    5
  9610 ;; This function calls:
  9611 ;;		Nothing
  9612 ;; This function is called by:
  9613 ;;		_RF_Initialization
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           
  9618                           ;psect for function _setRF_Initialization
  9619  1C3B                     _setRF_Initialization:	
  9620                           
  9621                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9622                           
  9623                           ;incstack = 0
  9624                           ; Regs used in _setRF_Initialization: [wreg]
  9625  1C3B  3015               	movlw	21
  9626  1C3C  0020               	movlb	0	; select bank0
  9627  1C3D  00A0               	movwf	??_setRF_Initialization
  9628  1C3E  0820               	movf	??_setRF_Initialization,w
  9629  1C3F  0021               	movlb	1	; select bank1
  9630  1C40  00D3               	movwf	_Tx_Length^(0+128)
  9631                           
  9632                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9633  1C41  300A               	movlw	10
  9634  1C42  00C1               	movwf	(_RF1^(0+128)+7)
  9635  1C43  3000               	movlw	0
  9636  1C44  00C2               	movwf	(_RF1^(0+128)+8)
  9637  1C45  0008               	return
  9638  1C46                     __end_of_setRF_Initialization:	
  9639                           
  9640                           	psect	text46
  9641  1D82                     __ptext46:	
  9642 ;; *************** function _Mcu_Initialization *****************
  9643 ;; Defined at:
  9644 ;;		line 30 in file "../src/MCU_B1.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;		None
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, status,0, pclath, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:        0 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    6
  9665 ;; This function calls:
  9666 ;;		_ADC_Set
  9667 ;;		_Fosc_Set
  9668 ;;		_IOC_Set
  9669 ;;		_IO_Set
  9670 ;;		_TMR1_Set
  9671 ;;		_WDT_Set
  9672 ;; This function is called by:
  9673 ;;		_main
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _Mcu_Initialization
  9679  1D82                     _Mcu_Initialization:	
  9680                           
  9681                           ;MCU_B1.c: 32: Fosc_Set();
  9682                           
  9683                           ;incstack = 0
  9684                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9685  1D82  319B  23A8  319D   	fcall	_Fosc_Set
  9686                           
  9687                           ;MCU_B1.c: 34: IO_Set();
  9688  1D85  319E  264A  319D   	fcall	_IO_Set
  9689                           
  9690                           ;MCU_B1.c: 36: ;;
  9691                           ;MCU_B1.c: 38: TMR1_Set();
  9692  1D88  319C  2498  319D   	fcall	_TMR1_Set
  9693                           
  9694                           ;MCU_B1.c: 40: ADC_Set();
  9695  1D8B  319B  23C8  319D   	fcall	_ADC_Set
  9696                           
  9697                           ;MCU_B1.c: 42: ;;
  9698                           ;MCU_B1.c: 44: ;;
  9699                           ;MCU_B1.c: 46: IOC_Set();
  9700  1D8E  319C  248C  319D   	fcall	_IOC_Set
  9701                           
  9702                           ;MCU_B1.c: 48: ;;
  9703                           ;MCU_B1.c: 50: ;;
  9704                           ;MCU_B1.c: 52: WDT_Set();
  9705  1D91  319C  2430         	fcall	_WDT_Set
  9706  1D93  0008               	return
  9707  1D94                     __end_of_Mcu_Initialization:	
  9708                           
  9709                           	psect	text47
  9710  1C30                     __ptext47:	
  9711 ;; *************** function _WDT_Set *****************
  9712 ;; Defined at:
  9713 ;;		line 1042 in file "../src/MCU_B1.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;		None
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;		None
  9718 ;; Return value:  Size  Location     Type
  9719 ;;		None               void
  9720 ;; Registers used:
  9721 ;;		wreg
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;Total ram usage:        1 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    5
  9734 ;; This function calls:
  9735 ;;		Nothing
  9736 ;; This function is called by:
  9737 ;;		_Mcu_Initialization
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _WDT_Set
  9743  1C30                     _WDT_Set:	
  9744                           
  9745                           ;MCU_B1.c: 1049: WDTCON = 0b00010111;;
  9746                           
  9747                           ;incstack = 0
  9748                           ; Regs used in _WDT_Set: [wreg]
  9749  1C30  3017               	movlw	23
  9750  1C31  0021               	movlb	1	; select bank1
  9751  1C32  0097               	movwf	23	;volatile
  9752                           
  9753                           ;MCU_B1.c: 1051: WDT.Enable = 1;
  9754  1C33  144B               	bsf	_WDT^(0+128),0
  9755                           
  9756                           ;MCU_B1.c: 1052: WDT.Timer = 10;
  9757  1C34  300A               	movlw	10
  9758  1C35  0020               	movlb	0	; select bank0
  9759  1C36  00A0               	movwf	??_WDT_Set
  9760  1C37  0820               	movf	??_WDT_Set,w
  9761  1C38  0021               	movlb	1	; select bank1
  9762  1C39  00CC               	movwf	(_WDT^(0+128)+1)
  9763  1C3A  0008               	return
  9764  1C3B                     __end_of_WDT_Set:	
  9765                           
  9766                           	psect	text48
  9767  1C98                     __ptext48:	
  9768 ;; *************** function _TMR1_Set *****************
  9769 ;; Defined at:
  9770 ;;		line 199 in file "../src/MCU_B1.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;		None
  9775 ;; Return value:  Size  Location     Type
  9776 ;;		None               void
  9777 ;; Registers used:
  9778 ;;		wreg
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;Total ram usage:        0 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    5
  9791 ;; This function calls:
  9792 ;;		Nothing
  9793 ;; This function is called by:
  9794 ;;		_Mcu_Initialization
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           
  9799                           ;psect for function _TMR1_Set
  9800  1C98                     _TMR1_Set:	
  9801                           
  9802                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9803                           
  9804                           ;incstack = 0
  9805                           ; Regs used in _TMR1_Set: [wreg]
  9806  1C98  3041               	movlw	65
  9807  1C99  0020               	movlb	0	; select bank0
  9808  1C9A  0098               	movwf	24	;volatile
  9809                           
  9810                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9811  1C9B  30FA               	movlw	250
  9812  1C9C  0097               	movwf	23	;volatile
  9813                           
  9814                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9815  1C9D  3038               	movlw	56
  9816  1C9E  0096               	movwf	22	;volatile
  9817                           
  9818                           ;MCU_B1.c: 203: TMR1IE = 1;
  9819  1C9F  0021               	movlb	1	; select bank1
  9820  1CA0  1411               	bsf	17,0	;volatile
  9821                           
  9822                           ;MCU_B1.c: 204: PEIE = 1;
  9823  1CA1  170B               	bsf	11,6	;volatile
  9824                           
  9825                           ;MCU_B1.c: 205: GIE = 1;
  9826  1CA2  178B               	bsf	11,7	;volatile
  9827  1CA3  0008               	return
  9828  1CA4                     __end_of_TMR1_Set:	
  9829                           
  9830                           	psect	text49
  9831  1E4A                     __ptext49:	
  9832 ;; *************** function _IO_Set *****************
  9833 ;; Defined at:
  9834 ;;		line 60 in file "../src/MCU_B1.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;		None
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;		None               void
  9841 ;; Registers used:
  9842 ;;		wreg, status,2
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;Total ram usage:        0 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    5
  9855 ;; This function calls:
  9856 ;;		Nothing
  9857 ;; This function is called by:
  9858 ;;		_Mcu_Initialization
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           
  9863                           ;psect for function _IO_Set
  9864  1E4A                     _IO_Set:	
  9865                           
  9866                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9867                           
  9868                           ;incstack = 0
  9869                           ; Regs used in _IO_Set: [wreg+status,2]
  9870  1E4A  30F7               	movlw	247
  9871  1E4B  0021               	movlb	1	; select bank1
  9872  1E4C  008C               	movwf	12	;volatile
  9873                           
  9874                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9875  1E4D  3004               	movlw	4
  9876  1E4E  008D               	movwf	13	;volatile
  9877                           
  9878                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9879  1E4F  3026               	movlw	38
  9880  1E50  008E               	movwf	14	;volatile
  9881                           
  9882                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9883  1E51  0022               	movlb	2	; select bank2
  9884  1E52  018C               	clrf	12	;volatile
  9885                           
  9886                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9887  1E53  018D               	clrf	13	;volatile
  9888                           
  9889                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9890  1E54  018E               	clrf	14	;volatile
  9891                           
  9892                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9893  1E55  300E               	movlw	14
  9894  1E56  0023               	movlb	3	; select bank3
  9895  1E57  008C               	movwf	12	;volatile
  9896                           
  9897                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9898  1E58  018D               	clrf	13	;volatile
  9899                           
  9900                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9901  1E59  018E               	clrf	14	;volatile
  9902                           
  9903                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9904  1E5A  30F7               	movlw	247
  9905  1E5B  0020               	movlb	0	; select bank0
  9906  1E5C  008C               	movwf	12	;volatile
  9907                           
  9908                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9909  1E5D  3004               	movlw	4
  9910  1E5E  008D               	movwf	13	;volatile
  9911                           
  9912                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9913  1E5F  3026               	movlw	38
  9914  1E60  008E               	movwf	14	;volatile
  9915  1E61  0008               	return
  9916  1E62                     __end_of_IO_Set:	
  9917                           
  9918                           	psect	text50
  9919  1C8C                     __ptext50:	
  9920 ;; *************** function _IOC_Set *****************
  9921 ;; Defined at:
  9922 ;;		line 365 in file "../src/MCU_B1.c"
  9923 ;; Parameters:    Size  Location     Type
  9924 ;;		None
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;		None               void
  9929 ;; Registers used:
  9930 ;;		wreg, status,2
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;Total ram usage:        0 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; Hardware stack levels required when called:    5
  9943 ;; This function calls:
  9944 ;;		Nothing
  9945 ;; This function is called by:
  9946 ;;		_Mcu_Initialization
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           
  9951                           ;psect for function _IOC_Set
  9952  1C8C                     _IOC_Set:	
  9953                           
  9954                           ;MCU_B1.c: 366: WPUB2 = 0;
  9955                           
  9956                           ;incstack = 0
  9957                           ; Regs used in _IOC_Set: [wreg+status,2]
  9958  1C8C  0024               	movlb	4	; select bank4
  9959  1C8D  110D               	bcf	13,2	;volatile
  9960                           
  9961                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9962  1C8E  0027               	movlb	7	; select bank7
  9963  1C8F  0194               	clrf	20	;volatile
  9964                           
  9965                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9966  1C90  3004               	movlw	4
  9967  1C91  0095               	movwf	21	;volatile
  9968                           
  9969                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9970  1C92  0196               	clrf	22	;volatile
  9971                           
  9972                           ;MCU_B1.c: 393: IOCIE = 1;
  9973  1C93  158B               	bsf	11,3	;volatile
  9974                           
  9975                           ;MCU_B1.c: 394: IOCIF = 0;
  9976  1C94  100B               	bcf	11,0	;volatile
  9977                           
  9978                           ;MCU_B1.c: 395: PEIE = 1;
  9979  1C95  170B               	bsf	11,6	;volatile
  9980                           
  9981                           ;MCU_B1.c: 396: GIE = 1;
  9982  1C96  178B               	bsf	11,7	;volatile
  9983  1C97  0008               	return
  9984  1C98                     __end_of_IOC_Set:	
  9985                           
  9986                           	psect	text51
  9987  1BA8                     __ptext51:	
  9988 ;; *************** function _Fosc_Set *****************
  9989 ;; Defined at:
  9990 ;;		line 56 in file "../src/MCU_B1.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;		None               void
  9997 ;; Registers used:
  9998 ;;		wreg
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        0 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    5
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_Mcu_Initialization
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _Fosc_Set
 10020  1BA8                     _Fosc_Set:	
 10021                           
 10022                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10023                           
 10024                           ;incstack = 0
 10025                           ; Regs used in _Fosc_Set: [wreg]
 10026  1BA8  3078               	movlw	120
 10027  1BA9  0021               	movlb	1	; select bank1
 10028  1BAA  0099               	movwf	25	;volatile
 10029  1BAB  0008               	return
 10030  1BAC                     __end_of_Fosc_Set:	
 10031                           
 10032                           	psect	text52
 10033  1BC8                     __ptext52:	
 10034 ;; *************** function _ADC_Set *****************
 10035 ;; Defined at:
 10036 ;;		line 420 in file "../src/MCU_B1.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;		None               void
 10043 ;; Registers used:
 10044 ;;		wreg
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;Total ram usage:        0 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    5
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_Mcu_Initialization
 10061 ;; This function uses a non-reentrant model
 10062 ;;
 10063                           
 10064                           
 10065                           ;psect for function _ADC_Set
 10066  1BC8                     _ADC_Set:	
 10067                           
 10068                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10069                           
 10070                           ;incstack = 0
 10071                           ; Regs used in _ADC_Set: [wreg]
 10072  1BC8  30F3               	movlw	243
 10073  1BC9  0021               	movlb	1	; select bank1
 10074  1BCA  009E               	movwf	30	;volatile
 10075                           
 10076                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10077  1BCB  30C1               	movlw	193
 10078  1BCC  0022               	movlb	2	; select bank2
 10079  1BCD  0097               	movwf	23	;volatile
 10080  1BCE  0008               	return
 10081  1BCF                     __end_of_ADC_Set:	
 10082                           
 10083                           	psect	text53
 10084  0043                     __ptext53:	
 10085 ;; *************** function _Load_Main *****************
 10086 ;; Defined at:
 10087 ;;		line 39 in file "../src/OverLoad_B1.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  i               1   15[BANK0 ] unsigned char 
 10092 ;;  error           1   14[BANK0 ] unsigned char 
 10093 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10094 ;;  j               1   11[BANK0 ] unsigned char 
 10095 ;; Return value:  Size  Location     Type
 10096 ;;		None               void
 10097 ;; Registers used:
 10098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10099 ;; Tracked objects:
 10100 ;;		On entry : 0/0
 10101 ;;		On exit  : 0/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;Total ram usage:        7 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    8
 10111 ;; This function calls:
 10112 ;;		___lwdiv
 10113 ;;		_getAll_DimmerLights_AdjGO
 10114 ;;		_getMain_All_Error_Status
 10115 ;;		_getMain_LightsStatus
 10116 ;;		_getMain_Lights_Count
 10117 ;;		_getMain_LoadOK
 10118 ;;		_setLoad_AH_AL_Restore
 10119 ;; This function is called by:
 10120 ;;		_main
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function _Load_Main
 10126  0043                     _Load_Main:	
 10127                           
 10128                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10132  0043  0020               	movlb	0	; select bank0
 10133  0044  01AF               	clrf	Load_Main@i
 10134  0045  01AB               	clrf	Load_Main@j
 10135  0046  3000               	movlw	0
 10136  0047  3191  21CD  3180   	fcall	_getMain_All_Error_Status
 10137  004A  0020               	movlb	0	; select bank0
 10138  004B  00A9               	movwf	??_Load_Main
 10139  004C  0829               	movf	??_Load_Main,w
 10140  004D  00AE               	movwf	Load_Main@error
 10141  004E  01AC               	clrf	Load_Main@adjgo
 10142                           
 10143                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10144  004F  0022               	movlb	2	; select bank2
 10145  0050  1C41               	btfss	_Load^(0+256),0
 10146  0051  29BA               	goto	l1543
 10147                           
 10148                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10149  0052  3190  2066  3180   	fcall	_getAll_DimmerLights_AdjGO
 10150  0055  0020               	movlb	0	; select bank0
 10151  0056  00A9               	movwf	??_Load_Main
 10152  0057  0829               	movf	??_Load_Main,w
 10153  0058  00AC               	movwf	Load_Main@adjgo
 10154                           
 10155                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10156  0059  01AD               	clrf	_Load_Main$3639
 10157  005A  3191  2111  3180   	fcall	_getMain_LightsStatus
 10158  005D  3A01               	xorlw	1
 10159  005E  1D03               	skipz
 10160  005F  2869               	goto	l7743
 10161  0060  0020               	movlb	0	; select bank0
 10162  0061  08AE               	movf	Load_Main@error,f
 10163  0062  1D03               	skipz
 10164  0063  2869               	goto	l7743
 10165  0064  08AC               	movf	Load_Main@adjgo,f
 10166  0065  1D03               	skipz
 10167  0066  2869               	goto	l7743
 10168  0067  01AD               	clrf	_Load_Main$3639
 10169  0068  0AAD               	incf	_Load_Main$3639,f
 10170  0069                     l7743:	
 10171  0069  0020               	movlb	0	; select bank0
 10172  006A  082D               	movf	_Load_Main$3639,w
 10173  006B  0022               	movlb	2	; select bank2
 10174  006C  10C1               	bcf	_Load^(0+256),1
 10175  006D  1D03               	skipz
 10176  006E  14C1               	bsf	_Load^(0+256),1
 10177                           
 10178                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10179  006F  319C  24B1  3180   	fcall	_getMain_LoadOK
 10180  0072  3A01               	xorlw	1
 10181  0073  1D03               	skipz
 10182  0074  287A               	goto	l1546
 10183  0075  0022               	movlb	2	; select bank2
 10184  0076  19C1               	btfsc	_Load^(0+256),3
 10185  0077  287A               	goto	l1546
 10186                           
 10187                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10188  0078  15C1               	bsf	_Load^(0+256),3
 10189                           
 10190                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10191  0079  13C1               	bcf	_Load^(0+256),7
 10192  007A                     l1546:	
 10193                           
 10194                           ;OverLoad_B1.c: 51: }
 10195                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10196  007A  0022               	movlb	2	; select bank2
 10197  007B  1CC1               	btfss	_Load^(0+256),1
 10198  007C  298A               	goto	l1547
 10199                           
 10200                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10201  007D  1541               	bsf	_Load^(0+256),2
 10202                           
 10203                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10204  007E  1E41               	btfss	_Load^(0+256),4
 10205  007F  2988               	goto	l1548
 10206                           
 10207                           ;OverLoad_B1.c: 58: Load.Time++;
 10208  0080  3001               	movlw	1
 10209  0081  07C2               	addwf	(_Load^(0+256)+1),f
 10210  0082  3000               	movlw	0
 10211  0083  3DC3               	addwfc	((_Load+1)^(0+256)+1),f
 10212                           
 10213                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10214  0084  3000               	movlw	0
 10215  0085  0243               	subwf	((_Load+1)^(0+256)+1),w
 10216  0086  3005               	movlw	5
 10217  0087  1903               	skipnz
 10218  0088  0242               	subwf	(_Load^(0+256)+1),w
 10219  0089  1C03               	skipc
 10220  008A  0008               	return
 10221                           
 10222                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10223  008B  01C2               	clrf	(_Load^(0+256)+1)
 10224  008C  01C3               	clrf	((_Load+1)^(0+256)+1)
 10225                           
 10226                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10227  008D  1241               	bcf	_Load^(0+256),4
 10228                           
 10229                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10230  008E  0020               	movlb	0	; select bank0
 10231  008F  01AF               	clrf	Load_Main@i
 10232  0090  0AAF               	incf	Load_Main@i,f
 10233  0091  3004               	movlw	4
 10234  0092  022F               	subwf	Load_Main@i,w
 10235  0093  1803               	btfsc	3,0
 10236  0094  28BF               	goto	l7771
 10237  0095                     l7765:	
 10238                           
 10239                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10240  0095  352F               	lslf	Load_Main@i,w
 10241  0096  3E4C               	addlw	(_Load+11)& (0+255)
 10242  0097  0086               	movwf	6
 10243  0098  3001               	movlw	1	; select bank2/3
 10244  0099  0087               	movwf	7
 10245  009A  3F40               	moviw [0]fsr1
 10246  009B  00A9               	movwf	??_Load_Main
 10247  009C  3F41               	moviw [1]fsr1
 10248  009D  00AA               	movwf	??_Load_Main+1
 10249  009E  0829               	movf	??_Load_Main,w
 10250  009F  0022               	movlb	2	; select bank2
 10251  00A0  07C6               	addwf	(_Load^(0+256)+5),f
 10252  00A1  0020               	movlb	0	; select bank0
 10253  00A2  082A               	movf	??_Load_Main+1,w
 10254  00A3  0022               	movlb	2	; select bank2
 10255  00A4  3DC7               	addwfc	((_Load+1)^(0+256)+5),f
 10256                           
 10257                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10258  00A5  0020               	movlb	0	; select bank0
 10259  00A6  352F               	lslf	Load_Main@i,w
 10260  00A7  3E56               	addlw	(_Load+21)& (0+255)
 10261  00A8  0086               	movwf	6
 10262  00A9  3001               	movlw	1	; select bank2/3
 10263  00AA  0087               	movwf	7
 10264  00AB  3F40               	moviw [0]fsr1
 10265  00AC  00A9               	movwf	??_Load_Main
 10266  00AD  3F41               	moviw [1]fsr1
 10267  00AE  00AA               	movwf	??_Load_Main+1
 10268  00AF  0829               	movf	??_Load_Main,w
 10269  00B0  0022               	movlb	2	; select bank2
 10270  00B1  07C8               	addwf	(_Load^(0+256)+7),f
 10271  00B2  0020               	movlb	0	; select bank0
 10272  00B3  082A               	movf	??_Load_Main+1,w
 10273  00B4  0022               	movlb	2	; select bank2
 10274  00B5  3DC9               	addwfc	((_Load+1)^(0+256)+7),f
 10275  00B6  3001               	movlw	1
 10276  00B7  0020               	movlb	0	; select bank0
 10277  00B8  00A9               	movwf	??_Load_Main
 10278  00B9  0829               	movf	??_Load_Main,w
 10279  00BA  07AF               	addwf	Load_Main@i,f
 10280  00BB  3004               	movlw	4
 10281  00BC  022F               	subwf	Load_Main@i,w
 10282  00BD  1C03               	skipc
 10283  00BE  2895               	goto	l7765
 10284  00BF                     l7771:	
 10285                           
 10286                           ;OverLoad_B1.c: 66: }
 10287                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10288  00BF  3003               	movlw	3
 10289  00C0  00A0               	movwf	___lwdiv@divisor
 10290  00C1  3000               	movlw	0
 10291  00C2  00A1               	movwf	___lwdiv@divisor+1
 10292  00C3  0022               	movlb	2	; select bank2
 10293  00C4  0847               	movf	((_Load+1)^(0+256)+5),w
 10294  00C5  0020               	movlb	0	; select bank0
 10295  00C6  01A3               	clrf	___lwdiv@dividend+1
 10296  00C7  07A3               	addwf	___lwdiv@dividend+1,f
 10297  00C8  0022               	movlb	2	; select bank2
 10298  00C9  0846               	movf	(_Load^(0+256)+5),w
 10299  00CA  0020               	movlb	0	; select bank0
 10300  00CB  01A2               	clrf	___lwdiv@dividend
 10301  00CC  07A2               	addwf	___lwdiv@dividend,f
 10302  00CD  3193  230A  3180   	fcall	___lwdiv
 10303  00D0  0020               	movlb	0	; select bank0
 10304  00D1  0821               	movf	?___lwdiv+1,w
 10305  00D2  0022               	movlb	2	; select bank2
 10306  00D3  01C7               	clrf	((_Load+1)^(0+256)+5)
 10307  00D4  07C7               	addwf	((_Load+1)^(0+256)+5),f
 10308  00D5  0020               	movlb	0	; select bank0
 10309  00D6  0820               	movf	?___lwdiv,w
 10310  00D7  0022               	movlb	2	; select bank2
 10311  00D8  01C6               	clrf	(_Load^(0+256)+5)
 10312  00D9  07C6               	addwf	(_Load^(0+256)+5),f
 10313                           
 10314                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10315  00DA  3003               	movlw	3
 10316  00DB  0020               	movlb	0	; select bank0
 10317  00DC  00A0               	movwf	___lwdiv@divisor
 10318  00DD  3000               	movlw	0
 10319  00DE  00A1               	movwf	___lwdiv@divisor+1
 10320  00DF  0022               	movlb	2	; select bank2
 10321  00E0  0849               	movf	((_Load+1)^(0+256)+7),w
 10322  00E1  0020               	movlb	0	; select bank0
 10323  00E2  01A3               	clrf	___lwdiv@dividend+1
 10324  00E3  07A3               	addwf	___lwdiv@dividend+1,f
 10325  00E4  0022               	movlb	2	; select bank2
 10326  00E5  0848               	movf	(_Load^(0+256)+7),w
 10327  00E6  0020               	movlb	0	; select bank0
 10328  00E7  01A2               	clrf	___lwdiv@dividend
 10329  00E8  07A2               	addwf	___lwdiv@dividend,f
 10330  00E9  3193  230A  3180   	fcall	___lwdiv
 10331  00EC  0020               	movlb	0	; select bank0
 10332  00ED  0821               	movf	?___lwdiv+1,w
 10333  00EE  0022               	movlb	2	; select bank2
 10334  00EF  01C9               	clrf	((_Load+1)^(0+256)+7)
 10335  00F0  07C9               	addwf	((_Load+1)^(0+256)+7),f
 10336  00F1  0020               	movlb	0	; select bank0
 10337  00F2  0820               	movf	?___lwdiv,w
 10338  00F3  0022               	movlb	2	; select bank2
 10339  00F4  01C8               	clrf	(_Load^(0+256)+7)
 10340  00F5  07C8               	addwf	(_Load^(0+256)+7),f
 10341                           
 10342                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10343  00F6  319E  267B  3180   	fcall	_setLoad_AH_AL_Restore
 10344                           
 10345                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10346  00F9  0022               	movlb	2	; select bank2
 10347  00FA  0847               	movf	((_Load+1)^(0+256)+5),w
 10348  00FB  0249               	subwf	((_Load+1)^(0+256)+7),w
 10349  00FC  1D03               	skipz
 10350  00FD  2900               	goto	u7805
 10351  00FE  0846               	movf	(_Load^(0+256)+5),w
 10352  00FF  0248               	subwf	(_Load^(0+256)+7),w
 10353  0100                     u7805:	
 10354  0100  1803               	skipnc
 10355  0101  0008               	return
 10356                           
 10357                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10358  0102  3005               	movlw	5
 10359  0103  3E41               	addlw	_Load& (0+255)
 10360  0104  0086               	movwf	6
 10361  0105  3001               	movlw	1	; select bank2/3
 10362  0106  0087               	movwf	7
 10363  0107  0948               	comf	(_Load^(0+256)+7),w
 10364  0108  0020               	movlb	0	; select bank0
 10365  0109  00A9               	movwf	??_Load_Main
 10366  010A  0022               	movlb	2	; select bank2
 10367  010B  0949               	comf	((_Load+1)^(0+256)+7),w
 10368  010C  0020               	movlb	0	; select bank0
 10369  010D  00AA               	movwf	??_Load_Main+1
 10370  010E  0AA9               	incf	??_Load_Main,f
 10371  010F  1903               	skipnz
 10372  0110  0AAA               	incf	??_Load_Main+1,f
 10373  0111  3F40               	moviw [0]fsr1
 10374  0112  0729               	addwf	??_Load_Main,w
 10375  0113  0022               	movlb	2	; select bank2
 10376  0114  00E0               	movwf	(_Load^(0+256)+31)
 10377  0115  3F41               	moviw [1]fsr1
 10378  0116  0020               	movlb	0	; select bank0
 10379  0117  3D2A               	addwfc	??_Load_Main+1,w
 10380  0118  0022               	movlb	2	; select bank2
 10381  0119  00E1               	movwf	(_Load^(0+256)+32)
 10382                           
 10383                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10384  011A  01C6               	clrf	(_Load^(0+256)+5)
 10385  011B  01C7               	clrf	((_Load+1)^(0+256)+5)
 10386                           
 10387                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10388  011C  01C8               	clrf	(_Load^(0+256)+7)
 10389  011D  01C9               	clrf	((_Load+1)^(0+256)+7)
 10390                           
 10391                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10392  011E  319D  250C  3180   	fcall	_getMain_Lights_Count
 10393  0121  0020               	movlb	0	; select bank0
 10394  0122  00A9               	movwf	??_Load_Main
 10395  0123  0829               	movf	??_Load_Main,w
 10396  0124  0022               	movlb	2	; select bank2
 10397  0125  00ED               	movwf	(_Load^(0+256)+44)
 10398                           
 10399                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10400  0126  1DC1               	btfss	_Load^(0+256),3
 10401  0127  2953               	goto	l7803
 10402                           
 10403                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10404  0128  3002               	movlw	2
 10405  0129  026A               	subwf	(_Load^(0+256)+41),w
 10406  012A  1803               	skipnc
 10407  012B  2953               	goto	l7803
 10408                           
 10409                           ;OverLoad_B1.c: 79: Load.Count++;
 10410  012C  3001               	movlw	1
 10411  012D  0020               	movlb	0	; select bank0
 10412  012E  00A9               	movwf	??_Load_Main
 10413  012F  0829               	movf	??_Load_Main,w
 10414  0130  0022               	movlb	2	; select bank2
 10415  0131  07EA               	addwf	(_Load^(0+256)+41),f
 10416                           
 10417                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10418  0132  086A               	movf	(_Load^(0+256)+41),w
 10419  0133  3A01               	xorlw	1
 10420  0134  1D03               	skipz
 10421  0135  2940               	goto	l7795
 10422                           
 10423                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10424  0136  3002               	movlw	2
 10425  0137  0020               	movlb	0	; select bank0
 10426  0138  00A9               	movwf	??_Load_Main
 10427  0139  0829               	movf	??_Load_Main,w
 10428  013A  0022               	movlb	2	; select bank2
 10429  013B  00EC               	movwf	(_Load^(0+256)+43)
 10430                           
 10431                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*57);
 10432  013C  3074               	movlw	116
 10433  013D  00E6               	movwf	(_Load^(0+256)+37)
 10434  013E  3004               	movlw	4
 10435  013F  294B               	goto	L6
 10436  0140                     l7795:	
 10437                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10438                           
 10439  0140  086A               	movf	(_Load^(0+256)+41),w
 10440  0141  3A02               	xorlw	2
 10441  0142  1D03               	skipz
 10442  0143  2953               	goto	l7803
 10443                           
 10444                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10445  0144  086D               	movf	(_Load^(0+256)+44),w
 10446  0145  3A01               	xorlw	1
 10447  0146  1D03               	skipz
 10448  0147  294D               	goto	l7801
 10449                           
 10450                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(2.5*57);
 10451  0148  308E               	movlw	142
 10452  0149  00E6               	movwf	(_Load^(0+256)+37)
 10453  014A  3000               	movlw	0
 10454  014B                     L6:	
 10455  014B  00E7               	movwf	(_Load^(0+256)+38)
 10456                           
 10457                           ;OverLoad_B1.c: 86: } else {
 10458  014C  2953               	goto	l7803
 10459  014D                     l7801:	
 10460                           
 10461                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(2.5*57) + Load.TotalLoad;
 10462  014D  084A               	movf	(_Load^(0+256)+9),w
 10463  014E  3E8E               	addlw	142
 10464  014F  00E6               	movwf	(_Load^(0+256)+37)
 10465  0150  3000               	movlw	0
 10466  0151  3D4B               	addwfc	((_Load+1)^(0+256)+9),w
 10467  0152  00E7               	movwf	((_Load+1)^(0+256)+37)
 10468  0153                     l7803:	
 10469                           
 10470                           ;OverLoad_B1.c: 88: }
 10471                           ;OverLoad_B1.c: 89: }
 10472                           ;OverLoad_B1.c: 90: }
 10473                           ;OverLoad_B1.c: 91: }
 10474                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10475  0153  0867               	movf	((_Load+1)^(0+256)+37),w
 10476  0154  0261               	subwf	((_Load+1)^(0+256)+31),w
 10477  0155  1D03               	skipz
 10478  0156  2959               	goto	u7865
 10479  0157  0866               	movf	(_Load^(0+256)+37),w
 10480  0158  0260               	subwf	(_Load^(0+256)+31),w
 10481  0159                     u7865:	
 10482  0159  1C03               	skipc
 10483  015A  2968               	goto	l7813
 10484                           
 10485                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10486  015B  3001               	movlw	1
 10487  015C  0020               	movlb	0	; select bank0
 10488  015D  00A9               	movwf	??_Load_Main
 10489  015E  0829               	movf	??_Load_Main,w
 10490  015F  0022               	movlb	2	; select bank2
 10491  0160  07EB               	addwf	(_Load^(0+256)+42),f
 10492                           
 10493                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10494  0161  086B               	movf	(_Load^(0+256)+42),w
 10495  0162  026C               	subwf	(_Load^(0+256)+43),w
 10496  0163  1803               	skipnc
 10497  0164  0008               	return
 10498                           
 10499                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10500  0165  01EB               	clrf	(_Load^(0+256)+42)
 10501                           
 10502                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10503  0166  16C1               	bsf	_Load^(0+256),5
 10504                           
 10505                           ;OverLoad_B1.c: 118: }
 10506                           ;OverLoad_B1.c: 119: } else {
 10507  0167  0008               	return
 10508  0168                     l7813:	
 10509                           
 10510                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10511  0168  01EB               	clrf	(_Load^(0+256)+42)
 10512                           
 10513                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10514  0169  1DC1               	btfss	_Load^(0+256),3
 10515  016A  0008               	return
 10516                           
 10517                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10518  016B  1BC1               	btfsc	_Load^(0+256),7
 10519  016C  0008               	return
 10520                           
 10521                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10522  016D  3001               	movlw	1
 10523  016E  0020               	movlb	0	; select bank0
 10524  016F  00A9               	movwf	??_Load_Main
 10525  0170  0829               	movf	??_Load_Main,w
 10526  0171  0022               	movlb	2	; select bank2
 10527  0172  07EE               	addwf	(_Load^(0+256)+45),f
 10528                           
 10529                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10530  0173  3003               	movlw	3
 10531  0174  026E               	subwf	(_Load^(0+256)+45),w
 10532  0175  1C03               	skipc
 10533  0176  0008               	return
 10534                           
 10535                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10536  0177  01EE               	clrf	(_Load^(0+256)+45)
 10537                           
 10538                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10539  0178  17C1               	bsf	_Load^(0+256),7
 10540                           
 10541                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10542  0179  11C1               	bcf	_Load^(0+256),3
 10543                           
 10544                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10545  017A  01EA               	clrf	(_Load^(0+256)+41)
 10546                           
 10547                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10548  017B  0861               	movf	((_Load+1)^(0+256)+31),w
 10549  017C  01CB               	clrf	((_Load+1)^(0+256)+9)
 10550  017D  07CB               	addwf	((_Load+1)^(0+256)+9),f
 10551  017E  0860               	movf	(_Load^(0+256)+31),w
 10552  017F  01CA               	clrf	(_Load^(0+256)+9)
 10553  0180  07CA               	addwf	(_Load^(0+256)+9),f
 10554                           
 10555                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10556  0181  3003               	movlw	3
 10557  0182  0020               	movlb	0	; select bank0
 10558  0183  00A9               	movwf	??_Load_Main
 10559  0184  0829               	movf	??_Load_Main,w
 10560  0185  0022               	movlb	2	; select bank2
 10561  0186  00EC               	movwf	(_Load^(0+256)+43)
 10562                           
 10563                           ;OverLoad_B1.c: 154: }
 10564                           ;OverLoad_B1.c: 155: }
 10565                           ;OverLoad_B1.c: 156: }
 10566                           ;OverLoad_B1.c: 157: }
 10567                           ;OverLoad_B1.c: 158: }
 10568                           ;OverLoad_B1.c: 159: }
 10569                           ;OverLoad_B1.c: 160: } else {
 10570  0187  0008               	return
 10571  0188                     l1548:	
 10572                           
 10573                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10574  0188  1641               	bsf	_Load^(0+256),4
 10575                           
 10576                           ;OverLoad_B1.c: 162: }
 10577                           ;OverLoad_B1.c: 163: } else {
 10578  0189  0008               	return
 10579  018A                     l1547:	
 10580                           
 10581                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10582  018A  1D41               	btfss	_Load^(0+256),2
 10583  018B  29A8               	goto	l7863
 10584  018C  0020               	movlb	0	; select bank0
 10585  018D  082E               	movf	Load_Main@error,w
 10586  018E  3A03               	xorlw	3
 10587  018F  1903               	skipnz
 10588  0190  29A8               	goto	l7863
 10589                           
 10590                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10591  0191  0022               	movlb	2	; select bank2
 10592  0192  1141               	bcf	_Load^(0+256),2
 10593                           
 10594                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10595  0193  01C2               	clrf	(_Load^(0+256)+1)
 10596  0194  01C3               	clrf	((_Load+1)^(0+256)+1)
 10597                           
 10598                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10599  0195  1241               	bcf	_Load^(0+256),4
 10600                           
 10601                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10602  0196  319E  267B  3180   	fcall	_setLoad_AH_AL_Restore
 10603                           
 10604                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10605  0199  0022               	movlb	2	; select bank2
 10606  019A  01EA               	clrf	(_Load^(0+256)+41)
 10607                           
 10608                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10609  019B  01EB               	clrf	(_Load^(0+256)+42)
 10610                           
 10611                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10612  019C  01EE               	clrf	(_Load^(0+256)+45)
 10613                           
 10614                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10615  019D  01C6               	clrf	(_Load^(0+256)+5)
 10616  019E  01C7               	clrf	((_Load+1)^(0+256)+5)
 10617                           
 10618                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10619  019F  01C8               	clrf	(_Load^(0+256)+7)
 10620  01A0  01C9               	clrf	((_Load+1)^(0+256)+7)
 10621                           
 10622                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10623  01A1  01E0               	clrf	(_Load^(0+256)+31)
 10624  01A2  01E1               	clrf	((_Load+1)^(0+256)+31)
 10625                           
 10626                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10627  01A3  01E6               	clrf	(_Load^(0+256)+37)
 10628  01A4  01E7               	clrf	((_Load+1)^(0+256)+37)
 10629                           
 10630                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10631  01A5  01ED               	clrf	(_Load^(0+256)+44)
 10632                           
 10633                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10634  01A6  11C1               	bcf	_Load^(0+256),3
 10635                           
 10636                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10637  01A7  17C1               	bsf	_Load^(0+256),7
 10638  01A8                     l7863:	
 10639                           
 10640                           ;OverLoad_B1.c: 201: }
 10641                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10642  01A8  0022               	movlb	2	; select bank2
 10643  01A9  1EC1               	btfss	_Load^(0+256),5
 10644  01AA  0008               	return
 10645                           
 10646                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10647  01AB  3001               	movlw	1
 10648  01AC  07C4               	addwf	(_Load^(0+256)+3),f
 10649  01AD  3000               	movlw	0
 10650  01AE  3DC5               	addwfc	((_Load+1)^(0+256)+3),f
 10651                           
 10652                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10653  01AF  3003               	movlw	3
 10654  01B0  0245               	subwf	((_Load+1)^(0+256)+3),w
 10655  01B1  30E8               	movlw	232
 10656  01B2  1903               	skipnz
 10657  01B3  0244               	subwf	(_Load^(0+256)+3),w
 10658  01B4  1C03               	skipc
 10659  01B5  0008               	return
 10660                           
 10661                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10662  01B6  01C4               	clrf	(_Load^(0+256)+3)
 10663  01B7  01C5               	clrf	((_Load+1)^(0+256)+3)
 10664                           
 10665                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10666  01B8  12C1               	bcf	_Load^(0+256),5
 10667                           
 10668                           ;OverLoad_B1.c: 207: }
 10669                           ;OverLoad_B1.c: 208: }
 10670                           ;OverLoad_B1.c: 209: }
 10671                           ;OverLoad_B1.c: 210: } else {
 10672  01B9  0008               	return
 10673  01BA                     l1543:	
 10674                           
 10675                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10676  01BA  0021               	movlb	1	; select bank1
 10677  01BB  1C20               	btfss	_myMain^(0+128),0
 10678  01BC  0008               	return
 10679                           
 10680                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10681  01BD  0022               	movlb	2	; select bank2
 10682  01BE  1441               	bsf	_Load^(0+256),0
 10683  01BF  0008               	return
 10684  01C0                     __end_of_Load_Main:	
 10685                           
 10686                           	psect	text54
 10687  1CB1                     __ptext54:	
 10688 ;; *************** function _getMain_LoadOK *****************
 10689 ;; Defined at:
 10690 ;;		line 442 in file "../src/Main_B1.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;  ok              1    2[BANK0 ] unsigned char 
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      unsigned char 
 10697 ;; Registers used:
 10698 ;;		wreg, status,2, pclath, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;Total ram usage:        2 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    6
 10711 ;; This function calls:
 10712 ;;		_getDimmer_LoadOK
 10713 ;; This function is called by:
 10714 ;;		_Load_Main
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           
 10719                           ;psect for function _getMain_LoadOK
 10720  1CB1                     _getMain_LoadOK:	
 10721                           
 10722                           ;Main_B1.c: 443: char ok = 0;
 10723                           
 10724                           ;incstack = 0
 10725                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10726  1CB1  0020               	movlb	0	; select bank0
 10727  1CB2  01A2               	clrf	getMain_LoadOK@ok
 10728                           
 10729                           ;Main_B1.c: 449: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10730  1CB3  319B  23D7         	fcall	_getDimmer_LoadOK
 10731  1CB5  3A01               	xorlw	1
 10732  1CB6  3000               	movlw	0
 10733  1CB7  1903               	skipnz
 10734  1CB8  3001               	movlw	1
 10735  1CB9  0020               	movlb	0	; select bank0
 10736  1CBA  00A1               	movwf	??_getMain_LoadOK
 10737  1CBB  0821               	movf	??_getMain_LoadOK,w
 10738  1CBC  00A2               	movwf	getMain_LoadOK@ok
 10739                           
 10740                           ;Main_B1.c: 451: return ok;
 10741  1CBD  0822               	movf	getMain_LoadOK@ok,w
 10742  1CBE  0008               	return
 10743  1CBF                     __end_of_getMain_LoadOK:	
 10744                           
 10745                           	psect	text55
 10746  1BD7                     __ptext55:	
 10747 ;; *************** function _getDimmer_LoadOK *****************
 10748 ;; Defined at:
 10749 ;;		line 599 in file "../src/Dimmer_B1.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  status          1    0[BANK0 ] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  1    wreg      unsigned char 
 10756 ;; Registers used:
 10757 ;;		wreg, status,2
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        1 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    5
 10770 ;; This function calls:
 10771 ;;		Nothing
 10772 ;; This function is called by:
 10773 ;;		_getMain_LoadOK
 10774 ;; This function uses a non-reentrant model
 10775 ;;
 10776                           
 10777                           
 10778                           ;psect for function _getDimmer_LoadOK
 10779  1BD7                     _getDimmer_LoadOK:	
 10780                           
 10781                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10782                           
 10783                           ;incstack = 0
 10784                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10785  1BD7  3000               	movlw	0
 10786  1BD8  0022               	movlb	2	; select bank2
 10787  1BD9  18BE               	btfsc	_Dimmer^(0+256),1
 10788  1BDA  3001               	movlw	1
 10789  1BDB  0020               	movlb	0	; select bank0
 10790  1BDC  00A0               	movwf	getDimmer_LoadOK@status
 10791                           
 10792                           ;Dimmer_B1.c: 601: return status;
 10793  1BDD  0820               	movf	getDimmer_LoadOK@status,w
 10794  1BDE  0008               	return
 10795  1BDF                     __end_of_getDimmer_LoadOK:	
 10796                           
 10797                           	psect	text56
 10798  1D0C                     __ptext56:	
 10799 ;; *************** function _getMain_Lights_Count *****************
 10800 ;; Defined at:
 10801 ;;		line 412 in file "../src/Main_B1.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;  status1         1    3[BANK0 ] unsigned char 
 10806 ;;  status3         1    2[BANK0 ] unsigned char 
 10807 ;;  status2         1    1[BANK0 ] unsigned char 
 10808 ;;  count           1    0[BANK0 ] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      unsigned char 
 10811 ;; Registers used:
 10812 ;;		wreg, status,2, status,0
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;Total ram usage:        4 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    5
 10825 ;; This function calls:
 10826 ;;		Nothing
 10827 ;; This function is called by:
 10828 ;;		_Load_Main
 10829 ;; This function uses a non-reentrant model
 10830 ;;
 10831                           
 10832                           
 10833                           ;psect for function _getMain_Lights_Count
 10834  1D0C                     _getMain_Lights_Count:	
 10835                           
 10836                           ;Main_B1.c: 413: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10837                           
 10838                           ;incstack = 0
 10839                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10840  1D0C  0020               	movlb	0	; select bank0
 10841  1D0D  01A3               	clrf	getMain_Lights_Count@status1
 10842  1D0E  01A1               	clrf	getMain_Lights_Count@status2
 10843  1D0F  01A2               	clrf	getMain_Lights_Count@status3
 10844  1D10  01A0               	clrf	getMain_Lights_Count@count
 10845                           
 10846                           ;Main_B1.c: 417: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10847  1D11  3000               	movlw	0
 10848  1D12  0023               	movlb	3	; select bank3
 10849  1D13  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10850  1D14  3001               	movlw	1
 10851  1D15  0020               	movlb	0	; select bank0
 10852  1D16  00A3               	movwf	getMain_Lights_Count@status1
 10853                           
 10854                           ;Main_B1.c: 438: return count = (status1 + status2 + status3);
 10855  1D17  0823               	movf	getMain_Lights_Count@status1,w
 10856  1D18  0721               	addwf	getMain_Lights_Count@status2,w
 10857  1D19  0722               	addwf	getMain_Lights_Count@status3,w
 10858  1D1A  00A0               	movwf	getMain_Lights_Count@count
 10859  1D1B  0008               	return
 10860  1D1C                     __end_of_getMain_Lights_Count:	
 10861                           
 10862                           	psect	text57
 10863  1066                     __ptext57:	
 10864 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10865 ;; Defined at:
 10866 ;;		line 490 in file "../src/Dimmer_B1.c"
 10867 ;; Parameters:    Size  Location     Type
 10868 ;;		None
 10869 ;; Auto vars:     Size  Location     Type
 10870 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10871 ;; Return value:  Size  Location     Type
 10872 ;;                  1    wreg      unsigned char 
 10873 ;; Registers used:
 10874 ;;		wreg, status,2
 10875 ;; Tracked objects:
 10876 ;;		On entry : 0/0
 10877 ;;		On exit  : 0/0
 10878 ;;		Unchanged: 0/0
 10879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;Total ram usage:        1 bytes
 10885 ;; Hardware stack levels used:    1
 10886 ;; Hardware stack levels required when called:    5
 10887 ;; This function calls:
 10888 ;;		Nothing
 10889 ;; This function is called by:
 10890 ;;		_setDimmerLights_SwOn
 10891 ;;		_setDimmerLights_AdjControl
 10892 ;;		_Load_Main
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           
 10897                           ;psect for function _getAll_DimmerLights_AdjGO
 10898  1066                     _getAll_DimmerLights_AdjGO:	
 10899                           
 10900                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10901                           
 10902                           ;incstack = 0
 10903                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10904  1066  0020               	movlb	0	; select bank0
 10905  1067  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10906                           
 10907                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1;
 10908  1068  3000               	movlw	0
 10909  1069  0023               	movlb	3	; select bank3
 10910  106A  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10911  106B  3001               	movlw	1
 10912  106C  0020               	movlb	0	; select bank0
 10913  106D  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10914                           
 10915                           ;Dimmer_B1.c: 501: return adjgo;
 10916  106E  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10917  106F  0008               	return
 10918  1070                     __end_of_getAll_DimmerLights_AdjGO:	
 10919                           
 10920                           	psect	text58
 10921  130A                     __ptext58:	
 10922 ;; *************** function ___lwdiv *****************
 10923 ;; Defined at:
 10924 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  divisor         2    0[BANK0 ] unsigned int 
 10927 ;;  dividend        2    2[BANK0 ] unsigned int 
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;  quotient        2    5[BANK0 ] unsigned int 
 10930 ;;  counter         1    7[BANK0 ] unsigned char 
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  2    0[BANK0 ] unsigned int 
 10933 ;; Registers used:
 10934 ;;		wreg, status,2, status,0
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10940 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;Total ram usage:        8 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:    5
 10947 ;; This function calls:
 10948 ;;		Nothing
 10949 ;; This function is called by:
 10950 ;;		_Load_Main
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function ___lwdiv
 10956  130A                     ___lwdiv:	
 10957                           
 10958                           ;incstack = 0
 10959                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10960  130A  0020               	movlb	0	; select bank0
 10961  130B  01A5               	clrf	___lwdiv@quotient
 10962  130C  01A6               	clrf	___lwdiv@quotient+1
 10963  130D  0821               	movf	___lwdiv@divisor+1,w
 10964  130E  0420               	iorwf	___lwdiv@divisor,w
 10965  130F  1903               	skipnz
 10966  1310  2B3A               	goto	l7429
 10967  1311  01A7               	clrf	___lwdiv@counter
 10968  1312  0AA7               	incf	___lwdiv@counter,f
 10969  1313                     l7417:	
 10970  1313  1BA1               	btfsc	___lwdiv@divisor+1,7
 10971  1314  2B1F               	goto	l7419
 10972  1315  3001               	movlw	1
 10973  1316                     u7175:	
 10974  1316  35A0               	lslf	___lwdiv@divisor,f
 10975  1317  0DA1               	rlf	___lwdiv@divisor+1,f
 10976  1318  0B89               	decfsz	9,f
 10977  1319  2B16               	goto	u7175
 10978  131A  3001               	movlw	1
 10979  131B  00A4               	movwf	??___lwdiv
 10980  131C  0824               	movf	??___lwdiv,w
 10981  131D  07A7               	addwf	___lwdiv@counter,f
 10982  131E  2B13               	goto	l7417
 10983  131F                     l7419:	
 10984  131F  3001               	movlw	1
 10985  1320                     u7195:	
 10986  1320  35A5               	lslf	___lwdiv@quotient,f
 10987  1321  0DA6               	rlf	___lwdiv@quotient+1,f
 10988  1322  0B89               	decfsz	9,f
 10989  1323  2B20               	goto	u7195
 10990  1324  0821               	movf	___lwdiv@divisor+1,w
 10991  1325  0223               	subwf	___lwdiv@dividend+1,w
 10992  1326  1D03               	skipz
 10993  1327  2B2A               	goto	u7205
 10994  1328  0820               	movf	___lwdiv@divisor,w
 10995  1329  0222               	subwf	___lwdiv@dividend,w
 10996  132A                     u7205:	
 10997  132A  1C03               	skipc
 10998  132B  2B31               	goto	l7425
 10999  132C  0820               	movf	___lwdiv@divisor,w
 11000  132D  02A2               	subwf	___lwdiv@dividend,f
 11001  132E  0821               	movf	___lwdiv@divisor+1,w
 11002  132F  3BA3               	subwfb	___lwdiv@dividend+1,f
 11003  1330  1425               	bsf	___lwdiv@quotient,0
 11004  1331                     l7425:	
 11005  1331  3001               	movlw	1
 11006  1332                     u7215:	
 11007  1332  36A1               	lsrf	___lwdiv@divisor+1,f
 11008  1333  0CA0               	rrf	___lwdiv@divisor,f
 11009  1334  0B89               	decfsz	9,f
 11010  1335  2B32               	goto	u7215
 11011  1336  3001               	movlw	1
 11012  1337  02A7               	subwf	___lwdiv@counter,f
 11013  1338  1D03               	btfss	3,2
 11014  1339  2B1F               	goto	l7419
 11015  133A                     l7429:	
 11016  133A  0826               	movf	___lwdiv@quotient+1,w
 11017  133B  01A1               	clrf	?___lwdiv+1
 11018  133C  07A1               	addwf	?___lwdiv+1,f
 11019  133D  0825               	movf	___lwdiv@quotient,w
 11020  133E  01A0               	clrf	?___lwdiv
 11021  133F  07A0               	addwf	?___lwdiv,f
 11022  1340  0008               	return
 11023  1341                     __end_of___lwdiv:	
 11024                           
 11025                           	psect	text59
 11026  1BB1                     __ptext59:	
 11027 ;; *************** function _Load_Initialization *****************
 11028 ;; Defined at:
 11029 ;;		line 9 in file "../src/OverLoad_B1.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;		None
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;		None
 11034 ;; Return value:  Size  Location     Type
 11035 ;;		None               void
 11036 ;; Registers used:
 11037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;Total ram usage:        0 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    6
 11050 ;; This function calls:
 11051 ;;		_setLoad_AH_AL_Restore
 11052 ;; This function is called by:
 11053 ;;		_main
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function _Load_Initialization
 11059  1BB1                     _Load_Initialization:	
 11060                           
 11061                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11062                           
 11063                           ;incstack = 0
 11064                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11065  1BB1  0022               	movlb	2	; select bank2
 11066  1BB2  17C1               	bsf	_Load^(0+256),7
 11067                           
 11068                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11069  1BB3  319E  267B         	fcall	_setLoad_AH_AL_Restore
 11070  1BB5  0008               	return
 11071  1BB6                     __end_of_Load_Initialization:	
 11072                           
 11073                           	psect	text60
 11074  1E7B                     __ptext60:	
 11075 ;; *************** function _setLoad_AH_AL_Restore *****************
 11076 ;; Defined at:
 11077 ;;		line 239 in file "../src/OverLoad_B1.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;		None
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;  i               1    1[BANK0 ] unsigned char 
 11082 ;; Return value:  Size  Location     Type
 11083 ;;		None               void
 11084 ;; Registers used:
 11085 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11086 ;; Tracked objects:
 11087 ;;		On entry : 0/0
 11088 ;;		On exit  : 0/0
 11089 ;;		Unchanged: 0/0
 11090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;Total ram usage:        2 bytes
 11096 ;; Hardware stack levels used:    1
 11097 ;; Hardware stack levels required when called:    5
 11098 ;; This function calls:
 11099 ;;		Nothing
 11100 ;; This function is called by:
 11101 ;;		_Load_Initialization
 11102 ;;		_Load_Main
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           
 11107                           ;psect for function _setLoad_AH_AL_Restore
 11108  1E7B                     _setLoad_AH_AL_Restore:	
 11109                           
 11110                           ;OverLoad_B1.c: 240: char i;
 11111                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11112                           
 11113                           ;incstack = 0
 11114                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11115  1E7B  0020               	movlb	0	; select bank0
 11116  1E7C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11117  1E7D                     L7:	
 11118  1E7D  3005               	movlw	5
 11119  1E7E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11120  1E7F  1803               	btfsc	3,0
 11121  1E80  0008               	return
 11122                           
 11123                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11124  1E81  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11125  1E82  3E4C               	addlw	(_Load+11)& (0+255)
 11126  1E83  0086               	movwf	6
 11127  1E84  3001               	movlw	1	; select bank2/3
 11128  1E85  0087               	movwf	7
 11129  1E86  3000               	movlw	0
 11130  1E87  3FC0               	movwi [0]fsr1
 11131  1E88  3FC1               	movwi [1]fsr1
 11132                           
 11133                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11134  1E89  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11135  1E8A  3E56               	addlw	(_Load+21)& (0+255)
 11136  1E8B  0086               	movwf	6
 11137  1E8C  3001               	movlw	1	; select bank2/3
 11138  1E8D  0087               	movwf	7
 11139  1E8E  30FF               	movlw	255
 11140  1E8F  3FC0               	movwi [0]fsr1
 11141  1E90  30FF               	movlw	255
 11142  1E91  3FC1               	movwi [1]fsr1
 11143  1E92  3001               	movlw	1
 11144  1E93  00A0               	movwf	??_setLoad_AH_AL_Restore
 11145  1E94  0820               	movf	??_setLoad_AH_AL_Restore,w
 11146  1E95  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11147  1E96  2E7D               	goto	L7
 11148  1E97                     __end_of_setLoad_AH_AL_Restore:	
 11149                           
 11150                           	psect	text61
 11151  1BA4                     __ptext61:	
 11152 ;; *************** function _LED_Main *****************
 11153 ;; Defined at:
 11154 ;;		line 47 in file "../src/LED_B1.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;		None
 11157 ;; Auto vars:     Size  Location     Type
 11158 ;;		None
 11159 ;; Return value:  Size  Location     Type
 11160 ;;		None               void
 11161 ;; Registers used:
 11162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 0/0
 11165 ;;		On exit  : 0/0
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;Total ram usage:        0 bytes
 11173 ;; Hardware stack levels used:    1
 11174 ;; Hardware stack levels required when called:    7
 11175 ;; This function calls:
 11176 ;;		_setLED_Main
 11177 ;; This function is called by:
 11178 ;;		_main
 11179 ;; This function uses a non-reentrant model
 11180 ;;
 11181                           
 11182                           
 11183                           ;psect for function _LED_Main
 11184  1BA4                     _LED_Main:	
 11185                           
 11186                           ;LED_B1.c: 62: setLED_Main(99);
 11187                           
 11188                           ;incstack = 0
 11189                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11190  1BA4  3063               	movlw	99
 11191  1BA5  3192  2200         	fcall	_setLED_Main
 11192  1BA7  0008               	return
 11193  1BA8                     __end_of_LED_Main:	
 11194                           
 11195                           	psect	text62
 11196  1200                     __ptext62:	
 11197 ;; *************** function _setLED_Main *****************
 11198 ;; Defined at:
 11199 ;;		line 221 in file "../src/LED_B1.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;  led             1    wreg     unsigned char 
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;  led             1    4[BANK0 ] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;		None               void
 11206 ;; Registers used:
 11207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;Total ram usage:        3 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    6
 11220 ;; This function calls:
 11221 ;;		_LedPointSelect
 11222 ;; This function is called by:
 11223 ;;		_LED_Main
 11224 ;; This function uses a non-reentrant model
 11225 ;;
 11226                           
 11227                           
 11228                           ;psect for function _setLED_Main
 11229  1200                     _setLED_Main:	
 11230                           
 11231                           ;incstack = 0
 11232                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11233                           ;setLED_Main@led stored from wreg
 11234  1200  0020               	movlb	0	; select bank0
 11235  1201  00A4               	movwf	setLED_Main@led
 11236                           
 11237                           ;LED_B1.c: 222: LedPointSelect(led);
 11238  1202  0824               	movf	setLED_Main@led,w
 11239  1203  319C  2425  3192   	fcall	_LedPointSelect
 11240                           
 11241                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11242  1206  087A               	movf	_LED,w
 11243  1207  0086               	movwf	6
 11244  1208  3001               	movlw	1	; select bank2/3
 11245  1209  0087               	movwf	7
 11246  120A  1C81               	btfss	1,1
 11247  120B  0008               	return
 11248                           
 11249                           ;LED_B1.c: 224: LED->Time++;
 11250  120C  0A7A               	incf	_LED,w
 11251  120D  0086               	movwf	6
 11252  120E  3001               	movlw	1	; select bank2/3
 11253  120F  0087               	movwf	7
 11254  1210  3001               	movlw	1
 11255  1211  0781               	addwf	1,f
 11256  1212  3141               	addfsr 1,1
 11257  1213  1803               	skipnc
 11258  1214  0A81               	incf	1,f
 11259                           
 11260                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11261  1215  0A7A               	incf	_LED,w
 11262  1216  0086               	movwf	6
 11263  1217  3001               	movlw	1	; select bank2/3
 11264  1218  0087               	movwf	7
 11265  1219  3F40               	moviw [0]fsr1
 11266  121A  0020               	movlb	0	; select bank0
 11267  121B  00A2               	movwf	??_setLED_Main
 11268  121C  3F41               	moviw [1]fsr1
 11269  121D  00A3               	movwf	??_setLED_Main+1
 11270  121E  3000               	movlw	0
 11271  121F  0223               	subwf	??_setLED_Main+1,w
 11272  1220  3032               	movlw	50
 11273  1221  1903               	skipnz
 11274  1222  0222               	subwf	??_setLED_Main,w
 11275  1223  1C03               	skipc
 11276  1224  0008               	return
 11277                           
 11278                           ;LED_B1.c: 226: LED->Time = 0;
 11279  1225  0A7A               	incf	_LED,w
 11280  1226  0086               	movwf	6
 11281  1227  3001               	movlw	1	; select bank2/3
 11282  1228  0087               	movwf	7
 11283  1229  3000               	movlw	0
 11284  122A  3FC0               	movwi [0]fsr1
 11285  122B  3FC1               	movwi [1]fsr1
 11286                           
 11287                           ;LED_B1.c: 243: if (led == 99) {
 11288  122C  0824               	movf	setLED_Main@led,w
 11289  122D  3A63               	xorlw	99
 11290  122E  1D03               	skipz
 11291  122F  0008               	return
 11292                           
 11293                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11294  1230  3020               	movlw	32
 11295  1231  068D               	xorwf	13,f
 11296  1232  0008               	return
 11297  1233                     __end_of_setLED_Main:	
 11298                           
 11299                           	psect	text63
 11300  1BA0                     __ptext63:	
 11301 ;; *************** function _LED_Initialization *****************
 11302 ;; Defined at:
 11303 ;;		line 31 in file "../src/LED_B1.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;		None
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;		None
 11308 ;; Return value:  Size  Location     Type
 11309 ;;		None               void
 11310 ;; Registers used:
 11311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;Total ram usage:        0 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    8
 11324 ;; This function calls:
 11325 ;;		_setLED_Initialization
 11326 ;; This function is called by:
 11327 ;;		_main
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           
 11332                           ;psect for function _LED_Initialization
 11333  1BA0                     _LED_Initialization:	
 11334                           
 11335                           ;LED_B1.c: 42: setLED_Initialization(99);
 11336                           
 11337                           ;incstack = 0
 11338                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11339  1BA0  3063               	movlw	99
 11340  1BA1  319D  252C         	fcall	_setLED_Initialization
 11341  1BA3  0008               	return
 11342  1BA4                     __end_of_LED_Initialization:	
 11343                           
 11344                           	psect	text64
 11345  1D2C                     __ptext64:	
 11346 ;; *************** function _setLED_Initialization *****************
 11347 ;; Defined at:
 11348 ;;		line 69 in file "../src/LED_B1.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;  led             1    wreg     unsigned char 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  led             1    4[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;		None               void
 11355 ;; Registers used:
 11356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;Total ram usage:        1 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    7
 11369 ;; This function calls:
 11370 ;;		_LedPointSelect
 11371 ;;		_setLED
 11372 ;; This function is called by:
 11373 ;;		_LED_Initialization
 11374 ;; This function uses a non-reentrant model
 11375 ;;
 11376                           
 11377                           
 11378                           ;psect for function _setLED_Initialization
 11379  1D2C                     _setLED_Initialization:	
 11380                           
 11381                           ;incstack = 0
 11382                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11383                           ;setLED_Initialization@led stored from wreg
 11384  1D2C  0020               	movlb	0	; select bank0
 11385  1D2D  00A4               	movwf	setLED_Initialization@led
 11386                           
 11387                           ;LED_B1.c: 70: LedPointSelect(led);
 11388  1D2E  0824               	movf	setLED_Initialization@led,w
 11389  1D2F  319C  2425  319D   	fcall	_LedPointSelect
 11390                           
 11391                           ;LED_B1.c: 71: LED->Enable = 1;
 11392  1D32  087A               	movf	_LED,w
 11393  1D33  0086               	movwf	6
 11394  1D34  3001               	movlw	1	; select bank2/3
 11395  1D35  0087               	movwf	7
 11396  1D36  1401               	bsf	1,0
 11397                           
 11398                           ;LED_B1.c: 72: setLED(led, 0);
 11399  1D37  0020               	movlb	0	; select bank0
 11400  1D38  01A2               	clrf	setLED@command
 11401  1D39  0824               	movf	setLED_Initialization@led,w
 11402  1D3A  3192  2268         	fcall	_setLED
 11403  1D3C  0008               	return
 11404  1D3D                     __end_of_setLED_Initialization:	
 11405                           
 11406                           	psect	text65
 11407  129E                     __ptext65:	
 11408 ;; *************** function _Flash_Memory_Main *****************
 11409 ;; Defined at:
 11410 ;;		line 924 in file "../src/MCU_B1.c"
 11411 ;; Parameters:    Size  Location     Type
 11412 ;;		None
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;		None
 11415 ;; Return value:  Size  Location     Type
 11416 ;;		None               void
 11417 ;; Registers used:
 11418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11419 ;; Tracked objects:
 11420 ;;		On entry : 0/0
 11421 ;;		On exit  : 0/0
 11422 ;;		Unchanged: 0/0
 11423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;Total ram usage:        1 bytes
 11429 ;; Hardware stack levels used:    1
 11430 ;; Hardware stack levels required when called:    8
 11431 ;; This function calls:
 11432 ;;		_Flash_Memory_Modify
 11433 ;;		_getMain_LightsStatus
 11434 ;; This function is called by:
 11435 ;;		_main
 11436 ;; This function uses a non-reentrant model
 11437 ;;
 11438                           
 11439                           
 11440                           ;psect for function _Flash_Memory_Main
 11441  129E                     _Flash_Memory_Main:	
 11442                           
 11443                           ;MCU_B1.c: 925: if (Memory.Modify == 1) {
 11444                           
 11445                           ;incstack = 0
 11446                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11447  129E  0023               	movlb	3	; select bank3
 11448  129F  1C44               	btfss	(_Memory^(0+384)+36),0
 11449  12A0  0008               	return
 11450                           
 11451                           ;MCU_B1.c: 926: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11452  12A1  3191  2111  3192   	fcall	_getMain_LightsStatus
 11453  12A4  3A00               	xorlw	0
 11454  12A5  3000               	movlw	0
 11455  12A6  1903               	skipnz
 11456  12A7  3001               	movlw	1
 11457  12A8  0020               	movlb	0	; select bank0
 11458  12A9  00A9               	movwf	??_Flash_Memory_Main
 11459  12AA  0DA9               	rlf	??_Flash_Memory_Main,f
 11460  12AB  0023               	movlb	3	; select bank3
 11461  12AC  0844               	movf	(_Memory^(0+384)+36),w
 11462  12AD  0020               	movlb	0	; select bank0
 11463  12AE  0629               	xorwf	??_Flash_Memory_Main,w
 11464  12AF  39FD               	andlw	-3
 11465  12B0  0629               	xorwf	??_Flash_Memory_Main,w
 11466  12B1  0023               	movlb	3	; select bank3
 11467  12B2  00C4               	movwf	(_Memory^(0+384)+36)
 11468                           
 11469                           ;MCU_B1.c: 927: if (Memory.GO == 1) {
 11470  12B3  1CC4               	btfss	(_Memory^(0+384)+36),1
 11471  12B4  2ACE               	goto	l1183
 11472                           
 11473                           ;MCU_B1.c: 928: Memory.Runtime = 1;
 11474  12B5  15C4               	bsf	(_Memory^(0+384)+36),3
 11475                           
 11476                           ;MCU_B1.c: 929: Memory.Time++;
 11477  12B6  3001               	movlw	1
 11478  12B7  07C2               	addwf	(_Memory^(0+384)+34),f
 11479  12B8  3000               	movlw	0
 11480  12B9  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11481                           
 11482                           ;MCU_B1.c: 930: if (Memory.Time == 25) {
 11483  12BA  3022               	movlw	34
 11484  12BB  3EA0               	addlw	_Memory& (0+255)
 11485  12BC  0086               	movwf	6
 11486  12BD  3001               	movlw	1	; select bank3/4
 11487  12BE  0087               	movwf	7
 11488  12BF  3F40               	moviw [0]fsr1
 11489  12C0  3A19               	xorlw	25
 11490  12C1  1D03               	skipz
 11491  12C2  2AC5               	goto	u7475
 11492  12C3  3F41               	moviw [1]fsr1
 11493  12C4  3A00               	xorlw	0
 11494  12C5                     u7475:	
 11495  12C5  1D03               	skipz
 11496  12C6  0008               	return
 11497                           
 11498                           ;MCU_B1.c: 931: Memory.Time = 0;
 11499  12C7  01C2               	clrf	(_Memory^(0+384)+34)
 11500  12C8  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11501                           
 11502                           ;MCU_B1.c: 932: Memory.Modify = 0;
 11503  12C9  1044               	bcf	(_Memory^(0+384)+36),0
 11504                           
 11505                           ;MCU_B1.c: 933: Memory.GO = 0;
 11506  12CA  10C4               	bcf	(_Memory^(0+384)+36),1
 11507                           
 11508                           ;MCU_B1.c: 934: Flash_Memory_Modify();
 11509  12CB  3195  2544         	fcall	_Flash_Memory_Modify
 11510                           
 11511                           ;MCU_B1.c: 935: }
 11512                           ;MCU_B1.c: 936: } else {
 11513  12CD  0008               	return
 11514  12CE                     l1183:	
 11515                           
 11516                           ;MCU_B1.c: 937: if (Memory.Runtime == 1) {
 11517  12CE  1DC4               	btfss	(_Memory^(0+384)+36),3
 11518  12CF  0008               	return
 11519                           
 11520                           ;MCU_B1.c: 938: Memory.Runtime = 0;
 11521  12D0  11C4               	bcf	(_Memory^(0+384)+36),3
 11522                           
 11523                           ;MCU_B1.c: 939: Memory.Time = 0;
 11524  12D1  01C2               	clrf	(_Memory^(0+384)+34)
 11525  12D2  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11526  12D3  0008               	return
 11527  12D4                     __end_of_Flash_Memory_Main:	
 11528                           
 11529                           	psect	text66
 11530  1544                     __ptext66:	
 11531 ;; *************** function _Flash_Memory_Modify *****************
 11532 ;; Defined at:
 11533 ;;		line 997 in file "../src/MCU_B1.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;		None
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;  i               1    5[BANK0 ] unsigned char 
 11538 ;; Return value:  Size  Location     Type
 11539 ;;		None               void
 11540 ;; Registers used:
 11541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11542 ;; Tracked objects:
 11543 ;;		On entry : 0/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;Total ram usage:        2 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    7
 11554 ;; This function calls:
 11555 ;;		_Flash_Memory_Erasing
 11556 ;;		_Flash_Memory_Read
 11557 ;;		_Flash_Memory_Write
 11558 ;;		_setMemory_Data
 11559 ;; This function is called by:
 11560 ;;		_Flash_Memory_Main
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           
 11565                           ;psect for function _Flash_Memory_Modify
 11566  1544                     _Flash_Memory_Modify:	
 11567                           
 11568                           ;MCU_B1.c: 998: char i = 0;
 11569                           
 11570                           ;incstack = 0
 11571                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11572  1544  0020               	movlb	0	; select bank0
 11573  1545  01A5               	clrf	Flash_Memory_Modify@i
 11574                           
 11575                           ;MCU_B1.c: 999: for (i = 0; i < 32; i++) {
 11576  1546  01A5               	clrf	Flash_Memory_Modify@i
 11577  1547  3020               	movlw	32
 11578  1548  0225               	subwf	Flash_Memory_Modify@i,w
 11579  1549  1803               	btfsc	3,0
 11580  154A  2D60               	goto	l7055
 11581  154B                     l7049:	
 11582                           
 11583                           ;MCU_B1.c: 1000: Memory.Data[i] = Flash_Memory_Read(i);
 11584  154B  0825               	movf	Flash_Memory_Modify@i,w
 11585  154C  3187  27E5  3195   	fcall	_Flash_Memory_Read
 11586  154F  0020               	movlb	0	; select bank0
 11587  1550  00A4               	movwf	??_Flash_Memory_Modify
 11588  1551  0825               	movf	Flash_Memory_Modify@i,w
 11589  1552  3EA0               	addlw	_Memory& (0+255)
 11590  1553  0086               	movwf	6
 11591  1554  3001               	movlw	1	; select bank3/4
 11592  1555  0087               	movwf	7
 11593  1556  0824               	movf	??_Flash_Memory_Modify,w
 11594  1557  0081               	movwf	1
 11595  1558  3001               	movlw	1
 11596  1559  00A4               	movwf	??_Flash_Memory_Modify
 11597  155A  0824               	movf	??_Flash_Memory_Modify,w
 11598  155B  07A5               	addwf	Flash_Memory_Modify@i,f
 11599  155C  3020               	movlw	32
 11600  155D  0225               	subwf	Flash_Memory_Modify@i,w
 11601  155E  1C03               	skipc
 11602  155F  2D4B               	goto	l7049
 11603  1560                     l7055:	
 11604                           
 11605                           ;MCU_B1.c: 1001: }
 11606                           ;MCU_B1.c: 1002: setMemory_Data(0, product->Data[12]);
 11607  1560  086E               	movf	_product,w
 11608  1561  0086               	movwf	6
 11609  1562  3002               	movlw	2	; select bank4/5
 11610  1563  0087               	movwf	7
 11611  1564  3002               	movlw	2	; select bank4/5
 11612  1565  3F4C               	moviw [12]fsr1
 11613  1566  00A0               	movwf	setMemory_Data@data
 11614  1567  3000               	movlw	0
 11615  1568  319C  2474  3195   	fcall	_setMemory_Data
 11616                           
 11617                           ;MCU_B1.c: 1003: setMemory_Data(1, product->Data[13]);
 11618  156B  0020               	movlb	0	; select bank0
 11619  156C  086E               	movf	_product,w
 11620  156D  0086               	movwf	6
 11621  156E  3002               	movlw	2	; select bank4/5
 11622  156F  0087               	movwf	7
 11623  1570  3002               	movlw	2	; select bank4/5
 11624  1571  3F4D               	moviw [13]fsr1
 11625  1572  00A0               	movwf	setMemory_Data@data
 11626  1573  3001               	movlw	1
 11627  1574  319C  2474  3195   	fcall	_setMemory_Data
 11628                           
 11629                           ;MCU_B1.c: 1004: setMemory_Data(2, product->Data[14]);
 11630  1577  0020               	movlb	0	; select bank0
 11631  1578  086E               	movf	_product,w
 11632  1579  0086               	movwf	6
 11633  157A  3002               	movlw	2	; select bank4/5
 11634  157B  0087               	movwf	7
 11635  157C  3002               	movlw	2	; select bank4/5
 11636  157D  3F4E               	moviw [14]fsr1
 11637  157E  00A0               	movwf	setMemory_Data@data
 11638  157F  3002               	movlw	2
 11639  1580  319C  2474  3195   	fcall	_setMemory_Data
 11640                           
 11641                           ;MCU_B1.c: 1010: if (Memory.LoopSave == 1) {
 11642  1583  0023               	movlb	3	; select bank3
 11643  1584  1D44               	btfss	(_Memory^(0+384)+36),2
 11644  1585  2D8A               	goto	l1206
 11645                           
 11646                           ;MCU_B1.c: 1011: Memory.LoopSave = 0;
 11647  1586  1144               	bcf	(_Memory^(0+384)+36),2
 11648                           
 11649                           ;MCU_B1.c: 1012: myMain.FirstOpen = 0;
 11650  1587  0021               	movlb	1	; select bank1
 11651  1588  11A0               	bcf	_myMain^(0+128),3
 11652                           
 11653                           ;MCU_B1.c: 1013: myMain.First = 0;
 11654  1589  12A0               	bcf	_myMain^(0+128),5
 11655  158A                     l1206:	
 11656                           
 11657                           ;MCU_B1.c: 1015: }
 11658                           ;MCU_B1.c: 1016: GIE = 0;
 11659  158A  138B               	bcf	11,7	;volatile
 11660                           
 11661                           ;MCU_B1.c: 1017: Flash_Memory_Erasing();
 11662  158B  319C  2480  3195   	fcall	_Flash_Memory_Erasing
 11663                           
 11664                           ;MCU_B1.c: 1018: Flash_Memory_Write();
 11665  158E  3191  213C         	fcall	_Flash_Memory_Write
 11666                           
 11667                           ;MCU_B1.c: 1019: GIE = 1;
 11668  1590  178B               	bsf	11,7	;volatile
 11669  1591  0008               	return
 11670  1592                     __end_of_Flash_Memory_Modify:	
 11671                           
 11672                           	psect	text67
 11673  1C80                     __ptext67:	
 11674 ;; *************** function _Flash_Memory_Erasing *****************
 11675 ;; Defined at:
 11676 ;;		line 986 in file "../src/MCU_B1.c"
 11677 ;; Parameters:    Size  Location     Type
 11678 ;;		None
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;		None
 11681 ;; Return value:  Size  Location     Type
 11682 ;;		None               void
 11683 ;; Registers used:
 11684 ;;		wreg, status,2, status,0, pclath, cstack
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;Total ram usage:        0 bytes
 11695 ;; Hardware stack levels used:    1
 11696 ;; Hardware stack levels required when called:    6
 11697 ;; This function calls:
 11698 ;;		_Flash_Memory_Unlock
 11699 ;; This function is called by:
 11700 ;;		_Flash_Memory_Modify
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           
 11705                           ;psect for function _Flash_Memory_Erasing
 11706  1C80                     _Flash_Memory_Erasing:	
 11707                           
 11708                           ;MCU_B1.c: 987: CFGS = 0;
 11709                           
 11710                           ;incstack = 0
 11711                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11712  1C80  0023               	movlb	3	; select bank3
 11713  1C81  1315               	bcf	21,6	;volatile
 11714                           
 11715                           ;MCU_B1.c: 988: PMADRH = 0x30;
 11716  1C82  3030               	movlw	48
 11717  1C83  0092               	movwf	18	;volatile
 11718                           
 11719                           ;MCU_B1.c: 989: PMADRL = 0x00;
 11720  1C84  0191               	clrf	17	;volatile
 11721                           
 11722                           ;MCU_B1.c: 990: FREE = 1;
 11723  1C85  1615               	bsf	21,4	;volatile
 11724                           
 11725                           ;MCU_B1.c: 991: WREN = 1;
 11726  1C86  1515               	bsf	21,2	;volatile
 11727                           
 11728                           ;MCU_B1.c: 992: Flash_Memory_Unlock();
 11729  1C87  319B  23E8         	fcall	_Flash_Memory_Unlock
 11730                           
 11731                           ;MCU_B1.c: 993: WREN = 0;
 11732  1C89  0023               	movlb	3	; select bank3
 11733  1C8A  1115               	bcf	21,2	;volatile
 11734  1C8B  0008               	return
 11735  1C8C                     __end_of_Flash_Memory_Erasing:	
 11736                           
 11737                           	psect	text68
 11738  064A                     __ptext68:	
 11739 ;; *************** function _Flash_Memory_Initialization *****************
 11740 ;; Defined at:
 11741 ;;		line 883 in file "../src/MCU_B1.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;		None
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  i               1   67[BANK0 ] unsigned char 
 11746 ;; Return value:  Size  Location     Type
 11747 ;;		None               void
 11748 ;; Registers used:
 11749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;Total ram usage:        2 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; Hardware stack levels required when called:    8
 11762 ;; This function calls:
 11763 ;;		_Flash_Memory_Read
 11764 ;;		_Flash_Memory_Write
 11765 ;;		_setMemory_Data
 11766 ;;		_setPercentValue
 11767 ;; This function is called by:
 11768 ;;		_main
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           
 11773                           ;psect for function _Flash_Memory_Initialization
 11774  064A                     _Flash_Memory_Initialization:	
 11775                           
 11776                           ;MCU_B1.c: 884: char i = 0;
 11777                           
 11778                           ;incstack = 0
 11779                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11780  064A  0020               	movlb	0	; select bank0
 11781  064B  01E3               	clrf	Flash_Memory_Initialization@i
 11782                           
 11783                           ;MCU_B1.c: 885: if (Flash_Memory_Read(31) == 0xaa) {
 11784  064C  301F               	movlw	31
 11785  064D  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11786  0650  3AAA               	xorlw	170
 11787  0651  1D03               	skipz
 11788  0652  2EBC               	goto	l7551
 11789                           
 11790                           ;MCU_B1.c: 886: product->Data[12] = Flash_Memory_Read(0);
 11791  0653  3000               	movlw	0
 11792  0654  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11793  0657  0020               	movlb	0	; select bank0
 11794  0658  00E2               	movwf	??_Flash_Memory_Initialization
 11795  0659  086E               	movf	_product,w
 11796  065A  3E0C               	addlw	12
 11797  065B  0086               	movwf	6
 11798  065C  3002               	movlw	2	; select bank4/5
 11799  065D  0087               	movwf	7
 11800  065E  0862               	movf	??_Flash_Memory_Initialization,w
 11801  065F  0081               	movwf	1
 11802                           
 11803                           ;MCU_B1.c: 887: product->Data[13] = Flash_Memory_Read(1);
 11804  0660  3001               	movlw	1
 11805  0661  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11806  0664  0020               	movlb	0	; select bank0
 11807  0665  00E2               	movwf	??_Flash_Memory_Initialization
 11808  0666  086E               	movf	_product,w
 11809  0667  3E0D               	addlw	13
 11810  0668  0086               	movwf	6
 11811  0669  3002               	movlw	2	; select bank4/5
 11812  066A  0087               	movwf	7
 11813  066B  0862               	movf	??_Flash_Memory_Initialization,w
 11814  066C  0081               	movwf	1
 11815                           
 11816                           ;MCU_B1.c: 888: product->Data[14] = Flash_Memory_Read(2);
 11817  066D  3002               	movlw	2
 11818  066E  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11819  0671  0020               	movlb	0	; select bank0
 11820  0672  00E2               	movwf	??_Flash_Memory_Initialization
 11821  0673  086E               	movf	_product,w
 11822  0674  3E0E               	addlw	14
 11823  0675  0086               	movwf	6
 11824  0676  3002               	movlw	2	; select bank4/5
 11825  0677  0087               	movwf	7
 11826  0678  0862               	movf	??_Flash_Memory_Initialization,w
 11827  0679  0081               	movwf	1
 11828                           
 11829                           ;MCU_B1.c: 894: i = setPercentValue(((char)(85*0.8)));
 11830  067A  3044               	movlw	68
 11831  067B  318A  222D  3186   	fcall	_setPercentValue
 11832  067E  0020               	movlb	0	; select bank0
 11833  067F  00E2               	movwf	??_Flash_Memory_Initialization
 11834  0680  0862               	movf	??_Flash_Memory_Initialization,w
 11835  0681  00E3               	movwf	Flash_Memory_Initialization@i
 11836                           
 11837                           ;MCU_B1.c: 895: product->Data[21] = i;
 11838  0682  0863               	movf	Flash_Memory_Initialization@i,w
 11839  0683  00E2               	movwf	??_Flash_Memory_Initialization
 11840  0684  086E               	movf	_product,w
 11841  0685  3E15               	addlw	21
 11842  0686  0086               	movwf	6
 11843  0687  3002               	movlw	2	; select bank4/5
 11844  0688  0087               	movwf	7
 11845  0689  0862               	movf	??_Flash_Memory_Initialization,w
 11846  068A  0081               	movwf	1
 11847                           
 11848                           ;MCU_B1.c: 896: product->Data[22] = i;
 11849  068B  0863               	movf	Flash_Memory_Initialization@i,w
 11850  068C  00E2               	movwf	??_Flash_Memory_Initialization
 11851  068D  086E               	movf	_product,w
 11852  068E  3E16               	addlw	22
 11853  068F  0086               	movwf	6
 11854  0690  3002               	movlw	2	; select bank4/5
 11855  0691  0087               	movwf	7
 11856  0692  0862               	movf	??_Flash_Memory_Initialization,w
 11857  0693  0081               	movwf	1
 11858                           
 11859                           ;MCU_B1.c: 897: product->Data[23] = i;
 11860  0694  0863               	movf	Flash_Memory_Initialization@i,w
 11861  0695  00E2               	movwf	??_Flash_Memory_Initialization
 11862  0696  086E               	movf	_product,w
 11863  0697  3E17               	addlw	23
 11864  0698  0086               	movwf	6
 11865  0699  3002               	movlw	2	; select bank4/5
 11866  069A  0087               	movwf	7
 11867  069B  0862               	movf	??_Flash_Memory_Initialization,w
 11868  069C  0081               	movwf	1
 11869                           
 11870                           ;MCU_B1.c: 899: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11871  069D  086E               	movf	_product,w
 11872  069E  3E0C               	addlw	12
 11873  069F  0086               	movwf	6
 11874  06A0  3002               	movlw	2	; select bank4/5
 11875  06A1  0087               	movwf	7
 11876  06A2  0801               	movf	1,w
 11877  06A3  3AFF               	xorlw	255
 11878  06A4  1D03               	skipz
 11879  06A5  0008               	return
 11880  06A6  086E               	movf	_product,w
 11881  06A7  3E0D               	addlw	13
 11882  06A8  0086               	movwf	6
 11883  06A9  3002               	movlw	2	; select bank4/5
 11884  06AA  0087               	movwf	7
 11885  06AB  0801               	movf	1,w
 11886  06AC  3AFF               	xorlw	255
 11887  06AD  1D03               	skipz
 11888  06AE  0008               	return
 11889  06AF  086E               	movf	_product,w
 11890  06B0  3E0E               	addlw	14
 11891  06B1  0086               	movwf	6
 11892  06B2  3002               	movlw	2	; select bank4/5
 11893  06B3  0087               	movwf	7
 11894  06B4  0801               	movf	1,w
 11895  06B5  3AFF               	xorlw	255
 11896  06B6  1D03               	skipz
 11897  06B7  0008               	return
 11898                           
 11899                           ;MCU_B1.c: 900: myMain.FirstOpen = 1;
 11900  06B8  0021               	movlb	1	; select bank1
 11901  06B9  15A0               	bsf	_myMain^(0+128),3
 11902                           
 11903                           ;MCU_B1.c: 901: myMain.First = 1;
 11904  06BA  16A0               	bsf	_myMain^(0+128),5
 11905                           
 11906                           ;MCU_B1.c: 902: }
 11907                           ;MCU_B1.c: 903: } else {
 11908  06BB  0008               	return
 11909  06BC                     l7551:	
 11910                           
 11911                           ;MCU_B1.c: 904: i = setPercentValue(((char)(85*0.8)));
 11912  06BC  3044               	movlw	68
 11913  06BD  318A  222D  3186   	fcall	_setPercentValue
 11914  06C0  0020               	movlb	0	; select bank0
 11915  06C1  00E2               	movwf	??_Flash_Memory_Initialization
 11916  06C2  0862               	movf	??_Flash_Memory_Initialization,w
 11917  06C3  00E3               	movwf	Flash_Memory_Initialization@i
 11918                           
 11919                           ;MCU_B1.c: 905: setMemory_Data(0, 0xff);
 11920  06C4  30FF               	movlw	255
 11921  06C5  00E2               	movwf	??_Flash_Memory_Initialization
 11922  06C6  0862               	movf	??_Flash_Memory_Initialization,w
 11923  06C7  00A0               	movwf	setMemory_Data@data
 11924  06C8  3000               	movlw	0
 11925  06C9  319C  2474  3186   	fcall	_setMemory_Data
 11926                           
 11927                           ;MCU_B1.c: 906: setMemory_Data(1, 0xff);
 11928  06CC  30FF               	movlw	255
 11929  06CD  0020               	movlb	0	; select bank0
 11930  06CE  00E2               	movwf	??_Flash_Memory_Initialization
 11931  06CF  0862               	movf	??_Flash_Memory_Initialization,w
 11932  06D0  00A0               	movwf	setMemory_Data@data
 11933  06D1  3001               	movlw	1
 11934  06D2  319C  2474  3186   	fcall	_setMemory_Data
 11935                           
 11936                           ;MCU_B1.c: 907: setMemory_Data(2, 0xff);
 11937  06D5  30FF               	movlw	255
 11938  06D6  0020               	movlb	0	; select bank0
 11939  06D7  00E2               	movwf	??_Flash_Memory_Initialization
 11940  06D8  0862               	movf	??_Flash_Memory_Initialization,w
 11941  06D9  00A0               	movwf	setMemory_Data@data
 11942  06DA  3002               	movlw	2
 11943  06DB  319C  2474  3186   	fcall	_setMemory_Data
 11944                           
 11945                           ;MCU_B1.c: 908: setMemory_Data(3, 0xff);
 11946  06DE  30FF               	movlw	255
 11947  06DF  0020               	movlb	0	; select bank0
 11948  06E0  00E2               	movwf	??_Flash_Memory_Initialization
 11949  06E1  0862               	movf	??_Flash_Memory_Initialization,w
 11950  06E2  00A0               	movwf	setMemory_Data@data
 11951  06E3  3003               	movlw	3
 11952  06E4  319C  2474  3186   	fcall	_setMemory_Data
 11953                           
 11954                           ;MCU_B1.c: 909: setMemory_Data(4, 0xff);
 11955  06E7  30FF               	movlw	255
 11956  06E8  0020               	movlb	0	; select bank0
 11957  06E9  00E2               	movwf	??_Flash_Memory_Initialization
 11958  06EA  0862               	movf	??_Flash_Memory_Initialization,w
 11959  06EB  00A0               	movwf	setMemory_Data@data
 11960  06EC  3004               	movlw	4
 11961  06ED  319C  2474  3186   	fcall	_setMemory_Data
 11962                           
 11963                           ;MCU_B1.c: 910: setMemory_Data(5, 0xff);
 11964  06F0  30FF               	movlw	255
 11965  06F1  0020               	movlb	0	; select bank0
 11966  06F2  00E2               	movwf	??_Flash_Memory_Initialization
 11967  06F3  0862               	movf	??_Flash_Memory_Initialization,w
 11968  06F4  00A0               	movwf	setMemory_Data@data
 11969  06F5  3005               	movlw	5
 11970  06F6  319C  2474  3186   	fcall	_setMemory_Data
 11971                           
 11972                           ;MCU_B1.c: 911: setMemory_Data(31, 0xaa);
 11973  06F9  30AA               	movlw	170
 11974  06FA  0020               	movlb	0	; select bank0
 11975  06FB  00E2               	movwf	??_Flash_Memory_Initialization
 11976  06FC  0862               	movf	??_Flash_Memory_Initialization,w
 11977  06FD  00A0               	movwf	setMemory_Data@data
 11978  06FE  301F               	movlw	31
 11979  06FF  319C  2474  3186   	fcall	_setMemory_Data
 11980                           
 11981                           ;MCU_B1.c: 912: product->Data[21] = i;
 11982  0702  0020               	movlb	0	; select bank0
 11983  0703  0863               	movf	Flash_Memory_Initialization@i,w
 11984  0704  00E2               	movwf	??_Flash_Memory_Initialization
 11985  0705  086E               	movf	_product,w
 11986  0706  3E15               	addlw	21
 11987  0707  0086               	movwf	6
 11988  0708  3002               	movlw	2	; select bank4/5
 11989  0709  0087               	movwf	7
 11990  070A  0862               	movf	??_Flash_Memory_Initialization,w
 11991  070B  0081               	movwf	1
 11992                           
 11993                           ;MCU_B1.c: 913: product->Data[22] = i;
 11994  070C  0863               	movf	Flash_Memory_Initialization@i,w
 11995  070D  00E2               	movwf	??_Flash_Memory_Initialization
 11996  070E  086E               	movf	_product,w
 11997  070F  3E16               	addlw	22
 11998  0710  0086               	movwf	6
 11999  0711  3002               	movlw	2	; select bank4/5
 12000  0712  0087               	movwf	7
 12001  0713  0862               	movf	??_Flash_Memory_Initialization,w
 12002  0714  0081               	movwf	1
 12003                           
 12004                           ;MCU_B1.c: 914: product->Data[23] = i;
 12005  0715  0863               	movf	Flash_Memory_Initialization@i,w
 12006  0716  00E2               	movwf	??_Flash_Memory_Initialization
 12007  0717  086E               	movf	_product,w
 12008  0718  3E17               	addlw	23
 12009  0719  0086               	movwf	6
 12010  071A  3002               	movlw	2	; select bank4/5
 12011  071B  0087               	movwf	7
 12012  071C  0862               	movf	??_Flash_Memory_Initialization,w
 12013  071D  0081               	movwf	1
 12014                           
 12015                           ;MCU_B1.c: 915: GIE = 0;
 12016  071E  138B               	bcf	11,7	;volatile
 12017                           
 12018                           ;MCU_B1.c: 916: Flash_Memory_Write();
 12019  071F  3191  213C         	fcall	_Flash_Memory_Write
 12020                           
 12021                           ;MCU_B1.c: 917: GIE = 1;
 12022  0721  178B               	bsf	11,7	;volatile
 12023                           
 12024                           ;MCU_B1.c: 918: myMain.FirstOpen = 1;
 12025  0722  0021               	movlb	1	; select bank1
 12026  0723  15A0               	bsf	_myMain^(0+128),3
 12027                           
 12028                           ;MCU_B1.c: 919: myMain.First = 1;
 12029  0724  16A0               	bsf	_myMain^(0+128),5
 12030  0725  0008               	return
 12031  0726                     __end_of_Flash_Memory_Initialization:	
 12032                           
 12033                           	psect	text69
 12034  1C74                     __ptext69:	
 12035 ;; *************** function _setMemory_Data *****************
 12036 ;; Defined at:
 12037 ;;		line 1034 in file "../src/MCU_B1.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;  address         1    wreg     unsigned char 
 12040 ;;  data            1    0[BANK0 ] unsigned char 
 12041 ;; Auto vars:     Size  Location     Type
 12042 ;;  address         1    2[BANK0 ] unsigned char 
 12043 ;; Return value:  Size  Location     Type
 12044 ;;		None               void
 12045 ;; Registers used:
 12046 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12047 ;; Tracked objects:
 12048 ;;		On entry : 0/0
 12049 ;;		On exit  : 0/0
 12050 ;;		Unchanged: 0/0
 12051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12052 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;Total ram usage:        3 bytes
 12057 ;; Hardware stack levels used:    1
 12058 ;; Hardware stack levels required when called:    5
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		_Flash_Memory_Initialization
 12063 ;;		_Flash_Memory_Modify
 12064 ;; This function uses a non-reentrant model
 12065 ;;
 12066                           
 12067                           
 12068                           ;psect for function _setMemory_Data
 12069  1C74                     _setMemory_Data:	
 12070                           
 12071                           ;incstack = 0
 12072                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12073                           ;setMemory_Data@address stored from wreg
 12074  1C74  0020               	movlb	0	; select bank0
 12075  1C75  00A2               	movwf	setMemory_Data@address
 12076                           
 12077                           ;MCU_B1.c: 1035: Memory.Data[address] = data;
 12078  1C76  0820               	movf	setMemory_Data@data,w
 12079  1C77  00A1               	movwf	??_setMemory_Data
 12080  1C78  0822               	movf	setMemory_Data@address,w
 12081  1C79  3EA0               	addlw	_Memory& (0+255)
 12082  1C7A  0086               	movwf	6
 12083  1C7B  3001               	movlw	1	; select bank3/4
 12084  1C7C  0087               	movwf	7
 12085  1C7D  0821               	movf	??_setMemory_Data,w
 12086  1C7E  0081               	movwf	1
 12087  1C7F  0008               	return
 12088  1C80                     __end_of_setMemory_Data:	
 12089                           
 12090                           	psect	text70
 12091  113C                     __ptext70:	
 12092 ;; *************** function _Flash_Memory_Write *****************
 12093 ;; Defined at:
 12094 ;;		line 967 in file "../src/MCU_B1.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;		None
 12097 ;; Auto vars:     Size  Location     Type
 12098 ;;  i               1    1[BANK0 ] unsigned char 
 12099 ;; Return value:  Size  Location     Type
 12100 ;;		None               void
 12101 ;; Registers used:
 12102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12103 ;; Tracked objects:
 12104 ;;		On entry : 0/0
 12105 ;;		On exit  : 0/0
 12106 ;;		Unchanged: 0/0
 12107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;Total ram usage:        2 bytes
 12113 ;; Hardware stack levels used:    1
 12114 ;; Hardware stack levels required when called:    6
 12115 ;; This function calls:
 12116 ;;		_Flash_Memory_Unlock
 12117 ;; This function is called by:
 12118 ;;		_Flash_Memory_Initialization
 12119 ;;		_Flash_Memory_Modify
 12120 ;; This function uses a non-reentrant model
 12121 ;;
 12122                           
 12123                           
 12124                           ;psect for function _Flash_Memory_Write
 12125  113C                     _Flash_Memory_Write:	
 12126                           
 12127                           ;MCU_B1.c: 968: char i = 0;
 12128                           
 12129                           ;incstack = 0
 12130                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12131  113C  0020               	movlb	0	; select bank0
 12132  113D  01A1               	clrf	Flash_Memory_Write@i
 12133                           
 12134                           ;MCU_B1.c: 969: CFGS = 0;
 12135  113E  0023               	movlb	3	; select bank3
 12136  113F  1315               	bcf	21,6	;volatile
 12137                           
 12138                           ;MCU_B1.c: 970: PMADRH = 0x30;
 12139  1140  3030               	movlw	48
 12140  1141  0092               	movwf	18	;volatile
 12141                           
 12142                           ;MCU_B1.c: 971: PMDATH = 0;
 12143  1142  0194               	clrf	20	;volatile
 12144                           
 12145                           ;MCU_B1.c: 972: FREE = 0;
 12146  1143  1215               	bcf	21,4	;volatile
 12147                           
 12148                           ;MCU_B1.c: 973: LWLO = 1;
 12149  1144  1695               	bsf	21,5	;volatile
 12150                           
 12151                           ;MCU_B1.c: 974: WREN = 1;
 12152  1145  1515               	bsf	21,2	;volatile
 12153                           
 12154                           ;MCU_B1.c: 975: for (i = 0; i < 32; i++) {
 12155  1146  0020               	movlb	0	; select bank0
 12156  1147  01A1               	clrf	Flash_Memory_Write@i
 12157  1148  3020               	movlw	32
 12158  1149  0221               	subwf	Flash_Memory_Write@i,w
 12159  114A  1803               	btfsc	3,0
 12160  114B  2964               	goto	l1197
 12161  114C                     l6613:	
 12162                           
 12163                           ;MCU_B1.c: 976: PMADRL = i;
 12164  114C  0821               	movf	Flash_Memory_Write@i,w
 12165  114D  0023               	movlb	3	; select bank3
 12166  114E  0091               	movwf	17	;volatile
 12167                           
 12168                           ;MCU_B1.c: 977: PMDATL = Memory.Data[i];
 12169  114F  0020               	movlb	0	; select bank0
 12170  1150  0821               	movf	Flash_Memory_Write@i,w
 12171  1151  3EA0               	addlw	_Memory& (0+255)
 12172  1152  0086               	movwf	6
 12173  1153  3001               	movlw	1	; select bank3/4
 12174  1154  0087               	movwf	7
 12175  1155  0801               	movf	1,w
 12176  1156  0023               	movlb	3	; select bank3
 12177  1157  0093               	movwf	19	;volatile
 12178                           
 12179                           ;MCU_B1.c: 978: Flash_Memory_Unlock();
 12180  1158  319B  23E8  3191   	fcall	_Flash_Memory_Unlock
 12181  115B  3001               	movlw	1
 12182  115C  0020               	movlb	0	; select bank0
 12183  115D  00A0               	movwf	??_Flash_Memory_Write
 12184  115E  0820               	movf	??_Flash_Memory_Write,w
 12185  115F  07A1               	addwf	Flash_Memory_Write@i,f
 12186  1160  3020               	movlw	32
 12187  1161  0221               	subwf	Flash_Memory_Write@i,w
 12188  1162  1C03               	skipc
 12189  1163  294C               	goto	l6613
 12190  1164                     l1197:	
 12191                           
 12192                           ;MCU_B1.c: 979: }
 12193                           ;MCU_B1.c: 980: LWLO = 0;
 12194  1164  0023               	movlb	3	; select bank3
 12195  1165  1295               	bcf	21,5	;volatile
 12196                           
 12197                           ;MCU_B1.c: 981: Flash_Memory_Unlock();
 12198  1166  319B  23E8         	fcall	_Flash_Memory_Unlock
 12199                           
 12200                           ;MCU_B1.c: 982: WREN = 0;
 12201  1168  0023               	movlb	3	; select bank3
 12202  1169  1115               	bcf	21,2	;volatile
 12203  116A  0008               	return
 12204  116B                     __end_of_Flash_Memory_Write:	
 12205                           
 12206                           	psect	text71
 12207  1BE8                     __ptext71:	
 12208 ;; *************** function _Flash_Memory_Unlock *****************
 12209 ;; Defined at:
 12210 ;;		line 946 in file "../src/MCU_B1.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;		None
 12215 ;; Return value:  Size  Location     Type
 12216 ;;		None               void
 12217 ;; Registers used:
 12218 ;;		wreg
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;Total ram usage:        0 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    5
 12231 ;; This function calls:
 12232 ;;		Nothing
 12233 ;; This function is called by:
 12234 ;;		_Flash_Memory_Write
 12235 ;;		_Flash_Memory_Erasing
 12236 ;; This function uses a non-reentrant model
 12237 ;;
 12238                           
 12239                           
 12240                           ;psect for function _Flash_Memory_Unlock
 12241  1BE8                     _Flash_Memory_Unlock:	
 12242                           
 12243                           ;MCU_B1.c: 947: PMCON2 = 0x55;
 12244                           
 12245                           ;incstack = 0
 12246                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12247  1BE8  3055               	movlw	85
 12248  1BE9  0023               	movlb	3	; select bank3
 12249  1BEA  0096               	movwf	22	;volatile
 12250                           
 12251                           ;MCU_B1.c: 948: PMCON2 = 0xaa;
 12252  1BEB  30AA               	movlw	170
 12253  1BEC  0096               	movwf	22	;volatile
 12254                           
 12255                           ;MCU_B1.c: 949: WR = 1;
 12256  1BED  1495               	bsf	21,1	;volatile
 12257                           
 12258                           ;MCU_B1.c: 950: __nop();
 12259  1BEE  0000               	nop
 12260                           
 12261                           ;MCU_B1.c: 951: __nop();
 12262  1BEF  0000               	nop
 12263  1BF0  0008               	return
 12264  1BF1                     __end_of_Flash_Memory_Unlock:	
 12265                           
 12266                           	psect	text72
 12267  07E5                     __ptext72:	
 12268 ;; *************** function _Flash_Memory_Read *****************
 12269 ;; Defined at:
 12270 ;;		line 955 in file "../src/MCU_B1.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;  address         1    wreg     unsigned char 
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;  address         1    2[BANK0 ] unsigned char 
 12275 ;;  ret             1    3[BANK0 ] unsigned char 
 12276 ;;  i               1    1[BANK0 ] unsigned char 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;                  1    wreg      unsigned char 
 12279 ;; Registers used:
 12280 ;;		wreg, status,2
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;Total ram usage:        4 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    5
 12293 ;; This function calls:
 12294 ;;		Nothing
 12295 ;; This function is called by:
 12296 ;;		_Flash_Memory_Initialization
 12297 ;;		_Flash_Memory_Modify
 12298 ;; This function uses a non-reentrant model
 12299 ;;
 12300                           
 12301                           
 12302                           ;psect for function _Flash_Memory_Read
 12303  07E5                     _Flash_Memory_Read:	
 12304                           
 12305                           ;incstack = 0
 12306                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12307                           ;Flash_Memory_Read@address stored from wreg
 12308  07E5  0020               	movlb	0	; select bank0
 12309  07E6  00A2               	movwf	Flash_Memory_Read@address
 12310                           
 12311                           ;MCU_B1.c: 956: char i = 0, ret = 0;
 12312  07E7  01A1               	clrf	Flash_Memory_Read@i
 12313  07E8  01A3               	clrf	Flash_Memory_Read@ret
 12314                           
 12315                           ;MCU_B1.c: 957: PMADRH = 0x30;
 12316  07E9  3030               	movlw	48
 12317  07EA  0023               	movlb	3	; select bank3
 12318  07EB  0092               	movwf	18	;volatile
 12319                           
 12320                           ;MCU_B1.c: 958: PMADRL = address;
 12321  07EC  0020               	movlb	0	; select bank0
 12322  07ED  0822               	movf	Flash_Memory_Read@address,w
 12323  07EE  0023               	movlb	3	; select bank3
 12324  07EF  0091               	movwf	17	;volatile
 12325                           
 12326                           ;MCU_B1.c: 959: CFGS = 0;
 12327  07F0  1315               	bcf	21,6	;volatile
 12328                           
 12329                           ;MCU_B1.c: 960: RD = 1;
 12330  07F1  1415               	bsf	21,0	;volatile
 12331                           
 12332                           ;MCU_B1.c: 961: i = PMDATH;
 12333  07F2  0814               	movf	20,w	;volatile
 12334  07F3  0020               	movlb	0	; select bank0
 12335  07F4  00A0               	movwf	??_Flash_Memory_Read
 12336  07F5  0820               	movf	??_Flash_Memory_Read,w
 12337  07F6  00A1               	movwf	Flash_Memory_Read@i
 12338                           
 12339                           ;MCU_B1.c: 962: ret = PMDATL;
 12340  07F7  0023               	movlb	3	; select bank3
 12341  07F8  0813               	movf	19,w	;volatile
 12342  07F9  0020               	movlb	0	; select bank0
 12343  07FA  00A0               	movwf	??_Flash_Memory_Read
 12344  07FB  0820               	movf	??_Flash_Memory_Read,w
 12345  07FC  00A3               	movwf	Flash_Memory_Read@ret
 12346                           
 12347                           ;MCU_B1.c: 963: return ret;
 12348  07FD  0823               	movf	Flash_Memory_Read@ret,w
 12349  07FE  0008               	return
 12350  07FF                     __end_of_Flash_Memory_Read:	
 12351                           
 12352                           	psect	text73
 12353  116B                     __ptext73:	
 12354 ;; *************** function _DimmerLights_Main *****************
 12355 ;; Defined at:
 12356 ;;		line 390 in file "../src/Dimmer_B1.c"
 12357 ;; Parameters:    Size  Location     Type
 12358 ;;		None
 12359 ;; Auto vars:     Size  Location     Type
 12360 ;;		None
 12361 ;; Return value:  Size  Location     Type
 12362 ;;		None               void
 12363 ;; Registers used:
 12364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;Total ram usage:        4 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:   10
 12377 ;; This function calls:
 12378 ;;		_getLoad_OK
 12379 ;;		_getMain_All_Error_Status
 12380 ;;		_getMain_LightsStatus
 12381 ;;		_setDimmerLights_Main
 12382 ;; This function is called by:
 12383 ;;		_main
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           
 12388                           ;psect for function _DimmerLights_Main
 12389  116B                     _DimmerLights_Main:	
 12390                           
 12391                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12392                           
 12393                           ;incstack = 0
 12394                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12395  116B  3000               	movlw	0
 12396  116C  3191  21CD  3191   	fcall	_getMain_All_Error_Status
 12397  116F  3800               	iorlw	0
 12398  1170  1D03               	skipz
 12399  1171  2995               	goto	l709
 12400                           
 12401                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12402  1172  0022               	movlb	2	; select bank2
 12403  1173  1CBE               	btfss	_Dimmer^(0+256),1
 12404  1174  2997               	goto	l7493
 12405                           
 12406                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12407  1175  319B  23CF  3191   	fcall	_getLoad_OK
 12408  1178  3A01               	xorlw	1
 12409  1179  1903               	skipnz
 12410  117A  298C               	goto	l7489
 12411  117B  3191  2111  3191   	fcall	_getMain_LightsStatus
 12412  117E  3A00               	xorlw	0
 12413  117F  1903               	skipnz
 12414  1180  298C               	goto	l7489
 12415  1181  0022               	movlb	2	; select bank2
 12416  1182  0C3E               	rrf	_Dimmer^(0+256),w
 12417  1183  3901               	andlw	1
 12418  1184  0020               	movlb	0	; select bank0
 12419  1185  00E7               	movwf	??_DimmerLights_Main
 12420  1186  01E8               	clrf	??_DimmerLights_Main+1
 12421  1187  0867               	movf	??_DimmerLights_Main,w
 12422  1188  00E9               	movwf	_DimmerLights_Main$2089
 12423  1189  0868               	movf	??_DimmerLights_Main+1,w
 12424  118A  00EA               	movwf	_DimmerLights_Main$2089+1
 12425  118B  298F               	goto	l7491
 12426  118C                     l7489:	
 12427  118C  0020               	movlb	0	; select bank0
 12428  118D  01E9               	clrf	_DimmerLights_Main$2089
 12429  118E  01EA               	clrf	_DimmerLights_Main$2089+1
 12430  118F                     l7491:	
 12431  118F  0869               	movf	_DimmerLights_Main$2089,w
 12432  1190  0022               	movlb	2	; select bank2
 12433  1191  10BE               	bcf	_Dimmer^(0+256),1
 12434  1192  1D03               	skipz
 12435  1193  14BE               	bsf	_Dimmer^(0+256),1
 12436                           
 12437                           ;Dimmer_B1.c: 395: }
 12438                           ;Dimmer_B1.c: 396: } else {
 12439  1194  2997               	goto	l7493
 12440  1195                     l709:	
 12441                           
 12442                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12443  1195  0022               	movlb	2	; select bank2
 12444  1196  10BE               	bcf	_Dimmer^(0+256),1
 12445  1197                     l7493:	
 12446                           
 12447                           ;Dimmer_B1.c: 398: }
 12448                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12449  1197  3001               	movlw	1
 12450  1198  3196  26EF         	fcall	_setDimmerLights_Main
 12451  119A  0008               	return
 12452  119B                     __end_of_DimmerLights_Main:	
 12453                           
 12454                           	psect	text74
 12455  16EF                     __ptext74:	
 12456 ;; *************** function _setDimmerLights_Main *****************
 12457 ;; Defined at:
 12458 ;;		line 416 in file "../src/Dimmer_B1.c"
 12459 ;; Parameters:    Size  Location     Type
 12460 ;;  lights          1    wreg     unsigned char 
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;  lights          1   70[BANK0 ] unsigned char 
 12463 ;; Return value:  Size  Location     Type
 12464 ;;		None               void
 12465 ;; Registers used:
 12466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12467 ;; Tracked objects:
 12468 ;;		On entry : 0/0
 12469 ;;		On exit  : 0/0
 12470 ;;		Unchanged: 0/0
 12471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;Total ram usage:        1 bytes
 12477 ;; Hardware stack levels used:    1
 12478 ;; Hardware stack levels required when called:    9
 12479 ;; This function calls:
 12480 ;;		_DimmerLightsPointSelect
 12481 ;;		_setBuz
 12482 ;;		_setDimmerLights
 12483 ;;		_setDimmerLights_Adj
 12484 ;; This function is called by:
 12485 ;;		_DimmerLights_Main
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           
 12490                           ;psect for function _setDimmerLights_Main
 12491  16EF                     _setDimmerLights_Main:	
 12492                           
 12493                           ;incstack = 0
 12494                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12495                           ;setDimmerLights_Main@lights stored from wreg
 12496  16EF  0020               	movlb	0	; select bank0
 12497  16F0  00E6               	movwf	setDimmerLights_Main@lights
 12498                           
 12499                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12500  16F1  0866               	movf	setDimmerLights_Main@lights,w
 12501  16F2  319C  241A  3196   	fcall	_DimmerLightsPointSelect
 12502                           
 12503                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12504  16F5  0020               	movlb	0	; select bank0
 12505  16F6  086F               	movf	_DimmerLights,w
 12506  16F7  3E08               	addlw	8
 12507  16F8  0086               	movwf	6
 12508  16F9  3001               	movlw	1	; select bank2/3
 12509  16FA  0087               	movwf	7
 12510  16FB  1D01               	btfss	1,2
 12511  16FC  2F1A               	goto	l6945
 12512                           
 12513                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12514  16FD  0022               	movlb	2	; select bank2
 12515  16FE  18BE               	btfsc	_Dimmer^(0+256),1
 12516  16FF  0008               	return
 12517                           
 12518                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12519  1700  0020               	movlb	0	; select bank0
 12520  1701  086F               	movf	_DimmerLights,w
 12521  1702  3E08               	addlw	8
 12522  1703  0086               	movwf	6
 12523  1704  3001               	movlw	1	; select bank2/3
 12524  1705  0087               	movwf	7
 12525  1706  1101               	bcf	1,2
 12526                           
 12527                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12528  1707  086F               	movf	_DimmerLights,w
 12529  1708  3E08               	addlw	8
 12530  1709  0086               	movwf	6
 12531  170A  3001               	movlw	1	; select bank2/3
 12532  170B  0087               	movwf	7
 12533  170C  1C81               	btfss	1,1
 12534  170D  2F14               	goto	l6943
 12535                           
 12536                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12537  170E  01E2               	clrf	setDimmerLights@status
 12538  170F  0AE2               	incf	setDimmerLights@status,f
 12539  1710  0866               	movf	setDimmerLights_Main@lights,w
 12540  1711  318C  24CF         	fcall	_setDimmerLights
 12541                           
 12542                           ;Dimmer_B1.c: 425: } else {
 12543  1713  0008               	return
 12544  1714                     l6943:	
 12545                           
 12546                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12547  1714  0020               	movlb	0	; select bank0
 12548  1715  01E2               	clrf	setDimmerLights@status
 12549  1716  0866               	movf	setDimmerLights_Main@lights,w
 12550  1717  318C  24CF         	fcall	_setDimmerLights
 12551                           
 12552                           ;Dimmer_B1.c: 427: }
 12553                           ;Dimmer_B1.c: 428: }
 12554                           ;Dimmer_B1.c: 429: } else {
 12555  1719  0008               	return
 12556  171A                     l6945:	
 12557                           
 12558                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12559  171A  0020               	movlb	0	; select bank0
 12560  171B  086F               	movf	_DimmerLights,w
 12561  171C  3E08               	addlw	8
 12562  171D  0086               	movwf	6
 12563  171E  3001               	movlw	1	; select bank2/3
 12564  171F  0087               	movwf	7
 12565  1720  1E01               	btfss	1,4
 12566  1721  0008               	return
 12567                           
 12568                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12569  1722  0022               	movlb	2	; select bank2
 12570  1723  18BE               	btfsc	_Dimmer^(0+256),1
 12571  1724  0008               	return
 12572                           
 12573                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12574  1725  0020               	movlb	0	; select bank0
 12575  1726  086F               	movf	_DimmerLights,w
 12576  1727  3E08               	addlw	8
 12577  1728  0086               	movwf	6
 12578  1729  3001               	movlw	1	; select bank2/3
 12579  172A  0087               	movwf	7
 12580  172B  1201               	bcf	1,4
 12581                           
 12582                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12583  172C  086F               	movf	_DimmerLights,w
 12584  172D  3E08               	addlw	8
 12585  172E  0086               	movwf	6
 12586  172F  3001               	movlw	1	; select bank2/3
 12587  1730  0087               	movwf	7
 12588  1731  1D81               	btfss	1,3
 12589  1732  2F42               	goto	l6955
 12590                           
 12591                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12592  1733  01E2               	clrf	setDimmerLights_Adj@status
 12593  1734  0AE2               	incf	setDimmerLights_Adj@status,f
 12594  1735  0866               	movf	setDimmerLights_Main@lights,w
 12595  1736  318A  22F7  3196   	fcall	_setDimmerLights_Adj
 12596                           
 12597                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12598  1739  3064               	movlw	100
 12599  173A  0020               	movlb	0	; select bank0
 12600  173B  00A9               	movwf	setBuz@time
 12601  173C  3000               	movlw	0
 12602  173D  00AA               	movwf	setBuz@time+1
 12603  173E  3001               	movlw	1
 12604  173F  3196  2696         	fcall	_setBuz
 12605                           
 12606                           ;Dimmer_B1.c: 436: } else {
 12607  1741  0008               	return
 12608  1742                     l6955:	
 12609                           
 12610                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12611  1742  0020               	movlb	0	; select bank0
 12612  1743  01E2               	clrf	setDimmerLights_Adj@status
 12613  1744  0866               	movf	setDimmerLights_Main@lights,w
 12614  1745  318A  22F7         	fcall	_setDimmerLights_Adj
 12615  1747  0008               	return
 12616  1748                     __end_of_setDimmerLights_Main:	
 12617                           
 12618                           	psect	text75
 12619  0AF7                     __ptext75:	
 12620 ;; *************** function _setDimmerLights_Adj *****************
 12621 ;; Defined at:
 12622 ;;		line 716 in file "../src/Dimmer_B1.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  lights          1    wreg     unsigned char 
 12625 ;;  status          1   66[BANK0 ] unsigned char 
 12626 ;; Auto vars:     Size  Location     Type
 12627 ;;  lights          1   69[BANK0 ] unsigned char 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;		None               void
 12630 ;; Registers used:
 12631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12632 ;; Tracked objects:
 12633 ;;		On entry : 0/0
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12637 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;Total ram usage:        4 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    8
 12644 ;; This function calls:
 12645 ;;		_DimmerLightsPointSelect
 12646 ;;		_getMain_All_Error_Status
 12647 ;;		_setPercentValue
 12648 ;;		_setRF_DimmerLights
 12649 ;;		_setTxData
 12650 ;; This function is called by:
 12651 ;;		_setDimmerLights_Main
 12652 ;; This function uses a non-reentrant model
 12653 ;;
 12654                           
 12655                           
 12656                           ;psect for function _setDimmerLights_Adj
 12657  0AF7                     _setDimmerLights_Adj:	
 12658                           
 12659                           ;incstack = 0
 12660                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12661                           ;setDimmerLights_Adj@lights stored from wreg
 12662  0AF7  0020               	movlb	0	; select bank0
 12663  0AF8  00E5               	movwf	setDimmerLights_Adj@lights
 12664                           
 12665                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12666  0AF9  0865               	movf	setDimmerLights_Adj@lights,w
 12667  0AFA  319C  241A  318A   	fcall	_DimmerLightsPointSelect
 12668                           
 12669                           ;Dimmer_B1.c: 718: if (status == 1) {
 12670  0AFD  0020               	movlb	0	; select bank0
 12671  0AFE  0862               	movf	setDimmerLights_Adj@status,w
 12672  0AFF  3A01               	xorlw	1
 12673  0B00  1D03               	skipz
 12674  0B01  2B0D               	goto	l6523
 12675                           
 12676                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12677  0B02  086F               	movf	_DimmerLights,w
 12678  0B03  0086               	movwf	6
 12679  0B04  3001               	movlw	1	; select bank2/3
 12680  0B05  0087               	movwf	7
 12681  0B06  1581               	bsf	1,3
 12682                           
 12683                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12684  0B07  086F               	movf	_DimmerLights,w
 12685  0B08  0086               	movwf	6
 12686  0B09  3001               	movlw	1	; select bank2/3
 12687  0B0A  0087               	movwf	7
 12688  0B0B  1481               	bsf	1,1
 12689                           
 12690                           ;Dimmer_B1.c: 721: } else {
 12691  0B0C  0008               	return
 12692  0B0D                     l6523:	
 12693                           
 12694                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12695  0B0D  086F               	movf	_DimmerLights,w
 12696  0B0E  0086               	movwf	6
 12697  0B0F  3001               	movlw	1	; select bank2/3
 12698  0B10  0087               	movwf	7
 12699  0B11  1D81               	btfss	1,3
 12700  0B12  0008               	return
 12701                           
 12702                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12703  0B13  086F               	movf	_DimmerLights,w
 12704  0B14  0086               	movwf	6
 12705  0B15  3001               	movlw	1	; select bank2/3
 12706  0B16  0087               	movwf	7
 12707  0B17  1081               	bcf	1,1
 12708                           
 12709                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12710  0B18  086F               	movf	_DimmerLights,w
 12711  0B19  0086               	movwf	6
 12712  0B1A  3001               	movlw	1	; select bank2/3
 12713  0B1B  0087               	movwf	7
 12714  0B1C  1181               	bcf	1,3
 12715                           
 12716                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12717  0B1D  086F               	movf	_DimmerLights,w
 12718  0B1E  3E04               	addlw	4
 12719  0B1F  0086               	movwf	6
 12720  0B20  3001               	movlw	1	; select bank2/3
 12721  0B21  0087               	movwf	7
 12722  0B22  0801               	movf	1,w
 12723  0B23  00E3               	movwf	??_setDimmerLights_Adj
 12724  0B24  086F               	movf	_DimmerLights,w
 12725  0B25  3E05               	addlw	5
 12726  0B26  0086               	movwf	6
 12727  0B27  3001               	movlw	1	; select bank2/3
 12728  0B28  0087               	movwf	7
 12729  0B29  0863               	movf	??_setDimmerLights_Adj,w
 12730  0B2A  0081               	movwf	1
 12731                           
 12732                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12733  0B2B  086F               	movf	_DimmerLights,w
 12734  0B2C  3E04               	addlw	4
 12735  0B2D  0086               	movwf	6
 12736  0B2E  3001               	movlw	1	; select bank2/3
 12737  0B2F  0087               	movwf	7
 12738  0B30  0801               	movf	1,w
 12739  0B31  318A  222D  318A   	fcall	_setPercentValue
 12740  0B34  0020               	movlb	0	; select bank0
 12741  0B35  00E3               	movwf	??_setDimmerLights_Adj
 12742  0B36  0865               	movf	setDimmerLights_Adj@lights,w
 12743  0B37  3E14               	addlw	20
 12744  0B38  076E               	addwf	_product,w
 12745  0B39  00E4               	movwf	??_setDimmerLights_Adj+1
 12746  0B3A  0864               	movf	??_setDimmerLights_Adj+1,w
 12747  0B3B  0086               	movwf	6
 12748  0B3C  3002               	movlw	2	; select bank4/5
 12749  0B3D  0087               	movwf	7
 12750  0B3E  0863               	movf	??_setDimmerLights_Adj,w
 12751  0B3F  0081               	movwf	1
 12752                           
 12753                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12754  0B40  3000               	movlw	0
 12755  0B41  3191  21CD  318A   	fcall	_getMain_All_Error_Status
 12756  0B44  3A00               	xorlw	0
 12757  0B45  3000               	movlw	0
 12758  0B46  1903               	skipnz
 12759  0B47  3001               	movlw	1
 12760  0B48  0020               	movlb	0	; select bank0
 12761  0B49  00E3               	movwf	??_setDimmerLights_Adj
 12762  0B4A  0DE3               	rlf	??_setDimmerLights_Adj,f
 12763  0B4B  0022               	movlb	2	; select bank2
 12764  0B4C  083E               	movf	_Dimmer^(0+256),w
 12765  0B4D  0020               	movlb	0	; select bank0
 12766  0B4E  0663               	xorwf	??_setDimmerLights_Adj,w
 12767  0B4F  39FD               	andlw	-3
 12768  0B50  0663               	xorwf	??_setDimmerLights_Adj,w
 12769  0B51  0022               	movlb	2	; select bank2
 12770  0B52  00BE               	movwf	_Dimmer^(0+256)
 12771                           
 12772                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12773  0B53  0020               	movlb	0	; select bank0
 12774  0B54  01A0               	clrf	setRF_DimmerLights@on
 12775  0B55  0AA0               	incf	setRF_DimmerLights@on,f
 12776  0B56  0865               	movf	setDimmerLights_Adj@lights,w
 12777  0B57  3197  2748  318A   	fcall	_setRF_DimmerLights
 12778                           
 12779                           ;Dimmer_B1.c: 740: setTxData();
 12780  0B5A  3187  2726         	fcall	_setTxData
 12781  0B5C  0008               	return
 12782  0B5D                     __end_of_setDimmerLights_Adj:	
 12783                           
 12784                           	psect	text76
 12785  0CCF                     __ptext76:	
 12786 ;; *************** function _setDimmerLights *****************
 12787 ;; Defined at:
 12788 ;;		line 611 in file "../src/Dimmer_B1.c"
 12789 ;; Parameters:    Size  Location     Type
 12790 ;;  lights          1    wreg     unsigned char 
 12791 ;;  status          1   66[BANK0 ] unsigned char 
 12792 ;; Auto vars:     Size  Location     Type
 12793 ;;  lights          1   69[BANK0 ] unsigned char 
 12794 ;; Return value:  Size  Location     Type
 12795 ;;		None               void
 12796 ;; Registers used:
 12797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12798 ;; Tracked objects:
 12799 ;;		On entry : 0/0
 12800 ;;		On exit  : 0/0
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12803 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12807 ;;Total ram usage:        4 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    8
 12810 ;; This function calls:
 12811 ;;		_DimmerLightsPointSelect
 12812 ;;		_getMain_All_Error_Status
 12813 ;;		_setDimmerLights_Line
 12814 ;;		_setLED
 12815 ;;		_setPercentValue
 12816 ;;		_setRF_DimmerLights
 12817 ;;		_setTxData
 12818 ;; This function is called by:
 12819 ;;		_setDimmerLights_Main
 12820 ;; This function uses a non-reentrant model
 12821 ;;
 12822                           
 12823                           
 12824                           ;psect for function _setDimmerLights
 12825  0CCF                     _setDimmerLights:	
 12826                           
 12827                           ;incstack = 0
 12828                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12829                           ;setDimmerLights@lights stored from wreg
 12830  0CCF  0020               	movlb	0	; select bank0
 12831  0CD0  00E5               	movwf	setDimmerLights@lights
 12832                           
 12833                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12834  0CD1  0865               	movf	setDimmerLights@lights,w
 12835  0CD2  319C  241A  318C   	fcall	_DimmerLightsPointSelect
 12836                           
 12837                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12838  0CD5  3000               	movlw	0
 12839  0CD6  3191  21CD  318C   	fcall	_getMain_All_Error_Status
 12840  0CD9  3A00               	xorlw	0
 12841  0CDA  3000               	movlw	0
 12842  0CDB  1903               	skipnz
 12843  0CDC  3001               	movlw	1
 12844  0CDD  0020               	movlb	0	; select bank0
 12845  0CDE  00E3               	movwf	??_setDimmerLights
 12846  0CDF  0DE3               	rlf	??_setDimmerLights,f
 12847  0CE0  0022               	movlb	2	; select bank2
 12848  0CE1  083E               	movf	_Dimmer^(0+256),w
 12849  0CE2  0020               	movlb	0	; select bank0
 12850  0CE3  0663               	xorwf	??_setDimmerLights,w
 12851  0CE4  39FD               	andlw	-3
 12852  0CE5  0663               	xorwf	??_setDimmerLights,w
 12853  0CE6  0022               	movlb	2	; select bank2
 12854  0CE7  00BE               	movwf	_Dimmer^(0+256)
 12855                           
 12856                           ;Dimmer_B1.c: 619: if (status == 1) {
 12857  0CE8  0020               	movlb	0	; select bank0
 12858  0CE9  0862               	movf	setDimmerLights@status,w
 12859  0CEA  3A01               	xorlw	1
 12860  0CEB  1D03               	skipz
 12861  0CEC  2D1D               	goto	l6503
 12862                           
 12863                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12864  0CED  086F               	movf	_DimmerLights,w
 12865  0CEE  3E09               	addlw	9
 12866  0CEF  0086               	movwf	6
 12867  0CF0  3001               	movlw	1	; select bank2/3
 12868  0CF1  0087               	movwf	7
 12869  0CF2  1481               	bsf	1,1
 12870                           
 12871                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12872  0CF3  01A2               	clrf	setLED@command
 12873  0CF4  0865               	movf	setDimmerLights@lights,w
 12874  0CF5  3192  2268  318C   	fcall	_setLED
 12875                           
 12876                           ;Dimmer_B1.c: 622: ;;
 12877                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12878  0CF8  0020               	movlb	0	; select bank0
 12879  0CF9  0865               	movf	setDimmerLights@lights,w
 12880  0CFA  319C  2468  318C   	fcall	_setDimmerLights_Line
 12881                           
 12882                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12883  0CFD  0020               	movlb	0	; select bank0
 12884  0CFE  086F               	movf	_DimmerLights,w
 12885  0CFF  0086               	movwf	6
 12886  0D00  3001               	movlw	1	; select bank2/3
 12887  0D01  0087               	movwf	7
 12888  0D02  1701               	bsf	1,6
 12889                           
 12890                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(85*0.8));
 12891  0D03  3044               	movlw	68
 12892  0D04  00E3               	movwf	??_setDimmerLights
 12893  0D05  086F               	movf	_DimmerLights,w
 12894  0D06  3E04               	addlw	4
 12895  0D07  0086               	movwf	6
 12896  0D08  3001               	movlw	1	; select bank2/3
 12897  0D09  0087               	movwf	7
 12898  0D0A  0863               	movf	??_setDimmerLights,w
 12899  0D0B  0081               	movwf	1
 12900                           
 12901                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(85*0.8)));
 12902  0D0C  3044               	movlw	68
 12903  0D0D  318A  222D  318C   	fcall	_setPercentValue
 12904  0D10  0020               	movlb	0	; select bank0
 12905  0D11  00E3               	movwf	??_setDimmerLights
 12906  0D12  0865               	movf	setDimmerLights@lights,w
 12907  0D13  3E14               	addlw	20
 12908  0D14  076E               	addwf	_product,w
 12909  0D15  00E4               	movwf	??_setDimmerLights+1
 12910  0D16  0864               	movf	??_setDimmerLights+1,w
 12911  0D17  0086               	movwf	6
 12912  0D18  3002               	movlw	2	; select bank4/5
 12913  0D19  0087               	movwf	7
 12914  0D1A  0863               	movf	??_setDimmerLights,w
 12915  0D1B  0081               	movwf	1
 12916  0D1C  2D44               	goto	l6515
 12917  0D1D                     l6503:	
 12918                           ;Dimmer_B1.c: 642: } else {
 12919                           
 12920                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12921                           
 12922                           
 12923                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 12924  0D1D  086F               	movf	_DimmerLights,w
 12925  0D1E  0086               	movwf	6
 12926  0D1F  3001               	movlw	1	; select bank2/3
 12927  0D20  0087               	movwf	7
 12928  0D21  1301               	bcf	1,6
 12929                           
 12930                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 12931  0D22  086F               	movf	_DimmerLights,w
 12932  0D23  3E09               	addlw	9
 12933  0D24  0086               	movwf	6
 12934  0D25  3001               	movlw	1	; select bank2/3
 12935  0D26  0087               	movwf	7
 12936  0D27  1081               	bcf	1,1
 12937                           
 12938                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 12939  0D28  01A2               	clrf	setLED@command
 12940  0D29  0AA2               	incf	setLED@command,f
 12941  0D2A  0865               	movf	setDimmerLights@lights,w
 12942  0D2B  3192  2268  318C   	fcall	_setLED
 12943                           
 12944                           ;Dimmer_B1.c: 646: ;;
 12945                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 12946  0D2E  0020               	movlb	0	; select bank0
 12947  0D2F  086F               	movf	_DimmerLights,w
 12948  0D30  3E08               	addlw	8
 12949  0D31  0086               	movwf	6
 12950  0D32  3001               	movlw	1	; select bank2/3
 12951  0D33  0087               	movwf	7
 12952  0D34  1781               	bsf	1,7
 12953                           
 12954                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 12955  0D35  086F               	movf	_DimmerLights,w
 12956  0D36  0086               	movwf	6
 12957  0D37  3001               	movlw	1	; select bank2/3
 12958  0D38  0087               	movwf	7
 12959  0D39  1181               	bcf	1,3
 12960                           
 12961                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 12962  0D3A  086F               	movf	_DimmerLights,w
 12963  0D3B  0086               	movwf	6
 12964  0D3C  3001               	movlw	1	; select bank2/3
 12965  0D3D  0087               	movwf	7
 12966  0D3E  1201               	bcf	1,4
 12967                           
 12968                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 12969  0D3F  086F               	movf	_DimmerLights,w
 12970  0D40  0086               	movwf	6
 12971  0D41  3001               	movlw	1	; select bank2/3
 12972  0D42  0087               	movwf	7
 12973  0D43  1101               	bcf	1,2
 12974  0D44                     l6515:	
 12975                           
 12976                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 12977  0D44  3007               	movlw	7
 12978  0D45  00E3               	movwf	??_setDimmerLights
 12979  0D46  086F               	movf	_DimmerLights,w
 12980  0D47  3E02               	addlw	2
 12981  0D48  0086               	movwf	6
 12982  0D49  3001               	movlw	1	; select bank2/3
 12983  0D4A  0087               	movwf	7
 12984  0D4B  0863               	movf	??_setDimmerLights,w
 12985  0D4C  0081               	movwf	1
 12986                           
 12987                           ;Dimmer_B1.c: 661: }
 12988                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 12989  0D4D  0862               	movf	setDimmerLights@status,w
 12990  0D4E  00E3               	movwf	??_setDimmerLights
 12991  0D4F  0863               	movf	??_setDimmerLights,w
 12992  0D50  00A0               	movwf	setRF_DimmerLights@on
 12993  0D51  0865               	movf	setDimmerLights@lights,w
 12994  0D52  3197  2748  318C   	fcall	_setRF_DimmerLights
 12995                           
 12996                           ;Dimmer_B1.c: 663: setTxData();
 12997  0D55  3187  2726         	fcall	_setTxData
 12998  0D57  0008               	return
 12999  0D58                     __end_of_setDimmerLights:	
 13000                           
 13001                           	psect	text77
 13002  0726                     __ptext77:	
 13003 ;; *************** function _setTxData *****************
 13004 ;; Defined at:
 13005 ;;		line 210 in file "../src/RF_Control_B1.c"
 13006 ;; Parameters:    Size  Location     Type
 13007 ;;		None
 13008 ;; Auto vars:     Size  Location     Type
 13009 ;;  i               1    0        unsigned char 
 13010 ;; Return value:  Size  Location     Type
 13011 ;;		None               void
 13012 ;; Registers used:
 13013 ;;		wreg, fsr1l, fsr1h
 13014 ;; Tracked objects:
 13015 ;;		On entry : 0/0
 13016 ;;		On exit  : 0/0
 13017 ;;		Unchanged: 0/0
 13018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;Total ram usage:        1 bytes
 13024 ;; Hardware stack levels used:    1
 13025 ;; Hardware stack levels required when called:    5
 13026 ;; This function calls:
 13027 ;;		Nothing
 13028 ;; This function is called by:
 13029 ;;		_setDimmerLights
 13030 ;;		_setDimmerLights_Adj
 13031 ;;		_my_MainTimer
 13032 ;;		_getRxData
 13033 ;;		_setControl_Lights_Table
 13034 ;;		_setRFSW_Control
 13035 ;;		_setRFSW_AdjControl
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           
 13040                           ;psect for function _setTxData
 13041  0726                     _setTxData:	
 13042                           
 13043                           ;RF_Control_B1.c: 211: char i;
 13044                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 13045                           
 13046                           ;incstack = 0
 13047                           ; Regs used in _setTxData: [wregfsr1]
 13048  0726  0021               	movlb	1	; select bank1
 13049  0727  1C3A               	btfss	_RF1^(0+128),0
 13050  0728  0008               	return
 13051                           
 13052                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 13053  0729  193A               	btfsc	_RF1^(0+128),2
 13054  072A  0008               	return
 13055                           
 13056                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 13057  072B  153A               	bsf	_RF1^(0+128),2
 13058                           
 13059                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 13060  072C  3014               	movlw	20
 13061  072D  00C1               	movwf	(_RF1^(0+128)+7)
 13062  072E  3000               	movlw	0
 13063  072F  00C2               	movwf	(_RF1^(0+128)+8)
 13064                           
 13065                           ;RF_Control_B1.c: 228: RF_Data[0] = 0x63;
 13066  0730  3063               	movlw	99
 13067  0731  0020               	movlb	0	; select bank0
 13068  0732  00A0               	movwf	??_setTxData
 13069  0733  0820               	movf	??_setTxData,w
 13070  0734  0022               	movlb	2	; select bank2
 13071  0735  00A0               	movwf	_RF_Data^(0+256)
 13072                           
 13073                           ;RF_Control_B1.c: 229: RF_Data[1] = 0x02;
 13074  0736  3002               	movlw	2
 13075  0737  0020               	movlb	0	; select bank0
 13076  0738  00A0               	movwf	??_setTxData
 13077  0739  0820               	movf	??_setTxData,w
 13078  073A  0022               	movlb	2	; select bank2
 13079  073B  00A1               	movwf	(_RF_Data^(0+256)+1)
 13080                           
 13081                           ;RF_Control_B1.c: 231: RF_Data[2] = product->Data[2];
 13082  073C  0020               	movlb	0	; select bank0
 13083  073D  086E               	movf	_product,w
 13084  073E  0086               	movwf	6
 13085  073F  3002               	movlw	2	; select bank4/5
 13086  0740  0087               	movwf	7
 13087  0741  3002               	movlw	2	; select bank4/5
 13088  0742  3F42               	moviw [2]fsr1
 13089  0743  0022               	movlb	2	; select bank2
 13090  0744  00A2               	movwf	(_RF_Data^(0+256)+2)
 13091                           
 13092                           ;RF_Control_B1.c: 232: RF_Data[3] = product->Data[3];
 13093  0745  0020               	movlb	0	; select bank0
 13094  0746  086E               	movf	_product,w
 13095  0747  0086               	movwf	6
 13096  0748  3002               	movlw	2	; select bank4/5
 13097  0749  0087               	movwf	7
 13098  074A  3002               	movlw	2	; select bank4/5
 13099  074B  3F43               	moviw [3]fsr1
 13100  074C  0022               	movlb	2	; select bank2
 13101  074D  00A3               	movwf	(_RF_Data^(0+256)+3)
 13102                           
 13103                           ;RF_Control_B1.c: 233: RF_Data[4] = product->Data[4];
 13104  074E  0020               	movlb	0	; select bank0
 13105  074F  086E               	movf	_product,w
 13106  0750  0086               	movwf	6
 13107  0751  3002               	movlw	2	; select bank4/5
 13108  0752  0087               	movwf	7
 13109  0753  3002               	movlw	2	; select bank4/5
 13110  0754  3F44               	moviw [4]fsr1
 13111  0755  0022               	movlb	2	; select bank2
 13112  0756  00A4               	movwf	(_RF_Data^(0+256)+4)
 13113                           
 13114                           ;RF_Control_B1.c: 234: RF_Data[5] = product->Data[5];
 13115  0757  0020               	movlb	0	; select bank0
 13116  0758  086E               	movf	_product,w
 13117  0759  0086               	movwf	6
 13118  075A  3002               	movlw	2	; select bank4/5
 13119  075B  0087               	movwf	7
 13120  075C  3002               	movlw	2	; select bank4/5
 13121  075D  3F45               	moviw [5]fsr1
 13122  075E  0022               	movlb	2	; select bank2
 13123  075F  00A5               	movwf	(_RF_Data^(0+256)+5)
 13124                           
 13125                           ;RF_Control_B1.c: 235: RF_Data[6] = product->Data[6];
 13126  0760  0020               	movlb	0	; select bank0
 13127  0761  086E               	movf	_product,w
 13128  0762  0086               	movwf	6
 13129  0763  3002               	movlw	2	; select bank4/5
 13130  0764  0087               	movwf	7
 13131  0765  3002               	movlw	2	; select bank4/5
 13132  0766  3F46               	moviw [6]fsr1
 13133  0767  0022               	movlb	2	; select bank2
 13134  0768  00A6               	movwf	(_RF_Data^(0+256)+6)
 13135                           
 13136                           ;RF_Control_B1.c: 236: RF_Data[7] = product->Data[7];
 13137  0769  0020               	movlb	0	; select bank0
 13138  076A  086E               	movf	_product,w
 13139  076B  0086               	movwf	6
 13140  076C  3002               	movlw	2	; select bank4/5
 13141  076D  0087               	movwf	7
 13142  076E  3002               	movlw	2	; select bank4/5
 13143  076F  3F47               	moviw [7]fsr1
 13144  0770  0022               	movlb	2	; select bank2
 13145  0771  00A7               	movwf	(_RF_Data^(0+256)+7)
 13146                           
 13147                           ;RF_Control_B1.c: 237: RF_Data[8] = product->Data[8];
 13148  0772  0020               	movlb	0	; select bank0
 13149  0773  086E               	movf	_product,w
 13150  0774  0086               	movwf	6
 13151  0775  3002               	movlw	2	; select bank4/5
 13152  0776  0087               	movwf	7
 13153  0777  3002               	movlw	2	; select bank4/5
 13154  0778  3F48               	moviw [8]fsr1
 13155  0779  0022               	movlb	2	; select bank2
 13156  077A  00A8               	movwf	(_RF_Data^(0+256)+8)
 13157                           
 13158                           ;RF_Control_B1.c: 238: RF_Data[9] = product->Data[9];
 13159  077B  0020               	movlb	0	; select bank0
 13160  077C  086E               	movf	_product,w
 13161  077D  0086               	movwf	6
 13162  077E  3002               	movlw	2	; select bank4/5
 13163  077F  0087               	movwf	7
 13164  0780  3002               	movlw	2	; select bank4/5
 13165  0781  3F49               	moviw [9]fsr1
 13166  0782  0022               	movlb	2	; select bank2
 13167  0783  00A9               	movwf	(_RF_Data^(0+256)+9)
 13168                           
 13169                           ;RF_Control_B1.c: 239: RF_Data[10] = product->Data[10];
 13170  0784  0020               	movlb	0	; select bank0
 13171  0785  086E               	movf	_product,w
 13172  0786  0086               	movwf	6
 13173  0787  3002               	movlw	2	; select bank4/5
 13174  0788  0087               	movwf	7
 13175  0789  3002               	movlw	2	; select bank4/5
 13176  078A  3F4A               	moviw [10]fsr1
 13177  078B  0022               	movlb	2	; select bank2
 13178  078C  00AA               	movwf	(_RF_Data^(0+256)+10)
 13179                           
 13180                           ;RF_Control_B1.c: 240: RF_Data[11] = product->Data[11];
 13181  078D  0020               	movlb	0	; select bank0
 13182  078E  086E               	movf	_product,w
 13183  078F  0086               	movwf	6
 13184  0790  3002               	movlw	2	; select bank4/5
 13185  0791  0087               	movwf	7
 13186  0792  3002               	movlw	2	; select bank4/5
 13187  0793  3F4B               	moviw [11]fsr1
 13188  0794  0022               	movlb	2	; select bank2
 13189  0795  00AB               	movwf	(_RF_Data^(0+256)+11)
 13190                           
 13191                           ;RF_Control_B1.c: 241: RF_Data[12] = product->Data[12];
 13192  0796  0020               	movlb	0	; select bank0
 13193  0797  086E               	movf	_product,w
 13194  0798  0086               	movwf	6
 13195  0799  3002               	movlw	2	; select bank4/5
 13196  079A  0087               	movwf	7
 13197  079B  3002               	movlw	2	; select bank4/5
 13198  079C  3F4C               	moviw [12]fsr1
 13199  079D  0022               	movlb	2	; select bank2
 13200  079E  00AC               	movwf	(_RF_Data^(0+256)+12)
 13201                           
 13202                           ;RF_Control_B1.c: 242: RF_Data[13] = product->Data[13];
 13203  079F  0020               	movlb	0	; select bank0
 13204  07A0  086E               	movf	_product,w
 13205  07A1  0086               	movwf	6
 13206  07A2  3002               	movlw	2	; select bank4/5
 13207  07A3  0087               	movwf	7
 13208  07A4  3002               	movlw	2	; select bank4/5
 13209  07A5  3F4D               	moviw [13]fsr1
 13210  07A6  0022               	movlb	2	; select bank2
 13211  07A7  00AD               	movwf	(_RF_Data^(0+256)+13)
 13212                           
 13213                           ;RF_Control_B1.c: 243: RF_Data[14] = product->Data[14];
 13214  07A8  0020               	movlb	0	; select bank0
 13215  07A9  086E               	movf	_product,w
 13216  07AA  0086               	movwf	6
 13217  07AB  3002               	movlw	2	; select bank4/5
 13218  07AC  0087               	movwf	7
 13219  07AD  3002               	movlw	2	; select bank4/5
 13220  07AE  3F4E               	moviw [14]fsr1
 13221  07AF  0022               	movlb	2	; select bank2
 13222  07B0  00AE               	movwf	(_RF_Data^(0+256)+14)
 13223                           
 13224                           ;RF_Control_B1.c: 244: RF_Data[15] = product->Data[15];
 13225  07B1  0020               	movlb	0	; select bank0
 13226  07B2  086E               	movf	_product,w
 13227  07B3  0086               	movwf	6
 13228  07B4  3002               	movlw	2	; select bank4/5
 13229  07B5  0087               	movwf	7
 13230  07B6  3002               	movlw	2	; select bank4/5
 13231  07B7  3F4F               	moviw [15]fsr1
 13232  07B8  0022               	movlb	2	; select bank2
 13233  07B9  00AF               	movwf	(_RF_Data^(0+256)+15)
 13234                           
 13235                           ;RF_Control_B1.c: 245: RF_Data[16] = product->Data[16];
 13236  07BA  0020               	movlb	0	; select bank0
 13237  07BB  086E               	movf	_product,w
 13238  07BC  0086               	movwf	6
 13239  07BD  3002               	movlw	2	; select bank4/5
 13240  07BE  0087               	movwf	7
 13241  07BF  3002               	movlw	2	; select bank4/5
 13242  07C0  3F50               	moviw [16]fsr1
 13243  07C1  0022               	movlb	2	; select bank2
 13244  07C2  00B0               	movwf	(_RF_Data^(0+256)+16)
 13245                           
 13246                           ;RF_Control_B1.c: 246: RF_Data[17] = product->Data[17];
 13247  07C3  0020               	movlb	0	; select bank0
 13248  07C4  086E               	movf	_product,w
 13249  07C5  0086               	movwf	6
 13250  07C6  3002               	movlw	2	; select bank4/5
 13251  07C7  0087               	movwf	7
 13252  07C8  3002               	movlw	2	; select bank4/5
 13253  07C9  3F51               	moviw [17]fsr1
 13254  07CA  0022               	movlb	2	; select bank2
 13255  07CB  00B1               	movwf	(_RF_Data^(0+256)+17)
 13256                           
 13257                           ;RF_Control_B1.c: 247: RF_Data[18] = product->Data[18];
 13258  07CC  0020               	movlb	0	; select bank0
 13259  07CD  086E               	movf	_product,w
 13260  07CE  0086               	movwf	6
 13261  07CF  3002               	movlw	2	; select bank4/5
 13262  07D0  0087               	movwf	7
 13263  07D1  3002               	movlw	2	; select bank4/5
 13264  07D2  3F52               	moviw [18]fsr1
 13265  07D3  0022               	movlb	2	; select bank2
 13266  07D4  00B2               	movwf	(_RF_Data^(0+256)+18)
 13267                           
 13268                           ;RF_Control_B1.c: 248: RF_Data[19] = product->Data[19];
 13269  07D5  0020               	movlb	0	; select bank0
 13270  07D6  086E               	movf	_product,w
 13271  07D7  0086               	movwf	6
 13272  07D8  3002               	movlw	2	; select bank4/5
 13273  07D9  0087               	movwf	7
 13274  07DA  3002               	movlw	2	; select bank4/5
 13275  07DB  3F53               	moviw [19]fsr1
 13276  07DC  0022               	movlb	2	; select bank2
 13277  07DD  00B3               	movwf	(_RF_Data^(0+256)+19)
 13278                           
 13279                           ;RF_Control_B1.c: 249: RF_Data[20] = 209;
 13280  07DE  30D1               	movlw	209
 13281  07DF  0020               	movlb	0	; select bank0
 13282  07E0  00A0               	movwf	??_setTxData
 13283  07E1  0820               	movf	??_setTxData,w
 13284  07E2  0022               	movlb	2	; select bank2
 13285  07E3  00B4               	movwf	(_RF_Data^(0+256)+20)
 13286  07E4  0008               	return
 13287  07E5                     __end_of_setTxData:	
 13288                           
 13289                           	psect	text78
 13290  1748                     __ptext78:	
 13291 ;; *************** function _setRF_DimmerLights *****************
 13292 ;; Defined at:
 13293 ;;		line 487 in file "../src/RF_Control_B1.c"
 13294 ;; Parameters:    Size  Location     Type
 13295 ;;  lights          1    wreg     unsigned char 
 13296 ;;  on              1    0[BANK0 ] unsigned char 
 13297 ;; Auto vars:     Size  Location     Type
 13298 ;;  lights          1    4[BANK0 ] unsigned char 
 13299 ;;  status          1    3[BANK0 ] unsigned char 
 13300 ;; Return value:  Size  Location     Type
 13301 ;;		None               void
 13302 ;; Registers used:
 13303 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13309 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;Total ram usage:        5 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    5
 13316 ;; This function calls:
 13317 ;;		Nothing
 13318 ;; This function is called by:
 13319 ;;		_setDimmerLights
 13320 ;;		_setDimmerLights_Adj
 13321 ;;		_setRFSW_Control
 13322 ;; This function uses a non-reentrant model
 13323 ;;
 13324                           
 13325                           
 13326                           ;psect for function _setRF_DimmerLights
 13327  1748                     _setRF_DimmerLights:	
 13328                           
 13329                           ;incstack = 0
 13330                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13331                           ;setRF_DimmerLights@lights stored from wreg
 13332  1748  0020               	movlb	0	; select bank0
 13333  1749  00A4               	movwf	setRF_DimmerLights@lights
 13334                           
 13335                           ;RF_Control_B1.c: 488: char status = 1;
 13336  174A  01A3               	clrf	setRF_DimmerLights@status
 13337  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13338                           
 13339                           ;RF_Control_B1.c: 489: status <<= (lights - 1);
 13340  174C  0824               	movf	setRF_DimmerLights@lights,w
 13341  174D  3EFF               	addlw	-1
 13342  174E  0A89               	incf	9,f
 13343  174F  2F52               	goto	u4990
 13344  1750                     u4995:	
 13345  1750  1003               	clrc
 13346  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13347  1752                     u4990:	
 13348  1752  3EFF               	addlw	-1
 13349  1753  1D03               	skipz
 13350  1754  2F50               	goto	u4995
 13351                           
 13352                           ;RF_Control_B1.c: 490: product->Data[11]=lights;
 13353  1755  0824               	movf	setRF_DimmerLights@lights,w
 13354  1756  00A1               	movwf	??_setRF_DimmerLights
 13355  1757  086E               	movf	_product,w
 13356  1758  3E0B               	addlw	11
 13357  1759  0086               	movwf	6
 13358  175A  3002               	movlw	2	; select bank4/5
 13359  175B  0087               	movwf	7
 13360  175C  0821               	movf	??_setRF_DimmerLights,w
 13361  175D  0081               	movwf	1
 13362                           
 13363                           ;RF_Control_B1.c: 498: product->Data[9]=product->Data[20 + lights];
 13364  175E  0824               	movf	setRF_DimmerLights@lights,w
 13365  175F  3E14               	addlw	20
 13366  1760  076E               	addwf	_product,w
 13367  1761  00A1               	movwf	??_setRF_DimmerLights
 13368  1762  0821               	movf	??_setRF_DimmerLights,w
 13369  1763  0086               	movwf	6
 13370  1764  3002               	movlw	2	; select bank4/5
 13371  1765  0087               	movwf	7
 13372  1766  0801               	movf	1,w
 13373  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13374  1768  086E               	movf	_product,w
 13375  1769  3E09               	addlw	9
 13376  176A  0086               	movwf	6
 13377  176B  3002               	movlw	2	; select bank4/5
 13378  176C  0087               	movwf	7
 13379  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13380  176E  0081               	movwf	1
 13381                           
 13382                           ;RF_Control_B1.c: 499: product->Data[17]=product->Data[26 + lights];
 13383  176F  0824               	movf	setRF_DimmerLights@lights,w
 13384  1770  3E1A               	addlw	26
 13385  1771  076E               	addwf	_product,w
 13386  1772  00A1               	movwf	??_setRF_DimmerLights
 13387  1773  0821               	movf	??_setRF_DimmerLights,w
 13388  1774  0086               	movwf	6
 13389  1775  3002               	movlw	2	; select bank4/5
 13390  1776  0087               	movwf	7
 13391  1777  0801               	movf	1,w
 13392  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13393  1779  086E               	movf	_product,w
 13394  177A  3E11               	addlw	17
 13395  177B  0086               	movwf	6
 13396  177C  3002               	movlw	2	; select bank4/5
 13397  177D  0087               	movwf	7
 13398  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13399  177F  0081               	movwf	1
 13400                           
 13401                           ;RF_Control_B1.c: 500: if (on == 1) {
 13402  1780  0820               	movf	setRF_DimmerLights@on,w
 13403  1781  3A01               	xorlw	1
 13404  1782  1D03               	skipz
 13405  1783  2F94               	goto	l5981
 13406                           
 13407                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15] | status);
 13408  1784  086E               	movf	_product,w
 13409  1785  3E0F               	addlw	15
 13410  1786  0086               	movwf	6
 13411  1787  3002               	movlw	2	; select bank4/5
 13412  1788  0087               	movwf	7
 13413  1789  0801               	movf	1,w
 13414  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13415  178B  00A1               	movwf	??_setRF_DimmerLights
 13416  178C  086E               	movf	_product,w
 13417  178D  3E0F               	addlw	15
 13418  178E  0086               	movwf	6
 13419  178F  3002               	movlw	2	; select bank4/5
 13420  1790  0087               	movwf	7
 13421  1791  0821               	movf	??_setRF_DimmerLights,w
 13422  1792  0081               	movwf	1
 13423                           
 13424                           ;RF_Control_B1.c: 502: } else {
 13425  1793  0008               	return
 13426  1794                     l5981:	
 13427                           
 13428                           ;RF_Control_B1.c: 503: product->Data[15]=(product->Data[15]&(~status));
 13429  1794  086E               	movf	_product,w
 13430  1795  3E0F               	addlw	15
 13431  1796  0086               	movwf	6
 13432  1797  3002               	movlw	2	; select bank4/5
 13433  1798  0087               	movwf	7
 13434  1799  0923               	comf	setRF_DimmerLights@status,w
 13435  179A  0501               	andwf	1,w
 13436  179B  00A1               	movwf	??_setRF_DimmerLights
 13437  179C  086E               	movf	_product,w
 13438  179D  3E0F               	addlw	15
 13439  179E  0086               	movwf	6
 13440  179F  3002               	movlw	2	; select bank4/5
 13441  17A0  0087               	movwf	7
 13442  17A1  0821               	movf	??_setRF_DimmerLights,w
 13443  17A2  0081               	movwf	1
 13444  17A3  0008               	return
 13445  17A4                     __end_of_setRF_DimmerLights:	
 13446                           
 13447                           	psect	text79
 13448  0A2D                     __ptext79:	
 13449 ;; *************** function _setPercentValue *****************
 13450 ;; Defined at:
 13451 ;;		line 874 in file "../src/Dimmer_B1.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  value           1    wreg     unsigned char 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  value           1   62[BANK0 ] unsigned char 
 13456 ;;  i               3   63[BANK0 ] float 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      unsigned char 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0, pclath, cstack
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;Total ram usage:        6 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    7
 13473 ;; This function calls:
 13474 ;;		___awtoft
 13475 ;;		___ftadd
 13476 ;;		___ftdiv
 13477 ;;		___ftneg
 13478 ;;		___fttol
 13479 ;; This function is called by:
 13480 ;;		_setDimmerLights
 13481 ;;		_setDimmerLights_Adj
 13482 ;;		_Flash_Memory_Initialization
 13483 ;; This function uses a non-reentrant model
 13484 ;;
 13485                           
 13486                           
 13487                           ;psect for function _setPercentValue
 13488  0A2D                     _setPercentValue:	
 13489                           
 13490                           ;incstack = 0
 13491                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13492                           ;setPercentValue@value stored from wreg
 13493  0A2D  0020               	movlb	0	; select bank0
 13494  0A2E  00DE               	movwf	setPercentValue@value
 13495                           
 13496                           ;Dimmer_B1.c: 882: float i = ((char)(85*0.8)) - ((char)(15*0.8));
 13497  0A2F  3000               	movlw	0
 13498  0A30  00DF               	movwf	setPercentValue@i
 13499  0A31  3060               	movlw	96
 13500  0A32  00E0               	movwf	setPercentValue@i+1
 13501  0A33  3042               	movlw	66
 13502  0A34  00E1               	movwf	setPercentValue@i+2
 13503                           
 13504                           ;Dimmer_B1.c: 883: i /= 100;
 13505  0A35  3000               	movlw	0
 13506  0A36  00AE               	movwf	___ftdiv@f2
 13507  0A37  30C8               	movlw	200
 13508  0A38  00AF               	movwf	___ftdiv@f2+1
 13509  0A39  3042               	movlw	66
 13510  0A3A  00B0               	movwf	___ftdiv@f2+2
 13511  0A3B  085F               	movf	setPercentValue@i,w
 13512  0A3C  00B1               	movwf	___ftdiv@f1
 13513  0A3D  0860               	movf	setPercentValue@i+1,w
 13514  0A3E  00B2               	movwf	___ftdiv@f1+1
 13515  0A3F  0861               	movf	setPercentValue@i+2,w
 13516  0A40  00B3               	movwf	___ftdiv@f1+2
 13517  0A41  318D  25E8  318A   	fcall	___ftdiv
 13518  0A44  0020               	movlb	0	; select bank0
 13519  0A45  082E               	movf	?___ftdiv,w
 13520  0A46  00DF               	movwf	setPercentValue@i
 13521  0A47  082F               	movf	?___ftdiv+1,w
 13522  0A48  00E0               	movwf	setPercentValue@i+1
 13523  0A49  0830               	movf	?___ftdiv+2,w
 13524  0A4A  00E1               	movwf	setPercentValue@i+2
 13525                           
 13526                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(85*0.8)) - value) / i));
 13527  0A4B  085E               	movf	setPercentValue@value,w
 13528  0A4C  00DC               	movwf	??_setPercentValue
 13529  0A4D  01DD               	clrf	??_setPercentValue+1
 13530  0A4E  09DC               	comf	??_setPercentValue,f
 13531  0A4F  09DD               	comf	??_setPercentValue+1,f
 13532  0A50  0ADC               	incf	??_setPercentValue,f
 13533  0A51  1903               	skipnz
 13534  0A52  0ADD               	incf	??_setPercentValue+1,f
 13535  0A53  085C               	movf	??_setPercentValue,w
 13536  0A54  3E44               	addlw	68
 13537  0A55  00A8               	movwf	___awtoft@c
 13538  0A56  3000               	movlw	0
 13539  0A57  3D5D               	addwfc	??_setPercentValue+1,w
 13540  0A58  00A9               	movwf	___awtoft@c+1
 13541  0A59  319F  2775  318A   	fcall	___awtoft
 13542  0A5C  0020               	movlb	0	; select bank0
 13543  0A5D  0828               	movf	?___awtoft,w
 13544  0A5E  00B1               	movwf	___ftdiv@f1
 13545  0A5F  0829               	movf	?___awtoft+1,w
 13546  0A60  00B2               	movwf	___ftdiv@f1+1
 13547  0A61  082A               	movf	?___awtoft+2,w
 13548  0A62  00B3               	movwf	___ftdiv@f1+2
 13549  0A63  085F               	movf	setPercentValue@i,w
 13550  0A64  00AE               	movwf	___ftdiv@f2
 13551  0A65  0860               	movf	setPercentValue@i+1,w
 13552  0A66  00AF               	movwf	___ftdiv@f2+1
 13553  0A67  0861               	movf	setPercentValue@i+2,w
 13554  0A68  00B0               	movwf	___ftdiv@f2+2
 13555  0A69  318D  25E8  318A   	fcall	___ftdiv
 13556  0A6C  0020               	movlb	0	; select bank0
 13557  0A6D  082E               	movf	?___ftdiv,w
 13558  0A6E  00BE               	movwf	___ftneg@f1
 13559  0A6F  082F               	movf	?___ftdiv+1,w
 13560  0A70  00BF               	movwf	___ftneg@f1+1
 13561  0A71  0830               	movf	?___ftdiv+2,w
 13562  0A72  00C0               	movwf	___ftneg@f1+2
 13563  0A73  319B  23DF  318A   	fcall	___ftneg
 13564  0A76  0020               	movlb	0	; select bank0
 13565  0A77  083E               	movf	?___ftneg,w
 13566  0A78  00C4               	movwf	___ftadd@f2
 13567  0A79  083F               	movf	?___ftneg+1,w
 13568  0A7A  00C5               	movwf	___ftadd@f2+1
 13569  0A7B  0840               	movf	?___ftneg+2,w
 13570  0A7C  00C6               	movwf	___ftadd@f2+2
 13571  0A7D  3000               	movlw	0
 13572  0A7E  00C1               	movwf	___ftadd@f1
 13573  0A7F  30C8               	movlw	200
 13574  0A80  00C2               	movwf	___ftadd@f1+1
 13575  0A81  3042               	movlw	66
 13576  0A82  00C3               	movwf	___ftadd@f1+2
 13577  0A83  3184  2475  318A   	fcall	___ftadd
 13578  0A86  0020               	movlb	0	; select bank0
 13579  0A87  0841               	movf	?___ftadd,w
 13580  0A88  00CE               	movwf	___fttol@f1
 13581  0A89  0842               	movf	?___ftadd+1,w
 13582  0A8A  00CF               	movwf	___fttol@f1+1
 13583  0A8B  0843               	movf	?___ftadd+2,w
 13584  0A8C  00D0               	movwf	___fttol@f1+2
 13585  0A8D  318C  2448         	fcall	___fttol
 13586  0A8F  0020               	movlb	0	; select bank0
 13587  0A90  084E               	movf	?___fttol,w
 13588  0A91  0008               	return
 13589  0A92                     __end_of_setPercentValue:	
 13590                           
 13591                           	psect	text80
 13592  0C48                     __ptext80:	
 13593 ;; *************** function ___fttol *****************
 13594 ;; Defined at:
 13595 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;  f1              3   46[BANK0 ] float 
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;  lval            4   55[BANK0 ] unsigned long 
 13600 ;;  exp1            1   59[BANK0 ] unsigned char 
 13601 ;;  sign1           1   54[BANK0 ] unsigned char 
 13602 ;; Return value:  Size  Location     Type
 13603 ;;                  4   46[BANK0 ] long 
 13604 ;; Registers used:
 13605 ;;		wreg, status,2, status,0
 13606 ;; Tracked objects:
 13607 ;;		On entry : 0/0
 13608 ;;		On exit  : 0/0
 13609 ;;		Unchanged: 0/0
 13610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;Total ram usage:       14 bytes
 13616 ;; Hardware stack levels used:    1
 13617 ;; Hardware stack levels required when called:    5
 13618 ;; This function calls:
 13619 ;;		Nothing
 13620 ;; This function is called by:
 13621 ;;		_getPercentValue
 13622 ;;		_setPercentValue
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function ___fttol
 13628  0C48                     ___fttol:	
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13632  0C48  0020               	movlb	0	; select bank0
 13633  0C49  084E               	movf	___fttol@f1,w
 13634  0C4A  00D2               	movwf	??___fttol
 13635  0C4B  084F               	movf	___fttol@f1+1,w
 13636  0C4C  00D3               	movwf	??___fttol+1
 13637  0C4D  0850               	movf	___fttol@f1+2,w
 13638  0C4E  00D4               	movwf	??___fttol+2
 13639  0C4F  1003               	clrc
 13640  0C50  0D53               	rlf	??___fttol+1,w
 13641  0C51  0D54               	rlf	??___fttol+2,w
 13642  0C52  00D5               	movwf	??___fttol+3
 13643  0C53  0855               	movf	??___fttol+3,w
 13644  0C54  00DB               	movwf	___fttol@exp1
 13645  0C55  08DB               	movf	___fttol@exp1,f
 13646  0C56  1D03               	skipz
 13647  0C57  2C61               	goto	l5723
 13648  0C58  3000               	movlw	0
 13649  0C59  00D1               	movwf	?___fttol+3
 13650  0C5A  3000               	movlw	0
 13651  0C5B  00D0               	movwf	?___fttol+2
 13652  0C5C  3000               	movlw	0
 13653  0C5D  00CF               	movwf	?___fttol+1
 13654  0C5E  3000               	movlw	0
 13655  0C5F  00CE               	movwf	?___fttol
 13656  0C60  0008               	return
 13657  0C61                     l5723:	
 13658  0C61  084E               	movf	___fttol@f1,w
 13659  0C62  00D2               	movwf	??___fttol
 13660  0C63  084F               	movf	___fttol@f1+1,w
 13661  0C64  00D3               	movwf	??___fttol+1
 13662  0C65  0850               	movf	___fttol@f1+2,w
 13663  0C66  00D4               	movwf	??___fttol+2
 13664  0C67  3017               	movlw	23
 13665  0C68                     u4625:	
 13666  0C68  36D4               	lsrf	??___fttol+2,f
 13667  0C69  0CD3               	rrf	??___fttol+1,f
 13668  0C6A  0CD2               	rrf	??___fttol,f
 13669  0C6B  0B89               	decfsz	9,f
 13670  0C6C  2C68               	goto	u4625
 13671  0C6D  0852               	movf	??___fttol,w
 13672  0C6E  00D5               	movwf	??___fttol+3
 13673  0C6F  0855               	movf	??___fttol+3,w
 13674  0C70  00D6               	movwf	___fttol@sign1
 13675  0C71  17CF               	bsf	___fttol@f1+1,7
 13676  0C72  30FF               	movlw	255
 13677  0C73  05CE               	andwf	___fttol@f1,f
 13678  0C74  30FF               	movlw	255
 13679  0C75  05CF               	andwf	___fttol@f1+1,f
 13680  0C76  3000               	movlw	0
 13681  0C77  05D0               	andwf	___fttol@f1+2,f
 13682  0C78  084E               	movf	___fttol@f1,w
 13683  0C79  00D7               	movwf	___fttol@lval
 13684  0C7A  084F               	movf	___fttol@f1+1,w
 13685  0C7B  00D8               	movwf	___fttol@lval+1
 13686  0C7C  0850               	movf	___fttol@f1+2,w
 13687  0C7D  00D9               	movwf	___fttol@lval+2
 13688  0C7E  01DA               	clrf	___fttol@lval+3
 13689  0C7F  308E               	movlw	142
 13690  0C80  02DB               	subwf	___fttol@exp1,f
 13691  0C81  1FDB               	btfss	___fttol@exp1,7
 13692  0C82  2C9F               	goto	l5743
 13693  0C83  085B               	movf	___fttol@exp1,w
 13694  0C84  3A80               	xorlw	128
 13695  0C85  3E8F               	addlw	143
 13696  0C86  1803               	skipnc
 13697  0C87  2C91               	goto	l5741
 13698  0C88  3000               	movlw	0
 13699  0C89  00D1               	movwf	?___fttol+3
 13700  0C8A  3000               	movlw	0
 13701  0C8B  00D0               	movwf	?___fttol+2
 13702  0C8C  3000               	movlw	0
 13703  0C8D  00CF               	movwf	?___fttol+1
 13704  0C8E  3000               	movlw	0
 13705  0C8F  00CE               	movwf	?___fttol
 13706  0C90  0008               	return
 13707  0C91                     l5741:	
 13708  0C91  3001               	movlw	1
 13709  0C92                     u4655:	
 13710  0C92  36DA               	lsrf	___fttol@lval+3,f
 13711  0C93  0CD9               	rrf	___fttol@lval+2,f
 13712  0C94  0CD8               	rrf	___fttol@lval+1,f
 13713  0C95  0CD7               	rrf	___fttol@lval,f
 13714  0C96  0B89               	decfsz	9,f
 13715  0C97  2C92               	goto	u4655
 13716  0C98  3001               	movlw	1
 13717  0C99  00D2               	movwf	??___fttol
 13718  0C9A  0852               	movf	??___fttol,w
 13719  0C9B  07DB               	addwf	___fttol@exp1,f
 13720  0C9C  1903               	btfsc	3,2
 13721  0C9D  2CB8               	goto	l5753
 13722  0C9E  2C91               	goto	l5741
 13723  0C9F                     l5743:	
 13724  0C9F  3018               	movlw	24
 13725  0CA0  025B               	subwf	___fttol@exp1,w
 13726  0CA1  1C03               	skipc
 13727  0CA2  2CB5               	goto	l5751
 13728  0CA3  3000               	movlw	0
 13729  0CA4  00D1               	movwf	?___fttol+3
 13730  0CA5  3000               	movlw	0
 13731  0CA6  00D0               	movwf	?___fttol+2
 13732  0CA7  3000               	movlw	0
 13733  0CA8  00CF               	movwf	?___fttol+1
 13734  0CA9  3000               	movlw	0
 13735  0CAA  00CE               	movwf	?___fttol
 13736  0CAB  0008               	return
 13737  0CAC                     l5749:	
 13738  0CAC  3001               	movlw	1
 13739  0CAD                     u4685:	
 13740  0CAD  35D7               	lslf	___fttol@lval,f
 13741  0CAE  0DD8               	rlf	___fttol@lval+1,f
 13742  0CAF  0DD9               	rlf	___fttol@lval+2,f
 13743  0CB0  0DDA               	rlf	___fttol@lval+3,f
 13744  0CB1  0B89               	decfsz	9,f
 13745  0CB2  2CAD               	goto	u4685
 13746  0CB3  3001               	movlw	1
 13747  0CB4  02DB               	subwf	___fttol@exp1,f
 13748  0CB5                     l5751:	
 13749  0CB5  08DB               	movf	___fttol@exp1,f
 13750  0CB6  1D03               	skipz
 13751  0CB7  2CAC               	goto	l5749
 13752  0CB8                     l5753:	
 13753  0CB8  0856               	movf	___fttol@sign1,w
 13754  0CB9  1903               	btfsc	3,2
 13755  0CBA  2CC6               	goto	l5757
 13756  0CBB  09D7               	comf	___fttol@lval,f
 13757  0CBC  09D8               	comf	___fttol@lval+1,f
 13758  0CBD  09D9               	comf	___fttol@lval+2,f
 13759  0CBE  09DA               	comf	___fttol@lval+3,f
 13760  0CBF  0AD7               	incf	___fttol@lval,f
 13761  0CC0  1903               	skipnz
 13762  0CC1  0AD8               	incf	___fttol@lval+1,f
 13763  0CC2  1903               	skipnz
 13764  0CC3  0AD9               	incf	___fttol@lval+2,f
 13765  0CC4  1903               	skipnz
 13766  0CC5  0ADA               	incf	___fttol@lval+3,f
 13767  0CC6                     l5757:	
 13768  0CC6  085A               	movf	___fttol@lval+3,w
 13769  0CC7  00D1               	movwf	?___fttol+3
 13770  0CC8  0859               	movf	___fttol@lval+2,w
 13771  0CC9  00D0               	movwf	?___fttol+2
 13772  0CCA  0858               	movf	___fttol@lval+1,w
 13773  0CCB  00CF               	movwf	?___fttol+1
 13774  0CCC  0857               	movf	___fttol@lval,w
 13775  0CCD  00CE               	movwf	?___fttol
 13776  0CCE  0008               	return
 13777  0CCF                     __end_of___fttol:	
 13778                           
 13779                           	psect	text81
 13780  1BDF                     __ptext81:	
 13781 ;; *************** function ___ftneg *****************
 13782 ;; Defined at:
 13783 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;  f1              3   30[BANK0 ] float 
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;		None
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  3   30[BANK0 ] float 
 13790 ;; Registers used:
 13791 ;;		wreg
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13797 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;Total ram usage:        3 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    5
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		_getPercentValue
 13808 ;;		_setPercentValue
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function ___ftneg
 13814  1BDF                     ___ftneg:	
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in ___ftneg: [wreg]
 13818  1BDF  0020               	movlb	0	; select bank0
 13819  1BE0  0840               	movf	___ftneg@f1+2,w
 13820  1BE1  043F               	iorwf	___ftneg@f1+1,w
 13821  1BE2  043E               	iorwf	___ftneg@f1,w
 13822  1BE3  1903               	skipnz
 13823  1BE4  0008               	return
 13824  1BE5  3080               	movlw	128
 13825  1BE6  06C0               	xorwf	___ftneg@f1+2,f
 13826  1BE7  0008               	return
 13827  1BE8                     __end_of___ftneg:	
 13828                           
 13829                           	psect	text82
 13830  0DE8                     __ptext82:	
 13831 ;; *************** function ___ftdiv *****************
 13832 ;; Defined at:
 13833 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;  f2              3   14[BANK0 ] float 
 13836 ;;  f1              3   17[BANK0 ] float 
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;  f3              3   25[BANK0 ] float 
 13839 ;;  sign            1   29[BANK0 ] unsigned char 
 13840 ;;  exp             1   28[BANK0 ] unsigned char 
 13841 ;;  cntr            1   24[BANK0 ] unsigned char 
 13842 ;; Return value:  Size  Location     Type
 13843 ;;                  3   14[BANK0 ] float 
 13844 ;; Registers used:
 13845 ;;		wreg, status,2, status,0, pclath, cstack
 13846 ;; Tracked objects:
 13847 ;;		On entry : 0/0
 13848 ;;		On exit  : 0/0
 13849 ;;		Unchanged: 0/0
 13850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13851 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;Total ram usage:       16 bytes
 13856 ;; Hardware stack levels used:    1
 13857 ;; Hardware stack levels required when called:    6
 13858 ;; This function calls:
 13859 ;;		___ftpack
 13860 ;; This function is called by:
 13861 ;;		_getPercentValue
 13862 ;;		_setPercentValue
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           
 13867                           ;psect for function ___ftdiv
 13868  0DE8                     ___ftdiv:	
 13869                           
 13870                           ;incstack = 0
 13871                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13872  0DE8  0020               	movlb	0	; select bank0
 13873  0DE9  0831               	movf	___ftdiv@f1,w
 13874  0DEA  00B4               	movwf	??___ftdiv
 13875  0DEB  0832               	movf	___ftdiv@f1+1,w
 13876  0DEC  00B5               	movwf	??___ftdiv+1
 13877  0DED  0833               	movf	___ftdiv@f1+2,w
 13878  0DEE  00B6               	movwf	??___ftdiv+2
 13879  0DEF  1003               	clrc
 13880  0DF0  0D35               	rlf	??___ftdiv+1,w
 13881  0DF1  0D36               	rlf	??___ftdiv+2,w
 13882  0DF2  00B7               	movwf	??___ftdiv+3
 13883  0DF3  0837               	movf	??___ftdiv+3,w
 13884  0DF4  00BC               	movwf	___ftdiv@exp
 13885  0DF5  08BC               	movf	___ftdiv@exp,f
 13886  0DF6  1D03               	skipz
 13887  0DF7  2DFF               	goto	l5623
 13888  0DF8  3000               	movlw	0
 13889  0DF9  00AE               	movwf	?___ftdiv
 13890  0DFA  3000               	movlw	0
 13891  0DFB  00AF               	movwf	?___ftdiv+1
 13892  0DFC  3000               	movlw	0
 13893  0DFD  00B0               	movwf	?___ftdiv+2
 13894  0DFE  0008               	return
 13895  0DFF                     l5623:	
 13896  0DFF  082E               	movf	___ftdiv@f2,w
 13897  0E00  00B4               	movwf	??___ftdiv
 13898  0E01  082F               	movf	___ftdiv@f2+1,w
 13899  0E02  00B5               	movwf	??___ftdiv+1
 13900  0E03  0830               	movf	___ftdiv@f2+2,w
 13901  0E04  00B6               	movwf	??___ftdiv+2
 13902  0E05  1003               	clrc
 13903  0E06  0D35               	rlf	??___ftdiv+1,w
 13904  0E07  0D36               	rlf	??___ftdiv+2,w
 13905  0E08  00B7               	movwf	??___ftdiv+3
 13906  0E09  0837               	movf	??___ftdiv+3,w
 13907  0E0A  00BD               	movwf	___ftdiv@sign
 13908  0E0B  08BD               	movf	___ftdiv@sign,f
 13909  0E0C  1D03               	skipz
 13910  0E0D  2E15               	goto	l5629
 13911  0E0E  3000               	movlw	0
 13912  0E0F  00AE               	movwf	?___ftdiv
 13913  0E10  3000               	movlw	0
 13914  0E11  00AF               	movwf	?___ftdiv+1
 13915  0E12  3000               	movlw	0
 13916  0E13  00B0               	movwf	?___ftdiv+2
 13917  0E14  0008               	return
 13918  0E15                     l5629:	
 13919  0E15  3000               	movlw	0
 13920  0E16  00B9               	movwf	___ftdiv@f3
 13921  0E17  3000               	movlw	0
 13922  0E18  00BA               	movwf	___ftdiv@f3+1
 13923  0E19  3000               	movlw	0
 13924  0E1A  00BB               	movwf	___ftdiv@f3+2
 13925  0E1B  3089               	movlw	137
 13926  0E1C  073D               	addwf	___ftdiv@sign,w
 13927  0E1D  00B4               	movwf	??___ftdiv
 13928  0E1E  0834               	movf	??___ftdiv,w
 13929  0E1F  02BC               	subwf	___ftdiv@exp,f
 13930  0E20  0831               	movf	___ftdiv@f1,w
 13931  0E21  00B4               	movwf	??___ftdiv
 13932  0E22  0832               	movf	___ftdiv@f1+1,w
 13933  0E23  00B5               	movwf	??___ftdiv+1
 13934  0E24  0833               	movf	___ftdiv@f1+2,w
 13935  0E25  00B6               	movwf	??___ftdiv+2
 13936  0E26  3010               	movlw	16
 13937  0E27                     u4425:	
 13938  0E27  36B6               	lsrf	??___ftdiv+2,f
 13939  0E28  0CB5               	rrf	??___ftdiv+1,f
 13940  0E29  0CB4               	rrf	??___ftdiv,f
 13941  0E2A  0B89               	decfsz	9,f
 13942  0E2B  2E27               	goto	u4425
 13943  0E2C  0834               	movf	??___ftdiv,w
 13944  0E2D  00B7               	movwf	??___ftdiv+3
 13945  0E2E  0837               	movf	??___ftdiv+3,w
 13946  0E2F  00BD               	movwf	___ftdiv@sign
 13947  0E30  082E               	movf	___ftdiv@f2,w
 13948  0E31  00B4               	movwf	??___ftdiv
 13949  0E32  082F               	movf	___ftdiv@f2+1,w
 13950  0E33  00B5               	movwf	??___ftdiv+1
 13951  0E34  0830               	movf	___ftdiv@f2+2,w
 13952  0E35  00B6               	movwf	??___ftdiv+2
 13953  0E36  3010               	movlw	16
 13954  0E37                     u4435:	
 13955  0E37  36B6               	lsrf	??___ftdiv+2,f
 13956  0E38  0CB5               	rrf	??___ftdiv+1,f
 13957  0E39  0CB4               	rrf	??___ftdiv,f
 13958  0E3A  0B89               	decfsz	9,f
 13959  0E3B  2E37               	goto	u4435
 13960  0E3C  0834               	movf	??___ftdiv,w
 13961  0E3D  00B7               	movwf	??___ftdiv+3
 13962  0E3E  0837               	movf	??___ftdiv+3,w
 13963  0E3F  06BD               	xorwf	___ftdiv@sign,f
 13964  0E40  3080               	movlw	128
 13965  0E41  00B4               	movwf	??___ftdiv
 13966  0E42  0834               	movf	??___ftdiv,w
 13967  0E43  05BD               	andwf	___ftdiv@sign,f
 13968  0E44  17B2               	bsf	___ftdiv@f1+1,7
 13969  0E45  30FF               	movlw	255
 13970  0E46  05B1               	andwf	___ftdiv@f1,f
 13971  0E47  30FF               	movlw	255
 13972  0E48  05B2               	andwf	___ftdiv@f1+1,f
 13973  0E49  3000               	movlw	0
 13974  0E4A  05B3               	andwf	___ftdiv@f1+2,f
 13975  0E4B  17AF               	bsf	___ftdiv@f2+1,7
 13976  0E4C  30FF               	movlw	255
 13977  0E4D  05AE               	andwf	___ftdiv@f2,f
 13978  0E4E  30FF               	movlw	255
 13979  0E4F  05AF               	andwf	___ftdiv@f2+1,f
 13980  0E50  3000               	movlw	0
 13981  0E51  05B0               	andwf	___ftdiv@f2+2,f
 13982  0E52  3018               	movlw	24
 13983  0E53  00B4               	movwf	??___ftdiv
 13984  0E54  0834               	movf	??___ftdiv,w
 13985  0E55  00B8               	movwf	___ftdiv@cntr
 13986  0E56                     l5643:	
 13987  0E56  3001               	movlw	1
 13988  0E57                     u4445:	
 13989  0E57  35B9               	lslf	___ftdiv@f3,f
 13990  0E58  0DBA               	rlf	___ftdiv@f3+1,f
 13991  0E59  0DBB               	rlf	___ftdiv@f3+2,f
 13992  0E5A  0B89               	decfsz	9,f
 13993  0E5B  2E57               	goto	u4445
 13994  0E5C  0830               	movf	___ftdiv@f2+2,w
 13995  0E5D  0233               	subwf	___ftdiv@f1+2,w
 13996  0E5E  1D03               	skipz
 13997  0E5F  2E66               	goto	u4455
 13998  0E60  082F               	movf	___ftdiv@f2+1,w
 13999  0E61  0232               	subwf	___ftdiv@f1+1,w
 14000  0E62  1D03               	skipz
 14001  0E63  2E66               	goto	u4455
 14002  0E64  082E               	movf	___ftdiv@f2,w
 14003  0E65  0231               	subwf	___ftdiv@f1,w
 14004  0E66                     u4455:	
 14005  0E66  1C03               	skipc
 14006  0E67  2E6F               	goto	l5651
 14007  0E68  082E               	movf	___ftdiv@f2,w
 14008  0E69  02B1               	subwf	___ftdiv@f1,f
 14009  0E6A  082F               	movf	___ftdiv@f2+1,w
 14010  0E6B  3BB2               	subwfb	___ftdiv@f1+1,f
 14011  0E6C  0830               	movf	___ftdiv@f2+2,w
 14012  0E6D  3BB3               	subwfb	___ftdiv@f1+2,f
 14013  0E6E  1439               	bsf	___ftdiv@f3,0
 14014  0E6F                     l5651:	
 14015  0E6F  3001               	movlw	1
 14016  0E70                     u4465:	
 14017  0E70  35B1               	lslf	___ftdiv@f1,f
 14018  0E71  0DB2               	rlf	___ftdiv@f1+1,f
 14019  0E72  0DB3               	rlf	___ftdiv@f1+2,f
 14020  0E73  0B89               	decfsz	9,f
 14021  0E74  2E70               	goto	u4465
 14022  0E75  3001               	movlw	1
 14023  0E76  02B8               	subwf	___ftdiv@cntr,f
 14024  0E77  1D03               	btfss	3,2
 14025  0E78  2E56               	goto	l5643
 14026  0E79  0839               	movf	___ftdiv@f3,w
 14027  0E7A  00A0               	movwf	___ftpack@arg
 14028  0E7B  083A               	movf	___ftdiv@f3+1,w
 14029  0E7C  00A1               	movwf	___ftpack@arg+1
 14030  0E7D  083B               	movf	___ftdiv@f3+2,w
 14031  0E7E  00A2               	movwf	___ftpack@arg+2
 14032  0E7F  083C               	movf	___ftdiv@exp,w
 14033  0E80  00B4               	movwf	??___ftdiv
 14034  0E81  0834               	movf	??___ftdiv,w
 14035  0E82  00A3               	movwf	___ftpack@exp
 14036  0E83  083D               	movf	___ftdiv@sign,w
 14037  0E84  00B5               	movwf	??___ftdiv+1
 14038  0E85  0835               	movf	??___ftdiv+1,w
 14039  0E86  00A4               	movwf	___ftpack@sign
 14040  0E87  3189  216B         	fcall	___ftpack
 14041  0E89  0020               	movlb	0	; select bank0
 14042  0E8A  0820               	movf	?___ftpack,w
 14043  0E8B  00AE               	movwf	?___ftdiv
 14044  0E8C  0821               	movf	?___ftpack+1,w
 14045  0E8D  00AF               	movwf	?___ftdiv+1
 14046  0E8E  0822               	movf	?___ftpack+2,w
 14047  0E8F  00B0               	movwf	?___ftdiv+2
 14048  0E90  0008               	return
 14049  0E91                     __end_of___ftdiv:	
 14050                           
 14051                           	psect	text83
 14052  0475                     __ptext83:	
 14053 ;; *************** function ___ftadd *****************
 14054 ;; Defined at:
 14055 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;  f1              3   33[BANK0 ] float 
 14058 ;;  f2              3   36[BANK0 ] float 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  exp1            1   45[BANK0 ] unsigned char 
 14061 ;;  exp2            1   44[BANK0 ] unsigned char 
 14062 ;;  sign            1   43[BANK0 ] unsigned char 
 14063 ;; Return value:  Size  Location     Type
 14064 ;;                  3   33[BANK0 ] float 
 14065 ;; Registers used:
 14066 ;;		wreg, status,2, status,0, pclath, cstack
 14067 ;; Tracked objects:
 14068 ;;		On entry : 0/0
 14069 ;;		On exit  : 0/0
 14070 ;;		Unchanged: 0/0
 14071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14072 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;Total ram usage:       13 bytes
 14077 ;; Hardware stack levels used:    1
 14078 ;; Hardware stack levels required when called:    6
 14079 ;; This function calls:
 14080 ;;		___ftpack
 14081 ;; This function is called by:
 14082 ;;		_getPercentValue
 14083 ;;		_setPercentValue
 14084 ;; This function uses a non-reentrant model
 14085 ;;
 14086                           
 14087                           
 14088                           ;psect for function ___ftadd
 14089  0475                     ___ftadd:	
 14090                           
 14091                           ;incstack = 0
 14092                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14093  0475  0020               	movlb	0	; select bank0
 14094  0476  0841               	movf	___ftadd@f1,w
 14095  0477  00C7               	movwf	??___ftadd
 14096  0478  0842               	movf	___ftadd@f1+1,w
 14097  0479  00C8               	movwf	??___ftadd+1
 14098  047A  0843               	movf	___ftadd@f1+2,w
 14099  047B  00C9               	movwf	??___ftadd+2
 14100  047C  1003               	clrc
 14101  047D  0D48               	rlf	??___ftadd+1,w
 14102  047E  0D49               	rlf	??___ftadd+2,w
 14103  047F  00CA               	movwf	??___ftadd+3
 14104  0480  084A               	movf	??___ftadd+3,w
 14105  0481  00CD               	movwf	___ftadd@exp1
 14106  0482  0844               	movf	___ftadd@f2,w
 14107  0483  00C7               	movwf	??___ftadd
 14108  0484  0845               	movf	___ftadd@f2+1,w
 14109  0485  00C8               	movwf	??___ftadd+1
 14110  0486  0846               	movf	___ftadd@f2+2,w
 14111  0487  00C9               	movwf	??___ftadd+2
 14112  0488  1003               	clrc
 14113  0489  0D48               	rlf	??___ftadd+1,w
 14114  048A  0D49               	rlf	??___ftadd+2,w
 14115  048B  00CA               	movwf	??___ftadd+3
 14116  048C  084A               	movf	??___ftadd+3,w
 14117  048D  00CC               	movwf	___ftadd@exp2
 14118  048E  084D               	movf	___ftadd@exp1,w
 14119  048F  1903               	btfsc	3,2
 14120  0490  2C9D               	goto	l5553
 14121  0491  084C               	movf	___ftadd@exp2,w
 14122  0492  024D               	subwf	___ftadd@exp1,w
 14123  0493  1803               	skipnc
 14124  0494  2CA4               	goto	l5557
 14125  0495  034D               	decf	___ftadd@exp1,w
 14126  0496  3AFF               	xorlw	255
 14127  0497  074C               	addwf	___ftadd@exp2,w
 14128  0498  00C7               	movwf	??___ftadd
 14129  0499  3019               	movlw	25
 14130  049A  0247               	subwf	??___ftadd,w
 14131  049B  1C03               	skipc
 14132  049C  2CA4               	goto	l5557
 14133  049D                     l5553:	
 14134  049D  0844               	movf	___ftadd@f2,w
 14135  049E  00C1               	movwf	?___ftadd
 14136  049F  0845               	movf	___ftadd@f2+1,w
 14137  04A0  00C2               	movwf	?___ftadd+1
 14138  04A1  0846               	movf	___ftadd@f2+2,w
 14139  04A2  00C3               	movwf	?___ftadd+2
 14140  04A3  0008               	return
 14141  04A4                     l5557:	
 14142  04A4  084C               	movf	___ftadd@exp2,w
 14143  04A5  1903               	btfsc	3,2
 14144  04A6  0008               	return
 14145  04A7  084D               	movf	___ftadd@exp1,w
 14146  04A8  024C               	subwf	___ftadd@exp2,w
 14147  04A9  1803               	skipnc
 14148  04AA  2CB3               	goto	l5563
 14149  04AB  034C               	decf	___ftadd@exp2,w
 14150  04AC  3AFF               	xorlw	255
 14151  04AD  074D               	addwf	___ftadd@exp1,w
 14152  04AE  00C7               	movwf	??___ftadd
 14153  04AF  3019               	movlw	25
 14154  04B0  0247               	subwf	??___ftadd,w
 14155  04B1  1803               	btfsc	3,0
 14156  04B2  0008               	return
 14157  04B3                     l5563:	
 14158  04B3  3006               	movlw	6
 14159  04B4  00C7               	movwf	??___ftadd
 14160  04B5  0847               	movf	??___ftadd,w
 14161  04B6  00CB               	movwf	___ftadd@sign
 14162  04B7  1BC3               	btfsc	___ftadd@f1+2,7
 14163  04B8  17CB               	bsf	___ftadd@sign,7
 14164  04B9  1BC6               	btfsc	___ftadd@f2+2,7
 14165  04BA  174B               	bsf	___ftadd@sign,6
 14166  04BB  17C2               	bsf	___ftadd@f1+1,7
 14167  04BC  30FF               	movlw	255
 14168  04BD  05C1               	andwf	___ftadd@f1,f
 14169  04BE  30FF               	movlw	255
 14170  04BF  05C2               	andwf	___ftadd@f1+1,f
 14171  04C0  3000               	movlw	0
 14172  04C1  05C3               	andwf	___ftadd@f1+2,f
 14173  04C2  17C5               	bsf	___ftadd@f2+1,7
 14174  04C3  30FF               	movlw	255
 14175  04C4  05C4               	andwf	___ftadd@f2,f
 14176  04C5  30FF               	movlw	255
 14177  04C6  05C5               	andwf	___ftadd@f2+1,f
 14178  04C7  3000               	movlw	0
 14179  04C8  05C6               	andwf	___ftadd@f2+2,f
 14180  04C9  084C               	movf	___ftadd@exp2,w
 14181  04CA  024D               	subwf	___ftadd@exp1,w
 14182  04CB  1803               	skipnc
 14183  04CC  2CEF               	goto	l5585
 14184  04CD                     l5575:	
 14185  04CD  3001               	movlw	1
 14186  04CE                     u4265:	
 14187  04CE  35C4               	lslf	___ftadd@f2,f
 14188  04CF  0DC5               	rlf	___ftadd@f2+1,f
 14189  04D0  0DC6               	rlf	___ftadd@f2+2,f
 14190  04D1  0B89               	decfsz	9,f
 14191  04D2  2CCE               	goto	u4265
 14192  04D3  3001               	movlw	1
 14193  04D4  02CC               	subwf	___ftadd@exp2,f
 14194  04D5  084C               	movf	___ftadd@exp2,w
 14195  04D6  064D               	xorwf	___ftadd@exp1,w
 14196  04D7  1903               	skipnz
 14197  04D8  2CEA               	goto	l5583
 14198  04D9  3001               	movlw	1
 14199  04DA  02CB               	subwf	___ftadd@sign,f
 14200  04DB  084B               	movf	___ftadd@sign,w
 14201  04DC  3907               	andlw	7
 14202  04DD  1903               	btfsc	3,2
 14203  04DE  2CEA               	goto	l5583
 14204  04DF  2CCD               	goto	l5575
 14205  04E0                     l5581:	
 14206  04E0  3001               	movlw	1
 14207  04E1                     u4295:	
 14208  04E1  36C3               	lsrf	___ftadd@f1+2,f
 14209  04E2  0CC2               	rrf	___ftadd@f1+1,f
 14210  04E3  0CC1               	rrf	___ftadd@f1,f
 14211  04E4  0B89               	decfsz	9,f
 14212  04E5  2CE1               	goto	u4295
 14213  04E6  3001               	movlw	1
 14214  04E7  00C7               	movwf	??___ftadd
 14215  04E8  0847               	movf	??___ftadd,w
 14216  04E9  07CD               	addwf	___ftadd@exp1,f
 14217  04EA                     l5583:	
 14218  04EA  084D               	movf	___ftadd@exp1,w
 14219  04EB  064C               	xorwf	___ftadd@exp2,w
 14220  04EC  1903               	btfsc	3,2
 14221  04ED  2D14               	goto	l2760
 14222  04EE  2CE0               	goto	l5581
 14223  04EF                     l5585:	
 14224  04EF  084D               	movf	___ftadd@exp1,w
 14225  04F0  024C               	subwf	___ftadd@exp2,w
 14226  04F1  1803               	skipnc
 14227  04F2  2D14               	goto	l2760
 14228  04F3                     l5587:	
 14229  04F3  3001               	movlw	1
 14230  04F4                     u4325:	
 14231  04F4  35C1               	lslf	___ftadd@f1,f
 14232  04F5  0DC2               	rlf	___ftadd@f1+1,f
 14233  04F6  0DC3               	rlf	___ftadd@f1+2,f
 14234  04F7  0B89               	decfsz	9,f
 14235  04F8  2CF4               	goto	u4325
 14236  04F9  3001               	movlw	1
 14237  04FA  02CD               	subwf	___ftadd@exp1,f
 14238  04FB  084C               	movf	___ftadd@exp2,w
 14239  04FC  064D               	xorwf	___ftadd@exp1,w
 14240  04FD  1903               	skipnz
 14241  04FE  2D10               	goto	l5595
 14242  04FF  3001               	movlw	1
 14243  0500  02CB               	subwf	___ftadd@sign,f
 14244  0501  084B               	movf	___ftadd@sign,w
 14245  0502  3907               	andlw	7
 14246  0503  1903               	btfsc	3,2
 14247  0504  2D10               	goto	l5595
 14248  0505  2CF3               	goto	l5587
 14249  0506                     l5593:	
 14250  0506  3001               	movlw	1
 14251  0507                     u4355:	
 14252  0507  36C6               	lsrf	___ftadd@f2+2,f
 14253  0508  0CC5               	rrf	___ftadd@f2+1,f
 14254  0509  0CC4               	rrf	___ftadd@f2,f
 14255  050A  0B89               	decfsz	9,f
 14256  050B  2D07               	goto	u4355
 14257  050C  3001               	movlw	1
 14258  050D  00C7               	movwf	??___ftadd
 14259  050E  0847               	movf	??___ftadd,w
 14260  050F  07CC               	addwf	___ftadd@exp2,f
 14261  0510                     l5595:	
 14262  0510  084D               	movf	___ftadd@exp1,w
 14263  0511  064C               	xorwf	___ftadd@exp2,w
 14264  0512  1D03               	skipz
 14265  0513  2D06               	goto	l5593
 14266  0514                     l2760:	
 14267  0514  1FCB               	btfss	___ftadd@sign,7
 14268  0515  2D26               	goto	l5599
 14269  0516  30FF               	movlw	255
 14270  0517  06C1               	xorwf	___ftadd@f1,f
 14271  0518  30FF               	movlw	255
 14272  0519  06C2               	xorwf	___ftadd@f1+1,f
 14273  051A  30FF               	movlw	255
 14274  051B  06C3               	xorwf	___ftadd@f1+2,f
 14275  051C  3001               	movlw	1
 14276  051D  07C1               	addwf	___ftadd@f1,f
 14277  051E  3000               	movlw	0
 14278  051F  1803               	skipnc
 14279  0520  3001               	movlw	1
 14280  0521  07C2               	addwf	___ftadd@f1+1,f
 14281  0522  3000               	movlw	0
 14282  0523  1803               	skipnc
 14283  0524  3001               	movlw	1
 14284  0525  07C3               	addwf	___ftadd@f1+2,f
 14285  0526                     l5599:	
 14286  0526  1F4B               	btfss	___ftadd@sign,6
 14287  0527  2D38               	goto	l5603
 14288  0528  30FF               	movlw	255
 14289  0529  06C4               	xorwf	___ftadd@f2,f
 14290  052A  30FF               	movlw	255
 14291  052B  06C5               	xorwf	___ftadd@f2+1,f
 14292  052C  30FF               	movlw	255
 14293  052D  06C6               	xorwf	___ftadd@f2+2,f
 14294  052E  3001               	movlw	1
 14295  052F  07C4               	addwf	___ftadd@f2,f
 14296  0530  3000               	movlw	0
 14297  0531  1803               	skipnc
 14298  0532  3001               	movlw	1
 14299  0533  07C5               	addwf	___ftadd@f2+1,f
 14300  0534  3000               	movlw	0
 14301  0535  1803               	skipnc
 14302  0536  3001               	movlw	1
 14303  0537  07C6               	addwf	___ftadd@f2+2,f
 14304  0538                     l5603:	
 14305  0538  01CB               	clrf	___ftadd@sign
 14306  0539  0841               	movf	___ftadd@f1,w
 14307  053A  07C4               	addwf	___ftadd@f2,f
 14308  053B  0842               	movf	___ftadd@f1+1,w
 14309  053C  3DC5               	addwfc	___ftadd@f2+1,f
 14310  053D  0843               	movf	___ftadd@f1+2,w
 14311  053E  3DC6               	addwfc	___ftadd@f2+2,f
 14312  053F  1FC6               	btfss	___ftadd@f2+2,7
 14313  0540  2D53               	goto	l5613
 14314  0541  30FF               	movlw	255
 14315  0542  06C4               	xorwf	___ftadd@f2,f
 14316  0543  30FF               	movlw	255
 14317  0544  06C5               	xorwf	___ftadd@f2+1,f
 14318  0545  30FF               	movlw	255
 14319  0546  06C6               	xorwf	___ftadd@f2+2,f
 14320  0547  3001               	movlw	1
 14321  0548  07C4               	addwf	___ftadd@f2,f
 14322  0549  3000               	movlw	0
 14323  054A  1803               	skipnc
 14324  054B  3001               	movlw	1
 14325  054C  07C5               	addwf	___ftadd@f2+1,f
 14326  054D  3000               	movlw	0
 14327  054E  1803               	skipnc
 14328  054F  3001               	movlw	1
 14329  0550  07C6               	addwf	___ftadd@f2+2,f
 14330  0551  01CB               	clrf	___ftadd@sign
 14331  0552  0ACB               	incf	___ftadd@sign,f
 14332  0553                     l5613:	
 14333  0553  0844               	movf	___ftadd@f2,w
 14334  0554  00A0               	movwf	___ftpack@arg
 14335  0555  0845               	movf	___ftadd@f2+1,w
 14336  0556  00A1               	movwf	___ftpack@arg+1
 14337  0557  0846               	movf	___ftadd@f2+2,w
 14338  0558  00A2               	movwf	___ftpack@arg+2
 14339  0559  084D               	movf	___ftadd@exp1,w
 14340  055A  00C7               	movwf	??___ftadd
 14341  055B  0847               	movf	??___ftadd,w
 14342  055C  00A3               	movwf	___ftpack@exp
 14343  055D  084B               	movf	___ftadd@sign,w
 14344  055E  00C8               	movwf	??___ftadd+1
 14345  055F  0848               	movf	??___ftadd+1,w
 14346  0560  00A4               	movwf	___ftpack@sign
 14347  0561  3189  216B         	fcall	___ftpack
 14348  0563  0020               	movlb	0	; select bank0
 14349  0564  0820               	movf	?___ftpack,w
 14350  0565  00C1               	movwf	?___ftadd
 14351  0566  0821               	movf	?___ftpack+1,w
 14352  0567  00C2               	movwf	?___ftadd+1
 14353  0568  0822               	movf	?___ftpack+2,w
 14354  0569  00C3               	movwf	?___ftadd+2
 14355  056A  0008               	return
 14356  056B                     __end_of___ftadd:	
 14357                           
 14358                           	psect	text84
 14359  1F75                     __ptext84:	
 14360 ;; *************** function ___awtoft *****************
 14361 ;; Defined at:
 14362 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14363 ;; Parameters:    Size  Location     Type
 14364 ;;  c               2    8[BANK0 ] int 
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  sign            1   13[BANK0 ] unsigned char 
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  3    8[BANK0 ] float 
 14369 ;; Registers used:
 14370 ;;		wreg, status,2, status,0, pclath, cstack
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14376 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;Total ram usage:        6 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:    6
 14383 ;; This function calls:
 14384 ;;		___ftpack
 14385 ;; This function is called by:
 14386 ;;		_getPercentValue
 14387 ;;		_setPercentValue
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           
 14392                           ;psect for function ___awtoft
 14393  1F75                     ___awtoft:	
 14394                           
 14395                           ;incstack = 0
 14396                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14397  1F75  0020               	movlb	0	; select bank0
 14398  1F76  01AD               	clrf	___awtoft@sign
 14399  1F77  1FA9               	btfss	___awtoft@c+1,7
 14400  1F78  2F80               	goto	l5541
 14401  1F79  09A8               	comf	___awtoft@c,f
 14402  1F7A  09A9               	comf	___awtoft@c+1,f
 14403  1F7B  0AA8               	incf	___awtoft@c,f
 14404  1F7C  1903               	skipnz
 14405  1F7D  0AA9               	incf	___awtoft@c+1,f
 14406  1F7E  01AD               	clrf	___awtoft@sign
 14407  1F7F  0AAD               	incf	___awtoft@sign,f
 14408  1F80                     l5541:	
 14409  1F80  0828               	movf	___awtoft@c,w
 14410  1F81  00A0               	movwf	___ftpack@arg
 14411  1F82  0829               	movf	___awtoft@c+1,w
 14412  1F83  00A1               	movwf	___ftpack@arg+1
 14413  1F84  01A2               	clrf	___ftpack@arg+2
 14414  1F85  308E               	movlw	142
 14415  1F86  00AB               	movwf	??___awtoft
 14416  1F87  082B               	movf	??___awtoft,w
 14417  1F88  00A3               	movwf	___ftpack@exp
 14418  1F89  082D               	movf	___awtoft@sign,w
 14419  1F8A  00AC               	movwf	??___awtoft+1
 14420  1F8B  082C               	movf	??___awtoft+1,w
 14421  1F8C  00A4               	movwf	___ftpack@sign
 14422  1F8D  3189  216B         	fcall	___ftpack
 14423  1F8F  0020               	movlb	0	; select bank0
 14424  1F90  0820               	movf	?___ftpack,w
 14425  1F91  00A8               	movwf	?___awtoft
 14426  1F92  0821               	movf	?___ftpack+1,w
 14427  1F93  00A9               	movwf	?___awtoft+1
 14428  1F94  0822               	movf	?___ftpack+2,w
 14429  1F95  00AA               	movwf	?___awtoft+2
 14430  1F96  0008               	return
 14431  1F97                     __end_of___awtoft:	
 14432                           
 14433                           	psect	text85
 14434  096B                     __ptext85:	
 14435 ;; *************** function ___ftpack *****************
 14436 ;; Defined at:
 14437 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;  arg             3    0[BANK0 ] unsigned um
 14440 ;;  exp             1    3[BANK0 ] unsigned char 
 14441 ;;  sign            1    4[BANK0 ] unsigned char 
 14442 ;; Auto vars:     Size  Location     Type
 14443 ;;		None
 14444 ;; Return value:  Size  Location     Type
 14445 ;;                  3    0[BANK0 ] float 
 14446 ;; Registers used:
 14447 ;;		wreg, status,2, status,0
 14448 ;; Tracked objects:
 14449 ;;		On entry : 0/0
 14450 ;;		On exit  : 0/0
 14451 ;;		Unchanged: 0/0
 14452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14453 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;Total ram usage:        8 bytes
 14458 ;; Hardware stack levels used:    1
 14459 ;; Hardware stack levels required when called:    5
 14460 ;; This function calls:
 14461 ;;		Nothing
 14462 ;; This function is called by:
 14463 ;;		___awtoft
 14464 ;;		___ftadd
 14465 ;;		___ftdiv
 14466 ;;		___ftmul
 14467 ;; This function uses a non-reentrant model
 14468 ;;
 14469                           
 14470                           
 14471                           ;psect for function ___ftpack
 14472  096B                     ___ftpack:	
 14473                           
 14474                           ;incstack = 0
 14475                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14476  096B  0020               	movlb	0	; select bank0
 14477  096C  0823               	movf	___ftpack@exp,w
 14478  096D  1903               	btfsc	3,2
 14479  096E  2974               	goto	l5491
 14480  096F  0822               	movf	___ftpack@arg+2,w
 14481  0970  0421               	iorwf	___ftpack@arg+1,w
 14482  0971  0420               	iorwf	___ftpack@arg,w
 14483  0972  1D03               	skipz
 14484  0973  2985               	goto	l5497
 14485  0974                     l5491:	
 14486  0974  3000               	movlw	0
 14487  0975  00A0               	movwf	?___ftpack
 14488  0976  3000               	movlw	0
 14489  0977  00A1               	movwf	?___ftpack+1
 14490  0978  3000               	movlw	0
 14491  0979  00A2               	movwf	?___ftpack+2
 14492  097A  0008               	return
 14493  097B                     l5495:	
 14494  097B  3001               	movlw	1
 14495  097C  00A5               	movwf	??___ftpack
 14496  097D  0825               	movf	??___ftpack,w
 14497  097E  07A3               	addwf	___ftpack@exp,f
 14498  097F  3001               	movlw	1
 14499  0980                     u4055:	
 14500  0980  36A2               	lsrf	___ftpack@arg+2,f
 14501  0981  0CA1               	rrf	___ftpack@arg+1,f
 14502  0982  0CA0               	rrf	___ftpack@arg,f
 14503  0983  0B89               	decfsz	9,f
 14504  0984  2980               	goto	u4055
 14505  0985                     l5497:	
 14506  0985  30FE               	movlw	254
 14507  0986  0522               	andwf	___ftpack@arg+2,w
 14508  0987  1903               	btfsc	3,2
 14509  0988  299E               	goto	l2731
 14510  0989  297B               	goto	l5495
 14511  098A                     l5499:	
 14512  098A  3001               	movlw	1
 14513  098B  00A5               	movwf	??___ftpack
 14514  098C  0825               	movf	??___ftpack,w
 14515  098D  07A3               	addwf	___ftpack@exp,f
 14516  098E  3001               	movlw	1
 14517  098F  07A0               	addwf	___ftpack@arg,f
 14518  0990  3000               	movlw	0
 14519  0991  1803               	skipnc
 14520  0992  3001               	movlw	1
 14521  0993  07A1               	addwf	___ftpack@arg+1,f
 14522  0994  3000               	movlw	0
 14523  0995  1803               	skipnc
 14524  0996  3001               	movlw	1
 14525  0997  07A2               	addwf	___ftpack@arg+2,f
 14526  0998  3001               	movlw	1
 14527  0999                     u4075:	
 14528  0999  36A2               	lsrf	___ftpack@arg+2,f
 14529  099A  0CA1               	rrf	___ftpack@arg+1,f
 14530  099B  0CA0               	rrf	___ftpack@arg,f
 14531  099C  0B89               	decfsz	9,f
 14532  099D  2999               	goto	u4075
 14533  099E                     l2731:	
 14534  099E  30FF               	movlw	255
 14535  099F  0522               	andwf	___ftpack@arg+2,w
 14536  09A0  1903               	btfsc	3,2
 14537  09A1  29AB               	goto	l5507
 14538  09A2  298A               	goto	l5499
 14539  09A3                     l5505:	
 14540  09A3  3001               	movlw	1
 14541  09A4  02A3               	subwf	___ftpack@exp,f
 14542  09A5  3001               	movlw	1
 14543  09A6                     u4095:	
 14544  09A6  35A0               	lslf	___ftpack@arg,f
 14545  09A7  0DA1               	rlf	___ftpack@arg+1,f
 14546  09A8  0DA2               	rlf	___ftpack@arg+2,f
 14547  09A9  0B89               	decfsz	9,f
 14548  09AA  29A6               	goto	u4095
 14549  09AB                     l5507:	
 14550  09AB  1FA1               	btfss	___ftpack@arg+1,7
 14551  09AC  29A3               	goto	l5505
 14552  09AD  1823               	btfsc	___ftpack@exp,0
 14553  09AE  29B5               	goto	l2737
 14554  09AF  30FF               	movlw	255
 14555  09B0  05A0               	andwf	___ftpack@arg,f
 14556  09B1  307F               	movlw	127
 14557  09B2  05A1               	andwf	___ftpack@arg+1,f
 14558  09B3  30FF               	movlw	255
 14559  09B4  05A2               	andwf	___ftpack@arg+2,f
 14560  09B5                     l2737:	
 14561  09B5  1003               	clrc
 14562  09B6  0CA3               	rrf	___ftpack@exp,f
 14563  09B7  0823               	movf	___ftpack@exp,w
 14564  09B8  00A5               	movwf	??___ftpack
 14565  09B9  01A6               	clrf	??___ftpack+1
 14566  09BA  01A7               	clrf	??___ftpack+2
 14567  09BB  3010               	movlw	16
 14568  09BC                     u4125:	
 14569  09BC  35A5               	lslf	??___ftpack,f
 14570  09BD  0DA6               	rlf	??___ftpack+1,f
 14571  09BE  0DA7               	rlf	??___ftpack+2,f
 14572  09BF  0B89               	decfsz	9,f
 14573  09C0  29BC               	goto	u4125
 14574  09C1  0825               	movf	??___ftpack,w
 14575  09C2  04A0               	iorwf	___ftpack@arg,f
 14576  09C3  0826               	movf	??___ftpack+1,w
 14577  09C4  04A1               	iorwf	___ftpack@arg+1,f
 14578  09C5  0827               	movf	??___ftpack+2,w
 14579  09C6  04A2               	iorwf	___ftpack@arg+2,f
 14580  09C7  0824               	movf	___ftpack@sign,w
 14581  09C8  1903               	btfsc	3,2
 14582  09C9  0008               	return
 14583  09CA  17A2               	bsf	___ftpack@arg+2,7
 14584  09CB  0008               	return
 14585  09CC                     __end_of___ftpack:	
 14586                           
 14587                           	psect	text86
 14588  1268                     __ptext86:	
 14589 ;; *************** function _setLED *****************
 14590 ;; Defined at:
 14591 ;;		line 76 in file "../src/LED_B1.c"
 14592 ;; Parameters:    Size  Location     Type
 14593 ;;  led             1    wreg     unsigned char 
 14594 ;;  command         1    2[BANK0 ] unsigned char 
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;  led             1    3[BANK0 ] unsigned char 
 14597 ;; Return value:  Size  Location     Type
 14598 ;;		None               void
 14599 ;; Registers used:
 14600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14601 ;; Tracked objects:
 14602 ;;		On entry : 0/0
 14603 ;;		On exit  : 0/0
 14604 ;;		Unchanged: 0/0
 14605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14606 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14610 ;;Total ram usage:        2 bytes
 14611 ;; Hardware stack levels used:    1
 14612 ;; Hardware stack levels required when called:    6
 14613 ;; This function calls:
 14614 ;;		_LedPointSelect
 14615 ;; This function is called by:
 14616 ;;		_setDimmerLights
 14617 ;;		_setLED_Initialization
 14618 ;;		_setMain_Exception
 14619 ;;		_setSw_Initialization
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           
 14624                           ;psect for function _setLED
 14625  1268                     _setLED:	
 14626                           
 14627                           ;incstack = 0
 14628                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14629                           ;setLED@led stored from wreg
 14630  1268  0020               	movlb	0	; select bank0
 14631  1269  00A3               	movwf	setLED@led
 14632                           
 14633                           ;LED_B1.c: 77: LedPointSelect(led);
 14634  126A  0823               	movf	setLED@led,w
 14635  126B  319C  2425  3192   	fcall	_LedPointSelect
 14636                           
 14637                           ;LED_B1.c: 78: if (command == 0) {
 14638  126E  0020               	movlb	0	; select bank0
 14639  126F  08A2               	movf	setLED@command,f
 14640  1270  1D03               	skipz
 14641  1271  2A77               	goto	l6229
 14642                           
 14643                           ;LED_B1.c: 107: if (led == 99) {
 14644  1272  0823               	movf	setLED@led,w
 14645  1273  3A63               	xorlw	99
 14646  1274  1D03               	skipz
 14647  1275  2A77               	goto	l6229
 14648                           
 14649                           ;LED_B1.c: 111: RB5 = 1;
 14650  1276  168D               	bsf	13,5	;volatile
 14651  1277                     l6229:	
 14652                           
 14653                           ;LED_B1.c: 113: }
 14654                           ;LED_B1.c: 115: }
 14655                           ;LED_B1.c: 116: if (command == 1) {
 14656  1277  0822               	movf	setLED@command,w
 14657  1278  3A01               	xorlw	1
 14658  1279  1D03               	skipz
 14659  127A  2A80               	goto	l6235
 14660                           
 14661                           ;LED_B1.c: 145: if (led == 99) {
 14662  127B  0823               	movf	setLED@led,w
 14663  127C  3A63               	xorlw	99
 14664  127D  1D03               	skipz
 14665  127E  2A80               	goto	l6235
 14666                           
 14667                           ;LED_B1.c: 149: RB5 = 0;
 14668  127F  128D               	bcf	13,5	;volatile
 14669  1280                     l6235:	
 14670                           
 14671                           ;LED_B1.c: 151: }
 14672                           ;LED_B1.c: 153: }
 14673                           ;LED_B1.c: 154: if (command == 10) {
 14674  1280  0822               	movf	setLED@command,w
 14675  1281  3A0A               	xorlw	10
 14676  1282  1D03               	skipz
 14677  1283  2A94               	goto	l6243
 14678                           
 14679                           ;LED_B1.c: 155: LED->GO = 0;
 14680  1284  087A               	movf	_LED,w
 14681  1285  0086               	movwf	6
 14682  1286  3001               	movlw	1	; select bank2/3
 14683  1287  0087               	movwf	7
 14684  1288  1081               	bcf	1,1
 14685                           
 14686                           ;LED_B1.c: 156: LED->Time = 0;
 14687  1289  0A7A               	incf	_LED,w
 14688  128A  0086               	movwf	6
 14689  128B  3001               	movlw	1	; select bank2/3
 14690  128C  0087               	movwf	7
 14691  128D  3000               	movlw	0
 14692  128E  3FC0               	movwi [0]fsr1
 14693  128F  3FC1               	movwi [1]fsr1
 14694                           
 14695                           ;LED_B1.c: 185: if (led == 99) {
 14696  1290  0823               	movf	setLED@led,w
 14697  1291  3A63               	xorlw	99
 14698  1292  1903               	btfsc	3,2
 14699                           
 14700                           ;LED_B1.c: 189: RB5 = 1;
 14701  1293  168D               	bsf	13,5	;volatile
 14702  1294                     l6243:	
 14703                           
 14704                           ;LED_B1.c: 191: }
 14705                           ;LED_B1.c: 193: }
 14706                           ;LED_B1.c: 194: if (command == 11) {
 14707  1294  0822               	movf	setLED@command,w
 14708  1295  3A0B               	xorlw	11
 14709  1296  1D03               	skipz
 14710  1297  0008               	return
 14711                           
 14712                           ;LED_B1.c: 195: LED->GO = 1;
 14713  1298  087A               	movf	_LED,w
 14714  1299  0086               	movwf	6
 14715  129A  3001               	movlw	1	; select bank2/3
 14716  129B  0087               	movwf	7
 14717  129C  1481               	bsf	1,1
 14718  129D  0008               	return
 14719  129E                     __end_of_setLED:	
 14720                           
 14721                           	psect	text87
 14722  1C25                     __ptext87:	
 14723 ;; *************** function _LedPointSelect *****************
 14724 ;; Defined at:
 14725 ;;		line 7 in file "../src/LED_B1.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  led             1    wreg     unsigned char 
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;  led             1    1[BANK0 ] unsigned char 
 14730 ;; Return value:  Size  Location     Type
 14731 ;;		None               void
 14732 ;; Registers used:
 14733 ;;		wreg
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;Total ram usage:        2 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:    5
 14746 ;; This function calls:
 14747 ;;		Nothing
 14748 ;; This function is called by:
 14749 ;;		_setLED_Initialization
 14750 ;;		_setLED
 14751 ;;		_setLED_Main
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           
 14756                           ;psect for function _LedPointSelect
 14757  1C25                     _LedPointSelect:	
 14758                           
 14759                           ;incstack = 0
 14760                           ; Regs used in _LedPointSelect: [wreg]
 14761                           ;LedPointSelect@led stored from wreg
 14762  1C25  0020               	movlb	0	; select bank0
 14763  1C26  00A1               	movwf	LedPointSelect@led
 14764                           
 14765                           ;LED_B1.c: 24: if (led == 99) {
 14766  1C27  0821               	movf	LedPointSelect@led,w
 14767  1C28  3A63               	xorlw	99
 14768  1C29  1D03               	skipz
 14769  1C2A  0008               	return
 14770                           
 14771                           ;LED_B1.c: 25: LED = &VarErrLED;
 14772  1C2B  30E2               	movlw	_VarErrLED& (0+255)
 14773  1C2C  00A0               	movwf	??_LedPointSelect
 14774  1C2D  0820               	movf	??_LedPointSelect,w
 14775  1C2E  00FA               	movwf	_LED
 14776  1C2F  0008               	return
 14777  1C30                     __end_of_LedPointSelect:	
 14778                           
 14779                           	psect	text88
 14780  1C68                     __ptext88:	
 14781 ;; *************** function _setDimmerLights_Line *****************
 14782 ;; Defined at:
 14783 ;;		line 667 in file "../src/Dimmer_B1.c"
 14784 ;; Parameters:    Size  Location     Type
 14785 ;;  lights          1    wreg     unsigned char 
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;  lights          1    0[BANK0 ] unsigned char 
 14788 ;; Return value:  Size  Location     Type
 14789 ;;		None               void
 14790 ;; Registers used:
 14791 ;;		wreg
 14792 ;; Tracked objects:
 14793 ;;		On entry : 0/0
 14794 ;;		On exit  : 0/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;Total ram usage:        1 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    5
 14804 ;; This function calls:
 14805 ;;		Nothing
 14806 ;; This function is called by:
 14807 ;;		_setDimmerLights
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811                           
 14812                           ;psect for function _setDimmerLights_Line
 14813  1C68                     _setDimmerLights_Line:	
 14814                           
 14815                           ;incstack = 0
 14816                           ; Regs used in _setDimmerLights_Line: [wreg]
 14817                           ;setDimmerLights_Line@lights stored from wreg
 14818  1C68  0020               	movlb	0	; select bank0
 14819  1C69  00A0               	movwf	setDimmerLights_Line@lights
 14820                           
 14821                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14822  1C6A  0023               	movlb	3	; select bank3
 14823  1C6B  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14824                           
 14825                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14826  1C6C  0020               	movlb	0	; select bank0
 14827  1C6D  0820               	movf	setDimmerLights_Line@lights,w
 14828  1C6E  3A01               	xorlw	1
 14829  1C6F  1D03               	skipz
 14830  1C70  0008               	return
 14831                           
 14832                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14833  1C71  0023               	movlb	3	; select bank3
 14834  1C72  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14835  1C73  0008               	return
 14836  1C74                     __end_of_setDimmerLights_Line:	
 14837                           
 14838                           	psect	text89
 14839  11CD                     __ptext89:	
 14840 ;; *************** function _getMain_All_Error_Status *****************
 14841 ;; Defined at:
 14842 ;;		line 371 in file "../src/Main_B1.c"
 14843 ;; Parameters:    Size  Location     Type
 14844 ;;  command         1    wreg     unsigned char 
 14845 ;; Auto vars:     Size  Location     Type
 14846 ;;  command         1    5[BANK0 ] unsigned char 
 14847 ;;  status          1    6[BANK0 ] unsigned char 
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  1    wreg      unsigned char 
 14850 ;; Registers used:
 14851 ;;		wreg, status,2, status,0
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14859 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14860 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14861 ;;Total ram usage:        7 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    5
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_DimmerLights_Main
 14868 ;;		_setDimmerLights
 14869 ;;		_setDimmerLights_Adj
 14870 ;;		_Load_Main
 14871 ;;		_setTemp_Main
 14872 ;;		_setRF_Main
 14873 ;;		_getRxData
 14874 ;;		_Switch_Main
 14875 ;; This function uses a non-reentrant model
 14876 ;;
 14877                           
 14878                           
 14879                           ;psect for function _getMain_All_Error_Status
 14880  11CD                     _getMain_All_Error_Status:	
 14881                           
 14882                           ;incstack = 0
 14883                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14884                           ;getMain_All_Error_Status@command stored from wreg
 14885  11CD  0020               	movlb	0	; select bank0
 14886  11CE  00A5               	movwf	getMain_All_Error_Status@command
 14887                           
 14888                           ;Main_B1.c: 372: char status = 0;
 14889  11CF  01A6               	clrf	getMain_All_Error_Status@status
 14890                           
 14891                           ;Main_B1.c: 383: if (status == 0 && command != 2) {
 14892  11D0  08A6               	movf	getMain_All_Error_Status@status,f
 14893  11D1  1D03               	skipz
 14894  11D2  29E7               	goto	l6209
 14895  11D3  0825               	movf	getMain_All_Error_Status@command,w
 14896  11D4  3A02               	xorlw	2
 14897  11D5  1903               	skipnz
 14898  11D6  29E7               	goto	l6209
 14899                           
 14900                           ;Main_B1.c: 384: status = Temp.ERROR == 1 ? 2 : 0;
 14901  11D7  0021               	movlb	1	; select bank1
 14902  11D8  18D7               	btfsc	_Temp^(0+128),1
 14903  11D9  29DE               	goto	l6207
 14904  11DA  0020               	movlb	0	; select bank0
 14905  11DB  01A1               	clrf	_getMain_All_Error_Status$3321
 14906  11DC  01A2               	clrf	_getMain_All_Error_Status$3321+1
 14907  11DD  29E3               	goto	l1428
 14908  11DE                     l6207:	
 14909  11DE  3002               	movlw	2
 14910  11DF  0020               	movlb	0	; select bank0
 14911  11E0  00A1               	movwf	_getMain_All_Error_Status$3321
 14912  11E1  3000               	movlw	0
 14913  11E2  00A2               	movwf	_getMain_All_Error_Status$3321+1
 14914  11E3                     l1428:	
 14915  11E3  0821               	movf	_getMain_All_Error_Status$3321,w
 14916  11E4  00A0               	movwf	??_getMain_All_Error_Status
 14917  11E5  0820               	movf	??_getMain_All_Error_Status,w
 14918  11E6  00A6               	movwf	getMain_All_Error_Status@status
 14919  11E7                     l6209:	
 14920                           
 14921                           ;Main_B1.c: 385: }
 14922                           ;Main_B1.c: 390: if (status == 0 && command != 3) {
 14923  11E7  08A6               	movf	getMain_All_Error_Status@status,f
 14924  11E8  1D03               	skipz
 14925  11E9  29FE               	goto	l1429
 14926  11EA  0825               	movf	getMain_All_Error_Status@command,w
 14927  11EB  3A03               	xorlw	3
 14928  11EC  1903               	skipnz
 14929  11ED  29FE               	goto	l1429
 14930                           
 14931                           ;Main_B1.c: 391: status = Load.ERROR == 1 ? 3 : 0;
 14932  11EE  0022               	movlb	2	; select bank2
 14933  11EF  1AC1               	btfsc	_Load^(0+256),5
 14934  11F0  29F5               	goto	l6217
 14935  11F1  0020               	movlb	0	; select bank0
 14936  11F2  01A3               	clrf	_getMain_All_Error_Status$3322
 14937  11F3  01A4               	clrf	_getMain_All_Error_Status$3322+1
 14938  11F4  29FA               	goto	l1433
 14939  11F5                     l6217:	
 14940  11F5  3003               	movlw	3
 14941  11F6  0020               	movlb	0	; select bank0
 14942  11F7  00A3               	movwf	_getMain_All_Error_Status$3322
 14943  11F8  3000               	movlw	0
 14944  11F9  00A4               	movwf	_getMain_All_Error_Status$3322+1
 14945  11FA                     l1433:	
 14946  11FA  0823               	movf	_getMain_All_Error_Status$3322,w
 14947  11FB  00A0               	movwf	??_getMain_All_Error_Status
 14948  11FC  0820               	movf	??_getMain_All_Error_Status,w
 14949  11FD  00A6               	movwf	getMain_All_Error_Status@status
 14950  11FE                     l1429:	
 14951                           
 14952                           ;Main_B1.c: 392: }
 14953                           ;Main_B1.c: 408: return status;
 14954  11FE  0826               	movf	getMain_All_Error_Status@status,w
 14955  11FF  0008               	return
 14956  1200                     __end_of_getMain_All_Error_Status:	
 14957                           
 14958                           	psect	text90
 14959  1111                     __ptext90:	
 14960 ;; *************** function _getMain_LightsStatus *****************
 14961 ;; Defined at:
 14962 ;;		line 344 in file "../src/Main_B1.c"
 14963 ;; Parameters:    Size  Location     Type
 14964 ;;		None
 14965 ;; Auto vars:     Size  Location     Type
 14966 ;;  i               2    6[BANK0 ] int 
 14967 ;;  status          1    8[BANK0 ] unsigned char 
 14968 ;;  count           1    5[BANK0 ] unsigned char 
 14969 ;; Return value:  Size  Location     Type
 14970 ;;                  1    wreg      unsigned char 
 14971 ;; Registers used:
 14972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14973 ;; Tracked objects:
 14974 ;;		On entry : 0/0
 14975 ;;		On exit  : 0/0
 14976 ;;		Unchanged: 0/0
 14977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;Total ram usage:        5 bytes
 14983 ;; Hardware stack levels used:    1
 14984 ;; Hardware stack levels required when called:    7
 14985 ;; This function calls:
 14986 ;;		_getDimmerLights_Status
 14987 ;; This function is called by:
 14988 ;;		_DimmerLights_Main
 14989 ;;		_Flash_Memory_Main
 14990 ;;		_setMain_Exception
 14991 ;;		_Load_Main
 14992 ;; This function uses a non-reentrant model
 14993 ;;
 14994                           
 14995                           
 14996                           ;psect for function _getMain_LightsStatus
 14997  1111                     _getMain_LightsStatus:	
 14998                           
 14999                           ;Main_B1.c: 345: char status = 0, count = 0;
 15000                           
 15001                           ;incstack = 0
 15002                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15003  1111  0020               	movlb	0	; select bank0
 15004  1112  01A8               	clrf	getMain_LightsStatus@status
 15005  1113  01A5               	clrf	getMain_LightsStatus@count
 15006                           
 15007                           ;Main_B1.c: 348: count = 1;
 15008  1114  01A5               	clrf	getMain_LightsStatus@count
 15009  1115  0AA5               	incf	getMain_LightsStatus@count,f
 15010                           
 15011                           ;Main_B1.c: 357: for (int i = 0; i < count; i++) {
 15012  1116  01A6               	clrf	getMain_LightsStatus@i
 15013  1117  01A7               	clrf	getMain_LightsStatus@i+1
 15014  1118                     l6479:	
 15015  1118  0827               	movf	getMain_LightsStatus@i+1,w
 15016  1119  3A80               	xorlw	128
 15017  111A  00A4               	movwf	??_getMain_LightsStatus
 15018  111B  3080               	movlw	128
 15019  111C  0224               	subwf	??_getMain_LightsStatus,w
 15020  111D  1D03               	skipz
 15021  111E  2921               	goto	u5685
 15022  111F  0825               	movf	getMain_LightsStatus@count,w
 15023  1120  0226               	subwf	getMain_LightsStatus@i,w
 15024  1121                     u5685:	
 15025  1121  1803               	btfsc	3,0
 15026  1122  2939               	goto	l6481
 15027                           
 15028                           ;Main_B1.c: 358: if (status == 0) {
 15029  1123  0020               	movlb	0	; select bank0
 15030  1124  08A8               	movf	getMain_LightsStatus@status,f
 15031  1125  1D03               	skipz
 15032  1126  2934               	goto	l6477
 15033                           
 15034                           ;Main_B1.c: 363: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15035  1127  0826               	movf	getMain_LightsStatus@i,w
 15036  1128  3E01               	addlw	1
 15037  1129  319C  24EC  3191   	fcall	_getDimmerLights_Status
 15038  112C  3A01               	xorlw	1
 15039  112D  3000               	movlw	0
 15040  112E  1903               	skipnz
 15041  112F  3001               	movlw	1
 15042  1130  0020               	movlb	0	; select bank0
 15043  1131  00A4               	movwf	??_getMain_LightsStatus
 15044  1132  0824               	movf	??_getMain_LightsStatus,w
 15045  1133  00A8               	movwf	getMain_LightsStatus@status
 15046  1134                     l6477:	
 15047  1134  3001               	movlw	1
 15048  1135  07A6               	addwf	getMain_LightsStatus@i,f
 15049  1136  3000               	movlw	0
 15050  1137  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15051  1138  2918               	goto	l6479
 15052  1139                     l6481:	
 15053                           
 15054                           ;Main_B1.c: 365: }
 15055                           ;Main_B1.c: 366: }
 15056                           ;Main_B1.c: 367: return status;
 15057  1139  0020               	movlb	0	; select bank0
 15058  113A  0828               	movf	getMain_LightsStatus@status,w
 15059  113B  0008               	return
 15060  113C                     __end_of_getMain_LightsStatus:	
 15061                           
 15062                           	psect	text91
 15063  1BCF                     __ptext91:	
 15064 ;; *************** function _getLoad_OK *****************
 15065 ;; Defined at:
 15066 ;;		line 219 in file "../src/OverLoad_B1.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;		None
 15069 ;; Auto vars:     Size  Location     Type
 15070 ;;  ok              1    0[BANK0 ] unsigned char 
 15071 ;; Return value:  Size  Location     Type
 15072 ;;                  1    wreg      unsigned char 
 15073 ;; Registers used:
 15074 ;;		wreg, status,2
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;Total ram usage:        1 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    5
 15087 ;; This function calls:
 15088 ;;		Nothing
 15089 ;; This function is called by:
 15090 ;;		_DimmerLights_Main
 15091 ;; This function uses a non-reentrant model
 15092 ;;
 15093                           
 15094                           
 15095                           ;psect for function _getLoad_OK
 15096  1BCF                     _getLoad_OK:	
 15097                           
 15098                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15099                           
 15100                           ;incstack = 0
 15101                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15102  1BCF  3000               	movlw	0
 15103  1BD0  0022               	movlb	2	; select bank2
 15104  1BD1  1BC1               	btfsc	_Load^(0+256),7
 15105  1BD2  3001               	movlw	1
 15106  1BD3  0020               	movlb	0	; select bank0
 15107  1BD4  00A0               	movwf	getLoad_OK@ok
 15108                           
 15109                           ;OverLoad_B1.c: 221: return ok;
 15110  1BD5  0820               	movf	getLoad_OK@ok,w
 15111  1BD6  0008               	return
 15112  1BD7                     __end_of_getLoad_OK:	
 15113                           
 15114                           	psect	text92
 15115  1CA4                     __ptext92:	
 15116 ;; *************** function _DimmerLights_Initialization *****************
 15117 ;; Defined at:
 15118 ;;		line 329 in file "../src/Dimmer_B1.c"
 15119 ;; Parameters:    Size  Location     Type
 15120 ;;		None
 15121 ;; Auto vars:     Size  Location     Type
 15122 ;;		None
 15123 ;; Return value:  Size  Location     Type
 15124 ;;		None               void
 15125 ;; Registers used:
 15126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15127 ;; Tracked objects:
 15128 ;;		On entry : 0/0
 15129 ;;		On exit  : 0/0
 15130 ;;		Unchanged: 0/0
 15131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;Total ram usage:        1 bytes
 15137 ;; Hardware stack levels used:    1
 15138 ;; Hardware stack levels required when called:    7
 15139 ;; This function calls:
 15140 ;;		_Dimmer_Initialization
 15141 ;;		_setDimmerLights_Initialization
 15142 ;; This function is called by:
 15143 ;;		_main
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           
 15148                           ;psect for function _DimmerLights_Initialization
 15149  1CA4                     _DimmerLights_Initialization:	
 15150                           
 15151                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15152                           
 15153                           ;incstack = 0
 15154                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15155  1CA4  30C5               	movlw	_DimmerLights1& (0+255)
 15156  1CA5  0020               	movlb	0	; select bank0
 15157  1CA6  00A4               	movwf	??_DimmerLights_Initialization
 15158  1CA7  0824               	movf	??_DimmerLights_Initialization,w
 15159  1CA8  0021               	movlb	1	; select bank1
 15160  1CA9  00CE               	movwf	_DimmerLights11^(0+128)
 15161                           
 15162                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15163  1CAA  3001               	movlw	1
 15164  1CAB  3190  2096  319C   	fcall	_setDimmerLights_Initialization
 15165                           
 15166                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15167  1CAE  3188  2001         	fcall	_Dimmer_Initialization
 15168  1CB0  0008               	return
 15169  1CB1                     __end_of_DimmerLights_Initialization:	
 15170                           
 15171                           	psect	text93
 15172  1096                     __ptext93:	
 15173 ;; *************** function _setDimmerLights_Initialization *****************
 15174 ;; Defined at:
 15175 ;;		line 352 in file "../src/Dimmer_B1.c"
 15176 ;; Parameters:    Size  Location     Type
 15177 ;;  lights          1    wreg     unsigned char 
 15178 ;; Auto vars:     Size  Location     Type
 15179 ;;  lights          1    3[BANK0 ] unsigned char 
 15180 ;; Return value:  Size  Location     Type
 15181 ;;		None               void
 15182 ;; Registers used:
 15183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15184 ;; Tracked objects:
 15185 ;;		On entry : 0/0
 15186 ;;		On exit  : 0/0
 15187 ;;		Unchanged: 0/0
 15188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;Total ram usage:        2 bytes
 15194 ;; Hardware stack levels used:    1
 15195 ;; Hardware stack levels required when called:    6
 15196 ;; This function calls:
 15197 ;;		_DimmerLightsPointSelect
 15198 ;; This function is called by:
 15199 ;;		_DimmerLights_Initialization
 15200 ;; This function uses a non-reentrant model
 15201 ;;
 15202                           
 15203                           
 15204                           ;psect for function _setDimmerLights_Initialization
 15205  1096                     _setDimmerLights_Initialization:	
 15206                           
 15207                           ;incstack = 0
 15208                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15209                           ;setDimmerLights_Initialization@lights stored from wreg
 15210  1096  0020               	movlb	0	; select bank0
 15211  1097  00A3               	movwf	setDimmerLights_Initialization@lights
 15212                           
 15213                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15214  1098  0823               	movf	setDimmerLights_Initialization@lights,w
 15215  1099  319C  241A         	fcall	_DimmerLightsPointSelect
 15216                           
 15217                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(85*0.8));
 15218  109B  3044               	movlw	68
 15219  109C  0020               	movlb	0	; select bank0
 15220  109D  00A2               	movwf	??_setDimmerLights_Initialization
 15221  109E  086F               	movf	_DimmerLights,w
 15222  109F  3E05               	addlw	5
 15223  10A0  0086               	movwf	6
 15224  10A1  3001               	movlw	1	; select bank2/3
 15225  10A2  0087               	movwf	7
 15226  10A3  0822               	movf	??_setDimmerLights_Initialization,w
 15227  10A4  0081               	movwf	1
 15228                           
 15229                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15230  10A5  300C               	movlw	12
 15231  10A6  00A2               	movwf	??_setDimmerLights_Initialization
 15232  10A7  086F               	movf	_DimmerLights,w
 15233  10A8  3E06               	addlw	6
 15234  10A9  0086               	movwf	6
 15235  10AA  3001               	movlw	1	; select bank2/3
 15236  10AB  0087               	movwf	7
 15237  10AC  0822               	movf	??_setDimmerLights_Initialization,w
 15238  10AD  0081               	movwf	1
 15239                           
 15240                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15241  10AE  086F               	movf	_DimmerLights,w
 15242  10AF  3E05               	addlw	5
 15243  10B0  0086               	movwf	6
 15244  10B1  3001               	movlw	1	; select bank2/3
 15245  10B2  0087               	movwf	7
 15246  10B3  0801               	movf	1,w
 15247  10B4  00A2               	movwf	??_setDimmerLights_Initialization
 15248  10B5  086F               	movf	_DimmerLights,w
 15249  10B6  3E04               	addlw	4
 15250  10B7  0086               	movwf	6
 15251  10B8  3001               	movlw	1	; select bank2/3
 15252  10B9  0087               	movwf	7
 15253  10BA  0822               	movf	??_setDimmerLights_Initialization,w
 15254  10BB  0081               	movwf	1
 15255  10BC  0008               	return
 15256  10BD                     __end_of_setDimmerLights_Initialization:	
 15257                           
 15258                           	psect	text94
 15259  0801                     __ptext94:	
 15260 ;; *************** function _Dimmer_Initialization *****************
 15261 ;; Defined at:
 15262 ;;		line 892 in file "../src/Dimmer_B1.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;		None
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;		None
 15267 ;; Return value:  Size  Location     Type
 15268 ;;		None               void
 15269 ;; Registers used:
 15270 ;;		None
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;Total ram usage:        0 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    5
 15283 ;; This function calls:
 15284 ;;		Nothing
 15285 ;; This function is called by:
 15286 ;;		_DimmerLights_Initialization
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           
 15291                           ;psect for function _Dimmer_Initialization
 15292  0801                     _Dimmer_Initialization:	
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _Dimmer_Initialization: []
 15296  0801  0008               	return
 15297  0802                     __end_of_Dimmer_Initialization:	
 15298                           
 15299                           	psect	text95
 15300  1B9C                     __ptext95:	
 15301 ;; *************** function _DelayOff_Main *****************
 15302 ;; Defined at:
 15303 ;;		line 41 in file "../src/DelayOff_B1.c"
 15304 ;; Parameters:    Size  Location     Type
 15305 ;;		None
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;		None               void
 15310 ;; Registers used:
 15311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15312 ;; Tracked objects:
 15313 ;;		On entry : 0/0
 15314 ;;		On exit  : 0/0
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;Total ram usage:        0 bytes
 15322 ;; Hardware stack levels used:    1
 15323 ;; Hardware stack levels required when called:   11
 15324 ;; This function calls:
 15325 ;;		_DlyOff_Main
 15326 ;; This function is called by:
 15327 ;;		_main
 15328 ;; This function uses a non-reentrant model
 15329 ;;
 15330                           
 15331                           
 15332                           ;psect for function _DelayOff_Main
 15333  1B9C                     _DelayOff_Main:	
 15334                           
 15335                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15336                           
 15337                           ;incstack = 0
 15338                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15339  1B9C  3001               	movlw	1
 15340  1B9D  3188  20AE         	fcall	_DlyOff_Main
 15341  1B9F  0008               	return
 15342  1BA0                     __end_of_DelayOff_Main:	
 15343                           
 15344                           	psect	text96
 15345  08AE                     __ptext96:	
 15346 ;; *************** function _DlyOff_Main *****************
 15347 ;; Defined at:
 15348 ;;		line 61 in file "../src/DelayOff_B1.c"
 15349 ;; Parameters:    Size  Location     Type
 15350 ;;  sw              1    wreg     unsigned char 
 15351 ;; Auto vars:     Size  Location     Type
 15352 ;;  sw              1   24[BANK0 ] unsigned char 
 15353 ;; Return value:  Size  Location     Type
 15354 ;;		None               void
 15355 ;; Registers used:
 15356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15357 ;; Tracked objects:
 15358 ;;		On entry : 0/0
 15359 ;;		On exit  : 0/0
 15360 ;;		Unchanged: 0/0
 15361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;Total ram usage:        3 bytes
 15367 ;; Hardware stack levels used:    1
 15368 ;; Hardware stack levels required when called:   10
 15369 ;; This function calls:
 15370 ;;		_DelayOffPointSelect
 15371 ;;		_setBuz
 15372 ;;		_setDimmerLights_ErrorClose
 15373 ;; This function is called by:
 15374 ;;		_DelayOff_Main
 15375 ;; This function uses a non-reentrant model
 15376 ;;
 15377                           
 15378                           
 15379                           ;psect for function _DlyOff_Main
 15380  08AE                     _DlyOff_Main:	
 15381                           
 15382                           ;incstack = 0
 15383                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15384                           ;DlyOff_Main@sw stored from wreg
 15385  08AE  0020               	movlb	0	; select bank0
 15386  08AF  00B8               	movwf	DlyOff_Main@sw
 15387                           
 15388                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15389  08B0  0838               	movf	DlyOff_Main@sw,w
 15390  08B1  319C  240F  3188   	fcall	_DelayOffPointSelect
 15391                           
 15392                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15393  08B4  0878               	movf	_DelayOff,w
 15394  08B5  0086               	movwf	6
 15395  08B6  3001               	movlw	1	; select bank2/3
 15396  08B7  0087               	movwf	7
 15397  08B8  1C81               	btfss	1,1
 15398  08B9  0008               	return
 15399                           
 15400                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15401  08BA  0878               	movf	_DelayOff,w
 15402  08BB  3E02               	addlw	2
 15403  08BC  0086               	movwf	6
 15404  08BD  3001               	movlw	1	; select bank2/3
 15405  08BE  0087               	movwf	7
 15406  08BF  3001               	movlw	1
 15407  08C0  0781               	addwf	1,f
 15408  08C1  3141               	addfsr 1,1
 15409  08C2  1803               	skipnc
 15410  08C3  0A81               	incf	1,f
 15411                           
 15412                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15413  08C4  0878               	movf	_DelayOff,w
 15414  08C5  3E02               	addlw	2
 15415  08C6  0086               	movwf	6
 15416  08C7  3001               	movlw	1	; select bank2/3
 15417  08C8  0087               	movwf	7
 15418  08C9  3F40               	moviw [0]fsr1
 15419  08CA  0020               	movlb	0	; select bank0
 15420  08CB  00B6               	movwf	??_DlyOff_Main
 15421  08CC  3F41               	moviw [1]fsr1
 15422  08CD  00B7               	movwf	??_DlyOff_Main+1
 15423  08CE  3017               	movlw	23
 15424  08CF  0237               	subwf	??_DlyOff_Main+1,w
 15425  08D0  3070               	movlw	112
 15426  08D1  1903               	skipnz
 15427  08D2  0236               	subwf	??_DlyOff_Main,w
 15428  08D3  1C03               	skipc
 15429  08D4  0008               	return
 15430                           
 15431                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15432  08D5  0878               	movf	_DelayOff,w
 15433  08D6  3E02               	addlw	2
 15434  08D7  0086               	movwf	6
 15435  08D8  3001               	movlw	1	; select bank2/3
 15436  08D9  0087               	movwf	7
 15437  08DA  3000               	movlw	0
 15438  08DB  3FC0               	movwi [0]fsr1
 15439  08DC  3FC1               	movwi [1]fsr1
 15440                           
 15441                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15442  08DD  3001               	movlw	1
 15443  08DE  00B6               	movwf	??_DlyOff_Main
 15444  08DF  0878               	movf	_DelayOff,w
 15445  08E0  3E04               	addlw	4
 15446  08E1  0086               	movwf	6
 15447  08E2  3001               	movlw	1	; select bank2/3
 15448  08E3  0087               	movwf	7
 15449  08E4  0836               	movf	??_DlyOff_Main,w
 15450  08E5  0781               	addwf	1,f
 15451                           
 15452                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15453  08E6  0878               	movf	_DelayOff,w
 15454  08E7  3E04               	addlw	4
 15455  08E8  0086               	movwf	6
 15456  08E9  3001               	movlw	1	; select bank2/3
 15457  08EA  0087               	movwf	7
 15458  08EB  0A78               	incf	_DelayOff,w
 15459  08EC  0084               	movwf	4
 15460  08ED  3001               	movlw	1	; select bank2/3
 15461  08EE  0085               	movwf	5
 15462  08EF  0800               	movf	0,w
 15463  08F0  0201               	subwf	1,w
 15464  08F1  1C03               	skipc
 15465  08F2  0008               	return
 15466                           
 15467                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15468  08F3  0878               	movf	_DelayOff,w
 15469  08F4  3E04               	addlw	4
 15470  08F5  0086               	movwf	6
 15471  08F6  3001               	movlw	1	; select bank2/3
 15472  08F7  0087               	movwf	7
 15473  08F8  0181               	clrf	1
 15474                           
 15475                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15476  08F9  0878               	movf	_DelayOff,w
 15477  08FA  0086               	movwf	6
 15478  08FB  3001               	movlw	1	; select bank2/3
 15479  08FC  0087               	movwf	7
 15480  08FD  1081               	bcf	1,1
 15481                           
 15482                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15483  08FE  3064               	movlw	100
 15484  08FF  00A9               	movwf	setBuz@time
 15485  0900  3000               	movlw	0
 15486  0901  00AA               	movwf	setBuz@time+1
 15487  0902  3001               	movlw	1
 15488  0903  3196  2696  3188   	fcall	_setBuz
 15489                           
 15490                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15491  0906  0020               	movlb	0	; select bank0
 15492  0907  0838               	movf	DlyOff_Main@sw,w
 15493  0908  3195  25E6         	fcall	_setDimmerLights_ErrorClose
 15494  090A  0008               	return
 15495  090B                     __end_of_DlyOff_Main:	
 15496                           
 15497                           	psect	text97
 15498  15E6                     __ptext97:	
 15499 ;; *************** function _setDimmerLights_ErrorClose *****************
 15500 ;; Defined at:
 15501 ;;		line 562 in file "../src/Dimmer_B1.c"
 15502 ;; Parameters:    Size  Location     Type
 15503 ;;  lights          1    wreg     unsigned char 
 15504 ;; Auto vars:     Size  Location     Type
 15505 ;;  lights          1   19[BANK0 ] unsigned char 
 15506 ;;  i               2   20[BANK0 ] int 
 15507 ;;  count           1   18[BANK0 ] unsigned char 
 15508 ;; Return value:  Size  Location     Type
 15509 ;;		None               void
 15510 ;; Registers used:
 15511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15512 ;; Tracked objects:
 15513 ;;		On entry : 0/0
 15514 ;;		On exit  : 0/0
 15515 ;;		Unchanged: 0/0
 15516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;Total ram usage:        5 bytes
 15522 ;; Hardware stack levels used:    1
 15523 ;; Hardware stack levels required when called:    9
 15524 ;; This function calls:
 15525 ;;		_DimmerLightsPointSelect
 15526 ;;		_getDimmerLights_Status
 15527 ;;		_setDimmerLights_SwOff
 15528 ;; This function is called by:
 15529 ;;		_DlyOff_Main
 15530 ;;		_setMain_Exception
 15531 ;;		_setControl_Lights_Table
 15532 ;; This function uses a non-reentrant model
 15533 ;;
 15534                           
 15535                           
 15536                           ;psect for function _setDimmerLights_ErrorClose
 15537  15E6                     _setDimmerLights_ErrorClose:	
 15538                           
 15539                           ;incstack = 0
 15540                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15541                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15542  15E6  0020               	movlb	0	; select bank0
 15543  15E7  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15544                           
 15545                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15546  15E8  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15547  15E9  3AFF               	xorlw	255
 15548  15EA  1D03               	skipz
 15549  15EB  2E21               	goto	l6107
 15550                           
 15551                           ;Dimmer_B1.c: 565: char count = 1;
 15552  15EC  01B2               	clrf	setDimmerLights_ErrorClose@count
 15553  15ED  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15554                           
 15555                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15556  15EE  01B4               	clrf	setDimmerLights_ErrorClose@i
 15557  15EF  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15558  15F0                     l6105:	
 15559  15F0  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15560  15F1  3A80               	xorlw	128
 15561  15F2  00B1               	movwf	??_setDimmerLights_ErrorClose
 15562  15F3  3080               	movlw	128
 15563  15F4  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15564  15F5  1D03               	skipz
 15565  15F6  2DF9               	goto	u5135
 15566  15F7  0832               	movf	setDimmerLights_ErrorClose@count,w
 15567  15F8  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15568  15F9                     u5135:	
 15569  15F9  1803               	btfsc	3,0
 15570  15FA  0008               	return
 15571                           
 15572                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15573  15FB  0020               	movlb	0	; select bank0
 15574  15FC  0834               	movf	setDimmerLights_ErrorClose@i,w
 15575  15FD  3E01               	addlw	1
 15576  15FE  319C  241A  3195   	fcall	_DimmerLightsPointSelect
 15577                           
 15578                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15579  1601  0020               	movlb	0	; select bank0
 15580  1602  0834               	movf	setDimmerLights_ErrorClose@i,w
 15581  1603  3E01               	addlw	1
 15582  1604  319C  24EC  3195   	fcall	_getDimmerLights_Status
 15583  1607  3A01               	xorlw	1
 15584  1608  1D03               	skipz
 15585  1609  2E1B               	goto	l6103
 15586                           
 15587                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15588  160A  0020               	movlb	0	; select bank0
 15589  160B  086F               	movf	_DimmerLights,w
 15590  160C  3E09               	addlw	9
 15591  160D  0086               	movwf	6
 15592  160E  3001               	movlw	1	; select bank2/3
 15593  160F  0087               	movwf	7
 15594  1610  1701               	bsf	1,6
 15595                           
 15596                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15597  1611  086F               	movf	_DimmerLights,w
 15598  1612  0086               	movwf	6
 15599  1613  3001               	movlw	1	; select bank2/3
 15600  1614  0087               	movwf	7
 15601  1615  1281               	bcf	1,5
 15602                           
 15603                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15604  1616  0834               	movf	setDimmerLights_ErrorClose@i,w
 15605  1617  3E01               	addlw	1
 15606  1618  3194  24B1  3195   	fcall	_setDimmerLights_SwOff
 15607  161B                     l6103:	
 15608  161B  3001               	movlw	1
 15609  161C  0020               	movlb	0	; select bank0
 15610  161D  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15611  161E  3000               	movlw	0
 15612  161F  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15613  1620  2DF0               	goto	l6105
 15614  1621                     l6107:	
 15615                           ;Dimmer_B1.c: 579: }
 15616                           ;Dimmer_B1.c: 580: }
 15617                           ;Dimmer_B1.c: 581: } else {
 15618                           
 15619                           
 15620                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15621  1621  0020               	movlb	0	; select bank0
 15622  1622  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15623  1623  319C  241A  3195   	fcall	_DimmerLightsPointSelect
 15624                           
 15625                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15626  1626  0020               	movlb	0	; select bank0
 15627  1627  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15628  1628  319C  24EC  3195   	fcall	_getDimmerLights_Status
 15629  162B  3A01               	xorlw	1
 15630  162C  1D03               	skipz
 15631  162D  0008               	return
 15632                           
 15633                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15634  162E  0020               	movlb	0	; select bank0
 15635  162F  086F               	movf	_DimmerLights,w
 15636  1630  3E09               	addlw	9
 15637  1631  0086               	movwf	6
 15638  1632  3001               	movlw	1	; select bank2/3
 15639  1633  0087               	movwf	7
 15640  1634  1701               	bsf	1,6
 15641                           
 15642                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15643  1635  086F               	movf	_DimmerLights,w
 15644  1636  0086               	movwf	6
 15645  1637  3001               	movlw	1	; select bank2/3
 15646  1638  0087               	movwf	7
 15647  1639  1281               	bcf	1,5
 15648                           
 15649                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15650  163A  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15651  163B  3194  24B1         	fcall	_setDimmerLights_SwOff
 15652  163D  0008               	return
 15653  163E                     __end_of_setDimmerLights_ErrorClose:	
 15654                           
 15655                           	psect	text98
 15656  14B1                     __ptext98:	
 15657 ;; *************** function _setDimmerLights_SwOff *****************
 15658 ;; Defined at:
 15659 ;;		line 524 in file "../src/Dimmer_B1.c"
 15660 ;; Parameters:    Size  Location     Type
 15661 ;;  sw              1    wreg     unsigned char 
 15662 ;; Auto vars:     Size  Location     Type
 15663 ;;  sw              1   16[BANK0 ] unsigned char 
 15664 ;;  command         1   15[BANK0 ] unsigned char 
 15665 ;; Return value:  Size  Location     Type
 15666 ;;		None               void
 15667 ;; Registers used:
 15668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15669 ;; Tracked objects:
 15670 ;;		On entry : 0/0
 15671 ;;		On exit  : 0/0
 15672 ;;		Unchanged: 0/0
 15673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;Total ram usage:        2 bytes
 15679 ;; Hardware stack levels used:    1
 15680 ;; Hardware stack levels required when called:    8
 15681 ;; This function calls:
 15682 ;;		_DimmerLightsPointSelect
 15683 ;;		_getDelayOff_GO
 15684 ;;		_setDelayOff_GO
 15685 ;;		_setDimmerLights_Trigger
 15686 ;;		_setDimmerLights_TriggerAdj
 15687 ;; This function is called by:
 15688 ;;		_setDimmerLights_ErrorClose
 15689 ;;		_setRFSW_Control
 15690 ;;		_setSw_Main
 15691 ;; This function uses a non-reentrant model
 15692 ;;
 15693                           
 15694                           
 15695                           ;psect for function _setDimmerLights_SwOff
 15696  14B1                     _setDimmerLights_SwOff:	
 15697                           
 15698                           ;incstack = 0
 15699                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15700                           ;setDimmerLights_SwOff@sw stored from wreg
 15701  14B1  0020               	movlb	0	; select bank0
 15702  14B2  00B0               	movwf	setDimmerLights_SwOff@sw
 15703                           
 15704                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15705  14B3  0830               	movf	setDimmerLights_SwOff@sw,w
 15706  14B4  319C  241A  3194   	fcall	_DimmerLightsPointSelect
 15707                           
 15708                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15709  14B7  0020               	movlb	0	; select bank0
 15710  14B8  086F               	movf	_DimmerLights,w
 15711  14B9  0086               	movwf	6
 15712  14BA  3001               	movlw	1	; select bank2/3
 15713  14BB  0087               	movwf	7
 15714  14BC  3000               	movlw	0
 15715  14BD  1A81               	btfsc	1,5
 15716  14BE  3001               	movlw	1
 15717  14BF  00AF               	movwf	setDimmerLights_SwOff@command
 15718                           
 15719                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15720  14C0  086F               	movf	_DimmerLights,w
 15721  14C1  3E09               	addlw	9
 15722  14C2  0086               	movwf	6
 15723  14C3  3001               	movlw	1	; select bank2/3
 15724  14C4  0087               	movwf	7
 15725  14C5  1F01               	btfss	1,6
 15726  14C6  0008               	return
 15727                           
 15728                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15729  14C7  086F               	movf	_DimmerLights,w
 15730  14C8  3E09               	addlw	9
 15731  14C9  0086               	movwf	6
 15732  14CA  3001               	movlw	1	; select bank2/3
 15733  14CB  0087               	movwf	7
 15734  14CC  1301               	bcf	1,6
 15735                           
 15736                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15737  14CD  086F               	movf	_DimmerLights,w
 15738  14CE  0086               	movwf	6
 15739  14CF  3001               	movlw	1	; select bank2/3
 15740  14D0  0087               	movwf	7
 15741  14D1  1E81               	btfss	1,5
 15742  14D2  2CE5               	goto	l5963
 15743                           
 15744                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15745  14D3  086F               	movf	_DimmerLights,w
 15746  14D4  3E09               	addlw	9
 15747  14D5  0086               	movwf	6
 15748  14D6  3001               	movlw	1	; select bank2/3
 15749  14D7  0087               	movwf	7
 15750  14D8  1F81               	btfss	1,7
 15751  14D9  0008               	return
 15752                           
 15753                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15754  14DA  086F               	movf	_DimmerLights,w
 15755  14DB  3E09               	addlw	9
 15756  14DC  0086               	movwf	6
 15757  14DD  3001               	movlw	1	; select bank2/3
 15758  14DE  0087               	movwf	7
 15759  14DF  1381               	bcf	1,7
 15760                           
 15761                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15762  14E0  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15763  14E1  0830               	movf	setDimmerLights_SwOff@sw,w
 15764  14E2  319E  26D4         	fcall	_setDimmerLights_TriggerAdj
 15765                           
 15766                           ;Dimmer_B1.c: 533: }
 15767                           ;Dimmer_B1.c: 534: } else {
 15768  14E4  0008               	return
 15769  14E5                     l5963:	
 15770                           
 15771                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15772  14E5  0020               	movlb	0	; select bank0
 15773  14E6  01A2               	clrf	setDimmerLights_Trigger@command
 15774  14E7  0830               	movf	setDimmerLights_SwOff@sw,w
 15775  14E8  319E  2697  3194   	fcall	_setDimmerLights_Trigger
 15776                           
 15777                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15778  14EB  0020               	movlb	0	; select bank0
 15779  14EC  0830               	movf	setDimmerLights_SwOff@sw,w
 15780  14ED  319C  24FC  3194   	fcall	_getDelayOff_GO
 15781  14F0  3A01               	xorlw	1
 15782  14F1  1D03               	skipz
 15783  14F2  0008               	return
 15784                           
 15785                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15786  14F3  0020               	movlb	0	; select bank0
 15787  14F4  01AA               	clrf	setDelayOff_GO@command
 15788  14F5  01AB               	clrf	setDelayOff_GO@value
 15789  14F6  0830               	movf	setDimmerLights_SwOff@sw,w
 15790  14F7  3188  2051         	fcall	_setDelayOff_GO
 15791  14F9  0008               	return
 15792  14FA                     __end_of_setDimmerLights_SwOff:	
 15793                           
 15794                           	psect	text99
 15795  1ED4                     __ptext99:	
 15796 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15797 ;; Defined at:
 15798 ;;		line 773 in file "../src/Dimmer_B1.c"
 15799 ;; Parameters:    Size  Location     Type
 15800 ;;  lights          1    wreg     unsigned char 
 15801 ;;  command         1    2[BANK0 ] unsigned char 
 15802 ;; Auto vars:     Size  Location     Type
 15803 ;;  lights          1    4[BANK0 ] unsigned char 
 15804 ;; Return value:  Size  Location     Type
 15805 ;;		None               void
 15806 ;; Registers used:
 15807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15808 ;; Tracked objects:
 15809 ;;		On entry : 0/0
 15810 ;;		On exit  : 0/0
 15811 ;;		Unchanged: 0/0
 15812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;Total ram usage:        3 bytes
 15818 ;; Hardware stack levels used:    1
 15819 ;; Hardware stack levels required when called:    6
 15820 ;; This function calls:
 15821 ;;		_DimmerLightsPointSelect
 15822 ;; This function is called by:
 15823 ;;		_setDimmerLights_SwOff
 15824 ;;		_setDimmerLights_AdjControl
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           
 15829                           ;psect for function _setDimmerLights_TriggerAdj
 15830  1ED4                     _setDimmerLights_TriggerAdj:	
 15831                           
 15832                           ;incstack = 0
 15833                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15834                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15835  1ED4  0020               	movlb	0	; select bank0
 15836  1ED5  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15837                           
 15838                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15839  1ED6  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15840  1ED7  319C  241A         	fcall	_DimmerLightsPointSelect
 15841                           
 15842                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15843  1ED9  0020               	movlb	0	; select bank0
 15844  1EDA  086F               	movf	_DimmerLights,w
 15845  1EDB  3E08               	addlw	8
 15846  1EDC  0086               	movwf	6
 15847  1EDD  3001               	movlw	1	; select bank2/3
 15848  1EDE  0087               	movwf	7
 15849  1EDF  1601               	bsf	1,4
 15850                           
 15851                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15852  1EE0  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15853  1EE1  3A01               	xorlw	1
 15854  1EE2  3000               	movlw	0
 15855  1EE3  1903               	skipnz
 15856  1EE4  3001               	movlw	1
 15857  1EE5  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15858  1EE6  086F               	movf	_DimmerLights,w
 15859  1EE7  3E08               	addlw	8
 15860  1EE8  0086               	movwf	6
 15861  1EE9  3001               	movlw	1	; select bank2/3
 15862  1EEA  0087               	movwf	7
 15863  1EEB  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15864  1EEC  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15865  1EED  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15866  1EEE  0801               	movf	1,w
 15867  1EEF  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15868  1EF0  39F7               	andlw	-9
 15869  1EF1  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15870  1EF2  0081               	movwf	1
 15871  1EF3  0008               	return
 15872  1EF4                     __end_of_setDimmerLights_TriggerAdj:	
 15873                           
 15874                           	psect	text100
 15875  1E97                     __ptext100:	
 15876 ;; *************** function _setDimmerLights_Trigger *****************
 15877 ;; Defined at:
 15878 ;;		line 767 in file "../src/Dimmer_B1.c"
 15879 ;; Parameters:    Size  Location     Type
 15880 ;;  lights          1    wreg     unsigned char 
 15881 ;;  command         1    2[BANK0 ] unsigned char 
 15882 ;; Auto vars:     Size  Location     Type
 15883 ;;  lights          1    4[BANK0 ] unsigned char 
 15884 ;; Return value:  Size  Location     Type
 15885 ;;		None               void
 15886 ;; Registers used:
 15887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15888 ;; Tracked objects:
 15889 ;;		On entry : 0/0
 15890 ;;		On exit  : 0/0
 15891 ;;		Unchanged: 0/0
 15892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;Total ram usage:        3 bytes
 15898 ;; Hardware stack levels used:    1
 15899 ;; Hardware stack levels required when called:    6
 15900 ;; This function calls:
 15901 ;;		_DimmerLightsPointSelect
 15902 ;; This function is called by:
 15903 ;;		_setDimmerLights_SwOn
 15904 ;;		_setDimmerLights_SwOff
 15905 ;; This function uses a non-reentrant model
 15906 ;;
 15907                           
 15908                           
 15909                           ;psect for function _setDimmerLights_Trigger
 15910  1E97                     _setDimmerLights_Trigger:	
 15911                           
 15912                           ;incstack = 0
 15913                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15914                           ;setDimmerLights_Trigger@lights stored from wreg
 15915  1E97  0020               	movlb	0	; select bank0
 15916  1E98  00A4               	movwf	setDimmerLights_Trigger@lights
 15917                           
 15918                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15919  1E99  0824               	movf	setDimmerLights_Trigger@lights,w
 15920  1E9A  319C  241A         	fcall	_DimmerLightsPointSelect
 15921                           
 15922                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 15923  1E9C  0020               	movlb	0	; select bank0
 15924  1E9D  086F               	movf	_DimmerLights,w
 15925  1E9E  3E08               	addlw	8
 15926  1E9F  0086               	movwf	6
 15927  1EA0  3001               	movlw	1	; select bank2/3
 15928  1EA1  0087               	movwf	7
 15929  1EA2  1501               	bsf	1,2
 15930                           
 15931                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 15932  1EA3  0822               	movf	setDimmerLights_Trigger@command,w
 15933  1EA4  3A01               	xorlw	1
 15934  1EA5  3000               	movlw	0
 15935  1EA6  1903               	skipnz
 15936  1EA7  3001               	movlw	1
 15937  1EA8  00A3               	movwf	??_setDimmerLights_Trigger
 15938  1EA9  086F               	movf	_DimmerLights,w
 15939  1EAA  3E08               	addlw	8
 15940  1EAB  0086               	movwf	6
 15941  1EAC  3001               	movlw	1	; select bank2/3
 15942  1EAD  0087               	movwf	7
 15943  1EAE  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15944  1EAF  0801               	movf	1,w
 15945  1EB0  0623               	xorwf	??_setDimmerLights_Trigger,w
 15946  1EB1  39FD               	andlw	-3
 15947  1EB2  0623               	xorwf	??_setDimmerLights_Trigger,w
 15948  1EB3  0081               	movwf	1
 15949  1EB4  0008               	return
 15950  1EB5                     __end_of_setDimmerLights_Trigger:	
 15951                           
 15952                           	psect	text101
 15953  0851                     __ptext101:	
 15954 ;; *************** function _setDelayOff_GO *****************
 15955 ;; Defined at:
 15956 ;;		line 83 in file "../src/DelayOff_B1.c"
 15957 ;; Parameters:    Size  Location     Type
 15958 ;;  sw              1    wreg     unsigned char 
 15959 ;;  command         1   10[BANK0 ] unsigned char 
 15960 ;;  value           1   11[BANK0 ] unsigned char 
 15961 ;; Auto vars:     Size  Location     Type
 15962 ;;  sw              1   14[BANK0 ] unsigned char 
 15963 ;; Return value:  Size  Location     Type
 15964 ;;		None               void
 15965 ;; Registers used:
 15966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15967 ;; Tracked objects:
 15968 ;;		On entry : 0/0
 15969 ;;		On exit  : 0/0
 15970 ;;		Unchanged: 0/0
 15971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15975 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15976 ;;Total ram usage:        5 bytes
 15977 ;; Hardware stack levels used:    1
 15978 ;; Hardware stack levels required when called:    7
 15979 ;; This function calls:
 15980 ;;		_DelayOffPointSelect
 15981 ;;		_DelayTimejudge
 15982 ;; This function is called by:
 15983 ;;		_setDimmerLights_SwOff
 15984 ;;		_setRFSW_Control
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           
 15989                           ;psect for function _setDelayOff_GO
 15990  0851                     _setDelayOff_GO:	
 15991                           
 15992                           ;incstack = 0
 15993                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15994                           ;setDelayOff_GO@sw stored from wreg
 15995  0851  0020               	movlb	0	; select bank0
 15996  0852  00AE               	movwf	setDelayOff_GO@sw
 15997                           
 15998                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15999  0853  082E               	movf	setDelayOff_GO@sw,w
 16000  0854  319C  240F  3188   	fcall	_DelayOffPointSelect
 16001                           
 16002                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16003  0857  0020               	movlb	0	; select bank0
 16004  0858  082A               	movf	setDelayOff_GO@command,w
 16005  0859  3A01               	xorlw	1
 16006  085A  3000               	movlw	0
 16007  085B  1903               	skipnz
 16008  085C  3001               	movlw	1
 16009  085D  00AC               	movwf	??_setDelayOff_GO
 16010  085E  0878               	movf	_DelayOff,w
 16011  085F  0086               	movwf	6
 16012  0860  3001               	movlw	1	; select bank2/3
 16013  0861  0087               	movwf	7
 16014  0862  0DAC               	rlf	??_setDelayOff_GO,f
 16015  0863  0801               	movf	1,w
 16016  0864  062C               	xorwf	??_setDelayOff_GO,w
 16017  0865  39FD               	andlw	-3
 16018  0866  062C               	xorwf	??_setDelayOff_GO,w
 16019  0867  0081               	movwf	1
 16020                           
 16021                           ;DelayOff_B1.c: 89: if (command == 1) {
 16022  0868  082A               	movf	setDelayOff_GO@command,w
 16023  0869  3A01               	xorlw	1
 16024  086A  1D03               	skipz
 16025  086B  2896               	goto	l5883
 16026                           
 16027                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16028  086C  082B               	movf	setDelayOff_GO@value,w
 16029  086D  3190  20E7  3188   	fcall	_DelayTimejudge
 16030  0870  0020               	movlb	0	; select bank0
 16031  0871  00AC               	movwf	??_setDelayOff_GO
 16032  0872  0A78               	incf	_DelayOff,w
 16033  0873  0086               	movwf	6
 16034  0874  3001               	movlw	1	; select bank2/3
 16035  0875  0087               	movwf	7
 16036  0876  082C               	movf	??_setDelayOff_GO,w
 16037  0877  0081               	movwf	1
 16038                           
 16039                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16040  0878  300F               	movlw	15
 16041  0879  052B               	andwf	setDelayOff_GO@value,w
 16042  087A  00AC               	movwf	??_setDelayOff_GO
 16043  087B  082C               	movf	??_setDelayOff_GO,w
 16044  087C  3A05               	xorlw	5
 16045  087D  1903               	skipnz
 16046  087E  2883               	goto	l5877
 16047  087F  082B               	movf	setDelayOff_GO@value,w
 16048  0880  390F               	andlw	15
 16049  0881  1D03               	btfss	3,2
 16050  0882  2889               	goto	l5881
 16051  0883                     l5877:	
 16052  0883  3026               	movlw	38
 16053  0884  022B               	subwf	setDelayOff_GO@value,w
 16054  0885  1803               	skipnc
 16055  0886  2889               	goto	l5881
 16056                           
 16057                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16058  0887  082B               	movf	setDelayOff_GO@value,w
 16059  0888  288A               	goto	L8
 16060  0889                     l5881:	
 16061                           ;DelayOff_B1.c: 93: } else {
 16062                           
 16063                           
 16064                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16065  0889  3005               	movlw	5
 16066  088A                     L8:	
 16067  088A  00AC               	movwf	??_setDelayOff_GO
 16068  088B  082E               	movf	setDelayOff_GO@sw,w
 16069  088C  3E1A               	addlw	26
 16070  088D  076E               	addwf	_product,w
 16071  088E  00AD               	movwf	??_setDelayOff_GO+1
 16072  088F  082D               	movf	??_setDelayOff_GO+1,w
 16073  0890  0086               	movwf	6
 16074  0891  3002               	movlw	2	; select bank4/5
 16075  0892  0087               	movwf	7
 16076  0893  082C               	movf	??_setDelayOff_GO,w
 16077  0894  0081               	movwf	1
 16078                           
 16079                           ;DelayOff_B1.c: 95: }
 16080                           ;DelayOff_B1.c: 96: } else {
 16081  0895  289F               	goto	l5885
 16082  0896                     l5883:	
 16083                           
 16084                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16085  0896  082E               	movf	setDelayOff_GO@sw,w
 16086  0897  3E1A               	addlw	26
 16087  0898  076E               	addwf	_product,w
 16088  0899  00AC               	movwf	??_setDelayOff_GO
 16089  089A  082C               	movf	??_setDelayOff_GO,w
 16090  089B  0086               	movwf	6
 16091  089C  3002               	movlw	2	; select bank4/5
 16092  089D  0087               	movwf	7
 16093  089E  0181               	clrf	1
 16094  089F                     l5885:	
 16095                           
 16096                           ;DelayOff_B1.c: 98: }
 16097                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16098  089F  0878               	movf	_DelayOff,w
 16099  08A0  3E02               	addlw	2
 16100  08A1  0086               	movwf	6
 16101  08A2  3001               	movlw	1	; select bank2/3
 16102  08A3  0087               	movwf	7
 16103  08A4  3000               	movlw	0
 16104  08A5  3FC0               	movwi [0]fsr1
 16105  08A6  3FC1               	movwi [1]fsr1
 16106                           
 16107                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16108  08A7  0878               	movf	_DelayOff,w
 16109  08A8  3E04               	addlw	4
 16110  08A9  0086               	movwf	6
 16111  08AA  3001               	movlw	1	; select bank2/3
 16112  08AB  0087               	movwf	7
 16113  08AC  0181               	clrf	1
 16114  08AD  0008               	return
 16115  08AE                     __end_of_setDelayOff_GO:	
 16116                           
 16117                           	psect	text102
 16118  10E7                     __ptext102:	
 16119 ;; *************** function _DelayTimejudge *****************
 16120 ;; Defined at:
 16121 ;;		line 112 in file "../src/DelayOff_B1.c"
 16122 ;; Parameters:    Size  Location     Type
 16123 ;;  value           1    wreg     unsigned char 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;  value           1    9[BANK0 ] unsigned char 
 16126 ;;  k               1    8[BANK0 ] unsigned char 
 16127 ;;  j               1    7[BANK0 ] unsigned char 
 16128 ;;  i               1    6[BANK0 ] unsigned char 
 16129 ;; Return value:  Size  Location     Type
 16130 ;;                  1    wreg      unsigned char 
 16131 ;; Registers used:
 16132 ;;		wreg, status,2, status,0, pclath, cstack
 16133 ;; Tracked objects:
 16134 ;;		On entry : 0/0
 16135 ;;		On exit  : 0/0
 16136 ;;		Unchanged: 0/0
 16137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16141 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16142 ;;Total ram usage:        6 bytes
 16143 ;; Hardware stack levels used:    1
 16144 ;; Hardware stack levels required when called:    6
 16145 ;; This function calls:
 16146 ;;		___bmul
 16147 ;; This function is called by:
 16148 ;;		_setDelayOff_GO
 16149 ;; This function uses a non-reentrant model
 16150 ;;
 16151                           
 16152                           
 16153                           ;psect for function _DelayTimejudge
 16154  10E7                     _DelayTimejudge:	
 16155                           
 16156                           ;incstack = 0
 16157                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16158                           ;DelayTimejudge@value stored from wreg
 16159  10E7  0020               	movlb	0	; select bank0
 16160  10E8  00A9               	movwf	DelayTimejudge@value
 16161                           
 16162                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16163  10E9  3005               	movlw	5
 16164  10EA  00A4               	movwf	??_DelayTimejudge
 16165  10EB  0824               	movf	??_DelayTimejudge,w
 16166  10EC  00A6               	movwf	DelayTimejudge@i
 16167  10ED  01A7               	clrf	DelayTimejudge@j
 16168  10EE  01A8               	clrf	DelayTimejudge@k
 16169                           
 16170                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16171  10EF  3031               	movlw	49
 16172  10F0  0229               	subwf	DelayTimejudge@value,w
 16173  10F1  1803               	skipnc
 16174  10F2  290F               	goto	l5777
 16175                           
 16176                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16177  10F3  0829               	movf	DelayTimejudge@value,w
 16178  10F4  390F               	andlw	15
 16179  10F5  00A4               	movwf	??_DelayTimejudge
 16180  10F6  0824               	movf	??_DelayTimejudge,w
 16181  10F7  00A7               	movwf	DelayTimejudge@j
 16182                           
 16183                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16184  10F8  0829               	movf	DelayTimejudge@value,w
 16185  10F9  00A4               	movwf	??_DelayTimejudge
 16186  10FA  3004               	movlw	4
 16187  10FB                     u4735:	
 16188  10FB  36A4               	lsrf	??_DelayTimejudge,f
 16189  10FC  0B89               	decfsz	9,f
 16190  10FD  28FB               	goto	u4735
 16191  10FE  0824               	movf	??_DelayTimejudge,w
 16192  10FF  390F               	andlw	15
 16193  1100  00A5               	movwf	??_DelayTimejudge+1
 16194  1101  0825               	movf	??_DelayTimejudge+1,w
 16195  1102  00A8               	movwf	DelayTimejudge@k
 16196                           
 16197                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16198  1103  300A               	movlw	10
 16199  1104  00A4               	movwf	??_DelayTimejudge
 16200  1105  0824               	movf	??_DelayTimejudge,w
 16201  1106  00A0               	movwf	___bmul@multiplicand
 16202  1107  0828               	movf	DelayTimejudge@k,w
 16203  1108  319D  2570         	fcall	___bmul
 16204  110A  0020               	movlb	0	; select bank0
 16205  110B  0727               	addwf	DelayTimejudge@j,w
 16206  110C  00A5               	movwf	??_DelayTimejudge+1
 16207  110D  0825               	movf	??_DelayTimejudge+1,w
 16208  110E  00A6               	movwf	DelayTimejudge@i
 16209  110F                     l5777:	
 16210                           
 16211                           ;DelayOff_B1.c: 118: }
 16212                           ;DelayOff_B1.c: 139: return i;
 16213  110F  0826               	movf	DelayTimejudge@i,w
 16214  1110  0008               	return
 16215  1111                     __end_of_DelayTimejudge:	
 16216                           
 16217                           	psect	text103
 16218  1D70                     __ptext103:	
 16219 ;; *************** function ___bmul *****************
 16220 ;; Defined at:
 16221 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16222 ;; Parameters:    Size  Location     Type
 16223 ;;  multiplier      1    wreg     unsigned char 
 16224 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16225 ;; Auto vars:     Size  Location     Type
 16226 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16227 ;;  product         1    2[BANK0 ] unsigned char 
 16228 ;; Return value:  Size  Location     Type
 16229 ;;                  1    wreg      unsigned char 
 16230 ;; Registers used:
 16231 ;;		wreg, status,2, status,0
 16232 ;; Tracked objects:
 16233 ;;		On entry : 0/0
 16234 ;;		On exit  : 0/0
 16235 ;;		Unchanged: 0/0
 16236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16237 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16241 ;;Total ram usage:        4 bytes
 16242 ;; Hardware stack levels used:    1
 16243 ;; Hardware stack levels required when called:    5
 16244 ;; This function calls:
 16245 ;;		Nothing
 16246 ;; This function is called by:
 16247 ;;		_DelayTimejudge
 16248 ;; This function uses a non-reentrant model
 16249 ;;
 16250                           
 16251                           
 16252                           ;psect for function ___bmul
 16253  1D70                     ___bmul:	
 16254                           
 16255                           ;incstack = 0
 16256                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16257                           ;___bmul@multiplier stored from wreg
 16258  1D70  0020               	movlb	0	; select bank0
 16259  1D71  00A3               	movwf	___bmul@multiplier
 16260  1D72  01A2               	clrf	___bmul@product
 16261  1D73                     l5519:	
 16262  1D73  1C23               	btfss	___bmul@multiplier,0
 16263  1D74  2D79               	goto	l5523
 16264  1D75  0820               	movf	___bmul@multiplicand,w
 16265  1D76  00A1               	movwf	??___bmul
 16266  1D77  0821               	movf	??___bmul,w
 16267  1D78  07A2               	addwf	___bmul@product,f
 16268  1D79                     l5523:	
 16269  1D79  1003               	clrc
 16270  1D7A  0DA0               	rlf	___bmul@multiplicand,f
 16271  1D7B  1003               	clrc
 16272  1D7C  0CA3               	rrf	___bmul@multiplier,f
 16273  1D7D  08A3               	movf	___bmul@multiplier,f
 16274  1D7E  1D03               	skipz
 16275  1D7F  2D73               	goto	l5519
 16276  1D80  0822               	movf	___bmul@product,w
 16277  1D81  0008               	return
 16278  1D82                     __end_of___bmul:	
 16279                           
 16280                           	psect	text104
 16281  1CFC                     __ptext104:	
 16282 ;; *************** function _getDelayOff_GO *****************
 16283 ;; Defined at:
 16284 ;;		line 105 in file "../src/DelayOff_B1.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;  sw              1    wreg     unsigned char 
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;  sw              1    2[BANK0 ] unsigned char 
 16289 ;;  go              1    3[BANK0 ] unsigned char 
 16290 ;; Return value:  Size  Location     Type
 16291 ;;                  1    wreg      unsigned char 
 16292 ;; Registers used:
 16293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16294 ;; Tracked objects:
 16295 ;;		On entry : 0/0
 16296 ;;		On exit  : 0/0
 16297 ;;		Unchanged: 0/0
 16298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;Total ram usage:        2 bytes
 16304 ;; Hardware stack levels used:    1
 16305 ;; Hardware stack levels required when called:    6
 16306 ;; This function calls:
 16307 ;;		_DelayOffPointSelect
 16308 ;; This function is called by:
 16309 ;;		_setDimmerLights_SwOff
 16310 ;;		_setRFSW_Control
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           
 16315                           ;psect for function _getDelayOff_GO
 16316  1CFC                     _getDelayOff_GO:	
 16317                           
 16318                           ;incstack = 0
 16319                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16320                           ;getDelayOff_GO@sw stored from wreg
 16321  1CFC  0020               	movlb	0	; select bank0
 16322  1CFD  00A2               	movwf	getDelayOff_GO@sw
 16323                           
 16324                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16325  1CFE  0822               	movf	getDelayOff_GO@sw,w
 16326  1CFF  319C  240F         	fcall	_DelayOffPointSelect
 16327                           
 16328                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16329  1D01  0878               	movf	_DelayOff,w
 16330  1D02  0086               	movwf	6
 16331  1D03  3001               	movlw	1	; select bank2/3
 16332  1D04  0087               	movwf	7
 16333  1D05  3000               	movlw	0
 16334  1D06  1881               	btfsc	1,1
 16335  1D07  3001               	movlw	1
 16336  1D08  0020               	movlb	0	; select bank0
 16337  1D09  00A3               	movwf	getDelayOff_GO@go
 16338                           
 16339                           ;DelayOff_B1.c: 108: return go;
 16340  1D0A  0823               	movf	getDelayOff_GO@go,w
 16341  1D0B  0008               	return
 16342  1D0C                     __end_of_getDelayOff_GO:	
 16343                           
 16344                           	psect	text105
 16345  1CEC                     __ptext105:	
 16346 ;; *************** function _getDimmerLights_Status *****************
 16347 ;; Defined at:
 16348 ;;		line 445 in file "../src/Dimmer_B1.c"
 16349 ;; Parameters:    Size  Location     Type
 16350 ;;  lights          1    wreg     unsigned char 
 16351 ;; Auto vars:     Size  Location     Type
 16352 ;;  lights          1    2[BANK0 ] unsigned char 
 16353 ;;  status          1    3[BANK0 ] unsigned char 
 16354 ;; Return value:  Size  Location     Type
 16355 ;;                  1    wreg      unsigned char 
 16356 ;; Registers used:
 16357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16358 ;; Tracked objects:
 16359 ;;		On entry : 0/0
 16360 ;;		On exit  : 0/0
 16361 ;;		Unchanged: 0/0
 16362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;Total ram usage:        2 bytes
 16368 ;; Hardware stack levels used:    1
 16369 ;; Hardware stack levels required when called:    6
 16370 ;; This function calls:
 16371 ;;		_DimmerLightsPointSelect
 16372 ;; This function is called by:
 16373 ;;		_setDimmerLights_ErrorClose
 16374 ;;		_getMain_LightsStatus
 16375 ;;		_setRFSW_Control
 16376 ;;		_setRFSW_AdjControl
 16377 ;; This function uses a non-reentrant model
 16378 ;;
 16379                           
 16380                           
 16381                           ;psect for function _getDimmerLights_Status
 16382  1CEC                     _getDimmerLights_Status:	
 16383                           
 16384                           ;incstack = 0
 16385                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16386                           ;getDimmerLights_Status@lights stored from wreg
 16387  1CEC  0020               	movlb	0	; select bank0
 16388  1CED  00A2               	movwf	getDimmerLights_Status@lights
 16389                           
 16390                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16391  1CEE  0822               	movf	getDimmerLights_Status@lights,w
 16392  1CEF  319C  241A         	fcall	_DimmerLightsPointSelect
 16393                           
 16394                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16395  1CF1  0020               	movlb	0	; select bank0
 16396  1CF2  086F               	movf	_DimmerLights,w
 16397  1CF3  0086               	movwf	6
 16398  1CF4  3001               	movlw	1	; select bank2/3
 16399  1CF5  0087               	movwf	7
 16400  1CF6  3000               	movlw	0
 16401  1CF7  1A81               	btfsc	1,5
 16402  1CF8  3001               	movlw	1
 16403  1CF9  00A3               	movwf	getDimmerLights_Status@status
 16404                           
 16405                           ;Dimmer_B1.c: 448: return status;
 16406  1CFA  0823               	movf	getDimmerLights_Status@status,w
 16407  1CFB  0008               	return
 16408  1CFC                     __end_of_getDimmerLights_Status:	
 16409                           
 16410                           	psect	text106
 16411  1C1A                     __ptext106:	
 16412 ;; *************** function _DimmerLightsPointSelect *****************
 16413 ;; Defined at:
 16414 ;;		line 310 in file "../src/Dimmer_B1.c"
 16415 ;; Parameters:    Size  Location     Type
 16416 ;;  lights          1    wreg     unsigned char 
 16417 ;; Auto vars:     Size  Location     Type
 16418 ;;  lights          1    1[BANK0 ] unsigned char 
 16419 ;; Return value:  Size  Location     Type
 16420 ;;		None               void
 16421 ;; Registers used:
 16422 ;;		wreg
 16423 ;; Tracked objects:
 16424 ;;		On entry : 0/0
 16425 ;;		On exit  : 0/0
 16426 ;;		Unchanged: 0/0
 16427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;Total ram usage:        2 bytes
 16433 ;; Hardware stack levels used:    1
 16434 ;; Hardware stack levels required when called:    5
 16435 ;; This function calls:
 16436 ;;		Nothing
 16437 ;; This function is called by:
 16438 ;;		_setDimmerLights_Initialization
 16439 ;;		_setDimmerLights_Main
 16440 ;;		_getDimmerLights_Status
 16441 ;;		_setDimmerLights_SwOn
 16442 ;;		_setDimmerLights_SwOff
 16443 ;;		_setDimmerLights_AdjControl
 16444 ;;		_setDimmerLights_ErrorClose
 16445 ;;		_setDimmerLights
 16446 ;;		_setDimmerLights_Adj
 16447 ;;		_setDimmerLights_AdjRF
 16448 ;;		_setDimmerLights_Trigger
 16449 ;;		_setDimmerLights_TriggerAdj
 16450 ;;		_setDimmerLights_Status
 16451 ;;		_setDimmerLights_GO
 16452 ;;		_setDimmerLights_MaxmumValue
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           
 16457                           ;psect for function _DimmerLightsPointSelect
 16458  1C1A                     _DimmerLightsPointSelect:	
 16459                           
 16460                           ;incstack = 0
 16461                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16462                           ;DimmerLightsPointSelect@lights stored from wreg
 16463  1C1A  0020               	movlb	0	; select bank0
 16464  1C1B  00A1               	movwf	DimmerLightsPointSelect@lights
 16465                           
 16466                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16467  1C1C  0821               	movf	DimmerLightsPointSelect@lights,w
 16468  1C1D  3A01               	xorlw	1
 16469  1C1E  1D03               	skipz
 16470  1C1F  0008               	return
 16471                           
 16472                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16473  1C20  30C5               	movlw	_DimmerLights1& (0+255)
 16474  1C21  00A0               	movwf	??_DimmerLightsPointSelect
 16475  1C22  0820               	movf	??_DimmerLightsPointSelect,w
 16476  1C23  00EF               	movwf	_DimmerLights
 16477  1C24  0008               	return
 16478  1C25                     __end_of_DimmerLightsPointSelect:	
 16479                           
 16480                           	psect	text107
 16481  1696                     __ptext107:	
 16482 ;; *************** function _setBuz *****************
 16483 ;; Defined at:
 16484 ;;		line 22 in file "../src/Buzzer_B1.c"
 16485 ;; Parameters:    Size  Location     Type
 16486 ;;  count           1    wreg     unsigned char 
 16487 ;;  time            2    9[BANK0 ] int 
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;  count           1   12[BANK0 ] unsigned char 
 16490 ;; Return value:  Size  Location     Type
 16491 ;;		None               void
 16492 ;; Registers used:
 16493 ;;		wreg, status,2, status,0, pclath, cstack
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16499 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;Total ram usage:        4 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    6
 16506 ;; This function calls:
 16507 ;;		___awdiv
 16508 ;; This function is called by:
 16509 ;;		_DlyOff_Main
 16510 ;;		_setDimmerLights_Main
 16511 ;;		_setDimmerLights_SwOn
 16512 ;;		_my_MainTimer
 16513 ;;		_setMain_Exception
 16514 ;;		_setTemp_Main
 16515 ;;		_setLog_Code
 16516 ;;		_setControl_Lights_Table
 16517 ;;		_setRFSW_Control
 16518 ;;		_setSw_Main
 16519 ;; This function uses a non-reentrant model
 16520 ;;
 16521                           
 16522                           
 16523                           ;psect for function _setBuz
 16524  1696                     _setBuz:	
 16525                           
 16526                           ;incstack = 0
 16527                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16528                           ;setBuz@count stored from wreg
 16529  1696  0020               	movlb	0	; select bank0
 16530  1697  00AC               	movwf	setBuz@count
 16531                           
 16532                           ;Buzzer_B1.c: 23: time /= 10;
 16533  1698  300A               	movlw	10
 16534  1699  00A0               	movwf	___awdiv@divisor
 16535  169A  3000               	movlw	0
 16536  169B  00A1               	movwf	___awdiv@divisor+1
 16537  169C  082A               	movf	setBuz@time+1,w
 16538  169D  01A3               	clrf	___awdiv@dividend+1
 16539  169E  07A3               	addwf	___awdiv@dividend+1,f
 16540  169F  0829               	movf	setBuz@time,w
 16541  16A0  01A2               	clrf	___awdiv@dividend
 16542  16A1  07A2               	addwf	___awdiv@dividend,f
 16543  16A2  3195  2592  3196   	fcall	___awdiv
 16544  16A5  0020               	movlb	0	; select bank0
 16545  16A6  0821               	movf	?___awdiv+1,w
 16546  16A7  01AA               	clrf	setBuz@time+1
 16547  16A8  07AA               	addwf	setBuz@time+1,f
 16548  16A9  0820               	movf	?___awdiv,w
 16549  16AA  01A9               	clrf	setBuz@time
 16550  16AB  07A9               	addwf	setBuz@time,f
 16551                           
 16552                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16553  16AC  0021               	movlb	1	; select bank1
 16554  16AD  1C2E               	btfss	_Buz1^(0+128),0
 16555  16AE  0008               	return
 16556                           
 16557                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16558  16AF  18AE               	btfsc	_Buz1^(0+128),1
 16559  16B0  2EC7               	goto	l84
 16560                           
 16561                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16562  16B1  14AE               	bsf	_Buz1^(0+128),1
 16563                           
 16564                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16565  16B2  01AF               	clrf	(_Buz1^(0+128)+1)
 16566  16B3  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16567                           
 16568                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16569  16B4  0020               	movlb	0	; select bank0
 16570  16B5  082C               	movf	setBuz@count,w
 16571  16B6  00AB               	movwf	??_setBuz
 16572  16B7  082B               	movf	??_setBuz,w
 16573  16B8  0021               	movlb	1	; select bank1
 16574  16B9  00B1               	movwf	(_Buz1^(0+128)+3)
 16575                           
 16576                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16577  16BA  0020               	movlb	0	; select bank0
 16578  16BB  082A               	movf	setBuz@time+1,w
 16579  16BC  0021               	movlb	1	; select bank1
 16580  16BD  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16581  16BE  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16582  16BF  0020               	movlb	0	; select bank0
 16583  16C0  0829               	movf	setBuz@time,w
 16584  16C1  0021               	movlb	1	; select bank1
 16585  16C2  01B4               	clrf	(_Buz1^(0+128)+6)
 16586  16C3  07B4               	addwf	(_Buz1^(0+128)+6),f
 16587                           
 16588                           ;Buzzer_B1.c: 30: RB3 = 1;
 16589  16C4  0020               	movlb	0	; select bank0
 16590  16C5  158D               	bsf	13,3	;volatile
 16591                           
 16592                           ;Buzzer_B1.c: 31: } else {
 16593  16C6  0008               	return
 16594  16C7                     l84:	
 16595                           
 16596                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16597  16C7  19AE               	btfsc	_Buz1^(0+128),3
 16598  16C8  2EDB               	goto	l86
 16599                           
 16600                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16601  16C9  15AE               	bsf	_Buz1^(0+128),3
 16602                           
 16603                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16604  16CA  0020               	movlb	0	; select bank0
 16605  16CB  082C               	movf	setBuz@count,w
 16606  16CC  00AB               	movwf	??_setBuz
 16607  16CD  082B               	movf	??_setBuz,w
 16608  16CE  0021               	movlb	1	; select bank1
 16609  16CF  00B2               	movwf	(_Buz1^(0+128)+4)
 16610                           
 16611                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16612  16D0  0020               	movlb	0	; select bank0
 16613  16D1  082A               	movf	setBuz@time+1,w
 16614  16D2  0021               	movlb	1	; select bank1
 16615  16D3  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16616  16D4  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16617  16D5  0020               	movlb	0	; select bank0
 16618  16D6  0829               	movf	setBuz@time,w
 16619  16D7  0021               	movlb	1	; select bank1
 16620  16D8  01B6               	clrf	(_Buz1^(0+128)+8)
 16621  16D9  07B6               	addwf	(_Buz1^(0+128)+8),f
 16622                           
 16623                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16624  16DA  0008               	return
 16625  16DB                     l86:	
 16626  16DB  1A2E               	btfsc	_Buz1^(0+128),4
 16627  16DC  0008               	return
 16628                           
 16629                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16630  16DD  162E               	bsf	_Buz1^(0+128),4
 16631                           
 16632                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16633  16DE  0020               	movlb	0	; select bank0
 16634  16DF  082C               	movf	setBuz@count,w
 16635  16E0  00AB               	movwf	??_setBuz
 16636  16E1  082B               	movf	??_setBuz,w
 16637  16E2  0021               	movlb	1	; select bank1
 16638  16E3  00B3               	movwf	(_Buz1^(0+128)+5)
 16639                           
 16640                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16641  16E4  0020               	movlb	0	; select bank0
 16642  16E5  082A               	movf	setBuz@time+1,w
 16643  16E6  0021               	movlb	1	; select bank1
 16644  16E7  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16645  16E8  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16646  16E9  0020               	movlb	0	; select bank0
 16647  16EA  0829               	movf	setBuz@time,w
 16648  16EB  0021               	movlb	1	; select bank1
 16649  16EC  01B8               	clrf	(_Buz1^(0+128)+10)
 16650  16ED  07B8               	addwf	(_Buz1^(0+128)+10),f
 16651  16EE  0008               	return
 16652  16EF                     __end_of_setBuz:	
 16653                           
 16654                           	psect	text108
 16655  1592                     __ptext108:	
 16656 ;; *************** function ___awdiv *****************
 16657 ;; Defined at:
 16658 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16659 ;; Parameters:    Size  Location     Type
 16660 ;;  divisor         2    0[BANK0 ] int 
 16661 ;;  dividend        2    2[BANK0 ] int 
 16662 ;; Auto vars:     Size  Location     Type
 16663 ;;  quotient        2    7[BANK0 ] int 
 16664 ;;  sign            1    6[BANK0 ] unsigned char 
 16665 ;;  counter         1    5[BANK0 ] unsigned char 
 16666 ;; Return value:  Size  Location     Type
 16667 ;;                  2    0[BANK0 ] int 
 16668 ;; Registers used:
 16669 ;;		wreg, status,2, status,0
 16670 ;; Tracked objects:
 16671 ;;		On entry : 0/0
 16672 ;;		On exit  : 0/0
 16673 ;;		Unchanged: 0/0
 16674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16675 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;Total ram usage:        9 bytes
 16680 ;; Hardware stack levels used:    1
 16681 ;; Hardware stack levels required when called:    5
 16682 ;; This function calls:
 16683 ;;		Nothing
 16684 ;; This function is called by:
 16685 ;;		_setBuz
 16686 ;; This function uses a non-reentrant model
 16687 ;;
 16688                           
 16689                           
 16690                           ;psect for function ___awdiv
 16691  1592                     ___awdiv:	
 16692                           
 16693                           ;incstack = 0
 16694                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16695  1592  0020               	movlb	0	; select bank0
 16696  1593  01A6               	clrf	___awdiv@sign
 16697  1594  1FA1               	btfss	___awdiv@divisor+1,7
 16698  1595  2D9D               	goto	l5801
 16699  1596  09A0               	comf	___awdiv@divisor,f
 16700  1597  09A1               	comf	___awdiv@divisor+1,f
 16701  1598  0AA0               	incf	___awdiv@divisor,f
 16702  1599  1903               	skipnz
 16703  159A  0AA1               	incf	___awdiv@divisor+1,f
 16704  159B  01A6               	clrf	___awdiv@sign
 16705  159C  0AA6               	incf	___awdiv@sign,f
 16706  159D                     l5801:	
 16707  159D  1FA3               	btfss	___awdiv@dividend+1,7
 16708  159E  2DA8               	goto	l5807
 16709  159F  09A2               	comf	___awdiv@dividend,f
 16710  15A0  09A3               	comf	___awdiv@dividend+1,f
 16711  15A1  0AA2               	incf	___awdiv@dividend,f
 16712  15A2  1903               	skipnz
 16713  15A3  0AA3               	incf	___awdiv@dividend+1,f
 16714  15A4  3001               	movlw	1
 16715  15A5  00A4               	movwf	??___awdiv
 16716  15A6  0824               	movf	??___awdiv,w
 16717  15A7  06A6               	xorwf	___awdiv@sign,f
 16718  15A8                     l5807:	
 16719  15A8  01A7               	clrf	___awdiv@quotient
 16720  15A9  01A8               	clrf	___awdiv@quotient+1
 16721  15AA  0821               	movf	___awdiv@divisor+1,w
 16722  15AB  0420               	iorwf	___awdiv@divisor,w
 16723  15AC  1903               	skipnz
 16724  15AD  2DD7               	goto	l5829
 16725  15AE  01A5               	clrf	___awdiv@counter
 16726  15AF  0AA5               	incf	___awdiv@counter,f
 16727  15B0                     l5817:	
 16728  15B0  1BA1               	btfsc	___awdiv@divisor+1,7
 16729  15B1  2DBC               	goto	l5819
 16730  15B2  3001               	movlw	1
 16731  15B3                     u4785:	
 16732  15B3  35A0               	lslf	___awdiv@divisor,f
 16733  15B4  0DA1               	rlf	___awdiv@divisor+1,f
 16734  15B5  0B89               	decfsz	9,f
 16735  15B6  2DB3               	goto	u4785
 16736  15B7  3001               	movlw	1
 16737  15B8  00A4               	movwf	??___awdiv
 16738  15B9  0824               	movf	??___awdiv,w
 16739  15BA  07A5               	addwf	___awdiv@counter,f
 16740  15BB  2DB0               	goto	l5817
 16741  15BC                     l5819:	
 16742  15BC  3001               	movlw	1
 16743  15BD                     u4805:	
 16744  15BD  35A7               	lslf	___awdiv@quotient,f
 16745  15BE  0DA8               	rlf	___awdiv@quotient+1,f
 16746  15BF  0B89               	decfsz	9,f
 16747  15C0  2DBD               	goto	u4805
 16748  15C1  0821               	movf	___awdiv@divisor+1,w
 16749  15C2  0223               	subwf	___awdiv@dividend+1,w
 16750  15C3  1D03               	skipz
 16751  15C4  2DC7               	goto	u4815
 16752  15C5  0820               	movf	___awdiv@divisor,w
 16753  15C6  0222               	subwf	___awdiv@dividend,w
 16754  15C7                     u4815:	
 16755  15C7  1C03               	skipc
 16756  15C8  2DCE               	goto	l5825
 16757  15C9  0820               	movf	___awdiv@divisor,w
 16758  15CA  02A2               	subwf	___awdiv@dividend,f
 16759  15CB  0821               	movf	___awdiv@divisor+1,w
 16760  15CC  3BA3               	subwfb	___awdiv@dividend+1,f
 16761  15CD  1427               	bsf	___awdiv@quotient,0
 16762  15CE                     l5825:	
 16763  15CE  3001               	movlw	1
 16764  15CF                     u4825:	
 16765  15CF  36A1               	lsrf	___awdiv@divisor+1,f
 16766  15D0  0CA0               	rrf	___awdiv@divisor,f
 16767  15D1  0B89               	decfsz	9,f
 16768  15D2  2DCF               	goto	u4825
 16769  15D3  3001               	movlw	1
 16770  15D4  02A5               	subwf	___awdiv@counter,f
 16771  15D5  1D03               	btfss	3,2
 16772  15D6  2DBC               	goto	l5819
 16773  15D7                     l5829:	
 16774  15D7  0826               	movf	___awdiv@sign,w
 16775  15D8  1903               	btfsc	3,2
 16776  15D9  2DDF               	goto	l5833
 16777  15DA  09A7               	comf	___awdiv@quotient,f
 16778  15DB  09A8               	comf	___awdiv@quotient+1,f
 16779  15DC  0AA7               	incf	___awdiv@quotient,f
 16780  15DD  1903               	skipnz
 16781  15DE  0AA8               	incf	___awdiv@quotient+1,f
 16782  15DF                     l5833:	
 16783  15DF  0828               	movf	___awdiv@quotient+1,w
 16784  15E0  01A1               	clrf	?___awdiv+1
 16785  15E1  07A1               	addwf	?___awdiv+1,f
 16786  15E2  0827               	movf	___awdiv@quotient,w
 16787  15E3  01A0               	clrf	?___awdiv
 16788  15E4  07A0               	addwf	?___awdiv,f
 16789  15E5  0008               	return
 16790  15E6                     __end_of___awdiv:	
 16791                           
 16792                           	psect	text109
 16793  1B98                     __ptext109:	
 16794 ;; *************** function _DelayOff_Initialization *****************
 16795 ;; Defined at:
 16796 ;;		line 26 in file "../src/DelayOff_B1.c"
 16797 ;; Parameters:    Size  Location     Type
 16798 ;;		None
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;		None
 16801 ;; Return value:  Size  Location     Type
 16802 ;;		None               void
 16803 ;; Registers used:
 16804 ;;		wreg, status,2, status,0, pclath, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;Total ram usage:        0 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    7
 16817 ;; This function calls:
 16818 ;;		_DlyOff_Initialization
 16819 ;; This function is called by:
 16820 ;;		_main
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           
 16825                           ;psect for function _DelayOff_Initialization
 16826  1B98                     _DelayOff_Initialization:	
 16827                           
 16828                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16829                           
 16830                           ;incstack = 0
 16831                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16832  1B98  3001               	movlw	1
 16833  1B99  319B  23B6         	fcall	_DlyOff_Initialization
 16834  1B9B  0008               	return
 16835  1B9C                     __end_of_DelayOff_Initialization:	
 16836                           
 16837                           	psect	text110
 16838  1BB6                     __ptext110:	
 16839 ;; *************** function _DlyOff_Initialization *****************
 16840 ;; Defined at:
 16841 ;;		line 56 in file "../src/DelayOff_B1.c"
 16842 ;; Parameters:    Size  Location     Type
 16843 ;;  sw              1    wreg     unsigned char 
 16844 ;; Auto vars:     Size  Location     Type
 16845 ;;  sw              1    2[BANK0 ] unsigned char 
 16846 ;; Return value:  Size  Location     Type
 16847 ;;		None               void
 16848 ;; Registers used:
 16849 ;;		wreg, status,2, status,0, pclath, cstack
 16850 ;; Tracked objects:
 16851 ;;		On entry : 0/0
 16852 ;;		On exit  : 0/0
 16853 ;;		Unchanged: 0/0
 16854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16858 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;Total ram usage:        1 bytes
 16860 ;; Hardware stack levels used:    1
 16861 ;; Hardware stack levels required when called:    6
 16862 ;; This function calls:
 16863 ;;		_DelayOffPointSelect
 16864 ;; This function is called by:
 16865 ;;		_DelayOff_Initialization
 16866 ;; This function uses a non-reentrant model
 16867 ;;
 16868                           
 16869                           
 16870                           ;psect for function _DlyOff_Initialization
 16871  1BB6                     _DlyOff_Initialization:	
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16875                           ;DlyOff_Initialization@sw stored from wreg
 16876  1BB6  0020               	movlb	0	; select bank0
 16877  1BB7  00A2               	movwf	DlyOff_Initialization@sw
 16878                           
 16879                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16880  1BB8  0822               	movf	DlyOff_Initialization@sw,w
 16881  1BB9  319C  240F         	fcall	_DelayOffPointSelect
 16882  1BBB  0008               	return
 16883  1BBC                     __end_of_DlyOff_Initialization:	
 16884                           
 16885                           	psect	text111
 16886  1C0F                     __ptext111:	
 16887 ;; *************** function _DelayOffPointSelect *****************
 16888 ;; Defined at:
 16889 ;;		line 7 in file "../src/DelayOff_B1.c"
 16890 ;; Parameters:    Size  Location     Type
 16891 ;;  sw              1    wreg     unsigned char 
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;  sw              1    1[BANK0 ] unsigned char 
 16894 ;; Return value:  Size  Location     Type
 16895 ;;		None               void
 16896 ;; Registers used:
 16897 ;;		wreg
 16898 ;; Tracked objects:
 16899 ;;		On entry : 0/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16907 ;;Total ram usage:        2 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; Hardware stack levels required when called:    5
 16910 ;; This function calls:
 16911 ;;		Nothing
 16912 ;; This function is called by:
 16913 ;;		_DlyOff_Initialization
 16914 ;;		_DlyOff_Main
 16915 ;;		_setDelayOff_GO
 16916 ;;		_getDelayOff_GO
 16917 ;; This function uses a non-reentrant model
 16918 ;;
 16919                           
 16920                           
 16921                           ;psect for function _DelayOffPointSelect
 16922  1C0F                     _DelayOffPointSelect:	
 16923                           
 16924                           ;incstack = 0
 16925                           ; Regs used in _DelayOffPointSelect: [wreg]
 16926                           ;DelayOffPointSelect@sw stored from wreg
 16927  1C0F  0020               	movlb	0	; select bank0
 16928  1C10  00A1               	movwf	DelayOffPointSelect@sw
 16929                           
 16930                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16931  1C11  0821               	movf	DelayOffPointSelect@sw,w
 16932  1C12  3A01               	xorlw	1
 16933  1C13  1D03               	skipz
 16934  1C14  0008               	return
 16935                           
 16936                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16937  1C15  30DD               	movlw	_DlySw1& (0+255)
 16938  1C16  00A0               	movwf	??_DelayOffPointSelect
 16939  1C17  0820               	movf	??_DelayOffPointSelect,w
 16940  1C18  00F8               	movwf	_DelayOff
 16941  1C19  0008               	return
 16942  1C1A                     __end_of_DelayOffPointSelect:	
 16943                           
 16944                           	psect	text112
 16945  1E09                     __ptext112:	
 16946 ;; *************** function _CC2500_PowerOnInitial *****************
 16947 ;; Defined at:
 16948 ;;		line 119 in file "../src/CC2500_B1.c"
 16949 ;; Parameters:    Size  Location     Type
 16950 ;;		None
 16951 ;; Auto vars:     Size  Location     Type
 16952 ;;		None
 16953 ;; Return value:  Size  Location     Type
 16954 ;;		None               void
 16955 ;; Registers used:
 16956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16957 ;; Tracked objects:
 16958 ;;		On entry : 0/0
 16959 ;;		On exit  : 0/0
 16960 ;;		Unchanged: 0/0
 16961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16966 ;;Total ram usage:        0 bytes
 16967 ;; Hardware stack levels used:    1
 16968 ;; Hardware stack levels required when called:    8
 16969 ;; This function calls:
 16970 ;;		_CC2500_ClearRXFIFO
 16971 ;;		_CC2500_ClearTXFIFO
 16972 ;;		_CC2500_FrequencyCabr
 16973 ;;		_CC2500_InitPATable
 16974 ;;		_CC2500_InitSetREG
 16975 ;;		_CC2500_PowerRST
 16976 ;;		_CC2500_SIDLEMode
 16977 ;; This function is called by:
 16978 ;;		_main
 16979 ;; This function uses a non-reentrant model
 16980 ;;
 16981                           
 16982                           
 16983                           ;psect for function _CC2500_PowerOnInitial
 16984  1E09                     _CC2500_PowerOnInitial:	
 16985                           
 16986                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16987                           
 16988                           ;incstack = 0
 16989                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16990  1E09  3194  246E  319E   	fcall	_CC2500_PowerRST
 16991                           
 16992                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16993  1E0C  3190  20BD  319E   	fcall	_CC2500_InitSetREG
 16994                           
 16995                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16996  1E0F  319E  26B5  319E   	fcall	_CC2500_InitPATable
 16997                           
 16998                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16999  1E12  319B  2390  319E   	fcall	_CC2500_ClearTXFIFO
 17000                           
 17001                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17002  1E15  319B  238C  319E   	fcall	_CC2500_ClearRXFIFO
 17003                           
 17004                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17005  1E18  319C  245C  319E   	fcall	_CC2500_FrequencyCabr
 17006                           
 17007                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17008  1E1B  319B  2394         	fcall	_CC2500_SIDLEMode
 17009  1E1D  0008               	return
 17010  1E1E                     __end_of_CC2500_PowerOnInitial:	
 17011                           
 17012                           	psect	text113
 17013  1B94                     __ptext113:	
 17014 ;; *************** function _CC2500_SIDLEMode *****************
 17015 ;; Defined at:
 17016 ;;		line 209 in file "../src/CC2500_B1.c"
 17017 ;; Parameters:    Size  Location     Type
 17018 ;;		None
 17019 ;; Auto vars:     Size  Location     Type
 17020 ;;		None
 17021 ;; Return value:  Size  Location     Type
 17022 ;;		None               void
 17023 ;; Registers used:
 17024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17025 ;; Tracked objects:
 17026 ;;		On entry : 0/0
 17027 ;;		On exit  : 0/0
 17028 ;;		Unchanged: 0/0
 17029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17034 ;;Total ram usage:        0 bytes
 17035 ;; Hardware stack levels used:    1
 17036 ;; Hardware stack levels required when called:    7
 17037 ;; This function calls:
 17038 ;;		_CC2500_WriteCommand
 17039 ;; This function is called by:
 17040 ;;		_CC2500_PowerOnInitial
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           
 17045                           ;psect for function _CC2500_SIDLEMode
 17046  1B94                     _CC2500_SIDLEMode:	
 17047                           
 17048                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17049                           
 17050                           ;incstack = 0
 17051                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17052  1B94  3036               	movlw	54
 17053  1B95  319E  2662         	fcall	_CC2500_WriteCommand
 17054  1B97  0008               	return
 17055  1B98                     __end_of_CC2500_SIDLEMode:	
 17056                           
 17057                           	psect	text114
 17058  146E                     __ptext114:	
 17059 ;; *************** function _CC2500_PowerRST *****************
 17060 ;; Defined at:
 17061 ;;		line 132 in file "../src/CC2500_B1.c"
 17062 ;; Parameters:    Size  Location     Type
 17063 ;;		None
 17064 ;; Auto vars:     Size  Location     Type
 17065 ;;		None
 17066 ;; Return value:  Size  Location     Type
 17067 ;;		None               void
 17068 ;; Registers used:
 17069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17070 ;; Tracked objects:
 17071 ;;		On entry : 0/0
 17072 ;;		On exit  : 0/0
 17073 ;;		Unchanged: 0/0
 17074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17079 ;;Total ram usage:        1 bytes
 17080 ;; Hardware stack levels used:    1
 17081 ;; Hardware stack levels required when called:    6
 17082 ;; This function calls:
 17083 ;;		_CC2500_WriteByte
 17084 ;;		_DelayTime_1us
 17085 ;;		_Timeout_Counter
 17086 ;;		_set_TimeoutCleared
 17087 ;; This function is called by:
 17088 ;;		_CC2500_PowerOnInitial
 17089 ;; This function uses a non-reentrant model
 17090 ;;
 17091                           
 17092                           
 17093                           ;psect for function _CC2500_PowerRST
 17094  146E                     _CC2500_PowerRST:	
 17095                           
 17096                           ;CC2500_B1.c: 133: RC3 = 0;
 17097                           
 17098                           ;incstack = 0
 17099                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17100  146E  0020               	movlb	0	; select bank0
 17101  146F  118E               	bcf	14,3	;volatile
 17102                           
 17103                           ;CC2500_B1.c: 134: RC4 = 0;
 17104  1470  120E               	bcf	14,4	;volatile
 17105                           
 17106                           ;CC2500_B1.c: 135: RC0 = 1;
 17107  1471  140E               	bsf	14,0	;volatile
 17108                           
 17109                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17110  1472  300A               	movlw	10
 17111  1473  00A0               	movwf	DelayTime_1us@count
 17112  1474  3000               	movlw	0
 17113  1475  00A1               	movwf	DelayTime_1us@count+1
 17114  1476  3190  2070  3194   	fcall	_DelayTime_1us
 17115                           
 17116                           ;CC2500_B1.c: 137: RC0 = 0;
 17117  1479  0020               	movlb	0	; select bank0
 17118  147A  100E               	bcf	14,0	;volatile
 17119                           
 17120                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17121  147B  300A               	movlw	10
 17122  147C  00A0               	movwf	DelayTime_1us@count
 17123  147D  3000               	movlw	0
 17124  147E  00A1               	movwf	DelayTime_1us@count+1
 17125  147F  3190  2070  3194   	fcall	_DelayTime_1us
 17126                           
 17127                           ;CC2500_B1.c: 139: RC0 = 1;
 17128  1482  0020               	movlb	0	; select bank0
 17129  1483  140E               	bsf	14,0	;volatile
 17130                           
 17131                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17132  1484  3028               	movlw	40
 17133  1485  00A0               	movwf	DelayTime_1us@count
 17134  1486  3000               	movlw	0
 17135  1487  00A1               	movwf	DelayTime_1us@count+1
 17136  1488  3190  2070  3194   	fcall	_DelayTime_1us
 17137                           
 17138                           ;CC2500_B1.c: 141: RC0 = 0;
 17139  148B  0020               	movlb	0	; select bank0
 17140  148C  100E               	bcf	14,0	;volatile
 17141                           
 17142                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17143  148D  3030               	movlw	48
 17144  148E  00A6               	movwf	??_CC2500_PowerRST
 17145  148F  0826               	movf	??_CC2500_PowerRST,w
 17146  1490  00FB               	movwf	_SPI0Buffer
 17147                           
 17148                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17149  1491  2C95               	goto	l6765
 17150  1492                     l6763:	
 17151                           
 17152                           ;CC2500_B1.c: 144: Timeout_Counter();
 17153  1492  319D  25F4  3194   	fcall	_Timeout_Counter
 17154  1495                     l6765:	
 17155  1495  0020               	movlb	0	; select bank0
 17156  1496  1E8E               	btfss	14,5	;volatile
 17157  1497  2C9B               	goto	l6769
 17158  1498  0021               	movlb	1	; select bank1
 17159  1499  1D2B               	btfss	(_myMain^(0+128)+11),2
 17160  149A  2C92               	goto	l6763
 17161  149B                     l6769:	
 17162                           
 17163                           ;CC2500_B1.c: 145: };
 17164                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17165  149B  319B  23AC  3194   	fcall	_set_TimeoutCleared
 17166                           
 17167                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17168  149E  319D  25CC  3194   	fcall	_CC2500_WriteByte
 17169                           
 17170                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17171  14A1  2CA5               	goto	l6775
 17172  14A2                     l6773:	
 17173                           
 17174                           ;CC2500_B1.c: 149: Timeout_Counter();
 17175  14A2  319D  25F4  3194   	fcall	_Timeout_Counter
 17176  14A5                     l6775:	
 17177  14A5  0020               	movlb	0	; select bank0
 17178  14A6  1E8E               	btfss	14,5	;volatile
 17179  14A7  2CAB               	goto	l6779
 17180  14A8  0021               	movlb	1	; select bank1
 17181  14A9  1D2B               	btfss	(_myMain^(0+128)+11),2
 17182  14AA  2CA2               	goto	l6773
 17183  14AB                     l6779:	
 17184                           
 17185                           ;CC2500_B1.c: 150: };
 17186                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17187  14AB  319B  23AC         	fcall	_set_TimeoutCleared
 17188                           
 17189                           ;CC2500_B1.c: 152: RC4 = 0;
 17190  14AD  0020               	movlb	0	; select bank0
 17191  14AE  120E               	bcf	14,4	;volatile
 17192                           
 17193                           ;CC2500_B1.c: 153: RC0 = 1;
 17194  14AF  140E               	bsf	14,0	;volatile
 17195  14B0  0008               	return
 17196  14B1                     __end_of_CC2500_PowerRST:	
 17197                           
 17198                           	psect	text115
 17199  10BD                     __ptext115:	
 17200 ;; *************** function _CC2500_InitSetREG *****************
 17201 ;; Defined at:
 17202 ;;		line 159 in file "../src/CC2500_B1.c"
 17203 ;; Parameters:    Size  Location     Type
 17204 ;;		None
 17205 ;; Auto vars:     Size  Location     Type
 17206 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17207 ;;  temp2           1    7[BANK0 ] unsigned char 
 17208 ;;  temp1           1    6[BANK0 ] unsigned char 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;		None               void
 17211 ;; Registers used:
 17212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17213 ;; Tracked objects:
 17214 ;;		On entry : 0/0
 17215 ;;		On exit  : 0/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17222 ;;Total ram usage:        4 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:    7
 17225 ;; This function calls:
 17226 ;;		_CC2500_WriteREG
 17227 ;; This function is called by:
 17228 ;;		_CC2500_PowerOnInitial
 17229 ;; This function uses a non-reentrant model
 17230 ;;
 17231                           
 17232                           
 17233                           ;psect for function _CC2500_InitSetREG
 17234  10BD                     _CC2500_InitSetREG:	
 17235                           
 17236                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17237                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17238                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17239                           
 17240                           ;incstack = 0
 17241                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17242  10BD  0020               	movlb	0	; select bank0
 17243  10BE  01A8               	clrf	CC2500_InitSetREG@loop_c
 17244  10BF                     L9:	
 17245  10BF  302F               	movlw	47
 17246  10C0  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17247  10C1  1803               	btfsc	3,0
 17248  10C2  0008               	return
 17249                           
 17250                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17251  10C3  0828               	movf	CC2500_InitSetREG@loop_c,w
 17252  10C4  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17253  10C5  0084               	movwf	4
 17254  10C6  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17255  10C7  1803               	skipnc
 17256  10C8  3E01               	addlw	1
 17257  10C9  0085               	movwf	5
 17258  10CA  0800               	movf	0,w	;code access
 17259  10CB  00A5               	movwf	??_CC2500_InitSetREG
 17260  10CC  0825               	movf	??_CC2500_InitSetREG,w
 17261  10CD  00A6               	movwf	CC2500_InitSetREG@temp1
 17262                           
 17263                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17264  10CE  0828               	movf	CC2500_InitSetREG@loop_c,w
 17265  10CF  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17266  10D0  0084               	movwf	4
 17267  10D1  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17268  10D2  1803               	skipnc
 17269  10D3  3E01               	addlw	1
 17270  10D4  0085               	movwf	5
 17271  10D5  0800               	movf	0,w	;code access
 17272  10D6  00A5               	movwf	??_CC2500_InitSetREG
 17273  10D7  0825               	movf	??_CC2500_InitSetREG,w
 17274  10D8  00A7               	movwf	CC2500_InitSetREG@temp2
 17275                           
 17276                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17277  10D9  0827               	movf	CC2500_InitSetREG@temp2,w
 17278  10DA  00A5               	movwf	??_CC2500_InitSetREG
 17279  10DB  0825               	movf	??_CC2500_InitSetREG,w
 17280  10DC  00A2               	movwf	CC2500_WriteREG@value
 17281  10DD  0826               	movf	CC2500_InitSetREG@temp1,w
 17282  10DE  319F  2754  3190   	fcall	_CC2500_WriteREG
 17283  10E1  3001               	movlw	1
 17284  10E2  0020               	movlb	0	; select bank0
 17285  10E3  00A5               	movwf	??_CC2500_InitSetREG
 17286  10E4  0825               	movf	??_CC2500_InitSetREG,w
 17287  10E5  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17288  10E6  28BF               	goto	L9
 17289  10E7                     __end_of_CC2500_InitSetREG:	
 17290                           
 17291                           	psect	text116
 17292  1EB5                     __ptext116:	
 17293 ;; *************** function _CC2500_InitPATable *****************
 17294 ;; Defined at:
 17295 ;;		line 174 in file "../src/CC2500_B1.c"
 17296 ;; Parameters:    Size  Location     Type
 17297 ;;		None
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17300 ;;  temp            1    6[BANK0 ] unsigned char 
 17301 ;; Return value:  Size  Location     Type
 17302 ;;		None               void
 17303 ;; Registers used:
 17304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17305 ;; Tracked objects:
 17306 ;;		On entry : 0/0
 17307 ;;		On exit  : 0/0
 17308 ;;		Unchanged: 0/0
 17309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;Total ram usage:        3 bytes
 17315 ;; Hardware stack levels used:    1
 17316 ;; Hardware stack levels required when called:    7
 17317 ;; This function calls:
 17318 ;;		_CC2500_WriteREG
 17319 ;; This function is called by:
 17320 ;;		_CC2500_PowerOnInitial
 17321 ;; This function uses a non-reentrant model
 17322 ;;
 17323                           
 17324                           
 17325                           ;psect for function _CC2500_InitPATable
 17326  1EB5                     _CC2500_InitPATable:	
 17327                           
 17328                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17329                           ;CC2500_B1.c: 176: unsigned char temp;
 17330                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17334  1EB5  0020               	movlb	0	; select bank0
 17335  1EB6  01A7               	clrf	CC2500_InitPATable@loop_d
 17336  1EB7                     L10:	
 17337  1EB7  3008               	movlw	8
 17338  1EB8  0227               	subwf	CC2500_InitPATable@loop_d,w
 17339  1EB9  1803               	btfsc	3,0
 17340  1EBA  0008               	return
 17341                           
 17342                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17343  1EBB  0827               	movf	CC2500_InitPATable@loop_d,w
 17344  1EBC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17345  1EBD  0084               	movwf	4
 17346  1EBE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17347  1EBF  1803               	skipnc
 17348  1EC0  3E01               	addlw	1
 17349  1EC1  0085               	movwf	5
 17350  1EC2  0800               	movf	0,w	;code access
 17351  1EC3  00A5               	movwf	??_CC2500_InitPATable
 17352  1EC4  0825               	movf	??_CC2500_InitPATable,w
 17353  1EC5  00A6               	movwf	CC2500_InitPATable@temp
 17354                           
 17355                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17356  1EC6  0826               	movf	CC2500_InitPATable@temp,w
 17357  1EC7  00A5               	movwf	??_CC2500_InitPATable
 17358  1EC8  0825               	movf	??_CC2500_InitPATable,w
 17359  1EC9  00A2               	movwf	CC2500_WriteREG@value
 17360  1ECA  303E               	movlw	62
 17361  1ECB  319F  2754  319E   	fcall	_CC2500_WriteREG
 17362  1ECE  3001               	movlw	1
 17363  1ECF  0020               	movlb	0	; select bank0
 17364  1ED0  00A5               	movwf	??_CC2500_InitPATable
 17365  1ED1  0825               	movf	??_CC2500_InitPATable,w
 17366  1ED2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17367  1ED3  2EB7               	goto	L10
 17368  1ED4                     __end_of_CC2500_InitPATable:	
 17369                           
 17370                           	psect	text117
 17371  1F54                     __ptext117:	
 17372 ;; *************** function _CC2500_WriteREG *****************
 17373 ;; Defined at:
 17374 ;;		line 251 in file "../src/CC2500_B1.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  w_addr          1    wreg     unsigned char 
 17377 ;;  value           1    2[BANK0 ] unsigned char 
 17378 ;; Auto vars:     Size  Location     Type
 17379 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17380 ;; Return value:  Size  Location     Type
 17381 ;;		None               void
 17382 ;; Registers used:
 17383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17384 ;; Tracked objects:
 17385 ;;		On entry : 0/0
 17386 ;;		On exit  : 0/0
 17387 ;;		Unchanged: 0/0
 17388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17389 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;Total ram usage:        3 bytes
 17394 ;; Hardware stack levels used:    1
 17395 ;; Hardware stack levels required when called:    6
 17396 ;; This function calls:
 17397 ;;		_CC2500_WriteByte
 17398 ;;		_Timeout_Counter
 17399 ;;		_set_TimeoutCleared
 17400 ;; This function is called by:
 17401 ;;		_CC2500_InitSetREG
 17402 ;;		_CC2500_InitPATable
 17403 ;; This function uses a non-reentrant model
 17404 ;;
 17405                           
 17406                           
 17407                           ;psect for function _CC2500_WriteREG
 17408  1F54                     _CC2500_WriteREG:	
 17409                           
 17410                           ;incstack = 0
 17411                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17412                           ;CC2500_WriteREG@w_addr stored from wreg
 17413  1F54  0020               	movlb	0	; select bank0
 17414  1F55  00A4               	movwf	CC2500_WriteREG@w_addr
 17415                           
 17416                           ;CC2500_B1.c: 252: RC0 = 0;
 17417  1F56  100E               	bcf	14,0	;volatile
 17418                           
 17419                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17420  1F57  0824               	movf	CC2500_WriteREG@w_addr,w
 17421  1F58  00A3               	movwf	??_CC2500_WriteREG
 17422  1F59  0823               	movf	??_CC2500_WriteREG,w
 17423  1F5A  00FB               	movwf	_SPI0Buffer
 17424                           
 17425                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17426  1F5B  2F5F               	goto	l6433
 17427  1F5C                     l6431:	
 17428                           
 17429                           ;CC2500_B1.c: 255: Timeout_Counter();
 17430  1F5C  319D  25F4  319F   	fcall	_Timeout_Counter
 17431  1F5F                     l6433:	
 17432  1F5F  0020               	movlb	0	; select bank0
 17433  1F60  1E8E               	btfss	14,5	;volatile
 17434  1F61  2F65               	goto	l6437
 17435  1F62  0021               	movlb	1	; select bank1
 17436  1F63  1D2B               	btfss	(_myMain^(0+128)+11),2
 17437  1F64  2F5C               	goto	l6431
 17438  1F65                     l6437:	
 17439                           
 17440                           ;CC2500_B1.c: 256: };
 17441                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17442  1F65  319B  23AC  319F   	fcall	_set_TimeoutCleared
 17443                           
 17444                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17445  1F68  319D  25CC  319F   	fcall	_CC2500_WriteByte
 17446                           
 17447                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17448  1F6B  0020               	movlb	0	; select bank0
 17449  1F6C  0822               	movf	CC2500_WriteREG@value,w
 17450  1F6D  00A3               	movwf	??_CC2500_WriteREG
 17451  1F6E  0823               	movf	??_CC2500_WriteREG,w
 17452  1F6F  00FB               	movwf	_SPI0Buffer
 17453                           
 17454                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17455  1F70  319D  25CC         	fcall	_CC2500_WriteByte
 17456                           
 17457                           ;CC2500_B1.c: 262: RC0 = 1;
 17458  1F72  0020               	movlb	0	; select bank0
 17459  1F73  140E               	bsf	14,0	;volatile
 17460  1F74  0008               	return
 17461  1F75                     __end_of_CC2500_WriteREG:	
 17462                           
 17463                           	psect	text118
 17464  1C5C                     __ptext118:	
 17465 ;; *************** function _CC2500_FrequencyCabr *****************
 17466 ;; Defined at:
 17467 ;;		line 201 in file "../src/CC2500_B1.c"
 17468 ;; Parameters:    Size  Location     Type
 17469 ;;		None
 17470 ;; Auto vars:     Size  Location     Type
 17471 ;;		None
 17472 ;; Return value:  Size  Location     Type
 17473 ;;		None               void
 17474 ;; Registers used:
 17475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17476 ;; Tracked objects:
 17477 ;;		On entry : 0/0
 17478 ;;		On exit  : 0/0
 17479 ;;		Unchanged: 0/0
 17480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;Total ram usage:        0 bytes
 17486 ;; Hardware stack levels used:    1
 17487 ;; Hardware stack levels required when called:    7
 17488 ;; This function calls:
 17489 ;;		_CC2500_WriteCommand
 17490 ;;		_DelayTime_1us
 17491 ;; This function is called by:
 17492 ;;		_CC2500_PowerOnInitial
 17493 ;; This function uses a non-reentrant model
 17494 ;;
 17495                           
 17496                           
 17497                           ;psect for function _CC2500_FrequencyCabr
 17498  1C5C                     _CC2500_FrequencyCabr:	
 17499                           
 17500                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17501                           
 17502                           ;incstack = 0
 17503                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17504  1C5C  3033               	movlw	51
 17505  1C5D  319E  2662  319C   	fcall	_CC2500_WriteCommand
 17506                           
 17507                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17508  1C60  30E8               	movlw	232
 17509  1C61  0020               	movlb	0	; select bank0
 17510  1C62  00A0               	movwf	DelayTime_1us@count
 17511  1C63  3003               	movlw	3
 17512  1C64  00A1               	movwf	DelayTime_1us@count+1
 17513  1C65  3190  2070         	fcall	_DelayTime_1us
 17514  1C67  0008               	return
 17515  1C68                     __end_of_CC2500_FrequencyCabr:	
 17516                           
 17517                           	psect	text119
 17518  1070                     __ptext119:	
 17519 ;; *************** function _DelayTime_1us *****************
 17520 ;; Defined at:
 17521 ;;		line 320 in file "../src/CC2500_B1.c"
 17522 ;; Parameters:    Size  Location     Type
 17523 ;;  count           2    0[BANK0 ] int 
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;  j               2    4[BANK0 ] unsigned int 
 17526 ;;  i               2    2[BANK0 ] unsigned int 
 17527 ;; Return value:  Size  Location     Type
 17528 ;;		None               void
 17529 ;; Registers used:
 17530 ;;		wreg, status,2
 17531 ;; Tracked objects:
 17532 ;;		On entry : 0/0
 17533 ;;		On exit  : 0/0
 17534 ;;		Unchanged: 0/0
 17535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17536 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;Total ram usage:        6 bytes
 17541 ;; Hardware stack levels used:    1
 17542 ;; Hardware stack levels required when called:    5
 17543 ;; This function calls:
 17544 ;;		Nothing
 17545 ;; This function is called by:
 17546 ;;		_CC2500_PowerRST
 17547 ;;		_CC2500_FrequencyCabr
 17548 ;; This function uses a non-reentrant model
 17549 ;;
 17550                           
 17551                           
 17552                           ;psect for function _DelayTime_1us
 17553  1070                     _DelayTime_1us:	
 17554                           
 17555                           ;CC2500_B1.c: 321: unsigned int i, j;
 17556                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17560  1070  3001               	movlw	1
 17561  1071  0020               	movlb	0	; select bank0
 17562  1072  00A2               	movwf	DelayTime_1us@i
 17563  1073  3000               	movlw	0
 17564  1074  00A3               	movwf	DelayTime_1us@i+1
 17565  1075                     l348:	
 17566  1075  0821               	movf	DelayTime_1us@count+1,w
 17567  1076  0223               	subwf	DelayTime_1us@i+1,w
 17568  1077  1D03               	skipz
 17569  1078  287B               	goto	u5585
 17570  1079  0820               	movf	DelayTime_1us@count,w
 17571  107A  0222               	subwf	DelayTime_1us@i,w
 17572  107B                     u5585:	
 17573  107B  1803               	btfsc	3,0
 17574  107C  0008               	return
 17575                           
 17576                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17577  107D  01A4               	clrf	DelayTime_1us@j
 17578  107E  01A5               	clrf	DelayTime_1us@j+1
 17579  107F  3000               	movlw	0
 17580  1080  0225               	subwf	DelayTime_1us@j+1,w
 17581  1081  3002               	movlw	2
 17582  1082  1903               	skipnz
 17583  1083  0224               	subwf	DelayTime_1us@j,w
 17584  1084  1803               	btfsc	3,0
 17585  1085  2891               	goto	l6425
 17586  1086                     l6423:	
 17587  1086  3001               	movlw	1
 17588  1087  07A4               	addwf	DelayTime_1us@j,f
 17589  1088  3000               	movlw	0
 17590  1089  3DA5               	addwfc	DelayTime_1us@j+1,f
 17591  108A  3000               	movlw	0
 17592  108B  0225               	subwf	DelayTime_1us@j+1,w
 17593  108C  3002               	movlw	2
 17594  108D  1903               	skipnz
 17595  108E  0224               	subwf	DelayTime_1us@j,w
 17596  108F  1C03               	skipc
 17597  1090  2886               	goto	l6423
 17598  1091                     l6425:	
 17599  1091  3001               	movlw	1
 17600  1092  07A2               	addwf	DelayTime_1us@i,f
 17601  1093  3000               	movlw	0
 17602  1094  3DA3               	addwfc	DelayTime_1us@i+1,f
 17603  1095  2875               	goto	l348
 17604  1096                     __end_of_DelayTime_1us:	
 17605                           
 17606                           	psect	text120
 17607  1B90                     __ptext120:	
 17608 ;; *************** function _CC2500_ClearTXFIFO *****************
 17609 ;; Defined at:
 17610 ;;		line 187 in file "../src/CC2500_B1.c"
 17611 ;; Parameters:    Size  Location     Type
 17612 ;;		None
 17613 ;; Auto vars:     Size  Location     Type
 17614 ;;		None
 17615 ;; Return value:  Size  Location     Type
 17616 ;;		None               void
 17617 ;; Registers used:
 17618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17619 ;; Tracked objects:
 17620 ;;		On entry : 0/0
 17621 ;;		On exit  : 0/0
 17622 ;;		Unchanged: 0/0
 17623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;Total ram usage:        0 bytes
 17629 ;; Hardware stack levels used:    1
 17630 ;; Hardware stack levels required when called:    7
 17631 ;; This function calls:
 17632 ;;		_CC2500_WriteCommand
 17633 ;; This function is called by:
 17634 ;;		_CC2500_PowerOnInitial
 17635 ;; This function uses a non-reentrant model
 17636 ;;
 17637                           
 17638                           
 17639                           ;psect for function _CC2500_ClearTXFIFO
 17640  1B90                     _CC2500_ClearTXFIFO:	
 17641                           
 17642                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17643                           
 17644                           ;incstack = 0
 17645                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17646  1B90  303B               	movlw	59
 17647  1B91  319E  2662         	fcall	_CC2500_WriteCommand
 17648  1B93  0008               	return
 17649  1B94                     __end_of_CC2500_ClearTXFIFO:	
 17650                           
 17651                           	psect	text121
 17652  1B8C                     __ptext121:	
 17653 ;; *************** function _CC2500_ClearRXFIFO *****************
 17654 ;; Defined at:
 17655 ;;		line 194 in file "../src/CC2500_B1.c"
 17656 ;; Parameters:    Size  Location     Type
 17657 ;;		None
 17658 ;; Auto vars:     Size  Location     Type
 17659 ;;		None
 17660 ;; Return value:  Size  Location     Type
 17661 ;;		None               void
 17662 ;; Registers used:
 17663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17664 ;; Tracked objects:
 17665 ;;		On entry : 0/0
 17666 ;;		On exit  : 0/0
 17667 ;;		Unchanged: 0/0
 17668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;Total ram usage:        0 bytes
 17674 ;; Hardware stack levels used:    1
 17675 ;; Hardware stack levels required when called:    7
 17676 ;; This function calls:
 17677 ;;		_CC2500_WriteCommand
 17678 ;; This function is called by:
 17679 ;;		_CC2500_PowerOnInitial
 17680 ;; This function uses a non-reentrant model
 17681 ;;
 17682                           
 17683                           
 17684                           ;psect for function _CC2500_ClearRXFIFO
 17685  1B8C                     _CC2500_ClearRXFIFO:	
 17686                           
 17687                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17688                           
 17689                           ;incstack = 0
 17690                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17691  1B8C  303A               	movlw	58
 17692  1B8D  319E  2662         	fcall	_CC2500_WriteCommand
 17693  1B8F  0008               	return
 17694  1B90                     __end_of_CC2500_ClearRXFIFO:	
 17695                           
 17696                           	psect	text122
 17697  1E62                     __ptext122:	
 17698 ;; *************** function _CC2500_WriteCommand *****************
 17699 ;; Defined at:
 17700 ;;		line 285 in file "../src/CC2500_B1.c"
 17701 ;; Parameters:    Size  Location     Type
 17702 ;;  command         1    wreg     unsigned char 
 17703 ;; Auto vars:     Size  Location     Type
 17704 ;;  command         1    3[BANK0 ] unsigned char 
 17705 ;; Return value:  Size  Location     Type
 17706 ;;		None               void
 17707 ;; Registers used:
 17708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17709 ;; Tracked objects:
 17710 ;;		On entry : 0/0
 17711 ;;		On exit  : 0/0
 17712 ;;		Unchanged: 0/0
 17713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;Total ram usage:        2 bytes
 17719 ;; Hardware stack levels used:    1
 17720 ;; Hardware stack levels required when called:    6
 17721 ;; This function calls:
 17722 ;;		_CC2500_WriteByte
 17723 ;;		_Timeout_Counter
 17724 ;;		_set_TimeoutCleared
 17725 ;; This function is called by:
 17726 ;;		_CC2500_TxData
 17727 ;;		_CC2500_ClearTXFIFO
 17728 ;;		_CC2500_ClearRXFIFO
 17729 ;;		_CC2500_FrequencyCabr
 17730 ;;		_CC2500_SIDLEMode
 17731 ;;		_setRF_Main
 17732 ;;		_RF_RxDisable
 17733 ;; This function uses a non-reentrant model
 17734 ;;
 17735                           
 17736                           
 17737                           ;psect for function _CC2500_WriteCommand
 17738  1E62                     _CC2500_WriteCommand:	
 17739                           
 17740                           ;incstack = 0
 17741                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17742                           ;CC2500_WriteCommand@command stored from wreg
 17743  1E62  0020               	movlb	0	; select bank0
 17744  1E63  00A3               	movwf	CC2500_WriteCommand@command
 17745                           
 17746                           ;CC2500_B1.c: 286: RC0 = 0;
 17747  1E64  100E               	bcf	14,0	;volatile
 17748                           
 17749                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17750  1E65  0823               	movf	CC2500_WriteCommand@command,w
 17751  1E66  00A2               	movwf	??_CC2500_WriteCommand
 17752  1E67  0822               	movf	??_CC2500_WriteCommand,w
 17753  1E68  00FB               	movwf	_SPI0Buffer
 17754                           
 17755                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17756  1E69  2E6D               	goto	l6163
 17757  1E6A                     l6161:	
 17758                           
 17759                           ;CC2500_B1.c: 290: Timeout_Counter();
 17760  1E6A  319D  25F4  319E   	fcall	_Timeout_Counter
 17761  1E6D                     l6163:	
 17762  1E6D  0020               	movlb	0	; select bank0
 17763  1E6E  1E8E               	btfss	14,5	;volatile
 17764  1E6F  2E73               	goto	l6167
 17765  1E70  0021               	movlb	1	; select bank1
 17766  1E71  1D2B               	btfss	(_myMain^(0+128)+11),2
 17767  1E72  2E6A               	goto	l6161
 17768  1E73                     l6167:	
 17769                           
 17770                           ;CC2500_B1.c: 291: };
 17771                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17772  1E73  319B  23AC  319E   	fcall	_set_TimeoutCleared
 17773                           
 17774                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17775  1E76  319D  25CC         	fcall	_CC2500_WriteByte
 17776                           
 17777                           ;CC2500_B1.c: 295: RC0 = 1;
 17778  1E78  0020               	movlb	0	; select bank0
 17779  1E79  140E               	bsf	14,0	;volatile
 17780  1E7A  0008               	return
 17781  1E7B                     __end_of_CC2500_WriteCommand:	
 17782                           
 17783                           	psect	text123
 17784  1BAC                     __ptext123:	
 17785 ;; *************** function _set_TimeoutCleared *****************
 17786 ;; Defined at:
 17787 ;;		line 278 in file "../src/Main_B1.c"
 17788 ;; Parameters:    Size  Location     Type
 17789 ;;		None
 17790 ;; Auto vars:     Size  Location     Type
 17791 ;;		None
 17792 ;; Return value:  Size  Location     Type
 17793 ;;		None               void
 17794 ;; Registers used:
 17795 ;;		status,2
 17796 ;; Tracked objects:
 17797 ;;		On entry : 0/0
 17798 ;;		On exit  : 0/0
 17799 ;;		Unchanged: 0/0
 17800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;Total ram usage:        0 bytes
 17806 ;; Hardware stack levels used:    1
 17807 ;; Hardware stack levels required when called:    5
 17808 ;; This function calls:
 17809 ;;		Nothing
 17810 ;; This function is called by:
 17811 ;;		_CC2500_TxData
 17812 ;;		_CC2500_RxData
 17813 ;;		_CC2500_PowerRST
 17814 ;;		_CC2500_WriteREG
 17815 ;;		_CC2500_WriteCommand
 17816 ;;		_CC2500_ReadStatus
 17817 ;;		_getAD
 17818 ;;		_TouchPower
 17819 ;;		_CC2500_ReadREG
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           
 17824                           ;psect for function _set_TimeoutCleared
 17825  1BAC                     _set_TimeoutCleared:	
 17826                           
 17827                           ;Main_B1.c: 279: myMain.Timeout = 0;
 17828                           
 17829                           ;incstack = 0
 17830                           ; Regs used in _set_TimeoutCleared: [status,2]
 17831  1BAC  0021               	movlb	1	; select bank1
 17832  1BAD  112B               	bcf	(_myMain^(0+128)+11),2
 17833                           
 17834                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
 17835  1BAE  01AC               	clrf	(_myMain^(0+128)+12)
 17836  1BAF  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17837  1BB0  0008               	return
 17838  1BB1                     __end_of_set_TimeoutCleared:	
 17839                           
 17840                           	psect	text124
 17841  1DF4                     __ptext124:	
 17842 ;; *************** function _Timeout_Counter *****************
 17843 ;; Defined at:
 17844 ;;		line 269 in file "../src/Main_B1.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;		None
 17847 ;; Auto vars:     Size  Location     Type
 17848 ;;		None
 17849 ;; Return value:  Size  Location     Type
 17850 ;;		None               void
 17851 ;; Registers used:
 17852 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17853 ;; Tracked objects:
 17854 ;;		On entry : 0/0
 17855 ;;		On exit  : 0/0
 17856 ;;		Unchanged: 0/0
 17857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;Total ram usage:        0 bytes
 17863 ;; Hardware stack levels used:    1
 17864 ;; Hardware stack levels required when called:    5
 17865 ;; This function calls:
 17866 ;;		Nothing
 17867 ;; This function is called by:
 17868 ;;		_CC2500_TxData
 17869 ;;		_CC2500_RxData
 17870 ;;		_CC2500_PowerRST
 17871 ;;		_CC2500_WriteREG
 17872 ;;		_CC2500_WriteCommand
 17873 ;;		_CC2500_ReadStatus
 17874 ;;		_getAD
 17875 ;;		_TouchPower
 17876 ;;		_CC2500_ReadREG
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           
 17881                           ;psect for function _Timeout_Counter
 17882  1DF4                     _Timeout_Counter:	
 17883                           
 17884                           ;Main_B1.c: 270: myMain.Timeout_Counter++;
 17885                           
 17886                           ;incstack = 0
 17887                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17888  1DF4  3001               	movlw	1
 17889  1DF5  0021               	movlb	1	; select bank1
 17890  1DF6  07AC               	addwf	(_myMain^(0+128)+12),f
 17891  1DF7  3000               	movlw	0
 17892  1DF8  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17893                           
 17894                           ;Main_B1.c: 271: if (myMain.Timeout_Counter == 10000) {
 17895  1DF9  300C               	movlw	12
 17896  1DFA  3EA0               	addlw	_myMain& (0+255)
 17897  1DFB  0086               	movwf	6
 17898  1DFC  0187               	clrf	7
 17899  1DFD  3F40               	moviw [0]fsr1
 17900  1DFE  3A10               	xorlw	16
 17901  1DFF  1D03               	skipz
 17902  1E00  2E03               	goto	u5045
 17903  1E01  3F41               	moviw [1]fsr1
 17904  1E02  3A27               	xorlw	39
 17905  1E03                     u5045:	
 17906  1E03  1D03               	skipz
 17907  1E04  0008               	return
 17908                           
 17909                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17910  1E05  01AC               	clrf	(_myMain^(0+128)+12)
 17911  1E06  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17912                           
 17913                           ;Main_B1.c: 273: myMain.Timeout = 1;
 17914  1E07  152B               	bsf	(_myMain^(0+128)+11),2
 17915  1E08  0008               	return
 17916  1E09                     __end_of_Timeout_Counter:	
 17917                           
 17918                           	psect	text125
 17919  1DCC                     __ptext125:	
 17920 ;; *************** function _CC2500_WriteByte *****************
 17921 ;; Defined at:
 17922 ;;		line 219 in file "../src/CC2500_B1.c"
 17923 ;; Parameters:    Size  Location     Type
 17924 ;;		None
 17925 ;; Auto vars:     Size  Location     Type
 17926 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17927 ;; Return value:  Size  Location     Type
 17928 ;;		None               void
 17929 ;; Registers used:
 17930 ;;		wreg, status,2, status,0
 17931 ;; Tracked objects:
 17932 ;;		On entry : 0/0
 17933 ;;		On exit  : 0/0
 17934 ;;		Unchanged: 0/0
 17935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17940 ;;Total ram usage:        2 bytes
 17941 ;; Hardware stack levels used:    1
 17942 ;; Hardware stack levels required when called:    5
 17943 ;; This function calls:
 17944 ;;		Nothing
 17945 ;; This function is called by:
 17946 ;;		_CC2500_TxData
 17947 ;;		_CC2500_RxData
 17948 ;;		_CC2500_PowerRST
 17949 ;;		_CC2500_WriteREG
 17950 ;;		_CC2500_WriteCommand
 17951 ;;		_CC2500_ReadStatus
 17952 ;;		_CC2500_ReadREG
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           
 17957                           ;psect for function _CC2500_WriteByte
 17958  1DCC                     _CC2500_WriteByte:	
 17959                           
 17960                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17961                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17962                           
 17963                           ;incstack = 0
 17964                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17965  1DCC  0020               	movlb	0	; select bank0
 17966  1DCD  01A1               	clrf	CC2500_WriteByte@loop_a
 17967  1DCE                     L11:	
 17968  1DCE  3008               	movlw	8
 17969  1DCF  0221               	subwf	CC2500_WriteByte@loop_a,w
 17970  1DD0  1803               	btfsc	3,0
 17971  1DD1  0008               	return
 17972                           
 17973                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17974  1DD2  1FFB               	btfss	_SPI0Buffer,7
 17975  1DD3  2DD6               	goto	l304
 17976                           
 17977                           ;CC2500_B1.c: 223: RC4 = 1;
 17978  1DD4  160E               	bsf	14,4	;volatile
 17979  1DD5  2DD7               	goto	l305
 17980  1DD6                     l304:	
 17981                           
 17982                           ;CC2500_B1.c: 224: else
 17983                           ;CC2500_B1.c: 225: RC4 = 0;
 17984  1DD6  120E               	bcf	14,4	;volatile
 17985  1DD7                     l305:	
 17986                           
 17987                           ;CC2500_B1.c: 226: RC3 = 1;
 17988  1DD7  158E               	bsf	14,3	;volatile
 17989                           
 17990                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17991  1DD8  1003               	clrc
 17992  1DD9  0DFB               	rlf	_SPI0Buffer,f
 17993                           
 17994                           ;CC2500_B1.c: 228: RC3 = 0;
 17995  1DDA  118E               	bcf	14,3	;volatile
 17996  1DDB  3001               	movlw	1
 17997  1DDC  00A0               	movwf	??_CC2500_WriteByte
 17998  1DDD  0820               	movf	??_CC2500_WriteByte,w
 17999  1DDE  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18000  1DDF  2DCE               	goto	L11
 18001  1DE0                     __end_of_CC2500_WriteByte:	
 18002                           
 18003                           	psect	text126
 18004  14FA                     __ptext126:	
 18005 ;; *************** function _Buzzer_Main *****************
 18006 ;; Defined at:
 18007 ;;		line 46 in file "../src/Buzzer_B1.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;		None
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;		None
 18012 ;; Return value:  Size  Location     Type
 18013 ;;		None               void
 18014 ;; Registers used:
 18015 ;;		wreg, status,2, status,0
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18025 ;;Total ram usage:        1 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    5
 18028 ;; This function calls:
 18029 ;;		Nothing
 18030 ;; This function is called by:
 18031 ;;		_main
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           
 18036                           ;psect for function _Buzzer_Main
 18037  14FA                     _Buzzer_Main:	
 18038                           
 18039                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18040                           
 18041                           ;incstack = 0
 18042                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18043  14FA  0021               	movlb	1	; select bank1
 18044  14FB  1CAE               	btfss	_Buz1^(0+128),1
 18045  14FC  0008               	return
 18046                           
 18047                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18048  14FD  3001               	movlw	1
 18049  14FE  07AF               	addwf	(_Buz1^(0+128)+1),f
 18050  14FF  3000               	movlw	0
 18051  1500  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18052                           
 18053                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18054  1501  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18055  1502  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18056  1503  1D03               	skipz
 18057  1504  2D07               	goto	u7245
 18058  1505  0834               	movf	(_Buz1^(0+128)+6),w
 18059  1506  022F               	subwf	(_Buz1^(0+128)+1),w
 18060  1507                     u7245:	
 18061  1507  1C03               	skipc
 18062  1508  0008               	return
 18063                           
 18064                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18065  1509  01AF               	clrf	(_Buz1^(0+128)+1)
 18066  150A  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18067                           
 18068                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18069  150B  12AE               	bcf	_Buz1^(0+128),5
 18070  150C  0020               	movlb	0	; select bank0
 18071  150D  1D8D               	btfss	13,3	;volatile
 18072  150E  2D11               	goto	l7443
 18073  150F  0021               	movlb	1	; select bank1
 18074  1510  16AE               	bsf	_Buz1^(0+128),5
 18075  1511                     l7443:	
 18076                           
 18077                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18078  1511  0021               	movlb	1	; select bank1
 18079  1512  1AAE               	btfsc	_Buz1^(0+128),5
 18080  1513  2D3D               	goto	l94
 18081                           
 18082                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18083  1514  08B1               	movf	(_Buz1^(0+128)+3),f
 18084  1515  1D03               	skipz
 18085  1516  2D39               	goto	l95
 18086                           
 18087                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18088  1517  1DAE               	btfss	_Buz1^(0+128),3
 18089  1518  2D27               	goto	l96
 18090                           
 18091                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18092  1519  11AE               	bcf	_Buz1^(0+128),3
 18093                           
 18094                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18095  151A  0832               	movf	(_Buz1^(0+128)+4),w
 18096  151B  0020               	movlb	0	; select bank0
 18097  151C  00A0               	movwf	??_Buzzer_Main
 18098  151D  0820               	movf	??_Buzzer_Main,w
 18099  151E  0021               	movlb	1	; select bank1
 18100  151F  00B1               	movwf	(_Buz1^(0+128)+3)
 18101                           
 18102                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18103  1520  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18104  1521  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18105  1522  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18106  1523  0836               	movf	(_Buz1^(0+128)+8),w
 18107  1524  01B4               	clrf	(_Buz1^(0+128)+6)
 18108  1525  07B4               	addwf	(_Buz1^(0+128)+6),f
 18109                           
 18110                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18111  1526  0008               	return
 18112  1527                     l96:	
 18113  1527  1E2E               	btfss	_Buz1^(0+128),4
 18114  1528  2D37               	goto	l98
 18115                           
 18116                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18117  1529  122E               	bcf	_Buz1^(0+128),4
 18118                           
 18119                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18120  152A  0833               	movf	(_Buz1^(0+128)+5),w
 18121  152B  0020               	movlb	0	; select bank0
 18122  152C  00A0               	movwf	??_Buzzer_Main
 18123  152D  0820               	movf	??_Buzzer_Main,w
 18124  152E  0021               	movlb	1	; select bank1
 18125  152F  00B1               	movwf	(_Buz1^(0+128)+3)
 18126                           
 18127                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18128  1530  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18129  1531  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18130  1532  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18131  1533  0838               	movf	(_Buz1^(0+128)+10),w
 18132  1534  01B4               	clrf	(_Buz1^(0+128)+6)
 18133  1535  07B4               	addwf	(_Buz1^(0+128)+6),f
 18134                           
 18135                           ;Buzzer_B1.c: 62: } else {
 18136  1536  0008               	return
 18137  1537                     l98:	
 18138                           
 18139                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18140  1537  10AE               	bcf	_Buz1^(0+128),1
 18141                           
 18142                           ;Buzzer_B1.c: 64: }
 18143                           ;Buzzer_B1.c: 65: } else {
 18144  1538  0008               	return
 18145  1539                     l95:	
 18146                           
 18147                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18148  1539  16AE               	bsf	_Buz1^(0+128),5
 18149                           
 18150                           ;Buzzer_B1.c: 68: RB3 = 1;
 18151  153A  0020               	movlb	0	; select bank0
 18152  153B  158D               	bsf	13,3	;volatile
 18153                           
 18154                           ;Buzzer_B1.c: 69: }
 18155                           ;Buzzer_B1.c: 70: } else {
 18156  153C  0008               	return
 18157  153D                     l94:	
 18158                           
 18159                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18160  153D  12AE               	bcf	_Buz1^(0+128),5
 18161                           
 18162                           ;Buzzer_B1.c: 73: RB3 = 0;
 18163  153E  0020               	movlb	0	; select bank0
 18164  153F  118D               	bcf	13,3	;volatile
 18165                           
 18166                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18167  1540  3001               	movlw	1
 18168  1541  0021               	movlb	1	; select bank1
 18169  1542  02B1               	subwf	(_Buz1^(0+128)+3),f
 18170  1543  0008               	return
 18171  1544                     __end_of_Buzzer_Main:	
 18172                           
 18173                           	psect	text127
 18174  1B79                     __ptext127:	
 18175 ;; *************** function _Buzzer_Initialization *****************
 18176 ;; Defined at:
 18177 ;;		line 11 in file "../src/Buzzer_B1.c"
 18178 ;; Parameters:    Size  Location     Type
 18179 ;;		None
 18180 ;; Auto vars:     Size  Location     Type
 18181 ;;		None
 18182 ;; Return value:  Size  Location     Type
 18183 ;;		None               void
 18184 ;; Registers used:
 18185 ;;		None
 18186 ;; Tracked objects:
 18187 ;;		On entry : 0/0
 18188 ;;		On exit  : 0/0
 18189 ;;		Unchanged: 0/0
 18190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;Total ram usage:        0 bytes
 18196 ;; Hardware stack levels used:    1
 18197 ;; Hardware stack levels required when called:    5
 18198 ;; This function calls:
 18199 ;;		Nothing
 18200 ;; This function is called by:
 18201 ;;		_main
 18202 ;; This function uses a non-reentrant model
 18203 ;;
 18204                           
 18205                           
 18206                           ;psect for function _Buzzer_Initialization
 18207  1B79                     _Buzzer_Initialization:	
 18208                           
 18209                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18210                           
 18211                           ;incstack = 0
 18212                           ; Regs used in _Buzzer_Initialization: []
 18213  1B79  0021               	movlb	1	; select bank1
 18214  1B7A  142E               	bsf	_Buz1^(0+128),0
 18215  1B7B  0008               	return
 18216  1B7C                     __end_of_Buzzer_Initialization:	
 18217                           
 18218                           	psect	intentry
 18219  0004                     __pintentry:	
 18220 ;; *************** function _ISR *****************
 18221 ;; Defined at:
 18222 ;;		line 107 in file "../src/MCU_B1.c"
 18223 ;; Parameters:    Size  Location     Type
 18224 ;;		None
 18225 ;; Auto vars:     Size  Location     Type
 18226 ;;		None
 18227 ;; Return value:  Size  Location     Type
 18228 ;;		None               void
 18229 ;; Registers used:
 18230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18231 ;; Tracked objects:
 18232 ;;		On entry : 0/0
 18233 ;;		On exit  : 0/0
 18234 ;;		Unchanged: 0/0
 18235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18240 ;;Total ram usage:        1 bytes
 18241 ;; Hardware stack levels used:    1
 18242 ;; Hardware stack levels required when called:    4
 18243 ;; This function calls:
 18244 ;;		_IOC_ISR
 18245 ;;		_TMR1_ISR
 18246 ;; This function is called by:
 18247 ;;		Interrupt level 1
 18248 ;; This function uses a non-reentrant model
 18249 ;;
 18250                           
 18251  0004                     _ISR:	
 18252                           
 18253                           ;incstack = 0
 18254                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18255  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18256  0005  3180               	pagesel	$
 18257  0006  0020               	movlb	0	; select bank0
 18258  0007  087F               	movf	127,w
 18259  0008  00F7               	movwf	??_ISR
 18260                           
 18261                           ;MCU_B1.c: 109: IOC_ISR();
 18262  0009  319C  24BF  3180   	fcall	_IOC_ISR
 18263                           
 18264                           ;MCU_B1.c: 111: ;;
 18265                           ;MCU_B1.c: 113: TMR1_ISR();
 18266  000C  319F  27DC         	fcall	_TMR1_ISR
 18267  000E  0877               	movf	??_ISR,w
 18268  000F  0020               	movlb	0	; select bank0
 18269  0010  00FF               	movwf	127
 18270  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18271  0012  0009               	retfie
 18272  0013                     __end_of_ISR:	
 18273                           
 18274                           	psect	text129
 18275  1FDC                     __ptext129:	
 18276 ;; *************** function _TMR1_ISR *****************
 18277 ;; Defined at:
 18278 ;;		line 209 in file "../src/MCU_B1.c"
 18279 ;; Parameters:    Size  Location     Type
 18280 ;;		None
 18281 ;; Auto vars:     Size  Location     Type
 18282 ;;		None
 18283 ;; Return value:  Size  Location     Type
 18284 ;;		None               void
 18285 ;; Registers used:
 18286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18287 ;; Tracked objects:
 18288 ;;		On entry : 0/0
 18289 ;;		On exit  : 0/0
 18290 ;;		Unchanged: 0/0
 18291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18296 ;;Total ram usage:        0 bytes
 18297 ;; Hardware stack levels used:    1
 18298 ;; Hardware stack levels required when called:    2
 18299 ;; This function calls:
 18300 ;;		_setDimmerLights_IntrControl
 18301 ;; This function is called by:
 18302 ;;		_ISR
 18303 ;; This function uses a non-reentrant model
 18304 ;;
 18305                           
 18306                           
 18307                           ;psect for function _TMR1_ISR
 18308  1FDC                     _TMR1_ISR:	
 18309                           
 18310                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18311                           
 18312                           ;incstack = 0
 18313                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18314  1FDC  0021               	movlb	1	; select bank1
 18315  1FDD  1C11               	btfss	17,0	;volatile
 18316  1FDE  0008               	return
 18317  1FDF  0020               	movlb	0	; select bank0
 18318  1FE0  1C11               	btfss	17,0	;volatile
 18319  1FE1  0008               	return
 18320                           
 18321                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18322  1FE2  30FA               	movlw	250
 18323  1FE3  0097               	movwf	23	;volatile
 18324                           
 18325                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18326  1FE4  3038               	movlw	56
 18327  1FE5  0096               	movwf	22	;volatile
 18328                           
 18329                           ;MCU_B1.c: 214: TMR1IF = 0;
 18330  1FE6  1011               	bcf	17,0	;volatile
 18331                           
 18332                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18333  1FE7  3001               	movlw	1
 18334  1FE8  3183  232F  319F   	fcall	_setDimmerLights_IntrControl
 18335                           
 18336                           ;MCU_B1.c: 234: Timer1.Count++;
 18337  1FEB  3001               	movlw	1
 18338  1FEC  0021               	movlb	1	; select bank1
 18339  1FED  07C7               	addwf	(_Timer1^(0+128)+1),f
 18340  1FEE  3000               	movlw	0
 18341  1FEF  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 18342                           
 18343                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 18344  1FF0  3001               	movlw	1
 18345  1FF1  3EC6               	addlw	_Timer1& (0+255)
 18346  1FF2  0086               	movwf	6
 18347  1FF3  0187               	clrf	7
 18348  1FF4  3F40               	moviw [0]fsr1
 18349  1FF5  3A64               	xorlw	100
 18350  1FF6  1D03               	skipz
 18351  1FF7  2FFA               	goto	u740_25
 18352  1FF8  3F41               	moviw [1]fsr1
 18353  1FF9  3A00               	xorlw	0
 18354  1FFA                     u740_25:	
 18355  1FFA  1D03               	skipz
 18356  1FFB  0008               	return
 18357                           
 18358                           ;MCU_B1.c: 236: Timer1.Count = 0;
 18359  1FFC  01C7               	clrf	(_Timer1^(0+128)+1)
 18360  1FFD  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 18361                           
 18362                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 18363  1FFE  1446               	bsf	_Timer1^(0+128),0
 18364  1FFF  0008               	return
 18365  2000                     __end_of_TMR1_ISR:	
 18366                           
 18367                           	psect	text130
 18368  032F                     __ptext130:	
 18369 ;; *************** function _setDimmerLights_IntrControl *****************
 18370 ;; Defined at:
 18371 ;;		line 94 in file "../src/Dimmer_B1.c"
 18372 ;; Parameters:    Size  Location     Type
 18373 ;;  lights          1    wreg     unsigned char 
 18374 ;; Auto vars:     Size  Location     Type
 18375 ;;  lights          1    6[COMMON] unsigned char 
 18376 ;; Return value:  Size  Location     Type
 18377 ;;		None               void
 18378 ;; Registers used:
 18379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18380 ;; Tracked objects:
 18381 ;;		On entry : 0/0
 18382 ;;		On exit  : 0/0
 18383 ;;		Unchanged: 0/0
 18384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18389 ;;Total ram usage:        5 bytes
 18390 ;; Hardware stack levels used:    1
 18391 ;; Hardware stack levels required when called:    1
 18392 ;; This function calls:
 18393 ;;		_DimmerIntrPointSelect
 18394 ;; This function is called by:
 18395 ;;		_TMR1_ISR
 18396 ;; This function uses a non-reentrant model
 18397 ;;
 18398                           
 18399                           
 18400                           ;psect for function _setDimmerLights_IntrControl
 18401  032F                     _setDimmerLights_IntrControl:	
 18402                           
 18403                           ;incstack = 0
 18404                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18405                           ;setDimmerLights_IntrControl@lights stored from wreg
 18406  032F  00F6               	movwf	setDimmerLights_IntrControl@lights
 18407                           
 18408                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18409  0330  0876               	movf	setDimmerLights_IntrControl@lights,w
 18410  0331  319B  23FA  3183   	fcall	_DimmerIntrPointSelect
 18411                           
 18412                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18413  0334  0879               	movf	_DimmerLightsIntr,w
 18414  0335  0086               	movwf	6
 18415  0336  3001               	movlw	1	; select bank2/3
 18416  0337  0087               	movwf	7
 18417  0338  1C01               	btfss	1,0
 18418  0339  2B8B               	goto	i1l6867
 18419                           
 18420                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18421  033A  3001               	movlw	1
 18422  033B  00F2               	movwf	??_setDimmerLights_IntrControl
 18423  033C  0879               	movf	_DimmerLightsIntr,w
 18424  033D  3E03               	addlw	3
 18425  033E  0086               	movwf	6
 18426  033F  3001               	movlw	1	; select bank2/3
 18427  0340  0087               	movwf	7
 18428  0341  0872               	movf	??_setDimmerLights_IntrControl,w
 18429  0342  0781               	addwf	1,f
 18430                           
 18431                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18432                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18433  0343  0022               	movlb	2	; select bank2
 18434  0344  0840               	movf	(_Dimmer^(0+256)+2),w
 18435  0345  00F2               	movwf	??_setDimmerLights_IntrControl
 18436  0346  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18437  0347  09F2               	comf	??_setDimmerLights_IntrControl,f
 18438  0348  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18439  0349  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18440  034A  1903               	skipnz
 18441  034B  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18442  034C  0879               	movf	_DimmerLightsIntr,w
 18443  034D  3E04               	addlw	4
 18444  034E  0086               	movwf	6
 18445  034F  3001               	movlw	1	; select bank2/3
 18446  0350  0087               	movwf	7
 18447  0351  0801               	movf	1,w
 18448  0352  0772               	addwf	??_setDimmerLights_IntrControl,w
 18449  0353  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18450  0354  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18451  0355  1803               	skipnc
 18452  0356  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18453  0357  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18454  0358  0879               	movf	_DimmerLightsIntr,w
 18455  0359  3E03               	addlw	3
 18456  035A  0086               	movwf	6
 18457  035B  3001               	movlw	1	; select bank2/3
 18458  035C  0087               	movwf	7
 18459  035D  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18460  035E  3A80               	xorlw	128
 18461  035F  3C80               	sublw	128
 18462  0360  1D03               	skipz
 18463  0361  2B64               	goto	u620_25
 18464  0362  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18465  0363  0201               	subwf	1,w
 18466  0364                     u620_25:	
 18467  0364  1C03               	skipc
 18468  0365  0008               	return
 18469                           
 18470                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18471  0366  0879               	movf	_DimmerLightsIntr,w
 18472  0367  3E03               	addlw	3
 18473  0368  0086               	movwf	6
 18474  0369  3001               	movlw	1	; select bank2/3
 18475  036A  0087               	movwf	7
 18476  036B  0181               	clrf	1
 18477                           
 18478                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18479  036C  0879               	movf	_DimmerLightsIntr,w
 18480  036D  0086               	movwf	6
 18481  036E  3001               	movlw	1	; select bank2/3
 18482  036F  0087               	movwf	7
 18483  0370  1001               	bcf	1,0
 18484                           
 18485                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18486  0371  0879               	movf	_DimmerLightsIntr,w
 18487  0372  3E08               	addlw	8
 18488  0373  0086               	movwf	6
 18489  0374  3001               	movlw	1	; select bank2/3
 18490  0375  0087               	movwf	7
 18491  0376  1401               	bsf	1,0
 18492                           
 18493                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18494  0377  0879               	movf	_DimmerLightsIntr,w
 18495  0378  3E09               	addlw	9
 18496  0379  0086               	movwf	6
 18497  037A  3001               	movlw	1	; select bank2/3
 18498  037B  0087               	movwf	7
 18499  037C  1E01               	btfss	1,4
 18500  037D  0008               	return
 18501                           
 18502                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18503  037E  0879               	movf	_DimmerLightsIntr,w
 18504  037F  3E09               	addlw	9
 18505  0380  0086               	movwf	6
 18506  0381  3001               	movlw	1	; select bank2/3
 18507  0382  0087               	movwf	7
 18508  0383  1201               	bcf	1,4
 18509                           
 18510                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18511  0384  0876               	movf	setDimmerLights_IntrControl@lights,w
 18512  0385  3A01               	xorlw	1
 18513  0386  1D03               	skipz
 18514  0387  0008               	return
 18515                           
 18516                           ;Dimmer_B1.c: 244: RB1 = 0;
 18517  0388  0020               	movlb	0	; select bank0
 18518  0389  108D               	bcf	13,1	;volatile
 18519                           
 18520                           ;Dimmer_B1.c: 246: }
 18521                           ;Dimmer_B1.c: 253: }
 18522                           ;Dimmer_B1.c: 254: }
 18523                           ;Dimmer_B1.c: 255: } else {
 18524  038A  0008               	return
 18525  038B                     i1l6867:	
 18526                           
 18527                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18528  038B  0879               	movf	_DimmerLightsIntr,w
 18529  038C  3E08               	addlw	8
 18530  038D  0086               	movwf	6
 18531  038E  3001               	movlw	1	; select bank2/3
 18532  038F  0087               	movwf	7
 18533  0390  1C01               	btfss	1,0
 18534  0391  2C4F               	goto	i1l678
 18535                           
 18536                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18537  0392  0879               	movf	_DimmerLightsIntr,w
 18538  0393  3E08               	addlw	8
 18539  0394  0086               	movwf	6
 18540  0395  3001               	movlw	1	; select bank2/3
 18541  0396  0087               	movwf	7
 18542  0397  1001               	bcf	1,0
 18543                           
 18544                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18545  0398  0879               	movf	_DimmerLightsIntr,w
 18546  0399  0086               	movwf	6
 18547  039A  3001               	movlw	1	; select bank2/3
 18548  039B  0087               	movwf	7
 18549  039C  1C81               	btfss	1,1
 18550  039D  2C4F               	goto	i1l678
 18551                           
 18552                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18553  039E  3001               	movlw	1
 18554  039F  00F2               	movwf	??_setDimmerLights_IntrControl
 18555  03A0  0A79               	incf	_DimmerLightsIntr,w
 18556  03A1  0086               	movwf	6
 18557  03A2  3001               	movlw	1	; select bank2/3
 18558  03A3  0087               	movwf	7
 18559  03A4  0872               	movf	??_setDimmerLights_IntrControl,w
 18560  03A5  0781               	addwf	1,f
 18561                           
 18562                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18563  03A6  0A79               	incf	_DimmerLightsIntr,w
 18564  03A7  0086               	movwf	6
 18565  03A8  3001               	movlw	1	; select bank2/3
 18566  03A9  0087               	movwf	7
 18567  03AA  0879               	movf	_DimmerLightsIntr,w
 18568  03AB  3E02               	addlw	2
 18569  03AC  0084               	movwf	4
 18570  03AD  3001               	movlw	1	; select bank2/3
 18571  03AE  0085               	movwf	5
 18572  03AF  0800               	movf	0,w
 18573  03B0  0201               	subwf	1,w
 18574  03B1  1C03               	skipc
 18575  03B2  2C4F               	goto	i1l678
 18576                           
 18577                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18578  03B3  0A79               	incf	_DimmerLightsIntr,w
 18579  03B4  0086               	movwf	6
 18580  03B5  3001               	movlw	1	; select bank2/3
 18581  03B6  0087               	movwf	7
 18582  03B7  0181               	clrf	1
 18583                           
 18584                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18585  03B8  0879               	movf	_DimmerLightsIntr,w
 18586  03B9  0086               	movwf	6
 18587  03BA  3001               	movlw	1	; select bank2/3
 18588  03BB  0087               	movwf	7
 18589  03BC  1D81               	btfss	1,3
 18590  03BD  2C04               	goto	i1l6897
 18591                           
 18592                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18593  03BE  0879               	movf	_DimmerLightsIntr,w
 18594  03BF  0086               	movwf	6
 18595  03C0  3001               	movlw	1	; select bank2/3
 18596  03C1  0087               	movwf	7
 18597  03C2  1A01               	btfsc	1,4
 18598  03C3  2BE5               	goto	i1l6889
 18599                           
 18600                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(85*0.8))) {
 18601  03C4  0879               	movf	_DimmerLightsIntr,w
 18602  03C5  3E04               	addlw	4
 18603  03C6  0086               	movwf	6
 18604  03C7  3001               	movlw	1	; select bank2/3
 18605  03C8  0087               	movwf	7
 18606  03C9  3044               	movlw	68
 18607  03CA  0201               	subwf	1,w
 18608  03CB  1803               	skipnc
 18609  03CC  2BD6               	goto	i1l6885
 18610                           
 18611                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18612  03CD  3001               	movlw	1
 18613  03CE  00F2               	movwf	??_setDimmerLights_IntrControl
 18614  03CF  0879               	movf	_DimmerLightsIntr,w
 18615  03D0  3E04               	addlw	4
 18616  03D1  0086               	movwf	6
 18617  03D2  3001               	movlw	1	; select bank2/3
 18618  03D3  0087               	movwf	7
 18619  03D4  0872               	movf	??_setDimmerLights_IntrControl,w
 18620  03D5  0781               	addwf	1,f
 18621  03D6                     i1l6885:	
 18622                           
 18623                           ;Dimmer_B1.c: 266: }
 18624                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(85*0.8))) {
 18625  03D6  0879               	movf	_DimmerLightsIntr,w
 18626  03D7  3E04               	addlw	4
 18627  03D8  0086               	movwf	6
 18628  03D9  3001               	movlw	1	; select bank2/3
 18629  03DA  0087               	movwf	7
 18630  03DB  0801               	movf	1,w
 18631  03DC  3A44               	xorlw	68
 18632  03DD  1D03               	skipz
 18633  03DE  2C4F               	goto	i1l678
 18634                           
 18635                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18636  03DF  0879               	movf	_DimmerLightsIntr,w
 18637  03E0  0086               	movwf	6
 18638  03E1  3001               	movlw	1	; select bank2/3
 18639  03E2  0087               	movwf	7
 18640  03E3  1601               	bsf	1,4
 18641                           
 18642                           ;Dimmer_B1.c: 269: }
 18643                           ;Dimmer_B1.c: 270: } else {
 18644  03E4  2C4F               	goto	i1l678
 18645  03E5                     i1l6889:	
 18646                           
 18647                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18648  03E5  0879               	movf	_DimmerLightsIntr,w
 18649  03E6  3E04               	addlw	4
 18650  03E7  0086               	movwf	6
 18651  03E8  3001               	movlw	1	; select bank2/3
 18652  03E9  0087               	movwf	7
 18653  03EA  300D               	movlw	13
 18654  03EB  0201               	subwf	1,w
 18655  03EC  1C03               	skipc
 18656  03ED  2BF5               	goto	i1l6893
 18657                           
 18658                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18659  03EE  0879               	movf	_DimmerLightsIntr,w
 18660  03EF  3E04               	addlw	4
 18661  03F0  0086               	movwf	6
 18662  03F1  3001               	movlw	1	; select bank2/3
 18663  03F2  0087               	movwf	7
 18664  03F3  3001               	movlw	1
 18665  03F4  0281               	subwf	1,f
 18666  03F5                     i1l6893:	
 18667                           
 18668                           ;Dimmer_B1.c: 273: }
 18669                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18670  03F5  0879               	movf	_DimmerLightsIntr,w
 18671  03F6  3E04               	addlw	4
 18672  03F7  0086               	movwf	6
 18673  03F8  3001               	movlw	1	; select bank2/3
 18674  03F9  0087               	movwf	7
 18675  03FA  0801               	movf	1,w
 18676  03FB  3A0C               	xorlw	12
 18677  03FC  1D03               	skipz
 18678  03FD  2C4F               	goto	i1l678
 18679                           
 18680                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18681  03FE  0879               	movf	_DimmerLightsIntr,w
 18682  03FF  0086               	movwf	6
 18683  0400  3001               	movlw	1	; select bank2/3
 18684  0401  0087               	movwf	7
 18685  0402  1201               	bcf	1,4
 18686                           
 18687                           ;Dimmer_B1.c: 276: }
 18688                           ;Dimmer_B1.c: 277: }
 18689                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18690  0403  2C4F               	goto	i1l678
 18691  0404                     i1l6897:	
 18692  0404  0879               	movf	_DimmerLightsIntr,w
 18693  0405  0086               	movwf	6
 18694  0406  3001               	movlw	1	; select bank2/3
 18695  0407  0087               	movwf	7
 18696  0408  1D01               	btfss	1,2
 18697  0409  2C4F               	goto	i1l678
 18698                           
 18699                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18700  040A  0879               	movf	_DimmerLightsIntr,w
 18701  040B  3E04               	addlw	4
 18702  040C  0086               	movwf	6
 18703  040D  3001               	movlw	1	; select bank2/3
 18704  040E  0087               	movwf	7
 18705  040F  0879               	movf	_DimmerLightsIntr,w
 18706  0410  3E05               	addlw	5
 18707  0411  0084               	movwf	4
 18708  0412  3001               	movlw	1	; select bank2/3
 18709  0413  0085               	movwf	5
 18710  0414  0800               	movf	0,w
 18711  0415  0201               	subwf	1,w
 18712  0416  1803               	skipnc
 18713  0417  2C22               	goto	i1l6903
 18714                           
 18715                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18716  0418  3001               	movlw	1
 18717  0419  00F2               	movwf	??_setDimmerLights_IntrControl
 18718  041A  0879               	movf	_DimmerLightsIntr,w
 18719  041B  3E04               	addlw	4
 18720  041C  0086               	movwf	6
 18721  041D  3001               	movlw	1	; select bank2/3
 18722  041E  0087               	movwf	7
 18723  041F  0872               	movf	??_setDimmerLights_IntrControl,w
 18724  0420  0781               	addwf	1,f
 18725                           
 18726                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18727  0421  2C37               	goto	i1l6907
 18728  0422                     i1l6903:	
 18729  0422  0879               	movf	_DimmerLightsIntr,w
 18730  0423  3E05               	addlw	5
 18731  0424  0086               	movwf	6
 18732  0425  3001               	movlw	1	; select bank2/3
 18733  0426  0087               	movwf	7
 18734  0427  0879               	movf	_DimmerLightsIntr,w
 18735  0428  3E04               	addlw	4
 18736  0429  0084               	movwf	4
 18737  042A  3001               	movlw	1	; select bank2/3
 18738  042B  0085               	movwf	5
 18739  042C  0800               	movf	0,w
 18740  042D  0201               	subwf	1,w
 18741  042E  1803               	skipnc
 18742  042F  2C37               	goto	i1l6907
 18743                           
 18744                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18745  0430  0879               	movf	_DimmerLightsIntr,w
 18746  0431  3E04               	addlw	4
 18747  0432  0086               	movwf	6
 18748  0433  3001               	movlw	1	; select bank2/3
 18749  0434  0087               	movwf	7
 18750  0435  3001               	movlw	1
 18751  0436  0281               	subwf	1,f
 18752  0437                     i1l6907:	
 18753                           
 18754                           ;Dimmer_B1.c: 283: }
 18755                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18756  0437  0879               	movf	_DimmerLightsIntr,w
 18757  0438  3E05               	addlw	5
 18758  0439  0086               	movwf	6
 18759  043A  3001               	movlw	1	; select bank2/3
 18760  043B  0087               	movwf	7
 18761  043C  0879               	movf	_DimmerLightsIntr,w
 18762  043D  3E04               	addlw	4
 18763  043E  0084               	movwf	4
 18764  043F  3001               	movlw	1	; select bank2/3
 18765  0440  0085               	movwf	5
 18766  0441  0800               	movf	0,w
 18767  0442  0601               	xorwf	1,w
 18768  0443  1D03               	skipz
 18769  0444  2C4F               	goto	i1l678
 18770                           
 18771                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18772  0445  0879               	movf	_DimmerLightsIntr,w
 18773  0446  0086               	movwf	6
 18774  0447  3001               	movlw	1	; select bank2/3
 18775  0448  0087               	movwf	7
 18776  0449  1101               	bcf	1,2
 18777                           
 18778                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18779  044A  0879               	movf	_DimmerLightsIntr,w
 18780  044B  0086               	movwf	6
 18781  044C  3001               	movlw	1	; select bank2/3
 18782  044D  0087               	movwf	7
 18783  044E  1081               	bcf	1,1
 18784  044F                     i1l678:	
 18785                           
 18786                           ;Dimmer_B1.c: 287: }
 18787                           ;Dimmer_B1.c: 288: }
 18788                           ;Dimmer_B1.c: 289: }
 18789                           ;Dimmer_B1.c: 290: }
 18790                           ;Dimmer_B1.c: 291: }
 18791                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18792  044F  0879               	movf	_DimmerLightsIntr,w
 18793  0450  3E09               	addlw	9
 18794  0451  0086               	movwf	6
 18795  0452  3001               	movlw	1	; select bank2/3
 18796  0453  0087               	movwf	7
 18797  0454  1D81               	btfss	1,3
 18798  0455  0008               	return
 18799                           
 18800                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18801  0456  3001               	movlw	1
 18802  0457  00F2               	movwf	??_setDimmerLights_IntrControl
 18803  0458  0879               	movf	_DimmerLightsIntr,w
 18804  0459  3E0C               	addlw	12
 18805  045A  0086               	movwf	6
 18806  045B  3001               	movlw	1	; select bank2/3
 18807  045C  0087               	movwf	7
 18808  045D  0872               	movf	??_setDimmerLights_IntrControl,w
 18809  045E  0781               	addwf	1,f
 18810                           
 18811                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18812  045F  0879               	movf	_DimmerLightsIntr,w
 18813  0460  3E0C               	addlw	12
 18814  0461  0086               	movwf	6
 18815  0462  3001               	movlw	1	; select bank2/3
 18816  0463  0087               	movwf	7
 18817  0464  0801               	movf	1,w
 18818  0465  3A05               	xorlw	5
 18819  0466  1D03               	skipz
 18820  0467  0008               	return
 18821                           
 18822                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18823  0468  0879               	movf	_DimmerLightsIntr,w
 18824  0469  3E0C               	addlw	12
 18825  046A  0086               	movwf	6
 18826  046B  3001               	movlw	1	; select bank2/3
 18827  046C  0087               	movwf	7
 18828  046D  0181               	clrf	1
 18829                           
 18830                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18831  046E  0879               	movf	_DimmerLightsIntr,w
 18832  046F  3E09               	addlw	9
 18833  0470  0086               	movwf	6
 18834  0471  3001               	movlw	1	; select bank2/3
 18835  0472  0087               	movwf	7
 18836  0473  1181               	bcf	1,3
 18837  0474  0008               	return
 18838  0475                     __end_of_setDimmerLights_IntrControl:	
 18839                           
 18840                           	psect	text131
 18841  1BFA                     __ptext131:	
 18842 ;; *************** function _DimmerIntrPointSelect *****************
 18843 ;; Defined at:
 18844 ;;		line 72 in file "../src/Dimmer_B1.c"
 18845 ;; Parameters:    Size  Location     Type
 18846 ;;  lights          1    wreg     unsigned char 
 18847 ;; Auto vars:     Size  Location     Type
 18848 ;;  lights          1    1[COMMON] unsigned char 
 18849 ;; Return value:  Size  Location     Type
 18850 ;;		None               void
 18851 ;; Registers used:
 18852 ;;		wreg
 18853 ;; Tracked objects:
 18854 ;;		On entry : 0/0
 18855 ;;		On exit  : 0/0
 18856 ;;		Unchanged: 0/0
 18857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;Total ram usage:        2 bytes
 18863 ;; Hardware stack levels used:    1
 18864 ;; This function calls:
 18865 ;;		Nothing
 18866 ;; This function is called by:
 18867 ;;		_setDimmerLights_IntrControl
 18868 ;; This function uses a non-reentrant model
 18869 ;;
 18870                           
 18871                           
 18872                           ;psect for function _DimmerIntrPointSelect
 18873  1BFA                     _DimmerIntrPointSelect:	
 18874                           
 18875                           ;incstack = 0
 18876                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18877                           ;DimmerIntrPointSelect@lights stored from wreg
 18878  1BFA  00F1               	movwf	DimmerIntrPointSelect@lights
 18879                           
 18880                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18881  1BFB  0871               	movf	DimmerIntrPointSelect@lights,w
 18882  1BFC  3A01               	xorlw	1
 18883  1BFD  1D03               	skipz
 18884  1BFE  0008               	return
 18885                           
 18886                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18887  1BFF  30C5               	movlw	_DimmerLights1& (0+255)
 18888  1C00  00F0               	movwf	??_DimmerIntrPointSelect
 18889  1C01  0870               	movf	??_DimmerIntrPointSelect,w
 18890  1C02  00F9               	movwf	_DimmerLightsIntr
 18891  1C03  0008               	return
 18892  1C04                     __end_of_DimmerIntrPointSelect:	
 18893                           
 18894                           	psect	text132
 18895  1CBF                     __ptext132:	
 18896 ;; *************** function _IOC_ISR *****************
 18897 ;; Defined at:
 18898 ;;		line 400 in file "../src/MCU_B1.c"
 18899 ;; Parameters:    Size  Location     Type
 18900 ;;		None
 18901 ;; Auto vars:     Size  Location     Type
 18902 ;;		None
 18903 ;; Return value:  Size  Location     Type
 18904 ;;		None               void
 18905 ;; Registers used:
 18906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18907 ;; Tracked objects:
 18908 ;;		On entry : 0/0
 18909 ;;		On exit  : 0/0
 18910 ;;		Unchanged: 0/0
 18911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;Total ram usage:        0 bytes
 18917 ;; Hardware stack levels used:    1
 18918 ;; Hardware stack levels required when called:    3
 18919 ;; This function calls:
 18920 ;;		_setDimmerReClock
 18921 ;; This function is called by:
 18922 ;;		_ISR
 18923 ;; This function uses a non-reentrant model
 18924 ;;
 18925                           
 18926                           
 18927                           ;psect for function _IOC_ISR
 18928  1CBF                     _IOC_ISR:	
 18929                           
 18930                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18931                           
 18932                           ;incstack = 0
 18933                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18934  1CBF  1D8B               	btfss	11,3	;volatile
 18935  1CC0  0008               	return
 18936  1CC1  1C0B               	btfss	11,0	;volatile
 18937  1CC2  0008               	return
 18938  1CC3  0027               	movlb	7	; select bank7
 18939  1CC4  1D16               	btfss	22,2	;volatile
 18940  1CC5  0008               	return
 18941                           
 18942                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18943  1CC6  1116               	bcf	22,2	;volatile
 18944                           
 18945                           ;MCU_B1.c: 403: IOCIF = 0;
 18946  1CC7  100B               	bcf	11,0	;volatile
 18947                           
 18948                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18949  1CC8  0021               	movlb	1	; select bank1
 18950  1CC9  1C20               	btfss	_myMain^(0+128),0
 18951  1CCA  0008               	return
 18952                           
 18953                           ;MCU_B1.c: 407: setDimmerReClock();
 18954  1CCB  319B  2388         	fcall	_setDimmerReClock
 18955  1CCD  0008               	return
 18956  1CCE                     __end_of_IOC_ISR:	
 18957                           
 18958                           	psect	text133
 18959  1B88                     __ptext133:	
 18960 ;; *************** function _setDimmerReClock *****************
 18961 ;; Defined at:
 18962 ;;		line 243 in file "../src/MCU_B1.c"
 18963 ;; Parameters:    Size  Location     Type
 18964 ;;		None
 18965 ;; Auto vars:     Size  Location     Type
 18966 ;;		None
 18967 ;; Return value:  Size  Location     Type
 18968 ;;		None               void
 18969 ;; Registers used:
 18970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18971 ;; Tracked objects:
 18972 ;;		On entry : 0/0
 18973 ;;		On exit  : 0/0
 18974 ;;		Unchanged: 0/0
 18975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18980 ;;Total ram usage:        0 bytes
 18981 ;; Hardware stack levels used:    1
 18982 ;; Hardware stack levels required when called:    2
 18983 ;; This function calls:
 18984 ;;		_setDimmerLights_IntrIOC_GO
 18985 ;; This function is called by:
 18986 ;;		_IOC_ISR
 18987 ;; This function uses a non-reentrant model
 18988 ;;
 18989                           
 18990                           
 18991                           ;psect for function _setDimmerReClock
 18992  1B88                     _setDimmerReClock:	
 18993                           
 18994                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18995                           
 18996                           ;incstack = 0
 18997                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18998  1B88  3001               	movlw	1
 18999  1B89  3193  2378         	fcall	_setDimmerLights_IntrIOC_GO
 19000  1B8B  0008               	return
 19001  1B8C                     __end_of_setDimmerReClock:	
 19002                           
 19003                           	psect	text134
 19004  1378                     __ptext134:	
 19005 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19006 ;; Defined at:
 19007 ;;		line 28 in file "../src/Dimmer_B1.c"
 19008 ;; Parameters:    Size  Location     Type
 19009 ;;  lights          1    wreg     unsigned char 
 19010 ;; Auto vars:     Size  Location     Type
 19011 ;;  lights          1    2[COMMON] unsigned char 
 19012 ;; Return value:  Size  Location     Type
 19013 ;;		None               void
 19014 ;; Registers used:
 19015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19016 ;; Tracked objects:
 19017 ;;		On entry : 0/0
 19018 ;;		On exit  : 0/0
 19019 ;;		Unchanged: 0/0
 19020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19024 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19025 ;;Total ram usage:        1 bytes
 19026 ;; Hardware stack levels used:    1
 19027 ;; Hardware stack levels required when called:    1
 19028 ;; This function calls:
 19029 ;;		_DimmerIntrIOCPointSelect
 19030 ;; This function is called by:
 19031 ;;		_setDimmerReClock
 19032 ;; This function uses a non-reentrant model
 19033 ;;
 19034                           
 19035                           
 19036                           ;psect for function _setDimmerLights_IntrIOC_GO
 19037  1378                     _setDimmerLights_IntrIOC_GO:	
 19038                           
 19039                           ;incstack = 0
 19040                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19041                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19042  1378  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19043                           
 19044                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19045  1379  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19046  137A  319C  2404  3193   	fcall	_DimmerIntrIOCPointSelect
 19047                           
 19048                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19049  137D  0021               	movlb	1	; select bank1
 19050  137E  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19051  137F  0086               	movwf	6
 19052  1380  3001               	movlw	1	; select bank2/3
 19053  1381  0087               	movwf	7
 19054  1382  1801               	btfsc	1,0
 19055  1383  0008               	return
 19056  1384  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19057  1385  3E09               	addlw	9
 19058  1386  0086               	movwf	6
 19059  1387  3001               	movlw	1	; select bank2/3
 19060  1388  0087               	movwf	7
 19061  1389  1981               	btfsc	1,3
 19062  138A  0008               	return
 19063  138B  0020               	movlb	0	; select bank0
 19064  138C  190D               	btfsc	13,2	;volatile
 19065  138D  0008               	return
 19066                           
 19067                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19068  138E  0021               	movlb	1	; select bank1
 19069  138F  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19070  1390  0086               	movwf	6
 19071  1391  3001               	movlw	1	; select bank2/3
 19072  1392  0087               	movwf	7
 19073  1393  1401               	bsf	1,0
 19074                           
 19075                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19076  1394  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19077  1395  3E09               	addlw	9
 19078  1396  0086               	movwf	6
 19079  1397  3001               	movlw	1	; select bank2/3
 19080  1398  0087               	movwf	7
 19081  1399  1581               	bsf	1,3
 19082                           
 19083                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19084  139A  0022               	movlb	2	; select bank2
 19085  139B  01C0               	clrf	(_Dimmer^(0+256)+2)
 19086                           
 19087                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19088  139C  0021               	movlb	1	; select bank1
 19089  139D  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19090  139E  0086               	movwf	6
 19091  139F  3001               	movlw	1	; select bank2/3
 19092  13A0  0087               	movwf	7
 19093  13A1  1F01               	btfss	1,6
 19094  13A2  0008               	return
 19095                           
 19096                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19097  13A3  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19098  13A4  3E09               	addlw	9
 19099  13A5  0086               	movwf	6
 19100  13A6  3001               	movlw	1	; select bank2/3
 19101  13A7  0087               	movwf	7
 19102  13A8  1601               	bsf	1,4
 19103                           
 19104                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19105  13A9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19106  13AA  3A01               	xorlw	1
 19107  13AB  1D03               	skipz
 19108  13AC  0008               	return
 19109                           
 19110                           ;Dimmer_B1.c: 54: RB1 = 1;
 19111  13AD  0020               	movlb	0	; select bank0
 19112  13AE  148D               	bsf	13,1	;volatile
 19113  13AF  0008               	return
 19114  13B0                     __end_of_setDimmerLights_IntrIOC_GO:	
 19115                           
 19116                           	psect	text135
 19117  1C04                     __ptext135:	
 19118 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19119 ;; Defined at:
 19120 ;;		line 8 in file "../src/Dimmer_B1.c"
 19121 ;; Parameters:    Size  Location     Type
 19122 ;;  lights          1    wreg     unsigned char 
 19123 ;; Auto vars:     Size  Location     Type
 19124 ;;  lights          1    1[COMMON] unsigned char 
 19125 ;; Return value:  Size  Location     Type
 19126 ;;		None               void
 19127 ;; Registers used:
 19128 ;;		wreg
 19129 ;; Tracked objects:
 19130 ;;		On entry : 0/0
 19131 ;;		On exit  : 0/0
 19132 ;;		Unchanged: 0/0
 19133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19137 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19138 ;;Total ram usage:        2 bytes
 19139 ;; Hardware stack levels used:    1
 19140 ;; This function calls:
 19141 ;;		Nothing
 19142 ;; This function is called by:
 19143 ;;		_setDimmerLights_IntrIOC_GO
 19144 ;; This function uses a non-reentrant model
 19145 ;;
 19146                           
 19147                           
 19148                           ;psect for function _DimmerIntrIOCPointSelect
 19149  1C04                     _DimmerIntrIOCPointSelect:	
 19150                           
 19151                           ;incstack = 0
 19152                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19153                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19154  1C04  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19155                           
 19156                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19157  1C05  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19158  1C06  3A01               	xorlw	1
 19159  1C07  1D03               	skipz
 19160  1C08  0008               	return
 19161                           
 19162                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19163  1C09  30C5               	movlw	_DimmerLights1& (0+255)
 19164  1C0A  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19165  1C0B  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19166  1C0C  0021               	movlb	1	; select bank1
 19167  1C0D  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19168  1C0E  0008               	return
 19169  1C0F                     __end_of_DimmerIntrIOCPointSelect:	
 19170  007E                     btemp	set	126	;btemp
 19171  007E                     pic14e$flags	set	126
 19172  007E                     wtemp	set	126
 19173  007E                     wtemp0	set	126
 19174  0080                     wtemp1	set	128
 19175  0082                     wtemp2	set	130
 19176  0084                     wtemp3	set	132
 19177  0086                     wtemp4	set	134
 19178  0088                     wtemp5	set	136
 19179  007F                     wtemp6	set	127
 19180  007E                     ttemp	set	126
 19181  007E                     ttemp0	set	126
 19182  0081                     ttemp1	set	129
 19183  0084                     ttemp2	set	132
 19184  0087                     ttemp3	set	135
 19185  007F                     ttemp4	set	127
 19186  007E                     ltemp	set	126
 19187  007E                     ltemp0	set	126
 19188  0082                     ltemp1	set	130
 19189  0086                     ltemp2	set	134
 19190  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      79
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76052
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     445
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1448
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1448
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0    9271
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4946
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     332
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4097
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     690
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     690
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23078
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   23078
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22295
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1331
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   20780
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    6014
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1595
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   11659
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11458
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11392
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11348
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1180
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     712
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     712
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1097
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9804
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   21752
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   21361
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    9593
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   10349
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     348
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0    8846
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     173
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3246
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     646
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3173
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3173
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    1820
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1530
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     194
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     194
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     942
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Dec 06 16:27:49 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 16C7                                       l94 153D  
                                     l86 16DB                                       l95 1539  
                                     l96 1527                                       l98 1537  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F75  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1C46  
                 __end_of_setDelayOff_GO 08AE                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16EF  
                   _setDimmerLights_Line 1C68                             ___ftadd@sign 004B  
                                    l231 0A05                                      l304 1DD6  
                                    l305 1DD7                     _setDimmerLights_SwOn 13B0  
                                    l348 1075                                      l709 1195  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RA6 0066                                      _RC3 0073  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RF1 00BA                                      _ISR 0004  
                                    _WDT 00CB             getDimmerLights_Status@lights 0022  
                                    _Sw1 01D4                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1DE0                    _Buzzer_Initialization 1B79  
                        __end_of_ADC_Set 1BCF                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                   _setMain_Exception$3311 0039  
                        _setDimmerLights 0CCF                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FB9                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1CCE                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2100 1418                                     l2005 0646  
                                   l1206 158A                                     l2014 05C9  
                                   l2007 0594                                     l2016 0602  
                                   l2008 0596                                     l2009 059E  
                                   l2050 1CD3                                     l1183 12CE  
                                   l1433 11FA                                     l2074 1306  
                                   l2058 0D8F                 ?_DimmerLightsPointSelect 0070  
                                   l1428 11E3                                     l2068 0DE5  
                                   l1429 11FE                                     l1197 1164  
                                   l1543 01BA                                     l2088 096A  
                                   l1385 146C                                     l1546 007A  
                                   l2370 1E25                                     l1547 018A  
                                   l1548 0188                          __end_of_IOC_Set 1C98  
                                   l2384 1F04                                     l2394 0326  
                                   l2731 099E                                     l2396 01FF  
                         _Load_Main$3639 002D                                     l6103 161B  
                                   l2760 0514                                     l1688 0FFC  
                                   l6105 15F0                                     l2737 09B5  
                                   l6107 1621                                     l6035 11A8  
                                   l7101 17FA                                     l6207 11DE  
                                   l6135 0835                                     l6303 094F  
                                   l7031 1F1F                                     l6161 1E6A  
                                   l6217 11F5                                     l6209 11E7  
                                   l5505 09A3                                     l6401 0B96  
                                   l6313 09D3                                     l6153 1406  
                                   l7033 1F22                                     l6163 1E6D  
                                   l5523 1D79                                     l6243 1294  
                                   l6235 1280                                     l5507 09AB  
                                   l5603 0538                                     l6083 1E40  
                                   l6403 0BAE                                     l6315 09D6  
                                   l6139 0844                                     l6229 1277  
                                   l5541 1F80                                     l5613 0553  
                                   l6085 1E44                                     l6333 09ED  
                                   l7141 0F59                                     l7037 1F27  
                                   l6167 1E73                                     l6423 1086  
                                   l6431 1F5C                                     l5519 1D73  
                                   l5623 0DFF                                     l6503 0D1D  
                                   l7055 1560                                     l6183 1FA9  
                                   l6351 0A21                                     l6343 0A14  
                                   l6319 09DC                                     l6425 1091  
                                   l6433 1F5F                                     l5801 159D  
                                   l5553 049D                                     l7049 154B  
                                   l6177 1FA0                                     l6345 0A18  
                                   l6337 0A0B                                     l6281 090C  
                                   l7313 1E30                                     l5491 0974  
                                   l5563 04B3                                     l5651 0E6F  
                                   l5643 0E56                                     l5723 0C61  
                                   l6515 0D44                                     l6523 0B0D  
                                   l6179 1FA3                                     l6363 0B61  
                                   l6371 0B6D                                     l6347 0A1B  
                                   l6339 0A0E                                     l7227 05B5  
                                   l7083 17C3                                     l7075 17B0  
                                   l7403 0322                                     l7171 0FB2  
                  _setDimmerLights_SwOff 14B1                                     l6437 1F65  
                                   l5581 04E0                                     l5557 04A4  
                                   l5629 0E15                                     l5741 0C91  
                                   l6613 114C                                     l6381 0B7F  
                                   l6365 0B64                                     l6293 0931  
                                   l7261 05E7                                     l7309 1E2A  
                                   l7093 17E1                                     l7173 0FB4  
                                   l5807 15A8                                     l5495 097B  
                                   l5583 04EA                                     l5575 04CD  
                                   l5751 0CB5                                     l5743 0C9F  
                                   l5671 0EBE                                     l7263 05E9  
                                   l7343 022D                                     l7327 01EA  
                                   l7183 0FC9                                     l5833 15DF  
                                   l5825 15CE                                     l5817 15B0  
                                   l6481 1139                                     l5497 0985  
                                   l5593 0506                                     l5585 04EF  
                                   l5753 0CB8                                     l7425 1331  
                                   l7417 1313                                     l6385 0B85  
                                   l6369 0B6A                                     l5665 0EA8  
                                   l6297 0947                                     l6721 0DDB  
                                   l6705 0DAA                                     l7089 17D1  
                                   l7353 025F                                     l7185 0FCA  
                                   l7443 1511                                     l5819 15BC  
                                   l5499 098A                                     l5595 0510  
                                   l5587 04F3                                     l7419 131F  
                                   l6379 0B7C                                     l5683 0EF9  
                                   l6299 094B                                     l6715 0DD0  
                                   l7291 0634                                     l7099 17F1  
                                   l6547 1248                                     l5829 15D7  
                                   l6477 1134                                     l5757 0CC6  
                                   l5749 0CAC                                     l7429 133A  
                                   l6479 1118                                     l5599 0526  
                                   l7551 06BC                                     l5695 0F15  
                                   l5687 0F01                                     l7279 0613  
                                   l7367 029D                                     l7711 1455  
                                   l7703 1447                                     l5777 110F  
                                   l5881 0889                                     l7801 014D  
                                   l6657 1D59                                     l6681 0D7B  
                                   l6569 1C4E                                     l6745 1D6A  
                                   l7377 02CF                                     l6763 1492  
                                   l5883 0896                                     l5963 14E5  
                                   l7491 118F                                     l7803 0153  
                                   l5699 0F1D                                     l5947 13E6  
                                   l7651 0C0D                                     l7643 0BE8  
                                   l6773 14A2                                     l6765 1495  
                                   l5885 089F                                     l5877 0883  
                                   l5981 1794                                     l7493 1197  
                                   l7813 0168                                     l6693 0D92  
                                   l6775 14A5                                     l6943 1714  
                                   l7743 0069                                     l7671 0C42  
                                   l7655 0C15                                     l6769 149B  
                                   l6945 171A                                     l7489 118C  
                                   l6779 14AB                                     l6955 1742  
                                   l7771 00BF                                     l7765 0095  
                                   l7685 1369                    _myMain_Initialization 1CDD  
                                   l7863 01A8                                     l7795 0140  
                                   l7963 1662                                     l7887 1F0D  
                                   l7967 166D                                     _CFGS 0CAE  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4125 09BC  
                                   u4055 0980                                     u4075 0999  
                                   u5045 1E03                                     u4325 04F4  
                                   u5135 15F9                                     u4095 09A6  
                                   u4265 04CE                                     u4425 0E27  
                                   u4505 0ECA                                     u4355 0507  
                                   u4435 0E37                                     u4515 0EDA  
                                   _PEIE 005E                                     u4445 0E57  
                                   u4295 04E1                                     u4455 0E66  
                                   u4535 0F02                                     u4465 0E70  
                                   u4625 0C68                                     u4545 0F08  
                                   u4805 15BD                                     u7205 132A  
                                   u4815 15C7                                     u4735 10FB  
                                   u4655 0C92                                     u7215 1332  
                                   u4575 0F1E                                     u4825 15CF  
                                   u4585 0F24                                     u7245 1507  
                                   u4685 0CAD                                     u7175 1316  
                                   u5585 107B                                     u4785 15B3  
                                   u7195 1320                                     u5685 1121  
                                   u4990 1752                                     u7535 0BFB  
                                   u6905 0624                                     u6665 0F9A  
                                   u7625 1360                                     u4995 1750  
                                   u7475 12C5                                     u7635 136F  
                                   u7805 0100                                     u6685 0FBA  
                                   u6785 05AF                                     u7585 0C2F  
                                   u7675 1464                                     u7865 0159  
                                   _LWLO 0CAD                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00AE  
                                   _Load 0141                                     _Temp 00D7  
                                   _main 163E                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 090B                          __end_of_RF_Main 1B82  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1C3B  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B88                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 142D  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1CEC                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1BA8  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1C04  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EC  
                        __end_of___awdiv 15E6                          __end_of___ftadd 056B  
                        __end_of___ftdiv 0E91                          __end_of___ftneg 1BE8  
                        __end_of___ftmul 0F45                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0CCF  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1341  
                                  i1l678 044F                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0038  
                __end_of_Timeout_Counter 1E09                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 13B0               _setDimmerLights_IntrIOC_GO 1378  
                       __end_of_TMR1_ISR 2000             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 163E               _setDimmerLights_ErrorClose 15E6  
                       __end_of_TMR1_Set 1CA4                                    _getAD 1F14  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1DA6  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1D1C                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 113C            __end_of_setLED_Initialization 1D3D  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1748              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0A92  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 1696                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1BAC                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D58                     _setSw_Initialization 1D1C  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 090B  
                         _setMemory_Data 1C74                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1C25                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 08AE  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1F97                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 09CC                 _getMain_All_Error_Status 11CD  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1E97  
                                 i1l6903 0422                                   i1l6907 0437  
                                 i1l6867 038B                                   i1l6893 03F5  
                                 i1l6885 03D6                                   i1l6889 03E5  
                                 i1l6897 0404                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u620_25 0364  
                                 _OSCCON 0099                                   u740_25 1FFA  
                     __size_of_Load_Main 017D                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1E4A  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 0801           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1E1E                                   _Dimmer 013E  
                                 _DlySw1 01DD               __end_of_Mcu_Initialization 1D94  
                    __end_of_Buzzer_Main 1544                                   _Memory 01A0  
                                 _Timer1 00C6       __end_of_setDimmerLights_TriggerAdj 1EF4  
             _setDimmerLights_TriggerAdj 1ED4                                   ___bmul 1D70  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D5                                   _s_data 00D6  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 1268  
                                 _myMain 00A0                   __end_of_setMemory_Data 1C80  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 1696                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1BB6         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 0475  
            _setDimmerLights_IntrControl 032F                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1DCC  
            getMain_Lights_Count@status1 0023              getMain_Lights_Count@status2 0021  
            getMain_Lights_Count@status3 0022                    __end_of_SwPointSelect 1C5C  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 000B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1E1E  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0AF7  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003F  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$4885 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1F34  
                          __end_of_getAD 1F34                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1BA0                          _getSw_KeyStatus 1D5F  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1D0C                                ?_WDT_Main 0070  
                      __end_of_Load_Main 01C0                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 1111               __end_of_set_TimeoutCleared 1BB1  
               __end_of_setDimmerReClock 1B8C                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CE  
                   __size_of_setLED_Main 0033                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B82  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 14FA                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1B88                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1B98                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 163E                           _getDelayOff_GO 1CFC  
                    _CC2500_WriteCommand 1E62                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BC7                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1BCF                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1BC8  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1341  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1C46                       _setRFSW_AdjControl 13ED  
                                _IOC_ISR 1CBF                                  _IOC_Set 1C8C  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 129E                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 07E5              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 006A                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 0120                                  _RF_Main 1B7F  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1C30          __end_of_setControl_Lights_Table 096B  
                        setRF_Main@error 00EB                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 0A2D  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1C68                          __size_of_IO_Set 0018  
                      __end_of_getBuz_GO 1D4E                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1D0C  
         __end_of_getDimmerLights_Status 1CFC                        __end_of_getRxData 0DE8  
                __end_of_getSw_KeyStatus 1D70                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1C0F                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1EB5                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 1592                                  ___ftadd 0475  
                                ___ftdiv 0DE8                                  ___ftneg 1BDF  
                                ___ftmul 0E91                                  ___fttol 0C48  
                    __end_of_Switch_Main 1F14                                  ___lwdiv 130A  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1D4E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0036                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 142D  
                                __ptext2 1CDD                                  __ptext3 1341  
                                __ptext4 0BC7                                  __ptext5 1F14  
                                __ptext6 1D94                                  __ptext7 0002  
                                __ptext8 1B85                                  __ptext9 0F45  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1BFA                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12D4  
              __end_of_Flash_Memory_Read 07FF                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 056B                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B9C                        _DimmerLights_Main 116B  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1BBC  
             __end_of_CC2500_ClearRXFIFO 1B90                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B94            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1C25  
                    _DelayOffPointSelect 1C0F                           _getMain_LoadOK 1CB1  
                                clrloop0 1BC3           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1BFA                     end_of_initialization 003F  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 10BD  
                          _DelayTime_1us 1070                        __end_of_setTxData 07E5  
             __end_of_Flash_Memory_Write 116B                                  init_ram 1BBC  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1BBD  
                             _setSw_Main 01C0                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1F97  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1D2C  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B5D                            _CC2500_TxData 09CC  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1544                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1BE8  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 119B  
                     _Mcu_Initialization 1D82                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 146E                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1C30  
                __end_of_setPercentValue 0A92                   __end_of_getMain_LoadOK 1CBF  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 10E7  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0AF7                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1FB9                            ?_RF_RxDisable 0070  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1E62  
                   _setRF_Initialization 1C3B                       _setMemory_LoopSave 1DB9  
                            _Switch_Main 1EF4                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C1A  
                __end_of_getRF_KeyStatus 1D5F                        _setMain_Exception 17A4  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E09                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1D82  
               setMain_Exception@command 003C          _setDimmerLights_AdjControl$2113 0027  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1C04  
                      getSw_KeyStatus@sw 0070                        __size_of_TMR1_ISR 0024  
          __size_of_getDimmerLights_Line 000B                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 129E            __size_of_setDimmerLights_Line 000C  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 16EF  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1C5C  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0802  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 119B  
                        ?_LedPointSelect 0070                                _Load_Main 0043  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1BD7                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1ED4  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 1000                           ??_RF_RxDisable 0024  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1BAC  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 01E2                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 1800  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1B85  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00D3  
                            __pdataBANK4 0220                _getAll_DimmerLights_AdjGO 1066  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1200  
                       _CC2500_SIDLEMode 1B94               __size_of_DimmerLights_Main 0030  
              __end_of_setRF_DimmerValue 11CD                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1DA6                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E9  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01C5                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1E97                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 0004  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DF                           Load_Main@adjgo 002C  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 07FF  
                              _getBuz_GO 1D3D      __end_of_Flash_Memory_Initialization 0726  
            _Flash_Memory_Initialization 064A                                 ?___awdiv 0020  
                              __ptext100 1E97                                __ptext101 0851  
                              __ptext110 1BB6                                __ptext102 10E7  
                              __ptext111 1C0F                                __ptext103 1D70  
                              __ptext120 1B90                                __ptext112 1E09  
                              __ptext104 1CFC                                __ptext121 1B8C  
                              __ptext113 1B94                                __ptext105 1CEC  
                              __ptext130 032F                                __ptext122 1E62  
                              __ptext114 146E                                __ptext106 1C1A  
                              __ptext131 1BFA                                __ptext123 1BAC  
                              __ptext115 10BD                                __ptext107 1696  
                              __ptext132 1CBF                                __ptext124 1DF4  
                              __ptext116 1EB5                                __ptext108 1592  
                              __ptext133 1B88                                __ptext125 1DCC  
                              __ptext117 1F54                                __ptext109 1B98  
                               ?___ftadd 0041                                __ptext134 1378  
                              __ptext126 14FA                                __ptext118 1C5C  
                              __ptext135 1C04                                __ptext127 1B79  
                              __ptext119 1070                                __ptext129 1FDC  
                              _getRxData 0D58                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 0041  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0851  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B7C  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0020  
                     __end_of_TouchPower 1E33                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1FDC                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2089 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 14FA             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1CEC                           __size_of_getAD 0020  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1C51                      __end_of_setLED_Main 1233  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CF  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1B85  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1BA4                          SwPointSelect@sw 0021  
                              clear_ram0 1BC2                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 142D  
                              _setTxData 0726      __end_of_DimmerLights_Initialization 1CB1  
            _DimmerLights_Initialization 1CA4                       _CC2500_ClearRXFIFO 1B8C  
                     _CC2500_ClearTXFIFO 1B90           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1DF4                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 113C                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1FDC  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1C98  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C9  
                   __end_of_RF_RxDisable 1CDD                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1E7B                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1D94                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0021                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E9                    __size_of_setTemp_Main 00BB  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1C8C                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 130A                    _DlyOff_Initialization 1BB6  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1BA8                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0C48                       __end_of_getLoad_OK 1BD7  
                  _Switch_Initialization 1BF1        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1378                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1DCC                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D2  
                            ??_Temp_Main 002F                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$3321 0021            _getMain_All_Error_Status$3322 0023  
               __end_of_getDimmer_LoadOK 1BDF                      _Load_Initialization 1BB1  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0F45  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1F75  
                       ??_LedPointSelect 0020                                 ___ftpack 096B  
          __size_of_getMain_Lights_Count 0010                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002B                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1200               __end_of_setRF_DimmerLights 17A4  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020       __size_of_getAll_DimmerLights_AdjGO 000A  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 1B82                                 __ptext11 07FF  
                               __ptext20 1BF1                                 __ptext12 1EF4  
                               __ptext21 1D1C                                 __ptext13 01C0  
                               __ptext30 13B0                                 __ptext22 1E1E  
                               __ptext14 1DE0                                 __ptext31 13ED  
                               __ptext23 1B7F                                 __ptext15 1233  
                               __ptext40 09CC                                 __ptext32 119B  
                               __ptext24 056B                                 __ptext16 1D5F  
                               __ptext41 0B5D                                 __ptext33 1FB9  
                               __ptext25 0D58                                 __ptext17 1C51  
                               __ptext50 1C8C                                 __ptext42 1F97  
                               __ptext34 0A92                                 __ptext26 12D4  
                               __ptext18 17A4                                 __ptext51 1BA8  
                               __ptext43 1E33                                 __ptext35 0E91  
                               __ptext27 1DB9                                 __ptext19 1C46  
                               __ptext60 1E7B                                 __ptext52 1BC8  
                               __ptext44 1B7C                                 __ptext36 1DA6  
                               __ptext28 090B                                 __ptext61 1BA4  
                               __ptext53 0043                                 __ptext45 1C3B  
                               __ptext37 1D4E                                 __ptext29 0802  
                               __ptext70 113C                                 __ptext62 1200  
                               __ptext54 1CB1                                 __ptext46 1D82  
                               __ptext38 1D3D                                 __ptext71 1BE8  
                               __ptext63 1BA0                                 __ptext55 1BD7  
                               __ptext47 1C30                                 __ptext39 1CCE  
                               __ptext80 0C48                                 __ptext72 07E5  
                               __ptext64 1D2C                                 __ptext56 1D0C  
                               __ptext48 1C98                                 __ptext81 1BDF  
                               __ptext73 116B                                 __ptext65 129E  
                               __ptext57 1066                                 __ptext49 1E4A  
                               __ptext90 1111                                 __ptext82 0DE8  
                               __ptext74 16EF                                 __ptext66 1544  
                               __ptext58 130A                                 __ptext91 1BCF  
                               __ptext83 0475                                 __ptext75 0AF7  
                               __ptext67 1C80                                 __ptext59 1BB1  
                               __ptext92 1CA4                                 __ptext84 1F75  
                               __ptext76 0CCF                                 __ptext68 064A  
                               __ptext93 1096                                 __ptext85 096B  
                               __ptext77 0726                                 __ptext69 1C74  
                               __ptext94 0801                                 __ptext86 1268  
                               __ptext78 1748                                 __ptext95 1B9C  
                               __ptext87 1C25                                 __ptext79 0A2D  
                               __ptext96 08AE                                 __ptext88 1C68  
                               __ptext97 15E6                                 __ptext89 11CD  
                               __ptext98 14B1                                 __ptext99 1ED4  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1C51  
          __end_of_Dimmer_Initialization 0802             __end_of_setDimmerLights_Main 1748  
           __end_of_setDimmerLights_Line 1C74                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 13ED                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1DE0  
               __end_of_CC2500_SIDLEMode 1B98               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C1A               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00EA                __size_of_setDimmerReClock 0004  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1E33  
                     _CC2500_InitPATable 1EB5                 __end_of_setMemory_Modify 1DB9  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 064A  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EC  
                               main@argv 00EE                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$5829 0022                          _CC2500_PowerRST 146E  
               __size_of_getSw_KeyStatus 0011              __end_of_Flash_Memory_Modify 1592  
                      ??_getPercentValue 005C                              _setLog_Code 12D4  
            __end_of_Flash_Memory_Unlock 1BF1                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1F54                       __end_of_setSw_Main 032F  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 10E7  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1070  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10BD  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1096  
            __end_of_setDimmerLights_Adj 0B5D                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1B7C  
   __size_of_setDimmerLights_IntrControl 0146                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1C80                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1B9C  
    __size_of_setDimmerLights_IntrIOC_GO 0038      __size_of_setDimmerLights_ErrorClose 0058  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1BA0  
     __end_of_setDimmerLights_AdjControl 1268               _setDimmerLights_AdjControl 1233  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0851         __size_of_setControl_Lights_Table 0060  
                 __end_of_DelayTimejudge 1111     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1096  
                __end_of_CC2500_ReadByte 1E4A             __end_of_setSw_Initialization 1D2C  
                        _Timeout_Counter 1DF4          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005E                             _RF_RxDisable 1CCE  
             __end_of_LED_Initialization 1BA4         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 0800                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1B7F                    __end_of_CC2500_RxData 0BC7  
                  __end_of_CC2500_TxData 0A2D                    _setLoad_AH_AL_Restore 1E7B  
                __end_of_CC2500_PowerRST 14B1           getAll_DimmerLights_AdjGO@adjgo 0020  
